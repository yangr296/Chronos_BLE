
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	80 76 00 20 11 59 01 00 9f 4e 02 00 e5 58 01 00     .v. .Y...N...X..
	while (ad->len > 1) {
  10:	e5 58 01 00 e5 58 01 00 e5 58 01 00 00 00 00 00     .X...X...X......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	85 50 01 00 e5 58 01 00 00 00 00 00 f5 4f 01 00     .P...X.......O..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	e5 58 01 00                                         .X..

00000040 <_irq_vector_table>:
  40:	f5 51 01 00 c9 6a 02 00 f5 51 01 00 f5 51 01 00     .Q...j...Q...Q..
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
		data.data_len = len - 1;
		data.data = ad->data;
  60:	91 6a 02 00 f5 51 01 00 f5 51 01 00 af 6a 02 00     .j...Q...Q...j..

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
    if (!p_config->skip_gpio_cfg)
    {
        if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
        {
            nrf_gpio_pin_set(p_config->pseltxd);
            nrf_gpio_cfg_output(p_config->pseltxd);
  80:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
  90:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
  a0:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
        }
    }
    if (!p_config->skip_psel_cfg)
    {
        nrf_uarte_txrx_pins_set(p_instance->p_reg,
                                p_config->pseltxd, p_config->pselrxd);
  b0:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
    }

    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
  c0:	f5 51 01 00 f5 51 01 00 f5 51 01 00 f5 51 01 00     .Q...Q...Q...Q..
    {
        if (!p_config->skip_gpio_cfg)
        {
            if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
  d0:	f5 51 01 00 f5 51 01 00 f5 51 01 00                 .Q...Q...Q..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
            {
                nrf_gpio_pin_set(p_config->pselrts);
                nrf_gpio_cfg_output(p_config->pselrts);
      e4:	e002      	b.n	ec <__adddf3>
    nrf_gpio_cfg(
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
    reg->PIN_CNF[pin_number] = cnf;
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
            }
            if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
            {
                nrf_gpio_cfg_input(p_config->pselcts, NRF_GPIO_PIN_NOPULL);
            }
        }
        if (!p_config->skip_psel_cfg)
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
        {
            nrf_uarte_hwfc_pins_set(p_instance->p_reg,
                                    p_config->pselrts, p_config->pselcts);
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    p_reg->PSEL.CTS = pselcts;
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5

    apply_config(p_instance, p_config);

    apply_workaround_for_enable_anomaly(p_instance);

    p_cb->handler   = event_handler;
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
    p_cb->p_context = p_config->p_context;
     12e:	ea82 0000 	eor.w	r0, r2, r0

    if (p_cb->handler)
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDTX);
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
    nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ENDRX_MASK |
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    p_reg->INTENSET = mask;
     170:	ea94 0f05 	teq	r4, r5
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
     180:	db0d      	blt.n	19e <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xe>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
    p_cb->rx_buffer_length           = 0;
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
    p_cb->rx_secondary_buffer_length = 0;
     190:	fa03 f20e 	lsl.w	r2, r3, lr
    p_cb->tx_buffer_length           = 0;
     194:	1880      	adds	r0, r0, r2
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
}
     19c:	e00e      	b.n	1bc <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x2c>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
        return err_code;
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x42>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x68>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0xc>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x68>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x1a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x42>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x42>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xa8>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_BT_RX_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <__data_size+0x12>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     87a:	e712      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>

0000087c <__aeabi_uldivmod>:
     87c:	b953      	cbnz	r3, 894 <__z_interrupt_stack_SIZEOF+0x14>
     87e:	b94a      	cbnz	r2, 894 <__z_interrupt_stack_SIZEOF+0x14>
     880:	2900      	cmp	r1, #0
     882:	bf08      	it	eq
     884:	2800      	cmpeq	r0, #0
     886:	bf1c      	itt	ne
     888:	f04f 31ff 	movne.w	r1, #4294967295
     88c:	f04f 30ff 	movne.w	r0, #4294967295
     890:	f000 b80c 	b.w	8ac <__aeabi_idiv0>
     894:	f1ad 0c08 	sub.w	ip, sp, #8
     898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     89c:	f00c f8ba 	bl	ca14 <__udivmoddi4>
     8a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8a8:	b004      	add	sp, #16
     8aa:	4770      	bx	lr

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <ocrypto_bigint_add256>:
     8b0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8b4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     8b8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8bc:	185b      	adds	r3, r3, r1
     8be:	eb54 040c 	adcs.w	r4, r4, ip
     8c2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8c6:	414d      	adcs	r5, r1
     8c8:	eb56 060c 	adcs.w	r6, r6, ip
     8cc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8d0:	414f      	adcs	r7, r1
     8d2:	eb58 080c 	adcs.w	r8, r8, ip
     8d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8da:	eb59 0901 	adcs.w	r9, r9, r1
     8de:	eb5a 0a0c 	adcs.w	sl, sl, ip
     8e2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     8e6:	4180      	sbcs	r0, r0
     8e8:	3001      	adds	r0, #1
     8ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8ee:	4770      	bx	lr

000008f0 <ocrypto_bigint_sub256>:
     8f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8f4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     8f8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8fc:	1a5b      	subs	r3, r3, r1
     8fe:	eb74 040c 	sbcs.w	r4, r4, ip
     902:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     906:	418d      	sbcs	r5, r1
     908:	eb76 060c 	sbcs.w	r6, r6, ip
     90c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     910:	418f      	sbcs	r7, r1
     912:	eb78 080c 	sbcs.w	r8, r8, ip
     916:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     91a:	eb79 0901 	sbcs.w	r9, r9, r1
     91e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     922:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     926:	4180      	sbcs	r0, r0
     928:	4240      	negs	r0, r0
     92a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     92e:	4770      	bx	lr

00000930 <ocrypto_bigint_cadd256>:
     930:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     934:	4252      	negs	r2, r2
     936:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     93a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     93e:	4017      	ands	r7, r2
     940:	19db      	adds	r3, r3, r7
     942:	ea18 0802 	ands.w	r8, r8, r2
     946:	eb54 0408 	adcs.w	r4, r4, r8
     94a:	ea19 0902 	ands.w	r9, r9, r2
     94e:	eb55 0509 	adcs.w	r5, r5, r9
     952:	ea1a 0a02 	ands.w	sl, sl, r2
     956:	eb56 060a 	adcs.w	r6, r6, sl
     95a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     95c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     960:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     964:	4017      	ands	r7, r2
     966:	417b      	adcs	r3, r7
     968:	ea18 0802 	ands.w	r8, r8, r2
     96c:	eb54 0408 	adcs.w	r4, r4, r8
     970:	ea19 0902 	ands.w	r9, r9, r2
     974:	eb55 0509 	adcs.w	r5, r5, r9
     978:	ea1a 0a02 	ands.w	sl, sl, r2
     97c:	eb56 060a 	adcs.w	r6, r6, sl
     980:	c078      	stmia	r0!, {r3, r4, r5, r6}
     982:	4180      	sbcs	r0, r0
     984:	3001      	adds	r0, #1
     986:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     98a:	4770      	bx	lr

0000098c <ocrypto_bigint_csub256>:
     98c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     990:	4252      	negs	r2, r2
     992:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     996:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     99a:	4017      	ands	r7, r2
     99c:	1bdb      	subs	r3, r3, r7
     99e:	ea18 0802 	ands.w	r8, r8, r2
     9a2:	eb74 0408 	sbcs.w	r4, r4, r8
     9a6:	ea19 0902 	ands.w	r9, r9, r2
     9aa:	eb75 0509 	sbcs.w	r5, r5, r9
     9ae:	ea1a 0a02 	ands.w	sl, sl, r2
     9b2:	eb76 060a 	sbcs.w	r6, r6, sl
     9b6:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9b8:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     9bc:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     9c0:	4017      	ands	r7, r2
     9c2:	41bb      	sbcs	r3, r7
     9c4:	ea18 0802 	ands.w	r8, r8, r2
     9c8:	eb74 0408 	sbcs.w	r4, r4, r8
     9cc:	ea19 0902 	ands.w	r9, r9, r2
     9d0:	eb75 0509 	sbcs.w	r5, r5, r9
     9d4:	ea1a 0a02 	ands.w	sl, sl, r2
     9d8:	eb76 060a 	sbcs.w	r6, r6, sl
     9dc:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9de:	4180      	sbcs	r0, r0
     9e0:	4240      	negs	r0, r0
     9e2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9e6:	4770      	bx	lr

000009e8 <ocrypto_bigint_cswap256>:
     9e8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     9ec:	4252      	negs	r2, r2
     9ee:	f04f 0804 	mov.w	r8, #4

000009f2 <cswap256_loop>:
     9f2:	e890 0030 	ldmia.w	r0, {r4, r5}
     9f6:	e891 00c0 	ldmia.w	r1, {r6, r7}
     9fa:	1ba3      	subs	r3, r4, r6
     9fc:	4013      	ands	r3, r2
     9fe:	1ae4      	subs	r4, r4, r3
     a00:	18f6      	adds	r6, r6, r3
     a02:	1beb      	subs	r3, r5, r7
     a04:	4013      	ands	r3, r2
     a06:	1aed      	subs	r5, r5, r3
     a08:	18ff      	adds	r7, r7, r3
     a0a:	c030      	stmia	r0!, {r4, r5}
     a0c:	c1c0      	stmia	r1!, {r6, r7}
     a0e:	f1b8 0801 	subs.w	r8, r8, #1
     a12:	d1ee      	bne.n	9f2 <cswap256_loop>
     a14:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     a18:	4770      	bx	lr
     a1a:	bf00      	nop

00000a1c <ocrypto_mul256_noframe>:
     a1c:	b500      	push	{lr}
     a1e:	ec92 0a08 	vldmia	r2, {s0-s7}
     a22:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     a26:	ee07 1a10 	vmov	s14, r1
     a2a:	ec53 2a10 	vmov	r2, r3, s0, s1
     a2e:	ec56 4a11 	vmov	r4, r6, s2, s3
     a32:	fba7 5102 	umull	r5, r1, r7, r2
     a36:	fba8 0b02 	umull	r0, fp, r8, r2
     a3a:	fbe7 1063 	umaal	r1, r0, r7, r3
     a3e:	fbe9 b062 	umaal	fp, r0, r9, r2
     a42:	ec41 5a14 	vmov	s8, s9, r5, r1
     a46:	fba8 5103 	umull	r5, r1, r8, r3
     a4a:	fbea 0162 	umaal	r0, r1, sl, r2
     a4e:	fbe7 b564 	umaal	fp, r5, r7, r4
     a52:	fbe7 0566 	umaal	r0, r5, r7, r6
     a56:	fbe8 1566 	umaal	r1, r5, r8, r6
     a5a:	ee05 ba10 	vmov	s10, fp
     a5e:	fba9 b603 	umull	fp, r6, r9, r3
     a62:	fbea 1663 	umaal	r1, r6, sl, r3
     a66:	fbec 5663 	umaal	r5, r6, ip, r3
     a6a:	fbe8 0b64 	umaal	r0, fp, r8, r4
     a6e:	fbe9 1b64 	umaal	r1, fp, r9, r4
     a72:	fbea 5b64 	umaal	r5, fp, sl, r4
     a76:	fbec 6b64 	umaal	r6, fp, ip, r4
     a7a:	ee05 0a90 	vmov	s11, r0
     a7e:	fbac 3002 	umull	r3, r0, ip, r2
     a82:	ee12 4a10 	vmov	r4, s4
     a86:	fbee 5062 	umaal	r5, r0, lr, r2
     a8a:	fbe9 6064 	umaal	r6, r0, r9, r4
     a8e:	fbea b064 	umaal	fp, r0, sl, r4
     a92:	fbe7 3164 	umaal	r3, r1, r7, r4
     a96:	fbe8 5164 	umaal	r5, r1, r8, r4
     a9a:	ee12 4a90 	vmov	r4, s5
     a9e:	fbe8 6164 	umaal	r6, r1, r8, r4
     aa2:	fbe9 b164 	umaal	fp, r1, r9, r4
     aa6:	fbea 0164 	umaal	r0, r1, sl, r4
     aaa:	ee06 3a10 	vmov	s12, r3
     aae:	fba7 3204 	umull	r3, r2, r7, r4
     ab2:	ee13 4a10 	vmov	r4, s6
     ab6:	fbe7 6264 	umaal	r6, r2, r7, r4
     aba:	fbe8 b264 	umaal	fp, r2, r8, r4
     abe:	fbe9 0264 	umaal	r0, r2, r9, r4
     ac2:	fbea 1264 	umaal	r1, r2, sl, r4
     ac6:	ee11 4a90 	vmov	r4, s3
     aca:	fbe9 5364 	umaal	r5, r3, r9, r4
     ace:	fbea 6364 	umaal	r6, r3, sl, r4
     ad2:	ee13 4a90 	vmov	r4, s7
     ad6:	fbe7 b364 	umaal	fp, r3, r7, r4
     ada:	fbe8 0364 	umaal	r0, r3, r8, r4
     ade:	fbe9 1364 	umaal	r1, r3, r9, r4
     ae2:	fbea 2364 	umaal	r2, r3, sl, r4
     ae6:	ee06 5a90 	vmov	s13, r5
     aea:	ee17 9a10 	vmov	r9, s14
     aee:	e899 0600 	ldmia.w	r9, {r9, sl}
     af2:	ee10 8a10 	vmov	r8, s0
     af6:	fba9 5408 	umull	r5, r4, r9, r8
     afa:	fbea b468 	umaal	fp, r4, sl, r8
     afe:	ee12 8a10 	vmov	r8, s4
     b02:	fbec 0468 	umaal	r0, r4, ip, r8
     b06:	fbee 1468 	umaal	r1, r4, lr, r8
     b0a:	fbe9 2468 	umaal	r2, r4, r9, r8
     b0e:	fbea 3468 	umaal	r3, r4, sl, r8
     b12:	ee10 8a90 	vmov	r8, s1
     b16:	fbee 6568 	umaal	r6, r5, lr, r8
     b1a:	fbe9 b568 	umaal	fp, r5, r9, r8
     b1e:	fbea 0568 	umaal	r0, r5, sl, r8
     b22:	ee12 8a90 	vmov	r8, s5
     b26:	fbec 1568 	umaal	r1, r5, ip, r8
     b2a:	fbee 2568 	umaal	r2, r5, lr, r8
     b2e:	fbe9 3568 	umaal	r3, r5, r9, r8
     b32:	fbea 4568 	umaal	r4, r5, sl, r8
     b36:	ee07 6a10 	vmov	s14, r6
     b3a:	ee11 8a10 	vmov	r8, s2
     b3e:	fbae 7608 	umull	r7, r6, lr, r8
     b42:	fbe9 0668 	umaal	r0, r6, r9, r8
     b46:	fbea 1668 	umaal	r1, r6, sl, r8
     b4a:	ee13 8a10 	vmov	r8, s6
     b4e:	fbec 2668 	umaal	r2, r6, ip, r8
     b52:	fbee 3668 	umaal	r3, r6, lr, r8
     b56:	fbe9 4668 	umaal	r4, r6, r9, r8
     b5a:	fbea 5668 	umaal	r5, r6, sl, r8
     b5e:	ee11 8a90 	vmov	r8, s3
     b62:	fbec b768 	umaal	fp, r7, ip, r8
     b66:	fbee 0768 	umaal	r0, r7, lr, r8
     b6a:	fbe9 1768 	umaal	r1, r7, r9, r8
     b6e:	fbea 2768 	umaal	r2, r7, sl, r8
     b72:	ee13 8a90 	vmov	r8, s7
     b76:	fbec 3768 	umaal	r3, r7, ip, r8
     b7a:	fbee 4768 	umaal	r4, r7, lr, r8
     b7e:	fbe9 5768 	umaal	r5, r7, r9, r8
     b82:	fbea 6768 	umaal	r6, r7, sl, r8
     b86:	bd00      	pop	{pc}

00000b88 <ocrypto_bigint_mul256>:
     b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b8c:	ee07 0a90 	vmov	s15, r0
     b90:	f7ff ff44 	bl	a1c <ocrypto_mul256_noframe>
     b94:	ee17 8a90 	vmov	r8, s15
     b98:	ee07 ba90 	vmov	s15, fp
     b9c:	eca8 4a08 	vstmia	r8!, {s8-s15}
     ba0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ba8 <ocrypto_sqr256_noframe>:
     ba8:	b500      	push	{lr}
     baa:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     bae:	fba3 5203 	umull	r5, r2, r3, r3
     bb2:	fba3 0104 	umull	r0, r1, r3, r4
     bb6:	fbe3 2064 	umaal	r2, r0, r3, r4
     bba:	fbe3 1067 	umaal	r1, r0, r3, r7
     bbe:	ec42 5a14 	vmov	s8, s9, r5, r2
     bc2:	fba3 5207 	umull	r5, r2, r3, r7
     bc6:	fbe3 0268 	umaal	r0, r2, r3, r8
     bca:	fbe4 1564 	umaal	r1, r5, r4, r4
     bce:	fbe3 0568 	umaal	r0, r5, r3, r8
     bd2:	fbe3 2569 	umaal	r2, r5, r3, r9
     bd6:	fba4 b607 	umull	fp, r6, r4, r7
     bda:	fbe3 2669 	umaal	r2, r6, r3, r9
     bde:	fbe3 566a 	umaal	r5, r6, r3, sl
     be2:	fbe4 0b67 	umaal	r0, fp, r4, r7
     be6:	fbe4 2b68 	umaal	r2, fp, r4, r8
     bea:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     bee:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     bf2:	ec40 1a15 	vmov	s10, s11, r1, r0
     bf6:	fba4 1008 	umull	r1, r0, r4, r8
     bfa:	fbe4 5069 	umaal	r5, r0, r4, r9
     bfe:	fbe3 606c 	umaal	r6, r0, r3, ip
     c02:	fbe3 b06e 	umaal	fp, r0, r3, lr
     c06:	fbe7 2167 	umaal	r2, r1, r7, r7
     c0a:	fbe4 5169 	umaal	r5, r1, r4, r9
     c0e:	fbe4 616a 	umaal	r6, r1, r4, sl
     c12:	fbe3 b16e 	umaal	fp, r1, r3, lr
     c16:	fbe4 016e 	umaal	r0, r1, r4, lr
     c1a:	ee06 2a10 	vmov	s12, r2
     c1e:	fba7 3208 	umull	r3, r2, r7, r8
     c22:	fbe4 626a 	umaal	r6, r2, r4, sl
     c26:	fbe4 b26c 	umaal	fp, r2, r4, ip
     c2a:	fbe4 026e 	umaal	r0, r2, r4, lr
     c2e:	fbe7 126e 	umaal	r1, r2, r7, lr
     c32:	fbe7 5368 	umaal	r5, r3, r7, r8
     c36:	fbe7 6369 	umaal	r6, r3, r7, r9
     c3a:	fbe4 b36c 	umaal	fp, r3, r4, ip
     c3e:	fbe7 036c 	umaal	r0, r3, r7, ip
     c42:	fbe7 136e 	umaal	r1, r3, r7, lr
     c46:	fbe8 236e 	umaal	r2, r3, r8, lr
     c4a:	ee06 5a90 	vmov	s13, r5
     c4e:	fba7 5409 	umull	r5, r4, r7, r9
     c52:	fbe7 b46a 	umaal	fp, r4, r7, sl
     c56:	fbe7 046c 	umaal	r0, r4, r7, ip
     c5a:	fbe8 146c 	umaal	r1, r4, r8, ip
     c5e:	fbe8 246e 	umaal	r2, r4, r8, lr
     c62:	fbe9 346e 	umaal	r3, r4, r9, lr
     c66:	fbe8 6568 	umaal	r6, r5, r8, r8
     c6a:	fbe7 b56a 	umaal	fp, r5, r7, sl
     c6e:	fbe8 056a 	umaal	r0, r5, r8, sl
     c72:	fbe8 156c 	umaal	r1, r5, r8, ip
     c76:	fbe9 256c 	umaal	r2, r5, r9, ip
     c7a:	fbe9 356e 	umaal	r3, r5, r9, lr
     c7e:	fbea 456e 	umaal	r4, r5, sl, lr
     c82:	ee07 6a10 	vmov	s14, r6
     c86:	fba8 7609 	umull	r7, r6, r8, r9
     c8a:	fbe8 066a 	umaal	r0, r6, r8, sl
     c8e:	fbe9 166a 	umaal	r1, r6, r9, sl
     c92:	fbe9 266c 	umaal	r2, r6, r9, ip
     c96:	fbea 366c 	umaal	r3, r6, sl, ip
     c9a:	fbea 466e 	umaal	r4, r6, sl, lr
     c9e:	fbec 566e 	umaal	r5, r6, ip, lr
     ca2:	fbe8 b769 	umaal	fp, r7, r8, r9
     ca6:	fbe9 0769 	umaal	r0, r7, r9, r9
     caa:	fbe9 176a 	umaal	r1, r7, r9, sl
     cae:	fbea 276a 	umaal	r2, r7, sl, sl
     cb2:	fbea 376c 	umaal	r3, r7, sl, ip
     cb6:	fbec 476c 	umaal	r4, r7, ip, ip
     cba:	fbec 576e 	umaal	r5, r7, ip, lr
     cbe:	fbee 676e 	umaal	r6, r7, lr, lr
     cc2:	bd00      	pop	{pc}

00000cc4 <ocrypto_bigint_sqr256>:
     cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cc8:	ee07 0a90 	vmov	s15, r0
     ccc:	f7ff ff6c 	bl	ba8 <ocrypto_sqr256_noframe>
     cd0:	ee17 8a90 	vmov	r8, s15
     cd4:	ee07 ba90 	vmov	s15, fp
     cd8:	eca8 4a08 	vstmia	r8!, {s8-s15}
     cdc:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ce4 <ocrypto_constant_time_equal>:
     ce4:	b430      	push	{r4, r5}
     ce6:	f04f 0300 	mov.w	r3, #0

00000cea <constant_time_equal_loop>:
     cea:	f810 4b01 	ldrb.w	r4, [r0], #1
     cee:	f811 5b01 	ldrb.w	r5, [r1], #1
     cf2:	3a01      	subs	r2, #1
     cf4:	ea84 0405 	eor.w	r4, r4, r5
     cf8:	ea43 0304 	orr.w	r3, r3, r4
     cfc:	d1f5      	bne.n	cea <constant_time_equal_loop>
     cfe:	f1a3 0301 	sub.w	r3, r3, #1
     d02:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     d06:	bc30      	pop	{r4, r5}
     d08:	4770      	bx	lr
     d0a:	bf00      	nop

00000d0c <ocrypto_constant_time_is_zero>:
     d0c:	f04f 0300 	mov.w	r3, #0

00000d10 <constant_time_is_zero_loop>:
     d10:	f810 2b01 	ldrb.w	r2, [r0], #1
     d14:	3901      	subs	r1, #1
     d16:	ea43 0302 	orr.w	r3, r3, r2
     d1a:	d1f9      	bne.n	d10 <constant_time_is_zero_loop>
     d1c:	f1a3 0301 	sub.w	r3, r3, #1
     d20:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     d24:	4770      	bx	lr
     d26:	bf00      	nop

00000d28 <ocrypto_constant_time_xor>:
     d28:	b430      	push	{r4, r5}

00000d2a <constant_time_xor_loop>:
     d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
     d2e:	f812 5b01 	ldrb.w	r5, [r2], #1
     d32:	406c      	eors	r4, r5
     d34:	f800 4b01 	strb.w	r4, [r0], #1
     d38:	3b01      	subs	r3, #1
     d3a:	d1f6      	bne.n	d2a <constant_time_xor_loop>
     d3c:	bc30      	pop	{r4, r5}
     d3e:	4770      	bx	lr

00000d40 <ocrypto_mod_p256_add>:
     d40:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     d44:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     d48:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d4c:	185b      	adds	r3, r3, r1
     d4e:	eb54 040c 	adcs.w	r4, r4, ip
     d52:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d56:	414d      	adcs	r5, r1
     d58:	eb56 060c 	adcs.w	r6, r6, ip
     d5c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d60:	414f      	adcs	r7, r1
     d62:	eb58 080c 	adcs.w	r8, r8, ip
     d66:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d6a:	eb59 0901 	adcs.w	r9, r9, r1
     d6e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     d72:	4189      	sbcs	r1, r1
     d74:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     d78:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     d7c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     d80:	f176 0600 	sbcs.w	r6, r6, #0
     d84:	f177 0700 	sbcs.w	r7, r7, #0
     d88:	f178 0800 	sbcs.w	r8, r8, #0
     d8c:	f179 0901 	sbcs.w	r9, r9, #1
     d90:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     d94:	f151 0100 	adcs.w	r1, r1, #0
     d98:	185b      	adds	r3, r3, r1
     d9a:	414c      	adcs	r4, r1
     d9c:	414d      	adcs	r5, r1
     d9e:	f156 0600 	adcs.w	r6, r6, #0
     da2:	f157 0700 	adcs.w	r7, r7, #0
     da6:	f158 0800 	adcs.w	r8, r8, #0
     daa:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     dae:	eb5a 0a01 	adcs.w	sl, sl, r1
     db2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     db6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     dba:	4770      	bx	lr

00000dbc <ocrypto_mod_p256_sub>:
     dbc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     dc0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     dc4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     dc8:	1a5b      	subs	r3, r3, r1
     dca:	eb74 040c 	sbcs.w	r4, r4, ip
     dce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     dd2:	418d      	sbcs	r5, r1
     dd4:	eb76 060c 	sbcs.w	r6, r6, ip
     dd8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ddc:	418f      	sbcs	r7, r1
     dde:	eb78 080c 	sbcs.w	r8, r8, ip
     de2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     de6:	eb79 0901 	sbcs.w	r9, r9, r1
     dea:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     dee:	4189      	sbcs	r1, r1
     df0:	185b      	adds	r3, r3, r1
     df2:	414c      	adcs	r4, r1
     df4:	414d      	adcs	r5, r1
     df6:	f156 0600 	adcs.w	r6, r6, #0
     dfa:	f157 0700 	adcs.w	r7, r7, #0
     dfe:	f158 0800 	adcs.w	r8, r8, #0
     e02:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     e06:	eb5a 0a01 	adcs.w	sl, sl, r1
     e0a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     e0e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e12:	4770      	bx	lr

00000e14 <mul_reduce>:
     e14:	eb18 0804 	adds.w	r8, r8, r4
     e18:	eb59 0905 	adcs.w	r9, r9, r5
     e1c:	eb5a 0a06 	adcs.w	sl, sl, r6
     e20:	eb5b 0b07 	adcs.w	fp, fp, r7
     e24:	f05f 0c00 	movs.w	ip, #0
     e28:	f14c 0c00 	adc.w	ip, ip, #0
     e2c:	eb18 0805 	adds.w	r8, r8, r5
     e30:	eb59 0906 	adcs.w	r9, r9, r6
     e34:	eb5a 0a07 	adcs.w	sl, sl, r7
     e38:	eb5b 0b07 	adcs.w	fp, fp, r7
     e3c:	eb50 000c 	adcs.w	r0, r0, ip
     e40:	f05f 0c00 	movs.w	ip, #0
     e44:	eb51 010c 	adcs.w	r1, r1, ip
     e48:	eb52 020c 	adcs.w	r2, r2, ip
     e4c:	4163      	adcs	r3, r4
     e4e:	f14c 0c00 	adc.w	ip, ip, #0
     e52:	ebb8 0807 	subs.w	r8, r8, r7
     e56:	f179 0900 	sbcs.w	r9, r9, #0
     e5a:	f17a 0a00 	sbcs.w	sl, sl, #0
     e5e:	eb7b 0b04 	sbcs.w	fp, fp, r4
     e62:	41a8      	sbcs	r0, r5
     e64:	41b1      	sbcs	r1, r6
     e66:	41a2      	sbcs	r2, r4
     e68:	41b3      	sbcs	r3, r6
     e6a:	f16c 0c00 	sbc.w	ip, ip, #0
     e6e:	ebbb 0b05 	subs.w	fp, fp, r5
     e72:	41b0      	sbcs	r0, r6
     e74:	41b9      	sbcs	r1, r7
     e76:	41aa      	sbcs	r2, r5
     e78:	41bb      	sbcs	r3, r7
     e7a:	f16c 0c00 	sbc.w	ip, ip, #0
     e7e:	f04c 0601 	orr.w	r6, ip, #1
     e82:	f08c 0702 	eor.w	r7, ip, #2
     e86:	eb18 0806 	adds.w	r8, r8, r6
     e8a:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     e8e:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     e92:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     e96:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     e9a:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     e9e:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     ea2:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     ea6:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     eaa:	eb18 000c 	adds.w	r0, r8, ip
     eae:	eb59 010c 	adcs.w	r1, r9, ip
     eb2:	eb5a 020c 	adcs.w	r2, sl, ip
     eb6:	f15b 0300 	adcs.w	r3, fp, #0
     eba:	f154 0400 	adcs.w	r4, r4, #0
     ebe:	f155 0500 	adcs.w	r5, r5, #0
     ec2:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     ec6:	eb57 070c 	adcs.w	r7, r7, ip
     eca:	4770      	bx	lr

00000ecc <ocrypto_mod_p256_mul>:
     ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ed0:	ee07 0a90 	vmov	s15, r0
     ed4:	f7ff fda2 	bl	a1c <ocrypto_mul256_noframe>
     ed8:	ec59 8a16 	vmov	r8, r9, s12, s13
     edc:	ee17 aa10 	vmov	sl, s14
     ee0:	f7ff ff98 	bl	e14 <mul_reduce>
     ee4:	ec59 8a14 	vmov	r8, r9, s8, s9
     ee8:	ec5b aa15 	vmov	sl, fp, s10, s11
     eec:	f7ff ff92 	bl	e14 <mul_reduce>
     ef0:	ee17 8a90 	vmov	r8, s15
     ef4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000efc <ocrypto_mod_p256_sqr>:
     efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f00:	ee07 0a90 	vmov	s15, r0
     f04:	f7ff fe50 	bl	ba8 <ocrypto_sqr256_noframe>
     f08:	ec59 8a16 	vmov	r8, r9, s12, s13
     f0c:	ee17 aa10 	vmov	sl, s14
     f10:	f7ff ff80 	bl	e14 <mul_reduce>
     f14:	ec59 8a14 	vmov	r8, r9, s8, s9
     f18:	ec5b aa15 	vmov	sl, fp, s10, s11
     f1c:	f7ff ff7a 	bl	e14 <mul_reduce>
     f20:	ee17 8a90 	vmov	r8, s15
     f24:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     f2e:	4c14      	ldr	r4, [pc, #80]	; (f80 <ocrypto_mod_p256_sqr+0x84>)
     f30:	7a20      	ldrb	r0, [r4, #8]
     f32:	f88d 0001 	strb.w	r0, [sp, #1]
     f36:	79e0      	ldrb	r0, [r4, #7]
     f38:	f88d 0000 	strb.w	r0, [sp]
     f3c:	79a0      	ldrb	r0, [r4, #6]
     f3e:	f8ad 0004 	strh.w	r0, [sp, #4]
     f42:	7960      	ldrb	r0, [r4, #5]
     f44:	f8ad 0002 	strh.w	r0, [sp, #2]
     f48:	4668      	mov	r0, sp
     f4a:	f006 f9d5 	bl	72f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     f4e:	b108      	cbz	r0, f54 <ocrypto_mod_p256_sqr+0x58>
     f50:	21ad      	movs	r1, #173	; 0xad
     f52:	e010      	b.n	f76 <ocrypto_mod_p256_sqr+0x7a>
     f54:	68e0      	ldr	r0, [r4, #12]
     f56:	9002      	str	r0, [sp, #8]
     f58:	a802      	add	r0, sp, #8
     f5a:	f006 f9e3 	bl	7324 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     f5e:	b108      	cbz	r0, f64 <ocrypto_mod_p256_sqr+0x68>
     f60:	21b1      	movs	r1, #177	; 0xb1
     f62:	e008      	b.n	f76 <ocrypto_mod_p256_sqr+0x7a>
     f64:	4807      	ldr	r0, [pc, #28]	; (f84 <ocrypto_mod_p256_sqr+0x88>)
     f66:	6800      	ldr	r0, [r0, #0]
     f68:	9003      	str	r0, [sp, #12]
     f6a:	a803      	add	r0, sp, #12
     f6c:	f00f f857 	bl	1001e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     f70:	2800      	cmp	r0, #0
     f72:	d003      	beq.n	f7c <ocrypto_mod_p256_sqr+0x80>
     f74:	21b5      	movs	r1, #181	; 0xb5
     f76:	2003      	movs	r0, #3
     f78:	f000 f8e4 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f7c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     f7e:	0000      	.short	0x0000
     f80:	20001018 	.word	0x20001018
     f84:	0000124c 	.word	0x0000124c

00000f88 <sdc_build_revision_get>:
     f88:	b510      	push	{r4, lr}
     f8a:	b128      	cbz	r0, f98 <sdc_build_revision_get+0x10>
     f8c:	2214      	movs	r2, #20
     f8e:	4904      	ldr	r1, [pc, #16]	; (fa0 <sdc_build_revision_get+0x18>)
     f90:	f00f fe85 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     f94:	2000      	movs	r0, #0
     f96:	bd10      	pop	{r4, pc}
     f98:	f06f 0015 	mvn.w	r0, #21
     f9c:	bd10      	pop	{r4, pc}
     f9e:	0000      	.short	0x0000
     fa0:	00001274 	.word	0x00001274

00000fa4 <sdc_cfg_set>:
     fa4:	b570      	push	{r4, r5, r6, lr}
     fa6:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     faa:	bb78      	cbnz	r0, 100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     fac:	4c22      	ldr	r4, [pc, #136]	; (1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
     fae:	7860      	ldrb	r0, [r4, #1]
     fb0:	b108      	cbz	r0, fb6 <sdc_cfg_set+0x12>
     fb2:	11a8      	asrs	r0, r5, #6
     fb4:	bd70      	pop	{r4, r5, r6, pc}
     fb6:	b1f9      	cbz	r1, ff8 <sdc_cfg_set+0x54>
     fb8:	f06f 0015 	mvn.w	r0, #21
     fbc:	2a00      	cmp	r2, #0
     fbe:	d0f9      	beq.n	fb4 <sdc_cfg_set+0x10>
     fc0:	4b1e      	ldr	r3, [pc, #120]	; (103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
     fc2:	1e89      	subs	r1, r1, #2
     fc4:	2907      	cmp	r1, #7
     fc6:	d231      	bcs.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
     fc8:	e8df f001 	tbb	[pc, r1]
     fcc:	1a170704 	.word	0x1a170704
     fd0:	00211d30 	.word	0x00211d30
     fd4:	7810      	ldrb	r0, [r2, #0]
     fd6:	7058      	strb	r0, [r3, #1]
     fd8:	e01d      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     fda:	7891      	ldrb	r1, [r2, #2]
     fdc:	2900      	cmp	r1, #0
     fde:	d0e9      	beq.n	fb4 <sdc_cfg_set+0x10>
     fe0:	78d1      	ldrb	r1, [r2, #3]
     fe2:	2900      	cmp	r1, #0
     fe4:	d0e6      	beq.n	fb4 <sdc_cfg_set+0x10>
     fe6:	7811      	ldrb	r1, [r2, #0]
     fe8:	291b      	cmp	r1, #27
     fea:	d3e3      	bcc.n	fb4 <sdc_cfg_set+0x10>
     fec:	7851      	ldrb	r1, [r2, #1]
     fee:	291b      	cmp	r1, #27
     ff0:	d3e0      	bcc.n	fb4 <sdc_cfg_set+0x10>
     ff2:	6810      	ldr	r0, [r2, #0]
     ff4:	f8c3 0005 	str.w	r0, [r3, #5]
     ff8:	e00d      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     ffa:	6810      	ldr	r0, [r2, #0]
     ffc:	60d8      	str	r0, [r3, #12]
     ffe:	e00a      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1000:	7810      	ldrb	r0, [r2, #0]
    1002:	7098      	strb	r0, [r3, #2]
    1004:	e007      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1006:	8810      	ldrh	r0, [r2, #0]
    1008:	8258      	strh	r0, [r3, #18]
    100a:	e004      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    100c:	e00e      	b.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    100e:	8811      	ldrh	r1, [r2, #0]
    1010:	29ff      	cmp	r1, #255	; 0xff
    1012:	d8cf      	bhi.n	fb4 <sdc_cfg_set+0x10>
    1014:	7519      	strb	r1, [r3, #20]
    1016:	2201      	movs	r2, #1
    1018:	4908      	ldr	r1, [pc, #32]	; (103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
    101a:	2000      	movs	r0, #0
    101c:	f00b fe4a 	bl	ccb4 <__udivmoddi4+0x2a0>
    1020:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1024:	db04      	blt.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1026:	f06f 000b 	mvn.w	r0, #11
    102a:	bd70      	pop	{r4, r5, r6, pc}
    102c:	4628      	mov	r0, r5
    102e:	bd70      	pop	{r4, r5, r6, pc}
    1030:	2101      	movs	r1, #1
    1032:	70a1      	strb	r1, [r4, #2]
    1034:	bd70      	pop	{r4, r5, r6, pc}
    1036:	0000      	.short	0x0000
    1038:	20000040 	.word	0x20000040
    103c:	20001018 	.word	0x20001018

00001040 <sdc_disable>:
    1040:	b510      	push	{r4, lr}
    1042:	4c07      	ldr	r4, [pc, #28]	; (1060 <sdc_disable+0x20>)
    1044:	7860      	ldrb	r0, [r4, #1]
    1046:	b120      	cbz	r0, 1052 <sdc_disable+0x12>
    1048:	f006 fc52 	bl	78f0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    104c:	7820      	ldrb	r0, [r4, #0]
    104e:	f00b fc01 	bl	c854 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1052:	f000 fe4d 	bl	1cf0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    1056:	f000 ff25 	bl	1ea4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    105a:	2000      	movs	r0, #0
    105c:	7060      	strb	r0, [r4, #1]
    105e:	bd10      	pop	{r4, pc}
    1060:	20000040 	.word	0x20000040

00001064 <sdc_enable>:
    1064:	b570      	push	{r4, r5, r6, lr}
    1066:	460c      	mov	r4, r1
    1068:	0005      	movs	r5, r0
    106a:	d002      	beq.n	1072 <sdc_enable+0xe>
    106c:	b10c      	cbz	r4, 1072 <sdc_enable+0xe>
    106e:	0760      	lsls	r0, r4, #29
    1070:	d002      	beq.n	1078 <sdc_enable+0x14>
    1072:	f06f 0015 	mvn.w	r0, #21
    1076:	bd70      	pop	{r4, r5, r6, pc}
    1078:	f000 f922 	bl	12c0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    107c:	b1a8      	cbz	r0, 10aa <sdc_enable+0x46>
    107e:	4628      	mov	r0, r5
    1080:	f00b fbae 	bl	c7e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1084:	4d0a      	ldr	r5, [pc, #40]	; (10b0 <sdc_enable+0x4c>)
    1086:	2200      	movs	r2, #0
    1088:	490a      	ldr	r1, [pc, #40]	; (10b4 <sdc_enable+0x50>)
    108a:	7028      	strb	r0, [r5, #0]
    108c:	4620      	mov	r0, r4
    108e:	f00b fe11 	bl	ccb4 <__udivmoddi4+0x2a0>
    1092:	f00f fbcc 	bl	1082e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    1096:	2100      	movs	r1, #0
    1098:	7828      	ldrb	r0, [r5, #0]
    109a:	f006 fc13 	bl	78c4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    109e:	f7ff ff45 	bl	f2c <ocrypto_mod_p256_sqr+0x30>
    10a2:	2001      	movs	r0, #1
    10a4:	7068      	strb	r0, [r5, #1]
    10a6:	2000      	movs	r0, #0
    10a8:	bd70      	pop	{r4, r5, r6, pc}
    10aa:	f04f 30ff 	mov.w	r0, #4294967295
    10ae:	bd70      	pop	{r4, r5, r6, pc}
    10b0:	20000040 	.word	0x20000040
    10b4:	20001018 	.word	0x20001018

000010b8 <sdc_init>:
    10b8:	b530      	push	{r4, r5, lr}
    10ba:	b089      	sub	sp, #36	; 0x24
    10bc:	0004      	movs	r4, r0
    10be:	d00c      	beq.n	10da <sdc_init+0x22>
    10c0:	f00b fb36 	bl	c730 <mpsl_is_initialized>
    10c4:	f04f 35ff 	mov.w	r5, #4294967295
    10c8:	b120      	cbz	r0, 10d4 <sdc_init+0x1c>
    10ca:	f00b f9c9 	bl	c460 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    10ce:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    10d2:	d905      	bls.n	10e0 <sdc_init+0x28>
    10d4:	4628      	mov	r0, r5
    10d6:	b009      	add	sp, #36	; 0x24
    10d8:	bd30      	pop	{r4, r5, pc}
    10da:	f06f 0015 	mvn.w	r0, #21
    10de:	e7fa      	b.n	10d6 <sdc_init+0x1e>
    10e0:	4d13      	ldr	r5, [pc, #76]	; (1130 <sdc_init+0x78>)
    10e2:	4814      	ldr	r0, [pc, #80]	; (1134 <sdc_init+0x7c>)
    10e4:	606c      	str	r4, [r5, #4]
    10e6:	f000 fa07 	bl	14f8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    10ea:	2000      	movs	r0, #0
    10ec:	7068      	strb	r0, [r5, #1]
    10ee:	70a8      	strb	r0, [r5, #2]
    10f0:	4601      	mov	r1, r0
    10f2:	2224      	movs	r2, #36	; 0x24
    10f4:	4668      	mov	r0, sp
    10f6:	f00f fe4c 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    10fa:	2224      	movs	r2, #36	; 0x24
    10fc:	490e      	ldr	r1, [pc, #56]	; (1138 <sdc_init+0x80>)
    10fe:	4668      	mov	r0, sp
    1100:	f00f fdcd 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1104:	2224      	movs	r2, #36	; 0x24
    1106:	4669      	mov	r1, sp
    1108:	480c      	ldr	r0, [pc, #48]	; (113c <sdc_init+0x84>)
    110a:	f00f fdc8 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    110e:	f3ef 8410 	mrs	r4, PRIMASK
    1112:	b672      	cpsid	i
    1114:	f000 fdfa 	bl	1d0c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    1118:	4809      	ldr	r0, [pc, #36]	; (1140 <sdc_init+0x88>)
    111a:	f000 fecf 	bl	1ebc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    111e:	b118      	cbz	r0, 1128 <sdc_init+0x70>
    1120:	21cb      	movs	r1, #203	; 0xcb
    1122:	2003      	movs	r0, #3
    1124:	f000 f80e 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1128:	b904      	cbnz	r4, 112c <sdc_init+0x74>
    112a:	b662      	cpsie	i
    112c:	2000      	movs	r0, #0
    112e:	e7d2      	b.n	10d6 <sdc_init+0x1e>
    1130:	20000040 	.word	0x20000040
    1134:	00000f2d 	.word	0x00000f2d
    1138:	00001250 	.word	0x00001250
    113c:	20001018 	.word	0x20001018
    1140:	000012ed 	.word	0x000012ed

00001144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    1144:	b50e      	push	{r1, r2, r3, lr}
    1146:	b672      	cpsid	i
    1148:	4a15      	ldr	r2, [pc, #84]	; (11a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    114a:	6855      	ldr	r5, [r2, #4]
    114c:	b1dd      	cbz	r5, 1186 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    114e:	2200      	movs	r2, #0
    1150:	4603      	mov	r3, r0
    1152:	466e      	mov	r6, sp
    1154:	240a      	movs	r4, #10
    1156:	e003      	b.n	1160 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    1158:	fbb0 f0f4 	udiv	r0, r0, r4
    115c:	1c52      	adds	r2, r2, #1
    115e:	b2d2      	uxtb	r2, r2
    1160:	2800      	cmp	r0, #0
    1162:	d1f9      	bne.n	1158 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    1164:	54b0      	strb	r0, [r6, r2]
    1166:	e00a      	b.n	117e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    1168:	b2d8      	uxtb	r0, r3
    116a:	fbb0 f7f4 	udiv	r7, r0, r4
    116e:	fbb3 f3f4 	udiv	r3, r3, r4
    1172:	fb04 0017 	mls	r0, r4, r7, r0
    1176:	1e52      	subs	r2, r2, #1
    1178:	b2d2      	uxtb	r2, r2
    117a:	3030      	adds	r0, #48	; 0x30
    117c:	54b0      	strb	r0, [r6, r2]
    117e:	2a00      	cmp	r2, #0
    1180:	d1f2      	bne.n	1168 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    1182:	4630      	mov	r0, r6
    1184:	47a8      	blx	r5
    1186:	f3bf 8f4f 	dsb	sy
    118a:	4806      	ldr	r0, [pc, #24]	; (11a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    118c:	6801      	ldr	r1, [r0, #0]
    118e:	4a06      	ldr	r2, [pc, #24]	; (11a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    1190:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    1194:	4311      	orrs	r1, r2
    1196:	6001      	str	r1, [r0, #0]
    1198:	f3bf 8f4f 	dsb	sy
    119c:	bf00      	nop
    119e:	e7fd      	b.n	119c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    11a0:	20000040 	.word	0x20000040
    11a4:	e000ed0c 	.word	0xe000ed0c
    11a8:	05fa0004 	.word	0x05fa0004

000011ac <sdc_support_adv>:
    11ac:	4806      	ldr	r0, [pc, #24]	; (11c8 <sdc_support_adv+0x1c>)
    11ae:	b510      	push	{r4, lr}
    11b0:	7881      	ldrb	r1, [r0, #2]
    11b2:	7840      	ldrb	r0, [r0, #1]
    11b4:	4301      	orrs	r1, r0
    11b6:	d002      	beq.n	11be <sdc_support_adv+0x12>
    11b8:	f04f 30ff 	mov.w	r0, #4294967295
    11bc:	bd10      	pop	{r4, pc}
    11be:	f006 fba7 	bl	7910 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    11c2:	2000      	movs	r0, #0
    11c4:	bd10      	pop	{r4, pc}
    11c6:	0000      	.short	0x0000
    11c8:	20000040 	.word	0x20000040

000011cc <sdc_support_dle_peripheral>:
    11cc:	4806      	ldr	r0, [pc, #24]	; (11e8 <sdc_support_dle_peripheral+0x1c>)
    11ce:	b510      	push	{r4, lr}
    11d0:	7881      	ldrb	r1, [r0, #2]
    11d2:	7840      	ldrb	r0, [r0, #1]
    11d4:	4301      	orrs	r1, r0
    11d6:	d002      	beq.n	11de <sdc_support_dle_peripheral+0x12>
    11d8:	f04f 30ff 	mov.w	r0, #4294967295
    11dc:	bd10      	pop	{r4, pc}
    11de:	f006 f9bf 	bl	7560 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    11e2:	2000      	movs	r0, #0
    11e4:	bd10      	pop	{r4, pc}
    11e6:	0000      	.short	0x0000
    11e8:	20000040 	.word	0x20000040

000011ec <sdc_support_le_2m_phy>:
    11ec:	4806      	ldr	r0, [pc, #24]	; (1208 <sdc_support_le_2m_phy+0x1c>)
    11ee:	b510      	push	{r4, lr}
    11f0:	7881      	ldrb	r1, [r0, #2]
    11f2:	7840      	ldrb	r0, [r0, #1]
    11f4:	4301      	orrs	r1, r0
    11f6:	d002      	beq.n	11fe <sdc_support_le_2m_phy+0x12>
    11f8:	f04f 30ff 	mov.w	r0, #4294967295
    11fc:	bd10      	pop	{r4, pc}
    11fe:	f00f f8b2 	bl	10366 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    1202:	2000      	movs	r0, #0
    1204:	bd10      	pop	{r4, pc}
    1206:	0000      	.short	0x0000
    1208:	20000040 	.word	0x20000040

0000120c <sdc_support_peripheral>:
    120c:	4806      	ldr	r0, [pc, #24]	; (1228 <sdc_support_peripheral+0x1c>)
    120e:	b510      	push	{r4, lr}
    1210:	7881      	ldrb	r1, [r0, #2]
    1212:	7840      	ldrb	r0, [r0, #1]
    1214:	4301      	orrs	r1, r0
    1216:	d002      	beq.n	121e <sdc_support_peripheral+0x12>
    1218:	f04f 30ff 	mov.w	r0, #4294967295
    121c:	bd10      	pop	{r4, pc}
    121e:	f006 fb89 	bl	7934 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    1222:	2000      	movs	r0, #0
    1224:	bd10      	pop	{r4, pc}
    1226:	0000      	.short	0x0000
    1228:	20000040 	.word	0x20000040

0000122c <sdc_support_phy_update_peripheral>:
    122c:	4806      	ldr	r0, [pc, #24]	; (1248 <sdc_support_phy_update_peripheral+0x1c>)
    122e:	b510      	push	{r4, lr}
    1230:	7881      	ldrb	r1, [r0, #2]
    1232:	7840      	ldrb	r0, [r0, #1]
    1234:	4301      	orrs	r1, r0
    1236:	d002      	beq.n	123e <sdc_support_phy_update_peripheral+0x12>
    1238:	f04f 30ff 	mov.w	r0, #4294967295
    123c:	bd10      	pop	{r4, pc}
    123e:	f00f f8a6 	bl	1038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    1242:	2000      	movs	r0, #0
    1244:	bd10      	pop	{r4, pc}
    1246:	0000      	.short	0x0000
    1248:	20000040 	.word	0x20000040
    124c:	00000001 	.word	0x00000001
    1250:	00010100 	.word	0x00010100
    1254:	031b1b00 	.word	0x031b1b00
    1258:	00000002 	.word	0x00000002
    125c:	00001d4c 	.word	0x00001d4c
    1260:	001f0000 	.word	0x001f0000
    1264:	00000008 	.word	0x00000008
	...
    1274:	c12e7ee0 	.word	0xc12e7ee0
    1278:	2385055e 	.word	0x2385055e
    127c:	fadc1546 	.word	0xfadc1546
    1280:	707d298e 	.word	0x707d298e
    1284:	fca59310 	.word	0xfca59310

00001288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    1288:	4a05      	ldr	r2, [pc, #20]	; (12a0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    128a:	b510      	push	{r4, lr}
    128c:	6852      	ldr	r2, [r2, #4]
    128e:	b112      	cbz	r2, 1296 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    1290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1294:	4710      	bx	r2
    1296:	2192      	movs	r1, #146	; 0x92
    1298:	2004      	movs	r0, #4
    129a:	f7ff ff53 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    129e:	0000      	.short	0x0000
    12a0:	2000103c 	.word	0x2000103c

000012a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    12a4:	4a05      	ldr	r2, [pc, #20]	; (12bc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    12a6:	b510      	push	{r4, lr}
    12a8:	6892      	ldr	r2, [r2, #8]
    12aa:	b112      	cbz	r2, 12b2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    12ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12b0:	4710      	bx	r2
    12b2:	2198      	movs	r1, #152	; 0x98
    12b4:	2004      	movs	r0, #4
    12b6:	f7ff ff45 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12ba:	0000      	.short	0x0000
    12bc:	2000103c 	.word	0x2000103c

000012c0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    12c0:	4805      	ldr	r0, [pc, #20]	; (12d8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    12c2:	6801      	ldr	r1, [r0, #0]
    12c4:	b129      	cbz	r1, 12d2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    12c6:	6841      	ldr	r1, [r0, #4]
    12c8:	b119      	cbz	r1, 12d2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    12ca:	6880      	ldr	r0, [r0, #8]
    12cc:	b108      	cbz	r0, 12d2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    12ce:	2001      	movs	r0, #1
    12d0:	4770      	bx	lr
    12d2:	2000      	movs	r0, #0
    12d4:	4770      	bx	lr
    12d6:	0000      	.short	0x0000
    12d8:	2000103c 	.word	0x2000103c

000012dc <sdc_rand_source_register>:
    12dc:	4902      	ldr	r1, [pc, #8]	; (12e8 <sdc_rand_source_register+0xc>)
    12de:	c80d      	ldmia	r0, {r0, r2, r3}
    12e0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    12e4:	2000      	movs	r0, #0
    12e6:	4770      	bx	lr
    12e8:	2000103c 	.word	0x2000103c

000012ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    12ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12ee:	4c12      	ldr	r4, [pc, #72]	; (1338 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    12f0:	2600      	movs	r6, #0
    12f2:	6825      	ldr	r5, [r4, #0]
    12f4:	e011      	b.n	131a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    12f6:	9800      	ldr	r0, [sp, #0]
    12f8:	2802      	cmp	r0, #2
    12fa:	d002      	beq.n	1302 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    12fc:	2803      	cmp	r0, #3
    12fe:	d10c      	bne.n	131a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1300:	e006      	b.n	1310 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    1302:	6820      	ldr	r0, [r4, #0]
    1304:	b110      	cbz	r0, 130c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    1306:	2000      	movs	r0, #0
    1308:	6026      	str	r6, [r4, #0]
    130a:	e005      	b.n	1318 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    130c:	2128      	movs	r1, #40	; 0x28
    130e:	e00c      	b.n	132a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1310:	6820      	ldr	r0, [r4, #0]
    1312:	b168      	cbz	r0, 1330 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    1314:	2001      	movs	r0, #1
    1316:	6026      	str	r6, [r4, #0]
    1318:	47a8      	blx	r5
    131a:	4668      	mov	r0, sp
    131c:	f000 fd94 	bl	1e48 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    1320:	2800      	cmp	r0, #0
    1322:	d0e8      	beq.n	12f6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    1324:	2805      	cmp	r0, #5
    1326:	d005      	beq.n	1334 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    1328:	2135      	movs	r1, #53	; 0x35
    132a:	2004      	movs	r0, #4
    132c:	f7ff ff0a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1330:	212d      	movs	r1, #45	; 0x2d
    1332:	e7fa      	b.n	132a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1336:	0000      	.short	0x0000
    1338:	20000048 	.word	0x20000048

0000133c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    133c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1340:	4e28      	ldr	r6, [pc, #160]	; (13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>)
    1342:	4605      	mov	r5, r0
    1344:	1d00      	adds	r0, r0, #4
    1346:	f106 0744 	add.w	r7, r6, #68	; 0x44
    134a:	6030      	str	r0, [r6, #0]
    134c:	7838      	ldrb	r0, [r7, #0]
    134e:	b158      	cbz	r0, 1368 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    1350:	78ba      	ldrb	r2, [r7, #2]
    1352:	463c      	mov	r4, r7
    1354:	1c79      	adds	r1, r7, #1
    1356:	4628      	mov	r0, r5
    1358:	1c92      	adds	r2, r2, #2
    135a:	f00f fca0 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    135e:	2000      	movs	r0, #0
    1360:	7020      	strb	r0, [r4, #0]
    1362:	2004      	movs	r0, #4
    1364:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1368:	481e      	ldr	r0, [pc, #120]	; (13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>)
    136a:	f001 fe5f 	bl	302c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    136e:	4604      	mov	r4, r0
    1370:	2802      	cmp	r0, #2
    1372:	d004      	beq.n	137e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    1374:	2c04      	cmp	r4, #4
    1376:	d007      	beq.n	1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1378:	2c08      	cmp	r4, #8
    137a:	d02c      	beq.n	13d6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4e>
    137c:	e02f      	b.n	13de <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x56>
    137e:	4919      	ldr	r1, [pc, #100]	; (13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>)
    1380:	4628      	mov	r0, r5
    1382:	f00b fd3f 	bl	ce04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    1386:	e02a      	b.n	13de <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x56>
    1388:	7830      	ldrb	r0, [r6, #0]
    138a:	2808      	cmp	r0, #8
    138c:	d104      	bne.n	1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>
    138e:	2105      	movs	r1, #5
    1390:	203e      	movs	r0, #62	; 0x3e
    1392:	f00b fd09 	bl	cda8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1396:	b150      	cbz	r0, 13ae <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x26>
    1398:	4912      	ldr	r1, [pc, #72]	; (13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>)
    139a:	4628      	mov	r0, r5
    139c:	f00b fd97 	bl	cece <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    13a0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    13a4:	d30e      	bcc.n	13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13a6:	21c7      	movs	r1, #199	; 0xc7
    13a8:	2008      	movs	r0, #8
    13aa:	f7ff fecb 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    13ae:	88b0      	ldrh	r0, [r6, #4]
    13b0:	f8ad 0000 	strh.w	r0, [sp]
    13b4:	a901      	add	r1, sp, #4
    13b6:	4668      	mov	r0, sp
    13b8:	f00b fff5 	bl	d3a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    13bc:	2800      	cmp	r0, #0
    13be:	d0c5      	beq.n	134c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    13c0:	21a8      	movs	r1, #168	; 0xa8
    13c2:	e7f1      	b.n	13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
    13c4:	2800      	cmp	r0, #0
    13c6:	d0c1      	beq.n	134c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    13c8:	78a9      	ldrb	r1, [r5, #2]
    13ca:	7828      	ldrb	r0, [r5, #0]
    13cc:	f00b fcec 	bl	cda8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    13d0:	2800      	cmp	r0, #0
    13d2:	d0bb      	beq.n	134c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    13d4:	e003      	b.n	13de <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x56>
    13d6:	4903      	ldr	r1, [pc, #12]	; (13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>)
    13d8:	4628      	mov	r0, r5
    13da:	f00b fd41 	bl	ce60 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    13de:	4620      	mov	r0, r4
    13e0:	e7c0      	b.n	1364 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    13e2:	0000      	.short	0x0000
    13e4:	20001048 	.word	0x20001048
    13e8:	b570      	push	{r4, r5, r6, lr}
    13ea:	780a      	ldrb	r2, [r1, #0]
    13ec:	7082      	strb	r2, [r0, #2]
    13ee:	b33a      	cbz	r2, 1440 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb8>
    13f0:	2a01      	cmp	r2, #1
    13f2:	d825      	bhi.n	1440 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb8>
    13f4:	2313      	movs	r3, #19
    13f6:	7003      	strb	r3, [r0, #0]
    13f8:	2300      	movs	r3, #0
    13fa:	e00a      	b.n	1412 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8a>
    13fc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    1400:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    1404:	78a6      	ldrb	r6, [r4, #2]
    1406:	70ee      	strb	r6, [r5, #3]
    1408:	8864      	ldrh	r4, [r4, #2]
    140a:	0a24      	lsrs	r4, r4, #8
    140c:	1c5b      	adds	r3, r3, #1
    140e:	712c      	strb	r4, [r5, #4]
    1410:	b2db      	uxtb	r3, r3
    1412:	4293      	cmp	r3, r2
    1414:	d3f2      	bcc.n	13fc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x74>
    1416:	2300      	movs	r3, #0
    1418:	e00b      	b.n	1432 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xaa>
    141a:	bf00      	nop
    141c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    1420:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    1424:	792e      	ldrb	r6, [r5, #4]
    1426:	7166      	strb	r6, [r4, #5]
    1428:	88ad      	ldrh	r5, [r5, #4]
    142a:	0a2d      	lsrs	r5, r5, #8
    142c:	1c5b      	adds	r3, r3, #1
    142e:	71a5      	strb	r5, [r4, #6]
    1430:	b2db      	uxtb	r3, r3
    1432:	4293      	cmp	r3, r2
    1434:	d3f2      	bcc.n	141c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x94>
    1436:	2101      	movs	r1, #1
    1438:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    143c:	b2c0      	uxtb	r0, r0
    143e:	bd70      	pop	{r4, r5, r6, pc}
    1440:	2000      	movs	r0, #0
    1442:	bd70      	pop	{r4, r5, r6, pc}

00001444 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    1444:	2840      	cmp	r0, #64	; 0x40
    1446:	d203      	bcs.n	1450 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    1448:	1e40      	subs	r0, r0, #1
    144a:	b2c1      	uxtb	r1, r0
    144c:	4805      	ldr	r0, [pc, #20]	; (1464 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    144e:	e005      	b.n	145c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    1450:	28ff      	cmp	r0, #255	; 0xff
    1452:	d005      	beq.n	1460 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    1454:	3840      	subs	r0, #64	; 0x40
    1456:	b2c1      	uxtb	r1, r0
    1458:	4802      	ldr	r0, [pc, #8]	; (1464 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    145a:	3008      	adds	r0, #8
    145c:	f00b bf36 	b.w	d2cc <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1460:	2001      	movs	r0, #1
    1462:	4770      	bx	lr
    1464:	2000004c 	.word	0x2000004c

00001468 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    1468:	1e40      	subs	r0, r0, #1
    146a:	b2c1      	uxtb	r1, r0
    146c:	4801      	ldr	r0, [pc, #4]	; (1474 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    146e:	f00b bf2d 	b.w	d2cc <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1472:	0000      	.short	0x0000
    1474:	2000005c 	.word	0x2000005c

00001478 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    1478:	4902      	ldr	r1, [pc, #8]	; (1484 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    147a:	6802      	ldr	r2, [r0, #0]
    147c:	610a      	str	r2, [r1, #16]
    147e:	6840      	ldr	r0, [r0, #4]
    1480:	6148      	str	r0, [r1, #20]
    1482:	4770      	bx	lr
    1484:	2000004c 	.word	0x2000004c

00001488 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    1488:	4905      	ldr	r1, [pc, #20]	; (14a0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    148a:	6802      	ldr	r2, [r0, #0]
    148c:	600a      	str	r2, [r1, #0]
    148e:	6840      	ldr	r0, [r0, #4]
    1490:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    1494:	600a      	str	r2, [r1, #0]
    1496:	4a03      	ldr	r2, [pc, #12]	; (14a4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    1498:	4310      	orrs	r0, r2
    149a:	6048      	str	r0, [r1, #4]
    149c:	4770      	bx	lr
    149e:	0000      	.short	0x0000
    14a0:	2000004c 	.word	0x2000004c
    14a4:	024007f8 	.word	0x024007f8

000014a8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    14a8:	4902      	ldr	r1, [pc, #8]	; (14b4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    14aa:	6802      	ldr	r2, [r0, #0]
    14ac:	608a      	str	r2, [r1, #8]
    14ae:	6840      	ldr	r0, [r0, #4]
    14b0:	60c8      	str	r0, [r1, #12]
    14b2:	4770      	bx	lr
    14b4:	2000004c 	.word	0x2000004c

000014b8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    14b8:	4807      	ldr	r0, [pc, #28]	; (14d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    14ba:	f04f 31ff 	mov.w	r1, #4294967295
    14be:	2200      	movs	r2, #0
    14c0:	6001      	str	r1, [r0, #0]
    14c2:	0cc9      	lsrs	r1, r1, #19
    14c4:	6041      	str	r1, [r0, #4]
    14c6:	f100 0108 	add.w	r1, r0, #8
    14ca:	201f      	movs	r0, #31
    14cc:	600a      	str	r2, [r1, #0]
    14ce:	604a      	str	r2, [r1, #4]
    14d0:	3108      	adds	r1, #8
    14d2:	e9c1 0200 	strd	r0, r2, [r1]
    14d6:	4770      	bx	lr
    14d8:	2000004c 	.word	0x2000004c

000014dc <sdc_hci_cmd_cb_reset>:
    14dc:	b510      	push	{r4, lr}
    14de:	f7ff ffeb 	bl	14b8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    14e2:	f00e feb4 	bl	1024e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    14e6:	4604      	mov	r4, r0
    14e8:	4802      	ldr	r0, [pc, #8]	; (14f4 <sdc_hci_cmd_cb_reset+0x18>)
    14ea:	6800      	ldr	r0, [r0, #0]
    14ec:	b100      	cbz	r0, 14f0 <sdc_hci_cmd_cb_reset+0x14>
    14ee:	4780      	blx	r0
    14f0:	4620      	mov	r0, r4
    14f2:	bd10      	pop	{r4, pc}
    14f4:	20000064 	.word	0x20000064

000014f8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    14f8:	4901      	ldr	r1, [pc, #4]	; (1500 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    14fa:	6008      	str	r0, [r1, #0]
    14fc:	4770      	bx	lr
    14fe:	0000      	.short	0x0000
    1500:	20000064 	.word	0x20000064

00001504 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    1504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1508:	4604      	mov	r4, r0
    150a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    150e:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
    1512:	4d1f      	ldr	r5, [pc, #124]	; (1590 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    1514:	4e1e      	ldr	r6, [pc, #120]	; (1590 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    1516:	3d10      	subs	r5, #16
    1518:	2210      	movs	r2, #16
    151a:	2100      	movs	r1, #0
    151c:	4620      	mov	r0, r4
    151e:	f00f fc38 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1522:	2210      	movs	r2, #16
    1524:	2100      	movs	r1, #0
    1526:	f104 0010 	add.w	r0, r4, #16
    152a:	f00f fc32 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    152e:	6828      	ldr	r0, [r5, #0]
    1530:	1c40      	adds	r0, r0, #1
    1532:	d108      	bne.n	1546 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1534:	6868      	ldr	r0, [r5, #4]
    1536:	1c40      	adds	r0, r0, #1
    1538:	d105      	bne.n	1546 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    153a:	68a8      	ldr	r0, [r5, #8]
    153c:	1c40      	adds	r0, r0, #1
    153e:	d102      	bne.n	1546 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1540:	68e8      	ldr	r0, [r5, #12]
    1542:	1c40      	adds	r0, r0, #1
    1544:	d007      	beq.n	1556 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
    1546:	6828      	ldr	r0, [r5, #0]
    1548:	686a      	ldr	r2, [r5, #4]
    154a:	68a9      	ldr	r1, [r5, #8]
    154c:	68eb      	ldr	r3, [r5, #12]
    154e:	6120      	str	r0, [r4, #16]
    1550:	6162      	str	r2, [r4, #20]
    1552:	61a1      	str	r1, [r4, #24]
    1554:	61e3      	str	r3, [r4, #28]
    1556:	2000      	movs	r0, #0
    1558:	f000 fd84 	bl	2064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    155c:	4387      	bics	r7, r0
    155e:	07f8      	lsls	r0, r7, #31
    1560:	d113      	bne.n	158a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    1562:	6830      	ldr	r0, [r6, #0]
    1564:	1c40      	adds	r0, r0, #1
    1566:	d108      	bne.n	157a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1568:	6870      	ldr	r0, [r6, #4]
    156a:	1c40      	adds	r0, r0, #1
    156c:	d105      	bne.n	157a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    156e:	68b0      	ldr	r0, [r6, #8]
    1570:	1c40      	adds	r0, r0, #1
    1572:	d102      	bne.n	157a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1574:	68f0      	ldr	r0, [r6, #12]
    1576:	1c40      	adds	r0, r0, #1
    1578:	d007      	beq.n	158a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    157a:	6832      	ldr	r2, [r6, #0]
    157c:	6870      	ldr	r0, [r6, #4]
    157e:	68b1      	ldr	r1, [r6, #8]
    1580:	68f3      	ldr	r3, [r6, #12]
    1582:	6022      	str	r2, [r4, #0]
    1584:	6060      	str	r0, [r4, #4]
    1586:	60a1      	str	r1, [r4, #8]
    1588:	60e3      	str	r3, [r4, #12]
    158a:	2000      	movs	r0, #0
    158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1590:	10000090 	.word	0x10000090

00001594 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    1594:	b538      	push	{r3, r4, r5, lr}
    1596:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    159a:	4604      	mov	r4, r0
    159c:	4822      	ldr	r0, [pc, #136]	; (1628 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    159e:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    15a2:	4d21      	ldr	r5, [pc, #132]	; (1628 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    15a4:	6802      	ldr	r2, [r0, #0]
    15a6:	3d14      	subs	r5, #20
    15a8:	1c52      	adds	r2, r2, #1
    15aa:	d104      	bne.n	15b6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
    15ac:	6842      	ldr	r2, [r0, #4]
    15ae:	43d2      	mvns	r2, r2
    15b0:	0412      	lsls	r2, r2, #16
    15b2:	0c12      	lsrs	r2, r2, #16
    15b4:	d035      	beq.n	1622 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    15b6:	07c9      	lsls	r1, r1, #31
    15b8:	d033      	beq.n	1622 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    15ba:	6801      	ldr	r1, [r0, #0]
    15bc:	6840      	ldr	r0, [r0, #4]
    15be:	f8ad 0000 	strh.w	r0, [sp]
    15c2:	f8c4 1001 	str.w	r1, [r4, #1]
    15c6:	f8bd 0000 	ldrh.w	r0, [sp]
    15ca:	f8a4 0005 	strh.w	r0, [r4, #5]
    15ce:	79a0      	ldrb	r0, [r4, #6]
    15d0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    15d4:	71a0      	strb	r0, [r4, #6]
    15d6:	6828      	ldr	r0, [r5, #0]
    15d8:	1c40      	adds	r0, r0, #1
    15da:	d00c      	beq.n	15f6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    15dc:	6868      	ldr	r0, [r5, #4]
    15de:	1c40      	adds	r0, r0, #1
    15e0:	d009      	beq.n	15f6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    15e2:	68a8      	ldr	r0, [r5, #8]
    15e4:	1c40      	adds	r0, r0, #1
    15e6:	d006      	beq.n	15f6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    15e8:	68e8      	ldr	r0, [r5, #12]
    15ea:	1c40      	adds	r0, r0, #1
    15ec:	d003      	beq.n	15f6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    15ee:	2000      	movs	r0, #0
    15f0:	f000 fd38 	bl	2064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    15f4:	b140      	cbz	r0, 1608 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
    15f6:	2210      	movs	r2, #16
    15f8:	2100      	movs	r1, #0
    15fa:	1de0      	adds	r0, r4, #7
    15fc:	f00f fbc9 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1600:	2001      	movs	r0, #1
    1602:	7020      	strb	r0, [r4, #0]
    1604:	2000      	movs	r0, #0
    1606:	bd38      	pop	{r3, r4, r5, pc}
    1608:	682a      	ldr	r2, [r5, #0]
    160a:	6869      	ldr	r1, [r5, #4]
    160c:	68a8      	ldr	r0, [r5, #8]
    160e:	68eb      	ldr	r3, [r5, #12]
    1610:	f8c4 2007 	str.w	r2, [r4, #7]
    1614:	f8c4 100b 	str.w	r1, [r4, #11]
    1618:	f8c4 000f 	str.w	r0, [r4, #15]
    161c:	f8c4 3013 	str.w	r3, [r4, #19]
    1620:	e7ee      	b.n	1600 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    1622:	2000      	movs	r0, #0
    1624:	e7ed      	b.n	1602 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    1626:	0000      	.short	0x0000
    1628:	100000a4 	.word	0x100000a4

0000162c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    162c:	2102      	movs	r1, #2
    162e:	8001      	strh	r1, [r0, #0]
    1630:	8041      	strh	r1, [r0, #2]
    1632:	2100      	movs	r1, #0
    1634:	7101      	strb	r1, [r0, #4]
    1636:	21e0      	movs	r1, #224	; 0xe0
    1638:	7141      	strb	r1, [r0, #5]
    163a:	f642 617e 	movw	r1, #11902	; 0x2e7e
    163e:	80c1      	strh	r1, [r0, #6]
    1640:	4901      	ldr	r1, [pc, #4]	; (1648 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    1642:	6081      	str	r1, [r0, #8]
    1644:	2000      	movs	r0, #0
    1646:	4770      	bx	lr
    1648:	85055ec1 	.word	0x85055ec1
    164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1650:	798c      	ldrb	r4, [r1, #6]
    1652:	f8dd e018 	ldr.w	lr, [sp, #24]
    1656:	2c08      	cmp	r4, #8
    1658:	d901      	bls.n	165e <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
    165a:	21db      	movs	r1, #219	; 0xdb
    165c:	e02c      	b.n	16b8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    165e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 1704 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
    1662:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
    1666:	b10d      	cbz	r5, 166c <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
    1668:	21dc      	movs	r1, #220	; 0xdc
    166a:	e025      	b.n	16b8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    166c:	79cd      	ldrb	r5, [r1, #7]
    166e:	2d00      	cmp	r5, #0
    1670:	d045      	beq.n	16fe <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
    1672:	006f      	lsls	r7, r5, #1
    1674:	370a      	adds	r7, #10
    1676:	681d      	ldr	r5, [r3, #0]
    1678:	2c02      	cmp	r4, #2
    167a:	443d      	add	r5, r7
    167c:	d901      	bls.n	1682 <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
    167e:	4626      	mov	r6, r4
    1680:	e001      	b.n	1686 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
    1682:	f04f 0602 	mov.w	r6, #2
    1686:	442e      	add	r6, r5
    1688:	f1a6 0601 	sub.w	r6, r6, #1
    168c:	d901      	bls.n	1692 <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
    168e:	4625      	mov	r5, r4
    1690:	e001      	b.n	1696 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
    1692:	f04f 0502 	mov.w	r5, #2
    1696:	f1a5 0501 	sub.w	r5, r5, #1
    169a:	ea26 0605 	bic.w	r6, r6, r5
    169e:	888d      	ldrh	r5, [r1, #4]
    16a0:	4425      	add	r5, r4
    16a2:	f1a4 0401 	sub.w	r4, r4, #1
    16a6:	f1a5 0501 	sub.w	r5, r5, #1
    16aa:	ea25 0504 	bic.w	r5, r5, r4
    16ae:	f64f 74ff 	movw	r4, #65535	; 0xffff
    16b2:	42a5      	cmp	r5, r4
    16b4:	d303      	bcc.n	16be <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
    16b6:	21e7      	movs	r1, #231	; 0xe7
    16b8:	2017      	movs	r0, #23
    16ba:	f7ff fd43 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16be:	f1be 0f00 	cmp.w	lr, #0
    16c2:	d118      	bne.n	16f6 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
    16c4:	1bf4      	subs	r4, r6, r7
    16c6:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    16ca:	8025      	strh	r5, [r4, #0]
    16cc:	79c8      	ldrb	r0, [r1, #7]
    16ce:	70a0      	strb	r0, [r4, #2]
    16d0:	2001      	movs	r0, #1
    16d2:	70e0      	strb	r0, [r4, #3]
    16d4:	7122      	strb	r2, [r4, #4]
    16d6:	6808      	ldr	r0, [r1, #0]
    16d8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    16dc:	0c00      	lsrs	r0, r0, #16
    16de:	80e0      	strh	r0, [r4, #6]
    16e0:	8808      	ldrh	r0, [r1, #0]
    16e2:	8120      	strh	r0, [r4, #8]
    16e4:	2000      	movs	r0, #0
    16e6:	e003      	b.n	16f0 <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
    16e8:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    16ec:	1c40      	adds	r0, r0, #1
    16ee:	817a      	strh	r2, [r7, #10]
    16f0:	79cf      	ldrb	r7, [r1, #7]
    16f2:	4287      	cmp	r7, r0
    16f4:	d8f8      	bhi.n	16e8 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
    16f6:	79c8      	ldrb	r0, [r1, #7]
    16f8:	fb00 6005 	mla	r0, r0, r5, r6
    16fc:	6018      	str	r0, [r3, #0]
    16fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1702:	0000      	.short	0x0000
    1704:	20000068 	.word	0x20000068
    1708:	b530      	push	{r4, r5, lr}
    170a:	4603      	mov	r3, r0
    170c:	ea4f 0002 	mov.w	r0, r2
    1710:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    1714:	8964      	ldrh	r4, [r4, #10]
    1716:	428c      	cmp	r4, r1
    1718:	d009      	beq.n	172e <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
    171a:	789c      	ldrb	r4, [r3, #2]
    171c:	1c40      	adds	r0, r0, #1
    171e:	fbb0 f5f4 	udiv	r5, r0, r4
    1722:	fb04 0015 	mls	r0, r4, r5, r0
    1726:	b2c0      	uxtb	r0, r0
    1728:	4290      	cmp	r0, r2
    172a:	d1f1      	bne.n	1710 <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
    172c:	20ff      	movs	r0, #255	; 0xff
    172e:	bd30      	pop	{r4, r5, pc}

00001730 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    1730:	b570      	push	{r4, r5, r6, lr}
    1732:	4605      	mov	r5, r0
    1734:	4819      	ldr	r0, [pc, #100]	; (179c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
    1736:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    173a:	b364      	cbz	r4, 1796 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    173c:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
    1740:	d304      	bcc.n	174c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
    1742:	f240 2125 	movw	r1, #549	; 0x225
    1746:	2017      	movs	r0, #23
    1748:	f7ff fcfc 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    174c:	4629      	mov	r1, r5
    174e:	4620      	mov	r0, r4
    1750:	f00c f8ca 	bl	d8e8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1754:	4601      	mov	r1, r0
    1756:	28ff      	cmp	r0, #255	; 0xff
    1758:	d004      	beq.n	1764 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
    175a:	4620      	mov	r0, r4
    175c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1760:	f00c b8d6 	b.w	d910 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1764:	78a0      	ldrb	r0, [r4, #2]
    1766:	fbb5 f1f0 	udiv	r1, r5, r0
    176a:	fb00 5011 	mls	r0, r0, r1, r5
    176e:	b2c6      	uxtb	r6, r0
    1770:	4632      	mov	r2, r6
    1772:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    1776:	4620      	mov	r0, r4
    1778:	f7ff ffc6 	bl	1708 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    177c:	4602      	mov	r2, r0
    177e:	28ff      	cmp	r0, #255	; 0xff
    1780:	d009      	beq.n	1796 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    1782:	42b2      	cmp	r2, r6
    1784:	d001      	beq.n	178a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
    1786:	2000      	movs	r0, #0
    1788:	70e0      	strb	r0, [r4, #3]
    178a:	4629      	mov	r1, r5
    178c:	4620      	mov	r0, r4
    178e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1792:	f00c b8a3 	b.w	d8dc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1796:	2000      	movs	r0, #0
    1798:	bd70      	pop	{r4, r5, r6, pc}
    179a:	0000      	.short	0x0000
    179c:	20000068 	.word	0x20000068

000017a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    17a0:	4a08      	ldr	r2, [pc, #32]	; (17c4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    17a2:	b510      	push	{r4, lr}
    17a4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    17a8:	4601      	mov	r1, r0
    17aa:	4620      	mov	r0, r4
    17ac:	f00c f89c 	bl	d8e8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    17b0:	4601      	mov	r1, r0
    17b2:	28ff      	cmp	r0, #255	; 0xff
    17b4:	d004      	beq.n	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    17b6:	4620      	mov	r0, r4
    17b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17bc:	f00c b8a8 	b.w	d910 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    17c0:	2000      	movs	r0, #0
    17c2:	bd10      	pop	{r4, pc}
    17c4:	20000068 	.word	0x20000068

000017c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    17c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ca:	b089      	sub	sp, #36	; 0x24
    17cc:	0004      	movs	r4, r0
    17ce:	460e      	mov	r6, r1
    17d0:	9406      	str	r4, [sp, #24]
    17d2:	d007      	beq.n	17e4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    17d4:	2500      	movs	r5, #0
    17d6:	0760      	lsls	r0, r4, #29
    17d8:	d006      	beq.n	17e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    17da:	f240 1119 	movw	r1, #281	; 0x119
    17de:	2017      	movs	r0, #23
    17e0:	f7ff fcb0 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17e4:	2501      	movs	r5, #1
    17e6:	e7f6      	b.n	17d6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    17e8:	4814      	ldr	r0, [pc, #80]	; (183c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    17ea:	2200      	movs	r2, #0
    17ec:	4f14      	ldr	r7, [pc, #80]	; (1840 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    17ee:	6002      	str	r2, [r0, #0]
    17f0:	6042      	str	r2, [r0, #4]
    17f2:	e9d7 1000 	ldrd	r1, r0, [r7]
    17f6:	f896 c000 	ldrb.w	ip, [r6]
    17fa:	68bb      	ldr	r3, [r7, #8]
    17fc:	f36c 601f 	bfi	r0, ip, #24, #8
    1800:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1804:	e9cd 5100 	strd	r5, r1, [sp]
    1808:	ab06      	add	r3, sp, #24
    180a:	a901      	add	r1, sp, #4
    180c:	4610      	mov	r0, r2
    180e:	f7ff ff1d 	bl	164c <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    1812:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1816:	7873      	ldrb	r3, [r6, #1]
    1818:	697a      	ldr	r2, [r7, #20]
    181a:	f363 601f 	bfi	r0, r3, #24, #8
    181e:	e9cd 0202 	strd	r0, r2, [sp, #8]
    1822:	e9cd 5100 	strd	r5, r1, [sp]
    1826:	ab06      	add	r3, sp, #24
    1828:	2200      	movs	r2, #0
    182a:	a901      	add	r1, sp, #4
    182c:	2001      	movs	r0, #1
    182e:	f7ff ff0d 	bl	164c <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    1832:	9806      	ldr	r0, [sp, #24]
    1834:	b009      	add	sp, #36	; 0x24
    1836:	1b00      	subs	r0, r0, r4
    1838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    183a:	0000      	.short	0x0000
    183c:	20000068 	.word	0x20000068
    1840:	00001930 	.word	0x00001930

00001844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1844:	b510      	push	{r4, lr}
    1846:	4604      	mov	r4, r0
    1848:	7980      	ldrb	r0, [r0, #6]
    184a:	490e      	ldr	r1, [pc, #56]	; (1884 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    184c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1850:	b1a8      	cbz	r0, 187e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    1852:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    1856:	79e1      	ldrb	r1, [r4, #7]
    1858:	7882      	ldrb	r2, [r0, #2]
    185a:	4291      	cmp	r1, r2
    185c:	d20f      	bcs.n	187e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    185e:	1c4a      	adds	r2, r1, #1
    1860:	71e2      	strb	r2, [r4, #7]
    1862:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1866:	8952      	ldrh	r2, [r2, #10]
    1868:	429a      	cmp	r2, r3
    186a:	d0f4      	beq.n	1856 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    186c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1870:	8952      	ldrh	r2, [r2, #10]
    1872:	80a2      	strh	r2, [r4, #4]
    1874:	f00c f84c 	bl	d910 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1878:	6020      	str	r0, [r4, #0]
    187a:	2000      	movs	r0, #0
    187c:	bd10      	pop	{r4, pc}
    187e:	2005      	movs	r0, #5
    1880:	bd10      	pop	{r4, pc}
    1882:	0000      	.short	0x0000
    1884:	20000068 	.word	0x20000068

00001888 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    1888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    188c:	4607      	mov	r7, r0
    188e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1892:	8038      	strh	r0, [r7, #0]
    1894:	4812      	ldr	r0, [pc, #72]	; (18e0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    1896:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    189a:	b1ec      	cbz	r4, 18d8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    189c:	78a5      	ldrb	r5, [r4, #2]
    189e:	7920      	ldrb	r0, [r4, #4]
    18a0:	fbb0 f1f5 	udiv	r1, r0, r5
    18a4:	fb05 0611 	mls	r6, r5, r1, r0
    18a8:	4632      	mov	r2, r6
    18aa:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    18ae:	4620      	mov	r0, r4
    18b0:	f7ff ff2a 	bl	1708 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    18b4:	4602      	mov	r2, r0
    18b6:	28ff      	cmp	r0, #255	; 0xff
    18b8:	d00e      	beq.n	18d8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    18ba:	1ba8      	subs	r0, r5, r6
    18bc:	4410      	add	r0, r2
    18be:	fbb0 f1f5 	udiv	r1, r0, r5
    18c2:	fb05 0011 	mls	r0, r5, r1, r0
    18c6:	7921      	ldrb	r1, [r4, #4]
    18c8:	4408      	add	r0, r1
    18ca:	b281      	uxth	r1, r0
    18cc:	8039      	strh	r1, [r7, #0]
    18ce:	4620      	mov	r0, r4
    18d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    18d4:	f00c b802 	b.w	d8dc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    18d8:	2000      	movs	r0, #0
    18da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18de:	0000      	.short	0x0000
    18e0:	20000068 	.word	0x20000068

000018e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    18e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18e8:	4606      	mov	r6, r0
    18ea:	4810      	ldr	r0, [pc, #64]	; (192c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    18ec:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    18f0:	4631      	mov	r1, r6
    18f2:	4628      	mov	r0, r5
    18f4:	f00b fff8 	bl	d8e8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    18f8:	4604      	mov	r4, r0
    18fa:	28ff      	cmp	r0, #255	; 0xff
    18fc:	d012      	beq.n	1924 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    18fe:	f8d5 0006 	ldr.w	r0, [r5, #6]
    1902:	4621      	mov	r1, r4
    1904:	ea4f 4730 	mov.w	r7, r0, ror #16
    1908:	4628      	mov	r0, r5
    190a:	f00c f801 	bl	d910 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    190e:	4601      	mov	r1, r0
    1910:	4630      	mov	r0, r6
    1912:	47b8      	blx	r7
    1914:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1918:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    191c:	8148      	strh	r0, [r1, #10]
    191e:	2000      	movs	r0, #0
    1920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1924:	f243 0002 	movw	r0, #12290	; 0x3002
    1928:	e7fa      	b.n	1920 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    192a:	0000      	.short	0x0000
    192c:	20000068 	.word	0x20000068
    1930:	0000f703 	.word	0x0000f703
    1934:	000802f8 	.word	0x000802f8
    1938:	00000000 	.word	0x00000000
    193c:	0000ecd9 	.word	0x0000ecd9
    1940:	00080118 	.word	0x00080118
    1944:	00000000 	.word	0x00000000

00001948 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1948:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    194c:	4c24      	ldr	r4, [pc, #144]	; (19e0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    194e:	4606      	mov	r6, r0
    1950:	b081      	sub	sp, #4
    1952:	6820      	ldr	r0, [r4, #0]
    1954:	469a      	mov	sl, r3
    1956:	4693      	mov	fp, r2
    1958:	b158      	cbz	r0, 1972 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    195a:	7a01      	ldrb	r1, [r0, #8]
    195c:	42b1      	cmp	r1, r6
    195e:	d903      	bls.n	1968 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1960:	6840      	ldr	r0, [r0, #4]
    1962:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1966:	b140      	cbz	r0, 197a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1968:	f243 0002 	movw	r0, #12290	; 0x3002
    196c:	b005      	add	sp, #20
    196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1972:	21a5      	movs	r1, #165	; 0xa5
    1974:	2018      	movs	r0, #24
    1976:	f7ff fbe5 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    197a:	4619      	mov	r1, r3
    197c:	9802      	ldr	r0, [sp, #8]
    197e:	f00c f802 	bl	d986 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    1982:	4680      	mov	r8, r0
    1984:	4658      	mov	r0, fp
    1986:	990e      	ldr	r1, [sp, #56]	; 0x38
    1988:	f00b fff3 	bl	d972 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    198c:	4605      	mov	r5, r0
    198e:	eb08 0005 	add.w	r0, r8, r5
    1992:	1d00      	adds	r0, r0, #4
    1994:	b287      	uxth	r7, r0
    1996:	6820      	ldr	r0, [r4, #0]
    1998:	46a1      	mov	r9, r4
    199a:	4639      	mov	r1, r7
    199c:	6800      	ldr	r0, [r0, #0]
    199e:	f00b ff38 	bl	d812 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    19a2:	0004      	movs	r4, r0
    19a4:	d01a      	beq.n	19dc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    19a6:	8067      	strh	r7, [r4, #2]
    19a8:	8025      	strh	r5, [r4, #0]
    19aa:	4629      	mov	r1, r5
    19ac:	1d20      	adds	r0, r4, #4
    19ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    19b0:	4607      	mov	r7, r0
    19b2:	465a      	mov	r2, fp
    19b4:	2309      	movs	r3, #9
    19b6:	9500      	str	r5, [sp, #0]
    19b8:	f00b fea5 	bl	d706 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    19bc:	8820      	ldrh	r0, [r4, #0]
    19be:	4641      	mov	r1, r8
    19c0:	4438      	add	r0, r7
    19c2:	230a      	movs	r3, #10
    19c4:	9a02      	ldr	r2, [sp, #8]
    19c6:	f8cd a000 	str.w	sl, [sp]
    19ca:	f00b fe9c 	bl	d706 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    19ce:	f8d9 0000 	ldr.w	r0, [r9]
    19d2:	6840      	ldr	r0, [r0, #4]
    19d4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    19d8:	2000      	movs	r0, #0
    19da:	e7c7      	b.n	196c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    19dc:	2004      	movs	r0, #4
    19de:	e7c5      	b.n	196c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    19e0:	20000070 	.word	0x20000070

000019e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    19e4:	b570      	push	{r4, r5, r6, lr}
    19e6:	4c14      	ldr	r4, [pc, #80]	; (1a38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    19e8:	6823      	ldr	r3, [r4, #0]
    19ea:	b18b      	cbz	r3, 1a10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    19ec:	7a19      	ldrb	r1, [r3, #8]
    19ee:	4281      	cmp	r1, r0
    19f0:	d912      	bls.n	1a18 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    19f2:	685a      	ldr	r2, [r3, #4]
    19f4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    19f8:	b171      	cbz	r1, 1a18 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    19fa:	2500      	movs	r5, #0
    19fc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1a00:	884a      	ldrh	r2, [r1, #2]
    1a02:	6818      	ldr	r0, [r3, #0]
    1a04:	f00b ff5d 	bl	d8c2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1a08:	6821      	ldr	r1, [r4, #0]
    1a0a:	2000      	movs	r0, #0
    1a0c:	7a0a      	ldrb	r2, [r1, #8]
    1a0e:	e00c      	b.n	1a2a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1a10:	21c6      	movs	r1, #198	; 0xc6
    1a12:	2018      	movs	r0, #24
    1a14:	f7ff fb96 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a18:	f243 0002 	movw	r0, #12290	; 0x3002
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
    1a1e:	684b      	ldr	r3, [r1, #4]
    1a20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a24:	b933      	cbnz	r3, 1a34 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1a26:	1c40      	adds	r0, r0, #1
    1a28:	b2c0      	uxtb	r0, r0
    1a2a:	4282      	cmp	r2, r0
    1a2c:	d8f7      	bhi.n	1a1e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1a2e:	6808      	ldr	r0, [r1, #0]
    1a30:	f00b ff3c 	bl	d8ac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1a34:	2000      	movs	r0, #0
    1a36:	bd70      	pop	{r4, r5, r6, pc}
    1a38:	20000070 	.word	0x20000070

00001a3c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a40:	460d      	mov	r5, r1
    1a42:	0004      	movs	r4, r0
    1a44:	4690      	mov	r8, r2
    1a46:	f04f 0600 	mov.w	r6, #0
    1a4a:	d006      	beq.n	1a5a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1a4c:	2700      	movs	r7, #0
    1a4e:	07a0      	lsls	r0, r4, #30
    1a50:	d005      	beq.n	1a5e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1a52:	2186      	movs	r1, #134	; 0x86
    1a54:	2018      	movs	r0, #24
    1a56:	f7ff fb75 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a5a:	2701      	movs	r7, #1
    1a5c:	e7f7      	b.n	1a4e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1a5e:	b1cd      	cbz	r5, 1a94 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1a60:	4611      	mov	r1, r2
    1a62:	2000      	movs	r0, #0
    1a64:	f00b ff06 	bl	d874 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1a68:	300c      	adds	r0, #12
    1a6a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1a6e:	b98f      	cbnz	r7, 1a94 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1a70:	4f0a      	ldr	r7, [pc, #40]	; (1a9c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    1a72:	f104 000c 	add.w	r0, r4, #12
    1a76:	00aa      	lsls	r2, r5, #2
    1a78:	603c      	str	r4, [r7, #0]
    1a7a:	7225      	strb	r5, [r4, #8]
    1a7c:	6060      	str	r0, [r4, #4]
    1a7e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1a82:	6020      	str	r0, [r4, #0]
    1a84:	2100      	movs	r1, #0
    1a86:	6860      	ldr	r0, [r4, #4]
    1a88:	f00f f983 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1a8c:	4641      	mov	r1, r8
    1a8e:	6838      	ldr	r0, [r7, #0]
    1a90:	f00b fef0 	bl	d874 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1a94:	4630      	mov	r0, r6
    1a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a9a:	0000      	.short	0x0000
    1a9c:	20000070 	.word	0x20000070

00001aa0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    1aa0:	b570      	push	{r4, r5, r6, lr}
    1aa2:	4d08      	ldr	r5, [pc, #32]	; (1ac4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1aa4:	6828      	ldr	r0, [r5, #0]
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d00a      	beq.n	1ac0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1aaa:	2400      	movs	r4, #0
    1aac:	e004      	b.n	1ab8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    1aae:	4620      	mov	r0, r4
    1ab0:	f7ff ff98 	bl	19e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1ab4:	1c64      	adds	r4, r4, #1
    1ab6:	b2e4      	uxtb	r4, r4
    1ab8:	6828      	ldr	r0, [r5, #0]
    1aba:	7a00      	ldrb	r0, [r0, #8]
    1abc:	42a0      	cmp	r0, r4
    1abe:	d8f6      	bhi.n	1aae <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1ac0:	bd70      	pop	{r4, r5, r6, pc}
    1ac2:	0000      	.short	0x0000
    1ac4:	20000070 	.word	0x20000070

00001ac8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1ac8:	4909      	ldr	r1, [pc, #36]	; (1af0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1aca:	b510      	push	{r4, lr}
    1acc:	4602      	mov	r2, r0
    1ace:	6809      	ldr	r1, [r1, #0]
    1ad0:	2000      	movs	r0, #0
    1ad2:	b149      	cbz	r1, 1ae8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1ad4:	7a0b      	ldrb	r3, [r1, #8]
    1ad6:	4293      	cmp	r3, r2
    1ad8:	d905      	bls.n	1ae6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1ada:	6849      	ldr	r1, [r1, #4]
    1adc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1ae0:	2900      	cmp	r1, #0
    1ae2:	d000      	beq.n	1ae6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1ae4:	1d08      	adds	r0, r1, #4
    1ae6:	bd10      	pop	{r4, pc}
    1ae8:	21ec      	movs	r1, #236	; 0xec
    1aea:	2018      	movs	r0, #24
    1aec:	f7ff fb2a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1af0:	20000070 	.word	0x20000070

00001af4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1af4:	490a      	ldr	r1, [pc, #40]	; (1b20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1af6:	b510      	push	{r4, lr}
    1af8:	4602      	mov	r2, r0
    1afa:	6809      	ldr	r1, [r1, #0]
    1afc:	2000      	movs	r0, #0
    1afe:	b159      	cbz	r1, 1b18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1b00:	7a0b      	ldrb	r3, [r1, #8]
    1b02:	4293      	cmp	r3, r2
    1b04:	d907      	bls.n	1b16 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1b06:	6849      	ldr	r1, [r1, #4]
    1b08:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1b0c:	2900      	cmp	r1, #0
    1b0e:	d002      	beq.n	1b16 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1b10:	f831 0b04 	ldrh.w	r0, [r1], #4
    1b14:	4408      	add	r0, r1
    1b16:	bd10      	pop	{r4, pc}
    1b18:	21fa      	movs	r1, #250	; 0xfa
    1b1a:	2018      	movs	r0, #24
    1b1c:	f7ff fb12 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b20:	20000070 	.word	0x20000070
    1b24:	b570      	push	{r4, r5, r6, lr}
    1b26:	4b1e      	ldr	r3, [pc, #120]	; (1ba0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1b28:	6845      	ldr	r5, [r0, #4]
    1b2a:	4604      	mov	r4, r0
    1b2c:	2200      	movs	r2, #0
    1b2e:	b1a1      	cbz	r1, 1b5a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1b30:	2001      	movs	r0, #1
    1b32:	7060      	strb	r0, [r4, #1]
    1b34:	8858      	ldrh	r0, [r3, #2]
    1b36:	0881      	lsrs	r1, r0, #2
    1b38:	f05f 0000 	movs.w	r0, #0
    1b3c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1b40:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1b44:	831a      	strh	r2, [r3, #24]
    1b46:	8419      	strh	r1, [r3, #32]
    1b48:	fb00 5301 	mla	r3, r0, r1, r5
    1b4c:	6073      	str	r3, [r6, #4]
    1b4e:	1823      	adds	r3, r4, r0
    1b50:	1c40      	adds	r0, r0, #1
    1b52:	751a      	strb	r2, [r3, #20]
    1b54:	2804      	cmp	r0, #4
    1b56:	d3f1      	bcc.n	1b3c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1b58:	bd70      	pop	{r4, r5, r6, pc}
    1b5a:	7062      	strb	r2, [r4, #1]
    1b5c:	f05f 0000 	movs.w	r0, #0
    1b60:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1b64:	830a      	strh	r2, [r1, #24]
    1b66:	840a      	strh	r2, [r1, #32]
    1b68:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1b6c:	604a      	str	r2, [r1, #4]
    1b6e:	1821      	adds	r1, r4, r0
    1b70:	1c40      	adds	r0, r0, #1
    1b72:	750a      	strb	r2, [r1, #20]
    1b74:	2804      	cmp	r0, #4
    1b76:	d3f3      	bcc.n	1b60 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1b78:	8858      	ldrh	r0, [r3, #2]
    1b7a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1b7e:	d201      	bcs.n	1b84 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1b80:	0846      	lsrs	r6, r0, #1
    1b82:	e000      	b.n	1b86 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1b84:	26ff      	movs	r6, #255	; 0xff
    1b86:	f00b ff72 	bl	da6e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1b8a:	6065      	str	r5, [r4, #4]
    1b8c:	8420      	strh	r0, [r4, #32]
    1b8e:	1829      	adds	r1, r5, r0
    1b90:	60a1      	str	r1, [r4, #8]
    1b92:	8466      	strh	r6, [r4, #34]	; 0x22
    1b94:	60e5      	str	r5, [r4, #12]
    1b96:	84a0      	strh	r0, [r4, #36]	; 0x24
    1b98:	6121      	str	r1, [r4, #16]
    1b9a:	84e6      	strh	r6, [r4, #38]	; 0x26
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
    1b9e:	0000      	.short	0x0000
    1ba0:	20000074 	.word	0x20000074

00001ba4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ba8:	b158      	cbz	r0, 1bc2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1baa:	2500      	movs	r5, #0
    1bac:	4411      	add	r1, r2
    1bae:	4e24      	ldr	r6, [pc, #144]	; (1c40 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    1bb0:	b2cc      	uxtb	r4, r1
    1bb2:	2700      	movs	r7, #0
    1bb4:	7034      	strb	r4, [r6, #0]
    1bb6:	0781      	lsls	r1, r0, #30
    1bb8:	d005      	beq.n	1bc6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1bba:	214e      	movs	r1, #78	; 0x4e
    1bbc:	2009      	movs	r0, #9
    1bbe:	f7ff fac1 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1bc2:	2501      	movs	r5, #1
    1bc4:	e7f2      	b.n	1bac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1bc6:	2b1f      	cmp	r3, #31
    1bc8:	d804      	bhi.n	1bd4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1bca:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1bce:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1bd2:	e009      	b.n	1be8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1bd4:	0059      	lsls	r1, r3, #1
    1bd6:	2bff      	cmp	r3, #255	; 0xff
    1bd8:	d90c      	bls.n	1bf4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1bda:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1bde:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1be2:	d200      	bcs.n	1be6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1be4:	4611      	mov	r1, r2
    1be6:	b289      	uxth	r1, r1
    1be8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1bec:	1cc9      	adds	r1, r1, #3
    1bee:	4011      	ands	r1, r2
    1bf0:	b135      	cbz	r5, 1c00 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1bf2:	e007      	b.n	1c04 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1bf4:	227c      	movs	r2, #124	; 0x7c
    1bf6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1bfa:	d3f4      	bcc.n	1be6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1bfc:	217c      	movs	r1, #124	; 0x7c
    1bfe:	e7f2      	b.n	1be6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1c00:	6070      	str	r0, [r6, #4]
    1c02:	8071      	strh	r1, [r6, #2]
    1c04:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1c08:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1c0c:	2200      	movs	r2, #0
    1c0e:	6876      	ldr	r6, [r6, #4]
    1c10:	f04f 0c01 	mov.w	ip, #1
    1c14:	e00d      	b.n	1c32 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1c16:	b94d      	cbnz	r5, 1c2c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1c18:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1c1c:	eb00 0e03 	add.w	lr, r0, r3
    1c20:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1c24:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1c28:	f8c7 e004 	str.w	lr, [r7, #4]
    1c2c:	1c52      	adds	r2, r2, #1
    1c2e:	440b      	add	r3, r1
    1c30:	b2d2      	uxtb	r2, r2
    1c32:	42a2      	cmp	r2, r4
    1c34:	d3ef      	bcc.n	1c16 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1c36:	1ddb      	adds	r3, r3, #7
    1c38:	f023 0007 	bic.w	r0, r3, #7
    1c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c40:	20000074 	.word	0x20000074

00001c44 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1c44:	b570      	push	{r4, r5, r6, lr}
    1c46:	4a10      	ldr	r2, [pc, #64]	; (1c88 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1c48:	2000      	movs	r0, #0
    1c4a:	6851      	ldr	r1, [r2, #4]
    1c4c:	7812      	ldrb	r2, [r2, #0]
    1c4e:	e014      	b.n	1c7a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1c50:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1c54:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1c58:	b16b      	cbz	r3, 1c76 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1c5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1c5e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1c62:	d00c      	beq.n	1c7e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    1c64:	2500      	movs	r5, #0
    1c66:	70a5      	strb	r5, [r4, #2]
    1c68:	2101      	movs	r1, #1
    1c6a:	4620      	mov	r0, r4
    1c6c:	f7ff ff5a 	bl	1b24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1c70:	7025      	strb	r5, [r4, #0]
    1c72:	4620      	mov	r0, r4
    1c74:	bd70      	pop	{r4, r5, r6, pc}
    1c76:	1c40      	adds	r0, r0, #1
    1c78:	b2c0      	uxtb	r0, r0
    1c7a:	4290      	cmp	r0, r2
    1c7c:	d3e8      	bcc.n	1c50 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1c7e:	21a9      	movs	r1, #169	; 0xa9
    1c80:	2009      	movs	r0, #9
    1c82:	f7ff fa5f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c86:	0000      	.short	0x0000
    1c88:	20000074 	.word	0x20000074

00001c8c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1c8c:	4804      	ldr	r0, [pc, #16]	; (1ca0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1c8e:	b510      	push	{r4, lr}
    1c90:	8840      	ldrh	r0, [r0, #2]
    1c92:	0884      	lsrs	r4, r0, #2
    1c94:	f00b feeb 	bl	da6e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1c98:	4284      	cmp	r4, r0
    1c9a:	d300      	bcc.n	1c9e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1c9c:	4620      	mov	r0, r4
    1c9e:	bd10      	pop	{r4, pc}
    1ca0:	20000074 	.word	0x20000074
    1ca4:	b530      	push	{r4, r5, lr}
    1ca6:	490d      	ldr	r1, [pc, #52]	; (1cdc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1ca8:	2001      	movs	r0, #1
    1caa:	6048      	str	r0, [r1, #4]
    1cac:	1e82      	subs	r2, r0, #2
    1cae:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1cb2:	490b      	ldr	r1, [pc, #44]	; (1ce0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1cb4:	6088      	str	r0, [r1, #8]
    1cb6:	2300      	movs	r3, #0
    1cb8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1cbc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1cc0:	4c08      	ldr	r4, [pc, #32]	; (1ce4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1cc2:	6023      	str	r3, [r4, #0]
    1cc4:	1d25      	adds	r5, r4, #4
    1cc6:	6028      	str	r0, [r5, #0]
    1cc8:	6088      	str	r0, [r1, #8]
    1cca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1cce:	6023      	str	r3, [r4, #0]
    1cd0:	6028      	str	r0, [r5, #0]
    1cd2:	4906      	ldr	r1, [pc, #24]	; (1cec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1cd4:	4804      	ldr	r0, [pc, #16]	; (1ce8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1cd6:	6008      	str	r0, [r1, #0]
    1cd8:	bd30      	pop	{r4, r5, pc}
    1cda:	0000      	.short	0x0000
    1cdc:	4000e000 	.word	0x4000e000
    1ce0:	4000f000 	.word	0x4000f000
    1ce4:	4000f500 	.word	0x4000f500
    1ce8:	3ff60000 	.word	0x3ff60000
    1cec:	4001f508 	.word	0x4001f508

00001cf0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1cf0:	b510      	push	{r4, lr}
    1cf2:	f7ff ffd7 	bl	1ca4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1cf6:	f00b ff91 	bl	dc1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1cfa:	4903      	ldr	r1, [pc, #12]	; (1d08 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1cfc:	4801      	ldr	r0, [pc, #4]	; (1d04 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1cfe:	6008      	str	r0, [r1, #0]
    1d00:	bd10      	pop	{r4, pc}
    1d02:	0000      	.short	0x0000
    1d04:	3ff60000 	.word	0x3ff60000
    1d08:	4001f508 	.word	0x4001f508

00001d0c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1d0c:	b510      	push	{r4, lr}
    1d0e:	f7ff ffc9 	bl	1ca4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1d12:	f00b ff83 	bl	dc1c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1d16:	f000 f887 	bl	1e28 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1d1a:	4905      	ldr	r1, [pc, #20]	; (1d30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1d1c:	4803      	ldr	r0, [pc, #12]	; (1d2c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1d1e:	6008      	str	r0, [r1, #0]
    1d20:	f000 f8b8 	bl	1e94 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d28:	f000 b8dc 	b.w	1ee4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1d2c:	3ff60000 	.word	0x3ff60000
    1d30:	4001f508 	.word	0x4001f508
    1d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d38:	4682      	mov	sl, r0
    1d3a:	4838      	ldr	r0, [pc, #224]	; (1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>)
    1d3c:	f00e febe 	bl	10abc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1d40:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1d44:	b128      	cbz	r0, 1d52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d46:	2601      	movs	r6, #1
    1d48:	f10b 0001 	add.w	r0, fp, #1
    1d4c:	21ff      	movs	r1, #255	; 0xff
    1d4e:	7001      	strb	r1, [r0, #0]
    1d50:	e000      	b.n	1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>
    1d52:	2600      	movs	r6, #0
    1d54:	f44f 7580 	mov.w	r5, #256	; 0x100
    1d58:	4c31      	ldr	r4, [pc, #196]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1d5a:	f04f 0800 	mov.w	r8, #0
    1d5e:	1d2f      	adds	r7, r5, #4
    1d60:	2101      	movs	r1, #1
    1d62:	6061      	str	r1, [r4, #4]
    1d64:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1d68:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1d6c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1d70:	6021      	str	r1, [r4, #0]
    1d72:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1d76:	e01c      	b.n	1db2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x66>
    1d78:	f8d9 0000 	ldr.w	r0, [r9]
    1d7c:	06c0      	lsls	r0, r0, #27
    1d7e:	d518      	bpl.n	1db2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x66>
    1d80:	200e      	movs	r0, #14
    1d82:	f00b ff5a 	bl	dc3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1d86:	f3ef 8010 	mrs	r0, PRIMASK
    1d8a:	9000      	str	r0, [sp, #0]
    1d8c:	b672      	cpsid	i
    1d8e:	2103      	movs	r1, #3
    1d90:	4620      	mov	r0, r4
    1d92:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1d96:	4629      	mov	r1, r5
    1d98:	f00b ff5c 	bl	dc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1d9c:	b930      	cbnz	r0, 1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1d9e:	4639      	mov	r1, r7
    1da0:	4620      	mov	r0, r4
    1da2:	f00b ff57 	bl	dc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1da6:	b908      	cbnz	r0, 1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1da8:	f00e ff1f 	bl	10bea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1dac:	9800      	ldr	r0, [sp, #0]
    1dae:	b900      	cbnz	r0, 1db2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x66>
    1db0:	b662      	cpsie	i
    1db2:	4629      	mov	r1, r5
    1db4:	4620      	mov	r0, r4
    1db6:	f00b ff4d 	bl	dc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1dba:	b928      	cbnz	r0, 1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1dbc:	4639      	mov	r1, r7
    1dbe:	4620      	mov	r0, r4
    1dc0:	f00b ff48 	bl	dc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d0d7      	beq.n	1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1dc8:	4639      	mov	r1, r7
    1dca:	4620      	mov	r0, r4
    1dcc:	f00b ff42 	bl	dc54 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1dd0:	2800      	cmp	r0, #0
    1dd2:	d1c5      	bne.n	1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1dd4:	bb06      	cbnz	r6, 1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1dd6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1dda:	f88d 1000 	strb.w	r1, [sp]
    1dde:	9900      	ldr	r1, [sp, #0]
    1de0:	9100      	str	r1, [sp, #0]
    1de2:	f89d 1000 	ldrb.w	r1, [sp]
    1de6:	b109      	cbz	r1, 1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1de8:	2501      	movs	r5, #1
    1dea:	e000      	b.n	1dee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa2>
    1dec:	2500      	movs	r5, #0
    1dee:	f10b 0001 	add.w	r0, fp, #1
    1df2:	f880 8000 	strb.w	r8, [r0]
    1df6:	2003      	movs	r0, #3
    1df8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1dfc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1e00:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1e04:	200e      	movs	r0, #14
    1e06:	f00b ff18 	bl	dc3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1e0a:	4804      	ldr	r0, [pc, #16]	; (1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>)
    1e0c:	f00e fe6d 	bl	10aea <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1e10:	b115      	cbz	r5, 1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1e12:	2011      	movs	r0, #17
    1e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e18:	2000      	movs	r0, #0
    1e1a:	e7fb      	b.n	1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>
    1e1c:	20000360 	.word	0x20000360
    1e20:	4000e000 	.word	0x4000e000
    1e24:	e000ed10 	.word	0xe000ed10

00001e28 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1e28:	b510      	push	{r4, lr}
    1e2a:	4806      	ldr	r0, [pc, #24]	; (1e44 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1e2c:	f00e fe59 	bl	10ae2 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1e30:	b118      	cbz	r0, 1e3a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1e32:	2130      	movs	r1, #48	; 0x30
    1e34:	201d      	movs	r0, #29
    1e36:	f7ff f985 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e3a:	4802      	ldr	r0, [pc, #8]	; (1e44 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1e3c:	2100      	movs	r1, #0
    1e3e:	7041      	strb	r1, [r0, #1]
    1e40:	bd10      	pop	{r4, pc}
    1e42:	0000      	.short	0x0000
    1e44:	20000360 	.word	0x20000360

00001e48 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1e48:	b570      	push	{r4, r5, r6, lr}
    1e4a:	4911      	ldr	r1, [pc, #68]	; (1e90 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1e4c:	680a      	ldr	r2, [r1, #0]
    1e4e:	b1ea      	cbz	r2, 1e8c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1e50:	2300      	movs	r3, #0
    1e52:	461d      	mov	r5, r3
    1e54:	2401      	movs	r4, #1
    1e56:	684a      	ldr	r2, [r1, #4]
    1e58:	1c52      	adds	r2, r2, #1
    1e5a:	604a      	str	r2, [r1, #4]
    1e5c:	2a09      	cmp	r2, #9
    1e5e:	d300      	bcc.n	1e62 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1e60:	604d      	str	r5, [r1, #4]
    1e62:	790e      	ldrb	r6, [r1, #4]
    1e64:	fa04 f206 	lsl.w	r2, r4, r6
    1e68:	680e      	ldr	r6, [r1, #0]
    1e6a:	4216      	tst	r6, r2
    1e6c:	d00b      	beq.n	1e86 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1e6e:	f3ef 8310 	mrs	r3, PRIMASK
    1e72:	b672      	cpsid	i
    1e74:	680c      	ldr	r4, [r1, #0]
    1e76:	4394      	bics	r4, r2
    1e78:	600c      	str	r4, [r1, #0]
    1e7a:	b903      	cbnz	r3, 1e7e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1e7c:	b662      	cpsie	i
    1e7e:	6849      	ldr	r1, [r1, #4]
    1e80:	6001      	str	r1, [r0, #0]
    1e82:	2000      	movs	r0, #0
    1e84:	bd70      	pop	{r4, r5, r6, pc}
    1e86:	1c5b      	adds	r3, r3, #1
    1e88:	2b09      	cmp	r3, #9
    1e8a:	d3e4      	bcc.n	1e56 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1e8c:	2005      	movs	r0, #5
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000007c 	.word	0x2000007c

00001e94 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1e94:	4802      	ldr	r0, [pc, #8]	; (1ea0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1e96:	2100      	movs	r1, #0
    1e98:	6001      	str	r1, [r0, #0]
    1e9a:	6041      	str	r1, [r0, #4]
    1e9c:	4770      	bx	lr
    1e9e:	0000      	.short	0x0000
    1ea0:	2000007c 	.word	0x2000007c

00001ea4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1ea4:	b510      	push	{r4, lr}
    1ea6:	4c04      	ldr	r4, [pc, #16]	; (1eb8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1ea8:	7820      	ldrb	r0, [r4, #0]
    1eaa:	28ff      	cmp	r0, #255	; 0xff
    1eac:	d003      	beq.n	1eb6 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1eae:	f00a fcd1 	bl	c854 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1eb2:	20ff      	movs	r0, #255	; 0xff
    1eb4:	7020      	strb	r0, [r4, #0]
    1eb6:	bd10      	pop	{r4, pc}
    1eb8:	20000000 	.word	0x20000000

00001ebc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1ebc:	b510      	push	{r4, lr}
    1ebe:	4c08      	ldr	r4, [pc, #32]	; (1ee0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1ec0:	7861      	ldrb	r1, [r4, #1]
    1ec2:	b109      	cbz	r1, 1ec8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1ec4:	200f      	movs	r0, #15
    1ec6:	bd10      	pop	{r4, pc}
    1ec8:	f00a fc8a 	bl	c7e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1ecc:	7020      	strb	r0, [r4, #0]
    1ece:	28ff      	cmp	r0, #255	; 0xff
    1ed0:	d001      	beq.n	1ed6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1ed2:	2000      	movs	r0, #0
    1ed4:	bd10      	pop	{r4, pc}
    1ed6:	2173      	movs	r1, #115	; 0x73
    1ed8:	201f      	movs	r0, #31
    1eda:	f7ff f933 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ede:	0000      	.short	0x0000
    1ee0:	20000000 	.word	0x20000000

00001ee4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1ee4:	4901      	ldr	r1, [pc, #4]	; (1eec <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1ee6:	2000      	movs	r0, #0
    1ee8:	7048      	strb	r0, [r1, #1]
    1eea:	4770      	bx	lr
    1eec:	20000000 	.word	0x20000000

00001ef0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1ef0:	4806      	ldr	r0, [pc, #24]	; (1f0c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1ef2:	4a07      	ldr	r2, [pc, #28]	; (1f10 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1ef4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1ef6:	8852      	ldrh	r2, [r2, #2]
    1ef8:	4291      	cmp	r1, r2
    1efa:	d104      	bne.n	1f06 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1efc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1f00:	b108      	cbz	r0, 1f06 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1f02:	2000      	movs	r0, #0
    1f04:	4770      	bx	lr
    1f06:	2001      	movs	r0, #1
    1f08:	4770      	bx	lr
    1f0a:	0000      	.short	0x0000
    1f0c:	20001268 	.word	0x20001268
    1f10:	20000354 	.word	0x20000354

00001f14 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1f14:	4901      	ldr	r1, [pc, #4]	; (1f1c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1f16:	8048      	strh	r0, [r1, #2]
    1f18:	4770      	bx	lr
    1f1a:	0000      	.short	0x0000
    1f1c:	20000354 	.word	0x20000354

00001f20 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1f20:	4808      	ldr	r0, [pc, #32]	; (1f44 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1f22:	4a09      	ldr	r2, [pc, #36]	; (1f48 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1f24:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1f26:	8852      	ldrh	r2, [r2, #2]
    1f28:	4291      	cmp	r1, r2
    1f2a:	d109      	bne.n	1f40 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1f2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1f30:	8481      	strh	r1, [r0, #36]	; 0x24
    1f32:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1f36:	b119      	cbz	r1, 1f40 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1f38:	2100      	movs	r1, #0
    1f3a:	7001      	strb	r1, [r0, #0]
    1f3c:	2001      	movs	r0, #1
    1f3e:	4770      	bx	lr
    1f40:	2000      	movs	r0, #0
    1f42:	4770      	bx	lr
    1f44:	20001268 	.word	0x20001268
    1f48:	20000354 	.word	0x20000354

00001f4c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1f4c:	4807      	ldr	r0, [pc, #28]	; (1f6c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1f4e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1f52:	2901      	cmp	r1, #1
    1f54:	d007      	beq.n	1f66 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    1f56:	2101      	movs	r1, #1
    1f58:	7001      	strb	r1, [r0, #0]
    1f5a:	4805      	ldr	r0, [pc, #20]	; (1f70 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1f5c:	4903      	ldr	r1, [pc, #12]	; (1f6c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1f5e:	8800      	ldrh	r0, [r0, #0]
    1f60:	8488      	strh	r0, [r1, #36]	; 0x24
    1f62:	2001      	movs	r0, #1
    1f64:	4770      	bx	lr
    1f66:	2000      	movs	r0, #0
    1f68:	4770      	bx	lr
    1f6a:	0000      	.short	0x0000
    1f6c:	20001268 	.word	0x20001268
    1f70:	20000354 	.word	0x20000354

00001f74 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    1f74:	4906      	ldr	r1, [pc, #24]	; (1f90 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    1f76:	4b07      	ldr	r3, [pc, #28]	; (1f94 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1f78:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f7a:	885b      	ldrh	r3, [r3, #2]
    1f7c:	429a      	cmp	r2, r3
    1f7e:	d105      	bne.n	1f8c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1f80:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1f84:	b112      	cbz	r2, 1f8c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1f86:	6001      	str	r1, [r0, #0]
    1f88:	2001      	movs	r0, #1
    1f8a:	4770      	bx	lr
    1f8c:	2000      	movs	r0, #0
    1f8e:	4770      	bx	lr
    1f90:	20001268 	.word	0x20001268
    1f94:	20000354 	.word	0x20000354

00001f98 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1f98:	4909      	ldr	r1, [pc, #36]	; (1fc0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1f9a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f9c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    1fa0:	3bff      	subs	r3, #255	; 0xff
    1fa2:	d002      	beq.n	1faa <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1fa4:	2100      	movs	r1, #0
    1fa6:	6001      	str	r1, [r0, #0]
    1fa8:	e007      	b.n	1fba <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1faa:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1fae:	4904      	ldr	r1, [pc, #16]	; (1fc0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1fb0:	2a01      	cmp	r2, #1
    1fb2:	d002      	beq.n	1fba <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1fb4:	6001      	str	r1, [r0, #0]
    1fb6:	2001      	movs	r0, #1
    1fb8:	4770      	bx	lr
    1fba:	2000      	movs	r0, #0
    1fbc:	4770      	bx	lr
    1fbe:	0000      	.short	0x0000
    1fc0:	20001268 	.word	0x20001268

00001fc4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1fc4:	4901      	ldr	r1, [pc, #4]	; (1fcc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1fc6:	8008      	strh	r0, [r1, #0]
    1fc8:	4770      	bx	lr
    1fca:	0000      	.short	0x0000
    1fcc:	20000354 	.word	0x20000354

00001fd0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    1fd0:	4905      	ldr	r1, [pc, #20]	; (1fe8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    1fd2:	2000      	movs	r0, #0
    1fd4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1fdc:	8488      	strh	r0, [r1, #36]	; 0x24
    1fde:	4903      	ldr	r1, [pc, #12]	; (1fec <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    1fe0:	8008      	strh	r0, [r1, #0]
    1fe2:	8048      	strh	r0, [r1, #2]
    1fe4:	4770      	bx	lr
    1fe6:	0000      	.short	0x0000
    1fe8:	20001268 	.word	0x20001268
    1fec:	20000354 	.word	0x20000354
    1ff0:	4905      	ldr	r1, [pc, #20]	; (2008 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    1ff2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1ff4:	4282      	cmp	r2, r0
    1ff6:	d105      	bne.n	2004 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1ff8:	2000      	movs	r0, #0
    1ffa:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1ffe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2002:	8488      	strh	r0, [r1, #36]	; 0x24
    2004:	4770      	bx	lr
    2006:	0000      	.short	0x0000
    2008:	20001268 	.word	0x20001268

0000200c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    200c:	4a0a      	ldr	r2, [pc, #40]	; (2038 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    200e:	b110      	cbz	r0, 2016 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    2010:	2801      	cmp	r0, #1
    2012:	d007      	beq.n	2024 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    2014:	e00e      	b.n	2034 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2016:	7850      	ldrb	r0, [r2, #1]
    2018:	b160      	cbz	r0, 2034 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    201a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    201e:	6008      	str	r0, [r1, #0]
    2020:	88d0      	ldrh	r0, [r2, #6]
    2022:	e004      	b.n	202e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    2024:	7810      	ldrb	r0, [r2, #0]
    2026:	b128      	cbz	r0, 2034 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2028:	6890      	ldr	r0, [r2, #8]
    202a:	6008      	str	r0, [r1, #0]
    202c:	8990      	ldrh	r0, [r2, #12]
    202e:	8088      	strh	r0, [r1, #4]
    2030:	2001      	movs	r0, #1
    2032:	4770      	bx	lr
    2034:	2000      	movs	r0, #0
    2036:	4770      	bx	lr
    2038:	20000362 	.word	0x20000362

0000203c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    203c:	4a08      	ldr	r2, [pc, #32]	; (2060 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    203e:	2301      	movs	r3, #1
    2040:	b138      	cbz	r0, 2052 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    2042:	2801      	cmp	r0, #1
    2044:	d104      	bne.n	2050 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    2046:	7013      	strb	r3, [r2, #0]
    2048:	6808      	ldr	r0, [r1, #0]
    204a:	6090      	str	r0, [r2, #8]
    204c:	8888      	ldrh	r0, [r1, #4]
    204e:	8190      	strh	r0, [r2, #12]
    2050:	4770      	bx	lr
    2052:	7053      	strb	r3, [r2, #1]
    2054:	6808      	ldr	r0, [r1, #0]
    2056:	f8c2 0002 	str.w	r0, [r2, #2]
    205a:	8888      	ldrh	r0, [r1, #4]
    205c:	80d0      	strh	r0, [r2, #6]
    205e:	4770      	bx	lr
    2060:	20000362 	.word	0x20000362

00002064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2064:	4906      	ldr	r1, [pc, #24]	; (2080 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2066:	b110      	cbz	r0, 206e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2068:	2801      	cmp	r0, #1
    206a:	d002      	beq.n	2072 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    206c:	e005      	b.n	207a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    206e:	7848      	ldrb	r0, [r1, #1]
    2070:	e000      	b.n	2074 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    2072:	7808      	ldrb	r0, [r1, #0]
    2074:	b108      	cbz	r0, 207a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2076:	2001      	movs	r0, #1
    2078:	4770      	bx	lr
    207a:	2000      	movs	r0, #0
    207c:	4770      	bx	lr
    207e:	0000      	.short	0x0000
    2080:	20000362 	.word	0x20000362

00002084 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    2084:	4901      	ldr	r1, [pc, #4]	; (208c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    2086:	7708      	strb	r0, [r1, #28]
    2088:	4770      	bx	lr
    208a:	0000      	.short	0x0000
    208c:	20000b2a 	.word	0x20000b2a

00002090 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    2090:	4801      	ldr	r0, [pc, #4]	; (2098 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    2092:	7880      	ldrb	r0, [r0, #2]
    2094:	4770      	bx	lr
    2096:	0000      	.short	0x0000
    2098:	20000084 	.word	0x20000084

0000209c <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    209c:	4801      	ldr	r0, [pc, #4]	; (20a4 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    209e:	78c0      	ldrb	r0, [r0, #3]
    20a0:	4770      	bx	lr
    20a2:	0000      	.short	0x0000
    20a4:	20000084 	.word	0x20000084

000020a8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    20a8:	b570      	push	{r4, r5, r6, lr}
    20aa:	460c      	mov	r4, r1
    20ac:	4605      	mov	r5, r0
    20ae:	f000 f91f 	bl	22f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    20b2:	b118      	cbz	r0, 20bc <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    20b4:	21d0      	movs	r1, #208	; 0xd0
    20b6:	2027      	movs	r0, #39	; 0x27
    20b8:	f7ff f844 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20bc:	4803      	ldr	r0, [pc, #12]	; (20cc <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    20be:	2101      	movs	r1, #1
    20c0:	f00c f9db 	bl	e47a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    20c4:	4802      	ldr	r0, [pc, #8]	; (20d0 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    20c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    20ca:	bd70      	pop	{r4, r5, r6, pc}
    20cc:	20000b08 	.word	0x20000b08
    20d0:	20000084 	.word	0x20000084

000020d4 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    20d4:	4901      	ldr	r1, [pc, #4]	; (20dc <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    20d6:	2001      	movs	r0, #1
    20d8:	7148      	strb	r0, [r1, #5]
    20da:	4770      	bx	lr
    20dc:	20000084 	.word	0x20000084

000020e0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    20e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20e4:	4d5b      	ldr	r5, [pc, #364]	; (2254 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    20e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    20e8:	782e      	ldrb	r6, [r5, #0]
    20ea:	2e00      	cmp	r6, #0
    20ec:	d16b      	bne.n	21c6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    20ee:	2a00      	cmp	r2, #0
    20f0:	d069      	beq.n	21c6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    20f2:	2b00      	cmp	r3, #0
    20f4:	d067      	beq.n	21c6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    20f6:	2c00      	cmp	r4, #0
    20f8:	d065      	beq.n	21c6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    20fa:	f105 0614 	add.w	r6, r5, #20
    20fe:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    2102:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    2106:	2700      	movs	r7, #0
    2108:	716f      	strb	r7, [r5, #5]
    210a:	712f      	strb	r7, [r5, #4]
    210c:	70af      	strb	r7, [r5, #2]
    210e:	706f      	strb	r7, [r5, #1]
    2110:	70ef      	strb	r7, [r5, #3]
    2112:	81af      	strh	r7, [r5, #12]
    2114:	81ef      	strh	r7, [r5, #14]
    2116:	f000 f92f 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    211a:	4606      	mov	r6, r0
    211c:	f000 f926 	bl	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2120:	4604      	mov	r4, r0
    2122:	f006 f8c3 	bl	82ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2126:	f005 fe1b 	bl	7d60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    212a:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    212e:	f006 f941 	bl	83b4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2132:	69e0      	ldr	r0, [r4, #28]
    2134:	f006 fa24 	bl	8580 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2138:	6960      	ldr	r0, [r4, #20]
    213a:	f006 fa17 	bl	856c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    213e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    2142:	f006 fa4d 	bl	85e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2146:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    214a:	6840      	ldr	r0, [r0, #4]
    214c:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    2150:	b108      	cbz	r0, 2156 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    2152:	f006 f825 	bl	81a0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2156:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    215a:	2001      	movs	r0, #1
    215c:	f005 ff64 	bl	8028 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    2160:	2800      	cmp	r0, #0
    2162:	d070      	beq.n	2246 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    2164:	483c      	ldr	r0, [pc, #240]	; (2258 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    2166:	f005 ffcb 	bl	8100 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    216a:	8820      	ldrh	r0, [r4, #0]
    216c:	f7ff fcc2 	bl	1af4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2170:	6368      	str	r0, [r5, #52]	; 0x34
    2172:	8820      	ldrh	r0, [r4, #0]
    2174:	f7ff fca8 	bl	1ac8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2178:	f106 0288 	add.w	r2, r6, #136	; 0x88
    217c:	63a8      	str	r0, [r5, #56]	; 0x38
    217e:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    2182:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 225c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    2186:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    218a:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    218e:	f8c9 2019 	str.w	r2, [r9, #25]
    2192:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    2196:	f8c9 101d 	str.w	r1, [r9, #29]
    219a:	f000 f925 	bl	23e8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    219e:	4601      	mov	r1, r0
    21a0:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    21a2:	f00b febf 	bl	df24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    21a6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    21a8:	4281      	cmp	r1, r0
    21aa:	d200      	bcs.n	21ae <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    21ac:	4608      	mov	r0, r1
    21ae:	71a8      	strb	r0, [r5, #6]
    21b0:	46a8      	mov	r8, r5
    21b2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    21b6:	46ba      	mov	sl, r7
    21b8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    21ba:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    21be:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    21c0:	2908      	cmp	r1, #8
    21c2:	d104      	bne.n	21ce <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    21c4:	e002      	b.n	21cc <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    21c6:	f240 1145 	movw	r1, #325	; 0x145
    21ca:	e040      	b.n	224e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    21cc:	2104      	movs	r1, #4
    21ce:	f00b fea9 	bl	df24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    21d2:	b90f      	cbnz	r7, 21d8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    21d4:	1d00      	adds	r0, r0, #4
    21d6:	b280      	uxth	r0, r0
    21d8:	4285      	cmp	r5, r0
    21da:	d200      	bcs.n	21de <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    21dc:	4628      	mov	r0, r5
    21de:	b2c5      	uxtb	r5, r0
    21e0:	f888 5007 	strb.w	r5, [r8, #7]
    21e4:	f888 5008 	strb.w	r5, [r8, #8]
    21e8:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    21ec:	46d0      	mov	r8, sl
    21ee:	b190      	cbz	r0, 2216 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    21f0:	2701      	movs	r7, #1
    21f2:	f889 7018 	strb.w	r7, [r9, #24]
    21f6:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    21fa:	e9c9 1204 	strd	r1, r2, [r9, #16]
    21fe:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    2202:	f00b fdb3 	bl	dd6c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2206:	4603      	mov	r3, r0
    2208:	462a      	mov	r2, r5
    220a:	4914      	ldr	r1, [pc, #80]	; (225c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    220c:	4638      	mov	r0, r7
    220e:	f8cd 8000 	str.w	r8, [sp]
    2212:	f005 fd11 	bl	7c38 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2216:	2001      	movs	r0, #1
    2218:	f000 fb46 	bl	28a8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    221c:	4810      	ldr	r0, [pc, #64]	; (2260 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    221e:	6800      	ldr	r0, [r0, #0]
    2220:	2803      	cmp	r0, #3
    2222:	d012      	beq.n	224a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    2224:	280b      	cmp	r0, #11
    2226:	d010      	beq.n	224a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    2228:	480c      	ldr	r0, [pc, #48]	; (225c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    222a:	220e      	movs	r2, #14
    222c:	2100      	movs	r1, #0
    222e:	304a      	adds	r0, #74	; 0x4a
    2230:	f00e fdaf 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2234:	4809      	ldr	r0, [pc, #36]	; (225c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    2236:	8ab1      	ldrh	r1, [r6, #20]
    2238:	304a      	adds	r0, #74	; 0x4a
    223a:	8041      	strh	r1, [r0, #2]
    223c:	8821      	ldrh	r1, [r4, #0]
    223e:	8001      	strh	r1, [r0, #0]
    2240:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2244:	7101      	strb	r1, [r0, #4]
    2246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    224a:	f240 2102 	movw	r1, #514	; 0x202
    224e:	2027      	movs	r0, #39	; 0x27
    2250:	f7fe ff78 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2254:	20000084 	.word	0x20000084
    2258:	00002aac 	.word	0x00002aac
    225c:	20000ae0 	.word	0x20000ae0
    2260:	40001550 	.word	0x40001550

00002264 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    2264:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2268:	4688      	mov	r8, r1
    226a:	4607      	mov	r7, r0
    226c:	f000 f884 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2270:	4c1a      	ldr	r4, [pc, #104]	; (22dc <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    2272:	4605      	mov	r5, r0
    2274:	07b8      	lsls	r0, r7, #30
    2276:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2278:	784e      	ldrb	r6, [r1, #1]
    227a:	d516      	bpl.n	22aa <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    227c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    227e:	b330      	cbz	r0, 22ce <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    2280:	8962      	ldrh	r2, [r4, #10]
    2282:	1cd2      	adds	r2, r2, #3
    2284:	f00e fd0b 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2288:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    228a:	6260      	str	r0, [r4, #36]	; 0x24
    228c:	4669      	mov	r1, sp
    228e:	aa01      	add	r2, sp, #4
    2290:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2292:	f00b f9b5 	bl	d600 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    2296:	9800      	ldr	r0, [sp, #0]
    2298:	f00b f968 	bl	d56c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    229c:	f8c8 0000 	str.w	r0, [r8]
    22a0:	4631      	mov	r1, r6
    22a2:	2201      	movs	r2, #1
    22a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    22a6:	f00b f918 	bl	d4da <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    22aa:	07f8      	lsls	r0, r7, #31
    22ac:	d00d      	beq.n	22ca <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    22ae:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    22b2:	3518      	adds	r5, #24
    22b4:	1c40      	adds	r0, r0, #1
    22b6:	f141 0100 	adc.w	r1, r1, #0
    22ba:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    22be:	f815 0918 	ldrb.w	r0, [r5], #-24
    22c2:	2801      	cmp	r0, #1
    22c4:	d008      	beq.n	22d8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    22c6:	2001      	movs	r0, #1
    22c8:	7628      	strb	r0, [r5, #24]
    22ca:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    22ce:	f240 415c 	movw	r1, #1116	; 0x45c
    22d2:	2027      	movs	r0, #39	; 0x27
    22d4:	f7fe ff36 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22d8:	2000      	movs	r0, #0
    22da:	e7f5      	b.n	22c8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    22dc:	20000084 	.word	0x20000084

000022e0 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    22e0:	4802      	ldr	r0, [pc, #8]	; (22ec <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    22e2:	89c0      	ldrh	r0, [r0, #14]
    22e4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    22e8:	4770      	bx	lr
    22ea:	0000      	.short	0x0000
    22ec:	20000084 	.word	0x20000084

000022f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    22f0:	4804      	ldr	r0, [pc, #16]	; (2304 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    22f2:	7800      	ldrb	r0, [r0, #0]
    22f4:	b108      	cbz	r0, 22fa <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    22f6:	200c      	movs	r0, #12
    22f8:	4770      	bx	lr
    22fa:	4903      	ldr	r1, [pc, #12]	; (2308 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    22fc:	2000      	movs	r0, #0
    22fe:	7708      	strb	r0, [r1, #28]
    2300:	4770      	bx	lr
    2302:	0000      	.short	0x0000
    2304:	20000084 	.word	0x20000084
    2308:	20000b2a 	.word	0x20000b2a

0000230c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    230c:	480c      	ldr	r0, [pc, #48]	; (2340 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    230e:	b510      	push	{r4, lr}
    2310:	7801      	ldrb	r1, [r0, #0]
    2312:	b149      	cbz	r1, 2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    2314:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    2318:	7800      	ldrb	r0, [r0, #0]
    231a:	2802      	cmp	r0, #2
    231c:	d008      	beq.n	2330 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    231e:	f240 211e 	movw	r1, #542	; 0x21e
    2322:	2027      	movs	r0, #39	; 0x27
    2324:	f7fe ff0e 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    232c:	f000 b9ca 	b.w	26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2330:	6848      	ldr	r0, [r1, #4]
    2332:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    233a:	f005 bee9 	b.w	8110 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    233e:	0000      	.short	0x0000
    2340:	20000084 	.word	0x20000084
    2344:	4608      	mov	r0, r1
    2346:	2100      	movs	r1, #0
    2348:	7041      	strb	r1, [r0, #1]
    234a:	211d      	movs	r1, #29
    234c:	f800 1b04 	strb.w	r1, [r0], #4
    2350:	220e      	movs	r2, #14
    2352:	4901      	ldr	r1, [pc, #4]	; (2358 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    2354:	f00e bca3 	b.w	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2358:	20000b38 	.word	0x20000b38
    235c:	4a02      	ldr	r2, [pc, #8]	; (2368 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    235e:	8993      	ldrh	r3, [r2, #12]
    2360:	4303      	orrs	r3, r0
    2362:	8193      	strh	r3, [r2, #12]
    2364:	6952      	ldr	r2, [r2, #20]
    2366:	4710      	bx	r2
    2368:	20000084 	.word	0x20000084
    236c:	4801      	ldr	r0, [pc, #4]	; (2374 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    236e:	6840      	ldr	r0, [r0, #4]
    2370:	4770      	bx	lr
    2372:	0000      	.short	0x0000
    2374:	200000c0 	.word	0x200000c0
    2378:	4801      	ldr	r0, [pc, #4]	; (2380 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    237a:	6840      	ldr	r0, [r0, #4]
    237c:	3080      	adds	r0, #128	; 0x80
    237e:	4770      	bx	lr
    2380:	200000c0 	.word	0x200000c0
    2384:	4a01      	ldr	r2, [pc, #4]	; (238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    2386:	2100      	movs	r1, #0
    2388:	6952      	ldr	r2, [r2, #20]
    238a:	4710      	bx	r2
    238c:	20000084 	.word	0x20000084
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	4605      	mov	r5, r0
    2394:	2901      	cmp	r1, #1
    2396:	d818      	bhi.n	23ca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    2398:	4c12      	ldr	r4, [pc, #72]	; (23e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    239a:	69a1      	ldr	r1, [r4, #24]
    239c:	4788      	blx	r1
    239e:	b1a0      	cbz	r0, 23ca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    23a0:	7920      	ldrb	r0, [r4, #4]
    23a2:	b990      	cbnz	r0, 23ca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    23a4:	b9e5      	cbnz	r5, 23e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    23a6:	f104 0010 	add.w	r0, r4, #16
    23aa:	7801      	ldrb	r1, [r0, #0]
    23ac:	06c8      	lsls	r0, r1, #27
    23ae:	d405      	bmi.n	23bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    23b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    23b2:	7800      	ldrb	r0, [r0, #0]
    23b4:	06c0      	lsls	r0, r0, #27
    23b6:	d401      	bmi.n	23bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    23b8:	2001      	movs	r0, #1
    23ba:	e000      	b.n	23be <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    23bc:	2000      	movs	r0, #0
    23be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    23c0:	b92a      	cbnz	r2, 23ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    23c2:	8962      	ldrh	r2, [r4, #10]
    23c4:	b11a      	cbz	r2, 23ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    23c6:	06c9      	lsls	r1, r1, #27
    23c8:	d401      	bmi.n	23ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    23ca:	2001      	movs	r0, #1
    23cc:	bd70      	pop	{r4, r5, r6, pc}
    23ce:	89a1      	ldrh	r1, [r4, #12]
    23d0:	078a      	lsls	r2, r1, #30
    23d2:	d503      	bpl.n	23dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    23d4:	6a22      	ldr	r2, [r4, #32]
    23d6:	78d2      	ldrb	r2, [r2, #3]
    23d8:	2a02      	cmp	r2, #2
    23da:	d001      	beq.n	23e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    23dc:	4308      	orrs	r0, r1
    23de:	d1f4      	bne.n	23ca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    23e0:	2000      	movs	r0, #0
    23e2:	bd70      	pop	{r4, r5, r6, pc}
    23e4:	20000084 	.word	0x20000084
    23e8:	b510      	push	{r4, lr}
    23ea:	f7ff ffbf 	bl	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    23ee:	4604      	mov	r4, r0
    23f0:	f7ff ffc2 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    23f4:	4602      	mov	r2, r0
    23f6:	7f41      	ldrb	r1, [r0, #29]
    23f8:	4816      	ldr	r0, [pc, #88]	; (2454 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    23fa:	2925      	cmp	r1, #37	; 0x25
    23fc:	d010      	beq.n	2420 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    23fe:	2926      	cmp	r1, #38	; 0x26
    2400:	d00e      	beq.n	2420 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2402:	7f92      	ldrb	r2, [r2, #30]
    2404:	2a25      	cmp	r2, #37	; 0x25
    2406:	d00b      	beq.n	2420 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2408:	2920      	cmp	r1, #32
    240a:	d00d      	beq.n	2428 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    240c:	2921      	cmp	r1, #33	; 0x21
    240e:	d00b      	beq.n	2428 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    2410:	2a23      	cmp	r2, #35	; 0x23
    2412:	d00f      	beq.n	2434 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    2414:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2418:	2804      	cmp	r0, #4
    241a:	d100      	bne.n	241e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    241c:	2008      	movs	r0, #8
    241e:	bd10      	pop	{r4, pc}
    2420:	6840      	ldr	r0, [r0, #4]
    2422:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    2426:	e00e      	b.n	2446 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    2428:	2a23      	cmp	r2, #35	; 0x23
    242a:	d003      	beq.n	2434 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    242c:	6840      	ldr	r0, [r0, #4]
    242e:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    2432:	e005      	b.n	2440 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    2434:	6841      	ldr	r1, [r0, #4]
    2436:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    243a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    243e:	4008      	ands	r0, r1
    2440:	f00b fc8a 	bl	dd58 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    2444:	4601      	mov	r1, r0
    2446:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    244a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    244e:	f00b bc9b 	b.w	dd88 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    2452:	0000      	.short	0x0000
    2454:	200000c0 	.word	0x200000c0
    2458:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    245c:	468b      	mov	fp, r1
    245e:	4681      	mov	r9, r0
    2460:	f7ff ff8a 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2464:	2600      	movs	r6, #0
    2466:	4c66      	ldr	r4, [pc, #408]	; (2600 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    2468:	4607      	mov	r7, r0
    246a:	f88d 6008 	strb.w	r6, [sp, #8]
    246e:	9603      	str	r6, [sp, #12]
    2470:	9601      	str	r6, [sp, #4]
    2472:	7820      	ldrb	r0, [r4, #0]
    2474:	4635      	mov	r5, r6
    2476:	2802      	cmp	r0, #2
    2478:	d004      	beq.n	2484 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    247a:	f240 41df 	movw	r1, #1247	; 0x4df
    247e:	2027      	movs	r0, #39	; 0x27
    2480:	f7fe fe60 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2484:	7ba0      	ldrb	r0, [r4, #14]
    2486:	0640      	lsls	r0, r0, #25
    2488:	d406      	bmi.n	2498 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    248a:	2040      	movs	r0, #64	; 0x40
    248c:	f7ff ff7a 	bl	2384 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    2490:	89e0      	ldrh	r0, [r4, #14]
    2492:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2496:	81e0      	strh	r0, [r4, #14]
    2498:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    249c:	f1b9 0f00 	cmp.w	r9, #0
    24a0:	d03a      	beq.n	2518 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x20c>
    24a2:	b180      	cbz	r0, 24c6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24a4:	f005 fc96 	bl	7dd4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    24a8:	f005 fc70 	bl	7d8c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    24ac:	b958      	cbnz	r0, 24c6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24b0:	7841      	ldrb	r1, [r0, #1]
    24b2:	b141      	cbz	r1, 24c6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24b4:	7800      	ldrb	r0, [r0, #0]
    24b6:	7e39      	ldrb	r1, [r7, #24]
    24b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    24bc:	4288      	cmp	r0, r1
    24be:	d102      	bne.n	24c6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24c0:	2001      	movs	r0, #1
    24c2:	7060      	strb	r0, [r4, #1]
    24c4:	e097      	b.n	25f6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ea>
    24c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24c8:	7841      	ldrb	r1, [r0, #1]
    24ca:	8161      	strh	r1, [r4, #10]
    24cc:	b121      	cbz	r1, 24d8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    24ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    24d0:	f00b f96c 	bl	d7ac <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    24d4:	62a0      	str	r0, [r4, #40]	; 0x28
    24d6:	e000      	b.n	24da <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    24d8:	62a5      	str	r5, [r4, #40]	; 0x28
    24da:	89e0      	ldrh	r0, [r4, #14]
    24dc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    24e0:	81e0      	strh	r0, [r4, #14]
    24e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24e4:	7df9      	ldrb	r1, [r7, #23]
    24e6:	7800      	ldrb	r0, [r0, #0]
    24e8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    24ec:	4288      	cmp	r0, r1
    24ee:	d007      	beq.n	2500 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    24f0:	a803      	add	r0, sp, #12
    24f2:	f000 f98b 	bl	280c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x500>
    24f6:	89e0      	ldrh	r0, [r4, #14]
    24f8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    24fc:	81e0      	strh	r0, [r4, #14]
    24fe:	e000      	b.n	2502 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f6>
    2500:	2601      	movs	r6, #1
    2502:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2504:	7e39      	ldrb	r1, [r7, #24]
    2506:	7800      	ldrb	r0, [r0, #0]
    2508:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    250c:	4288      	cmp	r0, r1
    250e:	d10d      	bne.n	252c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    2510:	a802      	add	r0, sp, #8
    2512:	f000 f931 	bl	2778 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x46c>
    2516:	e009      	b.n	252c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    2518:	b108      	cbz	r0, 251e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x212>
    251a:	f005 fc55 	bl	7dc8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    251e:	78a0      	ldrb	r0, [r4, #2]
    2520:	1c40      	adds	r0, r0, #1
    2522:	70a0      	strb	r0, [r4, #2]
    2524:	89e0      	ldrh	r0, [r4, #14]
    2526:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    252a:	81e0      	strh	r0, [r4, #14]
    252c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2600 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>
    2530:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    2534:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2538:	b190      	cbz	r0, 2560 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x254>
    253a:	f7ff ff17 	bl	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    253e:	4931      	ldr	r1, [pc, #196]	; (2604 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2540:	760d      	strb	r5, [r1, #24]
    2542:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    2546:	e9c1 2304 	strd	r2, r3, [r1, #16]
    254a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    254e:	f00b fc0d 	bl	dd6c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2552:	4603      	mov	r3, r0
    2554:	22fb      	movs	r2, #251	; 0xfb
    2556:	492b      	ldr	r1, [pc, #172]	; (2604 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2558:	4628      	mov	r0, r5
    255a:	9500      	str	r5, [sp, #0]
    255c:	f005 fb6c 	bl	7c38 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2560:	f04f 0800 	mov.w	r8, #0
    2564:	f1bb 0f00 	cmp.w	fp, #0
    2568:	d104      	bne.n	2574 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x268>
    256a:	78a1      	ldrb	r1, [r4, #2]
    256c:	2001      	movs	r0, #1
    256e:	f7ff ff0f 	bl	2390 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    2572:	b120      	cbz	r0, 257e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x272>
    2574:	f005 ffe6 	bl	8544 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    2578:	f04f 0801 	mov.w	r8, #1
    257c:	e002      	b.n	2584 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x278>
    257e:	2000      	movs	r0, #0
    2580:	f000 f9d0 	bl	2924 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x618>
    2584:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2588:	b118      	cbz	r0, 2592 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x286>
    258a:	a901      	add	r1, sp, #4
    258c:	2002      	movs	r0, #2
    258e:	f7ff fe69 	bl	2264 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    2592:	481c      	ldr	r0, [pc, #112]	; (2604 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2594:	8aba      	ldrh	r2, [r7, #20]
    2596:	304a      	adds	r0, #74	; 0x4a
    2598:	b13e      	cbz	r6, 25aa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    259a:	b91a      	cbnz	r2, 25a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    259c:	88c2      	ldrh	r2, [r0, #6]
    259e:	b90a      	cbnz	r2, 25a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    25a0:	8902      	ldrh	r2, [r0, #8]
    25a2:	b112      	cbz	r2, 25aa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    25a4:	8942      	ldrh	r2, [r0, #10]
    25a6:	1c52      	adds	r2, r2, #1
    25a8:	8142      	strh	r2, [r0, #10]
    25aa:	f1b9 0f00 	cmp.w	r9, #0
    25ae:	d004      	beq.n	25ba <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ae>
    25b0:	88c1      	ldrh	r1, [r0, #6]
    25b2:	1c49      	adds	r1, r1, #1
    25b4:	80c1      	strh	r1, [r0, #6]
    25b6:	70a5      	strb	r5, [r4, #2]
    25b8:	e002      	b.n	25c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b4>
    25ba:	8901      	ldrh	r1, [r0, #8]
    25bc:	1c49      	adds	r1, r1, #1
    25be:	8101      	strh	r1, [r0, #8]
    25c0:	480f      	ldr	r0, [pc, #60]	; (2600 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    25c2:	303c      	adds	r0, #60	; 0x3c
    25c4:	f001 f8e4 	bl	3790 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    25c8:	9803      	ldr	r0, [sp, #12]
    25ca:	b140      	cbz	r0, 25de <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d2>
    25cc:	f00a ffce 	bl	d56c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    25d0:	f8da 1004 	ldr.w	r1, [sl, #4]
    25d4:	1c40      	adds	r0, r0, #1
    25d6:	7205      	strb	r5, [r0, #8]
    25d8:	2208      	movs	r2, #8
    25da:	f00b ffd5 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25de:	9801      	ldr	r0, [sp, #4]
    25e0:	b130      	cbz	r0, 25f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2e4>
    25e2:	f8da 1004 	ldr.w	r1, [sl, #4]
    25e6:	7205      	strb	r5, [r0, #8]
    25e8:	2210      	movs	r2, #16
    25ea:	9801      	ldr	r0, [sp, #4]
    25ec:	f00b ffcc 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25f0:	f1b8 0f00 	cmp.w	r8, #0
    25f4:	d001      	beq.n	25fa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ee>
    25f6:	f000 f865 	bl	26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    25fa:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    25fe:	0000      	.short	0x0000
    2600:	20000084 	.word	0x20000084
    2604:	20000ae0 	.word	0x20000ae0
    2608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    260c:	4688      	mov	r8, r1
    260e:	4681      	mov	r9, r0
    2610:	f7ff feb2 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2614:	4d29      	ldr	r5, [pc, #164]	; (26bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b0>)
    2616:	4604      	mov	r4, r0
    2618:	7828      	ldrb	r0, [r5, #0]
    261a:	2801      	cmp	r0, #1
    261c:	d004      	beq.n	2628 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x31c>
    261e:	f240 416b 	movw	r1, #1131	; 0x46b
    2622:	2027      	movs	r0, #39	; 0x27
    2624:	f7fe fd8e 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2628:	7c20      	ldrb	r0, [r4, #16]
    262a:	2700      	movs	r7, #0
    262c:	2601      	movs	r6, #1
    262e:	b128      	cbz	r0, 263c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
    2630:	7427      	strb	r7, [r4, #16]
    2632:	2100      	movs	r1, #0
    2634:	2004      	movs	r0, #4
    2636:	f7ff fe91 	bl	235c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    263a:	74a6      	strb	r6, [r4, #18]
    263c:	6a29      	ldr	r1, [r5, #32]
    263e:	7808      	ldrb	r0, [r1, #0]
    2640:	43c0      	mvns	r0, r0
    2642:	0780      	lsls	r0, r0, #30
    2644:	d109      	bne.n	265a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34e>
    2646:	7da0      	ldrb	r0, [r4, #22]
    2648:	bb88      	cbnz	r0, 26ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    264a:	2002      	movs	r0, #2
    264c:	f7ff fe86 	bl	235c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2650:	6a28      	ldr	r0, [r5, #32]
    2652:	7800      	ldrb	r0, [r0, #0]
    2654:	43c0      	mvns	r0, r0
    2656:	0780      	lsls	r0, r0, #30
    2658:	d029      	beq.n	26ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    265a:	6a28      	ldr	r0, [r5, #32]
    265c:	7840      	ldrb	r0, [r0, #1]
    265e:	b110      	cbz	r0, 2666 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35a>
    2660:	2002      	movs	r0, #2
    2662:	75a0      	strb	r0, [r4, #22]
    2664:	e000      	b.n	2668 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35c>
    2666:	75a6      	strb	r6, [r4, #22]
    2668:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    266c:	b198      	cbz	r0, 2696 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x38a>
    266e:	f7ff fe7d 	bl	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2672:	4913      	ldr	r1, [pc, #76]	; (26c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    2674:	7a2d      	ldrb	r5, [r5, #8]
    2676:	760e      	strb	r6, [r1, #24]
    2678:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    267c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2680:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    2684:	f00b fb72 	bl	dd6c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2688:	4603      	mov	r3, r0
    268a:	462a      	mov	r2, r5
    268c:	490c      	ldr	r1, [pc, #48]	; (26c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    268e:	4630      	mov	r0, r6
    2690:	9700      	str	r7, [sp, #0]
    2692:	f005 fad1 	bl	7c38 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2696:	ea38 0009 	bics.w	r0, r8, r9
    269a:	d004      	beq.n	26a6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x39a>
    269c:	2100      	movs	r1, #0
    269e:	4608      	mov	r0, r1
    26a0:	f7ff fe76 	bl	2390 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    26a4:	b128      	cbz	r0, 26b2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a6>
    26a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26aa:	f000 b80b 	b.w	26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    26ae:	2003      	movs	r0, #3
    26b0:	e7d7      	b.n	2662 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x356>
    26b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26b6:	2000      	movs	r0, #0
    26b8:	f000 b8f6 	b.w	28a8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    26bc:	20000084 	.word	0x20000084
    26c0:	20000ae0 	.word	0x20000ae0
    26c4:	b510      	push	{r4, lr}
    26c6:	f005 fc25 	bl	7f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    26ca:	f005 fb49 	bl	7d60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    26ce:	4c0d      	ldr	r4, [pc, #52]	; (2704 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3f8>)
    26d0:	89e0      	ldrh	r0, [r4, #14]
    26d2:	f7ff fe57 	bl	2384 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    26d6:	480c      	ldr	r0, [pc, #48]	; (2708 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    26d8:	7f00      	ldrb	r0, [r0, #28]
    26da:	b158      	cbz	r0, 26f4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3e8>
    26dc:	490a      	ldr	r1, [pc, #40]	; (2708 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    26de:	220e      	movs	r2, #14
    26e0:	f101 000e 	add.w	r0, r1, #14
    26e4:	f00e fadb 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26e8:	4807      	ldr	r0, [pc, #28]	; (2708 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    26ea:	2202      	movs	r2, #2
    26ec:	4907      	ldr	r1, [pc, #28]	; (270c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x400>)
    26ee:	301d      	adds	r0, #29
    26f0:	f00b ff5e 	bl	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    26f4:	69e2      	ldr	r2, [r4, #28]
    26f6:	7921      	ldrb	r1, [r4, #4]
    26f8:	7860      	ldrb	r0, [r4, #1]
    26fa:	4790      	blx	r2
    26fc:	2000      	movs	r0, #0
    26fe:	7020      	strb	r0, [r4, #0]
    2700:	bd10      	pop	{r4, pc}
    2702:	0000      	.short	0x0000
    2704:	20000084 	.word	0x20000084
    2708:	20000b2a 	.word	0x20000b2a
    270c:	00002345 	.word	0x00002345
    2710:	4808      	ldr	r0, [pc, #32]	; (2734 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x428>)
    2712:	b510      	push	{r4, lr}
    2714:	7800      	ldrb	r0, [r0, #0]
    2716:	2802      	cmp	r0, #2
    2718:	d004      	beq.n	2724 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x418>
    271a:	f240 2149 	movw	r1, #585	; 0x249
    271e:	2027      	movs	r0, #39	; 0x27
    2720:	f7fe fd10 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2724:	4904      	ldr	r1, [pc, #16]	; (2738 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x42c>)
    2726:	2001      	movs	r0, #1
    2728:	7308      	strb	r0, [r1, #12]
    272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    272e:	f7ff bfc9 	b.w	26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2732:	0000      	.short	0x0000
    2734:	20000084 	.word	0x20000084
    2738:	20000b2a 	.word	0x20000b2a
    273c:	b430      	push	{r4, r5}
    273e:	4604      	mov	r4, r0
    2740:	480c      	ldr	r0, [pc, #48]	; (2774 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x468>)
    2742:	7a00      	ldrb	r0, [r0, #8]
    2744:	b10b      	cbz	r3, 274a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x43e>
    2746:	1d00      	adds	r0, r0, #4
    2748:	b2c0      	uxtb	r0, r0
    274a:	b93a      	cbnz	r2, 275c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    274c:	28ff      	cmp	r0, #255	; 0xff
    274e:	d105      	bne.n	275c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    2750:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    2754:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2758:	429a      	cmp	r2, r3
    275a:	d009      	beq.n	2770 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x464>
    275c:	b121      	cbz	r1, 2768 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x45c>
    275e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2762:	bc30      	pop	{r4, r5}
    2764:	f005 bf12 	b.w	858c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2768:	20ff      	movs	r0, #255	; 0xff
    276a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    276e:	e7f8      	b.n	2762 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x456>
    2770:	bc30      	pop	{r4, r5}
    2772:	4770      	bx	lr
    2774:	20000084 	.word	0x20000084
    2778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    277c:	4607      	mov	r7, r0
    277e:	f7ff fdfb 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2782:	4c21      	ldr	r4, [pc, #132]	; (2808 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4fc>)
    2784:	4605      	mov	r5, r0
    2786:	2601      	movs	r6, #1
    2788:	6a61      	ldr	r1, [r4, #36]	; 0x24
    278a:	7808      	ldrb	r0, [r1, #0]
    278c:	f000 0003 	and.w	r0, r0, #3
    2790:	2801      	cmp	r0, #1
    2792:	d00c      	beq.n	27ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    2794:	2802      	cmp	r0, #2
    2796:	d00a      	beq.n	27ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    2798:	2803      	cmp	r0, #3
    279a:	d11b      	bne.n	27d4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    279c:	742e      	strb	r6, [r5, #16]
    279e:	89e0      	ldrh	r0, [r4, #14]
    27a0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    27a4:	81e0      	strh	r0, [r4, #14]
    27a6:	2001      	movs	r0, #1
    27a8:	f7ff fdd8 	bl	235c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    27ac:	e012      	b.n	27d4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    27ae:	7848      	ldrb	r0, [r1, #1]
    27b0:	b180      	cbz	r0, 27d4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    27b2:	89e1      	ldrh	r1, [r4, #14]
    27b4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    27b8:	81e1      	strh	r1, [r4, #14]
    27ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    27bc:	2900      	cmp	r1, #0
    27be:	d018      	beq.n	27f2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    27c0:	28fb      	cmp	r0, #251	; 0xfb
    27c2:	d818      	bhi.n	27f6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4ea>
    27c4:	7960      	ldrb	r0, [r4, #5]
    27c6:	b120      	cbz	r0, 27d2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c6>
    27c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27cc:	2020      	movs	r0, #32
    27ce:	f7ff bdd9 	b.w	2384 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    27d2:	703e      	strb	r6, [r7, #0]
    27d4:	7e28      	ldrb	r0, [r5, #24]
    27d6:	2801      	cmp	r0, #1
    27d8:	d012      	beq.n	2800 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4f4>
    27da:	762e      	strb	r6, [r5, #24]
    27dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    27de:	7840      	ldrb	r0, [r0, #1]
    27e0:	2800      	cmp	r0, #0
    27e2:	d006      	beq.n	27f2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    27e4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    27e8:	1c40      	adds	r0, r0, #1
    27ea:	f141 0100 	adc.w	r1, r1, #0
    27ee:	e9c5 0100 	strd	r0, r1, [r5]
    27f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27f6:	7920      	ldrb	r0, [r4, #4]
    27f8:	f040 0010 	orr.w	r0, r0, #16
    27fc:	7120      	strb	r0, [r4, #4]
    27fe:	e7f8      	b.n	27f2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    2800:	2000      	movs	r0, #0
    2802:	7628      	strb	r0, [r5, #24]
    2804:	e7ea      	b.n	27dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4d0>
    2806:	0000      	.short	0x0000
    2808:	20000084 	.word	0x20000084
    280c:	b570      	push	{r4, r5, r6, lr}
    280e:	4605      	mov	r5, r0
    2810:	f7ff fdb2 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2814:	4604      	mov	r4, r0
    2816:	7d80      	ldrb	r0, [r0, #22]
    2818:	2800      	cmp	r0, #0
    281a:	d02d      	beq.n	2878 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56c>
    281c:	2802      	cmp	r0, #2
    281e:	d10c      	bne.n	283a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x52e>
    2820:	481b      	ldr	r0, [pc, #108]	; (2890 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x584>)
    2822:	4629      	mov	r1, r5
    2824:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2826:	f00a fe30 	bl	d48a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    282a:	b330      	cbz	r0, 287a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56e>
    282c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2830:	1c40      	adds	r0, r0, #1
    2832:	f141 0100 	adc.w	r1, r1, #0
    2836:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    283a:	2500      	movs	r5, #0
    283c:	75a5      	strb	r5, [r4, #22]
    283e:	7ca0      	ldrb	r0, [r4, #18]
    2840:	b120      	cbz	r0, 284c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x540>
    2842:	74a5      	strb	r5, [r4, #18]
    2844:	2100      	movs	r1, #0
    2846:	2010      	movs	r0, #16
    2848:	f7ff fd88 	bl	235c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    284c:	7c60      	ldrb	r0, [r4, #17]
    284e:	b170      	cbz	r0, 286e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x562>
    2850:	7465      	strb	r5, [r4, #17]
    2852:	f7ff fb65 	bl	1f20 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    2856:	b198      	cbz	r0, 2880 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x574>
    2858:	2100      	movs	r1, #0
    285a:	2008      	movs	r0, #8
    285c:	f7ff fd7e 	bl	235c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2860:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2864:	1c40      	adds	r0, r0, #1
    2866:	f141 0100 	adc.w	r1, r1, #0
    286a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    286e:	7de0      	ldrb	r0, [r4, #23]
    2870:	2801      	cmp	r0, #1
    2872:	d00a      	beq.n	288a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x57e>
    2874:	2001      	movs	r0, #1
    2876:	75e0      	strb	r0, [r4, #23]
    2878:	bd70      	pop	{r4, r5, r6, pc}
    287a:	f240 31da 	movw	r1, #986	; 0x3da
    287e:	e001      	b.n	2884 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x578>
    2880:	f240 31f1 	movw	r1, #1009	; 0x3f1
    2884:	2027      	movs	r0, #39	; 0x27
    2886:	f7fe fc5d 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    288a:	75e5      	strb	r5, [r4, #23]
    288c:	bd70      	pop	{r4, r5, r6, pc}
    288e:	0000      	.short	0x0000
    2890:	20000084 	.word	0x20000084
    2894:	4803      	ldr	r0, [pc, #12]	; (28a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x598>)
    2896:	7800      	ldrb	r0, [r0, #0]
    2898:	2800      	cmp	r0, #0
    289a:	d001      	beq.n	28a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x594>
    289c:	f7ff bf12 	b.w	26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    28a0:	4770      	bx	lr
    28a2:	0000      	.short	0x0000
    28a4:	20000084 	.word	0x20000084
    28a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28ac:	4606      	mov	r6, r0
    28ae:	f7ff fd5d 	bl	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    28b2:	4680      	mov	r8, r0
    28b4:	f7ff fd60 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    28b8:	4c18      	ldr	r4, [pc, #96]	; (291c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x610>)
    28ba:	4605      	mov	r5, r0
    28bc:	4632      	mov	r2, r6
    28be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    28c0:	6260      	str	r0, [r4, #36]	; 0x24
    28c2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    28c6:	2101      	movs	r1, #1
    28c8:	4640      	mov	r0, r8
    28ca:	f7ff ff37 	bl	273c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    28ce:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    28d2:	2700      	movs	r7, #0
    28d4:	b170      	cbz	r0, 28f4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5e8>
    28d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    28d8:	f005 fd8e 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    28dc:	4810      	ldr	r0, [pc, #64]	; (2920 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x614>)
    28de:	2101      	movs	r1, #1
    28e0:	7601      	strb	r1, [r0, #24]
    28e2:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    28e6:	e9c0 1204 	strd	r1, r2, [r0, #16]
    28ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
    28ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28ee:	f005 f9f5 	bl	7cdc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    28f2:	e004      	b.n	28fe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5f2>
    28f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28f6:	f005 fd7f 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    28fa:	f005 fa31 	bl	7d60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    28fe:	b916      	cbnz	r6, 2906 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5fa>
    2900:	4638      	mov	r0, r7
    2902:	f005 fc29 	bl	8158 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2906:	2100      	movs	r1, #0
    2908:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    290c:	4608      	mov	r0, r1
    290e:	f005 fdfb 	bl	8508 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2912:	2002      	movs	r0, #2
    2914:	7020      	strb	r0, [r4, #0]
    2916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    291a:	0000      	.short	0x0000
    291c:	20000084 	.word	0x20000084
    2920:	20000ae0 	.word	0x20000ae0
    2924:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2928:	4604      	mov	r4, r0
    292a:	f7ff fd25 	bl	2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    292e:	4605      	mov	r5, r0
    2930:	f7ff fd1c 	bl	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2934:	2700      	movs	r7, #0
    2936:	f88d 7000 	strb.w	r7, [sp]
    293a:	4606      	mov	r6, r0
    293c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2aa4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x798>
    2940:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2944:	4622      	mov	r2, r4
    2946:	4639      	mov	r1, r7
    2948:	f7ff fef8 	bl	273c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    294c:	7da8      	ldrb	r0, [r5, #22]
    294e:	f04f 0801 	mov.w	r8, #1
    2952:	f1a9 0420 	sub.w	r4, r9, #32
    2956:	b140      	cbz	r0, 296a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x65e>
    2958:	2801      	cmp	r0, #1
    295a:	d020      	beq.n	299e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    295c:	2802      	cmp	r0, #2
    295e:	d02f      	beq.n	29c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6b4>
    2960:	2803      	cmp	r0, #3
    2962:	d03b      	beq.n	29dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d0>
    2964:	f240 21fb 	movw	r1, #763	; 0x2fb
    2968:	e057      	b.n	2a1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    296a:	79a0      	ldrb	r0, [r4, #6]
    296c:	2150      	movs	r1, #80	; 0x50
    296e:	f8ad 0004 	strh.w	r0, [sp, #4]
    2972:	5388      	strh	r0, [r1, r6]
    2974:	4648      	mov	r0, r9
    2976:	f7ff fafd 	bl	1f74 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    297a:	b130      	cbz	r0, 298a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x67e>
    297c:	2080      	movs	r0, #128	; 0x80
    297e:	6a21      	ldr	r1, [r4, #32]
    2980:	f7ff fcec 	bl	235c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2984:	f885 8011 	strb.w	r8, [r5, #17]
    2988:	e02c      	b.n	29e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    298a:	466a      	mov	r2, sp
    298c:	a901      	add	r1, sp, #4
    298e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2990:	f00b fa04 	bl	dd9c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    2994:	6220      	str	r0, [r4, #32]
    2996:	b110      	cbz	r0, 299e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    2998:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    299c:	b111      	cbz	r1, 29a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x698>
    299e:	4842      	ldr	r0, [pc, #264]	; (2aa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    29a0:	6220      	str	r0, [r4, #32]
    29a2:	e01f      	b.n	29e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29a4:	f89d 1000 	ldrb.w	r1, [sp]
    29a8:	b921      	cbnz	r1, 29b4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6a8>
    29aa:	8007      	strh	r7, [r0, #0]
    29ac:	7087      	strb	r7, [r0, #2]
    29ae:	2101      	movs	r1, #1
    29b0:	f00b fd63 	bl	e47a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    29b4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    29b8:	6a20      	ldr	r0, [r4, #32]
    29ba:	f00b fce6 	bl	e38a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    29be:	e011      	b.n	29e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29c0:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    29c4:	f8ad 0004 	strh.w	r0, [sp, #4]
    29c8:	466a      	mov	r2, sp
    29ca:	a901      	add	r1, sp, #4
    29cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    29ce:	f00b f9e5 	bl	dd9c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    29d2:	6220      	str	r0, [r4, #32]
    29d4:	b930      	cbnz	r0, 29e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29d6:	f240 21e5 	movw	r1, #741	; 0x2e5
    29da:	e01e      	b.n	2a1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    29dc:	4648      	mov	r0, r9
    29de:	f7ff fac9 	bl	1f74 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    29e2:	b1c0      	cbz	r0, 2a16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70a>
    29e4:	6a20      	ldr	r0, [r4, #32]
    29e6:	2308      	movs	r3, #8
    29e8:	7801      	ldrb	r1, [r0, #0]
    29ea:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    29ee:	7001      	strb	r1, [r0, #0]
    29f0:	7dea      	ldrb	r2, [r5, #23]
    29f2:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    29f6:	4311      	orrs	r1, r2
    29f8:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    29fc:	7001      	strb	r1, [r0, #0]
    29fe:	7e2a      	ldrb	r2, [r5, #24]
    2a00:	2304      	movs	r3, #4
    2a02:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2a06:	4311      	orrs	r1, r2
    2a08:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2a0c:	7001      	strb	r1, [r0, #0]
    2a0e:	43c9      	mvns	r1, r1
    2a10:	0789      	lsls	r1, r1, #30
    2a12:	d005      	beq.n	2a20 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x714>
    2a14:	e007      	b.n	2a26 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x71a>
    2a16:	f240 21ee 	movw	r1, #750	; 0x2ee
    2a1a:	2027      	movs	r0, #39	; 0x27
    2a1c:	f7fe fb92 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a20:	78c0      	ldrb	r0, [r0, #3]
    2a22:	2802      	cmp	r0, #2
    2a24:	d00f      	beq.n	2a46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    2a26:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2a28:	f00a fe2d 	bl	d686 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2a2c:	b108      	cbz	r0, 2a32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x726>
    2a2e:	2101      	movs	r1, #1
    2a30:	e00a      	b.n	2a48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    2a32:	6a20      	ldr	r0, [r4, #32]
    2a34:	7800      	ldrb	r0, [r0, #0]
    2a36:	43c0      	mvns	r0, r0
    2a38:	0780      	lsls	r0, r0, #30
    2a3a:	d004      	beq.n	2a46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    2a3c:	f7ff fa58 	bl	1ef0 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2a40:	f080 0101 	eor.w	r1, r0, #1
    2a44:	e000      	b.n	2a48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    2a46:	2100      	movs	r1, #0
    2a48:	6a20      	ldr	r0, [r4, #32]
    2a4a:	7802      	ldrb	r2, [r0, #0]
    2a4c:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2a50:	7001      	strb	r1, [r0, #0]
    2a52:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2a56:	b181      	cbz	r1, 2a7a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    2a58:	7841      	ldrb	r1, [r0, #1]
    2a5a:	b171      	cbz	r1, 2a7a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    2a5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a5e:	f005 fccb 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a62:	4811      	ldr	r0, [pc, #68]	; (2aa8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    2a64:	3828      	subs	r0, #40	; 0x28
    2a66:	7607      	strb	r7, [r0, #24]
    2a68:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2a6c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2a70:	6a21      	ldr	r1, [r4, #32]
    2a72:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a74:	f005 f932 	bl	7cdc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2a78:	e003      	b.n	2a82 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x776>
    2a7a:	f005 fcbd 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a7e:	f005 f96f 	bl	7d60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2a82:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2a86:	2101      	movs	r1, #1
    2a88:	2000      	movs	r0, #0
    2a8a:	f005 fd3d 	bl	8508 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2a8e:	f884 8003 	strb.w	r8, [r4, #3]
    2a92:	6a21      	ldr	r1, [r4, #32]
    2a94:	880a      	ldrh	r2, [r1, #0]
    2a96:	8222      	strh	r2, [r4, #16]
    2a98:	7889      	ldrb	r1, [r1, #2]
    2a9a:	74a1      	strb	r1, [r4, #18]
    2a9c:	f884 8000 	strb.w	r8, [r4]
    2aa0:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2aa4:	200000a4 	.word	0x200000a4
    2aa8:	20000b08 	.word	0x20000b08
    2aac:	00002711 	.word	0x00002711
    2ab0:	00002459 	.word	0x00002459
    2ab4:	00002609 	.word	0x00002609
    2ab8:	00002895 	.word	0x00002895

00002abc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2abc:	4800      	ldr	r0, [pc, #0]	; (2ac0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2abe:	4770      	bx	lr
    2ac0:	20001418 	.word	0x20001418

00002ac4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2ac4:	4904      	ldr	r1, [pc, #16]	; (2ad8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2ac6:	784a      	ldrb	r2, [r1, #1]
    2ac8:	4282      	cmp	r2, r0
    2aca:	d903      	bls.n	2ad4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2acc:	4408      	add	r0, r1
    2ace:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    2ad2:	4770      	bx	lr
    2ad4:	2000      	movs	r0, #0
    2ad6:	4770      	bx	lr
    2ad8:	2000128e 	.word	0x2000128e

00002adc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2adc:	4904      	ldr	r1, [pc, #16]	; (2af0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2ade:	784a      	ldrb	r2, [r1, #1]
    2ae0:	4282      	cmp	r2, r0
    2ae2:	d903      	bls.n	2aec <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2ae4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2ae8:	3082      	adds	r0, #130	; 0x82
    2aea:	4770      	bx	lr
    2aec:	2000      	movs	r0, #0
    2aee:	4770      	bx	lr
    2af0:	2000128e 	.word	0x2000128e

00002af4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2af4:	4a05      	ldr	r2, [pc, #20]	; (2b0c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2af6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2afa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2afe:	6802      	ldr	r2, [r0, #0]
    2b00:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2b04:	8880      	ldrh	r0, [r0, #4]
    2b06:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2b0a:	4770      	bx	lr
    2b0c:	2000128e 	.word	0x2000128e

00002b10 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2b10:	4904      	ldr	r1, [pc, #16]	; (2b24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2b12:	784a      	ldrb	r2, [r1, #1]
    2b14:	4282      	cmp	r2, r0
    2b16:	d903      	bls.n	2b20 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2b18:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2b1c:	1c80      	adds	r0, r0, #2
    2b1e:	4770      	bx	lr
    2b20:	2000      	movs	r0, #0
    2b22:	4770      	bx	lr
    2b24:	2000128e 	.word	0x2000128e

00002b28 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2b28:	b510      	push	{r4, lr}
    2b2a:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    2b2e:	2100      	movs	r1, #0
    2b30:	4805      	ldr	r0, [pc, #20]	; (2b48 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    2b32:	f00e f92e 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2b36:	4805      	ldr	r0, [pc, #20]	; (2b4c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    2b38:	2100      	movs	r1, #0
    2b3a:	7001      	strb	r1, [r0, #0]
    2b3c:	7041      	strb	r1, [r0, #1]
    2b3e:	f44f 7161 	mov.w	r1, #900	; 0x384
    2b42:	8041      	strh	r1, [r0, #2]
    2b44:	bd10      	pop	{r4, pc}
    2b46:	0000      	.short	0x0000
    2b48:	2000128e 	.word	0x2000128e
    2b4c:	20000358 	.word	0x20000358

00002b50 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2b50:	4b0b      	ldr	r3, [pc, #44]	; (2b80 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2b52:	b510      	push	{r4, lr}
    2b54:	785c      	ldrb	r4, [r3, #1]
    2b56:	4284      	cmp	r4, r0
    2b58:	d910      	bls.n	2b7c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    2b5a:	4418      	add	r0, r3
    2b5c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2b60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2b64:	4418      	add	r0, r3
    2b66:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    2b6a:	700b      	strb	r3, [r1, #0]
    2b6c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2b70:	6011      	str	r1, [r2, #0]
    2b72:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2b76:	8090      	strh	r0, [r2, #4]
    2b78:	2001      	movs	r0, #1
    2b7a:	bd10      	pop	{r4, pc}
    2b7c:	2000      	movs	r0, #0
    2b7e:	bd10      	pop	{r4, pc}
    2b80:	2000128e 	.word	0x2000128e

00002b84 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2b84:	4801      	ldr	r0, [pc, #4]	; (2b8c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2b86:	8840      	ldrh	r0, [r0, #2]
    2b88:	4770      	bx	lr
    2b8a:	0000      	.short	0x0000
    2b8c:	20000358 	.word	0x20000358

00002b90 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2b90:	4905      	ldr	r1, [pc, #20]	; (2ba8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2b92:	784a      	ldrb	r2, [r1, #1]
    2b94:	4282      	cmp	r2, r0
    2b96:	d903      	bls.n	2ba0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2b98:	4408      	add	r0, r1
    2b9a:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2b9e:	b108      	cbz	r0, 2ba4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2ba0:	2000      	movs	r0, #0
    2ba2:	4770      	bx	lr
    2ba4:	2001      	movs	r0, #1
    2ba6:	4770      	bx	lr
    2ba8:	2000128e 	.word	0x2000128e

00002bac <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2bac:	4901      	ldr	r1, [pc, #4]	; (2bb4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2bae:	7048      	strb	r0, [r1, #1]
    2bb0:	4770      	bx	lr
    2bb2:	0000      	.short	0x0000
    2bb4:	20000358 	.word	0x20000358
    2bb8:	4602      	mov	r2, r0
    2bba:	4809      	ldr	r0, [pc, #36]	; (2be0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2bbc:	b510      	push	{r4, lr}
    2bbe:	7800      	ldrb	r0, [r0, #0]
    2bc0:	460b      	mov	r3, r1
    2bc2:	b158      	cbz	r0, 2bdc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2bc4:	4807      	ldr	r0, [pc, #28]	; (2be4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2bc6:	7841      	ldrb	r1, [r0, #1]
    2bc8:	b141      	cbz	r1, 2bdc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2bca:	b10b      	cbz	r3, 2bd0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2bcc:	1c80      	adds	r0, r0, #2
    2bce:	e001      	b.n	2bd4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2bd0:	4804      	ldr	r0, [pc, #16]	; (2be4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2bd2:	3082      	adds	r0, #130	; 0x82
    2bd4:	f004 ff8a 	bl	7aec <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2bd8:	2001      	movs	r0, #1
    2bda:	bd10      	pop	{r4, pc}
    2bdc:	2000      	movs	r0, #0
    2bde:	bd10      	pop	{r4, pc}
    2be0:	20000358 	.word	0x20000358
    2be4:	2000128e 	.word	0x2000128e
    2be8:	4908      	ldr	r1, [pc, #32]	; (2c0c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    2bea:	b510      	push	{r4, lr}
    2bec:	4603      	mov	r3, r0
    2bee:	2000      	movs	r0, #0
    2bf0:	784a      	ldrb	r2, [r1, #1]
    2bf2:	e006      	b.n	2c02 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    2bf4:	180c      	adds	r4, r1, r0
    2bf6:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    2bfa:	429c      	cmp	r4, r3
    2bfc:	d004      	beq.n	2c08 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    2bfe:	1c40      	adds	r0, r0, #1
    2c00:	b2c0      	uxtb	r0, r0
    2c02:	4282      	cmp	r2, r0
    2c04:	d8f6      	bhi.n	2bf4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    2c06:	2008      	movs	r0, #8
    2c08:	bd10      	pop	{r4, pc}
    2c0a:	0000      	.short	0x0000
    2c0c:	2000128e 	.word	0x2000128e
    2c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c12:	4c1a      	ldr	r4, [pc, #104]	; (2c7c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    2c14:	4603      	mov	r3, r0
    2c16:	2000      	movs	r0, #0
    2c18:	7825      	ldrb	r5, [r4, #0]
    2c1a:	e02b      	b.n	2c74 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    2c1c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2c20:	4422      	add	r2, r4
    2c22:	780f      	ldrb	r7, [r1, #0]
    2c24:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    2c28:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    2c2c:	ea87 070c 	eor.w	r7, r7, ip
    2c30:	405e      	eors	r6, r3
    2c32:	443e      	add	r6, r7
    2c34:	784f      	ldrb	r7, [r1, #1]
    2c36:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2c3a:	ea87 070c 	eor.w	r7, r7, ip
    2c3e:	443e      	add	r6, r7
    2c40:	788f      	ldrb	r7, [r1, #2]
    2c42:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2c46:	ea87 070c 	eor.w	r7, r7, ip
    2c4a:	443e      	add	r6, r7
    2c4c:	78cf      	ldrb	r7, [r1, #3]
    2c4e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2c52:	ea87 070c 	eor.w	r7, r7, ip
    2c56:	443e      	add	r6, r7
    2c58:	790f      	ldrb	r7, [r1, #4]
    2c5a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2c5e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2c62:	ea87 070c 	eor.w	r7, r7, ip
    2c66:	443e      	add	r6, r7
    2c68:	794f      	ldrb	r7, [r1, #5]
    2c6a:	4057      	eors	r7, r2
    2c6c:	42f7      	cmn	r7, r6
    2c6e:	d004      	beq.n	2c7a <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2c70:	1c40      	adds	r0, r0, #1
    2c72:	b2c0      	uxtb	r0, r0
    2c74:	4285      	cmp	r5, r0
    2c76:	d8d1      	bhi.n	2c1c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    2c78:	2008      	movs	r0, #8
    2c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c7c:	2000128e 	.word	0x2000128e

00002c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c84:	4604      	mov	r4, r0
    2c86:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2c8a:	f04f 0901 	mov.w	r9, #1
    2c8e:	b171      	cbz	r1, 2cae <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2c90:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2c94:	1e7e      	subs	r6, r7, #1
    2c96:	2901      	cmp	r1, #1
    2c98:	d029      	beq.n	2cee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2c9a:	2902      	cmp	r1, #2
    2c9c:	d04e      	beq.n	2d3c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    2c9e:	2903      	cmp	r1, #3
    2ca0:	d123      	bne.n	2cea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2ca2:	4639      	mov	r1, r7
    2ca4:	4630      	mov	r0, r6
    2ca6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2caa:	f00b ba93 	b.w	e1d4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2cae:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2cb2:	2100      	movs	r1, #0
    2cb4:	f00e f86d 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2cb8:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2cbc:	4924      	ldr	r1, [pc, #144]	; (2d50 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2cbe:	66e9      	str	r1, [r5, #108]	; 0x6c
    2cc0:	4620      	mov	r0, r4
    2cc2:	2107      	movs	r1, #7
    2cc4:	6729      	str	r1, [r5, #112]	; 0x70
    2cc6:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2cca:	f021 0104 	bic.w	r1, r1, #4
    2cce:	7001      	strb	r1, [r0, #0]
    2cd0:	20fe      	movs	r0, #254	; 0xfe
    2cd2:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2cd6:	207f      	movs	r0, #127	; 0x7f
    2cd8:	7668      	strb	r0, [r5, #25]
    2cda:	481e      	ldr	r0, [pc, #120]	; (2d54 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2cdc:	60a8      	str	r0, [r5, #8]
    2cde:	2000      	movs	r0, #0
    2ce0:	e9c5 0000 	strd	r0, r0, [r5]
    2ce4:	2020      	movs	r0, #32
    2ce6:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cee:	f04f 0800 	mov.w	r8, #0
    2cf2:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2cf6:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2cfa:	6921      	ldr	r1, [r4, #16]
    2cfc:	4816      	ldr	r0, [pc, #88]	; (2d58 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2cfe:	460a      	mov	r2, r1
    2d00:	4408      	add	r0, r1
    2d02:	fbb0 f0f1 	udiv	r0, r0, r1
    2d06:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2d0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2d0e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    2d12:	8b63      	ldrh	r3, [r4, #26]
    2d14:	4628      	mov	r0, r5
    2d16:	f000 f821 	bl	2d5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2d1a:	4639      	mov	r1, r7
    2d1c:	4630      	mov	r0, r6
    2d1e:	f00b fa59 	bl	e1d4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2d22:	f00d ff3e 	bl	10ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2d26:	b118      	cbz	r0, 2d30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    2d28:	6960      	ldr	r0, [r4, #20]
    2d2a:	f000 fbbd 	bl	34a8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2d2e:	b110      	cbz	r0, 2d36 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    2d30:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2d34:	e7d9      	b.n	2cea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2d36:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2d3a:	e7d6      	b.n	2cea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2d3c:	6901      	ldr	r1, [r0, #16]
    2d3e:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    2d42:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2d46:	4628      	mov	r0, r5
    2d48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d4c:	f000 b806 	b.w	2d5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2d50:	c404492f 	.word	0xc404492f
    2d54:	fffce000 	.word	0xfffce000
    2d58:	01c9c37f 	.word	0x01c9c37f
    2d5c:	b510      	push	{r4, lr}
    2d5e:	2400      	movs	r4, #0
    2d60:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    2d64:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    2d68:	434c      	muls	r4, r1
    2d6a:	fbb4 f4f2 	udiv	r4, r4, r2
    2d6e:	f820 4910 	strh.w	r4, [r0], #-16
    2d72:	f240 2471 	movw	r4, #625	; 0x271
    2d76:	4363      	muls	r3, r4
    2d78:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2d7c:	1e5b      	subs	r3, r3, #1
    2d7e:	fbb3 f3f2 	udiv	r3, r3, r2
    2d82:	81c3      	strh	r3, [r0, #14]
    2d84:	4b09      	ldr	r3, [pc, #36]	; (2dac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    2d86:	fbb3 f3f2 	udiv	r3, r3, r2
    2d8a:	1c5b      	adds	r3, r3, #1
    2d8c:	8283      	strh	r3, [r0, #20]
    2d8e:	8903      	ldrh	r3, [r0, #8]
    2d90:	4363      	muls	r3, r4
    2d92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2d96:	1e5b      	subs	r3, r3, #1
    2d98:	fbb3 f3f2 	udiv	r3, r3, r2
    2d9c:	6043      	str	r3, [r0, #4]
    2d9e:	6803      	ldr	r3, [r0, #0]
    2da0:	434b      	muls	r3, r1
    2da2:	fbb3 f1f2 	udiv	r1, r3, r2
    2da6:	6001      	str	r1, [r0, #0]
    2da8:	bd10      	pop	{r4, pc}
    2daa:	0000      	.short	0x0000
    2dac:	02625a00 	.word	0x02625a00

00002db0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2db0:	4902      	ldr	r1, [pc, #8]	; (2dbc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2db2:	f991 1000 	ldrsb.w	r1, [r1]
    2db6:	f00b b9be 	b.w	e136 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2dba:	0000      	.short	0x0000
    2dbc:	20000370 	.word	0x20000370

00002dc0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2dc0:	b508      	push	{r3, lr}
    2dc2:	207f      	movs	r0, #127	; 0x7f
    2dc4:	f88d 0000 	strb.w	r0, [sp]
    2dc8:	4668      	mov	r0, sp
    2dca:	f005 fbc3 	bl	8554 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2dce:	b140      	cbz	r0, 2de2 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2dd0:	4805      	ldr	r0, [pc, #20]	; (2de8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2dd2:	7840      	ldrb	r0, [r0, #1]
    2dd4:	4240      	negs	r0, r0
    2dd6:	b241      	sxtb	r1, r0
    2dd8:	f99d 0000 	ldrsb.w	r0, [sp]
    2ddc:	f00b f9ab 	bl	e136 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2de0:	bd08      	pop	{r3, pc}
    2de2:	f99d 0000 	ldrsb.w	r0, [sp]
    2de6:	bd08      	pop	{r3, pc}
    2de8:	20000370 	.word	0x20000370

00002dec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2dec:	4a01      	ldr	r2, [pc, #4]	; (2df4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2dee:	7010      	strb	r0, [r2, #0]
    2df0:	7051      	strb	r1, [r2, #1]
    2df2:	4770      	bx	lr
    2df4:	20000370 	.word	0x20000370
    2df8:	b570      	push	{r4, r5, r6, lr}
    2dfa:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2dfe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2e02:	2401      	movs	r4, #1
    2e04:	fb03 2101 	mla	r1, r3, r1, r2
    2e08:	2225      	movs	r2, #37	; 0x25
    2e0a:	fbb1 f3f2 	udiv	r3, r1, r2
    2e0e:	fb02 1113 	mls	r1, r2, r3, r1
    2e12:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    2e16:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2e1a:	f001 0307 	and.w	r3, r1, #7
    2e1e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2e22:	fa04 f303 	lsl.w	r3, r4, r3
    2e26:	421a      	tst	r2, r3
    2e28:	d004      	beq.n	2e34 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    2e2a:	bf00      	nop
    2e2c:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2e30:	2000      	movs	r0, #0
    2e32:	bd70      	pop	{r4, r5, r6, pc}
    2e34:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2e38:	fbb1 f3f2 	udiv	r3, r1, r2
    2e3c:	fb02 1113 	mls	r1, r2, r3, r1
    2e40:	1c49      	adds	r1, r1, #1
    2e42:	b2c9      	uxtb	r1, r1
    2e44:	2300      	movs	r3, #0
    2e46:	18c5      	adds	r5, r0, r3
    2e48:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2e4c:	428a      	cmp	r2, r1
    2e4e:	d312      	bcc.n	2e76 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    2e50:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2e54:	2200      	movs	r2, #0
    2e56:	bf00      	nop
    2e58:	fa04 f602 	lsl.w	r6, r4, r2
    2e5c:	4235      	tst	r5, r6
    2e5e:	d001      	beq.n	2e64 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    2e60:	1e49      	subs	r1, r1, #1
    2e62:	b2c9      	uxtb	r1, r1
    2e64:	b121      	cbz	r1, 2e70 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    2e66:	1c52      	adds	r2, r2, #1
    2e68:	b2d2      	uxtb	r2, r2
    2e6a:	2a08      	cmp	r2, #8
    2e6c:	d3f4      	bcc.n	2e58 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    2e6e:	e004      	b.n	2e7a <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    2e70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2e74:	e7da      	b.n	2e2c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    2e76:	1a89      	subs	r1, r1, r2
    2e78:	b2c9      	uxtb	r1, r1
    2e7a:	1c5b      	adds	r3, r3, #1
    2e7c:	b2db      	uxtb	r3, r3
    2e7e:	2b05      	cmp	r3, #5
    2e80:	d3e1      	bcc.n	2e46 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    2e82:	201f      	movs	r0, #31
    2e84:	bd70      	pop	{r4, r5, r6, pc}
    2e86:	0000      	movs	r0, r0
    2e88:	b570      	push	{r4, r5, r6, lr}
    2e8a:	1c49      	adds	r1, r1, #1
    2e8c:	2300      	movs	r3, #0
    2e8e:	b2c9      	uxtb	r1, r1
    2e90:	2401      	movs	r4, #1
    2e92:	18c5      	adds	r5, r0, r3
    2e94:	79aa      	ldrb	r2, [r5, #6]
    2e96:	428a      	cmp	r2, r1
    2e98:	d312      	bcc.n	2ec0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    2e9a:	f895 5001 	ldrb.w	r5, [r5, #1]
    2e9e:	2200      	movs	r2, #0
    2ea0:	fa04 f602 	lsl.w	r6, r4, r2
    2ea4:	4235      	tst	r5, r6
    2ea6:	d001      	beq.n	2eac <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    2ea8:	1e49      	subs	r1, r1, #1
    2eaa:	b2c9      	uxtb	r1, r1
    2eac:	b121      	cbz	r1, 2eb8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    2eae:	1c52      	adds	r2, r2, #1
    2eb0:	b2d2      	uxtb	r2, r2
    2eb2:	2a08      	cmp	r2, #8
    2eb4:	d3f4      	bcc.n	2ea0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    2eb6:	e005      	b.n	2ec4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2eb8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2ebc:	b2c0      	uxtb	r0, r0
    2ebe:	bd70      	pop	{r4, r5, r6, pc}
    2ec0:	1a89      	subs	r1, r1, r2
    2ec2:	b2c9      	uxtb	r1, r1
    2ec4:	1c5b      	adds	r3, r3, #1
    2ec6:	b2db      	uxtb	r3, r3
    2ec8:	2b05      	cmp	r3, #5
    2eca:	d3e2      	bcc.n	2e92 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2ecc:	219d      	movs	r1, #157	; 0x9d
    2ece:	2046      	movs	r0, #70	; 0x46
    2ed0:	f7fe f938 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002ed4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2ed4:	7841      	ldrb	r1, [r0, #1]
    2ed6:	b141      	cbz	r1, 2eea <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2ed8:	78c0      	ldrb	r0, [r0, #3]
    2eda:	282b      	cmp	r0, #43	; 0x2b
    2edc:	d203      	bcs.n	2ee6 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2ede:	4a04      	ldr	r2, [pc, #16]	; (2ef0 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2ee0:	5c10      	ldrb	r0, [r2, r0]
    2ee2:	4288      	cmp	r0, r1
    2ee4:	d101      	bne.n	2eea <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2ee6:	2001      	movs	r0, #1
    2ee8:	4770      	bx	lr
    2eea:	2000      	movs	r0, #0
    2eec:	4770      	bx	lr
    2eee:	0000      	.short	0x0000
    2ef0:	00010edc 	.word	0x00010edc

00002ef4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    2ef4:	b510      	push	{r4, lr}
    2ef6:	2201      	movs	r2, #1
    2ef8:	70c1      	strb	r1, [r0, #3]
    2efa:	292b      	cmp	r1, #43	; 0x2b
    2efc:	d202      	bcs.n	2f04 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2efe:	4a06      	ldr	r2, [pc, #24]	; (2f18 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2f00:	5c52      	ldrb	r2, [r2, r1]
    2f02:	e006      	b.n	2f12 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2f04:	29ff      	cmp	r1, #255	; 0xff
    2f06:	d004      	beq.n	2f12 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2f08:	f240 4174 	movw	r1, #1140	; 0x474
    2f0c:	202a      	movs	r0, #42	; 0x2a
    2f0e:	f7fe f919 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f12:	7042      	strb	r2, [r0, #1]
    2f14:	bd10      	pop	{r4, pc}
    2f16:	0000      	.short	0x0000
    2f18:	00010edc 	.word	0x00010edc

00002f1c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2f1c:	4904      	ldr	r1, [pc, #16]	; (2f30 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2f1e:	7c89      	ldrb	r1, [r1, #18]
    2f20:	0749      	lsls	r1, r1, #29
    2f22:	d400      	bmi.n	2f26 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2f24:	b108      	cbz	r0, 2f2a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    2f26:	2000      	movs	r0, #0
    2f28:	4770      	bx	lr
    2f2a:	2001      	movs	r0, #1
    2f2c:	4770      	bx	lr
    2f2e:	0000      	.short	0x0000
    2f30:	20001190 	.word	0x20001190

00002f34 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2f34:	4803      	ldr	r0, [pc, #12]	; (2f44 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    2f36:	7c80      	ldrb	r0, [r0, #18]
    2f38:	0780      	lsls	r0, r0, #30
    2f3a:	d401      	bmi.n	2f40 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2f3c:	2001      	movs	r0, #1
    2f3e:	4770      	bx	lr
    2f40:	2000      	movs	r0, #0
    2f42:	4770      	bx	lr
    2f44:	20001190 	.word	0x20001190

00002f48 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2f48:	4803      	ldr	r0, [pc, #12]	; (2f58 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    2f4a:	7c80      	ldrb	r0, [r0, #18]
    2f4c:	07c0      	lsls	r0, r0, #31
    2f4e:	d001      	beq.n	2f54 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2f50:	2000      	movs	r0, #0
    2f52:	4770      	bx	lr
    2f54:	2001      	movs	r0, #1
    2f56:	4770      	bx	lr
    2f58:	20001190 	.word	0x20001190
    2f5c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2f60:	4688      	mov	r8, r1
    2f62:	4699      	mov	r9, r3
    2f64:	4615      	mov	r5, r2
    2f66:	4604      	mov	r4, r0
    2f68:	4669      	mov	r1, sp
    2f6a:	f00a ff4e 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2f6e:	bbe0      	cbnz	r0, 2fea <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2f70:	9e01      	ldr	r6, [sp, #4]
    2f72:	2700      	movs	r7, #0
    2f74:	3680      	adds	r6, #128	; 0x80
    2f76:	b17d      	cbz	r5, 2f98 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2f78:	4620      	mov	r0, r4
    2f7a:	f7fe fdbb 	bl	1af4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2f7e:	0004      	movs	r4, r0
    2f80:	d00e      	beq.n	2fa0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    2f82:	4629      	mov	r1, r5
    2f84:	f00a fb51 	bl	d62a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2f88:	b118      	cbz	r0, 2f92 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2f8a:	491b      	ldr	r1, [pc, #108]	; (2ff8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    2f8c:	8849      	ldrh	r1, [r1, #2]
    2f8e:	42a9      	cmp	r1, r5
    2f90:	d208      	bcs.n	2fa4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    2f92:	2000      	movs	r0, #0
    2f94:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2f98:	2001      	movs	r0, #1
    2f9a:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2f9e:	e024      	b.n	2fea <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2fa0:	2167      	movs	r1, #103	; 0x67
    2fa2:	e025      	b.n	2ff0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2fa4:	4601      	mov	r1, r0
    2fa6:	aa02      	add	r2, sp, #8
    2fa8:	4620      	mov	r0, r4
    2faa:	f00a fb37 	bl	d61c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2fae:	9802      	ldr	r0, [sp, #8]
    2fb0:	8007      	strh	r7, [r0, #0]
    2fb2:	7087      	strb	r7, [r0, #2]
    2fb4:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2fb8:	b109      	cbz	r1, 2fbe <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2fba:	f04f 0802 	mov.w	r8, #2
    2fbe:	4641      	mov	r1, r8
    2fc0:	f00b fa5b 	bl	e47a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2fc4:	9802      	ldr	r0, [sp, #8]
    2fc6:	462a      	mov	r2, r5
    2fc8:	4649      	mov	r1, r9
    2fca:	1cc0      	adds	r0, r0, #3
    2fcc:	f00d fe67 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2fd0:	4620      	mov	r0, r4
    2fd2:	4629      	mov	r1, r5
    2fd4:	f00a fae0 	bl	d598 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2fd8:	b148      	cbz	r0, 2fee <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2fda:	4668      	mov	r0, sp
    2fdc:	f00b faa8 	bl	e530 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    2fe0:	9801      	ldr	r0, [sp, #4]
    2fe2:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    2fe6:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2fea:	2001      	movs	r0, #1
    2fec:	e7d2      	b.n	2f94 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2fee:	217c      	movs	r1, #124	; 0x7c
    2ff0:	202b      	movs	r0, #43	; 0x2b
    2ff2:	f7fe f8a7 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ff6:	0000      	.short	0x0000
    2ff8:	20001190 	.word	0x20001190

00002ffc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2ffc:	4809      	ldr	r0, [pc, #36]	; (3024 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2ffe:	b082      	sub	sp, #8
    3000:	7a00      	ldrb	r0, [r0, #8]
    3002:	f88d 0000 	strb.w	r0, [sp]
    3006:	9800      	ldr	r0, [sp, #0]
    3008:	9000      	str	r0, [sp, #0]
    300a:	f89d 0000 	ldrb.w	r0, [sp]
    300e:	2800      	cmp	r0, #0
    3010:	d105      	bne.n	301e <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    3012:	2202      	movs	r2, #2
    3014:	4904      	ldr	r1, [pc, #16]	; (3028 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    3016:	4803      	ldr	r0, [pc, #12]	; (3024 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    3018:	b002      	add	sp, #8
    301a:	f00b bab5 	b.w	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    301e:	b002      	add	sp, #8
    3020:	4770      	bx	lr
    3022:	0000      	.short	0x0000
    3024:	200011a8 	.word	0x200011a8
    3028:	0000e5cf 	.word	0x0000e5cf

0000302c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    302c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3030:	f8df 9178 	ldr.w	r9, [pc, #376]	; 31ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    3034:	4f5e      	ldr	r7, [pc, #376]	; (31b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    3036:	4683      	mov	fp, r0
    3038:	f04f 0a01 	mov.w	sl, #1
    303c:	2600      	movs	r6, #0
    303e:	6878      	ldr	r0, [r7, #4]
    3040:	4635      	mov	r5, r6
    3042:	7a00      	ldrb	r0, [r0, #8]
    3044:	f88d 0000 	strb.w	r0, [sp]
    3048:	9800      	ldr	r0, [sp, #0]
    304a:	9000      	str	r0, [sp, #0]
    304c:	f89d 1000 	ldrb.w	r1, [sp]
    3050:	2910      	cmp	r1, #16
    3052:	d106      	bne.n	3062 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    3054:	f899 1013 	ldrb.w	r1, [r9, #19]
    3058:	b119      	cbz	r1, 3062 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    305a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    305e:	2800      	cmp	r0, #0
    3060:	d073      	beq.n	314a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3062:	f88d 6000 	strb.w	r6, [sp]
    3066:	4668      	mov	r0, sp
    3068:	f000 f906 	bl	3278 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    306c:	f89d 1000 	ldrb.w	r1, [sp]
    3070:	2900      	cmp	r1, #0
    3072:	d1f8      	bne.n	3066 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    3074:	2800      	cmp	r0, #0
    3076:	d068      	beq.n	314a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3078:	4604      	mov	r4, r0
    307a:	7a00      	ldrb	r0, [r0, #8]
    307c:	f88d 0000 	strb.w	r0, [sp]
    3080:	9800      	ldr	r0, [sp, #0]
    3082:	9000      	str	r0, [sp, #0]
    3084:	f89d 8000 	ldrb.w	r8, [sp]
    3088:	f104 0008 	add.w	r0, r4, #8
    308c:	2105      	movs	r1, #5
    308e:	9000      	str	r0, [sp, #0]
    3090:	7001      	strb	r1, [r0, #0]
    3092:	4640      	mov	r0, r8
    3094:	f1b8 0f08 	cmp.w	r8, #8
    3098:	d042      	beq.n	3120 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    309a:	dc07      	bgt.n	30ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    309c:	2802      	cmp	r0, #2
    309e:	d00d      	beq.n	30bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    30a0:	2803      	cmp	r0, #3
    30a2:	d017      	beq.n	30d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    30a4:	f1b8 0f04 	cmp.w	r8, #4
    30a8:	d105      	bne.n	30b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    30aa:	e01d      	b.n	30e8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    30ac:	280f      	cmp	r0, #15
    30ae:	d052      	beq.n	3156 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    30b0:	f1b8 0f10 	cmp.w	r8, #16
    30b4:	d059      	beq.n	316a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    30b6:	f240 214a 	movw	r1, #586	; 0x24a
    30ba:	e065      	b.n	3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30bc:	6862      	ldr	r2, [r4, #4]
    30be:	b132      	cbz	r2, 30ce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    30c0:	4659      	mov	r1, fp
    30c2:	4620      	mov	r0, r4
    30c4:	4790      	blx	r2
    30c6:	2004      	movs	r0, #4
    30c8:	f360 0507 	bfi	r5, r0, #0, #8
    30cc:	e010      	b.n	30f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    30ce:	f240 11c3 	movw	r1, #451	; 0x1c3
    30d2:	e059      	b.n	3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30d4:	6862      	ldr	r2, [r4, #4]
    30d6:	b122      	cbz	r2, 30e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    30d8:	4659      	mov	r1, fp
    30da:	4620      	mov	r0, r4
    30dc:	4790      	blx	r2
    30de:	4605      	mov	r5, r0
    30e0:	e006      	b.n	30f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    30e2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    30e6:	e04f      	b.n	3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30e8:	6861      	ldr	r1, [r4, #4]
    30ea:	b1b1      	cbz	r1, 311a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    30ec:	4620      	mov	r0, r4
    30ee:	4788      	blx	r1
    30f0:	f3c5 2007 	ubfx	r0, r5, #8, #8
    30f4:	2801      	cmp	r0, #1
    30f6:	d04a      	beq.n	318e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    30f8:	f3ef 8110 	mrs	r1, PRIMASK
    30fc:	b672      	cpsid	i
    30fe:	7a20      	ldrb	r0, [r4, #8]
    3100:	f88d 0000 	strb.w	r0, [sp]
    3104:	9800      	ldr	r0, [sp, #0]
    3106:	9000      	str	r0, [sp, #0]
    3108:	f89d 0000 	ldrb.w	r0, [sp]
    310c:	2805      	cmp	r0, #5
    310e:	d042      	beq.n	3196 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3110:	b3b0      	cbz	r0, 3180 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    3112:	f366 0507 	bfi	r5, r6, #0, #8
    3116:	b3a1      	cbz	r1, 3182 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    3118:	e041      	b.n	319e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    311a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    311e:	e033      	b.n	3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3120:	6860      	ldr	r0, [r4, #4]
    3122:	465d      	mov	r5, fp
    3124:	b198      	cbz	r0, 314e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    3126:	8804      	ldrh	r4, [r0, #0]
    3128:	4620      	mov	r0, r4
    312a:	f7fe fce3 	bl	1af4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    312e:	b180      	cbz	r0, 3152 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3130:	706e      	strb	r6, [r5, #1]
    3132:	210d      	movs	r1, #13
    3134:	7029      	strb	r1, [r5, #0]
    3136:	80ec      	strh	r4, [r5, #6]
    3138:	f8a5 a008 	strh.w	sl, [r5, #8]
    313c:	f885 a004 	strb.w	sl, [r5, #4]
    3140:	4631      	mov	r1, r6
    3142:	f00a fb09 	bl	d758 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    3146:	2004      	movs	r0, #4
    3148:	613e      	str	r6, [r7, #16]
    314a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    314e:	21e5      	movs	r1, #229	; 0xe5
    3150:	e01a      	b.n	3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3152:	21c5      	movs	r1, #197	; 0xc5
    3154:	e018      	b.n	3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3156:	f88b 6001 	strb.w	r6, [fp, #1]
    315a:	2116      	movs	r1, #22
    315c:	f88b 1000 	strb.w	r1, [fp]
    3160:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3164:	f8cb 1004 	str.w	r1, [fp, #4]
    3168:	e7ad      	b.n	30c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    316a:	4812      	ldr	r0, [pc, #72]	; (31b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    316c:	6802      	ldr	r2, [r0, #0]
    316e:	b122      	cbz	r2, 317a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    3170:	6860      	ldr	r0, [r4, #4]
    3172:	b138      	cbz	r0, 3184 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    3174:	8800      	ldrh	r0, [r0, #0]
    3176:	4659      	mov	r1, fp
    3178:	4790      	blx	r2
    317a:	2002      	movs	r0, #2
    317c:	613e      	str	r6, [r7, #16]
    317e:	e7e4      	b.n	314a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3180:	e009      	b.n	3196 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3182:	e00b      	b.n	319c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    3184:	f44f 7110 	mov.w	r1, #576	; 0x240
    3188:	2010      	movs	r0, #16
    318a:	f7fd ffdb 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    318e:	9800      	ldr	r0, [sp, #0]
    3190:	4641      	mov	r1, r8
    3192:	7001      	strb	r1, [r0, #0]
    3194:	e003      	b.n	319e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    3196:	7226      	strb	r6, [r4, #8]
    3198:	613e      	str	r6, [r7, #16]
    319a:	e7bc      	b.n	3116 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    319c:	b662      	cpsie	i
    319e:	f015 0fff 	tst.w	r5, #255	; 0xff
    31a2:	f43f af4c 	beq.w	303e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    31a6:	b2e8      	uxtb	r0, r5
    31a8:	e7cf      	b.n	314a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    31aa:	0000      	.short	0x0000
    31ac:	20001190 	.word	0x20001190
    31b0:	200011bc 	.word	0x200011bc
    31b4:	200000c8 	.word	0x200000c8

000031b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    31b8:	4901      	ldr	r1, [pc, #4]	; (31c0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    31ba:	7008      	strb	r0, [r1, #0]
    31bc:	f000 b8be 	b.w	333c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    31c0:	20000372 	.word	0x20000372

000031c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    31c4:	4902      	ldr	r1, [pc, #8]	; (31d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    31c6:	4801      	ldr	r0, [pc, #4]	; (31cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    31c8:	6008      	str	r0, [r1, #0]
    31ca:	4770      	bx	lr
    31cc:	000031d5 	.word	0x000031d5
    31d0:	200000c8 	.word	0x200000c8
    31d4:	b538      	push	{r3, r4, r5, lr}
    31d6:	000d      	movs	r5, r1
    31d8:	d014      	beq.n	3204 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    31da:	80a8      	strh	r0, [r5, #4]
    31dc:	2100      	movs	r1, #0
    31de:	7269      	strb	r1, [r5, #9]
    31e0:	f7fe fc72 	bl	1ac8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    31e4:	4604      	mov	r4, r0
    31e6:	f00a f9fb 	bl	d5e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    31ea:	b170      	cbz	r0, 320a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    31ec:	4601      	mov	r1, r0
    31ee:	466a      	mov	r2, sp
    31f0:	4620      	mov	r0, r4
    31f2:	f00a fa13 	bl	d61c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    31f6:	80e8      	strh	r0, [r5, #6]
    31f8:	b150      	cbz	r0, 3210 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    31fa:	28fb      	cmp	r0, #251	; 0xfb
    31fc:	d90b      	bls.n	3216 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    31fe:	f240 1123 	movw	r1, #291	; 0x123
    3202:	e033      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3204:	f240 1113 	movw	r1, #275	; 0x113
    3208:	e030      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    320a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    320e:	e02d      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3210:	f240 1121 	movw	r1, #289	; 0x121
    3214:	e02a      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3216:	9800      	ldr	r0, [sp, #0]
    3218:	f00b f8db 	bl	e3d2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    321c:	2801      	cmp	r0, #1
    321e:	d004      	beq.n	322a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3220:	2802      	cmp	r0, #2
    3222:	d002      	beq.n	322a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3224:	f240 1133 	movw	r1, #307	; 0x133
    3228:	e020      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    322a:	7228      	strb	r0, [r5, #8]
    322c:	6828      	ldr	r0, [r5, #0]
    322e:	b1a8      	cbz	r0, 325c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    3230:	9900      	ldr	r1, [sp, #0]
    3232:	88ea      	ldrh	r2, [r5, #6]
    3234:	1cc9      	adds	r1, r1, #3
    3236:	f00d fd32 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    323a:	4620      	mov	r0, r4
    323c:	f00a f998 	bl	d570 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    3240:	b178      	cbz	r0, 3262 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    3242:	4620      	mov	r0, r4
    3244:	2100      	movs	r1, #0
    3246:	f00a fa87 	bl	d758 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    324a:	b168      	cbz	r0, 3268 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    324c:	4809      	ldr	r0, [pc, #36]	; (3274 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    324e:	7cc1      	ldrb	r1, [r0, #19]
    3250:	2900      	cmp	r1, #0
    3252:	d002      	beq.n	325a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    3254:	8a81      	ldrh	r1, [r0, #20]
    3256:	1e49      	subs	r1, r1, #1
    3258:	8281      	strh	r1, [r0, #20]
    325a:	bd38      	pop	{r3, r4, r5, pc}
    325c:	f44f 719d 	mov.w	r1, #314	; 0x13a
    3260:	e004      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3262:	f240 113f 	movw	r1, #319	; 0x13f
    3266:	e001      	b.n	326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3268:	f44f 71a2 	mov.w	r1, #324	; 0x144
    326c:	2010      	movs	r0, #16
    326e:	f7fd ff69 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3272:	0000      	.short	0x0000
    3274:	20001190 	.word	0x20001190
    3278:	b538      	push	{r3, r4, r5, lr}
    327a:	4603      	mov	r3, r0
    327c:	4917      	ldr	r1, [pc, #92]	; (32dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    327e:	2000      	movs	r0, #0
    3280:	7018      	strb	r0, [r3, #0]
    3282:	6908      	ldr	r0, [r1, #16]
    3284:	2401      	movs	r4, #1
    3286:	b140      	cbz	r0, 329a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    3288:	7a02      	ldrb	r2, [r0, #8]
    328a:	f88d 2000 	strb.w	r2, [sp]
    328e:	9a00      	ldr	r2, [sp, #0]
    3290:	9200      	str	r2, [sp, #0]
    3292:	f89d 5000 	ldrb.w	r5, [sp]
    3296:	2d00      	cmp	r5, #0
    3298:	d111      	bne.n	32be <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    329a:	6848      	ldr	r0, [r1, #4]
    329c:	7a02      	ldrb	r2, [r0, #8]
    329e:	f88d 2000 	strb.w	r2, [sp]
    32a2:	9a00      	ldr	r2, [sp, #0]
    32a4:	9200      	str	r2, [sp, #0]
    32a6:	f89d 5000 	ldrb.w	r5, [sp]
    32aa:	2d01      	cmp	r5, #1
    32ac:	d006      	beq.n	32bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    32ae:	f3ef 8210 	mrs	r2, PRIMASK
    32b2:	b672      	cpsid	i
    32b4:	6805      	ldr	r5, [r0, #0]
    32b6:	604d      	str	r5, [r1, #4]
    32b8:	b112      	cbz	r2, 32c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    32ba:	e002      	b.n	32c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    32bc:	2000      	movs	r0, #0
    32be:	bd38      	pop	{r3, r4, r5, pc}
    32c0:	b662      	cpsie	i
    32c2:	7a02      	ldrb	r2, [r0, #8]
    32c4:	f88d 2000 	strb.w	r2, [sp]
    32c8:	9a00      	ldr	r2, [sp, #0]
    32ca:	9200      	str	r2, [sp, #0]
    32cc:	f89d 5000 	ldrb.w	r5, [sp]
    32d0:	b10d      	cbz	r5, 32d6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    32d2:	6108      	str	r0, [r1, #16]
    32d4:	bd38      	pop	{r3, r4, r5, pc}
    32d6:	701c      	strb	r4, [r3, #0]
    32d8:	bd38      	pop	{r3, r4, r5, pc}
    32da:	0000      	.short	0x0000
    32dc:	200011bc 	.word	0x200011bc
    32e0:	b538      	push	{r3, r4, r5, lr}
    32e2:	b1d0      	cbz	r0, 331a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    32e4:	6041      	str	r1, [r0, #4]
    32e6:	f100 0108 	add.w	r1, r0, #8
    32ea:	700a      	strb	r2, [r1, #0]
    32ec:	f3ef 8310 	mrs	r3, PRIMASK
    32f0:	b672      	cpsid	i
    32f2:	4c10      	ldr	r4, [pc, #64]	; (3334 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    32f4:	6004      	str	r4, [r0, #0]
    32f6:	1f21      	subs	r1, r4, #4
    32f8:	684a      	ldr	r2, [r1, #4]
    32fa:	b14a      	cbz	r2, 3310 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    32fc:	7a12      	ldrb	r2, [r2, #8]
    32fe:	f88d 2000 	strb.w	r2, [sp]
    3302:	9a00      	ldr	r2, [sp, #0]
    3304:	9200      	str	r2, [sp, #0]
    3306:	f89d 5000 	ldrb.w	r5, [sp]
    330a:	2d01      	cmp	r5, #1
    330c:	d100      	bne.n	3310 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    330e:	600c      	str	r4, [r1, #0]
    3310:	680a      	ldr	r2, [r1, #0]
    3312:	6010      	str	r0, [r2, #0]
    3314:	6008      	str	r0, [r1, #0]
    3316:	b12b      	cbz	r3, 3324 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    3318:	e005      	b.n	3326 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    331a:	f240 2175 	movw	r1, #629	; 0x275
    331e:	2010      	movs	r0, #16
    3320:	f7fd ff10 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3324:	b662      	cpsie	i
    3326:	4804      	ldr	r0, [pc, #16]	; (3338 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    3328:	7800      	ldrb	r0, [r0, #0]
    332a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    332e:	f009 ba75 	b.w	c81c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3332:	0000      	.short	0x0000
    3334:	200011c0 	.word	0x200011c0
    3338:	20000372 	.word	0x20000372
    333c:	b510      	push	{r4, lr}
    333e:	2214      	movs	r2, #20
    3340:	2100      	movs	r1, #0
    3342:	4808      	ldr	r0, [pc, #32]	; (3364 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3344:	f00d fd25 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3348:	4806      	ldr	r0, [pc, #24]	; (3364 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    334a:	2212      	movs	r2, #18
    334c:	2100      	movs	r1, #0
    334e:	3814      	subs	r0, #20
    3350:	f00d fd1f 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3354:	4803      	ldr	r0, [pc, #12]	; (3364 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3356:	2101      	movs	r1, #1
    3358:	7301      	strb	r1, [r0, #12]
    335a:	1d01      	adds	r1, r0, #4
    335c:	6041      	str	r1, [r0, #4]
    335e:	6001      	str	r1, [r0, #0]
    3360:	bd10      	pop	{r4, pc}
    3362:	0000      	.short	0x0000
    3364:	200011bc 	.word	0x200011bc

00003368 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    3368:	b4f0      	push	{r4, r5, r6, r7}
    336a:	8150      	strh	r0, [r2, #10]
    336c:	890c      	ldrh	r4, [r1, #8]
    336e:	8194      	strh	r4, [r2, #12]
    3370:	898b      	ldrh	r3, [r1, #12]
    3372:	81d3      	strh	r3, [r2, #14]
    3374:	8948      	ldrh	r0, [r1, #10]
    3376:	8210      	strh	r0, [r2, #16]
    3378:	89cd      	ldrh	r5, [r1, #14]
    337a:	8255      	strh	r5, [r2, #18]
    337c:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    337e:	42ae      	cmp	r6, r5
    3380:	d108      	bne.n	3394 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3382:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    3384:	4285      	cmp	r5, r0
    3386:	d105      	bne.n	3394 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3388:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    338a:	429d      	cmp	r5, r3
    338c:	d102      	bne.n	3394 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    338e:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    3390:	42a3      	cmp	r3, r4
    3392:	d001      	beq.n	3398 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    3394:	2301      	movs	r3, #1
    3396:	e000      	b.n	339a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    3398:	2300      	movs	r3, #0
    339a:	7513      	strb	r3, [r2, #20]
    339c:	8548      	strh	r0, [r1, #42]	; 0x2a
    339e:	8a50      	ldrh	r0, [r2, #18]
    33a0:	85c8      	strh	r0, [r1, #46]	; 0x2e
    33a2:	8990      	ldrh	r0, [r2, #12]
    33a4:	8588      	strh	r0, [r1, #44]	; 0x2c
    33a6:	89d0      	ldrh	r0, [r2, #14]
    33a8:	8608      	strh	r0, [r1, #48]	; 0x30
    33aa:	bcf0      	pop	{r4, r5, r6, r7}
    33ac:	4901      	ldr	r1, [pc, #4]	; (33b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    33ae:	4610      	mov	r0, r2
    33b0:	f00b b8e4 	b.w	e57c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    33b4:	000033d9 	.word	0x000033d9

000033b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    33b8:	8150      	strh	r0, [r2, #10]
    33ba:	8a88      	ldrh	r0, [r1, #20]
    33bc:	8190      	strh	r0, [r2, #12]
    33be:	8ac8      	ldrh	r0, [r1, #22]
    33c0:	81d0      	strh	r0, [r2, #14]
    33c2:	8b08      	ldrh	r0, [r1, #24]
    33c4:	8210      	strh	r0, [r2, #16]
    33c6:	8b48      	ldrh	r0, [r1, #26]
    33c8:	8250      	strh	r0, [r2, #18]
    33ca:	4902      	ldr	r1, [pc, #8]	; (33d4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    33cc:	4610      	mov	r0, r2
    33ce:	f00b b8d2 	b.w	e576 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    33d2:	0000      	.short	0x0000
    33d4:	00003419 	.word	0x00003419
    33d8:	b538      	push	{r3, r4, r5, lr}
    33da:	f1a0 0418 	sub.w	r4, r0, #24
    33de:	7d00      	ldrb	r0, [r0, #20]
    33e0:	460d      	mov	r5, r1
    33e2:	f000 0001 	and.w	r0, r0, #1
    33e6:	f7ff fd99 	bl	2f1c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    33ea:	2100      	movs	r1, #0
    33ec:	b108      	cbz	r0, 33f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    33ee:	9100      	str	r1, [sp, #0]
    33f0:	e00c      	b.n	340c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    33f2:	7069      	strb	r1, [r5, #1]
    33f4:	2013      	movs	r0, #19
    33f6:	7028      	strb	r0, [r5, #0]
    33f8:	f854 0f22 	ldr.w	r0, [r4, #34]!
    33fc:	6068      	str	r0, [r5, #4]
    33fe:	6860      	ldr	r0, [r4, #4]
    3400:	60a8      	str	r0, [r5, #8]
    3402:	68a0      	ldr	r0, [r4, #8]
    3404:	60e8      	str	r0, [r5, #12]
    3406:	4803      	ldr	r0, [pc, #12]	; (3414 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    3408:	6840      	ldr	r0, [r0, #4]
    340a:	9000      	str	r0, [sp, #0]
    340c:	f8bd 0000 	ldrh.w	r0, [sp]
    3410:	bd38      	pop	{r3, r4, r5, pc}
    3412:	0000      	.short	0x0000
    3414:	000034a0 	.word	0x000034a0
    3418:	b570      	push	{r4, r5, r6, lr}
    341a:	b086      	sub	sp, #24
    341c:	460e      	mov	r6, r1
    341e:	4604      	mov	r4, r0
    3420:	f7ff fd88 	bl	2f34 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    3424:	2500      	movs	r5, #0
    3426:	b358      	cbz	r0, 3480 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    3428:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    342c:	7225      	strb	r5, [r4, #8]
    342e:	8804      	ldrh	r4, [r0, #0]
    3430:	a903      	add	r1, sp, #12
    3432:	4620      	mov	r0, r4
    3434:	f00c fdbf 	bl	ffb6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    3438:	b108      	cbz	r0, 343e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    343a:	21fe      	movs	r1, #254	; 0xfe
    343c:	e017      	b.n	346e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    343e:	f8ad 4000 	strh.w	r4, [sp]
    3442:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    3446:	f8ad 0002 	strh.w	r0, [sp, #2]
    344a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    344e:	f8ad 0004 	strh.w	r0, [sp, #4]
    3452:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3456:	f8ad 0006 	strh.w	r0, [sp, #6]
    345a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    345e:	f8ad 0008 	strh.w	r0, [sp, #8]
    3462:	4668      	mov	r0, sp
    3464:	f00c fde3 	bl	1002e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    3468:	b120      	cbz	r0, 3474 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    346a:	f240 1107 	movw	r1, #263	; 0x107
    346e:	202c      	movs	r0, #44	; 0x2c
    3470:	f7fd fe68 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3474:	f8cd 5000 	str.w	r5, [sp]
    3478:	f8bd 0000 	ldrh.w	r0, [sp]
    347c:	b006      	add	sp, #24
    347e:	bd70      	pop	{r4, r5, r6, pc}
    3480:	201b      	movs	r0, #27
    3482:	7030      	strb	r0, [r6, #0]
    3484:	7075      	strb	r5, [r6, #1]
    3486:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    348a:	6070      	str	r0, [r6, #4]
    348c:	6860      	ldr	r0, [r4, #4]
    348e:	60b0      	str	r0, [r6, #8]
    3490:	8920      	ldrh	r0, [r4, #8]
    3492:	81b0      	strh	r0, [r6, #12]
    3494:	4801      	ldr	r0, [pc, #4]	; (349c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    3496:	6800      	ldr	r0, [r0, #0]
    3498:	9000      	str	r0, [sp, #0]
    349a:	e7ed      	b.n	3478 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    349c:	000034a0 	.word	0x000034a0
    34a0:	00000004 	.word	0x00000004
    34a4:	00000004 	.word	0x00000004

000034a8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    34a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34aa:	f06f 021f 	mvn.w	r2, #31
    34ae:	0c01      	lsrs	r1, r0, #16
    34b0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    34b4:	251f      	movs	r5, #31
    34b6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34ba:	3854      	subs	r0, #84	; 0x54
    34bc:	d00d      	beq.n	34da <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34be:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34c2:	3855      	subs	r0, #85	; 0x55
    34c4:	d009      	beq.n	34da <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34c6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    34ca:	38aa      	subs	r0, #170	; 0xaa
    34cc:	d005      	beq.n	34da <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34ce:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    34d2:	38aa      	subs	r0, #170	; 0xaa
    34d4:	d001      	beq.n	34da <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34d6:	2001      	movs	r0, #1
    34d8:	e000      	b.n	34dc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    34da:	2000      	movs	r0, #0
    34dc:	2200      	movs	r2, #0
    34de:	4613      	mov	r3, r2
    34e0:	ea4f 0402 	mov.w	r4, r2
    34e4:	ea82 0701 	eor.w	r7, r2, r1
    34e8:	43ff      	mvns	r7, r7
    34ea:	431f      	orrs	r7, r3
    34ec:	1c7f      	adds	r7, r7, #1
    34ee:	d00f      	beq.n	3510 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    34f0:	f006 0701 	and.w	r7, r6, #1
    34f4:	0852      	lsrs	r2, r2, #1
    34f6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    34fa:	f005 0701 	and.w	r7, r5, #1
    34fe:	085b      	lsrs	r3, r3, #1
    3500:	0876      	lsrs	r6, r6, #1
    3502:	086d      	lsrs	r5, r5, #1
    3504:	1c64      	adds	r4, r4, #1
    3506:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    350a:	2c16      	cmp	r4, #22
    350c:	d3ea      	bcc.n	34e4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    350e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3510:	2000      	movs	r0, #0
    3512:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003514 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    3514:	b510      	push	{r4, lr}
    3516:	4804      	ldr	r0, [pc, #16]	; (3528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    3518:	f00b f951 	bl	e7be <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    351c:	4802      	ldr	r0, [pc, #8]	; (3528 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    351e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3522:	3008      	adds	r0, #8
    3524:	f00b b94b 	b.w	e7be <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    3528:	200000cc 	.word	0x200000cc

0000352c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    352c:	4801      	ldr	r0, [pc, #4]	; (3534 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    352e:	f000 b809 	b.w	3544 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3532:	0000      	.short	0x0000
    3534:	200000cc 	.word	0x200000cc

00003538 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3538:	4801      	ldr	r0, [pc, #4]	; (3540 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    353a:	f000 b803 	b.w	3544 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    353e:	0000      	.short	0x0000
    3540:	200000d4 	.word	0x200000d4
    3544:	b510      	push	{r4, lr}
    3546:	e9d0 2100 	ldrd	r2, r1, [r0]
    354a:	4b09      	ldr	r3, [pc, #36]	; (3570 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    354c:	4c09      	ldr	r4, [pc, #36]	; (3574 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    354e:	4353      	muls	r3, r2
    3550:	4354      	muls	r4, r2
    3552:	4051      	eors	r1, r2
    3554:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3558:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    355c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3560:	e9c0 2100 	strd	r2, r1, [r0]
    3564:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    356c:	4618      	mov	r0, r3
    356e:	bd10      	pop	{r4, pc}
    3570:	c6ef3760 	.word	0xc6ef3760
    3574:	9e3779bb 	.word	0x9e3779bb

00003578 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    3578:	b570      	push	{r4, r5, r6, lr}
    357a:	6844      	ldr	r4, [r0, #4]
    357c:	1d09      	adds	r1, r1, #4
    357e:	2500      	movs	r5, #0
    3580:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    3584:	3480      	adds	r4, #128	; 0x80
    3586:	07c0      	lsls	r0, r0, #31
    3588:	d001      	beq.n	358e <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    358a:	2001      	movs	r0, #1
    358c:	bd70      	pop	{r4, r5, r6, pc}
    358e:	6848      	ldr	r0, [r1, #4]
    3590:	6809      	ldr	r1, [r1, #0]
    3592:	4b0c      	ldr	r3, [pc, #48]	; (35c4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    3594:	f641 0207 	movw	r2, #6151	; 0x1807
    3598:	4019      	ands	r1, r3
    359a:	66e1      	str	r1, [r4, #108]	; 0x6c
    359c:	4010      	ands	r0, r2
    359e:	6720      	str	r0, [r4, #112]	; 0x70
    35a0:	211b      	movs	r1, #27
    35a2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    35a6:	f00b fa30 	bl	ea0a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    35aa:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    35ae:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    35b2:	1c40      	adds	r0, r0, #1
    35b4:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    35b8:	68e0      	ldr	r0, [r4, #12]
    35ba:	f040 0001 	orr.w	r0, r0, #1
    35be:	60e0      	str	r0, [r4, #12]
    35c0:	2000      	movs	r0, #0
    35c2:	bd70      	pop	{r4, r5, r6, pc}
    35c4:	f704492f 	.word	0xf704492f

000035c8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    35c8:	b510      	push	{r4, lr}
    35ca:	1d04      	adds	r4, r0, #4
    35cc:	f004 fa04 	bl	79d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    35d0:	4b03      	ldr	r3, [pc, #12]	; (35e0 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    35d2:	f641 0207 	movw	r2, #6151	; 0x1807
    35d6:	4018      	ands	r0, r3
    35d8:	4011      	ands	r1, r2
    35da:	6020      	str	r0, [r4, #0]
    35dc:	6061      	str	r1, [r4, #4]
    35de:	bd10      	pop	{r4, pc}
    35e0:	f704492f 	.word	0xf704492f

000035e4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    35e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    35e8:	7803      	ldrb	r3, [r0, #0]
    35ea:	6840      	ldr	r0, [r0, #4]
    35ec:	1d0f      	adds	r7, r1, #4
    35ee:	f100 0580 	add.w	r5, r0, #128	; 0x80
    35f2:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    35f6:	4606      	mov	r6, r0
    35f8:	f04f 0800 	mov.w	r8, #0
    35fc:	7f6a      	ldrb	r2, [r5, #29]
    35fe:	2107      	movs	r1, #7
    3600:	4628      	mov	r0, r5
    3602:	f00a fc19 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3606:	b1e0      	cbz	r0, 3642 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3608:	6839      	ldr	r1, [r7, #0]
    360a:	4b18      	ldr	r3, [pc, #96]	; (366c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    360c:	6878      	ldr	r0, [r7, #4]
    360e:	4019      	ands	r1, r3
    3610:	f641 0207 	movw	r2, #6151	; 0x1807
    3614:	66e9      	str	r1, [r5, #108]	; 0x6c
    3616:	4010      	ands	r0, r2
    3618:	6728      	str	r0, [r5, #112]	; 0x70
    361a:	211b      	movs	r1, #27
    361c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3620:	f00b f9f3 	bl	ea0a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    3624:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    3628:	f885 801d 	strb.w	r8, [r5, #29]
    362c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3630:	4640      	mov	r0, r8
    3632:	f88d 1000 	strb.w	r1, [sp]
    3636:	9900      	ldr	r1, [sp, #0]
    3638:	9100      	str	r1, [sp, #0]
    363a:	f89d 1000 	ldrb.w	r1, [sp]
    363e:	b991      	cbnz	r1, 3666 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    3640:	e002      	b.n	3648 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    3642:	2001      	movs	r0, #1
    3644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3648:	8831      	ldrh	r1, [r6, #0]
    364a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    364e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3652:	6839      	ldr	r1, [r7, #0]
    3654:	66e1      	str	r1, [r4, #108]	; 0x6c
    3656:	6879      	ldr	r1, [r7, #4]
    3658:	6721      	str	r1, [r4, #112]	; 0x70
    365a:	2202      	movs	r2, #2
    365c:	4904      	ldr	r1, [pc, #16]	; (3670 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    365e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3662:	f00a ff91 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3666:	2000      	movs	r0, #0
    3668:	e7ec      	b.n	3644 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    366a:	0000      	.short	0x0000
    366c:	f704492f 	.word	0xf704492f
    3670:	0000ea77 	.word	0x0000ea77

00003674 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    3674:	b570      	push	{r4, r5, r6, lr}
    3676:	1d0d      	adds	r5, r1, #4
    3678:	6844      	ldr	r4, [r0, #4]
    367a:	f004 f9ad 	bl	79d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    367e:	f641 0207 	movw	r2, #6151	; 0x1807
    3682:	4b05      	ldr	r3, [pc, #20]	; (3698 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    3684:	4011      	ands	r1, r2
    3686:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    368a:	4018      	ands	r0, r3
    368c:	4002      	ands	r2, r0
    368e:	f362 0007 	bfi	r0, r2, #0, #8
    3692:	6028      	str	r0, [r5, #0]
    3694:	6069      	str	r1, [r5, #4]
    3696:	bd70      	pop	{r4, r5, r6, pc}
    3698:	f704492f 	.word	0xf704492f

0000369c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    369c:	6841      	ldr	r1, [r0, #4]
    369e:	b082      	sub	sp, #8
    36a0:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    36a4:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    36a8:	f88d 2000 	strb.w	r2, [sp]
    36ac:	9a00      	ldr	r2, [sp, #0]
    36ae:	9200      	str	r2, [sp, #0]
    36b0:	f89d 2000 	ldrb.w	r2, [sp]
    36b4:	2a00      	cmp	r2, #0
    36b6:	d10b      	bne.n	36d0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    36b8:	8809      	ldrh	r1, [r1, #0]
    36ba:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    36be:	211a      	movs	r1, #26
    36c0:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    36c4:	2202      	movs	r2, #2
    36c6:	4903      	ldr	r1, [pc, #12]	; (36d4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    36c8:	3060      	adds	r0, #96	; 0x60
    36ca:	b002      	add	sp, #8
    36cc:	f00a bf5c 	b.w	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    36d0:	b002      	add	sp, #8
    36d2:	4770      	bx	lr
    36d4:	0000ea77 	.word	0x0000ea77

000036d8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    36d8:	b570      	push	{r4, r5, r6, lr}
    36da:	6844      	ldr	r4, [r0, #4]
    36dc:	460d      	mov	r5, r1
    36de:	7803      	ldrb	r3, [r0, #0]
    36e0:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    36e4:	3480      	adds	r4, #128	; 0x80
    36e6:	2600      	movs	r6, #0
    36e8:	2108      	movs	r1, #8
    36ea:	4620      	mov	r0, r4
    36ec:	f00a fba4 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    36f0:	b920      	cbnz	r0, 36fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    36f2:	7b20      	ldrb	r0, [r4, #12]
    36f4:	0780      	lsls	r0, r0, #30
    36f6:	d501      	bpl.n	36fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    36f8:	2001      	movs	r0, #1
    36fa:	bd70      	pop	{r4, r5, r6, pc}
    36fc:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3700:	0780      	lsls	r0, r0, #30
    3702:	d419      	bmi.n	3738 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    3704:	4628      	mov	r0, r5
    3706:	f00a fed2 	bl	e4ae <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    370a:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    370e:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3712:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    3716:	8868      	ldrh	r0, [r5, #2]
    3718:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    371c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3720:	f040 0002 	orr.w	r0, r0, #2
    3724:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    3728:	07c0      	lsls	r0, r0, #31
    372a:	d009      	beq.n	3740 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    372c:	2202      	movs	r2, #2
    372e:	4911      	ldr	r1, [pc, #68]	; (3774 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    3730:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    3734:	f00a ff3c 	bl	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3738:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    373c:	07c0      	lsls	r0, r0, #31
    373e:	d110      	bne.n	3762 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    3740:	68e0      	ldr	r0, [r4, #12]
    3742:	0781      	lsls	r1, r0, #30
    3744:	d503      	bpl.n	374e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    3746:	214f      	movs	r1, #79	; 0x4f
    3748:	2040      	movs	r0, #64	; 0x40
    374a:	f7fd fcfb 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    374e:	f040 0002 	orr.w	r0, r0, #2
    3752:	60e0      	str	r0, [r4, #12]
    3754:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    3758:	1c40      	adds	r0, r0, #1
    375a:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    375e:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    3762:	7f60      	ldrb	r0, [r4, #29]
    3764:	2801      	cmp	r0, #1
    3766:	d102      	bne.n	376e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    3768:	7766      	strb	r6, [r4, #29]
    376a:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    376e:	2000      	movs	r0, #0
    3770:	bd70      	pop	{r4, r5, r6, pc}
    3772:	0000      	.short	0x0000
    3774:	0000eb25 	.word	0x0000eb25

00003778 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3778:	4a04      	ldr	r2, [pc, #16]	; (378c <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    377a:	6892      	ldr	r2, [r2, #8]
    377c:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    3780:	434b      	muls	r3, r1
    3782:	4342      	muls	r2, r0
    3784:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3788:	4770      	bx	lr
    378a:	0000      	.short	0x0000
    378c:	200000dc 	.word	0x200000dc

00003790 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    3790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3792:	6844      	ldr	r4, [r0, #4]
    3794:	4606      	mov	r6, r0
    3796:	f104 0580 	add.w	r5, r4, #128	; 0x80
    379a:	f000 f87b 	bl	3894 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    379e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    37a2:	2901      	cmp	r1, #1
    37a4:	d11a      	bne.n	37dc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37a6:	2800      	cmp	r0, #0
    37a8:	d018      	beq.n	37dc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37aa:	6870      	ldr	r0, [r6, #4]
    37ac:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    37b0:	f88d 1000 	strb.w	r1, [sp]
    37b4:	9900      	ldr	r1, [sp, #0]
    37b6:	9100      	str	r1, [sp, #0]
    37b8:	f89d 1000 	ldrb.w	r1, [sp]
    37bc:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    37c0:	2900      	cmp	r1, #0
    37c2:	d10b      	bne.n	37dc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37c4:	8821      	ldrh	r1, [r4, #0]
    37c6:	8141      	strh	r1, [r0, #10]
    37c8:	7e69      	ldrb	r1, [r5, #25]
    37ca:	7301      	strb	r1, [r0, #12]
    37cc:	7ea9      	ldrb	r1, [r5, #26]
    37ce:	7341      	strb	r1, [r0, #13]
    37d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    37d4:	2202      	movs	r2, #2
    37d6:	4902      	ldr	r1, [pc, #8]	; (37e0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    37d8:	f00a bed6 	b.w	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    37dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37de:	0000      	.short	0x0000
    37e0:	0000ebad 	.word	0x0000ebad
    37e4:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    37e8:	4a0d      	ldr	r2, [pc, #52]	; (3820 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    37ea:	b510      	push	{r4, lr}
    37ec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    37f0:	1309      	asrs	r1, r1, #12
    37f2:	1300      	asrs	r0, r0, #12
    37f4:	b24b      	sxtb	r3, r1
    37f6:	f992 4000 	ldrsb.w	r4, [r2]
    37fa:	4240      	negs	r0, r0
    37fc:	2100      	movs	r1, #0
    37fe:	b240      	sxtb	r0, r0
    3800:	42a3      	cmp	r3, r4
    3802:	da02      	bge.n	380a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3804:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3808:	e005      	b.n	3816 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    380a:	f992 4001 	ldrsb.w	r4, [r2, #1]
    380e:	42a3      	cmp	r3, r4
    3810:	dd04      	ble.n	381c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    3812:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3816:	4408      	add	r0, r1
    3818:	f300 0107 	ssat	r1, #8, r0
    381c:	4608      	mov	r0, r1
    381e:	bd10      	pop	{r4, pc}
    3820:	200000dc 	.word	0x200000dc
    3824:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3828:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    382c:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3830:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3834:	f00c f872 	bl	f91c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3838:	4606      	mov	r6, r0
    383a:	68a0      	ldr	r0, [r4, #8]
    383c:	f7ff ffd2 	bl	37e4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3840:	0007      	movs	r7, r0
    3842:	d021      	beq.n	3888 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3844:	4620      	mov	r0, r4
    3846:	f00b f9b9 	bl	ebbc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    384a:	2800      	cmp	r0, #0
    384c:	d01c      	beq.n	3888 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    384e:	8828      	ldrh	r0, [r5, #0]
    3850:	4669      	mov	r1, sp
    3852:	f00a fada 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3856:	b118      	cbz	r0, 3860 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    3858:	2185      	movs	r1, #133	; 0x85
    385a:	207a      	movs	r0, #122	; 0x7a
    385c:	f7fd fc72 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3860:	1c76      	adds	r6, r6, #1
    3862:	b2f1      	uxtb	r1, r6
    3864:	2302      	movs	r3, #2
    3866:	463a      	mov	r2, r7
    3868:	4668      	mov	r0, sp
    386a:	f00c f876 	bl	f95a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    386e:	2800      	cmp	r0, #0
    3870:	d10a      	bne.n	3888 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3872:	4806      	ldr	r0, [pc, #24]	; (388c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    3874:	4906      	ldr	r1, [pc, #24]	; (3890 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    3876:	7900      	ldrb	r0, [r0, #4]
    3878:	fba0 6501 	umull	r6, r5, r0, r1
    387c:	f00d f87d 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3880:	1980      	adds	r0, r0, r6
    3882:	4169      	adcs	r1, r5
    3884:	e9c4 0100 	strd	r0, r1, [r4]
    3888:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    388c:	200000dc 	.word	0x200000dc
    3890:	000f4240 	.word	0x000f4240
    3894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3898:	4607      	mov	r7, r0
    389a:	f7ff fa91 	bl	2dc0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    389e:	687c      	ldr	r4, [r7, #4]
    38a0:	4605      	mov	r5, r0
    38a2:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    38a6:	3480      	adds	r4, #128	; 0x80
    38a8:	287f      	cmp	r0, #127	; 0x7f
    38aa:	d042      	beq.n	3932 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    38ac:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    38b0:	687e      	ldr	r6, [r7, #4]
    38b2:	76a0      	strb	r0, [r4, #26]
    38b4:	4629      	mov	r1, r5
    38b6:	68a0      	ldr	r0, [r4, #8]
    38b8:	f7ff ff5e 	bl	3778 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    38bc:	60a0      	str	r0, [r4, #8]
    38be:	481e      	ldr	r0, [pc, #120]	; (3938 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    38c0:	7940      	ldrb	r0, [r0, #5]
    38c2:	b1c0      	cbz	r0, 38f6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38c4:	6878      	ldr	r0, [r7, #4]
    38c6:	f100 0880 	add.w	r8, r0, #128	; 0x80
    38ca:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    38ce:	f7ff ff89 	bl	37e4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    38d2:	b180      	cbz	r0, 38f6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38d4:	4640      	mov	r0, r8
    38d6:	f00b f971 	bl	ebbc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    38da:	b160      	cbz	r0, 38f6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38dc:	6878      	ldr	r0, [r7, #4]
    38de:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    38e2:	4607      	mov	r7, r0
    38e4:	f004 fca2 	bl	822c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    38e8:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    38ec:	4913      	ldr	r1, [pc, #76]	; (393c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    38ee:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    38f2:	f00a fe46 	bl	e582 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    38f6:	f994 001b 	ldrsb.w	r0, [r4, #27]
    38fa:	2100      	movs	r1, #0
    38fc:	1a28      	subs	r0, r5, r0
    38fe:	d500      	bpl.n	3902 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3900:	4240      	negs	r0, r0
    3902:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3906:	4282      	cmp	r2, r0
    3908:	dc10      	bgt.n	392c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    390a:	2aff      	cmp	r2, #255	; 0xff
    390c:	d00e      	beq.n	392c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    390e:	7f20      	ldrb	r0, [r4, #28]
    3910:	1c40      	adds	r0, r0, #1
    3912:	b2c0      	uxtb	r0, r0
    3914:	7720      	strb	r0, [r4, #28]
    3916:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    391a:	4290      	cmp	r0, r2
    391c:	d802      	bhi.n	3924 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    391e:	7ee0      	ldrb	r0, [r4, #27]
    3920:	287f      	cmp	r0, #127	; 0x7f
    3922:	d103      	bne.n	392c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3924:	2000      	movs	r0, #0
    3926:	76e5      	strb	r5, [r4, #27]
    3928:	7720      	strb	r0, [r4, #28]
    392a:	2101      	movs	r1, #1
    392c:	4608      	mov	r0, r1
    392e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3932:	2000      	movs	r0, #0
    3934:	e7fb      	b.n	392e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3936:	0000      	.short	0x0000
    3938:	200000dc 	.word	0x200000dc
    393c:	00003825 	.word	0x00003825

00003940 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3942:	f00b f957 	bl	ebf4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    3946:	4604      	mov	r4, r0
    3948:	460d      	mov	r5, r1
    394a:	466a      	mov	r2, sp
    394c:	f000 f862 	bl	3a14 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3950:	b108      	cbz	r0, 3956 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    3952:	2001      	movs	r0, #1
    3954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3956:	480f      	ldr	r0, [pc, #60]	; (3994 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    3958:	7803      	ldrb	r3, [r0, #0]
    395a:	7841      	ldrb	r1, [r0, #1]
    395c:	428b      	cmp	r3, r1
    395e:	d101      	bne.n	3964 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    3960:	2000      	movs	r0, #0
    3962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3964:	461a      	mov	r2, r3
    3966:	6841      	ldr	r1, [r0, #4]
    3968:	e008      	b.n	397c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    396a:	bf00      	nop
    396c:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    3970:	1e52      	subs	r2, r2, #1
    3972:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    3976:	e9c6 7c00 	strd	r7, ip, [r6]
    397a:	b2d2      	uxtb	r2, r2
    397c:	f89d 6000 	ldrb.w	r6, [sp]
    3980:	42b2      	cmp	r2, r6
    3982:	d8f3      	bhi.n	396c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    3984:	b2f2      	uxtb	r2, r6
    3986:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    398a:	1c5b      	adds	r3, r3, #1
    398c:	e9c1 4500 	strd	r4, r5, [r1]
    3990:	7003      	strb	r3, [r0, #0]
    3992:	e7de      	b.n	3952 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    3994:	200000e8 	.word	0x200000e8

00003998 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    3998:	b510      	push	{r4, lr}
    399a:	0742      	lsls	r2, r0, #29
    399c:	d003      	beq.n	39a6 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    399e:	2163      	movs	r1, #99	; 0x63
    39a0:	2048      	movs	r0, #72	; 0x48
    39a2:	f7fd fbcf 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39a6:	b120      	cbz	r0, 39b2 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    39a8:	4a03      	ldr	r2, [pc, #12]	; (39b8 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    39aa:	7051      	strb	r1, [r2, #1]
    39ac:	6050      	str	r0, [r2, #4]
    39ae:	2000      	movs	r0, #0
    39b0:	7010      	strb	r0, [r2, #0]
    39b2:	00c8      	lsls	r0, r1, #3
    39b4:	bd10      	pop	{r4, pc}
    39b6:	0000      	.short	0x0000
    39b8:	200000e8 	.word	0x200000e8

000039bc <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    39bc:	b538      	push	{r3, r4, r5, lr}
    39be:	f00b f919 	bl	ebf4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    39c2:	466a      	mov	r2, sp
    39c4:	f000 f826 	bl	3a14 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    39c8:	2800      	cmp	r0, #0
    39ca:	d014      	beq.n	39f6 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    39cc:	4a0a      	ldr	r2, [pc, #40]	; (39f8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    39ce:	7810      	ldrb	r0, [r2, #0]
    39d0:	1e40      	subs	r0, r0, #1
    39d2:	b2c1      	uxtb	r1, r0
    39d4:	7011      	strb	r1, [r2, #0]
    39d6:	f89d 0000 	ldrb.w	r0, [sp]
    39da:	6852      	ldr	r2, [r2, #4]
    39dc:	e008      	b.n	39f0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    39de:	bf00      	nop
    39e0:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    39e4:	1c40      	adds	r0, r0, #1
    39e6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    39ea:	e9c3 4500 	strd	r4, r5, [r3]
    39ee:	b2c0      	uxtb	r0, r0
    39f0:	4288      	cmp	r0, r1
    39f2:	d3f5      	bcc.n	39e0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    39f4:	2001      	movs	r0, #1
    39f6:	bd38      	pop	{r3, r4, r5, pc}
    39f8:	200000e8 	.word	0x200000e8

000039fc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    39fc:	4901      	ldr	r1, [pc, #4]	; (3a04 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    39fe:	2000      	movs	r0, #0
    3a00:	7008      	strb	r0, [r1, #0]
    3a02:	4770      	bx	lr
    3a04:	200000e8 	.word	0x200000e8

00003a08 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3a08:	4801      	ldr	r0, [pc, #4]	; (3a10 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3a0a:	7840      	ldrb	r0, [r0, #1]
    3a0c:	4770      	bx	lr
    3a0e:	0000      	.short	0x0000
    3a10:	200000e8 	.word	0x200000e8
    3a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a16:	4d20      	ldr	r5, [pc, #128]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a18:	2300      	movs	r3, #0
    3a1a:	7013      	strb	r3, [r2, #0]
    3a1c:	782b      	ldrb	r3, [r5, #0]
    3a1e:	b323      	cbz	r3, 3a6a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3a20:	2400      	movs	r4, #0
    3a22:	1e5b      	subs	r3, r3, #1
    3a24:	b2db      	uxtb	r3, r3
    3a26:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3a2a:	e00b      	b.n	3a44 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3a2c:	18e5      	adds	r5, r4, r3
    3a2e:	086d      	lsrs	r5, r5, #1
    3a30:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    3a34:	e9d6 7600 	ldrd	r7, r6, [r6]
    3a38:	1a3f      	subs	r7, r7, r0
    3a3a:	418e      	sbcs	r6, r1
    3a3c:	d201      	bcs.n	3a42 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3a3e:	462c      	mov	r4, r5
    3a40:	e000      	b.n	3a44 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3a42:	462b      	mov	r3, r5
    3a44:	1b1d      	subs	r5, r3, r4
    3a46:	2d01      	cmp	r5, #1
    3a48:	dcf0      	bgt.n	3a2c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3a4a:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3a4e:	e9d6 5600 	ldrd	r5, r6, [r6]
    3a52:	ea80 0705 	eor.w	r7, r0, r5
    3a56:	ea81 0e06 	eor.w	lr, r1, r6
    3a5a:	ea57 070e 	orrs.w	r7, r7, lr
    3a5e:	d005      	beq.n	3a6c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    3a60:	1b45      	subs	r5, r0, r5
    3a62:	eb71 0506 	sbcs.w	r5, r1, r6
    3a66:	d203      	bcs.n	3a70 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    3a68:	7014      	strb	r4, [r2, #0]
    3a6a:	e010      	b.n	3a8e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    3a6c:	7014      	strb	r4, [r2, #0]
    3a6e:	e011      	b.n	3a94 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    3a70:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    3a74:	e9d5 4500 	ldrd	r4, r5, [r5]
    3a78:	ea80 0604 	eor.w	r6, r0, r4
    3a7c:	ea81 0705 	eor.w	r7, r1, r5
    3a80:	433e      	orrs	r6, r7
    3a82:	d006      	beq.n	3a92 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    3a84:	1b00      	subs	r0, r0, r4
    3a86:	41a9      	sbcs	r1, r5
    3a88:	d300      	bcc.n	3a8c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    3a8a:	1c5b      	adds	r3, r3, #1
    3a8c:	7013      	strb	r3, [r2, #0]
    3a8e:	2000      	movs	r0, #0
    3a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a92:	7013      	strb	r3, [r2, #0]
    3a94:	2001      	movs	r0, #1
    3a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a98:	200000e8 	.word	0x200000e8

00003a9c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3a9c:	b570      	push	{r4, r5, r6, lr}
    3a9e:	4604      	mov	r4, r0
    3aa0:	7c00      	ldrb	r0, [r0, #16]
    3aa2:	b300      	cbz	r0, 3ae6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3aa4:	2802      	cmp	r0, #2
    3aa6:	d01e      	beq.n	3ae6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3aa8:	f05f 0001 	movs.w	r0, #1
    3aac:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3ab0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3ab4:	460d      	mov	r5, r1
    3ab6:	b1c0      	cbz	r0, 3aea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3ab8:	7de0      	ldrb	r0, [r4, #23]
    3aba:	b1f0      	cbz	r0, 3afa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3abc:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3ac0:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3ac4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3ac8:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3acc:	7c20      	ldrb	r0, [r4, #16]
    3ace:	f00b f8c1 	bl	ec54 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    3ad2:	7620      	strb	r0, [r4, #24]
    3ad4:	2008      	movs	r0, #8
    3ad6:	7660      	strb	r0, [r4, #25]
    3ad8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3adc:	4629      	mov	r1, r5
    3ade:	f00b f8a5 	bl	ec2c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3ae2:	b9a8      	cbnz	r0, 3b10 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3ae4:	e00e      	b.n	3b04 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    3ae6:	2000      	movs	r0, #0
    3ae8:	e7e0      	b.n	3aac <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3aea:	2000      	movs	r0, #0
    3aec:	f7fe fa8e 	bl	200c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3af0:	2800      	cmp	r0, #0
    3af2:	d1eb      	bne.n	3acc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    3af4:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3af8:	e001      	b.n	3afe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3afa:	f240 41be 	movw	r1, #1214	; 0x4be
    3afe:	202d      	movs	r0, #45	; 0x2d
    3b00:	f7fd fb20 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b04:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3b08:	4629      	mov	r1, r5
    3b0a:	f00b f898 	bl	ec3e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3b0e:	b100      	cbz	r0, 3b12 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3b10:	2001      	movs	r0, #1
    3b12:	76a0      	strb	r0, [r4, #26]
    3b14:	7e20      	ldrb	r0, [r4, #24]
    3b16:	b130      	cbz	r0, 3b26 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3b18:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3b1c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3b20:	f00a f94b 	bl	ddba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3b24:	7660      	strb	r0, [r4, #25]
    3b26:	f7ff f82d 	bl	2b84 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3b2a:	490c      	ldr	r1, [pc, #48]	; (3b5c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3b2c:	fba0 2301 	umull	r2, r3, r0, r1
    3b30:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3b34:	f00b fa00 	bl	ef38 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    3b38:	2100      	movs	r1, #0
    3b3a:	4620      	mov	r0, r4
    3b3c:	f00b f9b5 	bl	eeaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3b40:	2000      	movs	r0, #0
    3b42:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3b46:	78a0      	ldrb	r0, [r4, #2]
    3b48:	0740      	lsls	r0, r0, #29
    3b4a:	d505      	bpl.n	3b58 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3b4c:	4620      	mov	r0, r4
    3b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3b52:	2100      	movs	r1, #0
    3b54:	f000 bdf0 	b.w	4738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
    3b58:	bd70      	pop	{r4, r5, r6, pc}
    3b5a:	0000      	.short	0x0000
    3b5c:	000f4240 	.word	0x000f4240

00003b60 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3b60:	b530      	push	{r4, r5, lr}
    3b62:	460c      	mov	r4, r1
    3b64:	b08d      	sub	sp, #52	; 0x34
    3b66:	4605      	mov	r5, r0
    3b68:	4601      	mov	r1, r0
    3b6a:	2224      	movs	r2, #36	; 0x24
    3b6c:	a802      	add	r0, sp, #8
    3b6e:	f00d f896 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b72:	a80b      	add	r0, sp, #44	; 0x2c
    3b74:	f00b fa3d 	bl	eff2 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3b78:	7aa0      	ldrb	r0, [r4, #10]
    3b7a:	f88d 0018 	strb.w	r0, [sp, #24]
    3b7e:	7820      	ldrb	r0, [r4, #0]
    3b80:	f88d 0008 	strb.w	r0, [sp, #8]
    3b84:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3b88:	f8ad 0000 	strh.w	r0, [sp]
    3b8c:	f89d 0000 	ldrb.w	r0, [sp]
    3b90:	f000 0101 	and.w	r1, r0, #1
    3b94:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3b98:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3b9c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3ba0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3ba4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3ba8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3bac:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3bb0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3bb4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3bb8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3bbc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3bc0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3bc4:	f8ad 000a 	strh.w	r0, [sp, #10]
    3bc8:	7d20      	ldrb	r0, [r4, #20]
    3bca:	2801      	cmp	r0, #1
    3bcc:	d006      	beq.n	3bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3bce:	2802      	cmp	r0, #2
    3bd0:	d004      	beq.n	3bdc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3bd2:	f240 21e9 	movw	r1, #745	; 0x2e9
    3bd6:	2006      	movs	r0, #6
    3bd8:	f7fd fab4 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bdc:	f88d 000c 	strb.w	r0, [sp, #12]
    3be0:	7a61      	ldrb	r1, [r4, #9]
    3be2:	a80b      	add	r0, sp, #44	; 0x2c
    3be4:	f00b f9ec 	bl	efc0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3be8:	7d20      	ldrb	r0, [r4, #20]
    3bea:	2101      	movs	r1, #1
    3bec:	2802      	cmp	r0, #2
    3bee:	d102      	bne.n	3bf6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3bf0:	7d60      	ldrb	r0, [r4, #21]
    3bf2:	1c40      	adds	r0, r0, #1
    3bf4:	b2c1      	uxtb	r1, r0
    3bf6:	7ea0      	ldrb	r0, [r4, #26]
    3bf8:	1c40      	adds	r0, r0, #1
    3bfa:	b2c2      	uxtb	r2, r0
    3bfc:	a80b      	add	r0, sp, #44	; 0x2c
    3bfe:	f00b f9a6 	bl	ef4e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3c02:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3c06:	0700      	lsls	r0, r0, #28
    3c08:	d501      	bpl.n	3c0e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3c0a:	2000      	movs	r0, #0
    3c0c:	e020      	b.n	3c50 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3c0e:	a80b      	add	r0, sp, #44	; 0x2c
    3c10:	f00b f9af 	bl	ef72 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3c14:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3c18:	2228      	movs	r2, #40	; 0x28
    3c1a:	f000 fe31 	bl	4880 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3c1e:	f240 2171 	movw	r1, #625	; 0x271
    3c22:	f200 20db 	addw	r0, r0, #731	; 0x2db
    3c26:	fbb0 f0f1 	udiv	r0, r0, r1
    3c2a:	4348      	muls	r0, r1
    3c2c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3c30:	f240 2371 	movw	r3, #625	; 0x271
    3c34:	0a0a      	lsrs	r2, r1, #8
    3c36:	f240 2171 	movw	r1, #625	; 0x271
    3c3a:	434a      	muls	r2, r1
    3c3c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3c40:	0a09      	lsrs	r1, r1, #8
    3c42:	4359      	muls	r1, r3
    3c44:	4290      	cmp	r0, r2
    3c46:	d801      	bhi.n	3c4c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3c48:	9204      	str	r2, [sp, #16]
    3c4a:	e004      	b.n	3c56 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3c4c:	4288      	cmp	r0, r1
    3c4e:	d801      	bhi.n	3c54 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3c50:	9004      	str	r0, [sp, #16]
    3c52:	e000      	b.n	3c56 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3c54:	9104      	str	r1, [sp, #16]
    3c56:	7ca0      	ldrb	r0, [r4, #18]
    3c58:	f88d 0017 	strb.w	r0, [sp, #23]
    3c5c:	7e20      	ldrb	r0, [r4, #24]
    3c5e:	2801      	cmp	r0, #1
    3c60:	d000      	beq.n	3c64 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3c62:	2000      	movs	r0, #0
    3c64:	f88d 0014 	strb.w	r0, [sp, #20]
    3c68:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3c6a:	f009 ff0e 	bl	da8a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3c6e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3c70:	f009 ffb3 	bl	dbda <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3c74:	2224      	movs	r2, #36	; 0x24
    3c76:	a902      	add	r1, sp, #8
    3c78:	4628      	mov	r0, r5
    3c7a:	f00d f810 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3c80:	62a8      	str	r0, [r5, #40]	; 0x28
    3c82:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3c86:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3c88:	7ae0      	ldrb	r0, [r4, #11]
    3c8a:	b168      	cbz	r0, 3ca8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3c8c:	2802      	cmp	r0, #2
    3c8e:	d00b      	beq.n	3ca8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3c90:	f05f 0001 	movs.w	r0, #1
    3c94:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3c98:	68e0      	ldr	r0, [r4, #12]
    3c9a:	65a8      	str	r0, [r5, #88]	; 0x58
    3c9c:	8a20      	ldrh	r0, [r4, #16]
    3c9e:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3ca2:	b00d      	add	sp, #52	; 0x34
    3ca4:	2000      	movs	r0, #0
    3ca6:	bd30      	pop	{r4, r5, pc}
    3ca8:	2000      	movs	r0, #0
    3caa:	e7f3      	b.n	3c94 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003cac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3cac:	4a0a      	ldr	r2, [pc, #40]	; (3cd8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3cae:	b510      	push	{r4, lr}
    3cb0:	2100      	movs	r1, #0
    3cb2:	7011      	strb	r1, [r2, #0]
    3cb4:	4c09      	ldr	r4, [pc, #36]	; (3cdc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3cb6:	6060      	str	r0, [r4, #4]
    3cb8:	f000 f822 	bl	3d00 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3cbc:	b110      	cbz	r0, 3cc4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3cbe:	f240 312e 	movw	r1, #814	; 0x32e
    3cc2:	e004      	b.n	3cce <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3cc4:	68a0      	ldr	r0, [r4, #8]
    3cc6:	2800      	cmp	r0, #0
    3cc8:	d104      	bne.n	3cd4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3cca:	f240 3131 	movw	r1, #817	; 0x331
    3cce:	202d      	movs	r0, #45	; 0x2d
    3cd0:	f7fd fa38 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cd4:	bd10      	pop	{r4, pc}
    3cd6:	0000      	.short	0x0000
    3cd8:	200011d0 	.word	0x200011d0
    3cdc:	200000f0 	.word	0x200000f0

00003ce0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3ce0:	4902      	ldr	r1, [pc, #8]	; (3cec <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3ce2:	4801      	ldr	r0, [pc, #4]	; (3ce8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3ce4:	6088      	str	r0, [r1, #8]
    3ce6:	4770      	bx	lr
    3ce8:	00004868 	.word	0x00004868
    3cec:	200000f0 	.word	0x200000f0

00003cf0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3cf0:	4902      	ldr	r1, [pc, #8]	; (3cfc <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3cf2:	6008      	str	r0, [r1, #0]
    3cf4:	6889      	ldr	r1, [r1, #8]
    3cf6:	6809      	ldr	r1, [r1, #0]
    3cf8:	4708      	bx	r1
    3cfa:	0000      	.short	0x0000
    3cfc:	200000f0 	.word	0x200000f0

00003d00 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3d00:	4808      	ldr	r0, [pc, #32]	; (3d24 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d02:	b510      	push	{r4, lr}
    3d04:	7800      	ldrb	r0, [r0, #0]
    3d06:	b110      	cbz	r0, 3d0e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3d08:	240c      	movs	r4, #12
    3d0a:	4620      	mov	r0, r4
    3d0c:	bd10      	pop	{r4, pc}
    3d0e:	2400      	movs	r4, #0
    3d10:	2218      	movs	r2, #24
    3d12:	4621      	mov	r1, r4
    3d14:	4803      	ldr	r0, [pc, #12]	; (3d24 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d16:	f00d f83c 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d1a:	f004 f8d9 	bl	7ed0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d1e:	f003 fefd 	bl	7b1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d22:	e7f2      	b.n	3d0a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3d24:	200011d0 	.word	0x200011d0

00003d28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3d28:	4904      	ldr	r1, [pc, #16]	; (3d3c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3d2a:	b510      	push	{r4, lr}
    3d2c:	7809      	ldrb	r1, [r1, #0]
    3d2e:	2901      	cmp	r1, #1
    3d30:	d101      	bne.n	3d36 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3d32:	f000 fbd5 	bl	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3d36:	2000      	movs	r0, #0
    3d38:	bd10      	pop	{r4, pc}
    3d3a:	0000      	.short	0x0000
    3d3c:	200011d0 	.word	0x200011d0

00003d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3d40:	4902      	ldr	r1, [pc, #8]	; (3d4c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    3d42:	4801      	ldr	r0, [pc, #4]	; (3d48 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    3d44:	6008      	str	r0, [r1, #0]
    3d46:	4770      	bx	lr
    3d48:	0000460d 	.word	0x0000460d
    3d4c:	200000fc 	.word	0x200000fc

00003d50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3d50:	b510      	push	{r4, lr}
    3d52:	4604      	mov	r4, r0
    3d54:	7880      	ldrb	r0, [r0, #2]
    3d56:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d5a:	b158      	cbz	r0, 3d74 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3d5c:	233c      	movs	r3, #60	; 0x3c
    3d5e:	22ff      	movs	r2, #255	; 0xff
    3d60:	4620      	mov	r0, r4
    3d62:	69e1      	ldr	r1, [r4, #28]
    3d64:	f000 fbe2 	bl	452c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    3d68:	2202      	movs	r2, #2
    3d6a:	4904      	ldr	r1, [pc, #16]	; (3d7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3d6c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3d70:	f00a fc0a 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3d74:	2001      	movs	r0, #1
    3d76:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3d7a:	bd10      	pop	{r4, pc}
    3d7c:	0000ee43 	.word	0x0000ee43
    3d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d84:	000f      	movs	r7, r1
    3d86:	4604      	mov	r4, r0
    3d88:	d023      	beq.n	3dd2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3d8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d8e:	4605      	mov	r5, r0
    3d90:	f00b f918 	bl	efc4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3d94:	b9b0      	cbnz	r0, 3dc4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3d96:	78a0      	ldrb	r0, [r4, #2]
    3d98:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d9c:	b350      	cbz	r0, 3df4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3d9e:	4628      	mov	r0, r5
    3da0:	f00b f8e7 	bl	ef72 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3da4:	4606      	mov	r6, r0
    3da6:	4628      	mov	r0, r5
    3da8:	f00b f90c 	bl	efc4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3dac:	1a30      	subs	r0, r6, r0
    3dae:	b2c0      	uxtb	r0, r0
    3db0:	f00b f95d 	bl	f06e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3db4:	4601      	mov	r1, r0
    3db6:	4835      	ldr	r0, [pc, #212]	; (3e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3db8:	6842      	ldr	r2, [r0, #4]
    3dba:	4411      	add	r1, r2
    3dbc:	6041      	str	r1, [r0, #4]
    3dbe:	4628      	mov	r0, r5
    3dc0:	f00b f91e 	bl	f000 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3dc4:	4628      	mov	r0, r5
    3dc6:	f00b f8e0 	bl	ef8a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3dca:	4601      	mov	r1, r0
    3dcc:	4620      	mov	r0, r4
    3dce:	f00b f8a8 	bl	ef22 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    3dd2:	4d2f      	ldr	r5, [pc, #188]	; (3e90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3dd4:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3dd8:	2100      	movs	r1, #0
    3dda:	6868      	ldr	r0, [r5, #4]
    3ddc:	8001      	strh	r1, [r0, #0]
    3dde:	f00b f819 	bl	ee14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3de2:	8860      	ldrh	r0, [r4, #2]
    3de4:	2813      	cmp	r0, #19
    3de6:	d013      	beq.n	3e10 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3de8:	dc09      	bgt.n	3dfe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3dea:	2810      	cmp	r0, #16
    3dec:	d036      	beq.n	3e5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3dee:	2812      	cmp	r0, #18
    3df0:	d109      	bne.n	3e06 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3df2:	e031      	b.n	3e58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3df4:	4620      	mov	r0, r4
    3df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3dfa:	f000 bb71 	b.w	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3dfe:	2815      	cmp	r0, #21
    3e00:	d00f      	beq.n	3e22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e02:	281d      	cmp	r0, #29
    3e04:	d00d      	beq.n	3e22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e06:	f240 6173 	movw	r1, #1651	; 0x673
    3e0a:	202d      	movs	r0, #45	; 0x2d
    3e0c:	f7fd f99a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e10:	2100      	movs	r1, #0
    3e12:	6868      	ldr	r0, [r5, #4]
    3e14:	f00a fa36 	bl	e284 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e18:	2101      	movs	r1, #1
    3e1a:	6868      	ldr	r0, [r5, #4]
    3e1c:	f00a fffa 	bl	ee14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e20:	e020      	b.n	3e64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e22:	2101      	movs	r1, #1
    3e24:	6868      	ldr	r0, [r5, #4]
    3e26:	f00a fa2d 	bl	e284 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e2a:	2101      	movs	r1, #1
    3e2c:	6868      	ldr	r0, [r5, #4]
    3e2e:	f00a fff1 	bl	ee14 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e32:	b136      	cbz	r6, 3e42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3e34:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3e38:	6868      	ldr	r0, [r5, #4]
    3e3a:	f00a fa3e 	bl	e2ba <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3e3e:	2101      	movs	r1, #1
    3e40:	e006      	b.n	3e50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3e42:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3e46:	6868      	ldr	r0, [r5, #4]
    3e48:	f00a fa37 	bl	e2ba <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3e4c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3e50:	6868      	ldr	r0, [r5, #4]
    3e52:	f00a fa38 	bl	e2c6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3e56:	e005      	b.n	3e64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e58:	2106      	movs	r1, #6
    3e5a:	e000      	b.n	3e5e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3e5c:	2102      	movs	r1, #2
    3e5e:	6868      	ldr	r0, [r5, #4]
    3e60:	f00a fa10 	bl	e284 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e64:	4620      	mov	r0, r4
    3e66:	f000 fcdd 	bl	4824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
    3e6a:	8860      	ldrh	r0, [r4, #2]
    3e6c:	281d      	cmp	r0, #29
    3e6e:	d007      	beq.n	3e80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3e70:	2815      	cmp	r0, #21
    3e72:	d005      	beq.n	3e80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3e74:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3e78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3e7a:	6868      	ldr	r0, [r5, #4]
    3e7c:	f00a f9f2 	bl	e264 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3e80:	4639      	mov	r1, r7
    3e82:	4620      	mov	r0, r4
    3e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e88:	f000 b9f4 	b.w	4274 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    3e8c:	200011d0 	.word	0x200011d0
    3e90:	200000f0 	.word	0x200000f0
    3e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e98:	4d2f      	ldr	r5, [pc, #188]	; (3f58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3e9a:	4680      	mov	r8, r0
    3e9c:	7828      	ldrb	r0, [r5, #0]
    3e9e:	2802      	cmp	r0, #2
    3ea0:	d005      	beq.n	3eae <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3ea2:	7828      	ldrb	r0, [r5, #0]
    3ea4:	2803      	cmp	r0, #3
    3ea6:	d002      	beq.n	3eae <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3ea8:	f640 512d 	movw	r1, #3373	; 0xd2d
    3eac:	e02b      	b.n	3f06 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3eae:	4c2b      	ldr	r4, [pc, #172]	; (3f5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3eb0:	6826      	ldr	r6, [r4, #0]
    3eb2:	7b30      	ldrb	r0, [r6, #12]
    3eb4:	b118      	cbz	r0, 3ebe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3eb6:	f7fe ff83 	bl	2dc0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3eba:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3ebe:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3ec2:	2700      	movs	r7, #0
    3ec4:	f1b8 0f00 	cmp.w	r8, #0
    3ec8:	f89c 0000 	ldrb.w	r0, [ip]
    3ecc:	f000 060f 	and.w	r6, r0, #15
    3ed0:	d027      	beq.n	3f22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3ed2:	6821      	ldr	r1, [r4, #0]
    3ed4:	09c0      	lsrs	r0, r0, #7
    3ed6:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3eda:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3ede:	f10c 0109 	add.w	r1, ip, #9
    3ee2:	f009 fed2 	bl	dc8a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3ee6:	b1e0      	cbz	r0, 3f22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3ee8:	4639      	mov	r1, r7
    3eea:	6860      	ldr	r0, [r4, #4]
    3eec:	f00a f9aa 	bl	e244 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3ef0:	b1b8      	cbz	r0, 3f22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3ef2:	782a      	ldrb	r2, [r5, #0]
    3ef4:	6820      	ldr	r0, [r4, #0]
    3ef6:	4631      	mov	r1, r6
    3ef8:	2a02      	cmp	r2, #2
    3efa:	d007      	beq.n	3f0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3efc:	782a      	ldrb	r2, [r5, #0]
    3efe:	2a03      	cmp	r2, #3
    3f00:	d004      	beq.n	3f0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f02:	f640 5106 	movw	r1, #3334	; 0xd06
    3f06:	202d      	movs	r0, #45	; 0x2d
    3f08:	f7fd f91c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f0c:	68a2      	ldr	r2, [r4, #8]
    3f0e:	782b      	ldrb	r3, [r5, #0]
    3f10:	6952      	ldr	r2, [r2, #20]
    3f12:	f06f 0607 	mvn.w	r6, #7
    3f16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f1a:	58d2      	ldr	r2, [r2, r3]
    3f1c:	4790      	blx	r2
    3f1e:	4606      	mov	r6, r0
    3f20:	e000      	b.n	3f24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3f22:	2601      	movs	r6, #1
    3f24:	7ba8      	ldrb	r0, [r5, #14]
    3f26:	b118      	cbz	r0, 3f30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3f28:	f003 ffd2 	bl	7ed0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f2c:	f003 fdf6 	bl	7b1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f30:	2e00      	cmp	r6, #0
    3f32:	d00f      	beq.n	3f54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3f34:	6820      	ldr	r0, [r4, #0]
    3f36:	f00b f8b0 	bl	f09a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3f3a:	b130      	cbz	r0, 3f4a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3f3c:	f003 ffea 	bl	7f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f40:	68a0      	ldr	r0, [r4, #8]
    3f42:	6880      	ldr	r0, [r0, #8]
    3f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f48:	4700      	bx	r0
    3f4a:	6820      	ldr	r0, [r4, #0]
    3f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f50:	f000 bac6 	b.w	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f58:	200011d0 	.word	0x200011d0
    3f5c:	200000f0 	.word	0x200000f0
    3f60:	b510      	push	{r4, lr}
    3f62:	2903      	cmp	r1, #3
    3f64:	d002      	beq.n	3f6c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3f66:	2905      	cmp	r1, #5
    3f68:	d10a      	bne.n	3f80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3f6a:	e002      	b.n	3f72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3f6c:	f000 fbb2 	bl	46d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    3f70:	e003      	b.n	3f7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3f72:	4904      	ldr	r1, [pc, #16]	; (3f84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    3f74:	6809      	ldr	r1, [r1, #0]
    3f76:	b109      	cbz	r1, 3f7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3f78:	4788      	blx	r1
    3f7a:	b108      	cbz	r0, 3f80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3f7c:	2000      	movs	r0, #0
    3f7e:	bd10      	pop	{r4, pc}
    3f80:	2001      	movs	r0, #1
    3f82:	bd10      	pop	{r4, pc}
    3f84:	200000fc 	.word	0x200000fc
    3f88:	4a09      	ldr	r2, [pc, #36]	; (3fb0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3f8a:	0003      	movs	r3, r0
    3f8c:	6810      	ldr	r0, [r2, #0]
    3f8e:	d001      	beq.n	3f94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3f90:	f000 baa6 	b.w	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3f94:	2900      	cmp	r1, #0
    3f96:	d009      	beq.n	3fac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3f98:	6891      	ldr	r1, [r2, #8]
    3f9a:	4a06      	ldr	r2, [pc, #24]	; (3fb4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3f9c:	6909      	ldr	r1, [r1, #16]
    3f9e:	7812      	ldrb	r2, [r2, #0]
    3fa0:	f06f 030f 	mvn.w	r3, #15
    3fa4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3fa8:	5889      	ldr	r1, [r1, r2]
    3faa:	4708      	bx	r1
    3fac:	4770      	bx	lr
    3fae:	0000      	.short	0x0000
    3fb0:	200000f0 	.word	0x200000f0
    3fb4:	200011d0 	.word	0x200011d0
    3fb8:	b570      	push	{r4, r5, r6, lr}
    3fba:	4604      	mov	r4, r0
    3fbc:	8840      	ldrh	r0, [r0, #2]
    3fbe:	2810      	cmp	r0, #16
    3fc0:	d019      	beq.n	3ff6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3fc2:	4d10      	ldr	r5, [pc, #64]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
    3fc4:	7ba8      	ldrb	r0, [r5, #14]
    3fc6:	b120      	cbz	r0, 3fd2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3fc8:	f003 fdc8 	bl	7b5c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3fcc:	2040      	movs	r0, #64	; 0x40
    3fce:	f003 ff8d 	bl	7eec <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3fd2:	480d      	ldr	r0, [pc, #52]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
    3fd4:	6840      	ldr	r0, [r0, #4]
    3fd6:	f004 fa0f 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3fda:	78a0      	ldrb	r0, [r4, #2]
    3fdc:	0740      	lsls	r0, r0, #29
    3fde:	d404      	bmi.n	3fea <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3fe0:	2100      	movs	r1, #0
    3fe2:	7922      	ldrb	r2, [r4, #4]
    3fe4:	4608      	mov	r0, r1
    3fe6:	f004 fa8f 	bl	8508 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3fea:	2000      	movs	r0, #0
    3fec:	f004 f8b4 	bl	8158 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3ff0:	2002      	movs	r0, #2
    3ff2:	7028      	strb	r0, [r5, #0]
    3ff4:	bd70      	pop	{r4, r5, r6, pc}
    3ff6:	4620      	mov	r0, r4
    3ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ffc:	2101      	movs	r1, #1
    3ffe:	f7ff bebf 	b.w	3d80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4002:	0000      	.short	0x0000
    4004:	200011d0 	.word	0x200011d0
    4008:	200000f0 	.word	0x200000f0
    400c:	b510      	push	{r4, lr}
    400e:	4c12      	ldr	r4, [pc, #72]	; (4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>)
    4010:	6820      	ldr	r0, [r4, #0]
    4012:	f000 f825 	bl	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    4016:	6820      	ldr	r0, [r4, #0]
    4018:	f00b f83f 	bl	f09a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    401c:	2800      	cmp	r0, #0
    401e:	6820      	ldr	r0, [r4, #0]
    4020:	d00b      	beq.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4022:	490e      	ldr	r1, [pc, #56]	; (405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>)
    4024:	780a      	ldrb	r2, [r1, #0]
    4026:	2a02      	cmp	r2, #2
    4028:	d00b      	beq.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    402a:	780a      	ldrb	r2, [r1, #0]
    402c:	2a03      	cmp	r2, #3
    402e:	d008      	beq.n	4042 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x42>
    4030:	f640 4137 	movw	r1, #3127	; 0xc37
    4034:	202d      	movs	r0, #45	; 0x2d
    4036:	f7fd f885 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    403a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    403e:	f000 ba4f 	b.w	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    4042:	68a2      	ldr	r2, [r4, #8]
    4044:	7809      	ldrb	r1, [r1, #0]
    4046:	68d2      	ldr	r2, [r2, #12]
    4048:	f06f 0307 	mvn.w	r3, #7
    404c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4050:	5851      	ldr	r1, [r2, r1]
    4052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4056:	4708      	bx	r1
    4058:	200000f0 	.word	0x200000f0
    405c:	200011d0 	.word	0x200011d0
    4060:	b510      	push	{r4, lr}
    4062:	7b01      	ldrb	r1, [r0, #12]
    4064:	b121      	cbz	r1, 4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>
    4066:	4604      	mov	r4, r0
    4068:	f7fe feaa 	bl	2dc0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    406c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    4070:	4805      	ldr	r0, [pc, #20]	; (4088 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88>)
    4072:	7b80      	ldrb	r0, [r0, #14]
    4074:	2800      	cmp	r0, #0
    4076:	d005      	beq.n	4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    4078:	f003 ff2a 	bl	7ed0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    407c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4080:	f003 bd4c 	b.w	7b1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4084:	bd10      	pop	{r4, pc}
    4086:	0000      	.short	0x0000
    4088:	200011d0 	.word	0x200011d0

0000408c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    408c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4090:	4d5c      	ldr	r5, [pc, #368]	; (4204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    4092:	4604      	mov	r4, r0
    4094:	b086      	sub	sp, #24
    4096:	7828      	ldrb	r0, [r5, #0]
    4098:	bbe8      	cbnz	r0, 4116 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    409a:	7820      	ldrb	r0, [r4, #0]
    409c:	28ff      	cmp	r0, #255	; 0xff
    409e:	d04b      	beq.n	4138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    40a0:	f04f 0800 	mov.w	r8, #0
    40a4:	f8a5 800c 	strh.w	r8, [r5, #12]
    40a8:	f8c5 8004 	str.w	r8, [r5, #4]
    40ac:	f885 8001 	strb.w	r8, [r5, #1]
    40b0:	f885 8002 	strb.w	r8, [r5, #2]
    40b4:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    40b8:	4b53      	ldr	r3, [pc, #332]	; (4208 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    40ba:	4e54      	ldr	r6, [pc, #336]	; (420c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    40bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    40be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    40c2:	68b0      	ldr	r0, [r6, #8]
    40c4:	6840      	ldr	r0, [r0, #4]
    40c6:	9003      	str	r0, [sp, #12]
    40c8:	4668      	mov	r0, sp
    40ca:	f004 f819 	bl	8100 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    40ce:	f004 f8ed 	bl	82ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    40d2:	f003 fefd 	bl	7ed0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    40d6:	f003 fd21 	bl	7b1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    40da:	484d      	ldr	r0, [pc, #308]	; (4210 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    40dc:	f004 fa46 	bl	856c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    40e0:	484c      	ldr	r0, [pc, #304]	; (4214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    40e2:	f004 fa4d 	bl	8580 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    40e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    40ea:	4607      	mov	r7, r0
    40ec:	f00a ff88 	bl	f000 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    40f0:	4638      	mov	r0, r7
    40f2:	f00a ff4a 	bl	ef8a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    40f6:	4601      	mov	r1, r0
    40f8:	4620      	mov	r0, r4
    40fa:	f00a ff12 	bl	ef22 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    40fe:	f994 000e 	ldrsb.w	r0, [r4, #14]
    4102:	f004 f957 	bl	83b4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4106:	7921      	ldrb	r1, [r4, #4]
    4108:	2000      	movs	r0, #0
    410a:	f003 ff8d 	bl	8028 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    410e:	2101      	movs	r1, #1
    4110:	60a8      	str	r0, [r5, #8]
    4112:	b1a8      	cbz	r0, 4140 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    4114:	e000      	b.n	4118 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    4116:	e00f      	b.n	4138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    4118:	f104 0138 	add.w	r1, r4, #56	; 0x38
    411c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    411e:	f009 fd23 	bl	db68 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    4122:	4607      	mov	r7, r0
    4124:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4128:	6b60      	ldr	r0, [r4, #52]	; 0x34
    412a:	f009 fd20 	bl	db6e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    412e:	b14f      	cbz	r7, 4144 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4130:	f894 1020 	ldrb.w	r1, [r4, #32]
    4134:	b951      	cbnz	r1, 414c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    4136:	e005      	b.n	4144 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4138:	200c      	movs	r0, #12
    413a:	b006      	add	sp, #24
    413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4140:	7029      	strb	r1, [r5, #0]
    4142:	e05c      	b.n	41fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    4144:	b120      	cbz	r0, 4150 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    4146:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    414a:	b108      	cbz	r0, 4150 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    414c:	2701      	movs	r7, #1
    414e:	e000      	b.n	4152 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    4150:	2700      	movs	r7, #0
    4152:	7ea0      	ldrb	r0, [r4, #26]
    4154:	b920      	cbnz	r0, 4160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    4156:	7e20      	ldrb	r0, [r4, #24]
    4158:	b910      	cbnz	r0, 4160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    415a:	78a0      	ldrb	r0, [r4, #2]
    415c:	0740      	lsls	r0, r0, #29
    415e:	d523      	bpl.n	41a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    4160:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    4164:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4168:	4050      	eors	r0, r2
    416a:	ea70 0101 	orns	r1, r0, r1
    416e:	d006      	beq.n	417e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    4170:	f00c fc03 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4174:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    4178:	1a80      	subs	r0, r0, r2
    417a:	4199      	sbcs	r1, r3
    417c:	d200      	bcs.n	4180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    417e:	b19f      	cbz	r7, 41a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    4180:	f7fe fd00 	bl	2b84 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4184:	4924      	ldr	r1, [pc, #144]	; (4218 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    4186:	fba0 2301 	umull	r2, r3, r0, r1
    418a:	f104 0048 	add.w	r0, r4, #72	; 0x48
    418e:	f00a fed3 	bl	ef38 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    4192:	2101      	movs	r1, #1
    4194:	4620      	mov	r0, r4
    4196:	f00a fe88 	bl	eeaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    419a:	78a0      	ldrb	r0, [r4, #2]
    419c:	0740      	lsls	r0, r0, #29
    419e:	d503      	bpl.n	41a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    41a0:	2101      	movs	r1, #1
    41a2:	4620      	mov	r0, r4
    41a4:	f000 fac8 	bl	4738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
    41a8:	6870      	ldr	r0, [r6, #4]
    41aa:	1cc0      	adds	r0, r0, #3
    41ac:	f009 fdf8 	bl	dda0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    41b0:	73a8      	strb	r0, [r5, #14]
    41b2:	78a0      	ldrb	r0, [r4, #2]
    41b4:	07c0      	lsls	r0, r0, #31
    41b6:	d022      	beq.n	41fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    41b8:	f8cd 8010 	str.w	r8, [sp, #16]
    41bc:	20ff      	movs	r0, #255	; 0xff
    41be:	f8cd 8014 	str.w	r8, [sp, #20]
    41c2:	73e8      	strb	r0, [r5, #15]
    41c4:	69e6      	ldr	r6, [r4, #28]
    41c6:	f106 070a 	add.w	r7, r6, #10
    41ca:	e013      	b.n	41f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    41cc:	9c04      	ldr	r4, [sp, #16]
    41ce:	42b4      	cmp	r4, r6
    41d0:	d010      	beq.n	41f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    41d2:	7a72      	ldrb	r2, [r6, #9]
    41d4:	7a60      	ldrb	r0, [r4, #9]
    41d6:	463b      	mov	r3, r7
    41d8:	f104 010a 	add.w	r1, r4, #10
    41dc:	f009 fd55 	bl	dc8a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    41e0:	b140      	cbz	r0, 41f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    41e2:	78a0      	ldrb	r0, [r4, #2]
    41e4:	73e8      	strb	r0, [r5, #15]
    41e6:	f8d4 0003 	ldr.w	r0, [r4, #3]
    41ea:	6128      	str	r0, [r5, #16]
    41ec:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    41f0:	82a8      	strh	r0, [r5, #20]
    41f2:	e004      	b.n	41fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    41f4:	a804      	add	r0, sp, #16
    41f6:	f7fd fb25 	bl	1844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    41fa:	2800      	cmp	r0, #0
    41fc:	d0e6      	beq.n	41cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    41fe:	2000      	movs	r0, #0
    4200:	e79b      	b.n	413a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4202:	0000      	.short	0x0000
    4204:	200011d0 	.word	0x200011d0
    4208:	00004848 	.word	0x00004848
    420c:	200000f0 	.word	0x200000f0
    4210:	8e89bed6 	.word	0x8e89bed6
    4214:	00555555 	.word	0x00555555
    4218:	000f4240 	.word	0x000f4240
    421c:	b510      	push	{r4, lr}
    421e:	4604      	mov	r4, r0
    4220:	f7ff ff34 	bl	408c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    4224:	2800      	cmp	r0, #0
    4226:	d108      	bne.n	423a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    4228:	4804      	ldr	r0, [pc, #16]	; (423c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    422a:	7800      	ldrb	r0, [r0, #0]
    422c:	2801      	cmp	r0, #1
    422e:	d003      	beq.n	4238 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    4230:	2100      	movs	r1, #0
    4232:	4620      	mov	r0, r4
    4234:	f7ff fda4 	bl	3d80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4238:	2000      	movs	r0, #0
    423a:	bd10      	pop	{r4, pc}
    423c:	200011d0 	.word	0x200011d0
    4240:	480a      	ldr	r0, [pc, #40]	; (426c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    4242:	b510      	push	{r4, lr}
    4244:	490a      	ldr	r1, [pc, #40]	; (4270 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    4246:	6804      	ldr	r4, [r0, #0]
    4248:	7808      	ldrb	r0, [r1, #0]
    424a:	2800      	cmp	r0, #0
    424c:	d00d      	beq.n	426a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    424e:	7808      	ldrb	r0, [r1, #0]
    4250:	2802      	cmp	r0, #2
    4252:	d002      	beq.n	425a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    4254:	7808      	ldrb	r0, [r1, #0]
    4256:	2803      	cmp	r0, #3
    4258:	d102      	bne.n	4260 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    425a:	4620      	mov	r0, r4
    425c:	f7ff ff00 	bl	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    4260:	4620      	mov	r0, r4
    4262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4266:	f000 b93b 	b.w	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    426a:	bd10      	pop	{r4, pc}
    426c:	200000f0 	.word	0x200000f0
    4270:	200011d0 	.word	0x200011d0
    4274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4278:	4604      	mov	r4, r0
    427a:	4829      	ldr	r0, [pc, #164]	; (4320 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    427c:	460d      	mov	r5, r1
    427e:	6840      	ldr	r0, [r0, #4]
    4280:	f004 f8ba 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4284:	4e27      	ldr	r6, [pc, #156]	; (4324 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    4286:	2004      	movs	r0, #4
    4288:	7030      	strb	r0, [r6, #0]
    428a:	b355      	cbz	r5, 42e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    428c:	8860      	ldrh	r0, [r4, #2]
    428e:	2810      	cmp	r0, #16
    4290:	d023      	beq.n	42da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    4292:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4296:	4680      	mov	r8, r0
    4298:	68b5      	ldr	r5, [r6, #8]
    429a:	f00a fe6a 	bl	ef72 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    429e:	4607      	mov	r7, r0
    42a0:	4640      	mov	r0, r8
    42a2:	f00a fe8f 	bl	efc4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    42a6:	1a38      	subs	r0, r7, r0
    42a8:	1e40      	subs	r0, r0, #1
    42aa:	b2c0      	uxtb	r0, r0
    42ac:	8861      	ldrh	r1, [r4, #2]
    42ae:	2228      	movs	r2, #40	; 0x28
    42b0:	f000 fb06 	bl	48c0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    42b4:	4405      	add	r5, r0
    42b6:	78a0      	ldrb	r0, [r4, #2]
    42b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    42bc:	b130      	cbz	r0, 42cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    42be:	6870      	ldr	r0, [r6, #4]
    42c0:	4405      	add	r5, r0
    42c2:	f00a fed8 	bl	f076 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    42c6:	4428      	add	r0, r5
    42c8:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    42cc:	7922      	ldrb	r2, [r4, #4]
    42ce:	4629      	mov	r1, r5
    42d0:	2000      	movs	r0, #0
    42d2:	f004 f8a7 	bl	8424 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    42d6:	b920      	cbnz	r0, 42e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    42d8:	e00c      	b.n	42f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    42da:	7921      	ldrb	r1, [r4, #4]
    42dc:	2000      	movs	r0, #0
    42de:	f003 fe69 	bl	7fb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    42e2:	8860      	ldrh	r0, [r4, #2]
    42e4:	2813      	cmp	r0, #19
    42e6:	d011      	beq.n	430c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    42e8:	dc07      	bgt.n	42fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    42ea:	2810      	cmp	r0, #16
    42ec:	d015      	beq.n	431a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    42ee:	2812      	cmp	r0, #18
    42f0:	d107      	bne.n	4302 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    42f2:	e00b      	b.n	430c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    42f4:	f640 51a8 	movw	r1, #3496	; 0xda8
    42f8:	e005      	b.n	4306 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    42fa:	2815      	cmp	r0, #21
    42fc:	d006      	beq.n	430c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    42fe:	281d      	cmp	r0, #29
    4300:	d004      	beq.n	430c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4302:	f640 51bc 	movw	r1, #3516	; 0xdbc
    4306:	202d      	movs	r0, #45	; 0x2d
    4308:	f7fc ff1c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    430c:	7922      	ldrb	r2, [r4, #4]
    430e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4312:	2101      	movs	r1, #1
    4314:	2000      	movs	r0, #0
    4316:	f004 b8f7 	b.w	8508 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    431a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    431e:	0000      	.short	0x0000
    4320:	200000f0 	.word	0x200000f0
    4324:	200011d0 	.word	0x200011d0
    4328:	b538      	push	{r3, r4, r5, lr}
    432a:	4604      	mov	r4, r0
    432c:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    4330:	460b      	mov	r3, r1
    4332:	f88d 0000 	strb.w	r0, [sp]
    4336:	9800      	ldr	r0, [sp, #0]
    4338:	9000      	str	r0, [sp, #0]
    433a:	f89d 0000 	ldrb.w	r0, [sp]
    433e:	2800      	cmp	r0, #0
    4340:	d13a      	bne.n	43b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    4342:	7820      	ldrb	r0, [r4, #0]
    4344:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4348:	2bff      	cmp	r3, #255	; 0xff
    434a:	d010      	beq.n	436e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    434c:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    4350:	1e51      	subs	r1, r2, #1
    4352:	4618      	mov	r0, r3
    4354:	f7fe fbfc 	bl	2b50 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4358:	b130      	cbz	r0, 4368 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    435a:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    435e:	f040 0002 	orr.w	r0, r0, #2
    4362:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    4366:	e011      	b.n	438c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    4368:	f241 0118 	movw	r1, #4120	; 0x1018
    436c:	e021      	b.n	43b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    436e:	4813      	ldr	r0, [pc, #76]	; (43bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    4370:	6840      	ldr	r0, [r0, #4]
    4372:	7801      	ldrb	r1, [r0, #0]
    4374:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4378:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    437c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    4380:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    4384:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4388:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    438c:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    4390:	287f      	cmp	r0, #127	; 0x7f
    4392:	d00c      	beq.n	43ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    4394:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    4398:	207f      	movs	r0, #127	; 0x7f
    439a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    439e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    43a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    43a6:	2202      	movs	r2, #2
    43a8:	4905      	ldr	r1, [pc, #20]	; (43c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    43aa:	f00a b8ed 	b.w	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    43ae:	f640 616c 	movw	r1, #3692	; 0xe6c
    43b2:	202d      	movs	r0, #45	; 0x2d
    43b4:	f7fc fec6 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43b8:	bd38      	pop	{r3, r4, r5, pc}
    43ba:	0000      	.short	0x0000
    43bc:	200000f0 	.word	0x200000f0
    43c0:	0000ee93 	.word	0x0000ee93
    43c4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    43c8:	4616      	mov	r6, r2
    43ca:	4604      	mov	r4, r0
    43cc:	2903      	cmp	r1, #3
    43ce:	d004      	beq.n	43da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    43d0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    43d4:	b108      	cbz	r0, 43da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    43d6:	2001      	movs	r0, #1
    43d8:	e000      	b.n	43dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    43da:	2000      	movs	r0, #0
    43dc:	2500      	movs	r5, #0
    43de:	2903      	cmp	r1, #3
    43e0:	d003      	beq.n	43ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    43e2:	2701      	movs	r7, #1
    43e4:	2905      	cmp	r1, #5
    43e6:	d005      	beq.n	43f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    43e8:	e008      	b.n	43fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    43ea:	78a1      	ldrb	r1, [r4, #2]
    43ec:	2702      	movs	r7, #2
    43ee:	f3c1 0140 	ubfx	r1, r1, #1, #1
    43f2:	e001      	b.n	43f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    43f4:	78a1      	ldrb	r1, [r4, #2]
    43f6:	07c9      	lsls	r1, r1, #31
    43f8:	2900      	cmp	r1, #0
    43fa:	d06b      	beq.n	44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    43fc:	2800      	cmp	r0, #0
    43fe:	d169      	bne.n	44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4400:	4835      	ldr	r0, [pc, #212]	; (44d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    4402:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 44dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    4406:	7b80      	ldrb	r0, [r0, #14]
    4408:	b180      	cbz	r0, 442c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    440a:	f009 fccc 	bl	dda6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    440e:	7030      	strb	r0, [r6, #0]
    4410:	28ff      	cmp	r0, #255	; 0xff
    4412:	d014      	beq.n	443e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    4414:	b2c0      	uxtb	r0, r0
    4416:	466a      	mov	r2, sp
    4418:	a902      	add	r1, sp, #8
    441a:	f7fe fb99 	bl	2b50 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    441e:	b148      	cbz	r0, 4434 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    4420:	4669      	mov	r1, sp
    4422:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4426:	f00a fbde 	bl	ebe6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    442a:	4605      	mov	r5, r0
    442c:	7830      	ldrb	r0, [r6, #0]
    442e:	28ff      	cmp	r0, #255	; 0xff
    4430:	d005      	beq.n	443e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    4432:	e00d      	b.n	4450 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    4434:	f640 719b 	movw	r1, #3995	; 0xf9b
    4438:	202d      	movs	r0, #45	; 0x2d
    443a:	f7fc fe83 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    443e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4442:	f811 0b03 	ldrb.w	r0, [r1], #3
    4446:	f3c0 1080 	ubfx	r0, r0, #6, #1
    444a:	f00a fbcc 	bl	ebe6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    444e:	4605      	mov	r5, r0
    4450:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4454:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    4458:	f104 0358 	add.w	r3, r4, #88	; 0x58
    445c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4460:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4464:	f009 fc11 	bl	dc8a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4468:	f8d9 1004 	ldr.w	r1, [r9, #4]
    446c:	4680      	mov	r8, r0
    446e:	f811 0b03 	ldrb.w	r0, [r1], #3
    4472:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4476:	f009 fca0 	bl	ddba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    447a:	4681      	mov	r9, r0
    447c:	f7fe fb88 	bl	2b90 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    4480:	b138      	cbz	r0, 4492 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4482:	4648      	mov	r0, r9
    4484:	f7fe fb44 	bl	2b10 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4488:	b118      	cbz	r0, 4492 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    448a:	2110      	movs	r1, #16
    448c:	f009 fe40 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    4490:	b138      	cbz	r0, 44a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    4492:	2100      	movs	r1, #0
    4494:	7830      	ldrb	r0, [r6, #0]
    4496:	28ff      	cmp	r0, #255	; 0xff
    4498:	d00c      	beq.n	44b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    449a:	f1b8 0f00 	cmp.w	r8, #0
    449e:	d105      	bne.n	44ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    44a0:	e001      	b.n	44a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    44a2:	2101      	movs	r1, #1
    44a4:	e7f6      	b.n	4494 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    44a6:	7e62      	ldrb	r2, [r4, #25]
    44a8:	4282      	cmp	r2, r0
    44aa:	d101      	bne.n	44b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    44ac:	2001      	movs	r0, #1
    44ae:	e003      	b.n	44b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    44b0:	2000      	movs	r0, #0
    44b2:	e001      	b.n	44b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    44b4:	ea28 0001 	bic.w	r0, r8, r1
    44b8:	78a2      	ldrb	r2, [r4, #2]
    44ba:	0752      	lsls	r2, r2, #29
    44bc:	d501      	bpl.n	44c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    44be:	b930      	cbnz	r0, 44ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    44c0:	e008      	b.n	44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    44c2:	b939      	cbnz	r1, 44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    44c4:	b91d      	cbnz	r5, 44ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    44c6:	7be0      	ldrb	r0, [r4, #15]
    44c8:	b108      	cbz	r0, 44ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    44ca:	42b8      	cmp	r0, r7
    44cc:	d102      	bne.n	44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    44ce:	2001      	movs	r0, #1
    44d0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    44d4:	2000      	movs	r0, #0
    44d6:	e7fb      	b.n	44d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    44d8:	200011d0 	.word	0x200011d0
    44dc:	200000f0 	.word	0x200000f0
    44e0:	b570      	push	{r4, r5, r6, lr}
    44e2:	4604      	mov	r4, r0
    44e4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    44e6:	4d10      	ldr	r5, [pc, #64]	; (4528 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    44e8:	1c40      	adds	r0, r0, #1
    44ea:	8620      	strh	r0, [r4, #48]	; 0x30
    44ec:	7ba8      	ldrb	r0, [r5, #14]
    44ee:	2600      	movs	r6, #0
    44f0:	b120      	cbz	r0, 44fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    44f2:	f003 fced 	bl	7ed0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    44f6:	f003 fb11 	bl	7b1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    44fa:	73ae      	strb	r6, [r5, #14]
    44fc:	702e      	strb	r6, [r5, #0]
    44fe:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    4502:	b108      	cbz	r0, 4508 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    4504:	2101      	movs	r1, #1
    4506:	e00a      	b.n	451e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    4508:	7b60      	ldrb	r0, [r4, #13]
    450a:	b138      	cbz	r0, 451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    450c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    450e:	4288      	cmp	r0, r1
    4510:	d804      	bhi.n	451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    4512:	2101      	movs	r1, #1
    4514:	4620      	mov	r0, r4
    4516:	f00a fdd2 	bl	f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    451a:	bd70      	pop	{r4, r5, r6, pc}
    451c:	2100      	movs	r1, #0
    451e:	4620      	mov	r0, r4
    4520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4524:	f00a bdcb 	b.w	f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4528:	200011d0 	.word	0x200011d0
    452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4530:	4604      	mov	r4, r0
    4532:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    4536:	8808      	ldrh	r0, [r1, #0]
    4538:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    453c:	20ff      	movs	r0, #255	; 0xff
    453e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    4542:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4546:	4616      	mov	r6, r2
    4548:	460d      	mov	r5, r1
    454a:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    454e:	2b00      	cmp	r3, #0
    4550:	d14b      	bne.n	45ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    4552:	6928      	ldr	r0, [r5, #16]
    4554:	f009 fc6a 	bl	de2c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4558:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    455c:	8b28      	ldrh	r0, [r5, #24]
    455e:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    4562:	8b68      	ldrh	r0, [r5, #26]
    4564:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    4568:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    456c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    4570:	7e20      	ldrb	r0, [r4, #24]
    4572:	f104 0151 	add.w	r1, r4, #81	; 0x51
    4576:	460f      	mov	r7, r1
    4578:	2500      	movs	r5, #0
    457a:	b120      	cbz	r0, 4586 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    457c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4580:	f00a fb5d 	bl	ec3e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    4584:	b940      	cbnz	r0, 4598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    4586:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    458a:	b170      	cbz	r0, 45aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    458c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4590:	4639      	mov	r1, r7
    4592:	f00a fb4b 	bl	ec2c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    4596:	b140      	cbz	r0, 45aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    4598:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    459c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    45a0:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    45a4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    45a8:	e003      	b.n	45b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    45aa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    45ae:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    45b2:	4815      	ldr	r0, [pc, #84]	; (4608 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
    45b4:	2eff      	cmp	r6, #255	; 0xff
    45b6:	6840      	ldr	r0, [r0, #4]
    45b8:	7801      	ldrb	r1, [r0, #0]
    45ba:	f3c1 1180 	ubfx	r1, r1, #6, #1
    45be:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    45c2:	f850 1f03 	ldr.w	r1, [r0, #3]!
    45c6:	d017      	beq.n	45f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
    45c8:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    45cc:	8880      	ldrh	r0, [r0, #4]
    45ce:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    45d2:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    45d6:	1e51      	subs	r1, r2, #1
    45d8:	4630      	mov	r0, r6
    45da:	f7fe fab9 	bl	2b50 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    45de:	b130      	cbz	r0, 45ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
    45e0:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    45e4:	f040 0002 	orr.w	r0, r0, #2
    45e8:	7020      	strb	r0, [r4, #0]
    45ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ee:	f640 418b 	movw	r1, #3211	; 0xc8b
    45f2:	202d      	movs	r0, #45	; 0x2d
    45f4:	f7fc fda6 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45f8:	f844 1f7a 	str.w	r1, [r4, #122]!
    45fc:	8880      	ldrh	r0, [r0, #4]
    45fe:	80a0      	strh	r0, [r4, #4]
    4600:	60e5      	str	r5, [r4, #12]
    4602:	8225      	strh	r5, [r4, #16]
    4604:	e7f1      	b.n	45ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    4606:	0000      	.short	0x0000
    4608:	200000f0 	.word	0x200000f0
    460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    460e:	4604      	mov	r4, r0
    4610:	20ff      	movs	r0, #255	; 0xff
    4612:	f88d 0000 	strb.w	r0, [sp]
    4616:	2601      	movs	r6, #1
    4618:	466a      	mov	r2, sp
    461a:	2105      	movs	r1, #5
    461c:	4620      	mov	r0, r4
    461e:	f7ff fed1 	bl	43c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    4622:	b160      	cbz	r0, 463e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b2>
    4624:	4d28      	ldr	r5, [pc, #160]	; (46c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
    4626:	4f27      	ldr	r7, [pc, #156]	; (46c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>)
    4628:	6869      	ldr	r1, [r5, #4]
    462a:	7bfa      	ldrb	r2, [r7, #15]
    462c:	f107 0310 	add.w	r3, r7, #16
    4630:	f811 0b03 	ldrb.w	r0, [r1], #3
    4634:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4638:	f009 fb27 	bl	dc8a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    463c:	b110      	cbz	r0, 4644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b8>
    463e:	2600      	movs	r6, #0
    4640:	4630      	mov	r0, r6
    4642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4644:	686a      	ldr	r2, [r5, #4]
    4646:	69e0      	ldr	r0, [r4, #28]
    4648:	7812      	ldrb	r2, [r2, #0]
    464a:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    464e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    4652:	4011      	ands	r1, r2
    4654:	7001      	strb	r1, [r0, #0]
    4656:	2201      	movs	r2, #1
    4658:	4620      	mov	r0, r4
    465a:	69e1      	ldr	r1, [r4, #28]
    465c:	f000 f89a 	bl	4794 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x708>
    4660:	2300      	movs	r3, #0
    4662:	f89d 2000 	ldrb.w	r2, [sp]
    4666:	4620      	mov	r0, r4
    4668:	69e1      	ldr	r1, [r4, #28]
    466a:	f7ff ff5f 	bl	452c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    466e:	2202      	movs	r2, #2
    4670:	4916      	ldr	r1, [pc, #88]	; (46cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>)
    4672:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    4676:	f009 ff87 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    467a:	69e0      	ldr	r0, [r4, #28]
    467c:	2202      	movs	r2, #2
    467e:	8801      	ldrh	r1, [r0, #0]
    4680:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    4684:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4688:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    468c:	4910      	ldr	r1, [pc, #64]	; (46d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>)
    468e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    4692:	f009 ff79 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4696:	2100      	movs	r1, #0
    4698:	69e0      	ldr	r0, [r4, #28]
    469a:	7039      	strb	r1, [r7, #0]
    469c:	460a      	mov	r2, r1
    469e:	4621      	mov	r1, r4
    46a0:	f000 fa7a 	bl	4b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    46a4:	6868      	ldr	r0, [r5, #4]
    46a6:	69e1      	ldr	r1, [r4, #28]
    46a8:	f8d0 2003 	ldr.w	r2, [r0, #3]
    46ac:	f841 2f03 	str.w	r2, [r1, #3]!
    46b0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    46b4:	808a      	strh	r2, [r1, #4]
    46b6:	7800      	ldrb	r0, [r0, #0]
    46b8:	69e1      	ldr	r1, [r4, #28]
    46ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
    46be:	7088      	strb	r0, [r1, #2]
    46c0:	e7be      	b.n	4640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b4>
    46c2:	0000      	.short	0x0000
    46c4:	200011d0 	.word	0x200011d0
    46c8:	200000f0 	.word	0x200000f0
    46cc:	0000ee43 	.word	0x0000ee43
    46d0:	0000ee33 	.word	0x0000ee33
    46d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46d6:	4604      	mov	r4, r0
    46d8:	20ff      	movs	r0, #255	; 0xff
    46da:	f88d 0000 	strb.w	r0, [sp]
    46de:	2501      	movs	r5, #1
    46e0:	466a      	mov	r2, sp
    46e2:	2103      	movs	r1, #3
    46e4:	4620      	mov	r0, r4
    46e6:	f7ff fe6d 	bl	43c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    46ea:	b1e8      	cbz	r0, 4728 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    46ec:	7b20      	ldrb	r0, [r4, #12]
    46ee:	b120      	cbz	r0, 46fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66e>
    46f0:	f89d 1000 	ldrb.w	r1, [sp]
    46f4:	4620      	mov	r0, r4
    46f6:	f7ff fe17 	bl	4328 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    46fa:	4e0d      	ldr	r6, [pc, #52]	; (4730 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    46fc:	2100      	movs	r1, #0
    46fe:	6870      	ldr	r0, [r6, #4]
    4700:	8001      	strh	r1, [r0, #0]
    4702:	2104      	movs	r1, #4
    4704:	f009 fdbe 	bl	e284 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4708:	4620      	mov	r0, r4
    470a:	f000 f88b 	bl	4824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
    470e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    4712:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4714:	6870      	ldr	r0, [r6, #4]
    4716:	f009 fdec 	bl	e2f2 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    471a:	4906      	ldr	r1, [pc, #24]	; (4734 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    471c:	2005      	movs	r0, #5
    471e:	7008      	strb	r0, [r1, #0]
    4720:	6870      	ldr	r0, [r6, #4]
    4722:	f003 fe69 	bl	83f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4726:	e000      	b.n	472a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69e>
    4728:	2500      	movs	r5, #0
    472a:	4628      	mov	r0, r5
    472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    472e:	0000      	.short	0x0000
    4730:	200000f0 	.word	0x200000f0
    4734:	200011d0 	.word	0x200011d0
    4738:	b570      	push	{r4, r5, r6, lr}
    473a:	4604      	mov	r4, r0
    473c:	460e      	mov	r6, r1
    473e:	7e40      	ldrb	r0, [r0, #25]
    4740:	f7fe f9e6 	bl	2b10 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4744:	0005      	movs	r5, r0
    4746:	d019      	beq.n	477c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
    4748:	2110      	movs	r1, #16
    474a:	f009 fce1 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    474e:	2800      	cmp	r0, #0
    4750:	d114      	bne.n	477c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
    4752:	2001      	movs	r0, #1
    4754:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4758:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    475c:	4632      	mov	r2, r6
    475e:	460c      	mov	r4, r1
    4760:	4628      	mov	r0, r5
    4762:	f009 fac2 	bl	dcea <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    4766:	4621      	mov	r1, r4
    4768:	4c05      	ldr	r4, [pc, #20]	; (4780 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f4>)
    476a:	6860      	ldr	r0, [r4, #4]
    476c:	f009 fda5 	bl	e2ba <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    4770:	6860      	ldr	r0, [r4, #4]
    4772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4776:	2101      	movs	r1, #1
    4778:	f009 bda5 	b.w	e2c6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    477c:	bd70      	pop	{r4, r5, r6, pc}
    477e:	0000      	.short	0x0000
    4780:	200000f0 	.word	0x200000f0
    4784:	4802      	ldr	r0, [pc, #8]	; (4790 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x704>)
    4786:	2101      	movs	r1, #1
    4788:	6800      	ldr	r0, [r0, #0]
    478a:	f7ff baf9 	b.w	3d80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    478e:	0000      	.short	0x0000
    4790:	200000f0 	.word	0x200000f0
    4794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4798:	4e21      	ldr	r6, [pc, #132]	; (4820 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x794>)
    479a:	4680      	mov	r8, r0
    479c:	460c      	mov	r4, r1
    479e:	6870      	ldr	r0, [r6, #4]
    47a0:	4615      	mov	r5, r2
    47a2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    47a6:	6161      	str	r1, [r4, #20]
    47a8:	6841      	ldr	r1, [r0, #4]
    47aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    47ae:	61e1      	str	r1, [r4, #28]
    47b0:	8940      	ldrh	r0, [r0, #10]
    47b2:	f009 fb37 	bl	de24 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    47b6:	4607      	mov	r7, r0
    47b8:	6120      	str	r0, [r4, #16]
    47ba:	6870      	ldr	r0, [r6, #4]
    47bc:	4639      	mov	r1, r7
    47be:	7d80      	ldrb	r0, [r0, #22]
    47c0:	f009 fc9d 	bl	e0fe <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    47c4:	84a0      	strh	r0, [r4, #36]	; 0x24
    47c6:	6870      	ldr	r0, [r6, #4]
    47c8:	4639      	mov	r1, r7
    47ca:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    47ce:	f009 fc92 	bl	e0f6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    47d2:	6220      	str	r0, [r4, #32]
    47d4:	6870      	ldr	r0, [r6, #4]
    47d6:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    47da:	8321      	strh	r1, [r4, #24]
    47dc:	8841      	ldrh	r1, [r0, #2]
    47de:	8361      	strh	r1, [r4, #26]
    47e0:	6841      	ldr	r1, [r0, #4]
    47e2:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    47e6:	7a01      	ldrb	r1, [r0, #8]
    47e8:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    47ec:	7a41      	ldrb	r1, [r0, #9]
    47ee:	f001 011f 	and.w	r1, r1, #31
    47f2:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    47f6:	7a40      	ldrb	r0, [r0, #9]
    47f8:	0940      	lsrs	r0, r0, #5
    47fa:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    47fe:	f104 0062 	add.w	r0, r4, #98	; 0x62
    4802:	7205      	strb	r5, [r0, #8]
    4804:	7245      	strb	r5, [r0, #9]
    4806:	21ff      	movs	r1, #255	; 0xff
    4808:	7281      	strb	r1, [r0, #10]
    480a:	2100      	movs	r1, #0
    480c:	3836      	subs	r0, #54	; 0x36
    480e:	f009 ff2e 	bl	e66e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    4812:	f998 100e 	ldrsb.w	r1, [r8, #14]
    4816:	4620      	mov	r0, r4
    4818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    481c:	f009 bbd6 	b.w	dfcc <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    4820:	200000f0 	.word	0x200000f0
    4824:	b570      	push	{r4, r5, r6, lr}
    4826:	4d07      	ldr	r5, [pc, #28]	; (4844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b8>)
    4828:	4604      	mov	r4, r0
    482a:	f100 0151 	add.w	r1, r0, #81	; 0x51
    482e:	6868      	ldr	r0, [r5, #4]
    4830:	f009 fd50 	bl	e2d4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    4834:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    4838:	6868      	ldr	r0, [r5, #4]
    483a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    483e:	f009 bd4f 	b.w	e2e0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    4842:	0000      	.short	0x0000
    4844:	200000f0 	.word	0x200000f0
    4848:	0000400d 	.word	0x0000400d
    484c:	00003e95 	.word	0x00003e95
    4850:	00003f89 	.word	0x00003f89
    4854:	00000000 	.word	0x00000000
    4858:	00003f61 	.word	0x00003f61
    485c:	00003fb9 	.word	0x00003fb9
    4860:	0000ee27 	.word	0x0000ee27
    4864:	0000ee2d 	.word	0x0000ee2d
    4868:	0000421d 	.word	0x0000421d
    486c:	00004241 	.word	0x00004241
    4870:	00004785 	.word	0x00004785
    4874:	00004864 	.word	0x00004864
    4878:	0000485c 	.word	0x0000485c
    487c:	00004858 	.word	0x00004858

00004880 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4880:	b510      	push	{r4, lr}
    4882:	1e42      	subs	r2, r0, #1
    4884:	2a02      	cmp	r2, #2
    4886:	d901      	bls.n	488c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4888:	21ca      	movs	r1, #202	; 0xca
    488a:	e009      	b.n	48a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    488c:	1e40      	subs	r0, r0, #1
    488e:	2910      	cmp	r1, #16
    4890:	d009      	beq.n	48a6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    4892:	2912      	cmp	r1, #18
    4894:	d00c      	beq.n	48b0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4896:	2913      	cmp	r1, #19
    4898:	d00a      	beq.n	48b0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    489a:	2915      	cmp	r1, #21
    489c:	d005      	beq.n	48aa <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    489e:	21d8      	movs	r1, #216	; 0xd8
    48a0:	202f      	movs	r0, #47	; 0x2f
    48a2:	f7fc fc4f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48a6:	4905      	ldr	r1, [pc, #20]	; (48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48a8:	e004      	b.n	48b4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48aa:	4904      	ldr	r1, [pc, #16]	; (48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48ac:	1d89      	adds	r1, r1, #6
    48ae:	e001      	b.n	48b4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48b0:	4902      	ldr	r1, [pc, #8]	; (48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48b2:	1f89      	subs	r1, r1, #6
    48b4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    48b8:	bd10      	pop	{r4, pc}
    48ba:	0000      	.short	0x0000
    48bc:	0000f08e 	.word	0x0000f08e

000048c0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    48c0:	1e42      	subs	r2, r0, #1
    48c2:	b510      	push	{r4, lr}
    48c4:	b2d2      	uxtb	r2, r2
    48c6:	2a01      	cmp	r2, #1
    48c8:	d903      	bls.n	48d2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    48ca:	291d      	cmp	r1, #29
    48cc:	d001      	beq.n	48d2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    48ce:	21ee      	movs	r1, #238	; 0xee
    48d0:	e00d      	b.n	48ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    48d2:	2913      	cmp	r1, #19
    48d4:	d013      	beq.n	48fe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    48d6:	dc04      	bgt.n	48e2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    48d8:	2910      	cmp	r1, #16
    48da:	d00b      	beq.n	48f4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    48dc:	2912      	cmp	r1, #18
    48de:	d104      	bne.n	48ea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    48e0:	e00d      	b.n	48fe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    48e2:	2915      	cmp	r1, #21
    48e4:	d008      	beq.n	48f8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    48e6:	291d      	cmp	r1, #29
    48e8:	d00e      	beq.n	4908 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    48ea:	f44f 7181 	mov.w	r1, #258	; 0x102
    48ee:	202f      	movs	r0, #47	; 0x2f
    48f0:	f7fc fc28 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f4:	4807      	ldr	r0, [pc, #28]	; (4914 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    48f6:	e004      	b.n	4902 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    48f8:	4806      	ldr	r0, [pc, #24]	; (4914 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    48fa:	3008      	adds	r0, #8
    48fc:	e001      	b.n	4902 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    48fe:	4805      	ldr	r0, [pc, #20]	; (4914 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4900:	1d00      	adds	r0, r0, #4
    4902:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    4906:	bd10      	pop	{r4, pc}
    4908:	f240 315a 	movw	r1, #858	; 0x35a
    490c:	fb10 f001 	smulbb	r0, r0, r1
    4910:	bd10      	pop	{r4, pc}
    4912:	0000      	.short	0x0000
    4914:	0000f07c 	.word	0x0000f07c

00004918 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    491c:	4604      	mov	r4, r0
    491e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    4922:	4616      	mov	r6, r2
    4924:	460f      	mov	r7, r1
    4926:	2800      	cmp	r0, #0
    4928:	d15e      	bne.n	49e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    492a:	4621      	mov	r1, r4
    492c:	484d      	ldr	r0, [pc, #308]	; (4a64 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    492e:	f006 fb7f 	bl	b030 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4932:	4605      	mov	r5, r0
    4934:	2820      	cmp	r0, #32
    4936:	d057      	beq.n	49e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4938:	2250      	movs	r2, #80	; 0x50
    493a:	2100      	movs	r1, #0
    493c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    4940:	f00c fa27 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4944:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    4948:	2501      	movs	r5, #1
    494a:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    494e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    4952:	b137      	cbz	r7, 4962 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    4954:	f7fe fdf0 	bl	3538 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4958:	f000 0007 	and.w	r0, r0, #7
    495c:	1c40      	adds	r0, r0, #1
    495e:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    4962:	4620      	mov	r0, r4
    4964:	f00a fd58 	bl	f418 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    4968:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    496c:	2002      	movs	r0, #2
    496e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    4972:	46a8      	mov	r8, r5
    4974:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4978:	2500      	movs	r5, #0
    497a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    497e:	f007 fcbd 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4982:	4607      	mov	r7, r0
    4984:	f00b fff0 	bl	10968 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4988:	8921      	ldrh	r1, [r4, #8]
    498a:	3ce8      	subs	r4, #232	; 0xe8
    498c:	4288      	cmp	r0, r1
    498e:	d800      	bhi.n	4992 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4990:	4608      	mov	r0, r1
    4992:	4438      	add	r0, r7
    4994:	30ce      	adds	r0, #206	; 0xce
    4996:	b287      	uxth	r7, r0
    4998:	4620      	mov	r0, r4
    499a:	f00a fa03 	bl	eda4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    499e:	b330      	cbz	r0, 49ee <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    49a0:	f00b ff04 	bl	107ac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    49a4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    49a8:	b281      	uxth	r1, r0
    49aa:	4630      	mov	r0, r6
    49ac:	f007 fdc6 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    49b0:	4430      	add	r0, r6
    49b2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    49b6:	3490      	adds	r4, #144	; 0x90
    49b8:	f00b ffdf 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49bc:	19c0      	adds	r0, r0, r7
    49be:	4169      	adcs	r1, r5
    49c0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    49c4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    49c8:	f824 5c6e 	strh.w	r5, [r4, #-110]
    49cc:	2001      	movs	r0, #1
    49ce:	f00a fb4e 	bl	f06e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    49d2:	f200 1015 	addw	r0, r0, #277	; 0x115
    49d6:	1a30      	subs	r0, r6, r0
    49d8:	6460      	str	r0, [r4, #68]	; 0x44
    49da:	f04f 30ff 	mov.w	r0, #4294967295
    49de:	0841      	lsrs	r1, r0, #1
    49e0:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    49e4:	3c90      	subs	r4, #144	; 0x90
    49e6:	e025      	b.n	4a34 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    49e8:	200c      	movs	r0, #12
    49ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49ee:	2100      	movs	r1, #0
    49f0:	4620      	mov	r0, r4
    49f2:	f00a fc65 	bl	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    49f6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4a68 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    49fa:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    49fe:	2000      	movs	r0, #0
    4a00:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a04:	b149      	cbz	r1, 4a1a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a06:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4a08:	b139      	cbz	r1, 4a1a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a0a:	f7fe fd95 	bl	3538 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4a0e:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a12:	fbb0 f2f1 	udiv	r2, r0, r1
    4a16:	fb01 0012 	mls	r0, r1, r2, r0
    4a1a:	4407      	add	r7, r0
    4a1c:	f00b ffad 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4a20:	19c0      	adds	r0, r0, r7
    4a22:	4169      	adcs	r1, r5
    4a24:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4a28:	b19e      	cbz	r6, 4a52 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4a2a:	1980      	adds	r0, r0, r6
    4a2c:	eb51 0105 	adcs.w	r1, r1, r5
    4a30:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    4a34:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4a38:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    4a3c:	f00a fcea 	bl	f414 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4a40:	b158      	cbz	r0, 4a5a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    4a42:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    4a46:	2100      	movs	r1, #0
    4a48:	4620      	mov	r0, r4
    4a4a:	f00a f9db 	bl	ee04 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4a4e:	2000      	movs	r0, #0
    4a50:	e7cb      	b.n	49ea <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    4a52:	f04f 30ff 	mov.w	r0, #4294967295
    4a56:	0841      	lsrs	r1, r0, #1
    4a58:	e7ea      	b.n	4a30 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    4a5a:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    4a5e:	2030      	movs	r0, #48	; 0x30
    4a60:	f7fc fb70 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a64:	0000f4f9 	.word	0x0000f4f9
    4a68:	20000100 	.word	0x20000100

00004a6c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4a6c:	4901      	ldr	r1, [pc, #4]	; (4a74 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4a6e:	8088      	strh	r0, [r1, #4]
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	20000100 	.word	0x20000100

00004a78 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4a78:	4805      	ldr	r0, [pc, #20]	; (4a90 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4a7a:	2100      	movs	r1, #0
    4a7c:	7001      	strb	r1, [r0, #0]
    4a7e:	2201      	movs	r2, #1
    4a80:	7082      	strb	r2, [r0, #2]
    4a82:	7041      	strb	r1, [r0, #1]
    4a84:	f242 7110 	movw	r1, #10000	; 0x2710
    4a88:	8081      	strh	r1, [r0, #4]
    4a8a:	f000 b803 	b.w	4a94 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4a8e:	0000      	.short	0x0000
    4a90:	20000100 	.word	0x20000100

00004a94 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4a94:	b51c      	push	{r2, r3, r4, lr}
    4a96:	4909      	ldr	r1, [pc, #36]	; (4abc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4a98:	e9d1 0100 	ldrd	r0, r1, [r1]
    4a9c:	e9cd 0100 	strd	r0, r1, [sp]
    4aa0:	e002      	b.n	4aa8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4aa2:	9800      	ldr	r0, [sp, #0]
    4aa4:	f00a fb1f 	bl	f0e6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4aa8:	4668      	mov	r0, sp
    4aaa:	f7fc fecb 	bl	1844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4aae:	2800      	cmp	r0, #0
    4ab0:	d0f7      	beq.n	4aa2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4ab2:	f000 f8c7 	bl	4c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    4ab6:	2000      	movs	r0, #0
    4ab8:	bd1c      	pop	{r2, r3, r4, pc}
    4aba:	0000      	.short	0x0000
    4abc:	000053dc 	.word	0x000053dc

00004ac0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4ac0:	4901      	ldr	r1, [pc, #4]	; (4ac8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4ac2:	7008      	strb	r0, [r1, #0]
    4ac4:	4770      	bx	lr
    4ac6:	0000      	.short	0x0000
    4ac8:	20000100 	.word	0x20000100

00004acc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4acc:	4908      	ldr	r1, [pc, #32]	; (4af0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4ad2:	fbb1 f1f2 	udiv	r1, r1, r2
    4ad6:	b510      	push	{r4, lr}
    4ad8:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4adc:	f009 fde0 	bl	e6a0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4ae0:	f640 0148 	movw	r1, #2120	; 0x848
    4ae4:	4288      	cmp	r0, r1
    4ae6:	d300      	bcc.n	4aea <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4ae8:	4608      	mov	r0, r1
    4aea:	b280      	uxth	r0, r0
    4aec:	bd10      	pop	{r4, pc}
    4aee:	0000      	.short	0x0000
    4af0:	0001527d 	.word	0x0001527d

00004af4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4af4:	b510      	push	{r4, lr}
    4af6:	f003 fb93 	bl	8220 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4afa:	4905      	ldr	r1, [pc, #20]	; (4b10 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4afc:	688a      	ldr	r2, [r1, #8]
    4afe:	4290      	cmp	r0, r2
    4b00:	d801      	bhi.n	4b06 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    4b02:	7848      	ldrb	r0, [r1, #1]
    4b04:	b108      	cbz	r0, 4b0a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    4b06:	2000      	movs	r0, #0
    4b08:	bd10      	pop	{r4, pc}
    4b0a:	2001      	movs	r0, #1
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	0000      	.short	0x0000
    4b10:	20000100 	.word	0x20000100

00004b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4b14:	b510      	push	{r4, lr}
    4b16:	4604      	mov	r4, r0
    4b18:	2906      	cmp	r1, #6
    4b1a:	d238      	bcs.n	4b8e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    4b1c:	e8df f001 	tbb	[pc, r1]
    4b20:	14031105 	.word	0x14031105
    4b24:	3215      	.short	0x3215
    4b26:	2100      	movs	r1, #0
    4b28:	e006      	b.n	4b38 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4b2a:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4b2e:	b110      	cbz	r0, 4b36 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4b30:	4620      	mov	r0, r4
    4b32:	f00a fc02 	bl	f33a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    4b36:	2101      	movs	r1, #1
    4b38:	4620      	mov	r0, r4
    4b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b3e:	f000 b97f 	b.w	4e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    4b42:	2003      	movs	r0, #3
    4b44:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4b48:	bd10      	pop	{r4, pc}
    4b4a:	f003 fb75 	bl	8238 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4b4e:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4b52:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b56:	f003 fc33 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b5a:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b5e:	4288      	cmp	r0, r1
    4b60:	d904      	bls.n	4b6c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    4b62:	f240 31e3 	movw	r1, #995	; 0x3e3
    4b66:	2030      	movs	r0, #48	; 0x30
    4b68:	f7fc faec 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b6c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b70:	f003 fc26 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b74:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b78:	1a08      	subs	r0, r1, r0
    4b7a:	4906      	ldr	r1, [pc, #24]	; (4b94 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    4b7c:	688a      	ldr	r2, [r1, #8]
    4b7e:	4410      	add	r0, r2
    4b80:	6088      	str	r0, [r1, #8]
    4b82:	bd10      	pop	{r4, pc}
    4b84:	4620      	mov	r0, r4
    4b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b8a:	f00a bbc3 	b.w	f314 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4b8e:	f240 7199 	movw	r1, #1945	; 0x799
    4b92:	e7e8      	b.n	4b66 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    4b94:	20000100 	.word	0x20000100

00004b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b9c:	460c      	mov	r4, r1
    4b9e:	4680      	mov	r8, r0
    4ba0:	b112      	cbz	r2, 4ba8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    4ba2:	f240 71c3 	movw	r1, #1987	; 0x7c3
    4ba6:	e037      	b.n	4c18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4ba8:	f003 fb3a 	bl	8220 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4bac:	4607      	mov	r7, r0
    4bae:	2000      	movs	r0, #0
    4bb0:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    4bb4:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4bb8:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4bbc:	2001      	movs	r0, #1
    4bbe:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    4bc2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    4bc6:	2101      	movs	r1, #1
    4bc8:	34c8      	adds	r4, #200	; 0xc8
    4bca:	f7fe f859 	bl	2c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4bce:	f854 0f04 	ldr.w	r0, [r4, #4]!
    4bd2:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    4bd6:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4bda:	6821      	ldr	r1, [r4, #0]
    4bdc:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4be0:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    4be4:	6820      	ldr	r0, [r4, #0]
    4be6:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4bea:	6820      	ldr	r0, [r4, #0]
    4bec:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4bf0:	f854 09cc 	ldr.w	r0, [r4], #-204
    4bf4:	f00a fd29 	bl	f64a <__kernel_ram_size+0x12a>
    4bf8:	b110      	cbz	r0, 4c00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4bfa:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    4bfe:	e00b      	b.n	4c18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4c00:	f00a fb94 	bl	f32c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    4c04:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4c08:	4642      	mov	r2, r8
    4c0a:	4906      	ldr	r1, [pc, #24]	; (4c24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4c0c:	f006 f8c8 	bl	ada0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4c10:	2800      	cmp	r0, #0
    4c12:	d104      	bne.n	4c1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    4c14:	f240 71ac 	movw	r1, #1964	; 0x7ac
    4c18:	2030      	movs	r0, #48	; 0x30
    4c1a:	f7fc fa93 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c22:	0000      	.short	0x0000
    4c24:	0000f565 	.word	0x0000f565
    4c28:	b510      	push	{r4, lr}
    4c2a:	280c      	cmp	r0, #12
    4c2c:	d304      	bcc.n	4c38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    4c2e:	f240 318a 	movw	r1, #906	; 0x38a
    4c32:	2006      	movs	r0, #6
    4c34:	f7fc fa86 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c38:	4901      	ldr	r1, [pc, #4]	; (4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    4c3a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4c3e:	bd10      	pop	{r4, pc}
    4c40:	000053f8 	.word	0x000053f8
    4c44:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4c48:	4d16      	ldr	r5, [pc, #88]	; (4ca4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    4c4a:	2001      	movs	r0, #1
    4c4c:	7068      	strb	r0, [r5, #1]
    4c4e:	2400      	movs	r4, #0
    4c50:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c54:	e00b      	b.n	4c6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    4c56:	2100      	movs	r1, #0
    4c58:	f7fc fda2 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4c5c:	0007      	movs	r7, r0
    4c5e:	d009      	beq.n	4c74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    4c60:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4c64:	f006 f8cc 	bl	ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4c68:	4638      	mov	r0, r7
    4c6a:	f00a fc38 	bl	f4de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    4c6e:	9400      	str	r4, [sp, #0]
    4c70:	9401      	str	r4, [sp, #4]
    4c72:	e00e      	b.n	4c92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4c74:	f44f 7191 	mov.w	r1, #290	; 0x122
    4c78:	2030      	movs	r0, #48	; 0x30
    4c7a:	f7fc fa63 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c7e:	9800      	ldr	r0, [sp, #0]
    4c80:	b138      	cbz	r0, 4c92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4c82:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    4c86:	2920      	cmp	r1, #32
    4c88:	d003      	beq.n	4c92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4c8a:	8800      	ldrh	r0, [r0, #0]
    4c8c:	42b0      	cmp	r0, r6
    4c8e:	d1e2      	bne.n	4c56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    4c90:	e004      	b.n	4c9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    4c92:	4668      	mov	r0, sp
    4c94:	f7fc fdd6 	bl	1844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4c98:	2800      	cmp	r0, #0
    4c9a:	d0f0      	beq.n	4c7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    4c9c:	706c      	strb	r4, [r5, #1]
    4c9e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4ca2:	0000      	.short	0x0000
    4ca4:	20000100 	.word	0x20000100
    4ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cac:	4604      	mov	r4, r0
    4cae:	4839      	ldr	r0, [pc, #228]	; (4d94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    4cb0:	461e      	mov	r6, r3
    4cb2:	4690      	mov	r8, r2
    4cb4:	7880      	ldrb	r0, [r0, #2]
    4cb6:	4689      	mov	r9, r1
    4cb8:	2500      	movs	r5, #0
    4cba:	2800      	cmp	r0, #0
    4cbc:	d063      	beq.n	4d86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4cbe:	f007 fbf3 	bl	c4a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4cc2:	b3e0      	cbz	r0, 4d3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4cc4:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4cc8:	2802      	cmp	r0, #2
    4cca:	d35c      	bcc.n	4d86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4ccc:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cd0:	2802      	cmp	r0, #2
    4cd2:	d058      	beq.n	4d86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4cd4:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4cd8:	bb88      	cbnz	r0, 4d3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4cda:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4cde:	f7ff ffa3 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    4ce2:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4ce6:	b281      	uxth	r1, r0
    4ce8:	8031      	strh	r1, [r6, #0]
    4cea:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cee:	2700      	movs	r7, #0
    4cf0:	2801      	cmp	r0, #1
    4cf2:	d00d      	beq.n	4d10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    4cf4:	6920      	ldr	r0, [r4, #16]
    4cf6:	f007 fc21 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4cfa:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4cfe:	4442      	add	r2, r8
    4d00:	eba2 0109 	sub.w	r1, r2, r9
    4d04:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d08:	1a82      	subs	r2, r0, r2
    4d0a:	fb01 7502 	mla	r5, r1, r2, r7
    4d0e:	e035      	b.n	4d7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    4d10:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4d14:	2803      	cmp	r0, #3
    4d16:	d039      	beq.n	4d8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    4d18:	2101      	movs	r1, #1
    4d1a:	2000      	movs	r0, #0
    4d1c:	f009 f944 	bl	dfa8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d20:	6a21      	ldr	r1, [r4, #32]
    4d22:	1847      	adds	r7, r0, r1
    4d24:	8831      	ldrh	r1, [r6, #0]
    4d26:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d2a:	f007 fc07 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d2e:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4d32:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4d36:	1a82      	subs	r2, r0, r2
    4d38:	fb01 5502 	mla	r5, r1, r2, r5
    4d3c:	e000      	b.n	4d40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4d3e:	e022      	b.n	4d86 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4d40:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4d44:	8831      	ldrh	r1, [r6, #0]
    4d46:	4638      	mov	r0, r7
    4d48:	f007 fbf8 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d4c:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4d50:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4d54:	1a41      	subs	r1, r0, r1
    4d56:	440d      	add	r5, r1
    4d58:	8831      	ldrh	r1, [r6, #0]
    4d5a:	6920      	ldr	r0, [r4, #16]
    4d5c:	f007 fbee 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d60:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d64:	4442      	add	r2, r8
    4d66:	eba2 0109 	sub.w	r1, r2, r9
    4d6a:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4d6e:	1a89      	subs	r1, r1, r2
    4d70:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d74:	1a82      	subs	r2, r0, r2
    4d76:	1e49      	subs	r1, r1, #1
    4d78:	fb01 5502 	mla	r5, r1, r2, r5
    4d7c:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4d80:	2001      	movs	r0, #1
    4d82:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4d86:	4628      	mov	r0, r5
    4d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d8c:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d90:	e7c6      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    4d92:	0000      	.short	0x0000
    4d94:	20000100 	.word	0x20000100
    4d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d9c:	4605      	mov	r5, r0
    4d9e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4da2:	2128      	movs	r1, #40	; 0x28
    4da4:	f00a fa32 	bl	f20c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4da8:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    4dac:	f00b fddc 	bl	10968 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4db0:	2869      	cmp	r0, #105	; 0x69
    4db2:	d800      	bhi.n	4db6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    4db4:	2069      	movs	r0, #105	; 0x69
    4db6:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4dba:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    4dbe:	692a      	ldr	r2, [r5, #16]
    4dc0:	440b      	add	r3, r1
    4dc2:	429a      	cmp	r2, r3
    4dc4:	d903      	bls.n	4dce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4dc6:	1a51      	subs	r1, r2, r1
    4dc8:	1a0c      	subs	r4, r1, r0
    4dca:	3469      	adds	r4, #105	; 0x69
    4dcc:	e000      	b.n	4dd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    4dce:	2400      	movs	r4, #0
    4dd0:	4f1a      	ldr	r7, [pc, #104]	; (4e3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    4dd2:	7838      	ldrb	r0, [r7, #0]
    4dd4:	b918      	cbnz	r0, 4dde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4dd6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4dd8:	42a0      	cmp	r0, r4
    4dda:	d800      	bhi.n	4dde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4ddc:	4604      	mov	r4, r0
    4dde:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    4de2:	f009 fc68 	bl	e6b6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4de6:	4606      	mov	r6, r0
    4de8:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4dec:	f00a fc20 	bl	f630 <__kernel_ram_size+0x110>
    4df0:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    4df4:	4430      	add	r0, r6
    4df6:	1846      	adds	r6, r0, r1
    4df8:	1ba4      	subs	r4, r4, r6
    4dfa:	2c00      	cmp	r4, #0
    4dfc:	dc00      	bgt.n	4e00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    4dfe:	2400      	movs	r4, #0
    4e00:	2002      	movs	r0, #2
    4e02:	f005 f8f5 	bl	9ff0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4e06:	4284      	cmp	r4, r0
    4e08:	d300      	bcc.n	4e0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4e0a:	4604      	mov	r4, r0
    4e0c:	2102      	movs	r1, #2
    4e0e:	4620      	mov	r0, r4
    4e10:	f004 fffe 	bl	9e10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4e14:	b900      	cbnz	r0, 4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    4e16:	4426      	add	r6, r4
    4e18:	4642      	mov	r2, r8
    4e1a:	4631      	mov	r1, r6
    4e1c:	4628      	mov	r0, r5
    4e1e:	f009 fbeb 	bl	e5f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    4e22:	60b8      	str	r0, [r7, #8]
    4e24:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4e28:	f00a fc02 	bl	f630 <__kernel_ram_size+0x110>
    4e2c:	1a30      	subs	r0, r6, r0
    4e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e32:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    4e36:	f006 b9fb 	b.w	b230 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4e3a:	0000      	.short	0x0000
    4e3c:	20000100 	.word	0x20000100
    4e40:	b538      	push	{r3, r4, r5, lr}
    4e42:	2500      	movs	r5, #0
    4e44:	4604      	mov	r4, r0
    4e46:	2901      	cmp	r1, #1
    4e48:	d102      	bne.n	4e50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    4e4a:	4810      	ldr	r0, [pc, #64]	; (4e8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    4e4c:	7840      	ldrb	r0, [r0, #1]
    4e4e:	b170      	cbz	r0, 4e6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    4e50:	2004      	movs	r0, #4
    4e52:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e56:	bf00      	nop
    4e58:	f00a fa68 	bl	f32c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    4e5c:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4e60:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4e64:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4e68:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4e6c:	bd38      	pop	{r3, r4, r5, pc}
    4e6e:	9500      	str	r5, [sp, #0]
    4e70:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4e74:	2301      	movs	r3, #1
    4e76:	2200      	movs	r2, #0
    4e78:	4620      	mov	r0, r4
    4e7a:	f000 f809 	bl	4e90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4e7e:	2800      	cmp	r0, #0
    4e80:	d0ea      	beq.n	4e58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    4e82:	f240 710e 	movw	r1, #1806	; 0x70e
    4e86:	2030      	movs	r0, #48	; 0x30
    4e88:	f7fc f95c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e8c:	20000100 	.word	0x20000100
    4e90:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e94:	b08b      	sub	sp, #44	; 0x2c
    4e96:	4604      	mov	r4, r0
    4e98:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4e9c:	4699      	mov	r9, r3
    4e9e:	460f      	mov	r7, r1
    4ea0:	9307      	str	r3, [sp, #28]
    4ea2:	9005      	str	r0, [sp, #20]
    4ea4:	f00b fc82 	bl	107ac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4ea8:	4605      	mov	r5, r0
    4eaa:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4eae:	f7ff febb 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    4eb2:	4428      	add	r0, r5
    4eb4:	f8ad 0004 	strh.w	r0, [sp, #4]
    4eb8:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4ebc:	280d      	cmp	r0, #13
    4ebe:	d004      	beq.n	4eca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    4ec0:	2000      	movs	r0, #0
    4ec2:	9008      	str	r0, [sp, #32]
    4ec4:	980d      	ldr	r0, [sp, #52]	; 0x34
    4ec6:	b110      	cbz	r0, 4ece <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4ec8:	e02e      	b.n	4f28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4eca:	2001      	movs	r0, #1
    4ecc:	e7f9      	b.n	4ec2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    4ece:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ed2:	2803      	cmp	r0, #3
    4ed4:	d128      	bne.n	4f28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4ed6:	9808      	ldr	r0, [sp, #32]
    4ed8:	b330      	cbz	r0, 4f28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4eda:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4ede:	42b8      	cmp	r0, r7
    4ee0:	d122      	bne.n	4f28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4ee2:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4ee6:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4eea:	6920      	ldr	r0, [r4, #16]
    4eec:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4ef0:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4ef4:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4ef8:	4408      	add	r0, r1
    4efa:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4efe:	4620      	mov	r0, r4
    4f00:	f000 fa86 	bl	5410 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4f04:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4f08:	6220      	str	r0, [r4, #32]
    4f0a:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4f0e:	84a0      	strh	r0, [r4, #36]	; 0x24
    4f10:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4f14:	6120      	str	r0, [r4, #16]
    4f16:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4f1a:	8320      	strh	r0, [r4, #24]
    4f1c:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4f20:	8360      	strh	r0, [r4, #26]
    4f22:	2002      	movs	r0, #2
    4f24:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4f28:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4f2c:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4f30:	1a38      	subs	r0, r7, r0
    4f32:	fa0f fa80 	sxth.w	sl, r0
    4f36:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4f3a:	1a38      	subs	r0, r7, r0
    4f3c:	fa0f f880 	sxth.w	r8, r0
    4f40:	f1b8 0f00 	cmp.w	r8, #0
    4f44:	da08      	bge.n	4f58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    4f46:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4f4a:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4f4e:	46d0      	mov	r8, sl
    4f50:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4f54:	2001      	movs	r0, #1
    4f56:	9007      	str	r0, [sp, #28]
    4f58:	ab01      	add	r3, sp, #4
    4f5a:	4652      	mov	r2, sl
    4f5c:	4641      	mov	r1, r8
    4f5e:	4620      	mov	r0, r4
    4f60:	f7ff fea2 	bl	4ca8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    4f64:	9004      	str	r0, [sp, #16]
    4f66:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4f6a:	f8df b334 	ldr.w	fp, [pc, #820]	; 52a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    4f6e:	b140      	cbz	r0, 4f82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    4f70:	2801      	cmp	r0, #1
    4f72:	d07d      	beq.n	5070 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    4f74:	2802      	cmp	r0, #2
    4f76:	d051      	beq.n	501c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    4f78:	2803      	cmp	r0, #3
    4f7a:	d07a      	beq.n	5072 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    4f7c:	f240 518e 	movw	r1, #1422	; 0x58e
    4f80:	e18a      	b.n	5298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4f82:	2101      	movs	r1, #1
    4f84:	2000      	movs	r0, #0
    4f86:	f009 f80f 	bl	dfa8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4f8a:	4606      	mov	r6, r0
    4f8c:	6a20      	ldr	r0, [r4, #32]
    4f8e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f92:	4430      	add	r0, r6
    4f94:	f007 fad2 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f98:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4f9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4fa0:	6920      	ldr	r0, [r4, #16]
    4fa2:	f007 facb 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4fa6:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4faa:	a907      	add	r1, sp, #28
    4fac:	a806      	add	r0, sp, #24
    4fae:	f003 f89f 	bl	80f0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4fb2:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4fba:	f006 fa0b 	bl	b3d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4fbe:	4682      	mov	sl, r0
    4fc0:	4620      	mov	r0, r4
    4fc2:	f00a f9a7 	bl	f314 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4fc6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4fca:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4fce:	f003 fa23 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fd2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fd6:	4401      	add	r1, r0
    4fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fdc:	fbb1 f0f0 	udiv	r0, r1, r0
    4fe0:	6a21      	ldr	r1, [r4, #32]
    4fe2:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4fe6:	4431      	add	r1, r6
    4fe8:	1a08      	subs	r0, r1, r0
    4fea:	1a81      	subs	r1, r0, r2
    4fec:	4441      	add	r1, r8
    4fee:	3920      	subs	r1, #32
    4ff0:	eba1 060a 	sub.w	r6, r1, sl
    4ff4:	0050      	lsls	r0, r2, #1
    4ff6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4ff8:	3060      	adds	r0, #96	; 0x60
    4ffa:	4401      	add	r1, r0
    4ffc:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5000:	f00a f9f6 	bl	f3f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    5004:	3022      	adds	r0, #34	; 0x22
    5006:	f8cb 000c 	str.w	r0, [fp, #12]
    500a:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    500e:	1a30      	subs	r0, r6, r0
    5010:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    5014:	d258      	bcs.n	50c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    5016:	f240 5127 	movw	r1, #1319	; 0x527
    501a:	e13d      	b.n	5298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    501c:	6a21      	ldr	r1, [r4, #32]
    501e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5022:	4408      	add	r0, r1
    5024:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5028:	f007 fa88 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    502c:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    5030:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5034:	6920      	ldr	r0, [r4, #16]
    5036:	f007 fa81 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    503a:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    503e:	4620      	mov	r0, r4
    5040:	f00a f968 	bl	f314 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    5044:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5048:	bb10      	cbnz	r0, 5090 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    504a:	f1b9 0f00 	cmp.w	r9, #0
    504e:	d01f      	beq.n	5090 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    5050:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    5054:	4640      	mov	r0, r8
    5056:	f003 f9df 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    505a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    505e:	4401      	add	r1, r0
    5060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5064:	fbb1 f0f0 	udiv	r0, r1, r0
    5068:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    506c:	4408      	add	r0, r1
    506e:	e001      	b.n	5074 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    5070:	e02b      	b.n	50ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    5072:	e047      	b.n	5104 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    5074:	6a22      	ldr	r2, [r4, #32]
    5076:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    507a:	4411      	add	r1, r2
    507c:	1a0e      	subs	r6, r1, r0
    507e:	4640      	mov	r0, r8
    5080:	f003 f99e 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5084:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    5088:	1a08      	subs	r0, r1, r0
    508a:	4406      	add	r6, r0
    508c:	3e20      	subs	r6, #32
    508e:	e006      	b.n	509e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    5090:	6a21      	ldr	r1, [r4, #32]
    5092:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5096:	4408      	add	r0, r1
    5098:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    509c:	1a46      	subs	r6, r0, r1
    509e:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    50a2:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    50a6:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    50aa:	fb01 0002 	mla	r0, r1, r2, r0
    50ae:	0040      	lsls	r0, r0, #1
    50b0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    50b2:	3060      	adds	r0, #96	; 0x60
    50b4:	4401      	add	r1, r0
    50b6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50ba:	f00a f999 	bl	f3f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    50be:	f8cb 000c 	str.w	r0, [fp, #12]
    50c2:	2001      	movs	r0, #1
    50c4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    50c8:	e061      	b.n	518e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    50ca:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    50ce:	6920      	ldr	r0, [r4, #16]
    50d0:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    50d4:	1a86      	subs	r6, r0, r2
    50d6:	eb01 000a 	add.w	r0, r1, sl
    50da:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    50de:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    50e2:	1a40      	subs	r0, r0, r1
    50e4:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    50e8:	1e40      	subs	r0, r0, #1
    50ea:	fb0c 3101 	mla	r1, ip, r1, r3
    50ee:	fb00 1002 	mla	r0, r0, r2, r1
    50f2:	0040      	lsls	r0, r0, #1
    50f4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    50f6:	3060      	adds	r0, #96	; 0x60
    50f8:	4401      	add	r1, r0
    50fa:	fb06 f608 	mul.w	r6, r6, r8
    50fe:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5102:	e040      	b.n	5186 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    5104:	6920      	ldr	r0, [r4, #16]
    5106:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    510a:	fb00 f008 	mul.w	r0, r0, r8
    510e:	fb08 0611 	mls	r6, r8, r1, r0
    5112:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    5116:	2825      	cmp	r0, #37	; 0x25
    5118:	d003      	beq.n	5122 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    511a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    511e:	2825      	cmp	r0, #37	; 0x25
    5120:	d109      	bne.n	5136 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5122:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    5126:	1a38      	subs	r0, r7, r0
    5128:	b200      	sxth	r0, r0
    512a:	2800      	cmp	r0, #0
    512c:	db03      	blt.n	5136 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    512e:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    5132:	b100      	cbz	r0, 5136 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5134:	9005      	str	r0, [sp, #20]
    5136:	9807      	ldr	r0, [sp, #28]
    5138:	b1d8      	cbz	r0, 5172 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    513a:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    513e:	b9c0      	cbnz	r0, 5172 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    5140:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    5144:	2800      	cmp	r0, #0
    5146:	d07d      	beq.n	5244 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    5148:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    514c:	f003 f964 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5150:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5154:	4401      	add	r1, r0
    5156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    515a:	fbb1 f0f0 	udiv	r0, r1, r0
    515e:	1a36      	subs	r6, r6, r0
    5160:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5164:	f003 f92c 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5168:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    516c:	1a08      	subs	r0, r1, r0
    516e:	4406      	add	r6, r0
    5170:	3e20      	subs	r6, #32
    5172:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5176:	eb01 000a 	add.w	r0, r1, sl
    517a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    517e:	4348      	muls	r0, r1
    5180:	0041      	lsls	r1, r0, #1
    5182:	3160      	adds	r1, #96	; 0x60
    5184:	9805      	ldr	r0, [sp, #20]
    5186:	f00a f933 	bl	f3f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    518a:	f8cb 000c 	str.w	r0, [fp, #12]
    518e:	9804      	ldr	r0, [sp, #16]
    5190:	f8db 200c 	ldr.w	r2, [fp, #12]
    5194:	1a31      	subs	r1, r6, r0
    5196:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    519a:	6920      	ldr	r0, [r4, #16]
    519c:	1b80      	subs	r0, r0, r6
    519e:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    51a2:	f8cb 0010 	str.w	r0, [fp, #16]
    51a6:	4282      	cmp	r2, r0
    51a8:	d800      	bhi.n	51ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    51aa:	4610      	mov	r0, r2
    51ac:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    51b0:	2600      	movs	r6, #0
    51b2:	702e      	strb	r6, [r5, #0]
    51b4:	2069      	movs	r0, #105	; 0x69
    51b6:	8128      	strh	r0, [r5, #8]
    51b8:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    51bc:	1851      	adds	r1, r2, r1
    51be:	4170      	adcs	r0, r6
    51c0:	e9c5 1004 	strd	r1, r0, [r5, #16]
    51c4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    51c8:	f009 fa75 	bl	e6b6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    51cc:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    51d0:	4408      	add	r0, r1
    51d2:	6068      	str	r0, [r5, #4]
    51d4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    51d8:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    51dc:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    51e0:	72ae      	strb	r6, [r5, #10]
    51e2:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    51e6:	1bc0      	subs	r0, r0, r7
    51e8:	b200      	sxth	r0, r0
    51ea:	2800      	cmp	r0, #0
    51ec:	dd01      	ble.n	51f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    51ee:	2002      	movs	r0, #2
    51f0:	72a8      	strb	r0, [r5, #10]
    51f2:	9808      	ldr	r0, [sp, #32]
    51f4:	b338      	cbz	r0, 5246 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    51f6:	f1b9 0f00 	cmp.w	r9, #0
    51fa:	d01c      	beq.n	5236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    51fc:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    5200:	b3f1      	cbz	r1, 5280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    5202:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5206:	bf00      	nop
    5208:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    520c:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    5210:	1c40      	adds	r0, r0, #1
    5212:	4342      	muls	r2, r0
    5214:	428a      	cmp	r2, r1
    5216:	d20e      	bcs.n	5236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5218:	7aa8      	ldrb	r0, [r5, #10]
    521a:	b160      	cbz	r0, 5236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    521c:	72ae      	strb	r6, [r5, #10]
    521e:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5222:	1c40      	adds	r0, r0, #1
    5224:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5228:	f7fe f980 	bl	352c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    522c:	f000 0007 	and.w	r0, r0, #7
    5230:	1c40      	adds	r0, r0, #1
    5232:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    5236:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    523a:	4629      	mov	r1, r5
    523c:	f00a f8ea 	bl	f414 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    5240:	b340      	cbz	r0, 5294 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    5242:	e001      	b.n	5248 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    5244:	e009      	b.n	525a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    5246:	e00b      	b.n	5260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    5248:	980d      	ldr	r0, [sp, #52]	; 0x34
    524a:	f080 0001 	eor.w	r0, r0, #1
    524e:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    5252:	2000      	movs	r0, #0
    5254:	b00f      	add	sp, #60	; 0x3c
    5256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    525a:	f240 5179 	movw	r1, #1401	; 0x579
    525e:	e01b      	b.n	5298 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    5260:	f1b9 0f00 	cmp.w	r9, #0
    5264:	d1ca      	bne.n	51fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    5266:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    526a:	2800      	cmp	r0, #0
    526c:	d0e3      	beq.n	5236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    526e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5272:	6920      	ldr	r0, [r4, #16]
    5274:	1a41      	subs	r1, r0, r1
    5276:	4628      	mov	r0, r5
    5278:	f008 feac 	bl	dfd4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    527c:	0400      	lsls	r0, r0, #16
    527e:	e000      	b.n	5282 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    5280:	e006      	b.n	5290 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    5282:	0c00      	lsrs	r0, r0, #16
    5284:	d0d7      	beq.n	5236 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5286:	9918      	ldr	r1, [sp, #96]	; 0x60
    5288:	b101      	cbz	r1, 528c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    528a:	8008      	strh	r0, [r1, #0]
    528c:	2001      	movs	r0, #1
    528e:	e7e1      	b.n	5254 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    5290:	2000      	movs	r0, #0
    5292:	e7b9      	b.n	5208 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    5294:	f240 51d7 	movw	r1, #1495	; 0x5d7
    5298:	2030      	movs	r0, #48	; 0x30
    529a:	f7fb ff53 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    529e:	0000      	.short	0x0000
    52a0:	20000100 	.word	0x20000100
    52a4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    52a6:	4604      	mov	r4, r0
    52a8:	f00b fb67 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    52ac:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    52b0:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    52b4:	1ac0      	subs	r0, r0, r3
    52b6:	eb61 0102 	sbc.w	r1, r1, r2
    52ba:	2200      	movs	r2, #0
    52bc:	4613      	mov	r3, r2
    52be:	1a12      	subs	r2, r2, r0
    52c0:	418b      	sbcs	r3, r1
    52c2:	db02      	blt.n	52ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    52c4:	f240 6154 	movw	r1, #1620	; 0x654
    52c8:	e04d      	b.n	5366 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    52ca:	1c42      	adds	r2, r0, #1
    52cc:	f171 0100 	sbcs.w	r1, r1, #0
    52d0:	db02      	blt.n	52d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    52d2:	f240 6155 	movw	r1, #1621	; 0x655
    52d6:	e046      	b.n	5366 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    52d8:	6922      	ldr	r2, [r4, #16]
    52da:	2100      	movs	r1, #0
    52dc:	b10a      	cbz	r2, 52e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    52de:	fbb0 f1f2 	udiv	r1, r0, r2
    52e2:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    52e6:	280d      	cmp	r0, #13
    52e8:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    52ec:	d01b      	beq.n	5326 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    52ee:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    52f2:	1853      	adds	r3, r2, r1
    52f4:	1ac3      	subs	r3, r0, r3
    52f6:	b21b      	sxth	r3, r3
    52f8:	2b00      	cmp	r3, #0
    52fa:	db01      	blt.n	5300 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    52fc:	1c40      	adds	r0, r0, #1
    52fe:	e001      	b.n	5304 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5300:	1c49      	adds	r1, r1, #1
    5302:	1850      	adds	r0, r2, r1
    5304:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5308:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    530c:	f88d 0000 	strb.w	r0, [sp]
    5310:	9800      	ldr	r0, [sp, #0]
    5312:	9000      	str	r0, [sp, #0]
    5314:	f89d 0000 	ldrb.w	r0, [sp]
    5318:	b940      	cbnz	r0, 532c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    531a:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    531e:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    5322:	4288      	cmp	r0, r1
    5324:	d102      	bne.n	532c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    5326:	1c40      	adds	r0, r0, #1
    5328:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    532c:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    5330:	1c40      	adds	r0, r0, #1
    5332:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    5336:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    533a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    533e:	1a40      	subs	r0, r0, r1
    5340:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    5344:	1e40      	subs	r0, r0, #1
    5346:	4408      	add	r0, r1
    5348:	b285      	uxth	r5, r0
    534a:	e026      	b.n	539a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    534c:	a801      	add	r0, sp, #4
    534e:	2300      	movs	r3, #0
    5350:	9000      	str	r0, [sp, #0]
    5352:	461a      	mov	r2, r3
    5354:	4620      	mov	r0, r4
    5356:	f7ff fd9b 	bl	4e90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    535a:	2800      	cmp	r0, #0
    535c:	d03a      	beq.n	53d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    535e:	2801      	cmp	r0, #1
    5360:	d004      	beq.n	536c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    5362:	f240 6194 	movw	r1, #1684	; 0x694
    5366:	2030      	movs	r0, #48	; 0x30
    5368:	f7fb feec 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    536c:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5370:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    5374:	1a42      	subs	r2, r0, r1
    5376:	b212      	sxth	r2, r2
    5378:	2a00      	cmp	r2, #0
    537a:	da09      	bge.n	5390 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    537c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5380:	4402      	add	r2, r0
    5382:	1aaa      	subs	r2, r5, r2
    5384:	b212      	sxth	r2, r2
    5386:	2a00      	cmp	r2, #0
    5388:	da02      	bge.n	5390 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    538a:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    538e:	e004      	b.n	539a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    5390:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5394:	4408      	add	r0, r1
    5396:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    539a:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    539e:	1a68      	subs	r0, r5, r1
    53a0:	b200      	sxth	r0, r0
    53a2:	2800      	cmp	r0, #0
    53a4:	dad2      	bge.n	534c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    53a6:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    53aa:	b188      	cbz	r0, 53d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    53ac:	f05f 0008 	movs.w	r0, #8
    53b0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    53b4:	2202      	movs	r2, #2
    53b6:	4908      	ldr	r1, [pc, #32]	; (53d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    53b8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    53bc:	f009 f8e4 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    53c0:	4620      	mov	r0, r4
    53c2:	f00a f9b8 	bl	f736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    53c6:	4620      	mov	r0, r4
    53c8:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    53cc:	f00a b887 	b.w	f4de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    53d0:	203e      	movs	r0, #62	; 0x3e
    53d2:	e7ed      	b.n	53b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    53d4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    53d6:	0000      	.short	0x0000
    53d8:	0000e845 	.word	0x0000e845
    53dc:	00000000 	.word	0x00000000
    53e0:	00010000 	.word	0x00010000
    53e4:	00000000 	.word	0x00000000
    53e8:	00010000 	.word	0x00010000
    53ec:	00000000 	.word	0x00000000
    53f0:	00001e14 	.word	0x00001e14
    53f4:	00001130 	.word	0x00001130
    53f8:	00fa01f4 	.word	0x00fa01f4
    53fc:	00640096 	.word	0x00640096
    5400:	0032004b 	.word	0x0032004b
    5404:	0014001e 	.word	0x0014001e
    5408:	0005000a 	.word	0x0005000a
    540c:	00010002 	.word	0x00010002

00005410 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    5410:	b510      	push	{r4, lr}
    5412:	4604      	mov	r4, r0
    5414:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    5418:	6921      	ldr	r1, [r4, #16]
    541a:	4288      	cmp	r0, r1
    541c:	d109      	bne.n	5432 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    541e:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    5422:	8b22      	ldrh	r2, [r4, #24]
    5424:	4291      	cmp	r1, r2
    5426:	d104      	bne.n	5432 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5428:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    542c:	8b62      	ldrh	r2, [r4, #26]
    542e:	4291      	cmp	r1, r2
    5430:	d014      	beq.n	545c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    5432:	8821      	ldrh	r1, [r4, #0]
    5434:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    5438:	f008 fcf8 	bl	de2c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    543c:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5440:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    5444:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    5448:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    544c:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5450:	2202      	movs	r2, #2
    5452:	4907      	ldr	r1, [pc, #28]	; (5470 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    5454:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    5458:	f009 f8aa 	bl	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    545c:	2102      	movs	r1, #2
    545e:	4620      	mov	r0, r4
    5460:	f7fd fc0e 	bl	2c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5464:	2000      	movs	r0, #0
    5466:	f804 0f9e 	strb.w	r0, [r4, #158]!
    546a:	2003      	movs	r0, #3
    546c:	70e0      	strb	r0, [r4, #3]
    546e:	bd10      	pop	{r4, pc}
    5470:	0000e8d3 	.word	0x0000e8d3

00005474 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    5474:	4806      	ldr	r0, [pc, #24]	; (5490 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    5476:	4905      	ldr	r1, [pc, #20]	; (548c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    5478:	6501      	str	r1, [r0, #80]	; 0x50
    547a:	4906      	ldr	r1, [pc, #24]	; (5494 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    547c:	6541      	str	r1, [r0, #84]	; 0x54
    547e:	4807      	ldr	r0, [pc, #28]	; (549c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    5480:	4905      	ldr	r1, [pc, #20]	; (5498 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    5482:	6501      	str	r1, [r0, #80]	; 0x50
    5484:	4906      	ldr	r1, [pc, #24]	; (54a0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    5486:	6541      	str	r1, [r0, #84]	; 0x54
    5488:	4770      	bx	lr
    548a:	0000      	.short	0x0000
    548c:	0000676d 	.word	0x0000676d
    5490:	2000012c 	.word	0x2000012c
    5494:	00006855 	.word	0x00006855
    5498:	0000e8f5 	.word	0x0000e8f5
    549c:	200001d8 	.word	0x200001d8
    54a0:	00006ca5 	.word	0x00006ca5

000054a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    54a4:	481e      	ldr	r0, [pc, #120]	; (5520 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    54a6:	491d      	ldr	r1, [pc, #116]	; (551c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    54a8:	6081      	str	r1, [r0, #8]
    54aa:	491e      	ldr	r1, [pc, #120]	; (5524 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    54ac:	6041      	str	r1, [r0, #4]
    54ae:	491e      	ldr	r1, [pc, #120]	; (5528 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    54b0:	6001      	str	r1, [r0, #0]
    54b2:	491e      	ldr	r1, [pc, #120]	; (552c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    54b4:	6281      	str	r1, [r0, #40]	; 0x28
    54b6:	491e      	ldr	r1, [pc, #120]	; (5530 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    54b8:	62c1      	str	r1, [r0, #44]	; 0x2c
    54ba:	491e      	ldr	r1, [pc, #120]	; (5534 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    54bc:	60c1      	str	r1, [r0, #12]
    54be:	491e      	ldr	r1, [pc, #120]	; (5538 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    54c0:	6181      	str	r1, [r0, #24]
    54c2:	491e      	ldr	r1, [pc, #120]	; (553c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    54c4:	6301      	str	r1, [r0, #48]	; 0x30
    54c6:	491e      	ldr	r1, [pc, #120]	; (5540 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    54c8:	6201      	str	r1, [r0, #32]
    54ca:	491e      	ldr	r1, [pc, #120]	; (5544 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    54cc:	64c1      	str	r1, [r0, #76]	; 0x4c
    54ce:	491e      	ldr	r1, [pc, #120]	; (5548 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    54d0:	6481      	str	r1, [r0, #72]	; 0x48
    54d2:	491e      	ldr	r1, [pc, #120]	; (554c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    54d4:	6441      	str	r1, [r0, #68]	; 0x44
    54d6:	491e      	ldr	r1, [pc, #120]	; (5550 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    54d8:	6341      	str	r1, [r0, #52]	; 0x34
    54da:	491e      	ldr	r1, [pc, #120]	; (5554 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    54dc:	61c1      	str	r1, [r0, #28]
    54de:	491e      	ldr	r1, [pc, #120]	; (5558 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    54e0:	6241      	str	r1, [r0, #36]	; 0x24
    54e2:	481f      	ldr	r0, [pc, #124]	; (5560 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    54e4:	491d      	ldr	r1, [pc, #116]	; (555c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    54e6:	6081      	str	r1, [r0, #8]
    54e8:	491e      	ldr	r1, [pc, #120]	; (5564 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    54ea:	61c1      	str	r1, [r0, #28]
    54ec:	491e      	ldr	r1, [pc, #120]	; (5568 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    54ee:	6241      	str	r1, [r0, #36]	; 0x24
    54f0:	491e      	ldr	r1, [pc, #120]	; (556c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    54f2:	62c1      	str	r1, [r0, #44]	; 0x2c
    54f4:	491e      	ldr	r1, [pc, #120]	; (5570 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    54f6:	6101      	str	r1, [r0, #16]
    54f8:	491e      	ldr	r1, [pc, #120]	; (5574 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    54fa:	6141      	str	r1, [r0, #20]
    54fc:	491e      	ldr	r1, [pc, #120]	; (5578 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    54fe:	6441      	str	r1, [r0, #68]	; 0x44
    5500:	491e      	ldr	r1, [pc, #120]	; (557c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    5502:	6341      	str	r1, [r0, #52]	; 0x34
    5504:	491e      	ldr	r1, [pc, #120]	; (5580 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    5506:	6181      	str	r1, [r0, #24]
    5508:	491e      	ldr	r1, [pc, #120]	; (5584 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    550a:	6301      	str	r1, [r0, #48]	; 0x30
    550c:	491e      	ldr	r1, [pc, #120]	; (5588 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    550e:	6481      	str	r1, [r0, #72]	; 0x48
    5510:	491e      	ldr	r1, [pc, #120]	; (558c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    5512:	64c1      	str	r1, [r0, #76]	; 0x4c
    5514:	491e      	ldr	r1, [pc, #120]	; (5590 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    5516:	6381      	str	r1, [r0, #56]	; 0x38
    5518:	4770      	bx	lr
    551a:	0000      	.short	0x0000
    551c:	00006bb9 	.word	0x00006bb9
    5520:	2000012c 	.word	0x2000012c
    5524:	00006555 	.word	0x00006555
    5528:	000065c1 	.word	0x000065c1
    552c:	00006861 	.word	0x00006861
    5530:	0000f7af 	.word	0x0000f7af
    5534:	00006681 	.word	0x00006681
    5538:	00006b91 	.word	0x00006b91
    553c:	00006c51 	.word	0x00006c51
    5540:	00006721 	.word	0x00006721
    5544:	0000eaed 	.word	0x0000eaed
    5548:	0000eaa5 	.word	0x0000eaa5
    554c:	00006b09 	.word	0x00006b09
    5550:	00006b3d 	.word	0x00006b3d
    5554:	00006bc5 	.word	0x00006bc5
    5558:	0000672d 	.word	0x0000672d
    555c:	0000e8b5 	.word	0x0000e8b5
    5560:	200001d8 	.word	0x200001d8
    5564:	00006d91 	.word	0x00006d91
    5568:	0000f87d 	.word	0x0000f87d
    556c:	0000f881 	.word	0x0000f881
    5570:	0000f857 	.word	0x0000f857
    5574:	0000f8e9 	.word	0x0000f8e9
    5578:	00006ce5 	.word	0x00006ce5
    557c:	0000f8c7 	.word	0x0000f8c7
    5580:	00006d1d 	.word	0x00006d1d
    5584:	0000f907 	.word	0x0000f907
    5588:	0000eac9 	.word	0x0000eac9
    558c:	0000eb13 	.word	0x0000eb13
    5590:	0000f8e5 	.word	0x0000f8e5

00005594 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    5594:	4806      	ldr	r0, [pc, #24]	; (55b0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    5596:	4905      	ldr	r1, [pc, #20]	; (55ac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5598:	6581      	str	r1, [r0, #88]	; 0x58
    559a:	4906      	ldr	r1, [pc, #24]	; (55b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    559c:	6601      	str	r1, [r0, #96]	; 0x60
    559e:	4807      	ldr	r0, [pc, #28]	; (55bc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    55a0:	4905      	ldr	r1, [pc, #20]	; (55b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    55a2:	6581      	str	r1, [r0, #88]	; 0x58
    55a4:	4906      	ldr	r1, [pc, #24]	; (55c0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    55a6:	65c1      	str	r1, [r0, #92]	; 0x5c
    55a8:	4770      	bx	lr
    55aa:	0000      	.short	0x0000
    55ac:	000068b1 	.word	0x000068b1
    55b0:	2000012c 	.word	0x2000012c
    55b4:	00006995 	.word	0x00006995
    55b8:	000107e1 	.word	0x000107e1
    55bc:	200001d8 	.word	0x200001d8
    55c0:	0000f8a7 	.word	0x0000f8a7

000055c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    55c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55c6:	4c7c      	ldr	r4, [pc, #496]	; (57b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    55c8:	2101      	movs	r1, #1
    55ca:	f1a4 0610 	sub.w	r6, r4, #16
    55ce:	7021      	strb	r1, [r4, #0]
    55d0:	2500      	movs	r5, #0
    55d2:	6060      	str	r0, [r4, #4]
    55d4:	8075      	strh	r5, [r6, #2]
    55d6:	7075      	strb	r5, [r6, #1]
    55d8:	7035      	strb	r5, [r6, #0]
    55da:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    55de:	8800      	ldrh	r0, [r0, #0]
    55e0:	f7fc fa88 	bl	1af4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    55e4:	b180      	cbz	r0, 5608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    55e6:	6860      	ldr	r0, [r4, #4]
    55e8:	8800      	ldrh	r0, [r0, #0]
    55ea:	f7fc fceb 	bl	1fc4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55ee:	6860      	ldr	r0, [r4, #4]
    55f0:	8800      	ldrh	r0, [r0, #0]
    55f2:	f7fc fc8f 	bl	1f14 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55f6:	6860      	ldr	r0, [r4, #4]
    55f8:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    55fc:	b1c9      	cbz	r1, 5632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    55fe:	3080      	adds	r0, #128	; 0x80
    5600:	f00a f8a8 	bl	f754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5604:	b118      	cbz	r0, 560e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    5606:	e014      	b.n	5632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5608:	f640 419f 	movw	r1, #3231	; 0xc9f
    560c:	e06c      	b.n	56e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    560e:	6860      	ldr	r0, [r4, #4]
    5610:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5614:	f88d 1000 	strb.w	r1, [sp]
    5618:	9900      	ldr	r1, [sp, #0]
    561a:	9100      	str	r1, [sp, #0]
    561c:	f89d 1000 	ldrb.w	r1, [sp]
    5620:	b139      	cbz	r1, 5632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5622:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5626:	2301      	movs	r3, #1
    5628:	4619      	mov	r1, r3
    562a:	3080      	adds	r0, #128	; 0x80
    562c:	f008 fc04 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5630:	b180      	cbz	r0, 5654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    5632:	6860      	ldr	r0, [r4, #4]
    5634:	3080      	adds	r0, #128	; 0x80
    5636:	f00a f88d 	bl	f754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    563a:	b128      	cbz	r0, 5648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    563c:	6860      	ldr	r0, [r4, #4]
    563e:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5642:	bf00      	nop
    5644:	f000 fb84 	bl	5d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    5648:	6860      	ldr	r0, [r4, #4]
    564a:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    564e:	b189      	cbz	r1, 5674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    5650:	80b5      	strh	r5, [r6, #4]
    5652:	e01e      	b.n	5692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    5654:	6860      	ldr	r0, [r4, #4]
    5656:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    565a:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    565e:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5662:	2100      	movs	r1, #0
    5664:	2002      	movs	r0, #2
    5666:	f000 fe39 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    566a:	6860      	ldr	r0, [r4, #4]
    566c:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    5670:	2002      	movs	r0, #2
    5672:	e7e7      	b.n	5644 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    5674:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5678:	f88d 1000 	strb.w	r1, [sp]
    567c:	9900      	ldr	r1, [sp, #0]
    567e:	9100      	str	r1, [sp, #0]
    5680:	f89d 1000 	ldrb.w	r1, [sp]
    5684:	b919      	cbnz	r1, 568e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    5686:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    5688:	8b02      	ldrh	r2, [r0, #24]
    568a:	4291      	cmp	r1, r2
    568c:	d800      	bhi.n	5690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    568e:	8b01      	ldrh	r1, [r0, #24]
    5690:	80b1      	strh	r1, [r6, #4]
    5692:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    5696:	1e49      	subs	r1, r1, #1
    5698:	b28f      	uxth	r7, r1
    569a:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    569e:	4439      	add	r1, r7
    56a0:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    56a4:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    56a8:	4439      	add	r1, r7
    56aa:	8001      	strh	r1, [r0, #0]
    56ac:	f001 fba0 	bl	6df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    56b0:	b120      	cbz	r0, 56bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    56b2:	6860      	ldr	r0, [r4, #4]
    56b4:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    56b8:	4439      	add	r1, r7
    56ba:	6001      	str	r1, [r0, #0]
    56bc:	6861      	ldr	r1, [r4, #4]
    56be:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    56c2:	2801      	cmp	r0, #1
    56c4:	d802      	bhi.n	56cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    56c6:	1c40      	adds	r0, r0, #1
    56c8:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    56cc:	b10f      	cbz	r7, 56d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    56ce:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    56d2:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    56d6:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    56da:	f101 0080 	add.w	r0, r1, #128	; 0x80
    56de:	f008 fd57 	bl	e190 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    56e2:	b120      	cbz	r0, 56ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    56e4:	f640 41e6 	movw	r1, #3302	; 0xce6
    56e8:	2031      	movs	r0, #49	; 0x31
    56ea:	f7fb fd2b 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56ee:	6860      	ldr	r0, [r4, #4]
    56f0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    56f4:	290a      	cmp	r1, #10
    56f6:	d001      	beq.n	56fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    56f8:	290b      	cmp	r1, #11
    56fa:	d119      	bne.n	5730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    56fc:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5700:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    5704:	1ad2      	subs	r2, r2, r3
    5706:	b212      	sxth	r2, r2
    5708:	2a00      	cmp	r2, #0
    570a:	db11      	blt.n	5730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    570c:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5710:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    5714:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    5718:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    571c:	2103      	movs	r1, #3
    571e:	f7fd faaf 	bl	2c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5722:	6860      	ldr	r0, [r4, #4]
    5724:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5728:	21ff      	movs	r1, #255	; 0xff
    572a:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    572e:	e026      	b.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5730:	2925      	cmp	r1, #37	; 0x25
    5732:	d111      	bne.n	5758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5734:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5738:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    573c:	1a89      	subs	r1, r1, r2
    573e:	b209      	sxth	r1, r1
    5740:	2900      	cmp	r1, #0
    5742:	db09      	blt.n	5758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5744:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5748:	f000 fe82 	bl	6450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    574c:	2800      	cmp	r0, #0
    574e:	6860      	ldr	r0, [r4, #4]
    5750:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    5754:	d029      	beq.n	57aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5756:	e012      	b.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5758:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    575c:	2925      	cmp	r1, #37	; 0x25
    575e:	d001      	beq.n	5764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    5760:	2927      	cmp	r1, #39	; 0x27
    5762:	d10c      	bne.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5764:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5768:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    576c:	1a89      	subs	r1, r1, r2
    576e:	b209      	sxth	r1, r1
    5770:	2900      	cmp	r1, #0
    5772:	db04      	blt.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5774:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5778:	f000 fe6a 	bl	6450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    577c:	b1a8      	cbz	r0, 57aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    577e:	480f      	ldr	r0, [pc, #60]	; (57bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    5780:	9000      	str	r0, [sp, #0]
    5782:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    5786:	4b0e      	ldr	r3, [pc, #56]	; (57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    5788:	4a0e      	ldr	r2, [pc, #56]	; (57c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    578a:	f7fc fca9 	bl	20e0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    578e:	6860      	ldr	r0, [r4, #4]
    5790:	2301      	movs	r3, #1
    5792:	2105      	movs	r1, #5
    5794:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5798:	3080      	adds	r0, #128	; 0x80
    579a:	f008 fb4d 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    579e:	2800      	cmp	r0, #0
    57a0:	d009      	beq.n	57b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    57a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57a6:	f7fc bc95 	b.w	20d4 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    57aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57ae:	2100      	movs	r1, #0
    57b0:	4608      	mov	r0, r1
    57b2:	f000 bb9f 	b.w	5ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    57b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57b8:	20000124 	.word	0x20000124
    57bc:	00005ef5 	.word	0x00005ef5
    57c0:	00005a45 	.word	0x00005a45
    57c4:	0000639d 	.word	0x0000639d
    57c8:	491d      	ldr	r1, [pc, #116]	; (5840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    57ca:	b508      	push	{r3, lr}
    57cc:	6849      	ldr	r1, [r1, #4]
    57ce:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    57d2:	b1c0      	cbz	r0, 5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    57d4:	2a11      	cmp	r2, #17
    57d6:	d006      	beq.n	57e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    57d8:	2a15      	cmp	r2, #21
    57da:	d007      	beq.n	57ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    57dc:	2a16      	cmp	r2, #22
    57de:	d009      	beq.n	57f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    57e0:	2a1c      	cmp	r2, #28
    57e2:	d128      	bne.n	5836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    57e4:	e009      	b.n	57fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    57e6:	2101      	movs	r1, #1
    57e8:	200b      	movs	r0, #11
    57ea:	e008      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    57ec:	4814      	ldr	r0, [pc, #80]	; (5840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    57ee:	f009 ffea 	bl	f7c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    57f2:	e006      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    57f4:	f000 fd90 	bl	6318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    57f8:	e003      	b.n	5802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    57fa:	2101      	movs	r1, #1
    57fc:	2006      	movs	r0, #6
    57fe:	f000 fd6d 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5802:	2001      	movs	r0, #1
    5804:	bd08      	pop	{r3, pc}
    5806:	2a22      	cmp	r2, #34	; 0x22
    5808:	d004      	beq.n	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    580a:	2a2f      	cmp	r2, #47	; 0x2f
    580c:	d113      	bne.n	5836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    580e:	2101      	movs	r1, #1
    5810:	2011      	movs	r0, #17
    5812:	e7f4      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5814:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5818:	2802      	cmp	r0, #2
    581a:	d00e      	beq.n	583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    581c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5820:	2801      	cmp	r0, #1
    5822:	d108      	bne.n	5836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5824:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5828:	f88d 0000 	strb.w	r0, [sp]
    582c:	9800      	ldr	r0, [sp, #0]
    582e:	9000      	str	r0, [sp, #0]
    5830:	f89d 0000 	ldrb.w	r0, [sp]
    5834:	b108      	cbz	r0, 583a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5836:	2000      	movs	r0, #0
    5838:	bd08      	pop	{r3, pc}
    583a:	2101      	movs	r1, #1
    583c:	2017      	movs	r0, #23
    583e:	e7de      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5840:	20000124 	.word	0x20000124
    5844:	b538      	push	{r3, r4, r5, lr}
    5846:	2800      	cmp	r0, #0
    5848:	d173      	bne.n	5932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    584a:	4c3b      	ldr	r4, [pc, #236]	; (5938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    584c:	6860      	ldr	r0, [r4, #4]
    584e:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    5852:	07ca      	lsls	r2, r1, #31
    5854:	d002      	beq.n	585c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    5856:	2101      	movs	r1, #1
    5858:	2009      	movs	r0, #9
    585a:	e066      	b.n	592a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    585c:	078a      	lsls	r2, r1, #30
    585e:	d50a      	bpl.n	5876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    5860:	2101      	movs	r1, #1
    5862:	200c      	movs	r0, #12
    5864:	f000 fd3a 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5868:	6860      	ldr	r0, [r4, #4]
    586a:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    586e:	f041 0101 	orr.w	r1, r1, #1
    5872:	7001      	strb	r1, [r0, #0]
    5874:	e05b      	b.n	592e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    5876:	074a      	lsls	r2, r1, #29
    5878:	d502      	bpl.n	5880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    587a:	2101      	movs	r1, #1
    587c:	2013      	movs	r0, #19
    587e:	e054      	b.n	592a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5880:	070a      	lsls	r2, r1, #28
    5882:	d506      	bpl.n	5892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    5884:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    5888:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    588c:	2101      	movs	r1, #1
    588e:	2007      	movs	r0, #7
    5890:	e04b      	b.n	592a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5892:	f011 0f30 	tst.w	r1, #48	; 0x30
    5896:	d044      	beq.n	5922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    5898:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    589c:	f88d 1000 	strb.w	r1, [sp]
    58a0:	9900      	ldr	r1, [sp, #0]
    58a2:	9100      	str	r1, [sp, #0]
    58a4:	f89d 1000 	ldrb.w	r1, [sp]
    58a8:	bbc1      	cbnz	r1, 591c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    58aa:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    58ae:	2500      	movs	r5, #0
    58b0:	f88d 1000 	strb.w	r1, [sp]
    58b4:	9900      	ldr	r1, [sp, #0]
    58b6:	9100      	str	r1, [sp, #0]
    58b8:	f89d 1000 	ldrb.w	r1, [sp]
    58bc:	b1c1      	cbz	r1, 58f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    58be:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    58c2:	2925      	cmp	r1, #37	; 0x25
    58c4:	d02b      	beq.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    58c6:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    58ca:	2925      	cmp	r1, #37	; 0x25
    58cc:	d027      	beq.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    58ce:	2300      	movs	r3, #0
    58d0:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    58d4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    58d8:	f008 fe80 	bl	e5dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    58dc:	6860      	ldr	r0, [r4, #4]
    58de:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    58e2:	f021 0120 	bic.w	r1, r1, #32
    58e6:	f041 0110 	orr.w	r1, r1, #16
    58ea:	6001      	str	r1, [r0, #0]
    58ec:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    58f0:	6860      	ldr	r0, [r4, #4]
    58f2:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    58f6:	06c9      	lsls	r1, r1, #27
    58f8:	d51b      	bpl.n	5932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    58fa:	f008 fe8a 	bl	e612 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    58fe:	480e      	ldr	r0, [pc, #56]	; (5938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5900:	f009 f848 	bl	e994 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    5904:	6861      	ldr	r1, [r4, #4]
    5906:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    590a:	8bc2      	ldrh	r2, [r0, #30]
    590c:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5910:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5912:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5916:	2101      	movs	r1, #1
    5918:	2015      	movs	r0, #21
    591a:	e006      	b.n	592a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    591c:	e009      	b.n	5932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    591e:	2301      	movs	r3, #1
    5920:	e7d6      	b.n	58d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    5922:	0648      	lsls	r0, r1, #25
    5924:	d505      	bpl.n	5932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5926:	2101      	movs	r1, #1
    5928:	2024      	movs	r0, #36	; 0x24
    592a:	f000 fcd7 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    592e:	2001      	movs	r0, #1
    5930:	bd38      	pop	{r3, r4, r5, pc}
    5932:	2000      	movs	r0, #0
    5934:	bd38      	pop	{r3, r4, r5, pc}
    5936:	0000      	.short	0x0000
    5938:	20000124 	.word	0x20000124
    593c:	b570      	push	{r4, r5, r6, lr}
    593e:	460d      	mov	r5, r1
    5940:	4606      	mov	r6, r0
    5942:	f008 fd80 	bl	e446 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    5946:	4604      	mov	r4, r0
    5948:	4630      	mov	r0, r6
    594a:	f008 fd7e 	bl	e44a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    594e:	4629      	mov	r1, r5
    5950:	f000 f81e 	bl	5990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    5954:	b1b8      	cbz	r0, 5986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    5956:	4620      	mov	r0, r4
    5958:	f008 fb18 	bl	df8c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    595c:	0001      	movs	r1, r0
    595e:	d00d      	beq.n	597c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    5960:	480a      	ldr	r0, [pc, #40]	; (598c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    5962:	6840      	ldr	r0, [r0, #4]
    5964:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5968:	428a      	cmp	r2, r1
    596a:	d007      	beq.n	597c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    596c:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5970:	2901      	cmp	r1, #1
    5972:	d005      	beq.n	5980 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    5974:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5978:	4220      	tst	r0, r4
    597a:	d004      	beq.n	5986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    597c:	2001      	movs	r0, #1
    597e:	bd70      	pop	{r4, r5, r6, pc}
    5980:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    5984:	e7f8      	b.n	5978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    5986:	2000      	movs	r0, #0
    5988:	bd70      	pop	{r4, r5, r6, pc}
    598a:	0000      	.short	0x0000
    598c:	20000124 	.word	0x20000124
    5990:	b570      	push	{r4, r5, r6, lr}
    5992:	460d      	mov	r5, r1
    5994:	4604      	mov	r4, r0
    5996:	f008 faf9 	bl	df8c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    599a:	b350      	cbz	r0, 59f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    599c:	4916      	ldr	r1, [pc, #88]	; (59f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    599e:	6849      	ldr	r1, [r1, #4]
    59a0:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    59a4:	4282      	cmp	r2, r0
    59a6:	d024      	beq.n	59f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59a8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    59ac:	2b01      	cmp	r3, #1
    59ae:	d005      	beq.n	59bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    59b0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    59b4:	4223      	tst	r3, r4
    59b6:	d013      	beq.n	59e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    59b8:	b11d      	cbz	r5, 59c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    59ba:	e01a      	b.n	59f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59bc:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    59c0:	e7f8      	b.n	59b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    59c2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    59c6:	4221      	tst	r1, r4
    59c8:	d113      	bne.n	59f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59ca:	b15a      	cbz	r2, 59e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    59cc:	2a04      	cmp	r2, #4
    59ce:	d00e      	beq.n	59ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59d0:	2804      	cmp	r0, #4
    59d2:	d00c      	beq.n	59ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59d4:	2a08      	cmp	r2, #8
    59d6:	d00a      	beq.n	59ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59d8:	2808      	cmp	r0, #8
    59da:	d008      	beq.n	59ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59dc:	4282      	cmp	r2, r0
    59de:	d908      	bls.n	59f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59e0:	2000      	movs	r0, #0
    59e2:	bd70      	pop	{r4, r5, r6, pc}
    59e4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    59e8:	2006      	movs	r0, #6
    59ea:	f7fb fbab 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59ee:	4282      	cmp	r2, r0
    59f0:	d3f6      	bcc.n	59e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    59f2:	2001      	movs	r0, #1
    59f4:	bd70      	pop	{r4, r5, r6, pc}
    59f6:	0000      	.short	0x0000
    59f8:	20000124 	.word	0x20000124
    59fc:	b510      	push	{r4, lr}
    59fe:	4c10      	ldr	r4, [pc, #64]	; (5a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5a00:	2301      	movs	r3, #1
    5a02:	2100      	movs	r1, #0
    5a04:	6860      	ldr	r0, [r4, #4]
    5a06:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5a0a:	3080      	adds	r0, #128	; 0x80
    5a0c:	f008 fa14 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a10:	b140      	cbz	r0, 5a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    5a12:	6860      	ldr	r0, [r4, #4]
    5a14:	2301      	movs	r3, #1
    5a16:	2104      	movs	r1, #4
    5a18:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a1c:	3080      	adds	r0, #128	; 0x80
    5a1e:	f008 fa0b 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a22:	b108      	cbz	r0, 5a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    5a24:	2000      	movs	r0, #0
    5a26:	bd10      	pop	{r4, pc}
    5a28:	6860      	ldr	r0, [r4, #4]
    5a2a:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5a2e:	2800      	cmp	r0, #0
    5a30:	d0f9      	beq.n	5a26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    5a32:	2100      	movs	r1, #0
    5a34:	2012      	movs	r0, #18
    5a36:	f000 fc51 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a3a:	2001      	movs	r0, #1
    5a3c:	bd10      	pop	{r4, pc}
    5a3e:	0000      	.short	0x0000
    5a40:	20000124 	.word	0x20000124
    5a44:	490d      	ldr	r1, [pc, #52]	; (5a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    5a46:	4602      	mov	r2, r0
    5a48:	7848      	ldrb	r0, [r1, #1]
    5a4a:	b9a0      	cbnz	r0, 5a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a4c:	f101 0010 	add.w	r0, r1, #16
    5a50:	6840      	ldr	r0, [r0, #4]
    5a52:	b142      	cbz	r2, 5a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5a54:	7889      	ldrb	r1, [r1, #2]
    5a56:	0709      	lsls	r1, r1, #28
    5a58:	d503      	bpl.n	5a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    5a5a:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5a5e:	2807      	cmp	r0, #7
    5a60:	d009      	beq.n	5a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a62:	2001      	movs	r0, #1
    5a64:	4770      	bx	lr
    5a66:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    5a6a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a6c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5a6e:	428a      	cmp	r2, r1
    5a70:	d801      	bhi.n	5a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a72:	f7ff b83f 	b.w	4af4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    5a76:	2000      	movs	r0, #0
    5a78:	4770      	bx	lr
    5a7a:	0000      	.short	0x0000
    5a7c:	20000114 	.word	0x20000114
    5a80:	b538      	push	{r3, r4, r5, lr}
    5a82:	4c32      	ldr	r4, [pc, #200]	; (5b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    5a84:	4605      	mov	r5, r0
    5a86:	6860      	ldr	r0, [r4, #4]
    5a88:	3080      	adds	r0, #128	; 0x80
    5a8a:	f009 fe63 	bl	f754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5a8e:	2800      	cmp	r0, #0
    5a90:	d15b      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5a92:	2d00      	cmp	r5, #0
    5a94:	d159      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5a96:	6860      	ldr	r0, [r4, #4]
    5a98:	2301      	movs	r3, #1
    5a9a:	4619      	mov	r1, r3
    5a9c:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5aa0:	3080      	adds	r0, #128	; 0x80
    5aa2:	f008 f9c9 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5aa6:	2800      	cmp	r0, #0
    5aa8:	d14f      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5aaa:	6860      	ldr	r0, [r4, #4]
    5aac:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ab0:	f88d 1000 	strb.w	r1, [sp]
    5ab4:	9900      	ldr	r1, [sp, #0]
    5ab6:	9100      	str	r1, [sp, #0]
    5ab8:	f89d 2000 	ldrb.w	r2, [sp]
    5abc:	2100      	movs	r1, #0
    5abe:	b142      	cbz	r2, 5ad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5ac0:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5ac4:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5ac8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5acc:	2100      	movs	r1, #0
    5ace:	2002      	movs	r0, #2
    5ad0:	e030      	b.n	5b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5ad2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ad6:	2301      	movs	r3, #1
    5ad8:	2104      	movs	r1, #4
    5ada:	3080      	adds	r0, #128	; 0x80
    5adc:	f008 f9ac 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae0:	4605      	mov	r5, r0
    5ae2:	f7ff feaf 	bl	5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    5ae6:	2800      	cmp	r0, #0
    5ae8:	d12f      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5aea:	4628      	mov	r0, r5
    5aec:	f7ff fe6c 	bl	57c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5af0:	2800      	cmp	r0, #0
    5af2:	d12a      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5af4:	f7ff ff82 	bl	59fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5af8:	2800      	cmp	r0, #0
    5afa:	d126      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5afc:	6860      	ldr	r0, [r4, #4]
    5afe:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b02:	2909      	cmp	r1, #9
    5b04:	d01a      	beq.n	5b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    5b06:	2d00      	cmp	r5, #0
    5b08:	d11f      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b0a:	f000 fb13 	bl	6134 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5b0e:	2800      	cmp	r0, #0
    5b10:	d11b      	bne.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b12:	6860      	ldr	r0, [r4, #4]
    5b14:	2301      	movs	r3, #1
    5b16:	2100      	movs	r1, #0
    5b18:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5b1c:	3080      	adds	r0, #128	; 0x80
    5b1e:	f008 f98b 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b22:	2800      	cmp	r0, #0
    5b24:	d011      	beq.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b26:	6860      	ldr	r0, [r4, #4]
    5b28:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5b2c:	2800      	cmp	r0, #0
    5b2e:	d00c      	beq.n	5b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b30:	2100      	movs	r1, #0
    5b32:	20ff      	movs	r0, #255	; 0xff
    5b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b38:	f000 bbd0 	b.w	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5b3c:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5b40:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b44:	2100      	movs	r1, #0
    5b46:	2007      	movs	r0, #7
    5b48:	e7f4      	b.n	5b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5b4a:	bd38      	pop	{r3, r4, r5, pc}
    5b4c:	20000124 	.word	0x20000124
    5b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b52:	4d2b      	ldr	r5, [pc, #172]	; (5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5b54:	0006      	movs	r6, r0
    5b56:	f105 0410 	add.w	r4, r5, #16
    5b5a:	d133      	bne.n	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5b5c:	f000 f8aa 	bl	5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    5b60:	f000 f852 	bl	5c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    5b64:	0006      	movs	r6, r0
    5b66:	d12d      	bne.n	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5b68:	8869      	ldrh	r1, [r5, #2]
    5b6a:	0748      	lsls	r0, r1, #29
    5b6c:	d506      	bpl.n	5b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b6e:	6860      	ldr	r0, [r4, #4]
    5b70:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5b74:	2806      	cmp	r0, #6
    5b76:	d101      	bne.n	5b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b78:	2001      	movs	r0, #1
    5b7a:	7028      	strb	r0, [r5, #0]
    5b7c:	0788      	lsls	r0, r1, #30
    5b7e:	d516      	bpl.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5b80:	68a8      	ldr	r0, [r5, #8]
    5b82:	78c0      	ldrb	r0, [r0, #3]
    5b84:	282b      	cmp	r0, #43	; 0x2b
    5b86:	d207      	bcs.n	5b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5b88:	491e      	ldr	r1, [pc, #120]	; (5c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    5b8a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5b8e:	b119      	cbz	r1, 5b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5b90:	481b      	ldr	r0, [pc, #108]	; (5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5b92:	3010      	adds	r0, #16
    5b94:	4788      	blx	r1
    5b96:	e00a      	b.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5b98:	28ff      	cmp	r0, #255	; 0xff
    5b9a:	d004      	beq.n	5ba6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5b9c:	f640 0148 	movw	r1, #2120	; 0x848
    5ba0:	2031      	movs	r0, #49	; 0x31
    5ba2:	f7fb facf 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ba6:	4816      	ldr	r0, [pc, #88]	; (5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5ba8:	3010      	adds	r0, #16
    5baa:	f009 fe4b 	bl	f844 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    5bae:	78a8      	ldrb	r0, [r5, #2]
    5bb0:	06c0      	lsls	r0, r0, #27
    5bb2:	d507      	bpl.n	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5bb4:	6860      	ldr	r0, [r4, #4]
    5bb6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5bba:	290a      	cmp	r1, #10
    5bbc:	d102      	bne.n	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5bbe:	210b      	movs	r1, #11
    5bc0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5bc4:	7868      	ldrb	r0, [r5, #1]
    5bc6:	0700      	lsls	r0, r0, #28
    5bc8:	d518      	bpl.n	5bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5bca:	6860      	ldr	r0, [r4, #4]
    5bcc:	2301      	movs	r3, #1
    5bce:	2105      	movs	r1, #5
    5bd0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5bd4:	3080      	adds	r0, #128	; 0x80
    5bd6:	f008 f92f 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bda:	b108      	cbz	r0, 5be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5bdc:	2608      	movs	r6, #8
    5bde:	e00d      	b.n	5bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5be0:	2500      	movs	r5, #0
    5be2:	4669      	mov	r1, sp
    5be4:	2003      	movs	r0, #3
    5be6:	9500      	str	r5, [sp, #0]
    5be8:	f7fc fb3c 	bl	2264 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5bec:	9800      	ldr	r0, [sp, #0]
    5bee:	b128      	cbz	r0, 5bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5bf0:	7205      	strb	r5, [r0, #8]
    5bf2:	2210      	movs	r2, #16
    5bf4:	6861      	ldr	r1, [r4, #4]
    5bf6:	9800      	ldr	r0, [sp, #0]
    5bf8:	f008 fcc6 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5bfc:	4630      	mov	r0, r6
    5bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c00:	20000114 	.word	0x20000114
    5c04:	200001d8 	.word	0x200001d8
    5c08:	b570      	push	{r4, r5, r6, lr}
    5c0a:	4d28      	ldr	r5, [pc, #160]	; (5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5c0c:	2000      	movs	r0, #0
    5c0e:	78a9      	ldrb	r1, [r5, #2]
    5c10:	07c9      	lsls	r1, r1, #31
    5c12:	d017      	beq.n	5c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    5c14:	68e8      	ldr	r0, [r5, #12]
    5c16:	f105 0410 	add.w	r4, r5, #16
    5c1a:	2301      	movs	r3, #1
    5c1c:	78c6      	ldrb	r6, [r0, #3]
    5c1e:	6860      	ldr	r0, [r4, #4]
    5c20:	2105      	movs	r1, #5
    5c22:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c26:	3080      	adds	r0, #128	; 0x80
    5c28:	f008 f906 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c2c:	b158      	cbz	r0, 5c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    5c2e:	1eb6      	subs	r6, r6, #2
    5c30:	2e0a      	cmp	r6, #10
    5c32:	d206      	bcs.n	5c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    5c34:	e8df f006 	tbb	[pc, r6]
    5c38:	05050707 	.word	0x05050707
    5c3c:	05050707 	.word	0x05050707
    5c40:	0707      	.short	0x0707
    5c42:	2008      	movs	r0, #8
    5c44:	bd70      	pop	{r4, r5, r6, pc}
    5c46:	68e8      	ldr	r0, [r5, #12]
    5c48:	f7fd f944 	bl	2ed4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5c4c:	b338      	cbz	r0, 5c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c4e:	68e8      	ldr	r0, [r5, #12]
    5c50:	78c5      	ldrb	r5, [r0, #3]
    5c52:	b11d      	cbz	r5, 5c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    5c54:	2d01      	cmp	r5, #1
    5c56:	d001      	beq.n	5c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    5c58:	2d16      	cmp	r5, #22
    5c5a:	d113      	bne.n	5c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c5c:	6860      	ldr	r0, [r4, #4]
    5c5e:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5c62:	f008 f941 	bl	dee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5c66:	b168      	cbz	r0, 5c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c68:	6861      	ldr	r1, [r4, #4]
    5c6a:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5c6e:	2820      	cmp	r0, #32
    5c70:	d008      	beq.n	5c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c72:	2821      	cmp	r0, #33	; 0x21
    5c74:	d003      	beq.n	5c7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    5c76:	2d16      	cmp	r5, #22
    5c78:	d00f      	beq.n	5c9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    5c7a:	2002      	movs	r0, #2
    5c7c:	bd70      	pop	{r4, r5, r6, pc}
    5c7e:	202e      	movs	r0, #46	; 0x2e
    5c80:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5c84:	2d2b      	cmp	r5, #43	; 0x2b
    5c86:	d20a      	bcs.n	5c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c88:	4809      	ldr	r0, [pc, #36]	; (5cb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    5c8a:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5c8e:	b131      	cbz	r1, 5c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c94:	4805      	ldr	r0, [pc, #20]	; (5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5c96:	3010      	adds	r0, #16
    5c98:	4708      	bx	r1
    5c9a:	2020      	movs	r0, #32
    5c9c:	bd70      	pop	{r4, r5, r6, pc}
    5c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ca2:	4802      	ldr	r0, [pc, #8]	; (5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5ca4:	3010      	adds	r0, #16
    5ca6:	f000 bd47 	b.w	6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5caa:	0000      	.short	0x0000
    5cac:	20000114 	.word	0x20000114
    5cb0:	2000012c 	.word	0x2000012c
    5cb4:	b570      	push	{r4, r5, r6, lr}
    5cb6:	4e25      	ldr	r6, [pc, #148]	; (5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5cb8:	78b0      	ldrb	r0, [r6, #2]
    5cba:	0700      	lsls	r0, r0, #28
    5cbc:	d545      	bpl.n	5d4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5cbe:	f106 0410 	add.w	r4, r6, #16
    5cc2:	6860      	ldr	r0, [r4, #4]
    5cc4:	3080      	adds	r0, #128	; 0x80
    5cc6:	f009 fd45 	bl	f754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5cca:	b148      	cbz	r0, 5ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5ccc:	6860      	ldr	r0, [r4, #4]
    5cce:	21fe      	movs	r1, #254	; 0xfe
    5cd0:	2500      	movs	r5, #0
    5cd2:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5cd6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5cda:	291a      	cmp	r1, #26
    5cdc:	d10e      	bne.n	5cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5cde:	e004      	b.n	5cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5ce0:	f640 0154 	movw	r1, #2132	; 0x854
    5ce4:	2031      	movs	r0, #49	; 0x31
    5ce6:	f7fb fa2d 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cea:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5cee:	4817      	ldr	r0, [pc, #92]	; (5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5cf0:	3010      	adds	r0, #16
    5cf2:	f008 fd8a 	bl	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    5cf6:	6860      	ldr	r0, [r4, #4]
    5cf8:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5cfc:	6860      	ldr	r0, [r4, #4]
    5cfe:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5d02:	2920      	cmp	r1, #32
    5d04:	d002      	beq.n	5d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    5d06:	2931      	cmp	r1, #49	; 0x31
    5d08:	d116      	bne.n	5d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5d0a:	e00e      	b.n	5d2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5d0c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d10:	2301      	movs	r3, #1
    5d12:	210b      	movs	r1, #11
    5d14:	3080      	adds	r0, #128	; 0x80
    5d16:	f008 f88f 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d1a:	b108      	cbz	r0, 5d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    5d1c:	202e      	movs	r0, #46	; 0x2e
    5d1e:	e000      	b.n	5d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    5d20:	2021      	movs	r0, #33	; 0x21
    5d22:	6861      	ldr	r1, [r4, #4]
    5d24:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d28:	e006      	b.n	5d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5d2a:	2101      	movs	r1, #1
    5d2c:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5d30:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5d34:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5d38:	6860      	ldr	r0, [r4, #4]
    5d3a:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5d3e:	2907      	cmp	r1, #7
    5d40:	d103      	bne.n	5d4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5d42:	2102      	movs	r1, #2
    5d44:	7031      	strb	r1, [r6, #0]
    5d46:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d4a:	bd70      	pop	{r4, r5, r6, pc}
    5d4c:	20000114 	.word	0x20000114
    5d50:	b538      	push	{r3, r4, r5, lr}
    5d52:	4605      	mov	r5, r0
    5d54:	4668      	mov	r0, sp
    5d56:	f7fc f91f 	bl	1f98 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5d5a:	b308      	cbz	r0, 5da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    5d5c:	2222      	movs	r2, #34	; 0x22
    5d5e:	2100      	movs	r1, #0
    5d60:	9800      	ldr	r0, [sp, #0]
    5d62:	f00b f816 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d66:	2103      	movs	r1, #3
    5d68:	9800      	ldr	r0, [sp, #0]
    5d6a:	f008 fb86 	bl	e47a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5d6e:	9800      	ldr	r0, [sp, #0]
    5d70:	7801      	ldrb	r1, [r0, #0]
    5d72:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d76:	7001      	strb	r1, [r0, #0]
    5d78:	4629      	mov	r1, r5
    5d7a:	f7fd f8bb 	bl	2ef4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5d7e:	4c5b      	ldr	r4, [pc, #364]	; (5eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5d80:	2d11      	cmp	r5, #17
    5d82:	d032      	beq.n	5dea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    5d84:	dc0f      	bgt.n	5da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    5d86:	f1a5 0502 	sub.w	r5, r5, #2
    5d8a:	2d0d      	cmp	r5, #13
    5d8c:	d21f      	bcs.n	5dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5d8e:	e8df f005 	tbb	[pc, r5]
    5d92:	1e21      	.short	0x1e21
    5d94:	26a3a355 	.word	0x26a3a355
    5d98:	a31e621e 	.word	0xa31e621e
    5d9c:	0090393f 	.word	0x0090393f
    5da0:	f640 21fe 	movw	r1, #2814	; 0xafe
    5da4:	e09e      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5da6:	2d17      	cmp	r5, #23
    5da8:	d075      	beq.n	5e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5daa:	dc08      	bgt.n	5dbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5dac:	f1a5 0512 	sub.w	r5, r5, #18
    5db0:	2d05      	cmp	r5, #5
    5db2:	d20c      	bcs.n	5dce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5db4:	e8df f005 	tbb	[pc, r5]
    5db8:	54549090 	.word	0x54549090
    5dbc:	0038      	.short	0x0038
    5dbe:	2d23      	cmp	r5, #35	; 0x23
    5dc0:	d07b      	beq.n	5eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dc2:	2d24      	cmp	r5, #36	; 0x24
    5dc4:	d079      	beq.n	5eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dc6:	2d25      	cmp	r5, #37	; 0x25
    5dc8:	d077      	beq.n	5eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dca:	2dff      	cmp	r5, #255	; 0xff
    5dcc:	d07c      	beq.n	5ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5dce:	f640 31aa 	movw	r1, #2986	; 0xbaa
    5dd2:	e087      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5dd4:	6861      	ldr	r1, [r4, #4]
    5dd6:	9800      	ldr	r0, [sp, #0]
    5dd8:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5ddc:	e016      	b.n	5e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5dde:	6860      	ldr	r0, [r4, #4]
    5de0:	9900      	ldr	r1, [sp, #0]
    5de2:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5de6:	7108      	strb	r0, [r1, #4]
    5de8:	e076      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5dea:	6860      	ldr	r0, [r4, #4]
    5dec:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5df0:	9800      	ldr	r0, [sp, #0]
    5df2:	f008 fb2e 	bl	e452 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5df6:	6860      	ldr	r0, [r4, #4]
    5df8:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5dfc:	9800      	ldr	r0, [sp, #0]
    5dfe:	f008 fb2c 	bl	e45a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5e02:	e069      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e04:	6861      	ldr	r1, [r4, #4]
    5e06:	9800      	ldr	r0, [sp, #0]
    5e08:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5e0c:	7101      	strb	r1, [r0, #4]
    5e0e:	e063      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e10:	9800      	ldr	r0, [sp, #0]
    5e12:	210d      	movs	r1, #13
    5e14:	7101      	strb	r1, [r0, #4]
    5e16:	2159      	movs	r1, #89	; 0x59
    5e18:	7141      	strb	r1, [r0, #5]
    5e1a:	2100      	movs	r1, #0
    5e1c:	7181      	strb	r1, [r0, #6]
    5e1e:	2177      	movs	r1, #119	; 0x77
    5e20:	71c1      	strb	r1, [r0, #7]
    5e22:	2110      	movs	r1, #16
    5e24:	7201      	strb	r1, [r0, #8]
    5e26:	e057      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e28:	9800      	ldr	r0, [sp, #0]
    5e2a:	6861      	ldr	r1, [r4, #4]
    5e2c:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5e30:	7101      	strb	r1, [r0, #4]
    5e32:	6861      	ldr	r1, [r4, #4]
    5e34:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5e38:	7141      	strb	r1, [r0, #5]
    5e3a:	e04d      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e3c:	6861      	ldr	r1, [r4, #4]
    5e3e:	9800      	ldr	r0, [sp, #0]
    5e40:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5e44:	f008 fac0 	bl	e3c8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5e48:	6861      	ldr	r1, [r4, #4]
    5e4a:	9800      	ldr	r0, [sp, #0]
    5e4c:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5e50:	f008 fab7 	bl	e3c2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5e54:	e040      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e56:	4825      	ldr	r0, [pc, #148]	; (5eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5e58:	9900      	ldr	r1, [sp, #0]
    5e5a:	f7fd fc0b 	bl	3674 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5e5e:	e03b      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e60:	6860      	ldr	r0, [r4, #4]
    5e62:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5e66:	9800      	ldr	r0, [sp, #0]
    5e68:	f008 fb0f 	bl	e48a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5e6c:	6860      	ldr	r0, [r4, #4]
    5e6e:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5e72:	9800      	ldr	r0, [sp, #0]
    5e74:	f008 fb0d 	bl	e492 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5e78:	6860      	ldr	r0, [r4, #4]
    5e7a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5e7e:	9800      	ldr	r0, [sp, #0]
    5e80:	f008 fb0b 	bl	e49a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5e84:	6860      	ldr	r0, [r4, #4]
    5e86:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5e8a:	9800      	ldr	r0, [sp, #0]
    5e8c:	f008 fb09 	bl	e4a2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5e90:	e022      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e92:	e000      	b.n	5e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5e94:	e011      	b.n	5eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5e96:	6861      	ldr	r1, [r4, #4]
    5e98:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5e9c:	2801      	cmp	r0, #1
    5e9e:	9800      	ldr	r0, [sp, #0]
    5ea0:	d0c4      	beq.n	5e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    5ea2:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5ea6:	7101      	strb	r1, [r0, #4]
    5ea8:	6861      	ldr	r1, [r4, #4]
    5eaa:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5eae:	e7c3      	b.n	5e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    5eb0:	e00a      	b.n	5ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5eb2:	9800      	ldr	r0, [sp, #0]
    5eb4:	f7fd fb88 	bl	35c8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5eb8:	e00e      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5eba:	4b0d      	ldr	r3, [pc, #52]	; (5ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5ebc:	4a0b      	ldr	r2, [pc, #44]	; (5eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5ebe:	4628      	mov	r0, r5
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	9900      	ldr	r1, [sp, #0]
    5ec4:	4798      	blx	r3
    5ec6:	e007      	b.n	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5ec8:	6860      	ldr	r0, [r4, #4]
    5eca:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5ece:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5ed2:	9800      	ldr	r0, [sp, #0]
    5ed4:	f008 fac3 	bl	e45e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5ed8:	f7fc f838 	bl	1f4c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5edc:	2800      	cmp	r0, #0
    5ede:	d104      	bne.n	5eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5ee0:	f640 31ae 	movw	r1, #2990	; 0xbae
    5ee4:	2031      	movs	r0, #49	; 0x31
    5ee6:	f7fb f92d 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eea:	bd38      	pop	{r3, r4, r5, pc}
    5eec:	20000124 	.word	0x20000124
    5ef0:	20000284 	.word	0x20000284
    5ef4:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5ef8:	4e8c      	ldr	r6, [pc, #560]	; (612c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5efa:	468a      	mov	sl, r1
    5efc:	6870      	ldr	r0, [r6, #4]
    5efe:	8800      	ldrh	r0, [r0, #0]
    5f00:	f7fb fdf8 	bl	1af4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f04:	0007      	movs	r7, r0
    5f06:	d00c      	beq.n	5f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5f08:	f1a6 0510 	sub.w	r5, r6, #16
    5f0c:	f04f 0400 	mov.w	r4, #0
    5f10:	8868      	ldrh	r0, [r5, #2]
    5f12:	05c0      	lsls	r0, r0, #23
    5f14:	d50a      	bpl.n	5f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    5f16:	6870      	ldr	r0, [r6, #4]
    5f18:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5f1c:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5f20:	e009      	b.n	5f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    5f22:	f640 6189 	movw	r1, #3721	; 0xe89
    5f26:	2031      	movs	r0, #49	; 0x31
    5f28:	f7fb f90c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f2c:	6871      	ldr	r1, [r6, #4]
    5f2e:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5f32:	1c40      	adds	r0, r0, #1
    5f34:	8008      	strh	r0, [r1, #0]
    5f36:	f000 ff5b 	bl	6df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5f3a:	f04f 0901 	mov.w	r9, #1
    5f3e:	b340      	cbz	r0, 5f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f40:	8868      	ldrh	r0, [r5, #2]
    5f42:	0500      	lsls	r0, r0, #20
    5f44:	d506      	bpl.n	5f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5f46:	6870      	ldr	r0, [r6, #4]
    5f48:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5f4c:	b111      	cbz	r1, 5f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5f4e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f52:	e01e      	b.n	5f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f54:	6870      	ldr	r0, [r6, #4]
    5f56:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5f5a:	1c49      	adds	r1, r1, #1
    5f5c:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5f60:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5f64:	428a      	cmp	r2, r1
    5f66:	d301      	bcc.n	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    5f68:	1a53      	subs	r3, r2, r1
    5f6a:	e000      	b.n	5f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    5f6c:	2300      	movs	r3, #0
    5f6e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5f72:	f10c 0c05 	add.w	ip, ip, #5
    5f76:	4563      	cmp	r3, ip
    5f78:	d801      	bhi.n	5f7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    5f7a:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5f7e:	4291      	cmp	r1, r2
    5f80:	d307      	bcc.n	5f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f82:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f86:	2202      	movs	r2, #2
    5f88:	4969      	ldr	r1, [pc, #420]	; (6130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    5f8a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5f8e:	f008 fb0f 	bl	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5f92:	8868      	ldrh	r0, [r5, #2]
    5f94:	f04f 0b02 	mov.w	fp, #2
    5f98:	f410 7f40 	tst.w	r0, #768	; 0x300
    5f9c:	d00e      	beq.n	5fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5f9e:	6870      	ldr	r0, [r6, #4]
    5fa0:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fa4:	b111      	cbz	r1, 5fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5fa6:	2903      	cmp	r1, #3
    5fa8:	d108      	bne.n	5fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5faa:	e002      	b.n	5fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5fac:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5fb0:	e001      	b.n	5fb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    5fb2:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fb6:	2101      	movs	r1, #1
    5fb8:	f7fe fdac 	bl	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5fbc:	6870      	ldr	r0, [r6, #4]
    5fbe:	46b0      	mov	r8, r6
    5fc0:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fc4:	2901      	cmp	r1, #1
    5fc6:	d104      	bne.n	5fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5fc8:	8869      	ldrh	r1, [r5, #2]
    5fca:	0549      	lsls	r1, r1, #21
    5fcc:	d501      	bpl.n	5fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5fce:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fd2:	9900      	ldr	r1, [sp, #0]
    5fd4:	2900      	cmp	r1, #0
    5fd6:	d179      	bne.n	60cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5fd8:	78a9      	ldrb	r1, [r5, #2]
    5fda:	0649      	lsls	r1, r1, #25
    5fdc:	d502      	bpl.n	5fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5fde:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5fe2:	e004      	b.n	5fee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    5fe4:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5fe8:	1c49      	adds	r1, r1, #1
    5fea:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5fee:	4650      	mov	r0, sl
    5ff0:	f7ff fdae 	bl	5b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    5ff4:	ea40 000a 	orr.w	r0, r0, sl
    5ff8:	4682      	mov	sl, r0
    5ffa:	f7ff fd41 	bl	5a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    5ffe:	f8d8 6004 	ldr.w	r6, [r8, #4]
    6002:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    6006:	1c40      	adds	r0, r0, #1
    6008:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    600c:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    6010:	b128      	cbz	r0, 601e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    6012:	f7fc f965 	bl	22e0 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    6016:	b1b0      	cbz	r0, 6046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6018:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    601c:	e013      	b.n	6046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    601e:	f7fc f83d 	bl	209c <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    6022:	b108      	cbz	r0, 6028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    6024:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6028:	f7fc f832 	bl	2090 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    602c:	b158      	cbz	r0, 6046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    602e:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    6032:	1c40      	adds	r0, r0, #1
    6034:	b2c0      	uxtb	r0, r0
    6036:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    603a:	2802      	cmp	r0, #2
    603c:	d903      	bls.n	6046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    603e:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6042:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    6046:	f8d8 0004 	ldr.w	r0, [r8, #4]
    604a:	4646      	mov	r6, r8
    604c:	2301      	movs	r3, #1
    604e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6052:	2100      	movs	r1, #0
    6054:	3080      	adds	r0, #128	; 0x80
    6056:	f007 feef 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    605a:	b920      	cbnz	r0, 6066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    605c:	6870      	ldr	r0, [r6, #4]
    605e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6062:	280b      	cmp	r0, #11
    6064:	d15f      	bne.n	6126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6066:	6870      	ldr	r0, [r6, #4]
    6068:	2301      	movs	r3, #1
    606a:	2100      	movs	r1, #0
    606c:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6070:	3080      	adds	r0, #128	; 0x80
    6072:	f007 fee1 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6076:	b350      	cbz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6078:	6870      	ldr	r0, [r6, #4]
    607a:	2301      	movs	r3, #1
    607c:	2100      	movs	r1, #0
    607e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6082:	3080      	adds	r0, #128	; 0x80
    6084:	f007 fed8 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6088:	b308      	cbz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    608a:	6870      	ldr	r0, [r6, #4]
    608c:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6090:	2902      	cmp	r1, #2
    6092:	d148      	bne.n	6126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6094:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    6098:	b9c8      	cbnz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    609a:	4638      	mov	r0, r7
    609c:	f007 f9ed 	bl	d47a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    60a0:	b1a8      	cbz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60a2:	6870      	ldr	r0, [r6, #4]
    60a4:	3080      	adds	r0, #128	; 0x80
    60a6:	f009 fb55 	bl	f754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    60aa:	b980      	cbnz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60ac:	6871      	ldr	r1, [r6, #4]
    60ae:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    60b2:	2801      	cmp	r0, #1
    60b4:	d937      	bls.n	6126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60b6:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    60ba:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    60be:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    60c2:	1e93      	subs	r3, r2, #2
    60c4:	4298      	cmp	r0, r3
    60c6:	db03      	blt.n	60d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    60c8:	2001      	movs	r0, #1
    60ca:	e004      	b.n	60d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    60cc:	e01c      	b.n	6108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    60ce:	e02a      	b.n	6126 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60d0:	1a10      	subs	r0, r2, r0
    60d2:	1e40      	subs	r0, r0, #1
    60d4:	b280      	uxth	r0, r0
    60d6:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    60da:	88aa      	ldrh	r2, [r5, #4]
    60dc:	4293      	cmp	r3, r2
    60de:	d301      	bcc.n	60e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    60e0:	2201      	movs	r2, #1
    60e2:	e002      	b.n	60ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    60e4:	1ad2      	subs	r2, r2, r3
    60e6:	1c52      	adds	r2, r2, #1
    60e8:	b292      	uxth	r2, r2
    60ea:	4290      	cmp	r0, r2
    60ec:	d900      	bls.n	60f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    60ee:	4610      	mov	r0, r2
    60f0:	2801      	cmp	r0, #1
    60f2:	d101      	bne.n	60f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    60f4:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    60f8:	6871      	ldr	r1, [r6, #4]
    60fa:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    60fe:	4410      	add	r0, r2
    6100:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    6104:	f000 ff8e 	bl	7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    6108:	78a8      	ldrb	r0, [r5, #2]
    610a:	4652      	mov	r2, sl
    610c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    6110:	9800      	ldr	r0, [sp, #0]
    6112:	f000 fe81 	bl	6e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    6116:	f8d8 0004 	ldr.w	r0, [r8, #4]
    611a:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    611e:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6122:	f7fb befd 	b.w	1f20 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6126:	2001      	movs	r0, #1
    6128:	6871      	ldr	r1, [r6, #4]
    612a:	e7e3      	b.n	60f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    612c:	20000124 	.word	0x20000124
    6130:	0000ea93 	.word	0x0000ea93
    6134:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6136:	4c68      	ldr	r4, [pc, #416]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    6138:	2301      	movs	r3, #1
    613a:	2100      	movs	r1, #0
    613c:	6860      	ldr	r0, [r4, #4]
    613e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6142:	3080      	adds	r0, #128	; 0x80
    6144:	f007 fe78 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6148:	2800      	cmp	r0, #0
    614a:	d07a      	beq.n	6242 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    614c:	6860      	ldr	r0, [r4, #4]
    614e:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    6152:	2500      	movs	r5, #0
    6154:	b139      	cbz	r1, 6166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    6156:	2100      	movs	r1, #0
    6158:	200e      	movs	r0, #14
    615a:	f000 f8bf 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    615e:	6860      	ldr	r0, [r4, #4]
    6160:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    6164:	e0b5      	b.n	62d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6166:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    616a:	b119      	cbz	r1, 6174 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    616c:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    6170:	0789      	lsls	r1, r1, #30
    6172:	d016      	beq.n	61a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    6174:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6178:	f88d 1004 	strb.w	r1, [sp, #4]
    617c:	9901      	ldr	r1, [sp, #4]
    617e:	9101      	str	r1, [sp, #4]
    6180:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6184:	b141      	cbz	r1, 6198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    6186:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    618a:	f88d 1000 	strb.w	r1, [sp]
    618e:	9900      	ldr	r1, [sp, #0]
    6190:	9100      	str	r1, [sp, #0]
    6192:	f89d 1000 	ldrb.w	r1, [sp]
    6196:	b189      	cbz	r1, 61bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    6198:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    619c:	2901      	cmp	r1, #1
    619e:	d030      	beq.n	6202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    61a0:	e040      	b.n	6224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    61a2:	2100      	movs	r1, #0
    61a4:	200c      	movs	r0, #12
    61a6:	f000 f899 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    61aa:	6860      	ldr	r0, [r4, #4]
    61ac:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    61b0:	f041 0101 	orr.w	r1, r1, #1
    61b4:	7001      	strb	r1, [r0, #0]
    61b6:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    61ba:	e08a      	b.n	62d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    61bc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    61c0:	2925      	cmp	r1, #37	; 0x25
    61c2:	d01c      	beq.n	61fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    61c4:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    61c8:	2925      	cmp	r1, #37	; 0x25
    61ca:	d018      	beq.n	61fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    61cc:	f05f 0300 	movs.w	r3, #0
    61d0:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    61d4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    61d8:	f008 fa00 	bl	e5dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    61dc:	6860      	ldr	r0, [r4, #4]
    61de:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    61e2:	2100      	movs	r1, #0
    61e4:	2014      	movs	r0, #20
    61e6:	f000 f879 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    61ea:	6861      	ldr	r1, [r4, #4]
    61ec:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    61f0:	8bc2      	ldrh	r2, [r0, #30]
    61f2:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    61f6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    61f8:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    61fc:	e069      	b.n	62d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    61fe:	2301      	movs	r3, #1
    6200:	e7e6      	b.n	61d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    6202:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6206:	f88d 1000 	strb.w	r1, [sp]
    620a:	9900      	ldr	r1, [sp, #0]
    620c:	9100      	str	r1, [sp, #0]
    620e:	f89d 1000 	ldrb.w	r1, [sp]
    6212:	b939      	cbnz	r1, 6224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    6214:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6218:	2301      	movs	r3, #1
    621a:	210b      	movs	r1, #11
    621c:	3080      	adds	r0, #128	; 0x80
    621e:	f007 fe0b 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6222:	b178      	cbz	r0, 6244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    6224:	6860      	ldr	r0, [r4, #4]
    6226:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    622a:	f88d 1000 	strb.w	r1, [sp]
    622e:	9900      	ldr	r1, [sp, #0]
    6230:	9100      	str	r1, [sp, #0]
    6232:	f89d 1000 	ldrb.w	r1, [sp]
    6236:	b3b9      	cbz	r1, 62a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    6238:	2100      	movs	r1, #0
    623a:	2023      	movs	r0, #35	; 0x23
    623c:	f000 f84e 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6240:	e047      	b.n	62d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6242:	e030      	b.n	62a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    6244:	6860      	ldr	r0, [r4, #4]
    6246:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    624a:	f009 fa8b 	bl	f764 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    624e:	4605      	mov	r5, r0
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6256:	f009 fa85 	bl	f764 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    625a:	4606      	mov	r6, r0
    625c:	6860      	ldr	r0, [r4, #4]
    625e:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    6262:	4628      	mov	r0, r5
    6264:	f009 fa89 	bl	f77a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6268:	b150      	cbz	r0, 6280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    626a:	6860      	ldr	r0, [r4, #4]
    626c:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    6270:	4630      	mov	r0, r6
    6272:	f009 fa82 	bl	f77a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6276:	b118      	cbz	r0, 6280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    6278:	2000      	movs	r0, #0
    627a:	f000 f943 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    627e:	e011      	b.n	62a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    6280:	6860      	ldr	r0, [r4, #4]
    6282:	2301      	movs	r3, #1
    6284:	2103      	movs	r1, #3
    6286:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    628a:	3080      	adds	r0, #128	; 0x80
    628c:	f007 fdd4 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6290:	b940      	cbnz	r0, 62a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    6292:	6860      	ldr	r0, [r4, #4]
    6294:	2301      	movs	r3, #1
    6296:	2102      	movs	r1, #2
    6298:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    629c:	3080      	adds	r0, #128	; 0x80
    629e:	f007 fdcb 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62a2:	b110      	cbz	r0, 62aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    62a4:	2000      	movs	r0, #0
    62a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62a8:	e002      	b.n	62b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    62aa:	2100      	movs	r1, #0
    62ac:	2016      	movs	r0, #22
    62ae:	e7c5      	b.n	623c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    62b0:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    62b4:	f88d 0000 	strb.w	r0, [sp]
    62b8:	9800      	ldr	r0, [sp, #0]
    62ba:	9000      	str	r0, [sp, #0]
    62bc:	f89d 0000 	ldrb.w	r0, [sp]
    62c0:	2800      	cmp	r0, #0
    62c2:	d0f0      	beq.n	62a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    62c4:	2100      	movs	r1, #0
    62c6:	2025      	movs	r0, #37	; 0x25
    62c8:	f000 f808 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    62cc:	6860      	ldr	r0, [r4, #4]
    62ce:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    62d2:	2001      	movs	r0, #1
    62d4:	e7e7      	b.n	62a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    62d6:	0000      	.short	0x0000
    62d8:	20000124 	.word	0x20000124
    62dc:	b570      	push	{r4, r5, r6, lr}
    62de:	4c0d      	ldr	r4, [pc, #52]	; (6314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    62e0:	4606      	mov	r6, r0
    62e2:	460d      	mov	r5, r1
    62e4:	6860      	ldr	r0, [r4, #4]
    62e6:	3080      	adds	r0, #128	; 0x80
    62e8:	f009 fa34 	bl	f754 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    62ec:	b120      	cbz	r0, 62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    62ee:	f640 31b3 	movw	r1, #2995	; 0xbb3
    62f2:	2031      	movs	r0, #49	; 0x31
    62f4:	f7fa ff26 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62f8:	6862      	ldr	r2, [r4, #4]
    62fa:	2000      	movs	r0, #0
    62fc:	2d01      	cmp	r5, #1
    62fe:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    6302:	d004      	beq.n	630e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    6304:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6308:	2001      	movs	r0, #1
    630a:	7110      	strb	r0, [r2, #4]
    630c:	bd70      	pop	{r4, r5, r6, pc}
    630e:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    6312:	bd70      	pop	{r4, r5, r6, pc}
    6314:	20000124 	.word	0x20000124
    6318:	b538      	push	{r3, r4, r5, lr}
    631a:	4c1f      	ldr	r4, [pc, #124]	; (6398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    631c:	2500      	movs	r5, #0
    631e:	6860      	ldr	r0, [r4, #4]
    6320:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    6324:	2901      	cmp	r1, #1
    6326:	d00a      	beq.n	633e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    6328:	2902      	cmp	r1, #2
    632a:	d133      	bne.n	6394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    632c:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6330:	b1d9      	cbz	r1, 636a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    6332:	2106      	movs	r1, #6
    6334:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6338:	2101      	movs	r1, #1
    633a:	2002      	movs	r0, #2
    633c:	e025      	b.n	638a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    633e:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    6342:	f88d 1000 	strb.w	r1, [sp]
    6346:	9900      	ldr	r1, [sp, #0]
    6348:	9100      	str	r1, [sp, #0]
    634a:	f89d 1000 	ldrb.w	r1, [sp]
    634e:	2900      	cmp	r1, #0
    6350:	d120      	bne.n	6394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    6352:	f500 7384 	add.w	r3, r0, #264	; 0x108
    6356:	f500 710e 	add.w	r1, r0, #568	; 0x238
    635a:	2200      	movs	r2, #0
    635c:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    6360:	f007 fd35 	bl	ddce <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    6364:	2101      	movs	r1, #1
    6366:	2005      	movs	r0, #5
    6368:	e00f      	b.n	638a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    636a:	2103      	movs	r1, #3
    636c:	2206      	movs	r2, #6
    636e:	480a      	ldr	r0, [pc, #40]	; (6398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    6370:	f008 fa59 	bl	e826 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    6374:	6860      	ldr	r0, [r4, #4]
    6376:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    637a:	0880      	lsrs	r0, r0, #2
    637c:	f010 0f01 	tst.w	r0, #1
    6380:	d001      	beq.n	6386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    6382:	2011      	movs	r0, #17
    6384:	e000      	b.n	6388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    6386:	200d      	movs	r0, #13
    6388:	2101      	movs	r1, #1
    638a:	f7ff ffa7 	bl	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    638e:	6860      	ldr	r0, [r4, #4]
    6390:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    6394:	bd38      	pop	{r3, r4, r5, pc}
    6396:	0000      	.short	0x0000
    6398:	20000124 	.word	0x20000124
    639c:	b570      	push	{r4, r5, r6, lr}
    639e:	4b2b      	ldr	r3, [pc, #172]	; (644c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    63a0:	4602      	mov	r2, r0
    63a2:	8858      	ldrh	r0, [r3, #2]
    63a4:	4310      	orrs	r0, r2
    63a6:	8058      	strh	r0, [r3, #2]
    63a8:	f103 0010 	add.w	r0, r3, #16
    63ac:	2a40      	cmp	r2, #64	; 0x40
    63ae:	6840      	ldr	r0, [r0, #4]
    63b0:	d00d      	beq.n	63ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    63b2:	0796      	lsls	r6, r2, #30
    63b4:	f04f 0500 	mov.w	r5, #0
    63b8:	f04f 0401 	mov.w	r4, #1
    63bc:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    63c0:	d50c      	bpl.n	63dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    63c2:	b14e      	cbz	r6, 63d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    63c4:	f640 51f6 	movw	r1, #3574	; 0xdf6
    63c8:	2031      	movs	r0, #49	; 0x31
    63ca:	f7fa febb 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63d2:	2104      	movs	r1, #4
    63d4:	f7fe bb9e 	b.w	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    63d8:	6099      	str	r1, [r3, #8]
    63da:	e01c      	b.n	6416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    63dc:	b1c6      	cbz	r6, 6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    63de:	60d9      	str	r1, [r3, #12]
    63e0:	78c9      	ldrb	r1, [r1, #3]
    63e2:	2906      	cmp	r1, #6
    63e4:	d002      	beq.n	63ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    63e6:	290b      	cmp	r1, #11
    63e8:	d112      	bne.n	6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    63ea:	e009      	b.n	6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    63ec:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    63f0:	2918      	cmp	r1, #24
    63f2:	d10d      	bne.n	6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    63f4:	2100      	movs	r1, #0
    63f6:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    63fa:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    63fe:	e007      	b.n	6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6400:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6404:	2912      	cmp	r1, #18
    6406:	d103      	bne.n	6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6408:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    640c:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    6410:	0791      	lsls	r1, r2, #30
    6412:	d516      	bpl.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6414:	6899      	ldr	r1, [r3, #8]
    6416:	78c9      	ldrb	r1, [r1, #3]
    6418:	2905      	cmp	r1, #5
    641a:	d002      	beq.n	6422 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    641c:	290b      	cmp	r1, #11
    641e:	d110      	bne.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6420:	e009      	b.n	6436 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    6422:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6426:	2916      	cmp	r1, #22
    6428:	d10b      	bne.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    642a:	2100      	movs	r1, #0
    642c:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    6430:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    6434:	e005      	b.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6436:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    643a:	2911      	cmp	r1, #17
    643c:	d101      	bne.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    643e:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    6442:	0690      	lsls	r0, r2, #26
    6444:	d501      	bpl.n	644a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    6446:	2008      	movs	r0, #8
    6448:	7058      	strb	r0, [r3, #1]
    644a:	bd70      	pop	{r4, r5, r6, pc}
    644c:	20000114 	.word	0x20000114
    6450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6454:	4c29      	ldr	r4, [pc, #164]	; (64fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    6456:	2501      	movs	r5, #1
    6458:	6862      	ldr	r2, [r4, #4]
    645a:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    645e:	b109      	cbz	r1, 6464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6460:	2701      	movs	r7, #1
    6462:	e000      	b.n	6466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    6464:	2700      	movs	r7, #0
    6466:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    646a:	b108      	cbz	r0, 6470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    646c:	2601      	movs	r6, #1
    646e:	e000      	b.n	6472 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    6470:	2600      	movs	r6, #0
    6472:	b90f      	cbnz	r7, 6478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    6474:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    6478:	b90e      	cbnz	r6, 647e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    647a:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    647e:	f102 0362 	add.w	r3, r2, #98	; 0x62
    6482:	7219      	strb	r1, [r3, #8]
    6484:	7258      	strb	r0, [r3, #9]
    6486:	20ff      	movs	r0, #255	; 0xff
    6488:	7298      	strb	r0, [r3, #10]
    648a:	481d      	ldr	r0, [pc, #116]	; (6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    648c:	6803      	ldr	r3, [r0, #0]
    648e:	b10b      	cbz	r3, 6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    6490:	4610      	mov	r0, r2
    6492:	4798      	blx	r3
    6494:	6860      	ldr	r0, [r4, #4]
    6496:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    649a:	2801      	cmp	r0, #1
    649c:	d001      	beq.n	64a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    649e:	b907      	cbnz	r7, 64a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    64a0:	b116      	cbz	r6, 64a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    64a2:	2000      	movs	r0, #0
    64a4:	f000 f82e 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    64a8:	6860      	ldr	r0, [r4, #4]
    64aa:	302c      	adds	r0, #44	; 0x2c
    64ac:	f008 f903 	bl	e6b6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    64b0:	4606      	mov	r6, r0
    64b2:	6860      	ldr	r0, [r4, #4]
    64b4:	f008 f8ad 	bl	e612 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    64b8:	b130      	cbz	r0, 64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    64ba:	6861      	ldr	r1, [r4, #4]
    64bc:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    64c0:	f831 0b2c 	ldrh.w	r0, [r1], #44
    64c4:	f7fc ff50 	bl	3368 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    64c8:	2105      	movs	r1, #5
    64ca:	6860      	ldr	r0, [r4, #4]
    64cc:	f7fe fb22 	bl	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    64d0:	6860      	ldr	r0, [r4, #4]
    64d2:	302c      	adds	r0, #44	; 0x2c
    64d4:	f008 f8ef 	bl	e6b6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    64d8:	4604      	mov	r4, r0
    64da:	42a6      	cmp	r6, r4
    64dc:	d20a      	bcs.n	64f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    64de:	f003 fdd1 	bl	a084 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    64e2:	4601      	mov	r1, r0
    64e4:	1ba0      	subs	r0, r4, r6
    64e6:	2867      	cmp	r0, #103	; 0x67
    64e8:	d200      	bcs.n	64ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    64ea:	2067      	movs	r0, #103	; 0x67
    64ec:	f003 fc90 	bl	9e10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    64f0:	b100      	cbz	r0, 64f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    64f2:	2500      	movs	r5, #0
    64f4:	4628      	mov	r0, r5
    64f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64fa:	0000      	.short	0x0000
    64fc:	20000124 	.word	0x20000124
    6500:	2000028c 	.word	0x2000028c
    6504:	4601      	mov	r1, r0
    6506:	4801      	ldr	r0, [pc, #4]	; (650c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    6508:	f001 ba96 	b.w	7a38 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    650c:	20000124 	.word	0x20000124
    6510:	b570      	push	{r4, r5, r6, lr}
    6512:	4d0f      	ldr	r5, [pc, #60]	; (6550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    6514:	686c      	ldr	r4, [r5, #4]
    6516:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    651a:	2921      	cmp	r1, #33	; 0x21
    651c:	d002      	beq.n	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    651e:	292e      	cmp	r1, #46	; 0x2e
    6520:	d003      	beq.n	652a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    6522:	e011      	b.n	6548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    6524:	f7ff ffee 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6528:	e008      	b.n	653c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    652a:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    652e:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6532:	2301      	movs	r3, #1
    6534:	210b      	movs	r1, #11
    6536:	f007 fc7f 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    653a:	b138      	cbz	r0, 654c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    653c:	6869      	ldr	r1, [r5, #4]
    653e:	2000      	movs	r0, #0
    6540:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6544:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6548:	2000      	movs	r0, #0
    654a:	bd70      	pop	{r4, r5, r6, pc}
    654c:	202a      	movs	r0, #42	; 0x2a
    654e:	e7e9      	b.n	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    6550:	20000124 	.word	0x20000124
    6554:	b570      	push	{r4, r5, r6, lr}
    6556:	4604      	mov	r4, r0
    6558:	6840      	ldr	r0, [r0, #4]
    655a:	2301      	movs	r3, #1
    655c:	2100      	movs	r1, #0
    655e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6562:	3080      	adds	r0, #128	; 0x80
    6564:	f007 fc68 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6568:	b1b8      	cbz	r0, 659a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    656a:	4d13      	ldr	r5, [pc, #76]	; (65b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    656c:	68e8      	ldr	r0, [r5, #12]
    656e:	f007 fed6 	bl	e31e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    6572:	6861      	ldr	r1, [r4, #4]
    6574:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6578:	6861      	ldr	r1, [r4, #4]
    657a:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    657e:	f009 f90a 	bl	f796 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6582:	b160      	cbz	r0, 659e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    6584:	6861      	ldr	r1, [r4, #4]
    6586:	2028      	movs	r0, #40	; 0x28
    6588:	2202      	movs	r2, #2
    658a:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    658e:	6860      	ldr	r0, [r4, #4]
    6590:	490a      	ldr	r1, [pc, #40]	; (65bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    6592:	30b4      	adds	r0, #180	; 0xb4
    6594:	f007 fff8 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6598:	e00b      	b.n	65b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    659a:	2001      	movs	r0, #1
    659c:	bd70      	pop	{r4, r5, r6, pc}
    659e:	6861      	ldr	r1, [r4, #4]
    65a0:	68e8      	ldr	r0, [r5, #12]
    65a2:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    65a6:	f007 feb5 	bl	e314 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    65aa:	6861      	ldr	r1, [r4, #4]
    65ac:	200a      	movs	r0, #10
    65ae:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    65b2:	2000      	movs	r0, #0
    65b4:	bd70      	pop	{r4, r5, r6, pc}
    65b6:	0000      	.short	0x0000
    65b8:	20000114 	.word	0x20000114
    65bc:	0000e845 	.word	0x0000e845
    65c0:	b570      	push	{r4, r5, r6, lr}
    65c2:	4604      	mov	r4, r0
    65c4:	6840      	ldr	r0, [r0, #4]
    65c6:	2301      	movs	r3, #1
    65c8:	2100      	movs	r1, #0
    65ca:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    65ce:	3080      	adds	r0, #128	; 0x80
    65d0:	f007 fc32 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65d4:	b1e0      	cbz	r0, 6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    65d6:	4d28      	ldr	r5, [pc, #160]	; (6678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    65d8:	2100      	movs	r1, #0
    65da:	68e8      	ldr	r0, [r5, #12]
    65dc:	f007 fea2 	bl	e324 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    65e0:	b1c0      	cbz	r0, 6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    65e2:	68e8      	ldr	r0, [r5, #12]
    65e4:	6861      	ldr	r1, [r4, #4]
    65e6:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    65ea:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    65ee:	6861      	ldr	r1, [r4, #4]
    65f0:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    65f4:	f009 f8cf 	bl	f796 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    65f8:	b188      	cbz	r0, 661e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    65fa:	6861      	ldr	r1, [r4, #4]
    65fc:	2028      	movs	r0, #40	; 0x28
    65fe:	2202      	movs	r2, #2
    6600:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6604:	6860      	ldr	r0, [r4, #4]
    6606:	491d      	ldr	r1, [pc, #116]	; (667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    6608:	30b4      	adds	r0, #180	; 0xb4
    660a:	f007 ffbd 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    660e:	e030      	b.n	6672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    6610:	2001      	movs	r0, #1
    6612:	bd70      	pop	{r4, r5, r6, pc}
    6614:	4620      	mov	r0, r4
    6616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    661a:	f000 b88d 	b.w	6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    661e:	68e8      	ldr	r0, [r5, #12]
    6620:	f007 feaa 	bl	e378 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    6624:	f007 fbfe 	bl	de24 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6628:	4606      	mov	r6, r0
    662a:	6860      	ldr	r0, [r4, #4]
    662c:	4631      	mov	r1, r6
    662e:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    6632:	68e8      	ldr	r0, [r5, #12]
    6634:	7900      	ldrb	r0, [r0, #4]
    6636:	f007 fd62 	bl	e0fe <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    663a:	6861      	ldr	r1, [r4, #4]
    663c:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    6640:	68e8      	ldr	r0, [r5, #12]
    6642:	4631      	mov	r1, r6
    6644:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    6648:	f007 fd55 	bl	e0f6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    664c:	6861      	ldr	r1, [r4, #4]
    664e:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    6652:	68e8      	ldr	r0, [r5, #12]
    6654:	f007 fe93 	bl	e37e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    6658:	6861      	ldr	r1, [r4, #4]
    665a:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    665e:	68e8      	ldr	r0, [r5, #12]
    6660:	f007 fe90 	bl	e384 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    6664:	6861      	ldr	r1, [r4, #4]
    6666:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    666a:	6861      	ldr	r1, [r4, #4]
    666c:	200d      	movs	r0, #13
    666e:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6672:	2000      	movs	r0, #0
    6674:	bd70      	pop	{r4, r5, r6, pc}
    6676:	0000      	.short	0x0000
    6678:	20000114 	.word	0x20000114
    667c:	0000e845 	.word	0x0000e845
    6680:	b570      	push	{r4, r5, r6, lr}
    6682:	4604      	mov	r4, r0
    6684:	6840      	ldr	r0, [r0, #4]
    6686:	2301      	movs	r3, #1
    6688:	2100      	movs	r1, #0
    668a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    668e:	3080      	adds	r0, #128	; 0x80
    6690:	f007 fbd2 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6694:	b970      	cbnz	r0, 66b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    6696:	6860      	ldr	r0, [r4, #4]
    6698:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    669c:	2a13      	cmp	r2, #19
    669e:	d009      	beq.n	66b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    66a0:	2301      	movs	r3, #1
    66a2:	2105      	movs	r1, #5
    66a4:	3080      	adds	r0, #128	; 0x80
    66a6:	f007 fbc7 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66aa:	b108      	cbz	r0, 66b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    66ac:	2008      	movs	r0, #8
    66ae:	bd70      	pop	{r4, r5, r6, pc}
    66b0:	2001      	movs	r0, #1
    66b2:	bd70      	pop	{r4, r5, r6, pc}
    66b4:	6860      	ldr	r0, [r4, #4]
    66b6:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    66ba:	b910      	cbnz	r0, 66c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    66bc:	4816      	ldr	r0, [pc, #88]	; (6718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    66be:	f008 f89c 	bl	e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    66c2:	4d15      	ldr	r5, [pc, #84]	; (6718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    66c4:	6861      	ldr	r1, [r4, #4]
    66c6:	3d10      	subs	r5, #16
    66c8:	f501 710e 	add.w	r1, r1, #568	; 0x238
    66cc:	68e8      	ldr	r0, [r5, #12]
    66ce:	f007 fe72 	bl	e3b6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    66d2:	6861      	ldr	r1, [r4, #4]
    66d4:	68e8      	ldr	r0, [r5, #12]
    66d6:	f501 718c 	add.w	r1, r1, #280	; 0x118
    66da:	f007 fe63 	bl	e3a4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    66de:	6860      	ldr	r0, [r4, #4]
    66e0:	8801      	ldrh	r1, [r0, #0]
    66e2:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    66e6:	6861      	ldr	r1, [r4, #4]
    66e8:	68e8      	ldr	r0, [r5, #12]
    66ea:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    66ee:	f007 fe5d 	bl	e3ac <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    66f2:	6861      	ldr	r1, [r4, #4]
    66f4:	68e8      	ldr	r0, [r5, #12]
    66f6:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    66fa:	f007 fe50 	bl	e39e <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    66fe:	6860      	ldr	r0, [r4, #4]
    6700:	2202      	movs	r2, #2
    6702:	4906      	ldr	r1, [pc, #24]	; (671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    6704:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    6708:	f007 ff3e 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    670c:	6861      	ldr	r1, [r4, #4]
    670e:	2015      	movs	r0, #21
    6710:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6714:	2000      	movs	r0, #0
    6716:	bd70      	pop	{r4, r5, r6, pc}
    6718:	20000124 	.word	0x20000124
    671c:	0000e9e9 	.word	0x0000e9e9
    6720:	4901      	ldr	r1, [pc, #4]	; (6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    6722:	68c9      	ldr	r1, [r1, #12]
    6724:	f7fc bf28 	b.w	3578 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6728:	20000114 	.word	0x20000114
    672c:	4901      	ldr	r1, [pc, #4]	; (6734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    672e:	68c9      	ldr	r1, [r1, #12]
    6730:	f7fc bf58 	b.w	35e4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6734:	20000114 	.word	0x20000114
    6738:	b510      	push	{r4, lr}
    673a:	6842      	ldr	r2, [r0, #4]
    673c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6740:	070b      	lsls	r3, r1, #28
    6742:	d501      	bpl.n	6748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    6744:	2001      	movs	r0, #1
    6746:	bd10      	pop	{r4, pc}
    6748:	f041 0108 	orr.w	r1, r1, #8
    674c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    6750:	4905      	ldr	r1, [pc, #20]	; (6768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    6752:	6840      	ldr	r0, [r0, #4]
    6754:	68c9      	ldr	r1, [r1, #12]
    6756:	78c9      	ldrb	r1, [r1, #3]
    6758:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    675c:	4802      	ldr	r0, [pc, #8]	; (6768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    675e:	3010      	adds	r0, #16
    6760:	f008 f84b 	bl	e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6764:	2000      	movs	r0, #0
    6766:	bd10      	pop	{r4, pc}
    6768:	20000114 	.word	0x20000114
    676c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6770:	4605      	mov	r5, r0
    6772:	6840      	ldr	r0, [r0, #4]
    6774:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6778:	f010 0f30 	tst.w	r0, #48	; 0x30
    677c:	d002      	beq.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    677e:	2001      	movs	r0, #1
    6780:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6784:	4c32      	ldr	r4, [pc, #200]	; (6850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6786:	68e0      	ldr	r0, [r4, #12]
    6788:	f007 fe2f 	bl	e3ea <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    678c:	b330      	cbz	r0, 67dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    678e:	68e0      	ldr	r0, [r4, #12]
    6790:	f007 fe25 	bl	e3de <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6794:	4680      	mov	r8, r0
    6796:	68e0      	ldr	r0, [r4, #12]
    6798:	f007 fe25 	bl	e3e6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    679c:	4607      	mov	r7, r0
    679e:	68e0      	ldr	r0, [r4, #12]
    67a0:	f007 fe1b 	bl	e3da <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67a4:	4606      	mov	r6, r0
    67a6:	68e0      	ldr	r0, [r4, #12]
    67a8:	f007 fe1b 	bl	e3e2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67ac:	4601      	mov	r1, r0
    67ae:	f8cd 8000 	str.w	r8, [sp]
    67b2:	6868      	ldr	r0, [r5, #4]
    67b4:	463b      	mov	r3, r7
    67b6:	4632      	mov	r2, r6
    67b8:	302c      	adds	r0, #44	; 0x2c
    67ba:	f007 ff86 	bl	e6ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    67be:	78a0      	ldrb	r0, [r4, #2]
    67c0:	0781      	lsls	r1, r0, #30
    67c2:	f04f 0001 	mov.w	r0, #1
    67c6:	d503      	bpl.n	67d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    67c8:	68a1      	ldr	r1, [r4, #8]
    67ca:	78c9      	ldrb	r1, [r1, #3]
    67cc:	2914      	cmp	r1, #20
    67ce:	d00a      	beq.n	67e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    67d0:	6869      	ldr	r1, [r5, #4]
    67d2:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    67d6:	291d      	cmp	r1, #29
    67d8:	d005      	beq.n	67e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    67da:	e007      	b.n	67ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    67dc:	4628      	mov	r0, r5
    67de:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67e2:	f7ff bfa9 	b.w	6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    67e6:	6869      	ldr	r1, [r5, #4]
    67e8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    67ec:	6868      	ldr	r0, [r5, #4]
    67ee:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    67f2:	2901      	cmp	r1, #1
    67f4:	d011      	beq.n	681a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    67f6:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    67fa:	f88d 1004 	strb.w	r1, [sp, #4]
    67fe:	9901      	ldr	r1, [sp, #4]
    6800:	9101      	str	r1, [sp, #4]
    6802:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6806:	b941      	cbnz	r1, 681a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6808:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    680c:	f88d 1000 	strb.w	r1, [sp]
    6810:	9900      	ldr	r1, [sp, #0]
    6812:	9100      	str	r1, [sp, #0]
    6814:	f89d 1000 	ldrb.w	r1, [sp]
    6818:	b151      	cbz	r1, 6830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    681a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    681e:	f041 0110 	orr.w	r1, r1, #16
    6822:	6001      	str	r1, [r0, #0]
    6824:	480a      	ldr	r0, [pc, #40]	; (6850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6826:	3010      	adds	r0, #16
    6828:	f007 ffe7 	bl	e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    682c:	2000      	movs	r0, #0
    682e:	e7a7      	b.n	6780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    6830:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6834:	f041 0120 	orr.w	r1, r1, #32
    6838:	6001      	str	r1, [r0, #0]
    683a:	4805      	ldr	r0, [pc, #20]	; (6850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    683c:	3010      	adds	r0, #16
    683e:	6843      	ldr	r3, [r0, #4]
    6840:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    6844:	8818      	ldrh	r0, [r3, #0]
    6846:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    684a:	f7fc fdb5 	bl	33b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    684e:	e7e9      	b.n	6824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    6850:	20000114 	.word	0x20000114
    6854:	4901      	ldr	r1, [pc, #4]	; (685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    6856:	68c9      	ldr	r1, [r1, #12]
    6858:	f008 b85e 	b.w	e918 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    685c:	20000114 	.word	0x20000114
    6860:	b510      	push	{r4, lr}
    6862:	4604      	mov	r4, r0
    6864:	6840      	ldr	r0, [r0, #4]
    6866:	2301      	movs	r3, #1
    6868:	2100      	movs	r1, #0
    686a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    686e:	3080      	adds	r0, #128	; 0x80
    6870:	f007 fae2 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6874:	2800      	cmp	r0, #0
    6876:	6860      	ldr	r0, [r4, #4]
    6878:	d00c      	beq.n	6894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    687a:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    687e:	2800      	cmp	r0, #0
    6880:	d007      	beq.n	6892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    6882:	480a      	ldr	r0, [pc, #40]	; (68ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    6884:	f007 ffb9 	bl	e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6888:	6861      	ldr	r1, [r4, #4]
    688a:	2011      	movs	r0, #17
    688c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6890:	2000      	movs	r0, #0
    6892:	bd10      	pop	{r4, pc}
    6894:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6898:	2301      	movs	r3, #1
    689a:	2105      	movs	r1, #5
    689c:	3080      	adds	r0, #128	; 0x80
    689e:	f007 facb 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68a2:	b108      	cbz	r0, 68a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    68a4:	2008      	movs	r0, #8
    68a6:	bd10      	pop	{r4, pc}
    68a8:	2001      	movs	r0, #1
    68aa:	bd10      	pop	{r4, pc}
    68ac:	20000124 	.word	0x20000124
    68b0:	b538      	push	{r3, r4, r5, lr}
    68b2:	4604      	mov	r4, r0
    68b4:	6840      	ldr	r0, [r0, #4]
    68b6:	2301      	movs	r3, #1
    68b8:	210b      	movs	r1, #11
    68ba:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68be:	3080      	adds	r0, #128	; 0x80
    68c0:	f007 faba 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68c4:	bb60      	cbnz	r0, 6920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    68c6:	6860      	ldr	r0, [r4, #4]
    68c8:	2301      	movs	r3, #1
    68ca:	2100      	movs	r1, #0
    68cc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68d0:	3080      	adds	r0, #128	; 0x80
    68d2:	f007 fab1 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68d6:	b308      	cbz	r0, 691c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    68d8:	6860      	ldr	r0, [r4, #4]
    68da:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    68de:	2825      	cmp	r0, #37	; 0x25
    68e0:	d01e      	beq.n	6920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    68e2:	4d2a      	ldr	r5, [pc, #168]	; (698c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    68e4:	68e8      	ldr	r0, [r5, #12]
    68e6:	f007 fd92 	bl	e40e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    68ea:	b1d8      	cbz	r0, 6924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    68ec:	68e8      	ldr	r0, [r5, #12]
    68ee:	6862      	ldr	r2, [r4, #4]
    68f0:	7941      	ldrb	r1, [r0, #5]
    68f2:	f001 0107 	and.w	r1, r1, #7
    68f6:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    68fa:	7900      	ldrb	r0, [r0, #4]
    68fc:	f000 0207 	and.w	r2, r0, #7
    6900:	6860      	ldr	r0, [r4, #4]
    6902:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    6906:	6860      	ldr	r0, [r4, #4]
    6908:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    690c:	f88d 1000 	strb.w	r1, [sp]
    6910:	9900      	ldr	r1, [sp, #0]
    6912:	9100      	str	r1, [sp, #0]
    6914:	f89d 1000 	ldrb.w	r1, [sp]
    6918:	bb71      	cbnz	r1, 6978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    691a:	e008      	b.n	692e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    691c:	2001      	movs	r0, #1
    691e:	bd38      	pop	{r3, r4, r5, pc}
    6920:	2020      	movs	r0, #32
    6922:	bd38      	pop	{r3, r4, r5, pc}
    6924:	4620      	mov	r0, r4
    6926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    692a:	f7ff bf05 	b.w	6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    692e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6932:	2901      	cmp	r1, #1
    6934:	d020      	beq.n	6978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6936:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    693a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    693e:	784d      	ldrb	r5, [r1, #1]
    6940:	4295      	cmp	r5, r2
    6942:	d106      	bne.n	6952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    6944:	7809      	ldrb	r1, [r1, #0]
    6946:	4299      	cmp	r1, r3
    6948:	d103      	bne.n	6952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    694a:	2102      	movs	r1, #2
    694c:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    6950:	e012      	b.n	6978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6952:	480e      	ldr	r0, [pc, #56]	; (698c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    6954:	3010      	adds	r0, #16
    6956:	6841      	ldr	r1, [r0, #4]
    6958:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    695c:	880a      	ldrh	r2, [r1, #0]
    695e:	f820 2b02 	strh.w	r2, [r0], #2
    6962:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6966:	f800 2b01 	strb.w	r2, [r0], #1
    696a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    696e:	f800 190d 	strb.w	r1, [r0], #-13
    6972:	4907      	ldr	r1, [pc, #28]	; (6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    6974:	f007 fdff 	bl	e576 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6978:	6861      	ldr	r1, [r4, #4]
    697a:	2022      	movs	r0, #34	; 0x22
    697c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6980:	4802      	ldr	r0, [pc, #8]	; (698c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    6982:	3010      	adds	r0, #16
    6984:	f007 ff39 	bl	e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6988:	2000      	movs	r0, #0
    698a:	bd38      	pop	{r3, r4, r5, pc}
    698c:	20000114 	.word	0x20000114
    6990:	00007a79 	.word	0x00007a79
    6994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6998:	6845      	ldr	r5, [r0, #4]
    699a:	4604      	mov	r4, r0
    699c:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    69a0:	2821      	cmp	r0, #33	; 0x21
    69a2:	d008      	beq.n	69b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    69a4:	f05f 0600 	movs.w	r6, #0
    69a8:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    69ac:	2823      	cmp	r0, #35	; 0x23
    69ae:	d004      	beq.n	69ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    69b0:	b35e      	cbz	r6, 6a0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    69b2:	359d      	adds	r5, #157	; 0x9d
    69b4:	e002      	b.n	69bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    69b6:	2601      	movs	r6, #1
    69b8:	e7f6      	b.n	69a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    69ba:	359e      	adds	r5, #158	; 0x9e
    69bc:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    69c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
    69c4:	f007 fd2f 	bl	e426 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    69c8:	2700      	movs	r7, #0
    69ca:	b308      	cbz	r0, 6a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    69cc:	4631      	mov	r1, r6
    69ce:	f8d8 000c 	ldr.w	r0, [r8, #12]
    69d2:	f7fe ffb3 	bl	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    69d6:	b1d8      	cbz	r0, 6a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    69d8:	466a      	mov	r2, sp
    69da:	4646      	mov	r6, r8
    69dc:	6860      	ldr	r0, [r4, #4]
    69de:	f8d8 100c 	ldr.w	r1, [r8, #12]
    69e2:	f007 fb42 	bl	e06a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    69e6:	b388      	cbz	r0, 6a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    69e8:	68f0      	ldr	r0, [r6, #12]
    69ea:	f007 fd1a 	bl	e422 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    69ee:	6861      	ldr	r1, [r4, #4]
    69f0:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    69f4:	6861      	ldr	r1, [r4, #4]
    69f6:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    69fa:	f008 fecc 	bl	f796 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    69fe:	b3e8      	cbz	r0, 6a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6a00:	6861      	ldr	r1, [r4, #4]
    6a02:	2028      	movs	r0, #40	; 0x28
    6a04:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6a08:	e06e      	b.n	6ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6a0a:	2002      	movs	r0, #2
    6a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6a10:	6860      	ldr	r0, [r4, #4]
    6a12:	f04f 0900 	mov.w	r9, #0
    6a16:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a1a:	2901      	cmp	r1, #1
    6a1c:	d017      	beq.n	6a4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    6a1e:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6a22:	b306      	cbz	r6, 6a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    6a24:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a28:	6861      	ldr	r1, [r4, #4]
    6a2a:	2201      	movs	r2, #1
    6a2c:	78c0      	ldrb	r0, [r0, #3]
    6a2e:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    6a32:	4082      	lsls	r2, r0
    6a34:	6861      	ldr	r1, [r4, #4]
    6a36:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6a3a:	b160      	cbz	r0, 6a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    6a3c:	2009      	movs	r0, #9
    6a3e:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6a42:	6860      	ldr	r0, [r4, #4]
    6a44:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6a48:	b9b0      	cbnz	r0, 6a78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    6a4a:	e007      	b.n	6a5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    6a4c:	e017      	b.n	6a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    6a4e:	201e      	movs	r0, #30
    6a50:	f7ff fd58 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6a54:	e7e5      	b.n	6a22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    6a56:	f240 414b 	movw	r1, #1099	; 0x44b
    6a5a:	e001      	b.n	6a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    6a5c:	f240 4153 	movw	r1, #1107	; 0x453
    6a60:	2031      	movs	r0, #49	; 0x31
    6a62:	f7fa fb6f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a66:	4826      	ldr	r0, [pc, #152]	; (6b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6a68:	702f      	strb	r7, [r5, #0]
    6a6a:	3010      	adds	r0, #16
    6a6c:	f007 fecd 	bl	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6a70:	4620      	mov	r0, r4
    6a72:	f7ff fe61 	bl	6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6a76:	4681      	mov	r9, r0
    6a78:	4648      	mov	r0, r9
    6a7a:	e7c7      	b.n	6a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6a7c:	e013      	b.n	6aa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    6a7e:	6860      	ldr	r0, [r4, #4]
    6a80:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a84:	2901      	cmp	r1, #1
    6a86:	d009      	beq.n	6a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    6a88:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6a8c:	6860      	ldr	r0, [r4, #4]
    6a8e:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6a92:	42a9      	cmp	r1, r5
    6a94:	d11b      	bne.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6a96:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6a9a:	e018      	b.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6a9c:	2000      	movs	r0, #0
    6a9e:	f7ff fd31 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6aa2:	702f      	strb	r7, [r5, #0]
    6aa4:	e7f2      	b.n	6a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    6aa6:	6860      	ldr	r0, [r4, #4]
    6aa8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6aac:	290d      	cmp	r1, #13
    6aae:	d018      	beq.n	6ae2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ab0:	290b      	cmp	r1, #11
    6ab2:	d016      	beq.n	6ae2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ab4:	290a      	cmp	r1, #10
    6ab6:	d014      	beq.n	6ae2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ab8:	f89d 1000 	ldrb.w	r1, [sp]
    6abc:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6ac0:	6861      	ldr	r1, [r4, #4]
    6ac2:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6ac6:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6aca:	2025      	movs	r0, #37	; 0x25
    6acc:	7028      	strb	r0, [r5, #0]
    6ace:	6860      	ldr	r0, [r4, #4]
    6ad0:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6ad4:	42a9      	cmp	r1, r5
    6ad6:	d10e      	bne.n	6af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6ad8:	4809      	ldr	r0, [pc, #36]	; (6b00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6ada:	3010      	adds	r0, #16
    6adc:	f007 fe95 	bl	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6ae0:	e00b      	b.n	6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    6ae2:	212a      	movs	r1, #42	; 0x2a
    6ae4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6ae8:	6860      	ldr	r0, [r4, #4]
    6aea:	2202      	movs	r2, #2
    6aec:	4905      	ldr	r1, [pc, #20]	; (6b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6aee:	30b4      	adds	r0, #180	; 0xb4
    6af0:	f007 fd4a 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6af4:	e7eb      	b.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6af6:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6afa:	2000      	movs	r0, #0
    6afc:	e786      	b.n	6a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6afe:	0000      	.short	0x0000
    6b00:	20000114 	.word	0x20000114
    6b04:	0000e845 	.word	0x0000e845
    6b08:	b570      	push	{r4, r5, r6, lr}
    6b0a:	4604      	mov	r4, r0
    6b0c:	6840      	ldr	r0, [r0, #4]
    6b0e:	4d0a      	ldr	r5, [pc, #40]	; (6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6b10:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6b14:	f041 0104 	orr.w	r1, r1, #4
    6b18:	7001      	strb	r1, [r0, #0]
    6b1a:	68e8      	ldr	r0, [r5, #12]
    6b1c:	f007 fc97 	bl	e44e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6b20:	4606      	mov	r6, r0
    6b22:	68e8      	ldr	r0, [r5, #12]
    6b24:	f007 fc97 	bl	e456 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6b28:	4601      	mov	r1, r0
    6b2a:	4622      	mov	r2, r4
    6b2c:	4630      	mov	r0, r6
    6b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b32:	f000 b893 	b.w	6c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    6b36:	0000      	.short	0x0000
    6b38:	20000114 	.word	0x20000114
    6b3c:	4602      	mov	r2, r0
    6b3e:	4813      	ldr	r0, [pc, #76]	; (6b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6b40:	68c0      	ldr	r0, [r0, #12]
    6b42:	7901      	ldrb	r1, [r0, #4]
    6b44:	4811      	ldr	r0, [pc, #68]	; (6b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6b46:	3010      	adds	r0, #16
    6b48:	6843      	ldr	r3, [r0, #4]
    6b4a:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6b4e:	2821      	cmp	r0, #33	; 0x21
    6b50:	d010      	beq.n	6b74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    6b52:	282e      	cmp	r0, #46	; 0x2e
    6b54:	d00e      	beq.n	6b74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    6b56:	2828      	cmp	r0, #40	; 0x28
    6b58:	d00e      	beq.n	6b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    6b5a:	2804      	cmp	r0, #4
    6b5c:	d00e      	beq.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    6b5e:	280f      	cmp	r0, #15
    6b60:	d00e      	beq.n	6b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    6b62:	281d      	cmp	r0, #29
    6b64:	d00e      	beq.n	6b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6b66:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6b6a:	2823      	cmp	r0, #35	; 0x23
    6b6c:	d00c      	beq.n	6b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6b6e:	20fe      	movs	r0, #254	; 0xfe
    6b70:	f000 b874 	b.w	6c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    6b74:	2016      	movs	r0, #22
    6b76:	e7fb      	b.n	6b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b78:	2023      	movs	r0, #35	; 0x23
    6b7a:	e7f9      	b.n	6b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b7c:	200e      	movs	r0, #14
    6b7e:	e7f7      	b.n	6b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b80:	2012      	movs	r0, #18
    6b82:	e7f5      	b.n	6b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b84:	2014      	movs	r0, #20
    6b86:	e7f3      	b.n	6b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b88:	2017      	movs	r0, #23
    6b8a:	e7f1      	b.n	6b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b8c:	20000114 	.word	0x20000114
    6b90:	b510      	push	{r4, lr}
    6b92:	4604      	mov	r4, r0
    6b94:	6840      	ldr	r0, [r0, #4]
    6b96:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6b9a:	2818      	cmp	r0, #24
    6b9c:	d001      	beq.n	6ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    6b9e:	2002      	movs	r0, #2
    6ba0:	bd10      	pop	{r4, pc}
    6ba2:	4804      	ldr	r0, [pc, #16]	; (6bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    6ba4:	f007 fe31 	bl	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6ba8:	6861      	ldr	r1, [r4, #4]
    6baa:	201c      	movs	r0, #28
    6bac:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6bb0:	2000      	movs	r0, #0
    6bb2:	bd10      	pop	{r4, pc}
    6bb4:	20000124 	.word	0x20000124
    6bb8:	4901      	ldr	r1, [pc, #4]	; (6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6bba:	68c9      	ldr	r1, [r1, #12]
    6bbc:	f007 be64 	b.w	e888 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6bc0:	20000114 	.word	0x20000114
    6bc4:	b570      	push	{r4, r5, r6, lr}
    6bc6:	4604      	mov	r4, r0
    6bc8:	481f      	ldr	r0, [pc, #124]	; (6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6bca:	2500      	movs	r5, #0
    6bcc:	68c0      	ldr	r0, [r0, #12]
    6bce:	7903      	ldrb	r3, [r0, #4]
    6bd0:	6860      	ldr	r0, [r4, #4]
    6bd2:	2b16      	cmp	r3, #22
    6bd4:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6bd8:	d013      	beq.n	6c02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6bda:	dc06      	bgt.n	6bea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6bdc:	2b0e      	cmp	r3, #14
    6bde:	d009      	beq.n	6bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6be0:	2b12      	cmp	r3, #18
    6be2:	d007      	beq.n	6bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6be4:	2b14      	cmp	r3, #20
    6be6:	d12c      	bne.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6be8:	e004      	b.n	6bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6bea:	2b17      	cmp	r3, #23
    6bec:	d002      	beq.n	6bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6bee:	2b23      	cmp	r3, #35	; 0x23
    6bf0:	d127      	bne.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6bf2:	e01f      	b.n	6c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    6bf4:	4622      	mov	r2, r4
    6bf6:	2101      	movs	r1, #1
    6bf8:	4618      	mov	r0, r3
    6bfa:	f000 f9c5 	bl	6f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6bfe:	4605      	mov	r5, r0
    6c00:	e01f      	b.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c02:	2821      	cmp	r0, #33	; 0x21
    6c04:	d001      	beq.n	6c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    6c06:	282e      	cmp	r0, #46	; 0x2e
    6c08:	d11b      	bne.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c0a:	4620      	mov	r0, r4
    6c0c:	f007 fe11 	bl	e832 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6c10:	6860      	ldr	r0, [r4, #4]
    6c12:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6c16:	2922      	cmp	r1, #34	; 0x22
    6c18:	d013      	beq.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c1a:	2108      	movs	r1, #8
    6c1c:	30ec      	adds	r0, #236	; 0xec
    6c1e:	f008 fd66 	bl	f6ee <__kernel_ram_size+0x1ce>
    6c22:	6860      	ldr	r0, [r4, #4]
    6c24:	210b      	movs	r1, #11
    6c26:	30ec      	adds	r0, #236	; 0xec
    6c28:	f008 fd61 	bl	f6ee <__kernel_ram_size+0x1ce>
    6c2c:	201a      	movs	r0, #26
    6c2e:	f7ff fc69 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6c32:	e006      	b.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c34:	2828      	cmp	r0, #40	; 0x28
    6c36:	d104      	bne.n	6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c38:	4804      	ldr	r0, [pc, #16]	; (6c4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6c3a:	6801      	ldr	r1, [r0, #0]
    6c3c:	b109      	cbz	r1, 6c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c3e:	4620      	mov	r0, r4
    6c40:	4788      	blx	r1
    6c42:	4628      	mov	r0, r5
    6c44:	bd70      	pop	{r4, r5, r6, pc}
    6c46:	0000      	.short	0x0000
    6c48:	20000114 	.word	0x20000114
    6c4c:	20000290 	.word	0x20000290
    6c50:	4901      	ldr	r1, [pc, #4]	; (6c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    6c52:	68c9      	ldr	r1, [r1, #12]
    6c54:	f7fc bd40 	b.w	36d8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6c58:	20000114 	.word	0x20000114
    6c5c:	4603      	mov	r3, r0
    6c5e:	2000      	movs	r0, #0
    6c60:	2b17      	cmp	r3, #23
    6c62:	d017      	beq.n	6c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c64:	dc0a      	bgt.n	6c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    6c66:	2b0e      	cmp	r3, #14
    6c68:	d014      	beq.n	6c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c6a:	2b12      	cmp	r3, #18
    6c6c:	d012      	beq.n	6c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c6e:	2b14      	cmp	r3, #20
    6c70:	d010      	beq.n	6c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c72:	2b16      	cmp	r3, #22
    6c74:	d112      	bne.n	6c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c76:	4608      	mov	r0, r1
    6c78:	f7ff bc4a 	b.w	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    6c7c:	2b23      	cmp	r3, #35	; 0x23
    6c7e:	d003      	beq.n	6c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6c80:	2b24      	cmp	r3, #36	; 0x24
    6c82:	d001      	beq.n	6c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6c84:	2b25      	cmp	r3, #37	; 0x25
    6c86:	d109      	bne.n	6c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c88:	4a05      	ldr	r2, [pc, #20]	; (6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    6c8a:	6812      	ldr	r2, [r2, #0]
    6c8c:	2a00      	cmp	r2, #0
    6c8e:	d005      	beq.n	6c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c90:	4618      	mov	r0, r3
    6c92:	4710      	bx	r2
    6c94:	2100      	movs	r1, #0
    6c96:	4618      	mov	r0, r3
    6c98:	f000 b976 	b.w	6f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6c9c:	4770      	bx	lr
    6c9e:	0000      	.short	0x0000
    6ca0:	20000288 	.word	0x20000288
    6ca4:	b510      	push	{r4, lr}
    6ca6:	6841      	ldr	r1, [r0, #4]
    6ca8:	4604      	mov	r4, r0
    6caa:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6cae:	06c2      	lsls	r2, r0, #27
    6cb0:	d402      	bmi.n	6cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    6cb2:	f240 71db 	movw	r1, #2011	; 0x7db
    6cb6:	e003      	b.n	6cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6cb8:	0682      	lsls	r2, r0, #26
    6cba:	d504      	bpl.n	6cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6cbc:	f240 71dc 	movw	r1, #2012	; 0x7dc
    6cc0:	2031      	movs	r0, #49	; 0x31
    6cc2:	f7fa fa3f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cc6:	f020 0010 	bic.w	r0, r0, #16
    6cca:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6cce:	4804      	ldr	r0, [pc, #16]	; (6ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6cd0:	f007 fd9b 	bl	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6cd4:	6860      	ldr	r0, [r4, #4]
    6cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cda:	2105      	movs	r1, #5
    6cdc:	f7fd bf1a 	b.w	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6ce0:	20000124 	.word	0x20000124
    6ce4:	b510      	push	{r4, lr}
    6ce6:	6840      	ldr	r0, [r0, #4]
    6ce8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6cec:	292f      	cmp	r1, #47	; 0x2f
    6cee:	d006      	beq.n	6cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6cf0:	2916      	cmp	r1, #22
    6cf2:	d00c      	beq.n	6d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    6cf4:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6cf8:	2031      	movs	r0, #49	; 0x31
    6cfa:	f7fa fa23 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cfe:	2100      	movs	r1, #0
    6d00:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d08:	4803      	ldr	r0, [pc, #12]	; (6d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6d0a:	f007 bd7e 	b.w	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6d0e:	211a      	movs	r1, #26
    6d10:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6d14:	bd10      	pop	{r4, pc}
    6d16:	0000      	.short	0x0000
    6d18:	20000124 	.word	0x20000124
    6d1c:	b570      	push	{r4, r5, r6, lr}
    6d1e:	4604      	mov	r4, r0
    6d20:	6840      	ldr	r0, [r0, #4]
    6d22:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d26:	291c      	cmp	r1, #28
    6d28:	d004      	beq.n	6d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    6d2a:	f240 71b6 	movw	r1, #1974	; 0x7b6
    6d2e:	2031      	movs	r0, #49	; 0x31
    6d30:	f7fa fa08 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d34:	2500      	movs	r5, #0
    6d36:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6d3a:	6860      	ldr	r0, [r4, #4]
    6d3c:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6d40:	b161      	cbz	r1, 6d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6d42:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6d46:	6860      	ldr	r0, [r4, #4]
    6d48:	2202      	movs	r2, #2
    6d4a:	8801      	ldrh	r1, [r0, #0]
    6d4c:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d50:	6860      	ldr	r0, [r4, #4]
    6d52:	490d      	ldr	r1, [pc, #52]	; (6d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    6d54:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d58:	6860      	ldr	r0, [r4, #4]
    6d5a:	e00c      	b.n	6d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    6d5c:	8801      	ldrh	r1, [r0, #0]
    6d5e:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d62:	6860      	ldr	r0, [r4, #4]
    6d64:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d68:	6861      	ldr	r1, [r4, #4]
    6d6a:	2001      	movs	r0, #1
    6d6c:	2202      	movs	r2, #2
    6d6e:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6d72:	4906      	ldr	r1, [pc, #24]	; (6d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    6d74:	6860      	ldr	r0, [r4, #4]
    6d76:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6d7a:	f007 fc05 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6d7e:	6860      	ldr	r0, [r4, #4]
    6d80:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6d84:	bd70      	pop	{r4, r5, r6, pc}
    6d86:	0000      	.short	0x0000
    6d88:	0000e9d3 	.word	0x0000e9d3
    6d8c:	0000e9b5 	.word	0x0000e9b5
    6d90:	4916      	ldr	r1, [pc, #88]	; (6dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6d92:	b510      	push	{r4, lr}
    6d94:	6889      	ldr	r1, [r1, #8]
    6d96:	790a      	ldrb	r2, [r1, #4]
    6d98:	6841      	ldr	r1, [r0, #4]
    6d9a:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6d9e:	2b09      	cmp	r3, #9
    6da0:	d10a      	bne.n	6db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6da2:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6da6:	4293      	cmp	r3, r2
    6da8:	d106      	bne.n	6db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6daa:	2200      	movs	r2, #0
    6dac:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6db0:	6840      	ldr	r0, [r0, #4]
    6db2:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6db6:	bd10      	pop	{r4, pc}
    6db8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6dbc:	071c      	lsls	r4, r3, #28
    6dbe:	d509      	bpl.n	6dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6dc0:	f023 0008 	bic.w	r0, r3, #8
    6dc4:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6dc8:	4808      	ldr	r0, [pc, #32]	; (6dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dce:	3010      	adds	r0, #16
    6dd0:	f007 bd1b 	b.w	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6dd4:	2aff      	cmp	r2, #255	; 0xff
    6dd6:	d004      	beq.n	6de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6dd8:	f240 7151 	movw	r1, #1873	; 0x751
    6ddc:	2031      	movs	r0, #49	; 0x31
    6dde:	f7fa f9b1 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6de6:	f008 bd2d 	b.w	f844 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6dea:	0000      	.short	0x0000
    6dec:	20000114 	.word	0x20000114
    6df0:	4808      	ldr	r0, [pc, #32]	; (6e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    6df2:	b510      	push	{r4, lr}
    6df4:	6840      	ldr	r0, [r0, #4]
    6df6:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6dfa:	b941      	cbnz	r1, 6e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6dfc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6e00:	2301      	movs	r3, #1
    6e02:	2106      	movs	r1, #6
    6e04:	3080      	adds	r0, #128	; 0x80
    6e06:	f007 f817 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e0a:	2800      	cmp	r0, #0
    6e0c:	d000      	beq.n	6e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6e0e:	2001      	movs	r0, #1
    6e10:	bd10      	pop	{r4, pc}
    6e12:	0000      	.short	0x0000
    6e14:	20000124 	.word	0x20000124
    6e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e1a:	4c59      	ldr	r4, [pc, #356]	; (6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6e1c:	4606      	mov	r6, r0
    6e1e:	4615      	mov	r5, r2
    6e20:	6860      	ldr	r0, [r4, #4]
    6e22:	2200      	movs	r2, #0
    6e24:	b111      	cbz	r1, 6e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    6e26:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6e2a:	e006      	b.n	6e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    6e2c:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6e30:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6e34:	4411      	add	r1, r2
    6e36:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6e3a:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6e3e:	f88d 1000 	strb.w	r1, [sp]
    6e42:	9900      	ldr	r1, [sp, #0]
    6e44:	9100      	str	r1, [sp, #0]
    6e46:	f89d 1000 	ldrb.w	r1, [sp]
    6e4a:	b939      	cbnz	r1, 6e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    6e4c:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6e50:	2301      	movs	r3, #1
    6e52:	4619      	mov	r1, r3
    6e54:	3080      	adds	r0, #128	; 0x80
    6e56:	f006 ffef 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e5a:	b130      	cbz	r0, 6e6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    6e5c:	6860      	ldr	r0, [r4, #4]
    6e5e:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6e62:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6e66:	4411      	add	r1, r2
    6e68:	8001      	strh	r1, [r0, #0]
    6e6a:	6860      	ldr	r0, [r4, #4]
    6e6c:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6e70:	b132      	cbz	r2, 6e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6e72:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6e76:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6e7a:	4419      	add	r1, r3
    6e7c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6e80:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6e84:	2b00      	cmp	r3, #0
    6e86:	dd06      	ble.n	6e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    6e88:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6e8c:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6e90:	4439      	add	r1, r7
    6e92:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6e96:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6e9a:	bb09      	cbnz	r1, 6ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6e9c:	b9be      	cbnz	r6, 6ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    6e9e:	4938      	ldr	r1, [pc, #224]	; (6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6ea0:	3910      	subs	r1, #16
    6ea2:	7809      	ldrb	r1, [r1, #0]
    6ea4:	2902      	cmp	r1, #2
    6ea6:	d006      	beq.n	6eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6ea8:	2901      	cmp	r1, #1
    6eaa:	d00a      	beq.n	6ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6eac:	b1f5      	cbz	r5, 6eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    6eae:	06e9      	lsls	r1, r5, #27
    6eb0:	d50b      	bpl.n	6eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    6eb2:	211e      	movs	r1, #30
    6eb4:	e042      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6eb6:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6eba:	2906      	cmp	r1, #6
    6ebc:	d03e      	beq.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ebe:	2116      	movs	r1, #22
    6ec0:	e03c      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ec2:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6ec6:	b959      	cbnz	r1, 6ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6ec8:	e054      	b.n	6f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6eca:	0729      	lsls	r1, r5, #28
    6ecc:	d501      	bpl.n	6ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6ece:	213d      	movs	r1, #61	; 0x3d
    6ed0:	e034      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ed2:	06a9      	lsls	r1, r5, #26
    6ed4:	d501      	bpl.n	6eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6ed6:	2123      	movs	r1, #35	; 0x23
    6ed8:	e030      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6eda:	07a9      	lsls	r1, r5, #30
    6edc:	d001      	beq.n	6ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6ede:	212a      	movs	r1, #42	; 0x2a
    6ee0:	e02c      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ee2:	f640 51a3 	movw	r1, #3491	; 0xda3
    6ee6:	2031      	movs	r0, #49	; 0x31
    6ee8:	f7fa f92c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eec:	b12a      	cbz	r2, 6efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6eee:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6ef2:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6ef6:	4291      	cmp	r1, r2
    6ef8:	d216      	bcs.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6efa:	2b00      	cmp	r3, #0
    6efc:	dd05      	ble.n	6f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6efe:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6f02:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f06:	4291      	cmp	r1, r2
    6f08:	d20e      	bcs.n	6f28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6f0a:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6f0e:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6f12:	428a      	cmp	r2, r1
    6f14:	d30a      	bcc.n	6f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6f16:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6f1a:	f88d 2000 	strb.w	r2, [sp]
    6f1e:	9a00      	ldr	r2, [sp, #0]
    6f20:	9200      	str	r2, [sp, #0]
    6f22:	f89d 2000 	ldrb.w	r2, [sp]
    6f26:	b10a      	cbz	r2, 6f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6f28:	2122      	movs	r1, #34	; 0x22
    6f2a:	e007      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f2c:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6f30:	b172      	cbz	r2, 6f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f32:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6f36:	428a      	cmp	r2, r1
    6f38:	d31c      	bcc.n	6f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f3a:	2108      	movs	r1, #8
    6f3c:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6f40:	f88d 2000 	strb.w	r2, [sp]
    6f44:	9a00      	ldr	r2, [sp, #0]
    6f46:	9200      	str	r2, [sp, #0]
    6f48:	f89d 2000 	ldrb.w	r2, [sp]
    6f4c:	b96a      	cbnz	r2, 6f6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    6f4e:	e005      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    6f50:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6f54:	2906      	cmp	r1, #6
    6f56:	d30d      	bcc.n	6f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f58:	213e      	movs	r1, #62	; 0x3e
    6f5a:	e7ef      	b.n	6f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f5c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6f60:	2202      	movs	r2, #2
    6f62:	4908      	ldr	r1, [pc, #32]	; (6f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    6f64:	30b4      	adds	r0, #180	; 0xb4
    6f66:	f007 fb0f 	bl	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6f6a:	6860      	ldr	r0, [r4, #4]
    6f6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f70:	f008 bbe1 	b.w	f736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f78:	2100      	movs	r1, #0
    6f7a:	f7fd bdcb 	b.w	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6f7e:	0000      	.short	0x0000
    6f80:	20000124 	.word	0x20000124
    6f84:	0000e845 	.word	0x0000e845
    6f88:	b570      	push	{r4, r5, r6, lr}
    6f8a:	4614      	mov	r4, r2
    6f8c:	460e      	mov	r6, r1
    6f8e:	6861      	ldr	r1, [r4, #4]
    6f90:	4602      	mov	r2, r0
    6f92:	2500      	movs	r5, #0
    6f94:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6f98:	2a0e      	cmp	r2, #14
    6f9a:	d00a      	beq.n	6fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6f9c:	2a12      	cmp	r2, #18
    6f9e:	d011      	beq.n	6fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    6fa0:	2a14      	cmp	r2, #20
    6fa2:	d016      	beq.n	6fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6fa4:	2a17      	cmp	r2, #23
    6fa6:	d023      	beq.n	6ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6fa8:	f240 31dd 	movw	r1, #989	; 0x3dd
    6fac:	2031      	movs	r0, #49	; 0x31
    6fae:	f7fa f8c9 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fb2:	2804      	cmp	r0, #4
    6fb4:	d131      	bne.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6fb6:	4620      	mov	r0, r4
    6fb8:	f007 fc3b 	bl	e832 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6fbc:	4620      	mov	r0, r4
    6fbe:	f7fc fb6d 	bl	369c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    6fc2:	e02a      	b.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6fc4:	280f      	cmp	r0, #15
    6fc6:	d128      	bne.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6fc8:	4620      	mov	r0, r4
    6fca:	f007 fd8f 	bl	eaec <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6fce:	4605      	mov	r5, r0
    6fd0:	e023      	b.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6fd2:	281d      	cmp	r0, #29
    6fd4:	d121      	bne.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6fd6:	4620      	mov	r0, r4
    6fd8:	f007 fc2b 	bl	e832 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6fdc:	b126      	cbz	r6, 6fe8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6fde:	6860      	ldr	r0, [r4, #4]
    6fe0:	2105      	movs	r1, #5
    6fe2:	30ec      	adds	r0, #236	; 0xec
    6fe4:	f008 fb83 	bl	f6ee <__kernel_ram_size+0x1ce>
    6fe8:	480d      	ldr	r0, [pc, #52]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    6fea:	f007 fcd3 	bl	e994 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6fee:	e014      	b.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6ff0:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    6ff4:	2823      	cmp	r0, #35	; 0x23
    6ff6:	d110      	bne.n	701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    6ff8:	2600      	movs	r6, #0
    6ffa:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    6ffe:	4808      	ldr	r0, [pc, #32]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7000:	f007 fc03 	bl	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7004:	6860      	ldr	r0, [r4, #4]
    7006:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    700a:	2801      	cmp	r0, #1
    700c:	d102      	bne.n	7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    700e:	2000      	movs	r0, #0
    7010:	f7ff fa78 	bl	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    7014:	6860      	ldr	r0, [r4, #4]
    7016:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    701a:	4628      	mov	r0, r5
    701c:	bd70      	pop	{r4, r5, r6, pc}
    701e:	0000      	.short	0x0000
    7020:	20000124 	.word	0x20000124
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	4d2e      	ldr	r5, [pc, #184]	; (70e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>)
    7028:	6868      	ldr	r0, [r5, #4]
    702a:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    702e:	b151      	cbz	r1, 7046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    7030:	2901      	cmp	r1, #1
    7032:	d008      	beq.n	7046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    7034:	2902      	cmp	r1, #2
    7036:	d009      	beq.n	704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    7038:	2903      	cmp	r1, #3
    703a:	d007      	beq.n	704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
    703c:	f640 4118 	movw	r1, #3096	; 0xc18
    7040:	2031      	movs	r0, #49	; 0x31
    7042:	f7fa f87f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7046:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    704a:	e037      	b.n	70bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    704c:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    7050:	2907      	cmp	r1, #7
    7052:	d036      	beq.n	70c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
    7054:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    7058:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    705c:	2400      	movs	r4, #0
    705e:	1c93      	adds	r3, r2, #2
    7060:	4299      	cmp	r1, r3
    7062:	d306      	bcc.n	7072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    7064:	1a89      	subs	r1, r1, r2
    7066:	1e89      	subs	r1, r1, #2
    7068:	040c      	lsls	r4, r1, #16
    706a:	0c24      	lsrs	r4, r4, #16
    706c:	d001      	beq.n	7072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
    706e:	1e64      	subs	r4, r4, #1
    7070:	b2a4      	uxth	r4, r4
    7072:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    7076:	b139      	cbz	r1, 7088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    7078:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    707c:	2301      	movs	r3, #1
    707e:	2109      	movs	r1, #9
    7080:	3080      	adds	r0, #128	; 0x80
    7082:	f006 fed9 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7086:	b340      	cbz	r0, 70da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda>
    7088:	f7ff feb2 	bl	6df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    708c:	b178      	cbz	r0, 70ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae>
    708e:	686a      	ldr	r2, [r5, #4]
    7090:	2000      	movs	r0, #0
    7092:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    7096:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    709a:	1c93      	adds	r3, r2, #2
    709c:	4299      	cmp	r1, r3
    709e:	d303      	bcc.n	70a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    70a0:	1a88      	subs	r0, r1, r2
    70a2:	1e80      	subs	r0, r0, #2
    70a4:	d000      	beq.n	70a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    70a6:	1e40      	subs	r0, r0, #1
    70a8:	42a0      	cmp	r0, r4
    70aa:	d200      	bcs.n	70ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae>
    70ac:	b284      	uxth	r4, r0
    70ae:	b10c      	cbz	r4, 70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>
    70b0:	1e64      	subs	r4, r4, #1
    70b2:	b2a4      	uxth	r4, r4
    70b4:	6868      	ldr	r0, [r5, #4]
    70b6:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    70ba:	4421      	add	r1, r4
    70bc:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    70c0:	bd70      	pop	{r4, r5, r6, pc}
    70c2:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    70c6:	2903      	cmp	r1, #3
    70c8:	d3bd      	bcc.n	7046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    70ca:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    70ce:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    70d0:	4411      	add	r1, r2
    70d2:	1c49      	adds	r1, r1, #1
    70d4:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    70d8:	bd70      	pop	{r4, r5, r6, pc}
    70da:	2400      	movs	r4, #0
    70dc:	e7ea      	b.n	70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>
    70de:	0000      	.short	0x0000
    70e0:	20000124 	.word	0x20000124

000070e4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    70e4:	b570      	push	{r4, r5, r6, lr}
    70e6:	6844      	ldr	r4, [r0, #4]
    70e8:	220d      	movs	r2, #13
    70ea:	f504 7598 	add.w	r5, r4, #304	; 0x130
    70ee:	2100      	movs	r1, #0
    70f0:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    70f4:	f009 fe4d 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    70f8:	f44f 70a3 	mov.w	r0, #326	; 0x146
    70fc:	2100      	movs	r1, #0
    70fe:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    7102:	5501      	strb	r1, [r0, r4]
    7104:	f8a5 1017 	strh.w	r1, [r5, #23]
    7108:	7669      	strb	r1, [r5, #25]
    710a:	4608      	mov	r0, r1
    710c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    7110:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7114:	1c40      	adds	r0, r0, #1
    7116:	b2c0      	uxtb	r0, r0
    7118:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    711c:	2802      	cmp	r0, #2
    711e:	d3f7      	bcc.n	7110 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    7120:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7124:	4620      	mov	r0, r4
    7126:	f008 fc4d 	bl	f9c4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    712a:	2000      	movs	r0, #0
    712c:	21ff      	movs	r1, #255	; 0xff
    712e:	1822      	adds	r2, r4, r0
    7130:	1c40      	adds	r0, r0, #1
    7132:	b2c0      	uxtb	r0, r0
    7134:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    7138:	2802      	cmp	r0, #2
    713a:	d3f8      	bcc.n	712e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    713c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007140 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7140:	4903      	ldr	r1, [pc, #12]	; (7150 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    7142:	884a      	ldrh	r2, [r1, #2]
    7144:	8002      	strh	r2, [r0, #0]
    7146:	7809      	ldrb	r1, [r1, #0]
    7148:	7081      	strb	r1, [r0, #2]
    714a:	2000      	movs	r0, #0
    714c:	4770      	bx	lr
    714e:	0000      	.short	0x0000
    7150:	20001190 	.word	0x20001190

00007154 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    7154:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7156:	460c      	mov	r4, r1
    7158:	4605      	mov	r5, r0
    715a:	8800      	ldrh	r0, [r0, #0]
    715c:	4669      	mov	r1, sp
    715e:	f006 fe54 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7162:	2200      	movs	r2, #0
    7164:	b128      	cbz	r0, 7172 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    7166:	f8c4 2002 	str.w	r2, [r4, #2]
    716a:	71a2      	strb	r2, [r4, #6]
    716c:	8022      	strh	r2, [r4, #0]
    716e:	2002      	movs	r0, #2
    7170:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7172:	9901      	ldr	r1, [sp, #4]
    7174:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    7178:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    717c:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7180:	f8c4 0002 	str.w	r0, [r4, #2]
    7184:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7188:	71a0      	strb	r0, [r4, #6]
    718a:	8828      	ldrh	r0, [r5, #0]
    718c:	8020      	strh	r0, [r4, #0]
    718e:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    7192:	f88d 0008 	strb.w	r0, [sp, #8]
    7196:	9802      	ldr	r0, [sp, #8]
    7198:	9002      	str	r0, [sp, #8]
    719a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    719e:	2800      	cmp	r0, #0
    71a0:	d1ea      	bne.n	7178 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    71a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000071a4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    71a4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    71a6:	460d      	mov	r5, r1
    71a8:	4606      	mov	r6, r0
    71aa:	8800      	ldrh	r0, [r0, #0]
    71ac:	4669      	mov	r1, sp
    71ae:	f006 fe2c 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71b2:	2800      	cmp	r0, #0
    71b4:	d11a      	bne.n	71ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    71b6:	f8dd 4004 	ldr.w	r4, [sp, #4]
    71ba:	2700      	movs	r7, #0
    71bc:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    71c0:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    71c4:	f009 f8fa 	bl	103bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    71c8:	70a8      	strb	r0, [r5, #2]
    71ca:	7860      	ldrb	r0, [r4, #1]
    71cc:	f009 f8f6 	bl	103bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    71d0:	70e8      	strb	r0, [r5, #3]
    71d2:	78a0      	ldrb	r0, [r4, #2]
    71d4:	f88d 0008 	strb.w	r0, [sp, #8]
    71d8:	9802      	ldr	r0, [sp, #8]
    71da:	9002      	str	r0, [sp, #8]
    71dc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71e0:	3c6a      	subs	r4, #106	; 0x6a
    71e2:	2800      	cmp	r0, #0
    71e4:	d1ea      	bne.n	71bc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    71e6:	8830      	ldrh	r0, [r6, #0]
    71e8:	8028      	strh	r0, [r5, #0]
    71ea:	2000      	movs	r0, #0
    71ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000071f0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    71f0:	4903      	ldr	r1, [pc, #12]	; (7200 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    71f2:	888a      	ldrh	r2, [r1, #4]
    71f4:	8002      	strh	r2, [r0, #0]
    71f6:	88c9      	ldrh	r1, [r1, #6]
    71f8:	8041      	strh	r1, [r0, #2]
    71fa:	2000      	movs	r0, #0
    71fc:	4770      	bx	lr
    71fe:	0000      	.short	0x0000
    7200:	2000029c 	.word	0x2000029c

00007204 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7204:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7206:	2400      	movs	r4, #0
    7208:	a902      	add	r1, sp, #8
    720a:	f88d 4004 	strb.w	r4, [sp, #4]
    720e:	f88d 4008 	strb.w	r4, [sp, #8]
    7212:	9100      	str	r1, [sp, #0]
    7214:	7882      	ldrb	r2, [r0, #2]
    7216:	7841      	ldrb	r1, [r0, #1]
    7218:	7800      	ldrb	r0, [r0, #0]
    721a:	ab01      	add	r3, sp, #4
    721c:	f009 fa42 	bl	106a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    7220:	2800      	cmp	r0, #0
    7222:	d112      	bne.n	724a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7224:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7228:	f009 f97c 	bl	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    722c:	b170      	cbz	r0, 724c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    722e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7232:	f009 f977 	bl	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7236:	b148      	cbz	r0, 724c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7238:	4805      	ldr	r0, [pc, #20]	; (7250 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    723a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    723e:	7381      	strb	r1, [r0, #14]
    7240:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7244:	73c1      	strb	r1, [r0, #15]
    7246:	8204      	strh	r4, [r0, #16]
    7248:	2000      	movs	r0, #0
    724a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    724c:	2011      	movs	r0, #17
    724e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7250:	20001190 	.word	0x20001190

00007254 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    7254:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7258:	460f      	mov	r7, r1
    725a:	4605      	mov	r5, r0
    725c:	7806      	ldrb	r6, [r0, #0]
    725e:	f009 f914 	bl	1048a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    7262:	2800      	cmp	r0, #0
    7264:	d10e      	bne.n	7284 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7266:	4628      	mov	r0, r5
    7268:	f009 f8e9 	bl	1043e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    726c:	2800      	cmp	r0, #0
    726e:	d109      	bne.n	7284 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7270:	2101      	movs	r1, #1
    7272:	4630      	mov	r0, r6
    7274:	f7fa fa94 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7278:	0004      	movs	r4, r0
    727a:	d005      	beq.n	7288 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    727c:	f007 ff5c 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7280:	b170      	cbz	r0, 72a0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    7282:	200c      	movs	r0, #12
    7284:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7288:	2101      	movs	r1, #1
    728a:	4630      	mov	r0, r6
    728c:	f7fa fa50 	bl	1730 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    7290:	0004      	movs	r4, r0
    7292:	d013      	beq.n	72bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    7294:	4817      	ldr	r0, [pc, #92]	; (72f4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    7296:	f990 1000 	ldrsb.w	r1, [r0]
    729a:	4620      	mov	r0, r4
    729c:	f007 fd21 	bl	ece2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    72a0:	4620      	mov	r0, r4
    72a2:	f007 fd89 	bl	edb8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    72a6:	7038      	strb	r0, [r7, #0]
    72a8:	74e8      	strb	r0, [r5, #19]
    72aa:	4629      	mov	r1, r5
    72ac:	4620      	mov	r0, r4
    72ae:	f7fc fc57 	bl	3b60 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    72b2:	4606      	mov	r6, r0
    72b4:	7e68      	ldrb	r0, [r5, #25]
    72b6:	b1d0      	cbz	r0, 72ee <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    72b8:	b12e      	cbz	r6, 72c6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    72ba:	e018      	b.n	72ee <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    72bc:	f241 512e 	movw	r1, #5422	; 0x152e
    72c0:	2039      	movs	r0, #57	; 0x39
    72c2:	f7f9 ff3f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72c6:	2200      	movs	r2, #0
    72c8:	4668      	mov	r0, sp
    72ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    72cc:	f006 fbe0 	bl	da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    72d0:	2200      	movs	r2, #0
    72d2:	2101      	movs	r1, #1
    72d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    72d6:	f006 fc55 	bl	db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    72da:	2204      	movs	r2, #4
    72dc:	4668      	mov	r0, sp
    72de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    72e0:	f006 fbd6 	bl	da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    72e4:	2200      	movs	r2, #0
    72e6:	4611      	mov	r1, r2
    72e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    72ea:	f006 fc4b 	bl	db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    72ee:	4630      	mov	r0, r6
    72f0:	e7c8      	b.n	7284 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    72f2:	0000      	.short	0x0000
    72f4:	20000294 	.word	0x20000294

000072f8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    72f8:	7801      	ldrb	r1, [r0, #0]
    72fa:	b171      	cbz	r1, 731a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72fc:	7841      	ldrb	r1, [r0, #1]
    72fe:	b161      	cbz	r1, 731a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7300:	8841      	ldrh	r1, [r0, #2]
    7302:	291b      	cmp	r1, #27
    7304:	d309      	bcc.n	731a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7306:	8881      	ldrh	r1, [r0, #4]
    7308:	291b      	cmp	r1, #27
    730a:	d306      	bcc.n	731a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    730c:	4904      	ldr	r1, [pc, #16]	; (7320 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    730e:	6802      	ldr	r2, [r0, #0]
    7310:	600a      	str	r2, [r1, #0]
    7312:	8880      	ldrh	r0, [r0, #4]
    7314:	8088      	strh	r0, [r1, #4]
    7316:	2000      	movs	r0, #0
    7318:	4770      	bx	lr
    731a:	2012      	movs	r0, #18
    731c:	4770      	bx	lr
    731e:	0000      	.short	0x0000
    7320:	20001190 	.word	0x20001190

00007324 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7324:	6800      	ldr	r0, [r0, #0]
    7326:	f240 41e2 	movw	r1, #1250	; 0x4e2
    732a:	4288      	cmp	r0, r1
    732c:	d303      	bcc.n	7336 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    732e:	4903      	ldr	r1, [pc, #12]	; (733c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7330:	6088      	str	r0, [r1, #8]
    7332:	2000      	movs	r0, #0
    7334:	4770      	bx	lr
    7336:	2012      	movs	r0, #18
    7338:	4770      	bx	lr
    733a:	0000      	.short	0x0000
    733c:	20001190 	.word	0x20001190

00007340 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7340:	4a03      	ldr	r2, [pc, #12]	; (7350 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    7342:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    7346:	6001      	str	r1, [r0, #0]
    7348:	6042      	str	r2, [r0, #4]
    734a:	2000      	movs	r0, #0
    734c:	4770      	bx	lr
    734e:	0000      	.short	0x0000
    7350:	0000789c 	.word	0x0000789c

00007354 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    7354:	b50e      	push	{r1, r2, r3, lr}
    7356:	8800      	ldrh	r0, [r0, #0]
    7358:	4669      	mov	r1, sp
    735a:	f006 fd56 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    735e:	b960      	cbnz	r0, 737a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7360:	9801      	ldr	r0, [sp, #4]
    7362:	f009 f95b 	bl	1061c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    7366:	b140      	cbz	r0, 737a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7368:	9801      	ldr	r0, [sp, #4]
    736a:	4601      	mov	r1, r0
    736c:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    7370:	3080      	adds	r0, #128	; 0x80
    7372:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    7376:	b962      	cbnz	r2, 7392 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7378:	e001      	b.n	737e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    737a:	2002      	movs	r0, #2
    737c:	bd0e      	pop	{r1, r2, r3, pc}
    737e:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    7382:	f88d 2008 	strb.w	r2, [sp, #8]
    7386:	9a02      	ldr	r2, [sp, #8]
    7388:	9202      	str	r2, [sp, #8]
    738a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    738e:	2201      	movs	r2, #1
    7390:	b10b      	cbz	r3, 7396 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    7392:	203a      	movs	r0, #58	; 0x3a
    7394:	bd0e      	pop	{r1, r2, r3, pc}
    7396:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    739a:	079b      	lsls	r3, r3, #30
    739c:	d006      	beq.n	73ac <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    739e:	2202      	movs	r2, #2
    73a0:	4905      	ldr	r1, [pc, #20]	; (73b8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    73a2:	305e      	adds	r0, #94	; 0x5e
    73a4:	f007 f904 	bl	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    73a8:	2000      	movs	r0, #0
    73aa:	bd0e      	pop	{r1, r2, r3, pc}
    73ac:	700a      	strb	r2, [r1, #0]
    73ae:	4668      	mov	r0, sp
    73b0:	f007 f8be 	bl	e530 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    73b4:	e7f8      	b.n	73a8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    73b6:	0000      	.short	0x0000
    73b8:	0000eb25 	.word	0x0000eb25

000073bc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    73bc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    73c0:	4613      	mov	r3, r2
    73c2:	4a33      	ldr	r2, [pc, #204]	; (7490 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    73c4:	460f      	mov	r7, r1
    73c6:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    73ca:	8814      	ldrh	r4, [r2, #0]
    73cc:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    73d0:	428c      	cmp	r4, r1
    73d2:	d200      	bcs.n	73d6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    73d4:	4621      	mov	r1, r4
    73d6:	4688      	mov	r8, r1
    73d8:	8891      	ldrh	r1, [r2, #4]
    73da:	42b1      	cmp	r1, r6
    73dc:	d200      	bcs.n	73e0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    73de:	460e      	mov	r6, r1
    73e0:	8851      	ldrh	r1, [r2, #2]
    73e2:	f640 0448 	movw	r4, #2120	; 0x848
    73e6:	42a1      	cmp	r1, r4
    73e8:	d300      	bcc.n	73ec <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    73ea:	4621      	mov	r1, r4
    73ec:	88d5      	ldrh	r5, [r2, #6]
    73ee:	42a5      	cmp	r5, r4
    73f0:	d300      	bcc.n	73f4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    73f2:	4625      	mov	r5, r4
    73f4:	42a1      	cmp	r1, r4
    73f6:	d200      	bcs.n	73fa <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    73f8:	460c      	mov	r4, r1
    73fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
    73fe:	2e1b      	cmp	r6, #27
    7400:	d001      	beq.n	7406 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    7402:	4295      	cmp	r5, r2
    7404:	d104      	bne.n	7410 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    7406:	f1b8 0f1b 	cmp.w	r8, #27
    740a:	d03e      	beq.n	748a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    740c:	4294      	cmp	r4, r2
    740e:	d03c      	beq.n	748a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7410:	466a      	mov	r2, sp
    7412:	4619      	mov	r1, r3
    7414:	f009 f8a9 	bl	1056a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7418:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    741c:	4641      	mov	r1, r8
    741e:	4540      	cmp	r0, r8
    7420:	d900      	bls.n	7424 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    7422:	4608      	mov	r0, r1
    7424:	80f8      	strh	r0, [r7, #6]
    7426:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    742a:	42a1      	cmp	r1, r4
    742c:	d800      	bhi.n	7430 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    742e:	460c      	mov	r4, r1
    7430:	813c      	strh	r4, [r7, #8]
    7432:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7436:	42b1      	cmp	r1, r6
    7438:	d800      	bhi.n	743c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    743a:	460e      	mov	r6, r1
    743c:	807e      	strh	r6, [r7, #2]
    743e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7442:	42a9      	cmp	r1, r5
    7444:	d800      	bhi.n	7448 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    7446:	460d      	mov	r5, r1
    7448:	80bd      	strh	r5, [r7, #4]
    744a:	21ff      	movs	r1, #255	; 0xff
    744c:	7039      	strb	r1, [r7, #0]
    744e:	381b      	subs	r0, #27
    7450:	28e0      	cmp	r0, #224	; 0xe0
    7452:	d902      	bls.n	745a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    7454:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    7458:	e014      	b.n	7484 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    745a:	3e1b      	subs	r6, #27
    745c:	2ee0      	cmp	r6, #224	; 0xe0
    745e:	d902      	bls.n	7466 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    7460:	f240 51b2 	movw	r1, #1458	; 0x5b2
    7464:	e00e      	b.n	7484 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7466:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    746a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    746e:	4284      	cmp	r4, r0
    7470:	d902      	bls.n	7478 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    7472:	f240 51b4 	movw	r1, #1460	; 0x5b4
    7476:	e005      	b.n	7484 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7478:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    747c:	4285      	cmp	r5, r0
    747e:	d904      	bls.n	748a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7480:	f240 51b6 	movw	r1, #1462	; 0x5b6
    7484:	2039      	movs	r0, #57	; 0x39
    7486:	f7f9 fe5d 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    748a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    748e:	0000      	.short	0x0000
    7490:	2000029c 	.word	0x2000029c

00007494 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    7494:	b570      	push	{r4, r5, r6, lr}
    7496:	b086      	sub	sp, #24
    7498:	4604      	mov	r4, r0
    749a:	f000 fa9d 	bl	79d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    749e:	0940      	lsrs	r0, r0, #5
    74a0:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    74a4:	4e2d      	ldr	r6, [pc, #180]	; (755c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    74a6:	07c0      	lsls	r0, r0, #31
    74a8:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    74ac:	d002      	beq.n	74b4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    74ae:	8871      	ldrh	r1, [r6, #2]
    74b0:	88b0      	ldrh	r0, [r6, #4]
    74b2:	e001      	b.n	74b8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    74b4:	211b      	movs	r1, #27
    74b6:	4608      	mov	r0, r1
    74b8:	84e9      	strh	r1, [r5, #38]	; 0x26
    74ba:	8528      	strh	r0, [r5, #40]	; 0x28
    74bc:	f000 fa8c 	bl	79d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    74c0:	0788      	lsls	r0, r1, #30
    74c2:	f04f 0501 	mov.w	r5, #1
    74c6:	d505      	bpl.n	74d4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    74c8:	f88d 5000 	strb.w	r5, [sp]
    74cc:	4668      	mov	r0, sp
    74ce:	9401      	str	r4, [sp, #4]
    74d0:	f7ff fe08 	bl	70e4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    74d4:	68b0      	ldr	r0, [r6, #8]
    74d6:	62e0      	str	r0, [r4, #44]	; 0x2c
    74d8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    74dc:	6121      	str	r1, [r4, #16]
    74de:	8821      	ldrh	r1, [r4, #0]
    74e0:	f8ad 1004 	strh.w	r1, [sp, #4]
    74e4:	7bb1      	ldrb	r1, [r6, #14]
    74e6:	f88d 1006 	strb.w	r1, [sp, #6]
    74ea:	7bf1      	ldrb	r1, [r6, #15]
    74ec:	f88d 1007 	strb.w	r1, [sp, #7]
    74f0:	8a31      	ldrh	r1, [r6, #16]
    74f2:	f8ad 1008 	strh.w	r1, [sp, #8]
    74f6:	a904      	add	r1, sp, #16
    74f8:	9100      	str	r1, [sp, #0]
    74fa:	4628      	mov	r0, r5
    74fc:	ab03      	add	r3, sp, #12
    74fe:	aa01      	add	r2, sp, #4
    7500:	4621      	mov	r1, r4
    7502:	f009 f868 	bl	105d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    7506:	b138      	cbz	r0, 7518 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    7508:	8820      	ldrh	r0, [r4, #0]
    750a:	2100      	movs	r1, #0
    750c:	f7fa f9ea 	bl	18e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7510:	b308      	cbz	r0, 7556 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    7512:	f240 517d 	movw	r1, #1405	; 0x57d
    7516:	e01b      	b.n	7550 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    7518:	f89d 000c 	ldrb.w	r0, [sp, #12]
    751c:	f88d 0014 	strb.w	r0, [sp, #20]
    7520:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7524:	f88d 0015 	strb.w	r0, [sp, #21]
    7528:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    752c:	f8ad 0016 	strh.w	r0, [sp, #22]
    7530:	a905      	add	r1, sp, #20
    7532:	4620      	mov	r0, r4
    7534:	f006 fd26 	bl	df84 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7538:	7870      	ldrb	r0, [r6, #1]
    753a:	9000      	str	r0, [sp, #0]
    753c:	7833      	ldrb	r3, [r6, #0]
    753e:	88b2      	ldrh	r2, [r6, #4]
    7540:	8871      	ldrh	r1, [r6, #2]
    7542:	8820      	ldrh	r0, [r4, #0]
    7544:	f7fa fa00 	bl	1948 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    7548:	2800      	cmp	r0, #0
    754a:	d005      	beq.n	7558 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    754c:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    7550:	2039      	movs	r0, #57	; 0x39
    7552:	f7f9 fdf7 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7556:	2009      	movs	r0, #9
    7558:	b006      	add	sp, #24
    755a:	bd70      	pop	{r4, r5, r6, pc}
    755c:	20001190 	.word	0x20001190

00007560 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7560:	b510      	push	{r4, lr}
    7562:	2005      	movs	r0, #5
    7564:	f000 fa2c 	bl	79c0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7568:	f7fd ff84 	bl	5474 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    756c:	4902      	ldr	r1, [pc, #8]	; (7578 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    756e:	4801      	ldr	r0, [pc, #4]	; (7574 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    7570:	6048      	str	r0, [r1, #4]
    7572:	bd10      	pop	{r4, pc}
    7574:	000073bd 	.word	0x000073bd
    7578:	20000294 	.word	0x20000294
    757c:	b51c      	push	{r2, r3, r4, lr}
    757e:	4909      	ldr	r1, [pc, #36]	; (75a4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    7580:	e9d1 0100 	ldrd	r0, r1, [r1]
    7584:	e9cd 0100 	strd	r0, r1, [sp]
    7588:	e005      	b.n	7596 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    758a:	9800      	ldr	r0, [sp, #0]
    758c:	f007 fdd4 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7590:	b108      	cbz	r0, 7596 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    7592:	2001      	movs	r0, #1
    7594:	bd1c      	pop	{r2, r3, r4, pc}
    7596:	4668      	mov	r0, sp
    7598:	f7fa f954 	bl	1844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    759c:	2800      	cmp	r0, #0
    759e:	d0f4      	beq.n	758a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    75a0:	2000      	movs	r0, #0
    75a2:	bd1c      	pop	{r2, r3, r4, pc}
    75a4:	0000789c 	.word	0x0000789c
    75a8:	b510      	push	{r4, lr}
    75aa:	480d      	ldr	r0, [pc, #52]	; (75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
    75ac:	2100      	movs	r1, #0
    75ae:	4b0d      	ldr	r3, [pc, #52]	; (75e4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
    75b0:	74c1      	strb	r1, [r0, #19]
    75b2:	8281      	strh	r1, [r0, #20]
    75b4:	221b      	movs	r2, #27
    75b6:	801a      	strh	r2, [r3, #0]
    75b8:	f44f 74a4 	mov.w	r4, #328	; 0x148
    75bc:	805c      	strh	r4, [r3, #2]
    75be:	809a      	strh	r2, [r3, #4]
    75c0:	80dc      	strh	r4, [r3, #6]
    75c2:	7381      	strb	r1, [r0, #14]
    75c4:	73c1      	strb	r1, [r0, #15]
    75c6:	2303      	movs	r3, #3
    75c8:	7003      	strb	r3, [r0, #0]
    75ca:	2302      	movs	r3, #2
    75cc:	7043      	strb	r3, [r0, #1]
    75ce:	8042      	strh	r2, [r0, #2]
    75d0:	8082      	strh	r2, [r0, #4]
    75d2:	f640 62a6 	movw	r2, #3750	; 0xea6
    75d6:	6082      	str	r2, [r0, #8]
    75d8:	7481      	strb	r1, [r0, #18]
    75da:	7301      	strb	r1, [r0, #12]
    75dc:	bd10      	pop	{r4, pc}
    75de:	0000      	.short	0x0000
    75e0:	20001190 	.word	0x20001190
    75e4:	2000029c 	.word	0x2000029c
    75e8:	b510      	push	{r4, lr}
    75ea:	2101      	movs	r1, #1
    75ec:	2000      	movs	r0, #0
    75ee:	f7fa f8d7 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    75f2:	0004      	movs	r4, r0
    75f4:	d10a      	bne.n	760c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
    75f6:	2101      	movs	r1, #1
    75f8:	f7fa f89a 	bl	1730 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    75fc:	0004      	movs	r4, r0
    75fe:	d007      	beq.n	7610 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    7600:	4806      	ldr	r0, [pc, #24]	; (761c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
    7602:	f990 1000 	ldrsb.w	r1, [r0]
    7606:	4620      	mov	r0, r4
    7608:	f007 fb6b 	bl	ece2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    760c:	4620      	mov	r0, r4
    760e:	bd10      	pop	{r4, pc}
    7610:	f240 3113 	movw	r1, #787	; 0x313
    7614:	2039      	movs	r0, #57	; 0x39
    7616:	f7f9 fd95 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    761a:	0000      	.short	0x0000
    761c:	20000294 	.word	0x20000294

00007620 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    7620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7622:	460c      	mov	r4, r1
    7624:	4605      	mov	r5, r0
    7626:	f007 fbca 	bl	edbe <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    762a:	b158      	cbz	r0, 7644 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    762c:	4628      	mov	r0, r5
    762e:	f007 fbb9 	bl	eda4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7632:	b148      	cbz	r0, 7648 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    7634:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7638:	2112      	movs	r1, #18
    763a:	b108      	cbz	r0, 7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    763c:	2880      	cmp	r0, #128	; 0x80
    763e:	d903      	bls.n	7648 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    7640:	4608      	mov	r0, r1
    7642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7644:	2142      	movs	r1, #66	; 0x42
    7646:	e7fb      	b.n	7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    7648:	4628      	mov	r0, r5
    764a:	f007 fb9c 	bl	ed86 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    764e:	b120      	cbz	r0, 765a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    7650:	4628      	mov	r0, r5
    7652:	f007 fb07 	bl	ec64 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    7656:	b110      	cbz	r0, 765e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    7658:	e005      	b.n	7666 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    765a:	210c      	movs	r1, #12
    765c:	e7f0      	b.n	7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    765e:	4628      	mov	r0, r5
    7660:	f007 fb9a 	bl	ed98 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    7664:	b120      	cbz	r0, 7670 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    7666:	4628      	mov	r0, r5
    7668:	f007 fd66 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    766c:	b930      	cbnz	r0, 767c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    766e:	e001      	b.n	7674 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    7670:	2012      	movs	r0, #18
    7672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7674:	4628      	mov	r0, r5
    7676:	f007 fb10 	bl	ec9a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    767a:	b108      	cbz	r0, 7680 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    767c:	200c      	movs	r0, #12
    767e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7680:	4628      	mov	r0, r5
    7682:	f7fc fa0b 	bl	3a9c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    7686:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    768a:	f242 7010 	movw	r0, #10000	; 0x2710
    768e:	4346      	muls	r6, r0
    7690:	78e1      	ldrb	r1, [r4, #3]
    7692:	4628      	mov	r0, r5
    7694:	f007 fb6e 	bl	ed74 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    7698:	4628      	mov	r0, r5
    769a:	f007 fb7f 	bl	ed9c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    769e:	b1a8      	cbz	r0, 76cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    76a0:	2100      	movs	r1, #0
    76a2:	4668      	mov	r0, sp
    76a4:	f7fa f8f0 	bl	1888 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    76a8:	0004      	movs	r4, r0
    76aa:	d019      	beq.n	76e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    76ac:	2100      	movs	r1, #0
    76ae:	f7fb fae7 	bl	2c80 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    76b2:	f8bd 0000 	ldrh.w	r0, [sp]
    76b6:	8020      	strh	r0, [r4, #0]
    76b8:	4621      	mov	r1, r4
    76ba:	4628      	mov	r0, r5
    76bc:	f007 fb96 	bl	edec <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    76c0:	4628      	mov	r0, r5
    76c2:	f007 fb73 	bl	edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    76c6:	b168      	cbz	r0, 76e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    76c8:	2001      	movs	r0, #1
    76ca:	e00e      	b.n	76ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    76cc:	4632      	mov	r2, r6
    76ce:	2100      	movs	r1, #0
    76d0:	4628      	mov	r0, r5
    76d2:	f7fd f921 	bl	4918 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    76d6:	2800      	cmp	r0, #0
    76d8:	d0d1      	beq.n	767e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    76da:	f241 7168 	movw	r1, #5992	; 0x1768
    76de:	e012      	b.n	7706 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    76e0:	200d      	movs	r0, #13
    76e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76e4:	4628      	mov	r0, r5
    76e6:	f007 fb7f 	bl	ede8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    76ea:	4601      	mov	r1, r0
    76ec:	4620      	mov	r0, r4
    76ee:	f7ff fed1 	bl	7494 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    76f2:	2800      	cmp	r0, #0
    76f4:	d1f5      	bne.n	76e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    76f6:	4632      	mov	r2, r6
    76f8:	4621      	mov	r1, r4
    76fa:	4628      	mov	r0, r5
    76fc:	f7fd f90c 	bl	4918 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7700:	b120      	cbz	r0, 770c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    7702:	f241 718b 	movw	r1, #6027	; 0x178b
    7706:	2039      	movs	r0, #57	; 0x39
    7708:	f7f9 fd1c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    770c:	4804      	ldr	r0, [pc, #16]	; (7720 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    770e:	6843      	ldr	r3, [r0, #4]
    7710:	b123      	cbz	r3, 771c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    7712:	2200      	movs	r2, #0
    7714:	f504 7199 	add.w	r1, r4, #306	; 0x132
    7718:	4620      	mov	r0, r4
    771a:	4798      	blx	r3
    771c:	2000      	movs	r0, #0
    771e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7720:	20000294 	.word	0x20000294
    7724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7728:	b088      	sub	sp, #32
    772a:	4604      	mov	r4, r0
    772c:	8800      	ldrh	r0, [r0, #0]
    772e:	a906      	add	r1, sp, #24
    7730:	f006 fb6b 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7734:	2800      	cmp	r0, #0
    7736:	d147      	bne.n	77c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7738:	9807      	ldr	r0, [sp, #28]
    773a:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    773e:	f88d 1008 	strb.w	r1, [sp, #8]
    7742:	9902      	ldr	r1, [sp, #8]
    7744:	9102      	str	r1, [sp, #8]
    7746:	f89d 1008 	ldrb.w	r1, [sp, #8]
    774a:	3080      	adds	r0, #128	; 0x80
    774c:	b101      	cbz	r1, 7750 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    774e:	2101      	movs	r1, #1
    7750:	f88d 100c 	strb.w	r1, [sp, #12]
    7754:	7b01      	ldrb	r1, [r0, #12]
    7756:	f04f 0800 	mov.w	r8, #0
    775a:	0689      	lsls	r1, r1, #26
    775c:	d502      	bpl.n	7764 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    775e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7762:	b149      	cbz	r1, 7778 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    7764:	f05f 0100 	movs.w	r1, #0
    7768:	f88d 1004 	strb.w	r1, [sp, #4]
    776c:	2105      	movs	r1, #5
    776e:	306c      	adds	r0, #108	; 0x6c
    7770:	f008 f979 	bl	fa66 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    7774:	b110      	cbz	r0, 777c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    7776:	e004      	b.n	7782 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    7778:	2101      	movs	r1, #1
    777a:	e7f5      	b.n	7768 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    777c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7780:	b308      	cbz	r0, 77c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    7782:	8921      	ldrh	r1, [r4, #8]
    7784:	88e0      	ldrh	r0, [r4, #6]
    7786:	f008 fee2 	bl	1054e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    778a:	2800      	cmp	r0, #0
    778c:	d11c      	bne.n	77c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    778e:	88a1      	ldrh	r1, [r4, #4]
    7790:	8860      	ldrh	r0, [r4, #2]
    7792:	f008 fedc 	bl	1054e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7796:	2800      	cmp	r0, #0
    7798:	d116      	bne.n	77c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    779a:	8921      	ldrh	r1, [r4, #8]
    779c:	88e0      	ldrh	r0, [r4, #6]
    779e:	f008 fecc 	bl	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    77a2:	2800      	cmp	r0, #0
    77a4:	d110      	bne.n	77c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77a6:	88a1      	ldrh	r1, [r4, #4]
    77a8:	8860      	ldrh	r0, [r4, #2]
    77aa:	f008 fec6 	bl	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    77ae:	0006      	movs	r6, r0
    77b0:	d10a      	bne.n	77c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77b2:	9807      	ldr	r0, [sp, #28]
    77b4:	f500 7599 	add.w	r5, r0, #306	; 0x132
    77b8:	27ff      	movs	r7, #255	; 0xff
    77ba:	706f      	strb	r7, [r5, #1]
    77bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77c0:	b129      	cbz	r1, 77ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    77c2:	263a      	movs	r6, #58	; 0x3a
    77c4:	e02e      	b.n	7824 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    77c6:	201a      	movs	r0, #26
    77c8:	b008      	add	sp, #32
    77ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ce:	4641      	mov	r1, r8
    77d0:	aa03      	add	r2, sp, #12
    77d2:	f008 feca 	bl	1056a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    77d6:	8861      	ldrh	r1, [r4, #2]
    77d8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    77dc:	4281      	cmp	r1, r0
    77de:	d200      	bcs.n	77e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    77e0:	4608      	mov	r0, r1
    77e2:	80e8      	strh	r0, [r5, #6]
    77e4:	88a1      	ldrh	r1, [r4, #4]
    77e6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    77ea:	4281      	cmp	r1, r0
    77ec:	d200      	bcs.n	77f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    77ee:	4608      	mov	r0, r1
    77f0:	8128      	strh	r0, [r5, #8]
    77f2:	88e2      	ldrh	r2, [r4, #6]
    77f4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    77f8:	428a      	cmp	r2, r1
    77fa:	d200      	bcs.n	77fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    77fc:	4611      	mov	r1, r2
    77fe:	8069      	strh	r1, [r5, #2]
    7800:	8922      	ldrh	r2, [r4, #8]
    7802:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7806:	428a      	cmp	r2, r1
    7808:	d200      	bcs.n	780c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    780a:	4611      	mov	r1, r2
    780c:	f640 0248 	movw	r2, #2120	; 0x848
    7810:	80a9      	strh	r1, [r5, #4]
    7812:	4291      	cmp	r1, r2
    7814:	d300      	bcc.n	7818 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    7816:	4611      	mov	r1, r2
    7818:	80a9      	strh	r1, [r5, #4]
    781a:	4290      	cmp	r0, r2
    781c:	d200      	bcs.n	7820 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    781e:	4602      	mov	r2, r0
    7820:	812a      	strh	r2, [r5, #8]
    7822:	702f      	strb	r7, [r5, #0]
    7824:	f885 8001 	strb.w	r8, [r5, #1]
    7828:	4630      	mov	r0, r6
    782a:	e7cd      	b.n	77c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    782c:	b51c      	push	{r2, r3, r4, lr}
    782e:	490c      	ldr	r1, [pc, #48]	; (7860 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    7830:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7834:	e9cd 0100 	strd	r0, r1, [sp]
    7838:	e00a      	b.n	7850 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    783a:	9c00      	ldr	r4, [sp, #0]
    783c:	4620      	mov	r0, r4
    783e:	f007 fc7b 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7842:	b128      	cbz	r0, 7850 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    7844:	4620      	mov	r0, r4
    7846:	f007 fae0 	bl	ee0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    784a:	b108      	cbz	r0, 7850 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    784c:	2001      	movs	r0, #1
    784e:	bd1c      	pop	{r2, r3, r4, pc}
    7850:	4668      	mov	r0, sp
    7852:	f7f9 fff7 	bl	1844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7856:	2800      	cmp	r0, #0
    7858:	d0ef      	beq.n	783a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    785a:	2000      	movs	r0, #0
    785c:	bd1c      	pop	{r2, r3, r4, pc}
    785e:	0000      	.short	0x0000
    7860:	0000789c 	.word	0x0000789c
    7864:	b510      	push	{r4, lr}
    7866:	4604      	mov	r4, r0
    7868:	88c1      	ldrh	r1, [r0, #6]
    786a:	8880      	ldrh	r0, [r0, #4]
    786c:	f008 fe6f 	bl	1054e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7870:	2800      	cmp	r0, #0
    7872:	d10f      	bne.n	7894 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    7874:	8861      	ldrh	r1, [r4, #2]
    7876:	8820      	ldrh	r0, [r4, #0]
    7878:	f008 fe69 	bl	1054e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    787c:	2800      	cmp	r0, #0
    787e:	d109      	bne.n	7894 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    7880:	4805      	ldr	r0, [pc, #20]	; (7898 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    7882:	88a1      	ldrh	r1, [r4, #4]
    7884:	8081      	strh	r1, [r0, #4]
    7886:	8821      	ldrh	r1, [r4, #0]
    7888:	8001      	strh	r1, [r0, #0]
    788a:	88e1      	ldrh	r1, [r4, #6]
    788c:	80c1      	strh	r1, [r0, #6]
    788e:	8861      	ldrh	r1, [r4, #2]
    7890:	8041      	strh	r1, [r0, #2]
    7892:	2000      	movs	r0, #0
    7894:	bd10      	pop	{r4, pc}
    7896:	0000      	.short	0x0000
    7898:	2000029c 	.word	0x2000029c
    789c:	00000000 	.word	0x00000000
    78a0:	00010000 	.word	0x00010000
    78a4:	00000000 	.word	0x00000000
    78a8:	00010000 	.word	0x00010000
    78ac:	0d10770d 	.word	0x0d10770d
    78b0:	10770059 	.word	0x10770059
    78b4:	00000000 	.word	0x00000000
    78b8:	00010000 	.word	0x00010000
    78bc:	00000000 	.word	0x00000000
    78c0:	00010000 	.word	0x00010000

000078c4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    78c4:	b510      	push	{r4, lr}
    78c6:	f7fb fc77 	bl	31b8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    78ca:	4c05      	ldr	r4, [pc, #20]	; (78e0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    78cc:	6860      	ldr	r0, [r4, #4]
    78ce:	f008 ff46 	bl	1075e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    78d2:	f008 fce1 	bl	10298 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78d6:	f7fb fe1d 	bl	3514 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78da:	2001      	movs	r0, #1
    78dc:	7020      	strb	r0, [r4, #0]
    78de:	bd10      	pop	{r4, pc}
    78e0:	200002a4 	.word	0x200002a4

000078e4 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    78e4:	4801      	ldr	r0, [pc, #4]	; (78ec <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    78e6:	7800      	ldrb	r0, [r0, #0]
    78e8:	4770      	bx	lr
    78ea:	0000      	.short	0x0000
    78ec:	200002a4 	.word	0x200002a4

000078f0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    78f0:	b510      	push	{r4, lr}
    78f2:	4c06      	ldr	r4, [pc, #24]	; (790c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    78f4:	68a0      	ldr	r0, [r4, #8]
    78f6:	f008 ff32 	bl	1075e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    78fa:	68e0      	ldr	r0, [r4, #12]
    78fc:	f008 ff2f 	bl	1075e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    7900:	f008 fd34 	bl	1036c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7904:	2000      	movs	r0, #0
    7906:	7020      	strb	r0, [r4, #0]
    7908:	bd10      	pop	{r4, pc}
    790a:	0000      	.short	0x0000
    790c:	200002a4 	.word	0x200002a4

00007910 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7910:	b510      	push	{r4, lr}
    7912:	4905      	ldr	r1, [pc, #20]	; (7928 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7914:	4805      	ldr	r0, [pc, #20]	; (792c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7916:	f008 ff15 	bl	10744 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    791a:	4804      	ldr	r0, [pc, #16]	; (792c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7920:	4903      	ldr	r1, [pc, #12]	; (7930 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    7922:	1d00      	adds	r0, r0, #4
    7924:	f008 bf0e 	b.w	10744 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7928:	200002b4 	.word	0x200002b4
    792c:	200002a8 	.word	0x200002a8
    7930:	200002bc 	.word	0x200002bc

00007934 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    7934:	b510      	push	{r4, lr}
    7936:	4908      	ldr	r1, [pc, #32]	; (7958 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    7938:	4808      	ldr	r0, [pc, #32]	; (795c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    793a:	f008 ff03 	bl	10744 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    793e:	4807      	ldr	r0, [pc, #28]	; (795c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7940:	4907      	ldr	r1, [pc, #28]	; (7960 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    7942:	1d00      	adds	r0, r0, #4
    7944:	f008 fefe 	bl	10744 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7948:	4804      	ldr	r0, [pc, #16]	; (795c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    794e:	4905      	ldr	r1, [pc, #20]	; (7964 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    7950:	3008      	adds	r0, #8
    7952:	f008 bef7 	b.w	10744 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7956:	0000      	.short	0x0000
    7958:	200002cc 	.word	0x200002cc
    795c:	200002a8 	.word	0x200002a8
    7960:	200002d4 	.word	0x200002d4
    7964:	200002c4 	.word	0x200002c4

00007968 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    7968:	4801      	ldr	r0, [pc, #4]	; (7970 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    796a:	7840      	ldrb	r0, [r0, #1]
    796c:	4770      	bx	lr
    796e:	0000      	.short	0x0000
    7970:	200002a4 	.word	0x200002a4
    7974:	b510      	push	{r4, lr}
    7976:	f7fc f9b3 	bl	3ce0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    797a:	f7fd f87d 	bl	4a78 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    797e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7982:	4801      	ldr	r0, [pc, #4]	; (7988 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    7984:	f7fc b992 	b.w	3cac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    7988:	20001428 	.word	0x20001428
    798c:	490a      	ldr	r1, [pc, #40]	; (79b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    798e:	b510      	push	{r4, lr}
    7990:	2001      	movs	r0, #1
    7992:	7048      	strb	r0, [r1, #1]
    7994:	f7fc f9d4 	bl	3d40 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7998:	f7fd fd84 	bl	54a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    799c:	f006 f973 	bl	dc86 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    79a0:	4906      	ldr	r1, [pc, #24]	; (79bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    79a2:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    79a6:	f7fa fb7f 	bl	20a8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    79aa:	2000      	movs	r0, #0
    79ac:	f005 ffb9 	bl	d922 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    79b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79b4:	f7fb bc06 	b.w	31c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    79b8:	200002a4 	.word	0x200002a4
    79bc:	2000152a 	.word	0x2000152a

000079c0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    79c0:	4a04      	ldr	r2, [pc, #16]	; (79d4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    79c2:	08c1      	lsrs	r1, r0, #3
    79c4:	f000 0307 	and.w	r3, r0, #7
    79c8:	2001      	movs	r0, #1
    79ca:	4098      	lsls	r0, r3
    79cc:	5c53      	ldrb	r3, [r2, r1]
    79ce:	4303      	orrs	r3, r0
    79d0:	5453      	strb	r3, [r2, r1]
    79d2:	4770      	bx	lr
    79d4:	20000020 	.word	0x20000020

000079d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79d8:	4901      	ldr	r1, [pc, #4]	; (79e0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79da:	e9d1 0100 	ldrd	r0, r1, [r1]
    79de:	4770      	bx	lr
    79e0:	20000020 	.word	0x20000020

000079e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    79e4:	4806      	ldr	r0, [pc, #24]	; (7a00 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    79e6:	8801      	ldrh	r1, [r0, #0]
    79e8:	7900      	ldrb	r0, [r0, #4]
    79ea:	0602      	lsls	r2, r0, #24
    79ec:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    79f0:	f000 0001 	and.w	r0, r0, #1
    79f4:	1800      	adds	r0, r0, r0
    79f6:	b2c0      	uxtb	r0, r0
    79f8:	f040 0001 	orr.w	r0, r0, #1
    79fc:	4770      	bx	lr
    79fe:	0000      	.short	0x0000
    7a00:	20000020 	.word	0x20000020

00007a04 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7a04:	b510      	push	{r4, lr}
    7a06:	f004 fd2b 	bl	c460 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7a0a:	2200      	movs	r2, #0
    7a0c:	4b08      	ldr	r3, [pc, #32]	; (7a30 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7a0e:	4611      	mov	r1, r2
    7a10:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7a14:	4284      	cmp	r4, r0
    7a16:	d303      	bcc.n	7a20 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7a18:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a1c:	7882      	ldrb	r2, [r0, #2]
    7a1e:	e003      	b.n	7a28 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7a20:	1c49      	adds	r1, r1, #1
    7a22:	b2c9      	uxtb	r1, r1
    7a24:	290c      	cmp	r1, #12
    7a26:	d3f3      	bcc.n	7a10 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7a28:	4802      	ldr	r0, [pc, #8]	; (7a34 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7a2a:	7002      	strb	r2, [r0, #0]
    7a2c:	bd10      	pop	{r4, pc}
    7a2e:	0000      	.short	0x0000
    7a30:	000107b0 	.word	0x000107b0
    7a34:	20000373 	.word	0x20000373

00007a38 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    7a38:	b570      	push	{r4, r5, r6, lr}
    7a3a:	6845      	ldr	r5, [r0, #4]
    7a3c:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    7a40:	8828      	ldrh	r0, [r5, #0]
    7a42:	f826 0902 	strh.w	r0, [r6], #-2
    7a46:	f505 7498 	add.w	r4, r5, #304	; 0x130
    7a4a:	7031      	strb	r1, [r6, #0]
    7a4c:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    7a50:	f008 fee2 	bl	10818 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    7a54:	7130      	strb	r0, [r6, #4]
    7a56:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    7a5a:	f008 fedd 	bl	10818 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    7a5e:	f806 0f05 	strb.w	r0, [r6, #5]!
    7a62:	2202      	movs	r2, #2
    7a64:	4903      	ldr	r1, [pc, #12]	; (7a74 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    7a66:	f1a6 000f 	sub.w	r0, r6, #15
    7a6a:	f006 fda1 	bl	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7a6e:	2000      	movs	r0, #0
    7a70:	7320      	strb	r0, [r4, #12]
    7a72:	bd70      	pop	{r4, r5, r6, pc}
    7a74:	00010805 	.word	0x00010805

00007a78 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7a7a:	460e      	mov	r6, r1
    7a7c:	4604      	mov	r4, r0
    7a7e:	f7fb fa63 	bl	2f48 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7a82:	2500      	movs	r5, #0
    7a84:	b320      	cbz	r0, 7ad0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    7a86:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    7a8a:	a902      	add	r1, sp, #8
    7a8c:	8820      	ldrh	r0, [r4, #0]
    7a8e:	f8ad 0000 	strh.w	r0, [sp]
    7a92:	f006 f9ba 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7a96:	b108      	cbz	r0, 7a9c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7a98:	2126      	movs	r1, #38	; 0x26
    7a9a:	e010      	b.n	7abe <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7a9c:	9803      	ldr	r0, [sp, #12]
    7a9e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7aa2:	f88d 1002 	strb.w	r1, [sp, #2]
    7aa6:	7841      	ldrb	r1, [r0, #1]
    7aa8:	f88d 1003 	strb.w	r1, [sp, #3]
    7aac:	8840      	ldrh	r0, [r0, #2]
    7aae:	f8ad 0004 	strh.w	r0, [sp, #4]
    7ab2:	2102      	movs	r1, #2
    7ab4:	4668      	mov	r0, sp
    7ab6:	f008 fbf1 	bl	1029c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7aba:	b118      	cbz	r0, 7ac4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7abc:	213c      	movs	r1, #60	; 0x3c
    7abe:	207e      	movs	r0, #126	; 0x7e
    7ac0:	f7f9 fb40 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ac4:	f8cd 5000 	str.w	r5, [sp]
    7ac8:	f8bd 0000 	ldrh.w	r0, [sp]
    7acc:	b004      	add	sp, #16
    7ace:	bd70      	pop	{r4, r5, r6, pc}
    7ad0:	201c      	movs	r0, #28
    7ad2:	7030      	strb	r0, [r6, #0]
    7ad4:	7075      	strb	r5, [r6, #1]
    7ad6:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7ada:	6070      	str	r0, [r6, #4]
    7adc:	4801      	ldr	r0, [pc, #4]	; (7ae4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7ade:	6800      	ldr	r0, [r0, #0]
    7ae0:	9000      	str	r0, [sp, #0]
    7ae2:	e7f1      	b.n	7ac8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    7ae4:	00007ae8 	.word	0x00007ae8
    7ae8:	00000004 	.word	0x00000004

00007aec <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7aec:	b570      	push	{r4, r5, r6, lr}
    7aee:	4605      	mov	r5, r0
    7af0:	4616      	mov	r6, r2
    7af2:	460c      	mov	r4, r1
    7af4:	2002      	movs	r0, #2
    7af6:	f000 f9b7 	bl	7e68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7afa:	4906      	ldr	r1, [pc, #24]	; (7b14 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7afc:	2001      	movs	r0, #1
    7afe:	1ef6      	subs	r6, r6, #3
    7b00:	7008      	strb	r0, [r1, #0]
    7b02:	4805      	ldr	r0, [pc, #20]	; (7b18 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7b04:	6006      	str	r6, [r0, #0]
    7b06:	4804      	ldr	r0, [pc, #16]	; (7b18 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7b08:	3808      	subs	r0, #8
    7b0a:	6005      	str	r5, [r0, #0]
    7b0c:	1f00      	subs	r0, r0, #4
    7b0e:	6004      	str	r4, [r0, #0]
    7b10:	bd70      	pop	{r4, r5, r6, pc}
    7b12:	0000      	.short	0x0000
    7b14:	20000374 	.word	0x20000374
    7b18:	4000f510 	.word	0x4000f510

00007b1c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7b1c:	b510      	push	{r4, lr}
    7b1e:	4c0c      	ldr	r4, [pc, #48]	; (7b50 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7b20:	7820      	ldrb	r0, [r4, #0]
    7b22:	b180      	cbz	r0, 7b46 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7b24:	490b      	ldr	r1, [pc, #44]	; (7b54 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7b26:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b2a:	6008      	str	r0, [r1, #0]
    7b2c:	f000 f86a 	bl	7c04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b30:	2100      	movs	r1, #0
    7b32:	b120      	cbz	r0, 7b3e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7b34:	2001      	movs	r0, #1
    7b36:	7060      	strb	r0, [r4, #1]
    7b38:	4807      	ldr	r0, [pc, #28]	; (7b58 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7b3a:	6800      	ldr	r0, [r0, #0]
    7b3c:	e001      	b.n	7b42 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7b3e:	7061      	strb	r1, [r4, #1]
    7b40:	2010      	movs	r0, #16
    7b42:	70a0      	strb	r0, [r4, #2]
    7b44:	7021      	strb	r1, [r4, #0]
    7b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b4a:	2000      	movs	r0, #0
    7b4c:	f000 b98c 	b.w	7e68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b50:	20000374 	.word	0x20000374
    7b54:	4001f508 	.word	0x4001f508
    7b58:	4000f400 	.word	0x4000f400

00007b5c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7b5c:	b510      	push	{r4, lr}
    7b5e:	2002      	movs	r0, #2
    7b60:	f000 f982 	bl	7e68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b64:	4904      	ldr	r1, [pc, #16]	; (7b78 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7b66:	2001      	movs	r0, #1
    7b68:	7008      	strb	r0, [r1, #0]
    7b6a:	f000 f859 	bl	7c20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7b6e:	4903      	ldr	r1, [pc, #12]	; (7b7c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7b70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b74:	6008      	str	r0, [r1, #0]
    7b76:	bd10      	pop	{r4, pc}
    7b78:	20000374 	.word	0x20000374
    7b7c:	4001f504 	.word	0x4001f504

00007b80 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7b80:	4803      	ldr	r0, [pc, #12]	; (7b90 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7b82:	2100      	movs	r1, #0
    7b84:	7001      	strb	r1, [r0, #0]
    7b86:	7041      	strb	r1, [r0, #1]
    7b88:	2110      	movs	r1, #16
    7b8a:	7081      	strb	r1, [r0, #2]
    7b8c:	4770      	bx	lr
    7b8e:	0000      	.short	0x0000
    7b90:	20000374 	.word	0x20000374

00007b94 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7b94:	4807      	ldr	r0, [pc, #28]	; (7bb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7b96:	b510      	push	{r4, lr}
    7b98:	7801      	ldrb	r1, [r0, #0]
    7b9a:	b141      	cbz	r1, 7bae <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7b9c:	f000 f832 	bl	7c04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7ba0:	b118      	cbz	r0, 7baa <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7ba2:	4805      	ldr	r0, [pc, #20]	; (7bb8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7ba4:	6800      	ldr	r0, [r0, #0]
    7ba6:	b2c0      	uxtb	r0, r0
    7ba8:	bd10      	pop	{r4, pc}
    7baa:	2010      	movs	r0, #16
    7bac:	bd10      	pop	{r4, pc}
    7bae:	7880      	ldrb	r0, [r0, #2]
    7bb0:	bd10      	pop	{r4, pc}
    7bb2:	0000      	.short	0x0000
    7bb4:	20000374 	.word	0x20000374
    7bb8:	4000f400 	.word	0x4000f400

00007bbc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7bbc:	4808      	ldr	r0, [pc, #32]	; (7be0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7bbe:	b510      	push	{r4, lr}
    7bc0:	7801      	ldrb	r1, [r0, #0]
    7bc2:	b159      	cbz	r1, 7bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7bc4:	4807      	ldr	r0, [pc, #28]	; (7be4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7bc6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7bca:	b128      	cbz	r0, 7bd8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7bcc:	f000 f80c 	bl	7be8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7bd0:	2800      	cmp	r0, #0
    7bd2:	d000      	beq.n	7bd6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7bd4:	2001      	movs	r0, #1
    7bd6:	bd10      	pop	{r4, pc}
    7bd8:	2002      	movs	r0, #2
    7bda:	bd10      	pop	{r4, pc}
    7bdc:	7840      	ldrb	r0, [r0, #1]
    7bde:	bd10      	pop	{r4, pc}
    7be0:	20000374 	.word	0x20000374
    7be4:	4000f000 	.word	0x4000f000
    7be8:	4805      	ldr	r0, [pc, #20]	; (7c00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7bea:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7bee:	b111      	cbz	r1, 7bf6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7bf0:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7bf4:	b108      	cbz	r0, 7bfa <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7bf6:	2000      	movs	r0, #0
    7bf8:	4770      	bx	lr
    7bfa:	2001      	movs	r0, #1
    7bfc:	4770      	bx	lr
    7bfe:	0000      	.short	0x0000
    7c00:	4000f000 	.word	0x4000f000
    7c04:	4805      	ldr	r0, [pc, #20]	; (7c1c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7c06:	b510      	push	{r4, lr}
    7c08:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c0c:	b120      	cbz	r0, 7c18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c0e:	f7ff ffeb 	bl	7be8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7c12:	b108      	cbz	r0, 7c18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c14:	2001      	movs	r0, #1
    7c16:	bd10      	pop	{r4, pc}
    7c18:	2000      	movs	r0, #0
    7c1a:	bd10      	pop	{r4, pc}
    7c1c:	4000f000 	.word	0x4000f000
    7c20:	4804      	ldr	r0, [pc, #16]	; (7c34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7c22:	2100      	movs	r1, #0
    7c24:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c28:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7c2c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7c30:	4770      	bx	lr
    7c32:	0000      	.short	0x0000
    7c34:	4000f000 	.word	0x4000f000

00007c38 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c3c:	4604      	mov	r4, r0
    7c3e:	461e      	mov	r6, r3
    7c40:	4690      	mov	r8, r2
    7c42:	460f      	mov	r7, r1
    7c44:	2001      	movs	r0, #1
    7c46:	f000 f90f 	bl	7e68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7c4a:	4d1e      	ldr	r5, [pc, #120]	; (7cc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7c4c:	481e      	ldr	r0, [pc, #120]	; (7cc8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7c4e:	f004 0103 	and.w	r1, r4, #3
    7c52:	712e      	strb	r6, [r5, #4]
    7c54:	6800      	ldr	r0, [r0, #0]
    7c56:	0432      	lsls	r2, r6, #16
    7c58:	f361 0007 	bfi	r0, r1, #0, #8
    7c5c:	f366 200f 	bfi	r0, r6, #8, #8
    7c60:	0c00      	lsrs	r0, r0, #16
    7c62:	4e1a      	ldr	r6, [pc, #104]	; (7ccc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c64:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7c68:	4308      	orrs	r0, r1
    7c6a:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7c6e:	4818      	ldr	r0, [pc, #96]	; (7cd0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c70:	6007      	str	r7, [r0, #0]
    7c72:	f008 ff7a 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7c76:	b938      	cbnz	r0, 7c88 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7c78:	4815      	ldr	r0, [pc, #84]	; (7cd0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c7a:	3010      	adds	r0, #16
    7c7c:	6801      	ldr	r1, [r0, #0]
    7c7e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7c82:	ea41 0108 	orr.w	r1, r1, r8
    7c86:	6001      	str	r1, [r0, #0]
    7c88:	f000 f8e4 	bl	7e54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c8c:	b10c      	cbz	r4, 7c92 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7c8e:	2c04      	cmp	r4, #4
    7c90:	d107      	bne.n	7ca2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7c92:	4811      	ldr	r0, [pc, #68]	; (7cd8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7c94:	490d      	ldr	r1, [pc, #52]	; (7ccc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c96:	4a0f      	ldr	r2, [pc, #60]	; (7cd4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7c98:	1d09      	adds	r1, r1, #4
    7c9a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7c9e:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7ca2:	2001      	movs	r0, #1
    7ca4:	7068      	strb	r0, [r5, #1]
    7ca6:	70ec      	strb	r4, [r5, #3]
    7ca8:	b11c      	cbz	r4, 7cb2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7caa:	2c01      	cmp	r4, #1
    7cac:	d001      	beq.n	7cb2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7cae:	2c02      	cmp	r4, #2
    7cb0:	d106      	bne.n	7cc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7cb2:	7028      	strb	r0, [r5, #0]
    7cb4:	2100      	movs	r1, #0
    7cb6:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7cba:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7cbe:	6030      	str	r0, [r6, #0]
    7cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cc4:	20000377 	.word	0x20000377
    7cc8:	00007e64 	.word	0x00007e64
    7ccc:	4000f000 	.word	0x4000f000
    7cd0:	4000f508 	.word	0x4000f508
    7cd4:	4000f100 	.word	0x4000f100
    7cd8:	4001f088 	.word	0x4001f088

00007cdc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7cdc:	b570      	push	{r4, r5, r6, lr}
    7cde:	4a1c      	ldr	r2, [pc, #112]	; (7d50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7ce0:	7853      	ldrb	r3, [r2, #1]
    7ce2:	b1a3      	cbz	r3, 7d0e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7ce4:	4b1b      	ldr	r3, [pc, #108]	; (7d54 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7ce6:	6019      	str	r1, [r3, #0]
    7ce8:	1d19      	adds	r1, r3, #4
    7cea:	6008      	str	r0, [r1, #0]
    7cec:	2501      	movs	r5, #1
    7cee:	7095      	strb	r5, [r2, #2]
    7cf0:	4610      	mov	r0, r2
    7cf2:	78d6      	ldrb	r6, [r2, #3]
    7cf4:	4b18      	ldr	r3, [pc, #96]	; (7d58 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7cf6:	7800      	ldrb	r0, [r0, #0]
    7cf8:	4c18      	ldr	r4, [pc, #96]	; (7d5c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7cfa:	2100      	movs	r1, #0
    7cfc:	b156      	cbz	r6, 7d14 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7cfe:	2e04      	cmp	r6, #4
    7d00:	d01b      	beq.n	7d3a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7d02:	b308      	cbz	r0, 7d48 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7d04:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d08:	0668      	lsls	r0, r5, #25
    7d0a:	6018      	str	r0, [r3, #0]
    7d0c:	bd70      	pop	{r4, r5, r6, pc}
    7d0e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    7d12:	e01a      	b.n	7d4a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d14:	b178      	cbz	r0, 7d36 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7d16:	4620      	mov	r0, r4
    7d18:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d1c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7d20:	601e      	str	r6, [r3, #0]
    7d22:	1271      	asrs	r1, r6, #9
    7d24:	f008 fda0 	bl	10868 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d28:	2800      	cmp	r0, #0
    7d2a:	d0ef      	beq.n	7d0c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7d2c:	6065      	str	r5, [r4, #4]
    7d2e:	480a      	ldr	r0, [pc, #40]	; (7d58 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7d30:	1d00      	adds	r0, r0, #4
    7d32:	6006      	str	r6, [r0, #0]
    7d34:	bd70      	pop	{r4, r5, r6, pc}
    7d36:	21d5      	movs	r1, #213	; 0xd5
    7d38:	e007      	b.n	7d4a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d3a:	7015      	strb	r5, [r2, #0]
    7d3c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d40:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7d44:	6025      	str	r5, [r4, #0]
    7d46:	bd70      	pop	{r4, r5, r6, pc}
    7d48:	21e8      	movs	r1, #232	; 0xe8
    7d4a:	203c      	movs	r0, #60	; 0x3c
    7d4c:	f7f9 f9fa 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d50:	20000377 	.word	0x20000377
    7d54:	4000f50c 	.word	0x4000f50c
    7d58:	4001f504 	.word	0x4001f504
    7d5c:	4000f000 	.word	0x4000f000

00007d60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7d60:	b570      	push	{r4, r5, r6, lr}
    7d62:	4d05      	ldr	r5, [pc, #20]	; (7d78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7d64:	2400      	movs	r4, #0
    7d66:	7828      	ldrb	r0, [r5, #0]
    7d68:	b110      	cbz	r0, 7d70 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7d6a:	f000 f873 	bl	7e54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7d6e:	702c      	strb	r4, [r5, #0]
    7d70:	706c      	strb	r4, [r5, #1]
    7d72:	70ac      	strb	r4, [r5, #2]
    7d74:	bd70      	pop	{r4, r5, r6, pc}
    7d76:	0000      	.short	0x0000
    7d78:	20000377 	.word	0x20000377

00007d7c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7d7c:	4802      	ldr	r0, [pc, #8]	; (7d88 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7d7e:	2100      	movs	r1, #0
    7d80:	7001      	strb	r1, [r0, #0]
    7d82:	7041      	strb	r1, [r0, #1]
    7d84:	7081      	strb	r1, [r0, #2]
    7d86:	4770      	bx	lr
    7d88:	20000377 	.word	0x20000377

00007d8c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7d8c:	480b      	ldr	r0, [pc, #44]	; (7dbc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7d8e:	b510      	push	{r4, lr}
    7d90:	7800      	ldrb	r0, [r0, #0]
    7d92:	b158      	cbz	r0, 7dac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7d94:	f44f 7182 	mov.w	r1, #260	; 0x104
    7d98:	4809      	ldr	r0, [pc, #36]	; (7dc0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7d9a:	f008 fd65 	bl	10868 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d9e:	b140      	cbz	r0, 7db2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7da0:	4808      	ldr	r0, [pc, #32]	; (7dc4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7da2:	6800      	ldr	r0, [r0, #0]
    7da4:	2800      	cmp	r0, #0
    7da6:	d000      	beq.n	7daa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7da8:	2001      	movs	r0, #1
    7daa:	bd10      	pop	{r4, pc}
    7dac:	f240 215e 	movw	r1, #606	; 0x25e
    7db0:	e001      	b.n	7db6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7db2:	f240 215f 	movw	r1, #607	; 0x25f
    7db6:	203c      	movs	r0, #60	; 0x3c
    7db8:	f7f9 f9c4 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dbc:	20000377 	.word	0x20000377
    7dc0:	4000f000 	.word	0x4000f000
    7dc4:	4000f400 	.word	0x4000f400

00007dc8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7dc8:	4801      	ldr	r0, [pc, #4]	; (7dd0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7dca:	2101      	movs	r1, #1
    7dcc:	6081      	str	r1, [r0, #8]
    7dce:	4770      	bx	lr
    7dd0:	4000f000 	.word	0x4000f000

00007dd4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dd8:	481b      	ldr	r0, [pc, #108]	; (7e48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7dda:	7800      	ldrb	r0, [r0, #0]
    7ddc:	b1d8      	cbz	r0, 7e16 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7dde:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7e4c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7de2:	f44f 7682 	mov.w	r6, #260	; 0x104
    7de6:	4631      	mov	r1, r6
    7de8:	4640      	mov	r0, r8
    7dea:	f008 fd3d 	bl	10868 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7dee:	2800      	cmp	r0, #0
    7df0:	d128      	bne.n	7e44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7df2:	2002      	movs	r0, #2
    7df4:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7df8:	4c15      	ldr	r4, [pc, #84]	; (7e50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7dfa:	6820      	ldr	r0, [r4, #0]
    7dfc:	43c0      	mvns	r0, r0
    7dfe:	f340 1500 	sbfx	r5, r0, #4, #1
    7e02:	6820      	ldr	r0, [r4, #0]
    7e04:	f040 0010 	orr.w	r0, r0, #16
    7e08:	6020      	str	r0, [r4, #0]
    7e0a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7e0e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7e12:	1c6d      	adds	r5, r5, #1
    7e14:	e008      	b.n	7e28 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7e16:	f240 216a 	movw	r1, #618	; 0x26a
    7e1a:	203c      	movs	r0, #60	; 0x3c
    7e1c:	f7f9 f992 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e20:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7e24:	f008 fee1 	bl	10bea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e28:	4631      	mov	r1, r6
    7e2a:	4640      	mov	r0, r8
    7e2c:	f008 fd1c 	bl	10868 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7e30:	2800      	cmp	r0, #0
    7e32:	d0f5      	beq.n	7e20 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7e34:	b91d      	cbnz	r5, 7e3e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7e36:	6820      	ldr	r0, [r4, #0]
    7e38:	f020 0010 	bic.w	r0, r0, #16
    7e3c:	6020      	str	r0, [r4, #0]
    7e3e:	2002      	movs	r0, #2
    7e40:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e48:	20000377 	.word	0x20000377
    7e4c:	4000f000 	.word	0x4000f000
    7e50:	e000ed10 	.word	0xe000ed10
    7e54:	4902      	ldr	r1, [pc, #8]	; (7e60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7e56:	4801      	ldr	r0, [pc, #4]	; (7e5c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7e58:	6008      	str	r0, [r1, #0]
    7e5a:	4770      	bx	lr
    7e5c:	02020000 	.word	0x02020000
    7e60:	4001f508 	.word	0x4001f508
    7e64:	00010000 	.word	0x00010000

00007e68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7e68:	b510      	push	{r4, lr}
    7e6a:	4604      	mov	r4, r0
    7e6c:	f000 f820 	bl	7eb0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7e70:	2c00      	cmp	r4, #0
    7e72:	d00e      	beq.n	7e92 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7e74:	4a0b      	ldr	r2, [pc, #44]	; (7ea4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e76:	480b      	ldr	r0, [pc, #44]	; (7ea4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e78:	490b      	ldr	r1, [pc, #44]	; (7ea8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7e7a:	3214      	adds	r2, #20
    7e7c:	2c01      	cmp	r4, #1
    7e7e:	d005      	beq.n	7e8c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7e80:	2c02      	cmp	r4, #2
    7e82:	d007      	beq.n	7e94 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7e84:	2182      	movs	r1, #130	; 0x82
    7e86:	203d      	movs	r0, #61	; 0x3d
    7e88:	f7f9 f95c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e8c:	2302      	movs	r3, #2
    7e8e:	6003      	str	r3, [r0, #0]
    7e90:	6011      	str	r1, [r2, #0]
    7e92:	bd10      	pop	{r4, pc}
    7e94:	2303      	movs	r3, #3
    7e96:	6003      	str	r3, [r0, #0]
    7e98:	6011      	str	r1, [r2, #0]
    7e9a:	4904      	ldr	r1, [pc, #16]	; (7eac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7e9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ea0:	6008      	str	r0, [r1, #0]
    7ea2:	bd10      	pop	{r4, pc}
    7ea4:	4000f500 	.word	0x4000f500
    7ea8:	2000162c 	.word	0x2000162c
    7eac:	4001f504 	.word	0x4001f504
    7eb0:	4805      	ldr	r0, [pc, #20]	; (7ec8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7eb2:	b510      	push	{r4, lr}
    7eb4:	2100      	movs	r1, #0
    7eb6:	6001      	str	r1, [r0, #0]
    7eb8:	6001      	str	r1, [r0, #0]
    7eba:	f7ff ff51 	bl	7d60 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7ebe:	4903      	ldr	r1, [pc, #12]	; (7ecc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7ec0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ec4:	6008      	str	r0, [r1, #0]
    7ec6:	bd10      	pop	{r4, pc}
    7ec8:	4000f500 	.word	0x4000f500
    7ecc:	4001f508 	.word	0x4001f508

00007ed0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7ed0:	4805      	ldr	r0, [pc, #20]	; (7ee8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7ed2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7ed6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7eda:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7ede:	2100      	movs	r1, #0
    7ee0:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7ee4:	4770      	bx	lr
    7ee6:	0000      	.short	0x0000
    7ee8:	40001000 	.word	0x40001000

00007eec <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7eec:	4904      	ldr	r1, [pc, #16]	; (7f00 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7eee:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7ef2:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7ef6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7efa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7efe:	4770      	bx	lr
    7f00:	40001000 	.word	0x40001000

00007f04 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7f04:	4902      	ldr	r1, [pc, #8]	; (7f10 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7f06:	5c08      	ldrb	r0, [r1, r0]
    7f08:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7f0c:	4770      	bx	lr
    7f0e:	0000      	.short	0x0000
    7f10:	00008ba6 	.word	0x00008ba6

00007f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f16:	4c24      	ldr	r4, [pc, #144]	; (7fa8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7f18:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7f1c:	f010 0f10 	tst.w	r0, #16
    7f20:	d001      	beq.n	7f26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7f22:	2701      	movs	r7, #1
    7f24:	e000      	b.n	7f28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7f26:	2700      	movs	r7, #0
    7f28:	2010      	movs	r0, #16
    7f2a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7f2e:	2002      	movs	r0, #2
    7f30:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7f34:	481d      	ldr	r0, [pc, #116]	; (7fac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7f36:	2500      	movs	r5, #0
    7f38:	491d      	ldr	r1, [pc, #116]	; (7fb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7f3a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    7f3e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7f42:	6008      	str	r0, [r1, #0]
    7f44:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7f48:	f44f 7688 	mov.w	r6, #272	; 0x110
    7f4c:	f010 0fff 	tst.w	r0, #255	; 0xff
    7f50:	d019      	beq.n	7f86 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7f52:	20ff      	movs	r0, #255	; 0xff
    7f54:	f88d 0000 	strb.w	r0, [sp]
    7f58:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f5c:	2001      	movs	r0, #1
    7f5e:	6120      	str	r0, [r4, #16]
    7f60:	e005      	b.n	7f6e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7f62:	bf00      	nop
    7f64:	f89d 0000 	ldrb.w	r0, [sp]
    7f68:	1e40      	subs	r0, r0, #1
    7f6a:	f88d 0000 	strb.w	r0, [sp]
    7f6e:	f89d 0000 	ldrb.w	r0, [sp]
    7f72:	b128      	cbz	r0, 7f80 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7f74:	4631      	mov	r1, r6
    7f76:	4620      	mov	r0, r4
    7f78:	f008 fca5 	bl	108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7f7c:	2800      	cmp	r0, #0
    7f7e:	d0f1      	beq.n	7f64 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7f80:	f89d 0000 	ldrb.w	r0, [sp]
    7f84:	b158      	cbz	r0, 7f9e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7f86:	f000 fc23 	bl	87d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    7f8a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f8e:	f000 fd8b 	bl	8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7f92:	2f00      	cmp	r7, #0
    7f94:	d002      	beq.n	7f9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7f96:	2010      	movs	r0, #16
    7f98:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f9e:	f640 0194 	movw	r1, #2196	; 0x894
    7fa2:	203e      	movs	r0, #62	; 0x3e
    7fa4:	f7f9 f8ce 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fa8:	40001000 	.word	0x40001000
    7fac:	200011f8 	.word	0x200011f8
    7fb0:	4001f508 	.word	0x4001f508

00007fb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fb8:	4d18      	ldr	r5, [pc, #96]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    7fba:	4607      	mov	r7, r0
    7fbc:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7fc0:	07c2      	lsls	r2, r0, #31
    7fc2:	d00f      	beq.n	7fe4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7fc4:	4c16      	ldr	r4, [pc, #88]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fc6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7fca:	f042 0201 	orr.w	r2, r2, #1
    7fce:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7fd2:	f040 0002 	orr.w	r0, r0, #2
    7fd6:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7fda:	2601      	movs	r6, #1
    7fdc:	b13f      	cbz	r7, 7fee <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7fde:	2f01      	cmp	r7, #1
    7fe0:	d00b      	beq.n	7ffa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7fe2:	e010      	b.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7fe4:	f240 716f 	movw	r1, #1903	; 0x76f
    7fe8:	203e      	movs	r0, #62	; 0x3e
    7fea:	f7f9 f8ab 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fee:	4608      	mov	r0, r1
    7ff0:	f000 fdb4 	bl	8b5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7ff4:	726e      	strb	r6, [r5, #9]
    7ff6:	6026      	str	r6, [r4, #0]
    7ff8:	e005      	b.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ffa:	4608      	mov	r0, r1
    7ffc:	f000 fd94 	bl	8b28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8000:	2002      	movs	r0, #2
    8002:	7268      	strb	r0, [r5, #9]
    8004:	6066      	str	r6, [r4, #4]
    8006:	4807      	ldr	r0, [pc, #28]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    8008:	64c6      	str	r6, [r0, #76]	; 0x4c
    800a:	4806      	ldr	r0, [pc, #24]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    800c:	300c      	adds	r0, #12
    800e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    8012:	4638      	mov	r0, r7
    8014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8018:	f000 bd18 	b.w	8a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    801c:	200011f8 	.word	0x200011f8
    8020:	40001000 	.word	0x40001000
    8024:	40008000 	.word	0x40008000

00008028 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    8028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    802c:	4c2c      	ldr	r4, [pc, #176]	; (80e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    802e:	0006      	movs	r6, r0
    8030:	4d2c      	ldr	r5, [pc, #176]	; (80e4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    8032:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    8036:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80e8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    803a:	f040 0002 	orr.w	r0, r0, #2
    803e:	4689      	mov	r9, r1
    8040:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8044:	f04f 0700 	mov.w	r7, #0
    8048:	d002      	beq.n	8050 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    804a:	2e01      	cmp	r6, #1
    804c:	d020      	beq.n	8090 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    804e:	e036      	b.n	80be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8050:	4608      	mov	r0, r1
    8052:	f000 fd83 	bl	8b5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8056:	2001      	movs	r0, #1
    8058:	7260      	strb	r0, [r4, #9]
    805a:	79e0      	ldrb	r0, [r4, #7]
    805c:	2801      	cmp	r0, #1
    805e:	d105      	bne.n	806c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    8060:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8064:	f040 0008 	orr.w	r0, r0, #8
    8068:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    806c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    806e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    8072:	6260      	str	r0, [r4, #36]	; 0x24
    8074:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8078:	f8c8 0000 	str.w	r0, [r8]
    807c:	491b      	ldr	r1, [pc, #108]	; (80ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    807e:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    8082:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8086:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    808a:	fbb0 f7f1 	udiv	r7, r0, r1
    808e:	e016      	b.n	80be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8090:	4608      	mov	r0, r1
    8092:	f000 fd49 	bl	8b28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8096:	2002      	movs	r0, #2
    8098:	7260      	strb	r0, [r4, #9]
    809a:	79e0      	ldrb	r0, [r4, #7]
    809c:	2801      	cmp	r0, #1
    809e:	d105      	bne.n	80ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    80a0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    80a4:	f040 0004 	orr.w	r0, r0, #4
    80a8:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    80ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80ae:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    80b2:	6260      	str	r0, [r4, #36]	; 0x24
    80b4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    80b8:	f8c8 0000 	str.w	r0, [r8]
    80bc:	2729      	movs	r7, #41	; 0x29
    80be:	f000 fbf3 	bl	88a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    80c2:	f008 fc48 	bl	10956 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    80c6:	b120      	cbz	r0, 80d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    80c8:	f7ff ff24 	bl	7f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    80cc:	2000      	movs	r0, #0
    80ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80d2:	2100      	movs	r1, #0
    80d4:	4630      	mov	r0, r6
    80d6:	f000 fcb9 	bl	8a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    80da:	4638      	mov	r0, r7
    80dc:	e7f7      	b.n	80ce <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    80de:	0000      	.short	0x0000
    80e0:	200011f8 	.word	0x200011f8
    80e4:	40001000 	.word	0x40001000
    80e8:	4001f504 	.word	0x4001f504
    80ec:	00008ba0 	.word	0x00008ba0

000080f0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    80f0:	4a02      	ldr	r2, [pc, #8]	; (80fc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    80f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    80f4:	6003      	str	r3, [r0, #0]
    80f6:	6b10      	ldr	r0, [r2, #48]	; 0x30
    80f8:	6008      	str	r0, [r1, #0]
    80fa:	4770      	bx	lr
    80fc:	200011f8 	.word	0x200011f8

00008100 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8100:	b510      	push	{r4, lr}
    8102:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    8104:	4901      	ldr	r1, [pc, #4]	; (810c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    8106:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    810a:	bd10      	pop	{r4, pc}
    810c:	200011e8 	.word	0x200011e8

00008110 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    8110:	490f      	ldr	r1, [pc, #60]	; (8150 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    8112:	b510      	push	{r4, lr}
    8114:	69ca      	ldr	r2, [r1, #28]
    8116:	4282      	cmp	r2, r0
    8118:	d302      	bcc.n	8120 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    811a:	f640 1124 	movw	r1, #2340	; 0x924
    811e:	e00b      	b.n	8138 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    8120:	2201      	movs	r2, #1
    8122:	730a      	strb	r2, [r1, #12]
    8124:	6108      	str	r0, [r1, #16]
    8126:	490b      	ldr	r1, [pc, #44]	; (8154 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    8128:	644a      	str	r2, [r1, #68]	; 0x44
    812a:	1d0a      	adds	r2, r1, #4
    812c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    8130:	4283      	cmp	r3, r0
    8132:	d304      	bcc.n	813e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    8134:	f640 112d 	movw	r1, #2349	; 0x92d
    8138:	203e      	movs	r0, #62	; 0x3e
    813a:	f7f9 f803 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    813e:	2300      	movs	r3, #0
    8140:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    8144:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    814c:	f000 bc52 	b.w	89f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    8150:	200011f8 	.word	0x200011f8
    8154:	40008000 	.word	0x40008000

00008158 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    8158:	b570      	push	{r4, r5, r6, lr}
    815a:	4c0f      	ldr	r4, [pc, #60]	; (8198 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    815c:	4603      	mov	r3, r0
    815e:	2002      	movs	r0, #2
    8160:	7320      	strb	r0, [r4, #12]
    8162:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    8166:	2096      	movs	r0, #150	; 0x96
    8168:	f894 1020 	ldrb.w	r1, [r4, #32]
    816c:	7d22      	ldrb	r2, [r4, #20]
    816e:	2d01      	cmp	r5, #1
    8170:	d00e      	beq.n	8190 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8172:	f000 fd51 	bl	8c18 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    8176:	6120      	str	r0, [r4, #16]
    8178:	4808      	ldr	r0, [pc, #32]	; (819c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    817a:	2100      	movs	r1, #0
    817c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8180:	6921      	ldr	r1, [r4, #16]
    8182:	69e0      	ldr	r0, [r4, #28]
    8184:	4408      	add	r0, r1
    8186:	4905      	ldr	r1, [pc, #20]	; (819c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8188:	1d09      	adds	r1, r1, #4
    818a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    818e:	bd70      	pop	{r4, r5, r6, pc}
    8190:	f000 fd60 	bl	8c54 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8194:	e7ef      	b.n	8176 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    8196:	0000      	.short	0x0000
    8198:	200011f8 	.word	0x200011f8
    819c:	40008000 	.word	0x40008000

000081a0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    81a0:	b510      	push	{r4, lr}
    81a2:	f008 fcfe 	bl	10ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    81a6:	2800      	cmp	r0, #0
    81a8:	d006      	beq.n	81b8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    81aa:	4804      	ldr	r0, [pc, #16]	; (81bc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    81ac:	6801      	ldr	r1, [r0, #0]
    81ae:	f021 0101 	bic.w	r1, r1, #1
    81b2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    81b6:	6001      	str	r1, [r0, #0]
    81b8:	bd10      	pop	{r4, pc}
    81ba:	0000      	.short	0x0000
    81bc:	40001774 	.word	0x40001774

000081c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    81c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81c4:	2234      	movs	r2, #52	; 0x34
    81c6:	2100      	movs	r1, #0
    81c8:	4813      	ldr	r0, [pc, #76]	; (8218 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    81ca:	f008 fde2 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81ce:	f000 fc6b 	bl	8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    81d2:	f008 fc9f 	bl	10b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    81d6:	4d11      	ldr	r5, [pc, #68]	; (821c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81d8:	4e10      	ldr	r6, [pc, #64]	; (821c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81da:	2400      	movs	r4, #0
    81dc:	4f0f      	ldr	r7, [pc, #60]	; (821c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81de:	3508      	adds	r5, #8
    81e0:	3610      	adds	r6, #16
    81e2:	b928      	cbnz	r0, 81f0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    81e4:	f008 fcad 	bl	10b42 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    81e8:	b910      	cbnz	r0, 81f0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    81ea:	f008 fcb4 	bl	10b56 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    81ee:	b108      	cbz	r0, 81f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    81f0:	2224      	movs	r2, #36	; 0x24
    81f2:	e006      	b.n	8202 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    81f4:	f008 fcef 	bl	10bd6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    81f8:	b910      	cbnz	r0, 8200 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    81fa:	f008 fce2 	bl	10bc2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    81fe:	b140      	cbz	r0, 8212 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    8200:	2240      	movs	r2, #64	; 0x40
    8202:	21ff      	movs	r1, #255	; 0xff
    8204:	4638      	mov	r0, r7
    8206:	f008 fdc4 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    820a:	602c      	str	r4, [r5, #0]
    820c:	6034      	str	r4, [r6, #0]
    820e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8212:	2238      	movs	r2, #56	; 0x38
    8214:	e7f5      	b.n	8202 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8216:	0000      	.short	0x0000
    8218:	200011f8 	.word	0x200011f8
    821c:	40000e00 	.word	0x40000e00

00008220 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8220:	4801      	ldr	r0, [pc, #4]	; (8228 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8222:	69c0      	ldr	r0, [r0, #28]
    8224:	4770      	bx	lr
    8226:	0000      	.short	0x0000
    8228:	200011f8 	.word	0x200011f8

0000822c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    822c:	4801      	ldr	r0, [pc, #4]	; (8234 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    822e:	f890 0020 	ldrb.w	r0, [r0, #32]
    8232:	4770      	bx	lr
    8234:	200011f8 	.word	0x200011f8

00008238 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    8238:	4801      	ldr	r0, [pc, #4]	; (8240 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    823a:	6980      	ldr	r0, [r0, #24]
    823c:	4770      	bx	lr
    823e:	0000      	.short	0x0000
    8240:	200011f8 	.word	0x200011f8

00008244 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    8244:	b510      	push	{r4, lr}
    8246:	f000 fbe3 	bl	8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    824a:	f7ff fe63 	bl	7f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    824e:	f004 fba1 	bl	c994 <mpsl_fem_disable>
    8252:	b130      	cbz	r0, 8262 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8254:	1c40      	adds	r0, r0, #1
    8256:	d004      	beq.n	8262 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8258:	f240 5165 	movw	r1, #1381	; 0x565
    825c:	203e      	movs	r0, #62	; 0x3e
    825e:	f7f8 ff71 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8262:	480f      	ldr	r0, [pc, #60]	; (82a0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    8264:	4a0f      	ldr	r2, [pc, #60]	; (82a4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    8266:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8268:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    826c:	6011      	str	r1, [r2, #0]
    826e:	2400      	movs	r4, #0
    8270:	6244      	str	r4, [r0, #36]	; 0x24
    8272:	7304      	strb	r4, [r0, #12]
    8274:	61c4      	str	r4, [r0, #28]
    8276:	6184      	str	r4, [r0, #24]
    8278:	f000 fbca 	bl	8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    827c:	480a      	ldr	r0, [pc, #40]	; (82a8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    827e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    8282:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    8286:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    828a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    828e:	2001      	movs	r0, #1
    8290:	f008 fb08 	bl	108a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8298:	2001      	movs	r0, #1
    829a:	f008 baf6 	b.w	1088a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    829e:	0000      	.short	0x0000
    82a0:	200011f8 	.word	0x200011f8
    82a4:	4001f508 	.word	0x4001f508
    82a8:	40008000 	.word	0x40008000

000082ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    82ac:	b570      	push	{r4, r5, r6, lr}
    82ae:	2001      	movs	r0, #1
    82b0:	f008 faf8 	bl	108a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    82b4:	4c37      	ldr	r4, [pc, #220]	; (8394 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    82b6:	2000      	movs	r0, #0
    82b8:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    82bc:	2001      	movs	r0, #1
    82be:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    82c2:	f008 fc5e 	bl	10b82 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    82c6:	4d34      	ldr	r5, [pc, #208]	; (8398 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82c8:	b118      	cbz	r0, 82d2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    82ca:	6828      	ldr	r0, [r5, #0]
    82cc:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    82d0:	6028      	str	r0, [r5, #0]
    82d2:	f008 fc4a 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    82d6:	b128      	cbz	r0, 82e4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    82d8:	6828      	ldr	r0, [r5, #0]
    82da:	4930      	ldr	r1, [pc, #192]	; (839c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    82dc:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    82e0:	4308      	orrs	r0, r1
    82e2:	6028      	str	r0, [r5, #0]
    82e4:	f008 fc5d 	bl	10ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    82e8:	b138      	cbz	r0, 82fa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    82ea:	482b      	ldr	r0, [pc, #172]	; (8398 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82ec:	1d00      	adds	r0, r0, #4
    82ee:	6801      	ldr	r1, [r0, #0]
    82f0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    82f4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    82f8:	6001      	str	r1, [r0, #0]
    82fa:	4927      	ldr	r1, [pc, #156]	; (8398 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82fc:	4828      	ldr	r0, [pc, #160]	; (83a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    82fe:	313c      	adds	r1, #60	; 0x3c
    8300:	6008      	str	r0, [r1, #0]
    8302:	f004 fb81 	bl	ca08 <mpsl_fem_device_config_254_apply_get>
    8306:	b140      	cbz	r0, 831a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8308:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    830c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8310:	1c41      	adds	r1, r0, #1
    8312:	d002      	beq.n	831a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8314:	4920      	ldr	r1, [pc, #128]	; (8398 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8316:	3110      	adds	r1, #16
    8318:	6008      	str	r0, [r1, #0]
    831a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    831e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8320:	1c41      	adds	r1, r0, #1
    8322:	d004      	beq.n	832e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    8324:	491f      	ldr	r1, [pc, #124]	; (83a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    8326:	680a      	ldr	r2, [r1, #0]
    8328:	f360 4217 	bfi	r2, r0, #16, #8
    832c:	600a      	str	r2, [r1, #0]
    832e:	f240 1103 	movw	r1, #259	; 0x103
    8332:	f240 605b 	movw	r0, #1627	; 0x65b
    8336:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    833a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    833e:	2001      	movs	r0, #1
    8340:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8344:	f000 f842 	bl	83cc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8348:	f240 2001 	movw	r0, #513	; 0x201
    834c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8350:	2002      	movs	r0, #2
    8352:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8356:	4914      	ldr	r1, [pc, #80]	; (83a8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8358:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    835c:	6008      	str	r0, [r1, #0]
    835e:	4913      	ldr	r1, [pc, #76]	; (83ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8360:	2000      	movs	r0, #0
    8362:	8608      	strh	r0, [r1, #48]	; 0x30
    8364:	3110      	adds	r1, #16
    8366:	61c8      	str	r0, [r1, #28]
    8368:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    836c:	2001      	movs	r0, #1
    836e:	f008 fa8c 	bl	1088a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8372:	2010      	movs	r0, #16
    8374:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8378:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    837c:	2002      	movs	r0, #2
    837e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8382:	480b      	ldr	r0, [pc, #44]	; (83b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    8384:	6800      	ldr	r0, [r0, #0]
    8386:	2800      	cmp	r0, #0
    8388:	d002      	beq.n	8390 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    838a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    838e:	4700      	bx	r0
    8390:	bd70      	pop	{r4, r5, r6, pc}
    8392:	0000      	.short	0x0000
    8394:	40001000 	.word	0x40001000
    8398:	4000173c 	.word	0x4000173c
    839c:	80000096 	.word	0x80000096
    83a0:	8900002c 	.word	0x8900002c
    83a4:	4000158c 	.word	0x4000158c
    83a8:	4001f504 	.word	0x4001f504
    83ac:	200011e8 	.word	0x200011e8
    83b0:	200002dc 	.word	0x200002dc

000083b4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    83b4:	4901      	ldr	r1, [pc, #4]	; (83bc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    83b6:	7548      	strb	r0, [r1, #21]
    83b8:	4770      	bx	lr
    83ba:	0000      	.short	0x0000
    83bc:	200011f8 	.word	0x200011f8

000083c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    83c0:	4901      	ldr	r1, [pc, #4]	; (83c8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    83c2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    83c6:	4770      	bx	lr
    83c8:	00008bf4 	.word	0x00008bf4

000083cc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    83cc:	4908      	ldr	r1, [pc, #32]	; (83f0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    83ce:	b510      	push	{r4, lr}
    83d0:	7508      	strb	r0, [r1, #20]
    83d2:	4908      	ldr	r1, [pc, #32]	; (83f4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    83d4:	2801      	cmp	r0, #1
    83d6:	d006      	beq.n	83e6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    83d8:	2802      	cmp	r0, #2
    83da:	d006      	beq.n	83ea <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    83dc:	f640 516c 	movw	r1, #3436	; 0xd6c
    83e0:	203e      	movs	r0, #62	; 0x3e
    83e2:	f7f8 feaf 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83e6:	2003      	movs	r0, #3
    83e8:	e000      	b.n	83ec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    83ea:	2004      	movs	r0, #4
    83ec:	6008      	str	r0, [r1, #0]
    83ee:	bd10      	pop	{r4, pc}
    83f0:	200011f8 	.word	0x200011f8
    83f4:	40001510 	.word	0x40001510

000083f8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    83f8:	4905      	ldr	r1, [pc, #20]	; (8410 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    83fa:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    83fe:	4805      	ldr	r0, [pc, #20]	; (8414 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8400:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    8404:	f041 0101 	orr.w	r1, r1, #1
    8408:	7001      	strb	r1, [r0, #0]
    840a:	f000 ba13 	b.w	8834 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    840e:	0000      	.short	0x0000
    8410:	40001000 	.word	0x40001000
    8414:	200011f8 	.word	0x200011f8

00008418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8418:	4901      	ldr	r1, [pc, #4]	; (8420 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    841a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    841e:	4770      	bx	lr
    8420:	00008c00 	.word	0x00008c00

00008424 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8428:	4e30      	ldr	r6, [pc, #192]	; (84ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    842a:	4c31      	ldr	r4, [pc, #196]	; (84f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    842c:	4688      	mov	r8, r1
    842e:	0007      	movs	r7, r0
    8430:	4615      	mov	r5, r2
    8432:	f04f 0901 	mov.w	r9, #1
    8436:	d006      	beq.n	8446 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8438:	2f01      	cmp	r7, #1
    843a:	d012      	beq.n	8462 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    843c:	f640 0117 	movw	r1, #2071	; 0x817
    8440:	203e      	movs	r0, #62	; 0x3e
    8442:	f7f8 fe7f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8446:	4610      	mov	r0, r2
    8448:	f000 fb88 	bl	8b5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    844c:	4829      	ldr	r0, [pc, #164]	; (84f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    844e:	f884 9009 	strb.w	r9, [r4, #9]
    8452:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8456:	4640      	mov	r0, r8
    8458:	f000 fb2e 	bl	8ab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    845c:	4605      	mov	r5, r0
    845e:	4630      	mov	r0, r6
    8460:	e00c      	b.n	847c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    8462:	4610      	mov	r0, r2
    8464:	f000 fb60 	bl	8b28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8468:	2002      	movs	r0, #2
    846a:	7260      	strb	r0, [r4, #9]
    846c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8470:	4640      	mov	r0, r8
    8472:	f000 fb21 	bl	8ab8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    8476:	4605      	mov	r5, r0
    8478:	481c      	ldr	r0, [pc, #112]	; (84ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    847a:	1d00      	adds	r0, r0, #4
    847c:	f000 fada 	bl	8a34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    8480:	f8df 8074 	ldr.w	r8, [pc, #116]	; 84f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8484:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8488:	f8df a074 	ldr.w	sl, [pc, #116]	; 8500 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    848c:	481b      	ldr	r0, [pc, #108]	; (84fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    848e:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    8492:	2010      	movs	r0, #16
    8494:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8498:	6a60      	ldr	r0, [r4, #36]	; 0x24
    849a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    849e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    84a2:	6260      	str	r0, [r4, #36]	; 0x24
    84a4:	4817      	ldr	r0, [pc, #92]	; (8504 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    84a6:	6006      	str	r6, [r0, #0]
    84a8:	f000 f9fe 	bl	88a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    84ac:	4641      	mov	r1, r8
    84ae:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    84b2:	4811      	ldr	r0, [pc, #68]	; (84f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    84b4:	300c      	adds	r0, #12
    84b6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    84ba:	42a8      	cmp	r0, r5
    84bc:	d310      	bcc.n	84e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    84be:	2000      	movs	r0, #0
    84c0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84c4:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    84c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84ca:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    84ce:	6260      	str	r0, [r4, #36]	; 0x24
    84d0:	480c      	ldr	r0, [pc, #48]	; (8504 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    84d2:	1d00      	adds	r0, r0, #4
    84d4:	6006      	str	r6, [r0, #0]
    84d6:	f7ff fd1d 	bl	7f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    84da:	2000      	movs	r0, #0
    84dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84e0:	4629      	mov	r1, r5
    84e2:	4638      	mov	r0, r7
    84e4:	f000 fab2 	bl	8a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    84e8:	2001      	movs	r0, #1
    84ea:	e7f7      	b.n	84dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    84ec:	40001000 	.word	0x40001000
    84f0:	200011f8 	.word	0x200011f8
    84f4:	00008ba0 	.word	0x00008ba0
    84f8:	40008000 	.word	0x40008000
    84fc:	40008140 	.word	0x40008140
    8500:	4001f098 	.word	0x4001f098
    8504:	4001f504 	.word	0x4001f504

00008508 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8508:	4b0d      	ldr	r3, [pc, #52]	; (8540 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    850a:	b510      	push	{r4, lr}
    850c:	71d8      	strb	r0, [r3, #7]
    850e:	729a      	strb	r2, [r3, #10]
    8510:	b151      	cbz	r1, 8528 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    8512:	2002      	movs	r0, #2
    8514:	7218      	strb	r0, [r3, #8]
    8516:	2801      	cmp	r0, #1
    8518:	d008      	beq.n	852c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    851a:	2802      	cmp	r0, #2
    851c:	d00f      	beq.n	853e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    851e:	f640 2144 	movw	r1, #2628	; 0xa44
    8522:	203e      	movs	r0, #62	; 0x3e
    8524:	f7f8 fe0e 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8528:	2001      	movs	r0, #1
    852a:	e7f3      	b.n	8514 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    852c:	7a58      	ldrb	r0, [r3, #9]
    852e:	2802      	cmp	r0, #2
    8530:	d105      	bne.n	853e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8532:	f000 f943 	bl	87bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    853a:	f000 ba51 	b.w	89e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    853e:	bd10      	pop	{r4, pc}
    8540:	200011f8 	.word	0x200011f8

00008544 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8544:	4902      	ldr	r1, [pc, #8]	; (8550 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8546:	2000      	movs	r0, #0
    8548:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    854c:	4770      	bx	lr
    854e:	0000      	.short	0x0000
    8550:	40008000 	.word	0x40008000

00008554 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8554:	4904      	ldr	r1, [pc, #16]	; (8568 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8556:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    855a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    855e:	4249      	negs	r1, r1
    8560:	7001      	strb	r1, [r0, #0]
    8562:	2001      	movs	r0, #1
    8564:	4770      	bx	lr
    8566:	0000      	.short	0x0000
    8568:	40001000 	.word	0x40001000

0000856c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    856c:	4903      	ldr	r1, [pc, #12]	; (857c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    856e:	0e02      	lsrs	r2, r0, #24
    8570:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8574:	0200      	lsls	r0, r0, #8
    8576:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    857a:	4770      	bx	lr
    857c:	40001000 	.word	0x40001000

00008580 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8580:	4901      	ldr	r1, [pc, #4]	; (8588 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    8582:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    8586:	4770      	bx	lr
    8588:	40001000 	.word	0x40001000

0000858c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    858c:	b510      	push	{r4, lr}
    858e:	2200      	movs	r2, #0
    8590:	2901      	cmp	r1, #1
    8592:	d006      	beq.n	85a2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    8594:	2902      	cmp	r1, #2
    8596:	d002      	beq.n	859e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8598:	f240 21d2 	movw	r1, #722	; 0x2d2
    859c:	e014      	b.n	85c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    859e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    85a2:	490b      	ldr	r1, [pc, #44]	; (85d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    85a4:	430a      	orrs	r2, r1
    85a6:	490b      	ldr	r1, [pc, #44]	; (85d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    85a8:	600a      	str	r2, [r1, #0]
    85aa:	490b      	ldr	r1, [pc, #44]	; (85d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    85ac:	4308      	orrs	r0, r1
    85ae:	4909      	ldr	r1, [pc, #36]	; (85d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    85b0:	1d09      	adds	r1, r1, #4
    85b2:	6008      	str	r0, [r1, #0]
    85b4:	4809      	ldr	r0, [pc, #36]	; (85dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    85b6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85ba:	b2c0      	uxtb	r0, r0
    85bc:	2803      	cmp	r0, #3
    85be:	d001      	beq.n	85c4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    85c0:	280b      	cmp	r0, #11
    85c2:	d104      	bne.n	85ce <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    85c4:	f240 21ea 	movw	r1, #746	; 0x2ea
    85c8:	203e      	movs	r0, #62	; 0x3e
    85ca:	f7f8 fdbb 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ce:	bd10      	pop	{r4, pc}
    85d0:	00100108 	.word	0x00100108
    85d4:	40001514 	.word	0x40001514
    85d8:	02030000 	.word	0x02030000
    85dc:	40001000 	.word	0x40001000

000085e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    85e0:	4901      	ldr	r1, [pc, #4]	; (85e8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    85e2:	7588      	strb	r0, [r1, #22]
    85e4:	4770      	bx	lr
    85e6:	0000      	.short	0x0000
    85e8:	200011f8 	.word	0x200011f8

000085ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    85ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85f0:	4851      	ldr	r0, [pc, #324]	; (8738 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    85f2:	f04f 0a01 	mov.w	sl, #1
    85f6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    85fa:	484f      	ldr	r0, [pc, #316]	; (8738 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    85fc:	300c      	adds	r0, #12
    85fe:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    8602:	f008 f9a6 	bl	10952 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8606:	4c4d      	ldr	r4, [pc, #308]	; (873c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8608:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    860c:	f000 f8e0 	bl	87d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8610:	494b      	ldr	r1, [pc, #300]	; (8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8612:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8614:	6008      	str	r0, [r1, #0]
    8616:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8744 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    861a:	2000      	movs	r0, #0
    861c:	6260      	str	r0, [r4, #36]	; 0x24
    861e:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    8622:	f240 131d 	movw	r3, #285	; 0x11d
    8626:	439a      	bics	r2, r3
    8628:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    862c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8630:	f000 f94e 	bl	88d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    8634:	4605      	mov	r5, r0
    8636:	4840      	ldr	r0, [pc, #256]	; (8738 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8638:	3008      	adds	r0, #8
    863a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    863e:	4e3e      	ldr	r6, [pc, #248]	; (8738 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8640:	61e0      	str	r0, [r4, #28]
    8642:	1d36      	adds	r6, r6, #4
    8644:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8648:	61a0      	str	r0, [r4, #24]
    864a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    864e:	7d21      	ldrb	r1, [r4, #20]
    8650:	f884 1020 	strb.w	r1, [r4, #32]
    8654:	7a61      	ldrb	r1, [r4, #9]
    8656:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    865a:	46a1      	mov	r9, r4
    865c:	2400      	movs	r4, #0
    865e:	4639      	mov	r1, r7
    8660:	4628      	mov	r0, r5
    8662:	f000 f983 	bl	896c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    8666:	b910      	cbnz	r0, 866e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8668:	f8c8 a010 	str.w	sl, [r8, #16]
    866c:	2401      	movs	r4, #1
    866e:	4f33      	ldr	r7, [pc, #204]	; (873c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8670:	07e8      	lsls	r0, r5, #31
    8672:	f1a7 0710 	sub.w	r7, r7, #16
    8676:	d120      	bne.n	86ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    8678:	07a8      	lsls	r0, r5, #30
    867a:	d527      	bpl.n	86cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    867c:	f008 fa91 	bl	10ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8680:	b9f0      	cbnz	r0, 86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8682:	f008 fa7e 	bl	10b82 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8686:	b9d8      	cbnz	r0, 86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8688:	482f      	ldr	r0, [pc, #188]	; (8748 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    868a:	6800      	ldr	r0, [r0, #0]
    868c:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    8690:	f3c0 6300 	ubfx	r3, r0, #24, #1
    8694:	f000 020f 	and.w	r2, r0, #15
    8698:	f3c0 1103 	ubfx	r1, r0, #4, #4
    869c:	f3c0 2803 	ubfx	r8, r0, #8, #4
    86a0:	b173      	cbz	r3, 86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86a2:	b11a      	cbz	r2, 86ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    86a4:	b111      	cbz	r1, 86ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    86a6:	f1b8 0f00 	cmp.w	r8, #0
    86aa:	d109      	bne.n	86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86ac:	f3c0 4004 	ubfx	r0, r0, #16, #5
    86b0:	2801      	cmp	r0, #1
    86b2:	d105      	bne.n	86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86b4:	f1bc 0f03 	cmp.w	ip, #3
    86b8:	d202      	bcs.n	86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86ba:	6838      	ldr	r0, [r7, #0]
    86bc:	4780      	blx	r0
    86be:	e00e      	b.n	86de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    86c0:	f345 0080 	sbfx	r0, r5, #2, #1
    86c4:	4621      	mov	r1, r4
    86c6:	1c40      	adds	r0, r0, #1
    86c8:	687a      	ldr	r2, [r7, #4]
    86ca:	e007      	b.n	86dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    86cc:	f015 0f28 	tst.w	r5, #40	; 0x28
    86d0:	d005      	beq.n	86de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    86d2:	f345 1140 	sbfx	r1, r5, #5, #1
    86d6:	68ba      	ldr	r2, [r7, #8]
    86d8:	4620      	mov	r0, r4
    86da:	1c49      	adds	r1, r1, #1
    86dc:	4790      	blx	r2
    86de:	06e8      	lsls	r0, r5, #27
    86e0:	d501      	bpl.n	86e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    86e2:	68f8      	ldr	r0, [r7, #12]
    86e4:	4780      	blx	r0
    86e6:	f899 1009 	ldrb.w	r1, [r9, #9]
    86ea:	4648      	mov	r0, r9
    86ec:	2902      	cmp	r1, #2
    86ee:	d120      	bne.n	8732 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    86f0:	7b01      	ldrb	r1, [r0, #12]
    86f2:	2900      	cmp	r1, #0
    86f4:	d01d      	beq.n	8732 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    86f6:	2902      	cmp	r1, #2
    86f8:	d004      	beq.n	8704 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    86fa:	2901      	cmp	r1, #1
    86fc:	d009      	beq.n	8712 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    86fe:	f640 4156 	movw	r1, #3158	; 0xc56
    8702:	e00d      	b.n	8720 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    8704:	69c1      	ldr	r1, [r0, #28]
    8706:	f8d9 0010 	ldr.w	r0, [r9, #16]
    870a:	4408      	add	r0, r1
    870c:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8710:	e00b      	b.n	872a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    8712:	6901      	ldr	r1, [r0, #16]
    8714:	f8d9 001c 	ldr.w	r0, [r9, #28]
    8718:	4281      	cmp	r1, r0
    871a:	d804      	bhi.n	8726 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    871c:	f640 4157 	movw	r1, #3159	; 0xc57
    8720:	203e      	movs	r0, #62	; 0x3e
    8722:	f7f8 fd0f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8726:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    872a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    872e:	f000 b961 	b.w	89f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    8732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8736:	0000      	.short	0x0000
    8738:	40008000 	.word	0x40008000
    873c:	200011f8 	.word	0x200011f8
    8740:	4001f508 	.word	0x4001f508
    8744:	40001000 	.word	0x40001000
    8748:	40001450 	.word	0x40001450
    874c:	480b      	ldr	r0, [pc, #44]	; (877c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    874e:	7d81      	ldrb	r1, [r0, #22]
    8750:	480b      	ldr	r0, [pc, #44]	; (8780 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    8752:	5c40      	ldrb	r0, [r0, r1]
    8754:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8758:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    875c:	d204      	bcs.n	8768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    875e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    8762:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8766:	e001      	b.n	876c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    8768:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    876c:	4a05      	ldr	r2, [pc, #20]	; (8784 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    876e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    8772:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8776:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    877a:	4770      	bx	lr
    877c:	200011f8 	.word	0x200011f8
    8780:	00008ba6 	.word	0x00008ba6
    8784:	40001000 	.word	0x40001000
    8788:	b508      	push	{r3, lr}
    878a:	490b      	ldr	r1, [pc, #44]	; (87b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    878c:	466b      	mov	r3, sp
    878e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8792:	7d89      	ldrb	r1, [r1, #22]
    8794:	f000 faaa 	bl	8cec <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8798:	f99d 0000 	ldrsb.w	r0, [sp]
    879c:	f000 fa7a 	bl	8c94 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    87a0:	f10d 0001 	add.w	r0, sp, #1
    87a4:	f004 f91a 	bl	c9dc <mpsl_fem_pa_gain_set>
    87a8:	2800      	cmp	r0, #0
    87aa:	d004      	beq.n	87b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    87ac:	f240 51e6 	movw	r1, #1510	; 0x5e6
    87b0:	203e      	movs	r0, #62	; 0x3e
    87b2:	f7f8 fcc7 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87b6:	bd08      	pop	{r3, pc}
    87b8:	200011f8 	.word	0x200011f8
    87bc:	4803      	ldr	r0, [pc, #12]	; (87cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    87be:	7a01      	ldrb	r1, [r0, #8]
    87c0:	2901      	cmp	r1, #1
    87c2:	d102      	bne.n	87ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    87c4:	7a80      	ldrb	r0, [r0, #10]
    87c6:	f7ff bfdf 	b.w	8788 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    87ca:	4770      	bx	lr
    87cc:	200011f8 	.word	0x200011f8
    87d0:	480d      	ldr	r0, [pc, #52]	; (8808 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    87d2:	b510      	push	{r4, lr}
    87d4:	7a40      	ldrb	r0, [r0, #9]
    87d6:	2801      	cmp	r0, #1
    87d8:	d00c      	beq.n	87f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    87da:	2802      	cmp	r0, #2
    87dc:	d113      	bne.n	8806 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    87de:	f004 f8df 	bl	c9a0 <mpsl_fem_lna_configuration_clear>
    87e2:	2800      	cmp	r0, #0
    87e4:	d00f      	beq.n	8806 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    87e6:	1c40      	adds	r0, r0, #1
    87e8:	d00d      	beq.n	8806 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    87ea:	f640 01ab 	movw	r1, #2219	; 0x8ab
    87ee:	203e      	movs	r0, #62	; 0x3e
    87f0:	f7f8 fca8 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87f4:	f004 f8e6 	bl	c9c4 <mpsl_fem_pa_configuration_clear>
    87f8:	2800      	cmp	r0, #0
    87fa:	d004      	beq.n	8806 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    87fc:	1c40      	adds	r0, r0, #1
    87fe:	d002      	beq.n	8806 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8800:	f640 01a5 	movw	r1, #2213	; 0x8a5
    8804:	e7f3      	b.n	87ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    8806:	bd10      	pop	{r4, pc}
    8808:	200011f8 	.word	0x200011f8
    880c:	4808      	ldr	r0, [pc, #32]	; (8830 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    880e:	2100      	movs	r1, #0
    8810:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8814:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8818:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    881c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8820:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8824:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8828:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    882c:	4770      	bx	lr
    882e:	0000      	.short	0x0000
    8830:	40001000 	.word	0x40001000
    8834:	4818      	ldr	r0, [pc, #96]	; (8898 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    8836:	b510      	push	{r4, lr}
    8838:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    883c:	07c1      	lsls	r1, r0, #31
    883e:	d029      	beq.n	8894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8840:	0781      	lsls	r1, r0, #30
    8842:	d514      	bpl.n	886e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    8844:	4815      	ldr	r0, [pc, #84]	; (889c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    8846:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    884a:	f041 0101 	orr.w	r1, r1, #1
    884e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8852:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8856:	b2c0      	uxtb	r0, r0
    8858:	280b      	cmp	r0, #11
    885a:	d005      	beq.n	8868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    885c:	280a      	cmp	r0, #10
    885e:	d003      	beq.n	8868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    8860:	2803      	cmp	r0, #3
    8862:	d001      	beq.n	8868 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    8864:	2802      	cmp	r0, #2
    8866:	d115      	bne.n	8894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8868:	f240 610f 	movw	r1, #1551	; 0x60f
    886c:	e00f      	b.n	888e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    886e:	0740      	lsls	r0, r0, #29
    8870:	d510      	bpl.n	8894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8872:	480a      	ldr	r0, [pc, #40]	; (889c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    8874:	490a      	ldr	r1, [pc, #40]	; (88a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    8876:	3008      	adds	r0, #8
    8878:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    887c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8880:	4808      	ldr	r0, [pc, #32]	; (88a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    8882:	f008 f825 	bl	108d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8886:	2800      	cmp	r0, #0
    8888:	d004      	beq.n	8894 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    888a:	f240 6117 	movw	r1, #1559	; 0x617
    888e:	203e      	movs	r0, #62	; 0x3e
    8890:	f7f8 fc58 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8894:	bd10      	pop	{r4, pc}
    8896:	0000      	.short	0x0000
    8898:	200011f8 	.word	0x200011f8
    889c:	40001000 	.word	0x40001000
    88a0:	4001f098 	.word	0x4001f098
    88a4:	40008000 	.word	0x40008000
    88a8:	4808      	ldr	r0, [pc, #32]	; (88cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    88aa:	4601      	mov	r1, r0
    88ac:	79c2      	ldrb	r2, [r0, #7]
    88ae:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    88b2:	b112      	cbz	r2, 88ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    88b4:	2a01      	cmp	r2, #1
    88b6:	d003      	beq.n	88c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    88b8:	e006      	b.n	88c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    88ba:	f041 0102 	orr.w	r1, r1, #2
    88be:	e001      	b.n	88c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    88c0:	f041 0104 	orr.w	r1, r1, #4
    88c4:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    88c8:	f7ff bfb4 	b.w	8834 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    88cc:	200011f8 	.word	0x200011f8
    88d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88d4:	4d22      	ldr	r5, [pc, #136]	; (8960 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    88d6:	2400      	movs	r4, #0
    88d8:	7b28      	ldrb	r0, [r5, #12]
    88da:	b138      	cbz	r0, 88ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    88dc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    88e0:	4820      	ldr	r0, [pc, #128]	; (8964 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    88e2:	f007 fff5 	bl	108d0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    88e6:	b108      	cbz	r0, 88ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    88e8:	2701      	movs	r7, #1
    88ea:	e000      	b.n	88ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    88ec:	2700      	movs	r7, #0
    88ee:	7a68      	ldrb	r0, [r5, #9]
    88f0:	4e1d      	ldr	r6, [pc, #116]	; (8968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    88f2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    88f6:	2801      	cmp	r0, #1
    88f8:	d002      	beq.n	8900 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    88fa:	2802      	cmp	r0, #2
    88fc:	d006      	beq.n	890c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    88fe:	e016      	b.n	892e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8900:	4630      	mov	r0, r6
    8902:	f007 ffe0 	bl	108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8906:	b190      	cbz	r0, 892e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8908:	2408      	movs	r4, #8
    890a:	e010      	b.n	892e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    890c:	4630      	mov	r0, r6
    890e:	f007 ffda 	bl	108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8912:	b100      	cbz	r0, 8916 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    8914:	2402      	movs	r4, #2
    8916:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    891a:	43c0      	mvns	r0, r0
    891c:	f340 0000 	sbfx	r0, r0, #0, #1
    8920:	1c40      	adds	r0, r0, #1
    8922:	d101      	bne.n	8928 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    8924:	f044 0404 	orr.w	r4, r4, #4
    8928:	b10f      	cbz	r7, 892e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    892a:	f044 0401 	orr.w	r4, r4, #1
    892e:	f014 0f0b 	tst.w	r4, #11
    8932:	d107      	bne.n	8944 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    8934:	f44f 7188 	mov.w	r1, #272	; 0x110
    8938:	4630      	mov	r0, r6
    893a:	f007 ffc4 	bl	108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    893e:	b108      	cbz	r0, 8944 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    8940:	f044 0410 	orr.w	r4, r4, #16
    8944:	f7ff ff62 	bl	880c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    8948:	06e0      	lsls	r0, r4, #27
    894a:	d506      	bpl.n	895a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    894c:	0720      	lsls	r0, r4, #28
    894e:	d404      	bmi.n	895a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    8950:	7a68      	ldrb	r0, [r5, #9]
    8952:	2801      	cmp	r0, #1
    8954:	d101      	bne.n	895a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    8956:	f044 0420 	orr.w	r4, r4, #32
    895a:	4620      	mov	r0, r4
    895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8960:	200011f8 	.word	0x200011f8
    8964:	40008000 	.word	0x40008000
    8968:	40001000 	.word	0x40001000
    896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8970:	4c1a      	ldr	r4, [pc, #104]	; (89dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    8972:	460d      	mov	r5, r1
    8974:	7a21      	ldrb	r1, [r4, #8]
    8976:	b129      	cbz	r1, 8984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    8978:	f010 0f11 	tst.w	r0, #17
    897c:	d007      	beq.n	898e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    897e:	f7ff fac9 	bl	7f14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8982:	e024      	b.n	89ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    8984:	f000 f890 	bl	8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    8988:	2000      	movs	r0, #0
    898a:	7320      	strb	r0, [r4, #12]
    898c:	e01f      	b.n	89ce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    898e:	2901      	cmp	r1, #1
    8990:	d001      	beq.n	8996 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    8992:	2601      	movs	r6, #1
    8994:	e000      	b.n	8998 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    8996:	2600      	movs	r6, #0
    8998:	79e0      	ldrb	r0, [r4, #7]
    899a:	2801      	cmp	r0, #1
    899c:	d00e      	beq.n	89bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    899e:	2700      	movs	r7, #0
    89a0:	f000 f882 	bl	8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    89a4:	2196      	movs	r1, #150	; 0x96
    89a6:	4630      	mov	r0, r6
    89a8:	f000 f894 	bl	8ad4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    89ac:	4601      	mov	r1, r0
    89ae:	b14f      	cbz	r7, 89c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    89b0:	353b      	adds	r5, #59	; 0x3b
    89b2:	428d      	cmp	r5, r1
    89b4:	d904      	bls.n	89c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    89b6:	2000      	movs	r0, #0
    89b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89bc:	2701      	movs	r7, #1
    89be:	e7ef      	b.n	89a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    89c0:	2001      	movs	r0, #1
    89c2:	71e0      	strb	r0, [r4, #7]
    89c4:	7aa2      	ldrb	r2, [r4, #10]
    89c6:	4630      	mov	r0, r6
    89c8:	f7ff fd2c 	bl	8424 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    89cc:	b108      	cbz	r0, 89d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    89ce:	2001      	movs	r0, #1
    89d0:	e7f2      	b.n	89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    89d2:	f640 21a5 	movw	r1, #2725	; 0xaa5
    89d6:	203e      	movs	r0, #62	; 0x3e
    89d8:	f7f8 fbb4 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89dc:	200011f8 	.word	0x200011f8
    89e0:	4803      	ldr	r0, [pc, #12]	; (89f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    89e2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    89e6:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    89ea:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    89ee:	4770      	bx	lr
    89f0:	40001000 	.word	0x40001000
    89f4:	4804      	ldr	r0, [pc, #16]	; (8a08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    89f6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    89f8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    89fc:	6241      	str	r1, [r0, #36]	; 0x24
    89fe:	4903      	ldr	r1, [pc, #12]	; (8a0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    8a00:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8a04:	6008      	str	r0, [r1, #0]
    8a06:	4770      	bx	lr
    8a08:	200011f8 	.word	0x200011f8
    8a0c:	4001f504 	.word	0x4001f504
    8a10:	4a07      	ldr	r2, [pc, #28]	; (8a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8a12:	2000      	movs	r0, #0
    8a14:	3208      	adds	r2, #8
    8a16:	4906      	ldr	r1, [pc, #24]	; (8a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8a18:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8a1c:	1d0a      	adds	r2, r1, #4
    8a1e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8a22:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a26:	4902      	ldr	r1, [pc, #8]	; (8a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8a28:	310c      	adds	r1, #12
    8a2a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a2e:	4770      	bx	lr
    8a30:	40008000 	.word	0x40008000
    8a34:	4903      	ldr	r1, [pc, #12]	; (8a44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    8a36:	79c9      	ldrb	r1, [r1, #7]
    8a38:	2900      	cmp	r1, #0
    8a3a:	d102      	bne.n	8a42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    8a3c:	4902      	ldr	r1, [pc, #8]	; (8a48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    8a3e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8a42:	4770      	bx	lr
    8a44:	200011f8 	.word	0x200011f8
    8a48:	4001f098 	.word	0x4001f098
    8a4c:	b510      	push	{r4, lr}
    8a4e:	4a14      	ldr	r2, [pc, #80]	; (8aa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8a50:	b120      	cbz	r0, 8a5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    8a52:	2801      	cmp	r0, #1
    8a54:	d011      	beq.n	8a7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    8a56:	f240 7153 	movw	r1, #1875	; 0x753
    8a5a:	e01c      	b.n	8a96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8a5c:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8a60:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a64:	490f      	ldr	r1, [pc, #60]	; (8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8a66:	480e      	ldr	r0, [pc, #56]	; (8aa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8a68:	f003 ffb2 	bl	c9d0 <mpsl_fem_pa_configuration_set>
    8a6c:	2800      	cmp	r0, #0
    8a6e:	d015      	beq.n	8a9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a70:	1c40      	adds	r0, r0, #1
    8a72:	d013      	beq.n	8a9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a74:	f240 7142 	movw	r1, #1858	; 0x742
    8a78:	e00d      	b.n	8a96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8a7a:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8a7e:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a82:	4908      	ldr	r1, [pc, #32]	; (8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8a84:	4806      	ldr	r0, [pc, #24]	; (8aa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8a86:	f003 ff91 	bl	c9ac <mpsl_fem_lna_configuration_set>
    8a8a:	2800      	cmp	r0, #0
    8a8c:	d006      	beq.n	8a9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a8e:	1c40      	adds	r0, r0, #1
    8a90:	d004      	beq.n	8a9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a92:	f240 714f 	movw	r1, #1871	; 0x74f
    8a96:	203e      	movs	r0, #62	; 0x3e
    8a98:	f7f8 fb54 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a9c:	bd10      	pop	{r4, pc}
    8a9e:	0000      	.short	0x0000
    8aa0:	200002e0 	.word	0x200002e0
    8aa4:	00008bd0 	.word	0x00008bd0
    8aa8:	4802      	ldr	r0, [pc, #8]	; (8ab4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    8aaa:	2100      	movs	r1, #0
    8aac:	71c1      	strb	r1, [r0, #7]
    8aae:	7201      	strb	r1, [r0, #8]
    8ab0:	7241      	strb	r1, [r0, #9]
    8ab2:	4770      	bx	lr
    8ab4:	200011f8 	.word	0x200011f8
    8ab8:	4a05      	ldr	r2, [pc, #20]	; (8ad0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    8aba:	79d2      	ldrb	r2, [r2, #7]
    8abc:	2a01      	cmp	r2, #1
    8abe:	d006      	beq.n	8ace <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    8ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ac4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8ac8:	fbb1 f1f2 	udiv	r1, r1, r2
    8acc:	1a40      	subs	r0, r0, r1
    8ace:	4770      	bx	lr
    8ad0:	200011f8 	.word	0x200011f8
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	4c13      	ldr	r4, [pc, #76]	; (8b24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    8ad8:	4603      	mov	r3, r0
    8ada:	460d      	mov	r5, r1
    8adc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8ae0:	2000      	movs	r0, #0
    8ae2:	b15a      	cbz	r2, 8afc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    8ae4:	4621      	mov	r1, r4
    8ae6:	f891 1020 	ldrb.w	r1, [r1, #32]
    8aea:	b163      	cbz	r3, 8b06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8aec:	2b01      	cmp	r3, #1
    8aee:	d111      	bne.n	8b14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8af0:	2a01      	cmp	r2, #1
    8af2:	4628      	mov	r0, r5
    8af4:	d012      	beq.n	8b1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    8af6:	f007 fef0 	bl	108da <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8afa:	e009      	b.n	8b10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8afc:	f640 0158 	movw	r1, #2136	; 0x858
    8b00:	203e      	movs	r0, #62	; 0x3e
    8b02:	f7f8 fb1f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b06:	2a01      	cmp	r2, #1
    8b08:	4628      	mov	r0, r5
    8b0a:	d004      	beq.n	8b16 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8b0c:	f007 fef3 	bl	108f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8b10:	69e1      	ldr	r1, [r4, #28]
    8b12:	4408      	add	r0, r1
    8b14:	bd70      	pop	{r4, r5, r6, pc}
    8b16:	f000 f8d1 	bl	8cbc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8b1a:	e7f9      	b.n	8b10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8b1c:	f000 f8c0 	bl	8ca0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8b20:	e7f6      	b.n	8b10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8b22:	0000      	.short	0x0000
    8b24:	200011f8 	.word	0x200011f8
    8b28:	b510      	push	{r4, lr}
    8b2a:	f7ff fc4f 	bl	83cc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b2e:	f7ff fe0d 	bl	874c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8b32:	f7ff fe43 	bl	87bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8b36:	f7ff ff53 	bl	89e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    8b3a:	f008 f832 	bl	10ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b3e:	2800      	cmp	r0, #0
    8b40:	d108      	bne.n	8b54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8b42:	f008 f81e 	bl	10b82 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8b46:	2800      	cmp	r0, #0
    8b48:	d104      	bne.n	8b54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8b4a:	4803      	ldr	r0, [pc, #12]	; (8b58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    8b4c:	6801      	ldr	r1, [r0, #0]
    8b4e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8b52:	6001      	str	r1, [r0, #0]
    8b54:	bd10      	pop	{r4, pc}
    8b56:	0000      	.short	0x0000
    8b58:	40001568 	.word	0x40001568
    8b5c:	b510      	push	{r4, lr}
    8b5e:	4604      	mov	r4, r0
    8b60:	f7ff fc34 	bl	83cc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b64:	f7ff fdf2 	bl	874c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8b68:	4620      	mov	r0, r4
    8b6a:	f7ff fe0d 	bl	8788 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8b6e:	f008 f818 	bl	10ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b72:	2800      	cmp	r0, #0
    8b74:	d00d      	beq.n	8b92 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    8b76:	4a09      	ldr	r2, [pc, #36]	; (8b9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    8b78:	6811      	ldr	r1, [r2, #0]
    8b7a:	0650      	lsls	r0, r2, #25
    8b7c:	2c02      	cmp	r4, #2
    8b7e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8b82:	d007      	beq.n	8b94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    8b84:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8b88:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8b8c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b90:	6010      	str	r0, [r2, #0]
    8b92:	bd10      	pop	{r4, pc}
    8b94:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8b98:	e7f6      	b.n	8b88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8b9a:	0000      	.short	0x0000
    8b9c:	40001588 	.word	0x40001588
    8ba0:	a62c0000 	.word	0xa62c0000
    8ba4:	0604a1e0 	.word	0x0604a1e0
    8ba8:	0e0c0a08 	.word	0x0e0c0a08
    8bac:	16141210 	.word	0x16141210
    8bb0:	201e1c18 	.word	0x201e1c18
    8bb4:	28262422 	.word	0x28262422
    8bb8:	302e2c2a 	.word	0x302e2c2a
    8bbc:	38363432 	.word	0x38363432
    8bc0:	403e3c3a 	.word	0x403e3c3a
    8bc4:	48464442 	.word	0x48464442
    8bc8:	024e4c4a 	.word	0x024e4c4a
    8bcc:	0000501a 	.word	0x0000501a
    8bd0:	00000001 	.word	0x00000001
    8bd4:	40001110 	.word	0x40001110
	...
    8bec:	00001e14 	.word	0x00001e14
    8bf0:	00001130 	.word	0x00001130
    8bf4:	00000000 	.word	0x00000000
    8bf8:	00000028 	.word	0x00000028
    8bfc:	00000018 	.word	0x00000018
    8c00:	00000000 	.word	0x00000000
    8c04:	00001e14 	.word	0x00001e14
    8c08:	00001130 	.word	0x00001130
    8c0c:	00000000 	.word	0x00000000
    8c10:	00001770 	.word	0x00001770
    8c14:	00000fa0 	.word	0x00000fa0

00008c18 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8c18:	b570      	push	{r4, r5, r6, lr}
    8c1a:	4605      	mov	r5, r0
    8c1c:	4614      	mov	r4, r2
    8c1e:	4608      	mov	r0, r1
    8c20:	f7ff fbfa 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8c24:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8c28:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8c2c:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8c30:	4807      	ldr	r0, [pc, #28]	; (8c50 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8c32:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8c36:	4408      	add	r0, r1
    8c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c3c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8c40:	fbb0 f5f1 	udiv	r5, r0, r1
    8c44:	4620      	mov	r0, r4
    8c46:	f7ff fbbb 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c4a:	4428      	add	r0, r5
    8c4c:	1d40      	adds	r0, r0, #5
    8c4e:	bd70      	pop	{r4, r5, r6, pc}
    8c50:	00008ce0 	.word	0x00008ce0

00008c54 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8c54:	b570      	push	{r4, r5, r6, lr}
    8c56:	4d0e      	ldr	r5, [pc, #56]	; (8c90 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c58:	461c      	mov	r4, r3
    8c5a:	3d08      	subs	r5, #8
    8c5c:	4b0c      	ldr	r3, [pc, #48]	; (8c90 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c5e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8c62:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c6a:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8c6e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8c72:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8c76:	4418      	add	r0, r3
    8c78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c7c:	fbb0 f5f1 	udiv	r5, r0, r1
    8c80:	4610      	mov	r0, r2
    8c82:	f7ff fb9d 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c86:	4428      	add	r0, r5
    8c88:	4420      	add	r0, r4
    8c8a:	1d40      	adds	r0, r0, #5
    8c8c:	bd70      	pop	{r4, r5, r6, pc}
    8c8e:	0000      	.short	0x0000
    8c90:	00008ce0 	.word	0x00008ce0

00008c94 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8c94:	4901      	ldr	r1, [pc, #4]	; (8c9c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8c96:	b2c0      	uxtb	r0, r0
    8c98:	6008      	str	r0, [r1, #0]
    8c9a:	4770      	bx	lr
    8c9c:	4000150c 	.word	0x4000150c

00008ca0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8ca0:	4a05      	ldr	r2, [pc, #20]	; (8cb8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8ca2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8caa:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8cae:	fbb1 f1f2 	udiv	r1, r1, r2
    8cb2:	4408      	add	r0, r1
    8cb4:	1e80      	subs	r0, r0, #2
    8cb6:	4770      	bx	lr
    8cb8:	00008cd8 	.word	0x00008cd8

00008cbc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8cbc:	4a05      	ldr	r2, [pc, #20]	; (8cd4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8cbe:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8cc6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8cca:	fbb1 f1f2 	udiv	r1, r1, r2
    8cce:	4408      	add	r0, r1
    8cd0:	4770      	bx	lr
    8cd2:	0000      	.short	0x0000
    8cd4:	00008cd8 	.word	0x00008cd8
    8cd8:	05dc0000 	.word	0x05dc0000
    8cdc:	000003e8 	.word	0x000003e8
    8ce0:	00000000 	.word	0x00000000
    8ce4:	00001e14 	.word	0x00001e14
    8ce8:	00001130 	.word	0x00001130

00008cec <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cf0:	461e      	mov	r6, r3
    8cf2:	4617      	mov	r7, r2
    8cf4:	460c      	mov	r4, r1
    8cf6:	4605      	mov	r5, r0
    8cf8:	f000 f856 	bl	8da8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8cfc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8da4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8d00:	4680      	mov	r8, r0
    8d02:	f899 0000 	ldrb.w	r0, [r9]
    8d06:	42a8      	cmp	r0, r5
    8d08:	d110      	bne.n	8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d0a:	f899 1001 	ldrb.w	r1, [r9, #1]
    8d0e:	4648      	mov	r0, r9
    8d10:	42a1      	cmp	r1, r4
    8d12:	d10b      	bne.n	8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d14:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8d18:	42b9      	cmp	r1, r7
    8d1a:	d107      	bne.n	8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d1c:	78c2      	ldrb	r2, [r0, #3]
    8d1e:	4542      	cmp	r2, r8
    8d20:	d104      	bne.n	8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d22:	8881      	ldrh	r1, [r0, #4]
    8d24:	8031      	strh	r1, [r6, #0]
    8d26:	7980      	ldrb	r0, [r0, #6]
    8d28:	70b0      	strb	r0, [r6, #2]
    8d2a:	e037      	b.n	8d9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8d2c:	463a      	mov	r2, r7
    8d2e:	4621      	mov	r1, r4
    8d30:	2d01      	cmp	r5, #1
    8d32:	d009      	beq.n	8d48 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8d34:	2d02      	cmp	r5, #2
    8d36:	d009      	beq.n	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8d38:	2d04      	cmp	r5, #4
    8d3a:	d009      	beq.n	8d50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d3c:	2d08      	cmp	r5, #8
    8d3e:	d009      	beq.n	8d54 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8d40:	f240 4161 	movw	r1, #1121	; 0x461
    8d44:	2006      	movs	r0, #6
    8d46:	e00c      	b.n	8d62 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8d48:	2000      	movs	r0, #0
    8d4a:	e004      	b.n	8d56 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d4c:	2001      	movs	r0, #1
    8d4e:	e002      	b.n	8d56 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d50:	2003      	movs	r0, #3
    8d52:	e000      	b.n	8d56 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d54:	2002      	movs	r0, #2
    8d56:	466b      	mov	r3, sp
    8d58:	f000 f89e 	bl	8e98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8d5c:	b118      	cbz	r0, 8d66 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8d5e:	213d      	movs	r1, #61	; 0x3d
    8d60:	2075      	movs	r0, #117	; 0x75
    8d62:	f7f8 f9ef 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d66:	4620      	mov	r0, r4
    8d68:	f7ff f8cc 	bl	7f04 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8d6c:	4602      	mov	r2, r0
    8d6e:	2300      	movs	r3, #0
    8d70:	4631      	mov	r1, r6
    8d72:	f99d 0000 	ldrsb.w	r0, [sp]
    8d76:	f003 fe3d 	bl	c9f4 <mpsl_fem_tx_power_split>
    8d7a:	4601      	mov	r1, r0
    8d7c:	f889 1007 	strb.w	r1, [r9, #7]
    8d80:	8831      	ldrh	r1, [r6, #0]
    8d82:	f8a9 1004 	strh.w	r1, [r9, #4]
    8d86:	78b1      	ldrb	r1, [r6, #2]
    8d88:	f889 1006 	strb.w	r1, [r9, #6]
    8d8c:	f889 5000 	strb.w	r5, [r9]
    8d90:	f889 4001 	strb.w	r4, [r9, #1]
    8d94:	f889 7002 	strb.w	r7, [r9, #2]
    8d98:	f889 8003 	strb.w	r8, [r9, #3]
    8d9c:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8da4:	2000037c 	.word	0x2000037c

00008da8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8da8:	4801      	ldr	r0, [pc, #4]	; (8db0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8daa:	7800      	ldrb	r0, [r0, #0]
    8dac:	4770      	bx	lr
    8dae:	0000      	.short	0x0000
    8db0:	200002f8 	.word	0x200002f8

00008db4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8db4:	b570      	push	{r4, r5, r6, lr}
    8db6:	4c17      	ldr	r4, [pc, #92]	; (8e14 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8db8:	7860      	ldrb	r0, [r4, #1]
    8dba:	2800      	cmp	r0, #0
    8dbc:	d123      	bne.n	8e06 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8dbe:	2001      	movs	r0, #1
    8dc0:	7060      	strb	r0, [r4, #1]
    8dc2:	f007 fec8 	bl	10b56 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8dc6:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8dca:	b928      	cbnz	r0, 8dd8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8dcc:	f007 fef9 	bl	10bc2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8dd0:	b910      	cbnz	r0, 8dd8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8dd2:	f007 ff00 	bl	10bd6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8dd6:	b120      	cbz	r0, 8de2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8dd8:	480f      	ldr	r0, [pc, #60]	; (8e18 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8dda:	6060      	str	r0, [r4, #4]
    8ddc:	70a5      	strb	r5, [r4, #2]
    8dde:	2008      	movs	r0, #8
    8de0:	e010      	b.n	8e04 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8de2:	f007 fe8d 	bl	10b00 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8de6:	b940      	cbnz	r0, 8dfa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8de8:	f007 fe94 	bl	10b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8dec:	b928      	cbnz	r0, 8dfa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8dee:	f007 fea8 	bl	10b42 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8df2:	b910      	cbnz	r0, 8dfa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8df4:	f007 feb9 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8df8:	b130      	cbz	r0, 8e08 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8dfa:	4807      	ldr	r0, [pc, #28]	; (8e18 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8dfc:	3031      	adds	r0, #49	; 0x31
    8dfe:	6060      	str	r0, [r4, #4]
    8e00:	70a5      	strb	r5, [r4, #2]
    8e02:	2004      	movs	r0, #4
    8e04:	70e0      	strb	r0, [r4, #3]
    8e06:	bd70      	pop	{r4, r5, r6, pc}
    8e08:	f240 113f 	movw	r1, #319	; 0x13f
    8e0c:	2074      	movs	r0, #116	; 0x74
    8e0e:	f003 fc33 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e12:	0000      	.short	0x0000
    8e14:	200002f8 	.word	0x200002f8
    8e18:	00010f15 	.word	0x00010f15

00008e1c <mpsl_tx_power_radio_supported_power_adjust>:
    8e1c:	4a06      	ldr	r2, [pc, #24]	; (8e38 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8e1e:	b500      	push	{lr}
    8e20:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8e24:	4290      	cmp	r0, r2
    8e26:	db01      	blt.n	8e2c <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8e28:	4610      	mov	r0, r2
    8e2a:	bd00      	pop	{pc}
    8e2c:	f000 f808 	bl	8e40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8e30:	4902      	ldr	r1, [pc, #8]	; (8e3c <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8e32:	5608      	ldrsb	r0, [r1, r0]
    8e34:	bd00      	pop	{pc}
    8e36:	0000      	.short	0x0000
    8e38:	200002f8 	.word	0x200002f8
    8e3c:	00010f07 	.word	0x00010f07

00008e40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8e40:	4602      	mov	r2, r0
    8e42:	4813      	ldr	r0, [pc, #76]	; (8e90 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8e44:	b510      	push	{r4, lr}
    8e46:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8e4a:	429a      	cmp	r2, r3
    8e4c:	db01      	blt.n	8e52 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8e4e:	200d      	movs	r0, #13
    8e50:	bd10      	pop	{r4, pc}
    8e52:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8e56:	429a      	cmp	r2, r3
    8e58:	dc01      	bgt.n	8e5e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8e5a:	2000      	movs	r0, #0
    8e5c:	bd10      	pop	{r4, pc}
    8e5e:	b101      	cbz	r1, 8e62 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8e60:	2101      	movs	r1, #1
    8e62:	1ad4      	subs	r4, r2, r3
    8e64:	6843      	ldr	r3, [r0, #4]
    8e66:	5d18      	ldrb	r0, [r3, r4]
    8e68:	4c0a      	ldr	r4, [pc, #40]	; (8e94 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8e6a:	5624      	ldrsb	r4, [r4, r0]
    8e6c:	4294      	cmp	r4, r2
    8e6e:	d0f5      	beq.n	8e5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e70:	4c08      	ldr	r4, [pc, #32]	; (8e94 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8e72:	4408      	add	r0, r1
    8e74:	343f      	adds	r4, #63	; 0x3f
    8e76:	b2c0      	uxtb	r0, r0
    8e78:	b2d2      	uxtb	r2, r2
    8e7a:	42a3      	cmp	r3, r4
    8e7c:	d1ee      	bne.n	8e5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e7e:	2900      	cmp	r1, #0
    8e80:	d0ec      	beq.n	8e5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e82:	2a01      	cmp	r2, #1
    8e84:	d001      	beq.n	8e8a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8e86:	2a02      	cmp	r2, #2
    8e88:	d1e8      	bne.n	8e5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e8a:	1c40      	adds	r0, r0, #1
    8e8c:	b2c0      	uxtb	r0, r0
    8e8e:	bd10      	pop	{r4, pc}
    8e90:	200002f8 	.word	0x200002f8
    8e94:	00010f07 	.word	0x00010f07

00008e98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e9c:	461c      	mov	r4, r3
    8e9e:	4690      	mov	r8, r2
    8ea0:	460d      	mov	r5, r1
    8ea2:	4606      	mov	r6, r0
    8ea4:	f06f 0715 	mvn.w	r7, #21
    8ea8:	2804      	cmp	r0, #4
    8eaa:	d804      	bhi.n	8eb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8eac:	b11c      	cbz	r4, 8eb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8eae:	f007 fd2d 	bl	1090c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8eb2:	42a8      	cmp	r0, r5
    8eb4:	d802      	bhi.n	8ebc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8eb6:	4638      	mov	r0, r7
    8eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ebc:	4805      	ldr	r0, [pc, #20]	; (8ed4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8ebe:	4642      	mov	r2, r8
    8ec0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8ec4:	b118      	cbz	r0, 8ece <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8ec6:	5740      	ldrsb	r0, [r0, r5]
    8ec8:	4282      	cmp	r2, r0
    8eca:	dd00      	ble.n	8ece <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8ecc:	4602      	mov	r2, r0
    8ece:	7022      	strb	r2, [r4, #0]
    8ed0:	2000      	movs	r0, #0
    8ed2:	e7f1      	b.n	8eb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ed4:	2000122c 	.word	0x2000122c

00008ed8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ed8:	4801      	ldr	r0, [pc, #4]	; (8ee0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8eda:	7800      	ldrb	r0, [r0, #0]
    8edc:	4770      	bx	lr
    8ede:	0000      	.short	0x0000
    8ee0:	20000300 	.word	0x20000300

00008ee4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8ee4:	4905      	ldr	r1, [pc, #20]	; (8efc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8ee6:	780a      	ldrb	r2, [r1, #0]
    8ee8:	4290      	cmp	r0, r2
    8eea:	d301      	bcc.n	8ef0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8eec:	2000      	movs	r0, #0
    8eee:	4770      	bx	lr
    8ef0:	6849      	ldr	r1, [r1, #4]
    8ef2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8ef6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8efa:	4770      	bx	lr
    8efc:	20000300 	.word	0x20000300

00008f00 <MPSL_IRQ_RADIO_Handler>:
    8f00:	490d      	ldr	r1, [pc, #52]	; (8f38 <MPSL_IRQ_RADIO_Handler+0x38>)
    8f02:	b510      	push	{r4, lr}
    8f04:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8f08:	2820      	cmp	r0, #32
    8f0a:	d00f      	beq.n	8f2c <MPSL_IRQ_RADIO_Handler+0x2c>
    8f0c:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8f10:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8f14:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8f18:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8f1c:	6840      	ldr	r0, [r0, #4]
    8f1e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    8f22:	680a      	ldr	r2, [r1, #0]
    8f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f28:	2104      	movs	r1, #4
    8f2a:	4710      	bx	r2
    8f2c:	f640 017f 	movw	r1, #2175	; 0x87f
    8f30:	2070      	movs	r0, #112	; 0x70
    8f32:	f003 fba1 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f36:	0000      	.short	0x0000
    8f38:	20000fd0 	.word	0x20000fd0
    8f3c:	b570      	push	{r4, r5, r6, lr}
    8f3e:	4605      	mov	r5, r0
    8f40:	2a20      	cmp	r2, #32
    8f42:	d028      	beq.n	8f96 <MPSL_IRQ_RADIO_Handler+0x96>
    8f44:	4819      	ldr	r0, [pc, #100]	; (8fac <MPSL_IRQ_RADIO_Handler+0xac>)
    8f46:	4c1a      	ldr	r4, [pc, #104]	; (8fb0 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8f48:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8f4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f50:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8f54:	4423      	add	r3, r4
    8f56:	2920      	cmp	r1, #32
    8f58:	d022      	beq.n	8fa0 <MPSL_IRQ_RADIO_Handler+0xa0>
    8f5a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8f5e:	7840      	ldrb	r0, [r0, #1]
    8f60:	784c      	ldrb	r4, [r1, #1]
    8f62:	7048      	strb	r0, [r1, #1]
    8f64:	4620      	mov	r0, r4
    8f66:	4601      	mov	r1, r0
    8f68:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8f6c:	4291      	cmp	r1, r2
    8f6e:	7005      	strb	r5, [r0, #0]
    8f70:	7840      	ldrb	r0, [r0, #1]
    8f72:	d1f8      	bne.n	8f66 <MPSL_IRQ_RADIO_Handler+0x66>
    8f74:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    8f78:	2a20      	cmp	r2, #32
    8f7a:	bf1a      	itte	ne
    8f7c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8f80:	7054      	strbne	r4, [r2, #1]
    8f82:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    8f86:	2220      	movs	r2, #32
    8f88:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8f8c:	f88c 2001 	strb.w	r2, [ip, #1]
    8f90:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8f94:	bd70      	pop	{r4, r5, r6, pc}
    8f96:	f240 2186 	movw	r1, #646	; 0x286
    8f9a:	2070      	movs	r0, #112	; 0x70
    8f9c:	f003 fb6c 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8fa0:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8fa4:	7840      	ldrb	r0, [r0, #1]
    8fa6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8faa:	e7db      	b.n	8f64 <MPSL_IRQ_RADIO_Handler+0x64>
    8fac:	20000f50 	.word	0x20000f50
    8fb0:	20000fd0 	.word	0x20000fd0
    8fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fb8:	b08f      	sub	sp, #60	; 0x3c
    8fba:	4616      	mov	r6, r2
    8fbc:	461d      	mov	r5, r3
    8fbe:	460c      	mov	r4, r1
    8fc0:	f002 faaa 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8fc4:	1830      	adds	r0, r6, r0
    8fc6:	f145 0100 	adc.w	r1, r5, #0
    8fca:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8fce:	e9d4 2300 	ldrd	r2, r3, [r4]
    8fd2:	1a80      	subs	r0, r0, r2
    8fd4:	eb71 0003 	sbcs.w	r0, r1, r3
    8fd8:	f0c0 80e5 	bcc.w	91a6 <MPSL_IRQ_RADIO_Handler+0x2a6>
    8fdc:	a808      	add	r0, sp, #32
    8fde:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    8fe2:	900a      	str	r0, [sp, #40]	; 0x28
    8fe4:	48be      	ldr	r0, [pc, #760]	; (92e0 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8fe6:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8fea:	4408      	add	r0, r1
    8fec:	9009      	str	r0, [sp, #36]	; 0x24
    8fee:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8ff2:	2020      	movs	r0, #32
    8ff4:	f10d 091c 	add.w	r9, sp, #28
    8ff8:	f88d 001c 	strb.w	r0, [sp, #28]
    8ffc:	2d20      	cmp	r5, #32
    8ffe:	d036      	beq.n	906e <MPSL_IRQ_RADIO_Handler+0x16e>
    9000:	48b8      	ldr	r0, [pc, #736]	; (92e4 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    9002:	2600      	movs	r6, #0
    9004:	eb00 1a88 	add.w	sl, r0, r8, lsl #6
    9008:	48b7      	ldr	r0, [pc, #732]	; (92e8 <MPSL_IRQ_RADIO_Handler+0x3e8>)
    900a:	e9d4 7300 	ldrd	r7, r3, [r4]
    900e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    9012:	f850 bf08 	ldr.w	fp, [r0, #8]!
    9016:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    901a:	eb1b 0202 	adds.w	r2, fp, r2
    901e:	4171      	adcs	r1, r6
    9020:	1aba      	subs	r2, r7, r2
    9022:	eb73 0101 	sbcs.w	r1, r3, r1
    9026:	d322      	bcc.n	906e <MPSL_IRQ_RADIO_Handler+0x16e>
    9028:	89e1      	ldrh	r1, [r4, #14]
    902a:	b1c9      	cbz	r1, 9060 <MPSL_IRQ_RADIO_Handler+0x160>
    902c:	89c0      	ldrh	r0, [r0, #14]
    902e:	b9b8      	cbnz	r0, 9060 <MPSL_IRQ_RADIO_Handler+0x160>
    9030:	f003 f964 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9034:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9038:	bf08      	it	eq
    903a:	200d      	moveq	r0, #13
    903c:	d00b      	beq.n	9056 <MPSL_IRQ_RADIO_Handler+0x156>
    903e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9042:	3856      	subs	r0, #86	; 0x56
    9044:	bf08      	it	eq
    9046:	201c      	moveq	r0, #28
    9048:	d005      	beq.n	9056 <MPSL_IRQ_RADIO_Handler+0x156>
    904a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    904e:	389f      	subs	r0, #159	; 0x9f
    9050:	bf14      	ite	ne
    9052:	4630      	movne	r0, r6
    9054:	2032      	moveq	r0, #50	; 0x32
    9056:	1c41      	adds	r1, r0, #1
    9058:	ebb7 000b 	subs.w	r0, r7, fp
    905c:	4288      	cmp	r0, r1
    905e:	db06      	blt.n	906e <MPSL_IRQ_RADIO_Handler+0x16e>
    9060:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    9064:	f889 5000 	strb.w	r5, [r9]
    9068:	7845      	ldrb	r5, [r0, #1]
    906a:	2d20      	cmp	r5, #32
    906c:	d1cc      	bne.n	9008 <MPSL_IRQ_RADIO_Handler+0x108>
    906e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9070:	f899 1000 	ldrb.w	r1, [r9]
    9074:	2d20      	cmp	r5, #32
    9076:	7001      	strb	r1, [r0, #0]
    9078:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    907a:	f000 812d 	beq.w	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    907e:	4899      	ldr	r0, [pc, #612]	; (92e4 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    9080:	2700      	movs	r7, #0
    9082:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    9086:	f8df 8260 	ldr.w	r8, [pc, #608]	; 92e8 <MPSL_IRQ_RADIO_Handler+0x3e8>
    908a:	9004      	str	r0, [sp, #16]
    908c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9090:	f8d4 b000 	ldr.w	fp, [r4]
    9094:	eb08 1945 	add.w	r9, r8, r5, lsl #5
    9098:	f109 0008 	add.w	r0, r9, #8
    909c:	eb1b 0201 	adds.w	r2, fp, r1
    90a0:	eb43 0107 	adc.w	r1, r3, r7
    90a4:	e9d0 a300 	ldrd	sl, r3, [r0]
    90a8:	ebba 0202 	subs.w	r2, sl, r2
    90ac:	eb73 0101 	sbcs.w	r1, r3, r1
    90b0:	d320      	bcc.n	90f4 <MPSL_IRQ_RADIO_Handler+0x1f4>
    90b2:	89c0      	ldrh	r0, [r0, #14]
    90b4:	2800      	cmp	r0, #0
    90b6:	f000 810f 	beq.w	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    90ba:	89e0      	ldrh	r0, [r4, #14]
    90bc:	2800      	cmp	r0, #0
    90be:	f040 810b 	bne.w	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    90c2:	f003 f91b 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90ca:	bf08      	it	eq
    90cc:	200d      	moveq	r0, #13
    90ce:	d00b      	beq.n	90e8 <MPSL_IRQ_RADIO_Handler+0x1e8>
    90d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90d4:	3856      	subs	r0, #86	; 0x56
    90d6:	bf08      	it	eq
    90d8:	201c      	moveq	r0, #28
    90da:	d005      	beq.n	90e8 <MPSL_IRQ_RADIO_Handler+0x1e8>
    90dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90e0:	389f      	subs	r0, #159	; 0x9f
    90e2:	bf14      	ite	ne
    90e4:	4638      	movne	r0, r7
    90e6:	2032      	moveq	r0, #50	; 0x32
    90e8:	1c40      	adds	r0, r0, #1
    90ea:	ebba 010b 	subs.w	r1, sl, fp
    90ee:	4281      	cmp	r1, r0
    90f0:	f280 80f2 	bge.w	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    90f4:	7035      	strb	r5, [r6, #0]
    90f6:	f899 0018 	ldrb.w	r0, [r9, #24]
    90fa:	7c21      	ldrb	r1, [r4, #16]
    90fc:	4281      	cmp	r1, r0
    90fe:	d207      	bcs.n	9110 <MPSL_IRQ_RADIO_Handler+0x210>
    9100:	9804      	ldr	r0, [sp, #16]
    9102:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9106:	7845      	ldrb	r5, [r0, #1]
    9108:	2d20      	cmp	r5, #32
    910a:	d1bf      	bne.n	908c <MPSL_IRQ_RADIO_Handler+0x18c>
    910c:	f000 b8e4 	b.w	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9110:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9114:	eb08 1040 	add.w	r0, r8, r0, lsl #5
    9118:	e9d0 2103 	ldrd	r2, r1, [r0, #12]
    911c:	f8d0 9008 	ldr.w	r9, [r0, #8]
    9120:	8ac0      	ldrh	r0, [r0, #22]
    9122:	eb19 0501 	adds.w	r5, r9, r1
    9126:	eb42 0607 	adc.w	r6, r2, r7
    912a:	bbb0      	cbnz	r0, 919a <MPSL_IRQ_RADIO_Handler+0x29a>
    912c:	89e0      	ldrh	r0, [r4, #14]
    912e:	b3a0      	cbz	r0, 919a <MPSL_IRQ_RADIO_Handler+0x29a>
    9130:	f003 f8e4 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9134:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9138:	bf08      	it	eq
    913a:	200d      	moveq	r0, #13
    913c:	d00b      	beq.n	9156 <MPSL_IRQ_RADIO_Handler+0x256>
    913e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9142:	3856      	subs	r0, #86	; 0x56
    9144:	bf08      	it	eq
    9146:	201c      	moveq	r0, #28
    9148:	d005      	beq.n	9156 <MPSL_IRQ_RADIO_Handler+0x256>
    914a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    914e:	389f      	subs	r0, #159	; 0x9f
    9150:	bf14      	ite	ne
    9152:	4638      	movne	r0, r7
    9154:	2032      	moveq	r0, #50	; 0x32
    9156:	1c41      	adds	r1, r0, #1
    9158:	ebb5 0009 	subs.w	r0, r5, r9
    915c:	4288      	cmp	r0, r1
    915e:	da1c      	bge.n	919a <MPSL_IRQ_RADIO_Handler+0x29a>
    9160:	f003 f8cc 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9164:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9168:	bf08      	it	eq
    916a:	200d      	moveq	r0, #13
    916c:	d00b      	beq.n	9186 <MPSL_IRQ_RADIO_Handler+0x286>
    916e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9172:	3856      	subs	r0, #86	; 0x56
    9174:	bf08      	it	eq
    9176:	201c      	moveq	r0, #28
    9178:	d005      	beq.n	9186 <MPSL_IRQ_RADIO_Handler+0x286>
    917a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    917e:	389f      	subs	r0, #159	; 0x9f
    9180:	bf14      	ite	ne
    9182:	4638      	movne	r0, r7
    9184:	2032      	moveq	r0, #50	; 0x32
    9186:	f89d 1020 	ldrb.w	r1, [sp, #32]
    918a:	1c40      	adds	r0, r0, #1
    918c:	eb08 1241 	add.w	r2, r8, r1, lsl #5
    9190:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    9194:	180d      	adds	r5, r1, r0
    9196:	eb43 0607 	adc.w	r6, r3, r7
    919a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
    919e:	1b40      	subs	r0, r0, r5
    91a0:	eb71 0006 	sbcs.w	r0, r1, r6
    91a4:	d203      	bcs.n	91ae <MPSL_IRQ_RADIO_Handler+0x2ae>
    91a6:	b00f      	add	sp, #60	; 0x3c
    91a8:	2000      	movs	r0, #0
    91aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91ae:	e9c4 5600 	strd	r5, r6, [r4]
    91b2:	9818      	ldr	r0, [sp, #96]	; 0x60
    91b4:	900b      	str	r0, [sp, #44]	; 0x2c
    91b6:	a808      	add	r0, sp, #32
    91b8:	900a      	str	r0, [sp, #40]	; 0x28
    91ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    91bc:	f10d 091c 	add.w	r9, sp, #28
    91c0:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    91c4:	2020      	movs	r0, #32
    91c6:	f88d 001c 	strb.w	r0, [sp, #28]
    91ca:	2d20      	cmp	r5, #32
    91cc:	d03c      	beq.n	9248 <MPSL_IRQ_RADIO_Handler+0x348>
    91ce:	4845      	ldr	r0, [pc, #276]	; (92e4 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    91d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91d2:	eb00 1a81 	add.w	sl, r0, r1, lsl #6
    91d6:	bf00      	nop
    91d8:	eb08 1045 	add.w	r0, r8, r5, lsl #5
    91dc:	f100 0108 	add.w	r1, r0, #8
    91e0:	6902      	ldr	r2, [r0, #16]
    91e2:	e9d1 0c00 	ldrd	r0, ip, [r1]
    91e6:	46bb      	mov	fp, r7
    91e8:	1883      	adds	r3, r0, r2
    91ea:	eb4c 020b 	adc.w	r2, ip, fp
    91ee:	e9d4 6c00 	ldrd	r6, ip, [r4]
    91f2:	1af3      	subs	r3, r6, r3
    91f4:	eb7c 0202 	sbcs.w	r2, ip, r2
    91f8:	d326      	bcc.n	9248 <MPSL_IRQ_RADIO_Handler+0x348>
    91fa:	89e2      	ldrh	r2, [r4, #14]
    91fc:	b1ea      	cbz	r2, 923a <MPSL_IRQ_RADIO_Handler+0x33a>
    91fe:	89c9      	ldrh	r1, [r1, #14]
    9200:	b9d9      	cbnz	r1, 923a <MPSL_IRQ_RADIO_Handler+0x33a>
    9202:	900c      	str	r0, [sp, #48]	; 0x30
    9204:	f003 f87a 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9208:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    920c:	bf08      	it	eq
    920e:	f04f 0b0d 	moveq.w	fp, #13
    9212:	d00c      	beq.n	922e <MPSL_IRQ_RADIO_Handler+0x32e>
    9214:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9218:	3856      	subs	r0, #86	; 0x56
    921a:	bf08      	it	eq
    921c:	f04f 0b1c 	moveq.w	fp, #28
    9220:	d005      	beq.n	922e <MPSL_IRQ_RADIO_Handler+0x32e>
    9222:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9226:	389f      	subs	r0, #159	; 0x9f
    9228:	bf08      	it	eq
    922a:	f04f 0b32 	moveq.w	fp, #50	; 0x32
    922e:	f10b 0001 	add.w	r0, fp, #1
    9232:	990c      	ldr	r1, [sp, #48]	; 0x30
    9234:	1a71      	subs	r1, r6, r1
    9236:	4281      	cmp	r1, r0
    9238:	db06      	blt.n	9248 <MPSL_IRQ_RADIO_Handler+0x348>
    923a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    923e:	f889 5000 	strb.w	r5, [r9]
    9242:	7845      	ldrb	r5, [r0, #1]
    9244:	2d20      	cmp	r5, #32
    9246:	d1c7      	bne.n	91d8 <MPSL_IRQ_RADIO_Handler+0x2d8>
    9248:	980a      	ldr	r0, [sp, #40]	; 0x28
    924a:	f899 1000 	ldrb.w	r1, [r9]
    924e:	2d20      	cmp	r5, #32
    9250:	7001      	strb	r1, [r0, #0]
    9252:	e9dd a00a 	ldrd	sl, r0, [sp, #40]	; 0x28
    9256:	d03f      	beq.n	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9258:	4922      	ldr	r1, [pc, #136]	; (92e4 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    925a:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    925e:	9003      	str	r0, [sp, #12]
    9260:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9264:	f8d4 b000 	ldr.w	fp, [r4]
    9268:	eb08 1645 	add.w	r6, r8, r5, lsl #5
    926c:	f106 0008 	add.w	r0, r6, #8
    9270:	eb1b 0201 	adds.w	r2, fp, r1
    9274:	eb43 0107 	adc.w	r1, r3, r7
    9278:	e9d0 9300 	ldrd	r9, r3, [r0]
    927c:	ebb9 0202 	subs.w	r2, r9, r2
    9280:	eb73 0101 	sbcs.w	r1, r3, r1
    9284:	d31b      	bcc.n	92be <MPSL_IRQ_RADIO_Handler+0x3be>
    9286:	89c0      	ldrh	r0, [r0, #14]
    9288:	b330      	cbz	r0, 92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    928a:	89e0      	ldrh	r0, [r4, #14]
    928c:	bb20      	cbnz	r0, 92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    928e:	f003 f835 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9292:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9296:	bf08      	it	eq
    9298:	200d      	moveq	r0, #13
    929a:	d00b      	beq.n	92b4 <MPSL_IRQ_RADIO_Handler+0x3b4>
    929c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92a0:	3856      	subs	r0, #86	; 0x56
    92a2:	bf08      	it	eq
    92a4:	201c      	moveq	r0, #28
    92a6:	d005      	beq.n	92b4 <MPSL_IRQ_RADIO_Handler+0x3b4>
    92a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92ac:	389f      	subs	r0, #159	; 0x9f
    92ae:	bf14      	ite	ne
    92b0:	4638      	movne	r0, r7
    92b2:	2032      	moveq	r0, #50	; 0x32
    92b4:	1c40      	adds	r0, r0, #1
    92b6:	ebb9 010b 	subs.w	r1, r9, fp
    92ba:	4281      	cmp	r1, r0
    92bc:	da0c      	bge.n	92d8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    92be:	f88a 5000 	strb.w	r5, [sl]
    92c2:	7e30      	ldrb	r0, [r6, #24]
    92c4:	7c21      	ldrb	r1, [r4, #16]
    92c6:	4281      	cmp	r1, r0
    92c8:	f4bf af22 	bcs.w	9110 <MPSL_IRQ_RADIO_Handler+0x210>
    92cc:	9803      	ldr	r0, [sp, #12]
    92ce:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    92d2:	7845      	ldrb	r5, [r0, #1]
    92d4:	2d20      	cmp	r5, #32
    92d6:	d1c3      	bne.n	9260 <MPSL_IRQ_RADIO_Handler+0x360>
    92d8:	b00f      	add	sp, #60	; 0x3c
    92da:	2001      	movs	r0, #1
    92dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92e0:	20000fd0 	.word	0x20000fd0
    92e4:	20000f50 	.word	0x20000f50
    92e8:	20000b50 	.word	0x20000b50
    92ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    92f0:	b083      	sub	sp, #12
    92f2:	4691      	mov	r9, r2
    92f4:	4604      	mov	r4, r0
    92f6:	460d      	mov	r5, r1
    92f8:	4698      	mov	r8, r3
    92fa:	aa01      	add	r2, sp, #4
    92fc:	4669      	mov	r1, sp
    92fe:	4618      	mov	r0, r3
    9300:	f002 f926 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9304:	f002 fe22 	bl	bf4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9308:	f002 f906 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    930c:	4607      	mov	r7, r0
    930e:	481e      	ldr	r0, [pc, #120]	; (9388 <MPSL_IRQ_RADIO_Handler+0x488>)
    9310:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9314:	2600      	movs	r6, #0
    9316:	2920      	cmp	r1, #32
    9318:	d009      	beq.n	932e <MPSL_IRQ_RADIO_Handler+0x42e>
    931a:	6882      	ldr	r2, [r0, #8]
    931c:	68c1      	ldr	r1, [r0, #12]
    931e:	6900      	ldr	r0, [r0, #16]
    9320:	1d83      	adds	r3, r0, #6
    9322:	f146 0000 	adc.w	r0, r6, #0
    9326:	18d4      	adds	r4, r2, r3
    9328:	eb41 0500 	adc.w	r5, r1, r0
    932c:	e026      	b.n	937c <MPSL_IRQ_RADIO_Handler+0x47c>
    932e:	340a      	adds	r4, #10
    9330:	f145 0500 	adc.w	r5, r5, #0
    9334:	f1b8 0f00 	cmp.w	r8, #0
    9338:	d017      	beq.n	936a <MPSL_IRQ_RADIO_Handler+0x46a>
    933a:	f003 f925 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    933e:	b9a0      	cbnz	r0, 936a <MPSL_IRQ_RADIO_Handler+0x46a>
    9340:	f002 ffdc 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9344:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9348:	bf08      	it	eq
    934a:	200d      	moveq	r0, #13
    934c:	d00b      	beq.n	9366 <MPSL_IRQ_RADIO_Handler+0x466>
    934e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9352:	3856      	subs	r0, #86	; 0x56
    9354:	bf08      	it	eq
    9356:	201c      	moveq	r0, #28
    9358:	d005      	beq.n	9366 <MPSL_IRQ_RADIO_Handler+0x466>
    935a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    935e:	389f      	subs	r0, #159	; 0x9f
    9360:	bf14      	ite	ne
    9362:	4630      	movne	r0, r6
    9364:	2032      	moveq	r0, #50	; 0x32
    9366:	1904      	adds	r4, r0, r4
    9368:	4175      	adcs	r5, r6
    936a:	f1b9 0f00 	cmp.w	r9, #0
    936e:	d105      	bne.n	937c <MPSL_IRQ_RADIO_Handler+0x47c>
    9370:	9800      	ldr	r0, [sp, #0]
    9372:	4287      	cmp	r7, r0
    9374:	d902      	bls.n	937c <MPSL_IRQ_RADIO_Handler+0x47c>
    9376:	1a38      	subs	r0, r7, r0
    9378:	1904      	adds	r4, r0, r4
    937a:	4175      	adcs	r5, r6
    937c:	b003      	add	sp, #12
    937e:	4620      	mov	r0, r4
    9380:	4629      	mov	r1, r5
    9382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9386:	0000      	.short	0x0000
    9388:	20000fd0 	.word	0x20000fd0
    938c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9390:	b081      	sub	sp, #4
    9392:	4605      	mov	r5, r0
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	494a      	ldr	r1, [pc, #296]	; (94c0 <MPSL_IRQ_RADIO_Handler+0x5c0>)
    9398:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    939c:	4408      	add	r0, r1
    939e:	2600      	movs	r6, #0
    93a0:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    93a4:	2020      	movs	r0, #32
    93a6:	4692      	mov	sl, r2
    93a8:	7010      	strb	r0, [r2, #0]
    93aa:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    93ae:	2c20      	cmp	r4, #32
    93b0:	d036      	beq.n	9420 <MPSL_IRQ_RADIO_Handler+0x520>
    93b2:	9902      	ldr	r1, [sp, #8]
    93b4:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    93b8:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    93bc:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    93c0:	e9d5 7300 	ldrd	r7, r3, [r5]
    93c4:	f850 8f08 	ldr.w	r8, [r0, #8]!
    93c8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    93cc:	eb18 0202 	adds.w	r2, r8, r2
    93d0:	4171      	adcs	r1, r6
    93d2:	1aba      	subs	r2, r7, r2
    93d4:	eb73 0101 	sbcs.w	r1, r3, r1
    93d8:	d322      	bcc.n	9420 <MPSL_IRQ_RADIO_Handler+0x520>
    93da:	89e9      	ldrh	r1, [r5, #14]
    93dc:	b1c9      	cbz	r1, 9412 <MPSL_IRQ_RADIO_Handler+0x512>
    93de:	89c0      	ldrh	r0, [r0, #14]
    93e0:	b9b8      	cbnz	r0, 9412 <MPSL_IRQ_RADIO_Handler+0x512>
    93e2:	f002 ff8b 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    93e6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    93ea:	bf08      	it	eq
    93ec:	200d      	moveq	r0, #13
    93ee:	d00b      	beq.n	9408 <MPSL_IRQ_RADIO_Handler+0x508>
    93f0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    93f4:	3856      	subs	r0, #86	; 0x56
    93f6:	bf08      	it	eq
    93f8:	201c      	moveq	r0, #28
    93fa:	d005      	beq.n	9408 <MPSL_IRQ_RADIO_Handler+0x508>
    93fc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9400:	389f      	subs	r0, #159	; 0x9f
    9402:	bf14      	ite	ne
    9404:	4630      	movne	r0, r6
    9406:	2032      	moveq	r0, #50	; 0x32
    9408:	1c41      	adds	r1, r0, #1
    940a:	ebb7 0008 	subs.w	r0, r7, r8
    940e:	4288      	cmp	r0, r1
    9410:	db06      	blt.n	9420 <MPSL_IRQ_RADIO_Handler+0x520>
    9412:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9416:	f88a 4000 	strb.w	r4, [sl]
    941a:	7844      	ldrb	r4, [r0, #1]
    941c:	2c20      	cmp	r4, #32
    941e:	d1cd      	bne.n	93bc <MPSL_IRQ_RADIO_Handler+0x4bc>
    9420:	9804      	ldr	r0, [sp, #16]
    9422:	f89a 1000 	ldrb.w	r1, [sl]
    9426:	2c20      	cmp	r4, #32
    9428:	7001      	strb	r1, [r0, #0]
    942a:	9f04      	ldr	r7, [sp, #16]
    942c:	9802      	ldr	r0, [sp, #8]
    942e:	d042      	beq.n	94b6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9430:	4924      	ldr	r1, [pc, #144]	; (94c4 <MPSL_IRQ_RADIO_Handler+0x5c4>)
    9432:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9436:	9000      	str	r0, [sp, #0]
    9438:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    943c:	f8d5 b000 	ldr.w	fp, [r5]
    9440:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    9444:	f108 0008 	add.w	r0, r8, #8
    9448:	eb1b 0201 	adds.w	r2, fp, r1
    944c:	eb43 0106 	adc.w	r1, r3, r6
    9450:	e9d0 a300 	ldrd	sl, r3, [r0]
    9454:	ebba 0202 	subs.w	r2, sl, r2
    9458:	eb73 0101 	sbcs.w	r1, r3, r1
    945c:	d31b      	bcc.n	9496 <MPSL_IRQ_RADIO_Handler+0x596>
    945e:	89c0      	ldrh	r0, [r0, #14]
    9460:	b348      	cbz	r0, 94b6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9462:	89e8      	ldrh	r0, [r5, #14]
    9464:	bb38      	cbnz	r0, 94b6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9466:	f002 ff49 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    946a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    946e:	bf08      	it	eq
    9470:	200d      	moveq	r0, #13
    9472:	d00b      	beq.n	948c <MPSL_IRQ_RADIO_Handler+0x58c>
    9474:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9478:	3856      	subs	r0, #86	; 0x56
    947a:	bf08      	it	eq
    947c:	201c      	moveq	r0, #28
    947e:	d005      	beq.n	948c <MPSL_IRQ_RADIO_Handler+0x58c>
    9480:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9484:	389f      	subs	r0, #159	; 0x9f
    9486:	bf14      	ite	ne
    9488:	4630      	movne	r0, r6
    948a:	2032      	moveq	r0, #50	; 0x32
    948c:	1c41      	adds	r1, r0, #1
    948e:	ebba 000b 	subs.w	r0, sl, fp
    9492:	4288      	cmp	r0, r1
    9494:	da0f      	bge.n	94b6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9496:	703c      	strb	r4, [r7, #0]
    9498:	f898 1018 	ldrb.w	r1, [r8, #24]
    949c:	7c28      	ldrb	r0, [r5, #16]
    949e:	4288      	cmp	r0, r1
    94a0:	d303      	bcc.n	94aa <MPSL_IRQ_RADIO_Handler+0x5aa>
    94a2:	b005      	add	sp, #20
    94a4:	2000      	movs	r0, #0
    94a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94aa:	9800      	ldr	r0, [sp, #0]
    94ac:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    94b0:	7844      	ldrb	r4, [r0, #1]
    94b2:	2c20      	cmp	r4, #32
    94b4:	d1c0      	bne.n	9438 <MPSL_IRQ_RADIO_Handler+0x538>
    94b6:	b005      	add	sp, #20
    94b8:	2001      	movs	r0, #1
    94ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94be:	0000      	.short	0x0000
    94c0:	20000fd0 	.word	0x20000fd0
    94c4:	20000f50 	.word	0x20000f50
    94c8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94cc:	b09c      	sub	sp, #112	; 0x70
    94ce:	461e      	mov	r6, r3
    94d0:	f002 fa8e 	bl	b9f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    94d4:	4604      	mov	r4, r0
    94d6:	460d      	mov	r5, r1
    94d8:	f002 fd38 	bl	bf4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    94dc:	4680      	mov	r8, r0
    94de:	981e      	ldr	r0, [sp, #120]	; 0x78
    94e0:	2801      	cmp	r0, #1
    94e2:	bf18      	it	ne
    94e4:	2802      	cmpne	r0, #2
    94e6:	d005      	beq.n	94f4 <MPSL_IRQ_RADIO_Handler+0x5f4>
    94e8:	f640 1156 	movw	r1, #2390	; 0x956
    94ec:	f04f 0070 	mov.w	r0, #112	; 0x70
    94f0:	f003 f8c2 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94f4:	49fe      	ldr	r1, [pc, #1016]	; (98f0 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    94f6:	2001      	movs	r0, #1
    94f8:	6008      	str	r0, [r1, #0]
    94fa:	49fe      	ldr	r1, [pc, #1016]	; (98f4 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    94fc:	6889      	ldr	r1, [r1, #8]
    94fe:	6008      	str	r0, [r1, #0]
    9500:	2000      	movs	r0, #0
    9502:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    9506:	900c      	str	r0, [sp, #48]	; 0x30
    9508:	1e40      	subs	r0, r0, #1
    950a:	900d      	str	r0, [sp, #52]	; 0x34
    950c:	48fa      	ldr	r0, [pc, #1000]	; (98f8 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    950e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    9512:	f100 0108 	add.w	r1, r0, #8
    9516:	e9d0 6006 	ldrd	r6, r0, [r0, #24]
    951a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    951e:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
    9522:	a80e      	add	r0, sp, #56	; 0x38
    9524:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    9528:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    952c:	f007 fa27 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9530:	4602      	mov	r2, r0
    9532:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    9536:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    953a:	4bf0      	ldr	r3, [pc, #960]	; (98fc <MPSL_IRQ_RADIO_Handler+0x9fc>)
    953c:	4448      	add	r0, r9
    953e:	1c41      	adds	r1, r0, #1
    9540:	1850      	adds	r0, r2, r1
    9542:	429a      	cmp	r2, r3
    9544:	d857      	bhi.n	95f6 <MPSL_IRQ_RADIO_Handler+0x6f6>
    9546:	4aee      	ldr	r2, [pc, #952]	; (9900 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9548:	4291      	cmp	r1, r2
    954a:	dc5c      	bgt.n	9606 <MPSL_IRQ_RADIO_Handler+0x706>
    954c:	4252      	negs	r2, r2
    954e:	4291      	cmp	r1, r2
    9550:	db61      	blt.n	9616 <MPSL_IRQ_RADIO_Handler+0x716>
    9552:	1c59      	adds	r1, r3, #1
    9554:	4281      	cmp	r1, r0
    9556:	bfdc      	itt	le
    9558:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    955c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9560:	dd05      	ble.n	956e <MPSL_IRQ_RADIO_Handler+0x66e>
    9562:	2800      	cmp	r0, #0
    9564:	bfbc      	itt	lt
    9566:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    956a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    956e:	9017      	str	r0, [sp, #92]	; 0x5c
    9570:	48e4      	ldr	r0, [pc, #912]	; (9904 <MPSL_IRQ_RADIO_Handler+0xa04>)
    9572:	f1b9 0f00 	cmp.w	r9, #0
    9576:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    957a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    957e:	bf14      	ite	ne
    9580:	f04f 0b01 	movne.w	fp, #1
    9584:	f04f 0b00 	moveq.w	fp, #0
    9588:	f002 fffe 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    958c:	9019      	str	r0, [sp, #100]	; 0x64
    958e:	f1bb 0f00 	cmp.w	fp, #0
    9592:	d00c      	beq.n	95ae <MPSL_IRQ_RADIO_Handler+0x6ae>
    9594:	49dc      	ldr	r1, [pc, #880]	; (9908 <MPSL_IRQ_RADIO_Handler+0xa08>)
    9596:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    959a:	ea6f 0000 	mvn.w	r0, r0
    959e:	ea70 0001 	orns	r0, r0, r1
    95a2:	bf02      	ittt	eq
    95a4:	9819      	ldreq	r0, [sp, #100]	; 0x64
    95a6:	2800      	cmpeq	r0, #0
    95a8:	f04f 0a01 	moveq.w	sl, #1
    95ac:	d001      	beq.n	95b2 <MPSL_IRQ_RADIO_Handler+0x6b2>
    95ae:	f04f 0a00 	mov.w	sl, #0
    95b2:	f002 fea3 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    95b6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    95ba:	bf08      	it	eq
    95bc:	200d      	moveq	r0, #13
    95be:	d00b      	beq.n	95d8 <MPSL_IRQ_RADIO_Handler+0x6d8>
    95c0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    95c4:	3856      	subs	r0, #86	; 0x56
    95c6:	bf08      	it	eq
    95c8:	201c      	moveq	r0, #28
    95ca:	d005      	beq.n	95d8 <MPSL_IRQ_RADIO_Handler+0x6d8>
    95cc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    95d0:	389f      	subs	r0, #159	; 0x9f
    95d2:	bf14      	ite	ne
    95d4:	2000      	movne	r0, #0
    95d6:	2032      	moveq	r0, #50	; 0x32
    95d8:	2600      	movs	r6, #0
    95da:	4637      	mov	r7, r6
    95dc:	9016      	str	r0, [sp, #88]	; 0x58
    95de:	45c8      	cmp	r8, r9
    95e0:	d937      	bls.n	9652 <MPSL_IRQ_RADIO_Handler+0x752>
    95e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    95e4:	4ec5      	ldr	r6, [pc, #788]	; (98fc <MPSL_IRQ_RADIO_Handler+0x9fc>)
    95e6:	ea6f 0c08 	mvn.w	ip, r8
    95ea:	466b      	mov	r3, sp
    95ec:	aa1a      	add	r2, sp, #104	; 0x68
    95ee:	eb01 000c 	add.w	r0, r1, ip
    95f2:	42b1      	cmp	r1, r6
    95f4:	d904      	bls.n	9600 <MPSL_IRQ_RADIO_Handler+0x700>
    95f6:	f240 517f 	movw	r1, #1407	; 0x57f
    95fa:	2070      	movs	r0, #112	; 0x70
    95fc:	f003 f83c 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9600:	49bf      	ldr	r1, [pc, #764]	; (9900 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9602:	458c      	cmp	ip, r1
    9604:	dd04      	ble.n	9610 <MPSL_IRQ_RADIO_Handler+0x710>
    9606:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    960a:	2070      	movs	r0, #112	; 0x70
    960c:	f003 f834 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9610:	49be      	ldr	r1, [pc, #760]	; (990c <MPSL_IRQ_RADIO_Handler+0xa0c>)
    9612:	458c      	cmp	ip, r1
    9614:	da04      	bge.n	9620 <MPSL_IRQ_RADIO_Handler+0x720>
    9616:	f240 5181 	movw	r1, #1409	; 0x581
    961a:	2070      	movs	r0, #112	; 0x70
    961c:	f003 f82c 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9620:	49bb      	ldr	r1, [pc, #748]	; (9910 <MPSL_IRQ_RADIO_Handler+0xa10>)
    9622:	4281      	cmp	r1, r0
    9624:	bfdc      	itt	le
    9626:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    962a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    962e:	dd05      	ble.n	963c <MPSL_IRQ_RADIO_Handler+0x73c>
    9630:	2800      	cmp	r0, #0
    9632:	bfbc      	itt	lt
    9634:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9638:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    963c:	4619      	mov	r1, r3
    963e:	f001 ff87 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9642:	9800      	ldr	r0, [sp, #0]
    9644:	990e      	ldr	r1, [sp, #56]	; 0x38
    9646:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    964a:	9000      	str	r0, [sp, #0]
    964c:	1a08      	subs	r0, r1, r0
    964e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    9652:	f1ba 0f00 	cmp.w	sl, #0
    9656:	bf18      	it	ne
    9658:	9f16      	ldrne	r7, [sp, #88]	; 0x58
    965a:	d104      	bne.n	9666 <MPSL_IRQ_RADIO_Handler+0x766>
    965c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9660:	2800      	cmp	r0, #0
    9662:	bf18      	it	ne
    9664:	2702      	movne	r7, #2
    9666:	43e0      	mvns	r0, r4
    9668:	ea70 0005 	orns	r0, r0, r5
    966c:	d022      	beq.n	96b4 <MPSL_IRQ_RADIO_Handler+0x7b4>
    966e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9672:	1a22      	subs	r2, r4, r0
    9674:	eb75 0201 	sbcs.w	r2, r5, r1
    9678:	d20c      	bcs.n	9694 <MPSL_IRQ_RADIO_Handler+0x794>
    967a:	1b02      	subs	r2, r0, r4
    967c:	eb61 0105 	sbc.w	r1, r1, r5
    9680:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9684:	f171 0100 	sbcs.w	r1, r1, #0
    9688:	d311      	bcc.n	96ae <MPSL_IRQ_RADIO_Handler+0x7ae>
    968a:	f640 1195 	movw	r1, #2453	; 0x995
    968e:	2070      	movs	r0, #112	; 0x70
    9690:	f002 fff2 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9694:	1a22      	subs	r2, r4, r0
    9696:	eb65 0101 	sbc.w	r1, r5, r1
    969a:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    969e:	f171 0100 	sbcs.w	r1, r1, #0
    96a2:	d304      	bcc.n	96ae <MPSL_IRQ_RADIO_Handler+0x7ae>
    96a4:	f640 1199 	movw	r1, #2457	; 0x999
    96a8:	2070      	movs	r0, #112	; 0x70
    96aa:	f002 ffe5 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96ae:	1b00      	subs	r0, r0, r4
    96b0:	2801      	cmp	r0, #1
    96b2:	da03      	bge.n	96bc <MPSL_IRQ_RADIO_Handler+0x7bc>
    96b4:	981c      	ldr	r0, [sp, #112]	; 0x70
    96b6:	901a      	str	r0, [sp, #104]	; 0x68
    96b8:	2003      	movs	r0, #3
    96ba:	e00d      	b.n	96d8 <MPSL_IRQ_RADIO_Handler+0x7d8>
    96bc:	f1ba 0f00 	cmp.w	sl, #0
    96c0:	d008      	beq.n	96d4 <MPSL_IRQ_RADIO_Handler+0x7d4>
    96c2:	4891      	ldr	r0, [pc, #580]	; (9908 <MPSL_IRQ_RADIO_Handler+0xa08>)
    96c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    96c8:	b120      	cbz	r0, 96d4 <MPSL_IRQ_RADIO_Handler+0x7d4>
    96ca:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    96ce:	1c07      	adds	r7, r0, #0
    96d0:	bf18      	it	ne
    96d2:	2702      	movne	r7, #2
    96d4:	2000      	movs	r0, #0
    96d6:	941a      	str	r4, [sp, #104]	; 0x68
    96d8:	4407      	add	r7, r0
    96da:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    96de:	1b80      	subs	r0, r0, r6
    96e0:	f162 0100 	sbc.w	r1, r2, #0
    96e4:	1e42      	subs	r2, r0, #1
    96e6:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    96ea:	f141 33ff 	adc.w	r3, r1, #4294967295
    96ee:	ebb2 0c0c 	subs.w	ip, r2, ip
    96f2:	45bc      	cmp	ip, r7
    96f4:	db08      	blt.n	9708 <MPSL_IRQ_RADIO_Handler+0x808>
    96f6:	b3a6      	cbz	r6, 9762 <MPSL_IRQ_RADIO_Handler+0x862>
    96f8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    96fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    9700:	44b4      	add	ip, r6
    9702:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    9706:	e02c      	b.n	9762 <MPSL_IRQ_RADIO_Handler+0x862>
    9708:	b12e      	cbz	r6, 9716 <MPSL_IRQ_RADIO_Handler+0x816>
    970a:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    970e:	b930      	cbnz	r0, 971e <MPSL_IRQ_RADIO_Handler+0x81e>
    9710:	f002 fc12 	bl	bf38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9714:	b118      	cbz	r0, 971e <MPSL_IRQ_RADIO_Handler+0x81e>
    9716:	f1ba 0f00 	cmp.w	sl, #0
    971a:	d114      	bne.n	9746 <MPSL_IRQ_RADIO_Handler+0x846>
    971c:	e00c      	b.n	9738 <MPSL_IRQ_RADIO_Handler+0x838>
    971e:	f1ba 0f00 	cmp.w	sl, #0
    9722:	d104      	bne.n	972e <MPSL_IRQ_RADIO_Handler+0x82e>
    9724:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9728:	2800      	cmp	r0, #0
    972a:	bf18      	it	ne
    972c:	1ebf      	subne	r7, r7, #2
    972e:	2600      	movs	r6, #0
    9730:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
    9734:	46b0      	mov	r8, r6
    9736:	e006      	b.n	9746 <MPSL_IRQ_RADIO_Handler+0x846>
    9738:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    973c:	b118      	cbz	r0, 9746 <MPSL_IRQ_RADIO_Handler+0x846>
    973e:	2000      	movs	r0, #0
    9740:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    9744:	1ebf      	subs	r7, r7, #2
    9746:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    974a:	1b80      	subs	r0, r0, r6
    974c:	f162 0100 	sbc.w	r1, r2, #0
    9750:	1e42      	subs	r2, r0, #1
    9752:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    9756:	f141 33ff 	adc.w	r3, r1, #4294967295
    975a:	ebb2 0c0c 	subs.w	ip, r2, ip
    975e:	45bc      	cmp	ip, r7
    9760:	db7e      	blt.n	9860 <MPSL_IRQ_RADIO_Handler+0x960>
    9762:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
    9766:	f1bc 0f00 	cmp.w	ip, #0
    976a:	d111      	bne.n	9790 <MPSL_IRQ_RADIO_Handler+0x890>
    976c:	f8df c198 	ldr.w	ip, [pc, #408]	; 9908 <MPSL_IRQ_RADIO_Handler+0xa08>
    9770:	e9dc 6c0e 	ldrd	r6, ip, [ip, #56]	; 0x38
    9774:	43f7      	mvns	r7, r6
    9776:	ea77 070c 	orns	r7, r7, ip
    977a:	d009      	beq.n	9790 <MPSL_IRQ_RADIO_Handler+0x890>
    977c:	1b86      	subs	r6, r0, r6
    977e:	9816      	ldr	r0, [sp, #88]	; 0x58
    9780:	eb61 010c 	sbc.w	r1, r1, ip
    9784:	1a30      	subs	r0, r6, r0
    9786:	f171 0000 	sbcs.w	r0, r1, #0
    978a:	bf38      	it	cc
    978c:	2000      	movcc	r0, #0
    978e:	d300      	bcc.n	9792 <MPSL_IRQ_RADIO_Handler+0x892>
    9790:	2001      	movs	r0, #1
    9792:	ea3b 0000 	bics.w	r0, fp, r0
    9796:	d163      	bne.n	9860 <MPSL_IRQ_RADIO_Handler+0x960>
    9798:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    979c:	e9cd 0107 	strd	r0, r1, [sp, #28]
    97a0:	981e      	ldr	r0, [sp, #120]	; 0x78
    97a2:	4616      	mov	r6, r2
    97a4:	e9cd a018 	strd	sl, r0, [sp, #96]	; 0x60
    97a8:	461f      	mov	r7, r3
    97aa:	f04f 0a00 	mov.w	sl, #0
    97ae:	f002 fda5 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    97b2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    97b6:	bf08      	it	eq
    97b8:	200d      	moveq	r0, #13
    97ba:	d00b      	beq.n	97d4 <MPSL_IRQ_RADIO_Handler+0x8d4>
    97bc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    97c0:	3856      	subs	r0, #86	; 0x56
    97c2:	bf08      	it	eq
    97c4:	201c      	moveq	r0, #28
    97c6:	d005      	beq.n	97d4 <MPSL_IRQ_RADIO_Handler+0x8d4>
    97c8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    97cc:	389f      	subs	r0, #159	; 0x9f
    97ce:	bf14      	ite	ne
    97d0:	4650      	movne	r0, sl
    97d2:	2032      	moveq	r0, #50	; 0x32
    97d4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    97d8:	300b      	adds	r0, #11
    97da:	1ab2      	subs	r2, r6, r2
    97dc:	eb67 0303 	sbc.w	r3, r7, r3
    97e0:	1a10      	subs	r0, r2, r0
    97e2:	f173 0000 	sbcs.w	r0, r3, #0
    97e6:	d229      	bcs.n	983c <MPSL_IRQ_RADIO_Handler+0x93c>
    97e8:	9819      	ldr	r0, [sp, #100]	; 0x64
    97ea:	2801      	cmp	r0, #1
    97ec:	d002      	beq.n	97f4 <MPSL_IRQ_RADIO_Handler+0x8f4>
    97ee:	9818      	ldr	r0, [sp, #96]	; 0x60
    97f0:	b148      	cbz	r0, 9806 <MPSL_IRQ_RADIO_Handler+0x906>
    97f2:	e016      	b.n	9822 <MPSL_IRQ_RADIO_Handler+0x922>
    97f4:	43e0      	mvns	r0, r4
    97f6:	ea70 0005 	orns	r0, r0, r5
    97fa:	d126      	bne.n	984a <MPSL_IRQ_RADIO_Handler+0x94a>
    97fc:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9800:	2070      	movs	r0, #112	; 0x70
    9802:	f002 ff39 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9806:	43e0      	mvns	r0, r4
    9808:	ea70 0005 	orns	r0, r0, r5
    980c:	d009      	beq.n	9822 <MPSL_IRQ_RADIO_Handler+0x922>
    980e:	d01c      	beq.n	984a <MPSL_IRQ_RADIO_Handler+0x94a>
    9810:	1ba0      	subs	r0, r4, r6
    9812:	eb65 0107 	sbc.w	r1, r5, r7
    9816:	2300      	movs	r3, #0
    9818:	f1d0 0204 	rsbs	r2, r0, #4
    981c:	eb73 0201 	sbcs.w	r2, r3, r1
    9820:	da06      	bge.n	9830 <MPSL_IRQ_RADIO_Handler+0x930>
    9822:	4634      	mov	r4, r6
    9824:	463d      	mov	r5, r7
    9826:	4620      	mov	r0, r4
    9828:	4629      	mov	r1, r5
    982a:	f001 ffc1 	bl	b7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    982e:	e00c      	b.n	984a <MPSL_IRQ_RADIO_Handler+0x94a>
    9830:	2200      	movs	r2, #0
    9832:	1a10      	subs	r0, r2, r0
    9834:	eb72 0001 	sbcs.w	r0, r2, r1
    9838:	db12      	blt.n	9860 <MPSL_IRQ_RADIO_Handler+0x960>
    983a:	e006      	b.n	984a <MPSL_IRQ_RADIO_Handler+0x94a>
    983c:	4634      	mov	r4, r6
    983e:	463d      	mov	r5, r7
    9840:	4620      	mov	r0, r4
    9842:	4629      	mov	r1, r5
    9844:	f001 ffb4 	bl	b7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9848:	46da      	mov	sl, fp
    984a:	4626      	mov	r6, r4
    984c:	43f1      	mvns	r1, r6
    984e:	ea71 0005 	orns	r0, r1, r5
    9852:	d06f      	beq.n	9934 <MPSL_IRQ_RADIO_Handler+0xa34>
    9854:	990e      	ldr	r1, [sp, #56]	; 0x38
    9856:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    985a:	2700      	movs	r7, #0
    985c:	1a0b      	subs	r3, r1, r0
    985e:	e000      	b.n	9862 <MPSL_IRQ_RADIO_Handler+0x962>
    9860:	e06d      	b.n	993e <MPSL_IRQ_RADIO_Handler+0xa3e>
    9862:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9866:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    986a:	eb11 010c 	adds.w	r1, r1, ip
    986e:	1a08      	subs	r0, r1, r0
    9870:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9874:	2b01      	cmp	r3, #1
    9876:	d362      	bcc.n	993e <MPSL_IRQ_RADIO_Handler+0xa3e>
    9878:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    987c:	bf98      	it	ls
    987e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9882:	d85c      	bhi.n	993e <MPSL_IRQ_RADIO_Handler+0xa3e>
    9884:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    9888:	f007 f879 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    988c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    988e:	4a1c      	ldr	r2, [pc, #112]	; (9900 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9890:	1a0c      	subs	r4, r1, r0
    9892:	1aa2      	subs	r2, r4, r2
    9894:	f177 0200 	sbcs.w	r2, r7, #0
    9898:	d316      	bcc.n	98c8 <MPSL_IRQ_RADIO_Handler+0x9c8>
    989a:	4b19      	ldr	r3, [pc, #100]	; (9900 <MPSL_IRQ_RADIO_Handler+0xa00>)
    989c:	1a42      	subs	r2, r0, r1
    989e:	1ad3      	subs	r3, r2, r3
    98a0:	f177 0300 	sbcs.w	r3, r7, #0
    98a4:	d310      	bcc.n	98c8 <MPSL_IRQ_RADIO_Handler+0x9c8>
    98a6:	4b15      	ldr	r3, [pc, #84]	; (98fc <MPSL_IRQ_RADIO_Handler+0x9fc>)
    98a8:	42a3      	cmp	r3, r4
    98aa:	bf3e      	ittt	cc
    98ac:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    98b0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    98b4:	1844      	addcc	r4, r0, r1
    98b6:	d307      	bcc.n	98c8 <MPSL_IRQ_RADIO_Handler+0x9c8>
    98b8:	4293      	cmp	r3, r2
    98ba:	d244      	bcs.n	9946 <MPSL_IRQ_RADIO_Handler+0xa46>
    98bc:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    98c0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    98c4:	4408      	add	r0, r1
    98c6:	4244      	negs	r4, r0
    98c8:	4d0f      	ldr	r5, [pc, #60]	; (9908 <MPSL_IRQ_RADIO_Handler+0xa08>)
    98ca:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    98ce:	b378      	cbz	r0, 9930 <MPSL_IRQ_RADIO_Handler+0xa30>
    98d0:	981e      	ldr	r0, [sp, #120]	; 0x78
    98d2:	2801      	cmp	r0, #1
    98d4:	d005      	beq.n	98e2 <MPSL_IRQ_RADIO_Handler+0x9e2>
    98d6:	2002      	movs	r0, #2
    98d8:	f002 f9f6 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    98dc:	2001      	movs	r0, #1
    98de:	f002 f9f3 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    98e2:	45c1      	cmp	r9, r8
    98e4:	d240      	bcs.n	9968 <MPSL_IRQ_RADIO_Handler+0xa68>
    98e6:	eba4 0108 	sub.w	r1, r4, r8
    98ea:	f04f 0002 	mov.w	r0, #2
    98ee:	e011      	b.n	9914 <MPSL_IRQ_RADIO_Handler+0xa14>
    98f0:	40000508 	.word	0x40000508
    98f4:	20000308 	.word	0x20000308
    98f8:	20000b50 	.word	0x20000b50
    98fc:	1e847fff 	.word	0x1e847fff
    9900:	0f424000 	.word	0x0f424000
    9904:	20000f50 	.word	0x20000f50
    9908:	20000fd0 	.word	0x20000fd0
    990c:	f0bdc000 	.word	0xf0bdc000
    9910:	1e848000 	.word	0x1e848000
    9914:	f002 f91e 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9918:	b3a8      	cbz	r0, 9986 <MPSL_IRQ_RADIO_Handler+0xa86>
    991a:	f1b9 0f00 	cmp.w	r9, #0
    991e:	bf1c      	itt	ne
    9920:	eba4 0109 	subne.w	r1, r4, r9
    9924:	2001      	movne	r0, #1
    9926:	d037      	beq.n	9998 <MPSL_IRQ_RADIO_Handler+0xa98>
    9928:	f002 f914 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    992c:	b358      	cbz	r0, 9986 <MPSL_IRQ_RADIO_Handler+0xa86>
    992e:	e033      	b.n	9998 <MPSL_IRQ_RADIO_Handler+0xa98>
    9930:	e00e      	b.n	9950 <MPSL_IRQ_RADIO_Handler+0xa50>
    9932:	e7ff      	b.n	9934 <MPSL_IRQ_RADIO_Handler+0xa34>
    9934:	f640 2103 	movw	r1, #2563	; 0xa03
    9938:	2070      	movs	r0, #112	; 0x70
    993a:	f002 fe9d 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    993e:	b020      	add	sp, #128	; 0x80
    9940:	2000      	movs	r0, #0
    9942:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9946:	f640 21d7 	movw	r1, #2775	; 0xad7
    994a:	2070      	movs	r0, #112	; 0x70
    994c:	f002 fe94 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9950:	45c1      	cmp	r9, r8
    9952:	bf34      	ite	cc
    9954:	4640      	movcc	r0, r8
    9956:	4648      	movcs	r0, r9
    9958:	301e      	adds	r0, #30
    995a:	42a0      	cmp	r0, r4
    995c:	dbb8      	blt.n	98d0 <MPSL_IRQ_RADIO_Handler+0x9d0>
    995e:	f640 2117 	movw	r1, #2583	; 0xa17
    9962:	2070      	movs	r0, #112	; 0x70
    9964:	f002 fe88 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9968:	d90e      	bls.n	9988 <MPSL_IRQ_RADIO_Handler+0xa88>
    996a:	eba4 0109 	sub.w	r1, r4, r9
    996e:	2001      	movs	r0, #1
    9970:	f002 f8f0 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9974:	b138      	cbz	r0, 9986 <MPSL_IRQ_RADIO_Handler+0xa86>
    9976:	f1b8 0f00 	cmp.w	r8, #0
    997a:	bf1c      	itt	ne
    997c:	eba4 0108 	subne.w	r1, r4, r8
    9980:	2002      	movne	r0, #2
    9982:	d009      	beq.n	9998 <MPSL_IRQ_RADIO_Handler+0xa98>
    9984:	e7d0      	b.n	9928 <MPSL_IRQ_RADIO_Handler+0xa28>
    9986:	e038      	b.n	99fa <MPSL_IRQ_RADIO_Handler+0xafa>
    9988:	ea58 0009 	orrs.w	r0, r8, r9
    998c:	d004      	beq.n	9998 <MPSL_IRQ_RADIO_Handler+0xa98>
    998e:	f640 113a 	movw	r1, #2362	; 0x93a
    9992:	2070      	movs	r0, #112	; 0x70
    9994:	f002 fe70 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9998:	4621      	mov	r1, r4
    999a:	2000      	movs	r0, #0
    999c:	f002 f8da 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    99a0:	b358      	cbz	r0, 99fa <MPSL_IRQ_RADIO_Handler+0xafa>
    99a2:	f04f 0801 	mov.w	r8, #1
    99a6:	f1bb 0f00 	cmp.w	fp, #0
    99aa:	bf04      	itt	eq
    99ac:	f895 0040 	ldrbeq.w	r0, [r5, #64]	; 0x40
    99b0:	2800      	cmpeq	r0, #0
    99b2:	d002      	beq.n	99ba <MPSL_IRQ_RADIO_Handler+0xaba>
    99b4:	f1ba 0f00 	cmp.w	sl, #0
    99b8:	d029      	beq.n	9a0e <MPSL_IRQ_RADIO_Handler+0xb0e>
    99ba:	e9d5 100e 	ldrd	r1, r0, [r5, #56]	; 0x38
    99be:	43c9      	mvns	r1, r1
    99c0:	ea71 0000 	orns	r0, r1, r0
    99c4:	d006      	beq.n	99d4 <MPSL_IRQ_RADIO_Handler+0xad4>
    99c6:	f002 fc9f 	bl	c308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    99ca:	f04f 30ff 	mov.w	r0, #4294967295
    99ce:	4601      	mov	r1, r0
    99d0:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    99d4:	f1ba 0f00 	cmp.w	sl, #0
    99d8:	d01f      	beq.n	9a1a <MPSL_IRQ_RADIO_Handler+0xb1a>
    99da:	9816      	ldr	r0, [sp, #88]	; 0x58
    99dc:	1a30      	subs	r0, r6, r0
    99de:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    99e2:	f04f 0005 	mov.w	r0, #5
    99e6:	f002 f8b5 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    99ea:	b370      	cbz	r0, 9a4a <MPSL_IRQ_RADIO_Handler+0xb4a>
    99ec:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
    99f0:	2800      	cmp	r0, #0
    99f2:	bf08      	it	eq
    99f4:	f885 8040 	strbeq.w	r8, [r5, #64]	; 0x40
    99f8:	e017      	b.n	9a2a <MPSL_IRQ_RADIO_Handler+0xb2a>
    99fa:	2002      	movs	r0, #2
    99fc:	f002 f964 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9a00:	2001      	movs	r0, #1
    9a02:	f002 f961 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9a06:	b020      	add	sp, #128	; 0x80
    9a08:	2000      	movs	r0, #0
    9a0a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9a0e:	e9d5 100e 	ldrd	r1, r0, [r5, #56]	; 0x38
    9a12:	43c9      	mvns	r1, r1
    9a14:	ea71 0000 	orns	r0, r1, r0
    9a18:	d012      	beq.n	9a40 <MPSL_IRQ_RADIO_Handler+0xb40>
    9a1a:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
    9a1e:	b120      	cbz	r0, 9a2a <MPSL_IRQ_RADIO_Handler+0xb2a>
    9a20:	2005      	movs	r0, #5
    9a22:	f002 f951 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9a26:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    9a2a:	eba4 0009 	sub.w	r0, r4, r9
    9a2e:	f1a0 0119 	sub.w	r1, r0, #25
    9a32:	2900      	cmp	r1, #0
    9a34:	dc0f      	bgt.n	9a56 <MPSL_IRQ_RADIO_Handler+0xb56>
    9a36:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    9a3a:	2070      	movs	r0, #112	; 0x70
    9a3c:	f002 fe1c 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a40:	f002 fc7e 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9a44:	f002 f864 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9a48:	e7c2      	b.n	99d0 <MPSL_IRQ_RADIO_Handler+0xad0>
    9a4a:	e7ff      	b.n	9a4c <MPSL_IRQ_RADIO_Handler+0xb4c>
    9a4c:	f240 21e6 	movw	r1, #742	; 0x2e6
    9a50:	2070      	movs	r0, #112	; 0x70
    9a52:	f002 fe11 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a56:	2003      	movs	r0, #3
    9a58:	f002 f87c 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a5c:	b318      	cbz	r0, 9aa6 <MPSL_IRQ_RADIO_Handler+0xba6>
    9a5e:	4814      	ldr	r0, [pc, #80]	; (9ab0 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    9a60:	6880      	ldr	r0, [r0, #8]
    9a62:	6007      	str	r7, [r0, #0]
    9a64:	4813      	ldr	r0, [pc, #76]	; (9ab4 <MPSL_IRQ_RADIO_Handler+0xbb4>)
    9a66:	6007      	str	r7, [r0, #0]
    9a68:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    9a6c:	4812      	ldr	r0, [pc, #72]	; (9ab8 <MPSL_IRQ_RADIO_Handler+0xbb8>)
    9a6e:	e898 10fe 	ldmia.w	r8, {r1, r2, r3, r4, r5, r6, r7, ip}
    9a72:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9a76:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9a7a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    9a7e:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    9a82:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    9a86:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    9a8a:	f8c0 7098 	str.w	r7, [r0, #152]	; 0x98
    9a8e:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9a92:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    9a96:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9a9a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9a9e:	b020      	add	sp, #128	; 0x80
    9aa0:	2001      	movs	r0, #1
    9aa2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9aa6:	f640 2148 	movw	r1, #2632	; 0xa48
    9aaa:	2070      	movs	r0, #112	; 0x70
    9aac:	f002 fde4 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ab0:	20000308 	.word	0x20000308
    9ab4:	40000508 	.word	0x40000508
    9ab8:	20000f50 	.word	0x20000f50
    9abc:	b570      	push	{r4, r5, r6, lr}
    9abe:	4d1d      	ldr	r5, [pc, #116]	; (9b34 <MPSL_IRQ_RADIO_Handler+0xc34>)
    9ac0:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9ac4:	2820      	cmp	r0, #32
    9ac6:	bf18      	it	ne
    9ac8:	bd70      	popne	{r4, r5, r6, pc}
    9aca:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9ace:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9ad2:	4428      	add	r0, r5
    9ad4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9ad8:	2c20      	cmp	r4, #32
    9ada:	d026      	beq.n	9b2a <MPSL_IRQ_RADIO_Handler+0xc2a>
    9adc:	4b16      	ldr	r3, [pc, #88]	; (9b38 <MPSL_IRQ_RADIO_Handler+0xc38>)
    9ade:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9ae2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9ae6:	7849      	ldrb	r1, [r1, #1]
    9ae8:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9aec:	20ff      	movs	r0, #255	; 0xff
    9aee:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9af2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    9af6:	4621      	mov	r1, r4
    9af8:	2002      	movs	r0, #2
    9afa:	f000 f88b 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    9afe:	2000      	movs	r0, #0
    9b00:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9b04:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    9b08:	480c      	ldr	r0, [pc, #48]	; (9b3c <MPSL_IRQ_RADIO_Handler+0xc3c>)
    9b0a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9b0e:	7e00      	ldrb	r0, [r0, #24]
    9b10:	2800      	cmp	r0, #0
    9b12:	bf08      	it	eq
    9b14:	f002 ff18 	bleq	c948 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9b18:	2000      	movs	r0, #0
    9b1a:	4909      	ldr	r1, [pc, #36]	; (9b40 <MPSL_IRQ_RADIO_Handler+0xc40>)
    9b1c:	6849      	ldr	r1, [r1, #4]
    9b1e:	2900      	cmp	r1, #0
    9b20:	bf08      	it	eq
    9b22:	bd70      	popeq	{r4, r5, r6, pc}
    9b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9b28:	4708      	bx	r1
    9b2a:	f240 311d 	movw	r1, #797	; 0x31d
    9b2e:	2070      	movs	r0, #112	; 0x70
    9b30:	f002 fda2 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b34:	20000fd0 	.word	0x20000fd0
    9b38:	20000f50 	.word	0x20000f50
    9b3c:	20000b50 	.word	0x20000b50
    9b40:	20000308 	.word	0x20000308
    9b44:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9b48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9c04 <MPSL_IRQ_RADIO_Handler+0xd04>
    9b4c:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9b50:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b54:	4440      	add	r0, r8
    9b56:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9b5a:	2c20      	cmp	r4, #32
    9b5c:	bf08      	it	eq
    9b5e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b62:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9c08 <MPSL_IRQ_RADIO_Handler+0xd08>
    9b66:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9c0c <MPSL_IRQ_RADIO_Handler+0xd0c>
    9b6a:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9b6e:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9b72:	2607      	movs	r6, #7
    9b74:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9b78:	2801      	cmp	r0, #1
    9b7a:	d00e      	beq.n	9b9a <MPSL_IRQ_RADIO_Handler+0xc9a>
    9b7c:	2804      	cmp	r0, #4
    9b7e:	bf08      	it	eq
    9b80:	2602      	moveq	r6, #2
    9b82:	d00a      	beq.n	9b9a <MPSL_IRQ_RADIO_Handler+0xc9a>
    9b84:	2805      	cmp	r0, #5
    9b86:	bf0c      	ite	eq
    9b88:	2603      	moveq	r6, #3
    9b8a:	2806      	cmpne	r0, #6
    9b8c:	d005      	beq.n	9b9a <MPSL_IRQ_RADIO_Handler+0xc9a>
    9b8e:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9b92:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b96:	f002 fd6f 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b9a:	f1bb 0f00 	cmp.w	fp, #0
    9b9e:	bf18      	it	ne
    9ba0:	f3af 8000 	nopne.w
    9ba4:	f3ef 8010 	mrs	r0, PRIMASK
    9ba8:	b672      	cpsid	i
    9baa:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9bae:	784a      	ldrb	r2, [r1, #1]
    9bb0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9bb4:	4441      	add	r1, r8
    9bb6:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    9bba:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9bbe:	42a2      	cmp	r2, r4
    9bc0:	bf04      	itt	eq
    9bc2:	2220      	moveq	r2, #32
    9bc4:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    9bc8:	b1a8      	cbz	r0, 9bf6 <MPSL_IRQ_RADIO_Handler+0xcf6>
    9bca:	462a      	mov	r2, r5
    9bcc:	4621      	mov	r1, r4
    9bce:	2001      	movs	r0, #1
    9bd0:	f000 f820 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    9bd4:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9bd8:	e9d1 2000 	ldrd	r2, r0, [r1]
    9bdc:	4631      	mov	r1, r6
    9bde:	4790      	blx	r2
    9be0:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9be4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9be8:	4440      	add	r0, r8
    9bea:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9bee:	2c20      	cmp	r4, #32
    9bf0:	d1bd      	bne.n	9b6e <MPSL_IRQ_RADIO_Handler+0xc6e>
    9bf2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9bf6:	4806      	ldr	r0, [pc, #24]	; (9c10 <MPSL_IRQ_RADIO_Handler+0xd10>)
    9bf8:	2800      	cmp	r0, #0
    9bfa:	bf18      	it	ne
    9bfc:	f3af 8000 	nopne.w
    9c00:	b662      	cpsie	i
    9c02:	e7e2      	b.n	9bca <MPSL_IRQ_RADIO_Handler+0xcca>
    9c04:	20000fd0 	.word	0x20000fd0
    9c08:	00000000 	.word	0x00000000
    9c0c:	20000f50 	.word	0x20000f50
    9c10:	00000000 	.word	0x00000000
    9c14:	f8df c058 	ldr.w	ip, [pc, #88]	; 9c70 <MPSL_IRQ_RADIO_Handler+0xd70>
    9c18:	b510      	push	{r4, lr}
    9c1a:	2300      	movs	r3, #0
    9c1c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9c20:	2807      	cmp	r0, #7
    9c22:	d21f      	bcs.n	9c64 <MPSL_IRQ_RADIO_Handler+0xd64>
    9c24:	e8df f000 	tbb	[pc, r0]
    9c28:	05050505 	.word	0x05050505
    9c2c:	00040404 	.word	0x00040404
    9c30:	2301      	movs	r3, #1
    9c32:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9c36:	2b00      	cmp	r3, #0
    9c38:	bf08      	it	eq
    9c3a:	bd10      	popeq	{r4, pc}
    9c3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9c40:	480c      	ldr	r0, [pc, #48]	; (9c74 <MPSL_IRQ_RADIO_Handler+0xd74>)
    9c42:	4402      	add	r2, r0
    9c44:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    9c48:	2820      	cmp	r0, #32
    9c4a:	bf0e      	itee	eq
    9c4c:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    9c50:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9c54:	7041      	strbne	r1, [r0, #1]
    9c56:	2020      	movs	r0, #32
    9c58:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9c5c:	7058      	strb	r0, [r3, #1]
    9c5e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    9c62:	bd10      	pop	{r4, pc}
    9c64:	f44f 7117 	mov.w	r1, #604	; 0x25c
    9c68:	2070      	movs	r0, #112	; 0x70
    9c6a:	f002 fd05 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c6e:	0000      	.short	0x0000
    9c70:	20000f50 	.word	0x20000f50
    9c74:	20000fd0 	.word	0x20000fd0
    9c78:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c7c:	460f      	mov	r7, r1
    9c7e:	4680      	mov	r8, r0
    9c80:	f8df b154 	ldr.w	fp, [pc, #340]	; 9dd8 <MPSL_IRQ_RADIO_Handler+0xed8>
    9c84:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9c88:	4458      	add	r0, fp
    9c8a:	f1b8 0f01 	cmp.w	r8, #1
    9c8e:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9c92:	4625      	mov	r5, r4
    9c94:	bf18      	it	ne
    9c96:	f1b8 0f02 	cmpne.w	r8, #2
    9c9a:	d005      	beq.n	9ca8 <MPSL_IRQ_RADIO_Handler+0xda8>
    9c9c:	f640 217e 	movw	r1, #2686	; 0xa7e
    9ca0:	f04f 0070 	mov.w	r0, #112	; 0x70
    9ca4:	f002 fce8 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ca8:	2d20      	cmp	r5, #32
    9caa:	d041      	beq.n	9d30 <MPSL_IRQ_RADIO_Handler+0xe30>
    9cac:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9cb0:	2600      	movs	r6, #0
    9cb2:	2800      	cmp	r0, #0
    9cb4:	bf08      	it	eq
    9cb6:	2602      	moveq	r6, #2
    9cb8:	f001 fd74 	bl	b7a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9cbc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9ddc <MPSL_IRQ_RADIO_Handler+0xedc>
    9cc0:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9cc4:	6899      	ldr	r1, [r3, #8]
    9cc6:	691b      	ldr	r3, [r3, #16]
    9cc8:	1a0a      	subs	r2, r1, r0
    9cca:	18c9      	adds	r1, r1, r3
    9ccc:	1a09      	subs	r1, r1, r0
    9cce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9cd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9cd6:	4296      	cmp	r6, r2
    9cd8:	bf99      	ittee	ls
    9cda:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9cde:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ce2:	4a3f      	ldrhi	r2, [pc, #252]	; (9de0 <MPSL_IRQ_RADIO_Handler+0xee0>)
    9ce4:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9ce8:	d920      	bls.n	9d2c <MPSL_IRQ_RADIO_Handler+0xe2c>
    9cea:	4622      	mov	r2, r4
    9cec:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9cf0:	784c      	ldrb	r4, [r1, #1]
    9cf2:	2c20      	cmp	r4, #32
    9cf4:	d012      	beq.n	9d1c <MPSL_IRQ_RADIO_Handler+0xe1c>
    9cf6:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9cfa:	6899      	ldr	r1, [r3, #8]
    9cfc:	691b      	ldr	r3, [r3, #16]
    9cfe:	ebb1 0c00 	subs.w	ip, r1, r0
    9d02:	18c9      	adds	r1, r1, r3
    9d04:	1a09      	subs	r1, r1, r0
    9d06:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9d0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9d0e:	4566      	cmp	r6, ip
    9d10:	bf9c      	itt	ls
    9d12:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9d16:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9d1a:	d8e6      	bhi.n	9cea <MPSL_IRQ_RADIO_Handler+0xdea>
    9d1c:	2a20      	cmp	r2, #32
    9d1e:	d005      	beq.n	9d2c <MPSL_IRQ_RADIO_Handler+0xe2c>
    9d20:	463b      	mov	r3, r7
    9d22:	2120      	movs	r1, #32
    9d24:	2004      	movs	r0, #4
    9d26:	f7ff f909 	bl	8f3c <MPSL_IRQ_RADIO_Handler+0x3c>
    9d2a:	4604      	mov	r4, r0
    9d2c:	42ac      	cmp	r4, r5
    9d2e:	d113      	bne.n	9d58 <MPSL_IRQ_RADIO_Handler+0xe58>
    9d30:	482c      	ldr	r0, [pc, #176]	; (9de4 <MPSL_IRQ_RADIO_Handler+0xee4>)
    9d32:	2800      	cmp	r0, #0
    9d34:	bf18      	it	ne
    9d36:	f3af 8000 	nopne.w
    9d3a:	f001 fee9 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9d3e:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9d42:	2a20      	cmp	r2, #32
    9d44:	d00b      	beq.n	9d5e <MPSL_IRQ_RADIO_Handler+0xe5e>
    9d46:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    9d4a:	1c84      	adds	r4, r0, #2
    9d4c:	f141 0c00 	adc.w	ip, r1, #0
    9d50:	1b1b      	subs	r3, r3, r4
    9d52:	eb72 020c 	sbcs.w	r2, r2, ip
    9d56:	d202      	bcs.n	9d5e <MPSL_IRQ_RADIO_Handler+0xe5e>
    9d58:	2000      	movs	r0, #0
    9d5a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d5e:	2d20      	cmp	r5, #32
    9d60:	d013      	beq.n	9d8a <MPSL_IRQ_RADIO_Handler+0xe8a>
    9d62:	462b      	mov	r3, r5
    9d64:	4642      	mov	r2, r8
    9d66:	f7ff fbaf 	bl	94c8 <MPSL_IRQ_RADIO_Handler+0x5c8>
    9d6a:	2800      	cmp	r0, #0
    9d6c:	bf1e      	ittt	ne
    9d6e:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    9d72:	2002      	movne	r0, #2
    9d74:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d78:	463b      	mov	r3, r7
    9d7a:	462a      	mov	r2, r5
    9d7c:	2120      	movs	r1, #32
    9d7e:	2004      	movs	r0, #4
    9d80:	f7ff f8dc 	bl	8f3c <MPSL_IRQ_RADIO_Handler+0x3c>
    9d84:	2000      	movs	r0, #0
    9d86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d8a:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    9d8e:	43c0      	mvns	r0, r0
    9d90:	ea70 0001 	orns	r0, r0, r1
    9d94:	d005      	beq.n	9da2 <MPSL_IRQ_RADIO_Handler+0xea2>
    9d96:	f002 fab7 	bl	c308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d9a:	f04f 30ff 	mov.w	r0, #4294967295
    9d9e:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9da2:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    9da6:	b128      	cbz	r0, 9db4 <MPSL_IRQ_RADIO_Handler+0xeb4>
    9da8:	2005      	movs	r0, #5
    9daa:	f001 ff8d 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9dae:	2000      	movs	r0, #0
    9db0:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9db4:	2004      	movs	r0, #4
    9db6:	f001 ff87 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9dba:	f001 ffed 	bl	bd98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9dbe:	490a      	ldr	r1, [pc, #40]	; (9de8 <MPSL_IRQ_RADIO_Handler+0xee8>)
    9dc0:	2020      	movs	r0, #32
    9dc2:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9dc6:	6889      	ldr	r1, [r1, #8]
    9dc8:	2000      	movs	r0, #0
    9dca:	6008      	str	r0, [r1, #0]
    9dcc:	4907      	ldr	r1, [pc, #28]	; (9dec <MPSL_IRQ_RADIO_Handler+0xeec>)
    9dce:	6008      	str	r0, [r1, #0]
    9dd0:	2001      	movs	r0, #1
    9dd2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9dd6:	0000      	.short	0x0000
    9dd8:	20000fd0 	.word	0x20000fd0
    9ddc:	20000b50 	.word	0x20000b50
    9de0:	20000f50 	.word	0x20000f50
    9de4:	00000000 	.word	0x00000000
    9de8:	20000308 	.word	0x20000308
    9dec:	40000508 	.word	0x40000508

00009df0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9df0:	4906      	ldr	r1, [pc, #24]	; (9e0c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9df2:	b510      	push	{r4, lr}
    9df4:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9df8:	2a20      	cmp	r2, #32
    9dfa:	bf1c      	itt	ne
    9dfc:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9e00:	bd10      	popne	{r4, pc}
    9e02:	f240 3177 	movw	r1, #887	; 0x377
    9e06:	2070      	movs	r0, #112	; 0x70
    9e08:	f002 fc36 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e0c:	20000fd0 	.word	0x20000fd0

00009e10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e14:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9fdc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9e18:	4606      	mov	r6, r0
    9e1a:	b08f      	sub	sp, #60	; 0x3c
    9e1c:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9e20:	468a      	mov	sl, r1
    9e22:	2820      	cmp	r0, #32
    9e24:	d061      	beq.n	9eea <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    9e26:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    9e2a:	f10b 0408 	add.w	r4, fp, #8
    9e2e:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9e32:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9e36:	2120      	movs	r1, #32
    9e38:	f88d 1018 	strb.w	r1, [sp, #24]
    9e3c:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    9e40:	f8db 2008 	ldr.w	r2, [fp, #8]
    9e44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9e48:	4459      	add	r1, fp
    9e4a:	2700      	movs	r7, #0
    9e4c:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    9e50:	f8db 1010 	ldr.w	r1, [fp, #16]
    9e54:	1851      	adds	r1, r2, r1
    9e56:	910a      	str	r1, [sp, #40]	; 0x28
    9e58:	f8db 0000 	ldr.w	r0, [fp]
    9e5c:	aa09      	add	r2, sp, #36	; 0x24
    9e5e:	4430      	add	r0, r6
    9e60:	a907      	add	r1, sp, #28
    9e62:	f001 fb75 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e66:	f8d9 0010 	ldr.w	r0, [r9, #16]
    9e6a:	9907      	ldr	r1, [sp, #28]
    9e6c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    9e70:	1840      	adds	r0, r0, r1
    9e72:	1810      	adds	r0, r2, r0
    9e74:	2e67      	cmp	r6, #103	; 0x67
    9e76:	d33d      	bcc.n	9ef4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9e78:	4959      	ldr	r1, [pc, #356]	; (9fe0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    9e7a:	2200      	movs	r2, #0
    9e7c:	1b89      	subs	r1, r1, r6
    9e7e:	eb72 0107 	sbcs.w	r1, r2, r7
    9e82:	d337      	bcc.n	9ef4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9e84:	6821      	ldr	r1, [r4, #0]
    9e86:	4694      	mov	ip, r2
    9e88:	1a40      	subs	r0, r0, r1
    9e8a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9e8e:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9e92:	eb7c 010c 	sbcs.w	r1, ip, ip
    9e96:	d32d      	bcc.n	9ef4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9e98:	60a0      	str	r0, [r4, #8]
    9e9a:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9e9e:	f884 a010 	strb.w	sl, [r4, #16]
    9ea2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    9ea6:	f10d 0b18 	add.w	fp, sp, #24
    9eaa:	2d20      	cmp	r5, #32
    9eac:	d055      	beq.n	9f5a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9eae:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9eb2:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9eb6:	9001      	str	r0, [sp, #4]
    9eb8:	484a      	ldr	r0, [pc, #296]	; (9fe4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    9eba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9ebe:	f8d4 a000 	ldr.w	sl, [r4]
    9ec2:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9ec6:	f108 0008 	add.w	r0, r8, #8
    9eca:	eb1a 0201 	adds.w	r2, sl, r1
    9ece:	eb43 0107 	adc.w	r1, r3, r7
    9ed2:	e9d0 9300 	ldrd	r9, r3, [r0]
    9ed6:	ebb9 0202 	subs.w	r2, r9, r2
    9eda:	eb73 0101 	sbcs.w	r1, r3, r1
    9ede:	d325      	bcc.n	9f2c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9ee0:	89c0      	ldrh	r0, [r0, #14]
    9ee2:	b398      	cbz	r0, 9f4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9ee4:	89e0      	ldrh	r0, [r4, #14]
    9ee6:	b148      	cbz	r0, 9efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9ee8:	e037      	b.n	9f5a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9eea:	f640 3135 	movw	r1, #2869	; 0xb35
    9eee:	2070      	movs	r0, #112	; 0x70
    9ef0:	f002 fbc2 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ef4:	b00f      	add	sp, #60	; 0x3c
    9ef6:	2001      	movs	r0, #1
    9ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9efc:	f002 f9fe 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9f00:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9f04:	bf08      	it	eq
    9f06:	200d      	moveq	r0, #13
    9f08:	d00b      	beq.n	9f22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9f0a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9f0e:	3856      	subs	r0, #86	; 0x56
    9f10:	bf08      	it	eq
    9f12:	201c      	moveq	r0, #28
    9f14:	d005      	beq.n	9f22 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9f16:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9f1a:	389f      	subs	r0, #159	; 0x9f
    9f1c:	bf14      	ite	ne
    9f1e:	4638      	movne	r0, r7
    9f20:	2032      	moveq	r0, #50	; 0x32
    9f22:	1c41      	adds	r1, r0, #1
    9f24:	ebb9 000a 	subs.w	r0, r9, sl
    9f28:	4288      	cmp	r0, r1
    9f2a:	da16      	bge.n	9f5a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9f2c:	f88b 5000 	strb.w	r5, [fp]
    9f30:	f898 0018 	ldrb.w	r0, [r8, #24]
    9f34:	7c21      	ldrb	r1, [r4, #16]
    9f36:	4281      	cmp	r1, r0
    9f38:	d309      	bcc.n	9f4e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    9f3a:	6821      	ldr	r1, [r4, #0]
    9f3c:	980a      	ldr	r0, [sp, #40]	; 0x28
    9f3e:	1a40      	subs	r0, r0, r1
    9f40:	60a0      	str	r0, [r4, #8]
    9f42:	b00f      	add	sp, #60	; 0x3c
    9f44:	f04f 0002 	mov.w	r0, #2
    9f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f4c:	e005      	b.n	9f5a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9f4e:	9801      	ldr	r0, [sp, #4]
    9f50:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9f54:	7845      	ldrb	r5, [r0, #1]
    9f56:	2d20      	cmp	r5, #32
    9f58:	d1ae      	bne.n	9eb8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    9f5a:	2005      	movs	r0, #5
    9f5c:	f001 feb4 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9f60:	4d1e      	ldr	r5, [pc, #120]	; (9fdc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    9f62:	f04f 30ff 	mov.w	r0, #4294967295
    9f66:	6068      	str	r0, [r5, #4]
    9f68:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    9f6c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    9f70:	2120      	movs	r1, #32
    9f72:	2a20      	cmp	r2, #32
    9f74:	d003      	beq.n	9f7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    9f76:	2005      	movs	r0, #5
    9f78:	f7fe ffe0 	bl	8f3c <MPSL_IRQ_RADIO_Handler+0x3c>
    9f7c:	e004      	b.n	9f88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    9f7e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9f82:	4428      	add	r0, r5
    9f84:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    9f88:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9f8c:	4916      	ldr	r1, [pc, #88]	; (9fe8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    9f8e:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9f92:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    9f96:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f9a:	7048      	strb	r0, [r1, #1]
    9f9c:	6828      	ldr	r0, [r5, #0]
    9f9e:	4430      	add	r0, r6
    9fa0:	6028      	str	r0, [r5, #0]
    9fa2:	20ff      	movs	r0, #255	; 0xff
    9fa4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9fa8:	7e68      	ldrb	r0, [r5, #25]
    9faa:	2801      	cmp	r0, #1
    9fac:	d10a      	bne.n	9fc4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9fae:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9fb2:	6823      	ldr	r3, [r4, #0]
    9fb4:	1818      	adds	r0, r3, r0
    9fb6:	f142 0100 	adc.w	r1, r2, #0
    9fba:	1e40      	subs	r0, r0, #1
    9fbc:	f141 31ff 	adc.w	r1, r1, #4294967295
    9fc0:	f001 fca4 	bl	b90c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9fc4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9fc8:	2820      	cmp	r0, #32
    9fca:	d003      	beq.n	9fd4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9fcc:	4807      	ldr	r0, [pc, #28]	; (9fec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9fce:	7840      	ldrb	r0, [r0, #1]
    9fd0:	f002 fc24 	bl	c81c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9fd4:	b00f      	add	sp, #60	; 0x3c
    9fd6:	2000      	movs	r0, #0
    9fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fdc:	20000fd0 	.word	0x20000fd0
    9fe0:	0f424000 	.word	0x0f424000
    9fe4:	20000b50 	.word	0x20000b50
    9fe8:	20000f50 	.word	0x20000f50
    9fec:	20000308 	.word	0x20000308

00009ff0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9ff0:	b570      	push	{r4, r5, r6, lr}
    9ff2:	4a23      	ldr	r2, [pc, #140]	; (a080 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9ff4:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9ff8:	2920      	cmp	r1, #32
    9ffa:	d039      	beq.n	a070 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    9ffc:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    a000:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    a004:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    a008:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    a00c:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    a010:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a014:	4411      	add	r1, r2
    a016:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    a01a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a01e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a022:	2920      	cmp	r1, #32
    a024:	d029      	beq.n	a07a <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    a026:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    a02a:	7e2d      	ldrb	r5, [r5, #24]
    a02c:	42a8      	cmp	r0, r5
    a02e:	bf3c      	itt	cc
    a030:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    a034:	7849      	ldrbcc	r1, [r1, #1]
    a036:	d3f4      	bcc.n	a022 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    a038:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    a03c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a040:	f8dc 5008 	ldr.w	r5, [ip, #8]
    a044:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    a048:	6814      	ldr	r4, [r2, #0]
    a04a:	1828      	adds	r0, r5, r0
    a04c:	f146 0200 	adc.w	r2, r6, #0
    a050:	ebb1 0c00 	subs.w	ip, r1, r0
    a054:	eb73 0202 	sbcs.w	r2, r3, r2
    a058:	d308      	bcc.n	a06c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    a05a:	1a08      	subs	r0, r1, r0
    a05c:	f006 fc8f 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a060:	f104 0167 	add.w	r1, r4, #103	; 0x67
    a064:	4281      	cmp	r1, r0
    a066:	bf9c      	itt	ls
    a068:	1b00      	subls	r0, r0, r4
    a06a:	bd70      	popls	{r4, r5, r6, pc}
    a06c:	2000      	movs	r0, #0
    a06e:	bd70      	pop	{r4, r5, r6, pc}
    a070:	f640 3108 	movw	r1, #2824	; 0xb08
    a074:	2070      	movs	r0, #112	; 0x70
    a076:	f002 faff 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a07a:	f04f 30ff 	mov.w	r0, #4294967295
    a07e:	bd70      	pop	{r4, r5, r6, pc}
    a080:	20000fd0 	.word	0x20000fd0

0000a084 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a084:	4806      	ldr	r0, [pc, #24]	; (a0a0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a086:	b510      	push	{r4, lr}
    a088:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    a08c:	2920      	cmp	r1, #32
    a08e:	bf1c      	itt	ne
    a090:	7e00      	ldrbne	r0, [r0, #24]
    a092:	bd10      	popne	{r4, pc}
    a094:	f640 312f 	movw	r1, #2863	; 0xb2f
    a098:	2070      	movs	r0, #112	; 0x70
    a09a:	f002 faed 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a09e:	0000      	.short	0x0000
    a0a0:	20000fd0 	.word	0x20000fd0

0000a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0a6:	4d6f      	ldr	r5, [pc, #444]	; (a264 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a0a8:	2600      	movs	r6, #0
    a0aa:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    a0ae:	2701      	movs	r7, #1
    a0b0:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    a0b4:	4b6c      	ldr	r3, [pc, #432]	; (a268 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a0b6:	2808      	cmp	r0, #8
    a0b8:	d273      	bcs.n	a1a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    a0ba:	e8df f000 	tbb	[pc, r0]
    a0be:	7804      	.short	0x7804
    a0c0:	47ceb3a0 	.word	0x47ceb3a0
    a0c4:	bdb8      	.short	0xbdb8
    a0c6:	43c8      	mvns	r0, r1
    a0c8:	ea70 0002 	orns	r0, r0, r2
    a0cc:	d105      	bne.n	a0da <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    a0ce:	f002 f937 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0d2:	f001 fd1d 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a0d6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a0da:	8ae0      	ldrh	r0, [r4, #22]
    a0dc:	b110      	cbz	r0, a0e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    a0de:	f002 fa53 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a0e2:	b180      	cbz	r0, a106 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    a0e4:	f7ff fcea 	bl	9abc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a0e8:	20ff      	movs	r0, #255	; 0xff
    a0ea:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    a0ee:	6861      	ldr	r1, [r4, #4]
    a0f0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0f4:	d003      	beq.n	a0fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a0f6:	2005      	movs	r0, #5
    a0f8:	f001 fd2c 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a0fc:	b140      	cbz	r0, a110 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    a0fe:	7e60      	ldrb	r0, [r4, #25]
    a100:	2801      	cmp	r0, #1
    a102:	d114      	bne.n	a12e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    a104:	e009      	b.n	a11a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    a106:	f640 012c 	movw	r1, #2092	; 0x82c
    a10a:	2070      	movs	r0, #112	; 0x70
    a10c:	f002 fab4 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a110:	f640 0131 	movw	r1, #2097	; 0x831
    a114:	2070      	movs	r0, #112	; 0x70
    a116:	f002 faaf 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a11a:	68a2      	ldr	r2, [r4, #8]
    a11c:	6920      	ldr	r0, [r4, #16]
    a11e:	68e1      	ldr	r1, [r4, #12]
    a120:	1810      	adds	r0, r2, r0
    a122:	4171      	adcs	r1, r6
    a124:	1e40      	subs	r0, r0, #1
    a126:	f141 31ff 	adc.w	r1, r1, #4294967295
    a12a:	f001 fbef 	bl	b90c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a12e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a132:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a136:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a13a:	6840      	ldr	r0, [r0, #4]
    a13c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a140:	680a      	ldr	r2, [r1, #0]
    a142:	b001      	add	sp, #4
    a144:	2101      	movs	r1, #1
    a146:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a14a:	4710      	bx	r2
    a14c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    a150:	b160      	cbz	r0, a16c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    a152:	43c8      	mvns	r0, r1
    a154:	ea70 0002 	orns	r0, r0, r2
    a158:	d105      	bne.n	a166 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    a15a:	f002 f8f1 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a15e:	f001 fcd7 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a162:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a166:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a16c:	f7ff fca6 	bl	9abc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a170:	f04f 30ff 	mov.w	r0, #4294967295
    a174:	6060      	str	r0, [r4, #4]
    a176:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    a17a:	f88d 0000 	strb.w	r0, [sp]
    a17e:	f89d 0000 	ldrb.w	r0, [sp]
    a182:	b178      	cbz	r0, a1a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    a184:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a188:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a18c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a190:	6840      	ldr	r0, [r0, #4]
    a192:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a196:	680a      	ldr	r2, [r1, #0]
    a198:	b001      	add	sp, #4
    a19a:	2106      	movs	r1, #6
    a19c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1a0:	4710      	bx	r2
    a1a2:	e05a      	b.n	a25a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    a1a4:	f640 0148 	movw	r1, #2120	; 0x848
    a1a8:	2070      	movs	r0, #112	; 0x70
    a1aa:	f002 fa65 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1ae:	f7ff fc85 	bl	9abc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a1b2:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    a1b6:	f002 f9e7 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1ba:	b130      	cbz	r0, a1ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a1bc:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    a1c0:	43c9      	mvns	r1, r1
    a1c2:	ea71 0000 	orns	r0, r1, r0
    a1c6:	d005      	beq.n	a1d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a1c8:	e00a      	b.n	a1e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    a1ca:	f640 0156 	movw	r1, #2134	; 0x856
    a1ce:	2070      	movs	r0, #112	; 0x70
    a1d0:	f002 fa52 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1d4:	f002 f8b4 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1d8:	f001 fc9a 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a1dc:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a1e0:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a1e4:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a1e8:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a1f2:	680a      	ldr	r2, [r1, #0]
    a1f4:	b001      	add	sp, #4
    a1f6:	2100      	movs	r1, #0
    a1f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fc:	4710      	bx	r2
    a1fe:	f001 fe87 	bl	bf10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a202:	8ae0      	ldrh	r0, [r4, #22]
    a204:	b110      	cbz	r0, a20c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    a206:	f002 f9bf 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a20a:	b130      	cbz	r0, a21a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    a20c:	f001 fe94 	bl	bf38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a210:	2800      	cmp	r0, #0
    a212:	bf18      	it	ne
    a214:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a21a:	f44f 6106 	mov.w	r1, #2144	; 0x860
    a21e:	2070      	movs	r0, #112	; 0x70
    a220:	f002 fa2a 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a224:	4811      	ldr	r0, [pc, #68]	; (a26c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a226:	6007      	str	r7, [r0, #0]
    a228:	6898      	ldr	r0, [r3, #8]
    a22a:	6007      	str	r7, [r0, #0]
    a22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a22e:	7818      	ldrb	r0, [r3, #0]
    a230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a234:	f002 baf2 	b.w	c81c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a238:	f7ff fc40 	bl	9abc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a23c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a240:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a244:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a248:	6840      	ldr	r0, [r0, #4]
    a24a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a24e:	680a      	ldr	r2, [r1, #0]
    a250:	b001      	add	sp, #4
    a252:	2105      	movs	r1, #5
    a254:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a258:	4710      	bx	r2
    a25a:	f640 0173 	movw	r1, #2163	; 0x873
    a25e:	2070      	movs	r0, #112	; 0x70
    a260:	f002 fa0a 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a264:	20000b50 	.word	0x20000b50
    a268:	20000308 	.word	0x20000308
    a26c:	40000508 	.word	0x40000508

0000a270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a270:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a274:	48ff      	ldr	r0, [pc, #1020]	; (a674 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a276:	b097      	sub	sp, #92	; 0x5c
    a278:	460c      	mov	r4, r1
    a27a:	6800      	ldr	r0, [r0, #0]
    a27c:	4ffe      	ldr	r7, [pc, #1016]	; (a678 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    a27e:	05c0      	lsls	r0, r0, #23
    a280:	0dc0      	lsrs	r0, r0, #23
    a282:	d00e      	beq.n	a2a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a284:	3810      	subs	r0, #16
    a286:	b240      	sxtb	r0, r0
    a288:	2800      	cmp	r0, #0
    a28a:	bfb8      	it	lt
    a28c:	f000 000f 	andlt.w	r0, r0, #15
    a290:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a294:	bfac      	ite	ge
    a296:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a29a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a29e:	0940      	lsrs	r0, r0, #5
    a2a0:	d00c      	beq.n	a2bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    a2a2:	7820      	ldrb	r0, [r4, #0]
    a2a4:	f04f 0a00 	mov.w	sl, #0
    a2a8:	2800      	cmp	r0, #0
    a2aa:	bf18      	it	ne
    a2ac:	2801      	cmpne	r0, #1
    a2ae:	d017      	beq.n	a2e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a2b0:	f240 61f9 	movw	r1, #1785	; 0x6f9
    a2b4:	f04f 0070 	mov.w	r0, #112	; 0x70
    a2b8:	f002 f9de 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2bc:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a2c0:	f04f 0a01 	mov.w	sl, #1
    a2c4:	2820      	cmp	r0, #32
    a2c6:	d006      	beq.n	a2d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    a2c8:	7820      	ldrb	r0, [r4, #0]
    a2ca:	b148      	cbz	r0, a2e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a2cc:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a2d0:	2070      	movs	r0, #112	; 0x70
    a2d2:	f002 f9d1 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2d6:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a2da:	2070      	movs	r0, #112	; 0x70
    a2dc:	f002 f9cc 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2e0:	4de6      	ldr	r5, [pc, #920]	; (a67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a2e2:	b125      	cbz	r5, a2ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x7e>
    a2e4:	2100      	movs	r1, #0
    a2e6:	f240 60fc 	movw	r0, #1788	; 0x6fc
    a2ea:	f3af 8000 	nop.w
    a2ee:	2000      	movs	r0, #0
    a2f0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a2f4:	a905      	add	r1, sp, #20
    a2f6:	9112      	str	r1, [sp, #72]	; 0x48
    a2f8:	49e1      	ldr	r1, [pc, #900]	; (a680 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    a2fa:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a2fc:	f04f 0801 	mov.w	r8, #1
    a300:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a304:	9001      	str	r0, [sp, #4]
    a306:	f8df b374 	ldr.w	fp, [pc, #884]	; a67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>
    a30a:	f1bb 0f00 	cmp.w	fp, #0
    a30e:	d004      	beq.n	a31a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xaa>
    a310:	2100      	movs	r1, #0
    a312:	f240 7007 	movw	r0, #1799	; 0x707
    a316:	f3af 8000 	nop.w
    a31a:	f1b8 0f00 	cmp.w	r8, #0
    a31e:	d008      	beq.n	a332 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc2>
    a320:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    a324:	2500      	movs	r5, #0
    a326:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    a32a:	f1ba 0f00 	cmp.w	sl, #0
    a32e:	d007      	beq.n	a340 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd0>
    a330:	e03e      	b.n	a3b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x140>
    a332:	48d4      	ldr	r0, [pc, #848]	; (a684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    a334:	2800      	cmp	r0, #0
    a336:	bf18      	it	ne
    a338:	f3af 8000 	nopne.w
    a33c:	b662      	cpsie	i
    a33e:	e7ef      	b.n	a320 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb0>
    a340:	46b1      	mov	r9, r6
    a342:	2001      	movs	r0, #1
    a344:	ea20 0609 	bic.w	r6, r0, r9
    a348:	48cf      	ldr	r0, [pc, #828]	; (a688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    a34a:	2240      	movs	r2, #64	; 0x40
    a34c:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    a350:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a354:	f006 fca3 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a358:	f1bb 0f00 	cmp.w	fp, #0
    a35c:	d004      	beq.n	a368 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf8>
    a35e:	2100      	movs	r1, #0
    a360:	f240 503c 	movw	r0, #1340	; 0x53c
    a364:	f3af 8000 	nop.w
    a368:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    a36c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a370:	4439      	add	r1, r7
    a372:	4438      	add	r0, r7
    a374:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a376:	8502      	strh	r2, [r0, #40]	; 0x28
    a378:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a37c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a380:	f1bb 0f00 	cmp.w	fp, #0
    a384:	d004      	beq.n	a390 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x120>
    a386:	2100      	movs	r1, #0
    a388:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a38c:	f3af 8000 	nop.w
    a390:	f1bb 0f00 	cmp.w	fp, #0
    a394:	d004      	beq.n	a3a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x130>
    a396:	2100      	movs	r1, #0
    a398:	f240 7011 	movw	r0, #1809	; 0x711
    a39c:	f3af 8000 	nop.w
    a3a0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a3a4:	f88d 0020 	strb.w	r0, [sp, #32]
    a3a8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a3ac:	2800      	cmp	r0, #0
    a3ae:	d1aa      	bne.n	a306 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a3b0:	f1bb 0f00 	cmp.w	fp, #0
    a3b4:	d004      	beq.n	a3c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x150>
    a3b6:	2100      	movs	r1, #0
    a3b8:	f240 701b 	movw	r0, #1819	; 0x71b
    a3bc:	f3af 8000 	nop.w
    a3c0:	f001 fba6 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a3c4:	4681      	mov	r9, r0
    a3c6:	a802      	add	r0, sp, #8
    a3c8:	900a      	str	r0, [sp, #40]	; 0x28
    a3ca:	4688      	mov	r8, r1
    a3cc:	8921      	ldrh	r1, [r4, #8]
    a3ce:	4628      	mov	r0, r5
    a3d0:	f361 401f 	bfi	r0, r1, #16, #16
    a3d4:	4601      	mov	r1, r0
    a3d6:	7aa2      	ldrb	r2, [r4, #10]
    a3d8:	4628      	mov	r0, r5
    a3da:	f362 0007 	bfi	r0, r2, #0, #8
    a3de:	7ae2      	ldrb	r2, [r4, #11]
    a3e0:	f362 200f 	bfi	r0, r2, #8, #8
    a3e4:	7822      	ldrb	r2, [r4, #0]
    a3e6:	9502      	str	r5, [sp, #8]
    a3e8:	f362 4017 	bfi	r0, r2, #16, #8
    a3ec:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a3f0:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a3f4:	9503      	str	r5, [sp, #12]
    a3f6:	7820      	ldrb	r0, [r4, #0]
    a3f8:	b380      	cbz	r0, a45c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a3fa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    a3fe:	48a3      	ldr	r0, [pc, #652]	; (a68c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    a400:	1a40      	subs	r0, r0, r1
    a402:	990a      	ldr	r1, [sp, #40]	; 0x28
    a404:	f101 020c 	add.w	r2, r1, #12
    a408:	a914      	add	r1, sp, #80	; 0x50
    a40a:	f001 f8a1 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a40e:	2200      	movs	r2, #0
    a410:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a414:	4648      	mov	r0, r9
    a416:	4641      	mov	r1, r8
    a418:	f7fe ff68 	bl	92ec <MPSL_IRQ_RADIO_Handler+0x3ec>
    a41c:	468c      	mov	ip, r1
    a41e:	7ae1      	ldrb	r1, [r4, #11]
    a420:	2900      	cmp	r1, #0
    a422:	bf0c      	ite	eq
    a424:	217a      	moveq	r1, #122	; 0x7a
    a426:	214a      	movne	r1, #74	; 0x4a
    a428:	6862      	ldr	r2, [r4, #4]
    a42a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a42e:	4411      	add	r1, r2
    a430:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a434:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    a438:	441a      	add	r2, r3
    a43a:	4411      	add	r1, r2
    a43c:	1c88      	adds	r0, r1, #2
    a43e:	f001 f86b 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a442:	9600      	str	r6, [sp, #0]
    a444:	9004      	str	r0, [sp, #16]
    a446:	464a      	mov	r2, r9
    a448:	4643      	mov	r3, r8
    a44a:	6920      	ldr	r0, [r4, #16]
    a44c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a44e:	f7fe fdb1 	bl	8fb4 <MPSL_IRQ_RADIO_Handler+0xb4>
    a452:	2800      	cmp	r0, #0
    a454:	bf08      	it	eq
    a456:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    a45a:	e046      	b.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27a>
    a45c:	e7ff      	b.n	a45e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ee>
    a45e:	4648      	mov	r0, r9
    a460:	4641      	mov	r1, r8
    a462:	f000 fff7 	bl	b454 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a466:	4b8a      	ldr	r3, [pc, #552]	; (a690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    a468:	4602      	mov	r2, r0
    a46a:	eb10 0c03 	adds.w	ip, r0, r3
    a46e:	468e      	mov	lr, r1
    a470:	f141 0300 	adc.w	r3, r1, #0
    a474:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a478:	ebb0 0c0c 	subs.w	ip, r0, ip
    a47c:	eb71 0303 	sbcs.w	r3, r1, r3
    a480:	d22a      	bcs.n	a4d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a482:	3229      	adds	r2, #41	; 0x29
    a484:	f14e 0300 	adc.w	r3, lr, #0
    a488:	1a82      	subs	r2, r0, r2
    a48a:	eb71 0203 	sbcs.w	r2, r1, r3
    a48e:	d323      	bcc.n	a4d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a490:	8922      	ldrh	r2, [r4, #8]
    a492:	ab14      	add	r3, sp, #80	; 0x50
    a494:	1a80      	subs	r0, r0, r2
    a496:	eb61 0105 	sbc.w	r1, r1, r5
    a49a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a49c:	1e40      	subs	r0, r0, #1
    a49e:	9200      	str	r2, [sp, #0]
    a4a0:	f141 31ff 	adc.w	r1, r1, #4294967295
    a4a4:	aa0b      	add	r2, sp, #44	; 0x2c
    a4a6:	f000 fff9 	bl	b49c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a4aa:	7ae0      	ldrb	r0, [r4, #11]
    a4ac:	2800      	cmp	r0, #0
    a4ae:	bf0c      	ite	eq
    a4b0:	207a      	moveq	r0, #122	; 0x7a
    a4b2:	204a      	movne	r0, #74	; 0x4a
    a4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a4b6:	8922      	ldrh	r2, [r4, #8]
    a4b8:	4408      	add	r0, r1
    a4ba:	6861      	ldr	r1, [r4, #4]
    a4bc:	4411      	add	r1, r2
    a4be:	4408      	add	r0, r1
    a4c0:	1c80      	adds	r0, r0, #2
    a4c2:	f001 f829 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a4c6:	4601      	mov	r1, r0
    a4c8:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
    a4cc:	e9cd 0202 	strd	r0, r2, [sp, #8]
    a4d0:	1a08      	subs	r0, r1, r0
    a4d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a4d6:	e007      	b.n	a4e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a4d8:	f1b9 0101 	subs.w	r1, r9, #1
    a4dc:	f148 30ff 	adc.w	r0, r8, #4294967295
    a4e0:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a4e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a4e8:	9004      	str	r0, [sp, #16]
    a4ea:	f1bb 0f00 	cmp.w	fp, #0
    a4ee:	d004      	beq.n	a4fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28a>
    a4f0:	2100      	movs	r1, #0
    a4f2:	f240 7022 	movw	r0, #1826	; 0x722
    a4f6:	f3af 8000 	nop.w
    a4fa:	4963      	ldr	r1, [pc, #396]	; (a688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    a4fc:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    a500:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    a504:	9108      	str	r1, [sp, #32]
    a506:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    a50a:	a802      	add	r0, sp, #8
    a50c:	2901      	cmp	r1, #1
    a50e:	bf18      	it	ne
    a510:	2902      	cmpne	r1, #2
    a512:	d141      	bne.n	a598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a514:	9511      	str	r5, [sp, #68]	; 0x44
    a516:	9a02      	ldr	r2, [sp, #8]
    a518:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    a51c:	1a53      	subs	r3, r2, r1
    a51e:	f8dd c010 	ldr.w	ip, [sp, #16]
    a522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a526:	eb12 020c 	adds.w	r2, r2, ip
    a52a:	1a51      	subs	r1, r2, r1
    a52c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a530:	2b02      	cmp	r3, #2
    a532:	d372      	bcc.n	a61a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    a534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a538:	bf98      	it	ls
    a53a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a53e:	d86c      	bhi.n	a61a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    a540:	2501      	movs	r5, #1
    a542:	ab14      	add	r3, sp, #80	; 0x50
    a544:	aa0e      	add	r2, sp, #56	; 0x38
    a546:	4631      	mov	r1, r6
    a548:	f7fe ff20 	bl	938c <MPSL_IRQ_RADIO_Handler+0x48c>
    a54c:	2800      	cmp	r0, #0
    a54e:	d06b      	beq.n	a628 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    a550:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a554:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a558:	4633      	mov	r3, r6
    a55a:	428a      	cmp	r2, r1
    a55c:	d068      	beq.n	a630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    a55e:	2005      	movs	r0, #5
    a560:	f7fe fcec 	bl	8f3c <MPSL_IRQ_RADIO_Handler+0x3c>
    a564:	9908      	ldr	r1, [sp, #32]
    a566:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    a56a:	7048      	strb	r0, [r1, #1]
    a56c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a570:	2820      	cmp	r0, #32
    a572:	bf01      	itttt	eq
    a574:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a578:	4438      	addeq	r0, r7
    a57a:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a57e:	9511      	streq	r5, [sp, #68]	; 0x44
    a580:	bf1e      	ittt	ne
    a582:	9908      	ldrne	r1, [sp, #32]
    a584:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a588:	f880 8001 	strbne.w	r8, [r0, #1]
    a58c:	4632      	mov	r2, r6
    a58e:	4641      	mov	r1, r8
    a590:	f05f 0003 	movs.w	r0, #3
    a594:	f7ff fb3e 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    a598:	f1bb 0f00 	cmp.w	fp, #0
    a59c:	d004      	beq.n	a5a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    a59e:	2100      	movs	r1, #0
    a5a0:	f240 7027 	movw	r0, #1831	; 0x727
    a5a4:	f3af 8000 	nop.w
    a5a8:	483a      	ldr	r0, [pc, #232]	; (a694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    a5aa:	2800      	cmp	r0, #0
    a5ac:	bf18      	it	ne
    a5ae:	f3af 8000 	nopne.w
    a5b2:	f3ef 8810 	mrs	r8, PRIMASK
    a5b6:	b672      	cpsid	i
    a5b8:	f1bb 0f00 	cmp.w	fp, #0
    a5bc:	d004      	beq.n	a5c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>
    a5be:	2100      	movs	r1, #0
    a5c0:	f240 702d 	movw	r0, #1837	; 0x72d
    a5c4:	f3af 8000 	nop.w
    a5c8:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a5cc:	f88d 0020 	strb.w	r0, [sp, #32]
    a5d0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a5d4:	2800      	cmp	r0, #0
    a5d6:	f47f ae96 	bne.w	a306 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a5da:	4828      	ldr	r0, [pc, #160]	; (a67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a5dc:	b120      	cbz	r0, a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a5de:	2100      	movs	r1, #0
    a5e0:	f240 7035 	movw	r0, #1845	; 0x735
    a5e4:	f3af 8000 	nop.w
    a5e8:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    a5ec:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    a5f0:	e9dd bc05 	ldrd	fp, ip, [sp, #20]
    a5f4:	f100 0008 	add.w	r0, r0, #8
    a5f8:	f8dd e01c 	ldr.w	lr, [sp, #28]
    a5fc:	e880 580e 	stmia.w	r0, {r1, r2, r3, fp, ip, lr}
    a600:	b3b5      	cbz	r5, a670 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    a602:	4d1e      	ldr	r5, [pc, #120]	; (a67c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a604:	b125      	cbz	r5, a610 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    a606:	2100      	movs	r1, #0
    a608:	f240 7042 	movw	r0, #1858	; 0x742
    a60c:	f3af 8000 	nop.w
    a610:	f1ba 0f00 	cmp.w	sl, #0
    a614:	d146      	bne.n	a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a616:	e018      	b.n	a64a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3da>
    a618:	e7ff      	b.n	a61a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    a61a:	4632      	mov	r2, r6
    a61c:	4641      	mov	r1, r8
    a61e:	2004      	movs	r0, #4
    a620:	f7ff faf8 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    a624:	2501      	movs	r5, #1
    a626:	e7b7      	b.n	a598 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a628:	4632      	mov	r2, r6
    a62a:	4641      	mov	r1, r8
    a62c:	2004      	movs	r0, #4
    a62e:	e7b1      	b.n	a594 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x324>
    a630:	2920      	cmp	r1, #32
    a632:	bf1d      	ittte	ne
    a634:	9808      	ldrne	r0, [sp, #32]
    a636:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a63a:	7840      	ldrbne	r0, [r0, #1]
    a63c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a640:	bf04      	itt	eq
    a642:	4438      	addeq	r0, r7
    a644:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a648:	e78c      	b.n	a564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    a64a:	9811      	ldr	r0, [sp, #68]	; 0x44
    a64c:	f010 0fff 	tst.w	r0, #255	; 0xff
    a650:	d028      	beq.n	a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a652:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a656:	2820      	cmp	r0, #32
    a658:	d124      	bne.n	a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a65a:	b125      	cbz	r5, a666 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f6>
    a65c:	2100      	movs	r1, #0
    a65e:	f240 7047 	movw	r0, #1863	; 0x747
    a662:	f3af 8000 	nop.w
    a666:	4631      	mov	r1, r6
    a668:	2002      	movs	r0, #2
    a66a:	f7ff fb05 	bl	9c78 <MPSL_IRQ_RADIO_Handler+0xd78>
    a66e:	e013      	b.n	a698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a670:	e027      	b.n	a6c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
    a672:	0000      	.short	0x0000
    a674:	e000ed04 	.word	0xe000ed04
    a678:	20000fd0 	.word	0x20000fd0
    a67c:	00000000 	.word	0x00000000
    a680:	20000b50 	.word	0x20000b50
    a684:	00000000 	.word	0x00000000
    a688:	20000f50 	.word	0x20000f50
    a68c:	1e847fff 	.word	0x1e847fff
    a690:	0f424000 	.word	0x0f424000
    a694:	00000000 	.word	0x00000000
    a698:	9010      	str	r0, [sp, #64]	; 0x40
    a69a:	b918      	cbnz	r0, a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a69c:	7820      	ldrb	r0, [r4, #0]
    a69e:	b1f0      	cbz	r0, a6de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46e>
    a6a0:	2801      	cmp	r0, #1
    a6a2:	d02b      	beq.n	a6fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48c>
    a6a4:	483b      	ldr	r0, [pc, #236]	; (a794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    a6a6:	b120      	cbz	r0, a6b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x442>
    a6a8:	2100      	movs	r1, #0
    a6aa:	f240 7064 	movw	r0, #1892	; 0x764
    a6ae:	f3af 8000 	nop.w
    a6b2:	20ff      	movs	r0, #255	; 0xff
    a6b4:	f1ba 0f00 	cmp.w	sl, #0
    a6b8:	bf18      	it	ne
    a6ba:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a6be:	d026      	beq.n	a70e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49e>
    a6c0:	2501      	movs	r5, #1
    a6c2:	4c34      	ldr	r4, [pc, #208]	; (a794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    a6c4:	b124      	cbz	r4, a6d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    a6c6:	2100      	movs	r1, #0
    a6c8:	f240 7075 	movw	r0, #1909	; 0x775
    a6cc:	f3af 8000 	nop.w
    a6d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    a6d2:	4e31      	ldr	r6, [pc, #196]	; (a798 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x528>)
    a6d4:	2802      	cmp	r0, #2
    a6d6:	d023      	beq.n	a720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4b0>
    a6d8:	2801      	cmp	r0, #1
    a6da:	d029      	beq.n	a730 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a6dc:	e02d      	b.n	a73a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    a6de:	482d      	ldr	r0, [pc, #180]	; (a794 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    a6e0:	b120      	cbz	r0, a6ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47c>
    a6e2:	2100      	movs	r1, #0
    a6e4:	f240 704f 	movw	r0, #1871	; 0x74f
    a6e8:	f3af 8000 	nop.w
    a6ec:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a6f0:	2004      	movs	r0, #4
    a6f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a6f4:	f7ff fa8e 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    a6f8:	2501      	movs	r5, #1
    a6fa:	e7e2      	b.n	a6c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
    a6fc:	2d00      	cmp	r5, #0
    a6fe:	f43f ae02 	beq.w	a306 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a702:	2100      	movs	r1, #0
    a704:	f240 705a 	movw	r0, #1882	; 0x75a
    a708:	f3af 8000 	nop.w
    a70c:	e5fb      	b.n	a306 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a70e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a712:	2101      	movs	r1, #1
    a714:	4391      	bics	r1, r2
    a716:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a71a:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a71e:	e7cf      	b.n	a6c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x450>
    a720:	68b8      	ldr	r0, [r7, #8]
    a722:	ebb0 0009 	subs.w	r0, r0, r9
    a726:	f006 f92a 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a72a:	6871      	ldr	r1, [r6, #4]
    a72c:	b921      	cbnz	r1, a738 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c8>
    a72e:	e004      	b.n	a73a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    a730:	6871      	ldr	r1, [r6, #4]
    a732:	f04f 30ff 	mov.w	r0, #4294967295
    a736:	b101      	cbz	r1, a73a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    a738:	4788      	blx	r1
    a73a:	f1b8 0f00 	cmp.w	r8, #0
    a73e:	d022      	beq.n	a786 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x516>
    a740:	b124      	cbz	r4, a74c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4dc>
    a742:	2100      	movs	r1, #0
    a744:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    a748:	f3af 8000 	nop.w
    a74c:	b18d      	cbz	r5, a772 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x502>
    a74e:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    a752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a756:	4438      	add	r0, r7
    a758:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    a75c:	2820      	cmp	r0, #32
    a75e:	d008      	beq.n	a772 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x502>
    a760:	b124      	cbz	r4, a76c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4fc>
    a762:	2100      	movs	r1, #0
    a764:	f240 708f 	movw	r0, #1935	; 0x78f
    a768:	f3af 8000 	nop.w
    a76c:	7870      	ldrb	r0, [r6, #1]
    a76e:	f002 f855 	bl	c81c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a772:	b124      	cbz	r4, a77e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x50e>
    a774:	2100      	movs	r1, #0
    a776:	f240 7094 	movw	r0, #1940	; 0x794
    a77a:	f3af 8000 	nop.w
    a77e:	b019      	add	sp, #100	; 0x64
    a780:	4628      	mov	r0, r5
    a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a786:	4805      	ldr	r0, [pc, #20]	; (a79c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52c>)
    a788:	2800      	cmp	r0, #0
    a78a:	bf18      	it	ne
    a78c:	f3af 8000 	nopne.w
    a790:	b662      	cpsie	i
    a792:	e7d5      	b.n	a740 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a794:	00000000 	.word	0x00000000
    a798:	20000308 	.word	0x20000308
    a79c:	00000000 	.word	0x00000000

0000a7a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7a4:	4604      	mov	r4, r0
    a7a6:	7800      	ldrb	r0, [r0, #0]
    a7a8:	b08d      	sub	sp, #52	; 0x34
    a7aa:	b118      	cbz	r0, a7b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a7ac:	b00d      	add	sp, #52	; 0x34
    a7ae:	2000      	movs	r0, #0
    a7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7b4:	48d0      	ldr	r0, [pc, #832]	; (aaf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x358>)
    a7b6:	6800      	ldr	r0, [r0, #0]
    a7b8:	05c0      	lsls	r0, r0, #23
    a7ba:	0dc0      	lsrs	r0, r0, #23
    a7bc:	d00e      	beq.n	a7dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a7be:	3810      	subs	r0, #16
    a7c0:	b240      	sxtb	r0, r0
    a7c2:	2800      	cmp	r0, #0
    a7c4:	bfb8      	it	lt
    a7c6:	f000 000f 	andlt.w	r0, r0, #15
    a7ca:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a7ce:	bfac      	ite	ge
    a7d0:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a7d4:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a7d8:	0940      	lsrs	r0, r0, #5
    a7da:	d0e7      	beq.n	a7ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a7dc:	a805      	add	r0, sp, #20
    a7de:	f8df a31c 	ldr.w	sl, [pc, #796]	; aafc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>
    a7e2:	9008      	str	r0, [sp, #32]
    a7e4:	f1ba 0f00 	cmp.w	sl, #0
    a7e8:	d004      	beq.n	a7f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a7ea:	2100      	movs	r1, #0
    a7ec:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a7f0:	f3af 8000 	nop.w
    a7f4:	f8df 8308 	ldr.w	r8, [pc, #776]	; ab00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a7f8:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a7fc:	2500      	movs	r5, #0
    a7fe:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a802:	9501      	str	r5, [sp, #4]
    a804:	f1ba 0f00 	cmp.w	sl, #0
    a808:	d004      	beq.n	a814 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a80a:	2100      	movs	r1, #0
    a80c:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a810:	f3af 8000 	nop.w
    a814:	2001      	movs	r0, #1
    a816:	ea20 0906 	bic.w	r9, r0, r6
    a81a:	48ba      	ldr	r0, [pc, #744]	; (ab04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>)
    a81c:	2240      	movs	r2, #64	; 0x40
    a81e:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a822:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    a826:	f006 fa3a 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a82a:	f1ba 0f00 	cmp.w	sl, #0
    a82e:	d004      	beq.n	a83a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a830:	2100      	movs	r1, #0
    a832:	f240 503c 	movw	r0, #1340	; 0x53c
    a836:	f3af 8000 	nop.w
    a83a:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a83e:	eb00 0108 	add.w	r1, r0, r8
    a842:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a846:	4440      	add	r0, r8
    a848:	f1ba 0f00 	cmp.w	sl, #0
    a84c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    a84e:	850a      	strh	r2, [r1, #40]	; 0x28
    a850:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a854:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    a858:	d004      	beq.n	a864 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a85a:	2100      	movs	r1, #0
    a85c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a860:	f3af 8000 	nop.w
    a864:	f1ba 0f00 	cmp.w	sl, #0
    a868:	d004      	beq.n	a874 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a86a:	2100      	movs	r1, #0
    a86c:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a870:	f3af 8000 	nop.w
    a874:	f001 f94c 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a878:	460f      	mov	r7, r1
    a87a:	8922      	ldrh	r2, [r4, #8]
    a87c:	4629      	mov	r1, r5
    a87e:	f362 411f 	bfi	r1, r2, #16, #16
    a882:	4606      	mov	r6, r0
    a884:	7aa2      	ldrb	r2, [r4, #10]
    a886:	4628      	mov	r0, r5
    a888:	f362 0007 	bfi	r0, r2, #0, #8
    a88c:	7ae2      	ldrb	r2, [r4, #11]
    a88e:	f10d 0b08 	add.w	fp, sp, #8
    a892:	f362 200f 	bfi	r0, r2, #8, #8
    a896:	7822      	ldrb	r2, [r4, #0]
    a898:	9502      	str	r5, [sp, #8]
    a89a:	f362 4017 	bfi	r0, r2, #16, #8
    a89e:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a8a2:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a8a6:	9503      	str	r5, [sp, #12]
    a8a8:	7820      	ldrb	r0, [r4, #0]
    a8aa:	b388      	cbz	r0, a910 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    a8ac:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    a8b0:	4995      	ldr	r1, [pc, #596]	; (ab08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a8b2:	f10b 020c 	add.w	r2, fp, #12
    a8b6:	1a08      	subs	r0, r1, r0
    a8b8:	a909      	add	r1, sp, #36	; 0x24
    a8ba:	f000 fe49 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a8be:	2200      	movs	r2, #0
    a8c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a8c4:	4630      	mov	r0, r6
    a8c6:	4639      	mov	r1, r7
    a8c8:	f7fe fd10 	bl	92ec <MPSL_IRQ_RADIO_Handler+0x3ec>
    a8cc:	4684      	mov	ip, r0
    a8ce:	7ae0      	ldrb	r0, [r4, #11]
    a8d0:	460b      	mov	r3, r1
    a8d2:	2800      	cmp	r0, #0
    a8d4:	bf0c      	ite	eq
    a8d6:	207a      	moveq	r0, #122	; 0x7a
    a8d8:	204a      	movne	r0, #74	; 0x4a
    a8da:	6861      	ldr	r1, [r4, #4]
    a8dc:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a8e0:	4408      	add	r0, r1
    a8e2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    a8e6:	e9cd c302 	strd	ip, r3, [sp, #8]
    a8ea:	4411      	add	r1, r2
    a8ec:	4408      	add	r0, r1
    a8ee:	1c80      	adds	r0, r0, #2
    a8f0:	f000 fe12 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a8f4:	f8cd 9000 	str.w	r9, [sp]
    a8f8:	9004      	str	r0, [sp, #16]
    a8fa:	4632      	mov	r2, r6
    a8fc:	463b      	mov	r3, r7
    a8fe:	4659      	mov	r1, fp
    a900:	6920      	ldr	r0, [r4, #16]
    a902:	f7fe fb57 	bl	8fb4 <MPSL_IRQ_RADIO_Handler+0xb4>
    a906:	2800      	cmp	r0, #0
    a908:	bf08      	it	eq
    a90a:	e9cd 6702 	strdeq	r6, r7, [sp, #8]
    a90e:	e045      	b.n	a99c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a910:	e7ff      	b.n	a912 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a912:	4630      	mov	r0, r6
    a914:	4639      	mov	r1, r7
    a916:	f000 fd9d 	bl	b454 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a91a:	4b7c      	ldr	r3, [pc, #496]	; (ab0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a91c:	4602      	mov	r2, r0
    a91e:	eb10 0c03 	adds.w	ip, r0, r3
    a922:	468b      	mov	fp, r1
    a924:	f141 0300 	adc.w	r3, r1, #0
    a928:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a92c:	ebb0 0c0c 	subs.w	ip, r0, ip
    a930:	eb71 0303 	sbcs.w	r3, r1, r3
    a934:	d22a      	bcs.n	a98c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ec>
    a936:	3229      	adds	r2, #41	; 0x29
    a938:	f14b 0300 	adc.w	r3, fp, #0
    a93c:	1a82      	subs	r2, r0, r2
    a93e:	eb71 0203 	sbcs.w	r2, r1, r3
    a942:	d323      	bcc.n	a98c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ec>
    a944:	8922      	ldrh	r2, [r4, #8]
    a946:	ab0a      	add	r3, sp, #40	; 0x28
    a948:	1a80      	subs	r0, r0, r2
    a94a:	eb61 0105 	sbc.w	r1, r1, r5
    a94e:	9a08      	ldr	r2, [sp, #32]
    a950:	1e40      	subs	r0, r0, #1
    a952:	9200      	str	r2, [sp, #0]
    a954:	f141 31ff 	adc.w	r1, r1, #4294967295
    a958:	aa09      	add	r2, sp, #36	; 0x24
    a95a:	f000 fd9f 	bl	b49c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a95e:	7ae0      	ldrb	r0, [r4, #11]
    a960:	2800      	cmp	r0, #0
    a962:	bf0c      	ite	eq
    a964:	207a      	moveq	r0, #122	; 0x7a
    a966:	204a      	movne	r0, #74	; 0x4a
    a968:	9909      	ldr	r1, [sp, #36]	; 0x24
    a96a:	8922      	ldrh	r2, [r4, #8]
    a96c:	4408      	add	r0, r1
    a96e:	6861      	ldr	r1, [r4, #4]
    a970:	4411      	add	r1, r2
    a972:	4408      	add	r0, r1
    a974:	1c80      	adds	r0, r0, #2
    a976:	f000 fdcf 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a97a:	4601      	mov	r1, r0
    a97c:	e9dd 020a 	ldrd	r0, r2, [sp, #40]	; 0x28
    a980:	e9cd 0202 	strd	r0, r2, [sp, #8]
    a984:	1a08      	subs	r0, r1, r0
    a986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a98a:	e006      	b.n	a99a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fa>
    a98c:	1e70      	subs	r0, r6, #1
    a98e:	f147 31ff 	adc.w	r1, r7, #4294967295
    a992:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a99a:	9004      	str	r0, [sp, #16]
    a99c:	f1ba 0f00 	cmp.w	sl, #0
    a9a0:	d004      	beq.n	a9ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    a9a2:	2100      	movs	r1, #0
    a9a4:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a9a8:	f3af 8000 	nop.w
    a9ac:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a9b0:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a9b4:	1808      	adds	r0, r1, r0
    a9b6:	eb42 0105 	adc.w	r1, r2, r5
    a9ba:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a9be:	2a20      	cmp	r2, #32
    a9c0:	d009      	beq.n	a9d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x236>
    a9c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a9c6:	1a12      	subs	r2, r2, r0
    a9c8:	eb73 0201 	sbcs.w	r2, r3, r1
    a9cc:	d203      	bcs.n	a9d6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x236>
    a9ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a9d2:	2001      	movs	r0, #1
    a9d4:	9001      	str	r0, [sp, #4]
    a9d6:	f1ba 0f00 	cmp.w	sl, #0
    a9da:	d004      	beq.n	a9e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x246>
    a9dc:	2100      	movs	r1, #0
    a9de:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a9e2:	f3af 8000 	nop.w
    a9e6:	9902      	ldr	r1, [sp, #8]
    a9e8:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a9ec:	1a0a      	subs	r2, r1, r0
    a9ee:	9b04      	ldr	r3, [sp, #16]
    a9f0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a9f4:	18c9      	adds	r1, r1, r3
    a9f6:	1a08      	subs	r0, r1, r0
    a9f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a9fc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    aa00:	bf98      	it	ls
    aa02:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    aa06:	d80b      	bhi.n	aa20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x280>
    aa08:	4632      	mov	r2, r6
    aa0a:	463b      	mov	r3, r7
    aa0c:	a902      	add	r1, sp, #8
    aa0e:	483f      	ldr	r0, [pc, #252]	; (ab0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    aa10:	f8cd 9000 	str.w	r9, [sp]
    aa14:	f7fe face 	bl	8fb4 <MPSL_IRQ_RADIO_Handler+0xb4>
    aa18:	9901      	ldr	r1, [sp, #4]
    aa1a:	4308      	orrs	r0, r1
    aa1c:	d145      	bne.n	aaaa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30a>
    aa1e:	e05d      	b.n	aadc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    aa20:	f8bd b016 	ldrh.w	fp, [sp, #22]
    aa24:	aa01      	add	r2, sp, #4
    aa26:	4669      	mov	r1, sp
    aa28:	4658      	mov	r0, fp
    aa2a:	f000 fd91 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    aa2e:	f001 fa8d 	bl	bf4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    aa32:	f000 fd71 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    aa36:	4681      	mov	r9, r0
    aa38:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    aa3c:	2820      	cmp	r0, #32
    aa3e:	d00a      	beq.n	aa56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b6>
    aa40:	e9d8 3103 	ldrd	r3, r1, [r8, #12]
    aa44:	f8d8 2008 	ldr.w	r2, [r8, #8]
    aa48:	1d89      	adds	r1, r1, #6
    aa4a:	f145 0000 	adc.w	r0, r5, #0
    aa4e:	1856      	adds	r6, r2, r1
    aa50:	eb43 0700 	adc.w	r7, r3, r0
    aa54:	e024      	b.n	aaa0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x300>
    aa56:	360a      	adds	r6, #10
    aa58:	f147 0700 	adc.w	r7, r7, #0
    aa5c:	f1bb 0f00 	cmp.w	fp, #0
    aa60:	d017      	beq.n	aa92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f2>
    aa62:	f001 fd91 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aa66:	b9a0      	cbnz	r0, aa92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f2>
    aa68:	f001 fc48 	bl	c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aa6c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aa70:	bf08      	it	eq
    aa72:	200d      	moveq	r0, #13
    aa74:	d00b      	beq.n	aa8e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ee>
    aa76:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aa7a:	3856      	subs	r0, #86	; 0x56
    aa7c:	bf08      	it	eq
    aa7e:	201c      	moveq	r0, #28
    aa80:	d005      	beq.n	aa8e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ee>
    aa82:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aa86:	389f      	subs	r0, #159	; 0x9f
    aa88:	bf14      	ite	ne
    aa8a:	4628      	movne	r0, r5
    aa8c:	2032      	moveq	r0, #50	; 0x32
    aa8e:	1986      	adds	r6, r0, r6
    aa90:	416f      	adcs	r7, r5
    aa92:	9800      	ldr	r0, [sp, #0]
    aa94:	4581      	cmp	r9, r0
    aa96:	d903      	bls.n	aaa0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x300>
    aa98:	eba9 0000 	sub.w	r0, r9, r0
    aa9c:	1986      	adds	r6, r0, r6
    aa9e:	416f      	adcs	r7, r5
    aaa0:	201f      	movs	r0, #31
    aaa2:	e9cd 6702 	strd	r6, r7, [sp, #8]
    aaa6:	f88d 0014 	strb.w	r0, [sp, #20]
    aaaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    aaae:	f000 fcd1 	bl	b454 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    aab2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    aab6:	1880      	adds	r0, r0, r2
    aab8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    aabc:	4169      	adcs	r1, r5
    aabe:	1880      	adds	r0, r0, r2
    aac0:	4169      	adcs	r1, r5
    aac2:	1c42      	adds	r2, r0, #1
    aac4:	f141 0000 	adc.w	r0, r1, #0
    aac8:	e9c4 2004 	strd	r2, r0, [r4, #16]
    aacc:	f1ba 0f00 	cmp.w	sl, #0
    aad0:	d004      	beq.n	aadc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    aad2:	2100      	movs	r1, #0
    aad4:	f240 50fa 	movw	r0, #1530	; 0x5fa
    aad8:	f3af 8000 	nop.w
    aadc:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    aae0:	f88d 0000 	strb.w	r0, [sp]
    aae4:	f89d 0000 	ldrb.w	r0, [sp]
    aae8:	2800      	cmp	r0, #0
    aaea:	f47f ae7b 	bne.w	a7e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    aaee:	b00d      	add	sp, #52	; 0x34
    aaf0:	2001      	movs	r0, #1
    aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaf6:	0000      	.short	0x0000
    aaf8:	e000ed04 	.word	0xe000ed04
    aafc:	00000000 	.word	0x00000000
    ab00:	20000fd0 	.word	0x20000fd0
    ab04:	20000f50 	.word	0x20000f50
    ab08:	1e847fff 	.word	0x1e847fff
    ab0c:	0f424000 	.word	0x0f424000

0000ab10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    ab10:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab14:	4d9d      	ldr	r5, [pc, #628]	; (ad8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    ab16:	b08c      	sub	sp, #48	; 0x30
    ab18:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    ab1c:	2000      	movs	r0, #0
    ab1e:	9007      	str	r0, [sp, #28]
    ab20:	9008      	str	r0, [sp, #32]
    ab22:	2001      	movs	r0, #1
    ab24:	4c9a      	ldr	r4, [pc, #616]	; (ad90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    ab26:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    ab2a:	f04f 0800 	mov.w	r8, #0
    ab2e:	4607      	mov	r7, r0
    ab30:	9006      	str	r0, [sp, #24]
    ab32:	b124      	cbz	r4, ab3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    ab34:	2100      	movs	r1, #0
    ab36:	f240 70a5 	movw	r0, #1957	; 0x7a5
    ab3a:	f3af 8000 	nop.w
    ab3e:	9806      	ldr	r0, [sp, #24]
    ab40:	2800      	cmp	r0, #0
    ab42:	d03c      	beq.n	abbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    ab44:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    ab48:	b124      	cbz	r4, ab54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    ab4a:	2100      	movs	r1, #0
    ab4c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    ab50:	f3af 8000 	nop.w
    ab54:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    ab58:	2240      	movs	r2, #64	; 0x40
    ab5a:	ea27 060a 	bic.w	r6, r7, sl
    ab5e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ab62:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ab66:	4683      	mov	fp, r0
    ab68:	f006 f899 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ab6c:	b124      	cbz	r4, ab78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    ab6e:	2100      	movs	r1, #0
    ab70:	f240 503c 	movw	r0, #1340	; 0x53c
    ab74:	f3af 8000 	nop.w
    ab78:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ab7c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    ab80:	4428      	add	r0, r5
    ab82:	4429      	add	r1, r5
    ab84:	9000      	str	r0, [sp, #0]
    ab86:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    ab88:	8502      	strh	r2, [r0, #40]	; 0x28
    ab8a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    ab8e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    ab92:	b124      	cbz	r4, ab9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    ab94:	2100      	movs	r1, #0
    ab96:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    ab9a:	f3af 8000 	nop.w
    ab9e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aba2:	f88d 0008 	strb.w	r0, [sp, #8]
    aba6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    abaa:	b178      	cbz	r0, abcc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    abac:	2c00      	cmp	r4, #0
    abae:	bf1c      	itt	ne
    abb0:	2100      	movne	r1, #0
    abb2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    abb6:	d0bc      	beq.n	ab32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    abb8:	f3af 8000 	nop.w
    abbc:	e7b9      	b.n	ab32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    abbe:	4875      	ldr	r0, [pc, #468]	; (ad94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    abc0:	2800      	cmp	r0, #0
    abc2:	bf18      	it	ne
    abc4:	f3af 8000 	nopne.w
    abc8:	b662      	cpsie	i
    abca:	e7bb      	b.n	ab44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    abcc:	b124      	cbz	r4, abd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    abce:	2100      	movs	r1, #0
    abd0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    abd4:	f3af 8000 	nop.w
    abd8:	980c      	ldr	r0, [sp, #48]	; 0x30
    abda:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    abde:	2803      	cmp	r0, #3
    abe0:	d17e      	bne.n	ace0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    abe2:	9a00      	ldr	r2, [sp, #0]
    abe4:	990c      	ldr	r1, [sp, #48]	; 0x30
    abe6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    abea:	4288      	cmp	r0, r1
    abec:	bf14      	ite	ne
    abee:	f04f 0a00 	movne.w	sl, #0
    abf2:	f04f 0a01 	moveq.w	sl, #1
    abf6:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    abfa:	4683      	mov	fp, r0
    abfc:	2220      	movs	r2, #32
    abfe:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ac02:	e003      	b.n	ac0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ac04:	4602      	mov	r2, r0
    ac06:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ac0a:	7840      	ldrb	r0, [r0, #1]
    ac0c:	4288      	cmp	r0, r1
    ac0e:	d002      	beq.n	ac16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ac10:	2820      	cmp	r0, #32
    ac12:	d00a      	beq.n	ac2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ac14:	e7f6      	b.n	ac04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ac16:	2820      	cmp	r0, #32
    ac18:	d007      	beq.n	ac2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ac1a:	4583      	cmp	fp, r0
    ac1c:	d107      	bne.n	ac2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ac1e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ac22:	7840      	ldrb	r0, [r0, #1]
    ac24:	f88c 0000 	strb.w	r0, [ip]
    ac28:	e007      	b.n	ac3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ac2a:	4640      	mov	r0, r8
    ac2c:	e00c      	b.n	ac48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ac2e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ac32:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ac36:	7840      	ldrb	r0, [r0, #1]
    ac38:	7048      	strb	r0, [r1, #1]
    ac3a:	b124      	cbz	r4, ac46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ac3c:	2100      	movs	r1, #0
    ac3e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    ac42:	f3af 8000 	nop.w
    ac46:	4638      	mov	r0, r7
    ac48:	46c3      	mov	fp, r8
    ac4a:	ea10 0f0a 	tst.w	r0, sl
    ac4e:	bf18      	it	ne
    ac50:	46bb      	movne	fp, r7
    ac52:	2800      	cmp	r0, #0
    ac54:	d04e      	beq.n	acf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ac56:	b124      	cbz	r4, ac62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ac58:	2100      	movs	r1, #0
    ac5a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    ac5e:	f3af 8000 	nop.w
    ac62:	4632      	mov	r2, r6
    ac64:	2001      	movs	r0, #1
    ac66:	990c      	ldr	r1, [sp, #48]	; 0x30
    ac68:	f7fe ffd4 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    ac6c:	b124      	cbz	r4, ac78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    ac6e:	2100      	movs	r1, #0
    ac70:	f240 70c2 	movw	r0, #1986	; 0x7c2
    ac74:	f3af 8000 	nop.w
    ac78:	4847      	ldr	r0, [pc, #284]	; (ad98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    ac7a:	2800      	cmp	r0, #0
    ac7c:	bf18      	it	ne
    ac7e:	f3af 8000 	nopne.w
    ac82:	f3ef 8010 	mrs	r0, PRIMASK
    ac86:	b672      	cpsid	i
    ac88:	9006      	str	r0, [sp, #24]
    ac8a:	b124      	cbz	r4, ac96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    ac8c:	2100      	movs	r1, #0
    ac8e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    ac92:	f3af 8000 	nop.w
    ac96:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ac9a:	f88d 0008 	strb.w	r0, [sp, #8]
    ac9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aca2:	b138      	cbz	r0, acb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aca4:	2c00      	cmp	r4, #0
    aca6:	bf1c      	itt	ne
    aca8:	2100      	movne	r1, #0
    acaa:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    acae:	f43f af40 	beq.w	ab32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    acb2:	e781      	b.n	abb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    acb4:	f1bb 0f00 	cmp.w	fp, #0
    acb8:	d009      	beq.n	acce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    acba:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    acbe:	2820      	cmp	r0, #32
    acc0:	d105      	bne.n	acce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    acc2:	4631      	mov	r1, r6
    acc4:	2002      	movs	r0, #2
    acc6:	f7fe ffd7 	bl	9c78 <MPSL_IRQ_RADIO_Handler+0xd78>
    acca:	9008      	str	r0, [sp, #32]
    accc:	b1f8      	cbz	r0, ad0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    acce:	b124      	cbz	r4, acda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    acd0:	2100      	movs	r1, #0
    acd2:	f240 70df 	movw	r0, #2015	; 0x7df
    acd6:	f3af 8000 	nop.w
    acda:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    acde:	e000      	b.n	ace2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ace0:	e008      	b.n	acf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ace2:	ea27 0000 	bic.w	r0, r7, r0
    ace6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    acea:	20ff      	movs	r0, #255	; 0xff
    acec:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    acf0:	2001      	movs	r0, #1
    acf2:	9007      	str	r0, [sp, #28]
    acf4:	b124      	cbz	r4, ad00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    acf6:	2100      	movs	r1, #0
    acf8:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    acfc:	f3af 8000 	nop.w
    ad00:	9808      	ldr	r0, [sp, #32]
    ad02:	4e26      	ldr	r6, [pc, #152]	; (ad9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    ad04:	2802      	cmp	r0, #2
    ad06:	d009      	beq.n	ad1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ad08:	2801      	cmp	r0, #1
    ad0a:	d027      	beq.n	ad5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    ad0c:	e02b      	b.n	ad66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad0e:	b354      	cbz	r4, ad66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad10:	2100      	movs	r1, #0
    ad12:	f240 70da 	movw	r0, #2010	; 0x7da
    ad16:	f3af 8000 	nop.w
    ad1a:	e7ec      	b.n	acf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ad1c:	f000 fef8 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ad20:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    ad24:	ebb3 0c00 	subs.w	ip, r3, r0
    ad28:	eb72 0c01 	sbcs.w	ip, r2, r1
    ad2c:	d204      	bcs.n	ad38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ad2e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    ad32:	2070      	movs	r0, #112	; 0x70
    ad34:	f001 fca0 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad38:	1a18      	subs	r0, r3, r0
    ad3a:	eb62 0101 	sbc.w	r1, r2, r1
    ad3e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    ad42:	f171 0100 	sbcs.w	r1, r1, #0
    ad46:	d304      	bcc.n	ad52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    ad48:	f240 71ef 	movw	r1, #2031	; 0x7ef
    ad4c:	2070      	movs	r0, #112	; 0x70
    ad4e:	f001 fc93 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad52:	f005 fe14 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ad56:	6871      	ldr	r1, [r6, #4]
    ad58:	b129      	cbz	r1, ad66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad5a:	e003      	b.n	ad64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    ad5c:	6871      	ldr	r1, [r6, #4]
    ad5e:	f04f 30ff 	mov.w	r0, #4294967295
    ad62:	b101      	cbz	r1, ad66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad64:	4788      	blx	r1
    ad66:	9806      	ldr	r0, [sp, #24]
    ad68:	b148      	cbz	r0, ad7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    ad6a:	b124      	cbz	r4, ad76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    ad6c:	2100      	movs	r1, #0
    ad6e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    ad72:	f3af 8000 	nop.w
    ad76:	9807      	ldr	r0, [sp, #28]
    ad78:	b00d      	add	sp, #52	; 0x34
    ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad7e:	4805      	ldr	r0, [pc, #20]	; (ad94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ad80:	2800      	cmp	r0, #0
    ad82:	bf18      	it	ne
    ad84:	f3af 8000 	nopne.w
    ad88:	b662      	cpsie	i
    ad8a:	e7ee      	b.n	ad6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    ad8c:	20000fd0 	.word	0x20000fd0
	...
    ad9c:	20000308 	.word	0x20000308

0000ada0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    ada0:	2820      	cmp	r0, #32
    ada2:	bf24      	itt	cs
    ada4:	2000      	movcs	r0, #0
    ada6:	4770      	bxcs	lr
    ada8:	4b03      	ldr	r3, [pc, #12]	; (adb8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    adaa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    adae:	e9c0 1200 	strd	r1, r2, [r0]
    adb2:	2001      	movs	r0, #1
    adb4:	4770      	bx	lr
    adb6:	0000      	.short	0x0000
    adb8:	20000b50 	.word	0x20000b50

0000adbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    adbc:	b510      	push	{r4, lr}
    adbe:	2820      	cmp	r0, #32
    adc0:	d211      	bcs.n	ade6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    adc2:	490e      	ldr	r1, [pc, #56]	; (adfc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    adc4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    adc8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    adcc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    add0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    add4:	b13b      	cbz	r3, ade6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    add6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    adda:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    adde:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ade2:	2a01      	cmp	r2, #1
    ade4:	d001      	beq.n	adea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ade6:	2000      	movs	r0, #0
    ade8:	bd10      	pop	{r4, pc}
    adea:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    adee:	4601      	mov	r1, r0
    adf0:	2000      	movs	r0, #0
    adf2:	f7fe ff0f 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    adf6:	2001      	movs	r0, #1
    adf8:	bd10      	pop	{r4, pc}
    adfa:	0000      	.short	0x0000
    adfc:	20000fd0 	.word	0x20000fd0

0000ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ae00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae04:	4e86      	ldr	r6, [pc, #536]	; (b020 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ae06:	4680      	mov	r8, r0
    ae08:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    ae0c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ae10:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ae14:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ae18:	2800      	cmp	r0, #0
    ae1a:	d071      	beq.n	af00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ae1c:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    ae20:	4d80      	ldr	r5, [pc, #512]	; (b024 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ae22:	b125      	cbz	r5, ae2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ae24:	2100      	movs	r1, #0
    ae26:	f640 307b 	movw	r0, #2939	; 0xb7b
    ae2a:	f3af 8000 	nop.w
    ae2e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ae32:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ae36:	2801      	cmp	r0, #1
    ae38:	d018      	beq.n	ae6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ae3a:	b2c0      	uxtb	r0, r0
    ae3c:	2804      	cmp	r0, #4
    ae3e:	bf1c      	itt	ne
    ae40:	2805      	cmpne	r0, #5
    ae42:	2806      	cmpne	r0, #6
    ae44:	d061      	beq.n	af0a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ae46:	b12d      	cbz	r5, ae54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ae48:	f04f 0100 	mov.w	r1, #0
    ae4c:	f640 3087 	movw	r0, #2951	; 0xb87
    ae50:	f3af 8000 	nop.w
    ae54:	f005 fec9 	bl	10bea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ae58:	b125      	cbz	r5, ae64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ae5a:	2100      	movs	r1, #0
    ae5c:	f640 308b 	movw	r0, #2955	; 0xb8b
    ae60:	f3af 8000 	nop.w
    ae64:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ae68:	2801      	cmp	r0, #1
    ae6a:	d1e6      	bne.n	ae3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ae6c:	2401      	movs	r4, #1
    ae6e:	b125      	cbz	r5, ae7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ae70:	2100      	movs	r1, #0
    ae72:	f640 3092 	movw	r0, #2962	; 0xb92
    ae76:	f3af 8000 	nop.w
    ae7a:	2c00      	cmp	r4, #0
    ae7c:	d04b      	beq.n	af16 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ae7e:	2000      	movs	r0, #0
    ae80:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    ae84:	b125      	cbz	r5, ae90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ae86:	2100      	movs	r1, #0
    ae88:	f640 3097 	movw	r0, #2967	; 0xb97
    ae8c:	f3af 8000 	nop.w
    ae90:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    ae94:	2001      	movs	r0, #1
    ae96:	ea20 090b 	bic.w	r9, r0, fp
    ae9a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ae9e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aea2:	2240      	movs	r2, #64	; 0x40
    aea4:	f005 fefb 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    aea8:	b125      	cbz	r5, aeb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    aeaa:	2100      	movs	r1, #0
    aeac:	f240 503c 	movw	r0, #1340	; 0x53c
    aeb0:	f3af 8000 	nop.w
    aeb4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    aeb8:	eb00 0a06 	add.w	sl, r0, r6
    aebc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    aec0:	4430      	add	r0, r6
    aec2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    aec4:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    aec8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    aecc:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    aed0:	b125      	cbz	r5, aedc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    aed2:	2100      	movs	r1, #0
    aed4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    aed8:	f3af 8000 	nop.w
    aedc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    aee0:	f88d 0000 	strb.w	r0, [sp]
    aee4:	f89d 0000 	ldrb.w	r0, [sp]
    aee8:	b1e0      	cbz	r0, af24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    aeea:	2d00      	cmp	r5, #0
    aeec:	bf1c      	itt	ne
    aeee:	2100      	movne	r1, #0
    aef0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    aef4:	d0bb      	beq.n	ae6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    aef6:	bf00      	nop
    aef8:	f3af 8000 	nop.w
    aefc:	e7b7      	b.n	ae6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    aefe:	e7ff      	b.n	af00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    af00:	f640 3172 	movw	r1, #2930	; 0xb72
    af04:	2070      	movs	r0, #112	; 0x70
    af06:	f001 fbb7 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af0a:	464a      	mov	r2, r9
    af0c:	4641      	mov	r1, r8
    af0e:	2001      	movs	r0, #1
    af10:	f7fe fe80 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    af14:	e7a0      	b.n	ae58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    af16:	4844      	ldr	r0, [pc, #272]	; (b028 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    af18:	2800      	cmp	r0, #0
    af1a:	bf18      	it	ne
    af1c:	f3af 8000 	nopne.w
    af20:	b662      	cpsie	i
    af22:	e7ac      	b.n	ae7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    af24:	b125      	cbz	r5, af30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    af26:	2100      	movs	r1, #0
    af28:	f640 30a1 	movw	r0, #2977	; 0xba1
    af2c:	f3af 8000 	nop.w
    af30:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    af34:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    af38:	4640      	mov	r0, r8
    af3a:	461c      	mov	r4, r3
    af3c:	f04f 0b20 	mov.w	fp, #32
    af40:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    af44:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    af48:	e004      	b.n	af54 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    af4a:	46a3      	mov	fp, r4
    af4c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    af50:	f89c 4001 	ldrb.w	r4, [ip, #1]
    af54:	4284      	cmp	r4, r0
    af56:	d002      	beq.n	af5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    af58:	2c20      	cmp	r4, #32
    af5a:	d02b      	beq.n	afb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    af5c:	e7f5      	b.n	af4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    af5e:	2c20      	cmp	r4, #32
    af60:	d028      	beq.n	afb4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    af62:	42a3      	cmp	r3, r4
    af64:	d104      	bne.n	af70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    af66:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    af6a:	7840      	ldrb	r0, [r0, #1]
    af6c:	7008      	strb	r0, [r1, #0]
    af6e:	e005      	b.n	af7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    af70:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    af74:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    af78:	7840      	ldrb	r0, [r0, #1]
    af7a:	7048      	strb	r0, [r1, #1]
    af7c:	f1ba 0f00 	cmp.w	sl, #0
    af80:	d011      	beq.n	afa6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    af82:	b125      	cbz	r5, af8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    af84:	2100      	movs	r1, #0
    af86:	f240 409c 	movw	r0, #1180	; 0x49c
    af8a:	f3af 8000 	nop.w
    af8e:	f89a 0000 	ldrb.w	r0, [sl]
    af92:	42a0      	cmp	r0, r4
    af94:	d107      	bne.n	afa6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    af96:	b125      	cbz	r5, afa2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    af98:	2100      	movs	r1, #0
    af9a:	f240 409f 	movw	r0, #1183	; 0x49f
    af9e:	f3af 8000 	nop.w
    afa2:	f88a b000 	strb.w	fp, [sl]
    afa6:	b15d      	cbz	r5, afc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    afa8:	2100      	movs	r1, #0
    afaa:	f240 40a4 	movw	r0, #1188	; 0x4a4
    afae:	f3af 8000 	nop.w
    afb2:	e000      	b.n	afb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    afb4:	b125      	cbz	r5, afc0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    afb6:	2100      	movs	r1, #0
    afb8:	f640 30a5 	movw	r0, #2981	; 0xba5
    afbc:	f3af 8000 	nop.w
    afc0:	481a      	ldr	r0, [pc, #104]	; (b02c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    afc2:	2800      	cmp	r0, #0
    afc4:	bf18      	it	ne
    afc6:	f3af 8000 	nopne.w
    afca:	f3ef 8410 	mrs	r4, PRIMASK
    afce:	b672      	cpsid	i
    afd0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    afd4:	f88d 0000 	strb.w	r0, [sp]
    afd8:	f89d 0000 	ldrb.w	r0, [sp]
    afdc:	b138      	cbz	r0, afee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    afde:	2d00      	cmp	r5, #0
    afe0:	bf1c      	itt	ne
    afe2:	2100      	movne	r1, #0
    afe4:	f640 30ab 	movwne	r0, #2987	; 0xbab
    afe8:	f43f af41 	beq.w	ae6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    afec:	e784      	b.n	aef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    afee:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    aff2:	20ff      	movs	r0, #255	; 0xff
    aff4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    aff8:	b154      	cbz	r4, b010 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    affa:	2d00      	cmp	r5, #0
    affc:	bf08      	it	eq
    affe:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b002:	2100      	movs	r1, #0
    b004:	f640 30b8 	movw	r0, #3000	; 0xbb8
    b008:	f3af 8000 	nop.w
    b00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b010:	4805      	ldr	r0, [pc, #20]	; (b028 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b012:	2800      	cmp	r0, #0
    b014:	bf18      	it	ne
    b016:	f3af 8000 	nopne.w
    b01a:	b662      	cpsie	i
    b01c:	e7ed      	b.n	affa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    b01e:	0000      	.short	0x0000
    b020:	20000fd0 	.word	0x20000fd0
	...

0000b030 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    b030:	b570      	push	{r4, r5, r6, lr}
    b032:	460d      	mov	r5, r1
    b034:	4606      	mov	r6, r0
    b036:	f001 fa95 	bl	c564 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b03a:	480d      	ldr	r0, [pc, #52]	; (b070 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    b03c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    b040:	2400      	movs	r4, #0
    b042:	3880      	subs	r0, #128	; 0x80
    b044:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    b048:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    b04c:	b129      	cbz	r1, b05a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    b04e:	1c61      	adds	r1, r4, #1
    b050:	b2cc      	uxtb	r4, r1
    b052:	2c20      	cmp	r4, #32
    b054:	d3f8      	bcc.n	b048 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    b056:	2020      	movs	r0, #32
    b058:	bd70      	pop	{r4, r5, r6, pc}
    b05a:	4806      	ldr	r0, [pc, #24]	; (b074 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    b05c:	4621      	mov	r1, r4
    b05e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    b062:	e9c0 6500 	strd	r6, r5, [r0]
    b066:	2001      	movs	r0, #1
    b068:	f7fe fdd4 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    b06c:	4620      	mov	r0, r4
    b06e:	bd70      	pop	{r4, r5, r6, pc}
    b070:	20000fd0 	.word	0x20000fd0
    b074:	20000b50 	.word	0x20000b50

0000b078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    b078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b07c:	f000 fd48 	bl	bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b080:	4606      	mov	r6, r0
    b082:	460f      	mov	r7, r1
    b084:	f000 fe88 	bl	bd98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    b088:	4c65      	ldr	r4, [pc, #404]	; (b220 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    b08a:	6860      	ldr	r0, [r4, #4]
    b08c:	f1b0 3fff 	cmp.w	r0, #4294967295
    b090:	bf1c      	itt	ne
    b092:	f04f 30ff 	movne.w	r0, #4294967295
    b096:	6060      	strne	r0, [r4, #4]
    b098:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    b09c:	f8df b184 	ldr.w	fp, [pc, #388]	; b224 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    b0a0:	2500      	movs	r5, #0
    b0a2:	bb10      	cbnz	r0, b0ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b0a4:	f44f 710c 	mov.w	r1, #560	; 0x230
    b0a8:	6920      	ldr	r0, [r4, #16]
    b0aa:	f001 fa47 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b0ae:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    b0b2:	68a1      	ldr	r1, [r4, #8]
    b0b4:	1818      	adds	r0, r3, r0
    b0b6:	eb45 0305 	adc.w	r3, r5, r5
    b0ba:	1809      	adds	r1, r1, r0
    b0bc:	eb42 0003 	adc.w	r0, r2, r3
    b0c0:	1a71      	subs	r1, r6, r1
    b0c2:	eb77 0000 	sbcs.w	r0, r7, r0
    b0c6:	d310      	bcc.n	b0ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b0c8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b0cc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    b0d0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    b0d4:	6840      	ldr	r0, [r0, #4]
    b0d6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    b0da:	680a      	ldr	r2, [r1, #0]
    b0dc:	2108      	movs	r1, #8
    b0de:	4790      	blx	r2
    b0e0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    b0e4:	2070      	movs	r0, #112	; 0x70
    b0e6:	f001 fac7 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ea:	7e60      	ldrb	r0, [r4, #25]
    b0ec:	b180      	cbz	r0, b110 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b0ee:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b0f2:	f88d 0000 	strb.w	r0, [sp]
    b0f6:	f89d 0000 	ldrb.w	r0, [sp]
    b0fa:	b148      	cbz	r0, b110 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b0fc:	f000 fc7e 	bl	b9fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b100:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    b104:	b150      	cbz	r0, b11c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    b106:	f240 31cd 	movw	r1, #973	; 0x3cd
    b10a:	2070      	movs	r0, #112	; 0x70
    b10c:	f001 fab4 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b110:	1cf0      	adds	r0, r6, #3
    b112:	f147 0100 	adc.w	r1, r7, #0
    b116:	f000 fb4b 	bl	b7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b11a:	e7f1      	b.n	b100 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    b11c:	2001      	movs	r0, #1
    b11e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b122:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b126:	2820      	cmp	r0, #32
    b128:	d020      	beq.n	b16c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    b12a:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    b12e:	2020      	movs	r0, #32
    b130:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    b134:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b138:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    b13c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    b140:	6025      	str	r5, [r4, #0]
    b142:	f000 ff09 	bl	bf58 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b146:	f884 0020 	strb.w	r0, [r4, #32]
    b14a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    b14e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    b152:	eb00 0a04 	add.w	sl, r0, r4
    b156:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    b15a:	2820      	cmp	r0, #32
    b15c:	d01c      	beq.n	b198 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b15e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    b162:	f89b 001a 	ldrb.w	r0, [fp, #26]
    b166:	2801      	cmp	r0, #1
    b168:	d005      	beq.n	b176 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    b16a:	e015      	b.n	b198 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b16c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b170:	2070      	movs	r0, #112	; 0x70
    b172:	f001 fa81 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b176:	2201      	movs	r2, #1
    b178:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    b17c:	4630      	mov	r0, r6
    b17e:	4639      	mov	r1, r7
    b180:	f7fe f8b4 	bl	92ec <MPSL_IRQ_RADIO_Handler+0x3ec>
    b184:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    b188:	1a12      	subs	r2, r2, r0
    b18a:	eb73 0201 	sbcs.w	r2, r3, r1
    b18e:	bf24      	itt	cs
    b190:	f10b 0208 	addcs.w	r2, fp, #8
    b194:	e9c2 0100 	strdcs	r0, r1, [r2]
    b198:	4641      	mov	r1, r8
    b19a:	2001      	movs	r0, #1
    b19c:	f7fe fd6c 	bl	9c78 <MPSL_IRQ_RADIO_Handler+0xd78>
    b1a0:	0007      	movs	r7, r0
    b1a2:	d0f9      	beq.n	b198 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b1a4:	4820      	ldr	r0, [pc, #128]	; (b228 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    b1a6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    b1aa:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    b1ae:	2802      	cmp	r0, #2
    b1b0:	d104      	bne.n	b1bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    b1b2:	4642      	mov	r2, r8
    b1b4:	4649      	mov	r1, r9
    b1b6:	2006      	movs	r0, #6
    b1b8:	f7fe fd2c 	bl	9c14 <MPSL_IRQ_RADIO_Handler+0xd14>
    b1bc:	20ff      	movs	r0, #255	; 0xff
    b1be:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b1c2:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    b1c6:	f8df 8064 	ldr.w	r8, [pc, #100]	; b22c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    b1ca:	2820      	cmp	r0, #32
    b1cc:	bf1c      	itt	ne
    b1ce:	f898 0001 	ldrbne.w	r0, [r8, #1]
    b1d2:	f001 fb23 	blne	c81c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b1d6:	f894 0020 	ldrb.w	r0, [r4, #32]
    b1da:	b128      	cbz	r0, b1e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    b1dc:	f000 fe98 	bl	bf10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b1e0:	f884 5020 	strb.w	r5, [r4, #32]
    b1e4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    b1e8:	2f02      	cmp	r7, #2
    b1ea:	d00f      	beq.n	b20c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    b1ec:	2f01      	cmp	r7, #1
    b1ee:	bf18      	it	ne
    b1f0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1f4:	f04f 30ff 	mov.w	r0, #4294967295
    b1f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b1fc:	2900      	cmp	r1, #0
    b1fe:	bf08      	it	eq
    b200:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b204:	b001      	add	sp, #4
    b206:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b20a:	4708      	bx	r1
    b20c:	68a0      	ldr	r0, [r4, #8]
    b20e:	1b80      	subs	r0, r0, r6
    b210:	f005 fbb5 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b214:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b218:	2900      	cmp	r1, #0
    b21a:	d1f3      	bne.n	b204 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    b21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b220:	20000fd0 	.word	0x20000fd0
    b224:	20000b50 	.word	0x20000b50
    b228:	20000f50 	.word	0x20000f50
    b22c:	20000308 	.word	0x20000308

0000b230 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b230:	b570      	push	{r4, r5, r6, lr}
    b232:	4c42      	ldr	r4, [pc, #264]	; (b33c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b234:	4605      	mov	r5, r0
    b236:	b082      	sub	sp, #8
    b238:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b23c:	2820      	cmp	r0, #32
    b23e:	d008      	beq.n	b252 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b240:	6860      	ldr	r0, [r4, #4]
    b242:	f1b0 3fff 	cmp.w	r0, #4294967295
    b246:	d009      	beq.n	b25c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b248:	f640 21b6 	movw	r1, #2742	; 0xab6
    b24c:	2070      	movs	r0, #112	; 0x70
    b24e:	f001 fa13 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b252:	f640 21b5 	movw	r1, #2741	; 0xab5
    b256:	2070      	movs	r0, #112	; 0x70
    b258:	f001 fa0e 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b25c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b260:	4937      	ldr	r1, [pc, #220]	; (b340 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b262:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    b266:	68b0      	ldr	r0, [r6, #8]
    b268:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b26c:	f005 fb87 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b270:	4602      	mov	r2, r0
    b272:	8af0      	ldrh	r0, [r6, #22]
    b274:	7d31      	ldrb	r1, [r6, #20]
    b276:	4b33      	ldr	r3, [pc, #204]	; (b344 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b278:	4408      	add	r0, r1
    b27a:	1c40      	adds	r0, r0, #1
    b27c:	1811      	adds	r1, r2, r0
    b27e:	429a      	cmp	r2, r3
    b280:	d817      	bhi.n	b2b2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b282:	4a31      	ldr	r2, [pc, #196]	; (b348 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b284:	4290      	cmp	r0, r2
    b286:	dc1b      	bgt.n	b2c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b288:	f1c2 0c00 	rsb	ip, r2, #0
    b28c:	4560      	cmp	r0, ip
    b28e:	db1e      	blt.n	b2ce <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b290:	0056      	lsls	r6, r2, #1
    b292:	428e      	cmp	r6, r1
    b294:	bfdc      	itt	le
    b296:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b29a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b29e:	dd05      	ble.n	b2ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b2a0:	2900      	cmp	r1, #0
    b2a2:	bfbc      	itt	lt
    b2a4:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b2a8:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b2ac:	1948      	adds	r0, r1, r5
    b2ae:	4299      	cmp	r1, r3
    b2b0:	d904      	bls.n	b2bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b2b2:	f240 517f 	movw	r1, #1407	; 0x57f
    b2b6:	2070      	movs	r0, #112	; 0x70
    b2b8:	f001 f9de 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2bc:	4295      	cmp	r5, r2
    b2be:	dd04      	ble.n	b2ca <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b2c0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    b2c4:	2070      	movs	r0, #112	; 0x70
    b2c6:	f001 f9d7 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2ca:	4565      	cmp	r5, ip
    b2cc:	da04      	bge.n	b2d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b2ce:	f240 5181 	movw	r1, #1409	; 0x581
    b2d2:	2070      	movs	r0, #112	; 0x70
    b2d4:	f001 f9d0 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2d8:	4286      	cmp	r6, r0
    b2da:	bfdc      	itt	le
    b2dc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b2e0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b2e4:	dd05      	ble.n	b2f2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b2e6:	2800      	cmp	r0, #0
    b2e8:	bfbc      	itt	lt
    b2ea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b2ee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b2f2:	aa01      	add	r2, sp, #4
    b2f4:	4669      	mov	r1, sp
    b2f6:	f000 f92b 	bl	b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b2fa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b2fe:	280f      	cmp	r0, #15
    b300:	bf8c      	ite	hi
    b302:	2001      	movhi	r0, #1
    b304:	2000      	movls	r0, #0
    b306:	9900      	ldr	r1, [sp, #0]
    b308:	4408      	add	r0, r1
    b30a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b30e:	6061      	str	r1, [r4, #4]
    b310:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b314:	f88d 0000 	strb.w	r0, [sp]
    b318:	f89d 0000 	ldrb.w	r0, [sp]
    b31c:	2800      	cmp	r0, #0
    b31e:	bf04      	itt	eq
    b320:	b002      	addeq	sp, #8
    b322:	bd70      	popeq	{r4, r5, r6, pc}
    b324:	2005      	movs	r0, #5
    b326:	f000 fc15 	bl	bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b32a:	2800      	cmp	r0, #0
    b32c:	bf1c      	itt	ne
    b32e:	b002      	addne	sp, #8
    b330:	bd70      	popne	{r4, r5, r6, pc}
    b332:	f640 21bd 	movw	r1, #2749	; 0xabd
    b336:	2070      	movs	r0, #112	; 0x70
    b338:	f001 f99e 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b33c:	20000fd0 	.word	0x20000fd0
    b340:	20000b50 	.word	0x20000b50
    b344:	1e847fff 	.word	0x1e847fff
    b348:	0f424000 	.word	0x0f424000

0000b34c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b34c:	b570      	push	{r4, r5, r6, lr}
    b34e:	4c1e      	ldr	r4, [pc, #120]	; (b3c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b350:	2120      	movs	r1, #32
    b352:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    b356:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    b35a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    b35e:	2000      	movs	r0, #0
    b360:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    b364:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    b368:	1e42      	subs	r2, r0, #1
    b36a:	e9c4 0200 	strd	r0, r2, [r4]
    b36e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    b372:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    b376:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    b37a:	f884 0020 	strb.w	r0, [r4, #32]
    b37e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b386:	1e41      	subs	r1, r0, #1
    b388:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    b38c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    b390:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b394:	2210      	movs	r2, #16
    b396:	7088      	strb	r0, [r1, #2]
    b398:	f801 0f04 	strb.w	r0, [r1, #4]!
    b39c:	1e52      	subs	r2, r2, #1
    b39e:	d1fa      	bne.n	b396 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    b3a0:	f000 fde4 	bl	bf6c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b3a4:	4d09      	ldr	r5, [pc, #36]	; (b3cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b3a6:	2601      	movs	r6, #1
    b3a8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    b3ac:	20ff      	movs	r0, #255	; 0xff
    b3ae:	7028      	strb	r0, [r5, #0]
    b3b0:	4807      	ldr	r0, [pc, #28]	; (b3d0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b3b2:	f001 fa15 	bl	c7e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b3b6:	7068      	strb	r0, [r5, #1]
    b3b8:	f001 fa80 	bl	c8bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b3bc:	60a8      	str	r0, [r5, #8]
    b3be:	f000 fd67 	bl	be90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b3c2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    b3c6:	bd70      	pop	{r4, r5, r6, pc}
    b3c8:	20000fd0 	.word	0x20000fd0
    b3cc:	20000308 	.word	0x20000308
    b3d0:	00009b45 	.word	0x00009b45

0000b3d4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3d6:	4607      	mov	r7, r0
    b3d8:	b087      	sub	sp, #28
    b3da:	461d      	mov	r5, r3
    b3dc:	460e      	mov	r6, r1
    b3de:	4610      	mov	r0, r2
    b3e0:	f005 facd 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b3e4:	4604      	mov	r4, r0
    b3e6:	a803      	add	r0, sp, #12
    b3e8:	9000      	str	r0, [sp, #0]
    b3ea:	ab04      	add	r3, sp, #16
    b3ec:	aa02      	add	r2, sp, #8
    b3ee:	4638      	mov	r0, r7
    b3f0:	4631      	mov	r1, r6
    b3f2:	f000 f853 	bl	b49c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b3f6:	9902      	ldr	r1, [sp, #8]
    b3f8:	4a14      	ldr	r2, [pc, #80]	; (b44c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    b3fa:	1a60      	subs	r0, r4, r1
    b3fc:	2300      	movs	r3, #0
    b3fe:	1a82      	subs	r2, r0, r2
    b400:	f173 0200 	sbcs.w	r2, r3, #0
    b404:	d318      	bcc.n	b438 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b406:	f8df c044 	ldr.w	ip, [pc, #68]	; b44c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    b40a:	1b0a      	subs	r2, r1, r4
    b40c:	ebb2 0c0c 	subs.w	ip, r2, ip
    b410:	f173 0300 	sbcs.w	r3, r3, #0
    b414:	d310      	bcc.n	b438 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b416:	4b0e      	ldr	r3, [pc, #56]	; (b450 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    b418:	4283      	cmp	r3, r0
    b41a:	bf3e      	ittt	cc
    b41c:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    b420:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b424:	4420      	addcc	r0, r4
    b426:	d307      	bcc.n	b438 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b428:	4293      	cmp	r3, r2
    b42a:	d209      	bcs.n	b440 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    b42c:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    b430:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    b434:	4408      	add	r0, r1
    b436:	4240      	negs	r0, r0
    b438:	300f      	adds	r0, #15
    b43a:	b007      	add	sp, #28
    b43c:	1a28      	subs	r0, r5, r0
    b43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b440:	f640 21d7 	movw	r1, #2775	; 0xad7
    b444:	2070      	movs	r0, #112	; 0x70
    b446:	f001 f917 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b44a:	0000      	.short	0x0000
    b44c:	0f424000 	.word	0x0f424000
    b450:	1e847fff 	.word	0x1e847fff

0000b454 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b454:	0e03      	lsrs	r3, r0, #24
    b456:	b430      	push	{r4, r5}
    b458:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b45c:	f8df c038 	ldr.w	ip, [pc, #56]	; b498 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b460:	0e09      	lsrs	r1, r1, #24
    b462:	fba3 250c 	umull	r2, r5, r3, ip
    b466:	fb01 510c 	mla	r1, r1, ip, r5
    b46a:	2400      	movs	r4, #0
    b46c:	fb03 1104 	mla	r1, r3, r4, r1
    b470:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b474:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b478:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b47c:	fb13 f30c 	smulbb	r3, r3, ip
    b480:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b484:	fb10 f00c 	smulbb	r0, r0, ip
    b488:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b48c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b490:	1880      	adds	r0, r0, r2
    b492:	4161      	adcs	r1, r4
    b494:	bc30      	pop	{r4, r5}
    b496:	4770      	bx	lr
    b498:	1e848000 	.word	0x1e848000

0000b49c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b49c:	b570      	push	{r4, r5, r6, lr}
    b49e:	b084      	sub	sp, #16
    b4a0:	4615      	mov	r5, r2
    b4a2:	aa01      	add	r2, sp, #4
    b4a4:	461c      	mov	r4, r3
    b4a6:	9200      	str	r2, [sp, #0]
    b4a8:	9e08      	ldr	r6, [sp, #32]
    b4aa:	ab02      	add	r3, sp, #8
    b4ac:	4a17      	ldr	r2, [pc, #92]	; (b50c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    b4ae:	f005 fbe7 	bl	10c80 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    b4b2:	9801      	ldr	r0, [sp, #4]
    b4b4:	f248 6237 	movw	r2, #34359	; 0x8637
    b4b8:	0b41      	lsrs	r1, r0, #13
    b4ba:	4351      	muls	r1, r2
    b4bc:	0c09      	lsrs	r1, r1, #16
    b4be:	4a14      	ldr	r2, [pc, #80]	; (b510 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    b4c0:	024b      	lsls	r3, r1, #9
    b4c2:	fb01 0102 	mla	r1, r1, r2, r0
    b4c6:	4813      	ldr	r0, [pc, #76]	; (b514 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    b4c8:	4348      	muls	r0, r1
    b4ca:	0d42      	lsrs	r2, r0, #21
    b4cc:	1898      	adds	r0, r3, r2
    b4ce:	f643 5309 	movw	r3, #15625	; 0x3d09
    b4d2:	fb12 f303 	smulbb	r3, r2, r3
    b4d6:	f503 7280 	add.w	r2, r3, #256	; 0x100
    b4da:	f643 5c08 	movw	ip, #15624	; 0x3d08
    b4de:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    b4e2:	4463      	add	r3, ip
    b4e4:	b2d2      	uxtb	r2, r2
    b4e6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    b4ea:	bf84      	itt	hi
    b4ec:	2200      	movhi	r2, #0
    b4ee:	1c40      	addhi	r0, r0, #1
    b4f0:	7032      	strb	r2, [r6, #0]
    b4f2:	9b02      	ldr	r3, [sp, #8]
    b4f4:	0a19      	lsrs	r1, r3, #8
    b4f6:	061b      	lsls	r3, r3, #24
    b4f8:	1818      	adds	r0, r3, r0
    b4fa:	f141 0100 	adc.w	r1, r1, #0
    b4fe:	e9c4 0100 	strd	r0, r1, [r4]
    b502:	9801      	ldr	r0, [sp, #4]
    b504:	6028      	str	r0, [r5, #0]
    b506:	b004      	add	sp, #16
    b508:	bd70      	pop	{r4, r5, r6, pc}
    b50a:	0000      	.short	0x0000
    b50c:	1e848000 	.word	0x1e848000
    b510:	ffffc2f7 	.word	0xffffc2f7
    b514:	00010c6f 	.word	0x00010c6f

0000b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b518:	0b41      	lsrs	r1, r0, #13
    b51a:	f248 6237 	movw	r2, #34359	; 0x8637
    b51e:	4351      	muls	r1, r2
    b520:	0c0a      	lsrs	r2, r1, #16
    b522:	4b09      	ldr	r3, [pc, #36]	; (b548 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b524:	0251      	lsls	r1, r2, #9
    b526:	fb02 0203 	mla	r2, r2, r3, r0
    b52a:	4808      	ldr	r0, [pc, #32]	; (b54c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b52c:	4350      	muls	r0, r2
    b52e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b532:	306e      	adds	r0, #110	; 0x6e
    b534:	0d40      	lsrs	r0, r0, #21
    b536:	425b      	negs	r3, r3
    b538:	fb10 f303 	smulbb	r3, r0, r3
    b53c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b540:	bf88      	it	hi
    b542:	1c49      	addhi	r1, r1, #1
    b544:	4408      	add	r0, r1
    b546:	4770      	bx	lr
    b548:	ffffc2f7 	.word	0xffffc2f7
    b54c:	00010c6f 	.word	0x00010c6f

0000b550 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b550:	0b43      	lsrs	r3, r0, #13
    b552:	f248 6c37 	movw	ip, #34359	; 0x8637
    b556:	fb03 f30c 	mul.w	r3, r3, ip
    b55a:	b430      	push	{r4, r5}
    b55c:	0c1b      	lsrs	r3, r3, #16
    b55e:	f8df c044 	ldr.w	ip, [pc, #68]	; b5a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b562:	025c      	lsls	r4, r3, #9
    b564:	fb03 030c 	mla	r3, r3, ip, r0
    b568:	480f      	ldr	r0, [pc, #60]	; (b5a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b56a:	4358      	muls	r0, r3
    b56c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b570:	eb04 000c 	add.w	r0, r4, ip
    b574:	f643 5409 	movw	r4, #15625	; 0x3d09
    b578:	fb1c f404 	smulbb	r4, ip, r4
    b57c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b580:	f643 5508 	movw	r5, #15624	; 0x3d08
    b584:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b588:	442c      	add	r4, r5
    b58a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b58e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b592:	bf84      	itt	hi
    b594:	f04f 0c00 	movhi.w	ip, #0
    b598:	1c40      	addhi	r0, r0, #1
    b59a:	6008      	str	r0, [r1, #0]
    b59c:	f882 c000 	strb.w	ip, [r2]
    b5a0:	bc30      	pop	{r4, r5}
    b5a2:	4770      	bx	lr
    b5a4:	ffffc2f7 	.word	0xffffc2f7
    b5a8:	00010c6f 	.word	0x00010c6f

0000b5ac <MPSL_IRQ_RTC0_Handler>:
    b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5b0:	2400      	movs	r4, #0
    b5b2:	f8df 9080 	ldr.w	r9, [pc, #128]	; b634 <MPSL_IRQ_RTC0_Handler+0x88>
    b5b6:	4d20      	ldr	r5, [pc, #128]	; (b638 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b5b8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b5bc:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b5c0:	ea4f 0604 	mov.w	r6, r4
    b5c4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b5c8:	fa07 f004 	lsl.w	r0, r7, r4
    b5cc:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b5d0:	4202      	tst	r2, r0
    b5d2:	d01a      	beq.n	b60a <MPSL_IRQ_RTC0_Handler+0x5e>
    b5d4:	4a18      	ldr	r2, [pc, #96]	; (b638 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b5d6:	5852      	ldr	r2, [r2, r1]
    b5d8:	b1ba      	cbz	r2, b60a <MPSL_IRQ_RTC0_Handler+0x5e>
    b5da:	506e      	str	r6, [r5, r1]
    b5dc:	00a1      	lsls	r1, r4, #2
    b5de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b5e2:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b5e6:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b5ea:	f8d9 2000 	ldr.w	r2, [r9]
    b5ee:	1a89      	subs	r1, r1, r2
    b5f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b5f4:	2902      	cmp	r1, #2
    b5f6:	d302      	bcc.n	b5fe <MPSL_IRQ_RTC0_Handler+0x52>
    b5f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b5fc:	d905      	bls.n	b60a <MPSL_IRQ_RTC0_Handler+0x5e>
    b5fe:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b602:	1d20      	adds	r0, r4, #4
    b604:	b2c0      	uxtb	r0, r0
    b606:	f7fe fd4d 	bl	a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b60a:	1c60      	adds	r0, r4, #1
    b60c:	b2c4      	uxtb	r4, r0
    b60e:	2c03      	cmp	r4, #3
    b610:	d3d8      	bcc.n	b5c4 <MPSL_IRQ_RTC0_Handler+0x18>
    b612:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b616:	b128      	cbz	r0, b624 <MPSL_IRQ_RTC0_Handler+0x78>
    b618:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b61c:	4807      	ldr	r0, [pc, #28]	; (b63c <MPSL_IRQ_RTC0_Handler+0x90>)
    b61e:	6881      	ldr	r1, [r0, #8]
    b620:	1c49      	adds	r1, r1, #1
    b622:	6081      	str	r1, [r0, #8]
    b624:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b628:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b62c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b634:	4000b504 	.word	0x4000b504
    b638:	4000b000 	.word	0x4000b000
    b63c:	20000028 	.word	0x20000028

0000b640 <MPSL_IRQ_TIMER0_Handler>:
    b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b644:	4d38      	ldr	r5, [pc, #224]	; (b728 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b646:	7828      	ldrb	r0, [r5, #0]
    b648:	2804      	cmp	r0, #4
    b64a:	d068      	beq.n	b71e <MPSL_IRQ_TIMER0_Handler+0xde>
    b64c:	1ca8      	adds	r0, r5, #2
    b64e:	2201      	movs	r2, #1
    b650:	7801      	ldrb	r1, [r0, #0]
    b652:	b159      	cbz	r1, b66c <MPSL_IRQ_TIMER0_Handler+0x2c>
    b654:	2901      	cmp	r1, #1
    b656:	bf08      	it	eq
    b658:	706a      	strbeq	r2, [r5, #1]
    b65a:	d002      	beq.n	b662 <MPSL_IRQ_TIMER0_Handler+0x22>
    b65c:	7869      	ldrb	r1, [r5, #1]
    b65e:	2900      	cmp	r1, #0
    b660:	d058      	beq.n	b714 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b662:	2102      	movs	r1, #2
    b664:	7001      	strb	r1, [r0, #0]
    b666:	7840      	ldrb	r0, [r0, #1]
    b668:	f000 fb2e 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b66c:	4c2f      	ldr	r4, [pc, #188]	; (b72c <MPSL_IRQ_TIMER0_Handler+0xec>)
    b66e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b672:	f04f 0800 	mov.w	r8, #0
    b676:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b67a:	f44f 7780 	mov.w	r7, #256	; 0x100
    b67e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b682:	d00a      	beq.n	b69a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b684:	482a      	ldr	r0, [pc, #168]	; (b730 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b686:	6800      	ldr	r0, [r0, #0]
    b688:	b138      	cbz	r0, b69a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b68a:	2003      	movs	r0, #3
    b68c:	f000 fb1c 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b690:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b694:	2003      	movs	r0, #3
    b696:	f7fe fd05 	bl	a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b69a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b69e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b6a2:	d00a      	beq.n	b6ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    b6a4:	4823      	ldr	r0, [pc, #140]	; (b734 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b6a6:	6800      	ldr	r0, [r0, #0]
    b6a8:	b138      	cbz	r0, b6ba <MPSL_IRQ_TIMER0_Handler+0x7a>
    b6aa:	2002      	movs	r0, #2
    b6ac:	f000 fb0c 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b6b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b6b4:	2002      	movs	r0, #2
    b6b6:	f7fe fcf5 	bl	a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b6ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b6be:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b6c2:	d00a      	beq.n	b6da <MPSL_IRQ_TIMER0_Handler+0x9a>
    b6c4:	481c      	ldr	r0, [pc, #112]	; (b738 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b6c6:	6800      	ldr	r0, [r0, #0]
    b6c8:	b138      	cbz	r0, b6da <MPSL_IRQ_TIMER0_Handler+0x9a>
    b6ca:	2001      	movs	r0, #1
    b6cc:	f000 fafc 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b6d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b6d4:	2001      	movs	r0, #1
    b6d6:	f7fe fce5 	bl	a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b6da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b6de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b6e2:	bf08      	it	eq
    b6e4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6e8:	4814      	ldr	r0, [pc, #80]	; (b73c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b6ea:	6800      	ldr	r0, [r0, #0]
    b6ec:	2800      	cmp	r0, #0
    b6ee:	bf08      	it	eq
    b6f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6f4:	2000      	movs	r0, #0
    b6f6:	f000 fae7 	bl	bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b6fa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b6fe:	2004      	movs	r0, #4
    b700:	7028      	strb	r0, [r5, #0]
    b702:	f8c5 8004 	str.w	r8, [r5, #4]
    b706:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b70e:	2000      	movs	r0, #0
    b710:	f7fe bcc8 	b.w	a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b714:	f240 5169 	movw	r1, #1385	; 0x569
    b718:	206c      	movs	r0, #108	; 0x6c
    b71a:	f000 ffad 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b722:	2007      	movs	r0, #7
    b724:	f7fe bcbe 	b.w	a0a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b728:	20000028 	.word	0x20000028
    b72c:	40008000 	.word	0x40008000
    b730:	4000814c 	.word	0x4000814c
    b734:	40008148 	.word	0x40008148
    b738:	40008144 	.word	0x40008144
    b73c:	40008140 	.word	0x40008140
    b740:	2201      	movs	r2, #1
    b742:	0211      	lsls	r1, r2, #8
    b744:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b748:	2000      	movs	r0, #0
    b74a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b74e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b752:	f3bf 8f4f 	dsb	sy
    b756:	f3bf 8f6f 	isb	sy
    b75a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b75e:	490e      	ldr	r1, [pc, #56]	; (b798 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b760:	f841 2f04 	str.w	r2, [r1, #4]!
    b764:	1e43      	subs	r3, r0, #1
    b766:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b76a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b76e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b772:	4b0a      	ldr	r3, [pc, #40]	; (b79c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b774:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b778:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b77c:	1d1b      	adds	r3, r3, #4
    b77e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b782:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b786:	1d1b      	adds	r3, r3, #4
    b788:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b78c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b790:	60ca      	str	r2, [r1, #12]
    b792:	4903      	ldr	r1, [pc, #12]	; (b7a0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b794:	7048      	strb	r0, [r1, #1]
    b796:	4770      	bx	lr
    b798:	40008000 	.word	0x40008000
    b79c:	40008004 	.word	0x40008004
    b7a0:	20000028 	.word	0x20000028

0000b7a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b7a4:	4801      	ldr	r0, [pc, #4]	; (b7ac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b7a6:	6800      	ldr	r0, [r0, #0]
    b7a8:	4770      	bx	lr
    b7aa:	0000      	.short	0x0000
    b7ac:	4000b504 	.word	0x4000b504

0000b7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b7b0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b7b4:	f8df 8130 	ldr.w	r8, [pc, #304]	; b8e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b7b8:	4604      	mov	r4, r0
    b7ba:	f1a8 0702 	sub.w	r7, r8, #2
    b7be:	460e      	mov	r6, r1
    b7c0:	f898 c000 	ldrb.w	ip, [r8]
    b7c4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b7c8:	f1bc 0f01 	cmp.w	ip, #1
    b7cc:	d106      	bne.n	b7dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b7ce:	ea81 0204 	eor.w	r2, r1, r4
    b7d2:	4070      	eors	r0, r6
    b7d4:	4310      	orrs	r0, r2
    b7d6:	bf08      	it	eq
    b7d8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b7dc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b7e0:	4a42      	ldr	r2, [pc, #264]	; (b8ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b7e2:	6010      	str	r0, [r2, #0]
    b7e4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b7e8:	f1bc 0f00 	cmp.w	ip, #0
    b7ec:	bf07      	ittee	eq
    b7ee:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b7f2:	2200      	moveq	r2, #0
    b7f4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b7f8:	2201      	movne	r2, #1
    b7fa:	483d      	ldr	r0, [pc, #244]	; (b8f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b7fc:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b800:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b804:	2500      	movs	r5, #0
    b806:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b80a:	2a02      	cmp	r2, #2
    b80c:	d207      	bcs.n	b81e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b80e:	bf00      	nop
    b810:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b814:	50c5      	str	r5, [r0, r3]
    b816:	1c52      	adds	r2, r2, #1
    b818:	b2d2      	uxtb	r2, r2
    b81a:	2a02      	cmp	r2, #2
    b81c:	d3f8      	bcc.n	b810 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b81e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b822:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b826:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b82a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b82e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b832:	4a30      	ldr	r2, [pc, #192]	; (b8f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b834:	f8d2 9000 	ldr.w	r9, [r2]
    b838:	eba3 0909 	sub.w	r9, r3, r9
    b83c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b840:	f04f 0901 	mov.w	r9, #1
    b844:	f1ba 0f02 	cmp.w	sl, #2
    b848:	d32e      	bcc.n	b8a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b84a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b84e:	d82b      	bhi.n	b8a8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b850:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b854:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b858:	f1bc 0f00 	cmp.w	ip, #0
    b85c:	d005      	beq.n	b86a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b85e:	6810      	ldr	r0, [r2, #0]
    b860:	1a08      	subs	r0, r1, r0
    b862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b866:	2802      	cmp	r0, #2
    b868:	d3f9      	bcc.n	b85e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b86a:	f8c7 9004 	str.w	r9, [r7, #4]
    b86e:	703d      	strb	r5, [r7, #0]
    b870:	f7ff ff66 	bl	b740 <MPSL_IRQ_TIMER0_Handler+0x100>
    b874:	4820      	ldr	r0, [pc, #128]	; (b8f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b876:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b87a:	f365 0101 	bfi	r1, r5, #0, #2
    b87e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b882:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b886:	2102      	movs	r1, #2
    b888:	f361 0201 	bfi	r2, r1, #0, #2
    b88c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b890:	2110      	movs	r1, #16
    b892:	fa91 f1a1 	rbit	r1, r1
    b896:	fab1 f181 	clz	r1, r1
    b89a:	2909      	cmp	r1, #9
    b89c:	d909      	bls.n	b8b2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b89e:	f240 3155 	movw	r1, #853	; 0x355
    b8a2:	a016      	add	r0, pc, #88	; (adr r0, b8fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b8a4:	f000 febc 	bl	c620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b8a8:	f240 31b2 	movw	r1, #946	; 0x3b2
    b8ac:	206c      	movs	r0, #108	; 0x6c
    b8ae:	f000 fee3 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8b2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b8b6:	f8c0 900c 	str.w	r9, [r0, #12]
    b8ba:	6879      	ldr	r1, [r7, #4]
    b8bc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b8c0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b8c4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b8c8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b8cc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b8d0:	490d      	ldr	r1, [pc, #52]	; (b908 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b8d2:	0480      	lsls	r0, r0, #18
    b8d4:	6008      	str	r0, [r1, #0]
    b8d6:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b8da:	2004      	movs	r0, #4
    b8dc:	f888 0001 	strb.w	r0, [r8, #1]
    b8e0:	f888 9000 	strb.w	r9, [r8]
    b8e4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b8e8:	2000002a 	.word	0x2000002a
    b8ec:	4001f508 	.word	0x4001f508
    b8f0:	4000b000 	.word	0x4000b000
    b8f4:	4000b504 	.word	0x4000b504
    b8f8:	40008000 	.word	0x40008000
    b8fc:	5f66726e 	.word	0x5f66726e
    b900:	656d6974 	.word	0x656d6974
    b904:	00682e72 	.word	0x00682e72
    b908:	4001f504 	.word	0x4001f504

0000b90c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b910:	4c31      	ldr	r4, [pc, #196]	; (b9d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b912:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b916:	ea82 0c00 	eor.w	ip, r2, r0
    b91a:	404b      	eors	r3, r1
    b91c:	ea5c 0303 	orrs.w	r3, ip, r3
    b920:	bf14      	ite	ne
    b922:	2301      	movne	r3, #1
    b924:	2300      	moveq	r3, #0
    b926:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b9dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b92a:	f89c 8000 	ldrb.w	r8, [ip]
    b92e:	f1b8 0f02 	cmp.w	r8, #2
    b932:	d002      	beq.n	b93a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b934:	2b00      	cmp	r3, #0
    b936:	d03f      	beq.n	b9b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b938:	e003      	b.n	b942 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b93a:	2b00      	cmp	r3, #0
    b93c:	bf08      	it	eq
    b93e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b942:	7863      	ldrb	r3, [r4, #1]
    b944:	b3bb      	cbz	r3, b9b6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b946:	4d26      	ldr	r5, [pc, #152]	; (b9e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b948:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b94c:	602b      	str	r3, [r5, #0]
    b94e:	4e25      	ldr	r6, [pc, #148]	; (b9e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b950:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b954:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b958:	462f      	mov	r7, r5
    b95a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b95e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b962:	2500      	movs	r5, #0
    b964:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b968:	4d1f      	ldr	r5, [pc, #124]	; (b9e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b96a:	f8d5 9000 	ldr.w	r9, [r5]
    b96e:	eba3 0909 	sub.w	r9, r3, r9
    b972:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b976:	f1b9 0f02 	cmp.w	r9, #2
    b97a:	d327      	bcc.n	b9cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b97c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b980:	d824      	bhi.n	b9cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b982:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b986:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b98a:	f1b8 0f00 	cmp.w	r8, #0
    b98e:	d005      	beq.n	b99c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b990:	682b      	ldr	r3, [r5, #0]
    b992:	1ad3      	subs	r3, r2, r3
    b994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b998:	2b02      	cmp	r3, #2
    b99a:	d3f9      	bcc.n	b990 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b99c:	4d13      	ldr	r5, [pc, #76]	; (b9ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b99e:	2202      	movs	r2, #2
    b9a0:	0753      	lsls	r3, r2, #29
    b9a2:	602b      	str	r3, [r5, #0]
    b9a4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b9a8:	2004      	movs	r0, #4
    b9aa:	f88c 0001 	strb.w	r0, [ip, #1]
    b9ae:	f88c 2000 	strb.w	r2, [ip]
    b9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9b6:	e004      	b.n	b9c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b9b8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b9bc:	206c      	movs	r0, #108	; 0x6c
    b9be:	f000 fe5b 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9c2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b9c6:	206c      	movs	r0, #108	; 0x6c
    b9c8:	f000 fe56 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9cc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b9d0:	206c      	movs	r0, #108	; 0x6c
    b9d2:	f000 fe51 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9d6:	0000      	.short	0x0000
    b9d8:	20000028 	.word	0x20000028
    b9dc:	2000002a 	.word	0x2000002a
    b9e0:	4001f508 	.word	0x4001f508
    b9e4:	4000b000 	.word	0x4000b000
    b9e8:	4000b504 	.word	0x4000b504
    b9ec:	4001f504 	.word	0x4001f504

0000b9f0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b9f0:	4901      	ldr	r1, [pc, #4]	; (b9f8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b9f2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b9f6:	4770      	bx	lr
    b9f8:	20000028 	.word	0x20000028

0000b9fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba00:	f8df c0f4 	ldr.w	ip, [pc, #244]	; baf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    ba04:	f89c 4000 	ldrb.w	r4, [ip]
    ba08:	2c00      	cmp	r4, #0
    ba0a:	bf07      	ittee	eq
    ba0c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    ba10:	2100      	moveq	r1, #0
    ba12:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    ba16:	2101      	movne	r1, #1
    ba18:	4838      	ldr	r0, [pc, #224]	; (bafc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    ba1a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    ba1e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba22:	2300      	movs	r3, #0
    ba24:	2902      	cmp	r1, #2
    ba26:	bf38      	it	cc
    ba28:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    ba2c:	d207      	bcs.n	ba3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    ba2e:	bf00      	nop
    ba30:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    ba34:	5083      	str	r3, [r0, r2]
    ba36:	1c49      	adds	r1, r1, #1
    ba38:	b2c9      	uxtb	r1, r1
    ba3a:	2902      	cmp	r1, #2
    ba3c:	d3f8      	bcc.n	ba30 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    ba3e:	2c02      	cmp	r4, #2
    ba40:	d004      	beq.n	ba4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    ba42:	f240 31db 	movw	r1, #987	; 0x3db
    ba46:	206c      	movs	r0, #108	; 0x6c
    ba48:	f000 fe16 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba4c:	f3ef 8210 	mrs	r2, PRIMASK
    ba50:	b672      	cpsid	i
    ba52:	4c2b      	ldr	r4, [pc, #172]	; (bb00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    ba54:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    ba58:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    ba5c:	b12d      	cbz	r5, ba6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    ba5e:	68a1      	ldr	r1, [r4, #8]
    ba60:	1c49      	adds	r1, r1, #1
    ba62:	60a1      	str	r1, [r4, #8]
    ba64:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    ba68:	e7f4      	b.n	ba54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    ba6a:	68a0      	ldr	r0, [r4, #8]
    ba6c:	b902      	cbnz	r2, ba70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    ba6e:	b662      	cpsie	i
    ba70:	0a02      	lsrs	r2, r0, #8
    ba72:	0600      	lsls	r0, r0, #24
    ba74:	1840      	adds	r0, r0, r1
    ba76:	eb42 0103 	adc.w	r1, r2, r3
    ba7a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    ba7e:	1cc0      	adds	r0, r0, #3
    ba80:	f141 0100 	adc.w	r1, r1, #0
    ba84:	4f1f      	ldr	r7, [pc, #124]	; (bb04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    ba86:	2601      	movs	r6, #1
    ba88:	4d1f      	ldr	r5, [pc, #124]	; (bb08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    ba8a:	ea80 0902 	eor.w	r9, r0, r2
    ba8e:	ea81 0808 	eor.w	r8, r1, r8
    ba92:	ea59 0808 	orrs.w	r8, r9, r8
    ba96:	d00e      	beq.n	bab6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    ba98:	f8d7 8000 	ldr.w	r8, [r7]
    ba9c:	eba2 0808 	sub.w	r8, r2, r8
    baa0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    baa4:	f1b8 0f04 	cmp.w	r8, #4
    baa8:	d305      	bcc.n	bab6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    baaa:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    baae:	d802      	bhi.n	bab6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    bab0:	f7ff fe7e 	bl	b7b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    bab4:	e01b      	b.n	baee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    bab6:	6838      	ldr	r0, [r7, #0]
    bab8:	1a10      	subs	r0, r2, r0
    baba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    babe:	2802      	cmp	r0, #2
    bac0:	d313      	bcc.n	baea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    bac2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bac6:	d810      	bhi.n	baea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    bac8:	4910      	ldr	r1, [pc, #64]	; (bb0c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    baca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bace:	6008      	str	r0, [r1, #0]
    bad0:	6066      	str	r6, [r4, #4]
    bad2:	7023      	strb	r3, [r4, #0]
    bad4:	606e      	str	r6, [r5, #4]
    bad6:	60ee      	str	r6, [r5, #12]
    bad8:	0040      	lsls	r0, r0, #1
    bada:	1f09      	subs	r1, r1, #4
    badc:	6008      	str	r0, [r1, #0]
    bade:	2004      	movs	r0, #4
    bae0:	f88c 0001 	strb.w	r0, [ip, #1]
    bae4:	f88c 6000 	strb.w	r6, [ip]
    bae8:	e001      	b.n	baee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    baea:	6066      	str	r6, [r4, #4]
    baec:	7023      	strb	r3, [r4, #0]
    baee:	6860      	ldr	r0, [r4, #4]
    baf0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    baf8:	2000002a 	.word	0x2000002a
    bafc:	4000b000 	.word	0x4000b000
    bb00:	20000028 	.word	0x20000028
    bb04:	4000b504 	.word	0x4000b504
    bb08:	40008000 	.word	0x40008000
    bb0c:	4001f508 	.word	0x4001f508

0000bb10 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    bb10:	b410      	push	{r4}
    bb12:	f3ef 8410 	mrs	r4, PRIMASK
    bb16:	b672      	cpsid	i
    bb18:	4a0c      	ldr	r2, [pc, #48]	; (bb4c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    bb1a:	490d      	ldr	r1, [pc, #52]	; (bb50 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    bb1c:	f04f 0c00 	mov.w	ip, #0
    bb20:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    bb24:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    bb28:	b12b      	cbz	r3, bb36 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    bb2a:	6888      	ldr	r0, [r1, #8]
    bb2c:	1c40      	adds	r0, r0, #1
    bb2e:	6088      	str	r0, [r1, #8]
    bb30:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    bb34:	e7f4      	b.n	bb20 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    bb36:	6889      	ldr	r1, [r1, #8]
    bb38:	b904      	cbnz	r4, bb3c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    bb3a:	b662      	cpsie	i
    bb3c:	0a0a      	lsrs	r2, r1, #8
    bb3e:	0609      	lsls	r1, r1, #24
    bb40:	1808      	adds	r0, r1, r0
    bb42:	bc10      	pop	{r4}
    bb44:	eb42 010c 	adc.w	r1, r2, ip
    bb48:	4770      	bx	lr
    bb4a:	0000      	.short	0x0000
    bb4c:	4000b000 	.word	0x4000b000
    bb50:	20000028 	.word	0x20000028

0000bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb58:	4a56      	ldr	r2, [pc, #344]	; (bcb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    bb5a:	2501      	movs	r5, #1
    bb5c:	2400      	movs	r4, #0
    bb5e:	f892 c000 	ldrb.w	ip, [r2]
    bb62:	7852      	ldrb	r2, [r2, #1]
    bb64:	f44f 76a0 	mov.w	r6, #320	; 0x140
    bb68:	2807      	cmp	r0, #7
    bb6a:	d27d      	bcs.n	bc68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    bb6c:	e8df f000 	tbb	[pc, r0]
    bb70:	04040404 	.word	0x04040404
    bb74:	00606060 	.word	0x00606060
    bb78:	4b4f      	ldr	r3, [pc, #316]	; (bcb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    bb7a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    bb7e:	43ff      	mvns	r7, r7
    bb80:	ea77 0708 	orns	r7, r7, r8
    bb84:	bf04      	itt	eq
    bb86:	785b      	ldrbeq	r3, [r3, #1]
    bb88:	2b00      	cmpeq	r3, #0
    bb8a:	d003      	beq.n	bb94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    bb8c:	f1bc 0f02 	cmp.w	ip, #2
    bb90:	d005      	beq.n	bb9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    bb92:	e026      	b.n	bbe2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    bb94:	f44f 6186 	mov.w	r1, #1072	; 0x430
    bb98:	206c      	movs	r0, #108	; 0x6c
    bb9a:	f000 fd6d 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb9e:	1f13      	subs	r3, r2, #4
    bba0:	b2db      	uxtb	r3, r3
    bba2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    bba6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    bbaa:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    bbae:	2300      	movs	r3, #0
    bbb0:	f1bc 0f01 	cmp.w	ip, #1
    bbb4:	d003      	beq.n	bbbe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    bbb6:	f1bc 0f02 	cmp.w	ip, #2
    bbba:	d008      	beq.n	bbce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    bbbc:	e00e      	b.n	bbdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    bbbe:	2a04      	cmp	r2, #4
    bbc0:	bf24      	itt	cs
    bbc2:	6837      	ldrcs	r7, [r6, #0]
    bbc4:	2f00      	cmpcs	r7, #0
    bbc6:	bf08      	it	eq
    bbc8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    bbcc:	e006      	b.n	bbdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    bbce:	2a04      	cmp	r2, #4
    bbd0:	bf24      	itt	cs
    bbd2:	6837      	ldrcs	r7, [r6, #0]
    bbd4:	2f00      	cmpcs	r7, #0
    bbd6:	bf08      	it	eq
    bbd8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    bbdc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    bbe0:	d1e5      	bne.n	bbae <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    bbe2:	4b36      	ldr	r3, [pc, #216]	; (bcbc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    bbe4:	f100 0210 	add.w	r2, r0, #16
    bbe8:	fa05 f202 	lsl.w	r2, r5, r2
    bbec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    bbf0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    bbf4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    bbf8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    bbfc:	449c      	add	ip, r3
    bbfe:	f8cc 5000 	str.w	r5, [ip]
    bc02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    bc06:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    bc0a:	eba1 0c0c 	sub.w	ip, r1, ip
    bc0e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bc12:	f1bc 0f03 	cmp.w	ip, #3
    bc16:	bf3e      	ittt	cc
    bc18:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    bc1c:	2000      	movcc	r0, #0
    bc1e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc22:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    bc2a:	2001      	movs	r0, #1
    bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc30:	f1bc 0f00 	cmp.w	ip, #0
    bc34:	d006      	beq.n	bc44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    bc36:	4282      	cmp	r2, r0
    bc38:	d104      	bne.n	bc44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    bc3a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    bc3e:	206c      	movs	r0, #108	; 0x6c
    bc40:	f000 fd1a 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc44:	1f00      	subs	r0, r0, #4
    bc46:	b2c2      	uxtb	r2, r0
    bc48:	2a03      	cmp	r2, #3
    bc4a:	d304      	bcc.n	bc56 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    bc4c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    bc50:	206c      	movs	r0, #108	; 0x6c
    bc52:	f000 fd11 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc56:	4b1a      	ldr	r3, [pc, #104]	; (bcc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    bc58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bc5c:	4090      	lsls	r0, r2
    bc5e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    bc62:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    bc66:	e000      	b.n	bc6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    bc68:	e01f      	b.n	bcaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    bc6a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    bc6e:	f843 400c 	str.w	r4, [r3, ip]
    bc72:	f8df c050 	ldr.w	ip, [pc, #80]	; bcc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    bc76:	f8dc c000 	ldr.w	ip, [ip]
    bc7a:	eba1 0c0c 	sub.w	ip, r1, ip
    bc7e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bc82:	f1bc 0f02 	cmp.w	ip, #2
    bc86:	d30d      	bcc.n	bca4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bc88:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    bc8c:	d80a      	bhi.n	bca4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bc8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    bc92:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bc96:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    bc9a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    bc9e:	4628      	mov	r0, r5
    bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bca4:	4620      	mov	r0, r4
    bca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcaa:	f240 4154 	movw	r1, #1108	; 0x454
    bcae:	206c      	movs	r0, #108	; 0x6c
    bcb0:	f000 fce2 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bcb4:	2000002a 	.word	0x2000002a
    bcb8:	20000028 	.word	0x20000028
    bcbc:	40008000 	.word	0x40008000
    bcc0:	4000b000 	.word	0x4000b000
    bcc4:	4000b504 	.word	0x4000b504

0000bcc8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcca:	2101      	movs	r1, #1
    bccc:	2600      	movs	r6, #0
    bcce:	f44f 77a0 	mov.w	r7, #320	; 0x140
    bcd2:	2807      	cmp	r0, #7
    bcd4:	d24a      	bcs.n	bd6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    bcd6:	e8df f000 	tbb	[pc, r0]
    bcda:	0404      	.short	0x0404
    bcdc:	18180404 	.word	0x18180404
    bce0:	0018      	.short	0x0018
    bce2:	f100 0210 	add.w	r2, r0, #16
    bce6:	fa01 f202 	lsl.w	r2, r1, r2
    bcea:	4923      	ldr	r1, [pc, #140]	; (bd78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    bcec:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bcf0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bcf4:	2200      	movs	r2, #0
    bcf6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bcfa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    bcfe:	508e      	str	r6, [r1, r2]
    bd00:	491e      	ldr	r1, [pc, #120]	; (bd7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    bd02:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bd06:	9000      	str	r0, [sp, #0]
    bd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd0a:	4d1d      	ldr	r5, [pc, #116]	; (bd80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    bd0c:	1f01      	subs	r1, r0, #4
    bd0e:	b2cc      	uxtb	r4, r1
    bd10:	7829      	ldrb	r1, [r5, #0]
    bd12:	b181      	cbz	r1, bd36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bd14:	786a      	ldrb	r2, [r5, #1]
    bd16:	4282      	cmp	r2, r0
    bd18:	d10d      	bne.n	bd36 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bd1a:	4a1a      	ldr	r2, [pc, #104]	; (bd84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    bd1c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bd20:	6010      	str	r0, [r2, #0]
    bd22:	2901      	cmp	r1, #1
    bd24:	bf08      	it	eq
    bd26:	f7ff fd0b 	bleq	b740 <MPSL_IRQ_TIMER0_Handler+0x100>
    bd2a:	702e      	strb	r6, [r5, #0]
    bd2c:	4a16      	ldr	r2, [pc, #88]	; (bd88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bd2e:	f04f 30ff 	mov.w	r0, #4294967295
    bd32:	e9c2 0004 	strd	r0, r0, [r2, #16]
    bd36:	4915      	ldr	r1, [pc, #84]	; (bd8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bd38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bd3c:	40a0      	lsls	r0, r4
    bd3e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bd42:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bd46:	00a0      	lsls	r0, r4, #2
    bd48:	4408      	add	r0, r1
    bd4a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bd4e:	4a10      	ldr	r2, [pc, #64]	; (bd90 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bd50:	6812      	ldr	r2, [r2, #0]
    bd52:	1a80      	subs	r0, r0, r2
    bd54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bd58:	2802      	cmp	r0, #2
    bd5a:	bf24      	itt	cs
    bd5c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    bd60:	500e      	strcs	r6, [r1, r0]
    bd62:	480c      	ldr	r0, [pc, #48]	; (bd94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bd64:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bd68:	9000      	str	r0, [sp, #0]
    bd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd6c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bd70:	206c      	movs	r0, #108	; 0x6c
    bd72:	f000 fc81 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd76:	0000      	.short	0x0000
    bd78:	40008000 	.word	0x40008000
    bd7c:	40008140 	.word	0x40008140
    bd80:	2000002a 	.word	0x2000002a
    bd84:	4001f508 	.word	0x4001f508
    bd88:	20000028 	.word	0x20000028
    bd8c:	4000b000 	.word	0x4000b000
    bd90:	4000b504 	.word	0x4000b504
    bd94:	4000b140 	.word	0x4000b140

0000bd98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bd98:	481a      	ldr	r0, [pc, #104]	; (be04 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    bd9a:	7800      	ldrb	r0, [r0, #0]
    bd9c:	2800      	cmp	r0, #0
    bd9e:	bf07      	ittee	eq
    bda0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    bda4:	2100      	moveq	r1, #0
    bda6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    bdaa:	2101      	movne	r1, #1
    bdac:	4a16      	ldr	r2, [pc, #88]	; (be08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    bdae:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bdb2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bdb6:	2000      	movs	r0, #0
    bdb8:	2902      	cmp	r1, #2
    bdba:	bf38      	it	cc
    bdbc:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    bdc0:	d207      	bcs.n	bdd2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bdc2:	bf00      	nop
    bdc4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    bdc8:	50d0      	str	r0, [r2, r3]
    bdca:	1c49      	adds	r1, r1, #1
    bdcc:	b2c9      	uxtb	r1, r1
    bdce:	2902      	cmp	r1, #2
    bdd0:	d3f8      	bcc.n	bdc4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    bdd2:	490e      	ldr	r1, [pc, #56]	; (be0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    bdd4:	f04f 32ff 	mov.w	r2, #4294967295
    bdd8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bddc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bde0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    bde4:	1d0a      	adds	r2, r1, #4
    bde6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bdea:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    bdee:	1d12      	adds	r2, r2, #4
    bdf0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bdf4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    bdf8:	1d12      	adds	r2, r2, #4
    bdfa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bdfe:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    be02:	4770      	bx	lr
    be04:	2000002a 	.word	0x2000002a
    be08:	4000b000 	.word	0x4000b000
    be0c:	40008000 	.word	0x40008000

0000be10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    be10:	b570      	push	{r4, r5, r6, lr}
    be12:	f3ef 8110 	mrs	r1, PRIMASK
    be16:	b672      	cpsid	i
    be18:	2400      	movs	r4, #0
    be1a:	4b0d      	ldr	r3, [pc, #52]	; (be50 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    be1c:	4a0d      	ldr	r2, [pc, #52]	; (be54 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    be1e:	bf00      	nop
    be20:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    be24:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    be28:	f1bc 0f00 	cmp.w	ip, #0
    be2c:	d005      	beq.n	be3a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    be2e:	6890      	ldr	r0, [r2, #8]
    be30:	1c40      	adds	r0, r0, #1
    be32:	6090      	str	r0, [r2, #8]
    be34:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    be38:	e7f2      	b.n	be20 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    be3a:	6895      	ldr	r5, [r2, #8]
    be3c:	b901      	cbnz	r1, be40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    be3e:	b662      	cpsie	i
    be40:	f004 fd9d 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    be44:	4a04      	ldr	r2, [pc, #16]	; (be58 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    be46:	4621      	mov	r1, r4
    be48:	fbe5 0102 	umlal	r0, r1, r5, r2
    be4c:	bd70      	pop	{r4, r5, r6, pc}
    be4e:	0000      	.short	0x0000
    be50:	4000b000 	.word	0x4000b000
    be54:	20000028 	.word	0x20000028
    be58:	1e848000 	.word	0x1e848000

0000be5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    be5c:	b510      	push	{r4, lr}
    be5e:	2807      	cmp	r0, #7
    be60:	d20d      	bcs.n	be7e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    be62:	e8df f000 	tbb	[pc, r0]
    be66:	0404      	.short	0x0404
    be68:	06060404 	.word	0x06060404
    be6c:	0006      	.short	0x0006
    be6e:	4906      	ldr	r1, [pc, #24]	; (be88 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    be70:	e002      	b.n	be78 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    be72:	1f00      	subs	r0, r0, #4
    be74:	4905      	ldr	r1, [pc, #20]	; (be8c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    be76:	b2c0      	uxtb	r0, r0
    be78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    be7c:	bd10      	pop	{r4, pc}
    be7e:	f240 417b 	movw	r1, #1147	; 0x47b
    be82:	206c      	movs	r0, #108	; 0x6c
    be84:	f000 fbf8 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be88:	40008140 	.word	0x40008140
    be8c:	4000b140 	.word	0x4000b140

0000be90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    be90:	b570      	push	{r4, r5, r6, lr}
    be92:	481b      	ldr	r0, [pc, #108]	; (bf00 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    be94:	2400      	movs	r4, #0
    be96:	2104      	movs	r1, #4
    be98:	7004      	strb	r4, [r0, #0]
    be9a:	1e80      	subs	r0, r0, #2
    be9c:	7001      	strb	r1, [r0, #0]
    be9e:	1f49      	subs	r1, r1, #5
    bea0:	e9c0 1104 	strd	r1, r1, [r0, #16]
    bea4:	6084      	str	r4, [r0, #8]
    bea6:	f7ff fc4b 	bl	b740 <MPSL_IRQ_TIMER0_Handler+0x100>
    beaa:	2501      	movs	r5, #1
    beac:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    beb0:	02eb      	lsls	r3, r5, #11
    beb2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    beb6:	f3bf 8f4f 	dsb	sy
    beba:	f3bf 8f6f 	isb	sy
    bebe:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bec2:	4a10      	ldr	r2, [pc, #64]	; (bf04 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    bec4:	6055      	str	r5, [r2, #4]
    bec6:	6095      	str	r5, [r2, #8]
    bec8:	480f      	ldr	r0, [pc, #60]	; (bf08 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    beca:	6801      	ldr	r1, [r0, #0]
    becc:	2900      	cmp	r1, #0
    bece:	d1fc      	bne.n	beca <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    bed0:	480e      	ldr	r0, [pc, #56]	; (bf0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    bed2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bed6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    beda:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    bede:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    bee2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    bee6:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    beea:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    beee:	6015      	str	r5, [r2, #0]
    bef0:	f44f 7082 	mov.w	r0, #260	; 0x104
    bef4:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    bef8:	2002      	movs	r0, #2
    befa:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    befe:	bd70      	pop	{r4, r5, r6, pc}
    bf00:	2000002a 	.word	0x2000002a
    bf04:	4000b000 	.word	0x4000b000
    bf08:	4000b504 	.word	0x4000b504
    bf0c:	00070002 	.word	0x00070002

0000bf10 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bf10:	4808      	ldr	r0, [pc, #32]	; (bf34 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bf12:	f990 0000 	ldrsb.w	r0, [r0]
    bf16:	2800      	cmp	r0, #0
    bf18:	bfb8      	it	lt
    bf1a:	4770      	bxlt	lr
    bf1c:	f000 011f 	and.w	r1, r0, #31
    bf20:	2201      	movs	r2, #1
    bf22:	fa02 f101 	lsl.w	r1, r2, r1
    bf26:	0940      	lsrs	r0, r0, #5
    bf28:	0080      	lsls	r0, r0, #2
    bf2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bf2e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bf32:	4770      	bx	lr
    bf34:	20000384 	.word	0x20000384

0000bf38 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bf38:	4803      	ldr	r0, [pc, #12]	; (bf48 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bf3a:	7800      	ldrb	r0, [r0, #0]
    bf3c:	2803      	cmp	r0, #3
    bf3e:	bf0c      	ite	eq
    bf40:	2001      	moveq	r0, #1
    bf42:	2000      	movne	r0, #0
    bf44:	4770      	bx	lr
    bf46:	0000      	.short	0x0000
    bf48:	2000035c 	.word	0x2000035c

0000bf4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bf4c:	4801      	ldr	r0, [pc, #4]	; (bf54 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bf4e:	8840      	ldrh	r0, [r0, #2]
    bf50:	4770      	bx	lr
    bf52:	0000      	.short	0x0000
    bf54:	2000035c 	.word	0x2000035c

0000bf58 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bf58:	4803      	ldr	r0, [pc, #12]	; (bf68 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bf5a:	7800      	ldrb	r0, [r0, #0]
    bf5c:	2802      	cmp	r0, #2
    bf5e:	bf16      	itet	ne
    bf60:	2803      	cmpne	r0, #3
    bf62:	2001      	moveq	r0, #1
    bf64:	2000      	movne	r0, #0
    bf66:	4770      	bx	lr
    bf68:	2000035c 	.word	0x2000035c

0000bf6c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bf6c:	4802      	ldr	r0, [pc, #8]	; (bf78 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bf6e:	2100      	movs	r1, #0
    bf70:	7001      	strb	r1, [r0, #0]
    bf72:	8041      	strh	r1, [r0, #2]
    bf74:	4770      	bx	lr
    bf76:	0000      	.short	0x0000
    bf78:	2000035c 	.word	0x2000035c

0000bf7c <MPSL_IRQ_CLOCK_Handler>:
    bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf80:	4c16      	ldr	r4, [pc, #88]	; (bfdc <MPSL_IRQ_CLOCK_Handler+0x60>)
    bf82:	7a60      	ldrb	r0, [r4, #9]
    bf84:	2800      	cmp	r0, #0
    bf86:	d027      	beq.n	bfd8 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bf88:	f44f 7180 	mov.w	r1, #256	; 0x100
    bf8c:	058d      	lsls	r5, r1, #22
    bf8e:	4628      	mov	r0, r5
    bf90:	f004 fd20 	bl	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bf94:	4680      	mov	r8, r0
    bf96:	f44f 7182 	mov.w	r1, #260	; 0x104
    bf9a:	4628      	mov	r0, r5
    bf9c:	f004 fd1a 	bl	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfa0:	2600      	movs	r6, #0
    bfa2:	4607      	mov	r7, r0
    bfa4:	f1b8 0f00 	cmp.w	r8, #0
    bfa8:	d009      	beq.n	bfbe <MPSL_IRQ_CLOCK_Handler+0x42>
    bfaa:	2001      	movs	r0, #1
    bfac:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bfb0:	7920      	ldrb	r0, [r4, #4]
    bfb2:	b120      	cbz	r0, bfbe <MPSL_IRQ_CLOCK_Handler+0x42>
    bfb4:	7126      	strb	r6, [r4, #4]
    bfb6:	69e0      	ldr	r0, [r4, #28]
    bfb8:	b108      	cbz	r0, bfbe <MPSL_IRQ_CLOCK_Handler+0x42>
    bfba:	4780      	blx	r0
    bfbc:	61e6      	str	r6, [r4, #28]
    bfbe:	b137      	cbz	r7, bfce <MPSL_IRQ_CLOCK_Handler+0x52>
    bfc0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bfc4:	2002      	movs	r0, #2
    bfc6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bfca:	f000 fa75 	bl	c4b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bfce:	4640      	mov	r0, r8
    bfd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bfd4:	f000 b858 	b.w	c088 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfdc:	20000314 	.word	0x20000314
    bfe0:	b510      	push	{r4, lr}
    bfe2:	f004 fda1 	bl	10b28 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bfe6:	b930      	cbnz	r0, bff6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bfe8:	f004 fdbf 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bfec:	b918      	cbnz	r0, bff6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bfee:	f004 fdf2 	bl	10bd6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bff2:	2800      	cmp	r0, #0
    bff4:	d002      	beq.n	bffc <MPSL_IRQ_CLOCK_Handler+0x80>
    bff6:	4902      	ldr	r1, [pc, #8]	; (c000 <MPSL_IRQ_CLOCK_Handler+0x84>)
    bff8:	2002      	movs	r0, #2
    bffa:	6008      	str	r0, [r1, #0]
    bffc:	bd10      	pop	{r4, pc}
    bffe:	0000      	.short	0x0000
    c000:	40000c34 	.word	0x40000c34
    c004:	b570      	push	{r4, r5, r6, lr}
    c006:	f000 f99b 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c00a:	f000 fabd 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c00e:	4c09      	ldr	r4, [pc, #36]	; (c034 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    c010:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c014:	b130      	cbz	r0, c024 <MPSL_IRQ_CLOCK_Handler+0xa8>
    c016:	f7ff ffe3 	bl	bfe0 <MPSL_IRQ_CLOCK_Handler+0x64>
    c01a:	2001      	movs	r0, #1
    c01c:	6128      	str	r0, [r5, #16]
    c01e:	2004      	movs	r0, #4
    c020:	72a0      	strb	r0, [r4, #10]
    c022:	e004      	b.n	c02e <MPSL_IRQ_CLOCK_Handler+0xb2>
    c024:	2003      	movs	r0, #3
    c026:	72a0      	strb	r0, [r4, #10]
    c028:	2001      	movs	r0, #1
    c02a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c02e:	2000      	movs	r0, #0
    c030:	71e0      	strb	r0, [r4, #7]
    c032:	bd70      	pop	{r4, r5, r6, pc}
    c034:	20000314 	.word	0x20000314
    c038:	b570      	push	{r4, r5, r6, lr}
    c03a:	4c12      	ldr	r4, [pc, #72]	; (c084 <MPSL_IRQ_CLOCK_Handler+0x108>)
    c03c:	79a0      	ldrb	r0, [r4, #6]
    c03e:	b1e0      	cbz	r0, c07a <MPSL_IRQ_CLOCK_Handler+0xfe>
    c040:	79e1      	ldrb	r1, [r4, #7]
    c042:	1e40      	subs	r0, r0, #1
    c044:	4281      	cmp	r1, r0
    c046:	da18      	bge.n	c07a <MPSL_IRQ_CLOCK_Handler+0xfe>
    c048:	f000 fa9e 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c04c:	4605      	mov	r5, r0
    c04e:	f000 fb87 	bl	c760 <mpsl_temperature_get>
    c052:	79a1      	ldrb	r1, [r4, #6]
    c054:	2901      	cmp	r1, #1
    c056:	d902      	bls.n	c05e <MPSL_IRQ_CLOCK_Handler+0xe2>
    c058:	79e1      	ldrb	r1, [r4, #7]
    c05a:	1c49      	adds	r1, r1, #1
    c05c:	71e1      	strb	r1, [r4, #7]
    c05e:	b10d      	cbz	r5, c064 <MPSL_IRQ_CLOCK_Handler+0xe8>
    c060:	6961      	ldr	r1, [r4, #20]
    c062:	e000      	b.n	c066 <MPSL_IRQ_CLOCK_Handler+0xea>
    c064:	6921      	ldr	r1, [r4, #16]
    c066:	1a41      	subs	r1, r0, r1
    c068:	2902      	cmp	r1, #2
    c06a:	da02      	bge.n	c072 <MPSL_IRQ_CLOCK_Handler+0xf6>
    c06c:	f111 0f02 	cmn.w	r1, #2
    c070:	dc07      	bgt.n	c082 <MPSL_IRQ_CLOCK_Handler+0x106>
    c072:	b10d      	cbz	r5, c078 <MPSL_IRQ_CLOCK_Handler+0xfc>
    c074:	6160      	str	r0, [r4, #20]
    c076:	e000      	b.n	c07a <MPSL_IRQ_CLOCK_Handler+0xfe>
    c078:	6120      	str	r0, [r4, #16]
    c07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c07e:	f7ff bfc1 	b.w	c004 <MPSL_IRQ_CLOCK_Handler+0x88>
    c082:	bd70      	pop	{r4, r5, r6, pc}
    c084:	20000314 	.word	0x20000314
    c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c08c:	4606      	mov	r6, r0
    c08e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c092:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c096:	4628      	mov	r0, r5
    c098:	f004 fc9c 	bl	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c09c:	4680      	mov	r8, r0
    c09e:	f44f 7188 	mov.w	r1, #272	; 0x110
    c0a2:	4628      	mov	r0, r5
    c0a4:	f004 fc96 	bl	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0a8:	4c27      	ldr	r4, [pc, #156]	; (c148 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c0aa:	4682      	mov	sl, r0
    c0ac:	7827      	ldrb	r7, [r4, #0]
    c0ae:	f104 0008 	add.w	r0, r4, #8
    c0b2:	f004 fd03 	bl	10abc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c0b6:	b110      	cbz	r0, c0be <MPSL_IRQ_CLOCK_Handler+0x142>
    c0b8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    c0bc:	e016      	b.n	c0ec <MPSL_IRQ_CLOCK_Handler+0x170>
    c0be:	f04f 0901 	mov.w	r9, #1
    c0c2:	b146      	cbz	r6, c0d6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c0c4:	7aa0      	ldrb	r0, [r4, #10]
    c0c6:	2803      	cmp	r0, #3
    c0c8:	d105      	bne.n	c0d6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c0ca:	2004      	movs	r0, #4
    c0cc:	72a0      	strb	r0, [r4, #10]
    c0ce:	f7ff ff87 	bl	bfe0 <MPSL_IRQ_CLOCK_Handler+0x64>
    c0d2:	f8c5 9010 	str.w	r9, [r5, #16]
    c0d6:	2600      	movs	r6, #0
    c0d8:	f1b8 0f00 	cmp.w	r8, #0
    c0dc:	d018      	beq.n	c110 <MPSL_IRQ_CLOCK_Handler+0x194>
    c0de:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c0e2:	7aa0      	ldrb	r0, [r4, #10]
    c0e4:	2804      	cmp	r0, #4
    c0e6:	d004      	beq.n	c0f2 <MPSL_IRQ_CLOCK_Handler+0x176>
    c0e8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c0ec:	206d      	movs	r0, #109	; 0x6d
    c0ee:	f000 fac3 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0f2:	f004 fd19 	bl	10b28 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c0f6:	b928      	cbnz	r0, c104 <MPSL_IRQ_CLOCK_Handler+0x188>
    c0f8:	f004 fd37 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c0fc:	b910      	cbnz	r0, c104 <MPSL_IRQ_CLOCK_Handler+0x188>
    c0fe:	f004 fd6a 	bl	10bd6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c102:	b108      	cbz	r0, c108 <MPSL_IRQ_CLOCK_Handler+0x18c>
    c104:	4811      	ldr	r0, [pc, #68]	; (c14c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c106:	6006      	str	r6, [r0, #0]
    c108:	2002      	movs	r0, #2
    c10a:	72a0      	strb	r0, [r4, #10]
    c10c:	f000 f8fc 	bl	c308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c110:	f1ba 0f00 	cmp.w	sl, #0
    c114:	d008      	beq.n	c128 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c116:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c11a:	7aa0      	ldrb	r0, [r4, #10]
    c11c:	2802      	cmp	r0, #2
    c11e:	d101      	bne.n	c124 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c120:	f7ff ff8a 	bl	c038 <MPSL_IRQ_CLOCK_Handler+0xbc>
    c124:	f8c5 9014 	str.w	r9, [r5, #20]
    c128:	b13f      	cbz	r7, c13a <MPSL_IRQ_CLOCK_Handler+0x1be>
    c12a:	7026      	strb	r6, [r4, #0]
    c12c:	7aa0      	ldrb	r0, [r4, #10]
    c12e:	2802      	cmp	r0, #2
    c130:	d101      	bne.n	c136 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c132:	f7ff ff67 	bl	c004 <MPSL_IRQ_CLOCK_Handler+0x88>
    c136:	f000 f8e7 	bl	c308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c13a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c13e:	4802      	ldr	r0, [pc, #8]	; (c148 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c140:	3008      	adds	r0, #8
    c142:	f004 bcd2 	b.w	10aea <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c146:	0000      	.short	0x0000
    c148:	20000314 	.word	0x20000314
    c14c:	40000c34 	.word	0x40000c34
    c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c154:	4c49      	ldr	r4, [pc, #292]	; (c27c <MPSL_IRQ_CLOCK_Handler+0x300>)
    c156:	2700      	movs	r7, #0
    c158:	4606      	mov	r6, r0
    c15a:	61a7      	str	r7, [r4, #24]
    c15c:	7842      	ldrb	r2, [r0, #1]
    c15e:	7881      	ldrb	r1, [r0, #2]
    c160:	7800      	ldrb	r0, [r0, #0]
    c162:	72e0      	strb	r0, [r4, #11]
    c164:	7162      	strb	r2, [r4, #5]
    c166:	71a1      	strb	r1, [r4, #6]
    c168:	71e7      	strb	r7, [r4, #7]
    c16a:	f04f 0801 	mov.w	r8, #1
    c16e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c172:	2805      	cmp	r0, #5
    c174:	d225      	bcs.n	c1c2 <MPSL_IRQ_CLOCK_Handler+0x246>
    c176:	e8df f000 	tbb	[pc, r0]
    c17a:	0310      	.short	0x0310
    c17c:	00222006 	.word	0x00222006
    c180:	f8c4 8018 	str.w	r8, [r4, #24]
    c184:	e009      	b.n	c19a <MPSL_IRQ_CLOCK_Handler+0x21e>
    c186:	f000 f8db 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c18a:	2101      	movs	r1, #1
    c18c:	4628      	mov	r0, r5
    c18e:	f004 fc26 	bl	109de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c192:	2800      	cmp	r0, #0
    c194:	d0f9      	beq.n	c18a <MPSL_IRQ_CLOCK_Handler+0x20e>
    c196:	2002      	movs	r0, #2
    c198:	61a0      	str	r0, [r4, #24]
    c19a:	f004 fc4c 	bl	10a36 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c19e:	b1c0      	cbz	r0, c1d2 <MPSL_IRQ_CLOCK_Handler+0x256>
    c1a0:	f000 fa0c 	bl	c5bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c1a4:	7e21      	ldrb	r1, [r4, #24]
    c1a6:	f001 0103 	and.w	r1, r1, #3
    c1aa:	4288      	cmp	r0, r1
    c1ac:	d111      	bne.n	c1d2 <MPSL_IRQ_CLOCK_Handler+0x256>
    c1ae:	79b0      	ldrb	r0, [r6, #6]
    c1b0:	b160      	cbz	r0, c1cc <MPSL_IRQ_CLOCK_Handler+0x250>
    c1b2:	2002      	movs	r0, #2
    c1b4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c1b8:	e044      	b.n	c244 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c1ba:	4831      	ldr	r0, [pc, #196]	; (c280 <MPSL_IRQ_CLOCK_Handler+0x304>)
    c1bc:	e7ec      	b.n	c198 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c1be:	4831      	ldr	r0, [pc, #196]	; (c284 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c1c0:	e7ea      	b.n	c198 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c1c2:	f240 313d 	movw	r1, #829	; 0x33d
    c1c6:	206d      	movs	r0, #109	; 0x6d
    c1c8:	f000 fa56 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1cc:	f000 f9ca 	bl	c564 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c1d0:	e038      	b.n	c244 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c1d2:	f8c5 800c 	str.w	r8, [r5, #12]
    c1d6:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c1da:	69a0      	ldr	r0, [r4, #24]
    c1dc:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c1e0:	f004 fc8e 	bl	10b00 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c1e4:	b940      	cbnz	r0, c1f8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c1e6:	f004 fc95 	bl	10b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c1ea:	b928      	cbnz	r0, c1f8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c1ec:	f004 fca9 	bl	10b42 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c1f0:	b910      	cbnz	r0, c1f8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c1f2:	f004 fcba 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c1f6:	b138      	cbz	r0, c208 <MPSL_IRQ_CLOCK_Handler+0x28c>
    c1f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c1fc:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c200:	4921      	ldr	r1, [pc, #132]	; (c288 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c202:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c206:	6008      	str	r0, [r1, #0]
    c208:	f004 fc7a 	bl	10b00 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c20c:	b940      	cbnz	r0, c220 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c20e:	f004 fc81 	bl	10b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c212:	b928      	cbnz	r0, c220 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c214:	f004 fc95 	bl	10b42 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c218:	b910      	cbnz	r0, c220 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c21a:	f004 fca6 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c21e:	b118      	cbz	r0, c228 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c220:	4919      	ldr	r1, [pc, #100]	; (c288 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c222:	3110      	adds	r1, #16
    c224:	f8c1 8000 	str.w	r8, [r1]
    c228:	f8c5 8008 	str.w	r8, [r5, #8]
    c22c:	2002      	movs	r0, #2
    c22e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c232:	79b0      	ldrb	r0, [r6, #6]
    c234:	b930      	cbnz	r0, c244 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c236:	f000 f829 	bl	c28c <MPSL_IRQ_CLOCK_Handler+0x310>
    c23a:	2002      	movs	r0, #2
    c23c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c240:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c244:	79a0      	ldrb	r0, [r4, #6]
    c246:	b170      	cbz	r0, c266 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c248:	7830      	ldrb	r0, [r6, #0]
    c24a:	b960      	cbnz	r0, c266 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c24c:	f000 f99c 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c250:	4606      	mov	r6, r0
    c252:	f000 fa85 	bl	c760 <mpsl_temperature_get>
    c256:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c25a:	b116      	cbz	r6, c262 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c25c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c260:	e001      	b.n	c266 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c262:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c266:	2101      	movs	r1, #1
    c268:	4628      	mov	r0, r5
    c26a:	f004 fbb8 	bl	109de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c26e:	b108      	cbz	r0, c274 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c270:	f000 f984 	bl	c57c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c274:	72a7      	strb	r7, [r4, #10]
    c276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c27a:	0000      	.short	0x0000
    c27c:	20000314 	.word	0x20000314
    c280:	00020001 	.word	0x00020001
    c284:	00030001 	.word	0x00030001
    c288:	4000053c 	.word	0x4000053c
    c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c290:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c294:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c298:	f010 0f02 	tst.w	r0, #2
    c29c:	d011      	beq.n	c2c2 <MPSL_IRQ_CLOCK_Handler+0x346>
    c29e:	4c16      	ldr	r4, [pc, #88]	; (c2f8 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c2a0:	6820      	ldr	r0, [r4, #0]
    c2a2:	43c0      	mvns	r0, r0
    c2a4:	f340 1600 	sbfx	r6, r0, #4, #1
    c2a8:	6820      	ldr	r0, [r4, #0]
    c2aa:	f040 0010 	orr.w	r0, r0, #16
    c2ae:	6020      	str	r0, [r4, #0]
    c2b0:	f44f 7782 	mov.w	r7, #260	; 0x104
    c2b4:	4639      	mov	r1, r7
    c2b6:	4628      	mov	r0, r5
    c2b8:	1c76      	adds	r6, r6, #1
    c2ba:	f004 fb8b 	bl	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2be:	b128      	cbz	r0, c2cc <MPSL_IRQ_CLOCK_Handler+0x350>
    c2c0:	e00a      	b.n	c2d8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c2c2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c2c6:	206d      	movs	r0, #109	; 0x6d
    c2c8:	f000 f9d6 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2cc:	f004 fc8f 	bl	10bee <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c2d0:	e002      	b.n	c2d8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c2d2:	bf00      	nop
    c2d4:	f004 fc89 	bl	10bea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c2d8:	4639      	mov	r1, r7
    c2da:	4628      	mov	r0, r5
    c2dc:	f004 fb7a 	bl	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2e0:	2800      	cmp	r0, #0
    c2e2:	d0f7      	beq.n	c2d4 <MPSL_IRQ_CLOCK_Handler+0x358>
    c2e4:	f000 f93e 	bl	c564 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c2e8:	2e00      	cmp	r6, #0
    c2ea:	d103      	bne.n	c2f4 <MPSL_IRQ_CLOCK_Handler+0x378>
    c2ec:	6820      	ldr	r0, [r4, #0]
    c2ee:	f020 0010 	bic.w	r0, r0, #16
    c2f2:	6020      	str	r0, [r4, #0]
    c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2f8:	e000ed10 	.word	0xe000ed10

0000c2fc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c2fc:	4801      	ldr	r0, [pc, #4]	; (c304 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c2fe:	89c0      	ldrh	r0, [r0, #14]
    c300:	4770      	bx	lr
    c302:	0000      	.short	0x0000
    c304:	20000314 	.word	0x20000314

0000c308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c308:	b510      	push	{r4, lr}
    c30a:	f3ef 8410 	mrs	r4, PRIMASK
    c30e:	b672      	cpsid	i
    c310:	480a      	ldr	r0, [pc, #40]	; (c33c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c312:	7841      	ldrb	r1, [r0, #1]
    c314:	b129      	cbz	r1, c322 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c316:	7841      	ldrb	r1, [r0, #1]
    c318:	1e49      	subs	r1, r1, #1
    c31a:	7041      	strb	r1, [r0, #1]
    c31c:	7841      	ldrb	r1, [r0, #1]
    c31e:	b129      	cbz	r1, c32c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c320:	e008      	b.n	c334 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c322:	f240 1119 	movw	r1, #281	; 0x119
    c326:	206d      	movs	r0, #109	; 0x6d
    c328:	f000 f9a6 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c32c:	7880      	ldrb	r0, [r0, #2]
    c32e:	b908      	cbnz	r0, c334 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c330:	f000 f938 	bl	c5a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c334:	2c00      	cmp	r4, #0
    c336:	d100      	bne.n	c33a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c338:	b662      	cpsie	i
    c33a:	bd10      	pop	{r4, pc}
    c33c:	20000314 	.word	0x20000314

0000c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c340:	b510      	push	{r4, lr}
    c342:	f3ef 8410 	mrs	r4, PRIMASK
    c346:	b672      	cpsid	i
    c348:	4806      	ldr	r0, [pc, #24]	; (c364 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c34a:	7841      	ldrb	r1, [r0, #1]
    c34c:	1c49      	adds	r1, r1, #1
    c34e:	7041      	strb	r1, [r0, #1]
    c350:	7840      	ldrb	r0, [r0, #1]
    c352:	2801      	cmp	r0, #1
    c354:	d101      	bne.n	c35a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c356:	f004 fb59 	bl	10a0c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c35a:	2c00      	cmp	r4, #0
    c35c:	d100      	bne.n	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c35e:	b662      	cpsie	i
    c360:	bd10      	pop	{r4, pc}
    c362:	0000      	.short	0x0000
    c364:	20000314 	.word	0x20000314

0000c368 <mpsl_clock_hfclk_release>:
    c368:	4805      	ldr	r0, [pc, #20]	; (c380 <mpsl_clock_hfclk_release+0x18>)
    c36a:	b510      	push	{r4, lr}
    c36c:	78c1      	ldrb	r1, [r0, #3]
    c36e:	b121      	cbz	r1, c37a <mpsl_clock_hfclk_release+0x12>
    c370:	2100      	movs	r1, #0
    c372:	7101      	strb	r1, [r0, #4]
    c374:	70c1      	strb	r1, [r0, #3]
    c376:	f7ff ffc7 	bl	c308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c37a:	2000      	movs	r0, #0
    c37c:	bd10      	pop	{r4, pc}
    c37e:	0000      	.short	0x0000
    c380:	20000314 	.word	0x20000314

0000c384 <mpsl_clock_hfclk_request>:
    c384:	b570      	push	{r4, r5, r6, lr}
    c386:	4c0c      	ldr	r4, [pc, #48]	; (c3b8 <mpsl_clock_hfclk_request+0x34>)
    c388:	78e1      	ldrb	r1, [r4, #3]
    c38a:	b961      	cbnz	r1, c3a6 <mpsl_clock_hfclk_request+0x22>
    c38c:	2501      	movs	r5, #1
    c38e:	70e5      	strb	r5, [r4, #3]
    c390:	61e0      	str	r0, [r4, #28]
    c392:	f7ff ffd5 	bl	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c396:	f000 f8f7 	bl	c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c39a:	b130      	cbz	r0, c3aa <mpsl_clock_hfclk_request+0x26>
    c39c:	69e0      	ldr	r0, [r4, #28]
    c39e:	b110      	cbz	r0, c3a6 <mpsl_clock_hfclk_request+0x22>
    c3a0:	4780      	blx	r0
    c3a2:	2000      	movs	r0, #0
    c3a4:	61e0      	str	r0, [r4, #28]
    c3a6:	2000      	movs	r0, #0
    c3a8:	bd70      	pop	{r4, r5, r6, pc}
    c3aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3ae:	7125      	strb	r5, [r4, #4]
    c3b0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c3b4:	e7f7      	b.n	c3a6 <mpsl_clock_hfclk_request+0x22>
    c3b6:	0000      	.short	0x0000
    c3b8:	20000314 	.word	0x20000314

0000c3bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3c0:	0005      	movs	r5, r0
    c3c2:	f06f 0015 	mvn.w	r0, #21
    c3c6:	d03f      	beq.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3c8:	7829      	ldrb	r1, [r5, #0]
    c3ca:	2904      	cmp	r1, #4
    c3cc:	d83c      	bhi.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3ce:	2900      	cmp	r1, #0
    c3d0:	7869      	ldrb	r1, [r5, #1]
    c3d2:	d03b      	beq.n	c44c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c3d4:	2900      	cmp	r1, #0
    c3d6:	d137      	bne.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3d8:	78a9      	ldrb	r1, [r5, #2]
    c3da:	2900      	cmp	r1, #0
    c3dc:	d134      	bne.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3de:	2000      	movs	r0, #0
    c3e0:	f004 fae7 	bl	109b2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c3e4:	2000      	movs	r0, #0
    c3e6:	f004 fad7 	bl	10998 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c3ea:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c3ee:	f04f 31ff 	mov.w	r1, #4294967295
    c3f2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c3f6:	2600      	movs	r6, #0
    c3f8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c3fc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c400:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c404:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c408:	4c14      	ldr	r4, [pc, #80]	; (c45c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c40a:	7066      	strb	r6, [r4, #1]
    c40c:	88a8      	ldrh	r0, [r5, #4]
    c40e:	81a0      	strh	r0, [r4, #12]
    c410:	f004 faf3 	bl	109fa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c414:	2701      	movs	r7, #1
    c416:	b108      	cbz	r0, c41c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c418:	70e7      	strb	r7, [r4, #3]
    c41a:	7067      	strb	r7, [r4, #1]
    c41c:	2101      	movs	r1, #1
    c41e:	4640      	mov	r0, r8
    c420:	f004 fadd 	bl	109de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c424:	b108      	cbz	r0, c42a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c426:	f000 f8a9 	bl	c57c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c42a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c42e:	81e0      	strh	r0, [r4, #14]
    c430:	4628      	mov	r0, r5
    c432:	f7ff fe8d 	bl	c150 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c436:	7267      	strb	r7, [r4, #9]
    c438:	2000      	movs	r0, #0
    c43a:	f004 faad 	bl	10998 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c43e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c442:	4630      	mov	r0, r6
    c444:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c44c:	2900      	cmp	r1, #0
    c44e:	d0fb      	beq.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c450:	2920      	cmp	r1, #32
    c452:	d8f9      	bhi.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c454:	78a9      	ldrb	r1, [r5, #2]
    c456:	2921      	cmp	r1, #33	; 0x21
    c458:	d9c1      	bls.n	c3de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c45a:	e7f5      	b.n	c448 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c45c:	20000314 	.word	0x20000314

0000c460 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c460:	4801      	ldr	r0, [pc, #4]	; (c468 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c462:	8980      	ldrh	r0, [r0, #12]
    c464:	4770      	bx	lr
    c466:	0000      	.short	0x0000
    c468:	20000314 	.word	0x20000314

0000c46c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c46c:	b510      	push	{r4, lr}
    c46e:	480d      	ldr	r0, [pc, #52]	; (c4a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c470:	f004 fb24 	bl	10abc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c474:	490b      	ldr	r1, [pc, #44]	; (c4a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c476:	3908      	subs	r1, #8
    c478:	b148      	cbz	r0, c48e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c47a:	2001      	movs	r0, #1
    c47c:	7008      	strb	r0, [r1, #0]
    c47e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c482:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c48a:	f7ff bf59 	b.w	c340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c48e:	7a88      	ldrb	r0, [r1, #10]
    c490:	2802      	cmp	r0, #2
    c492:	d101      	bne.n	c498 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c494:	f7ff fdb6 	bl	c004 <MPSL_IRQ_CLOCK_Handler+0x88>
    c498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c49c:	4801      	ldr	r0, [pc, #4]	; (c4a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c49e:	f004 bb24 	b.w	10aea <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c4a2:	0000      	.short	0x0000
    c4a4:	2000031c 	.word	0x2000031c

0000c4a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c4a8:	4802      	ldr	r0, [pc, #8]	; (c4b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c4aa:	7a80      	ldrb	r0, [r0, #10]
    c4ac:	2800      	cmp	r0, #0
    c4ae:	d000      	beq.n	c4b2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c4b0:	2001      	movs	r0, #1
    c4b2:	4770      	bx	lr
    c4b4:	20000314 	.word	0x20000314

0000c4b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ba:	4d1f      	ldr	r5, [pc, #124]	; (c538 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c4bc:	7ae8      	ldrb	r0, [r5, #11]
    c4be:	2800      	cmp	r0, #0
    c4c0:	d10f      	bne.n	c4e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c4c2:	7e28      	ldrb	r0, [r5, #24]
    c4c4:	f000 0003 	and.w	r0, r0, #3
    c4c8:	f004 faa5 	bl	10a16 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c4cc:	2800      	cmp	r0, #0
    c4ce:	d008      	beq.n	c4e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c4d0:	f3ef 8110 	mrs	r1, PRIMASK
    c4d4:	b672      	cpsid	i
    c4d6:	f7ff ffe7 	bl	c4a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c4da:	b118      	cbz	r0, c4e4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c4dc:	2900      	cmp	r1, #0
    c4de:	d100      	bne.n	c4e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c4e0:	b662      	cpsie	i
    c4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4e4:	2601      	movs	r6, #1
    c4e6:	72ae      	strb	r6, [r5, #10]
    c4e8:	b901      	cbnz	r1, c4ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c4ea:	b662      	cpsie	i
    c4ec:	2018      	movs	r0, #24
    c4ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c4f2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c4f6:	61a6      	str	r6, [r4, #24]
    c4f8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c4fc:	f8ad 0000 	strh.w	r0, [sp]
    c500:	f8bd 0000 	ldrh.w	r0, [sp]
    c504:	1e41      	subs	r1, r0, #1
    c506:	f8ad 1000 	strh.w	r1, [sp]
    c50a:	d2f9      	bcs.n	c500 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c50c:	2700      	movs	r7, #0
    c50e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c512:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c516:	4808      	ldr	r0, [pc, #32]	; (c538 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c518:	3008      	adds	r0, #8
    c51a:	f004 fae2 	bl	10ae2 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c51e:	702f      	strb	r7, [r5, #0]
    c520:	f7ff fd70 	bl	c004 <MPSL_IRQ_CLOCK_Handler+0x88>
    c524:	6166      	str	r6, [r4, #20]
    c526:	7968      	ldrb	r0, [r5, #5]
    c528:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c52c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c530:	2018      	movs	r0, #24
    c532:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	20000314 	.word	0x20000314

0000c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c53c:	4602      	mov	r2, r0
    c53e:	b510      	push	{r4, lr}
    c540:	2000      	movs	r0, #0
    c542:	2900      	cmp	r1, #0
    c544:	d00a      	beq.n	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c546:	2a00      	cmp	r2, #0
    c548:	d008      	beq.n	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c54a:	fba2 0101 	umull	r0, r1, r2, r1
    c54e:	1e40      	subs	r0, r0, #1
    c550:	4a03      	ldr	r2, [pc, #12]	; (c560 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c552:	f141 31ff 	adc.w	r1, r1, #4294967295
    c556:	f004 fb4c 	bl	10bf2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c55a:	1c40      	adds	r0, r0, #1
    c55c:	bd10      	pop	{r4, pc}
    c55e:	0000      	.short	0x0000
    c560:	000f4240 	.word	0x000f4240

0000c564 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c564:	b510      	push	{r4, lr}
    c566:	4c04      	ldr	r4, [pc, #16]	; (c578 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c568:	7e20      	ldrb	r0, [r4, #24]
    c56a:	f000 0003 	and.w	r0, r0, #3
    c56e:	f004 fa52 	bl	10a16 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c572:	2800      	cmp	r0, #0
    c574:	d0f8      	beq.n	c568 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c576:	bd10      	pop	{r4, pc}
    c578:	20000314 	.word	0x20000314

0000c57c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c57c:	4901      	ldr	r1, [pc, #4]	; (c584 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c57e:	2001      	movs	r0, #1
    c580:	7008      	strb	r0, [r1, #0]
    c582:	4770      	bx	lr
    c584:	20000385 	.word	0x20000385

0000c588 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c588:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c58c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c590:	b918      	cbnz	r0, c59a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c592:	4803      	ldr	r0, [pc, #12]	; (c5a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c594:	7800      	ldrb	r0, [r0, #0]
    c596:	2800      	cmp	r0, #0
    c598:	d000      	beq.n	c59c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c59a:	2001      	movs	r0, #1
    c59c:	4770      	bx	lr
    c59e:	0000      	.short	0x0000
    c5a0:	20000385 	.word	0x20000385

0000c5a4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c5a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c5a8:	2101      	movs	r1, #1
    c5aa:	6041      	str	r1, [r0, #4]
    c5ac:	2100      	movs	r1, #0
    c5ae:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c5b2:	4801      	ldr	r0, [pc, #4]	; (c5b8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c5b4:	7001      	strb	r1, [r0, #0]
    c5b6:	4770      	bx	lr
    c5b8:	20000385 	.word	0x20000385

0000c5bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c5bc:	4802      	ldr	r0, [pc, #8]	; (c5c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c5be:	6800      	ldr	r0, [r0, #0]
    c5c0:	f000 0003 	and.w	r0, r0, #3
    c5c4:	4770      	bx	lr
    c5c6:	0000      	.short	0x0000
    c5c8:	4000041c 	.word	0x4000041c
    c5cc:	b510      	push	{r4, lr}
    c5ce:	b131      	cbz	r1, c5de <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c5d0:	2901      	cmp	r1, #1
    c5d2:	d007      	beq.n	c5e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c5d4:	f240 3102 	movw	r1, #770	; 0x302
    c5d8:	a005      	add	r0, pc, #20	; (adr r0, c5f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c5da:	f000 f821 	bl	c620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c5de:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c5e2:	e001      	b.n	c5e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c5e4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c5e8:	f000 0001 	and.w	r0, r0, #1
    c5ec:	bd10      	pop	{r4, pc}
    c5ee:	0000      	.short	0x0000
    c5f0:	5f66726e 	.word	0x5f66726e
    c5f4:	636f6c63 	.word	0x636f6c63
    c5f8:	00682e6b 	.word	0x00682e6b
    c5fc:	f3bf 8f4f 	dsb	sy
    c600:	4805      	ldr	r0, [pc, #20]	; (c618 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c602:	6801      	ldr	r1, [r0, #0]
    c604:	4a05      	ldr	r2, [pc, #20]	; (c61c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c606:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c60a:	4311      	orrs	r1, r2
    c60c:	6001      	str	r1, [r0, #0]
    c60e:	f3bf 8f4f 	dsb	sy
    c612:	bf00      	nop
    c614:	e7fd      	b.n	c612 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c616:	0000      	.short	0x0000
    c618:	e000ed0c 	.word	0xe000ed0c
    c61c:	05fa0004 	.word	0x05fa0004

0000c620 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c620:	b672      	cpsid	i
    c622:	4a03      	ldr	r2, [pc, #12]	; (c630 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c624:	6852      	ldr	r2, [r2, #4]
    c626:	b102      	cbz	r2, c62a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c628:	4790      	blx	r2
    c62a:	f7ff ffe7 	bl	c5fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c62e:	0000      	.short	0x0000
    c630:	20000334 	.word	0x20000334
    c634:	4806      	ldr	r0, [pc, #24]	; (c650 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c636:	b510      	push	{r4, lr}
    c638:	2100      	movs	r1, #0
    c63a:	6001      	str	r1, [r0, #0]
    c63c:	2101      	movs	r1, #1
    c63e:	6001      	str	r1, [r0, #0]
    c640:	4608      	mov	r0, r1
    c642:	f004 fa0f 	bl	10a64 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c64a:	2001      	movs	r0, #1
    c64c:	f004 b9fd 	b.w	10a4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c650:	40001ffc 	.word	0x40001ffc
    c654:	4807      	ldr	r0, [pc, #28]	; (c674 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c656:	b510      	push	{r4, lr}
    c658:	2101      	movs	r1, #1
    c65a:	6041      	str	r1, [r0, #4]
    c65c:	1e89      	subs	r1, r1, #2
    c65e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c662:	200c      	movs	r0, #12
    c664:	f004 f9fe 	bl	10a64 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c66c:	200c      	movs	r0, #12
    c66e:	f004 b9ec 	b.w	10a4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c672:	0000      	.short	0x0000
    c674:	4000c000 	.word	0x4000c000

0000c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c678:	b50e      	push	{r1, r2, r3, lr}
    c67a:	b672      	cpsid	i
    c67c:	4a0f      	ldr	r2, [pc, #60]	; (c6bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c67e:	6855      	ldr	r5, [r2, #4]
    c680:	b1d5      	cbz	r5, c6b8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c682:	2200      	movs	r2, #0
    c684:	4603      	mov	r3, r0
    c686:	466e      	mov	r6, sp
    c688:	240a      	movs	r4, #10
    c68a:	e003      	b.n	c694 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c68c:	fbb0 f0f4 	udiv	r0, r0, r4
    c690:	1c52      	adds	r2, r2, #1
    c692:	b2d2      	uxtb	r2, r2
    c694:	2800      	cmp	r0, #0
    c696:	d1f9      	bne.n	c68c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c698:	54b0      	strb	r0, [r6, r2]
    c69a:	e009      	b.n	c6b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c69c:	fbb3 f0f4 	udiv	r0, r3, r4
    c6a0:	fb04 3010 	mls	r0, r4, r0, r3
    c6a4:	fbb3 f3f4 	udiv	r3, r3, r4
    c6a8:	1e52      	subs	r2, r2, #1
    c6aa:	b2d2      	uxtb	r2, r2
    c6ac:	3030      	adds	r0, #48	; 0x30
    c6ae:	54b0      	strb	r0, [r6, r2]
    c6b0:	2a00      	cmp	r2, #0
    c6b2:	d1f3      	bne.n	c69c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c6b4:	4630      	mov	r0, r6
    c6b6:	47a8      	blx	r5
    c6b8:	f7ff ffa0 	bl	c5fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c6bc:	20000334 	.word	0x20000334

0000c6c0 <mpsl_init>:
    c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6c4:	4c18      	ldr	r4, [pc, #96]	; (c728 <mpsl_init+0x68>)
    c6c6:	4606      	mov	r6, r0
    c6c8:	4617      	mov	r7, r2
    c6ca:	7860      	ldrb	r0, [r4, #1]
    c6cc:	460d      	mov	r5, r1
    c6ce:	b118      	cbz	r0, c6d8 <mpsl_init+0x18>
    c6d0:	f04f 30ff 	mov.w	r0, #4294967295
    c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6d8:	f7fc fb6c 	bl	8db4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c6dc:	b906      	cbnz	r6, c6e0 <mpsl_init+0x20>
    c6de:	4e13      	ldr	r6, [pc, #76]	; (c72c <mpsl_init+0x6c>)
    c6e0:	6067      	str	r7, [r4, #4]
    c6e2:	7025      	strb	r5, [r4, #0]
    c6e4:	f7ff ffa6 	bl	c634 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c6e8:	f7ff ffb4 	bl	c654 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c6ec:	4630      	mov	r0, r6
    c6ee:	f7ff fe65 	bl	c3bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c6f2:	0006      	movs	r6, r0
    c6f4:	d1ee      	bne.n	c6d4 <mpsl_init+0x14>
    c6f6:	f7fe fe29 	bl	b34c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c6fa:	f7ff fedd 	bl	c4b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c6fe:	f004 f918 	bl	10932 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c702:	4628      	mov	r0, r5
    c704:	f004 f9a1 	bl	10a4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c708:	2001      	movs	r0, #1
    c70a:	2d00      	cmp	r5, #0
    c70c:	db09      	blt.n	c722 <mpsl_init+0x62>
    c70e:	f005 011f 	and.w	r1, r5, #31
    c712:	fa00 f101 	lsl.w	r1, r0, r1
    c716:	096a      	lsrs	r2, r5, #5
    c718:	0092      	lsls	r2, r2, #2
    c71a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c71e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c722:	7060      	strb	r0, [r4, #1]
    c724:	4630      	mov	r0, r6
    c726:	e7d5      	b.n	c6d4 <mpsl_init+0x14>
    c728:	20000334 	.word	0x20000334
    c72c:	00010a86 	.word	0x00010a86

0000c730 <mpsl_is_initialized>:
    c730:	4801      	ldr	r0, [pc, #4]	; (c738 <mpsl_is_initialized+0x8>)
    c732:	7840      	ldrb	r0, [r0, #1]
    c734:	4770      	bx	lr
    c736:	0000      	.short	0x0000
    c738:	20000334 	.word	0x20000334

0000c73c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c73c:	4807      	ldr	r0, [pc, #28]	; (c75c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c73e:	f990 0000 	ldrsb.w	r0, [r0]
    c742:	2800      	cmp	r0, #0
    c744:	db09      	blt.n	c75a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c746:	f000 021f 	and.w	r2, r0, #31
    c74a:	2101      	movs	r1, #1
    c74c:	4091      	lsls	r1, r2
    c74e:	0940      	lsrs	r0, r0, #5
    c750:	0080      	lsls	r0, r0, #2
    c752:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c756:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c75a:	4770      	bx	lr
    c75c:	20000334 	.word	0x20000334

0000c760 <mpsl_temperature_get>:
    c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c764:	2501      	movs	r5, #1
    c766:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c76a:	0329      	lsls	r1, r5, #12
    c76c:	f04f 0800 	mov.w	r8, #0
    c770:	4640      	mov	r0, r8
    c772:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c776:	f3bf 8f4f 	dsb	sy
    c77a:	f3bf 8f6f 	isb	sy
    c77e:	4c16      	ldr	r4, [pc, #88]	; (c7d8 <mpsl_temperature_get+0x78>)
    c780:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c784:	200c      	movs	r0, #12
    c786:	f004 f98c 	bl	10aa2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c78a:	4e14      	ldr	r6, [pc, #80]	; (c7dc <mpsl_temperature_get+0x7c>)
    c78c:	6830      	ldr	r0, [r6, #0]
    c78e:	43c0      	mvns	r0, r0
    c790:	f340 1700 	sbfx	r7, r0, #4, #1
    c794:	6830      	ldr	r0, [r6, #0]
    c796:	f040 0010 	orr.w	r0, r0, #16
    c79a:	6030      	str	r0, [r6, #0]
    c79c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c7a0:	6025      	str	r5, [r4, #0]
    c7a2:	1c7f      	adds	r7, r7, #1
    c7a4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c7a8:	b108      	cbz	r0, c7ae <mpsl_temperature_get+0x4e>
    c7aa:	b11f      	cbz	r7, c7b4 <mpsl_temperature_get+0x54>
    c7ac:	e006      	b.n	c7bc <mpsl_temperature_get+0x5c>
    c7ae:	f004 fa1c 	bl	10bea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c7b2:	e7f7      	b.n	c7a4 <mpsl_temperature_get+0x44>
    c7b4:	6830      	ldr	r0, [r6, #0]
    c7b6:	f020 0010 	bic.w	r0, r0, #16
    c7ba:	6030      	str	r0, [r6, #0]
    c7bc:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c7c0:	6065      	str	r5, [r4, #4]
    c7c2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c7c6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c7ca:	200c      	movs	r0, #12
    c7cc:	f004 f969 	bl	10aa2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c7d0:	4630      	mov	r0, r6
    c7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7d6:	0000      	.short	0x0000
    c7d8:	4000c000 	.word	0x4000c000
    c7dc:	e000ed10 	.word	0xe000ed10

0000c7e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c7e0:	b510      	push	{r4, lr}
    c7e2:	4602      	mov	r2, r0
    c7e4:	2005      	movs	r0, #5
    c7e6:	490c      	ldr	r1, [pc, #48]	; (c818 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c7e8:	e004      	b.n	c7f4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c7ea:	bf00      	nop
    c7ec:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c7f0:	791b      	ldrb	r3, [r3, #4]
    c7f2:	b133      	cbz	r3, c802 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c7f4:	1e40      	subs	r0, r0, #1
    c7f6:	b2c0      	uxtb	r0, r0
    c7f8:	d2f8      	bcs.n	c7ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c7fa:	2148      	movs	r1, #72	; 0x48
    c7fc:	2069      	movs	r0, #105	; 0x69
    c7fe:	f7ff ff3b 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c802:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c806:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c80a:	2200      	movs	r2, #0
    c80c:	714a      	strb	r2, [r1, #5]
    c80e:	718a      	strb	r2, [r1, #6]
    c810:	2201      	movs	r2, #1
    c812:	710a      	strb	r2, [r1, #4]
    c814:	bd10      	pop	{r4, pc}
    c816:	0000      	.short	0x0000
    c818:	20001240 	.word	0x20001240

0000c81c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c81c:	b510      	push	{r4, lr}
    c81e:	2805      	cmp	r0, #5
    c820:	d301      	bcc.n	c826 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c822:	2158      	movs	r1, #88	; 0x58
    c824:	e006      	b.n	c834 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c826:	490a      	ldr	r1, [pc, #40]	; (c850 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c828:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c82c:	7901      	ldrb	r1, [r0, #4]
    c82e:	2901      	cmp	r1, #1
    c830:	d003      	beq.n	c83a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c832:	2159      	movs	r1, #89	; 0x59
    c834:	2069      	movs	r0, #105	; 0x69
    c836:	f7ff ff1f 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c83a:	7941      	ldrb	r1, [r0, #5]
    c83c:	7982      	ldrb	r2, [r0, #6]
    c83e:	1c49      	adds	r1, r1, #1
    c840:	b2c9      	uxtb	r1, r1
    c842:	428a      	cmp	r2, r1
    c844:	d000      	beq.n	c848 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c846:	7141      	strb	r1, [r0, #5]
    c848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c84c:	f7ff bf76 	b.w	c73c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c850:	20001240 	.word	0x20001240

0000c854 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c854:	b510      	push	{r4, lr}
    c856:	2805      	cmp	r0, #5
    c858:	d303      	bcc.n	c862 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c85a:	214f      	movs	r1, #79	; 0x4f
    c85c:	2069      	movs	r0, #105	; 0x69
    c85e:	f7ff ff0b 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c862:	4a03      	ldr	r2, [pc, #12]	; (c870 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c864:	2100      	movs	r1, #0
    c866:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c86a:	7101      	strb	r1, [r0, #4]
    c86c:	bd10      	pop	{r4, pc}
    c86e:	0000      	.short	0x0000
    c870:	20001240 	.word	0x20001240

0000c874 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c874:	b570      	push	{r4, r5, r6, lr}
    c876:	2505      	movs	r5, #5
    c878:	4e0e      	ldr	r6, [pc, #56]	; (c8b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c87a:	4c0f      	ldr	r4, [pc, #60]	; (c8b8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c87c:	e016      	b.n	c8ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c87e:	7821      	ldrb	r1, [r4, #0]
    c880:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c884:	7902      	ldrb	r2, [r0, #4]
    c886:	2a01      	cmp	r2, #1
    c888:	d108      	bne.n	c89c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c88a:	7942      	ldrb	r2, [r0, #5]
    c88c:	7983      	ldrb	r3, [r0, #6]
    c88e:	429a      	cmp	r2, r3
    c890:	d004      	beq.n	c89c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c892:	7942      	ldrb	r2, [r0, #5]
    c894:	7182      	strb	r2, [r0, #6]
    c896:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c89a:	4780      	blx	r0
    c89c:	7820      	ldrb	r0, [r4, #0]
    c89e:	1c40      	adds	r0, r0, #1
    c8a0:	b2c0      	uxtb	r0, r0
    c8a2:	7020      	strb	r0, [r4, #0]
    c8a4:	2805      	cmp	r0, #5
    c8a6:	d301      	bcc.n	c8ac <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c8a8:	2000      	movs	r0, #0
    c8aa:	7020      	strb	r0, [r4, #0]
    c8ac:	1e6d      	subs	r5, r5, #1
    c8ae:	b2ed      	uxtb	r5, r5
    c8b0:	d2e5      	bcs.n	c87e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c8b2:	bd70      	pop	{r4, r5, r6, pc}
    c8b4:	20001240 	.word	0x20001240
    c8b8:	20000386 	.word	0x20000386

0000c8bc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c8bc:	b500      	push	{lr}
    c8be:	f004 f91f 	bl	10b00 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c8c2:	b940      	cbnz	r0, c8d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c8c4:	f004 f926 	bl	10b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c8c8:	b928      	cbnz	r0, c8d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c8ca:	f004 f93a 	bl	10b42 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c8ce:	b910      	cbnz	r0, c8d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c8d0:	f004 f94b 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8d4:	b108      	cbz	r0, c8da <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c8d6:	4802      	ldr	r0, [pc, #8]	; (c8e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c8d8:	bd00      	pop	{pc}
    c8da:	4802      	ldr	r0, [pc, #8]	; (c8e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c8dc:	bd00      	pop	{pc}
    c8de:	0000      	.short	0x0000
    c8e0:	4000050c 	.word	0x4000050c
    c8e4:	4001e700 	.word	0x4001e700
    c8e8:	b510      	push	{r4, lr}
    c8ea:	f004 f93e 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8ee:	b330      	cbz	r0, c93e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c8f0:	f3ef 8010 	mrs	r0, PRIMASK
    c8f4:	b1c8      	cbz	r0, c92a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c8f6:	2100      	movs	r1, #0
    c8f8:	b672      	cpsid	i
    c8fa:	4812      	ldr	r0, [pc, #72]	; (c944 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c8fc:	6802      	ldr	r2, [r0, #0]
    c8fe:	6803      	ldr	r3, [r0, #0]
    c900:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c904:	f043 0310 	orr.w	r3, r3, #16
    c908:	6003      	str	r3, [r0, #0]
    c90a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c90e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c912:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c916:	431c      	orrs	r4, r3
    c918:	d000      	beq.n	c91c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c91a:	bf40      	sev
    c91c:	bf20      	wfe
    c91e:	bf00      	nop
    c920:	bf00      	nop
    c922:	bf00      	nop
    c924:	bf00      	nop
    c926:	b112      	cbz	r2, c92e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c928:	e005      	b.n	c936 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c92a:	2101      	movs	r1, #1
    c92c:	e7e4      	b.n	c8f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c92e:	6802      	ldr	r2, [r0, #0]
    c930:	f022 0210 	bic.w	r2, r2, #16
    c934:	6002      	str	r2, [r0, #0]
    c936:	2900      	cmp	r1, #0
    c938:	d000      	beq.n	c93c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c93a:	b662      	cpsie	i
    c93c:	bd10      	pop	{r4, pc}
    c93e:	bf20      	wfe
    c940:	bd10      	pop	{r4, pc}
    c942:	0000      	.short	0x0000
    c944:	e000ed10 	.word	0xe000ed10

0000c948 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c948:	4901      	ldr	r1, [pc, #4]	; (c950 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c94a:	2001      	movs	r0, #1
    c94c:	7088      	strb	r0, [r1, #2]
    c94e:	4770      	bx	lr
    c950:	2000033c 	.word	0x2000033c

0000c954 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c954:	00010e6b 00010ea3 00010e8d 00010e7b     k...........{...
    c964:	00010e87 00010e75 00010e69 00010e67     ....u...i...g...
    c974:	00010e9f 00010e93 00010e81 00010e6f     ............o...
    c984:	00010e61 00010e59 00010e5d 00010e53     a...Y...]...S...

0000c994 <mpsl_fem_disable>:
    c994:	4801      	ldr	r0, [pc, #4]	; (c99c <mpsl_fem_disable+0x8>)
    c996:	6800      	ldr	r0, [r0, #0]
    c998:	6800      	ldr	r0, [r0, #0]
    c99a:	4700      	bx	r0
    c99c:	20000350 	.word	0x20000350

0000c9a0 <mpsl_fem_lna_configuration_clear>:
    c9a0:	4801      	ldr	r0, [pc, #4]	; (c9a8 <mpsl_fem_lna_configuration_clear+0x8>)
    c9a2:	6800      	ldr	r0, [r0, #0]
    c9a4:	6940      	ldr	r0, [r0, #20]
    c9a6:	4700      	bx	r0
    c9a8:	20000350 	.word	0x20000350

0000c9ac <mpsl_fem_lna_configuration_set>:
    c9ac:	4a01      	ldr	r2, [pc, #4]	; (c9b4 <mpsl_fem_lna_configuration_set+0x8>)
    c9ae:	6812      	ldr	r2, [r2, #0]
    c9b0:	68d2      	ldr	r2, [r2, #12]
    c9b2:	4710      	bx	r2
    c9b4:	20000350 	.word	0x20000350

0000c9b8 <mpsl_fem_lna_is_configured>:
    c9b8:	4901      	ldr	r1, [pc, #4]	; (c9c0 <mpsl_fem_lna_is_configured+0x8>)
    c9ba:	6809      	ldr	r1, [r1, #0]
    c9bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c9be:	4708      	bx	r1
    c9c0:	20000350 	.word	0x20000350

0000c9c4 <mpsl_fem_pa_configuration_clear>:
    c9c4:	4801      	ldr	r0, [pc, #4]	; (c9cc <mpsl_fem_pa_configuration_clear+0x8>)
    c9c6:	6800      	ldr	r0, [r0, #0]
    c9c8:	6900      	ldr	r0, [r0, #16]
    c9ca:	4700      	bx	r0
    c9cc:	20000350 	.word	0x20000350

0000c9d0 <mpsl_fem_pa_configuration_set>:
    c9d0:	4a01      	ldr	r2, [pc, #4]	; (c9d8 <mpsl_fem_pa_configuration_set+0x8>)
    c9d2:	6812      	ldr	r2, [r2, #0]
    c9d4:	6892      	ldr	r2, [r2, #8]
    c9d6:	4710      	bx	r2
    c9d8:	20000350 	.word	0x20000350

0000c9dc <mpsl_fem_pa_gain_set>:
    c9dc:	4901      	ldr	r1, [pc, #4]	; (c9e4 <mpsl_fem_pa_gain_set+0x8>)
    c9de:	6809      	ldr	r1, [r1, #0]
    c9e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c9e2:	4708      	bx	r1
    c9e4:	20000350 	.word	0x20000350

0000c9e8 <mpsl_fem_pa_is_configured>:
    c9e8:	4901      	ldr	r1, [pc, #4]	; (c9f0 <mpsl_fem_pa_is_configured+0x8>)
    c9ea:	6809      	ldr	r1, [r1, #0]
    c9ec:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c9ee:	4708      	bx	r1
    c9f0:	20000350 	.word	0x20000350

0000c9f4 <mpsl_fem_tx_power_split>:
    c9f4:	b430      	push	{r4, r5}
    c9f6:	4c03      	ldr	r4, [pc, #12]	; (ca04 <mpsl_fem_tx_power_split+0x10>)
    c9f8:	6824      	ldr	r4, [r4, #0]
    c9fa:	6864      	ldr	r4, [r4, #4]
    c9fc:	46a4      	mov	ip, r4
    c9fe:	bc30      	pop	{r4, r5}
    ca00:	4760      	bx	ip
    ca02:	0000      	.short	0x0000
    ca04:	20000350 	.word	0x20000350

0000ca08 <mpsl_fem_device_config_254_apply_get>:
    ca08:	4801      	ldr	r0, [pc, #4]	; (ca10 <mpsl_fem_device_config_254_apply_get+0x8>)
    ca0a:	7800      	ldrb	r0, [r0, #0]
    ca0c:	4770      	bx	lr
    ca0e:	0000      	.short	0x0000
    ca10:	20000387 	.word	0x20000387

0000ca14 <__udivmoddi4>:
    ca14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca18:	4686      	mov	lr, r0
    ca1a:	468c      	mov	ip, r1
    ca1c:	4608      	mov	r0, r1
    ca1e:	9e08      	ldr	r6, [sp, #32]
    ca20:	4615      	mov	r5, r2
    ca22:	4674      	mov	r4, lr
    ca24:	4619      	mov	r1, r3
    ca26:	2b00      	cmp	r3, #0
    ca28:	f040 80c2 	bne.w	cbb0 <__udivmoddi4+0x19c>
    ca2c:	4285      	cmp	r5, r0
    ca2e:	fab2 f282 	clz	r2, r2
    ca32:	d945      	bls.n	cac0 <__udivmoddi4+0xac>
    ca34:	b14a      	cbz	r2, ca4a <__udivmoddi4+0x36>
    ca36:	f1c2 0320 	rsb	r3, r2, #32
    ca3a:	fa00 fc02 	lsl.w	ip, r0, r2
    ca3e:	fa2e f303 	lsr.w	r3, lr, r3
    ca42:	4095      	lsls	r5, r2
    ca44:	ea43 0c0c 	orr.w	ip, r3, ip
    ca48:	4094      	lsls	r4, r2
    ca4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ca4e:	b2a8      	uxth	r0, r5
    ca50:	fbbc f8fe 	udiv	r8, ip, lr
    ca54:	0c23      	lsrs	r3, r4, #16
    ca56:	fb0e cc18 	mls	ip, lr, r8, ip
    ca5a:	fb08 f900 	mul.w	r9, r8, r0
    ca5e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ca62:	4599      	cmp	r9, r3
    ca64:	d928      	bls.n	cab8 <__udivmoddi4+0xa4>
    ca66:	18eb      	adds	r3, r5, r3
    ca68:	f108 37ff 	add.w	r7, r8, #4294967295
    ca6c:	d204      	bcs.n	ca78 <__udivmoddi4+0x64>
    ca6e:	4599      	cmp	r9, r3
    ca70:	d902      	bls.n	ca78 <__udivmoddi4+0x64>
    ca72:	f1a8 0702 	sub.w	r7, r8, #2
    ca76:	442b      	add	r3, r5
    ca78:	eba3 0309 	sub.w	r3, r3, r9
    ca7c:	b2a4      	uxth	r4, r4
    ca7e:	fbb3 fcfe 	udiv	ip, r3, lr
    ca82:	fb0e 331c 	mls	r3, lr, ip, r3
    ca86:	fb0c f000 	mul.w	r0, ip, r0
    ca8a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ca8e:	42a0      	cmp	r0, r4
    ca90:	d914      	bls.n	cabc <__udivmoddi4+0xa8>
    ca92:	192c      	adds	r4, r5, r4
    ca94:	f10c 33ff 	add.w	r3, ip, #4294967295
    ca98:	d204      	bcs.n	caa4 <__udivmoddi4+0x90>
    ca9a:	42a0      	cmp	r0, r4
    ca9c:	d902      	bls.n	caa4 <__udivmoddi4+0x90>
    ca9e:	f1ac 0302 	sub.w	r3, ip, #2
    caa2:	442c      	add	r4, r5
    caa4:	1a24      	subs	r4, r4, r0
    caa6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    caaa:	b11e      	cbz	r6, cab4 <__udivmoddi4+0xa0>
    caac:	40d4      	lsrs	r4, r2
    caae:	2300      	movs	r3, #0
    cab0:	6034      	str	r4, [r6, #0]
    cab2:	6073      	str	r3, [r6, #4]
    cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cab8:	4647      	mov	r7, r8
    caba:	e7dd      	b.n	ca78 <__udivmoddi4+0x64>
    cabc:	4663      	mov	r3, ip
    cabe:	e7f1      	b.n	caa4 <__udivmoddi4+0x90>
    cac0:	bb92      	cbnz	r2, cb28 <__udivmoddi4+0x114>
    cac2:	1b43      	subs	r3, r0, r5
    cac4:	2101      	movs	r1, #1
    cac6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    caca:	b2af      	uxth	r7, r5
    cacc:	fbb3 fcfe 	udiv	ip, r3, lr
    cad0:	0c20      	lsrs	r0, r4, #16
    cad2:	fb0e 331c 	mls	r3, lr, ip, r3
    cad6:	fb0c f807 	mul.w	r8, ip, r7
    cada:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cade:	4598      	cmp	r8, r3
    cae0:	d962      	bls.n	cba8 <__udivmoddi4+0x194>
    cae2:	18eb      	adds	r3, r5, r3
    cae4:	f10c 30ff 	add.w	r0, ip, #4294967295
    cae8:	d204      	bcs.n	caf4 <__udivmoddi4+0xe0>
    caea:	4598      	cmp	r8, r3
    caec:	d902      	bls.n	caf4 <__udivmoddi4+0xe0>
    caee:	f1ac 0002 	sub.w	r0, ip, #2
    caf2:	442b      	add	r3, r5
    caf4:	eba3 0308 	sub.w	r3, r3, r8
    caf8:	b2a4      	uxth	r4, r4
    cafa:	fbb3 fcfe 	udiv	ip, r3, lr
    cafe:	fb0e 331c 	mls	r3, lr, ip, r3
    cb02:	fb0c f707 	mul.w	r7, ip, r7
    cb06:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cb0a:	42a7      	cmp	r7, r4
    cb0c:	d94e      	bls.n	cbac <__udivmoddi4+0x198>
    cb0e:	192c      	adds	r4, r5, r4
    cb10:	f10c 33ff 	add.w	r3, ip, #4294967295
    cb14:	d204      	bcs.n	cb20 <__udivmoddi4+0x10c>
    cb16:	42a7      	cmp	r7, r4
    cb18:	d902      	bls.n	cb20 <__udivmoddi4+0x10c>
    cb1a:	f1ac 0302 	sub.w	r3, ip, #2
    cb1e:	442c      	add	r4, r5
    cb20:	1be4      	subs	r4, r4, r7
    cb22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cb26:	e7c0      	b.n	caaa <__udivmoddi4+0x96>
    cb28:	f1c2 0320 	rsb	r3, r2, #32
    cb2c:	fa20 f103 	lsr.w	r1, r0, r3
    cb30:	4095      	lsls	r5, r2
    cb32:	4090      	lsls	r0, r2
    cb34:	fa2e f303 	lsr.w	r3, lr, r3
    cb38:	4303      	orrs	r3, r0
    cb3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb3e:	b2af      	uxth	r7, r5
    cb40:	fbb1 fcfe 	udiv	ip, r1, lr
    cb44:	fb0e 101c 	mls	r0, lr, ip, r1
    cb48:	0c19      	lsrs	r1, r3, #16
    cb4a:	fb0c f807 	mul.w	r8, ip, r7
    cb4e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cb52:	4588      	cmp	r8, r1
    cb54:	fa04 f402 	lsl.w	r4, r4, r2
    cb58:	d922      	bls.n	cba0 <__udivmoddi4+0x18c>
    cb5a:	1869      	adds	r1, r5, r1
    cb5c:	f10c 30ff 	add.w	r0, ip, #4294967295
    cb60:	d204      	bcs.n	cb6c <__udivmoddi4+0x158>
    cb62:	4588      	cmp	r8, r1
    cb64:	d902      	bls.n	cb6c <__udivmoddi4+0x158>
    cb66:	f1ac 0002 	sub.w	r0, ip, #2
    cb6a:	4429      	add	r1, r5
    cb6c:	eba1 0108 	sub.w	r1, r1, r8
    cb70:	b29b      	uxth	r3, r3
    cb72:	fbb1 fcfe 	udiv	ip, r1, lr
    cb76:	fb0e 111c 	mls	r1, lr, ip, r1
    cb7a:	fb0c f707 	mul.w	r7, ip, r7
    cb7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cb82:	429f      	cmp	r7, r3
    cb84:	d90e      	bls.n	cba4 <__udivmoddi4+0x190>
    cb86:	18eb      	adds	r3, r5, r3
    cb88:	f10c 31ff 	add.w	r1, ip, #4294967295
    cb8c:	d204      	bcs.n	cb98 <__udivmoddi4+0x184>
    cb8e:	429f      	cmp	r7, r3
    cb90:	d902      	bls.n	cb98 <__udivmoddi4+0x184>
    cb92:	f1ac 0102 	sub.w	r1, ip, #2
    cb96:	442b      	add	r3, r5
    cb98:	1bdb      	subs	r3, r3, r7
    cb9a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cb9e:	e792      	b.n	cac6 <__udivmoddi4+0xb2>
    cba0:	4660      	mov	r0, ip
    cba2:	e7e3      	b.n	cb6c <__udivmoddi4+0x158>
    cba4:	4661      	mov	r1, ip
    cba6:	e7f7      	b.n	cb98 <__udivmoddi4+0x184>
    cba8:	4660      	mov	r0, ip
    cbaa:	e7a3      	b.n	caf4 <__udivmoddi4+0xe0>
    cbac:	4663      	mov	r3, ip
    cbae:	e7b7      	b.n	cb20 <__udivmoddi4+0x10c>
    cbb0:	4283      	cmp	r3, r0
    cbb2:	d906      	bls.n	cbc2 <__udivmoddi4+0x1ae>
    cbb4:	b916      	cbnz	r6, cbbc <__udivmoddi4+0x1a8>
    cbb6:	2100      	movs	r1, #0
    cbb8:	4608      	mov	r0, r1
    cbba:	e77b      	b.n	cab4 <__udivmoddi4+0xa0>
    cbbc:	e9c6 e000 	strd	lr, r0, [r6]
    cbc0:	e7f9      	b.n	cbb6 <__udivmoddi4+0x1a2>
    cbc2:	fab3 f783 	clz	r7, r3
    cbc6:	b98f      	cbnz	r7, cbec <__udivmoddi4+0x1d8>
    cbc8:	4283      	cmp	r3, r0
    cbca:	d301      	bcc.n	cbd0 <__udivmoddi4+0x1bc>
    cbcc:	4572      	cmp	r2, lr
    cbce:	d808      	bhi.n	cbe2 <__udivmoddi4+0x1ce>
    cbd0:	ebbe 0402 	subs.w	r4, lr, r2
    cbd4:	eb60 0303 	sbc.w	r3, r0, r3
    cbd8:	2001      	movs	r0, #1
    cbda:	469c      	mov	ip, r3
    cbdc:	b91e      	cbnz	r6, cbe6 <__udivmoddi4+0x1d2>
    cbde:	2100      	movs	r1, #0
    cbe0:	e768      	b.n	cab4 <__udivmoddi4+0xa0>
    cbe2:	4638      	mov	r0, r7
    cbe4:	e7fa      	b.n	cbdc <__udivmoddi4+0x1c8>
    cbe6:	e9c6 4c00 	strd	r4, ip, [r6]
    cbea:	e7f8      	b.n	cbde <__udivmoddi4+0x1ca>
    cbec:	f1c7 0c20 	rsb	ip, r7, #32
    cbf0:	40bb      	lsls	r3, r7
    cbf2:	fa22 f40c 	lsr.w	r4, r2, ip
    cbf6:	431c      	orrs	r4, r3
    cbf8:	fa2e f10c 	lsr.w	r1, lr, ip
    cbfc:	fa20 f30c 	lsr.w	r3, r0, ip
    cc00:	40b8      	lsls	r0, r7
    cc02:	4301      	orrs	r1, r0
    cc04:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cc08:	fa0e f507 	lsl.w	r5, lr, r7
    cc0c:	fbb3 f8f9 	udiv	r8, r3, r9
    cc10:	fa1f fe84 	uxth.w	lr, r4
    cc14:	fb09 3018 	mls	r0, r9, r8, r3
    cc18:	0c0b      	lsrs	r3, r1, #16
    cc1a:	fb08 fa0e 	mul.w	sl, r8, lr
    cc1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cc22:	459a      	cmp	sl, r3
    cc24:	fa02 f207 	lsl.w	r2, r2, r7
    cc28:	d940      	bls.n	ccac <__udivmoddi4+0x298>
    cc2a:	18e3      	adds	r3, r4, r3
    cc2c:	f108 30ff 	add.w	r0, r8, #4294967295
    cc30:	d204      	bcs.n	cc3c <__udivmoddi4+0x228>
    cc32:	459a      	cmp	sl, r3
    cc34:	d902      	bls.n	cc3c <__udivmoddi4+0x228>
    cc36:	f1a8 0002 	sub.w	r0, r8, #2
    cc3a:	4423      	add	r3, r4
    cc3c:	eba3 030a 	sub.w	r3, r3, sl
    cc40:	b289      	uxth	r1, r1
    cc42:	fbb3 f8f9 	udiv	r8, r3, r9
    cc46:	fb09 3318 	mls	r3, r9, r8, r3
    cc4a:	fb08 fe0e 	mul.w	lr, r8, lr
    cc4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cc52:	458e      	cmp	lr, r1
    cc54:	d92c      	bls.n	ccb0 <__udivmoddi4+0x29c>
    cc56:	1861      	adds	r1, r4, r1
    cc58:	f108 33ff 	add.w	r3, r8, #4294967295
    cc5c:	d204      	bcs.n	cc68 <__udivmoddi4+0x254>
    cc5e:	458e      	cmp	lr, r1
    cc60:	d902      	bls.n	cc68 <__udivmoddi4+0x254>
    cc62:	f1a8 0302 	sub.w	r3, r8, #2
    cc66:	4421      	add	r1, r4
    cc68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cc6c:	fba0 9802 	umull	r9, r8, r0, r2
    cc70:	eba1 010e 	sub.w	r1, r1, lr
    cc74:	4541      	cmp	r1, r8
    cc76:	46ce      	mov	lr, r9
    cc78:	4643      	mov	r3, r8
    cc7a:	d302      	bcc.n	cc82 <__udivmoddi4+0x26e>
    cc7c:	d106      	bne.n	cc8c <__udivmoddi4+0x278>
    cc7e:	454d      	cmp	r5, r9
    cc80:	d204      	bcs.n	cc8c <__udivmoddi4+0x278>
    cc82:	ebb9 0e02 	subs.w	lr, r9, r2
    cc86:	eb68 0304 	sbc.w	r3, r8, r4
    cc8a:	3801      	subs	r0, #1
    cc8c:	2e00      	cmp	r6, #0
    cc8e:	d0a6      	beq.n	cbde <__udivmoddi4+0x1ca>
    cc90:	ebb5 020e 	subs.w	r2, r5, lr
    cc94:	eb61 0103 	sbc.w	r1, r1, r3
    cc98:	fa01 fc0c 	lsl.w	ip, r1, ip
    cc9c:	fa22 f307 	lsr.w	r3, r2, r7
    cca0:	ea4c 0303 	orr.w	r3, ip, r3
    cca4:	40f9      	lsrs	r1, r7
    cca6:	e9c6 3100 	strd	r3, r1, [r6]
    ccaa:	e798      	b.n	cbde <__udivmoddi4+0x1ca>
    ccac:	4640      	mov	r0, r8
    ccae:	e7c5      	b.n	cc3c <__udivmoddi4+0x228>
    ccb0:	4643      	mov	r3, r8
    ccb2:	e7d9      	b.n	cc68 <__udivmoddi4+0x254>
    ccb4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ccb8:	4681      	mov	r9, r0
    ccba:	f100 0007 	add.w	r0, r0, #7
    ccbe:	f020 0007 	bic.w	r0, r0, #7
    ccc2:	ea5f 0802 	movs.w	r8, r2
    ccc6:	9000      	str	r0, [sp, #0]
    ccc8:	784a      	ldrb	r2, [r1, #1]
    ccca:	f88d 2004 	strb.w	r2, [sp, #4]
    ccce:	788a      	ldrb	r2, [r1, #2]
    ccd0:	460c      	mov	r4, r1
    ccd2:	f88d 2005 	strb.w	r2, [sp, #5]
    ccd6:	d000      	beq.n	ccda <__udivmoddi4+0x2c6>
    ccd8:	2000      	movs	r0, #0
    ccda:	a901      	add	r1, sp, #4
    ccdc:	f7f4 fd74 	bl	17c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cce0:	9900      	ldr	r1, [sp, #0]
    cce2:	2600      	movs	r6, #0
    cce4:	4408      	add	r0, r1
    cce6:	9000      	str	r0, [sp, #0]
    cce8:	7820      	ldrb	r0, [r4, #0]
    ccea:	7861      	ldrb	r1, [r4, #1]
    ccec:	4635      	mov	r5, r6
    ccee:	4408      	add	r0, r1
    ccf0:	b2c7      	uxtb	r7, r0
    ccf2:	e008      	b.n	cd06 <__udivmoddi4+0x2f2>
    ccf4:	7a23      	ldrb	r3, [r4, #8]
    ccf6:	79e2      	ldrb	r2, [r4, #7]
    ccf8:	79a1      	ldrb	r1, [r4, #6]
    ccfa:	7960      	ldrb	r0, [r4, #5]
    ccfc:	f000 fe2a 	bl	d954 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cd00:	1c6d      	adds	r5, r5, #1
    cd02:	4406      	add	r6, r0
    cd04:	b2ed      	uxtb	r5, r5
    cd06:	42bd      	cmp	r5, r7
    cd08:	d3f4      	bcc.n	ccf4 <__udivmoddi4+0x2e0>
    cd0a:	9800      	ldr	r0, [sp, #0]
    cd0c:	1cc0      	adds	r0, r0, #3
    cd0e:	f020 0003 	bic.w	r0, r0, #3
    cd12:	9000      	str	r0, [sp, #0]
    cd14:	f1b8 0f00 	cmp.w	r8, #0
    cd18:	d000      	beq.n	cd1c <__udivmoddi4+0x308>
    cd1a:	2000      	movs	r0, #0
    cd1c:	4632      	mov	r2, r6
    cd1e:	4639      	mov	r1, r7
    cd20:	f7f4 fe8c 	bl	1a3c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cd24:	9900      	ldr	r1, [sp, #0]
    cd26:	4642      	mov	r2, r8
    cd28:	4408      	add	r0, r1
    cd2a:	9000      	str	r0, [sp, #0]
    cd2c:	4621      	mov	r1, r4
    cd2e:	4668      	mov	r0, sp
    cd30:	f000 f805 	bl	cd3e <__udivmoddi4+0x32a>
    cd34:	9900      	ldr	r1, [sp, #0]
    cd36:	eba1 0009 	sub.w	r0, r1, r9
    cd3a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    cd3e:	b570      	push	{r4, r5, r6, lr}
    cd40:	4605      	mov	r5, r0
    cd42:	7888      	ldrb	r0, [r1, #2]
    cd44:	4616      	mov	r6, r2
    cd46:	460c      	mov	r4, r1
    cd48:	b188      	cbz	r0, cd6e <__udivmoddi4+0x35a>
    cd4a:	6828      	ldr	r0, [r5, #0]
    cd4c:	1cc0      	adds	r0, r0, #3
    cd4e:	f020 0003 	bic.w	r0, r0, #3
    cd52:	6028      	str	r0, [r5, #0]
    cd54:	7de1      	ldrb	r1, [r4, #23]
    cd56:	78e2      	ldrb	r2, [r4, #3]
    cd58:	8a63      	ldrh	r3, [r4, #18]
    cd5a:	4411      	add	r1, r2
    cd5c:	b2ca      	uxtb	r2, r1
    cd5e:	78a1      	ldrb	r1, [r4, #2]
    cd60:	b106      	cbz	r6, cd64 <__udivmoddi4+0x350>
    cd62:	2000      	movs	r0, #0
    cd64:	f7f4 ff1e 	bl	1ba4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cd68:	6829      	ldr	r1, [r5, #0]
    cd6a:	4408      	add	r0, r1
    cd6c:	6028      	str	r0, [r5, #0]
    cd6e:	7d20      	ldrb	r0, [r4, #20]
    cd70:	2800      	cmp	r0, #0
    cd72:	d00f      	beq.n	cd94 <__udivmoddi4+0x380>
    cd74:	78a0      	ldrb	r0, [r4, #2]
    cd76:	2800      	cmp	r0, #0
    cd78:	d00c      	beq.n	cd94 <__udivmoddi4+0x380>
    cd7a:	6828      	ldr	r0, [r5, #0]
    cd7c:	1dc0      	adds	r0, r0, #7
    cd7e:	f020 0007 	bic.w	r0, r0, #7
    cd82:	6028      	str	r0, [r5, #0]
    cd84:	7d21      	ldrb	r1, [r4, #20]
    cd86:	b106      	cbz	r6, cd8a <__udivmoddi4+0x376>
    cd88:	2000      	movs	r0, #0
    cd8a:	f7f6 fe05 	bl	3998 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    cd8e:	6829      	ldr	r1, [r5, #0]
    cd90:	4408      	add	r0, r1
    cd92:	6028      	str	r0, [r5, #0]
    cd94:	bd70      	pop	{r4, r5, r6, pc}

0000cd96 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cd96:	b50e      	push	{r1, r2, r3, lr}
    cd98:	4601      	mov	r1, r0
    cd9a:	4668      	mov	r0, sp
    cd9c:	f000 f818 	bl	cdd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cda0:	4668      	mov	r0, sp
    cda2:	f001 fbd1 	bl	e548 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cda6:	bd0e      	pop	{r1, r2, r3, pc}
    cda8:	b570      	push	{r4, r5, r6, lr}
    cdaa:	460c      	mov	r4, r1
    cdac:	4605      	mov	r5, r0
    cdae:	f7f4 fb49 	bl	1444 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cdb2:	2800      	cmp	r0, #0
    cdb4:	d002      	beq.n	cdbc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cdb6:	2d3e      	cmp	r5, #62	; 0x3e
    cdb8:	d001      	beq.n	cdbe <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cdba:	2001      	movs	r0, #1
    cdbc:	bd70      	pop	{r4, r5, r6, pc}
    cdbe:	2c12      	cmp	r4, #18
    cdc0:	d004      	beq.n	cdcc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cdc2:	4620      	mov	r0, r4
    cdc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdc8:	f7f4 bb4e 	b.w	1468 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cdcc:	2000      	movs	r0, #0
    cdce:	bd70      	pop	{r4, r5, r6, pc}

0000cdd0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cdd0:	880a      	ldrh	r2, [r1, #0]
    cdd2:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cdd6:	8082      	strh	r2, [r0, #4]
    cdd8:	884a      	ldrh	r2, [r1, #2]
    cdda:	80c2      	strh	r2, [r0, #6]
    cddc:	784a      	ldrb	r2, [r1, #1]
    cdde:	0993      	lsrs	r3, r2, #6
    cde0:	2200      	movs	r2, #0
    cde2:	7242      	strb	r2, [r0, #9]
    cde4:	784b      	ldrb	r3, [r1, #1]
    cde6:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cdea:	b11b      	cbz	r3, cdf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cdec:	2b01      	cmp	r3, #1
    cdee:	d005      	beq.n	cdfc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cdf0:	2b02      	cmp	r3, #2
    cdf2:	d005      	beq.n	ce00 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cdf4:	7202      	strb	r2, [r0, #8]
    cdf6:	1d09      	adds	r1, r1, #4
    cdf8:	6001      	str	r1, [r0, #0]
    cdfa:	4770      	bx	lr
    cdfc:	2201      	movs	r2, #1
    cdfe:	e7f9      	b.n	cdf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ce00:	2202      	movs	r2, #2
    ce02:	e7f7      	b.n	cdf4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ce04 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ce04:	b510      	push	{r4, lr}
    ce06:	460c      	mov	r4, r1
    ce08:	7909      	ldrb	r1, [r1, #4]
    ce0a:	7001      	strb	r1, [r0, #0]
    ce0c:	7841      	ldrb	r1, [r0, #1]
    ce0e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    ce12:	7041      	strb	r1, [r0, #1]
    ce14:	88a2      	ldrh	r2, [r4, #4]
    ce16:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ce1a:	4311      	orrs	r1, r2
    ce1c:	7041      	strb	r1, [r0, #1]
    ce1e:	79a2      	ldrb	r2, [r4, #6]
    ce20:	7082      	strb	r2, [r0, #2]
    ce22:	88e2      	ldrh	r2, [r4, #6]
    ce24:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ce28:	0a12      	lsrs	r2, r2, #8
    ce2a:	70c2      	strb	r2, [r0, #3]
    ce2c:	7041      	strb	r1, [r0, #1]
    ce2e:	7a22      	ldrb	r2, [r4, #8]
    ce30:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ce34:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ce38:	7041      	strb	r1, [r0, #1]
    ce3a:	7a62      	ldrb	r2, [r4, #9]
    ce3c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ce40:	7041      	strb	r1, [r0, #1]
    ce42:	6821      	ldr	r1, [r4, #0]
    ce44:	1d02      	adds	r2, r0, #4
    ce46:	4291      	cmp	r1, r2
    ce48:	d006      	beq.n	ce58 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ce4a:	88e2      	ldrh	r2, [r4, #6]
    ce4c:	2afb      	cmp	r2, #251	; 0xfb
    ce4e:	d300      	bcc.n	ce52 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ce50:	22fb      	movs	r2, #251	; 0xfb
    ce52:	1d00      	adds	r0, r0, #4
    ce54:	f003 ff23 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce58:	79a0      	ldrb	r0, [r4, #6]
    ce5a:	1d00      	adds	r0, r0, #4
    ce5c:	b2c0      	uxtb	r0, r0
    ce5e:	bd10      	pop	{r4, pc}

0000ce60 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ce60:	b430      	push	{r4, r5}
    ce62:	790a      	ldrb	r2, [r1, #4]
    ce64:	7002      	strb	r2, [r0, #0]
    ce66:	7842      	ldrb	r2, [r0, #1]
    ce68:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ce6c:	7042      	strb	r2, [r0, #1]
    ce6e:	888b      	ldrh	r3, [r1, #4]
    ce70:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ce74:	431a      	orrs	r2, r3
    ce76:	7042      	strb	r2, [r0, #1]
    ce78:	798b      	ldrb	r3, [r1, #6]
    ce7a:	7083      	strb	r3, [r0, #2]
    ce7c:	78c3      	ldrb	r3, [r0, #3]
    ce7e:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ce82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ce86:	70c3      	strb	r3, [r0, #3]
    ce88:	88cc      	ldrh	r4, [r1, #6]
    ce8a:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ce8e:	4323      	orrs	r3, r4
    ce90:	70c3      	strb	r3, [r0, #3]
    ce92:	7042      	strb	r2, [r0, #1]
    ce94:	7a0c      	ldrb	r4, [r1, #8]
    ce96:	f004 0403 	and.w	r4, r4, #3
    ce9a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ce9e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cea2:	7042      	strb	r2, [r0, #1]
    cea4:	7a4c      	ldrb	r4, [r1, #9]
    cea6:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ceaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ceae:	7042      	strb	r2, [r0, #1]
    ceb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ceb4:	70c2      	strb	r2, [r0, #3]
    ceb6:	680b      	ldr	r3, [r1, #0]
    ceb8:	1d02      	adds	r2, r0, #4
    ceba:	4293      	cmp	r3, r2
    cebc:	d005      	beq.n	ceca <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cebe:	88ca      	ldrh	r2, [r1, #6]
    cec0:	bc30      	pop	{r4, r5}
    cec2:	4619      	mov	r1, r3
    cec4:	1d00      	adds	r0, r0, #4
    cec6:	f003 beea 	b.w	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ceca:	bc30      	pop	{r4, r5}
    cecc:	4770      	bx	lr

0000cece <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ced2:	460d      	mov	r5, r1
    ced4:	4604      	mov	r4, r0
    ced6:	f891 c000 	ldrb.w	ip, [r1]
    ceda:	2000      	movs	r0, #0
    cedc:	230c      	movs	r3, #12
    cede:	2705      	movs	r7, #5
    cee0:	2203      	movs	r2, #3
    cee2:	263e      	movs	r6, #62	; 0x3e
    cee4:	21ff      	movs	r1, #255	; 0xff
    cee6:	f1bc 0f1e 	cmp.w	ip, #30
    ceea:	d27e      	bcs.n	cfea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    ceec:	e8df f00c 	tbb	[pc, ip]
    cef0:	424029e7 	.word	0x424029e7
    cef4:	806d63e7 	.word	0x806d63e7
    cef8:	b9aeac99 	.word	0xb9aeac99
    cefc:	0ff3dfc4 	.word	0x0ff3dfc4
    cf00:	cf48e7e7 	.word	0xcf48e7e7
    cf04:	eff0fcd2 	.word	0xeff0fcd2
    cf08:	ebecedee 	.word	0xebecedee
    cf0c:	e9ea      	.short	0xe9ea
    cf0e:	200e      	movs	r0, #14
    cf10:	7020      	strb	r0, [r4, #0]
    cf12:	7968      	ldrb	r0, [r5, #5]
    cf14:	70e0      	strb	r0, [r4, #3]
    cf16:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf1a:	0a00      	lsrs	r0, r0, #8
    cf1c:	7120      	strb	r0, [r4, #4]
    cf1e:	7928      	ldrb	r0, [r5, #4]
    cf20:	70a0      	strb	r0, [r4, #2]
    cf22:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf26:	3883      	subs	r0, #131	; 0x83
    cf28:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    cf2c:	d003      	beq.n	cf36 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    cf2e:	2136      	movs	r1, #54	; 0x36
    cf30:	20c7      	movs	r0, #199	; 0xc7
    cf32:	f7f4 f907 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf36:	1de9      	adds	r1, r5, #7
    cf38:	1d60      	adds	r0, r4, #5
    cf3a:	f003 feb0 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf3e:	2007      	movs	r0, #7
    cf40:	e0bb      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf42:	7023      	strb	r3, [r4, #0]
    cf44:	7928      	ldrb	r0, [r5, #4]
    cf46:	70a0      	strb	r0, [r4, #2]
    cf48:	7968      	ldrb	r0, [r5, #5]
    cf4a:	70e0      	strb	r0, [r4, #3]
    cf4c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf50:	0a00      	lsrs	r0, r0, #8
    cf52:	7120      	strb	r0, [r4, #4]
    cf54:	79e8      	ldrb	r0, [r5, #7]
    cf56:	7160      	strb	r0, [r4, #5]
    cf58:	7a28      	ldrb	r0, [r5, #8]
    cf5a:	71a0      	strb	r0, [r4, #6]
    cf5c:	8928      	ldrh	r0, [r5, #8]
    cf5e:	0a00      	lsrs	r0, r0, #8
    cf60:	71e0      	strb	r0, [r4, #7]
    cf62:	7aa8      	ldrb	r0, [r5, #10]
    cf64:	7220      	strb	r0, [r4, #8]
    cf66:	8968      	ldrh	r0, [r5, #10]
    cf68:	0a00      	lsrs	r0, r0, #8
    cf6a:	7260      	strb	r0, [r4, #9]
    cf6c:	2008      	movs	r0, #8
    cf6e:	e0a4      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf70:	2010      	movs	r0, #16
    cf72:	e000      	b.n	cf76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cf74:	201a      	movs	r0, #26
    cf76:	7020      	strb	r0, [r4, #0]
    cf78:	7928      	ldrb	r0, [r5, #4]
    cf7a:	70a0      	strb	r0, [r4, #2]
    cf7c:	2001      	movs	r0, #1
    cf7e:	e09c      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf80:	2029      	movs	r0, #41	; 0x29
    cf82:	f7f4 fa71 	bl	1468 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cf86:	b148      	cbz	r0, cf9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    cf88:	7026      	strb	r6, [r4, #0]
    cf8a:	2029      	movs	r0, #41	; 0x29
    cf8c:	70a0      	strb	r0, [r4, #2]
    cf8e:	2221      	movs	r2, #33	; 0x21
    cf90:	1d29      	adds	r1, r5, #4
    cf92:	1ce0      	adds	r0, r4, #3
    cf94:	f003 fe83 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf98:	2022      	movs	r0, #34	; 0x22
    cf9a:	e08e      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf9c:	200a      	movs	r0, #10
    cf9e:	f7f4 fa63 	bl	1468 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cfa2:	2800      	cmp	r0, #0
    cfa4:	4629      	mov	r1, r5
    cfa6:	4620      	mov	r0, r4
    cfa8:	d002      	beq.n	cfb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    cfaa:	f000 f95b 	bl	d264 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cfae:	e082      	b.n	d0b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cfb0:	f000 f92f 	bl	d212 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cfb4:	e07f      	b.n	d0b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cfb6:	7026      	strb	r6, [r4, #0]
    cfb8:	2014      	movs	r0, #20
    cfba:	70a0      	strb	r0, [r4, #2]
    cfbc:	7928      	ldrb	r0, [r5, #4]
    cfbe:	70e0      	strb	r0, [r4, #3]
    cfc0:	88a8      	ldrh	r0, [r5, #4]
    cfc2:	0a00      	lsrs	r0, r0, #8
    cfc4:	7120      	strb	r0, [r4, #4]
    cfc6:	79a8      	ldrb	r0, [r5, #6]
    cfc8:	e0c0      	b.n	d14c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cfca:	223e      	movs	r2, #62	; 0x3e
    cfcc:	7022      	strb	r2, [r4, #0]
    cfce:	2204      	movs	r2, #4
    cfd0:	70a2      	strb	r2, [r4, #2]
    cfd2:	6868      	ldr	r0, [r5, #4]
    cfd4:	f8c4 0003 	str.w	r0, [r4, #3]
    cfd8:	68a8      	ldr	r0, [r5, #8]
    cfda:	f8c4 0007 	str.w	r0, [r4, #7]
    cfde:	89a8      	ldrh	r0, [r5, #12]
    cfe0:	f8a4 000b 	strh.w	r0, [r4, #11]
    cfe4:	7ba8      	ldrb	r0, [r5, #14]
    cfe6:	7360      	strb	r0, [r4, #13]
    cfe8:	e000      	b.n	cfec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    cfea:	e068      	b.n	d0be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cfec:	200c      	movs	r0, #12
    cfee:	e064      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cff0:	7026      	strb	r6, [r4, #0]
    cff2:	70a2      	strb	r2, [r4, #2]
    cff4:	7928      	ldrb	r0, [r5, #4]
    cff6:	70e0      	strb	r0, [r4, #3]
    cff8:	79a8      	ldrb	r0, [r5, #6]
    cffa:	7120      	strb	r0, [r4, #4]
    cffc:	88e8      	ldrh	r0, [r5, #6]
    cffe:	0a00      	lsrs	r0, r0, #8
    d000:	7160      	strb	r0, [r4, #5]
    d002:	7a28      	ldrb	r0, [r5, #8]
    d004:	71a0      	strb	r0, [r4, #6]
    d006:	8928      	ldrh	r0, [r5, #8]
    d008:	0a00      	lsrs	r0, r0, #8
    d00a:	71e0      	strb	r0, [r4, #7]
    d00c:	7aa8      	ldrb	r0, [r5, #10]
    d00e:	7220      	strb	r0, [r4, #8]
    d010:	8968      	ldrh	r0, [r5, #10]
    d012:	0a00      	lsrs	r0, r0, #8
    d014:	7260      	strb	r0, [r4, #9]
    d016:	7b28      	ldrb	r0, [r5, #12]
    d018:	72a0      	strb	r0, [r4, #10]
    d01a:	89a8      	ldrh	r0, [r5, #12]
    d01c:	0a00      	lsrs	r0, r0, #8
    d01e:	72e0      	strb	r0, [r4, #11]
    d020:	e0d1      	b.n	d1c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    d022:	7026      	strb	r6, [r4, #0]
    d024:	70a7      	strb	r7, [r4, #2]
    d026:	7928      	ldrb	r0, [r5, #4]
    d028:	70e0      	strb	r0, [r4, #3]
    d02a:	88a8      	ldrh	r0, [r5, #4]
    d02c:	0a00      	lsrs	r0, r0, #8
    d02e:	7120      	strb	r0, [r4, #4]
    d030:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d034:	f8c4 0005 	str.w	r0, [r4, #5]
    d038:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d03c:	f8c4 0009 	str.w	r0, [r4, #9]
    d040:	89e8      	ldrh	r0, [r5, #14]
    d042:	f8a4 000d 	strh.w	r0, [r4, #13]
    d046:	e0e2      	b.n	d20e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    d048:	2011      	movs	r0, #17
    d04a:	e045      	b.n	d0d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    d04c:	7027      	strb	r7, [r4, #0]
    d04e:	7928      	ldrb	r0, [r5, #4]
    d050:	70a0      	strb	r0, [r4, #2]
    d052:	7968      	ldrb	r0, [r5, #5]
    d054:	70e0      	strb	r0, [r4, #3]
    d056:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d05a:	0a00      	lsrs	r0, r0, #8
    d05c:	7120      	strb	r0, [r4, #4]
    d05e:	79e8      	ldrb	r0, [r5, #7]
    d060:	e074      	b.n	d14c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    d062:	2008      	movs	r0, #8
    d064:	7020      	strb	r0, [r4, #0]
    d066:	7928      	ldrb	r0, [r5, #4]
    d068:	70a0      	strb	r0, [r4, #2]
    d06a:	79a8      	ldrb	r0, [r5, #6]
    d06c:	70e0      	strb	r0, [r4, #3]
    d06e:	88e8      	ldrh	r0, [r5, #6]
    d070:	0a00      	lsrs	r0, r0, #8
    d072:	7120      	strb	r0, [r4, #4]
    d074:	7a28      	ldrb	r0, [r5, #8]
    d076:	e069      	b.n	d14c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    d078:	2030      	movs	r0, #48	; 0x30
    d07a:	7020      	strb	r0, [r4, #0]
    d07c:	7928      	ldrb	r0, [r5, #4]
    d07e:	70a0      	strb	r0, [r4, #2]
    d080:	79a8      	ldrb	r0, [r5, #6]
    d082:	70e0      	strb	r0, [r4, #3]
    d084:	88e8      	ldrh	r0, [r5, #6]
    d086:	0a00      	lsrs	r0, r0, #8
    d088:	7120      	strb	r0, [r4, #4]
    d08a:	2003      	movs	r0, #3
    d08c:	e015      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d08e:	7026      	strb	r6, [r4, #0]
    d090:	2007      	movs	r0, #7
    d092:	e060      	b.n	d156 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    d094:	7026      	strb	r6, [r4, #0]
    d096:	70a3      	strb	r3, [r4, #2]
    d098:	7928      	ldrb	r0, [r5, #4]
    d09a:	70e0      	strb	r0, [r4, #3]
    d09c:	79a8      	ldrb	r0, [r5, #6]
    d09e:	7120      	strb	r0, [r4, #4]
    d0a0:	88e8      	ldrh	r0, [r5, #6]
    d0a2:	0a00      	lsrs	r0, r0, #8
    d0a4:	7160      	strb	r0, [r4, #5]
    d0a6:	7a28      	ldrb	r0, [r5, #8]
    d0a8:	71a0      	strb	r0, [r4, #6]
    d0aa:	7a68      	ldrb	r0, [r5, #9]
    d0ac:	e029      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d0ae:	1d29      	adds	r1, r5, #4
    d0b0:	4620      	mov	r0, r4
    d0b2:	f7f4 f999 	bl	13e8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x60>
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d001      	beq.n	d0be <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    d0ba:	7060      	strb	r0, [r4, #1]
    d0bc:	1c80      	adds	r0, r0, #2
    d0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0c2:	e08f      	b.n	d1e4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    d0c4:	e063      	b.n	d18e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    d0c6:	e044      	b.n	d152 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d0c8:	e06f      	b.n	d1aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    d0ca:	e07e      	b.n	d1ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    d0cc:	e036      	b.n	d13c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    d0ce:	e01e      	b.n	d10e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    d0d0:	e01a      	b.n	d108 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    d0d2:	e009      	b.n	d0e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    d0d4:	e7ff      	b.n	d0d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    d0d6:	2057      	movs	r0, #87	; 0x57
    d0d8:	7020      	strb	r0, [r4, #0]
    d0da:	7928      	ldrb	r0, [r5, #4]
    d0dc:	70a0      	strb	r0, [r4, #2]
    d0de:	88a8      	ldrh	r0, [r5, #4]
    d0e0:	0a00      	lsrs	r0, r0, #8
    d0e2:	70e0      	strb	r0, [r4, #3]
    d0e4:	2002      	movs	r0, #2
    d0e6:	e7e8      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d0e8:	7026      	strb	r6, [r4, #0]
    d0ea:	2012      	movs	r0, #18
    d0ec:	70a0      	strb	r0, [r4, #2]
    d0ee:	7928      	ldrb	r0, [r5, #4]
    d0f0:	70e0      	strb	r0, [r4, #3]
    d0f2:	7968      	ldrb	r0, [r5, #5]
    d0f4:	7120      	strb	r0, [r4, #4]
    d0f6:	79a8      	ldrb	r0, [r5, #6]
    d0f8:	7160      	strb	r0, [r4, #5]
    d0fa:	88e8      	ldrh	r0, [r5, #6]
    d0fc:	0a00      	lsrs	r0, r0, #8
    d0fe:	71a0      	strb	r0, [r4, #6]
    d100:	7a28      	ldrb	r0, [r5, #8]
    d102:	71e0      	strb	r0, [r4, #7]
    d104:	2006      	movs	r0, #6
    d106:	e7d8      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d108:	7026      	strb	r6, [r4, #0]
    d10a:	2020      	movs	r0, #32
    d10c:	e041      	b.n	d192 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    d10e:	7026      	strb	r6, [r4, #0]
    d110:	2021      	movs	r0, #33	; 0x21
    d112:	70a0      	strb	r0, [r4, #2]
    d114:	7928      	ldrb	r0, [r5, #4]
    d116:	70e0      	strb	r0, [r4, #3]
    d118:	7968      	ldrb	r0, [r5, #5]
    d11a:	7120      	strb	r0, [r4, #4]
    d11c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d120:	0a00      	lsrs	r0, r0, #8
    d122:	7160      	strb	r0, [r4, #5]
    d124:	79e8      	ldrb	r0, [r5, #7]
    d126:	71a0      	strb	r0, [r4, #6]
    d128:	7a28      	ldrb	r0, [r5, #8]
    d12a:	71e0      	strb	r0, [r4, #7]
    d12c:	7a68      	ldrb	r0, [r5, #9]
    d12e:	7220      	strb	r0, [r4, #8]
    d130:	7aa8      	ldrb	r0, [r5, #10]
    d132:	7260      	strb	r0, [r4, #9]
    d134:	7ae8      	ldrb	r0, [r5, #11]
    d136:	72a0      	strb	r0, [r4, #10]
    d138:	2009      	movs	r0, #9
    d13a:	e7be      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d13c:	7021      	strb	r1, [r4, #0]
    d13e:	20a1      	movs	r0, #161	; 0xa1
    d140:	70a0      	strb	r0, [r4, #2]
    d142:	7928      	ldrb	r0, [r5, #4]
    d144:	70e0      	strb	r0, [r4, #3]
    d146:	7968      	ldrb	r0, [r5, #5]
    d148:	7120      	strb	r0, [r4, #4]
    d14a:	2000      	movs	r0, #0
    d14c:	7160      	strb	r0, [r4, #5]
    d14e:	2004      	movs	r0, #4
    d150:	e7b3      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d152:	7021      	strb	r1, [r4, #0]
    d154:	20a2      	movs	r0, #162	; 0xa2
    d156:	70a0      	strb	r0, [r4, #2]
    d158:	7928      	ldrb	r0, [r5, #4]
    d15a:	70e0      	strb	r0, [r4, #3]
    d15c:	88a8      	ldrh	r0, [r5, #4]
    d15e:	0a00      	lsrs	r0, r0, #8
    d160:	7120      	strb	r0, [r4, #4]
    d162:	79a8      	ldrb	r0, [r5, #6]
    d164:	7160      	strb	r0, [r4, #5]
    d166:	88e8      	ldrh	r0, [r5, #6]
    d168:	0a00      	lsrs	r0, r0, #8
    d16a:	71a0      	strb	r0, [r4, #6]
    d16c:	7a28      	ldrb	r0, [r5, #8]
    d16e:	71e0      	strb	r0, [r4, #7]
    d170:	8928      	ldrh	r0, [r5, #8]
    d172:	0a00      	lsrs	r0, r0, #8
    d174:	7220      	strb	r0, [r4, #8]
    d176:	7aa8      	ldrb	r0, [r5, #10]
    d178:	7260      	strb	r0, [r4, #9]
    d17a:	8968      	ldrh	r0, [r5, #10]
    d17c:	0a00      	lsrs	r0, r0, #8
    d17e:	72a0      	strb	r0, [r4, #10]
    d180:	7b28      	ldrb	r0, [r5, #12]
    d182:	72e0      	strb	r0, [r4, #11]
    d184:	89a8      	ldrh	r0, [r5, #12]
    d186:	0a00      	lsrs	r0, r0, #8
    d188:	7320      	strb	r0, [r4, #12]
    d18a:	200b      	movs	r0, #11
    d18c:	e795      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d18e:	7021      	strb	r1, [r4, #0]
    d190:	20a3      	movs	r0, #163	; 0xa3
    d192:	70a0      	strb	r0, [r4, #2]
    d194:	7928      	ldrb	r0, [r5, #4]
    d196:	70e0      	strb	r0, [r4, #3]
    d198:	88a8      	ldrh	r0, [r5, #4]
    d19a:	0a00      	lsrs	r0, r0, #8
    d19c:	7120      	strb	r0, [r4, #4]
    d19e:	79a8      	ldrb	r0, [r5, #6]
    d1a0:	7160      	strb	r0, [r4, #5]
    d1a2:	79e8      	ldrb	r0, [r5, #7]
    d1a4:	71a0      	strb	r0, [r4, #6]
    d1a6:	2005      	movs	r0, #5
    d1a8:	e787      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d1aa:	7026      	strb	r6, [r4, #0]
    d1ac:	2013      	movs	r0, #19
    d1ae:	70a0      	strb	r0, [r4, #2]
    d1b0:	7928      	ldrb	r0, [r5, #4]
    d1b2:	70e0      	strb	r0, [r4, #3]
    d1b4:	7968      	ldrb	r0, [r5, #5]
    d1b6:	7120      	strb	r0, [r4, #4]
    d1b8:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d1bc:	f8c4 0005 	str.w	r0, [r4, #5]
    d1c0:	8968      	ldrh	r0, [r5, #10]
    d1c2:	f8a4 0009 	strh.w	r0, [r4, #9]
    d1c6:	200a      	movs	r0, #10
    d1c8:	e777      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d1ca:	7021      	strb	r1, [r4, #0]
    d1cc:	20a4      	movs	r0, #164	; 0xa4
    d1ce:	70a0      	strb	r0, [r4, #2]
    d1d0:	7928      	ldrb	r0, [r5, #4]
    d1d2:	70e0      	strb	r0, [r4, #3]
    d1d4:	88a8      	ldrh	r0, [r5, #4]
    d1d6:	0a00      	lsrs	r0, r0, #8
    d1d8:	7120      	strb	r0, [r4, #4]
    d1da:	79a8      	ldrb	r0, [r5, #6]
    d1dc:	7160      	strb	r0, [r4, #5]
    d1de:	79e8      	ldrb	r0, [r5, #7]
    d1e0:	71a0      	strb	r0, [r4, #6]
    d1e2:	e6ac      	b.n	cf3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    d1e4:	7021      	strb	r1, [r4, #0]
    d1e6:	2080      	movs	r0, #128	; 0x80
    d1e8:	70a0      	strb	r0, [r4, #2]
    d1ea:	88a9      	ldrh	r1, [r5, #4]
    d1ec:	f8a4 1003 	strh.w	r1, [r4, #3]
    d1f0:	88e9      	ldrh	r1, [r5, #6]
    d1f2:	f8a4 1005 	strh.w	r1, [r4, #5]
    d1f6:	7a29      	ldrb	r1, [r5, #8]
    d1f8:	71e1      	strb	r1, [r4, #7]
    d1fa:	8969      	ldrh	r1, [r5, #10]
    d1fc:	8121      	strh	r1, [r4, #8]
    d1fe:	89a9      	ldrh	r1, [r5, #12]
    d200:	8161      	strh	r1, [r4, #10]
    d202:	89e9      	ldrh	r1, [r5, #14]
    d204:	81a1      	strh	r1, [r4, #12]
    d206:	7c29      	ldrb	r1, [r5, #16]
    d208:	f001 0101 	and.w	r1, r1, #1
    d20c:	73a1      	strb	r1, [r4, #14]
    d20e:	200d      	movs	r0, #13
    d210:	e753      	b.n	d0ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000d212 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d212:	223e      	movs	r2, #62	; 0x3e
    d214:	7002      	strb	r2, [r0, #0]
    d216:	2201      	movs	r2, #1
    d218:	7082      	strb	r2, [r0, #2]
    d21a:	790a      	ldrb	r2, [r1, #4]
    d21c:	70c2      	strb	r2, [r0, #3]
    d21e:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d222:	7102      	strb	r2, [r0, #4]
    d224:	880a      	ldrh	r2, [r1, #0]
    d226:	0a12      	lsrs	r2, r2, #8
    d228:	7142      	strb	r2, [r0, #5]
    d22a:	788a      	ldrb	r2, [r1, #2]
    d22c:	7182      	strb	r2, [r0, #6]
    d22e:	78ca      	ldrb	r2, [r1, #3]
    d230:	71c2      	strb	r2, [r0, #7]
    d232:	684a      	ldr	r2, [r1, #4]
    d234:	6082      	str	r2, [r0, #8]
    d236:	890a      	ldrh	r2, [r1, #8]
    d238:	8182      	strh	r2, [r0, #12]
    d23a:	7d8a      	ldrb	r2, [r1, #22]
    d23c:	7382      	strb	r2, [r0, #14]
    d23e:	8aca      	ldrh	r2, [r1, #22]
    d240:	0a12      	lsrs	r2, r2, #8
    d242:	73c2      	strb	r2, [r0, #15]
    d244:	7e0a      	ldrb	r2, [r1, #24]
    d246:	7402      	strb	r2, [r0, #16]
    d248:	8b0a      	ldrh	r2, [r1, #24]
    d24a:	0a12      	lsrs	r2, r2, #8
    d24c:	7442      	strb	r2, [r0, #17]
    d24e:	7e8a      	ldrb	r2, [r1, #26]
    d250:	7482      	strb	r2, [r0, #18]
    d252:	8b4a      	ldrh	r2, [r1, #26]
    d254:	0a12      	lsrs	r2, r2, #8
    d256:	74c2      	strb	r2, [r0, #19]
    d258:	7f09      	ldrb	r1, [r1, #28]
    d25a:	7501      	strb	r1, [r0, #20]
    d25c:	2113      	movs	r1, #19
    d25e:	7041      	strb	r1, [r0, #1]
    d260:	4608      	mov	r0, r1
    d262:	4770      	bx	lr
    d264:	223e      	movs	r2, #62	; 0x3e
    d266:	7002      	strb	r2, [r0, #0]
    d268:	220a      	movs	r2, #10
    d26a:	7082      	strb	r2, [r0, #2]
    d26c:	790a      	ldrb	r2, [r1, #4]
    d26e:	70c2      	strb	r2, [r0, #3]
    d270:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d274:	7102      	strb	r2, [r0, #4]
    d276:	880a      	ldrh	r2, [r1, #0]
    d278:	0a12      	lsrs	r2, r2, #8
    d27a:	7142      	strb	r2, [r0, #5]
    d27c:	788a      	ldrb	r2, [r1, #2]
    d27e:	7182      	strb	r2, [r0, #6]
    d280:	78ca      	ldrb	r2, [r1, #3]
    d282:	71c2      	strb	r2, [r0, #7]
    d284:	684a      	ldr	r2, [r1, #4]
    d286:	6082      	str	r2, [r0, #8]
    d288:	890a      	ldrh	r2, [r1, #8]
    d28a:	8182      	strh	r2, [r0, #12]
    d28c:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d290:	f8c0 200e 	str.w	r2, [r0, #14]
    d294:	89ca      	ldrh	r2, [r1, #14]
    d296:	8242      	strh	r2, [r0, #18]
    d298:	690a      	ldr	r2, [r1, #16]
    d29a:	6142      	str	r2, [r0, #20]
    d29c:	8a8a      	ldrh	r2, [r1, #20]
    d29e:	8302      	strh	r2, [r0, #24]
    d2a0:	7d8a      	ldrb	r2, [r1, #22]
    d2a2:	7682      	strb	r2, [r0, #26]
    d2a4:	8aca      	ldrh	r2, [r1, #22]
    d2a6:	0a12      	lsrs	r2, r2, #8
    d2a8:	76c2      	strb	r2, [r0, #27]
    d2aa:	7e0a      	ldrb	r2, [r1, #24]
    d2ac:	7702      	strb	r2, [r0, #28]
    d2ae:	8b0a      	ldrh	r2, [r1, #24]
    d2b0:	0a12      	lsrs	r2, r2, #8
    d2b2:	7742      	strb	r2, [r0, #29]
    d2b4:	7e8a      	ldrb	r2, [r1, #26]
    d2b6:	7782      	strb	r2, [r0, #30]
    d2b8:	8b4a      	ldrh	r2, [r1, #26]
    d2ba:	0a12      	lsrs	r2, r2, #8
    d2bc:	77c2      	strb	r2, [r0, #31]
    d2be:	7f09      	ldrb	r1, [r1, #28]
    d2c0:	f880 1020 	strb.w	r1, [r0, #32]
    d2c4:	211f      	movs	r1, #31
    d2c6:	7041      	strb	r1, [r0, #1]
    d2c8:	4608      	mov	r0, r1
    d2ca:	4770      	bx	lr
    d2cc:	094a      	lsrs	r2, r1, #5
    d2ce:	f001 011f 	and.w	r1, r1, #31
    d2d2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d2d6:	40c8      	lsrs	r0, r1
    d2d8:	f000 0001 	and.w	r0, r0, #1
    d2dc:	4770      	bx	lr

0000d2de <sdc_hci_data_put>:
    d2de:	b510      	push	{r4, lr}
    d2e0:	f06f 0415 	mvn.w	r4, #21
    d2e4:	b120      	cbz	r0, d2f0 <sdc_hci_data_put+0x12>
    d2e6:	f7ff fd56 	bl	cd96 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d2ea:	b108      	cbz	r0, d2f0 <sdc_hci_data_put+0x12>
    d2ec:	2000      	movs	r0, #0
    d2ee:	bd10      	pop	{r4, pc}
    d2f0:	4620      	mov	r0, r4
    d2f2:	bd10      	pop	{r4, pc}

0000d2f4 <sdc_hci_get>:
    d2f4:	b510      	push	{r4, lr}
    d2f6:	460c      	mov	r4, r1
    d2f8:	b130      	cbz	r0, d308 <sdc_hci_get+0x14>
    d2fa:	b12c      	cbz	r4, d308 <sdc_hci_get+0x14>
    d2fc:	f7f4 f81e 	bl	133c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d300:	b128      	cbz	r0, d30e <sdc_hci_get+0x1a>
    d302:	7020      	strb	r0, [r4, #0]
    d304:	2000      	movs	r0, #0
    d306:	bd10      	pop	{r4, pc}
    d308:	f06f 0015 	mvn.w	r0, #21
    d30c:	bd10      	pop	{r4, pc}
    d30e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d312:	bd10      	pop	{r4, pc}

0000d314 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d314:	f002 bf62 	b.w	101dc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d318 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d318:	f002 bf7d 	b.w	10216 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d31c <sdc_hci_cmd_cb_set_event_mask>:
    d31c:	b510      	push	{r4, lr}
    d31e:	f7f4 f8b3 	bl	1488 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d322:	2000      	movs	r0, #0
    d324:	bd10      	pop	{r4, pc}

0000d326 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d326:	b510      	push	{r4, lr}
    d328:	f7f4 f8be 	bl	14a8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d32c:	2000      	movs	r0, #0
    d32e:	bd10      	pop	{r4, pc}

0000d330 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d330:	f002 bf92 	b.w	10258 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d334 <sdc_hci_cmd_vs_conn_event_extend>:
    d334:	b508      	push	{r3, lr}
    d336:	7800      	ldrb	r0, [r0, #0]
    d338:	f88d 0000 	strb.w	r0, [sp]
    d33c:	4668      	mov	r0, sp
    d33e:	f002 fe6e 	bl	1001e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d342:	bd08      	pop	{r3, pc}

0000d344 <sdc_hci_cmd_vs_conn_update>:
    d344:	2001      	movs	r0, #1
    d346:	4770      	bx	lr

0000d348 <sdc_hci_cmd_vs_event_length_set>:
    d348:	f7f9 bfec 	b.w	7324 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d34c <sdc_hci_cmd_vs_llpm_mode_set>:
    d34c:	2001      	movs	r0, #1
    d34e:	4770      	bx	lr

0000d350 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d350:	7881      	ldrb	r1, [r0, #2]
    d352:	8800      	ldrh	r0, [r0, #0]
    d354:	f002 be13 	b.w	ff7e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d358 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d358:	7800      	ldrb	r0, [r0, #0]
    d35a:	b100      	cbz	r0, d35e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d35c:	2001      	movs	r0, #1
    d35e:	f002 be09 	b.w	ff74 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d362 <sdc_hci_cmd_vs_set_adv_randomness>:
    d362:	f002 be36 	b.w	ffd2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d366 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d366:	b510      	push	{r4, lr}
    d368:	4604      	mov	r4, r0
    d36a:	f7ff f9f9 	bl	c760 <mpsl_temperature_get>
    d36e:	17c1      	asrs	r1, r0, #31
    d370:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d374:	1080      	asrs	r0, r0, #2
    d376:	287f      	cmp	r0, #127	; 0x7f
    d378:	dd01      	ble.n	d37e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d37a:	207f      	movs	r0, #127	; 0x7f
    d37c:	e004      	b.n	d388 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d37e:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d382:	4288      	cmp	r0, r1
    d384:	da00      	bge.n	d388 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d386:	4608      	mov	r0, r1
    d388:	7020      	strb	r0, [r4, #0]
    d38a:	2000      	movs	r0, #0
    d38c:	bd10      	pop	{r4, pc}

0000d38e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d38e:	f002 be35 	b.w	fffc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d392 <sdc_hci_cmd_ip_read_bd_addr>:
    d392:	f002 bf34 	b.w	101fe <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d396 <sdc_hci_cmd_ip_read_local_version_information>:
    d396:	f7f9 bfd3 	b.w	7340 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d39a <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d39a:	f002 bbc2 	b.w	fb22 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d39e <sdc_hci_cmd_le_clear_filter_accept_list>:
    d39e:	f002 bbd7 	b.w	fb50 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d3a2 <sdc_hci_cmd_le_encrypt>:
    d3a2:	f002 bbe2 	b.w	fb6a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d3a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d3a6:	8802      	ldrh	r2, [r0, #0]
    d3a8:	800a      	strh	r2, [r1, #0]
    d3aa:	f002 bbe7 	b.w	fb7c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d3ae <sdc_hci_cmd_le_long_term_key_request_reply>:
    d3ae:	8802      	ldrh	r2, [r0, #0]
    d3b0:	800a      	strh	r2, [r1, #0]
    d3b2:	f002 bbfc 	b.w	fbae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d3b6 <sdc_hci_cmd_le_rand>:
    d3b6:	f002 bc24 	b.w	fc02 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d3ba <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d3ba:	f002 bc28 	b.w	fc0e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d3be <sdc_hci_cmd_le_read_buffer_size>:
    d3be:	f7f9 bebf 	b.w	7140 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d3c2 <sdc_hci_cmd_le_read_channel_map>:
    d3c2:	f7f9 bec7 	b.w	7154 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d3c6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d3c6:	f002 bc62 	b.w	fc8e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d3ca <sdc_hci_cmd_le_read_max_data_length>:
    d3ca:	f002 bc2b 	b.w	fc24 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d3ce <sdc_hci_cmd_le_read_phy>:
    d3ce:	f7f9 bee9 	b.w	71a4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d3d2 <sdc_hci_cmd_le_read_remote_features>:
    d3d2:	f002 bc30 	b.w	fc36 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d3d6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d3d6:	f7f9 bf0b 	b.w	71f0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d3da <sdc_hci_cmd_le_read_transmit_power>:
    d3da:	f002 bc48 	b.w	fc6e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d3de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d3de:	f002 bc5d 	b.w	fc9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d3e2 <sdc_hci_cmd_le_set_adv_data>:
    d3e2:	f002 bc70 	b.w	fcc6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d3e6 <sdc_hci_cmd_le_set_adv_enable>:
    d3e6:	f002 bc83 	b.w	fcf0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d3ea <sdc_hci_cmd_le_set_adv_params>:
    d3ea:	f002 bcb4 	b.w	fd56 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d3ee <sdc_hci_cmd_le_set_data_length>:
    d3ee:	f002 bd47 	b.w	fe80 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d3f2 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d3f2:	f002 bd65 	b.w	fec0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d3f6 <sdc_hci_cmd_le_set_default_phy>:
    d3f6:	f7f9 bf05 	b.w	7204 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d3fa <sdc_hci_cmd_le_set_event_mask>:
    d3fa:	b510      	push	{r4, lr}
    d3fc:	f7f4 f83c 	bl	1478 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d400:	2000      	movs	r0, #0
    d402:	bd10      	pop	{r4, pc}

0000d404 <sdc_hci_cmd_le_set_phy>:
    d404:	f002 bd69 	b.w	feda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d408 <sdc_hci_cmd_le_set_random_address>:
    d408:	f002 bd80 	b.w	ff0c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d40c <sdc_hci_cmd_le_set_scan_response_data>:
    d40c:	f002 bd8c 	b.w	ff28 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d410 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d410:	f002 bd9f 	b.w	ff52 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d414 <sdc_hci_cmd_lc_disconnect>:
    d414:	f002 bb37 	b.w	fa86 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d418 <sdc_hci_cmd_lc_read_remote_version_information>:
    d418:	f7f9 bf9c 	b.w	7354 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d41c:	b570      	push	{r4, r5, r6, lr}
    d41e:	880b      	ldrh	r3, [r1, #0]
    d420:	7cc4      	ldrb	r4, [r0, #19]
    d422:	f100 0518 	add.w	r5, r0, #24
    d426:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d42a:	8802      	ldrh	r2, [r0, #0]
    d42c:	4435      	add	r5, r6
    d42e:	1d64      	adds	r4, r4, #5
    d430:	882d      	ldrh	r5, [r5, #0]
    d432:	4422      	add	r2, r4
    d434:	b292      	uxth	r2, r2
    d436:	4425      	add	r5, r4
    d438:	1e54      	subs	r4, r2, #1
    d43a:	442c      	add	r4, r5
    d43c:	fb94 f4f2 	sdiv	r4, r4, r2
    d440:	fb02 6204 	mla	r2, r2, r4, r6
    d444:	8840      	ldrh	r0, [r0, #2]
    d446:	b292      	uxth	r2, r2
    d448:	4290      	cmp	r0, r2
    d44a:	d903      	bls.n	d454 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d44c:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d450:	4310      	orrs	r0, r2
    d452:	e002      	b.n	d45a <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d454:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d458:	4398      	bics	r0, r3
    d45a:	8008      	strh	r0, [r1, #0]
    d45c:	bd70      	pop	{r4, r5, r6, pc}
    d45e:	0442      	lsls	r2, r0, #17
    d460:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d464:	d107      	bne.n	d476 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d466:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d46a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d46e:	4288      	cmp	r0, r1
    d470:	d001      	beq.n	d476 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d472:	2001      	movs	r0, #1
    d474:	4770      	bx	lr
    d476:	2000      	movs	r0, #0
    d478:	4770      	bx	lr

0000d47a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d47a:	8881      	ldrh	r1, [r0, #4]
    d47c:	88c0      	ldrh	r0, [r0, #6]
    d47e:	4288      	cmp	r0, r1
    d480:	d101      	bne.n	d486 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d482:	2001      	movs	r0, #1
    d484:	4770      	bx	lr
    d486:	2000      	movs	r0, #0
    d488:	4770      	bx	lr

0000d48a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d48e:	460f      	mov	r7, r1
    d490:	4604      	mov	r4, r0
    d492:	f100 0118 	add.w	r1, r0, #24
    d496:	8880      	ldrh	r0, [r0, #4]
    d498:	2600      	movs	r6, #0
    d49a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d49e:	1845      	adds	r5, r0, r1
    d4a0:	603e      	str	r6, [r7, #0]
    d4a2:	89e0      	ldrh	r0, [r4, #14]
    d4a4:	2800      	cmp	r0, #0
    d4a6:	d016      	beq.n	d4d6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d4a8:	8961      	ldrh	r1, [r4, #10]
    d4aa:	4408      	add	r0, r1
    d4ac:	b280      	uxth	r0, r0
    d4ae:	8160      	strh	r0, [r4, #10]
    d4b0:	8829      	ldrh	r1, [r5, #0]
    d4b2:	4288      	cmp	r0, r1
    d4b4:	d905      	bls.n	d4c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d4b6:	f240 1151 	movw	r1, #337	; 0x151
    d4ba:	f04f 0014 	mov.w	r0, #20
    d4be:	f7f3 fe41 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4c2:	d106      	bne.n	d4d2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d4c4:	f104 0104 	add.w	r1, r4, #4
    d4c8:	4620      	mov	r0, r4
    d4ca:	f7ff ffa7 	bl	d41c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4ce:	8166      	strh	r6, [r4, #10]
    d4d0:	603d      	str	r5, [r7, #0]
    d4d2:	81e6      	strh	r6, [r4, #14]
    d4d4:	2001      	movs	r0, #1
    d4d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4da <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4de:	4604      	mov	r4, r0
    d4e0:	f100 0318 	add.w	r3, r0, #24
    d4e4:	88c0      	ldrh	r0, [r0, #6]
    d4e6:	460e      	mov	r6, r1
    d4e8:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d4ec:	8a20      	ldrh	r0, [r4, #16]
    d4ee:	19d9      	adds	r1, r3, r7
    d4f0:	b108      	cbz	r0, d4f6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d4f2:	42b0      	cmp	r0, r6
    d4f4:	d202      	bcs.n	d4fc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d4f6:	2000      	movs	r0, #0
    d4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4fc:	89a0      	ldrh	r0, [r4, #12]
    d4fe:	2500      	movs	r5, #0
    d500:	b140      	cbz	r0, d514 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d502:	f8b1 c000 	ldrh.w	ip, [r1]
    d506:	4560      	cmp	r0, ip
    d508:	d006      	beq.n	d518 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d50a:	f44f 7101 	mov.w	r1, #516	; 0x204
    d50e:	2014      	movs	r0, #20
    d510:	f7f3 fe18 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d514:	800d      	strh	r5, [r1, #0]
    d516:	e00e      	b.n	d536 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d518:	f894 c013 	ldrb.w	ip, [r4, #19]
    d51c:	4418      	add	r0, r3
    d51e:	f10c 0c05 	add.w	ip, ip, #5
    d522:	44bc      	add	ip, r7
    d524:	4460      	add	r0, ip
    d526:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d52a:	f820 cc03 	strh.w	ip, [r0, #-3]
    d52e:	f894 c016 	ldrb.w	ip, [r4, #22]
    d532:	f800 cc01 	strb.w	ip, [r0, #-1]
    d536:	89a0      	ldrh	r0, [r4, #12]
    d538:	4430      	add	r0, r6
    d53a:	81a0      	strh	r0, [r4, #12]
    d53c:	8808      	ldrh	r0, [r1, #0]
    d53e:	4430      	add	r0, r6
    d540:	8008      	strh	r0, [r1, #0]
    d542:	b12a      	cbz	r2, d550 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d544:	1da1      	adds	r1, r4, #6
    d546:	4620      	mov	r0, r4
    d548:	f7ff ff68 	bl	d41c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d54c:	81a5      	strh	r5, [r4, #12]
    d54e:	e00a      	b.n	d566 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d550:	7ce0      	ldrb	r0, [r4, #19]
    d552:	89a1      	ldrh	r1, [r4, #12]
    d554:	1d40      	adds	r0, r0, #5
    d556:	4438      	add	r0, r7
    d558:	4419      	add	r1, r3
    d55a:	4408      	add	r0, r1
    d55c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d560:	82a1      	strh	r1, [r4, #20]
    d562:	7880      	ldrb	r0, [r0, #2]
    d564:	75a0      	strb	r0, [r4, #22]
    d566:	8225      	strh	r5, [r4, #16]
    d568:	2001      	movs	r0, #1
    d56a:	e7c5      	b.n	d4f8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d56c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d56c:	1c80      	adds	r0, r0, #2
    d56e:	4770      	bx	lr

0000d570 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d570:	b510      	push	{r4, lr}
    d572:	4604      	mov	r4, r0
    d574:	88c0      	ldrh	r0, [r0, #6]
    d576:	88a1      	ldrh	r1, [r4, #4]
    d578:	4281      	cmp	r1, r0
    d57a:	d003      	beq.n	d584 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d57c:	8960      	ldrh	r0, [r4, #10]
    d57e:	b908      	cbnz	r0, d584 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d580:	89e0      	ldrh	r0, [r4, #14]
    d582:	b108      	cbz	r0, d588 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d584:	2000      	movs	r0, #0
    d586:	bd10      	pop	{r4, pc}
    d588:	1d21      	adds	r1, r4, #4
    d58a:	4620      	mov	r0, r4
    d58c:	f7ff ff46 	bl	d41c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d590:	2000      	movs	r0, #0
    d592:	81e0      	strh	r0, [r4, #14]
    d594:	2001      	movs	r0, #1
    d596:	bd10      	pop	{r4, pc}

0000d598 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d598:	b510      	push	{r4, lr}
    d59a:	4604      	mov	r4, r0
    d59c:	f100 0218 	add.w	r2, r0, #24
    d5a0:	88c0      	ldrh	r0, [r0, #6]
    d5a2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d5a6:	4402      	add	r2, r0
    d5a8:	8820      	ldrh	r0, [r4, #0]
    d5aa:	2845      	cmp	r0, #69	; 0x45
    d5ac:	d200      	bcs.n	d5b0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d5ae:	2045      	movs	r0, #69	; 0x45
    d5b0:	4288      	cmp	r0, r1
    d5b2:	d204      	bcs.n	d5be <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d5b4:	f44f 7182 	mov.w	r1, #260	; 0x104
    d5b8:	2014      	movs	r0, #20
    d5ba:	f7f3 fdc3 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5be:	7ca0      	ldrb	r0, [r4, #18]
    d5c0:	2800      	cmp	r0, #0
    d5c2:	d003      	beq.n	d5cc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d5c4:	8810      	ldrh	r0, [r2, #0]
    d5c6:	4288      	cmp	r0, r1
    d5c8:	d201      	bcs.n	d5ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d5ca:	2000      	movs	r0, #0
    d5cc:	bd10      	pop	{r4, pc}
    d5ce:	8011      	strh	r1, [r2, #0]
    d5d0:	1da1      	adds	r1, r4, #6
    d5d2:	4620      	mov	r0, r4
    d5d4:	f7ff ff22 	bl	d41c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5d8:	2000      	movs	r0, #0
    d5da:	74a0      	strb	r0, [r4, #18]
    d5dc:	2001      	movs	r0, #1
    d5de:	bd10      	pop	{r4, pc}

0000d5e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d5e0:	b510      	push	{r4, lr}
    d5e2:	88c4      	ldrh	r4, [r0, #6]
    d5e4:	8883      	ldrh	r3, [r0, #4]
    d5e6:	4601      	mov	r1, r0
    d5e8:	f100 0218 	add.w	r2, r0, #24
    d5ec:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d5f0:	4410      	add	r0, r2
    d5f2:	42a3      	cmp	r3, r4
    d5f4:	d002      	beq.n	d5fc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d5f6:	8949      	ldrh	r1, [r1, #10]
    d5f8:	2900      	cmp	r1, #0
    d5fa:	d000      	beq.n	d5fe <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d5fc:	2000      	movs	r0, #0
    d5fe:	bd10      	pop	{r4, pc}

0000d600 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d600:	8803      	ldrh	r3, [r0, #0]
    d602:	2b45      	cmp	r3, #69	; 0x45
    d604:	d200      	bcs.n	d608 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d606:	2345      	movs	r3, #69	; 0x45
    d608:	8013      	strh	r3, [r2, #0]
    d60a:	88c2      	ldrh	r2, [r0, #6]
    d60c:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d610:	f100 0218 	add.w	r2, r0, #24
    d614:	441a      	add	r2, r3
    d616:	600a      	str	r2, [r1, #0]
    d618:	8980      	ldrh	r0, [r0, #12]
    d61a:	4770      	bx	lr

0000d61c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d61c:	7cc0      	ldrb	r0, [r0, #19]
    d61e:	1d40      	adds	r0, r0, #5
    d620:	4408      	add	r0, r1
    d622:	1ec0      	subs	r0, r0, #3
    d624:	6010      	str	r0, [r2, #0]
    d626:	8808      	ldrh	r0, [r1, #0]
    d628:	4770      	bx	lr

0000d62a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d62e:	460e      	mov	r6, r1
    d630:	88c1      	ldrh	r1, [r0, #6]
    d632:	8902      	ldrh	r2, [r0, #8]
    d634:	4604      	mov	r4, r0
    d636:	f100 0818 	add.w	r8, r0, #24
    d63a:	8800      	ldrh	r0, [r0, #0]
    d63c:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d640:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d644:	2845      	cmp	r0, #69	; 0x45
    d646:	d200      	bcs.n	d64a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d648:	2045      	movs	r0, #69	; 0x45
    d64a:	42b0      	cmp	r0, r6
    d64c:	d203      	bcs.n	d656 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d64e:	21c6      	movs	r1, #198	; 0xc6
    d650:	2014      	movs	r0, #20
    d652:	f7f3 fd77 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d656:	4610      	mov	r0, r2
    d658:	f7ff ff01 	bl	d45e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d65c:	b110      	cbz	r0, d664 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d65e:	2000      	movs	r0, #0
    d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d664:	42af      	cmp	r7, r5
    d666:	d908      	bls.n	d67a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d668:	7ce1      	ldrb	r1, [r4, #19]
    d66a:	1b78      	subs	r0, r7, r5
    d66c:	1a40      	subs	r0, r0, r1
    d66e:	1f40      	subs	r0, r0, #5
    d670:	4286      	cmp	r6, r0
    d672:	dd02      	ble.n	d67a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d674:	2000      	movs	r0, #0
    d676:	74a0      	strb	r0, [r4, #18]
    d678:	e7f1      	b.n	d65e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d67a:	eb08 0005 	add.w	r0, r8, r5
    d67e:	2101      	movs	r1, #1
    d680:	8006      	strh	r6, [r0, #0]
    d682:	74a1      	strb	r1, [r4, #18]
    d684:	e7ec      	b.n	d660 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d686 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d686:	b538      	push	{r3, r4, r5, lr}
    d688:	88c4      	ldrh	r4, [r0, #6]
    d68a:	8881      	ldrh	r1, [r0, #4]
    d68c:	f100 0218 	add.w	r2, r0, #24
    d690:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d694:	441a      	add	r2, r3
    d696:	42a1      	cmp	r1, r4
    d698:	d010      	beq.n	d6bc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d69a:	8943      	ldrh	r3, [r0, #10]
    d69c:	89c5      	ldrh	r5, [r0, #14]
    d69e:	8812      	ldrh	r2, [r2, #0]
    d6a0:	442b      	add	r3, r5
    d6a2:	4293      	cmp	r3, r2
    d6a4:	d308      	bcc.n	d6b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d6a6:	f8ad 1000 	strh.w	r1, [sp]
    d6aa:	4669      	mov	r1, sp
    d6ac:	f7ff feb6 	bl	d41c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d6b0:	f8bd 0000 	ldrh.w	r0, [sp]
    d6b4:	42a0      	cmp	r0, r4
    d6b6:	d001      	beq.n	d6bc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d6b8:	2001      	movs	r0, #1
    d6ba:	bd38      	pop	{r3, r4, r5, pc}
    d6bc:	2000      	movs	r0, #0
    d6be:	bd38      	pop	{r3, r4, r5, pc}

0000d6c0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d6c0:	b570      	push	{r4, r5, r6, lr}
    d6c2:	88c6      	ldrh	r6, [r0, #6]
    d6c4:	8885      	ldrh	r5, [r0, #4]
    d6c6:	4603      	mov	r3, r0
    d6c8:	f100 0418 	add.w	r4, r0, #24
    d6cc:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d6d0:	4420      	add	r0, r4
    d6d2:	42b5      	cmp	r5, r6
    d6d4:	d102      	bne.n	d6dc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d6d6:	2000      	movs	r0, #0
    d6d8:	81d8      	strh	r0, [r3, #14]
    d6da:	bd70      	pop	{r4, r5, r6, pc}
    d6dc:	8804      	ldrh	r4, [r0, #0]
    d6de:	895d      	ldrh	r5, [r3, #10]
    d6e0:	7cde      	ldrb	r6, [r3, #19]
    d6e2:	1b64      	subs	r4, r4, r5
    d6e4:	4435      	add	r5, r6
    d6e6:	4428      	add	r0, r5
    d6e8:	880d      	ldrh	r5, [r1, #0]
    d6ea:	b2a4      	uxth	r4, r4
    d6ec:	1c80      	adds	r0, r0, #2
    d6ee:	42a5      	cmp	r5, r4
    d6f0:	d900      	bls.n	d6f4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d6f2:	800c      	strh	r4, [r1, #0]
    d6f4:	895c      	ldrh	r4, [r3, #10]
    d6f6:	b124      	cbz	r4, d702 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d6f8:	2400      	movs	r4, #0
    d6fa:	7014      	strb	r4, [r2, #0]
    d6fc:	8809      	ldrh	r1, [r1, #0]
    d6fe:	81d9      	strh	r1, [r3, #14]
    d700:	bd70      	pop	{r4, r5, r6, pc}
    d702:	2401      	movs	r4, #1
    d704:	e7f9      	b.n	d6fa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d706 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d70a:	461d      	mov	r5, r3
    d70c:	4616      	mov	r6, r2
    d70e:	9f06      	ldr	r7, [sp, #24]
    d710:	460b      	mov	r3, r1
    d712:	4604      	mov	r4, r0
    d714:	463a      	mov	r2, r7
    d716:	4629      	mov	r1, r5
    d718:	4630      	mov	r0, r6
    d71a:	f000 f839 	bl	d790 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d71e:	4283      	cmp	r3, r0
    d720:	d201      	bcs.n	d726 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d722:	219e      	movs	r1, #158	; 0x9e
    d724:	e012      	b.n	d74c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d726:	07a0      	lsls	r0, r4, #30
    d728:	d001      	beq.n	d72e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d72a:	219f      	movs	r1, #159	; 0x9f
    d72c:	e00e      	b.n	d74c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d72e:	2218      	movs	r2, #24
    d730:	2100      	movs	r1, #0
    d732:	4620      	mov	r0, r4
    d734:	f003 fb2d 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d738:	19a8      	adds	r0, r5, r6
    d73a:	1d40      	adds	r0, r0, #5
    d73c:	4378      	muls	r0, r7
    d73e:	b280      	uxth	r0, r0
    d740:	74e5      	strb	r5, [r4, #19]
    d742:	8060      	strh	r0, [r4, #2]
    d744:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d748:	d903      	bls.n	d752 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d74a:	21a4      	movs	r1, #164	; 0xa4
    d74c:	2014      	movs	r0, #20
    d74e:	f7f3 fcf9 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d752:	8026      	strh	r6, [r4, #0]
    d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d758 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d758:	b570      	push	{r4, r5, r6, lr}
    d75a:	460b      	mov	r3, r1
    d75c:	4604      	mov	r4, r0
    d75e:	f100 0118 	add.w	r1, r0, #24
    d762:	8902      	ldrh	r2, [r0, #8]
    d764:	8880      	ldrh	r0, [r0, #4]
    d766:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d76a:	440d      	add	r5, r1
    d76c:	4282      	cmp	r2, r0
    d76e:	d101      	bne.n	d774 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d770:	2000      	movs	r0, #0
    d772:	bd70      	pop	{r4, r5, r6, pc}
    d774:	b123      	cbz	r3, d780 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d776:	7ce2      	ldrb	r2, [r4, #19]
    d778:	1ca9      	adds	r1, r5, #2
    d77a:	4618      	mov	r0, r3
    d77c:	f003 fa8f 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d780:	882d      	ldrh	r5, [r5, #0]
    d782:	f104 0108 	add.w	r1, r4, #8
    d786:	4620      	mov	r0, r4
    d788:	f7ff fe48 	bl	d41c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d78c:	4628      	mov	r0, r5
    d78e:	bd70      	pop	{r4, r5, r6, pc}

0000d790 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d790:	4401      	add	r1, r0
    d792:	1d49      	adds	r1, r1, #5
    d794:	4351      	muls	r1, r2
    d796:	b28a      	uxth	r2, r1
    d798:	2100      	movs	r1, #0
    d79a:	2845      	cmp	r0, #69	; 0x45
    d79c:	d202      	bcs.n	d7a4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d79e:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d7a2:	b281      	uxth	r1, r0
    d7a4:	3218      	adds	r2, #24
    d7a6:	1850      	adds	r0, r2, r1
    d7a8:	b280      	uxth	r0, r0
    d7aa:	4770      	bx	lr

0000d7ac <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7b0:	4688      	mov	r8, r1
    d7b2:	88c1      	ldrh	r1, [r0, #6]
    d7b4:	4604      	mov	r4, r0
    d7b6:	8900      	ldrh	r0, [r0, #8]
    d7b8:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d7bc:	f104 0518 	add.w	r5, r4, #24
    d7c0:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d7c4:	eb05 0906 	add.w	r9, r5, r6
    d7c8:	f7ff fe49 	bl	d45e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d7cc:	2200      	movs	r2, #0
    d7ce:	b998      	cbnz	r0, d7f8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d7d0:	8820      	ldrh	r0, [r4, #0]
    d7d2:	2845      	cmp	r0, #69	; 0x45
    d7d4:	d200      	bcs.n	d7d8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d7d6:	2045      	movs	r0, #69	; 0x45
    d7d8:	42b7      	cmp	r7, r6
    d7da:	d906      	bls.n	d7ea <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d7dc:	7ce3      	ldrb	r3, [r4, #19]
    d7de:	1bb9      	subs	r1, r7, r6
    d7e0:	1ac9      	subs	r1, r1, r3
    d7e2:	1f49      	subs	r1, r1, #5
    d7e4:	4281      	cmp	r1, r0
    d7e6:	da00      	bge.n	d7ea <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d7e8:	4608      	mov	r0, r1
    d7ea:	89a1      	ldrh	r1, [r4, #12]
    d7ec:	b111      	cbz	r1, d7f4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d7ee:	f8b9 3000 	ldrh.w	r3, [r9]
    d7f2:	1ac0      	subs	r0, r0, r3
    d7f4:	4540      	cmp	r0, r8
    d7f6:	da03      	bge.n	d800 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d7f8:	8222      	strh	r2, [r4, #16]
    d7fa:	2000      	movs	r0, #0
    d7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d800:	7ce0      	ldrb	r0, [r4, #19]
    d802:	4429      	add	r1, r5
    d804:	1d40      	adds	r0, r0, #5
    d806:	4430      	add	r0, r6
    d808:	4408      	add	r0, r1
    d80a:	f8a4 8010 	strh.w	r8, [r4, #16]
    d80e:	1ec0      	subs	r0, r0, #3
    d810:	e7f4      	b.n	d7fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d812 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d812:	b570      	push	{r4, r5, r6, lr}
    d814:	2300      	movs	r3, #0
    d816:	f1a1 0208 	sub.w	r2, r1, #8
    d81a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d81e:	42a2      	cmp	r2, r4
    d820:	d304      	bcc.n	d82c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d822:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d826:	2015      	movs	r0, #21
    d828:	f7f3 fc8c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d82c:	6802      	ldr	r2, [r0, #0]
    d82e:	b90a      	cbnz	r2, d834 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d830:	e01e      	b.n	d870 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d832:	4610      	mov	r0, r2
    d834:	6802      	ldr	r2, [r0, #0]
    d836:	8893      	ldrh	r3, [r2, #4]
    d838:	428b      	cmp	r3, r1
    d83a:	d002      	beq.n	d842 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d83c:	6813      	ldr	r3, [r2, #0]
    d83e:	2b00      	cmp	r3, #0
    d840:	d1f7      	bne.n	d832 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d842:	8894      	ldrh	r4, [r2, #4]
    d844:	4613      	mov	r3, r2
    d846:	428c      	cmp	r4, r1
    d848:	d101      	bne.n	d84e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d84a:	6811      	ldr	r1, [r2, #0]
    d84c:	e00d      	b.n	d86a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d84e:	f101 0508 	add.w	r5, r1, #8
    d852:	b2ae      	uxth	r6, r5
    d854:	2500      	movs	r5, #0
    d856:	42b4      	cmp	r4, r6
    d858:	d309      	bcc.n	d86e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d85a:	1a64      	subs	r4, r4, r1
    d85c:	4411      	add	r1, r2
    d85e:	600d      	str	r5, [r1, #0]
    d860:	808c      	strh	r4, [r1, #4]
    d862:	6802      	ldr	r2, [r0, #0]
    d864:	6812      	ldr	r2, [r2, #0]
    d866:	6002      	str	r2, [r0, #0]
    d868:	600a      	str	r2, [r1, #0]
    d86a:	6001      	str	r1, [r0, #0]
    d86c:	e000      	b.n	d870 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d86e:	2300      	movs	r3, #0
    d870:	4618      	mov	r0, r3
    d872:	bd70      	pop	{r4, r5, r6, pc}

0000d874 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d874:	b510      	push	{r4, lr}
    d876:	000c      	movs	r4, r1
    d878:	d004      	beq.n	d884 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d87a:	2c08      	cmp	r4, #8
    d87c:	d207      	bcs.n	d88e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d87e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d882:	e00a      	b.n	d89a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d884:	b108      	cbz	r0, d88a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d886:	2100      	movs	r1, #0
    d888:	6001      	str	r1, [r0, #0]
    d88a:	2000      	movs	r0, #0
    d88c:	bd10      	pop	{r4, pc}
    d88e:	b158      	cbz	r0, d8a8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d890:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d894:	d304      	bcc.n	d8a0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d896:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d89a:	2015      	movs	r0, #21
    d89c:	f7f3 fc52 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8a0:	b2a1      	uxth	r1, r4
    d8a2:	6800      	ldr	r0, [r0, #0]
    d8a4:	f000 f814 	bl	d8d0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d8a8:	1d20      	adds	r0, r4, #4
    d8aa:	bd10      	pop	{r4, pc}

0000d8ac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d8ac:	2100      	movs	r1, #0
    d8ae:	6802      	ldr	r2, [r0, #0]
    d8b0:	e003      	b.n	d8ba <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d8b2:	8893      	ldrh	r3, [r2, #4]
    d8b4:	6812      	ldr	r2, [r2, #0]
    d8b6:	4419      	add	r1, r3
    d8b8:	b289      	uxth	r1, r1
    d8ba:	2a00      	cmp	r2, #0
    d8bc:	d1f9      	bne.n	d8b2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d8be:	f000 b807 	b.w	d8d0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d8c2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d8c2:	2300      	movs	r3, #0
    d8c4:	600b      	str	r3, [r1, #0]
    d8c6:	808a      	strh	r2, [r1, #4]
    d8c8:	6802      	ldr	r2, [r0, #0]
    d8ca:	600a      	str	r2, [r1, #0]
    d8cc:	6001      	str	r1, [r0, #0]
    d8ce:	4770      	bx	lr
    d8d0:	2300      	movs	r3, #0
    d8d2:	6043      	str	r3, [r0, #4]
    d8d4:	1d02      	adds	r2, r0, #4
    d8d6:	8101      	strh	r1, [r0, #8]
    d8d8:	6002      	str	r2, [r0, #0]
    d8da:	4770      	bx	lr
    d8dc:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d8e0:	8159      	strh	r1, [r3, #10]
    d8e2:	4611      	mov	r1, r2
    d8e4:	f000 b814 	b.w	d910 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d8e8:	b170      	cbz	r0, d908 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d8ea:	7882      	ldrb	r2, [r0, #2]
    d8ec:	fbb1 f3f2 	udiv	r3, r1, r2
    d8f0:	fb02 1213 	mls	r2, r2, r3, r1
    d8f4:	b2d2      	uxtb	r2, r2
    d8f6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d8fa:	895b      	ldrh	r3, [r3, #10]
    d8fc:	428b      	cmp	r3, r1
    d8fe:	d101      	bne.n	d904 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d900:	4610      	mov	r0, r2
    d902:	4770      	bx	lr
    d904:	78c3      	ldrb	r3, [r0, #3]
    d906:	b10b      	cbz	r3, d90c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d908:	20ff      	movs	r0, #255	; 0xff
    d90a:	4770      	bx	lr
    d90c:	f7f3 befc 	b.w	1708 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d910:	8802      	ldrh	r2, [r0, #0]
    d912:	fb01 0102 	mla	r1, r1, r2, r0
    d916:	7880      	ldrb	r0, [r0, #2]
    d918:	220a      	movs	r2, #10
    d91a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d91e:	4408      	add	r0, r1
    d920:	4770      	bx	lr

0000d922 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d922:	b51c      	push	{r2, r3, r4, lr}
    d924:	4604      	mov	r4, r0
    d926:	2000      	movs	r0, #0
    d928:	9001      	str	r0, [sp, #4]
    d92a:	9000      	str	r0, [sp, #0]
    d92c:	f88d 4006 	strb.w	r4, [sp, #6]
    d930:	e00a      	b.n	d948 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d932:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d936:	4621      	mov	r1, r4
    d938:	f7f3 ffd4 	bl	18e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d93c:	b120      	cbz	r0, d948 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d93e:	f240 217e 	movw	r1, #638	; 0x27e
    d942:	2017      	movs	r0, #23
    d944:	f7f3 fbfe 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d948:	4668      	mov	r0, sp
    d94a:	f7f3 ff7b 	bl	1844 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d94e:	2800      	cmp	r0, #0
    d950:	d0ef      	beq.n	d932 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d952:	bd1c      	pop	{r2, r3, r4, pc}

0000d954 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d954:	b570      	push	{r4, r5, r6, lr}
    d956:	460e      	mov	r6, r1
    d958:	461d      	mov	r5, r3
    d95a:	4611      	mov	r1, r2
    d95c:	f000 f813 	bl	d986 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d960:	4604      	mov	r4, r0
    d962:	4629      	mov	r1, r5
    d964:	4630      	mov	r0, r6
    d966:	f000 f804 	bl	d972 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d96a:	4420      	add	r0, r4
    d96c:	1d00      	adds	r0, r0, #4
    d96e:	b280      	uxth	r0, r0
    d970:	bd70      	pop	{r4, r5, r6, pc}
    d972:	b510      	push	{r4, lr}
    d974:	460a      	mov	r2, r1
    d976:	2109      	movs	r1, #9
    d978:	f7ff ff0a 	bl	d790 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d97c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d980:	1cc0      	adds	r0, r0, #3
    d982:	4008      	ands	r0, r1
    d984:	bd10      	pop	{r4, pc}
    d986:	b510      	push	{r4, lr}
    d988:	460a      	mov	r2, r1
    d98a:	210a      	movs	r1, #10
    d98c:	f7ff ff00 	bl	d790 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d990:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d994:	1cc0      	adds	r0, r0, #3
    d996:	4008      	ands	r0, r1
    d998:	bd10      	pop	{r4, pc}
    d99a:	b109      	cbz	r1, d9a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d99c:	2100      	movs	r1, #0
    d99e:	e000      	b.n	d9a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d9a0:	2102      	movs	r1, #2
    d9a2:	1843      	adds	r3, r0, r1
    d9a4:	7d1a      	ldrb	r2, [r3, #20]
    d9a6:	2a02      	cmp	r2, #2
    d9a8:	d008      	beq.n	d9bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d9aa:	7d5b      	ldrb	r3, [r3, #21]
    d9ac:	2b02      	cmp	r3, #2
    d9ae:	d009      	beq.n	d9c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d9b0:	2a03      	cmp	r2, #3
    d9b2:	d003      	beq.n	d9bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d9b4:	2b03      	cmp	r3, #3
    d9b6:	d005      	beq.n	d9c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d9b8:	2000      	movs	r0, #0
    d9ba:	4770      	bx	lr
    d9bc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9c0:	8b00      	ldrh	r0, [r0, #24]
    d9c2:	4770      	bx	lr
    d9c4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9c8:	8b40      	ldrh	r0, [r0, #26]
    d9ca:	4770      	bx	lr
    d9cc:	b109      	cbz	r1, d9d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d9ce:	2100      	movs	r1, #0
    d9d0:	e000      	b.n	d9d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d9d2:	2102      	movs	r1, #2
    d9d4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9d8:	8b01      	ldrh	r1, [r0, #24]
    d9da:	b911      	cbnz	r1, d9e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d9dc:	8b40      	ldrh	r0, [r0, #26]
    d9de:	2800      	cmp	r0, #0
    d9e0:	d000      	beq.n	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d9e2:	2001      	movs	r0, #1
    d9e4:	4770      	bx	lr
    d9e6:	b538      	push	{r3, r4, r5, lr}
    d9e8:	7883      	ldrb	r3, [r0, #2]
    d9ea:	f88d 3000 	strb.w	r3, [sp]
    d9ee:	9b00      	ldr	r3, [sp, #0]
    d9f0:	9300      	str	r3, [sp, #0]
    d9f2:	f89d 3000 	ldrb.w	r3, [sp]
    d9f6:	b95b      	cbnz	r3, da10 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d9f8:	2400      	movs	r4, #0
    d9fa:	b10a      	cbz	r2, da00 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d9fc:	2300      	movs	r3, #0
    d9fe:	e000      	b.n	da02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    da00:	2302      	movs	r3, #2
    da02:	18c2      	adds	r2, r0, r3
    da04:	7d15      	ldrb	r5, [r2, #20]
    da06:	2d02      	cmp	r5, #2
    da08:	d004      	beq.n	da14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    da0a:	7d52      	ldrb	r2, [r2, #21]
    da0c:	2a02      	cmp	r2, #2
    da0e:	d004      	beq.n	da1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    da10:	2000      	movs	r0, #0
    da12:	bd38      	pop	{r3, r4, r5, pc}
    da14:	461a      	mov	r2, r3
    da16:	1c5b      	adds	r3, r3, #1
    da18:	e000      	b.n	da1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    da1a:	1c5a      	adds	r2, r3, #1
    da1c:	b179      	cbz	r1, da3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    da1e:	18c5      	adds	r5, r0, r3
    da20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da24:	752c      	strb	r4, [r5, #20]
    da26:	831c      	strh	r4, [r3, #24]
    da28:	2303      	movs	r3, #3
    da2a:	1884      	adds	r4, r0, r2
    da2c:	7523      	strb	r3, [r4, #20]
    da2e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    da32:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    da36:	685b      	ldr	r3, [r3, #4]
    da38:	600b      	str	r3, [r1, #0]
    da3a:	8b00      	ldrh	r0, [r0, #24]
    da3c:	8088      	strh	r0, [r1, #4]
    da3e:	2001      	movs	r0, #1
    da40:	bd38      	pop	{r3, r4, r5, pc}
    da42:	b510      	push	{r4, lr}
    da44:	b109      	cbz	r1, da4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    da46:	2100      	movs	r1, #0
    da48:	e000      	b.n	da4c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    da4a:	2102      	movs	r1, #2
    da4c:	1843      	adds	r3, r0, r1
    da4e:	7d1c      	ldrb	r4, [r3, #20]
    da50:	4294      	cmp	r4, r2
    da52:	d103      	bne.n	da5c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    da54:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da58:	8b00      	ldrh	r0, [r0, #24]
    da5a:	bd10      	pop	{r4, pc}
    da5c:	7d5b      	ldrb	r3, [r3, #21]
    da5e:	4293      	cmp	r3, r2
    da60:	d103      	bne.n	da6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    da62:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da66:	8b40      	ldrh	r0, [r0, #26]
    da68:	bd10      	pop	{r4, pc}
    da6a:	2000      	movs	r0, #0
    da6c:	bd10      	pop	{r4, pc}
    da6e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    da72:	d201      	bcs.n	da78 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    da74:	0841      	lsrs	r1, r0, #1
    da76:	e000      	b.n	da7a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    da78:	21ff      	movs	r1, #255	; 0xff
    da7a:	1a40      	subs	r0, r0, r1
    da7c:	f240 6172 	movw	r1, #1650	; 0x672
    da80:	4288      	cmp	r0, r1
    da82:	db00      	blt.n	da86 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    da84:	4608      	mov	r0, r1
    da86:	b280      	uxth	r0, r0
    da88:	4770      	bx	lr

0000da8a <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    da8a:	2101      	movs	r1, #1
    da8c:	f7ff bf85 	b.w	d99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    da90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da94:	4606      	mov	r6, r0
    da96:	f342 0780 	sbfx	r7, r2, #2, #1
    da9a:	7848      	ldrb	r0, [r1, #1]
    da9c:	460c      	mov	r4, r1
    da9e:	f022 0504 	bic.w	r5, r2, #4
    daa2:	1c7f      	adds	r7, r7, #1
    daa4:	b100      	cbz	r0, daa8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    daa6:	b90d      	cbnz	r5, daac <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    daa8:	4328      	orrs	r0, r5
    daaa:	d104      	bne.n	dab6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    daac:	b145      	cbz	r5, dac0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    daae:	2100      	movs	r1, #0
    dab0:	4620      	mov	r0, r4
    dab2:	f7f4 f837 	bl	1b24 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    dab6:	20ff      	movs	r0, #255	; 0xff
    dab8:	70a0      	strb	r0, [r4, #2]
    daba:	b11f      	cbz	r7, dac4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    dabc:	2000      	movs	r0, #0
    dabe:	e002      	b.n	dac6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    dac0:	2101      	movs	r1, #1
    dac2:	e7f5      	b.n	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    dac4:	2002      	movs	r0, #2
    dac6:	1821      	adds	r1, r4, r0
    dac8:	7d09      	ldrb	r1, [r1, #20]
    daca:	2903      	cmp	r1, #3
    dacc:	d102      	bne.n	dad4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    dace:	2d02      	cmp	r5, #2
    dad0:	d000      	beq.n	dad4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    dad2:	1c40      	adds	r0, r0, #1
    dad4:	1822      	adds	r2, r4, r0
    dad6:	2101      	movs	r1, #1
    dad8:	7511      	strb	r1, [r2, #20]
    dada:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    dade:	2200      	movs	r2, #0
    dae0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    dae4:	830a      	strh	r2, [r1, #24]
    dae6:	6840      	ldr	r0, [r0, #4]
    dae8:	70a2      	strb	r2, [r4, #2]
    daea:	4631      	mov	r1, r6
    daec:	f362 010f 	bfi	r1, r2, #0, #16
    daf0:	e9c6 0100 	strd	r0, r1, [r6]
    daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000daf8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dafc:	461e      	mov	r6, r3
    dafe:	4613      	mov	r3, r2
    db00:	4604      	mov	r4, r0
    db02:	b109      	cbz	r1, db08 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    db04:	2000      	movs	r0, #0
    db06:	e000      	b.n	db0a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    db08:	2002      	movs	r0, #2
    db0a:	21ff      	movs	r1, #255	; 0xff
    db0c:	70a1      	strb	r1, [r4, #2]
    db0e:	1821      	adds	r1, r4, r0
    db10:	7d0a      	ldrb	r2, [r1, #20]
    db12:	2a01      	cmp	r2, #1
    db14:	d003      	beq.n	db1e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    db16:	7d49      	ldrb	r1, [r1, #21]
    db18:	2901      	cmp	r1, #1
    db1a:	d10c      	bne.n	db36 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    db1c:	1c40      	adds	r0, r0, #1
    db1e:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    db22:	2700      	movs	r7, #0
    db24:	8b29      	ldrh	r1, [r5, #24]
    db26:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    db2a:	198a      	adds	r2, r1, r6
    db2c:	4562      	cmp	r2, ip
    db2e:	d905      	bls.n	db3c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    db30:	4420      	add	r0, r4
    db32:	832f      	strh	r7, [r5, #24]
    db34:	7507      	strb	r7, [r0, #20]
    db36:	2000      	movs	r0, #0
    db38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db3c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db40:	4632      	mov	r2, r6
    db42:	6840      	ldr	r0, [r0, #4]
    db44:	4408      	add	r0, r1
    db46:	4619      	mov	r1, r3
    db48:	f003 f8a9 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db4c:	8b28      	ldrh	r0, [r5, #24]
    db4e:	4430      	add	r0, r6
    db50:	8328      	strh	r0, [r5, #24]
    db52:	70a7      	strb	r7, [r4, #2]
    db54:	2001      	movs	r0, #1
    db56:	e7ef      	b.n	db38 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000db58 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    db58:	b510      	push	{r4, lr}
    db5a:	2101      	movs	r1, #1
    db5c:	f7ff ff36 	bl	d9cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    db60:	2800      	cmp	r0, #0
    db62:	d000      	beq.n	db66 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    db64:	2001      	movs	r0, #1
    db66:	bd10      	pop	{r4, pc}

0000db68 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    db68:	2201      	movs	r2, #1
    db6a:	f7ff bf3c 	b.w	d9e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000db6e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    db6e:	2200      	movs	r2, #0
    db70:	f7ff bf39 	b.w	d9e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000db74 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    db74:	b510      	push	{r4, lr}
    db76:	2100      	movs	r1, #0
    db78:	f7ff ff28 	bl	d9cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    db7c:	2800      	cmp	r0, #0
    db7e:	d000      	beq.n	db82 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    db80:	2001      	movs	r0, #1
    db82:	bd10      	pop	{r4, pc}

0000db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    db84:	b570      	push	{r4, r5, r6, lr}
    db86:	b109      	cbz	r1, db8c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    db88:	2300      	movs	r3, #0
    db8a:	e000      	b.n	db8e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    db8c:	2302      	movs	r3, #2
    db8e:	21ff      	movs	r1, #255	; 0xff
    db90:	7081      	strb	r1, [r0, #2]
    db92:	18c1      	adds	r1, r0, r3
    db94:	2402      	movs	r4, #2
    db96:	7d0d      	ldrb	r5, [r1, #20]
    db98:	2d01      	cmp	r5, #1
    db9a:	d007      	beq.n	dbac <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    db9c:	7d4d      	ldrb	r5, [r1, #21]
    db9e:	2d01      	cmp	r5, #1
    dba0:	d009      	beq.n	dbb6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    dba2:	f44f 718b 	mov.w	r1, #278	; 0x116
    dba6:	2009      	movs	r0, #9
    dba8:	f7f3 facc 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbb0:	831a      	strh	r2, [r3, #24]
    dbb2:	750c      	strb	r4, [r1, #20]
    dbb4:	e003      	b.n	dbbe <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    dbb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbba:	835a      	strh	r2, [r3, #26]
    dbbc:	754c      	strb	r4, [r1, #21]
    dbbe:	2100      	movs	r1, #0
    dbc0:	7081      	strb	r1, [r0, #2]
    dbc2:	bd70      	pop	{r4, r5, r6, pc}

0000dbc4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    dbc4:	2101      	movs	r1, #1
    dbc6:	7001      	strb	r1, [r0, #0]
    dbc8:	4770      	bx	lr

0000dbca <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    dbca:	2201      	movs	r2, #1
    dbcc:	4611      	mov	r1, r2
    dbce:	f7ff bf38 	b.w	da42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dbd2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dbd2:	2201      	movs	r2, #1
    dbd4:	2100      	movs	r1, #0
    dbd6:	f7ff bf34 	b.w	da42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dbda <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dbda:	2100      	movs	r1, #0
    dbdc:	f7ff bedd 	b.w	d99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dbe0:	2800      	cmp	r0, #0
    dbe2:	db09      	blt.n	dbf8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dbe4:	f000 021f 	and.w	r2, r0, #31
    dbe8:	2101      	movs	r1, #1
    dbea:	4091      	lsls	r1, r2
    dbec:	0940      	lsrs	r0, r0, #5
    dbee:	0080      	lsls	r0, r0, #2
    dbf0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dbf4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dbf8:	4770      	bx	lr
    dbfa:	2800      	cmp	r0, #0
    dbfc:	db0d      	blt.n	dc1a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    dbfe:	f000 021f 	and.w	r2, r0, #31
    dc02:	2101      	movs	r1, #1
    dc04:	4091      	lsls	r1, r2
    dc06:	0940      	lsrs	r0, r0, #5
    dc08:	0080      	lsls	r0, r0, #2
    dc0a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc0e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dc12:	f3bf 8f4f 	dsb	sy
    dc16:	f3bf 8f6f 	isb	sy
    dc1a:	4770      	bx	lr
    dc1c:	b510      	push	{r4, lr}
    dc1e:	200e      	movs	r0, #14
    dc20:	f7ff ffeb 	bl	dbfa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dc24:	200e      	movs	r0, #14
    dc26:	f7ff ffdb 	bl	dbe0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dc2a:	200f      	movs	r0, #15
    dc2c:	f7ff ffe5 	bl	dbfa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dc30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc34:	200f      	movs	r0, #15
    dc36:	f7ff bfd3 	b.w	dbe0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dc3a:	2800      	cmp	r0, #0
    dc3c:	db09      	blt.n	dc52 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    dc3e:	f000 021f 	and.w	r2, r0, #31
    dc42:	2101      	movs	r1, #1
    dc44:	4091      	lsls	r1, r2
    dc46:	0940      	lsrs	r0, r0, #5
    dc48:	0080      	lsls	r0, r0, #2
    dc4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc4e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc52:	4770      	bx	lr
    dc54:	5840      	ldr	r0, [r0, r1]
    dc56:	2800      	cmp	r0, #0
    dc58:	d000      	beq.n	dc5c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    dc5a:	2001      	movs	r0, #1
    dc5c:	4770      	bx	lr

0000dc5e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dc5e:	b510      	push	{r4, lr}
    dc60:	4604      	mov	r4, r0
    dc62:	4620      	mov	r0, r4
    dc64:	f7f4 f866 	bl	1d34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    dc68:	2811      	cmp	r0, #17
    dc6a:	d0fa      	beq.n	dc62 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    dc6c:	bd10      	pop	{r4, pc}

0000dc6e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dc6e:	b510      	push	{r4, lr}
    dc70:	f7ff fff5 	bl	dc5e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dc74:	2800      	cmp	r0, #0
    dc76:	d003      	beq.n	dc80 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    dc78:	21a9      	movs	r1, #169	; 0xa9
    dc7a:	201d      	movs	r0, #29
    dc7c:	f7f3 fa62 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc80:	bd10      	pop	{r4, pc}

0000dc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dc82:	f7f4 b9b5 	b.w	1ff0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dc86 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dc86:	f7f4 b9a3 	b.w	1fd0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dc8a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dc8a:	b510      	push	{r4, lr}
    dc8c:	4050      	eors	r0, r2
    dc8e:	780a      	ldrb	r2, [r1, #0]
    dc90:	781c      	ldrb	r4, [r3, #0]
    dc92:	4062      	eors	r2, r4
    dc94:	4410      	add	r0, r2
    dc96:	784a      	ldrb	r2, [r1, #1]
    dc98:	785c      	ldrb	r4, [r3, #1]
    dc9a:	4062      	eors	r2, r4
    dc9c:	4410      	add	r0, r2
    dc9e:	788a      	ldrb	r2, [r1, #2]
    dca0:	789c      	ldrb	r4, [r3, #2]
    dca2:	4062      	eors	r2, r4
    dca4:	4410      	add	r0, r2
    dca6:	78ca      	ldrb	r2, [r1, #3]
    dca8:	78dc      	ldrb	r4, [r3, #3]
    dcaa:	4062      	eors	r2, r4
    dcac:	4410      	add	r0, r2
    dcae:	790a      	ldrb	r2, [r1, #4]
    dcb0:	791c      	ldrb	r4, [r3, #4]
    dcb2:	7949      	ldrb	r1, [r1, #5]
    dcb4:	4062      	eors	r2, r4
    dcb6:	4410      	add	r0, r2
    dcb8:	795a      	ldrb	r2, [r3, #5]
    dcba:	4051      	eors	r1, r2
    dcbc:	42c1      	cmn	r1, r0
    dcbe:	d101      	bne.n	dcc4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dcc0:	2001      	movs	r0, #1
    dcc2:	bd10      	pop	{r4, pc}
    dcc4:	2000      	movs	r0, #0
    dcc6:	bd10      	pop	{r4, pc}

0000dcc8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dcc8:	b510      	push	{r4, lr}
    dcca:	2900      	cmp	r1, #0
    dccc:	4604      	mov	r4, r0
    dcce:	f04f 0106 	mov.w	r1, #6
    dcd2:	d002      	beq.n	dcda <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dcd4:	f7f3 fad8 	bl	1288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dcd8:	e001      	b.n	dcde <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dcda:	f7f3 fae3 	bl	12a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dcde:	7960      	ldrb	r0, [r4, #5]
    dce0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dce4:	7160      	strb	r0, [r4, #5]
    dce6:	bd10      	pop	{r4, pc}

0000dce8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dce8:	4770      	bx	lr

0000dcea <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dcea:	b530      	push	{r4, r5, lr}
    dcec:	460c      	mov	r4, r1
    dcee:	4605      	mov	r5, r0
    dcf0:	b08d      	sub	sp, #52	; 0x34
    dcf2:	f04f 0103 	mov.w	r1, #3
    dcf6:	f104 0003 	add.w	r0, r4, #3
    dcfa:	b112      	cbz	r2, dd02 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dcfc:	f7f3 fac4 	bl	1288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dd00:	e001      	b.n	dd06 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dd02:	f7f3 facf 	bl	12a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dd06:	7960      	ldrb	r0, [r4, #5]
    dd08:	220d      	movs	r2, #13
    dd0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dd0e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dd12:	7160      	strb	r0, [r4, #5]
    dd14:	2100      	movs	r1, #0
    dd16:	a804      	add	r0, sp, #16
    dd18:	f003 f83b 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd1c:	78e0      	ldrb	r0, [r4, #3]
    dd1e:	f88d 001f 	strb.w	r0, [sp, #31]
    dd22:	7920      	ldrb	r0, [r4, #4]
    dd24:	f88d 001e 	strb.w	r0, [sp, #30]
    dd28:	7960      	ldrb	r0, [r4, #5]
    dd2a:	f88d 001d 	strb.w	r0, [sp, #29]
    dd2e:	2210      	movs	r2, #16
    dd30:	4629      	mov	r1, r5
    dd32:	4668      	mov	r0, sp
    dd34:	f002 ffb3 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd38:	4668      	mov	r0, sp
    dd3a:	f7ff ff98 	bl	dc6e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dd3e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dd42:	7020      	strb	r0, [r4, #0]
    dd44:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dd48:	7060      	strb	r0, [r4, #1]
    dd4a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dd4e:	70a0      	strb	r0, [r4, #2]
    dd50:	b00d      	add	sp, #52	; 0x34
    dd52:	bd30      	pop	{r4, r5, pc}

0000dd54 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    dd54:	f7f4 bcb6 	b.w	26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    dd58:	07c1      	lsls	r1, r0, #31
    dd5a:	d001      	beq.n	dd60 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    dd5c:	2001      	movs	r0, #1
    dd5e:	4770      	bx	lr
    dd60:	0780      	lsls	r0, r0, #30
    dd62:	d501      	bpl.n	dd68 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    dd64:	2002      	movs	r0, #2
    dd66:	4770      	bx	lr
    dd68:	2000      	movs	r0, #0
    dd6a:	4770      	bx	lr
    dd6c:	b510      	push	{r4, lr}
    dd6e:	2801      	cmp	r0, #1
    dd70:	d008      	beq.n	dd84 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dd72:	2802      	cmp	r0, #2
    dd74:	d004      	beq.n	dd80 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    dd76:	f240 4121 	movw	r1, #1057	; 0x421
    dd7a:	2006      	movs	r0, #6
    dd7c:	f7f3 f9e2 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd80:	2001      	movs	r0, #1
    dd82:	bd10      	pop	{r4, pc}
    dd84:	2000      	movs	r0, #0
    dd86:	bd10      	pop	{r4, pc}
    dd88:	2900      	cmp	r1, #0
    dd8a:	d004      	beq.n	dd96 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    dd8c:	2801      	cmp	r0, #1
    dd8e:	d003      	beq.n	dd98 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dd90:	2901      	cmp	r1, #1
    dd92:	d001      	beq.n	dd98 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dd94:	2002      	movs	r0, #2
    dd96:	4770      	bx	lr
    dd98:	2001      	movs	r0, #1
    dd9a:	4770      	bx	lr
    dd9c:	f7ff bc90 	b.w	d6c0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dda0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dda0:	2101      	movs	r1, #1
    dda2:	f7f4 bf09 	b.w	2bb8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000dda6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dda6:	b510      	push	{r4, lr}
    dda8:	f002 fd4c 	bl	10844 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ddac:	b118      	cbz	r0, ddb6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ddae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddb2:	f7f9 beef 	b.w	7b94 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ddb6:	20ff      	movs	r0, #255	; 0xff
    ddb8:	bd10      	pop	{r4, pc}

0000ddba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ddba:	b510      	push	{r4, lr}
    ddbc:	f7f4 ff28 	bl	2c10 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    ddc0:	2808      	cmp	r0, #8
    ddc2:	d003      	beq.n	ddcc <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ddc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddc8:	f7f4 bf0e 	b.w	2be8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    ddcc:	bd10      	pop	{r4, pc}

0000ddce <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ddce:	b570      	push	{r4, r5, r6, lr}
    ddd0:	460e      	mov	r6, r1
    ddd2:	b08c      	sub	sp, #48	; 0x30
    ddd4:	4614      	mov	r4, r2
    ddd6:	4601      	mov	r1, r0
    ddd8:	461d      	mov	r5, r3
    ddda:	2210      	movs	r2, #16
    dddc:	4668      	mov	r0, sp
    ddde:	f000 f929 	bl	e034 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dde2:	2210      	movs	r2, #16
    dde4:	4631      	mov	r1, r6
    dde6:	a804      	add	r0, sp, #16
    dde8:	f000 f924 	bl	e034 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddec:	4668      	mov	r0, sp
    ddee:	f7ff ff3e 	bl	dc6e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ddf2:	a908      	add	r1, sp, #32
    ddf4:	f04f 0210 	mov.w	r2, #16
    ddf8:	4628      	mov	r0, r5
    ddfa:	b11c      	cbz	r4, de04 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ddfc:	f000 f91a 	bl	e034 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    de00:	b00c      	add	sp, #48	; 0x30
    de02:	bd70      	pop	{r4, r5, r6, pc}
    de04:	f002 ff4b 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de08:	e7fa      	b.n	de00 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    de0a:	b510      	push	{r4, lr}
    de0c:	460c      	mov	r4, r1
    de0e:	2100      	movs	r1, #0
    de10:	f7f3 fcc6 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    de14:	6060      	str	r0, [r4, #4]
    de16:	b118      	cbz	r0, de20 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    de18:	2001      	movs	r0, #1
    de1a:	7020      	strb	r0, [r4, #0]
    de1c:	2000      	movs	r0, #0
    de1e:	bd10      	pop	{r4, pc}
    de20:	2002      	movs	r0, #2
    de22:	bd10      	pop	{r4, pc}

0000de24 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    de24:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de28:	4348      	muls	r0, r1
    de2a:	4770      	bx	lr

0000de2c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    de2c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de30:	fbb0 f0f1 	udiv	r0, r0, r1
    de34:	b280      	uxth	r0, r0
    de36:	4770      	bx	lr

0000de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    de38:	b510      	push	{r4, lr}
    de3a:	f1a2 0310 	sub.w	r3, r2, #16
    de3e:	290d      	cmp	r1, #13
    de40:	d24d      	bcs.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de42:	e8df f001 	tbb	[pc, r1]
    de46:	0907      	.short	0x0907
    de48:	1d1a150e 	.word	0x1d1a150e
    de4c:	4e2c2921 	.word	0x4e2c2921
    de50:	0048362f 	.word	0x0048362f
    de54:	b3f2      	cbz	r2, ded4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    de56:	e042      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de58:	2a06      	cmp	r2, #6
    de5a:	d03e      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de5c:	2a07      	cmp	r2, #7
    de5e:	d03c      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de60:	e03d      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de62:	2a0b      	cmp	r2, #11
    de64:	d039      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de66:	2a0c      	cmp	r2, #12
    de68:	d037      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de6a:	2a0a      	cmp	r2, #10
    de6c:	d035      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de6e:	e036      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de70:	2a0d      	cmp	r2, #13
    de72:	d032      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de74:	2a0e      	cmp	r2, #14
    de76:	d030      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de78:	e031      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de7a:	2b0c      	cmp	r3, #12
    de7c:	d92d      	bls.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de7e:	e02e      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de80:	3a11      	subs	r2, #17
    de82:	2a0b      	cmp	r2, #11
    de84:	d929      	bls.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de86:	e02a      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de88:	2b03      	cmp	r3, #3
    de8a:	d926      	bls.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de8c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    de90:	b1f8      	cbz	r0, ded2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    de92:	2a1c      	cmp	r2, #28
    de94:	d921      	bls.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de96:	e022      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de98:	2a04      	cmp	r2, #4
    de9a:	d01e      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de9c:	e01f      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de9e:	2a01      	cmp	r2, #1
    dea0:	d01b      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dea2:	e01c      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dea4:	2a1d      	cmp	r2, #29
    dea6:	d018      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dea8:	2a1e      	cmp	r2, #30
    deaa:	d016      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deac:	2a1f      	cmp	r2, #31
    deae:	d014      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deb0:	e015      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    deb2:	2a20      	cmp	r2, #32
    deb4:	d011      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deb6:	2a21      	cmp	r2, #33	; 0x21
    deb8:	d00f      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deba:	2a22      	cmp	r2, #34	; 0x22
    debc:	d00d      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    debe:	2a23      	cmp	r2, #35	; 0x23
    dec0:	d00b      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dec2:	2a24      	cmp	r2, #36	; 0x24
    dec4:	d009      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dec6:	2a25      	cmp	r2, #37	; 0x25
    dec8:	d007      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deca:	2a26      	cmp	r2, #38	; 0x26
    decc:	d005      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dece:	2a2e      	cmp	r2, #46	; 0x2e
    ded0:	d003      	beq.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ded2:	e004      	b.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ded4:	e001      	b.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ded6:	2a28      	cmp	r2, #40	; 0x28
    ded8:	d101      	bne.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    deda:	2001      	movs	r0, #1
    dedc:	bd10      	pop	{r4, pc}
    dede:	2000      	movs	r0, #0
    dee0:	bd10      	pop	{r4, pc}
    dee2:	2a0f      	cmp	r2, #15
    dee4:	d1fb      	bne.n	dede <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dee6:	e7f8      	b.n	deda <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000dee8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dee8:	280b      	cmp	r0, #11
    deea:	d019      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    deec:	280c      	cmp	r0, #12
    deee:	d017      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    def0:	280a      	cmp	r0, #10
    def2:	d015      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    def4:	280d      	cmp	r0, #13
    def6:	d013      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    def8:	280e      	cmp	r0, #14
    defa:	d011      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    defc:	2820      	cmp	r0, #32
    defe:	d00f      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df00:	2821      	cmp	r0, #33	; 0x21
    df02:	d00d      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df04:	2822      	cmp	r0, #34	; 0x22
    df06:	d00b      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df08:	2823      	cmp	r0, #35	; 0x23
    df0a:	d009      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df0c:	2824      	cmp	r0, #36	; 0x24
    df0e:	d007      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df10:	2825      	cmp	r0, #37	; 0x25
    df12:	d005      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df14:	2826      	cmp	r0, #38	; 0x26
    df16:	d003      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df18:	282e      	cmp	r0, #46	; 0x2e
    df1a:	d001      	beq.n	df20 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df1c:	2000      	movs	r0, #0
    df1e:	4770      	bx	lr
    df20:	2001      	movs	r0, #1
    df22:	4770      	bx	lr

0000df24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    df24:	f011 0f0c 	tst.w	r1, #12
    df28:	d018      	beq.n	df5c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    df2a:	074a      	lsls	r2, r1, #29
    df2c:	f44f 7116 	mov.w	r1, #600	; 0x258
    df30:	2a00      	cmp	r2, #0
    df32:	da02      	bge.n	df3a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    df34:	f04f 0210 	mov.w	r2, #16
    df38:	e001      	b.n	df3e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    df3a:	f04f 0240 	mov.w	r2, #64	; 0x40
    df3e:	da01      	bge.n	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    df40:	f04f 0196 	mov.w	r1, #150	; 0x96
    df44:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    df48:	eba0 0301 	sub.w	r3, r0, r1
    df4c:	4288      	cmp	r0, r1
    df4e:	d903      	bls.n	df58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df50:	fb93 f0f2 	sdiv	r0, r3, r2
    df54:	b280      	uxth	r0, r0
    df56:	4770      	bx	lr
    df58:	2000      	movs	r0, #0
    df5a:	4770      	bx	lr
    df5c:	2902      	cmp	r1, #2
    df5e:	d008      	beq.n	df72 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df60:	2870      	cmp	r0, #112	; 0x70
    df62:	d9f9      	bls.n	df58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df64:	3870      	subs	r0, #112	; 0x70
    df66:	17c1      	asrs	r1, r0, #31
    df68:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    df6c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    df70:	4770      	bx	lr
    df72:	283c      	cmp	r0, #60	; 0x3c
    df74:	d9f0      	bls.n	df58 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df76:	383c      	subs	r0, #60	; 0x3c
    df78:	17c1      	asrs	r1, r0, #31
    df7a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    df7e:	f3c0 008f 	ubfx	r0, r0, #2, #16
    df82:	4770      	bx	lr

0000df84 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    df84:	6809      	ldr	r1, [r1, #0]
    df86:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    df8a:	4770      	bx	lr

0000df8c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    df8c:	07c1      	lsls	r1, r0, #31
    df8e:	d001      	beq.n	df94 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    df90:	2001      	movs	r0, #1
    df92:	4770      	bx	lr
    df94:	0781      	lsls	r1, r0, #30
    df96:	d501      	bpl.n	df9c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    df98:	2002      	movs	r0, #2
    df9a:	4770      	bx	lr
    df9c:	0740      	lsls	r0, r0, #29
    df9e:	d501      	bpl.n	dfa4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dfa0:	2008      	movs	r0, #8
    dfa2:	4770      	bx	lr
    dfa4:	2000      	movs	r0, #0
    dfa6:	4770      	bx	lr

0000dfa8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dfa8:	b510      	push	{r4, lr}
    dfaa:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dfae:	2901      	cmp	r1, #1
    dfb0:	d006      	beq.n	dfc0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dfb2:	2902      	cmp	r1, #2
    dfb4:	d005      	beq.n	dfc2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dfb6:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    dfba:	2029      	movs	r0, #41	; 0x29
    dfbc:	f7f3 f8c2 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfc0:	b108      	cbz	r0, dfc6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dfc2:	4610      	mov	r0, r2
    dfc4:	bd10      	pop	{r4, pc}
    dfc6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dfca:	bd10      	pop	{r4, pc}

0000dfcc <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    dfcc:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    dfd0:	f001 bcf8 	b.w	f9c4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000dfd4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfd8:	4607      	mov	r7, r0
    dfda:	460e      	mov	r6, r1
    dfdc:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dfe0:	f7fc fbde 	bl	a7a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dfe4:	b198      	cbz	r0, e00e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dfe6:	b31e      	cbz	r6, e030 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dfe8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dfec:	1b40      	subs	r0, r0, r5
    dfee:	2300      	movs	r3, #0
    dff0:	eb61 0104 	sbc.w	r1, r1, r4
    dff4:	461a      	mov	r2, r3
    dff6:	1a1b      	subs	r3, r3, r0
    dff8:	418a      	sbcs	r2, r1
    dffa:	da19      	bge.n	e030 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dffc:	1c42      	adds	r2, r0, #1
    dffe:	f171 0100 	sbcs.w	r1, r1, #0
    e002:	db07      	blt.n	e014 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e004:	f240 211a 	movw	r1, #538	; 0x21a
    e008:	2029      	movs	r0, #41	; 0x29
    e00a:	f7f3 f89b 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e00e:	f44f 7104 	mov.w	r1, #528	; 0x210
    e012:	e7f9      	b.n	e008 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e014:	4430      	add	r0, r6
    e016:	1e40      	subs	r0, r0, #1
    e018:	fbb0 f1f6 	udiv	r1, r0, r6
    e01c:	fb01 f006 	mul.w	r0, r1, r6
    e020:	1828      	adds	r0, r5, r0
    e022:	f144 0400 	adc.w	r4, r4, #0
    e026:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e02a:	4608      	mov	r0, r1
    e02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e030:	2000      	movs	r0, #0
    e032:	e7fb      	b.n	e02c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e034 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e034:	b530      	push	{r4, r5, lr}
    e036:	4613      	mov	r3, r2
    e038:	e006      	b.n	e048 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e03a:	18cc      	adds	r4, r1, r3
    e03c:	1ad5      	subs	r5, r2, r3
    e03e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e042:	1e5b      	subs	r3, r3, #1
    e044:	5544      	strb	r4, [r0, r5]
    e046:	b2db      	uxtb	r3, r3
    e048:	2b00      	cmp	r3, #0
    e04a:	d1f6      	bne.n	e03a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e04c:	bd30      	pop	{r4, r5, pc}

0000e04e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e04e:	2300      	movs	r3, #0
    e050:	6403      	str	r3, [r0, #64]	; 0x40
    e052:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e056:	f240 2371 	movw	r3, #625	; 0x271
    e05a:	435a      	muls	r2, r3
    e05c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e060:	1e52      	subs	r2, r2, #1
    e062:	fbb2 f1f1 	udiv	r1, r2, r1
    e066:	6441      	str	r1, [r0, #68]	; 0x44
    e068:	4770      	bx	lr

0000e06a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e06a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e06e:	4607      	mov	r7, r0
    e070:	4690      	mov	r8, r2
    e072:	468b      	mov	fp, r1
    e074:	2601      	movs	r6, #1
    e076:	4608      	mov	r0, r1
    e078:	f000 f9e5 	bl	e446 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    e07c:	4682      	mov	sl, r0
    e07e:	4658      	mov	r0, fp
    e080:	f000 f9e3 	bl	e44a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    e084:	4681      	mov	r9, r0
    e086:	f7ff ff81 	bl	df8c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e08a:	4604      	mov	r4, r0
    e08c:	4650      	mov	r0, sl
    e08e:	f7ff ff7d 	bl	df8c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e092:	4605      	mov	r5, r0
    e094:	ea54 0005 	orrs.w	r0, r4, r5
    e098:	d100      	bne.n	e09c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e09a:	2600      	movs	r6, #0
    e09c:	f7f9 fca2 	bl	79e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0a0:	ea10 0f09 	tst.w	r0, r9
    e0a4:	d100      	bne.n	e0a8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e0a6:	2400      	movs	r4, #0
    e0a8:	f7f9 fc9c 	bl	79e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0ac:	ea10 0f0a 	tst.w	r0, sl
    e0b0:	d100      	bne.n	e0b4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e0b2:	2500      	movs	r5, #0
    e0b4:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    e0b8:	42a0      	cmp	r0, r4
    e0ba:	d100      	bne.n	e0be <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e0bc:	2400      	movs	r4, #0
    e0be:	f888 4000 	strb.w	r4, [r8]
    e0c2:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    e0c6:	42a8      	cmp	r0, r5
    e0c8:	d100      	bne.n	e0cc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e0ca:	2500      	movs	r5, #0
    e0cc:	f888 5001 	strb.w	r5, [r8, #1]
    e0d0:	b974      	cbnz	r4, e0f0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0d2:	b96d      	cbnz	r5, e0f0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0d4:	4658      	mov	r0, fp
    e0d6:	f000 f9a4 	bl	e422 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    e0da:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    e0de:	1a40      	subs	r0, r0, r1
    e0e0:	b200      	sxth	r0, r0
    e0e2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e0e6:	4288      	cmp	r0, r1
    e0e8:	dc01      	bgt.n	e0ee <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e0ea:	2800      	cmp	r0, #0
    e0ec:	dc00      	bgt.n	e0f0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0ee:	2600      	movs	r6, #0
    e0f0:	4630      	mov	r0, r6
    e0f2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e0f6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e0f6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e0fa:	4348      	muls	r0, r1
    e0fc:	4770      	bx	lr

0000e0fe <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e0fe:	f240 2171 	movw	r1, #625	; 0x271
    e102:	fb10 f001 	smulbb	r0, r0, r1
    e106:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e10a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e10e:	4770      	bx	lr

0000e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e110:	b510      	push	{r4, lr}
    e112:	2300      	movs	r3, #0
    e114:	461a      	mov	r2, r3
    e116:	e003      	b.n	e120 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e118:	5c84      	ldrb	r4, [r0, r2]
    e11a:	4323      	orrs	r3, r4
    e11c:	1c52      	adds	r2, r2, #1
    e11e:	b2d2      	uxtb	r2, r2
    e120:	428a      	cmp	r2, r1
    e122:	d3f9      	bcc.n	e118 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e124:	b10b      	cbz	r3, e12a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e126:	2000      	movs	r0, #0
    e128:	bd10      	pop	{r4, pc}
    e12a:	2001      	movs	r0, #1
    e12c:	bd10      	pop	{r4, pc}

0000e12e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    e12e:	2100      	movs	r1, #0
    e130:	4608      	mov	r0, r1
    e132:	f7f4 be5b 	b.w	2dec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    e136:	4401      	add	r1, r0
    e138:	2914      	cmp	r1, #20
    e13a:	dd01      	ble.n	e140 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    e13c:	2014      	movs	r0, #20
    e13e:	4770      	bx	lr
    e140:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e144:	4281      	cmp	r1, r0
    e146:	dbfa      	blt.n	e13e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    e148:	b248      	sxtb	r0, r1
    e14a:	4770      	bx	lr

0000e14c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e14c:	b570      	push	{r4, r5, r6, lr}
    e14e:	4605      	mov	r5, r0
    e150:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e154:	b286      	uxth	r6, r0
    e156:	4610      	mov	r0, r2
    e158:	7aec      	ldrb	r4, [r5, #11]
    e15a:	4631      	mov	r1, r6
    e15c:	f000 f863 	bl	e226 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e160:	4070      	eors	r0, r6
    e162:	2125      	movs	r1, #37	; 0x25
    e164:	fbb0 f2f1 	udiv	r2, r0, r1
    e168:	fb01 0112 	mls	r1, r1, r2, r0
    e16c:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e170:	f001 0307 	and.w	r3, r1, #7
    e174:	7852      	ldrb	r2, [r2, #1]
    e176:	2601      	movs	r6, #1
    e178:	409e      	lsls	r6, r3
    e17a:	4232      	tst	r2, r6
    e17c:	d001      	beq.n	e182 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e17e:	4608      	mov	r0, r1
    e180:	bd70      	pop	{r4, r5, r6, pc}
    e182:	4344      	muls	r4, r0
    e184:	0c21      	lsrs	r1, r4, #16
    e186:	4628      	mov	r0, r5
    e188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e18c:	f7f4 be7c 	b.w	2e88 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000e190 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e190:	b510      	push	{r4, lr}
    e192:	4604      	mov	r4, r0
    e194:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e198:	b108      	cbz	r0, e19e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e19a:	2825      	cmp	r0, #37	; 0x25
    e19c:	d901      	bls.n	e1a2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e19e:	2012      	movs	r0, #18
    e1a0:	bd10      	pop	{r4, pc}
    e1a2:	b132      	cbz	r2, e1b2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e1a4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e1a8:	b128      	cbz	r0, e1b6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e1aa:	2801      	cmp	r0, #1
    e1ac:	d009      	beq.n	e1c2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e1ae:	201f      	movs	r0, #31
    e1b0:	bd10      	pop	{r4, pc}
    e1b2:	2000      	movs	r0, #0
    e1b4:	bd10      	pop	{r4, pc}
    e1b6:	4620      	mov	r0, r4
    e1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1bc:	4611      	mov	r1, r2
    e1be:	f7f4 be1b 	b.w	2df8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    e1c2:	8aa2      	ldrh	r2, [r4, #20]
    e1c4:	6949      	ldr	r1, [r1, #20]
    e1c6:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e1ca:	f7ff ffbf 	bl	e14c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e1ce:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e1d2:	e7ee      	b.n	e1b2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e1d4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e1d4:	b570      	push	{r4, r5, r6, lr}
    e1d6:	4604      	mov	r4, r0
    e1d8:	1c40      	adds	r0, r0, #1
    e1da:	4288      	cmp	r0, r1
    e1dc:	d004      	beq.n	e1e8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e1de:	6808      	ldr	r0, [r1, #0]
    e1e0:	f8c4 0001 	str.w	r0, [r4, #1]
    e1e4:	7908      	ldrb	r0, [r1, #4]
    e1e6:	7160      	strb	r0, [r4, #5]
    e1e8:	7960      	ldrb	r0, [r4, #5]
    e1ea:	f000 001f 	and.w	r0, r0, #31
    e1ee:	7160      	strb	r0, [r4, #5]
    e1f0:	2000      	movs	r0, #0
    e1f2:	72e0      	strb	r0, [r4, #11]
    e1f4:	4605      	mov	r5, r0
    e1f6:	1966      	adds	r6, r4, r5
    e1f8:	7870      	ldrb	r0, [r6, #1]
    e1fa:	f000 faed 	bl	e7d8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e1fe:	71b0      	strb	r0, [r6, #6]
    e200:	7ae1      	ldrb	r1, [r4, #11]
    e202:	1c6d      	adds	r5, r5, #1
    e204:	4408      	add	r0, r1
    e206:	b2ed      	uxtb	r5, r5
    e208:	72e0      	strb	r0, [r4, #11]
    e20a:	2d05      	cmp	r5, #5
    e20c:	d3f3      	bcc.n	e1f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e20e:	bd70      	pop	{r4, r5, r6, pc}
    e210:	b2c1      	uxtb	r1, r0
    e212:	fa91 f1a1 	rbit	r1, r1
    e216:	0a00      	lsrs	r0, r0, #8
    e218:	0e09      	lsrs	r1, r1, #24
    e21a:	fa90 f0a0 	rbit	r0, r0
    e21e:	0e00      	lsrs	r0, r0, #24
    e220:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e224:	4770      	bx	lr
    e226:	b570      	push	{r4, r5, r6, lr}
    e228:	460d      	mov	r5, r1
    e22a:	4048      	eors	r0, r1
    e22c:	2400      	movs	r4, #0
    e22e:	f7ff ffef 	bl	e210 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e232:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e236:	1c64      	adds	r4, r4, #1
    e238:	4428      	add	r0, r5
    e23a:	b2e4      	uxtb	r4, r4
    e23c:	b280      	uxth	r0, r0
    e23e:	2c03      	cmp	r4, #3
    e240:	d3f5      	bcc.n	e22e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e242:	bd70      	pop	{r4, r5, r6, pc}

0000e244 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e244:	7802      	ldrb	r2, [r0, #0]
    e246:	f002 020f 	and.w	r2, r2, #15
    e24a:	2a03      	cmp	r2, #3
    e24c:	d003      	beq.n	e256 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e24e:	2a05      	cmp	r2, #5
    e250:	d104      	bne.n	e25c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e252:	f000 b92e 	b.w	e4b2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e256:	7840      	ldrb	r0, [r0, #1]
    e258:	280c      	cmp	r0, #12
    e25a:	d001      	beq.n	e260 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e25c:	2000      	movs	r0, #0
    e25e:	4770      	bx	lr
    e260:	2001      	movs	r0, #1
    e262:	4770      	bx	lr

0000e264 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e264:	b570      	push	{r4, r5, r6, lr}
    e266:	4614      	mov	r4, r2
    e268:	4605      	mov	r5, r0
    e26a:	2a1f      	cmp	r2, #31
    e26c:	d903      	bls.n	e276 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e26e:	21ee      	movs	r1, #238	; 0xee
    e270:	202a      	movs	r0, #42	; 0x2a
    e272:	f7f2 ff67 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e276:	f105 0009 	add.w	r0, r5, #9
    e27a:	f002 fd10 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e27e:	1da4      	adds	r4, r4, #6
    e280:	706c      	strb	r4, [r5, #1]
    e282:	bd70      	pop	{r4, r5, r6, pc}

0000e284 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e284:	b510      	push	{r4, lr}
    e286:	7802      	ldrb	r2, [r0, #0]
    e288:	f001 030f 	and.w	r3, r1, #15
    e28c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e290:	431a      	orrs	r2, r3
    e292:	7002      	strb	r2, [r0, #0]
    e294:	2907      	cmp	r1, #7
    e296:	d20c      	bcs.n	e2b2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e298:	e8df f001 	tbb	[pc, r1]
    e29c:	06040604 	.word	0x06040604
    e2a0:	00040804 	.word	0x00040804
    e2a4:	2106      	movs	r1, #6
    e2a6:	e002      	b.n	e2ae <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e2a8:	210c      	movs	r1, #12
    e2aa:	e000      	b.n	e2ae <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e2ac:	2122      	movs	r1, #34	; 0x22
    e2ae:	7041      	strb	r1, [r0, #1]
    e2b0:	bd10      	pop	{r4, pc}
    e2b2:	21a8      	movs	r1, #168	; 0xa8
    e2b4:	202a      	movs	r0, #42	; 0x2a
    e2b6:	f7f2 ff45 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e2ba <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e2ba:	680a      	ldr	r2, [r1, #0]
    e2bc:	f840 2f09 	str.w	r2, [r0, #9]!
    e2c0:	8889      	ldrh	r1, [r1, #4]
    e2c2:	8081      	strh	r1, [r0, #4]
    e2c4:	4770      	bx	lr

0000e2c6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e2c6:	7802      	ldrb	r2, [r0, #0]
    e2c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e2cc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e2d0:	7002      	strb	r2, [r0, #0]
    e2d2:	4770      	bx	lr

0000e2d4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e2d4:	680a      	ldr	r2, [r1, #0]
    e2d6:	f840 2f03 	str.w	r2, [r0, #3]!
    e2da:	8889      	ldrh	r1, [r1, #4]
    e2dc:	8081      	strh	r1, [r0, #4]
    e2de:	4770      	bx	lr

0000e2e0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e2e0:	7802      	ldrb	r2, [r0, #0]
    e2e2:	2340      	movs	r3, #64	; 0x40
    e2e4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e2e8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e2ec:	430a      	orrs	r2, r1
    e2ee:	7002      	strb	r2, [r0, #0]
    e2f0:	4770      	bx	lr

0000e2f2 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e2f2:	b570      	push	{r4, r5, r6, lr}
    e2f4:	4614      	mov	r4, r2
    e2f6:	4605      	mov	r5, r0
    e2f8:	2a1f      	cmp	r2, #31
    e2fa:	d904      	bls.n	e306 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e2fc:	f44f 7188 	mov.w	r1, #272	; 0x110
    e300:	202a      	movs	r0, #42	; 0x2a
    e302:	f7f2 ff1f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e306:	f105 0009 	add.w	r0, r5, #9
    e30a:	f002 fcc8 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e30e:	1da4      	adds	r4, r4, #6
    e310:	706c      	strb	r4, [r5, #1]
    e312:	bd70      	pop	{r4, r5, r6, pc}

0000e314 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e314:	6842      	ldr	r2, [r0, #4]
    e316:	600a      	str	r2, [r1, #0]
    e318:	7a00      	ldrb	r0, [r0, #8]
    e31a:	7108      	strb	r0, [r1, #4]
    e31c:	4770      	bx	lr

0000e31e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e31e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e322:	4770      	bx	lr

0000e324 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e324:	b570      	push	{r4, r5, r6, lr}
    e326:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e32a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e32e:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e332:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e336:	88c0      	ldrh	r0, [r0, #6]
    e338:	b131      	cbz	r1, e348 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e33a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e33e:	d903      	bls.n	e348 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e340:	f640 5107 	movw	r1, #3335	; 0xd07
    e344:	428a      	cmp	r2, r1
    e346:	d90b      	bls.n	e360 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e348:	1f91      	subs	r1, r2, #6
    e34a:	f640 467a 	movw	r6, #3194	; 0xc7a
    e34e:	42b1      	cmp	r1, r6
    e350:	d810      	bhi.n	e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e352:	b17b      	cbz	r3, e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e354:	2b08      	cmp	r3, #8
    e356:	d80d      	bhi.n	e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e358:	4293      	cmp	r3, r2
    e35a:	d20b      	bcs.n	e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e35c:	4295      	cmp	r5, r2
    e35e:	d809      	bhi.n	e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e360:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e364:	d206      	bcs.n	e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e366:	f640 4176 	movw	r1, #3190	; 0xc76
    e36a:	380a      	subs	r0, #10
    e36c:	4288      	cmp	r0, r1
    e36e:	d801      	bhi.n	e374 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e370:	2001      	movs	r0, #1
    e372:	bd70      	pop	{r4, r5, r6, pc}
    e374:	2000      	movs	r0, #0
    e376:	bd70      	pop	{r4, r5, r6, pc}

0000e378 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e378:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e37c:	4770      	bx	lr

0000e37e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e37e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e382:	4770      	bx	lr

0000e384 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e384:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e388:	4770      	bx	lr

0000e38a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e38a:	b510      	push	{r4, lr}
    e38c:	29fb      	cmp	r1, #251	; 0xfb
    e38e:	d904      	bls.n	e39a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e390:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e394:	202a      	movs	r0, #42	; 0x2a
    e396:	f7f2 fed5 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e39a:	7041      	strb	r1, [r0, #1]
    e39c:	bd10      	pop	{r4, pc}

0000e39e <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e39e:	8980      	ldrh	r0, [r0, #12]
    e3a0:	8008      	strh	r0, [r1, #0]
    e3a2:	4770      	bx	lr

0000e3a4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e3a4:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e3a8:	6008      	str	r0, [r1, #0]
    e3aa:	4770      	bx	lr

0000e3ac <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e3ac:	6842      	ldr	r2, [r0, #4]
    e3ae:	600a      	str	r2, [r1, #0]
    e3b0:	6880      	ldr	r0, [r0, #8]
    e3b2:	6048      	str	r0, [r1, #4]
    e3b4:	4770      	bx	lr

0000e3b6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e3b6:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e3ba:	600a      	str	r2, [r1, #0]
    e3bc:	6840      	ldr	r0, [r0, #4]
    e3be:	6048      	str	r0, [r1, #4]
    e3c0:	4770      	bx	lr

0000e3c2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e3c2:	6809      	ldr	r1, [r1, #0]
    e3c4:	60c1      	str	r1, [r0, #12]
    e3c6:	4770      	bx	lr

0000e3c8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e3c8:	680a      	ldr	r2, [r1, #0]
    e3ca:	6042      	str	r2, [r0, #4]
    e3cc:	6849      	ldr	r1, [r1, #4]
    e3ce:	6081      	str	r1, [r0, #8]
    e3d0:	4770      	bx	lr

0000e3d2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e3d2:	7800      	ldrb	r0, [r0, #0]
    e3d4:	f000 0003 	and.w	r0, r0, #3
    e3d8:	4770      	bx	lr

0000e3da <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e3da:	8880      	ldrh	r0, [r0, #4]
    e3dc:	4770      	bx	lr

0000e3de <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e3de:	88c0      	ldrh	r0, [r0, #6]
    e3e0:	4770      	bx	lr

0000e3e2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e3e2:	8900      	ldrh	r0, [r0, #8]
    e3e4:	4770      	bx	lr

0000e3e6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e3e6:	8940      	ldrh	r0, [r0, #10]
    e3e8:	4770      	bx	lr

0000e3ea <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e3ea:	8901      	ldrh	r1, [r0, #8]
    e3ec:	291b      	cmp	r1, #27
    e3ee:	d30c      	bcc.n	e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e3f0:	8941      	ldrh	r1, [r0, #10]
    e3f2:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e3f6:	4291      	cmp	r1, r2
    e3f8:	d307      	bcc.n	e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e3fa:	8881      	ldrh	r1, [r0, #4]
    e3fc:	291b      	cmp	r1, #27
    e3fe:	d304      	bcc.n	e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e400:	88c0      	ldrh	r0, [r0, #6]
    e402:	4290      	cmp	r0, r2
    e404:	d301      	bcc.n	e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e406:	2001      	movs	r0, #1
    e408:	4770      	bx	lr
    e40a:	2000      	movs	r0, #0
    e40c:	4770      	bx	lr

0000e40e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e40e:	7901      	ldrb	r1, [r0, #4]
    e410:	0749      	lsls	r1, r1, #29
    e412:	d004      	beq.n	e41e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e414:	7940      	ldrb	r0, [r0, #5]
    e416:	0740      	lsls	r0, r0, #29
    e418:	d001      	beq.n	e41e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e41a:	2001      	movs	r0, #1
    e41c:	4770      	bx	lr
    e41e:	2000      	movs	r0, #0
    e420:	4770      	bx	lr

0000e422 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e422:	88c0      	ldrh	r0, [r0, #6]
    e424:	4770      	bx	lr

0000e426 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e426:	7901      	ldrb	r1, [r0, #4]
    e428:	7940      	ldrb	r0, [r0, #5]
    e42a:	f001 0107 	and.w	r1, r1, #7
    e42e:	1e4a      	subs	r2, r1, #1
    e430:	f000 0007 	and.w	r0, r0, #7
    e434:	4011      	ands	r1, r2
    e436:	1e42      	subs	r2, r0, #1
    e438:	4010      	ands	r0, r2
    e43a:	4301      	orrs	r1, r0
    e43c:	d001      	beq.n	e442 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e43e:	2000      	movs	r0, #0
    e440:	4770      	bx	lr
    e442:	2001      	movs	r0, #1
    e444:	4770      	bx	lr

0000e446 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e446:	7900      	ldrb	r0, [r0, #4]
    e448:	4770      	bx	lr

0000e44a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e44a:	7940      	ldrb	r0, [r0, #5]
    e44c:	4770      	bx	lr

0000e44e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e44e:	7900      	ldrb	r0, [r0, #4]
    e450:	4770      	bx	lr

0000e452 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e452:	7101      	strb	r1, [r0, #4]
    e454:	4770      	bx	lr

0000e456 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e456:	7940      	ldrb	r0, [r0, #5]
    e458:	4770      	bx	lr

0000e45a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e45a:	7141      	strb	r1, [r0, #5]
    e45c:	4770      	bx	lr

0000e45e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e45e:	b510      	push	{r4, lr}
    e460:	2a1b      	cmp	r2, #27
    e462:	d904      	bls.n	e46e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e464:	f240 417e 	movw	r1, #1150	; 0x47e
    e468:	202a      	movs	r0, #42	; 0x2a
    e46a:	f7f2 fe6b 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e46e:	7042      	strb	r2, [r0, #1]
    e470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e474:	1cc0      	adds	r0, r0, #3
    e476:	f002 bc12 	b.w	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e47a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e47a:	7802      	ldrb	r2, [r0, #0]
    e47c:	f001 0103 	and.w	r1, r1, #3
    e480:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e484:	430a      	orrs	r2, r1
    e486:	7002      	strb	r2, [r0, #0]
    e488:	4770      	bx	lr

0000e48a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e48a:	7101      	strb	r1, [r0, #4]
    e48c:	0a09      	lsrs	r1, r1, #8
    e48e:	7141      	strb	r1, [r0, #5]
    e490:	4770      	bx	lr

0000e492 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e492:	7181      	strb	r1, [r0, #6]
    e494:	0a09      	lsrs	r1, r1, #8
    e496:	71c1      	strb	r1, [r0, #7]
    e498:	4770      	bx	lr

0000e49a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e49a:	7201      	strb	r1, [r0, #8]
    e49c:	0a09      	lsrs	r1, r1, #8
    e49e:	7241      	strb	r1, [r0, #9]
    e4a0:	4770      	bx	lr

0000e4a2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e4a2:	7281      	strb	r1, [r0, #10]
    e4a4:	0a09      	lsrs	r1, r1, #8
    e4a6:	72c1      	strb	r1, [r0, #11]
    e4a8:	4770      	bx	lr

0000e4aa <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e4aa:	7900      	ldrb	r0, [r0, #4]
    e4ac:	4770      	bx	lr

0000e4ae <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e4ae:	7900      	ldrb	r0, [r0, #4]
    e4b0:	4770      	bx	lr
    e4b2:	b570      	push	{r4, r5, r6, lr}
    e4b4:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e4b8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e4bc:	f012 0fff 	tst.w	r2, #255	; 0xff
    e4c0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e4c4:	d108      	bne.n	e4d8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4c6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e4ca:	b92c      	cbnz	r4, e4d8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4cc:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e4d0:	b914      	cbnz	r4, e4d8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4d2:	0e12      	lsrs	r2, r2, #24
    e4d4:	d100      	bne.n	e4d8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4d6:	b34b      	cbz	r3, e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4d8:	7846      	ldrb	r6, [r0, #1]
    e4da:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e4de:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e4e2:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e4e6:	7d83      	ldrb	r3, [r0, #22]
    e4e8:	2e22      	cmp	r6, #34	; 0x22
    e4ea:	d11f      	bne.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4ec:	b131      	cbz	r1, e4fc <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e4ee:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e4f2:	d903      	bls.n	e4fc <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e4f4:	f640 5107 	movw	r1, #3335	; 0xd07
    e4f8:	428a      	cmp	r2, r1
    e4fa:	d90b      	bls.n	e514 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e4fc:	1f91      	subs	r1, r2, #6
    e4fe:	f640 467a 	movw	r6, #3194	; 0xc7a
    e502:	42b1      	cmp	r1, r6
    e504:	d812      	bhi.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e506:	b18b      	cbz	r3, e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e508:	2b08      	cmp	r3, #8
    e50a:	d80f      	bhi.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e50c:	4293      	cmp	r3, r2
    e50e:	d20d      	bcs.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e510:	4295      	cmp	r5, r2
    e512:	d80b      	bhi.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e514:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e518:	d208      	bcs.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e51a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e51e:	f640 4176 	movw	r1, #3190	; 0xc76
    e522:	380a      	subs	r0, #10
    e524:	4288      	cmp	r0, r1
    e526:	d801      	bhi.n	e52c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e528:	2001      	movs	r0, #1
    e52a:	bd70      	pop	{r4, r5, r6, pc}
    e52c:	2000      	movs	r0, #0
    e52e:	bd70      	pop	{r4, r5, r6, pc}

0000e530 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e530:	6841      	ldr	r1, [r0, #4]
    e532:	2200      	movs	r2, #0
    e534:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e538:	2b00      	cmp	r3, #0
    e53a:	d004      	beq.n	e546 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e53c:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e540:	6840      	ldr	r0, [r0, #4]
    e542:	f000 bdfc 	b.w	f13e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e546:	4770      	bx	lr

0000e548 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e548:	b510      	push	{r4, lr}
    e54a:	7a01      	ldrb	r1, [r0, #8]
    e54c:	b119      	cbz	r1, e556 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e54e:	2901      	cmp	r1, #1
    e550:	d006      	beq.n	e560 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e552:	2000      	movs	r0, #0
    e554:	bd10      	pop	{r4, pc}
    e556:	88c2      	ldrh	r2, [r0, #6]
    e558:	6803      	ldr	r3, [r0, #0]
    e55a:	8880      	ldrh	r0, [r0, #4]
    e55c:	2102      	movs	r1, #2
    e55e:	e003      	b.n	e568 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e560:	88c2      	ldrh	r2, [r0, #6]
    e562:	6803      	ldr	r3, [r0, #0]
    e564:	8880      	ldrh	r0, [r0, #4]
    e566:	2101      	movs	r1, #1
    e568:	f7f4 fcf8 	bl	2f5c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e56c:	b908      	cbnz	r0, e572 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e56e:	f7f4 fd45 	bl	2ffc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e572:	2001      	movs	r0, #1
    e574:	bd10      	pop	{r4, pc}

0000e576 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e576:	2203      	movs	r2, #3
    e578:	f000 b806 	b.w	e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e57c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e57c:	2203      	movs	r2, #3
    e57e:	f000 b817 	b.w	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e582 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e582:	2204      	movs	r2, #4
    e584:	f000 b814 	b.w	e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e588 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e588:	b508      	push	{r3, lr}
    e58a:	7a03      	ldrb	r3, [r0, #8]
    e58c:	f88d 3000 	strb.w	r3, [sp]
    e590:	9b00      	ldr	r3, [sp, #0]
    e592:	9300      	str	r3, [sp, #0]
    e594:	f89d 3000 	ldrb.w	r3, [sp]
    e598:	b123      	cbz	r3, e5a4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e59a:	f240 21c2 	movw	r1, #706	; 0x2c2
    e59e:	2010      	movs	r0, #16
    e5a0:	f7f2 fdd0 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e5a8:	f7f4 be9a 	b.w	32e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000e5ac <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e5ac:	f7f4 bec6 	b.w	333c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000e5b0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e5b0:	7a03      	ldrb	r3, [r0, #8]
    e5b2:	b082      	sub	sp, #8
    e5b4:	f88d 3000 	strb.w	r3, [sp]
    e5b8:	9b00      	ldr	r3, [sp, #0]
    e5ba:	9300      	str	r3, [sp, #0]
    e5bc:	f89d 3000 	ldrb.w	r3, [sp]
    e5c0:	b113      	cbz	r3, e5c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e5c2:	7202      	strb	r2, [r0, #8]
    e5c4:	b002      	add	sp, #8
    e5c6:	4770      	bx	lr
    e5c8:	b002      	add	sp, #8
    e5ca:	f7f4 be89 	b.w	32e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    e5ce:	2000      	movs	r0, #0
    e5d0:	7048      	strb	r0, [r1, #1]
    e5d2:	2003      	movs	r0, #3
    e5d4:	7008      	strb	r0, [r1, #0]
    e5d6:	2001      	movs	r0, #1
    e5d8:	7108      	strb	r0, [r1, #4]
    e5da:	4770      	bx	lr

0000e5dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e5dc:	b510      	push	{r4, lr}
    e5de:	888c      	ldrh	r4, [r1, #4]
    e5e0:	890a      	ldrh	r2, [r1, #8]
    e5e2:	884b      	ldrh	r3, [r1, #2]
    e5e4:	88c9      	ldrh	r1, [r1, #6]
    e5e6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e5ea:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e5ee:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e5f2:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e5f6:	bd10      	pop	{r4, pc}

0000e5f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e5f8:	b570      	push	{r4, r5, r6, lr}
    e5fa:	4615      	mov	r5, r2
    e5fc:	460c      	mov	r4, r1
    e5fe:	f000 f8b8 	bl	e772 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e602:	3096      	adds	r0, #150	; 0x96
    e604:	4428      	add	r0, r5
    e606:	42a0      	cmp	r0, r4
    e608:	d801      	bhi.n	e60e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e60a:	1a20      	subs	r0, r4, r0
    e60c:	bd70      	pop	{r4, r5, r6, pc}
    e60e:	2000      	movs	r0, #0
    e610:	bd70      	pop	{r4, r5, r6, pc}

0000e612 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e616:	4604      	mov	r4, r0
    e618:	f000 f87f 	bl	e71a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e61c:	4680      	mov	r8, r0
    e61e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e622:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e626:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e628:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e62a:	4285      	cmp	r5, r0
    e62c:	d300      	bcc.n	e630 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e62e:	4605      	mov	r5, r0
    e630:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e634:	4620      	mov	r0, r4
    e636:	f000 f868 	bl	e70a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e63a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e63e:	2902      	cmp	r1, #2
    e640:	d108      	bne.n	e654 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e642:	42af      	cmp	r7, r5
    e644:	d200      	bcs.n	e648 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e646:	463d      	mov	r5, r7
    e648:	4286      	cmp	r6, r0
    e64a:	d200      	bcs.n	e64e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e64c:	4630      	mov	r0, r6
    e64e:	2100      	movs	r1, #0
    e650:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e654:	86a5      	strh	r5, [r4, #52]	; 0x34
    e656:	8720      	strh	r0, [r4, #56]	; 0x38
    e658:	42bd      	cmp	r5, r7
    e65a:	d101      	bne.n	e660 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e65c:	42b0      	cmp	r0, r6
    e65e:	d001      	beq.n	e664 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e660:	2001      	movs	r0, #1
    e662:	e000      	b.n	e666 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e664:	2000      	movs	r0, #0
    e666:	ea40 0008 	orr.w	r0, r0, r8
    e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e66e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e66e:	221b      	movs	r2, #27
    e670:	8402      	strh	r2, [r0, #32]
    e672:	8382      	strh	r2, [r0, #28]
    e674:	82c2      	strh	r2, [r0, #22]
    e676:	8282      	strh	r2, [r0, #20]
    e678:	8142      	strh	r2, [r0, #10]
    e67a:	8202      	strh	r2, [r0, #16]
    e67c:	8102      	strh	r2, [r0, #8]
    e67e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e680:	8582      	strh	r2, [r0, #44]	; 0x2c
    e682:	8482      	strh	r2, [r0, #36]	; 0x24
    e684:	2900      	cmp	r1, #0
    e686:	d10a      	bne.n	e69e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e688:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e68c:	8441      	strh	r1, [r0, #34]	; 0x22
    e68e:	83c1      	strh	r1, [r0, #30]
    e690:	8341      	strh	r1, [r0, #26]
    e692:	8301      	strh	r1, [r0, #24]
    e694:	81c1      	strh	r1, [r0, #14]
    e696:	8241      	strh	r1, [r0, #18]
    e698:	8181      	strh	r1, [r0, #12]
    e69a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e69c:	8601      	strh	r1, [r0, #48]	; 0x30
    e69e:	4770      	bx	lr

0000e6a0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e6a0:	6800      	ldr	r0, [r0, #0]
    e6a2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e6a6:	4290      	cmp	r0, r2
    e6a8:	d903      	bls.n	e6b2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e6aa:	1a40      	subs	r0, r0, r1
    e6ac:	389c      	subs	r0, #156	; 0x9c
    e6ae:	0840      	lsrs	r0, r0, #1
    e6b0:	4770      	bx	lr
    e6b2:	2000      	movs	r0, #0
    e6b4:	4770      	bx	lr

0000e6b6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e6b6:	6840      	ldr	r0, [r0, #4]
    e6b8:	4770      	bx	lr

0000e6ba <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e6ba:	b570      	push	{r4, r5, r6, lr}
    e6bc:	460c      	mov	r4, r1
    e6be:	4605      	mov	r5, r0
    e6c0:	f000 f857 	bl	e772 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e6c4:	4420      	add	r0, r4
    e6c6:	6328      	str	r0, [r5, #48]	; 0x30
    e6c8:	bd70      	pop	{r4, r5, r6, pc}

0000e6ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e6ca:	b510      	push	{r4, lr}
    e6cc:	9c02      	ldr	r4, [sp, #8]
    e6ce:	8281      	strh	r1, [r0, #20]
    e6d0:	82c2      	strh	r2, [r0, #22]
    e6d2:	8303      	strh	r3, [r0, #24]
    e6d4:	8344      	strh	r4, [r0, #26]
    e6d6:	bd10      	pop	{r4, pc}
    e6d8:	1d00      	adds	r0, r0, #4
    e6da:	b510      	push	{r4, lr}
    e6dc:	b280      	uxth	r0, r0
    e6de:	2901      	cmp	r1, #1
    e6e0:	d006      	beq.n	e6f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e6e2:	2902      	cmp	r1, #2
    e6e4:	d007      	beq.n	e6f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e6e6:	f240 2123 	movw	r1, #547	; 0x223
    e6ea:	2006      	movs	r0, #6
    e6ec:	f7f2 fd2a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6f0:	00c0      	lsls	r0, r0, #3
    e6f2:	3050      	adds	r0, #80	; 0x50
    e6f4:	e001      	b.n	e6fa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e6f6:	0080      	lsls	r0, r0, #2
    e6f8:	302c      	adds	r0, #44	; 0x2c
    e6fa:	b280      	uxth	r0, r0
    e6fc:	bd10      	pop	{r4, pc}
    e6fe:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e700:	8b00      	ldrh	r0, [r0, #24]
    e702:	4281      	cmp	r1, r0
    e704:	d200      	bcs.n	e708 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e706:	4608      	mov	r0, r1
    e708:	4770      	bx	lr
    e70a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e70e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e712:	4281      	cmp	r1, r0
    e714:	d200      	bcs.n	e718 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e716:	4608      	mov	r0, r1
    e718:	4770      	bx	lr
    e71a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e71e:	4606      	mov	r6, r0
    e720:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e724:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e728:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e72c:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e730:	42a0      	cmp	r0, r4
    e732:	d200      	bcs.n	e736 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e734:	4604      	mov	r4, r0
    e736:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e73a:	4605      	mov	r5, r0
    e73c:	f7ff ffdf 	bl	e6fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e740:	4607      	mov	r7, r0
    e742:	4628      	mov	r0, r5
    e744:	f7ff ffdb 	bl	e6fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e748:	816c      	strh	r4, [r5, #10]
    e74a:	81ef      	strh	r7, [r5, #14]
    e74c:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e74e:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e750:	42a1      	cmp	r1, r4
    e752:	d200      	bcs.n	e756 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e754:	4621      	mov	r1, r4
    e756:	4282      	cmp	r2, r0
    e758:	d300      	bcc.n	e75c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e75a:	4610      	mov	r0, r2
    e75c:	8229      	strh	r1, [r5, #16]
    e75e:	8268      	strh	r0, [r5, #18]
    e760:	454c      	cmp	r4, r9
    e762:	d101      	bne.n	e768 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e764:	4547      	cmp	r7, r8
    e766:	d002      	beq.n	e76e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e768:	2001      	movs	r0, #1
    e76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e76e:	2000      	movs	r0, #0
    e770:	e7fb      	b.n	e76a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e772:	2196      	movs	r1, #150	; 0x96
    e774:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e778:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e77c:	f000 b800 	b.w	e780 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e784:	460d      	mov	r5, r1
    e786:	4606      	mov	r6, r0
    e788:	4698      	mov	r8, r3
    e78a:	4617      	mov	r7, r2
    e78c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e78e:	4611      	mov	r1, r2
    e790:	f7ff ffa2 	bl	e6d8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e794:	4604      	mov	r4, r0
    e796:	4639      	mov	r1, r7
    e798:	4630      	mov	r0, r6
    e79a:	f7ff ffb6 	bl	e70a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e79e:	42a0      	cmp	r0, r4
    e7a0:	d200      	bcs.n	e7a4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e7a2:	4604      	mov	r4, r0
    e7a4:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e7a6:	4641      	mov	r1, r8
    e7a8:	f7ff ff96 	bl	e6d8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e7ac:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e7ae:	4281      	cmp	r1, r0
    e7b0:	d200      	bcs.n	e7b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e7b2:	4608      	mov	r0, r1
    e7b4:	4420      	add	r0, r4
    e7b6:	4428      	add	r0, r5
    e7b8:	1d80      	adds	r0, r0, #6
    e7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7be:	b510      	push	{r4, lr}
    e7c0:	4604      	mov	r4, r0
    e7c2:	2108      	movs	r1, #8
    e7c4:	4620      	mov	r0, r4
    e7c6:	f7f2 fd6d 	bl	12a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e7ca:	6820      	ldr	r0, [r4, #0]
    e7cc:	2800      	cmp	r0, #0
    e7ce:	d102      	bne.n	e7d6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e7d0:	6860      	ldr	r0, [r4, #4]
    e7d2:	2800      	cmp	r0, #0
    e7d4:	d0f5      	beq.n	e7c2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e7d6:	bd10      	pop	{r4, pc}

0000e7d8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e7d8:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e7dc:	2255      	movs	r2, #85	; 0x55
    e7de:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e7e2:	4408      	add	r0, r1
    e7e4:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e7e8:	2233      	movs	r2, #51	; 0x33
    e7ea:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e7ee:	4408      	add	r0, r1
    e7f0:	f000 010f 	and.w	r1, r0, #15
    e7f4:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e7f8:	4770      	bx	lr

0000e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e7fa:	6840      	ldr	r0, [r0, #4]
    e7fc:	2100      	movs	r1, #0
    e7fe:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e802:	7881      	ldrb	r1, [r0, #2]
    e804:	1c49      	adds	r1, r1, #1
    e806:	7081      	strb	r1, [r0, #2]
    e808:	4770      	bx	lr

0000e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e80a:	b510      	push	{r4, lr}
    e80c:	6840      	ldr	r0, [r0, #4]
    e80e:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e812:	1e49      	subs	r1, r1, #1
    e814:	b249      	sxtb	r1, r1
    e816:	7001      	strb	r1, [r0, #0]
    e818:	2900      	cmp	r1, #0
    e81a:	da03      	bge.n	e824 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e81c:	2135      	movs	r1, #53	; 0x35
    e81e:	204a      	movs	r0, #74	; 0x4a
    e820:	f7f2 fc90 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e824:	bd10      	pop	{r4, pc}

0000e826 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e826:	6840      	ldr	r0, [r0, #4]
    e828:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e82c:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e830:	4770      	bx	lr

0000e832 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e832:	6840      	ldr	r0, [r0, #4]
    e834:	2100      	movs	r1, #0
    e836:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e83a:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e83e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e842:	4770      	bx	lr

0000e844 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e844:	b510      	push	{r4, lr}
    e846:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e84a:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e84e:	2000      	movs	r0, #0
    e850:	7048      	strb	r0, [r1, #1]
    e852:	230a      	movs	r3, #10
    e854:	700b      	strb	r3, [r1, #0]
    e856:	7108      	strb	r0, [r1, #4]
    e858:	f8a1 4005 	strh.w	r4, [r1, #5]
    e85c:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e860:	71c8      	strb	r0, [r1, #7]
    e862:	4620      	mov	r0, r4
    e864:	f7f3 f930 	bl	1ac8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e868:	f7fe fe07 	bl	d47a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e86c:	b140      	cbz	r0, e880 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e86e:	4620      	mov	r0, r4
    e870:	f7ff fa07 	bl	dc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e874:	4620      	mov	r0, r4
    e876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e87a:	2100      	movs	r1, #0
    e87c:	f7f3 b832 	b.w	18e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e880:	2173      	movs	r1, #115	; 0x73
    e882:	2063      	movs	r0, #99	; 0x63
    e884:	f7f2 fc5e 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e888 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e888:	b570      	push	{r4, r5, r6, lr}
    e88a:	6844      	ldr	r4, [r0, #4]
    e88c:	460d      	mov	r5, r1
    e88e:	7803      	ldrb	r3, [r0, #0]
    e890:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e894:	3480      	adds	r4, #128	; 0x80
    e896:	2101      	movs	r1, #1
    e898:	4620      	mov	r0, r4
    e89a:	f7ff facd 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e89e:	b108      	cbz	r0, e8a4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e8a0:	2000      	movs	r0, #0
    e8a2:	bd70      	pop	{r4, r5, r6, pc}
    e8a4:	4628      	mov	r0, r5
    e8a6:	f7ff fe00 	bl	e4aa <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e8aa:	f884 0020 	strb.w	r0, [r4, #32]
    e8ae:	2006      	movs	r0, #6
    e8b0:	77e0      	strb	r0, [r4, #31]
    e8b2:	e7f5      	b.n	e8a0 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e8b4 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e8b4:	b510      	push	{r4, lr}
    e8b6:	6844      	ldr	r4, [r0, #4]
    e8b8:	7803      	ldrb	r3, [r0, #0]
    e8ba:	2101      	movs	r1, #1
    e8bc:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e8c0:	3480      	adds	r4, #128	; 0x80
    e8c2:	4620      	mov	r0, r4
    e8c4:	f7ff fab8 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8c8:	2800      	cmp	r0, #0
    e8ca:	d101      	bne.n	e8d0 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e8cc:	2007      	movs	r0, #7
    e8ce:	77e0      	strb	r0, [r4, #31]
    e8d0:	bd10      	pop	{r4, pc}

0000e8d2 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e8d2:	2200      	movs	r2, #0
    e8d4:	704a      	strb	r2, [r1, #1]
    e8d6:	2307      	movs	r3, #7
    e8d8:	700b      	strb	r3, [r1, #0]
    e8da:	f100 030a 	add.w	r3, r0, #10
    e8de:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e8e2:	84c2      	strh	r2, [r0, #38]	; 0x26
    e8e4:	6818      	ldr	r0, [r3, #0]
    e8e6:	6048      	str	r0, [r1, #4]
    e8e8:	6858      	ldr	r0, [r3, #4]
    e8ea:	6088      	str	r0, [r1, #8]
    e8ec:	8918      	ldrh	r0, [r3, #8]
    e8ee:	8188      	strh	r0, [r1, #12]
    e8f0:	710a      	strb	r2, [r1, #4]
    e8f2:	4770      	bx	lr

0000e8f4 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e8f4:	b510      	push	{r4, lr}
    e8f6:	6844      	ldr	r4, [r0, #4]
    e8f8:	7803      	ldrb	r3, [r0, #0]
    e8fa:	2100      	movs	r1, #0
    e8fc:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e900:	3480      	adds	r4, #128	; 0x80
    e902:	4620      	mov	r0, r4
    e904:	f7ff fa98 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e908:	b110      	cbz	r0, e910 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e90a:	201d      	movs	r0, #29
    e90c:	7760      	strb	r0, [r4, #29]
    e90e:	bd10      	pop	{r4, pc}
    e910:	2122      	movs	r1, #34	; 0x22
    e912:	2045      	movs	r0, #69	; 0x45
    e914:	f7f2 fc16 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e918 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e91c:	4606      	mov	r6, r0
    e91e:	7803      	ldrb	r3, [r0, #0]
    e920:	6840      	ldr	r0, [r0, #4]
    e922:	468b      	mov	fp, r1
    e924:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e928:	4605      	mov	r5, r0
    e92a:	2700      	movs	r7, #0
    e92c:	7f62      	ldrb	r2, [r4, #29]
    e92e:	210a      	movs	r1, #10
    e930:	4620      	mov	r0, r4
    e932:	f7ff fa81 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e936:	b358      	cbz	r0, e990 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e938:	4658      	mov	r0, fp
    e93a:	f7ff fd56 	bl	e3ea <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e93e:	b1f0      	cbz	r0, e97e <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e940:	4658      	mov	r0, fp
    e942:	f7ff fd4c 	bl	e3de <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e946:	4682      	mov	sl, r0
    e948:	4658      	mov	r0, fp
    e94a:	f7ff fd4c 	bl	e3e6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e94e:	4681      	mov	r9, r0
    e950:	4658      	mov	r0, fp
    e952:	f7ff fd42 	bl	e3da <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e956:	4680      	mov	r8, r0
    e958:	4658      	mov	r0, fp
    e95a:	f7ff fd42 	bl	e3e2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e95e:	4601      	mov	r1, r0
    e960:	464b      	mov	r3, r9
    e962:	4642      	mov	r2, r8
    e964:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e968:	f8cd a000 	str.w	sl, [sp]
    e96c:	f7ff fead 	bl	e6ca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e970:	4628      	mov	r0, r5
    e972:	f7ff fe4e 	bl	e612 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e976:	2105      	movs	r1, #5
    e978:	6870      	ldr	r0, [r6, #4]
    e97a:	f7f6 f8cb 	bl	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e97e:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e982:	7767      	strb	r7, [r4, #29]
    e984:	4630      	mov	r0, r6
    e986:	f000 f805 	bl	e994 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e98a:	2000      	movs	r0, #0
    e98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e990:	2001      	movs	r0, #1
    e992:	e7fb      	b.n	e98c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e994 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e994:	6841      	ldr	r1, [r0, #4]
    e996:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e99a:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e99e:	2801      	cmp	r0, #1
    e9a0:	d004      	beq.n	e9ac <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e9a2:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e9a6:	3218      	adds	r2, #24
    e9a8:	f7f4 bcde 	b.w	3368 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e9ac:	2002      	movs	r0, #2
    e9ae:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e9b2:	4770      	bx	lr

0000e9b4 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e9b4:	2200      	movs	r2, #0
    e9b6:	704a      	strb	r2, [r1, #1]
    e9b8:	220b      	movs	r2, #11
    e9ba:	700a      	strb	r2, [r1, #0]
    e9bc:	f100 020a 	add.w	r2, r0, #10
    e9c0:	7a83      	ldrb	r3, [r0, #10]
    e9c2:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e9c6:	710b      	strb	r3, [r1, #4]
    e9c8:	8800      	ldrh	r0, [r0, #0]
    e9ca:	80c8      	strh	r0, [r1, #6]
    e9cc:	7910      	ldrb	r0, [r2, #4]
    e9ce:	7208      	strb	r0, [r1, #8]
    e9d0:	4770      	bx	lr

0000e9d2 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e9d2:	2200      	movs	r2, #0
    e9d4:	704a      	strb	r2, [r1, #1]
    e9d6:	220c      	movs	r2, #12
    e9d8:	700a      	strb	r2, [r1, #0]
    e9da:	7a82      	ldrb	r2, [r0, #10]
    e9dc:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e9e0:	710a      	strb	r2, [r1, #4]
    e9e2:	8800      	ldrh	r0, [r0, #0]
    e9e4:	80c8      	strh	r0, [r1, #6]
    e9e6:	4770      	bx	lr

0000e9e8 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e9e8:	2200      	movs	r2, #0
    e9ea:	704a      	strb	r2, [r1, #1]
    e9ec:	2208      	movs	r2, #8
    e9ee:	700a      	strb	r2, [r1, #0]
    e9f0:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e9f4:	8812      	ldrh	r2, [r2, #0]
    e9f6:	808a      	strh	r2, [r1, #4]
    e9f8:	68c2      	ldr	r2, [r0, #12]
    e9fa:	f8c1 2006 	str.w	r2, [r1, #6]
    e9fe:	6902      	ldr	r2, [r0, #16]
    ea00:	f8c1 200a 	str.w	r2, [r1, #10]
    ea04:	8a80      	ldrh	r0, [r0, #20]
    ea06:	81c8      	strh	r0, [r1, #14]
    ea08:	4770      	bx	lr
    ea0a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ea0e:	f001 0307 	and.w	r3, r1, #7
    ea12:	7802      	ldrb	r2, [r0, #0]
    ea14:	2101      	movs	r1, #1
    ea16:	4099      	lsls	r1, r3
    ea18:	430a      	orrs	r2, r1
    ea1a:	7002      	strb	r2, [r0, #0]
    ea1c:	4770      	bx	lr

0000ea1e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    ea1e:	b510      	push	{r4, lr}
    ea20:	6844      	ldr	r4, [r0, #4]
    ea22:	7803      	ldrb	r3, [r0, #0]
    ea24:	2100      	movs	r1, #0
    ea26:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    ea2a:	3480      	adds	r4, #128	; 0x80
    ea2c:	4620      	mov	r0, r4
    ea2e:	f7ff fa03 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea32:	b110      	cbz	r0, ea3a <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    ea34:	2004      	movs	r0, #4
    ea36:	7760      	strb	r0, [r4, #29]
    ea38:	bd10      	pop	{r4, pc}
    ea3a:	21ab      	movs	r1, #171	; 0xab
    ea3c:	201c      	movs	r0, #28
    ea3e:	f7f2 fb81 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ea42 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    ea42:	b510      	push	{r4, lr}
    ea44:	6841      	ldr	r1, [r0, #4]
    ea46:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    ea4a:	07d2      	lsls	r2, r2, #31
    ea4c:	d00b      	beq.n	ea66 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    ea4e:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    ea52:	1e52      	subs	r2, r2, #1
    ea54:	b252      	sxtb	r2, r2
    ea56:	700a      	strb	r2, [r1, #0]
    ea58:	6840      	ldr	r0, [r0, #4]
    ea5a:	2a00      	cmp	r2, #0
    ea5c:	da05      	bge.n	ea6a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    ea5e:	21ba      	movs	r1, #186	; 0xba
    ea60:	201c      	movs	r0, #28
    ea62:	f7f2 fb6f 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea66:	21b8      	movs	r1, #184	; 0xb8
    ea68:	e7fa      	b.n	ea60 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    ea6a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    ea6e:	f021 0101 	bic.w	r1, r1, #1
    ea72:	6001      	str	r1, [r0, #0]
    ea74:	bd10      	pop	{r4, pc}
    ea76:	2200      	movs	r2, #0
    ea78:	704a      	strb	r2, [r1, #1]
    ea7a:	2206      	movs	r2, #6
    ea7c:	700a      	strb	r2, [r1, #0]
    ea7e:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ea82:	604a      	str	r2, [r1, #4]
    ea84:	6842      	ldr	r2, [r0, #4]
    ea86:	608a      	str	r2, [r1, #8]
    ea88:	8902      	ldrh	r2, [r0, #8]
    ea8a:	818a      	strh	r2, [r1, #12]
    ea8c:	7a80      	ldrb	r0, [r0, #10]
    ea8e:	7388      	strb	r0, [r1, #14]
    ea90:	4770      	bx	lr

0000ea92 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    ea92:	2200      	movs	r2, #0
    ea94:	704a      	strb	r2, [r1, #1]
    ea96:	220e      	movs	r2, #14
    ea98:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    ea9c:	700a      	strb	r2, [r1, #0]
    ea9e:	8800      	ldrh	r0, [r0, #0]
    eaa0:	8088      	strh	r0, [r1, #4]
    eaa2:	4770      	bx	lr

0000eaa4 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    eaa4:	b510      	push	{r4, lr}
    eaa6:	6844      	ldr	r4, [r0, #4]
    eaa8:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    eaac:	3480      	adds	r4, #128	; 0x80
    eaae:	f011 0f04 	tst.w	r1, #4
    eab2:	d001      	beq.n	eab8 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    eab4:	2001      	movs	r0, #1
    eab6:	bd10      	pop	{r4, pc}
    eab8:	f7ff fe9f 	bl	e7fa <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    eabc:	68e0      	ldr	r0, [r4, #12]
    eabe:	f040 0004 	orr.w	r0, r0, #4
    eac2:	60e0      	str	r0, [r4, #12]
    eac4:	2000      	movs	r0, #0
    eac6:	bd10      	pop	{r4, pc}

0000eac8 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    eac8:	b510      	push	{r4, lr}
    eaca:	6844      	ldr	r4, [r0, #4]
    eacc:	7803      	ldrb	r3, [r0, #0]
    eace:	2100      	movs	r1, #0
    ead0:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    ead4:	3480      	adds	r4, #128	; 0x80
    ead6:	4620      	mov	r0, r4
    ead8:	f7ff f9ae 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eadc:	b110      	cbz	r0, eae4 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    eade:	200f      	movs	r0, #15
    eae0:	7760      	strb	r0, [r4, #29]
    eae2:	bd10      	pop	{r4, pc}
    eae4:	216e      	movs	r1, #110	; 0x6e
    eae6:	204b      	movs	r0, #75	; 0x4b
    eae8:	f7f2 fb2c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eaec <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    eaec:	b510      	push	{r4, lr}
    eaee:	6844      	ldr	r4, [r0, #4]
    eaf0:	7803      	ldrb	r3, [r0, #0]
    eaf2:	2109      	movs	r1, #9
    eaf4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    eaf8:	3480      	adds	r4, #128	; 0x80
    eafa:	4620      	mov	r0, r4
    eafc:	f7ff f99c 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb00:	2800      	cmp	r0, #0
    eb02:	d005      	beq.n	eb10 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    eb04:	2000      	movs	r0, #0
    eb06:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    eb0a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    eb0e:	7760      	strb	r0, [r4, #29]
    eb10:	bd10      	pop	{r4, pc}

0000eb12 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    eb12:	6841      	ldr	r1, [r0, #4]
    eb14:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    eb18:	f022 0204 	bic.w	r2, r2, #4
    eb1c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    eb20:	f7ff be73 	b.w	e80a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000eb24 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    eb24:	b510      	push	{r4, lr}
    eb26:	2300      	movs	r3, #0
    eb28:	704b      	strb	r3, [r1, #1]
    eb2a:	2401      	movs	r4, #1
    eb2c:	700c      	strb	r4, [r1, #0]
    eb2e:	f100 0209 	add.w	r2, r0, #9
    eb32:	710b      	strb	r3, [r1, #4]
    eb34:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    eb38:	f8a1 0005 	strh.w	r0, [r1, #5]
    eb3c:	f812 0b01 	ldrb.w	r0, [r2], #1
    eb40:	71c8      	strb	r0, [r1, #7]
    eb42:	8810      	ldrh	r0, [r2, #0]
    eb44:	8108      	strh	r0, [r1, #8]
    eb46:	8850      	ldrh	r0, [r2, #2]
    eb48:	8148      	strh	r0, [r1, #10]
    eb4a:	bd10      	pop	{r4, pc}

0000eb4c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    eb4c:	b570      	push	{r4, r5, r6, lr}
    eb4e:	7803      	ldrb	r3, [r0, #0]
    eb50:	6840      	ldr	r0, [r0, #4]
    eb52:	2500      	movs	r5, #0
    eb54:	f100 0480 	add.w	r4, r0, #128	; 0x80
    eb58:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    eb5c:	f500 7098 	add.w	r0, r0, #304	; 0x130
    eb60:	0789      	lsls	r1, r1, #30
    eb62:	d40e      	bmi.n	eb82 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    eb64:	7f62      	ldrb	r2, [r4, #29]
    eb66:	2100      	movs	r1, #0
    eb68:	4620      	mov	r0, r4
    eb6a:	f7ff f965 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb6e:	b130      	cbz	r0, eb7e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    eb70:	2001      	movs	r0, #1
    eb72:	7760      	strb	r0, [r4, #29]
    eb74:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    eb78:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    eb7c:	bd70      	pop	{r4, r5, r6, pc}
    eb7e:	216e      	movs	r1, #110	; 0x6e
    eb80:	e00b      	b.n	eb9a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    eb82:	7b21      	ldrb	r1, [r4, #12]
    eb84:	0789      	lsls	r1, r1, #30
    eb86:	d50f      	bpl.n	eba8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    eb88:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    eb8c:	1e49      	subs	r1, r1, #1
    eb8e:	b249      	sxtb	r1, r1
    eb90:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    eb94:	2900      	cmp	r1, #0
    eb96:	da03      	bge.n	eba0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    eb98:	2180      	movs	r1, #128	; 0x80
    eb9a:	2040      	movs	r0, #64	; 0x40
    eb9c:	f7f2 fad2 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eba0:	68e1      	ldr	r1, [r4, #12]
    eba2:	f021 0102 	bic.w	r1, r1, #2
    eba6:	60e1      	str	r1, [r4, #12]
    eba8:	7485      	strb	r5, [r0, #18]
    ebaa:	bd70      	pop	{r4, r5, r6, pc}
    ebac:	2200      	movs	r2, #0
    ebae:	704a      	strb	r2, [r1, #1]
    ebb0:	2219      	movs	r2, #25
    ebb2:	700a      	strb	r2, [r1, #0]
    ebb4:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ebb8:	6048      	str	r0, [r1, #4]
    ebba:	4770      	bx	lr
    ebbc:	b510      	push	{r4, lr}
    ebbe:	4604      	mov	r4, r0
    ebc0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ebc4:	e9d4 1000 	ldrd	r1, r0, [r4]
    ebc8:	4050      	eors	r0, r2
    ebca:	ea70 0101 	orns	r1, r0, r1
    ebce:	d008      	beq.n	ebe2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ebd0:	f001 fed3 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ebd4:	e9d4 2300 	ldrd	r2, r3, [r4]
    ebd8:	1a80      	subs	r0, r0, r2
    ebda:	4199      	sbcs	r1, r3
    ebdc:	d301      	bcc.n	ebe2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ebde:	2001      	movs	r0, #1
    ebe0:	bd10      	pop	{r4, pc}
    ebe2:	2000      	movs	r0, #0
    ebe4:	bd10      	pop	{r4, pc}

0000ebe6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ebe6:	b508      	push	{r3, lr}
    ebe8:	f000 f804 	bl	ebf4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ebec:	466a      	mov	r2, sp
    ebee:	f7f4 ff11 	bl	3a14 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    ebf2:	bd08      	pop	{r3, pc}
    ebf4:	b530      	push	{r4, r5, lr}
    ebf6:	784c      	ldrb	r4, [r1, #1]
    ebf8:	4603      	mov	r3, r0
    ebfa:	7808      	ldrb	r0, [r1, #0]
    ebfc:	788d      	ldrb	r5, [r1, #2]
    ebfe:	0e22      	lsrs	r2, r4, #24
    ec00:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    ec04:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    ec08:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    ec0c:	78cd      	ldrb	r5, [r1, #3]
    ec0e:	790c      	ldrb	r4, [r1, #4]
    ec10:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    ec14:	4322      	orrs	r2, r4
    ec16:	7949      	ldrb	r1, [r1, #5]
    ec18:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ec1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ec20:	4611      	mov	r1, r2
    ec22:	2b01      	cmp	r3, #1
    ec24:	d101      	bne.n	ec2a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    ec26:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    ec2a:	bd30      	pop	{r4, r5, pc}
    ec2c:	2801      	cmp	r0, #1
    ec2e:	d102      	bne.n	ec36 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    ec30:	7948      	ldrb	r0, [r1, #5]
    ec32:	0980      	lsrs	r0, r0, #6
    ec34:	d001      	beq.n	ec3a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    ec36:	2000      	movs	r0, #0
    ec38:	4770      	bx	lr
    ec3a:	2001      	movs	r0, #1
    ec3c:	4770      	bx	lr
    ec3e:	2801      	cmp	r0, #1
    ec40:	d106      	bne.n	ec50 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ec42:	7948      	ldrb	r0, [r1, #5]
    ec44:	2101      	movs	r1, #1
    ec46:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ec4a:	d101      	bne.n	ec50 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ec4c:	2001      	movs	r0, #1
    ec4e:	4770      	bx	lr
    ec50:	2000      	movs	r0, #0
    ec52:	4770      	bx	lr
    ec54:	2802      	cmp	r0, #2
    ec56:	d003      	beq.n	ec60 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    ec58:	2803      	cmp	r0, #3
    ec5a:	d001      	beq.n	ec60 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    ec5c:	2000      	movs	r0, #0
    ec5e:	4770      	bx	lr
    ec60:	2001      	movs	r0, #1
    ec62:	4770      	bx	lr

0000ec64 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ec64:	b510      	push	{r4, lr}
    ec66:	4604      	mov	r4, r0
    ec68:	7c00      	ldrb	r0, [r0, #16]
    ec6a:	f7ff fff3 	bl	ec54 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    ec6e:	b148      	cbz	r0, ec84 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ec70:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    ec74:	f104 0158 	add.w	r1, r4, #88	; 0x58
    ec78:	f7ff f89f 	bl	ddba <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ec7c:	2808      	cmp	r0, #8
    ec7e:	d001      	beq.n	ec84 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ec80:	2001      	movs	r0, #1
    ec82:	bd10      	pop	{r4, pc}
    ec84:	7c20      	ldrb	r0, [r4, #16]
    ec86:	b118      	cbz	r0, ec90 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ec88:	2802      	cmp	r0, #2
    ec8a:	d001      	beq.n	ec90 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ec8c:	7de0      	ldrb	r0, [r4, #23]
    ec8e:	bd10      	pop	{r4, pc}
    ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec94:	2000      	movs	r0, #0
    ec96:	f7f3 b9e5 	b.w	2064 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000ec9a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    ec9a:	b508      	push	{r3, lr}
    ec9c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    eca0:	f88d 1000 	strb.w	r1, [sp]
    eca4:	9900      	ldr	r1, [sp, #0]
    eca6:	9100      	str	r1, [sp, #0]
    eca8:	f89d 1000 	ldrb.w	r1, [sp]
    ecac:	b941      	cbnz	r1, ecc0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    ecae:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    ecb2:	f88d 1000 	strb.w	r1, [sp]
    ecb6:	9900      	ldr	r1, [sp, #0]
    ecb8:	9100      	str	r1, [sp, #0]
    ecba:	f89d 1000 	ldrb.w	r1, [sp]
    ecbe:	b109      	cbz	r1, ecc4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    ecc0:	2001      	movs	r0, #1
    ecc2:	bd08      	pop	{r3, pc}
    ecc4:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    ecc8:	f88d 0000 	strb.w	r0, [sp]
    eccc:	9800      	ldr	r0, [sp, #0]
    ecce:	9000      	str	r0, [sp, #0]
    ecd0:	f89d 0000 	ldrb.w	r0, [sp]
    ecd4:	2000      	movs	r0, #0
    ecd6:	bd08      	pop	{r3, pc}

0000ecd8 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    ecd8:	20ff      	movs	r0, #255	; 0xff
    ecda:	7008      	strb	r0, [r1, #0]
    ecdc:	6b48      	ldr	r0, [r1, #52]	; 0x34
    ecde:	f7fe bf71 	b.w	dbc4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000ece2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    ece2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ece4:	460d      	mov	r5, r1
    ece6:	4604      	mov	r4, r0
    ece8:	f44f 728c 	mov.w	r2, #280	; 0x118
    ecec:	2100      	movs	r1, #0
    ecee:	f002 f850 	bl	10d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ecf2:	20ff      	movs	r0, #255	; 0xff
    ecf4:	7020      	strb	r0, [r4, #0]
    ecf6:	207f      	movs	r0, #127	; 0x7f
    ecf8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    ecfc:	2013      	movs	r0, #19
    ecfe:	8060      	strh	r0, [r4, #2]
    ed00:	f242 7010 	movw	r0, #10000	; 0x2710
    ed04:	8460      	strh	r0, [r4, #34]	; 0x22
    ed06:	f7f2 ff9d 	bl	1c44 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ed0a:	4601      	mov	r1, r0
    ed0c:	6360      	str	r0, [r4, #52]	; 0x34
    ed0e:	2200      	movs	r2, #0
    ed10:	4668      	mov	r0, sp
    ed12:	f7fe febd 	bl	da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ed16:	2200      	movs	r2, #0
    ed18:	2101      	movs	r1, #1
    ed1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ed1c:	f7fe ff32 	bl	db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ed20:	2204      	movs	r2, #4
    ed22:	4668      	mov	r0, sp
    ed24:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ed26:	f7fe feb3 	bl	da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ed2a:	2200      	movs	r2, #0
    ed2c:	4611      	mov	r1, r2
    ed2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ed30:	f7fe ff28 	bl	db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ed34:	73a5      	strb	r5, [r4, #14]
    ed36:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ed3a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ed3e:	f000 b958 	b.w	eff2 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000ed42 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ed42:	7880      	ldrb	r0, [r0, #2]
    ed44:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ed48:	b108      	cbz	r0, ed4e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    ed4a:	2000      	movs	r0, #0
    ed4c:	4770      	bx	lr
    ed4e:	201f      	movs	r0, #31
    ed50:	4770      	bx	lr

0000ed52 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ed52:	f7f5 bbc5 	b.w	44e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000ed56 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ed56:	6880      	ldr	r0, [r0, #8]
    ed58:	4770      	bx	lr

0000ed5a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ed5a:	2001      	movs	r0, #1
    ed5c:	4770      	bx	lr

0000ed5e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ed5e:	b510      	push	{r4, lr}
    ed60:	4604      	mov	r4, r0
    ed62:	3028      	adds	r0, #40	; 0x28
    ed64:	f000 f905 	bl	ef72 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ed68:	8861      	ldrh	r1, [r4, #2]
    ed6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed6e:	2228      	movs	r2, #40	; 0x28
    ed70:	f7f5 bd86 	b.w	4880 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ed74 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ed74:	2200      	movs	r2, #0
    ed76:	8602      	strh	r2, [r0, #48]	; 0x30
    ed78:	8843      	ldrh	r3, [r0, #2]
    ed7a:	2b1d      	cmp	r3, #29
    ed7c:	d001      	beq.n	ed82 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ed7e:	7341      	strb	r1, [r0, #13]
    ed80:	4770      	bx	lr
    ed82:	7342      	strb	r2, [r0, #13]
    ed84:	4770      	bx	lr

0000ed86 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    ed86:	b510      	push	{r4, lr}
    ed88:	2400      	movs	r4, #0
    ed8a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ed8c:	f7fe fef2 	bl	db74 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    ed90:	4384      	bics	r4, r0
    ed92:	f084 0001 	eor.w	r0, r4, #1
    ed96:	bd10      	pop	{r4, pc}

0000ed98 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    ed98:	2000      	movs	r0, #0
    ed9a:	4770      	bx	lr

0000ed9c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ed9c:	7880      	ldrb	r0, [r0, #2]
    ed9e:	f000 0001 	and.w	r0, r0, #1
    eda2:	4770      	bx	lr

0000eda4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    eda4:	7880      	ldrb	r0, [r0, #2]
    eda6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    edaa:	4770      	bx	lr

0000edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    edac:	2001      	movs	r0, #1
    edae:	4770      	bx	lr

0000edb0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    edb0:	7880      	ldrb	r0, [r0, #2]
    edb2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    edb6:	4770      	bx	lr

0000edb8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    edb8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    edbc:	4770      	bx	lr

0000edbe <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    edbe:	7800      	ldrb	r0, [r0, #0]
    edc0:	28ff      	cmp	r0, #255	; 0xff
    edc2:	d001      	beq.n	edc8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    edc4:	2001      	movs	r0, #1
    edc6:	4770      	bx	lr
    edc8:	2000      	movs	r0, #0
    edca:	4770      	bx	lr

0000edcc <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    edcc:	f800 1f20 	strb.w	r1, [r0, #32]!
    edd0:	7042      	strb	r2, [r0, #1]
    edd2:	4770      	bx	lr

0000edd4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    edd4:	680a      	ldr	r2, [r1, #0]
    edd6:	f840 2f11 	str.w	r2, [r0, #17]!
    edda:	8889      	ldrh	r1, [r1, #4]
    eddc:	8081      	strh	r1, [r0, #4]
    edde:	2101      	movs	r1, #1
    ede0:	7181      	strb	r1, [r0, #6]
    ede2:	4770      	bx	lr

0000ede4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ede4:	7b00      	ldrb	r0, [r0, #12]
    ede6:	4770      	bx	lr

0000ede8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ede8:	2001      	movs	r0, #1
    edea:	4770      	bx	lr

0000edec <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    edec:	61c1      	str	r1, [r0, #28]
    edee:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    edf2:	724a      	strb	r2, [r1, #9]
    edf4:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    edf8:	f8c1 200a 	str.w	r2, [r1, #10]
    edfc:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ee00:	81c8      	strh	r0, [r1, #14]
    ee02:	4770      	bx	lr

0000ee04 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ee04:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ee08:	4770      	bx	lr

0000ee0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ee0a:	7bc0      	ldrb	r0, [r0, #15]
    ee0c:	2800      	cmp	r0, #0
    ee0e:	d000      	beq.n	ee12 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ee10:	2001      	movs	r0, #1
    ee12:	4770      	bx	lr
    ee14:	7802      	ldrb	r2, [r0, #0]
    ee16:	2320      	movs	r3, #32
    ee18:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ee1c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ee20:	430a      	orrs	r2, r1
    ee22:	7002      	strb	r2, [r0, #0]
    ee24:	4770      	bx	lr
    ee26:	2101      	movs	r1, #1
    ee28:	f7f4 bfaa 	b.w	3d80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ee2c:	2101      	movs	r1, #1
    ee2e:	f7f4 bfa7 	b.w	3d80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ee32:	2200      	movs	r2, #0
    ee34:	704a      	strb	r2, [r1, #1]
    ee36:	2205      	movs	r2, #5
    ee38:	700a      	strb	r2, [r1, #0]
    ee3a:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ee3e:	6048      	str	r0, [r1, #4]
    ee40:	4770      	bx	lr
    ee42:	b510      	push	{r4, lr}
    ee44:	460c      	mov	r4, r1
    ee46:	2100      	movs	r1, #0
    ee48:	7061      	strb	r1, [r4, #1]
    ee4a:	2112      	movs	r1, #18
    ee4c:	7021      	strb	r1, [r4, #0]
    ee4e:	f100 0109 	add.w	r1, r0, #9
    ee52:	2221      	movs	r2, #33	; 0x21
    ee54:	1d20      	adds	r0, r4, #4
    ee56:	f001 ff22 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ee5a:	2001      	movs	r0, #1
    ee5c:	71e0      	strb	r0, [r4, #7]
    ee5e:	7920      	ldrb	r0, [r4, #4]
    ee60:	2800      	cmp	r0, #0
    ee62:	d015      	beq.n	ee90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ee64:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ee68:	2100      	movs	r1, #0
    ee6a:	4620      	mov	r0, r4
    ee6c:	f7f2 fc98 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee70:	2800      	cmp	r0, #0
    ee72:	d00d      	beq.n	ee90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ee74:	8800      	ldrh	r0, [r0, #0]
    ee76:	f7fe ff04 	bl	dc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ee7a:	2100      	movs	r1, #0
    ee7c:	4620      	mov	r0, r4
    ee7e:	f7f2 fd31 	bl	18e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ee82:	2800      	cmp	r0, #0
    ee84:	d004      	beq.n	ee90 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ee86:	f240 2151 	movw	r1, #593	; 0x251
    ee8a:	202d      	movs	r0, #45	; 0x2d
    ee8c:	f7f2 f95a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee90:	bd10      	pop	{r4, pc}
    ee92:	2200      	movs	r2, #0
    ee94:	704a      	strb	r2, [r1, #1]
    ee96:	221a      	movs	r2, #26
    ee98:	700a      	strb	r2, [r1, #0]
    ee9a:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ee9e:	604a      	str	r2, [r1, #4]
    eea0:	6842      	ldr	r2, [r0, #4]
    eea2:	608a      	str	r2, [r1, #8]
    eea4:	7a00      	ldrb	r0, [r0, #8]
    eea6:	7308      	strb	r0, [r1, #12]
    eea8:	4770      	bx	lr
    eeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eeae:	4604      	mov	r4, r0
    eeb0:	460f      	mov	r7, r1
    eeb2:	7e40      	ldrb	r0, [r0, #25]
    eeb4:	f7f3 fe12 	bl	2adc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    eeb8:	4606      	mov	r6, r0
    eeba:	7e20      	ldrb	r0, [r4, #24]
    eebc:	f104 0551 	add.w	r5, r4, #81	; 0x51
    eec0:	b120      	cbz	r0, eecc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    eec2:	b11e      	cbz	r6, eecc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    eec4:	7e60      	ldrb	r0, [r4, #25]
    eec6:	f7f3 fdfd 	bl	2ac4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    eeca:	b1a0      	cbz	r0, eef6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    eecc:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    eed0:	2800      	cmp	r0, #0
    eed2:	d024      	beq.n	ef1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    eed4:	7ea0      	ldrb	r0, [r4, #26]
    eed6:	2800      	cmp	r0, #0
    eed8:	d021      	beq.n	ef1e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    eeda:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    eede:	4629      	mov	r1, r5
    eee0:	f7ff fead 	bl	ec3e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    eee4:	b1a8      	cbz	r0, ef12 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    eee6:	f7f3 fde9 	bl	2abc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    eeea:	463a      	mov	r2, r7
    eeec:	4629      	mov	r1, r5
    eeee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eef2:	f7fe befa 	b.w	dcea <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eef6:	2001      	movs	r0, #1
    eef8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    eefc:	463a      	mov	r2, r7
    eefe:	4629      	mov	r1, r5
    ef00:	4630      	mov	r0, r6
    ef02:	f7fe fef2 	bl	dcea <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ef06:	7e61      	ldrb	r1, [r4, #25]
    ef08:	4628      	mov	r0, r5
    ef0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef0e:	f7f3 bdf1 	b.w	2af4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ef12:	4639      	mov	r1, r7
    ef14:	4628      	mov	r0, r5
    ef16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef1a:	f7fe bed5 	b.w	dcc8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ef1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef22:	b510      	push	{r4, lr}
    ef24:	4604      	mov	r4, r0
    ef26:	4608      	mov	r0, r1
    ef28:	f7f9 fb5a 	bl	85e0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ef2c:	7921      	ldrb	r1, [r4, #4]
    ef2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef32:	2025      	movs	r0, #37	; 0x25
    ef34:	f7f9 bb2a 	b.w	858c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ef38:	b570      	push	{r4, r5, r6, lr}
    ef3a:	4614      	mov	r4, r2
    ef3c:	461d      	mov	r5, r3
    ef3e:	4606      	mov	r6, r0
    ef40:	f001 fd1b 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ef44:	1900      	adds	r0, r0, r4
    ef46:	4169      	adcs	r1, r5
    ef48:	e9c6 0100 	strd	r0, r1, [r6]
    ef4c:	bd70      	pop	{r4, r5, r6, pc}

0000ef4e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ef4e:	b570      	push	{r4, r5, r6, lr}
    ef50:	7001      	strb	r1, [r0, #0]
    ef52:	7042      	strb	r2, [r0, #1]
    ef54:	4614      	mov	r4, r2
    ef56:	460d      	mov	r5, r1
    ef58:	7880      	ldrb	r0, [r0, #2]
    ef5a:	f000 f87f 	bl	f05c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ef5e:	fb10 f005 	smulbb	r0, r0, r5
    ef62:	4360      	muls	r0, r4
    ef64:	28ff      	cmp	r0, #255	; 0xff
    ef66:	d303      	bcc.n	ef70 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ef68:	215c      	movs	r1, #92	; 0x5c
    ef6a:	202e      	movs	r0, #46	; 0x2e
    ef6c:	f7f2 f8ea 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef70:	bd70      	pop	{r4, r5, r6, pc}

0000ef72 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ef72:	b510      	push	{r4, lr}
    ef74:	4604      	mov	r4, r0
    ef76:	7880      	ldrb	r0, [r0, #2]
    ef78:	f000 f870 	bl	f05c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ef7c:	7861      	ldrb	r1, [r4, #1]
    ef7e:	7822      	ldrb	r2, [r4, #0]
    ef80:	fb11 f102 	smulbb	r1, r1, r2
    ef84:	4348      	muls	r0, r1
    ef86:	b2c0      	uxtb	r0, r0
    ef88:	bd10      	pop	{r4, pc}

0000ef8a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ef8a:	b510      	push	{r4, lr}
    ef8c:	4604      	mov	r4, r0
    ef8e:	f000 f84d 	bl	f02c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ef92:	7961      	ldrb	r1, [r4, #5]
    ef94:	1c49      	adds	r1, r1, #1
    ef96:	b2c9      	uxtb	r1, r1
    ef98:	7161      	strb	r1, [r4, #5]
    ef9a:	7862      	ldrb	r2, [r4, #1]
    ef9c:	4291      	cmp	r1, r2
    ef9e:	d10b      	bne.n	efb8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    efa0:	2200      	movs	r2, #0
    efa2:	7162      	strb	r2, [r4, #5]
    efa4:	78e1      	ldrb	r1, [r4, #3]
    efa6:	4301      	orrs	r1, r0
    efa8:	70e1      	strb	r1, [r4, #3]
    efaa:	78a3      	ldrb	r3, [r4, #2]
    efac:	4299      	cmp	r1, r3
    efae:	d103      	bne.n	efb8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    efb0:	70e2      	strb	r2, [r4, #3]
    efb2:	7921      	ldrb	r1, [r4, #4]
    efb4:	1c49      	adds	r1, r1, #1
    efb6:	7121      	strb	r1, [r4, #4]
    efb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efbc:	f000 b825 	b.w	f00a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000efc0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    efc0:	7081      	strb	r1, [r0, #2]
    efc2:	4770      	bx	lr

0000efc4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    efc4:	b570      	push	{r4, r5, r6, lr}
    efc6:	4604      	mov	r4, r0
    efc8:	7880      	ldrb	r0, [r0, #2]
    efca:	f000 f847 	bl	f05c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    efce:	7861      	ldrb	r1, [r4, #1]
    efd0:	fb11 f500 	smulbb	r5, r1, r0
    efd4:	78e0      	ldrb	r0, [r4, #3]
    efd6:	f000 f841 	bl	f05c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    efda:	7861      	ldrb	r1, [r4, #1]
    efdc:	7962      	ldrb	r2, [r4, #5]
    efde:	fb10 2001 	smlabb	r0, r0, r1, r2
    efe2:	7821      	ldrb	r1, [r4, #0]
    efe4:	7922      	ldrb	r2, [r4, #4]
    efe6:	1a89      	subs	r1, r1, r2
    efe8:	fb11 f105 	smulbb	r1, r1, r5
    efec:	1a08      	subs	r0, r1, r0
    efee:	b2c0      	uxtb	r0, r0
    eff0:	bd70      	pop	{r4, r5, r6, pc}

0000eff2 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    eff2:	2100      	movs	r1, #0
    eff4:	6001      	str	r1, [r0, #0]
    eff6:	8081      	strh	r1, [r0, #4]
    eff8:	2101      	movs	r1, #1
    effa:	7041      	strb	r1, [r0, #1]
    effc:	7001      	strb	r1, [r0, #0]
    effe:	4770      	bx	lr

0000f000 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f000:	2100      	movs	r1, #0
    f002:	70c1      	strb	r1, [r0, #3]
    f004:	7141      	strb	r1, [r0, #5]
    f006:	7101      	strb	r1, [r0, #4]
    f008:	4770      	bx	lr
    f00a:	b510      	push	{r4, lr}
    f00c:	2801      	cmp	r0, #1
    f00e:	d007      	beq.n	f020 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f010:	2802      	cmp	r0, #2
    f012:	d007      	beq.n	f024 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f014:	2804      	cmp	r0, #4
    f016:	d007      	beq.n	f028 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f018:	2139      	movs	r1, #57	; 0x39
    f01a:	202e      	movs	r0, #46	; 0x2e
    f01c:	f7f2 f892 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f020:	2025      	movs	r0, #37	; 0x25
    f022:	bd10      	pop	{r4, pc}
    f024:	2026      	movs	r0, #38	; 0x26
    f026:	bd10      	pop	{r4, pc}
    f028:	2027      	movs	r0, #39	; 0x27
    f02a:	bd10      	pop	{r4, pc}
    f02c:	4601      	mov	r1, r0
    f02e:	2000      	movs	r0, #0
    f030:	788a      	ldrb	r2, [r1, #2]
    f032:	07d3      	lsls	r3, r2, #31
    f034:	d002      	beq.n	f03c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f036:	78cb      	ldrb	r3, [r1, #3]
    f038:	07db      	lsls	r3, r3, #31
    f03a:	d006      	beq.n	f04a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f03c:	0793      	lsls	r3, r2, #30
    f03e:	d506      	bpl.n	f04e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f040:	78cb      	ldrb	r3, [r1, #3]
    f042:	079b      	lsls	r3, r3, #30
    f044:	d403      	bmi.n	f04e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f046:	2002      	movs	r0, #2
    f048:	4770      	bx	lr
    f04a:	2001      	movs	r0, #1
    f04c:	4770      	bx	lr
    f04e:	0752      	lsls	r2, r2, #29
    f050:	d5fc      	bpl.n	f04c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f052:	78c9      	ldrb	r1, [r1, #3]
    f054:	0749      	lsls	r1, r1, #29
    f056:	d4f9      	bmi.n	f04c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f058:	2004      	movs	r0, #4
    f05a:	4770      	bx	lr
    f05c:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f060:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f064:	4411      	add	r1, r2
    f066:	f000 0001 	and.w	r0, r0, #1
    f06a:	4408      	add	r0, r1
    f06c:	4770      	bx	lr

0000f06e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f06e:	f240 315a 	movw	r1, #858	; 0x35a
    f072:	4348      	muls	r0, r1
    f074:	4770      	bx	lr

0000f076 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f076:	f240 20ef 	movw	r0, #751	; 0x2ef
    f07a:	4770      	bx	lr
    f07c:	041c020e 	.word	0x041c020e
    f080:	0c600630 	.word	0x0c600630
    f084:	06b4035a 	.word	0x06b4035a
    f088:	0bf505c5 	.word	0x0bf505c5
    f08c:	01a31225 	.word	0x01a31225
    f090:	05bf03b1 	.word	0x05bf03b1
    f094:	064902ef 	.word	0x064902ef
    f098:	09a3      	.short	0x09a3

0000f09a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f09a:	b510      	push	{r4, lr}
    f09c:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    f0a0:	b109      	cbz	r1, f0a6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f0a2:	2000      	movs	r0, #0
    f0a4:	bd10      	pop	{r4, pc}
    f0a6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    f0aa:	b131      	cbz	r1, f0ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f0ac:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    f0b0:	428a      	cmp	r2, r1
    f0b2:	d902      	bls.n	f0ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f0b4:	f7f4 fe4c 	bl	3d50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f0b8:	e7f3      	b.n	f0a2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f0ba:	2001      	movs	r0, #1
    f0bc:	bd10      	pop	{r4, pc}

0000f0be <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f0be:	b510      	push	{r4, lr}
    f0c0:	b131      	cbz	r1, f0d0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f0c2:	2901      	cmp	r1, #1
    f0c4:	d008      	beq.n	f0d8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f0c6:	f240 71d3 	movw	r1, #2003	; 0x7d3
    f0ca:	2030      	movs	r0, #48	; 0x30
    f0cc:	f7f2 f83a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0d4:	f000 b9c7 	b.w	f466 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    f0d8:	2100      	movs	r1, #0
    f0da:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    f0de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0e2:	f000 b923 	b.w	f32c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000f0e6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f0e6:	b510      	push	{r4, lr}
    f0e8:	4604      	mov	r4, r0
    f0ea:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    f0ee:	2800      	cmp	r0, #0
    f0f0:	d019      	beq.n	f126 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f0f2:	2001      	movs	r0, #1
    f0f4:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    f0f8:	4601      	mov	r1, r0
    f0fa:	4620      	mov	r0, r4
    f0fc:	f7ff fe82 	bl	ee04 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f100:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    f104:	b170      	cbz	r0, f124 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f106:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f10a:	f7fb fd01 	bl	ab10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f10e:	7820      	ldrb	r0, [r4, #0]
    f110:	f7fb fe76 	bl	ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f114:	f814 09c8 	ldrb.w	r0, [r4], #-200
    f118:	f7fb fe50 	bl	adbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f11c:	b120      	cbz	r0, f128 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f11e:	2000      	movs	r0, #0
    f120:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    f124:	2000      	movs	r0, #0
    f126:	bd10      	pop	{r4, pc}
    f128:	f240 210b 	movw	r1, #523	; 0x20b
    f12c:	2030      	movs	r0, #48	; 0x30
    f12e:	f7f2 f809 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f132 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f132:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    f136:	4770      	bx	lr

0000f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f138:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    f13c:	4770      	bx	lr

0000f13e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f13e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f140:	4604      	mov	r4, r0
    f142:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    f146:	2800      	cmp	r0, #0
    f148:	d15f      	bne.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f14a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f14e:	2803      	cmp	r0, #3
    f150:	d15b      	bne.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f152:	f001 fc12 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f156:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    f15a:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    f15e:	1ac0      	subs	r0, r0, r3
    f160:	eb61 0102 	sbc.w	r1, r1, r2
    f164:	2300      	movs	r3, #0
    f166:	461a      	mov	r2, r3
    f168:	1a1b      	subs	r3, r3, r0
    f16a:	418a      	sbcs	r2, r1
    f16c:	da4d      	bge.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f16e:	1c42      	adds	r2, r0, #1
    f170:	f171 0100 	sbcs.w	r1, r1, #0
    f174:	db02      	blt.n	f17c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f176:	f240 610b 	movw	r1, #1547	; 0x60b
    f17a:	e036      	b.n	f1ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f17c:	6921      	ldr	r1, [r4, #16]
    f17e:	b111      	cbz	r1, f186 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f180:	fbb0 f0f1 	udiv	r0, r0, r1
    f184:	e000      	b.n	f188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f186:	2000      	movs	r0, #0
    f188:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f18c:	1c40      	adds	r0, r0, #1
    f18e:	4408      	add	r0, r1
    f190:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f194:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f198:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    f19c:	1a08      	subs	r0, r1, r0
    f19e:	b200      	sxth	r0, r0
    f1a0:	2800      	cmp	r0, #0
    f1a2:	dd32      	ble.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f1a4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f1a8:	f7fb fcb2 	bl	ab10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f1ac:	2800      	cmp	r0, #0
    f1ae:	d02c      	beq.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f1b0:	20ff      	movs	r0, #255	; 0xff
    f1b2:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    f1b6:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    f1ba:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f1be:	ae01      	add	r6, sp, #4
    f1c0:	1a40      	subs	r0, r0, r1
    f1c2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f1c6:	1e40      	subs	r0, r0, #1
    f1c8:	4408      	add	r0, r1
    f1ca:	b285      	uxth	r5, r0
    f1cc:	e017      	b.n	f1fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f1ce:	9600      	str	r6, [sp, #0]
    f1d0:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    f1d4:	2300      	movs	r3, #0
    f1d6:	2201      	movs	r2, #1
    f1d8:	4620      	mov	r0, r4
    f1da:	f7f5 fe59 	bl	4e90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f1de:	2800      	cmp	r0, #0
    f1e0:	d013      	beq.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f1e2:	2801      	cmp	r0, #1
    f1e4:	d004      	beq.n	f1f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f1e6:	f240 6144 	movw	r1, #1604	; 0x644
    f1ea:	2030      	movs	r0, #48	; 0x30
    f1ec:	f7f1 ffaa 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1f0:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f1f4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f1f8:	4408      	add	r0, r1
    f1fa:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f1fe:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f202:	1a28      	subs	r0, r5, r0
    f204:	b200      	sxth	r0, r0
    f206:	2800      	cmp	r0, #0
    f208:	dae1      	bge.n	f1ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f20a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f20c:	2000      	movs	r0, #0
    f20e:	4770      	bx	lr
    f210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f214:	4604      	mov	r4, r0
    f216:	f000 f8ff 	bl	f418 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f21a:	2700      	movs	r7, #0
    f21c:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f220:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    f224:	2601      	movs	r6, #1
    f226:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    f22a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    f22c:	463d      	mov	r5, r7
    f22e:	b130      	cbz	r0, f23e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    f230:	f001 fba3 	bl	1097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f234:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f236:	fbb0 f2f1 	udiv	r2, r0, r1
    f23a:	fb01 0512 	mls	r5, r1, r2, r0
    f23e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f242:	2100      	movs	r1, #0
    f244:	4680      	mov	r8, r0
    f246:	f7fe fec5 	bl	dfd4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f24a:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    f24e:	1949      	adds	r1, r1, r5
    f250:	4178      	adcs	r0, r7
    f252:	e9c4 1000 	strd	r1, r0, [r4]
    f256:	8920      	ldrh	r0, [r4, #8]
    f258:	3cf8      	subs	r4, #248	; 0xf8
    f25a:	1c40      	adds	r0, r0, #1
    f25c:	280a      	cmp	r0, #10
    f25e:	d201      	bcs.n	f264 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    f260:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f264:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f268:	b138      	cbz	r0, f27a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f26a:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f26e:	1c40      	adds	r0, r0, #1
    f270:	280a      	cmp	r0, #10
    f272:	d302      	bcc.n	f27a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f274:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    f278:	e002      	b.n	f280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    f27a:	2002      	movs	r0, #2
    f27c:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f280:	4620      	mov	r0, r4
    f282:	f000 f823 	bl	f2cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f286:	b120      	cbz	r0, f292 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    f288:	4620      	mov	r0, r4
    f28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f28e:	f000 b80e 	b.w	f2ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f292:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f296:	4641      	mov	r1, r8
    f298:	f000 f8bc 	bl	f414 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f29c:	2800      	cmp	r0, #0
    f29e:	d104      	bne.n	f2aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    f2a0:	f240 61e7 	movw	r1, #1767	; 0x6e7
    f2a4:	2030      	movs	r0, #48	; 0x30
    f2a6:	f7f1 ff4d 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2ae:	b510      	push	{r4, lr}
    f2b0:	4604      	mov	r4, r0
    f2b2:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f2b6:	f7fb fd81 	bl	adbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f2ba:	2000      	movs	r0, #0
    f2bc:	7620      	strb	r0, [r4, #24]
    f2be:	bd10      	pop	{r4, pc}
    f2c0:	b510      	push	{r4, lr}
    f2c2:	f7ff fd4c 	bl	ed5e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f2c6:	f200 1015 	addw	r0, r0, #277	; 0x115
    f2ca:	bd10      	pop	{r4, pc}
    f2cc:	b570      	push	{r4, r5, r6, lr}
    f2ce:	4605      	mov	r5, r0
    f2d0:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f2d4:	b108      	cbz	r0, f2da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f2d6:	2001      	movs	r0, #1
    f2d8:	bd70      	pop	{r4, r5, r6, pc}
    f2da:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f2de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f2e2:	4050      	eors	r0, r2
    f2e4:	ea70 0101 	orns	r1, r0, r1
    f2e8:	d012      	beq.n	f310 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f2ea:	2400      	movs	r4, #0
    f2ec:	4621      	mov	r1, r4
    f2ee:	4628      	mov	r0, r5
    f2f0:	f7ff ffe6 	bl	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f2f4:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f2f8:	1840      	adds	r0, r0, r1
    f2fa:	4154      	adcs	r4, r2
    f2fc:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f300:	3df8      	subs	r5, #248	; 0xf8
    f302:	1a10      	subs	r0, r2, r0
    f304:	41a1      	sbcs	r1, r4
    f306:	d503      	bpl.n	f310 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f308:	4628      	mov	r0, r5
    f30a:	f7f4 fd21 	bl	3d50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f30e:	e7e2      	b.n	f2d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    f310:	2000      	movs	r0, #0
    f312:	bd70      	pop	{r4, r5, r6, pc}
    f314:	b510      	push	{r4, lr}
    f316:	4604      	mov	r4, r0
    f318:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f31c:	f000 f988 	bl	f630 <__kernel_ram_size+0x110>
    f320:	4601      	mov	r1, r0
    f322:	4620      	mov	r0, r4
    f324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f328:	f7ff b9c7 	b.w	e6ba <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    f32c:	b510      	push	{r4, lr}
    f32e:	f7f8 ff89 	bl	8244 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f336:	f7fb be9f 	b.w	b078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f33e:	4604      	mov	r4, r0
    f340:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f344:	2800      	cmp	r0, #0
    f346:	d051      	beq.n	f3ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f348:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f34c:	2803      	cmp	r0, #3
    f34e:	d14d      	bne.n	f3ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f350:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f354:	f001 fa2a 	bl	107ac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f358:	4605      	mov	r5, r0
    f35a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f35e:	f7f5 fc63 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f362:	4428      	add	r0, r5
    f364:	b286      	uxth	r6, r0
    f366:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f36a:	f7f5 fc5d 	bl	4c28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f36e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f372:	fa1f f880 	uxth.w	r8, r0
    f376:	4648      	mov	r0, r9
    f378:	f7f9 f822 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f37c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f380:	1a0d      	subs	r5, r1, r0
    f382:	4648      	mov	r0, r9
    f384:	f7f9 f848 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f388:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f38c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f390:	fbb0 f0fa 	udiv	r0, r0, sl
    f394:	1a2d      	subs	r5, r5, r0
    f396:	4648      	mov	r0, r9
    f398:	f7f9 f812 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f39c:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f3a0:	1a0f      	subs	r7, r1, r0
    f3a2:	4648      	mov	r0, r9
    f3a4:	f7f9 f838 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f3a8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f3ac:	4401      	add	r1, r0
    f3ae:	fbb1 f0fa 	udiv	r0, r1, sl
    f3b2:	1a39      	subs	r1, r7, r0
    f3b4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f3b8:	4370      	muls	r0, r6
    f3ba:	fbb0 f2f8 	udiv	r2, r0, r8
    f3be:	2029      	movs	r0, #41	; 0x29
    f3c0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f3c4:	3260      	adds	r2, #96	; 0x60
    f3c6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f3ca:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f3ce:	42a9      	cmp	r1, r5
    f3d0:	d801      	bhi.n	f3d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    f3d2:	4285      	cmp	r5, r0
    f3d4:	d901      	bls.n	f3da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    f3d6:	f7fd f849 	bl	c46c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f3da:	4631      	mov	r1, r6
    f3dc:	6920      	ldr	r0, [r4, #16]
    f3de:	f7fd f8ad 	bl	c53c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f3e2:	2100      	movs	r1, #0
    f3e4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f3e8:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f3f0:	b570      	push	{r4, r5, r6, lr}
    f3f2:	460c      	mov	r4, r1
    f3f4:	4605      	mov	r5, r0
    f3f6:	f7f9 f80f 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f3fa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f3fe:	4408      	add	r0, r1
    f400:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f404:	fbb0 f6f1 	udiv	r6, r0, r1
    f408:	4628      	mov	r0, r5
    f40a:	f7f8 ffd9 	bl	83c0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f40e:	4430      	add	r0, r6
    f410:	4420      	add	r0, r4
    f412:	bd70      	pop	{r4, r5, r6, pc}
    f414:	f7fa bf2c 	b.w	a270 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f418:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f41a:	4604      	mov	r4, r0
    f41c:	f7ff fcc6 	bl	edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f420:	b1f8      	cbz	r0, f462 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    f422:	4620      	mov	r0, r4
    f424:	f7ff fcba 	bl	ed9c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f428:	b918      	cbnz	r0, f432 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    f42a:	4620      	mov	r0, r4
    f42c:	f7ff fcc0 	bl	edb0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f430:	b140      	cbz	r0, f444 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    f432:	245a      	movs	r4, #90	; 0x5a
    f434:	4668      	mov	r0, sp
    f436:	f7fd fad7 	bl	c9e8 <mpsl_fem_pa_is_configured>
    f43a:	f89d 0000 	ldrb.w	r0, [sp]
    f43e:	b118      	cbz	r0, f448 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    f440:	2501      	movs	r5, #1
    f442:	e002      	b.n	f44a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f444:	2450      	movs	r4, #80	; 0x50
    f446:	e7f5      	b.n	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f448:	2500      	movs	r5, #0
    f44a:	a801      	add	r0, sp, #4
    f44c:	f7fd fab4 	bl	c9b8 <mpsl_fem_lna_is_configured>
    f450:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f454:	b100      	cbz	r0, f458 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    f456:	2001      	movs	r0, #1
    f458:	4305      	orrs	r5, r0
    f45a:	d000      	beq.n	f45e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f45c:	340a      	adds	r4, #10
    f45e:	4620      	mov	r0, r4
    f460:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f462:	2061      	movs	r0, #97	; 0x61
    f464:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f466:	b570      	push	{r4, r5, r6, lr}
    f468:	4604      	mov	r4, r0
    f46a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f46c:	2500      	movs	r5, #0
    f46e:	b130      	cbz	r0, f47e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    f470:	f7f4 f85c 	bl	352c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f474:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f476:	fbb0 f2f1 	udiv	r2, r0, r1
    f47a:	fb01 0512 	mls	r5, r1, r2, r0
    f47e:	4620      	mov	r0, r4
    f480:	f7ff fc69 	bl	ed56 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f484:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f488:	4428      	add	r0, r5
    f48a:	34e8      	adds	r4, #232	; 0xe8
    f48c:	2500      	movs	r5, #0
    f48e:	1882      	adds	r2, r0, r2
    f490:	eb45 0001 	adc.w	r0, r5, r1
    f494:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f498:	f804 5b0b 	strb.w	r5, [r4], #11
    f49c:	2001      	movs	r0, #1
    f49e:	f804 0901 	strb.w	r0, [r4], #-1
    f4a2:	2002      	movs	r0, #2
    f4a4:	f804 09f2 	strb.w	r0, [r4], #-242
    f4a8:	4620      	mov	r0, r4
    f4aa:	f7ff ffb5 	bl	f418 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f4ae:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f4b2:	4620      	mov	r0, r4
    f4b4:	f7ff ff0a 	bl	f2cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f4b8:	b930      	cbnz	r0, f4c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
    f4ba:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f4be:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f4c2:	f7ff ffa7 	bl	f414 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f4c6:	b128      	cbz	r0, f4d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
    f4c8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f4cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f4d0:	f7ff bf2c 	b.w	f32c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    f4d4:	f240 712d 	movw	r1, #1837	; 0x72d
    f4d8:	2030      	movs	r0, #48	; 0x30
    f4da:	f7f1 fe33 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4de:	b510      	push	{r4, lr}
    f4e0:	4604      	mov	r4, r0
    f4e2:	2000      	movs	r0, #0
    f4e4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f4e8:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f4ec:	f7fb fc66 	bl	adbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f4f0:	2020      	movs	r0, #32
    f4f2:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f4f6:	bd10      	pop	{r4, pc}
    f4f8:	b510      	push	{r4, lr}
    f4fa:	b140      	cbz	r0, f50e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
    f4fc:	2909      	cmp	r1, #9
    f4fe:	d22f      	bcs.n	f560 <__kernel_ram_size+0x40>
    f500:	e8df f001 	tbb	[pc, r1]
    f504:	1e1e1607 	.word	0x1e1e1607
    f508:	26222e1a 	.word	0x26222e1a
    f50c:	002a      	.short	0x002a
    f50e:	21cd      	movs	r1, #205	; 0xcd
    f510:	e023      	b.n	f55a <__kernel_ram_size+0x3a>
    f512:	4604      	mov	r4, r0
    f514:	f7f4 fbec 	bl	3cf0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f518:	b110      	cbz	r0, f520 <__kernel_ram_size>
    f51a:	f240 2187 	movw	r1, #647	; 0x287
    f51e:	e01c      	b.n	f55a <__kernel_ram_size+0x3a>
    f520:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f528:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    f52c:	f7fb be80 	b.w	b230 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f534:	f000 b8b1 	b.w	f69a <__kernel_ram_size+0x17a>
    f538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f53c:	f7f9 b856 	b.w	85ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f544:	f7ff be64 	b.w	f210 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f54c:	f7ff bc01 	b.w	ed52 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f554:	f7ff beab 	b.w	f2ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f558:	21ed      	movs	r1, #237	; 0xed
    f55a:	2030      	movs	r0, #48	; 0x30
    f55c:	f7f1 fdf2 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f560:	21f1      	movs	r1, #241	; 0xf1
    f562:	e7fa      	b.n	f55a <__kernel_ram_size+0x3a>
    f564:	b510      	push	{r4, lr}
    f566:	0004      	movs	r4, r0
    f568:	d009      	beq.n	f57e <__kernel_ram_size+0x5e>
    f56a:	2200      	movs	r2, #0
    f56c:	2909      	cmp	r1, #9
    f56e:	d25d      	bcs.n	f62c <__kernel_ram_size+0x10c>
    f570:	e8df f001 	tbb	[pc, r1]
    f574:	43433b07 	.word	0x43433b07
    f578:	4f485c3f 	.word	0x4f485c3f
    f57c:	0058      	.short	0x0058
    f57e:	2196      	movs	r1, #150	; 0x96
    f580:	e051      	b.n	f626 <__kernel_ram_size+0x106>
    f582:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    f586:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f58a:	4620      	mov	r0, r4
    f58c:	b189      	cbz	r1, f5b2 <__kernel_ram_size+0x92>
    f58e:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f592:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f596:	428a      	cmp	r2, r1
    f598:	d106      	bne.n	f5a8 <__kernel_ram_size+0x88>
    f59a:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f59e:	1a51      	subs	r1, r2, r1
    f5a0:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f5a4:	4611      	mov	r1, r2
    f5a6:	e00d      	b.n	f5c4 <__kernel_ram_size+0xa4>
    f5a8:	1a51      	subs	r1, r2, r1
    f5aa:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f5ae:	b291      	uxth	r1, r2
    f5b0:	e008      	b.n	f5c4 <__kernel_ram_size+0xa4>
    f5b2:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f5b6:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f5ba:	1a89      	subs	r1, r1, r2
    f5bc:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f5c0:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f5c4:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f5c8:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f5cc:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f5d0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f5d4:	f7f5 fff6 	bl	55c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f5d8:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    f5dc:	2800      	cmp	r0, #0
    f5de:	d020      	beq.n	f622 <__kernel_ram_size+0x102>
    f5e0:	4620      	mov	r0, r4
    f5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5e6:	f7f5 bbd7 	b.w	4d98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5ee:	f000 b8a0 	b.w	f732 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5f6:	f7f8 bff9 	b.w	85ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f5fa:	4620      	mov	r0, r4
    f5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f600:	f7f5 be50 	b.w	52a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    f604:	2001      	movs	r0, #1
    f606:	f7fa fbf3 	bl	9df0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f60e:	f7fe bba1 	b.w	dd54 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f612:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f616:	2804      	cmp	r0, #4
    f618:	d001      	beq.n	f61e <__kernel_ram_size+0xfe>
    f61a:	21bb      	movs	r1, #187	; 0xbb
    f61c:	e003      	b.n	f626 <__kernel_ram_size+0x106>
    f61e:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    f622:	bd10      	pop	{r4, pc}
    f624:	21c1      	movs	r1, #193	; 0xc1
    f626:	2030      	movs	r0, #48	; 0x30
    f628:	f7f1 fd8c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f62c:	21c5      	movs	r1, #197	; 0xc5
    f62e:	e7fa      	b.n	f626 <__kernel_ram_size+0x106>
    f630:	b510      	push	{r4, lr}
    f632:	f7f8 fef1 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f636:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f63a:	4408      	add	r0, r1
    f63c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f640:	fbb0 f0f1 	udiv	r0, r0, r1
    f644:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    f648:	bd10      	pop	{r4, pc}
    f64a:	b538      	push	{r3, r4, r5, lr}
    f64c:	2500      	movs	r5, #0
    f64e:	4604      	mov	r4, r0
    f650:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    f654:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    f658:	462b      	mov	r3, r5
    f65a:	462a      	mov	r2, r5
    f65c:	4629      	mov	r1, r5
    f65e:	9500      	str	r5, [sp, #0]
    f660:	f7f5 fc16 	bl	4e90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f664:	b120      	cbz	r0, f670 <__kernel_ram_size+0x150>
    f666:	f240 211f 	movw	r1, #543	; 0x21f
    f66a:	2030      	movs	r0, #48	; 0x30
    f66c:	f7f1 fd6a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f670:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f674:	2001      	movs	r0, #1
    f676:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f67a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f67e:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f682:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f686:	3494      	adds	r4, #148	; 0x94
    f688:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f68c:	8820      	ldrh	r0, [r4, #0]
    f68e:	1e40      	subs	r0, r0, #1
    f690:	8020      	strh	r0, [r4, #0]
    f692:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f696:	2000      	movs	r0, #0
    f698:	bd38      	pop	{r3, r4, r5, pc}
    f69a:	b570      	push	{r4, r5, r6, lr}
    f69c:	4605      	mov	r5, r0
    f69e:	f7ff fb81 	bl	eda4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f6a2:	b9c8      	cbnz	r0, f6d8 <__kernel_ram_size+0x1b8>
    f6a4:	2100      	movs	r1, #0
    f6a6:	4628      	mov	r0, r5
    f6a8:	f7ff fe0a 	bl	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f6ac:	4604      	mov	r4, r0
    f6ae:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f6b2:	42a0      	cmp	r0, r4
    f6b4:	d20e      	bcs.n	f6d4 <__kernel_ram_size+0x1b4>
    f6b6:	1a20      	subs	r0, r4, r0
    f6b8:	2867      	cmp	r0, #103	; 0x67
    f6ba:	d200      	bcs.n	f6be <__kernel_ram_size+0x19e>
    f6bc:	2067      	movs	r0, #103	; 0x67
    f6be:	2103      	movs	r1, #3
    f6c0:	f7fa fba6 	bl	9e10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f6c4:	b130      	cbz	r0, f6d4 <__kernel_ram_size+0x1b4>
    f6c6:	4628      	mov	r0, r5
    f6c8:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6d0:	f7ff bb3f 	b.w	ed52 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f6d4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f6d8:	4628      	mov	r0, r5
    f6da:	f7f4 fb25 	bl	3d28 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f6de:	2800      	cmp	r0, #0
    f6e0:	d004      	beq.n	f6ec <__kernel_ram_size+0x1cc>
    f6e2:	f240 21bd 	movw	r1, #701	; 0x2bd
    f6e6:	2030      	movs	r0, #48	; 0x30
    f6e8:	f7f1 fd2c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ec:	bd70      	pop	{r4, r5, r6, pc}
    f6ee:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f6f2:	f001 0307 	and.w	r3, r1, #7
    f6f6:	7802      	ldrb	r2, [r0, #0]
    f6f8:	2101      	movs	r1, #1
    f6fa:	4099      	lsls	r1, r3
    f6fc:	438a      	bics	r2, r1
    f6fe:	7002      	strb	r2, [r0, #0]
    f700:	4770      	bx	lr

0000f702 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f702:	b510      	push	{r4, lr}
    f704:	460c      	mov	r4, r1
    f706:	f7f2 f96d 	bl	19e4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f70a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f70e:	2820      	cmp	r0, #32
    f710:	d00c      	beq.n	f72c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f712:	f7fb fb75 	bl	ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f716:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f71a:	f7fb fb4f 	bl	adbc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f71e:	2800      	cmp	r0, #0
    f720:	d104      	bne.n	f72c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f722:	f640 4129 	movw	r1, #3113	; 0xc29
    f726:	2031      	movs	r0, #49	; 0x31
    f728:	f7f1 fd0c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f72c:	bd10      	pop	{r4, pc}

0000f72e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f72e:	2000      	movs	r0, #0
    f730:	4770      	bx	lr

0000f732 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f732:	f7f2 bdeb 	b.w	230c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000f736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f736:	2100      	movs	r1, #0
    f738:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f73c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f740:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f744:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f748:	b109      	cbz	r1, f74e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f74a:	2102      	movs	r1, #2
    f74c:	e000      	b.n	f750 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f74e:	2103      	movs	r1, #3
    f750:	f7f5 b9e0 	b.w	4b14 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f754:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f758:	28fe      	cmp	r0, #254	; 0xfe
    f75a:	d001      	beq.n	f760 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f75c:	2001      	movs	r0, #1
    f75e:	4770      	bx	lr
    f760:	2000      	movs	r0, #0
    f762:	4770      	bx	lr
    f764:	b510      	push	{r4, lr}
    f766:	2801      	cmp	r0, #1
    f768:	d006      	beq.n	f778 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f76a:	2802      	cmp	r0, #2
    f76c:	d004      	beq.n	f778 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f76e:	f240 21d7 	movw	r1, #727	; 0x2d7
    f772:	2006      	movs	r0, #6
    f774:	f7f1 fce6 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f778:	bd10      	pop	{r4, pc}
    f77a:	2801      	cmp	r0, #1
    f77c:	d002      	beq.n	f784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f77e:	2802      	cmp	r0, #2
    f780:	d105      	bne.n	f78e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f782:	e002      	b.n	f78a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f784:	2901      	cmp	r1, #1
    f786:	d004      	beq.n	f792 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f788:	e001      	b.n	f78e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f78a:	2902      	cmp	r1, #2
    f78c:	d001      	beq.n	f792 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f78e:	2000      	movs	r0, #0
    f790:	4770      	bx	lr
    f792:	2001      	movs	r0, #1
    f794:	4770      	bx	lr
    f796:	1a40      	subs	r0, r0, r1
    f798:	b200      	sxth	r0, r0
    f79a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f79e:	4288      	cmp	r0, r1
    f7a0:	dc01      	bgt.n	f7a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f7a2:	2800      	cmp	r0, #0
    f7a4:	dc01      	bgt.n	f7aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f7a6:	2001      	movs	r0, #1
    f7a8:	4770      	bx	lr
    f7aa:	2000      	movs	r0, #0
    f7ac:	4770      	bx	lr
    f7ae:	6840      	ldr	r0, [r0, #4]
    f7b0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f7b4:	2912      	cmp	r1, #18
    f7b6:	d001      	beq.n	f7bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f7b8:	2002      	movs	r0, #2
    f7ba:	4770      	bx	lr
    f7bc:	2113      	movs	r1, #19
    f7be:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7c2:	2000      	movs	r0, #0
    f7c4:	4770      	bx	lr
    f7c6:	b510      	push	{r4, lr}
    f7c8:	6843      	ldr	r3, [r0, #4]
    f7ca:	4604      	mov	r4, r0
    f7cc:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f7d0:	2808      	cmp	r0, #8
    f7d2:	d20d      	bcs.n	f7f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f7d4:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f7d8:	f1c0 0008 	rsb	r0, r0, #8
    f7dc:	b2c1      	uxtb	r1, r0
    f7de:	1898      	adds	r0, r3, r2
    f7e0:	f7f1 fd52 	bl	1288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f7e4:	6861      	ldr	r1, [r4, #4]
    f7e6:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f7ea:	4410      	add	r0, r2
    f7ec:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f7f0:	6862      	ldr	r2, [r4, #4]
    f7f2:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f7f6:	3908      	subs	r1, #8
    f7f8:	2904      	cmp	r1, #4
    f7fa:	d20d      	bcs.n	f818 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f7fc:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f800:	f1c1 0104 	rsb	r1, r1, #4
    f804:	b2c9      	uxtb	r1, r1
    f806:	4410      	add	r0, r2
    f808:	f7f1 fd3e 	bl	1288 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f80c:	6861      	ldr	r1, [r4, #4]
    f80e:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f812:	4410      	add	r0, r2
    f814:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f818:	6860      	ldr	r0, [r4, #4]
    f81a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f81e:	290c      	cmp	r1, #12
    f820:	d30f      	bcc.n	f842 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f822:	d005      	beq.n	f830 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f824:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f828:	f04f 0031 	mov.w	r0, #49	; 0x31
    f82c:	f7f1 fc8a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f830:	2100      	movs	r1, #0
    f832:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f836:	2101      	movs	r1, #1
    f838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f83c:	2004      	movs	r0, #4
    f83e:	f7f6 bd4d 	b.w	62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f842:	bd10      	pop	{r4, pc}
    f844:	6842      	ldr	r2, [r0, #4]
    f846:	2131      	movs	r1, #49	; 0x31
    f848:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f84c:	6840      	ldr	r0, [r0, #4]
    f84e:	2100      	movs	r1, #0
    f850:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f854:	4770      	bx	lr
    f856:	b510      	push	{r4, lr}
    f858:	6841      	ldr	r1, [r0, #4]
    f85a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f85e:	2a15      	cmp	r2, #21
    f860:	d004      	beq.n	f86c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f862:	f240 7183 	movw	r1, #1923	; 0x783
    f866:	2031      	movs	r0, #49	; 0x31
    f868:	f7f1 fc6c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f86c:	2201      	movs	r2, #1
    f86e:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f872:	6840      	ldr	r0, [r0, #4]
    f874:	2116      	movs	r1, #22
    f876:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f87a:	bd10      	pop	{r4, pc}
    f87c:	f7ff b8e1 	b.w	ea42 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f880:	b510      	push	{r4, lr}
    f882:	6841      	ldr	r1, [r0, #4]
    f884:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f888:	2a11      	cmp	r2, #17
    f88a:	d004      	beq.n	f896 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f88c:	f240 717b 	movw	r1, #1915	; 0x77b
    f890:	2031      	movs	r0, #49	; 0x31
    f892:	f7f1 fc57 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f896:	2201      	movs	r2, #1
    f898:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f89c:	6840      	ldr	r0, [r0, #4]
    f89e:	2112      	movs	r1, #18
    f8a0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f8a4:	bd10      	pop	{r4, pc}
    f8a6:	b510      	push	{r4, lr}
    f8a8:	6841      	ldr	r1, [r0, #4]
    f8aa:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f8ae:	2822      	cmp	r0, #34	; 0x22
    f8b0:	d005      	beq.n	f8be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f8b2:	b120      	cbz	r0, f8be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f8b4:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f8b8:	2031      	movs	r0, #49	; 0x31
    f8ba:	f7f1 fc43 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8be:	2023      	movs	r0, #35	; 0x23
    f8c0:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f8c4:	bd10      	pop	{r4, pc}
    f8c6:	b510      	push	{r4, lr}
    f8c8:	6840      	ldr	r0, [r0, #4]
    f8ca:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f8ce:	2916      	cmp	r1, #22
    f8d0:	d004      	beq.n	f8dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f8d2:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f8d6:	2031      	movs	r0, #49	; 0x31
    f8d8:	f7f1 fc34 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8dc:	211a      	movs	r1, #26
    f8de:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f8e2:	bd10      	pop	{r4, pc}
    f8e4:	f7ff b89b 	b.w	ea1e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f8e8:	b510      	push	{r4, lr}
    f8ea:	6840      	ldr	r0, [r0, #4]
    f8ec:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f8f0:	2916      	cmp	r1, #22
    f8f2:	d004      	beq.n	f8fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f8f4:	f240 718a 	movw	r1, #1930	; 0x78a
    f8f8:	2031      	movs	r0, #49	; 0x31
    f8fa:	f7f1 fc23 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8fe:	2118      	movs	r1, #24
    f900:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f904:	bd10      	pop	{r4, pc}
    f906:	f7ff b921 	b.w	eb4c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f90a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f90e:	f001 0107 	and.w	r1, r1, #7
    f912:	7800      	ldrb	r0, [r0, #0]
    f914:	40c8      	lsrs	r0, r1
    f916:	f000 0001 	and.w	r0, r0, #1
    f91a:	4770      	bx	lr

0000f91c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f91c:	b510      	push	{r4, lr}
    f91e:	2801      	cmp	r0, #1
    f920:	d006      	beq.n	f930 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f922:	2802      	cmp	r0, #2
    f924:	d006      	beq.n	f934 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f926:	f240 2175 	movw	r1, #629	; 0x275
    f92a:	2078      	movs	r0, #120	; 0x78
    f92c:	f7f1 fc0a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f930:	2000      	movs	r0, #0
    f932:	bd10      	pop	{r4, pc}
    f934:	2001      	movs	r0, #1
    f936:	bd10      	pop	{r4, pc}

0000f938 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f938:	207f      	movs	r0, #127	; 0x7f
    f93a:	f000 b88c 	b.w	fa56 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f93e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f93e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f942:	f000 b888 	b.w	fa56 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f946 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f946:	b510      	push	{r4, lr}
    f948:	4604      	mov	r4, r0
    f94a:	f7f8 f845 	bl	79d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f94e:	1e64      	subs	r4, r4, #1
    f950:	b2e2      	uxtb	r2, r4
    f952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f956:	f000 b85b 	b.w	fa10 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f95a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f95a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f95e:	4607      	mov	r7, r0
    f960:	461e      	mov	r6, r3
    f962:	4690      	mov	r8, r2
    f964:	460c      	mov	r4, r1
    f966:	4608      	mov	r0, r1
    f968:	f7ff ffed 	bl	f946 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f96c:	b1e8      	cbz	r0, f9aa <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f96e:	687d      	ldr	r5, [r7, #4]
    f970:	2121      	movs	r1, #33	; 0x21
    f972:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f976:	3580      	adds	r5, #128	; 0x80
    f978:	f7ff ffc7 	bl	f90a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f97c:	b1b8      	cbz	r0, f9ae <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f97e:	1e64      	subs	r4, r4, #1
    f980:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f982:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f984:	b2e2      	uxtb	r2, r4
    f986:	f000 f843 	bl	fa10 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f98a:	b180      	cbz	r0, f9ae <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f98c:	6878      	ldr	r0, [r7, #4]
    f98e:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f992:	f88d 1000 	strb.w	r1, [sp]
    f996:	9900      	ldr	r1, [sp, #0]
    f998:	9100      	str	r1, [sp, #0]
    f99a:	f89d 1000 	ldrb.w	r1, [sp]
    f99e:	f200 1047 	addw	r0, r0, #327	; 0x147
    f9a2:	b131      	cbz	r1, f9b2 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f9a4:	203a      	movs	r0, #58	; 0x3a
    f9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f9aa:	2011      	movs	r0, #17
    f9ac:	e7fb      	b.n	f9a6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f9ae:	201a      	movs	r0, #26
    f9b0:	e7f9      	b.n	f9a6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f9b2:	1c81      	adds	r1, r0, #2
    f9b4:	700e      	strb	r6, [r1, #0]
    f9b6:	2101      	movs	r1, #1
    f9b8:	40a1      	lsls	r1, r4
    f9ba:	7001      	strb	r1, [r0, #0]
    f9bc:	f880 8001 	strb.w	r8, [r0, #1]
    f9c0:	2000      	movs	r0, #0
    f9c2:	e7f0      	b.n	f9a6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f9c4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9c8:	460d      	mov	r5, r1
    f9ca:	4606      	mov	r6, r0
    f9cc:	f7ff ffb4 	bl	f938 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f9d0:	4607      	mov	r7, r0
    f9d2:	f7ff ffb4 	bl	f93e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f9d6:	2400      	movs	r4, #0
    f9d8:	4285      	cmp	r5, r0
    f9da:	d100      	bne.n	f9de <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f9dc:	2401      	movs	r4, #1
    f9de:	42bd      	cmp	r5, r7
    f9e0:	d101      	bne.n	f9e6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f9e2:	f044 0402 	orr.w	r4, r4, #2
    f9e6:	f000 f826 	bl	fa36 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f9ea:	2200      	movs	r2, #0
    f9ec:	4601      	mov	r1, r0
    f9ee:	2301      	movs	r3, #1
    f9f0:	fa03 f002 	lsl.w	r0, r3, r2
    f9f4:	4208      	tst	r0, r1
    f9f6:	d005      	beq.n	fa04 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f9f8:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f9fc:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    fa00:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    fa04:	1c52      	adds	r2, r2, #1
    fa06:	b2d2      	uxtb	r2, r2
    fa08:	2a02      	cmp	r2, #2
    fa0a:	d3f1      	bcc.n	f9f0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    fa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa10:	b510      	push	{r4, lr}
    fa12:	4614      	mov	r4, r2
    fa14:	4602      	mov	r2, r0
    fa16:	2000      	movs	r0, #0
    fa18:	4603      	mov	r3, r0
    fa1a:	2c02      	cmp	r4, #2
    fa1c:	d205      	bcs.n	fa2a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    fa1e:	4610      	mov	r0, r2
    fa20:	f000 f810 	bl	fa44 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    fa24:	2101      	movs	r1, #1
    fa26:	40a1      	lsls	r1, r4
    fa28:	b2cb      	uxtb	r3, r1
    fa2a:	4203      	tst	r3, r0
    fa2c:	d001      	beq.n	fa32 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    fa2e:	2001      	movs	r0, #1
    fa30:	bd10      	pop	{r4, pc}
    fa32:	2000      	movs	r0, #0
    fa34:	bd10      	pop	{r4, pc}
    fa36:	b510      	push	{r4, lr}
    fa38:	f7f7 ffce 	bl	79d8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa40:	f000 b800 	b.w	fa44 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    fa44:	0a00      	lsrs	r0, r0, #8
    fa46:	2201      	movs	r2, #1
    fa48:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    fa4c:	07c0      	lsls	r0, r0, #31
    fa4e:	d000      	beq.n	fa52 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    fa50:	2203      	movs	r2, #3
    fa52:	4610      	mov	r0, r2
    fa54:	4770      	bx	lr
    fa56:	b508      	push	{r3, lr}
    fa58:	2301      	movs	r3, #1
    fa5a:	f640 1288 	movw	r2, #2440	; 0x988
    fa5e:	4669      	mov	r1, sp
    fa60:	f7fc ffc8 	bl	c9f4 <mpsl_fem_tx_power_split>
    fa64:	bd08      	pop	{r3, pc}
    fa66:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fa6a:	f001 0107 	and.w	r1, r1, #7
    fa6e:	7800      	ldrb	r0, [r0, #0]
    fa70:	40c8      	lsrs	r0, r1
    fa72:	f000 0001 	and.w	r0, r0, #1
    fa76:	4770      	bx	lr
    fa78:	b118      	cbz	r0, fa82 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    fa7a:	2802      	cmp	r0, #2
    fa7c:	d001      	beq.n	fa82 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    fa7e:	2001      	movs	r0, #1
    fa80:	4770      	bx	lr
    fa82:	2000      	movs	r0, #0
    fa84:	4770      	bx	lr

0000fa86 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fa86:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fa88:	7881      	ldrb	r1, [r0, #2]
    fa8a:	2500      	movs	r5, #0
    fa8c:	4604      	mov	r4, r0
    fa8e:	291a      	cmp	r1, #26
    fa90:	d024      	beq.n	fadc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fa92:	dc0e      	bgt.n	fab2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fa94:	2916      	cmp	r1, #22
    fa96:	d22b      	bcs.n	faf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa98:	e8df f001 	tbb	[pc, r1]
    fa9c:	2a2a2a2a 	.word	0x2a2a2a2a
    faa0:	2a2a202a 	.word	0x2a2a202a
    faa4:	2a2a2a2a 	.word	0x2a2a2a2a
    faa8:	2a2a2a2a 	.word	0x2a2a2a2a
    faac:	202a2a2a 	.word	0x202a2a2a
    fab0:	2020      	.short	0x2020
    fab2:	292a      	cmp	r1, #42	; 0x2a
    fab4:	d01c      	beq.n	faf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fab6:	dc0b      	bgt.n	fad0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fab8:	f1a1 011e 	sub.w	r1, r1, #30
    fabc:	290c      	cmp	r1, #12
    fabe:	d217      	bcs.n	faf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fac0:	e8df f001 	tbb	[pc, r1]
    fac4:	16161616 	.word	0x16161616
    fac8:	16161616 	.word	0x16161616
    facc:	0c161616 	.word	0x0c161616
    fad0:	393a      	subs	r1, #58	; 0x3a
    fad2:	2902      	cmp	r1, #2
    fad4:	d20c      	bcs.n	faf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fad6:	e8df f001 	tbb	[pc, r1]
    fada:	010b      	.short	0x010b
    fadc:	8820      	ldrh	r0, [r4, #0]
    fade:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fae2:	d205      	bcs.n	faf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fae4:	4669      	mov	r1, sp
    fae6:	f7fe f990 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    faea:	b118      	cbz	r0, faf4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    faec:	2002      	movs	r0, #2
    faee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faf0:	2012      	movs	r0, #18
    faf2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faf4:	9901      	ldr	r1, [sp, #4]
    faf6:	4668      	mov	r0, sp
    faf8:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    fafc:	f88d 2008 	strb.w	r2, [sp, #8]
    fb00:	9a02      	ldr	r2, [sp, #8]
    fb02:	9202      	str	r2, [sp, #8]
    fb04:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fb08:	f501 7198 	add.w	r1, r1, #304	; 0x130
    fb0c:	b10a      	cbz	r2, fb12 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fb0e:	200c      	movs	r0, #12
    fb10:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb12:	78a2      	ldrb	r2, [r4, #2]
    fb14:	704a      	strb	r2, [r1, #1]
    fb16:	22ff      	movs	r2, #255	; 0xff
    fb18:	700a      	strb	r2, [r1, #0]
    fb1a:	f7fe fd09 	bl	e530 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fb1e:	4628      	mov	r0, r5
    fb20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fb22 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fb22:	b510      	push	{r4, lr}
    fb24:	4604      	mov	r4, r0
    fb26:	f7f7 fe81 	bl	782c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fb2a:	b108      	cbz	r0, fb30 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fb2c:	200c      	movs	r0, #12
    fb2e:	bd10      	pop	{r4, pc}
    fb30:	7820      	ldrb	r0, [r4, #0]
    fb32:	b118      	cbz	r0, fb3c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb34:	2801      	cmp	r0, #1
    fb36:	d001      	beq.n	fb3c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb38:	2012      	movs	r0, #18
    fb3a:	bd10      	pop	{r4, pc}
    fb3c:	f7ff ff9c 	bl	fa78 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fb40:	1c61      	adds	r1, r4, #1
    fb42:	f7f3 fefd 	bl	3940 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    fb46:	b108      	cbz	r0, fb4c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fb48:	2000      	movs	r0, #0
    fb4a:	bd10      	pop	{r4, pc}
    fb4c:	2007      	movs	r0, #7
    fb4e:	bd10      	pop	{r4, pc}

0000fb50 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fb50:	b510      	push	{r4, lr}
    fb52:	f7f7 fe6b 	bl	782c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fb56:	b108      	cbz	r0, fb5c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fb58:	200c      	movs	r0, #12
    fb5a:	bd10      	pop	{r4, pc}
    fb5c:	f7f3 ff4e 	bl	39fc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fb60:	2000      	movs	r0, #0
    fb62:	f7f3 f823 	bl	2bac <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fb66:	2000      	movs	r0, #0
    fb68:	bd10      	pop	{r4, pc}

0000fb6a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fb6a:	b510      	push	{r4, lr}
    fb6c:	460b      	mov	r3, r1
    fb6e:	2201      	movs	r2, #1
    fb70:	f100 0110 	add.w	r1, r0, #16
    fb74:	f7fe f92b 	bl	ddce <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb78:	2000      	movs	r0, #0
    fb7a:	bd10      	pop	{r4, pc}

0000fb7c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fb7c:	b510      	push	{r4, lr}
    fb7e:	8800      	ldrh	r0, [r0, #0]
    fb80:	2100      	movs	r1, #0
    fb82:	f7f1 fe0d 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb86:	b118      	cbz	r0, fb90 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fb88:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fb8c:	b111      	cbz	r1, fb94 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fb8e:	e007      	b.n	fba0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fb90:	2002      	movs	r0, #2
    fb92:	bd10      	pop	{r4, pc}
    fb94:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fb98:	2915      	cmp	r1, #21
    fb9a:	d003      	beq.n	fba4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb9c:	2916      	cmp	r1, #22
    fb9e:	d001      	beq.n	fba4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fba0:	200c      	movs	r0, #12
    fba2:	bd10      	pop	{r4, pc}
    fba4:	2102      	movs	r1, #2
    fba6:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fbaa:	2000      	movs	r0, #0
    fbac:	bd10      	pop	{r4, pc}

0000fbae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fbae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbb0:	4605      	mov	r5, r0
    fbb2:	8800      	ldrh	r0, [r0, #0]
    fbb4:	2100      	movs	r1, #0
    fbb6:	f7f1 fdf3 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fbba:	0004      	movs	r4, r0
    fbbc:	d003      	beq.n	fbc6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fbbe:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fbc2:	b110      	cbz	r0, fbca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fbc4:	e011      	b.n	fbea <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fbc6:	2002      	movs	r0, #2
    fbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbca:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fbce:	2815      	cmp	r0, #21
    fbd0:	d001      	beq.n	fbd6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fbd2:	2816      	cmp	r0, #22
    fbd4:	d109      	bne.n	fbea <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fbd6:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fbda:	f88d 0000 	strb.w	r0, [sp]
    fbde:	9800      	ldr	r0, [sp, #0]
    fbe0:	9000      	str	r0, [sp, #0]
    fbe2:	f89d 0000 	ldrb.w	r0, [sp]
    fbe6:	2601      	movs	r6, #1
    fbe8:	b108      	cbz	r0, fbee <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fbea:	200c      	movs	r0, #12
    fbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbee:	2210      	movs	r2, #16
    fbf0:	1ca9      	adds	r1, r5, #2
    fbf2:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fbf6:	f001 f852 	bl	10c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fbfa:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fbfe:	2000      	movs	r0, #0
    fc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fc02 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fc02:	b510      	push	{r4, lr}
    fc04:	2108      	movs	r1, #8
    fc06:	f7f1 fb4d 	bl	12a4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fc0a:	2000      	movs	r0, #0
    fc0c:	bd10      	pop	{r4, pc}

0000fc0e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fc0e:	b510      	push	{r4, lr}
    fc10:	4604      	mov	r4, r0
    fc12:	f7f7 fce9 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc16:	f7ff f8cf 	bl	edb8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fc1a:	f7f3 f8c9 	bl	2db0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc1e:	7020      	strb	r0, [r4, #0]
    fc20:	2000      	movs	r0, #0
    fc22:	bd10      	pop	{r4, pc}

0000fc24 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fc24:	21fb      	movs	r1, #251	; 0xfb
    fc26:	8001      	strh	r1, [r0, #0]
    fc28:	f640 0248 	movw	r2, #2120	; 0x848
    fc2c:	8042      	strh	r2, [r0, #2]
    fc2e:	8081      	strh	r1, [r0, #4]
    fc30:	80c2      	strh	r2, [r0, #6]
    fc32:	2000      	movs	r0, #0
    fc34:	4770      	bx	lr

0000fc36 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fc36:	b51c      	push	{r2, r3, r4, lr}
    fc38:	8800      	ldrh	r0, [r0, #0]
    fc3a:	4669      	mov	r1, sp
    fc3c:	f7fe f8e5 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc40:	2800      	cmp	r0, #0
    fc42:	d10d      	bne.n	fc60 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fc44:	f89d 0000 	ldrb.w	r0, [sp]
    fc48:	9c01      	ldr	r4, [sp, #4]
    fc4a:	2801      	cmp	r0, #1
    fc4c:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fc50:	d103      	bne.n	fc5a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fc52:	9801      	ldr	r0, [sp, #4]
    fc54:	f000 fce2 	bl	1061c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fc58:	b118      	cbz	r0, fc62 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fc5a:	7ce0      	ldrb	r0, [r4, #19]
    fc5c:	b118      	cbz	r0, fc66 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fc5e:	203a      	movs	r0, #58	; 0x3a
    fc60:	bd1c      	pop	{r2, r3, r4, pc}
    fc62:	2002      	movs	r0, #2
    fc64:	bd1c      	pop	{r2, r3, r4, pc}
    fc66:	2001      	movs	r0, #1
    fc68:	74e0      	strb	r0, [r4, #19]
    fc6a:	2000      	movs	r0, #0
    fc6c:	bd1c      	pop	{r2, r3, r4, pc}

0000fc6e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fc6e:	b510      	push	{r4, lr}
    fc70:	4604      	mov	r4, r0
    fc72:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fc76:	f000 fd0d 	bl	10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fc7a:	f7f3 f899 	bl	2db0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc7e:	7020      	strb	r0, [r4, #0]
    fc80:	f000 fcc9 	bl	10616 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fc84:	f7f3 f894 	bl	2db0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc88:	7060      	strb	r0, [r4, #1]
    fc8a:	2000      	movs	r0, #0
    fc8c:	bd10      	pop	{r4, pc}

0000fc8e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fc8e:	b510      	push	{r4, lr}
    fc90:	4604      	mov	r4, r0
    fc92:	f7f3 feb9 	bl	3a08 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    fc96:	7020      	strb	r0, [r4, #0]
    fc98:	2000      	movs	r0, #0
    fc9a:	bd10      	pop	{r4, pc}

0000fc9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fc9c:	b510      	push	{r4, lr}
    fc9e:	4604      	mov	r4, r0
    fca0:	f7f7 fdc4 	bl	782c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fca4:	b108      	cbz	r0, fcaa <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fca6:	200c      	movs	r0, #12
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	7820      	ldrb	r0, [r4, #0]
    fcac:	b108      	cbz	r0, fcb2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fcae:	2801      	cmp	r0, #1
    fcb0:	d107      	bne.n	fcc2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcb2:	f7ff fee1 	bl	fa78 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fcb6:	1c61      	adds	r1, r4, #1
    fcb8:	f7f3 fe80 	bl	39bc <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    fcbc:	b108      	cbz	r0, fcc2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcbe:	2000      	movs	r0, #0
    fcc0:	bd10      	pop	{r4, pc}
    fcc2:	2012      	movs	r0, #18
    fcc4:	bd10      	pop	{r4, pc}

0000fcc6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fcc6:	b51c      	push	{r2, r3, r4, lr}
    fcc8:	4604      	mov	r4, r0
    fcca:	f7f7 fc8d 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fcce:	2000      	movs	r0, #0
    fcd0:	f88d 0002 	strb.w	r0, [sp, #2]
    fcd4:	2103      	movs	r1, #3
    fcd6:	f88d 1001 	strb.w	r1, [sp, #1]
    fcda:	f814 1b01 	ldrb.w	r1, [r4], #1
    fcde:	f88d 1003 	strb.w	r1, [sp, #3]
    fce2:	f88d 0000 	strb.w	r0, [sp]
    fce6:	4668      	mov	r0, sp
    fce8:	9401      	str	r4, [sp, #4]
    fcea:	f000 f9a2 	bl	10032 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fcee:	bd1c      	pop	{r2, r3, r4, pc}

0000fcf0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fcf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fcf2:	4605      	mov	r5, r0
    fcf4:	f7f7 fc78 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fcf8:	4606      	mov	r6, r0
    fcfa:	7828      	ldrb	r0, [r5, #0]
    fcfc:	2400      	movs	r4, #0
    fcfe:	b160      	cbz	r0, fd1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd00:	f88d 4000 	strb.w	r4, [sp]
    fd04:	2001      	movs	r0, #1
    fd06:	f10d 0101 	add.w	r1, sp, #1
    fd0a:	f7f2 f97f 	bl	200c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fd0e:	b120      	cbz	r0, fd1a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd10:	4668      	mov	r0, sp
    fd12:	f000 f897 	bl	fe44 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fd16:	2800      	cmp	r0, #0
    fd18:	d112      	bne.n	fd40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd1a:	f88d 400c 	strb.w	r4, [sp, #12]
    fd1e:	4630      	mov	r0, r6
    fd20:	f7ff f840 	bl	eda4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fd24:	b118      	cbz	r0, fd2e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fd26:	2080      	movs	r0, #128	; 0x80
    fd28:	f8ad 000d 	strh.w	r0, [sp, #13]
    fd2c:	e001      	b.n	fd32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fd2e:	f8ad 400d 	strh.w	r4, [sp, #13]
    fd32:	f88d 400f 	strb.w	r4, [sp, #15]
    fd36:	7828      	ldrb	r0, [r5, #0]
    fd38:	2801      	cmp	r0, #1
    fd3a:	d003      	beq.n	fd44 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fd3c:	b138      	cbz	r0, fd4e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fd3e:	2012      	movs	r0, #18
    fd40:	b004      	add	sp, #16
    fd42:	bd70      	pop	{r4, r5, r6, pc}
    fd44:	a903      	add	r1, sp, #12
    fd46:	4630      	mov	r0, r6
    fd48:	f7f7 fc6a 	bl	7620 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fd4c:	e7f8      	b.n	fd40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd4e:	4630      	mov	r0, r6
    fd50:	f000 fc7a 	bl	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fd54:	e7f4      	b.n	fd40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fd56 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fd56:	b530      	push	{r4, r5, lr}
    fd58:	b08b      	sub	sp, #44	; 0x2c
    fd5a:	4604      	mov	r4, r0
    fd5c:	f7f7 fc44 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fd60:	4602      	mov	r2, r0
    fd62:	7920      	ldrb	r0, [r4, #4]
    fd64:	2804      	cmp	r0, #4
    fd66:	d803      	bhi.n	fd70 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fd68:	8860      	ldrh	r0, [r4, #2]
    fd6a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fd6e:	d902      	bls.n	fd76 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fd70:	2012      	movs	r0, #18
    fd72:	b00b      	add	sp, #44	; 0x2c
    fd74:	bd30      	pop	{r4, r5, pc}
    fd76:	2500      	movs	r5, #0
    fd78:	f88d 5004 	strb.w	r5, [sp, #4]
    fd7c:	7921      	ldrb	r1, [r4, #4]
    fd7e:	9500      	str	r5, [sp, #0]
    fd80:	f89d 0000 	ldrb.w	r0, [sp]
    fd84:	2905      	cmp	r1, #5
    fd86:	f040 0010 	orr.w	r0, r0, #16
    fd8a:	f88d 0000 	strb.w	r0, [sp]
    fd8e:	d254      	bcs.n	fe3a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fd90:	e8df f001 	tbb	[pc, r1]
    fd94:	11050803 	.word	0x11050803
    fd98:	000b      	.short	0x000b
    fd9a:	f040 0001 	orr.w	r0, r0, #1
    fd9e:	f040 0002 	orr.w	r0, r0, #2
    fda2:	e006      	b.n	fdb2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fda4:	f040 0009 	orr.w	r0, r0, #9
    fda8:	e001      	b.n	fdae <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fdaa:	f040 0001 	orr.w	r0, r0, #1
    fdae:	f040 0004 	orr.w	r0, r0, #4
    fdb2:	f88d 0000 	strb.w	r0, [sp]
    fdb6:	f8bd 0000 	ldrh.w	r0, [sp]
    fdba:	9000      	str	r0, [sp, #0]
    fdbc:	f8bd 0000 	ldrh.w	r0, [sp]
    fdc0:	f8ad 0005 	strh.w	r0, [sp, #5]
    fdc4:	8821      	ldrh	r1, [r4, #0]
    fdc6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fdca:	f361 201f 	bfi	r0, r1, #8, #24
    fdce:	f8cd 0006 	str.w	r0, [sp, #6]
    fdd2:	8861      	ldrh	r1, [r4, #2]
    fdd4:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fdd8:	f361 201f 	bfi	r0, r1, #8, #24
    fddc:	f8cd 0009 	str.w	r0, [sp, #9]
    fde0:	7b60      	ldrb	r0, [r4, #13]
    fde2:	f88d 000d 	strb.w	r0, [sp, #13]
    fde6:	7960      	ldrb	r0, [r4, #5]
    fde8:	f88d 000e 	strb.w	r0, [sp, #14]
    fdec:	79a0      	ldrb	r0, [r4, #6]
    fdee:	f88d 000f 	strb.w	r0, [sp, #15]
    fdf2:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fdf6:	9004      	str	r0, [sp, #16]
    fdf8:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fdfc:	f8ad 0014 	strh.w	r0, [sp, #20]
    fe00:	7ba0      	ldrb	r0, [r4, #14]
    fe02:	f88d 0016 	strb.w	r0, [sp, #22]
    fe06:	207f      	movs	r0, #127	; 0x7f
    fe08:	f88d 0017 	strb.w	r0, [sp, #23]
    fe0c:	2001      	movs	r0, #1
    fe0e:	f88d 0018 	strb.w	r0, [sp, #24]
    fe12:	f88d 5019 	strb.w	r5, [sp, #25]
    fe16:	f88d 001a 	strb.w	r0, [sp, #26]
    fe1a:	f88d 501b 	strb.w	r5, [sp, #27]
    fe1e:	4610      	mov	r0, r2
    fe20:	f7fe ffe0 	bl	ede4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fe24:	f88d 001c 	strb.w	r0, [sp, #28]
    fe28:	f88d 501d 	strb.w	r5, [sp, #29]
    fe2c:	f88d 501e 	strb.w	r5, [sp, #30]
    fe30:	a909      	add	r1, sp, #36	; 0x24
    fe32:	a801      	add	r0, sp, #4
    fe34:	f7f7 fa0e 	bl	7254 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fe38:	e79b      	b.n	fd72 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fe3a:	f241 31a9 	movw	r1, #5033	; 0x13a9
    fe3e:	2039      	movs	r0, #57	; 0x39
    fe40:	f7f1 f980 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fe44 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fe44:	b570      	push	{r4, r5, r6, lr}
    fe46:	4604      	mov	r4, r0
    fe48:	7800      	ldrb	r0, [r0, #0]
    fe4a:	2101      	movs	r1, #1
    fe4c:	f7f1 fca8 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe50:	0005      	movs	r5, r0
    fe52:	d007      	beq.n	fe64 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fe54:	f7ff f970 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe58:	b160      	cbz	r0, fe74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fe5a:	4628      	mov	r0, r5
    fe5c:	f7fe ffa8 	bl	edb0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fe60:	b110      	cbz	r0, fe68 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fe62:	e005      	b.n	fe70 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fe64:	2042      	movs	r0, #66	; 0x42
    fe66:	bd70      	pop	{r4, r5, r6, pc}
    fe68:	4628      	mov	r0, r5
    fe6a:	f7fe ff97 	bl	ed9c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fe6e:	b108      	cbz	r0, fe74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fe70:	200c      	movs	r0, #12
    fe72:	bd70      	pop	{r4, r5, r6, pc}
    fe74:	1c61      	adds	r1, r4, #1
    fe76:	4628      	mov	r0, r5
    fe78:	f7fe ffac 	bl	edd4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fe7c:	2000      	movs	r0, #0
    fe7e:	bd70      	pop	{r4, r5, r6, pc}

0000fe80 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fe80:	b50e      	push	{r1, r2, r3, lr}
    fe82:	8882      	ldrh	r2, [r0, #4]
    fe84:	f244 2390 	movw	r3, #17040	; 0x4290
    fe88:	429a      	cmp	r2, r3
    fe8a:	d901      	bls.n	fe90 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fe8c:	2012      	movs	r0, #18
    fe8e:	bd0e      	pop	{r1, r2, r3, pc}
    fe90:	f640 0348 	movw	r3, #2120	; 0x848
    fe94:	429a      	cmp	r2, r3
    fe96:	d300      	bcc.n	fe9a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fe98:	461a      	mov	r2, r3
    fe9a:	8803      	ldrh	r3, [r0, #0]
    fe9c:	f8ad 3000 	strh.w	r3, [sp]
    fea0:	8843      	ldrh	r3, [r0, #2]
    fea2:	f8ad 3002 	strh.w	r3, [sp, #2]
    fea6:	f8ad 2004 	strh.w	r2, [sp, #4]
    feaa:	8843      	ldrh	r3, [r0, #2]
    feac:	f8ad 3006 	strh.w	r3, [sp, #6]
    feb0:	f8ad 2008 	strh.w	r2, [sp, #8]
    feb4:	8800      	ldrh	r0, [r0, #0]
    feb6:	8008      	strh	r0, [r1, #0]
    feb8:	4668      	mov	r0, sp
    feba:	f7f7 fc33 	bl	7724 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    febe:	bd0e      	pop	{r1, r2, r3, pc}

0000fec0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fec0:	b510      	push	{r4, lr}
    fec2:	4604      	mov	r4, r0
    fec4:	f7f7 fb90 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fec8:	7861      	ldrb	r1, [r4, #1]
    feca:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fece:	f001 0101 	and.w	r1, r1, #1
    fed2:	f7fe ff7b 	bl	edcc <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fed6:	2000      	movs	r0, #0
    fed8:	bd10      	pop	{r4, pc}

0000feda <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    feda:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fedc:	4604      	mov	r4, r0
    fede:	f10d 0007 	add.w	r0, sp, #7
    fee2:	9000      	str	r0, [sp, #0]
    fee4:	7922      	ldrb	r2, [r4, #4]
    fee6:	78e1      	ldrb	r1, [r4, #3]
    fee8:	78a0      	ldrb	r0, [r4, #2]
    feea:	f10d 0306 	add.w	r3, sp, #6
    feee:	f000 fbd9 	bl	106a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    fef2:	2800      	cmp	r0, #0
    fef4:	d109      	bne.n	ff0a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fef6:	8820      	ldrh	r0, [r4, #0]
    fef8:	f8ad 0004 	strh.w	r0, [sp, #4]
    fefc:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ff00:	f8ad 0008 	strh.w	r0, [sp, #8]
    ff04:	a801      	add	r0, sp, #4
    ff06:	f000 f94f 	bl	101a8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ff0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ff0c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ff0c:	b510      	push	{r4, lr}
    ff0e:	4604      	mov	r4, r0
    ff10:	2001      	movs	r0, #1
    ff12:	f000 fa5e 	bl	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    ff16:	b128      	cbz	r0, ff24 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ff18:	4621      	mov	r1, r4
    ff1a:	2001      	movs	r0, #1
    ff1c:	f7f2 f88e 	bl	203c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ff20:	2000      	movs	r0, #0
    ff22:	bd10      	pop	{r4, pc}
    ff24:	200c      	movs	r0, #12
    ff26:	bd10      	pop	{r4, pc}

0000ff28 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ff28:	b51c      	push	{r2, r3, r4, lr}
    ff2a:	4604      	mov	r4, r0
    ff2c:	f7f7 fb5c 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    ff30:	2000      	movs	r0, #0
    ff32:	f88d 0000 	strb.w	r0, [sp]
    ff36:	f88d 0002 	strb.w	r0, [sp, #2]
    ff3a:	2003      	movs	r0, #3
    ff3c:	f88d 0001 	strb.w	r0, [sp, #1]
    ff40:	f814 0b01 	ldrb.w	r0, [r4], #1
    ff44:	f88d 0003 	strb.w	r0, [sp, #3]
    ff48:	4668      	mov	r0, sp
    ff4a:	9401      	str	r4, [sp, #4]
    ff4c:	f000 f8da 	bl	10104 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ff50:	bd1c      	pop	{r2, r3, r4, pc}

0000ff52 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ff52:	b51c      	push	{r2, r3, r4, lr}
    ff54:	8801      	ldrh	r1, [r0, #0]
    ff56:	f8ad 1000 	strh.w	r1, [sp]
    ff5a:	8841      	ldrh	r1, [r0, #2]
    ff5c:	f8ad 1002 	strh.w	r1, [sp, #2]
    ff60:	8801      	ldrh	r1, [r0, #0]
    ff62:	f8ad 1004 	strh.w	r1, [sp, #4]
    ff66:	8840      	ldrh	r0, [r0, #2]
    ff68:	f8ad 0006 	strh.w	r0, [sp, #6]
    ff6c:	4668      	mov	r0, sp
    ff6e:	f7f7 fc79 	bl	7864 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
    ff72:	bd1c      	pop	{r2, r3, r4, pc}

0000ff74 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ff74:	b510      	push	{r4, lr}
    ff76:	f7f2 f885 	bl	2084 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    ff7a:	2000      	movs	r0, #0
    ff7c:	bd10      	pop	{r4, pc}

0000ff7e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    ff7e:	b510      	push	{r4, lr}
    ff80:	460c      	mov	r4, r1
    ff82:	2100      	movs	r1, #0
    ff84:	f7f1 fc0c 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff88:	b118      	cbz	r0, ff92 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    ff8a:	2c02      	cmp	r4, #2
    ff8c:	d903      	bls.n	ff96 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    ff8e:	2012      	movs	r0, #18
    ff90:	bd10      	pop	{r4, pc}
    ff92:	2002      	movs	r0, #2
    ff94:	bd10      	pop	{r4, pc}
    ff96:	f014 0101 	ands.w	r1, r4, #1
    ff9a:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    ff9e:	f3c4 0240 	ubfx	r2, r4, #1, #1
    ffa2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    ffa6:	d004      	beq.n	ffb2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ffa8:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    ffac:	b109      	cbz	r1, ffb2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ffae:	f7ff f8c6 	bl	f13e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ffb2:	2000      	movs	r0, #0
    ffb4:	bd10      	pop	{r4, pc}

0000ffb6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ffb6:	b51c      	push	{r2, r3, r4, lr}
    ffb8:	460c      	mov	r4, r1
    ffba:	4669      	mov	r1, sp
    ffbc:	f7fd ff25 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffc0:	2800      	cmp	r0, #0
    ffc2:	d105      	bne.n	ffd0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    ffc4:	2100      	movs	r1, #0
    ffc6:	4622      	mov	r2, r4
    ffc8:	9801      	ldr	r0, [sp, #4]
    ffca:	f000 face 	bl	1056a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    ffce:	2000      	movs	r0, #0
    ffd0:	bd1c      	pop	{r2, r3, r4, pc}

0000ffd2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    ffd2:	b510      	push	{r4, lr}
    ffd4:	4604      	mov	r4, r0
    ffd6:	7800      	ldrb	r0, [r0, #0]
    ffd8:	28ff      	cmp	r0, #255	; 0xff
    ffda:	d009      	beq.n	fff0 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    ffdc:	2101      	movs	r1, #1
    ffde:	f7f1 fbdf 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ffe2:	b118      	cbz	r0, ffec <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    ffe4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ffe8:	8441      	strh	r1, [r0, #34]	; 0x22
    ffea:	e005      	b.n	fff8 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    ffec:	2042      	movs	r0, #66	; 0x42
    ffee:	bd10      	pop	{r4, pc}
    fff0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fff4:	f7f4 fd3a 	bl	4a6c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fff8:	2000      	movs	r0, #0
    fffa:	bd10      	pop	{r4, pc}

0000fffc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fffc:	b510      	push	{r4, lr}
    fffe:	4604      	mov	r4, r0
   10000:	f7f7 fc70 	bl	78e4 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10004:	b118      	cbz	r0, 1000e <CONFIG_PM_SRAM_SIZE+0xe>
   10006:	2000      	movs	r0, #0
   10008:	f000 f9e3 	bl	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   1000c:	b128      	cbz	r0, 1001a <CONFIG_PM_SRAM_SIZE+0x1a>
   1000e:	4621      	mov	r1, r4
   10010:	2000      	movs	r0, #0
   10012:	f7f2 f813 	bl	203c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10016:	2000      	movs	r0, #0
   10018:	bd10      	pop	{r4, pc}
   1001a:	200c      	movs	r0, #12
   1001c:	bd10      	pop	{r4, pc}

0001001e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1001e:	b510      	push	{r4, lr}
   10020:	7800      	ldrb	r0, [r0, #0]
   10022:	b100      	cbz	r0, 10026 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10024:	2001      	movs	r0, #1
   10026:	f7f4 fd4b 	bl	4ac0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1002a:	2000      	movs	r0, #0
   1002c:	bd10      	pop	{r4, pc}

0001002e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1002e:	f7f7 bb79 	b.w	7724 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

00010032 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10032:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10036:	4606      	mov	r6, r0
   10038:	7845      	ldrb	r5, [r0, #1]
   1003a:	7800      	ldrb	r0, [r0, #0]
   1003c:	2101      	movs	r1, #1
   1003e:	f7f1 fbaf 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10042:	0004      	movs	r4, r0
   10044:	d01e      	beq.n	10084 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10046:	f7fe fe7c 	bl	ed42 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1004a:	78f1      	ldrb	r1, [r6, #3]
   1004c:	4281      	cmp	r1, r0
   1004e:	d800      	bhi.n	10052 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10050:	4608      	mov	r0, r1
   10052:	4607      	mov	r7, r0
   10054:	2d04      	cmp	r5, #4
   10056:	d018      	beq.n	1008a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10058:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1005a:	f7fd fdb6 	bl	dbca <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1005e:	4438      	add	r0, r7
   10060:	b281      	uxth	r1, r0
   10062:	4620      	mov	r0, r4
   10064:	2201      	movs	r2, #1
   10066:	f000 f9c6 	bl	103f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1006a:	2800      	cmp	r0, #0
   1006c:	d10b      	bne.n	10086 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1006e:	2d03      	cmp	r5, #3
   10070:	d000      	beq.n	10074 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10072:	b1df      	cbz	r7, 100ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10074:	4620      	mov	r0, r4
   10076:	f7fe fe99 	bl	edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1007a:	7871      	ldrb	r1, [r6, #1]
   1007c:	2903      	cmp	r1, #3
   1007e:	d010      	beq.n	100a2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10080:	b9a0      	cbnz	r0, 100ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10082:	e004      	b.n	1008e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10084:	2042      	movs	r0, #66	; 0x42
   10086:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1008a:	b97f      	cbnz	r7, 100ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1008c:	e7f2      	b.n	10074 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1008e:	2904      	cmp	r1, #4
   10090:	d107      	bne.n	100a2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10092:	4620      	mov	r0, r4
   10094:	f7ff f850 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10098:	b140      	cbz	r0, 100ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1009a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1009c:	f7fd fd5c 	bl	db58 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   100a0:	b120      	cbz	r0, 100ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   100a2:	2d01      	cmp	r5, #1
   100a4:	d004      	beq.n	100b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   100a6:	2d03      	cmp	r5, #3
   100a8:	d002      	beq.n	100b0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   100aa:	e00e      	b.n	100ca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   100ac:	2012      	movs	r0, #18
   100ae:	e7ea      	b.n	10086 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   100b0:	4620      	mov	r0, r4
   100b2:	f7fe fe7b 	bl	edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   100b6:	b108      	cbz	r0, 100bc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   100b8:	2200      	movs	r2, #0
   100ba:	e002      	b.n	100c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   100bc:	2d01      	cmp	r5, #1
   100be:	d013      	beq.n	100e8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   100c0:	2201      	movs	r2, #1
   100c2:	4668      	mov	r0, sp
   100c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   100c6:	f7fd fce3 	bl	da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100ca:	2d04      	cmp	r5, #4
   100cc:	d018      	beq.n	10100 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   100ce:	6872      	ldr	r2, [r6, #4]
   100d0:	463b      	mov	r3, r7
   100d2:	2101      	movs	r1, #1
   100d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100d6:	f7fd fd0f 	bl	daf8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   100da:	b138      	cbz	r0, 100ec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   100dc:	7870      	ldrb	r0, [r6, #1]
   100de:	2802      	cmp	r0, #2
   100e0:	d006      	beq.n	100f0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   100e2:	2803      	cmp	r0, #3
   100e4:	d004      	beq.n	100f0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   100e6:	e00b      	b.n	10100 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   100e8:	2202      	movs	r2, #2
   100ea:	e7ea      	b.n	100c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   100ec:	2007      	movs	r0, #7
   100ee:	e7ca      	b.n	10086 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   100f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100f2:	f7fd fd6a 	bl	dbca <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   100f6:	4602      	mov	r2, r0
   100f8:	2101      	movs	r1, #1
   100fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100fc:	f7fd fd42 	bl	db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10100:	2000      	movs	r0, #0
   10102:	e7c0      	b.n	10086 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010104 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10104:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10108:	4607      	mov	r7, r0
   1010a:	7845      	ldrb	r5, [r0, #1]
   1010c:	78c6      	ldrb	r6, [r0, #3]
   1010e:	7800      	ldrb	r0, [r0, #0]
   10110:	2101      	movs	r1, #1
   10112:	f7f1 fb45 	bl	17a0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10116:	0004      	movs	r4, r0
   10118:	d003      	beq.n	10122 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1011a:	f7fe fe49 	bl	edb0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1011e:	b118      	cbz	r0, 10128 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10120:	e003      	b.n	1012a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10122:	2042      	movs	r0, #66	; 0x42
   10124:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10128:	2600      	movs	r6, #0
   1012a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1012c:	f7fd fd51 	bl	dbd2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10130:	4430      	add	r0, r6
   10132:	b281      	uxth	r1, r0
   10134:	4688      	mov	r8, r1
   10136:	4620      	mov	r0, r4
   10138:	2201      	movs	r2, #1
   1013a:	f000 f95c 	bl	103f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1013e:	2800      	cmp	r0, #0
   10140:	d1f0      	bne.n	10124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10142:	2d04      	cmp	r5, #4
   10144:	d008      	beq.n	10158 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10146:	2d03      	cmp	r5, #3
   10148:	d00a      	beq.n	10160 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1014a:	b12e      	cbz	r6, 10158 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1014c:	4620      	mov	r0, r4
   1014e:	f7fe fff3 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10152:	b118      	cbz	r0, 1015c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10154:	200c      	movs	r0, #12
   10156:	e7e5      	b.n	10124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10158:	2012      	movs	r0, #18
   1015a:	e7e3      	b.n	10124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1015c:	2d01      	cmp	r5, #1
   1015e:	d10c      	bne.n	1017a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10160:	4620      	mov	r0, r4
   10162:	f7fe fe23 	bl	edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10166:	b108      	cbz	r0, 1016c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10168:	2204      	movs	r2, #4
   1016a:	e002      	b.n	10172 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1016c:	2d01      	cmp	r5, #1
   1016e:	d010      	beq.n	10192 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10170:	2205      	movs	r2, #5
   10172:	4668      	mov	r0, sp
   10174:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10176:	f7fd fc8b 	bl	da90 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1017a:	687a      	ldr	r2, [r7, #4]
   1017c:	4633      	mov	r3, r6
   1017e:	2100      	movs	r1, #0
   10180:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10182:	f7fd fcb9 	bl	daf8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10186:	b130      	cbz	r0, 10196 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10188:	2d02      	cmp	r5, #2
   1018a:	d006      	beq.n	1019a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   1018c:	2d03      	cmp	r5, #3
   1018e:	d004      	beq.n	1019a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10190:	e008      	b.n	101a4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10192:	2206      	movs	r2, #6
   10194:	e7ed      	b.n	10172 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10196:	2007      	movs	r0, #7
   10198:	e7c4      	b.n	10124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1019a:	4642      	mov	r2, r8
   1019c:	2100      	movs	r1, #0
   1019e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101a0:	f7fd fcf0 	bl	db84 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   101a4:	2000      	movs	r0, #0
   101a6:	e7bd      	b.n	10124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

000101a8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   101a8:	b510      	push	{r4, lr}
   101aa:	4604      	mov	r4, r0
   101ac:	8880      	ldrh	r0, [r0, #4]
   101ae:	b128      	cbz	r0, 101bc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   101b0:	2801      	cmp	r0, #1
   101b2:	d003      	beq.n	101bc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   101b4:	2802      	cmp	r0, #2
   101b6:	d001      	beq.n	101bc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   101b8:	2012      	movs	r0, #18
   101ba:	bd10      	pop	{r4, pc}
   101bc:	78e0      	ldrb	r0, [r4, #3]
   101be:	f000 f9b1 	bl	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   101c2:	b148      	cbz	r0, 101d8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   101c4:	78a0      	ldrb	r0, [r4, #2]
   101c6:	f000 f9ad 	bl	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   101ca:	b128      	cbz	r0, 101d8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   101cc:	4620      	mov	r0, r4
   101ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101d2:	2101      	movs	r1, #1
   101d4:	f000 b862 	b.w	1029c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   101d8:	2011      	movs	r0, #17
   101da:	bd10      	pop	{r4, pc}

000101dc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   101dc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   101de:	460c      	mov	r4, r1
   101e0:	4605      	mov	r5, r0
   101e2:	8800      	ldrh	r0, [r0, #0]
   101e4:	4669      	mov	r1, sp
   101e6:	f7fd fe10 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101ea:	2800      	cmp	r0, #0
   101ec:	d106      	bne.n	101fc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   101ee:	9801      	ldr	r0, [sp, #4]
   101f0:	8829      	ldrh	r1, [r5, #0]
   101f2:	8021      	strh	r1, [r4, #0]
   101f4:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   101f8:	8060      	strh	r0, [r4, #2]
   101fa:	2000      	movs	r0, #0
   101fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000101fe <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   101fe:	b510      	push	{r4, lr}
   10200:	4604      	mov	r4, r0
   10202:	4601      	mov	r1, r0
   10204:	2000      	movs	r0, #0
   10206:	f7f1 ff01 	bl	200c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1020a:	b910      	cbnz	r0, 10212 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1020c:	2000      	movs	r0, #0
   1020e:	6020      	str	r0, [r4, #0]
   10210:	80a0      	strh	r0, [r4, #4]
   10212:	2000      	movs	r0, #0
   10214:	bd10      	pop	{r4, pc}

00010216 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10216:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10218:	460c      	mov	r4, r1
   1021a:	4605      	mov	r5, r0
   1021c:	8800      	ldrh	r0, [r0, #0]
   1021e:	4669      	mov	r1, sp
   10220:	f7fd fdf3 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10224:	b108      	cbz	r0, 1022a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10226:	2002      	movs	r0, #2
   10228:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1022a:	78a8      	ldrb	r0, [r5, #2]
   1022c:	b158      	cbz	r0, 10246 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   1022e:	f000 f9f2 	bl	10616 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10232:	70a0      	strb	r0, [r4, #2]
   10234:	8828      	ldrh	r0, [r5, #0]
   10236:	8020      	strh	r0, [r4, #0]
   10238:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1023c:	f7f2 fdb8 	bl	2db0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10240:	70a0      	strb	r0, [r4, #2]
   10242:	2000      	movs	r0, #0
   10244:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10246:	9801      	ldr	r0, [sp, #4]
   10248:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1024c:	e7f1      	b.n	10232 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001024e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1024e:	b510      	push	{r4, lr}
   10250:	f7f7 fb4e 	bl	78f0 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10254:	2000      	movs	r0, #0
   10256:	bd10      	pop	{r4, pc}

00010258 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10258:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1025c:	4604      	mov	r4, r0
   1025e:	8840      	ldrh	r0, [r0, #2]
   10260:	460d      	mov	r5, r1
   10262:	b1b8      	cbz	r0, 10294 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10264:	8820      	ldrh	r0, [r4, #0]
   10266:	4669      	mov	r1, sp
   10268:	f7fd fdcf 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1026c:	2800      	cmp	r0, #0
   1026e:	d10f      	bne.n	10290 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10270:	8820      	ldrh	r0, [r4, #0]
   10272:	8028      	strh	r0, [r5, #0]
   10274:	9e01      	ldr	r6, [sp, #4]
   10276:	f106 0510 	add.w	r5, r6, #16
   1027a:	3680      	adds	r6, #128	; 0x80
   1027c:	682f      	ldr	r7, [r5, #0]
   1027e:	8862      	ldrh	r2, [r4, #2]
   10280:	4639      	mov	r1, r7
   10282:	4630      	mov	r0, r6
   10284:	f7fd fee3 	bl	e04e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10288:	6828      	ldr	r0, [r5, #0]
   1028a:	42b8      	cmp	r0, r7
   1028c:	d1f6      	bne.n	1027c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1028e:	2000      	movs	r0, #0
   10290:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10294:	2012      	movs	r0, #18
   10296:	e7fb      	b.n	10290 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010298 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10298:	f000 b868 	b.w	1036c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0001029c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   1029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102a0:	b085      	sub	sp, #20
   102a2:	4688      	mov	r8, r1
   102a4:	4606      	mov	r6, r0
   102a6:	8800      	ldrh	r0, [r0, #0]
   102a8:	a901      	add	r1, sp, #4
   102aa:	f7fd fdae 	bl	de0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102ae:	2800      	cmp	r0, #0
   102b0:	d13b      	bne.n	1032a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   102b2:	9802      	ldr	r0, [sp, #8]
   102b4:	4601      	mov	r1, r0
   102b6:	468a      	mov	sl, r1
   102b8:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   102bc:	f500 7498 	add.w	r4, r0, #304	; 0x130
   102c0:	f88d 1000 	strb.w	r1, [sp]
   102c4:	9900      	ldr	r1, [sp, #0]
   102c6:	9100      	str	r1, [sp, #0]
   102c8:	f89d 1000 	ldrb.w	r1, [sp]
   102cc:	f04f 0900 	mov.w	r9, #0
   102d0:	3080      	adds	r0, #128	; 0x80
   102d2:	b121      	cbz	r1, 102de <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   102d4:	f1b8 0f02 	cmp.w	r8, #2
   102d8:	d001      	beq.n	102de <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   102da:	2701      	movs	r7, #1
   102dc:	e000      	b.n	102e0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   102de:	2700      	movs	r7, #0
   102e0:	7f81      	ldrb	r1, [r0, #30]
   102e2:	2922      	cmp	r1, #34	; 0x22
   102e4:	d100      	bne.n	102e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   102e6:	b13f      	cbz	r7, 102f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   102e8:	2500      	movs	r5, #0
   102ea:	306c      	adds	r0, #108	; 0x6c
   102ec:	2108      	movs	r1, #8
   102ee:	4683      	mov	fp, r0
   102f0:	f7ff fbb9 	bl	fa66 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   102f4:	b110      	cbz	r0, 102fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   102f6:	e007      	b.n	10308 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   102f8:	2501      	movs	r5, #1
   102fa:	e7f6      	b.n	102ea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   102fc:	210b      	movs	r1, #11
   102fe:	4658      	mov	r0, fp
   10300:	f7ff fbb1 	bl	fa66 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   10304:	b900      	cbnz	r0, 10308 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   10306:	b17d      	cbz	r5, 10328 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   10308:	a804      	add	r0, sp, #16
   1030a:	9000      	str	r0, [sp, #0]
   1030c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10310:	ab03      	add	r3, sp, #12
   10312:	4632      	mov	r2, r6
   10314:	4651      	mov	r1, sl
   10316:	f000 f95e 	bl	105d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   1031a:	0005      	movs	r5, r0
   1031c:	d105      	bne.n	1032a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1031e:	340c      	adds	r4, #12
   10320:	20ff      	movs	r0, #255	; 0xff
   10322:	7060      	strb	r0, [r4, #1]
   10324:	b937      	cbnz	r7, 10334 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   10326:	e003      	b.n	10330 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10328:	201a      	movs	r0, #26
   1032a:	b005      	add	sp, #20
   1032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10330:	7820      	ldrb	r0, [r4, #0]
   10332:	b108      	cbz	r0, 10338 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   10334:	253a      	movs	r5, #58	; 0x3a
   10336:	e012      	b.n	1035e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   10338:	f884 8000 	strb.w	r8, [r4]
   1033c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10340:	70a0      	strb	r0, [r4, #2]
   10342:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10346:	70e1      	strb	r1, [r4, #3]
   10348:	f88d 0000 	strb.w	r0, [sp]
   1034c:	f88d 1001 	strb.w	r1, [sp, #1]
   10350:	88b0      	ldrh	r0, [r6, #4]
   10352:	f8ad 0002 	strh.w	r0, [sp, #2]
   10356:	4669      	mov	r1, sp
   10358:	4650      	mov	r0, sl
   1035a:	f7fd fe13 	bl	df84 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1035e:	f884 9001 	strb.w	r9, [r4, #1]
   10362:	4628      	mov	r0, r5
   10364:	e7e1      	b.n	1032a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00010366 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10366:	2008      	movs	r0, #8
   10368:	f7f7 bb2a 	b.w	79c0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001036c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   1036c:	b510      	push	{r4, lr}
   1036e:	f7fd fcbb 	bl	dce8 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10372:	f7f2 fbd9 	bl	2b28 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10376:	f7f7 fb45 	bl	7a04 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1037a:	f7fe f917 	bl	e5ac <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   1037e:	f7fd fed6 	bl	e12e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   10382:	f7f3 fb3b 	bl	39fc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   10386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1038a:	f7f7 b90d 	b.w	75a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

0001038e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   1038e:	f7f5 b901 	b.w	5594 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10392:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10396:	4288      	cmp	r0, r1
   10398:	d303      	bcc.n	103a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   1039a:	f640 0148 	movw	r1, #2120	; 0x848
   1039e:	4288      	cmp	r0, r1
   103a0:	d300      	bcc.n	103a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   103a2:	4608      	mov	r0, r1
   103a4:	b280      	uxth	r0, r0
   103a6:	4770      	bx	lr
   103a8:	07c1      	lsls	r1, r0, #31
   103aa:	d001      	beq.n	103b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   103ac:	2001      	movs	r0, #1
   103ae:	4770      	bx	lr
   103b0:	0780      	lsls	r0, r0, #30
   103b2:	d501      	bpl.n	103b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   103b4:	2002      	movs	r0, #2
   103b6:	4770      	bx	lr
   103b8:	2000      	movs	r0, #0
   103ba:	4770      	bx	lr
   103bc:	b510      	push	{r4, lr}
   103be:	2801      	cmp	r0, #1
   103c0:	d006      	beq.n	103d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   103c2:	2802      	cmp	r0, #2
   103c4:	d004      	beq.n	103d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   103c6:	f240 21d7 	movw	r1, #727	; 0x2d7
   103ca:	2006      	movs	r0, #6
   103cc:	f7f0 feba 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103d0:	bd10      	pop	{r4, pc}
   103d2:	b510      	push	{r4, lr}
   103d4:	f7f7 f8d2 	bl	757c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   103d8:	b158      	cbz	r0, 103f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   103da:	f7f7 f905 	bl	75e8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   103de:	4604      	mov	r4, r0
   103e0:	f7fe fce6 	bl	edb0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   103e4:	b918      	cbnz	r0, 103ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   103e6:	4620      	mov	r0, r4
   103e8:	f7fe fcd8 	bl	ed9c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   103ec:	b108      	cbz	r0, 103f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   103ee:	2000      	movs	r0, #0
   103f0:	bd10      	pop	{r4, pc}
   103f2:	2001      	movs	r0, #1
   103f4:	bd10      	pop	{r4, pc}
   103f6:	b570      	push	{r4, r5, r6, lr}
   103f8:	460c      	mov	r4, r1
   103fa:	4605      	mov	r5, r0
   103fc:	b112      	cbz	r2, 10404 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   103fe:	291f      	cmp	r1, #31
   10400:	d80c      	bhi.n	1041c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10402:	e016      	b.n	10432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   10404:	f7f1 fc42 	bl	1c8c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10408:	42a0      	cmp	r0, r4
   1040a:	d201      	bcs.n	10410 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   1040c:	2007      	movs	r0, #7
   1040e:	bd70      	pop	{r4, r5, r6, pc}
   10410:	4628      	mov	r0, r5
   10412:	f7fe fccb 	bl	edac <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10416:	b118      	cbz	r0, 10420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10418:	2c1f      	cmp	r4, #31
   1041a:	d901      	bls.n	10420 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1041c:	2012      	movs	r0, #18
   1041e:	bd70      	pop	{r4, r5, r6, pc}
   10420:	4628      	mov	r0, r5
   10422:	f7fe fccc 	bl	edbe <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10426:	b130      	cbz	r0, 10436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10428:	4621      	mov	r1, r4
   1042a:	4628      	mov	r0, r5
   1042c:	f7fe fc95 	bl	ed5a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10430:	b118      	cbz	r0, 1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10432:	2000      	movs	r0, #0
   10434:	bd70      	pop	{r4, r5, r6, pc}
   10436:	2042      	movs	r0, #66	; 0x42
   10438:	bd70      	pop	{r4, r5, r6, pc}
   1043a:	2045      	movs	r0, #69	; 0x45
   1043c:	bd70      	pop	{r4, r5, r6, pc}
   1043e:	b510      	push	{r4, lr}
   10440:	4604      	mov	r4, r0
   10442:	7840      	ldrb	r0, [r0, #1]
   10444:	06c1      	lsls	r1, r0, #27
   10446:	d51c      	bpl.n	10482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10448:	07c0      	lsls	r0, r0, #31
   1044a:	d00b      	beq.n	10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1044c:	f7f7 fa8c 	bl	7968 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10450:	b1b8      	cbz	r0, 10482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10452:	7860      	ldrb	r0, [r4, #1]
   10454:	06c1      	lsls	r1, r0, #27
   10456:	d405      	bmi.n	10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10458:	0700      	lsls	r0, r0, #28
   1045a:	d503      	bpl.n	10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1045c:	7d20      	ldrb	r0, [r4, #20]
   1045e:	2802      	cmp	r0, #2
   10460:	d10f      	bne.n	10482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10462:	e010      	b.n	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10464:	7d20      	ldrb	r0, [r4, #20]
   10466:	2802      	cmp	r0, #2
   10468:	d001      	beq.n	1046e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   1046a:	7ea0      	ldrb	r0, [r4, #26]
   1046c:	b948      	cbnz	r0, 10482 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1046e:	7860      	ldrb	r0, [r4, #1]
   10470:	0700      	lsls	r0, r0, #28
   10472:	d408      	bmi.n	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10474:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10478:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1047c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10480:	d201      	bcs.n	10486 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10482:	2011      	movs	r0, #17
   10484:	bd10      	pop	{r4, pc}
   10486:	2000      	movs	r0, #0
   10488:	bd10      	pop	{r4, pc}
   1048a:	b538      	push	{r3, r4, r5, lr}
   1048c:	4604      	mov	r4, r0
   1048e:	7800      	ldrb	r0, [r0, #0]
   10490:	28ef      	cmp	r0, #239	; 0xef
   10492:	d843      	bhi.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10494:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10498:	f8ad 0000 	strh.w	r0, [sp]
   1049c:	9800      	ldr	r0, [sp, #0]
   1049e:	f000 f918 	bl	106d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   104a2:	b3a0      	cbz	r0, 1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   104a4:	7861      	ldrb	r1, [r4, #1]
   104a6:	0708      	lsls	r0, r1, #28
   104a8:	d40b      	bmi.n	104c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   104aa:	f8d4 0002 	ldr.w	r0, [r4, #2]
   104ae:	f8d4 3005 	ldr.w	r3, [r4, #5]
   104b2:	0a02      	lsrs	r2, r0, #8
   104b4:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   104b8:	d830      	bhi.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104ba:	2220      	movs	r2, #32
   104bc:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   104c0:	d82c      	bhi.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104c2:	7a60      	ldrb	r0, [r4, #9]
   104c4:	b318      	cbz	r0, 1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   104c6:	2807      	cmp	r0, #7
   104c8:	d828      	bhi.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104ca:	7aa0      	ldrb	r0, [r4, #10]
   104cc:	b128      	cbz	r0, 104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   104ce:	2801      	cmp	r0, #1
   104d0:	d003      	beq.n	104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   104d2:	2802      	cmp	r0, #2
   104d4:	d001      	beq.n	104da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   104d6:	2803      	cmp	r0, #3
   104d8:	d120      	bne.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104da:	074a      	lsls	r2, r1, #29
   104dc:	d403      	bmi.n	104e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   104de:	2802      	cmp	r0, #2
   104e0:	d001      	beq.n	104e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   104e2:	2803      	cmp	r0, #3
   104e4:	d105      	bne.n	104f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   104e6:	7ae0      	ldrb	r0, [r4, #11]
   104e8:	b108      	cbz	r0, 104ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   104ea:	2801      	cmp	r0, #1
   104ec:	d116      	bne.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104ee:	0748      	lsls	r0, r1, #29
   104f0:	d407      	bmi.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   104f2:	7ca0      	ldrb	r0, [r4, #18]
   104f4:	b128      	cbz	r0, 10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   104f6:	2801      	cmp	r0, #1
   104f8:	d003      	beq.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   104fa:	2802      	cmp	r0, #2
   104fc:	d001      	beq.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   104fe:	2803      	cmp	r0, #3
   10500:	d10c      	bne.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10502:	06c8      	lsls	r0, r1, #27
   10504:	7d20      	ldrb	r0, [r4, #20]
   10506:	d503      	bpl.n	10510 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10508:	2801      	cmp	r0, #1
   1050a:	d107      	bne.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1050c:	e002      	b.n	10514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   1050e:	e005      	b.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10510:	2802      	cmp	r0, #2
   10512:	d003      	beq.n	1051c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10514:	7e20      	ldrb	r0, [r4, #24]
   10516:	b118      	cbz	r0, 10520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10518:	2801      	cmp	r0, #1
   1051a:	d001      	beq.n	10520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1051c:	2012      	movs	r0, #18
   1051e:	bd38      	pop	{r3, r4, r5, pc}
   10520:	2000      	movs	r0, #0
   10522:	bd38      	pop	{r3, r4, r5, pc}
   10524:	b510      	push	{r4, lr}
   10526:	0004      	movs	r4, r0
   10528:	d005      	beq.n	10536 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1052a:	f7f7 fa5b 	bl	79e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1052e:	4384      	bics	r4, r0
   10530:	d001      	beq.n	10536 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10532:	2000      	movs	r0, #0
   10534:	bd10      	pop	{r4, pc}
   10536:	2001      	movs	r0, #1
   10538:	bd10      	pop	{r4, pc}
   1053a:	28fb      	cmp	r0, #251	; 0xfb
   1053c:	d803      	bhi.n	10546 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   1053e:	f640 0048 	movw	r0, #2120	; 0x848
   10542:	4281      	cmp	r1, r0
   10544:	d901      	bls.n	1054a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10546:	2011      	movs	r0, #17
   10548:	4770      	bx	lr
   1054a:	2000      	movs	r0, #0
   1054c:	4770      	bx	lr
   1054e:	381b      	subs	r0, #27
   10550:	28e1      	cmp	r0, #225	; 0xe1
   10552:	d206      	bcs.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10554:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10558:	d303      	bcc.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   1055a:	f244 2090 	movw	r0, #17040	; 0x4290
   1055e:	4281      	cmp	r1, r0
   10560:	d901      	bls.n	10566 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10562:	2012      	movs	r0, #18
   10564:	4770      	bx	lr
   10566:	2000      	movs	r0, #0
   10568:	4770      	bx	lr
   1056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1056e:	4606      	mov	r6, r0
   10570:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10574:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10578:	4615      	mov	r5, r2
   1057a:	302c      	adds	r0, #44	; 0x2c
   1057c:	f7f4 faa6 	bl	4acc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10580:	4680      	mov	r8, r0
   10582:	2102      	movs	r1, #2
   10584:	f7fd fcce 	bl	df24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10588:	4287      	cmp	r7, r0
   1058a:	d200      	bcs.n	1058e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   1058c:	4638      	mov	r0, r7
   1058e:	4607      	mov	r7, r0
   10590:	2102      	movs	r1, #2
   10592:	4640      	mov	r0, r8
   10594:	f7fd fcc6 	bl	df24 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10598:	4284      	cmp	r4, r0
   1059a:	d200      	bcs.n	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   1059c:	4620      	mov	r0, r4
   1059e:	8831      	ldrh	r1, [r6, #0]
   105a0:	8029      	strh	r1, [r5, #0]
   105a2:	2f1b      	cmp	r7, #27
   105a4:	d913      	bls.n	105ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   105a6:	2ffb      	cmp	r7, #251	; 0xfb
   105a8:	d300      	bcc.n	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   105aa:	27fb      	movs	r7, #251	; 0xfb
   105ac:	806f      	strh	r7, [r5, #2]
   105ae:	281b      	cmp	r0, #27
   105b0:	d90f      	bls.n	105d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   105b2:	28fb      	cmp	r0, #251	; 0xfb
   105b4:	d300      	bcc.n	105b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   105b6:	20fb      	movs	r0, #251	; 0xfb
   105b8:	80e8      	strh	r0, [r5, #6]
   105ba:	4640      	mov	r0, r8
   105bc:	f7ff fee9 	bl	10392 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   105c0:	80a8      	strh	r0, [r5, #4]
   105c2:	4640      	mov	r0, r8
   105c4:	f7ff fee5 	bl	10392 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   105c8:	8128      	strh	r0, [r5, #8]
   105ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105ce:	271b      	movs	r7, #27
   105d0:	e7ec      	b.n	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   105d2:	201b      	movs	r0, #27
   105d4:	e7f0      	b.n	105b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   105d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105da:	7890      	ldrb	r0, [r2, #2]
   105dc:	9e06      	ldr	r6, [sp, #24]
   105de:	461d      	mov	r5, r3
   105e0:	4614      	mov	r4, r2
   105e2:	b908      	cbnz	r0, 105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   105e4:	f7f7 f9fe 	bl	79e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   105e8:	78e4      	ldrb	r4, [r4, #3]
   105ea:	4607      	mov	r7, r0
   105ec:	b914      	cbnz	r4, 105f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   105ee:	f7f7 f9f9 	bl	79e4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   105f2:	4604      	mov	r4, r0
   105f4:	b16f      	cbz	r7, 10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   105f6:	b164      	cbz	r4, 10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   105f8:	4638      	mov	r0, r7
   105fa:	f7ff fed5 	bl	103a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   105fe:	4620      	mov	r0, r4
   10600:	f7ff fed2 	bl	103a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10604:	b12f      	cbz	r7, 10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10606:	b124      	cbz	r4, 10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10608:	702f      	strb	r7, [r5, #0]
   1060a:	7034      	strb	r4, [r6, #0]
   1060c:	2000      	movs	r0, #0
   1060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10612:	2009      	movs	r0, #9
   10614:	e7fb      	b.n	1060e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10616:	207f      	movs	r0, #127	; 0x7f
   10618:	f000 b83c 	b.w	10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   1061c:	b508      	push	{r3, lr}
   1061e:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10622:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   10626:	f88d 0000 	strb.w	r0, [sp]
   1062a:	9800      	ldr	r0, [sp, #0]
   1062c:	9000      	str	r0, [sp, #0]
   1062e:	f89d 0000 	ldrb.w	r0, [sp]
   10632:	b100      	cbz	r0, 10636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10634:	2001      	movs	r0, #1
   10636:	1e40      	subs	r0, r0, #1
   10638:	4208      	tst	r0, r1
   1063a:	d003      	beq.n	10644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1063c:	2904      	cmp	r1, #4
   1063e:	d001      	beq.n	10644 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10640:	2001      	movs	r0, #1
   10642:	bd08      	pop	{r3, pc}
   10644:	2000      	movs	r0, #0
   10646:	bd08      	pop	{r3, pc}
   10648:	b570      	push	{r4, r5, r6, lr}
   1064a:	4605      	mov	r5, r0
   1064c:	f7fe fbb7 	bl	edbe <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10650:	b170      	cbz	r0, 10670 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   10652:	4628      	mov	r0, r5
   10654:	f7fe fd70 	bl	f138 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10658:	2800      	cmp	r0, #0
   1065a:	d008      	beq.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   1065c:	4628      	mov	r0, r5
   1065e:	f7fe fd68 	bl	f132 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10662:	4604      	mov	r4, r0
   10664:	4628      	mov	r0, r5
   10666:	f7fe fd3e 	bl	f0e6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1066a:	b118      	cbz	r0, 10674 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1066c:	200c      	movs	r0, #12
   1066e:	bd70      	pop	{r4, r5, r6, pc}
   10670:	2042      	movs	r0, #66	; 0x42
   10672:	bd70      	pop	{r4, r5, r6, pc}
   10674:	b164      	cbz	r4, 10690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10676:	8820      	ldrh	r0, [r4, #0]
   10678:	f7fd fb03 	bl	dc82 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1067c:	8820      	ldrh	r0, [r4, #0]
   1067e:	2100      	movs	r1, #0
   10680:	f7f1 f930 	bl	18e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10684:	b120      	cbz	r0, 10690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10686:	f241 71ae 	movw	r1, #6062	; 0x17ae
   1068a:	2039      	movs	r0, #57	; 0x39
   1068c:	f7f0 fd5a 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10690:	2000      	movs	r0, #0
   10692:	bd70      	pop	{r4, r5, r6, pc}
   10694:	b508      	push	{r3, lr}
   10696:	f640 1288 	movw	r2, #2440	; 0x988
   1069a:	2300      	movs	r3, #0
   1069c:	4669      	mov	r1, sp
   1069e:	f7fc f9a9 	bl	c9f4 <mpsl_fem_tx_power_split>
   106a2:	bd08      	pop	{r3, pc}
   106a4:	b530      	push	{r4, r5, lr}
   106a6:	f340 0400 	sbfx	r4, r0, #0, #1
   106aa:	f340 0040 	sbfx	r0, r0, #1, #1
   106ae:	1c40      	adds	r0, r0, #1
   106b0:	9d03      	ldr	r5, [sp, #12]
   106b2:	1c64      	adds	r4, r4, #1
   106b4:	d000      	beq.n	106b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   106b6:	b119      	cbz	r1, 106c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   106b8:	b100      	cbz	r0, 106bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   106ba:	b10a      	cbz	r2, 106c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   106bc:	b91c      	cbnz	r4, 106c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   106be:	e001      	b.n	106c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   106c0:	2011      	movs	r0, #17
   106c2:	bd30      	pop	{r4, r5, pc}
   106c4:	2100      	movs	r1, #0
   106c6:	7019      	strb	r1, [r3, #0]
   106c8:	b900      	cbnz	r0, 106cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   106ca:	2200      	movs	r2, #0
   106cc:	702a      	strb	r2, [r5, #0]
   106ce:	2000      	movs	r0, #0
   106d0:	bd30      	pop	{r4, r5, pc}
   106d2:	b2c0      	uxtb	r0, r0
   106d4:	06c1      	lsls	r1, r0, #27
   106d6:	d40c      	bmi.n	106f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   106d8:	0681      	lsls	r1, r0, #26
   106da:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   106de:	d503      	bpl.n	106e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   106e0:	b9d1      	cbnz	r1, 10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   106e2:	0781      	lsls	r1, r0, #30
   106e4:	d418      	bmi.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   106e6:	e001      	b.n	106ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   106e8:	2900      	cmp	r1, #0
   106ea:	d1fa      	bne.n	106e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   106ec:	0700      	lsls	r0, r0, #28
   106ee:	d413      	bmi.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   106f0:	e010      	b.n	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   106f2:	0641      	lsls	r1, r0, #25
   106f4:	d410      	bmi.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   106f6:	0681      	lsls	r1, r0, #26
   106f8:	d40e      	bmi.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   106fa:	07c1      	lsls	r1, r0, #31
   106fc:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10700:	d004      	beq.n	1070c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10702:	2900      	cmp	r1, #0
   10704:	db02      	blt.n	1070c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10706:	0740      	lsls	r0, r0, #29
   10708:	d404      	bmi.n	10714 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   1070a:	e005      	b.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1070c:	0701      	lsls	r1, r0, #28
   1070e:	d403      	bmi.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10710:	0740      	lsls	r0, r0, #29
   10712:	d401      	bmi.n	10718 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10714:	2001      	movs	r0, #1
   10716:	4770      	bx	lr
   10718:	2000      	movs	r0, #0
   1071a:	4770      	bx	lr
   1071c:	b510      	push	{r4, lr}
   1071e:	f7f4 f9b9 	bl	4a94 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10722:	b110      	cbz	r0, 1072a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   10724:	f44f 7188 	mov.w	r1, #272	; 0x110
   10728:	e004      	b.n	10734 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   1072a:	f7f3 fae9 	bl	3d00 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1072e:	b120      	cbz	r0, 1073a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   10730:	f240 1115 	movw	r1, #277	; 0x115
   10734:	2001      	movs	r0, #1
   10736:	f7f0 fd05 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1073a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1073e:	2001      	movs	r0, #1
   10740:	f7fd b8ef 	b.w	d922 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10744:	6802      	ldr	r2, [r0, #0]
   10746:	b912      	cbnz	r2, 1074e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
   10748:	6001      	str	r1, [r0, #0]
   1074a:	4770      	bx	lr
   1074c:	4602      	mov	r2, r0
   1074e:	6850      	ldr	r0, [r2, #4]
   10750:	b108      	cbz	r0, 10756 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c8>
   10752:	428a      	cmp	r2, r1
   10754:	d1fa      	bne.n	1074c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10756:	428a      	cmp	r2, r1
   10758:	d0f7      	beq.n	1074a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1075a:	6051      	str	r1, [r2, #4]
   1075c:	4770      	bx	lr
   1075e:	b510      	push	{r4, lr}
   10760:	4604      	mov	r4, r0
   10762:	e002      	b.n	1076a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3dc>
   10764:	6820      	ldr	r0, [r4, #0]
   10766:	4780      	blx	r0
   10768:	6864      	ldr	r4, [r4, #4]
   1076a:	2c00      	cmp	r4, #0
   1076c:	d1fa      	bne.n	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   1076e:	bd10      	pop	{r4, pc}
   10770:	b510      	push	{r4, lr}
   10772:	2000      	movs	r0, #0
   10774:	f7fd f8d5 	bl	d922 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10778:	f7f1 f992 	bl	1aa0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1077c:	f7f1 fc28 	bl	1fd0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10780:	f7f1 fdb6 	bl	22f0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   10784:	2800      	cmp	r0, #0
   10786:	d003      	beq.n	10790 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   10788:	21f2      	movs	r1, #242	; 0xf2
   1078a:	2001      	movs	r0, #1
   1078c:	f7f0 fcda 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10790:	bd10      	pop	{r4, pc}
   10792:	b510      	push	{r4, lr}
   10794:	f7ff ffc2 	bl	1071c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   10798:	f7fe ffc9 	bl	f72e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1079c:	2800      	cmp	r0, #0
   1079e:	d004      	beq.n	107aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   107a0:	f44f 7195 	mov.w	r1, #298	; 0x12a
   107a4:	2001      	movs	r0, #1
   107a6:	f7f0 fccd 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107aa:	bd10      	pop	{r4, pc}

000107ac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   107ac:	f7fb be58 	b.w	c460 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   107b0:	000b0001 	.word	0x000b0001
   107b4:	000a0002 	.word	0x000a0002
   107b8:	00090005 	.word	0x00090005
   107bc:	0008000a 	.word	0x0008000a
   107c0:	00070014 	.word	0x00070014
   107c4:	0006001e 	.word	0x0006001e
   107c8:	00050032 	.word	0x00050032
   107cc:	0004004b 	.word	0x0004004b
   107d0:	00030064 	.word	0x00030064
   107d4:	00020096 	.word	0x00020096
   107d8:	000100fa 	.word	0x000100fa
   107dc:	000001f4 	.word	0x000001f4

000107e0 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   107e0:	b510      	push	{r4, lr}
   107e2:	6844      	ldr	r4, [r0, #4]
   107e4:	7803      	ldrb	r3, [r0, #0]
   107e6:	2100      	movs	r1, #0
   107e8:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   107ec:	3480      	adds	r4, #128	; 0x80
   107ee:	4620      	mov	r0, r4
   107f0:	f7fd fb22 	bl	de38 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   107f4:	b110      	cbz	r0, 107fc <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   107f6:	2020      	movs	r0, #32
   107f8:	7760      	strb	r0, [r4, #29]
   107fa:	bd10      	pop	{r4, pc}
   107fc:	2180      	movs	r1, #128	; 0x80
   107fe:	207e      	movs	r0, #126	; 0x7e
   10800:	f7f0 fca0 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010804 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10804:	2200      	movs	r2, #0
   10806:	704a      	strb	r2, [r1, #1]
   10808:	2214      	movs	r2, #20
   1080a:	700a      	strb	r2, [r1, #0]
   1080c:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10810:	604a      	str	r2, [r1, #4]
   10812:	89c0      	ldrh	r0, [r0, #14]
   10814:	8108      	strh	r0, [r1, #8]
   10816:	4770      	bx	lr
   10818:	b510      	push	{r4, lr}
   1081a:	2801      	cmp	r0, #1
   1081c:	d006      	beq.n	1082c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1081e:	2802      	cmp	r0, #2
   10820:	d004      	beq.n	1082c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   10822:	f240 21d7 	movw	r1, #727	; 0x2d7
   10826:	2006      	movs	r0, #6
   10828:	f7f0 fc8c 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1082c:	bd10      	pop	{r4, pc}

0001082e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1082e:	b510      	push	{r4, lr}
   10830:	f7f7 fcc6 	bl	81c0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10834:	f000 f81d 	bl	10872 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10838:	f7f7 f9a2 	bl	7b80 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10840:	f7f7 ba9c 	b.w	7d7c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010844 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10844:	b510      	push	{r4, lr}
   10846:	24c8      	movs	r4, #200	; 0xc8
   10848:	1e64      	subs	r4, r4, #1
   1084a:	b2e4      	uxtb	r4, r4
   1084c:	f7f7 f9b6 	bl	7bbc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10850:	2802      	cmp	r0, #2
   10852:	d003      	beq.n	1085c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10854:	2801      	cmp	r0, #1
   10856:	d000      	beq.n	1085a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10858:	2000      	movs	r0, #0
   1085a:	bd10      	pop	{r4, pc}
   1085c:	2c00      	cmp	r4, #0
   1085e:	d1f3      	bne.n	10848 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10860:	21ed      	movs	r1, #237	; 0xed
   10862:	203b      	movs	r0, #59	; 0x3b
   10864:	f7f0 fc6e 	bl	1144 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10868:	5840      	ldr	r0, [r0, r1]
   1086a:	2800      	cmp	r0, #0
   1086c:	d000      	beq.n	10870 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1086e:	2001      	movs	r0, #1
   10870:	4770      	bx	lr

00010872 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10872:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10876:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1087a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1087e:	f3bf 8f4f 	dsb	sy
   10882:	f3bf 8f6f 	isb	sy
   10886:	f7f7 bb13 	b.w	7eb0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1088a:	2800      	cmp	r0, #0
   1088c:	db09      	blt.n	108a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1088e:	f000 021f 	and.w	r2, r0, #31
   10892:	2101      	movs	r1, #1
   10894:	4091      	lsls	r1, r2
   10896:	0940      	lsrs	r0, r0, #5
   10898:	0080      	lsls	r0, r0, #2
   1089a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1089e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   108a2:	4770      	bx	lr
   108a4:	2800      	cmp	r0, #0
   108a6:	db0d      	blt.n	108c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   108a8:	f000 021f 	and.w	r2, r0, #31
   108ac:	2101      	movs	r1, #1
   108ae:	4091      	lsls	r1, r2
   108b0:	0940      	lsrs	r0, r0, #5
   108b2:	0080      	lsls	r0, r0, #2
   108b4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   108b8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   108bc:	f3bf 8f4f 	dsb	sy
   108c0:	f3bf 8f6f 	isb	sy
   108c4:	4770      	bx	lr
   108c6:	5840      	ldr	r0, [r0, r1]
   108c8:	2800      	cmp	r0, #0
   108ca:	d000      	beq.n	108ce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   108cc:	2001      	movs	r0, #1
   108ce:	4770      	bx	lr
   108d0:	5840      	ldr	r0, [r0, r1]
   108d2:	2800      	cmp	r0, #0
   108d4:	d000      	beq.n	108d8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   108d6:	2001      	movs	r0, #1
   108d8:	4770      	bx	lr

000108da <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   108da:	b510      	push	{r4, lr}
   108dc:	4604      	mov	r4, r0
   108de:	4608      	mov	r0, r1
   108e0:	f7f7 fd9a 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108e8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   108ec:	fbb0 f0f1 	udiv	r0, r0, r1
   108f0:	1a20      	subs	r0, r4, r0
   108f2:	1e80      	subs	r0, r0, #2
   108f4:	bd10      	pop	{r4, pc}

000108f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   108f6:	b510      	push	{r4, lr}
   108f8:	4604      	mov	r4, r0
   108fa:	4608      	mov	r0, r1
   108fc:	f7f7 fd8c 	bl	8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10904:	fbb0 f0f1 	udiv	r0, r0, r1
   10908:	1a20      	subs	r0, r4, r0
   1090a:	bd10      	pop	{r4, pc}
   1090c:	2804      	cmp	r0, #4
   1090e:	d202      	bcs.n	10916 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10910:	f04f 0028 	mov.w	r0, #40	; 0x28
   10914:	4770      	bx	lr
   10916:	d102      	bne.n	1091e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10918:	f04f 0010 	mov.w	r0, #16
   1091c:	4770      	bx	lr
   1091e:	f04f 0000 	mov.w	r0, #0
   10922:	4770      	bx	lr
   10924:	2100      	movs	r1, #0
   10926:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1092a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1092e:	7041      	strb	r1, [r0, #1]
   10930:	4770      	bx	lr

00010932 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10932:	b570      	push	{r4, r5, r6, lr}
   10934:	f7f8 fad0 	bl	8ed8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10938:	4605      	mov	r5, r0
   1093a:	2400      	movs	r4, #0
   1093c:	e006      	b.n	1094c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1093e:	4620      	mov	r0, r4
   10940:	f7f8 fad0 	bl	8ee4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10944:	f7ff ffee 	bl	10924 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10948:	1c64      	adds	r4, r4, #1
   1094a:	b2e4      	uxtb	r4, r4
   1094c:	42ac      	cmp	r4, r5
   1094e:	d3f6      	bcc.n	1093e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10950:	bd70      	pop	{r4, r5, r6, pc}

00010952 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10952:	f7fa bf27 	b.w	b7a4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010956 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10956:	b510      	push	{r4, lr}
   10958:	2000      	movs	r0, #0
   1095a:	f7fb fa7f 	bl	be5c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1095e:	6800      	ldr	r0, [r0, #0]
   10960:	2800      	cmp	r0, #0
   10962:	bf18      	it	ne
   10964:	2001      	movne	r0, #1
   10966:	bd10      	pop	{r4, pc}

00010968 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10968:	b510      	push	{r4, lr}
   1096a:	f7fb faef 	bl	bf4c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1096e:	f7fa fdd3 	bl	b518 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10972:	f000 f804 	bl	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10976:	b280      	uxth	r0, r0
   10978:	bd10      	pop	{r4, pc}

0001097a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   1097a:	f7fb ba49 	b.w	be10 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0001097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   1097e:	0a41      	lsrs	r1, r0, #9
   10980:	f643 5209 	movw	r2, #15625	; 0x3d09
   10984:	4351      	muls	r1, r2
   10986:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1098a:	fb10 f002 	smulbb	r0, r0, r2
   1098e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10992:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10996:	4770      	bx	lr
   10998:	2800      	cmp	r0, #0
   1099a:	db09      	blt.n	109b0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   1099c:	f000 021f 	and.w	r2, r0, #31
   109a0:	2101      	movs	r1, #1
   109a2:	4091      	lsls	r1, r2
   109a4:	0940      	lsrs	r0, r0, #5
   109a6:	0080      	lsls	r0, r0, #2
   109a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109ac:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   109b0:	4770      	bx	lr
   109b2:	2800      	cmp	r0, #0
   109b4:	db0d      	blt.n	109d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   109b6:	f000 021f 	and.w	r2, r0, #31
   109ba:	2101      	movs	r1, #1
   109bc:	4091      	lsls	r1, r2
   109be:	0940      	lsrs	r0, r0, #5
   109c0:	0080      	lsls	r0, r0, #2
   109c2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109c6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   109ca:	f3bf 8f4f 	dsb	sy
   109ce:	f3bf 8f6f 	isb	sy
   109d2:	4770      	bx	lr
   109d4:	5840      	ldr	r0, [r0, r1]
   109d6:	2800      	cmp	r0, #0
   109d8:	d000      	beq.n	109dc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   109da:	2001      	movs	r0, #1
   109dc:	4770      	bx	lr
   109de:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   109e2:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   109e6:	f002 0201 	and.w	r2, r2, #1
   109ea:	03c0      	lsls	r0, r0, #15
   109ec:	d503      	bpl.n	109f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   109ee:	428a      	cmp	r2, r1
   109f0:	d101      	bne.n	109f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   109f2:	2001      	movs	r0, #1
   109f4:	4770      	bx	lr
   109f6:	2000      	movs	r0, #0
   109f8:	4770      	bx	lr

000109fa <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   109fa:	b510      	push	{r4, lr}
   109fc:	2101      	movs	r1, #1
   109fe:	0788      	lsls	r0, r1, #30
   10a00:	f7fb fde4 	bl	c5cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10a04:	2800      	cmp	r0, #0
   10a06:	d000      	beq.n	10a0a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10a08:	2001      	movs	r0, #1
   10a0a:	bd10      	pop	{r4, pc}

00010a0c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10a0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10a10:	2101      	movs	r1, #1
   10a12:	6001      	str	r1, [r0, #0]
   10a14:	4770      	bx	lr

00010a16 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10a16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10a1a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10a1e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10a22:	f002 0203 	and.w	r2, r2, #3
   10a26:	03c9      	lsls	r1, r1, #15
   10a28:	d503      	bpl.n	10a32 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10a2a:	4282      	cmp	r2, r0
   10a2c:	d101      	bne.n	10a32 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10a2e:	2001      	movs	r0, #1
   10a30:	4770      	bx	lr
   10a32:	2000      	movs	r0, #0
   10a34:	4770      	bx	lr

00010a36 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10a36:	b510      	push	{r4, lr}
   10a38:	2100      	movs	r1, #0
   10a3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10a3e:	f7fb fdc5 	bl	c5cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10a42:	2800      	cmp	r0, #0
   10a44:	d000      	beq.n	10a48 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10a46:	2001      	movs	r0, #1
   10a48:	bd10      	pop	{r4, pc}
   10a4a:	2800      	cmp	r0, #0
   10a4c:	db09      	blt.n	10a62 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10a4e:	f000 021f 	and.w	r2, r0, #31
   10a52:	2101      	movs	r1, #1
   10a54:	4091      	lsls	r1, r2
   10a56:	0940      	lsrs	r0, r0, #5
   10a58:	0080      	lsls	r0, r0, #2
   10a5a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a5e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10a62:	4770      	bx	lr
   10a64:	2800      	cmp	r0, #0
   10a66:	db0d      	blt.n	10a84 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10a68:	f000 021f 	and.w	r2, r0, #31
   10a6c:	2101      	movs	r1, #1
   10a6e:	4091      	lsls	r1, r2
   10a70:	0940      	lsrs	r0, r0, #5
   10a72:	0080      	lsls	r0, r0, #2
   10a74:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a78:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10a7c:	f3bf 8f4f 	dsb	sy
   10a80:	f3bf 8f6f 	isb	sy
   10a84:	4770      	bx	lr
   10a86:	1000      	.short	0x1000
   10a88:	00fa0002 	.word	0x00fa0002
   10a8c:	e8ff0000 	.word	0xe8ff0000
   10a90:	95775fae 	.word	0x95775fae
   10a94:	6227c87c 	.word	0x6227c87c
   10a98:	eae61814 	.word	0xeae61814
   10a9c:	3992c65d 	.word	0x3992c65d
   10aa0:	3a72      	.short	0x3a72
   10aa2:	2800      	cmp	r0, #0
   10aa4:	db09      	blt.n	10aba <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10aa6:	f000 021f 	and.w	r2, r0, #31
   10aaa:	2101      	movs	r1, #1
   10aac:	4091      	lsls	r1, r2
   10aae:	0940      	lsrs	r0, r0, #5
   10ab0:	0080      	lsls	r0, r0, #2
   10ab2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10ab6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10aba:	4770      	bx	lr

00010abc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10abc:	f3ef 8110 	mrs	r1, PRIMASK
   10ac0:	b672      	cpsid	i
   10ac2:	7802      	ldrb	r2, [r0, #0]
   10ac4:	2a01      	cmp	r2, #1
   10ac6:	d001      	beq.n	10acc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10ac8:	2201      	movs	r2, #1
   10aca:	e000      	b.n	10ace <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10acc:	2200      	movs	r2, #0
   10ace:	2301      	movs	r3, #1
   10ad0:	7003      	strb	r3, [r0, #0]
   10ad2:	b901      	cbnz	r1, 10ad6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10ad4:	b662      	cpsie	i
   10ad6:	b10a      	cbz	r2, 10adc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10ad8:	2000      	movs	r0, #0
   10ada:	4770      	bx	lr
   10adc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10ae0:	4770      	bx	lr

00010ae2 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10ae2:	2100      	movs	r1, #0
   10ae4:	7001      	strb	r1, [r0, #0]
   10ae6:	4608      	mov	r0, r1
   10ae8:	4770      	bx	lr

00010aea <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10aea:	f3ef 8110 	mrs	r1, PRIMASK
   10aee:	b672      	cpsid	i
   10af0:	2200      	movs	r2, #0
   10af2:	7002      	strb	r2, [r0, #0]
   10af4:	b901      	cbnz	r1, 10af8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10af6:	b662      	cpsie	i
   10af8:	2000      	movs	r0, #0
   10afa:	4770      	bx	lr

00010afc <mpsl_low_priority_process>:
   10afc:	f7fb beba 	b.w	c874 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010b00 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10b00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b04:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b08:	280f      	cmp	r0, #15
   10b0a:	d001      	beq.n	10b10 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10b0c:	2000      	movs	r0, #0
   10b0e:	4770      	bx	lr
   10b10:	2001      	movs	r0, #1
   10b12:	4770      	bx	lr

00010b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10b14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b18:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b1c:	280a      	cmp	r0, #10
   10b1e:	d001      	beq.n	10b24 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10b20:	2000      	movs	r0, #0
   10b22:	4770      	bx	lr
   10b24:	2001      	movs	r0, #1
   10b26:	4770      	bx	lr

00010b28 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10b28:	b500      	push	{lr}
   10b2a:	f7ff fff3 	bl	10b14 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10b2e:	b120      	cbz	r0, 10b3a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10b30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b34:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b38:	b108      	cbz	r0, 10b3e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10b3a:	2000      	movs	r0, #0
   10b3c:	bd00      	pop	{pc}
   10b3e:	2001      	movs	r0, #1
   10b40:	bd00      	pop	{pc}

00010b42 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10b42:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b46:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b4a:	280e      	cmp	r0, #14
   10b4c:	d001      	beq.n	10b52 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10b4e:	2000      	movs	r0, #0
   10b50:	4770      	bx	lr
   10b52:	2001      	movs	r0, #1
   10b54:	4770      	bx	lr

00010b56 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10b56:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b5a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b5e:	2810      	cmp	r0, #16
   10b60:	d001      	beq.n	10b66 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10b62:	2000      	movs	r0, #0
   10b64:	4770      	bx	lr
   10b66:	2001      	movs	r0, #1
   10b68:	4770      	bx	lr

00010b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10b6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b6e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b72:	2806      	cmp	r0, #6
   10b74:	d003      	beq.n	10b7e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b76:	1c40      	adds	r0, r0, #1
   10b78:	d001      	beq.n	10b7e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b7a:	2000      	movs	r0, #0
   10b7c:	4770      	bx	lr
   10b7e:	2001      	movs	r0, #1
   10b80:	4770      	bx	lr

00010b82 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10b82:	b500      	push	{lr}
   10b84:	f7ff fff1 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10b88:	b148      	cbz	r0, 10b9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b8e:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b92:	2806      	cmp	r0, #6
   10b94:	d303      	bcc.n	10b9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b96:	1c40      	adds	r0, r0, #1
   10b98:	d001      	beq.n	10b9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b9a:	2001      	movs	r0, #1
   10b9c:	bd00      	pop	{pc}
   10b9e:	2000      	movs	r0, #0
   10ba0:	bd00      	pop	{pc}

00010ba2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10ba2:	b500      	push	{lr}
   10ba4:	f7ff ffe1 	bl	10b6a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10ba8:	b138      	cbz	r0, 10bba <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10baa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bae:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10bb2:	2806      	cmp	r0, #6
   10bb4:	d303      	bcc.n	10bbe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10bb6:	1c40      	adds	r0, r0, #1
   10bb8:	d001      	beq.n	10bbe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10bba:	2000      	movs	r0, #0
   10bbc:	bd00      	pop	{pc}
   10bbe:	2001      	movs	r0, #1
   10bc0:	bd00      	pop	{pc}

00010bc2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10bc2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bc6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10bca:	280d      	cmp	r0, #13
   10bcc:	d001      	beq.n	10bd2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10bce:	2000      	movs	r0, #0
   10bd0:	4770      	bx	lr
   10bd2:	2001      	movs	r0, #1
   10bd4:	4770      	bx	lr

00010bd6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10bd6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bda:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10bde:	2808      	cmp	r0, #8
   10be0:	d001      	beq.n	10be6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10be2:	2000      	movs	r0, #0
   10be4:	4770      	bx	lr
   10be6:	2001      	movs	r0, #1
   10be8:	4770      	bx	lr

00010bea <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10bea:	f7fb be7d 	b.w	c8e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010bee <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10bee:	f7fb be7b 	b.w	c8e8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010bf2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bf6:	428a      	cmp	r2, r1
   10bf8:	d803      	bhi.n	10c02 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10bfa:	2179      	movs	r1, #121	; 0x79
   10bfc:	2096      	movs	r0, #150	; 0x96
   10bfe:	f7fb fd3b 	bl	c678 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10c02:	fab2 f382 	clz	r3, r2
   10c06:	b143      	cbz	r3, 10c1a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10c08:	4099      	lsls	r1, r3
   10c0a:	f1c3 0c20 	rsb	ip, r3, #32
   10c0e:	fa20 fc0c 	lsr.w	ip, r0, ip
   10c12:	4098      	lsls	r0, r3
   10c14:	ea41 010c 	orr.w	r1, r1, ip
   10c18:	409a      	lsls	r2, r3
   10c1a:	0c13      	lsrs	r3, r2, #16
   10c1c:	fbb1 f5f3 	udiv	r5, r1, r3
   10c20:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10c24:	b287      	uxth	r7, r0
   10c26:	fbb1 f0f3 	udiv	r0, r1, r3
   10c2a:	fb03 1615 	mls	r6, r3, r5, r1
   10c2e:	b294      	uxth	r4, r2
   10c30:	fb00 f504 	mul.w	r5, r0, r4
   10c34:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10c38:	42b5      	cmp	r5, r6
   10c3a:	d905      	bls.n	10c48 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10c3c:	1bad      	subs	r5, r5, r6
   10c3e:	4295      	cmp	r5, r2
   10c40:	bf94      	ite	ls
   10c42:	2501      	movls	r5, #1
   10c44:	2502      	movhi	r5, #2
   10c46:	1b40      	subs	r0, r0, r5
   10c48:	0409      	lsls	r1, r1, #16
   10c4a:	0405      	lsls	r5, r0, #16
   10c4c:	eb11 010c 	adds.w	r1, r1, ip
   10c50:	fba0 0c02 	umull	r0, ip, r0, r2
   10c54:	1a09      	subs	r1, r1, r0
   10c56:	fbb1 f0f3 	udiv	r0, r1, r3
   10c5a:	fbb1 fcf3 	udiv	ip, r1, r3
   10c5e:	fb03 131c 	mls	r3, r3, ip, r1
   10c62:	fb00 f104 	mul.w	r1, r0, r4
   10c66:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   10c6a:	4299      	cmp	r1, r3
   10c6c:	d905      	bls.n	10c7a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10c6e:	1ac9      	subs	r1, r1, r3
   10c70:	4291      	cmp	r1, r2
   10c72:	bf94      	ite	ls
   10c74:	2101      	movls	r1, #1
   10c76:	2102      	movhi	r1, #2
   10c78:	1a40      	subs	r0, r0, r1
   10c7a:	4328      	orrs	r0, r5
   10c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c80 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c84:	461e      	mov	r6, r3
   10c86:	4615      	mov	r5, r2
   10c88:	4604      	mov	r4, r0
   10c8a:	9f06      	ldr	r7, [sp, #24]
   10c8c:	f7ff ffb1 	bl	10bf2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10c90:	6030      	str	r0, [r6, #0]
   10c92:	fba0 0105 	umull	r0, r1, r0, r5
   10c96:	1a20      	subs	r0, r4, r0
   10c98:	6038      	str	r0, [r7, #0]
   10c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10c9e:	b4f0      	push	{r4, r5, r6, r7}
   10ca0:	ea80 0c01 	eor.w	ip, r0, r1
   10ca4:	4603      	mov	r3, r0
   10ca6:	f01c 0f03 	tst.w	ip, #3
   10caa:	d13c      	bne.n	10d26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10cac:	f013 0f03 	tst.w	r3, #3
   10cb0:	d00b      	beq.n	10cca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10cb2:	2a00      	cmp	r2, #0
   10cb4:	bf04      	itt	eq
   10cb6:	bcf0      	popeq	{r4, r5, r6, r7}
   10cb8:	4770      	bxeq	lr
   10cba:	f811 cb01 	ldrb.w	ip, [r1], #1
   10cbe:	f803 cb01 	strb.w	ip, [r3], #1
   10cc2:	1e52      	subs	r2, r2, #1
   10cc4:	f013 0f03 	tst.w	r3, #3
   10cc8:	d1f3      	bne.n	10cb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10cca:	2a03      	cmp	r2, #3
   10ccc:	d94f      	bls.n	10d6e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10cce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10cd2:	d24c      	bcs.n	10d6e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10cd4:	f1c2 0c00 	rsb	ip, r2, #0
   10cd8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10cdc:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10ce0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10ce4:	f1cc 0c00 	rsb	ip, ip, #0
   10ce8:	f1bc 0f00 	cmp.w	ip, #0
   10cec:	dd1b      	ble.n	10d26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10cee:	1f0d      	subs	r5, r1, #4
   10cf0:	1f1c      	subs	r4, r3, #4
   10cf2:	f01c 0f01 	tst.w	ip, #1
   10cf6:	d003      	beq.n	10d00 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10cf8:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10cfc:	f844 6f04 	str.w	r6, [r4, #4]!
   10d00:	ea5f 066c 	movs.w	r6, ip, asr #1
   10d04:	d007      	beq.n	10d16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10d06:	686f      	ldr	r7, [r5, #4]
   10d08:	6067      	str	r7, [r4, #4]
   10d0a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10d0e:	f844 7f08 	str.w	r7, [r4, #8]!
   10d12:	1e76      	subs	r6, r6, #1
   10d14:	d1f7      	bne.n	10d06 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10d16:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10d1a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10d1e:	f1cc 0c00 	rsb	ip, ip, #0
   10d22:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10d26:	2a00      	cmp	r2, #0
   10d28:	bf04      	itt	eq
   10d2a:	bcf0      	popeq	{r4, r5, r6, r7}
   10d2c:	4770      	bxeq	lr
   10d2e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10d32:	d226      	bcs.n	10d82 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10d34:	2a00      	cmp	r2, #0
   10d36:	bfdc      	itt	le
   10d38:	bcf0      	pople	{r4, r5, r6, r7}
   10d3a:	4770      	bxle	lr
   10d3c:	1e49      	subs	r1, r1, #1
   10d3e:	1e5b      	subs	r3, r3, #1
   10d40:	f012 0f01 	tst.w	r2, #1
   10d44:	d003      	beq.n	10d4e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10d46:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10d4a:	f803 cf01 	strb.w	ip, [r3, #1]!
   10d4e:	1052      	asrs	r2, r2, #1
   10d50:	bf04      	itt	eq
   10d52:	bcf0      	popeq	{r4, r5, r6, r7}
   10d54:	4770      	bxeq	lr
   10d56:	f891 c001 	ldrb.w	ip, [r1, #1]
   10d5a:	f883 c001 	strb.w	ip, [r3, #1]
   10d5e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10d62:	f803 cf02 	strb.w	ip, [r3, #2]!
   10d66:	1e52      	subs	r2, r2, #1
   10d68:	d1f5      	bne.n	10d56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10d6a:	bcf0      	pop	{r4, r5, r6, r7}
   10d6c:	4770      	bx	lr
   10d6e:	2a04      	cmp	r2, #4
   10d70:	d3d9      	bcc.n	10d26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10d72:	f851 cb04 	ldr.w	ip, [r1], #4
   10d76:	1f12      	subs	r2, r2, #4
   10d78:	f843 cb04 	str.w	ip, [r3], #4
   10d7c:	2a04      	cmp	r2, #4
   10d7e:	d2f8      	bcs.n	10d72 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10d80:	e7d1      	b.n	10d26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10d82:	f811 cb01 	ldrb.w	ip, [r1], #1
   10d86:	f803 cb01 	strb.w	ip, [r3], #1
   10d8a:	1e52      	subs	r2, r2, #1
   10d8c:	d1f9      	bne.n	10d82 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10d8e:	bcf0      	pop	{r4, r5, r6, r7}
   10d90:	4770      	bx	lr

00010d92 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10d92:	b470      	push	{r4, r5, r6}
   10d94:	4603      	mov	r3, r0
   10d96:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10d9a:	f010 0f03 	tst.w	r0, #3
   10d9e:	d009      	beq.n	10db4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10da0:	2a00      	cmp	r2, #0
   10da2:	bf04      	itt	eq
   10da4:	bc70      	popeq	{r4, r5, r6}
   10da6:	4770      	bxeq	lr
   10da8:	f803 cb01 	strb.w	ip, [r3], #1
   10dac:	1e52      	subs	r2, r2, #1
   10dae:	f013 0f03 	tst.w	r3, #3
   10db2:	d1f5      	bne.n	10da0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10db4:	b2c9      	uxtb	r1, r1
   10db6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10dba:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10dbe:	2a03      	cmp	r2, #3
   10dc0:	d939      	bls.n	10e36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10dc2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10dc6:	d236      	bcs.n	10e36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10dc8:	4251      	negs	r1, r2
   10dca:	17cc      	asrs	r4, r1, #31
   10dcc:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10dd0:	1089      	asrs	r1, r1, #2
   10dd2:	424e      	negs	r6, r1
   10dd4:	2e00      	cmp	r6, #0
   10dd6:	dd11      	ble.n	10dfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10dd8:	1f19      	subs	r1, r3, #4
   10dda:	f016 0f01 	tst.w	r6, #1
   10dde:	bf18      	it	ne
   10de0:	f841 5f04 	strne.w	r5, [r1, #4]!
   10de4:	1074      	asrs	r4, r6, #1
   10de6:	d004      	beq.n	10df2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10de8:	604d      	str	r5, [r1, #4]
   10dea:	f841 5f08 	str.w	r5, [r1, #8]!
   10dee:	1e64      	subs	r4, r4, #1
   10df0:	d1fa      	bne.n	10de8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10df2:	4271      	negs	r1, r6
   10df4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10df8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10dfc:	2a00      	cmp	r2, #0
   10dfe:	bf04      	itt	eq
   10e00:	bc70      	popeq	{r4, r5, r6}
   10e02:	4770      	bxeq	lr
   10e04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10e08:	d21d      	bcs.n	10e46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10e0a:	2a00      	cmp	r2, #0
   10e0c:	bfdc      	itt	le
   10e0e:	bc70      	pople	{r4, r5, r6}
   10e10:	4770      	bxle	lr
   10e12:	1e59      	subs	r1, r3, #1
   10e14:	f012 0f01 	tst.w	r2, #1
   10e18:	bf18      	it	ne
   10e1a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10e1e:	1052      	asrs	r2, r2, #1
   10e20:	bf04      	itt	eq
   10e22:	bc70      	popeq	{r4, r5, r6}
   10e24:	4770      	bxeq	lr
   10e26:	f881 c001 	strb.w	ip, [r1, #1]
   10e2a:	f801 cf02 	strb.w	ip, [r1, #2]!
   10e2e:	1e52      	subs	r2, r2, #1
   10e30:	d1f9      	bne.n	10e26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10e32:	bc70      	pop	{r4, r5, r6}
   10e34:	4770      	bx	lr
   10e36:	2a04      	cmp	r2, #4
   10e38:	d3e0      	bcc.n	10dfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10e3a:	1f12      	subs	r2, r2, #4
   10e3c:	f843 5b04 	str.w	r5, [r3], #4
   10e40:	2a04      	cmp	r2, #4
   10e42:	d2fa      	bcs.n	10e3a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10e44:	e7da      	b.n	10dfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10e46:	f803 cb01 	strb.w	ip, [r3], #1
   10e4a:	1e52      	subs	r2, r2, #1
   10e4c:	d1fb      	bne.n	10e46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10e4e:	bc70      	pop	{r4, r5, r6}
   10e50:	4770      	bx	lr
   10e52:	f04f 30ff 	mov.w	r0, #4294967295
   10e56:	4770      	bx	lr
   10e58:	2000      	movs	r0, #0
   10e5a:	4770      	bx	lr
   10e5c:	2000      	movs	r0, #0
   10e5e:	4770      	bx	lr
   10e60:	f04f 30ff 	mov.w	r0, #4294967295
   10e64:	4770      	bx	lr
   10e66:	4770      	bx	lr
   10e68:	4770      	bx	lr
   10e6a:	2000      	movs	r0, #0
   10e6c:	4770      	bx	lr
   10e6e:	2100      	movs	r1, #0
   10e70:	7001      	strb	r1, [r0, #0]
   10e72:	4770      	bx	lr
   10e74:	f04f 30ff 	mov.w	r0, #4294967295
   10e78:	4770      	bx	lr
   10e7a:	f04f 30ff 	mov.w	r0, #4294967295
   10e7e:	4770      	bx	lr
   10e80:	2100      	movs	r1, #0
   10e82:	7001      	strb	r1, [r0, #0]
   10e84:	4770      	bx	lr
   10e86:	f04f 30ff 	mov.w	r0, #4294967295
   10e8a:	4770      	bx	lr
   10e8c:	f04f 30ff 	mov.w	r0, #4294967295
   10e90:	4770      	bx	lr
   10e92:	7800      	ldrb	r0, [r0, #0]
   10e94:	2800      	cmp	r0, #0
   10e96:	d001      	beq.n	10e9c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10e98:	f06f 0015 	mvn.w	r0, #21
   10e9c:	4770      	bx	lr
   10e9e:	2000      	movs	r0, #0
   10ea0:	4770      	bx	lr
   10ea2:	2200      	movs	r2, #0
   10ea4:	f000 b802 	b.w	10eac <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010ea8 <mpsl_fem_init>:
   10ea8:	f7f7 bf84 	b.w	8db4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010eac <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10eac:	b570      	push	{r4, r5, r6, lr}
   10eae:	4614      	mov	r4, r2
   10eb0:	460d      	mov	r5, r1
   10eb2:	1b00      	subs	r0, r0, r4
   10eb4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10eb8:	4288      	cmp	r0, r1
   10eba:	da01      	bge.n	10ec0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10ebc:	4608      	mov	r0, r1
   10ebe:	e002      	b.n	10ec6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10ec0:	287f      	cmp	r0, #127	; 0x7f
   10ec2:	dd00      	ble.n	10ec6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10ec4:	207f      	movs	r0, #127	; 0x7f
   10ec6:	4619      	mov	r1, r3
   10ec8:	b240      	sxtb	r0, r0
   10eca:	f7f7 ffa7 	bl	8e1c <mpsl_tx_power_radio_supported_power_adjust>
   10ece:	7028      	strb	r0, [r5, #0]
   10ed0:	706c      	strb	r4, [r5, #1]
   10ed2:	2100      	movs	r1, #0
   10ed4:	4420      	add	r0, r4
   10ed6:	70a9      	strb	r1, [r5, #2]
   10ed8:	b240      	sxtb	r0, r0
   10eda:	bd70      	pop	{r4, r5, r6, pc}
   10edc:	1702080c 	.word	0x1702080c
   10ee0:	0201010d 	.word	0x0201010d
   10ee4:	01010909 	.word	0x01010909
   10ee8:	18090206 	.word	0x18090206
   10eec:	01010318 	.word	0x01010318
   10ef0:	03030909 	.word	0x03030909
   10ef4:	01020305 	.word	0x01020305
   10ef8:	24020223 	.word	0x24020223
   10efc:	04041009 	.word	0x04041009
   10f00:	0b0b0505 	.word	0x0b0b0505
   10f04:	0b04      	.short	0x0b04
   10f06:	2b          	.byte	0x2b
   10f07:	d8          	.byte	0xd8
   10f08:	f8f4f0ec 	.word	0xf8f4f0ec
   10f0c:	030200fc 	.word	0x030200fc
   10f10:	07060504 	.word	0x07060504
   10f14:	00000008 	.word	0x00000008
	...
   10f28:	01010100 	.word	0x01010100
   10f2c:	02020201 	.word	0x02020201
   10f30:	03030302 	.word	0x03030302
   10f34:	04040403 	.word	0x04040403
   10f38:	05050504 	.word	0x05050504
   10f3c:	07060605 	.word	0x07060605
   10f40:	0b0a0908 	.word	0x0b0a0908
   10f44:	00000d0c 	.word	0x00000d0c
	...
   10f58:	01010000 	.word	0x01010000
   10f5c:	02020101 	.word	0x02020101
   10f60:	03030202 	.word	0x03030202
   10f64:	04040303 	.word	0x04040303
   10f68:	05050404 	.word	0x05050404
   10f6c:	06060505 	.word	0x06060505
   10f70:	00090806 	.word	0x00090806
   10f74:	00000000 	.word	0x00000000

00010f78 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f7c:	b09f      	sub	sp, #124	; 0x7c
   10f7e:	4682      	mov	sl, r0
   10f80:	9103      	str	r1, [sp, #12]
   10f82:	4616      	mov	r6, r2
   10f84:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10f86:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10f88:	7830      	ldrb	r0, [r6, #0]
   10f8a:	b910      	cbnz	r0, 10f92 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10f8c:	4628      	mov	r0, r5
   10f8e:	f000 bd85 	b.w	11a9c <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   10f92:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   10f94:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10f96:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   10f98:	d006      	beq.n	10fa8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   10f9a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   10f9c:	47d0      	blx	sl
   10f9e:	2800      	cmp	r0, #0
   10fa0:	f2c0 857c 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   10fa4:	3501      	adds	r5, #1
		if (bps == NULL) {
   10fa6:	e227      	b.n	113f8 <z_cbvprintf_impl+0x480>
		} state = {
   10fa8:	2218      	movs	r2, #24
   10faa:	2100      	movs	r1, #0
   10fac:	a810      	add	r0, sp, #64	; 0x40
   10fae:	f013 ffb5 	bl	24f1c <memset>
	if (*sp == '%') {
   10fb2:	7873      	ldrb	r3, [r6, #1]
   10fb4:	2b25      	cmp	r3, #37	; 0x25
   10fb6:	d07d      	beq.n	110b4 <z_cbvprintf_impl+0x13c>
   10fb8:	2300      	movs	r3, #0
   10fba:	1c70      	adds	r0, r6, #1
   10fbc:	4698      	mov	r8, r3
   10fbe:	469e      	mov	lr, r3
   10fc0:	469c      	mov	ip, r3
   10fc2:	461f      	mov	r7, r3
   10fc4:	4601      	mov	r1, r0
		switch (*sp) {
   10fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
   10fca:	2a2b      	cmp	r2, #43	; 0x2b
   10fcc:	f000 80a1 	beq.w	11112 <z_cbvprintf_impl+0x19a>
   10fd0:	f200 8098 	bhi.w	11104 <z_cbvprintf_impl+0x18c>
   10fd4:	2a20      	cmp	r2, #32
   10fd6:	f000 809f 	beq.w	11118 <z_cbvprintf_impl+0x1a0>
   10fda:	2a23      	cmp	r2, #35	; 0x23
   10fdc:	f000 809f 	beq.w	1111e <z_cbvprintf_impl+0x1a6>
   10fe0:	b12b      	cbz	r3, 10fee <z_cbvprintf_impl+0x76>
   10fe2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10fea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10fee:	f1b8 0f00 	cmp.w	r8, #0
   10ff2:	d005      	beq.n	11000 <z_cbvprintf_impl+0x88>
   10ff4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10ff8:	f043 0320 	orr.w	r3, r3, #32
   10ffc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11000:	f1be 0f00 	cmp.w	lr, #0
   11004:	d005      	beq.n	11012 <z_cbvprintf_impl+0x9a>
   11006:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1100a:	f043 0310 	orr.w	r3, r3, #16
   1100e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11012:	f1bc 0f00 	cmp.w	ip, #0
   11016:	d005      	beq.n	11024 <z_cbvprintf_impl+0xac>
   11018:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1101c:	f043 0308 	orr.w	r3, r3, #8
   11020:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11024:	b12f      	cbz	r7, 11032 <z_cbvprintf_impl+0xba>
   11026:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1102a:	f043 0304 	orr.w	r3, r3, #4
   1102e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   11032:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11036:	f003 0044 	and.w	r0, r3, #68	; 0x44
   1103a:	2844      	cmp	r0, #68	; 0x44
   1103c:	d103      	bne.n	11046 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   1103e:	f36f 1386 	bfc	r3, #6, #1
   11042:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   11046:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1104a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11050:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   11054:	d17f      	bne.n	11156 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
   11056:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1105a:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   1105e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   11060:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
   11064:	781a      	ldrb	r2, [r3, #0]
   11066:	2a2e      	cmp	r2, #46	; 0x2e
   11068:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1106c:	bf0c      	ite	eq
   1106e:	2101      	moveq	r1, #1
   11070:	2100      	movne	r1, #0
   11072:	f361 0241 	bfi	r2, r1, #1, #1
   11076:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1107a:	d178      	bne.n	1116e <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
   1107c:	785a      	ldrb	r2, [r3, #1]
   1107e:	2a2a      	cmp	r2, #42	; 0x2a
   11080:	d06e      	beq.n	11160 <z_cbvprintf_impl+0x1e8>
	++sp;
   11082:	3301      	adds	r3, #1
	size_t val = 0;
   11084:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11086:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1108a:	4619      	mov	r1, r3
   1108c:	f811 0b01 	ldrb.w	r0, [r1], #1
   11090:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   11094:	2f09      	cmp	r7, #9
   11096:	f240 80ad 	bls.w	111f4 <z_cbvprintf_impl+0x27c>
	conv->unsupported |= ((conv->prec_value < 0)
   1109a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
   1109e:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   110a0:	f3c1 0040 	ubfx	r0, r1, #1, #1
   110a4:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   110a8:	460a      	mov	r2, r1
   110aa:	f360 0241 	bfi	r2, r0, #1, #1
   110ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   110b2:	e05c      	b.n	1116e <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
   110b4:	1cb2      	adds	r2, r6, #2
   110b6:	9206      	str	r2, [sp, #24]
   110b8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   110bc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   110c0:	07d9      	lsls	r1, r3, #31
   110c2:	f140 8150 	bpl.w	11366 <z_cbvprintf_impl+0x3ee>
			width = va_arg(ap, int);
   110c6:	f854 2b04 	ldr.w	r2, [r4], #4
   110ca:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   110cc:	2a00      	cmp	r2, #0
   110ce:	da08      	bge.n	110e2 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
   110d0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   110d4:	f042 0204 	orr.w	r2, r2, #4
   110d8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   110dc:	9a04      	ldr	r2, [sp, #16]
   110de:	4252      	negs	r2, r2
		int width = -1;
   110e0:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   110e2:	075a      	lsls	r2, r3, #29
   110e4:	f140 8147 	bpl.w	11376 <z_cbvprintf_impl+0x3fe>
			int arg = va_arg(ap, int);
   110e8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   110ec:	2f00      	cmp	r7, #0
   110ee:	f280 8146 	bge.w	1137e <z_cbvprintf_impl+0x406>
				conv->prec_present = false;
   110f2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   110f6:	f36f 0341 	bfc	r3, #1, #1
   110fa:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   110fe:	f04f 37ff 	mov.w	r7, #4294967295
   11102:	e13c      	b.n	1137e <z_cbvprintf_impl+0x406>
		switch (*sp) {
   11104:	2a2d      	cmp	r2, #45	; 0x2d
   11106:	d00d      	beq.n	11124 <z_cbvprintf_impl+0x1ac>
   11108:	2a30      	cmp	r2, #48	; 0x30
   1110a:	f47f af69 	bne.w	10fe0 <z_cbvprintf_impl+0x68>
   1110e:	2301      	movs	r3, #1
	} while (loop);
   11110:	e758      	b.n	10fc4 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   11112:	f04f 0c01 	mov.w	ip, #1
   11116:	e755      	b.n	10fc4 <z_cbvprintf_impl+0x4c>
   11118:	f04f 0e01 	mov.w	lr, #1
   1111c:	e752      	b.n	10fc4 <z_cbvprintf_impl+0x4c>
   1111e:	f04f 0801 	mov.w	r8, #1
   11122:	e74f      	b.n	10fc4 <z_cbvprintf_impl+0x4c>
   11124:	2701      	movs	r7, #1
   11126:	e74d      	b.n	10fc4 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
   11128:	fb0e 7202 	mla	r2, lr, r2, r7
   1112c:	3a30      	subs	r2, #48	; 0x30
   1112e:	4603      	mov	r3, r0
   11130:	4618      	mov	r0, r3
   11132:	f810 7b01 	ldrb.w	r7, [r0], #1
   11136:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1113a:	f1bc 0f09 	cmp.w	ip, #9
   1113e:	d9f3      	bls.n	11128 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
   11140:	4299      	cmp	r1, r3
   11142:	d08f      	beq.n	11064 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
   11144:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
   11148:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1114a:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1114c:	f362 0141 	bfi	r1, r2, #1, #1
   11150:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
   11154:	e786      	b.n	11064 <z_cbvprintf_impl+0xec>
   11156:	460b      	mov	r3, r1
	size_t val = 0;
   11158:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1115a:	f04f 0e0a 	mov.w	lr, #10
   1115e:	e7e7      	b.n	11130 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
   11160:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11164:	f042 0204 	orr.w	r2, r2, #4
   11168:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1116c:	3302      	adds	r3, #2
	switch (*sp) {
   1116e:	781a      	ldrb	r2, [r3, #0]
   11170:	2a6c      	cmp	r2, #108	; 0x6c
   11172:	d05f      	beq.n	11234 <z_cbvprintf_impl+0x2bc>
   11174:	d843      	bhi.n	111fe <z_cbvprintf_impl+0x286>
   11176:	2a68      	cmp	r2, #104	; 0x68
   11178:	d049      	beq.n	1120e <z_cbvprintf_impl+0x296>
   1117a:	2a6a      	cmp	r2, #106	; 0x6a
   1117c:	d063      	beq.n	11246 <z_cbvprintf_impl+0x2ce>
   1117e:	2a4c      	cmp	r2, #76	; 0x4c
   11180:	d069      	beq.n	11256 <z_cbvprintf_impl+0x2de>
	conv->specifier = *sp++;
   11182:	f813 2b01 	ldrb.w	r2, [r3], #1
   11186:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   11188:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1118a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   1118e:	f200 80a9 	bhi.w	112e4 <z_cbvprintf_impl+0x36c>
   11192:	2a6d      	cmp	r2, #109	; 0x6d
   11194:	d86c      	bhi.n	11270 <z_cbvprintf_impl+0x2f8>
   11196:	2a69      	cmp	r2, #105	; 0x69
   11198:	f200 80a4 	bhi.w	112e4 <z_cbvprintf_impl+0x36c>
   1119c:	2a57      	cmp	r2, #87	; 0x57
   1119e:	f200 8084 	bhi.w	112aa <z_cbvprintf_impl+0x332>
   111a2:	2a41      	cmp	r2, #65	; 0x41
   111a4:	d004      	beq.n	111b0 <z_cbvprintf_impl+0x238>
   111a6:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   111aa:	2b02      	cmp	r3, #2
   111ac:	f200 809a 	bhi.w	112e4 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_FP;
   111b0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   111b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   111b8:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   111ba:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   111be:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   111c2:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   111c4:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   111c8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   111cc:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   111ce:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   111d2:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   111d4:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   111d8:	b2cb      	uxtb	r3, r1
   111da:	f100 80c2 	bmi.w	11362 <z_cbvprintf_impl+0x3ea>
		if (conv->length_mod == LENGTH_L) {
   111de:	f003 0278 	and.w	r2, r3, #120	; 0x78
   111e2:	2a18      	cmp	r2, #24
   111e4:	f040 80ac 	bne.w	11340 <z_cbvprintf_impl+0x3c8>
			conv->length_mod = LENGTH_NONE;
   111e8:	f36f 03c6 	bfc	r3, #3, #4
   111ec:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   111f0:	2300      	movs	r3, #0
   111f2:	e09b      	b.n	1132c <z_cbvprintf_impl+0x3b4>
		val = 10U * val + *sp++ - '0';
   111f4:	fb0c 0202 	mla	r2, ip, r2, r0
   111f8:	3a30      	subs	r2, #48	; 0x30
   111fa:	460b      	mov	r3, r1
   111fc:	e745      	b.n	1108a <z_cbvprintf_impl+0x112>
	switch (*sp) {
   111fe:	2a74      	cmp	r2, #116	; 0x74
   11200:	d025      	beq.n	1124e <z_cbvprintf_impl+0x2d6>
   11202:	2a7a      	cmp	r2, #122	; 0x7a
   11204:	d1bd      	bne.n	11182 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
   11206:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1120a:	2106      	movs	r1, #6
   1120c:	e00c      	b.n	11228 <z_cbvprintf_impl+0x2b0>
		if (*++sp == 'h') {
   1120e:	785a      	ldrb	r2, [r3, #1]
   11210:	2a68      	cmp	r2, #104	; 0x68
   11212:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11216:	d106      	bne.n	11226 <z_cbvprintf_impl+0x2ae>
			conv->length_mod = LENGTH_HH;
   11218:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1121a:	f361 02c6 	bfi	r2, r1, #3, #4
   1121e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   11222:	3302      	adds	r3, #2
   11224:	e7ad      	b.n	11182 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
   11226:	2102      	movs	r1, #2
   11228:	f361 02c6 	bfi	r2, r1, #3, #4
   1122c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   11230:	3301      	adds	r3, #1
   11232:	e7a6      	b.n	11182 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
   11234:	785a      	ldrb	r2, [r3, #1]
   11236:	2a6c      	cmp	r2, #108	; 0x6c
   11238:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1123c:	d101      	bne.n	11242 <z_cbvprintf_impl+0x2ca>
			conv->length_mod = LENGTH_LL;
   1123e:	2104      	movs	r1, #4
   11240:	e7eb      	b.n	1121a <z_cbvprintf_impl+0x2a2>
			conv->length_mod = LENGTH_L;
   11242:	2103      	movs	r1, #3
   11244:	e7f0      	b.n	11228 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_J;
   11246:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1124a:	2105      	movs	r1, #5
   1124c:	e7ec      	b.n	11228 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_T;
   1124e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11252:	2107      	movs	r1, #7
   11254:	e7e8      	b.n	11228 <z_cbvprintf_impl+0x2b0>
		conv->unsupported = true;
   11256:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1125a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1125e:	f022 0202 	bic.w	r2, r2, #2
   11262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   11266:	f042 0202 	orr.w	r2, r2, #2
   1126a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1126e:	e7df      	b.n	11230 <z_cbvprintf_impl+0x2b8>
	switch (conv->specifier) {
   11270:	3a6e      	subs	r2, #110	; 0x6e
   11272:	b2d3      	uxtb	r3, r2
   11274:	2201      	movs	r2, #1
   11276:	409a      	lsls	r2, r3
   11278:	f240 4382 	movw	r3, #1154	; 0x482
   1127c:	421a      	tst	r2, r3
   1127e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11282:	d136      	bne.n	112f2 <z_cbvprintf_impl+0x37a>
   11284:	f012 0f24 	tst.w	r2, #36	; 0x24
   11288:	d15e      	bne.n	11348 <z_cbvprintf_impl+0x3d0>
   1128a:	07d1      	lsls	r1, r2, #31
   1128c:	d52a      	bpl.n	112e4 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_PTR;
   1128e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11292:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11296:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1129a:	2103      	movs	r1, #3
   1129c:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   112a0:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   112a2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   112a6:	4143      	adcs	r3, r0
   112a8:	e040      	b.n	1132c <z_cbvprintf_impl+0x3b4>
	switch (conv->specifier) {
   112aa:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   112ae:	b2c9      	uxtb	r1, r1
   112b0:	2001      	movs	r0, #1
   112b2:	fa00 f101 	lsl.w	r1, r0, r1
   112b6:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   112ba:	f47f af79 	bne.w	111b0 <z_cbvprintf_impl+0x238>
   112be:	f640 0301 	movw	r3, #2049	; 0x801
   112c2:	4219      	tst	r1, r3
   112c4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   112c8:	d119      	bne.n	112fe <z_cbvprintf_impl+0x386>
   112ca:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   112ce:	d009      	beq.n	112e4 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_SINT;
   112d0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   112d4:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   112d8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   112dc:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   112de:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   112e2:	d185      	bne.n	111f0 <z_cbvprintf_impl+0x278>
		conv->invalid = true;
   112e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   112e8:	f043 0301 	orr.w	r3, r3, #1
   112ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   112f0:	e77e      	b.n	111f0 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_UINT;
   112f2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   112f6:	2102      	movs	r1, #2
   112f8:	f361 0202 	bfi	r2, r1, #0, #3
   112fc:	e7ec      	b.n	112d8 <z_cbvprintf_impl+0x360>
   112fe:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   11302:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   11304:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11308:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1130c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1130e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   11312:	bf02      	ittt	eq
   11314:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   11318:	f041 0101 	orreq.w	r1, r1, #1
   1131c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   11320:	2a63      	cmp	r2, #99	; 0x63
   11322:	f47f af65 	bne.w	111f0 <z_cbvprintf_impl+0x278>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11326:	3b00      	subs	r3, #0
   11328:	bf18      	it	ne
   1132a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1132c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   11330:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11334:	430b      	orrs	r3, r1
   11336:	f363 0241 	bfi	r2, r3, #1, #1
   1133a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1133e:	e6bd      	b.n	110bc <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
   11340:	f013 0f38 	tst.w	r3, #56	; 0x38
   11344:	d1ce      	bne.n	112e4 <z_cbvprintf_impl+0x36c>
   11346:	e753      	b.n	111f0 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_PTR;
   11348:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1134c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1134e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11352:	f361 0202 	bfi	r2, r1, #0, #3
   11356:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1135a:	bf14      	ite	ne
   1135c:	2301      	movne	r3, #1
   1135e:	2300      	moveq	r3, #0
   11360:	e7e4      	b.n	1132c <z_cbvprintf_impl+0x3b4>
			unsupported = true;
   11362:	2301      	movs	r3, #1
   11364:	e7e2      	b.n	1132c <z_cbvprintf_impl+0x3b4>
		} else if (conv->width_present) {
   11366:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1136a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1136c:	bfb4      	ite	lt
   1136e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   11370:	f04f 32ff 	movge.w	r2, #4294967295
   11374:	e6b4      	b.n	110e0 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
   11376:	079f      	lsls	r7, r3, #30
   11378:	f57f aec1 	bpl.w	110fe <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
   1137c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1137e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11380:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   11384:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   11388:	f003 0207 	and.w	r2, r3, #7
   1138c:	2a04      	cmp	r2, #4
   1138e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11392:	d107      	bne.n	113a4 <z_cbvprintf_impl+0x42c>
		    && !conv->prec_present) {
   11394:	0790      	lsls	r0, r2, #30
   11396:	d405      	bmi.n	113a4 <z_cbvprintf_impl+0x42c>
			if (conv->specifier_a) {
   11398:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   1139c:	2900      	cmp	r1, #0
   1139e:	bfac      	ite	ge
   113a0:	2706      	movge	r7, #6
   113a2:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   113a4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   113a8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   113aa:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   113ae:	d133      	bne.n	11418 <z_cbvprintf_impl+0x4a0>
			switch (length_mod) {
   113b0:	1ed3      	subs	r3, r2, #3
   113b2:	2b04      	cmp	r3, #4
   113b4:	d804      	bhi.n	113c0 <z_cbvprintf_impl+0x448>
   113b6:	e8df f003 	tbb	[pc, r3]
   113ba:	4621      	.short	0x4621
   113bc:	2146      	.short	0x2146
   113be:	21          	.byte	0x21
   113bf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   113c0:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   113c2:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   113c4:	ea4f 71e3 	mov.w	r1, r3, asr #31
   113c8:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   113cc:	d11c      	bne.n	11408 <z_cbvprintf_impl+0x490>
				value->sint = (signed char)value->sint;
   113ce:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   113d2:	17d9      	asrs	r1, r3, #31
   113d4:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   113d8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   113da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   113de:	9307      	str	r3, [sp, #28]
   113e0:	0799      	lsls	r1, r3, #30
   113e2:	d050      	beq.n	11486 <z_cbvprintf_impl+0x50e>
			OUTS(sp, fp);
   113e4:	9b06      	ldr	r3, [sp, #24]
   113e6:	9903      	ldr	r1, [sp, #12]
   113e8:	4632      	mov	r2, r6
   113ea:	4650      	mov	r0, sl
   113ec:	f013 f960 	bl	246b0 <outs>
   113f0:	2800      	cmp	r0, #0
   113f2:	f2c0 8353 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   113f6:	4405      	add	r5, r0
			continue;
   113f8:	9e06      	ldr	r6, [sp, #24]
   113fa:	e5c5      	b.n	10f88 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   113fc:	f854 3b04 	ldr.w	r3, [r4], #4
   11400:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   11402:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   11406:	e7e8      	b.n	113da <z_cbvprintf_impl+0x462>
			} else if (length_mod == LENGTH_H) {
   11408:	2a02      	cmp	r2, #2
   1140a:	d1e5      	bne.n	113d8 <z_cbvprintf_impl+0x460>
				value->sint = (short)value->sint;
   1140c:	b219      	sxth	r1, r3
   1140e:	f343 33c0 	sbfx	r3, r3, #15, #1
   11412:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   11416:	e7df      	b.n	113d8 <z_cbvprintf_impl+0x460>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11418:	2b02      	cmp	r3, #2
   1141a:	d124      	bne.n	11466 <z_cbvprintf_impl+0x4ee>
			switch (length_mod) {
   1141c:	1ed3      	subs	r3, r2, #3
   1141e:	2b04      	cmp	r3, #4
   11420:	d804      	bhi.n	1142c <z_cbvprintf_impl+0x4b4>
   11422:	e8df f003 	tbb	[pc, r3]
   11426:	1018      	.short	0x1018
   11428:	1810      	.short	0x1810
   1142a:	18          	.byte	0x18
   1142b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1142c:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
   1142e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11432:	f04f 0100 	mov.w	r1, #0
   11436:	d014      	beq.n	11462 <z_cbvprintf_impl+0x4ea>
			} else if (length_mod == LENGTH_H) {
   11438:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   1143a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1143e:	d1cc      	bne.n	113da <z_cbvprintf_impl+0x462>
				value->uint = (unsigned short)value->uint;
   11440:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11442:	9310      	str	r3, [sp, #64]	; 0x40
   11444:	e7c9      	b.n	113da <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap,
   11446:	3407      	adds	r4, #7
   11448:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1144c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   11450:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   11454:	e7c1      	b.n	113da <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   11456:	f854 3b04 	ldr.w	r3, [r4], #4
   1145a:	9310      	str	r3, [sp, #64]	; 0x40
   1145c:	2300      	movs	r3, #0
   1145e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   11460:	e7bb      	b.n	113da <z_cbvprintf_impl+0x462>
				value->uint = (unsigned char)value->uint;
   11462:	b2db      	uxtb	r3, r3
   11464:	e7cd      	b.n	11402 <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   11466:	2b04      	cmp	r3, #4
   11468:	d108      	bne.n	1147c <z_cbvprintf_impl+0x504>
					(sint_value_type)va_arg(ap, long long);
   1146a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1146c:	f024 0407 	bic.w	r4, r4, #7
   11470:	e9d4 0100 	ldrd	r0, r1, [r4]
   11474:	3408      	adds	r4, #8
   11476:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1147a:	e7ae      	b.n	113da <z_cbvprintf_impl+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1147c:	2b03      	cmp	r3, #3
   1147e:	d1ac      	bne.n	113da <z_cbvprintf_impl+0x462>
			value->ptr = va_arg(ap, void *);
   11480:	f854 3b04 	ldr.w	r3, [r4], #4
   11484:	e7dd      	b.n	11442 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11486:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   1148a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   1148e:	d8b3      	bhi.n	113f8 <z_cbvprintf_impl+0x480>
   11490:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   11494:	d849      	bhi.n	1152a <z_cbvprintf_impl+0x5b2>
   11496:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   1149a:	f000 8091 	beq.w	115c0 <z_cbvprintf_impl+0x648>
   1149e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   114a2:	d9a9      	bls.n	113f8 <z_cbvprintf_impl+0x480>
   114a4:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   114a8:	d003      	beq.n	114b2 <z_cbvprintf_impl+0x53a>
   114aa:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   114ae:	2a02      	cmp	r2, #2
   114b0:	d8a2      	bhi.n	113f8 <z_cbvprintf_impl+0x480>
	} u = {
   114b2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   114b6:	2a00      	cmp	r2, #0
   114b8:	f2c0 8136 	blt.w	11728 <z_cbvprintf_impl+0x7b0>
	} else if (conv->flag_plus) {
   114bc:	9b07      	ldr	r3, [sp, #28]
   114be:	071e      	lsls	r6, r3, #28
   114c0:	f100 8135 	bmi.w	1172e <z_cbvprintf_impl+0x7b6>
	} else if (conv->flag_space) {
   114c4:	f3c3 1900 	ubfx	r9, r3, #4, #1
   114c8:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   114cc:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   114d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   114d4:	2800      	cmp	r0, #0
   114d6:	f040 812d 	bne.w	11734 <z_cbvprintf_impl+0x7bc>
   114da:	ea51 0602 	orrs.w	r6, r1, r2
   114de:	bf14      	ite	ne
   114e0:	2601      	movne	r6, #1
   114e2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   114e4:	02d2      	lsls	r2, r2, #11
   114e6:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   114ea:	02c9      	lsls	r1, r1, #11
		c = 'f';
   114ec:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   114f0:	ea40 0e01 	orr.w	lr, r0, r1
   114f4:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   114f8:	bf08      	it	eq
   114fa:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   114fe:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   11502:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   11506:	f000 8197 	beq.w	11838 <z_cbvprintf_impl+0x8c0>
		if (is_subnormal) {
   1150a:	2e00      	cmp	r6, #0
   1150c:	f040 8144 	bne.w	11798 <z_cbvprintf_impl+0x820>
		fract |= BIT_63;
   11510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11512:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11516:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   1151a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1151c:	2000      	movs	r0, #0
   1151e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   11522:	4606      	mov	r6, r0
		fract *= 5U;
   11524:	f04f 0c05 	mov.w	ip, #5
   11528:	e150      	b.n	117cc <z_cbvprintf_impl+0x854>
		switch (conv->specifier) {
   1152a:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   1152e:	2920      	cmp	r1, #32
   11530:	f63f af62 	bhi.w	113f8 <z_cbvprintf_impl+0x480>
   11534:	a001      	add	r0, pc, #4	; (adr r0, 1153c <z_cbvprintf_impl+0x5c4>)
   11536:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1153a:	bf00      	nop
   1153c:	000116c7 	.word	0x000116c7
   11540:	000113f9 	.word	0x000113f9
   11544:	000113f9 	.word	0x000113f9
   11548:	000113f9 	.word	0x000113f9
   1154c:	000113f9 	.word	0x000113f9
   11550:	000113f9 	.word	0x000113f9
   11554:	000113f9 	.word	0x000113f9
   11558:	000113f9 	.word	0x000113f9
   1155c:	000113f9 	.word	0x000113f9
   11560:	000114b3 	.word	0x000114b3
   11564:	000113f9 	.word	0x000113f9
   11568:	0001164b 	.word	0x0001164b
   1156c:	0001165f 	.word	0x0001165f
   11570:	000114b3 	.word	0x000114b3
   11574:	000114b3 	.word	0x000114b3
   11578:	000114b3 	.word	0x000114b3
   1157c:	000113f9 	.word	0x000113f9
   11580:	0001165f 	.word	0x0001165f
   11584:	000113f9 	.word	0x000113f9
   11588:	000113f9 	.word	0x000113f9
   1158c:	000113f9 	.word	0x000113f9
   11590:	000113f9 	.word	0x000113f9
   11594:	00011701 	.word	0x00011701
   11598:	000116c7 	.word	0x000116c7
   1159c:	000116cd 	.word	0x000116cd
   115a0:	000113f9 	.word	0x000113f9
   115a4:	000113f9 	.word	0x000113f9
   115a8:	000115c7 	.word	0x000115c7
   115ac:	000113f9 	.word	0x000113f9
   115b0:	000116c7 	.word	0x000116c7
   115b4:	000113f9 	.word	0x000113f9
   115b8:	000113f9 	.word	0x000113f9
   115bc:	000116c7 	.word	0x000116c7
			OUTC('%');
   115c0:	9903      	ldr	r1, [sp, #12]
   115c2:	4658      	mov	r0, fp
   115c4:	e4ea      	b.n	10f9c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   115c6:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   115c8:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   115ca:	db3a      	blt.n	11642 <z_cbvprintf_impl+0x6ca>
				len = strnlen(bps, precision);
   115cc:	4639      	mov	r1, r7
   115ce:	4630      	mov	r0, r6
   115d0:	f013 fc80 	bl	24ed4 <strnlen>
			bpe = bps + len;
   115d4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   115d6:	2e00      	cmp	r6, #0
   115d8:	f43f af0e 	beq.w	113f8 <z_cbvprintf_impl+0x480>
		char sign = 0;
   115dc:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   115e0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   115e4:	f013 0210 	ands.w	r2, r3, #16
   115e8:	9205      	str	r2, [sp, #20]
   115ea:	f000 824c 	beq.w	11a86 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   115ee:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   115f0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   115f4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   115f8:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   115fa:	bf18      	it	ne
   115fc:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   115fe:	f8cd 801c 	str.w	r8, [sp, #28]
   11602:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   11604:	bf18      	it	ne
   11606:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   11608:	9b04      	ldr	r3, [sp, #16]
   1160a:	2b00      	cmp	r3, #0
   1160c:	f340 8256 	ble.w	11abc <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   11610:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   11614:	1a1b      	subs	r3, r3, r0
   11616:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   11618:	0753      	lsls	r3, r2, #29
   1161a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   1161e:	f100 824d 	bmi.w	11abc <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   11622:	0650      	lsls	r0, r2, #25
   11624:	f140 823d 	bpl.w	11aa2 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   11628:	f1b9 0f00 	cmp.w	r9, #0
   1162c:	d007      	beq.n	1163e <z_cbvprintf_impl+0x6c6>
						OUTC(sign);
   1162e:	9903      	ldr	r1, [sp, #12]
   11630:	4648      	mov	r0, r9
   11632:	47d0      	blx	sl
   11634:	2800      	cmp	r0, #0
   11636:	f2c0 8231 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   1163a:	3501      	adds	r5, #1
						sign = 0;
   1163c:	46d9      	mov	r9, fp
					pad = '0';
   1163e:	2230      	movs	r2, #48	; 0x30
   11640:	e230      	b.n	11aa4 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   11642:	4630      	mov	r0, r6
   11644:	f013 fc3f 	bl	24ec6 <strlen>
   11648:	e7c4      	b.n	115d4 <z_cbvprintf_impl+0x65c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1164a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1164c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   11650:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   11654:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   11658:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   1165a:	2001      	movs	r0, #1
   1165c:	e7c0      	b.n	115e0 <z_cbvprintf_impl+0x668>
			if (conv->flag_plus) {
   1165e:	9b07      	ldr	r3, [sp, #28]
   11660:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   11662:	bf58      	it	pl
   11664:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   11668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   1166c:	bf54      	ite	pl
   1166e:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   11672:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   11676:	2b00      	cmp	r3, #0
   11678:	da06      	bge.n	11688 <z_cbvprintf_impl+0x710>
				value->uint = (uint_value_type)-sint;
   1167a:	4252      	negs	r2, r2
   1167c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11680:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   11684:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   11688:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   1168c:	9300      	str	r3, [sp, #0]
   1168e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11692:	ab17      	add	r3, sp, #92	; 0x5c
   11694:	aa12      	add	r2, sp, #72	; 0x48
   11696:	f012 ffc5 	bl	24624 <encode_uint>
   1169a:	4606      	mov	r6, r0
			if (precision >= 0) {
   1169c:	2f00      	cmp	r7, #0
   1169e:	db0c      	blt.n	116ba <z_cbvprintf_impl+0x742>
				conv->flag_zero = false;
   116a0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   116a4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   116a8:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   116aa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   116ae:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   116b0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   116b4:	d901      	bls.n	116ba <z_cbvprintf_impl+0x742>
					conv->pad0_value = precision - (int)len;
   116b6:	1afb      	subs	r3, r7, r3
   116b8:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   116ba:	2e00      	cmp	r6, #0
   116bc:	f43f ae9c 	beq.w	113f8 <z_cbvprintf_impl+0x480>
   116c0:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   116c4:	e056      	b.n	11774 <z_cbvprintf_impl+0x7fc>
		switch (conv->specifier) {
   116c6:	f04f 0900 	mov.w	r9, #0
   116ca:	e7dd      	b.n	11688 <z_cbvprintf_impl+0x710>
			if (value->ptr != NULL) {
   116cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   116ce:	2800      	cmp	r0, #0
   116d0:	f000 81d4 	beq.w	11a7c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   116d4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   116d8:	9300      	str	r3, [sp, #0]
   116da:	aa12      	add	r2, sp, #72	; 0x48
   116dc:	ab17      	add	r3, sp, #92	; 0x5c
   116de:	2100      	movs	r1, #0
   116e0:	f012 ffa0 	bl	24624 <encode_uint>
				conv->altform_0c = true;
   116e4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   116e8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   116ec:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   116f0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   116f4:	4606      	mov	r6, r0
				conv->altform_0c = true;
   116f6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   116fa:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   116fe:	e7cd      	b.n	1169c <z_cbvprintf_impl+0x724>
				store_count(conv, value->ptr, count);
   11700:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   11702:	2a07      	cmp	r2, #7
   11704:	f63f ae78 	bhi.w	113f8 <z_cbvprintf_impl+0x480>
   11708:	e8df f002 	tbb	[pc, r2]
   1170c:	0c06040c 	.word	0x0c06040c
   11710:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11714:	701d      	strb	r5, [r3, #0]
		break;
   11716:	e66f      	b.n	113f8 <z_cbvprintf_impl+0x480>
		*(short *)dp = (short)count;
   11718:	801d      	strh	r5, [r3, #0]
		break;
   1171a:	e66d      	b.n	113f8 <z_cbvprintf_impl+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   1171c:	17ea      	asrs	r2, r5, #31
   1171e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   11722:	e669      	b.n	113f8 <z_cbvprintf_impl+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11724:	601d      	str	r5, [r3, #0]
		break;
   11726:	e667      	b.n	113f8 <z_cbvprintf_impl+0x480>
		*sign = '-';
   11728:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1172c:	e6ce      	b.n	114cc <z_cbvprintf_impl+0x554>
		*sign = '+';
   1172e:	f04f 092b 	mov.w	r9, #43	; 0x2b
   11732:	e6cb      	b.n	114cc <z_cbvprintf_impl+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11734:	f240 76ff 	movw	r6, #2047	; 0x7ff
   11738:	42b0      	cmp	r0, r6
   1173a:	d12a      	bne.n	11792 <z_cbvprintf_impl+0x81a>
		if (fract == 0) {
   1173c:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1173e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   11742:	d11e      	bne.n	11782 <z_cbvprintf_impl+0x80a>
			if (isupper((unsigned char)c) != 0) {
   11744:	2b1a      	cmp	r3, #26
   11746:	bf35      	itete	cc
   11748:	2349      	movcc	r3, #73	; 0x49
   1174a:	2369      	movcs	r3, #105	; 0x69
   1174c:	214e      	movcc	r1, #78	; 0x4e
   1174e:	216e      	movcs	r1, #110	; 0x6e
   11750:	bf34      	ite	cc
   11752:	2246      	movcc	r2, #70	; 0x46
   11754:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
   11756:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   1175a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   1175e:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   11762:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   11766:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   1176a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   1176e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   11772:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   11774:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   11776:	f1b9 0f00 	cmp.w	r9, #0
   1177a:	f43f af31 	beq.w	115e0 <z_cbvprintf_impl+0x668>
			nj_len += 1U;
   1177e:	3001      	adds	r0, #1
   11780:	e72e      	b.n	115e0 <z_cbvprintf_impl+0x668>
			if (isupper((unsigned char)c) != 0) {
   11782:	2b19      	cmp	r3, #25
   11784:	bf8b      	itete	hi
   11786:	236e      	movhi	r3, #110	; 0x6e
   11788:	234e      	movls	r3, #78	; 0x4e
   1178a:	2161      	movhi	r1, #97	; 0x61
   1178c:	2141      	movls	r1, #65	; 0x41
   1178e:	461a      	mov	r2, r3
   11790:	e7e1      	b.n	11756 <z_cbvprintf_impl+0x7de>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11792:	2600      	movs	r6, #0
   11794:	e6a6      	b.n	114e4 <z_cbvprintf_impl+0x56c>
				expo--;
   11796:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   11798:	1849      	adds	r1, r1, r1
   1179a:	4152      	adcs	r2, r2
   1179c:	2a00      	cmp	r2, #0
   1179e:	dafa      	bge.n	11796 <z_cbvprintf_impl+0x81e>
   117a0:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   117a4:	e6b4      	b.n	11510 <z_cbvprintf_impl+0x598>
			fract >>= 1;
   117a6:	0849      	lsrs	r1, r1, #1
   117a8:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   117ac:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   117ae:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   117b2:	4640      	mov	r0, r8
			expo++;
   117b4:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   117b8:	d2f5      	bcs.n	117a6 <z_cbvprintf_impl+0x82e>
		fract *= 5U;
   117ba:	fb0c fe02 	mul.w	lr, ip, r2
   117be:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   117c2:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   117c6:	4472      	add	r2, lr
		decexp--;
   117c8:	3e01      	subs	r6, #1
   117ca:	2001      	movs	r0, #1
	while (expo < -2) {
   117cc:	f118 0f02 	cmn.w	r8, #2
   117d0:	dbe9      	blt.n	117a6 <z_cbvprintf_impl+0x82e>
   117d2:	b108      	cbz	r0, 117d8 <z_cbvprintf_impl+0x860>
   117d4:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   117d8:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   117dc:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   117e0:	dc2d      	bgt.n	1183e <z_cbvprintf_impl+0x8c6>
	fract >>= (4 - expo);
   117e2:	f1c8 0004 	rsb	r0, r8, #4
   117e6:	f1a0 0c20 	sub.w	ip, r0, #32
   117ea:	f108 081c 	add.w	r8, r8, #28
   117ee:	40c2      	lsrs	r2, r0
   117f0:	fa01 f808 	lsl.w	r8, r1, r8
   117f4:	fa21 fc0c 	lsr.w	ip, r1, ip
   117f8:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   117fa:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   117fe:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   11802:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   11804:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   11808:	d13a      	bne.n	11880 <z_cbvprintf_impl+0x908>
		if (decexp < (-4 + 1) || decexp > precision) {
   1180a:	1cf0      	adds	r0, r6, #3
   1180c:	db01      	blt.n	11812 <z_cbvprintf_impl+0x89a>
   1180e:	42b7      	cmp	r7, r6
   11810:	da2b      	bge.n	1186a <z_cbvprintf_impl+0x8f2>
			c += 'e' - 'g';  /* e or E */
   11812:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   11816:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   11818:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   1181c:	dd7d      	ble.n	1191a <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
   1181e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   11822:	0683      	lsls	r3, r0, #26
				precision--;
   11824:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   11828:	d477      	bmi.n	1191a <z_cbvprintf_impl+0x9a2>
   1182a:	1e3b      	subs	r3, r7, #0
   1182c:	bf18      	it	ne
   1182e:	2301      	movne	r3, #1
	bool prune_zero = false;
   11830:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   11832:	f107 0801 	add.w	r8, r7, #1
   11836:	e02d      	b.n	11894 <z_cbvprintf_impl+0x91c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11838:	f04f 0800 	mov.w	r8, #0
   1183c:	e66e      	b.n	1151c <z_cbvprintf_impl+0x5a4>
		fract += 2;
   1183e:	3202      	adds	r2, #2
   11840:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11844:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   11846:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   1184a:	f012 febc 	bl	245c6 <_ldiv5>
		expo--;
   1184e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   11852:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   11856:	3601      	adds	r6, #1
			fract <<= 1;
   11858:	1892      	adds	r2, r2, r2
   1185a:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1185c:	2900      	cmp	r1, #0
			expo--;
   1185e:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   11862:	daf9      	bge.n	11858 <z_cbvprintf_impl+0x8e0>
   11864:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   11868:	e7b6      	b.n	117d8 <z_cbvprintf_impl+0x860>
		if (!conv->flag_hash && (precision > 0)) {
   1186a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1186e:	0698      	lsls	r0, r3, #26
			precision -= decexp;
   11870:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   11874:	d44f      	bmi.n	11916 <z_cbvprintf_impl+0x99e>
   11876:	1e3b      	subs	r3, r7, #0
   11878:	bf18      	it	ne
   1187a:	2301      	movne	r3, #1
	bool prune_zero = false;
   1187c:	9305      	str	r3, [sp, #20]
   1187e:	e004      	b.n	1188a <z_cbvprintf_impl+0x912>
   11880:	2300      	movs	r3, #0
	if (c == 'f') {
   11882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   11886:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   11888:	d1d3      	bne.n	11832 <z_cbvprintf_impl+0x8ba>
		if (decimals < 0) {
   1188a:	eb17 0806 	adds.w	r8, r7, r6
   1188e:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11892:	d444      	bmi.n	1191e <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
   11894:	f1b8 0f10 	cmp.w	r8, #16
   11898:	bfa8      	it	ge
   1189a:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1189e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 11b68 <z_cbvprintf_impl+0xbf0>
   118a2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   118a6:	2010      	movs	r0, #16
   118a8:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   118aa:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   118ae:	f1b8 0f00 	cmp.w	r8, #0
   118b2:	d137      	bne.n	11924 <z_cbvprintf_impl+0x9ac>
	fract += round;
   118b4:	1812      	adds	r2, r2, r0
   118b6:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   118ba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   118be:	d241      	bcs.n	11944 <z_cbvprintf_impl+0x9cc>
	fract += round;
   118c0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   118c4:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   118c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   118ca:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   118ce:	f040 80b4 	bne.w	11a3a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   118d2:	2e00      	cmp	r6, #0
   118d4:	dc41      	bgt.n	1195a <z_cbvprintf_impl+0x9e2>
			*buf++ = '0';
   118d6:	2130      	movs	r1, #48	; 0x30
   118d8:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   118dc:	2a00      	cmp	r2, #0
   118de:	d165      	bne.n	119ac <z_cbvprintf_impl+0xa34>
   118e0:	2f00      	cmp	r7, #0
   118e2:	f340 81b2 	ble.w	11c4a <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   118e6:	222e      	movs	r2, #46	; 0x2e
   118e8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   118ec:	b186      	cbz	r6, 11910 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
   118ee:	4272      	negs	r2, r6
   118f0:	42ba      	cmp	r2, r7
   118f2:	bfa8      	it	ge
   118f4:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   118f6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   118fa:	9213      	str	r2, [sp, #76]	; 0x4c
   118fc:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   118fe:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   11902:	bfd4      	ite	le
   11904:	2200      	movle	r2, #0
   11906:	2201      	movgt	r2, #1
   11908:	f362 1145 	bfi	r1, r2, #5, #1
   1190c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   11910:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   11914:	e039      	b.n	1198a <z_cbvprintf_impl+0xa12>
	bool prune_zero = false;
   11916:	2300      	movs	r3, #0
   11918:	e7b0      	b.n	1187c <z_cbvprintf_impl+0x904>
   1191a:	2300      	movs	r3, #0
   1191c:	e788      	b.n	11830 <z_cbvprintf_impl+0x8b8>
			decimals = 0;
   1191e:	f04f 0800 	mov.w	r8, #0
   11922:	e7bc      	b.n	1189e <z_cbvprintf_impl+0x926>
	*v >>= 1;
   11924:	0840      	lsrs	r0, r0, #1
   11926:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   1192a:	085b      	lsrs	r3, r3, #1
   1192c:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   11930:	a80e      	add	r0, sp, #56	; 0x38
   11932:	e9cd 2108 	strd	r2, r1, [sp, #32]
   11936:	f108 38ff 	add.w	r8, r8, #4294967295
   1193a:	f012 fe44 	bl	245c6 <_ldiv5>
   1193e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   11942:	e7b2      	b.n	118aa <z_cbvprintf_impl+0x932>
	*v >>= 1;
   11944:	0852      	lsrs	r2, r2, #1
   11946:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   1194a:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   1194c:	0849      	lsrs	r1, r1, #1
   1194e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   11952:	3601      	adds	r6, #1
	_ldiv5(v);
   11954:	f012 fe37 	bl	245c6 <_ldiv5>
		decexp++;
   11958:	e7b4      	b.n	118c4 <z_cbvprintf_impl+0x94c>
	char *buf = bps;
   1195a:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   1195e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11960:	2900      	cmp	r1, #0
   11962:	dd09      	ble.n	11978 <z_cbvprintf_impl+0xa00>
				*buf++ = _get_digit(&fract, &digit_count);
   11964:	a90b      	add	r1, sp, #44	; 0x2c
   11966:	a80c      	add	r0, sp, #48	; 0x30
   11968:	9207      	str	r2, [sp, #28]
   1196a:	f012 fe44 	bl	245f6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1196e:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   11970:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   11974:	9a07      	ldr	r2, [sp, #28]
   11976:	d1f2      	bne.n	1195e <z_cbvprintf_impl+0x9e6>
			conv->pad0_value = decexp;
   11978:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   1197a:	b99a      	cbnz	r2, 119a4 <z_cbvprintf_impl+0xa2c>
   1197c:	2f00      	cmp	r7, #0
   1197e:	f340 8162 	ble.w	11c46 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
   11982:	212e      	movs	r1, #46	; 0x2e
   11984:	f808 1b01 	strb.w	r1, [r8], #1
   11988:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   1198a:	2f00      	cmp	r7, #0
   1198c:	dd17      	ble.n	119be <z_cbvprintf_impl+0xa46>
   1198e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11990:	2a00      	cmp	r2, #0
   11992:	dd14      	ble.n	119be <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   11994:	a90b      	add	r1, sp, #44	; 0x2c
   11996:	a80c      	add	r0, sp, #48	; 0x30
   11998:	f012 fe2d 	bl	245f6 <_get_digit>
		precision--;
   1199c:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   1199e:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   119a2:	e7f2      	b.n	1198a <z_cbvprintf_impl+0xa12>
			*buf++ = '.';
   119a4:	222e      	movs	r2, #46	; 0x2e
   119a6:	f808 2b01 	strb.w	r2, [r8], #1
   119aa:	e7ed      	b.n	11988 <z_cbvprintf_impl+0xa10>
   119ac:	222e      	movs	r2, #46	; 0x2e
   119ae:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   119b2:	2e00      	cmp	r6, #0
   119b4:	d0ac      	beq.n	11910 <z_cbvprintf_impl+0x998>
   119b6:	2f00      	cmp	r7, #0
   119b8:	dc99      	bgt.n	118ee <z_cbvprintf_impl+0x976>
			*buf++ = '.';
   119ba:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   119be:	9b05      	ldr	r3, [sp, #20]
   119c0:	2b00      	cmp	r3, #0
   119c2:	d14e      	bne.n	11a62 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   119c4:	9714      	str	r7, [sp, #80]	; 0x50
   119c6:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   119c8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   119cc:	2a45      	cmp	r2, #69	; 0x45
   119ce:	d123      	bne.n	11a18 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   119d0:	2e00      	cmp	r6, #0
			decexp = -decexp;
   119d2:	bfba      	itte	lt
   119d4:	4276      	neglt	r6, r6
			*buf++ = '-';
   119d6:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   119d8:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   119da:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   119dc:	bfc8      	it	gt
   119de:	2164      	movgt	r1, #100	; 0x64
   119e0:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   119e2:	bfd1      	iteee	le
   119e4:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   119e6:	fbb6 f3f1 	udivgt	r3, r6, r1
   119ea:	1cfa      	addgt	r2, r7, #3
   119ec:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   119f0:	bfc8      	it	gt
   119f2:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   119f6:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   119fa:	bfc8      	it	gt
   119fc:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   119fe:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   11a02:	fbb6 f3f1 	udiv	r3, r6, r1
   11a06:	4617      	mov	r7, r2
   11a08:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   11a0c:	fb01 6313 	mls	r3, r1, r3, r6
   11a10:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   11a12:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   11a16:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   11a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	dc2c      	bgt.n	11a78 <z_cbvprintf_impl+0xb00>
   11a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11a20:	2b00      	cmp	r3, #0
   11a22:	bfd4      	ite	le
   11a24:	2300      	movle	r3, #0
   11a26:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11a28:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   11a2c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   11a30:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   11a32:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   11a36:	703b      	strb	r3, [r7, #0]
	return bps;
   11a38:	e69b      	b.n	11772 <z_cbvprintf_impl+0x7fa>
		*buf = _get_digit(&fract, &digit_count);
   11a3a:	a90b      	add	r1, sp, #44	; 0x2c
   11a3c:	a80c      	add	r0, sp, #48	; 0x30
   11a3e:	9207      	str	r2, [sp, #28]
   11a40:	f012 fdd9 	bl	245f6 <_get_digit>
		if (*buf++ != '0') {
   11a44:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   11a46:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   11a4a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11a4c:	bf18      	it	ne
   11a4e:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   11a52:	b912      	cbnz	r2, 11a5a <z_cbvprintf_impl+0xae2>
   11a54:	2f00      	cmp	r7, #0
   11a56:	f340 80f8 	ble.w	11c4a <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   11a5a:	222e      	movs	r2, #46	; 0x2e
   11a5c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   11a60:	e756      	b.n	11910 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
   11a62:	4647      	mov	r7, r8
   11a64:	f108 38ff 	add.w	r8, r8, #4294967295
   11a68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   11a6c:	2a30      	cmp	r2, #48	; 0x30
   11a6e:	d0f8      	beq.n	11a62 <z_cbvprintf_impl+0xaea>
   11a70:	2a2e      	cmp	r2, #46	; 0x2e
   11a72:	bf08      	it	eq
   11a74:	4647      	moveq	r7, r8
   11a76:	e7a7      	b.n	119c8 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   11a78:	2301      	movs	r3, #1
   11a7a:	e7d5      	b.n	11a28 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   11a7c:	4f3c      	ldr	r7, [pc, #240]	; (11b70 <z_cbvprintf_impl+0xbf8>)
		char sign = 0;
   11a7e:	4681      	mov	r9, r0
			bps = "(nil)";
   11a80:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   11a82:	2005      	movs	r0, #5
   11a84:	e5ac      	b.n	115e0 <z_cbvprintf_impl+0x668>
		} else if (conv->altform_0) {
   11a86:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11a88:	bf48      	it	mi
   11a8a:	3001      	addmi	r0, #1
   11a8c:	e5b0      	b.n	115f0 <z_cbvprintf_impl+0x678>
					OUTC(pad);
   11a8e:	4610      	mov	r0, r2
   11a90:	9209      	str	r2, [sp, #36]	; 0x24
   11a92:	9903      	ldr	r1, [sp, #12]
   11a94:	47d0      	blx	sl
   11a96:	2800      	cmp	r0, #0
   11a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a9a:	da05      	bge.n	11aa8 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   11a9c:	b01f      	add	sp, #124	; 0x7c
   11a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11aa2:	2220      	movs	r2, #32
					pad = '0';
   11aa4:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   11aa8:	4659      	mov	r1, fp
   11aaa:	2900      	cmp	r1, #0
   11aac:	f10b 3bff 	add.w	fp, fp, #4294967295
   11ab0:	dced      	bgt.n	11a8e <z_cbvprintf_impl+0xb16>
   11ab2:	9b04      	ldr	r3, [sp, #16]
   11ab4:	f8cd b010 	str.w	fp, [sp, #16]
   11ab8:	442b      	add	r3, r5
   11aba:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   11abc:	f1b9 0f00 	cmp.w	r9, #0
   11ac0:	d005      	beq.n	11ace <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   11ac2:	9903      	ldr	r1, [sp, #12]
   11ac4:	4648      	mov	r0, r9
   11ac6:	47d0      	blx	sl
   11ac8:	2800      	cmp	r0, #0
   11aca:	dbe7      	blt.n	11a9c <z_cbvprintf_impl+0xb24>
   11acc:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   11ace:	9b08      	ldr	r3, [sp, #32]
   11ad0:	2b00      	cmp	r3, #0
   11ad2:	d07d      	beq.n	11bd0 <z_cbvprintf_impl+0xc58>
			if (conv->specifier_a) {
   11ad4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   11ad8:	2b00      	cmp	r3, #0
   11ada:	db28      	blt.n	11b2e <z_cbvprintf_impl+0xbb6>
   11adc:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
   11ade:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11ae2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11ae6:	2b09      	cmp	r3, #9
   11ae8:	46d9      	mov	r9, fp
   11aea:	f10b 0b01 	add.w	fp, fp, #1
   11aee:	d946      	bls.n	11b7e <z_cbvprintf_impl+0xc06>
				if (!conv->pad_postdp) {
   11af0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11af4:	1bae      	subs	r6, r5, r6
   11af6:	0699      	lsls	r1, r3, #26
   11af8:	444e      	add	r6, r9
   11afa:	d407      	bmi.n	11b0c <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
   11afc:	4642      	mov	r2, r8
   11afe:	2a00      	cmp	r2, #0
   11b00:	f108 38ff 	add.w	r8, r8, #4294967295
   11b04:	dc40      	bgt.n	11b88 <z_cbvprintf_impl+0xc10>
   11b06:	9b07      	ldr	r3, [sp, #28]
   11b08:	4433      	add	r3, r6
   11b0a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   11b0c:	f899 0000 	ldrb.w	r0, [r9]
   11b10:	282e      	cmp	r0, #46	; 0x2e
   11b12:	d10a      	bne.n	11b2a <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
   11b14:	9903      	ldr	r1, [sp, #12]
   11b16:	47d0      	blx	sl
						OUTC('0');
   11b18:	2800      	cmp	r0, #0
   11b1a:	dbbf      	blt.n	11a9c <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   11b1c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   11b20:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   11b24:	dc36      	bgt.n	11b94 <z_cbvprintf_impl+0xc1c>
					OUTC(*cp++);
   11b26:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
   11b2a:	464d      	mov	r5, r9
   11b2c:	e03d      	b.n	11baa <z_cbvprintf_impl+0xc32>
   11b2e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   11b30:	f899 0000 	ldrb.w	r0, [r9]
   11b34:	2870      	cmp	r0, #112	; 0x70
   11b36:	46c8      	mov	r8, r9
   11b38:	f109 0901 	add.w	r9, r9, #1
   11b3c:	d11a      	bne.n	11b74 <z_cbvprintf_impl+0xbfc>
   11b3e:	1bae      	subs	r6, r5, r6
   11b40:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11b42:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   11b44:	4435      	add	r5, r6
   11b46:	1bab      	subs	r3, r5, r6
   11b48:	2b00      	cmp	r3, #0
   11b4a:	dc39      	bgt.n	11bc0 <z_cbvprintf_impl+0xc48>
			OUTS(cp, bpe);
   11b4c:	9903      	ldr	r1, [sp, #12]
   11b4e:	463b      	mov	r3, r7
   11b50:	4642      	mov	r2, r8
   11b52:	4650      	mov	r0, sl
   11b54:	f012 fdac 	bl	246b0 <outs>
   11b58:	2800      	cmp	r0, #0
   11b5a:	db9f      	blt.n	11a9c <z_cbvprintf_impl+0xb24>
   11b5c:	4430      	add	r0, r6
   11b5e:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   11b60:	4605      	mov	r5, r0
   11b62:	4406      	add	r6, r0
   11b64:	e06a      	b.n	11c3c <z_cbvprintf_impl+0xcc4>
   11b66:	bf00      	nop
   11b68:	00000000 	.word	0x00000000
   11b6c:	08000000 	.word	0x08000000
   11b70:	0002842c 	.word	0x0002842c
					OUTC(*cp++);
   11b74:	9903      	ldr	r1, [sp, #12]
   11b76:	47d0      	blx	sl
   11b78:	2800      	cmp	r0, #0
   11b7a:	dad9      	bge.n	11b30 <z_cbvprintf_impl+0xbb8>
   11b7c:	e78e      	b.n	11a9c <z_cbvprintf_impl+0xb24>
					OUTC(*cp++);
   11b7e:	9903      	ldr	r1, [sp, #12]
   11b80:	47d0      	blx	sl
   11b82:	2800      	cmp	r0, #0
   11b84:	daab      	bge.n	11ade <z_cbvprintf_impl+0xb66>
   11b86:	e789      	b.n	11a9c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11b88:	9903      	ldr	r1, [sp, #12]
   11b8a:	2030      	movs	r0, #48	; 0x30
   11b8c:	47d0      	blx	sl
   11b8e:	2800      	cmp	r0, #0
   11b90:	dab4      	bge.n	11afc <z_cbvprintf_impl+0xb84>
   11b92:	e783      	b.n	11a9c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11b94:	9903      	ldr	r1, [sp, #12]
   11b96:	2030      	movs	r0, #48	; 0x30
   11b98:	47d0      	blx	sl
   11b9a:	f108 38ff 	add.w	r8, r8, #4294967295
   11b9e:	e7bb      	b.n	11b18 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
   11ba0:	9903      	ldr	r1, [sp, #12]
   11ba2:	47d0      	blx	sl
   11ba4:	2800      	cmp	r0, #0
   11ba6:	f6ff af79 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp) != 0) {
   11baa:	7828      	ldrb	r0, [r5, #0]
   11bac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11bb0:	2b09      	cmp	r3, #9
   11bb2:	46a8      	mov	r8, r5
   11bb4:	f105 0501 	add.w	r5, r5, #1
   11bb8:	d9f2      	bls.n	11ba0 <z_cbvprintf_impl+0xc28>
   11bba:	eba6 0609 	sub.w	r6, r6, r9
   11bbe:	e7bf      	b.n	11b40 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
   11bc0:	9903      	ldr	r1, [sp, #12]
   11bc2:	2030      	movs	r0, #48	; 0x30
   11bc4:	47d0      	blx	sl
   11bc6:	2800      	cmp	r0, #0
   11bc8:	f6ff af68 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   11bcc:	3601      	adds	r6, #1
   11bce:	e7ba      	b.n	11b46 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
   11bd0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11bd4:	06da      	lsls	r2, r3, #27
   11bd6:	d401      	bmi.n	11bdc <z_cbvprintf_impl+0xc64>
   11bd8:	071b      	lsls	r3, r3, #28
   11bda:	d506      	bpl.n	11bea <z_cbvprintf_impl+0xc72>
				OUTC('0');
   11bdc:	9903      	ldr	r1, [sp, #12]
   11bde:	2030      	movs	r0, #48	; 0x30
   11be0:	47d0      	blx	sl
   11be2:	2800      	cmp	r0, #0
   11be4:	f6ff af5a 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   11be8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11bea:	9b05      	ldr	r3, [sp, #20]
   11bec:	b13b      	cbz	r3, 11bfe <z_cbvprintf_impl+0xc86>
				OUTC(conv->specifier);
   11bee:	9903      	ldr	r1, [sp, #12]
   11bf0:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   11bf4:	47d0      	blx	sl
   11bf6:	2800      	cmp	r0, #0
   11bf8:	f6ff af50 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   11bfc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11bfe:	44a8      	add	r8, r5
   11c00:	e006      	b.n	11c10 <z_cbvprintf_impl+0xc98>
				OUTC('0');
   11c02:	9903      	ldr	r1, [sp, #12]
   11c04:	2030      	movs	r0, #48	; 0x30
   11c06:	47d0      	blx	sl
   11c08:	2800      	cmp	r0, #0
   11c0a:	f6ff af47 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   11c0e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11c10:	eba8 0305 	sub.w	r3, r8, r5
   11c14:	2b00      	cmp	r3, #0
   11c16:	dcf4      	bgt.n	11c02 <z_cbvprintf_impl+0xc8a>
			OUTS(bps, bpe);
   11c18:	9903      	ldr	r1, [sp, #12]
   11c1a:	463b      	mov	r3, r7
   11c1c:	4632      	mov	r2, r6
   11c1e:	4650      	mov	r0, sl
   11c20:	f012 fd46 	bl	246b0 <outs>
   11c24:	2800      	cmp	r0, #0
   11c26:	f6ff af39 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   11c2a:	4428      	add	r0, r5
   11c2c:	e797      	b.n	11b5e <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
   11c2e:	9903      	ldr	r1, [sp, #12]
   11c30:	2020      	movs	r0, #32
   11c32:	47d0      	blx	sl
   11c34:	2800      	cmp	r0, #0
   11c36:	f6ff af31 	blt.w	11a9c <z_cbvprintf_impl+0xb24>
   11c3a:	3501      	adds	r5, #1
		while (width > 0) {
   11c3c:	1b73      	subs	r3, r6, r5
   11c3e:	2b00      	cmp	r3, #0
   11c40:	dcf5      	bgt.n	11c2e <z_cbvprintf_impl+0xcb6>
   11c42:	f7ff bbd9 	b.w	113f8 <z_cbvprintf_impl+0x480>
			decexp = 0;
   11c46:	4616      	mov	r6, r2
   11c48:	e6b9      	b.n	119be <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   11c4a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   11c4e:	e6b6      	b.n	119be <z_cbvprintf_impl+0xa46>

00011c50 <uart_work_handler.part.0>:
		break;
	}
}

// used in case UART_RX is disabled 
static void uart_work_handler(struct k_work *item)
   11c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	buf = k_malloc(sizeof(*buf));
	if (buf) {
		buf->len = 0;
	} else {
		LOG_WRN("UART_WORK_HANDLER\nNot able to allocate UART receive buffer");
   11c52:	4b09      	ldr	r3, [pc, #36]	; (11c78 <uart_work_handler.part.0+0x28>)
   11c54:	9305      	str	r3, [sp, #20]
   11c56:	aa04      	add	r2, sp, #16
   11c58:	2302      	movs	r3, #2
   11c5a:	4808      	ldr	r0, [pc, #32]	; (11c7c <uart_work_handler.part.0+0x2c>)
   11c5c:	9304      	str	r3, [sp, #16]
   11c5e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c62:	f012 fa7f 	bl	24164 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11c66:	4806      	ldr	r0, [pc, #24]	; (11c80 <uart_work_handler.part.0+0x30>)
   11c68:	f240 6267 	movw	r2, #1639	; 0x667
   11c6c:	2300      	movs	r3, #0
		return;
	}

	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
}
   11c6e:	b007      	add	sp, #28
   11c70:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11c74:	f00f bcf2 	b.w	2165c <k_work_reschedule>
   11c78:	00027bd0 	.word	0x00027bd0
   11c7c:	00027320 	.word	0x00027320
   11c80:	20001738 	.word	0x20001738

00011c84 <on_le_param_updated>:
		dk_set_led_off(CON_STATUS_LED);
	}
}

void on_le_param_updated(struct bt_conn *conn, uint16_t interval, uint16_t latency, uint16_t timeout)
{
   11c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c86:	af00      	add	r7, sp, #0
    double connection_interval = interval*1.25;         // in ms
    uint16_t supervision_timeout = timeout*10;          // in ms
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11c88:	b08a      	sub	sp, #40	; 0x28
{
   11c8a:	4608      	mov	r0, r1
   11c8c:	4616      	mov	r6, r2
   11c8e:	461c      	mov	r4, r3
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11c90:	466d      	mov	r5, sp
   11c92:	4b0f      	ldr	r3, [pc, #60]	; (11cd0 <on_le_param_updated+0x4c>)
   11c94:	616b      	str	r3, [r5, #20]
    double connection_interval = interval*1.25;         // in ms
   11c96:	f7ee fb75 	bl	384 <__aeabi_i2d>
   11c9a:	4b0e      	ldr	r3, [pc, #56]	; (11cd4 <on_le_param_updated+0x50>)
   11c9c:	2200      	movs	r2, #0
   11c9e:	f7ee fbdb 	bl	458 <__aeabi_dmul>
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11ca2:	2200      	movs	r2, #0
   11ca4:	2300      	movs	r3, #0
   11ca6:	f7ee fa21 	bl	ec <__adddf3>
    uint16_t supervision_timeout = timeout*10;          // in ms
   11caa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11cae:	462a      	mov	r2, r5
    uint16_t supervision_timeout = timeout*10;          // in ms
   11cb0:	0064      	lsls	r4, r4, #1
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11cb2:	2306      	movs	r3, #6
   11cb4:	b2a4      	uxth	r4, r4
   11cb6:	e9c5 0106 	strd	r0, r1, [r5, #24]
   11cba:	622e      	str	r6, [r5, #32]
   11cbc:	626c      	str	r4, [r5, #36]	; 0x24
   11cbe:	4806      	ldr	r0, [pc, #24]	; (11cd8 <on_le_param_updated+0x54>)
   11cc0:	f842 3f10 	str.w	r3, [r2, #16]!
   11cc4:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   11cc8:	f012 fa4c 	bl	24164 <z_log_msg_static_create.constprop.0>
}
   11ccc:	46bd      	mov	sp, r7
   11cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cd0:	00027c0b 	.word	0x00027c0b
   11cd4:	3ff40000 	.word	0x3ff40000
   11cd8:	00027320 	.word	0x00027320

00011cdc <uart_work_handler>:
{
   11cdc:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
   11cde:	2018      	movs	r0, #24
   11ce0:	f015 f9b8 	bl	27054 <k_malloc>
	if (buf) {
   11ce4:	b138      	cbz	r0, 11cf6 <uart_work_handler+0x1a>
		buf->len = 0;
   11ce6:	2300      	movs	r3, #0
   11ce8:	8283      	strh	r3, [r0, #20]
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11cea:	1d01      	adds	r1, r0, #4
}
   11cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11cf0:	4803      	ldr	r0, [pc, #12]	; (11d00 <uart_work_handler+0x24>)
   11cf2:	f012 ba3a 	b.w	2416a <uart_rx_enable.constprop.0>
}
   11cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11cfa:	f7ff bfa9 	b.w	11c50 <uart_work_handler.part.0>
   11cfe:	bf00      	nop
   11d00:	00027160 	.word	0x00027160

00011d04 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11d04:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11d06:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11d08:	b08a      	sub	sp, #40	; 0x28
   11d0a:	4604      	mov	r4, r0
   11d0c:	460e      	mov	r6, r1
   11d0e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11d10:	2b03      	cmp	r3, #3
   11d12:	d820      	bhi.n	11d56 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11d14:	e8df f003 	tbb	[pc, r3]
   11d18:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11d1c:	4911      	ldr	r1, [pc, #68]	; (11d64 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11d1e:	4628      	mov	r0, r5
   11d20:	f013 f8c7 	bl	24eb2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11d24:	9505      	str	r5, [sp, #20]
   11d26:	7863      	ldrb	r3, [r4, #1]
   11d28:	9304      	str	r3, [sp, #16]
   11d2a:	78a3      	ldrb	r3, [r4, #2]
   11d2c:	9303      	str	r3, [sp, #12]
   11d2e:	78e3      	ldrb	r3, [r4, #3]
   11d30:	9302      	str	r3, [sp, #8]
   11d32:	7923      	ldrb	r3, [r4, #4]
   11d34:	9301      	str	r3, [sp, #4]
   11d36:	7963      	ldrb	r3, [r4, #5]
   11d38:	9300      	str	r3, [sp, #0]
   11d3a:	79a3      	ldrb	r3, [r4, #6]
   11d3c:	4a0a      	ldr	r2, [pc, #40]	; (11d68 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11d3e:	211e      	movs	r1, #30
   11d40:	4630      	mov	r0, r6
   11d42:	f012 faa9 	bl	24298 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11d46:	b00a      	add	sp, #40	; 0x28
   11d48:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11d4a:	4908      	ldr	r1, [pc, #32]	; (11d6c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11d4c:	e7e7      	b.n	11d1e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11d4e:	4908      	ldr	r1, [pc, #32]	; (11d70 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11d50:	e7e5      	b.n	11d1e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11d52:	4908      	ldr	r1, [pc, #32]	; (11d74 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11d54:	e7e3      	b.n	11d1e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11d56:	4a08      	ldr	r2, [pc, #32]	; (11d78 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11d58:	210a      	movs	r1, #10
   11d5a:	4628      	mov	r0, r5
   11d5c:	f012 fa9c 	bl	24298 <snprintk>
		break;
   11d60:	e7e0      	b.n	11d24 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11d62:	bf00      	nop
   11d64:	00027c60 	.word	0x00027c60
   11d68:	00027c82 	.word	0x00027c82
   11d6c:	00027c67 	.word	0x00027c67
   11d70:	00027c6e 	.word	0x00027c6e
   11d74:	00027c78 	.word	0x00027c78
   11d78:	0002a1bb 	.word	0x0002a1bb

00011d7c <disconnected>:
{
   11d7c:	b5b0      	push	{r4, r5, r7, lr}
   11d7e:	b088      	sub	sp, #32
   11d80:	af00      	add	r7, sp, #0
   11d82:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11d84:	f013 fba9 	bl	254da <bt_conn_get_dst>
   11d88:	4639      	mov	r1, r7
   11d8a:	f7ff ffbb 	bl	11d04 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   11d8e:	466d      	mov	r5, sp
   11d90:	b08a      	sub	sp, #40	; 0x28
   11d92:	466a      	mov	r2, sp
   11d94:	4b11      	ldr	r3, [pc, #68]	; (11ddc <disconnected+0x60>)
   11d96:	61d4      	str	r4, [r2, #28]
   11d98:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11da0:	8413      	strh	r3, [r2, #32]
	if (auth_conn) {
   11da2:	4c0f      	ldr	r4, [pc, #60]	; (11de0 <disconnected+0x64>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   11da4:	4b0f      	ldr	r3, [pc, #60]	; (11de4 <disconnected+0x68>)
   11da6:	4810      	ldr	r0, [pc, #64]	; (11de8 <disconnected+0x6c>)
   11da8:	f842 3f10 	str.w	r3, [r2, #16]!
   11dac:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   11db0:	f012 f9d8 	bl	24164 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
   11db4:	6820      	ldr	r0, [r4, #0]
   11db6:	46ad      	mov	sp, r5
   11db8:	b118      	cbz	r0, 11dc2 <disconnected+0x46>
		bt_conn_unref(auth_conn);
   11dba:	f006 ff2f 	bl	18c1c <bt_conn_unref>
		auth_conn = NULL;
   11dbe:	2300      	movs	r3, #0
   11dc0:	6023      	str	r3, [r4, #0]
	if (current_conn) {
   11dc2:	4c0a      	ldr	r4, [pc, #40]	; (11dec <disconnected+0x70>)
   11dc4:	6820      	ldr	r0, [r4, #0]
   11dc6:	b130      	cbz	r0, 11dd6 <disconnected+0x5a>
		bt_conn_unref(current_conn);
   11dc8:	f006 ff28 	bl	18c1c <bt_conn_unref>
		current_conn = NULL;
   11dcc:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
   11dce:	2001      	movs	r0, #1
		current_conn = NULL;
   11dd0:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
   11dd2:	f014 fe05 	bl	269e0 <dk_set_led_off>
}
   11dd6:	3720      	adds	r7, #32
   11dd8:	46bd      	mov	sp, r7
   11dda:	bdb0      	pop	{r4, r5, r7, pc}
   11ddc:	00027ca5 	.word	0x00027ca5
   11de0:	20002d04 	.word	0x20002d04
   11de4:	01000004 	.word	0x01000004
   11de8:	00027320 	.word	0x00027320
   11dec:	20002d08 	.word	0x20002d08

00011df0 <connected>:
{
   11df0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11df4:	b093      	sub	sp, #76	; 0x4c
   11df6:	4680      	mov	r8, r0
   11df8:	af02      	add	r7, sp, #8
	if (err) {
   11dfa:	b191      	cbz	r1, 11e22 <connected+0x32>
		LOG_ERR("Connection failed (err %u)\n", err);
   11dfc:	466c      	mov	r4, sp
   11dfe:	b088      	sub	sp, #32
   11e00:	aa02      	add	r2, sp, #8
   11e02:	4b2b      	ldr	r3, [pc, #172]	; (11eb0 <connected+0xc0>)
   11e04:	e9c2 3105 	strd	r3, r1, [r2, #20]
   		LOG_ERR("bt_conn_get_info() returned %d", err);
   11e08:	2303      	movs	r3, #3
   11e0a:	f842 3f10 	str.w	r3, [r2, #16]!
   11e0e:	4829      	ldr	r0, [pc, #164]	; (11eb4 <connected+0xc4>)
   11e10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11e14:	f012 f9a6 	bl	24164 <z_log_msg_static_create.constprop.0>
   11e18:	46a5      	mov	sp, r4
}
   11e1a:	3744      	adds	r7, #68	; 0x44
   11e1c:	46bd      	mov	sp, r7
   11e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_conn_get_info(conn, &info);
   11e22:	f107 0120 	add.w	r1, r7, #32
   11e26:	f007 f9db 	bl	191e0 <bt_conn_get_info>
	if (err) {
   11e2a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   11e2e:	d006      	beq.n	11e3e <connected+0x4e>
   		LOG_ERR("bt_conn_get_info() returned %d", err);
   11e30:	466c      	mov	r4, sp
   11e32:	b088      	sub	sp, #32
   11e34:	aa02      	add	r2, sp, #8
   11e36:	4b20      	ldr	r3, [pc, #128]	; (11eb8 <connected+0xc8>)
   11e38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11e3c:	e7e4      	b.n	11e08 <connected+0x18>
	double connection_interval = info.le.interval*1.25; // in ms
   11e3e:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
   11e40:	f7ee faa0 	bl	384 <__aeabi_i2d>
   11e44:	2200      	movs	r2, #0
   11e46:	4b1d      	ldr	r3, [pc, #116]	; (11ebc <connected+0xcc>)
   11e48:	f7ee fb06 	bl	458 <__aeabi_dmul>
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
	double connection_interval = info.le.interval*1.25; // in ms
   11e4e:	4604      	mov	r4, r0
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11e54:	4640      	mov	r0, r8
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e56:	005e      	lsls	r6, r3, #1
	double connection_interval = info.le.interval*1.25; // in ms
   11e58:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11e5a:	f013 fb3e 	bl	254da <bt_conn_get_dst>
   11e5e:	4639      	mov	r1, r7
   11e60:	f7ff ff50 	bl	11d04 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
   11e64:	46e9      	mov	r9, sp
   11e66:	b088      	sub	sp, #32
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e68:	b2b6      	uxth	r6, r6
	LOG_INF("Connected %s", addr);
   11e6a:	aa02      	add	r2, sp, #8
   11e6c:	4b14      	ldr	r3, [pc, #80]	; (11ec0 <connected+0xd0>)
   11e6e:	4811      	ldr	r0, [pc, #68]	; (11eb4 <connected+0xc4>)
   11e70:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11e74:	f44f 7300 	mov.w	r3, #512	; 0x200
   11e78:	8393      	strh	r3, [r2, #28]
   11e7a:	4b12      	ldr	r3, [pc, #72]	; (11ec4 <connected+0xd4>)
   11e7c:	f842 3f10 	str.w	r3, [r2, #16]!
   11e80:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   11e84:	f012 f96e 	bl	24164 <z_log_msg_static_create.constprop.0>
	printk("--------------------\nbuffer size %i, connection interval %.2fms, timeout %ims, latency %i\n", CONFIG_BT_NUS_UART_BUFFER_SIZE, connection_interval, supervision_timeout, info.le.latency);
   11e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   11e8a:	480f      	ldr	r0, [pc, #60]	; (11ec8 <connected+0xd8>)
   11e8c:	46cd      	mov	sp, r9
   11e8e:	e9cd 6300 	strd	r6, r3, [sp]
   11e92:	4622      	mov	r2, r4
   11e94:	462b      	mov	r3, r5
   11e96:	2110      	movs	r1, #16
   11e98:	f012 f9f1 	bl	2427e <printk>
	current_conn = bt_conn_ref(conn);
   11e9c:	4640      	mov	r0, r8
   11e9e:	f006 fe8d 	bl	18bbc <bt_conn_ref>
   11ea2:	4b0a      	ldr	r3, [pc, #40]	; (11ecc <connected+0xdc>)
   11ea4:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   11ea6:	2001      	movs	r0, #1
   11ea8:	f014 fd97 	bl	269da <dk_set_led_on>
   11eac:	e7b5      	b.n	11e1a <connected+0x2a>
   11eae:	bf00      	nop
   11eb0:	00027cc2 	.word	0x00027cc2
   11eb4:	00027320 	.word	0x00027320
   11eb8:	00027cde 	.word	0x00027cde
   11ebc:	3ff40000 	.word	0x3ff40000
   11ec0:	00027cfd 	.word	0x00027cfd
   11ec4:	01000003 	.word	0x01000003
   11ec8:	00027d0a 	.word	0x00027d0a
   11ecc:	20002d08 	.word	0x20002d08

00011ed0 <uart_cb>:
{
   11ed0:	b510      	push	{r4, lr}
	switch (evt->type) {
   11ed2:	780b      	ldrb	r3, [r1, #0]
{
   11ed4:	b086      	sub	sp, #24
	switch (evt->type) {
   11ed6:	2b05      	cmp	r3, #5
   11ed8:	d828      	bhi.n	11f2c <uart_cb+0x5c>
   11eda:	e8df f003 	tbb	[pc, r3]
   11ede:	7a03      	.short	0x7a03
   11ee0:	4627682b 	.word	0x4627682b
		if ((evt->data.tx.len == 0) ||
   11ee4:	688b      	ldr	r3, [r1, #8]
   11ee6:	b30b      	cbz	r3, 11f2c <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
   11ee8:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   11eea:	b1f8      	cbz	r0, 11f2c <uart_cb+0x5c>
		if (aborted_buf) {
   11eec:	4a43      	ldr	r2, [pc, #268]	; (11ffc <uart_cb+0x12c>)
   11eee:	6813      	ldr	r3, [r2, #0]
   11ef0:	b1f3      	cbz	r3, 11f30 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   11ef2:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   11ef4:	2300      	movs	r3, #0
   11ef6:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   11ef8:	4a41      	ldr	r2, [pc, #260]	; (12000 <uart_cb+0x130>)
   11efa:	6013      	str	r3, [r2, #0]
		k_free(buf);
   11efc:	f015 f8a3 	bl	27046 <k_free>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
   11f00:	4840      	ldr	r0, [pc, #256]	; (12004 <uart_cb+0x134>)
   11f02:	2200      	movs	r2, #0
   11f04:	2300      	movs	r3, #0
   11f06:	f00e fe2d 	bl	20b64 <z_impl_k_queue_get>
		if (!buf) {
   11f0a:	b178      	cbz	r0, 11f2c <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   11f0c:	8a82      	ldrh	r2, [r0, #20]
   11f0e:	1d01      	adds	r1, r0, #4
   11f10:	483d      	ldr	r0, [pc, #244]	; (12008 <uart_cb+0x138>)
   11f12:	f012 f933 	bl	2417c <uart_tx.constprop.0>
   11f16:	b148      	cbz	r0, 11f2c <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
   11f18:	4b3c      	ldr	r3, [pc, #240]	; (1200c <uart_cb+0x13c>)
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   11f1a:	9305      	str	r3, [sp, #20]
   11f1c:	483c      	ldr	r0, [pc, #240]	; (12010 <uart_cb+0x140>)
   11f1e:	2302      	movs	r3, #2
   11f20:	aa04      	add	r2, sp, #16
   11f22:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11f26:	9304      	str	r3, [sp, #16]
   11f28:	f012 f91c 	bl	24164 <z_log_msg_static_create.constprop.0>
}
   11f2c:	b006      	add	sp, #24
   11f2e:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
   11f30:	3804      	subs	r0, #4
   11f32:	e7e3      	b.n	11efc <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   11f34:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
   11f36:	68cb      	ldr	r3, [r1, #12]
   11f38:	8a10      	ldrh	r0, [r2, #16]
   11f3a:	4403      	add	r3, r0
		if (disable_req) {
   11f3c:	4835      	ldr	r0, [pc, #212]	; (12014 <uart_cb+0x144>)
		buf->len += evt->data.rx.len;
   11f3e:	b29b      	uxth	r3, r3
   11f40:	8213      	strh	r3, [r2, #16]
		if (disable_req) {
   11f42:	7802      	ldrb	r2, [r0, #0]
   11f44:	2a00      	cmp	r2, #0
   11f46:	d1f1      	bne.n	11f2c <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   11f48:	684a      	ldr	r2, [r1, #4]
   11f4a:	4413      	add	r3, r2
   11f4c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   11f50:	2b0a      	cmp	r3, #10
   11f52:	d001      	beq.n	11f58 <uart_cb+0x88>
   11f54:	2b0d      	cmp	r3, #13
   11f56:	d1e9      	bne.n	11f2c <uart_cb+0x5c>
			disable_req = true;
   11f58:	2301      	movs	r3, #1
   11f5a:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   11f5c:	482a      	ldr	r0, [pc, #168]	; (12008 <uart_cb+0x138>)
   11f5e:	6883      	ldr	r3, [r0, #8]
   11f60:	695b      	ldr	r3, [r3, #20]
}
   11f62:	b006      	add	sp, #24
   11f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f68:	4718      	bx	r3
		disable_req = false;
   11f6a:	4b2a      	ldr	r3, [pc, #168]	; (12014 <uart_cb+0x144>)
   11f6c:	2400      	movs	r4, #0
		buf = k_malloc(sizeof(*buf));
   11f6e:	2018      	movs	r0, #24
		disable_req = false;
   11f70:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
   11f72:	f015 f86f 	bl	27054 <k_malloc>
		if (buf) {
   11f76:	b138      	cbz	r0, 11f88 <uart_cb+0xb8>
			buf->len = 0;
   11f78:	8284      	strh	r4, [r0, #20]
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   11f7a:	1d01      	adds	r1, r0, #4
   11f7c:	4822      	ldr	r0, [pc, #136]	; (12008 <uart_cb+0x138>)
}
   11f7e:	b006      	add	sp, #24
   11f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   11f84:	f012 b8f1 	b.w	2416a <uart_rx_enable.constprop.0>
			LOG_WRN("UART_RX_DISABLED\nNot able to allocate UART receive buffer");
   11f88:	4b23      	ldr	r3, [pc, #140]	; (12018 <uart_cb+0x148>)
   11f8a:	9305      	str	r3, [sp, #20]
   11f8c:	aa04      	add	r2, sp, #16
   11f8e:	2302      	movs	r3, #2
   11f90:	481f      	ldr	r0, [pc, #124]	; (12010 <uart_cb+0x140>)
   11f92:	9304      	str	r3, [sp, #16]
   11f94:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11f98:	f012 f8e4 	bl	24164 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11f9c:	481f      	ldr	r0, [pc, #124]	; (1201c <uart_cb+0x14c>)
   11f9e:	f240 6267 	movw	r2, #1639	; 0x667
   11fa2:	2300      	movs	r3, #0
}
   11fa4:	b006      	add	sp, #24
   11fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11faa:	f00f bb57 	b.w	2165c <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   11fae:	2018      	movs	r0, #24
   11fb0:	f015 f850 	bl	27054 <k_malloc>
		if (buf) {
   11fb4:	4601      	mov	r1, r0
   11fb6:	b150      	cbz	r0, 11fce <uart_cb+0xfe>
			buf->len = 0;
   11fb8:	2300      	movs	r3, #0
   11fba:	8283      	strh	r3, [r0, #20]
	return api->rx_buf_rsp(dev, buf, len);
   11fbc:	4812      	ldr	r0, [pc, #72]	; (12008 <uart_cb+0x138>)
   11fbe:	6883      	ldr	r3, [r0, #8]
   11fc0:	691b      	ldr	r3, [r3, #16]
   11fc2:	2210      	movs	r2, #16
   11fc4:	3104      	adds	r1, #4
}
   11fc6:	b006      	add	sp, #24
   11fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11fcc:	4718      	bx	r3
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   11fce:	4b14      	ldr	r3, [pc, #80]	; (12020 <uart_cb+0x150>)
   11fd0:	e7a3      	b.n	11f1a <uart_cb+0x4a>
		if (!aborted_buf) {
   11fd2:	4a0a      	ldr	r2, [pc, #40]	; (11ffc <uart_cb+0x12c>)
   11fd4:	6813      	ldr	r3, [r2, #0]
   11fd6:	b90b      	cbnz	r3, 11fdc <uart_cb+0x10c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
   11fd8:	684b      	ldr	r3, [r1, #4]
   11fda:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
   11fdc:	4808      	ldr	r0, [pc, #32]	; (12000 <uart_cb+0x130>)
   11fde:	688b      	ldr	r3, [r1, #8]
   11fe0:	6801      	ldr	r1, [r0, #0]
   11fe2:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   11fe4:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
   11fe6:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
   11fe8:	8a0a      	ldrh	r2, [r1, #16]
		uart_tx(uart, &buf->data[aborted_len],
   11fea:	4807      	ldr	r0, [pc, #28]	; (12008 <uart_cb+0x138>)
   11fec:	1ad2      	subs	r2, r2, r3
   11fee:	4419      	add	r1, r3
}
   11ff0:	b006      	add	sp, #24
   11ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
   11ff6:	f012 b8c1 	b.w	2417c <uart_tx.constprop.0>
   11ffa:	bf00      	nop
   11ffc:	20002cfc 	.word	0x20002cfc
   12000:	20002cf8 	.word	0x20002cf8
   12004:	20000954 	.word	0x20000954
   12008:	00027160 	.word	0x00027160
   1200c:	00027d65 	.word	0x00027d65
   12010:	00027320 	.word	0x00027320
   12014:	20003124 	.word	0x20003124
   12018:	00027d83 	.word	0x00027d83
   1201c:	20001738 	.word	0x20001738
   12020:	00027dbd 	.word	0x00027dbd

00012024 <decode>:
void decode(char b1, char b2, char b3, char b4){
   12024:	b570      	push	{r4, r5, r6, lr}
    *my_message->stim_amp = (b1 & amp_mask) * 256 + b2;
   12026:	4c08      	ldr	r4, [pc, #32]	; (12048 <decode+0x24>)
   12028:	6824      	ldr	r4, [r4, #0]
   1202a:	f000 061f 	and.w	r6, r0, #31
   1202e:	6825      	ldr	r5, [r4, #0]
   12030:	eb01 2106 	add.w	r1, r1, r6, lsl #8
   12034:	8029      	strh	r1, [r5, #0]
    *my_message->stim_pw = b3 * 2;
   12036:	6861      	ldr	r1, [r4, #4]
   12038:	0052      	lsls	r2, r2, #1
   1203a:	800a      	strh	r2, [r1, #0]
    *my_message->stim_freq = b4;
   1203c:	68a2      	ldr	r2, [r4, #8]
   1203e:	7013      	strb	r3, [r2, #0]
    *my_message->stim_status = ((b1 & status_mask) >> 7);
   12040:	68e3      	ldr	r3, [r4, #12]
   12042:	09c0      	lsrs	r0, r0, #7
   12044:	7018      	strb	r0, [r3, #0]
}
   12046:	bd70      	pop	{r4, r5, r6, pc}
   12048:	20002d00 	.word	0x20002d00

0001204c <bt_receive_cb>:
#endif

// this method defines teh receiving behavior 
static void bt_receive_cb(struct bt_conn *conn, const uint8_t *const data,
			  uint16_t len)
{
   1204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12050:	b08f      	sub	sp, #60	; 0x3c
	int err;
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   12052:	2400      	movs	r4, #0
{
   12054:	af02      	add	r7, sp, #8
   12056:	4605      	mov	r5, r0
   12058:	4688      	mov	r8, r1
   1205a:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   1205c:	4621      	mov	r1, r4
   1205e:	221a      	movs	r2, #26
   12060:	f107 0014 	add.w	r0, r7, #20
   12064:	613c      	str	r4, [r7, #16]
   12066:	f012 ff59 	bl	24f1c <memset>
	uint8_t out[CONFIG_BT_NUS_UART_BUFFER_SIZE];
	int length;
	// unsigned char *out = k_malloc(64 * sizeof(char));
	// printk("variable out at address 0x_%p\n", out);
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   1206a:	4628      	mov	r0, r5
   1206c:	f107 0510 	add.w	r5, r7, #16
   12070:	f013 fa33 	bl	254da <bt_conn_get_dst>
   12074:	4629      	mov	r1, r5
   12076:	f7ff fe45 	bl	11d04 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("\n");
   1207a:	4838      	ldr	r0, [pc, #224]	; (1215c <bt_receive_cb+0x110>)
   1207c:	f012 f8ff 	bl	2427e <printk>
	LOG_INF("Received data from: %s", addr);
   12080:	46e9      	mov	r9, sp
   12082:	b088      	sub	sp, #32
   12084:	aa02      	add	r2, sp, #8
   12086:	4b36      	ldr	r3, [pc, #216]	; (12160 <bt_receive_cb+0x114>)
   12088:	4836      	ldr	r0, [pc, #216]	; (12164 <bt_receive_cb+0x118>)
		length = tx->len;
		out[length] = NULL;

		decode(out[0], out[1], out[2], out[3]);
		printk("StimAmp: %i, StimPW: %i, StimFQ: %i, StimStatus: %i\n",
		 *my_message->stim_amp, *my_message->stim_pw, *my_message->stim_freq, *my_message->stim_status);
   1208a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 12178 <bt_receive_cb+0x12c>
	LOG_INF("Received data from: %s", addr);
   1208e:	e9c2 3505 	strd	r3, r5, [r2, #20]
   12092:	f44f 7300 	mov.w	r3, #512	; 0x200
   12096:	8393      	strh	r3, [r2, #28]
   12098:	4b33      	ldr	r3, [pc, #204]	; (12168 <bt_receive_cb+0x11c>)
   1209a:	f842 3f10 	str.w	r3, [r2, #16]!
   1209e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   120a2:	f012 f85f 	bl	24164 <z_log_msg_static_create.constprop.0>
   120a6:	46cd      	mov	sp, r9
	for (uint16_t pos = 0; pos != len;) {
   120a8:	42b4      	cmp	r4, r6
   120aa:	d103      	bne.n	120b4 <bt_receive_cb+0x68>
		
		if (err) {
			k_fifo_put(&fifo_uart_tx_data, tx);
		}
	}
}
   120ac:	3734      	adds	r7, #52	; 0x34
   120ae:	46bd      	mov	sp, r7
   120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   120b4:	2018      	movs	r0, #24
   120b6:	f014 ffcd 	bl	27054 <k_malloc>
		if ((len - pos) > tx_data_size) {
   120ba:	1b32      	subs	r2, r6, r4
   120bc:	2a0f      	cmp	r2, #15
		*tx->data = 0;
   120be:	f04f 0300 	mov.w	r3, #0
			tx->len = (len - pos);
   120c2:	bf94      	ite	ls
   120c4:	b292      	uxthls	r2, r2
			tx->len = tx_data_size;
   120c6:	220f      	movhi	r2, #15
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   120c8:	4605      	mov	r5, r0
		memcpy(tx->data, &data[pos], tx->len);
   120ca:	f100 0a04 	add.w	sl, r0, #4
		*tx->data = 0;
   120ce:	7103      	strb	r3, [r0, #4]
			tx->len = (len - pos);
   120d0:	8282      	strh	r2, [r0, #20]
		memcpy(tx->data, &data[pos], tx->len);
   120d2:	eb08 0104 	add.w	r1, r8, r4
   120d6:	4650      	mov	r0, sl
   120d8:	f012 ff15 	bl	24f06 <memcpy>
		pos += tx->len;
   120dc:	8aab      	ldrh	r3, [r5, #20]
   120de:	441c      	add	r4, r3
   120e0:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   120e2:	42a6      	cmp	r6, r4
   120e4:	d10a      	bne.n	120fc <bt_receive_cb+0xb0>
   120e6:	eb08 0206 	add.w	r2, r8, r6
   120ea:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   120ee:	2a0d      	cmp	r2, #13
   120f0:	d104      	bne.n	120fc <bt_receive_cb+0xb0>
			tx->data[tx->len] = '\n';
   120f2:	18ea      	adds	r2, r5, r3
   120f4:	210a      	movs	r1, #10
			tx->len++;
   120f6:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   120f8:	7111      	strb	r1, [r2, #4]
			tx->len++;
   120fa:	82ab      	strh	r3, [r5, #20]
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   120fc:	8aaa      	ldrh	r2, [r5, #20]
   120fe:	481b      	ldr	r0, [pc, #108]	; (1216c <bt_receive_cb+0x120>)
   12100:	4651      	mov	r1, sl
   12102:	f012 f83b 	bl	2417c <uart_tx.constprop.0>
		memcpy(out, &(tx->data), sizeof(tx->data));
   12106:	2210      	movs	r2, #16
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   12108:	4681      	mov	r9, r0
		memcpy(out, &(tx->data), sizeof(tx->data));
   1210a:	4651      	mov	r1, sl
   1210c:	4638      	mov	r0, r7
   1210e:	f012 fefa 	bl	24f06 <memcpy>
		length = tx->len;
   12112:	8aab      	ldrh	r3, [r5, #20]
		out[length] = NULL;
   12114:	3330      	adds	r3, #48	; 0x30
   12116:	443b      	add	r3, r7
   12118:	2200      	movs	r2, #0
   1211a:	f803 2c30 	strb.w	r2, [r3, #-48]
		decode(out[0], out[1], out[2], out[3]);
   1211e:	78fb      	ldrb	r3, [r7, #3]
   12120:	78ba      	ldrb	r2, [r7, #2]
   12122:	7879      	ldrb	r1, [r7, #1]
   12124:	7838      	ldrb	r0, [r7, #0]
   12126:	f7ff ff7d 	bl	12024 <decode>
		 *my_message->stim_amp, *my_message->stim_pw, *my_message->stim_freq, *my_message->stim_status);
   1212a:	f8db 0000 	ldr.w	r0, [fp]
   1212e:	6883      	ldr	r3, [r0, #8]
   12130:	6842      	ldr	r2, [r0, #4]
   12132:	6801      	ldr	r1, [r0, #0]
   12134:	68c0      	ldr	r0, [r0, #12]
		printk("StimAmp: %i, StimPW: %i, StimFQ: %i, StimStatus: %i\n",
   12136:	781b      	ldrb	r3, [r3, #0]
   12138:	7800      	ldrb	r0, [r0, #0]
   1213a:	f9b2 2000 	ldrsh.w	r2, [r2]
   1213e:	f9b1 1000 	ldrsh.w	r1, [r1]
   12142:	9000      	str	r0, [sp, #0]
   12144:	480a      	ldr	r0, [pc, #40]	; (12170 <bt_receive_cb+0x124>)
   12146:	f012 f89a 	bl	2427e <printk>
		if (err) {
   1214a:	f1b9 0f00 	cmp.w	r9, #0
   1214e:	d0ab      	beq.n	120a8 <bt_receive_cb+0x5c>
			k_fifo_put(&fifo_uart_tx_data, tx);
   12150:	4808      	ldr	r0, [pc, #32]	; (12174 <bt_receive_cb+0x128>)
   12152:	4629      	mov	r1, r5
   12154:	f014 fdbe 	bl	26cd4 <k_queue_append>
   12158:	e7a6      	b.n	120a8 <bt_receive_cb+0x5c>
   1215a:	bf00      	nop
   1215c:	0002a570 	.word	0x0002a570
   12160:	00027dfa 	.word	0x00027dfa
   12164:	00027320 	.word	0x00027320
   12168:	01000003 	.word	0x01000003
   1216c:	00027160 	.word	0x00027160
   12170:	00027e11 	.word	0x00027e11
   12174:	20000954 	.word	0x20000954
   12178:	20002d00 	.word	0x20002d00

0001217c <main>:
		LOG_ERR("Cannot init LEDs (err: %d)", err);
	}
}

void main(void)
{
   1217c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12180:	b089      	sub	sp, #36	; 0x24
	int blink_status = 0;
	int err = 0;
	// uint8_t *out = k_malloc(sizeof(uint8_t));
	my_message = k_malloc(sizeof(message*));
   12182:	2004      	movs	r0, #4
{
   12184:	af02      	add	r7, sp, #8
	my_message = k_malloc(sizeof(message*));
   12186:	f014 ff65 	bl	27054 <k_malloc>
   1218a:	4c93      	ldr	r4, [pc, #588]	; (123d8 <main+0x25c>)
   1218c:	6020      	str	r0, [r4, #0]
	if(my_message == NULL){
   1218e:	b950      	cbnz	r0, 121a6 <main+0x2a>
		LOG_ERR("K_MALLOC FAILED");
   12190:	4b92      	ldr	r3, [pc, #584]	; (123dc <main+0x260>)
   12192:	617b      	str	r3, [r7, #20]
   12194:	2302      	movs	r3, #2
   12196:	4892      	ldr	r0, [pc, #584]	; (123e0 <main+0x264>)
   12198:	613b      	str	r3, [r7, #16]
   1219a:	f107 0210 	add.w	r2, r7, #16
   1219e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121a2:	f011 ffdf 	bl	24164 <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_amp = k_malloc(sizeof(short));
   121a6:	2002      	movs	r0, #2
   121a8:	6825      	ldr	r5, [r4, #0]
   121aa:	f014 ff53 	bl	27054 <k_malloc>
	if(my_message->stim_amp == NULL){
   121ae:	6823      	ldr	r3, [r4, #0]
	my_message->stim_amp = k_malloc(sizeof(short));
   121b0:	6028      	str	r0, [r5, #0]
	if(my_message->stim_amp == NULL){
   121b2:	681b      	ldr	r3, [r3, #0]
   121b4:	b953      	cbnz	r3, 121cc <main+0x50>
		LOG_ERR("K_MALLOC FAILED");
   121b6:	4b89      	ldr	r3, [pc, #548]	; (123dc <main+0x260>)
   121b8:	617b      	str	r3, [r7, #20]
   121ba:	2302      	movs	r3, #2
   121bc:	4888      	ldr	r0, [pc, #544]	; (123e0 <main+0x264>)
   121be:	613b      	str	r3, [r7, #16]
   121c0:	f107 0210 	add.w	r2, r7, #16
   121c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121c8:	f011 ffcc 	bl	24164 <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_pw = k_malloc(sizeof(short));
   121cc:	2002      	movs	r0, #2
   121ce:	6825      	ldr	r5, [r4, #0]
   121d0:	f014 ff40 	bl	27054 <k_malloc>
	if(my_message->stim_pw == NULL){
   121d4:	6823      	ldr	r3, [r4, #0]
	my_message->stim_pw = k_malloc(sizeof(short));
   121d6:	6068      	str	r0, [r5, #4]
	if(my_message->stim_pw == NULL){
   121d8:	685b      	ldr	r3, [r3, #4]
   121da:	b953      	cbnz	r3, 121f2 <main+0x76>
		LOG_ERR("K_MALLOC FAILED");
   121dc:	4b7f      	ldr	r3, [pc, #508]	; (123dc <main+0x260>)
   121de:	617b      	str	r3, [r7, #20]
   121e0:	2302      	movs	r3, #2
   121e2:	487f      	ldr	r0, [pc, #508]	; (123e0 <main+0x264>)
   121e4:	613b      	str	r3, [r7, #16]
   121e6:	f107 0210 	add.w	r2, r7, #16
   121ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121ee:	f011 ffb9 	bl	24164 <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_freq = k_malloc(sizeof(char));
   121f2:	2001      	movs	r0, #1
   121f4:	6825      	ldr	r5, [r4, #0]
   121f6:	f014 ff2d 	bl	27054 <k_malloc>
	if(my_message->stim_freq == NULL){
   121fa:	6823      	ldr	r3, [r4, #0]
	my_message->stim_freq = k_malloc(sizeof(char));
   121fc:	60a8      	str	r0, [r5, #8]
	if(my_message->stim_freq == NULL){
   121fe:	689b      	ldr	r3, [r3, #8]
   12200:	b953      	cbnz	r3, 12218 <main+0x9c>
		LOG_ERR("K_MALLOC FAILED");
   12202:	4b76      	ldr	r3, [pc, #472]	; (123dc <main+0x260>)
   12204:	617b      	str	r3, [r7, #20]
   12206:	2302      	movs	r3, #2
   12208:	4875      	ldr	r0, [pc, #468]	; (123e0 <main+0x264>)
   1220a:	613b      	str	r3, [r7, #16]
   1220c:	f107 0210 	add.w	r2, r7, #16
   12210:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12214:	f011 ffa6 	bl	24164 <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_status = k_malloc(sizeof(char));
   12218:	2001      	movs	r0, #1
   1221a:	6825      	ldr	r5, [r4, #0]
   1221c:	f014 ff1a 	bl	27054 <k_malloc>
	if(my_message->stim_status == NULL){
   12220:	6823      	ldr	r3, [r4, #0]
	my_message->stim_status = k_malloc(sizeof(char));
   12222:	60e8      	str	r0, [r5, #12]
	if(my_message->stim_status == NULL){
   12224:	68db      	ldr	r3, [r3, #12]
   12226:	b953      	cbnz	r3, 1223e <main+0xc2>
		LOG_ERR("K_MALLOC FAILED");
   12228:	4b6c      	ldr	r3, [pc, #432]	; (123dc <main+0x260>)
   1222a:	617b      	str	r3, [r7, #20]
   1222c:	2302      	movs	r3, #2
   1222e:	486c      	ldr	r0, [pc, #432]	; (123e0 <main+0x264>)
   12230:	613b      	str	r3, [r7, #16]
   12232:	f107 0210 	add.w	r2, r7, #16
   12236:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1223a:	f011 ff93 	bl	24164 <z_log_msg_static_create.constprop.0>
	err = dk_leds_init();
   1223e:	f00b fd87 	bl	1dd50 <dk_leds_init>
	if (err) {
   12242:	b170      	cbz	r0, 12262 <main+0xe6>
		LOG_ERR("Cannot init LEDs (err: %d)", err);
   12244:	466c      	mov	r4, sp
   12246:	b088      	sub	sp, #32
   12248:	aa02      	add	r2, sp, #8
   1224a:	4b66      	ldr	r3, [pc, #408]	; (123e4 <main+0x268>)
   1224c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12250:	2303      	movs	r3, #3
   12252:	f842 3f10 	str.w	r3, [r2, #16]!
   12256:	4862      	ldr	r0, [pc, #392]	; (123e0 <main+0x264>)
   12258:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1225c:	f011 ff82 	bl	24164 <z_log_msg_static_create.constprop.0>
   12260:	46a5      	mov	sp, r4
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   12262:	4e61      	ldr	r6, [pc, #388]	; (123e8 <main+0x26c>)
   12264:	4630      	mov	r0, r6
   12266:	f014 fcd2 	bl	26c0e <z_device_is_ready>
	if (!device_is_ready(uart)) {
   1226a:	b1c0      	cbz	r0, 1229e <main+0x122>
	rx = k_malloc(sizeof(*rx));
   1226c:	2018      	movs	r0, #24
   1226e:	f014 fef1 	bl	27054 <k_malloc>
	if (rx) {
   12272:	4680      	mov	r8, r0
   12274:	b198      	cbz	r0, 1229e <main+0x122>
		rx->len = 0;
   12276:	2400      	movs	r4, #0
   12278:	8284      	strh	r4, [r0, #20]
	k_work_init_delayable(&uart_work, uart_work_handler);
   1227a:	495c      	ldr	r1, [pc, #368]	; (123ec <main+0x270>)
   1227c:	485c      	ldr	r0, [pc, #368]	; (123f0 <main+0x274>)
   1227e:	f00f f8d1 	bl	21424 <k_work_init_delayable>
	if (api->callback_set == NULL) {
   12282:	68b3      	ldr	r3, [r6, #8]
   12284:	681b      	ldr	r3, [r3, #0]
   12286:	b963      	cbnz	r3, 122a2 <main+0x126>
		LOG_ERR("Cannot initialize UART callback");
   12288:	4b5a      	ldr	r3, [pc, #360]	; (123f4 <main+0x278>)
   1228a:	617b      	str	r3, [r7, #20]
   1228c:	2302      	movs	r3, #2
   1228e:	4854      	ldr	r0, [pc, #336]	; (123e0 <main+0x264>)
   12290:	613b      	str	r3, [r7, #16]
   12292:	f107 0210 	add.w	r2, r7, #16
   12296:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1229a:	f011 ff63 	bl	24164 <z_log_msg_static_create.constprop.0>

	configure_gpio();
	/* Initialize the UART Peripheral  */
	err = uart_init();
	if (err) {
		error();
   1229e:	f011 ff76 	bl	2418e <error>
	return api->callback_set(dev, callback, user_data);
   122a2:	4955      	ldr	r1, [pc, #340]	; (123f8 <main+0x27c>)
   122a4:	4622      	mov	r2, r4
   122a6:	4630      	mov	r0, r6
   122a8:	4798      	blx	r3
	if (err) {
   122aa:	2800      	cmp	r0, #0
   122ac:	d1ec      	bne.n	12288 <main+0x10c>
	tx = k_malloc(sizeof(*tx));
   122ae:	2018      	movs	r0, #24
   122b0:	f014 fed0 	bl	27054 <k_malloc>
	if (tx) {
   122b4:	4605      	mov	r5, r0
   122b6:	2800      	cmp	r0, #0
   122b8:	d0f1      	beq.n	1229e <main+0x122>
		pos = snprintf(tx->data, sizeof(tx->data),
   122ba:	f100 0904 	add.w	r9, r0, #4
   122be:	4a4f      	ldr	r2, [pc, #316]	; (123fc <main+0x280>)
   122c0:	2110      	movs	r1, #16
   122c2:	4648      	mov	r0, r9
   122c4:	f003 fd02 	bl	15ccc <snprintf>
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   122c8:	280f      	cmp	r0, #15
		pos = snprintf(tx->data, sizeof(tx->data),
   122ca:	4604      	mov	r4, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   122cc:	d913      	bls.n	122f6 <main+0x17a>
			k_free(tx);
   122ce:	4628      	mov	r0, r5
   122d0:	f014 feb9 	bl	27046 <k_free>
			LOG_ERR("snprintf returned %d", pos);
   122d4:	466d      	mov	r5, sp
   122d6:	b088      	sub	sp, #32
   122d8:	ab02      	add	r3, sp, #8
   122da:	4a49      	ldr	r2, [pc, #292]	; (12400 <main+0x284>)
   122dc:	4840      	ldr	r0, [pc, #256]	; (123e0 <main+0x264>)
   122de:	e9c3 2405 	strd	r2, r4, [r3, #20]
   122e2:	461a      	mov	r2, r3
   122e4:	2303      	movs	r3, #3
   122e6:	f842 3f10 	str.w	r3, [r2, #16]!
   122ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122ee:	f011 ff39 	bl	24164 <z_log_msg_static_create.constprop.0>
   122f2:	46ad      	mov	sp, r5
	if (err) {
   122f4:	e7d3      	b.n	1229e <main+0x122>
		tx->len = pos;
   122f6:	82a8      	strh	r0, [r5, #20]
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   122f8:	4602      	mov	r2, r0
   122fa:	4649      	mov	r1, r9
   122fc:	4630      	mov	r0, r6
   122fe:	f011 ff3d 	bl	2417c <uart_tx.constprop.0>
	if (err) {
   12302:	b178      	cbz	r0, 12324 <main+0x1a8>
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   12304:	466c      	mov	r4, sp
   12306:	b088      	sub	sp, #32
   12308:	aa02      	add	r2, sp, #8
   1230a:	4b3e      	ldr	r3, [pc, #248]	; (12404 <main+0x288>)
   1230c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12310:	2303      	movs	r3, #3
   12312:	f842 3f10 	str.w	r3, [r2, #16]!
   12316:	4832      	ldr	r0, [pc, #200]	; (123e0 <main+0x264>)
   12318:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1231c:	f011 ff22 	bl	24164 <z_log_msg_static_create.constprop.0>
   12320:	46a5      	mov	sp, r4
	if (err) {
   12322:	e7bc      	b.n	1229e <main+0x122>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
   12324:	f108 0104 	add.w	r1, r8, #4
   12328:	4630      	mov	r0, r6
   1232a:	f011 ff1e 	bl	2416a <uart_rx_enable.constprop.0>
	if (err) {
   1232e:	2800      	cmp	r0, #0
   12330:	d1b5      	bne.n	1229e <main+0x122>
			LOG_ERR("Failed to register authorization info callbacks.\n");
			return;
		}
	}

	err = bt_enable(NULL);
   12332:	f005 fadd 	bl	178f0 <bt_enable>
	if (err) {
   12336:	2800      	cmp	r0, #0
   12338:	d1b1      	bne.n	1229e <main+0x122>
		error();
	}

	LOG_INF("Bluetooth initialized");
   1233a:	4b33      	ldr	r3, [pc, #204]	; (12408 <main+0x28c>)
   1233c:	617b      	str	r3, [r7, #20]
   1233e:	2302      	movs	r3, #2
   12340:	4827      	ldr	r0, [pc, #156]	; (123e0 <main+0x264>)
   12342:	613b      	str	r3, [r7, #16]
   12344:	f107 0210 	add.w	r2, r7, #16
   12348:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1234c:	f011 ff0a 	bl	24164 <z_log_msg_static_create.constprop.0>

	if (IS_ENABLED(CONFIG_SETTINGS)) {
		settings_load();
	}
/* Pass your application callback function to the NUS service */
	err = bt_nus_init(&nus_cb);
   12350:	482e      	ldr	r0, [pc, #184]	; (1240c <main+0x290>)
   12352:	f002 fc55 	bl	14c00 <bt_nus_init>
	if (err) {
   12356:	b190      	cbz	r0, 1237e <main+0x202>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   12358:	466c      	mov	r4, sp
   1235a:	b088      	sub	sp, #32
   1235c:	aa02      	add	r2, sp, #8
   1235e:	4b2c      	ldr	r3, [pc, #176]	; (12410 <main+0x294>)
   12360:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12364:	2303      	movs	r3, #3
   12366:	f842 3f10 	str.w	r3, [r2, #16]!
   1236a:	481d      	ldr	r0, [pc, #116]	; (123e0 <main+0x264>)
   1236c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12370:	f011 fef8 	bl	24164 <z_log_msg_static_create.constprop.0>
   12374:	46a5      	mov	sp, r4

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
   12376:	371c      	adds	r7, #28
   12378:	46bd      	mov	sp, r7
   1237a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
   1237e:	4d25      	ldr	r5, [pc, #148]	; (12414 <main+0x298>)
   12380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12382:	463c      	mov	r4, r7
   12384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12386:	682b      	ldr	r3, [r5, #0]
   12388:	6023      	str	r3, [r4, #0]
   1238a:	2301      	movs	r3, #1
   1238c:	9300      	str	r3, [sp, #0]
   1238e:	4922      	ldr	r1, [pc, #136]	; (12418 <main+0x29c>)
   12390:	4b22      	ldr	r3, [pc, #136]	; (1241c <main+0x2a0>)
   12392:	2202      	movs	r2, #2
   12394:	4638      	mov	r0, r7
   12396:	f005 ffa3 	bl	182e0 <bt_le_adv_start>
	if (err) {
   1239a:	4604      	mov	r4, r0
   1239c:	b178      	cbz	r0, 123be <main+0x242>
		LOG_ERR("Advertising failed to start (err %d)", err);
   1239e:	466d      	mov	r5, sp
   123a0:	b088      	sub	sp, #32
   123a2:	aa02      	add	r2, sp, #8
   123a4:	4b1e      	ldr	r3, [pc, #120]	; (12420 <main+0x2a4>)
   123a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   123aa:	2303      	movs	r3, #3
   123ac:	f842 3f10 	str.w	r3, [r2, #16]!
   123b0:	480b      	ldr	r0, [pc, #44]	; (123e0 <main+0x264>)
   123b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   123b6:	f011 fed5 	bl	24164 <z_log_msg_static_create.constprop.0>
   123ba:	46ad      	mov	sp, r5
		return;
   123bc:	e7db      	b.n	12376 <main+0x1fa>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   123be:	3401      	adds	r4, #1
   123c0:	f004 0101 	and.w	r1, r4, #1
   123c4:	2000      	movs	r0, #0
   123c6:	f00b fcef 	bl	1dda8 <dk_set_led>
	return z_impl_k_sleep(timeout);
   123ca:	2100      	movs	r1, #0
   123cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   123d0:	f010 fa84 	bl	228dc <z_impl_k_sleep>
	for (;;) {
   123d4:	e7f3      	b.n	123be <main+0x242>
   123d6:	bf00      	nop
   123d8:	20002d00 	.word	0x20002d00
   123dc:	00027e46 	.word	0x00027e46
   123e0:	00027320 	.word	0x00027320
   123e4:	00027e56 	.word	0x00027e56
   123e8:	00027160 	.word	0x00027160
   123ec:	00011cdd 	.word	0x00011cdd
   123f0:	20001738 	.word	0x20001738
   123f4:	00027e71 	.word	0x00027e71
   123f8:	00011ed1 	.word	0x00011ed1
   123fc:	00027e91 	.word	0x00027e91
   12400:	00027e9f 	.word	0x00027e9f
   12404:	00027eb4 	.word	0x00027eb4
   12408:	00027edd 	.word	0x00027edd
   1240c:	200005c0 	.word	0x200005c0
   12410:	00027ef3 	.word	0x00027ef3
   12414:	00027440 	.word	0x00027440
   12418:	000274e0 	.word	0x000274e0
   1241c:	000274d8 	.word	0x000274d8
   12420:	00027f1f 	.word	0x00027f1f

00012424 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12428:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1242a:	0784      	lsls	r4, r0, #30
{
   1242c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1242e:	f002 0304 	and.w	r3, r2, #4
   12432:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   12434:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   12438:	f103 0301 	add.w	r3, r3, #1
   1243c:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
{
   12440:	9203      	str	r2, [sp, #12]
   12442:	4605      	mov	r5, r0
   12444:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   12446:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   12448:	f040 81fb 	bne.w	12842 <cbvprintf_package+0x41e>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   1244c:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   1244e:	b130      	cbz	r0, 1245e <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12450:	2907      	cmp	r1, #7
   12452:	d809      	bhi.n	12468 <cbvprintf_package+0x44>
		return -ENOSPC;
   12454:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12458:	b011      	add	sp, #68	; 0x44
   1245a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1245e:	f001 0607 	and.w	r6, r1, #7
   12462:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   12464:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   12468:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1246a:	f04f 0800 	mov.w	r8, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1246e:	f04f 32ff 	mov.w	r2, #4294967295
	align = VA_STACK_ALIGN(char *);
   12472:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
   12476:	1e59      	subs	r1, r3, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12478:	f8cd 8010 	str.w	r8, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1247c:	4647      	mov	r7, r8
	bool parsing = false;
   1247e:	4643      	mov	r3, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   12480:	9201      	str	r2, [sp, #4]
	size = sizeof(char *);
   12482:	46da      	mov	sl, fp
			if (buf0 != NULL) {
   12484:	b10d      	cbz	r5, 1248a <cbvprintf_package+0x66>
				*(const char **)buf = s;
   12486:	9800      	ldr	r0, [sp, #0]
   12488:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1248a:	9805      	ldr	r0, [sp, #20]
   1248c:	2800      	cmp	r0, #0
   1248e:	f300 80da 	bgt.w	12646 <cbvprintf_package+0x222>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12492:	489b      	ldr	r0, [pc, #620]	; (12700 <cbvprintf_package+0x2dc>)
   12494:	9a00      	ldr	r2, [sp, #0]
   12496:	4282      	cmp	r2, r0
   12498:	d303      	bcc.n	124a2 <cbvprintf_package+0x7e>
   1249a:	489a      	ldr	r0, [pc, #616]	; (12704 <cbvprintf_package+0x2e0>)
   1249c:	4282      	cmp	r2, r0
   1249e:	f0c0 80d2 	bcc.w	12646 <cbvprintf_package+0x222>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   124a2:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   124a4:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   124a8:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   124aa:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   124ae:	f140 80e5 	bpl.w	1267c <cbvprintf_package+0x258>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   124b2:	f04f 0c00 	mov.w	ip, #0
   124b6:	e0cf      	b.n	12658 <cbvprintf_package+0x234>
			switch (*fmt) {
   124b8:	287a      	cmp	r0, #122	; 0x7a
   124ba:	d85f      	bhi.n	1257c <cbvprintf_package+0x158>
   124bc:	284b      	cmp	r0, #75	; 0x4b
   124be:	d80c      	bhi.n	124da <cbvprintf_package+0xb6>
   124c0:	2847      	cmp	r0, #71	; 0x47
   124c2:	d85b      	bhi.n	1257c <cbvprintf_package+0x158>
   124c4:	2829      	cmp	r0, #41	; 0x29
   124c6:	d82c      	bhi.n	12522 <cbvprintf_package+0xfe>
   124c8:	2825      	cmp	r0, #37	; 0x25
   124ca:	d054      	beq.n	12576 <cbvprintf_package+0x152>
   124cc:	d856      	bhi.n	1257c <cbvprintf_package+0x158>
   124ce:	2820      	cmp	r0, #32
   124d0:	d07a      	beq.n	125c8 <cbvprintf_package+0x1a4>
   124d2:	3823      	subs	r0, #35	; 0x23
   124d4:	4243      	negs	r3, r0
   124d6:	4143      	adcs	r3, r0
   124d8:	e076      	b.n	125c8 <cbvprintf_package+0x1a4>
   124da:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   124de:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   124e2:	d84b      	bhi.n	1257c <cbvprintf_package+0x158>
   124e4:	e8df f00c 	tbb	[pc, ip]
   124e8:	4a4a4a70 	.word	0x4a4a4a70
   124ec:	4a4a4a4a 	.word	0x4a4a4a4a
   124f0:	4a4a4a4a 	.word	0x4a4a4a4a
   124f4:	4a4a4a4c 	.word	0x4a4a4a4c
   124f8:	4a4a4a4a 	.word	0x4a4a4a4a
   124fc:	4c4a5a4a 	.word	0x4c4a5a4a
   12500:	5a5a5a4c 	.word	0x5a5a5a4c
   12504:	4a6d4c70 	.word	0x4a6d4c70
   12508:	4c184a70 	.word	0x4c184a70
   1250c:	814a4a18 	.word	0x814a4a18
   12510:	4a4a4c7e 	.word	0x4a4a4c7e
   12514:	4a4c      	.short	0x4a4c
   12516:	7e          	.byte	0x7e
   12517:	00          	.byte	0x00
   12518:	2000      	movs	r0, #0
   1251a:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
   1251c:	f04f 0b04 	mov.w	fp, #4
   12520:	e03a      	b.n	12598 <cbvprintf_package+0x174>
			switch (*fmt) {
   12522:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   12526:	fa5f fc8c 	uxtb.w	ip, ip
   1252a:	2201      	movs	r2, #1
   1252c:	fa02 fc0c 	lsl.w	ip, r2, ip
   12530:	ea1c 0f0e 	tst.w	ip, lr
   12534:	d148      	bne.n	125c8 <cbvprintf_package+0x1a4>
   12536:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   1253a:	d12f      	bne.n	1259c <cbvprintf_package+0x178>
   1253c:	ea1c 0302 	ands.w	r3, ip, r2
   12540:	d042      	beq.n	125c8 <cbvprintf_package+0x1a4>
		buf = (void *) ROUND_UP(buf, align);
   12542:	3c01      	subs	r4, #1
   12544:	445c      	add	r4, fp
   12546:	f1cb 0c00 	rsb	ip, fp, #0
   1254a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   1254e:	2d00      	cmp	r5, #0
   12550:	d060      	beq.n	12614 <cbvprintf_package+0x1f0>
   12552:	ebaa 0c05 	sub.w	ip, sl, r5
   12556:	44a4      	add	ip, r4
   12558:	45b4      	cmp	ip, r6
   1255a:	f63f af7b 	bhi.w	12454 <cbvprintf_package+0x30>
		if (is_str_arg) {
   1255e:	2800      	cmp	r0, #0
   12560:	d16a      	bne.n	12638 <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   12562:	f1ba 0f04 	cmp.w	sl, #4
   12566:	d145      	bne.n	125f4 <cbvprintf_package+0x1d0>
			int v = va_arg(ap, int);
   12568:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
   1256c:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
   1256e:	3404      	adds	r4, #4
   12570:	f04f 0a04 	mov.w	sl, #4
   12574:	e028      	b.n	125c8 <cbvprintf_package+0x1a4>
				arg_idx--;
   12576:	9b01      	ldr	r3, [sp, #4]
   12578:	3b01      	subs	r3, #1
   1257a:	9301      	str	r3, [sp, #4]
				parsing = false;
   1257c:	2300      	movs	r3, #0
				continue;
   1257e:	e023      	b.n	125c8 <cbvprintf_package+0x1a4>
				if (fmt[-1] == 'l') {
   12580:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12584:	2b6c      	cmp	r3, #108	; 0x6c
   12586:	d132      	bne.n	125ee <cbvprintf_package+0x1ca>
					if (fmt[-2] == 'l') {
   12588:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   1258c:	2000      	movs	r0, #0
   1258e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   12590:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
   12592:	d1c3      	bne.n	1251c <cbvprintf_package+0xf8>
						align = VA_STACK_ALIGN(long long);
   12594:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
   12598:	46da      	mov	sl, fp
   1259a:	e7d2      	b.n	12542 <cbvprintf_package+0x11e>
					v.ld = va_arg(ap, long double);
   1259c:	f109 0907 	add.w	r9, r9, #7
   125a0:	f029 0907 	bic.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
   125a4:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   125a6:	e8f9 ab02 	ldrd	sl, fp, [r9], #8
				buf = (void *) ROUND_UP(buf, align);
   125aa:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   125ae:	b135      	cbz	r5, 125be <cbvprintf_package+0x19a>
					if (BUF_OFFSET + size > len) {
   125b0:	9806      	ldr	r0, [sp, #24]
   125b2:	4420      	add	r0, r4
   125b4:	42b0      	cmp	r0, r6
   125b6:	f63f af4d 	bhi.w	12454 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   125ba:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   125be:	3408      	adds	r4, #8
				parsing = false;
   125c0:	2300      	movs	r3, #0
			switch (*fmt) {
   125c2:	f04f 0b08 	mov.w	fp, #8
   125c6:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
   125c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   125cc:	2800      	cmp	r0, #0
   125ce:	f000 80c0 	beq.w	12752 <cbvprintf_package+0x32e>
			if (!parsing) {
   125d2:	2b00      	cmp	r3, #0
   125d4:	f47f af70 	bne.w	124b8 <cbvprintf_package+0x94>
				if (*fmt == '%') {
   125d8:	2825      	cmp	r0, #37	; 0x25
   125da:	d1f5      	bne.n	125c8 <cbvprintf_package+0x1a4>
					arg_idx++;
   125dc:	9b01      	ldr	r3, [sp, #4]
   125de:	3301      	adds	r3, #1
   125e0:	9301      	str	r3, [sp, #4]
					parsing = true;
   125e2:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
   125e4:	f04f 0b04 	mov.w	fp, #4
   125e8:	e7ed      	b.n	125c6 <cbvprintf_package+0x1a2>
			switch (*fmt) {
   125ea:	4618      	mov	r0, r3
   125ec:	e795      	b.n	1251a <cbvprintf_package+0xf6>
   125ee:	2000      	movs	r0, #0
				parsing = false;
   125f0:	4603      	mov	r3, r0
   125f2:	e7a6      	b.n	12542 <cbvprintf_package+0x11e>
		} else if (size == sizeof(long long)) {
   125f4:	f1ba 0f08 	cmp.w	sl, #8
   125f8:	f040 809d 	bne.w	12736 <cbvprintf_package+0x312>
			long long v = va_arg(ap, long long);
   125fc:	f109 0907 	add.w	r9, r9, #7
   12600:	f029 0907 	bic.w	r9, r9, #7
   12604:	ecb9 7b02 	vldmia	r9!, {d7}
					*(long long *)buf = v;
   12608:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   1260c:	3408      	adds	r4, #8
   1260e:	f04f 0a08 	mov.w	sl, #8
   12612:	e7d9      	b.n	125c8 <cbvprintf_package+0x1a4>
		if (is_str_arg) {
   12614:	b980      	cbnz	r0, 12638 <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   12616:	f1ba 0f04 	cmp.w	sl, #4
   1261a:	d102      	bne.n	12622 <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
   1261c:	f109 0904 	add.w	r9, r9, #4
			if (buf0 != NULL) {
   12620:	e7a5      	b.n	1256e <cbvprintf_package+0x14a>
		} else if (size == sizeof(long long)) {
   12622:	f1ba 0f08 	cmp.w	sl, #8
   12626:	f040 8086 	bne.w	12736 <cbvprintf_package+0x312>
			long long v = va_arg(ap, long long);
   1262a:	f109 0907 	add.w	r9, r9, #7
   1262e:	f029 0907 	bic.w	r9, r9, #7
   12632:	f109 0908 	add.w	r9, r9, #8
			if (buf0 != NULL) {
   12636:	e7e9      	b.n	1260c <cbvprintf_package+0x1e8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12638:	9805      	ldr	r0, [sp, #20]
   1263a:	3801      	subs	r0, #1
   1263c:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   1263e:	f859 0b04 	ldr.w	r0, [r9], #4
   12642:	9000      	str	r0, [sp, #0]
   12644:	e71e      	b.n	12484 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   12646:	9a03      	ldr	r2, [sp, #12]
   12648:	0790      	lsls	r0, r2, #30
   1264a:	d54c      	bpl.n	126e6 <cbvprintf_package+0x2c2>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1264c:	eba4 0e05 	sub.w	lr, r4, r5
   12650:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12654:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12658:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1265c:	d31f      	bcc.n	1269e <cbvprintf_package+0x27a>
					__ASSERT(false, "String with too many arguments");
   1265e:	492a      	ldr	r1, [pc, #168]	; (12708 <cbvprintf_package+0x2e4>)
   12660:	4a2a      	ldr	r2, [pc, #168]	; (1270c <cbvprintf_package+0x2e8>)
   12662:	482b      	ldr	r0, [pc, #172]	; (12710 <cbvprintf_package+0x2ec>)
   12664:	f240 237b 	movw	r3, #635	; 0x27b
   12668:	f012 f840 	bl	246ec <assert_print>
   1266c:	4829      	ldr	r0, [pc, #164]	; (12714 <cbvprintf_package+0x2f0>)
   1266e:	f012 f83d 	bl	246ec <assert_print>
   12672:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
   12676:	4825      	ldr	r0, [pc, #148]	; (1270c <cbvprintf_package+0x2e8>)
   12678:	f012 f831 	bl	246de <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1267c:	2f0f      	cmp	r7, #15
   1267e:	d810      	bhi.n	126a2 <cbvprintf_package+0x27e>
				if (buf0 != NULL) {
   12680:	2d00      	cmp	r5, #0
   12682:	d04b      	beq.n	1271c <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12684:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12688:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   1268c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1268e:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   12692:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   12696:	9804      	ldr	r0, [sp, #16]
   12698:	3001      	adds	r0, #1
   1269a:	9004      	str	r0, [sp, #16]
   1269c:	e022      	b.n	126e4 <cbvprintf_package+0x2c0>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1269e:	2f0f      	cmp	r7, #15
   126a0:	d90c      	bls.n	126bc <cbvprintf_package+0x298>
					__ASSERT(false, "str_ptr_pos[] too small");
   126a2:	4919      	ldr	r1, [pc, #100]	; (12708 <cbvprintf_package+0x2e4>)
   126a4:	4a19      	ldr	r2, [pc, #100]	; (1270c <cbvprintf_package+0x2e8>)
   126a6:	481a      	ldr	r0, [pc, #104]	; (12710 <cbvprintf_package+0x2ec>)
   126a8:	f44f 7320 	mov.w	r3, #640	; 0x280
   126ac:	f012 f81e 	bl	246ec <assert_print>
   126b0:	4819      	ldr	r0, [pc, #100]	; (12718 <cbvprintf_package+0x2f4>)
   126b2:	f012 f81b 	bl	246ec <assert_print>
   126b6:	f44f 7120 	mov.w	r1, #640	; 0x280
   126ba:	e7dc      	b.n	12676 <cbvprintf_package+0x252>
				if (buf0 != NULL) {
   126bc:	b1d5      	cbz	r5, 126f4 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   126be:	f107 0240 	add.w	r2, r7, #64	; 0x40
   126c2:	eb0d 0e02 	add.w	lr, sp, r2
   126c6:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   126c8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   126ca:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   126ce:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   126d2:	f1bc 0f00 	cmp.w	ip, #0
   126d6:	d0de      	beq.n	12696 <cbvprintf_package+0x272>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   126d8:	f060 007f 	orn	r0, r0, #127	; 0x7f
   126dc:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   126e0:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
   126e4:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   126e6:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   126ea:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   126ec:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   126ee:	f64f 7eda 	movw	lr, #65498	; 0xffda
   126f2:	e769      	b.n	125c8 <cbvprintf_package+0x1a4>
				} else if (is_ro) {
   126f4:	f1bc 0f00 	cmp.w	ip, #0
   126f8:	d010      	beq.n	1271c <cbvprintf_package+0x2f8>
					len += 1;
   126fa:	3601      	adds	r6, #1
   126fc:	e7f2      	b.n	126e4 <cbvprintf_package+0x2c0>
   126fe:	bf00      	nop
   12700:	00027068 	.word	0x00027068
   12704:	0002bdcc 	.word	0x0002bdcc
   12708:	0002ab0f 	.word	0x0002ab0f
   1270c:	00027f5c 	.word	0x00027f5c
   12710:	00027f8a 	.word	0x00027f8a
   12714:	00027fa7 	.word	0x00027fa7
   12718:	00027fc8 	.word	0x00027fc8
				} else if (rws_pos_en) {
   1271c:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   1271e:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   12720:	2a00      	cmp	r2, #0
   12722:	d1df      	bne.n	126e4 <cbvprintf_package+0x2c0>
					len += strlen(s) + 1 + 1;
   12724:	9800      	ldr	r0, [sp, #0]
   12726:	e9cd 3106 	strd	r3, r1, [sp, #24]
   1272a:	f012 fbcc 	bl	24ec6 <strlen>
   1272e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   12732:	4406      	add	r6, r0
   12734:	e7d6      	b.n	126e4 <cbvprintf_package+0x2c0>
			__ASSERT(false, "unexpected size %u", size);
   12736:	4a44      	ldr	r2, [pc, #272]	; (12848 <cbvprintf_package+0x424>)
   12738:	4944      	ldr	r1, [pc, #272]	; (1284c <cbvprintf_package+0x428>)
   1273a:	4845      	ldr	r0, [pc, #276]	; (12850 <cbvprintf_package+0x42c>)
   1273c:	f240 23c5 	movw	r3, #709	; 0x2c5
   12740:	f011 ffd4 	bl	246ec <assert_print>
   12744:	4651      	mov	r1, sl
   12746:	4843      	ldr	r0, [pc, #268]	; (12854 <cbvprintf_package+0x430>)
   12748:	f011 ffd0 	bl	246ec <assert_print>
   1274c:	f240 21c5 	movw	r1, #709	; 0x2c5
   12750:	e791      	b.n	12676 <cbvprintf_package+0x252>
	if (BUF_OFFSET / sizeof(int) > 255) {
   12752:	1b63      	subs	r3, r4, r5
   12754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12758:	d30c      	bcc.n	12774 <cbvprintf_package+0x350>
		__ASSERT(false, "too many format args");
   1275a:	493c      	ldr	r1, [pc, #240]	; (1284c <cbvprintf_package+0x428>)
   1275c:	4a3a      	ldr	r2, [pc, #232]	; (12848 <cbvprintf_package+0x424>)
   1275e:	483c      	ldr	r0, [pc, #240]	; (12850 <cbvprintf_package+0x42c>)
   12760:	f240 23d1 	movw	r3, #721	; 0x2d1
   12764:	f011 ffc2 	bl	246ec <assert_print>
   12768:	483b      	ldr	r0, [pc, #236]	; (12858 <cbvprintf_package+0x434>)
   1276a:	f011 ffbf 	bl	246ec <assert_print>
   1276e:	f240 21d1 	movw	r1, #721	; 0x2d1
   12772:	e780      	b.n	12676 <cbvprintf_package+0x252>
	if (buf0 == NULL) {
   12774:	b91d      	cbnz	r5, 1277e <cbvprintf_package+0x35a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12776:	f1a6 0408 	sub.w	r4, r6, #8
   1277a:	18e0      	adds	r0, r4, r3
   1277c:	e66c      	b.n	12458 <cbvprintf_package+0x34>
	if (rws_pos_en) {
   1277e:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   12780:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12782:	089b      	lsrs	r3, r3, #2
   12784:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12786:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   1278a:	b1c2      	cbz	r2, 127be <cbvprintf_package+0x39a>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1278c:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   1278e:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
   12792:	f1b8 0f00 	cmp.w	r8, #0
   12796:	d005      	beq.n	127a4 <cbvprintf_package+0x380>
   12798:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1279a:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   1279c:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   127a0:	4297      	cmp	r7, r2
   127a2:	d10e      	bne.n	127c2 <cbvprintf_package+0x39e>
		if (BUF_OFFSET + 1 + size > len) {
   127a4:	f1c5 0301 	rsb	r3, r5, #1
   127a8:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
   127ac:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   127b0:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   127b2:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   127b6:	4557      	cmp	r7, sl
   127b8:	d112      	bne.n	127e0 <cbvprintf_package+0x3bc>
	return BUF_OFFSET;
   127ba:	1b60      	subs	r0, r4, r5
   127bc:	e64c      	b.n	12458 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   127be:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   127c0:	e7e5      	b.n	1278e <cbvprintf_package+0x36a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   127c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   127c6:	0619      	lsls	r1, r3, #24
   127c8:	d508      	bpl.n	127dc <cbvprintf_package+0x3b8>
			if (BUF_OFFSET + 1 > len) {
   127ca:	eb04 0e0c 	add.w	lr, r4, ip
   127ce:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   127d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   127d4:	f63f ae3e 	bhi.w	12454 <cbvprintf_package+0x30>
			*buf++ = pos;
   127d8:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   127dc:	3201      	adds	r2, #1
   127de:	e7df      	b.n	127a0 <cbvprintf_package+0x37c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   127e0:	f1b8 0f00 	cmp.w	r8, #0
   127e4:	d003      	beq.n	127ee <cbvprintf_package+0x3ca>
   127e6:	f999 2000 	ldrsb.w	r2, [r9]
   127ea:	2a00      	cmp	r2, #0
   127ec:	db17      	blt.n	1281e <cbvprintf_package+0x3fa>
		if (rws_pos_en) {
   127ee:	9b02      	ldr	r3, [sp, #8]
   127f0:	b1d3      	cbz	r3, 12828 <cbvprintf_package+0x404>
			*buf++ = str_ptr_arg[i];
   127f2:	f81a 200b 	ldrb.w	r2, [sl, fp]
   127f6:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   127fa:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   127fc:	9b01      	ldr	r3, [sp, #4]
   127fe:	1898      	adds	r0, r3, r2
   12800:	4420      	add	r0, r4
   12802:	42b0      	cmp	r0, r6
   12804:	f63f ae26 	bhi.w	12454 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   12808:	f899 0000 	ldrb.w	r0, [r9]
   1280c:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   12810:	9900      	ldr	r1, [sp, #0]
   12812:	9203      	str	r2, [sp, #12]
   12814:	4620      	mov	r0, r4
   12816:	f012 fb76 	bl	24f06 <memcpy>
		buf += size;
   1281a:	9a03      	ldr	r2, [sp, #12]
   1281c:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   1281e:	f10a 0a01 	add.w	sl, sl, #1
   12822:	f109 0901 	add.w	r9, r9, #1
   12826:	e7c6      	b.n	127b6 <cbvprintf_package+0x392>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   12828:	f899 2000 	ldrb.w	r2, [r9]
   1282c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   12830:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12832:	9b02      	ldr	r3, [sp, #8]
   12834:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   12838:	9800      	ldr	r0, [sp, #0]
   1283a:	f012 fb44 	bl	24ec6 <strlen>
   1283e:	1c42      	adds	r2, r0, #1
   12840:	e7dc      	b.n	127fc <cbvprintf_package+0x3d8>
		return -EFAULT;
   12842:	f06f 000d 	mvn.w	r0, #13
   12846:	e607      	b.n	12458 <cbvprintf_package+0x34>
   12848:	00027f5c 	.word	0x00027f5c
   1284c:	0002ab0f 	.word	0x0002ab0f
   12850:	00027f8a 	.word	0x00027f8a
   12854:	00027fe2 	.word	0x00027fe2
   12858:	00027ff7 	.word	0x00027ff7

0001285c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   1285c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12860:	b095      	sub	sp, #84	; 0x54
   12862:	af00      	add	r7, sp, #0
   12864:	e9c7 1208 	strd	r1, r2, [r7, #32]
   12868:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   1286c:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
   1286e:	4604      	mov	r4, r0
   12870:	b958      	cbnz	r0, 1288a <cbprintf_package_convert+0x2e>
   12872:	49a8      	ldr	r1, [pc, #672]	; (12b14 <cbprintf_package_convert+0x2b8>)
   12874:	4aa8      	ldr	r2, [pc, #672]	; (12b18 <cbprintf_package_convert+0x2bc>)
   12876:	48a9      	ldr	r0, [pc, #676]	; (12b1c <cbprintf_package_convert+0x2c0>)
   12878:	f44f 7365 	mov.w	r3, #916	; 0x394
   1287c:	f011 ff36 	bl	246ec <assert_print>
   12880:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12884:	48a4      	ldr	r0, [pc, #656]	; (12b18 <cbprintf_package_convert+0x2bc>)
   12886:	f011 ff2a 	bl	246de <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   1288a:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   1288e:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12890:	6a3b      	ldr	r3, [r7, #32]
   12892:	b953      	cbnz	r3, 128aa <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
   12894:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   12896:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   12898:	7880      	ldrb	r0, [r0, #2]
   1289a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1289e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   128a0:	6a3b      	ldr	r3, [r7, #32]
   128a2:	429e      	cmp	r6, r3
   128a4:	d81a      	bhi.n	128dc <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
   128a6:	1b03      	subs	r3, r0, r4
   128a8:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
   128aa:	f894 a002 	ldrb.w	sl, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   128ae:	78e3      	ldrb	r3, [r4, #3]
   128b0:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   128b2:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   128b4:	f1ba 0f00 	cmp.w	sl, #0
   128b8:	d002      	beq.n	128c0 <cbprintf_package_convert+0x64>
   128ba:	f01b 0f01 	tst.w	fp, #1
   128be:	d117      	bne.n	128f0 <cbprintf_package_convert+0x94>
	rw_cpy = rws_nbr > 0 &&
   128c0:	697b      	ldr	r3, [r7, #20]
   128c2:	bb5b      	cbnz	r3, 1291c <cbprintf_package_convert+0xc0>
		if (cb) {
   128c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   128c6:	b11b      	cbz	r3, 128d0 <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
   128c8:	69ba      	ldr	r2, [r7, #24]
   128ca:	6a39      	ldr	r1, [r7, #32]
   128cc:	4620      	mov	r0, r4
   128ce:	4798      	blx	r3
		return in_len;
   128d0:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   128d2:	4628      	mov	r0, r5
   128d4:	3754      	adds	r7, #84	; 0x54
   128d6:	46bd      	mov	sp, r7
   128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   128dc:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   128de:	4628      	mov	r0, r5
   128e0:	f012 faf1 	bl	24ec6 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   128e4:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   128e6:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   128e8:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   128ea:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   128ec:	623b      	str	r3, [r7, #32]
   128ee:	e7d7      	b.n	128a0 <cbprintf_package_convert+0x44>
	rw_cpy = rws_nbr > 0 &&
   128f0:	f894 8000 	ldrb.w	r8, [r4]
   128f4:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   128f6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   128f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   128fa:	ea4f 0288 	mov.w	r2, r8, lsl #2
   128fe:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   12900:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   12904:	2b00      	cmp	r3, #0
   12906:	f040 8115 	bne.w	12b34 <cbprintf_package_convert+0x2d8>
		out_len = (int)in_len;
   1290a:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   1290c:	46c1      	mov	r9, r8
   1290e:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   12912:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   12914:	4599      	cmp	r9, r3
   12916:	d14e      	bne.n	129b6 <cbprintf_package_convert+0x15a>
   12918:	44d0      	add	r8, sl
   1291a:	e013      	b.n	12944 <cbprintf_package_convert+0xe8>
	rw_cpy = rws_nbr > 0 &&
   1291c:	f01b 0f02 	tst.w	fp, #2
   12920:	d0d0      	beq.n	128c4 <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
   12922:	f894 8000 	ldrb.w	r8, [r4]
   12926:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1292a:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1292c:	6863      	ldr	r3, [r4, #4]
   1292e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   12930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   12932:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   12936:	2b00      	cmp	r3, #0
   12938:	d178      	bne.n	12a2c <cbprintf_package_convert+0x1d0>
		out_len = (int)in_len;
   1293a:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1293c:	f1ba 0f00 	cmp.w	sl, #0
   12940:	d14e      	bne.n	129e0 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
   12942:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12944:	f01b 0f05 	tst.w	fp, #5
   12948:	bf0c      	ite	eq
   1294a:	2302      	moveq	r3, #2
   1294c:	2301      	movne	r3, #1
   1294e:	627b      	str	r3, [r7, #36]	; 0x24
   12950:	697b      	ldr	r3, [r7, #20]
   12952:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12956:	f00b 0302 	and.w	r3, fp, #2
   1295a:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   1295c:	45d0      	cmp	r8, sl
   1295e:	d0b8      	beq.n	128d2 <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
   12960:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   12964:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   12968:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   1296c:	4b6c      	ldr	r3, [pc, #432]	; (12b20 <cbprintf_package_convert+0x2c4>)
   1296e:	4599      	cmp	r9, r3
   12970:	d302      	bcc.n	12978 <cbprintf_package_convert+0x11c>
   12972:	4b6c      	ldr	r3, [pc, #432]	; (12b24 <cbprintf_package_convert+0x2c8>)
   12974:	4599      	cmp	r9, r3
   12976:	d339      	bcc.n	129ec <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12978:	693b      	ldr	r3, [r7, #16]
   1297a:	2b00      	cmp	r3, #0
   1297c:	d043      	beq.n	12a06 <cbprintf_package_convert+0x1aa>
   1297e:	69f8      	ldr	r0, [r7, #28]
   12980:	f011 fc41 	bl	24206 <is_ptr>
   12984:	2800      	cmp	r0, #0
   12986:	d03e      	beq.n	12a06 <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12988:	46e9      	mov	r9, sp
   1298a:	b08a      	sub	sp, #40	; 0x28
   1298c:	466a      	mov	r2, sp
   1298e:	4b66      	ldr	r3, [pc, #408]	; (12b28 <cbprintf_package_convert+0x2cc>)
   12990:	6153      	str	r3, [r2, #20]
   12992:	69fb      	ldr	r3, [r7, #28]
   12994:	e9c2 3106 	strd	r3, r1, [r2, #24]
   12998:	f44f 7300 	mov.w	r3, #512	; 0x200
   1299c:	8413      	strh	r3, [r2, #32]
   1299e:	4b63      	ldr	r3, [pc, #396]	; (12b2c <cbprintf_package_convert+0x2d0>)
   129a0:	f842 3f10 	str.w	r3, [r2, #16]!
   129a4:	4862      	ldr	r0, [pc, #392]	; (12b30 <cbprintf_package_convert+0x2d4>)
   129a6:	2300      	movs	r3, #0
   129a8:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   129ac:	f001 fb7c 	bl	140a8 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   129b0:	3d02      	subs	r5, #2
   129b2:	46cd      	mov	sp, r9
				continue;
   129b4:	e7d2      	b.n	1295c <cbprintf_package_convert+0x100>
				const char *str = *(const char **)&buf32[*str_pos];
   129b6:	f819 2b01 	ldrb.w	r2, [r9], #1
   129ba:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   129bc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   129c0:	f012 fa81 	bl	24ec6 <strlen>
				if (strl && strl_cnt < strl_len) {
   129c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   129c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   129c8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   129ca:	b13a      	cbz	r2, 129dc <cbprintf_package_convert+0x180>
   129cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   129d0:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   129d2:	bf3e      	ittt	cc
   129d4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   129d6:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   129da:	3601      	addcc	r6, #1
				out_len += len;
   129dc:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   129de:	e799      	b.n	12914 <cbprintf_package_convert+0xb8>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   129e0:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   129e4:	bf1c      	itt	ne
   129e6:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   129e8:	44d0      	addne	r8, sl
   129ea:	e7ab      	b.n	12944 <cbprintf_package_convert+0xe8>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   129ec:	693b      	ldr	r3, [r7, #16]
   129ee:	b123      	cbz	r3, 129fa <cbprintf_package_convert+0x19e>
   129f0:	69f8      	ldr	r0, [r7, #28]
   129f2:	f011 fc08 	bl	24206 <is_ptr>
   129f6:	2800      	cmp	r0, #0
   129f8:	d1c6      	bne.n	12988 <cbprintf_package_convert+0x12c>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   129fa:	f01b 0f01 	tst.w	fp, #1
   129fe:	d105      	bne.n	12a0c <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
   12a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a02:	1aed      	subs	r5, r5, r3
   12a04:	e7aa      	b.n	1295c <cbprintf_package_convert+0x100>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12a06:	6a3b      	ldr	r3, [r7, #32]
   12a08:	2b00      	cmp	r3, #0
   12a0a:	d0a7      	beq.n	1295c <cbprintf_package_convert+0x100>
		return 1 + strlen(str);
   12a0c:	4648      	mov	r0, r9
   12a0e:	f012 fa5a 	bl	24ec6 <strlen>
				if (strl && strl_cnt < strl_len) {
   12a12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   12a14:	b143      	cbz	r3, 12a28 <cbprintf_package_convert+0x1cc>
   12a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   12a1a:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   12a1c:	bf3f      	itttt	cc
   12a1e:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   12a20:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   12a22:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   12a26:	3601      	addcc	r6, #1
				out_len += (len - 1);
   12a28:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12a2a:	e797      	b.n	1295c <cbprintf_package_convert+0x100>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12a2c:	f1ba 0f00 	cmp.w	sl, #0
   12a30:	f000 8085 	beq.w	12b3e <cbprintf_package_convert+0x2e2>
   12a34:	f01b 0604 	ands.w	r6, fp, #4
   12a38:	f000 8084 	beq.w	12b44 <cbprintf_package_convert+0x2e8>
		keep_cnt = ros_nbr;
   12a3c:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   12a3e:	2600      	movs	r6, #0
		dst = keep_str_pos;
   12a40:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   12a44:	4652      	mov	r2, sl
   12a46:	4641      	mov	r1, r8
   12a48:	f012 fa5d 	bl	24f06 <memcpy>
	str_pos += ros_nbr;
   12a4c:	697b      	ldr	r3, [r7, #20]
   12a4e:	005b      	lsls	r3, r3, #1
   12a50:	60bb      	str	r3, [r7, #8]
   12a52:	697b      	ldr	r3, [r7, #20]
   12a54:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12a56:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   12a5a:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12a5c:	f00b 0302 	and.w	r3, fp, #2
   12a60:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12a62:	697b      	ldr	r3, [r7, #20]
   12a64:	4598      	cmp	r8, r3
   12a66:	d16f      	bne.n	12b48 <cbprintf_package_convert+0x2ec>
	out_desc.len = in_desc->len;
   12a68:	7823      	ldrb	r3, [r4, #0]
   12a6a:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12a6c:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12a6e:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12a72:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12a76:	bf0c      	ite	eq
   12a78:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   12a7c:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12a7e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12a82:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12a84:	f040 80e3 	bne.w	12c4e <cbprintf_package_convert+0x3f2>
   12a88:	f01b 0f04 	tst.w	fp, #4
   12a8c:	bf14      	ite	ne
   12a8e:	4648      	movne	r0, r9
   12a90:	2000      	moveq	r0, #0
   12a92:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12a94:	78a3      	ldrb	r3, [r4, #2]
   12a96:	f894 b003 	ldrb.w	fp, [r4, #3]
   12a9a:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   12a9c:	7062      	strb	r2, [r4, #1]
   12a9e:	70a0      	strb	r0, [r4, #2]
   12aa0:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   12aa2:	69ba      	ldr	r2, [r7, #24]
   12aa4:	68f9      	ldr	r1, [r7, #12]
   12aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12aa8:	4620      	mov	r0, r4
   12aaa:	4798      	blx	r3
	if (rv < 0) {
   12aac:	1e05      	subs	r5, r0, #0
   12aae:	f6ff af10 	blt.w	128d2 <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
   12ab2:	697b      	ldr	r3, [r7, #20]
   12ab4:	7023      	strb	r3, [r4, #0]
   12ab6:	693b      	ldr	r3, [r7, #16]
   12ab8:	7063      	strb	r3, [r4, #1]
   12aba:	69fb      	ldr	r3, [r7, #28]
   12abc:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12abe:	4649      	mov	r1, r9
   12ac0:	69ba      	ldr	r2, [r7, #24]
   12ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   12ac4:	f884 b003 	strb.w	fp, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12ac8:	f107 0040 	add.w	r0, r7, #64	; 0x40
   12acc:	4798      	blx	r3
	if (rv < 0) {
   12ace:	f1b0 0900 	subs.w	r9, r0, #0
   12ad2:	f2c0 80e9 	blt.w	12ca8 <cbprintf_package_convert+0x44c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12ad6:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   12ad8:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12ada:	eba3 010a 	sub.w	r1, r3, sl
   12ade:	68fb      	ldr	r3, [r7, #12]
   12ae0:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   12ae2:	68bb      	ldr	r3, [r7, #8]
   12ae4:	4640      	mov	r0, r8
   12ae6:	1ac9      	subs	r1, r1, r3
   12ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12aea:	4798      	blx	r3
	if (rv < 0) {
   12aec:	2800      	cmp	r0, #0
   12aee:	f2c0 80dd 	blt.w	12cac <cbprintf_package_convert+0x450>
	out_len += rv;
   12af2:	eb05 0809 	add.w	r8, r5, r9
	out_len += rv;
   12af6:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12afa:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   12afe:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12b02:	45b3      	cmp	fp, r6
   12b04:	f0c0 80a5 	bcc.w	12c52 <cbprintf_package_convert+0x3f6>
	(void)cb(NULL, 0, ctx);
   12b08:	2100      	movs	r1, #0
   12b0a:	69ba      	ldr	r2, [r7, #24]
   12b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b0e:	4608      	mov	r0, r1
   12b10:	4798      	blx	r3
	return out_len;
   12b12:	e6de      	b.n	128d2 <cbprintf_package_convert+0x76>
   12b14:	0002800e 	.word	0x0002800e
   12b18:	00027f5c 	.word	0x00027f5c
   12b1c:	00027f8a 	.word	0x00027f8a
   12b20:	00027068 	.word	0x00027068
   12b24:	0002bdcc 	.word	0x0002bdcc
   12b28:	00028029 	.word	0x00028029
   12b2c:	01000004 	.word	0x01000004
   12b30:	000273a8 	.word	0x000273a8
	if (cb == NULL) {
   12b34:	f04f 0900 	mov.w	r9, #0
   12b38:	f107 0030 	add.w	r0, r7, #48	; 0x30
   12b3c:	e782      	b.n	12a44 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
   12b3e:	4656      	mov	r6, sl
		keep_cnt = 0;
   12b40:	46d1      	mov	r9, sl
   12b42:	e783      	b.n	12a4c <cbprintf_package_convert+0x1f0>
   12b44:	46b1      	mov	r9, r6
   12b46:	e781      	b.n	12a4c <cbprintf_package_convert+0x1f0>
		uint8_t arg_idx = *str_pos++;
   12b48:	f818 1b02 	ldrb.w	r1, [r8], #2
   12b4c:	4b58      	ldr	r3, [pc, #352]	; (12cb0 <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
   12b4e:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   12b52:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   12b56:	429a      	cmp	r2, r3
   12b58:	d302      	bcc.n	12b60 <cbprintf_package_convert+0x304>
   12b5a:	4b56      	ldr	r3, [pc, #344]	; (12cb4 <cbprintf_package_convert+0x458>)
   12b5c:	429a      	cmp	r2, r3
   12b5e:	d316      	bcc.n	12b8e <cbprintf_package_convert+0x332>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12b60:	693b      	ldr	r3, [r7, #16]
   12b62:	b12b      	cbz	r3, 12b70 <cbprintf_package_convert+0x314>
   12b64:	69f8      	ldr	r0, [r7, #28]
   12b66:	f011 fb4e 	bl	24206 <is_ptr>
   12b6a:	2800      	cmp	r0, #0
   12b6c:	f47f af79 	bne.w	12a62 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12b70:	687b      	ldr	r3, [r7, #4]
   12b72:	2b00      	cmp	r3, #0
   12b74:	d04a      	beq.n	12c0c <cbprintf_package_convert+0x3b0>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12b76:	2e0f      	cmp	r6, #15
   12b78:	d93e      	bls.n	12bf8 <cbprintf_package_convert+0x39c>
   12b7a:	494f      	ldr	r1, [pc, #316]	; (12cb8 <cbprintf_package_convert+0x45c>)
   12b7c:	4a4f      	ldr	r2, [pc, #316]	; (12cbc <cbprintf_package_convert+0x460>)
   12b7e:	4850      	ldr	r0, [pc, #320]	; (12cc0 <cbprintf_package_convert+0x464>)
   12b80:	f44f 6389 	mov.w	r3, #1096	; 0x448
   12b84:	f011 fdb2 	bl	246ec <assert_print>
   12b88:	f44f 6189 	mov.w	r1, #1096	; 0x448
   12b8c:	e67a      	b.n	12884 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12b8e:	693b      	ldr	r3, [r7, #16]
   12b90:	b12b      	cbz	r3, 12b9e <cbprintf_package_convert+0x342>
   12b92:	69f8      	ldr	r0, [r7, #28]
   12b94:	f011 fb37 	bl	24206 <is_ptr>
   12b98:	2800      	cmp	r0, #0
   12b9a:	f47f af62 	bne.w	12a62 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12b9e:	f01b 0f01 	tst.w	fp, #1
   12ba2:	d00b      	beq.n	12bbc <cbprintf_package_convert+0x360>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12ba4:	2e0f      	cmp	r6, #15
   12ba6:	d927      	bls.n	12bf8 <cbprintf_package_convert+0x39c>
   12ba8:	4943      	ldr	r1, [pc, #268]	; (12cb8 <cbprintf_package_convert+0x45c>)
   12baa:	4a44      	ldr	r2, [pc, #272]	; (12cbc <cbprintf_package_convert+0x460>)
   12bac:	4844      	ldr	r0, [pc, #272]	; (12cc0 <cbprintf_package_convert+0x464>)
   12bae:	f240 433e 	movw	r3, #1086	; 0x43e
   12bb2:	f011 fd9b 	bl	246ec <assert_print>
   12bb6:	f240 413e 	movw	r1, #1086	; 0x43e
   12bba:	e663      	b.n	12884 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12bbc:	f01b 0f04 	tst.w	fp, #4
   12bc0:	f43f af4f 	beq.w	12a62 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   12bc4:	f1b9 0f0f 	cmp.w	r9, #15
   12bc8:	d909      	bls.n	12bde <cbprintf_package_convert+0x382>
   12bca:	493e      	ldr	r1, [pc, #248]	; (12cc4 <cbprintf_package_convert+0x468>)
   12bcc:	4a3b      	ldr	r2, [pc, #236]	; (12cbc <cbprintf_package_convert+0x460>)
   12bce:	483c      	ldr	r0, [pc, #240]	; (12cc0 <cbprintf_package_convert+0x464>)
   12bd0:	f240 4341 	movw	r3, #1089	; 0x441
   12bd4:	f011 fd8a 	bl	246ec <assert_print>
   12bd8:	f240 4141 	movw	r1, #1089	; 0x441
   12bdc:	e652      	b.n	12884 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
   12bde:	f109 0328 	add.w	r3, r9, #40	; 0x28
   12be2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12be6:	f109 0201 	add.w	r2, r9, #1
   12bea:	eb03 0901 	add.w	r9, r3, r1
   12bee:	f809 5c10 	strb.w	r5, [r9, #-16]
   12bf2:	fa5f f982 	uxtb.w	r9, r2
   12bf6:	e734      	b.n	12a62 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12bf8:	f106 0328 	add.w	r3, r6, #40	; 0x28
   12bfc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12c00:	1c72      	adds	r2, r6, #1
   12c02:	185e      	adds	r6, r3, r1
   12c04:	f806 5c20 	strb.w	r5, [r6, #-32]
   12c08:	b2d6      	uxtb	r6, r2
   12c0a:	e72a      	b.n	12a62 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   12c0c:	f1b9 0f0f 	cmp.w	r9, #15
   12c10:	d909      	bls.n	12c26 <cbprintf_package_convert+0x3ca>
   12c12:	492c      	ldr	r1, [pc, #176]	; (12cc4 <cbprintf_package_convert+0x468>)
   12c14:	4a29      	ldr	r2, [pc, #164]	; (12cbc <cbprintf_package_convert+0x460>)
   12c16:	482a      	ldr	r0, [pc, #168]	; (12cc0 <cbprintf_package_convert+0x464>)
   12c18:	f240 434b 	movw	r3, #1099	; 0x44b
   12c1c:	f011 fd66 	bl	246ec <assert_print>
   12c20:	f240 414b 	movw	r1, #1099	; 0x44b
   12c24:	e62e      	b.n	12884 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
   12c26:	f109 0328 	add.w	r3, r9, #40	; 0x28
   12c2a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   12c2e:	f109 0201 	add.w	r2, r9, #1
   12c32:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
   12c34:	f107 0350 	add.w	r3, r7, #80	; 0x50
   12c38:	fa53 f282 	uxtab	r2, r3, r2
   12c3c:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   12c40:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   12c44:	fa5f f989 	uxtb.w	r9, r9
   12c48:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12c4c:	e709      	b.n	12a62 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12c4e:	2000      	movs	r0, #0
   12c50:	e71f      	b.n	12a92 <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
   12c52:	f81b 300a 	ldrb.w	r3, [fp, sl]
   12c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   12c5a:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   12c60:	b1fb      	cbz	r3, 12ca2 <cbprintf_package_convert+0x446>
   12c62:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   12c66:	69ba      	ldr	r2, [r7, #24]
   12c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c6a:	2101      	movs	r1, #1
   12c6c:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   12c70:	4798      	blx	r3
		if (rv < 0) {
   12c72:	2800      	cmp	r0, #0
   12c74:	db1a      	blt.n	12cac <cbprintf_package_convert+0x450>
		out_len += rv;
   12c76:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   12c78:	f1b8 0f00 	cmp.w	r8, #0
   12c7c:	d106      	bne.n	12c8c <cbprintf_package_convert+0x430>
   12c7e:	4648      	mov	r0, r9
   12c80:	f012 f921 	bl	24ec6 <strlen>
   12c84:	f100 0801 	add.w	r8, r0, #1
   12c88:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   12c8c:	69ba      	ldr	r2, [r7, #24]
   12c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c90:	4641      	mov	r1, r8
   12c92:	4648      	mov	r0, r9
   12c94:	4798      	blx	r3
		if (rv < 0) {
   12c96:	2800      	cmp	r0, #0
   12c98:	db08      	blt.n	12cac <cbprintf_package_convert+0x450>
		out_len += rv;
   12c9a:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12c9c:	f10b 0b01 	add.w	fp, fp, #1
   12ca0:	e72f      	b.n	12b02 <cbprintf_package_convert+0x2a6>
		uint16_t str_len = strl ? strl[i] : 0;
   12ca2:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   12ca6:	e7de      	b.n	12c66 <cbprintf_package_convert+0x40a>
   12ca8:	464d      	mov	r5, r9
   12caa:	e612      	b.n	128d2 <cbprintf_package_convert+0x76>
   12cac:	4605      	mov	r5, r0
   12cae:	e610      	b.n	128d2 <cbprintf_package_convert+0x76>
   12cb0:	00027068 	.word	0x00027068
   12cb4:	0002bdcc 	.word	0x0002bdcc
   12cb8:	000280cc 	.word	0x000280cc
   12cbc:	00027f5c 	.word	0x00027f5c
   12cc0:	00027f8a 	.word	0x00027f8a
   12cc4:	000280eb 	.word	0x000280eb

00012cc8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12cc8:	4b01      	ldr	r3, [pc, #4]	; (12cd0 <__printk_hook_install+0x8>)
   12cca:	6018      	str	r0, [r3, #0]
}
   12ccc:	4770      	bx	lr
   12cce:	bf00      	nop
   12cd0:	200005cc 	.word	0x200005cc

00012cd4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12cd4:	b530      	push	{r4, r5, lr}
   12cd6:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12cd8:	2500      	movs	r5, #0
   12cda:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12cde:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12ce0:	9500      	str	r5, [sp, #0]
   12ce2:	a903      	add	r1, sp, #12
   12ce4:	4805      	ldr	r0, [pc, #20]	; (12cfc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12ce6:	9505      	str	r5, [sp, #20]
   12ce8:	f7fe f946 	bl	10f78 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12cec:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12cf0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12cf2:	bfb8      	it	lt
   12cf4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12cf6:	b007      	add	sp, #28
   12cf8:	bd30      	pop	{r4, r5, pc}
   12cfa:	bf00      	nop
   12cfc:	00024255 	.word	0x00024255

00012d00 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12d00:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   12d02:	460c      	mov	r4, r1
   12d04:	2900      	cmp	r1, #0
   12d06:	d034      	beq.n	12d72 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12d08:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12d0a:	1f0b      	subs	r3, r1, #4
   12d0c:	1a9b      	subs	r3, r3, r2
   12d0e:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12d10:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12d14:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12d16:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12d18:	07e8      	lsls	r0, r5, #31
   12d1a:	d40d      	bmi.n	12d38 <sys_heap_free+0x38>
   12d1c:	4a15      	ldr	r2, [pc, #84]	; (12d74 <sys_heap_free+0x74>)
   12d1e:	4916      	ldr	r1, [pc, #88]	; (12d78 <sys_heap_free+0x78>)
   12d20:	4816      	ldr	r0, [pc, #88]	; (12d7c <sys_heap_free+0x7c>)
   12d22:	23af      	movs	r3, #175	; 0xaf
   12d24:	f011 fce2 	bl	246ec <assert_print>
   12d28:	4621      	mov	r1, r4
   12d2a:	4815      	ldr	r0, [pc, #84]	; (12d80 <sys_heap_free+0x80>)
   12d2c:	f011 fcde 	bl	246ec <assert_print>
   12d30:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12d32:	4810      	ldr	r0, [pc, #64]	; (12d74 <sys_heap_free+0x74>)
   12d34:	f011 fcd3 	bl	246de <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   12d38:	4610      	mov	r0, r2
   12d3a:	f011 fac4 	bl	242c6 <chunk_size>
   12d3e:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   12d40:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   12d44:	1b80      	subs	r0, r0, r6
   12d46:	4281      	cmp	r1, r0
   12d48:	d00b      	beq.n	12d62 <sys_heap_free+0x62>
   12d4a:	4a0a      	ldr	r2, [pc, #40]	; (12d74 <sys_heap_free+0x74>)
   12d4c:	490d      	ldr	r1, [pc, #52]	; (12d84 <sys_heap_free+0x84>)
   12d4e:	480b      	ldr	r0, [pc, #44]	; (12d7c <sys_heap_free+0x7c>)
   12d50:	23b7      	movs	r3, #183	; 0xb7
   12d52:	f011 fccb 	bl	246ec <assert_print>
   12d56:	4621      	mov	r1, r4
   12d58:	480b      	ldr	r0, [pc, #44]	; (12d88 <sys_heap_free+0x88>)
   12d5a:	f011 fcc7 	bl	246ec <assert_print>
   12d5e:	21b7      	movs	r1, #183	; 0xb7
   12d60:	e7e7      	b.n	12d32 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12d62:	f025 0501 	bic.w	r5, r5, #1
   12d66:	805d      	strh	r5, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   12d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   12d6c:	4610      	mov	r0, r2
   12d6e:	f011 bb67 	b.w	24440 <free_chunk>
}
   12d72:	bd70      	pop	{r4, r5, r6, pc}
   12d74:	0002811c 	.word	0x0002811c
   12d78:	0002813d 	.word	0x0002813d
   12d7c:	00027f8a 	.word	0x00027f8a
   12d80:	0002814e 	.word	0x0002814e
   12d84:	00028186 	.word	0x00028186
   12d88:	000281ac 	.word	0x000281ac

00012d8c <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   12d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d90:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   12d92:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   12d94:	6806      	ldr	r6, [r0, #0]
{
   12d96:	460f      	mov	r7, r1
   12d98:	4614      	mov	r4, r2
	if (align != rew) {
   12d9a:	d011      	beq.n	12dc0 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   12d9c:	f1c1 0900 	rsb	r9, r1, #0
   12da0:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   12da4:	464a      	mov	r2, r9
   12da6:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12da8:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   12dac:	bf28      	it	cs
   12dae:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12db0:	4219      	tst	r1, r3
   12db2:	d10c      	bne.n	12dce <sys_heap_aligned_alloc+0x42>
   12db4:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   12db6:	b9e4      	cbnz	r4, 12df2 <sys_heap_aligned_alloc+0x66>
		return NULL;
   12db8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   12dba:	4628      	mov	r0, r5
   12dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   12dc0:	2904      	cmp	r1, #4
   12dc2:	d813      	bhi.n	12dec <sys_heap_aligned_alloc+0x60>
}
   12dc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   12dc8:	4611      	mov	r1, r2
   12dca:	f011 bb6a 	b.w	244a2 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12dce:	492c      	ldr	r1, [pc, #176]	; (12e80 <sys_heap_aligned_alloc+0xf4>)
   12dd0:	4a2c      	ldr	r2, [pc, #176]	; (12e84 <sys_heap_aligned_alloc+0xf8>)
   12dd2:	482d      	ldr	r0, [pc, #180]	; (12e88 <sys_heap_aligned_alloc+0xfc>)
   12dd4:	f44f 73a2 	mov.w	r3, #324	; 0x144
   12dd8:	f011 fc88 	bl	246ec <assert_print>
   12ddc:	482b      	ldr	r0, [pc, #172]	; (12e8c <sys_heap_aligned_alloc+0x100>)
   12dde:	f011 fc85 	bl	246ec <assert_print>
   12de2:	4828      	ldr	r0, [pc, #160]	; (12e84 <sys_heap_aligned_alloc+0xf8>)
   12de4:	f44f 71a2 	mov.w	r1, #324	; 0x144
   12de8:	f011 fc79 	bl	246de <assert_post_action>
		rew = 0;
   12dec:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   12dee:	2204      	movs	r2, #4
   12df0:	e7e1      	b.n	12db6 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   12df2:	68b3      	ldr	r3, [r6, #8]
   12df4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12df8:	d9de      	bls.n	12db8 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12dfa:	f104 010b 	add.w	r1, r4, #11
   12dfe:	4439      	add	r1, r7
   12e00:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   12e02:	08c9      	lsrs	r1, r1, #3
   12e04:	4630      	mov	r0, r6
   12e06:	f011 fab4 	bl	24372 <alloc_chunk>
	if (c0 == 0) {
   12e0a:	4680      	mov	r8, r0
   12e0c:	2800      	cmp	r0, #0
   12e0e:	d0d3      	beq.n	12db8 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12e10:	f109 0504 	add.w	r5, r9, #4
   12e14:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12e18:	1e7b      	subs	r3, r7, #1
   12e1a:	4435      	add	r5, r6
   12e1c:	441d      	add	r5, r3
   12e1e:	427f      	negs	r7, r7
   12e20:	403d      	ands	r5, r7
   12e22:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12e26:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12e28:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12e2a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12e2c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12e2e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   12e32:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12e34:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12e38:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12e3c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12e40:	d208      	bcs.n	12e54 <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
   12e42:	4601      	mov	r1, r0
   12e44:	463a      	mov	r2, r7
   12e46:	4630      	mov	r0, r6
   12e48:	f011 fae0 	bl	2440c <split_chunks>
		free_list_add(h, c0);
   12e4c:	4641      	mov	r1, r8
   12e4e:	4630      	mov	r0, r6
   12e50:	f011 fa3e 	bl	242d0 <free_list_add>
	return c + chunk_size(h, c);
   12e54:	4639      	mov	r1, r7
   12e56:	4630      	mov	r0, r6
   12e58:	f011 fa35 	bl	242c6 <chunk_size>
   12e5c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   12e5e:	4284      	cmp	r4, r0
   12e60:	d207      	bcs.n	12e72 <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
   12e62:	4630      	mov	r0, r6
   12e64:	4622      	mov	r2, r4
   12e66:	f011 fad1 	bl	2440c <split_chunks>
		free_list_add(h, c_end);
   12e6a:	4621      	mov	r1, r4
   12e6c:	4630      	mov	r0, r6
   12e6e:	f011 fa2f 	bl	242d0 <free_list_add>
	void *cmem = &buf[c];
   12e72:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12e76:	8873      	ldrh	r3, [r6, #2]
   12e78:	f043 0301 	orr.w	r3, r3, #1
   12e7c:	8073      	strh	r3, [r6, #2]
   12e7e:	e79c      	b.n	12dba <sys_heap_aligned_alloc+0x2e>
   12e80:	000281e8 	.word	0x000281e8
   12e84:	0002811c 	.word	0x0002811c
   12e88:	00027f8a 	.word	0x00027f8a
   12e8c:	00028203 	.word	0x00028203

00012e90 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12e90:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   12e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e96:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12e98:	d30e      	bcc.n	12eb8 <sys_heap_init+0x28>
   12e9a:	493b      	ldr	r1, [pc, #236]	; (12f88 <sys_heap_init+0xf8>)
   12e9c:	4a3b      	ldr	r2, [pc, #236]	; (12f8c <sys_heap_init+0xfc>)
   12e9e:	483c      	ldr	r0, [pc, #240]	; (12f90 <sys_heap_init+0x100>)
   12ea0:	f240 13eb 	movw	r3, #491	; 0x1eb
   12ea4:	f011 fc22 	bl	246ec <assert_print>
   12ea8:	483a      	ldr	r0, [pc, #232]	; (12f94 <sys_heap_init+0x104>)
   12eaa:	f011 fc1f 	bl	246ec <assert_print>
   12eae:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12eb2:	4836      	ldr	r0, [pc, #216]	; (12f8c <sys_heap_init+0xfc>)
   12eb4:	f011 fc13 	bl	246de <assert_post_action>
   12eb8:	2a04      	cmp	r2, #4
   12eba:	d80c      	bhi.n	12ed6 <sys_heap_init+0x46>
   12ebc:	4936      	ldr	r1, [pc, #216]	; (12f98 <sys_heap_init+0x108>)
   12ebe:	4a33      	ldr	r2, [pc, #204]	; (12f8c <sys_heap_init+0xfc>)
   12ec0:	4833      	ldr	r0, [pc, #204]	; (12f90 <sys_heap_init+0x100>)
   12ec2:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   12ec6:	f011 fc11 	bl	246ec <assert_print>
   12eca:	4834      	ldr	r0, [pc, #208]	; (12f9c <sys_heap_init+0x10c>)
   12ecc:	f011 fc0e 	bl	246ec <assert_print>
   12ed0:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   12ed4:	e7ed      	b.n	12eb2 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
   12ed6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12ed8:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12eda:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12edc:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12ee0:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12ee4:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12ee6:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12ee8:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12eec:	d80c      	bhi.n	12f08 <sys_heap_init+0x78>
   12eee:	492c      	ldr	r1, [pc, #176]	; (12fa0 <sys_heap_init+0x110>)
   12ef0:	4a26      	ldr	r2, [pc, #152]	; (12f8c <sys_heap_init+0xfc>)
   12ef2:	4827      	ldr	r0, [pc, #156]	; (12f90 <sys_heap_init+0x100>)
   12ef4:	f240 13fb 	movw	r3, #507	; 0x1fb
   12ef8:	f011 fbf8 	bl	246ec <assert_print>
   12efc:	4827      	ldr	r0, [pc, #156]	; (12f9c <sys_heap_init+0x10c>)
   12efe:	f011 fbf5 	bl	246ec <assert_print>
   12f02:	f240 11fb 	movw	r1, #507	; 0x1fb
   12f06:	e7d4      	b.n	12eb2 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   12f08:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12f0c:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12f10:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   12f14:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12f16:	3107      	adds	r1, #7
   12f18:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12f1a:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   12f1c:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12f1e:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   12f20:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   12f24:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   12f26:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12f28:	d90c      	bls.n	12f44 <sys_heap_init+0xb4>
   12f2a:	491e      	ldr	r1, [pc, #120]	; (12fa4 <sys_heap_init+0x114>)
   12f2c:	4a17      	ldr	r2, [pc, #92]	; (12f8c <sys_heap_init+0xfc>)
   12f2e:	4818      	ldr	r0, [pc, #96]	; (12f90 <sys_heap_init+0x100>)
   12f30:	f44f 7303 	mov.w	r3, #524	; 0x20c
   12f34:	f011 fbda 	bl	246ec <assert_print>
   12f38:	4818      	ldr	r0, [pc, #96]	; (12f9c <sys_heap_init+0x10c>)
   12f3a:	f011 fbd7 	bl	246ec <assert_print>
   12f3e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   12f42:	e7b6      	b.n	12eb2 <sys_heap_init+0x22>
   12f44:	f100 050c 	add.w	r5, r0, #12
   12f48:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12f4c:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   12f50:	42b5      	cmp	r5, r6
   12f52:	d1fb      	bne.n	12f4c <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12f54:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12f56:	f045 0501 	orr.w	r5, r5, #1
   12f5a:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   12f5c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12f60:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12f62:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   12f64:	8004      	strh	r4, [r0, #0]
   12f66:	8077      	strh	r7, [r6, #2]
   12f68:	1886      	adds	r6, r0, r2
   12f6a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   12f6e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   12f72:	8074      	strh	r4, [r6, #2]
   12f74:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12f76:	885a      	ldrh	r2, [r3, #2]
   12f78:	f042 0201 	orr.w	r2, r2, #1
   12f7c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   12f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12f82:	f011 b9a5 	b.w	242d0 <free_list_add>
   12f86:	bf00      	nop
   12f88:	00028220 	.word	0x00028220
   12f8c:	0002811c 	.word	0x0002811c
   12f90:	00027f8a 	.word	0x00027f8a
   12f94:	00028236 	.word	0x00028236
   12f98:	0002824d 	.word	0x0002824d
   12f9c:	0002826e 	.word	0x0002826e
   12fa0:	00028287 	.word	0x00028287
   12fa4:	000282b0 	.word	0x000282b0

00012fa8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fac:	4604      	mov	r4, r0
   12fae:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12fb0:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12fb2:	0719      	lsls	r1, r3, #28
{
   12fb4:	4615      	mov	r5, r2
	if (processing) {
   12fb6:	d412      	bmi.n	12fde <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   12fb8:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12fba:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   12fbe:	d164      	bne.n	1308a <process_event+0xe2>
			evt = process_recheck(mgr);
   12fc0:	4620      	mov	r0, r4
   12fc2:	f011 fa97 	bl	244f4 <process_recheck>
		}

		if (evt == EVT_NOP) {
   12fc6:	b188      	cbz	r0, 12fec <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   12fc8:	3801      	subs	r0, #1
   12fca:	2804      	cmp	r0, #4
   12fcc:	f200 8134 	bhi.w	13238 <process_event+0x290>
   12fd0:	e8df f010 	tbh	[pc, r0, lsl #1]
   12fd4:	0132005b 	.word	0x0132005b
   12fd8:	00d10081 	.word	0x00d10081
   12fdc:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
   12fde:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12fe0:	bf0c      	ite	eq
   12fe2:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12fe6:	f043 0120 	orrne.w	r1, r3, #32
   12fea:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   12fec:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12fee:	4620      	mov	r0, r4
   12ff0:	f00d fb76 	bl	206e0 <z_spin_unlock_valid>
   12ff4:	2800      	cmp	r0, #0
   12ff6:	f040 819b 	bne.w	13330 <process_event+0x388>
   12ffa:	4998      	ldr	r1, [pc, #608]	; (1325c <process_event+0x2b4>)
   12ffc:	4a98      	ldr	r2, [pc, #608]	; (13260 <process_event+0x2b8>)
   12ffe:	4899      	ldr	r0, [pc, #612]	; (13264 <process_event+0x2bc>)
   13000:	23c2      	movs	r3, #194	; 0xc2
   13002:	f011 fb73 	bl	246ec <assert_print>
   13006:	4621      	mov	r1, r4
   13008:	e0b0      	b.n	1316c <process_event+0x1c4>
   1300a:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1300e:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   13010:	2801      	cmp	r0, #1
   13012:	d81e      	bhi.n	13052 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   13014:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   13016:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   13018:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1301a:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1301e:	d114      	bne.n	1304a <process_event+0xa2>
		*clients = mgr->clients;
   13020:	463a      	mov	r2, r7
   13022:	e003      	b.n	1302c <process_event+0x84>
				mgr->refs += 1U;
   13024:	8be0      	ldrh	r0, [r4, #30]
   13026:	3001      	adds	r0, #1
   13028:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1302a:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1302c:	2a00      	cmp	r2, #0
   1302e:	d1f9      	bne.n	13024 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13030:	f023 0307 	bic.w	r3, r3, #7
   13034:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   13038:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1303a:	4620      	mov	r0, r4
   1303c:	f011 fa5a 	bl	244f4 <process_recheck>
   13040:	b390      	cbz	r0, 130a8 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13042:	f042 0220 	orr.w	r2, r2, #32
   13046:	83a2      	strh	r2, [r4, #28]
   13048:	e02e      	b.n	130a8 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1304a:	f023 0307 	bic.w	r3, r3, #7
   1304e:	b29a      	uxth	r2, r3
}
   13050:	e7f2      	b.n	13038 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
   13052:	2a04      	cmp	r2, #4
   13054:	d133      	bne.n	130be <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13056:	f023 0307 	bic.w	r3, r3, #7
   1305a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1305c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1305e:	4620      	mov	r0, r4
   13060:	f011 fa48 	bl	244f4 <process_recheck>
   13064:	b110      	cbz	r0, 1306c <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13066:	f042 0220 	orr.w	r2, r2, #32
   1306a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1306c:	8ba3      	ldrh	r3, [r4, #28]
   1306e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   13072:	4589      	cmp	r9, r1
   13074:	f040 80ea 	bne.w	1324c <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13078:	8ba1      	ldrh	r1, [r4, #28]
   1307a:	06ca      	lsls	r2, r1, #27
   1307c:	f140 814f 	bpl.w	1331e <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13080:	f021 0310 	bic.w	r3, r1, #16
   13084:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   13086:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   1308a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1308e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   13090:	f1b8 0f00 	cmp.w	r8, #0
   13094:	dab9      	bge.n	1300a <process_event+0x62>
	list->head = NULL;
   13096:	2200      	movs	r2, #0
		*clients = mgr->clients;
   13098:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1309a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1309e:	e9c4 2200 	strd	r2, r2, [r4]
   130a2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   130a6:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   130a8:	8ba3      	ldrh	r3, [r4, #28]
   130aa:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   130ae:	4589      	cmp	r9, r1
   130b0:	f040 80cd 	bne.w	1324e <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
   130b4:	2f00      	cmp	r7, #0
   130b6:	d0df      	beq.n	13078 <process_event+0xd0>
   130b8:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   130ba:	46b2      	mov	sl, r6
   130bc:	e044      	b.n	13148 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
   130be:	496a      	ldr	r1, [pc, #424]	; (13268 <process_event+0x2c0>)
   130c0:	4a6a      	ldr	r2, [pc, #424]	; (1326c <process_event+0x2c4>)
   130c2:	4868      	ldr	r0, [pc, #416]	; (13264 <process_event+0x2bc>)
   130c4:	f240 131b 	movw	r3, #283	; 0x11b
   130c8:	f011 fb10 	bl	246ec <assert_print>
   130cc:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   130d0:	4866      	ldr	r0, [pc, #408]	; (1326c <process_event+0x2c4>)
   130d2:	f011 fb04 	bl	246de <assert_post_action>
   130d6:	b149      	cbz	r1, 130ec <process_event+0x144>
   130d8:	4965      	ldr	r1, [pc, #404]	; (13270 <process_event+0x2c8>)
   130da:	4a64      	ldr	r2, [pc, #400]	; (1326c <process_event+0x2c4>)
   130dc:	4861      	ldr	r0, [pc, #388]	; (13264 <process_event+0x2bc>)
   130de:	f44f 73ab 	mov.w	r3, #342	; 0x156
   130e2:	f011 fb03 	bl	246ec <assert_print>
   130e6:	f44f 71ab 	mov.w	r1, #342	; 0x156
   130ea:	e7f1      	b.n	130d0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   130ec:	6823      	ldr	r3, [r4, #0]
   130ee:	b94b      	cbnz	r3, 13104 <process_event+0x15c>
   130f0:	4960      	ldr	r1, [pc, #384]	; (13274 <process_event+0x2cc>)
   130f2:	4a5e      	ldr	r2, [pc, #376]	; (1326c <process_event+0x2c4>)
   130f4:	485b      	ldr	r0, [pc, #364]	; (13264 <process_event+0x2bc>)
   130f6:	f240 1357 	movw	r3, #343	; 0x157
   130fa:	f011 faf7 	bl	246ec <assert_print>
   130fe:	f240 1157 	movw	r1, #343	; 0x157
   13102:	e7e5      	b.n	130d0 <process_event+0x128>
			transit = mgr->transitions->start;
   13104:	6923      	ldr	r3, [r4, #16]
   13106:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   13108:	b94e      	cbnz	r6, 1311e <process_event+0x176>
   1310a:	495b      	ldr	r1, [pc, #364]	; (13278 <process_event+0x2d0>)
   1310c:	4a57      	ldr	r2, [pc, #348]	; (1326c <process_event+0x2c4>)
   1310e:	4855      	ldr	r0, [pc, #340]	; (13264 <process_event+0x2bc>)
   13110:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   13114:	f011 faea 	bl	246ec <assert_print>
   13118:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1311c:	e7d8      	b.n	130d0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1311e:	8ba3      	ldrh	r3, [r4, #28]
   13120:	f023 0307 	bic.w	r3, r3, #7
   13124:	f043 0306 	orr.w	r3, r3, #6
   13128:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1312a:	83a3      	strh	r3, [r4, #28]
   1312c:	460f      	mov	r7, r1
		res = 0;
   1312e:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13130:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   13134:	68a2      	ldr	r2, [r4, #8]
   13136:	2a00      	cmp	r2, #0
   13138:	f040 808b 	bne.w	13252 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
   1313c:	2f00      	cmp	r7, #0
   1313e:	f040 808b 	bne.w	13258 <process_event+0x2b0>
		    || (transit != NULL)) {
   13142:	2e00      	cmp	r6, #0
   13144:	d098      	beq.n	13078 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13146:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   13148:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   1314c:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   13150:	83a3      	strh	r3, [r4, #28]
   13152:	4658      	mov	r0, fp
   13154:	f00d fac4 	bl	206e0 <z_spin_unlock_valid>
   13158:	2800      	cmp	r0, #0
   1315a:	f040 8097 	bne.w	1328c <process_event+0x2e4>
   1315e:	493f      	ldr	r1, [pc, #252]	; (1325c <process_event+0x2b4>)
   13160:	4a3f      	ldr	r2, [pc, #252]	; (13260 <process_event+0x2b8>)
   13162:	4840      	ldr	r0, [pc, #256]	; (13264 <process_event+0x2bc>)
   13164:	23c2      	movs	r3, #194	; 0xc2
   13166:	f011 fac1 	bl	246ec <assert_print>
   1316a:	4659      	mov	r1, fp
   1316c:	4843      	ldr	r0, [pc, #268]	; (1327c <process_event+0x2d4>)
   1316e:	f011 fabd 	bl	246ec <assert_print>
   13172:	21c2      	movs	r1, #194	; 0xc2
   13174:	e0ae      	b.n	132d4 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   13176:	2902      	cmp	r1, #2
   13178:	d009      	beq.n	1318e <process_event+0x1e6>
   1317a:	4941      	ldr	r1, [pc, #260]	; (13280 <process_event+0x2d8>)
   1317c:	4a3b      	ldr	r2, [pc, #236]	; (1326c <process_event+0x2c4>)
   1317e:	4839      	ldr	r0, [pc, #228]	; (13264 <process_event+0x2bc>)
   13180:	f240 135d 	movw	r3, #349	; 0x15d
   13184:	f011 fab2 	bl	246ec <assert_print>
   13188:	f240 115d 	movw	r1, #349	; 0x15d
   1318c:	e7a0      	b.n	130d0 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1318e:	8be7      	ldrh	r7, [r4, #30]
   13190:	b14f      	cbz	r7, 131a6 <process_event+0x1fe>
   13192:	493c      	ldr	r1, [pc, #240]	; (13284 <process_event+0x2dc>)
   13194:	4a35      	ldr	r2, [pc, #212]	; (1326c <process_event+0x2c4>)
   13196:	4833      	ldr	r0, [pc, #204]	; (13264 <process_event+0x2bc>)
   13198:	f44f 73af 	mov.w	r3, #350	; 0x15e
   1319c:	f011 faa6 	bl	246ec <assert_print>
   131a0:	f44f 71af 	mov.w	r1, #350	; 0x15e
   131a4:	e794      	b.n	130d0 <process_event+0x128>
			transit = mgr->transitions->stop;
   131a6:	6923      	ldr	r3, [r4, #16]
   131a8:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   131aa:	b94e      	cbnz	r6, 131c0 <process_event+0x218>
   131ac:	4932      	ldr	r1, [pc, #200]	; (13278 <process_event+0x2d0>)
   131ae:	4a2f      	ldr	r2, [pc, #188]	; (1326c <process_event+0x2c4>)
   131b0:	482c      	ldr	r0, [pc, #176]	; (13264 <process_event+0x2bc>)
   131b2:	f240 1361 	movw	r3, #353	; 0x161
   131b6:	f011 fa99 	bl	246ec <assert_print>
   131ba:	f240 1161 	movw	r1, #353	; 0x161
   131be:	e787      	b.n	130d0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   131c0:	8ba3      	ldrh	r3, [r4, #28]
   131c2:	f023 0307 	bic.w	r3, r3, #7
   131c6:	f043 0304 	orr.w	r3, r3, #4
   131ca:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   131cc:	83a3      	strh	r3, [r4, #28]
		res = 0;
   131ce:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   131d0:	f04f 0904 	mov.w	r9, #4
   131d4:	e7ae      	b.n	13134 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   131d6:	2901      	cmp	r1, #1
   131d8:	d009      	beq.n	131ee <process_event+0x246>
   131da:	492b      	ldr	r1, [pc, #172]	; (13288 <process_event+0x2e0>)
   131dc:	4a23      	ldr	r2, [pc, #140]	; (1326c <process_event+0x2c4>)
   131de:	4821      	ldr	r0, [pc, #132]	; (13264 <process_event+0x2bc>)
   131e0:	f44f 73b2 	mov.w	r3, #356	; 0x164
   131e4:	f011 fa82 	bl	246ec <assert_print>
   131e8:	f44f 71b2 	mov.w	r1, #356	; 0x164
   131ec:	e770      	b.n	130d0 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   131ee:	6823      	ldr	r3, [r4, #0]
   131f0:	b94b      	cbnz	r3, 13206 <process_event+0x25e>
   131f2:	4920      	ldr	r1, [pc, #128]	; (13274 <process_event+0x2cc>)
   131f4:	4a1d      	ldr	r2, [pc, #116]	; (1326c <process_event+0x2c4>)
   131f6:	481b      	ldr	r0, [pc, #108]	; (13264 <process_event+0x2bc>)
   131f8:	f240 1365 	movw	r3, #357	; 0x165
   131fc:	f011 fa76 	bl	246ec <assert_print>
   13200:	f240 1165 	movw	r1, #357	; 0x165
   13204:	e764      	b.n	130d0 <process_event+0x128>
			transit = mgr->transitions->reset;
   13206:	6923      	ldr	r3, [r4, #16]
   13208:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   1320a:	b94e      	cbnz	r6, 13220 <process_event+0x278>
   1320c:	491a      	ldr	r1, [pc, #104]	; (13278 <process_event+0x2d0>)
   1320e:	4a17      	ldr	r2, [pc, #92]	; (1326c <process_event+0x2c4>)
   13210:	4814      	ldr	r0, [pc, #80]	; (13264 <process_event+0x2bc>)
   13212:	f44f 73b4 	mov.w	r3, #360	; 0x168
   13216:	f011 fa69 	bl	246ec <assert_print>
   1321a:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1321e:	e757      	b.n	130d0 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13220:	8ba3      	ldrh	r3, [r4, #28]
   13222:	f023 0307 	bic.w	r3, r3, #7
   13226:	f043 0305 	orr.w	r3, r3, #5
   1322a:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1322c:	2700      	movs	r7, #0
   1322e:	83a3      	strh	r3, [r4, #28]
		res = 0;
   13230:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13232:	f04f 0905 	mov.w	r9, #5
   13236:	e77d      	b.n	13134 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
   13238:	490b      	ldr	r1, [pc, #44]	; (13268 <process_event+0x2c0>)
   1323a:	4a0c      	ldr	r2, [pc, #48]	; (1326c <process_event+0x2c4>)
   1323c:	4809      	ldr	r0, [pc, #36]	; (13264 <process_event+0x2bc>)
   1323e:	f240 136b 	movw	r3, #363	; 0x16b
   13242:	f011 fa53 	bl	246ec <assert_print>
   13246:	f240 116b 	movw	r1, #363	; 0x16b
   1324a:	e741      	b.n	130d0 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
   1324c:	2700      	movs	r7, #0
   1324e:	2600      	movs	r6, #0
   13250:	e770      	b.n	13134 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13252:	f04f 0a01 	mov.w	sl, #1
   13256:	e777      	b.n	13148 <process_event+0x1a0>
   13258:	4692      	mov	sl, r2
   1325a:	e775      	b.n	13148 <process_event+0x1a0>
   1325c:	000283ab 	.word	0x000283ab
   13260:	0002837e 	.word	0x0002837e
   13264:	00027f8a 	.word	0x00027f8a
   13268:	0002ab0f 	.word	0x0002ab0f
   1326c:	000282db 	.word	0x000282db
   13270:	000282fd 	.word	0x000282fd
   13274:	00028309 	.word	0x00028309
   13278:	0002832c 	.word	0x0002832c
   1327c:	000283c2 	.word	0x000283c2
   13280:	00028343 	.word	0x00028343
   13284:	00028359 	.word	0x00028359
   13288:	00028368 	.word	0x00028368
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1328c:	f385 8811 	msr	BASEPRI, r5
   13290:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13294:	f1ba 0f00 	cmp.w	sl, #0
   13298:	d11e      	bne.n	132d8 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
   1329a:	2f00      	cmp	r7, #0
   1329c:	d12f      	bne.n	132fe <process_event+0x356>
			if (transit != NULL) {
   1329e:	b116      	cbz	r6, 132a6 <process_event+0x2fe>
				transit(mgr, transition_complete);
   132a0:	4926      	ldr	r1, [pc, #152]	; (1333c <process_event+0x394>)
   132a2:	4620      	mov	r0, r4
   132a4:	47b0      	blx	r6
	__asm__ volatile(
   132a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   132aa:	f3ef 8511 	mrs	r5, BASEPRI
   132ae:	f383 8812 	msr	BASEPRI_MAX, r3
   132b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   132b6:	4658      	mov	r0, fp
   132b8:	f00d fa04 	bl	206c4 <z_spin_lock_valid>
   132bc:	bb38      	cbnz	r0, 1330e <process_event+0x366>
   132be:	4a20      	ldr	r2, [pc, #128]	; (13340 <process_event+0x398>)
   132c0:	4920      	ldr	r1, [pc, #128]	; (13344 <process_event+0x39c>)
   132c2:	4821      	ldr	r0, [pc, #132]	; (13348 <process_event+0x3a0>)
   132c4:	2394      	movs	r3, #148	; 0x94
   132c6:	f011 fa11 	bl	246ec <assert_print>
   132ca:	4659      	mov	r1, fp
   132cc:	481f      	ldr	r0, [pc, #124]	; (1334c <process_event+0x3a4>)
   132ce:	f011 fa0d 	bl	246ec <assert_print>
   132d2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   132d4:	481a      	ldr	r0, [pc, #104]	; (13340 <process_event+0x398>)
   132d6:	e6fc      	b.n	130d2 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   132d8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   132da:	2900      	cmp	r1, #0
   132dc:	d0dd      	beq.n	1329a <process_event+0x2f2>
	return node->next;
   132de:	680d      	ldr	r5, [r1, #0]
   132e0:	2900      	cmp	r1, #0
   132e2:	d0da      	beq.n	1329a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
   132e4:	f8d1 a004 	ldr.w	sl, [r1, #4]
   132e8:	4643      	mov	r3, r8
   132ea:	464a      	mov	r2, r9
   132ec:	4620      	mov	r0, r4
   132ee:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   132f0:	b11d      	cbz	r5, 132fa <process_event+0x352>
   132f2:	682b      	ldr	r3, [r5, #0]
   132f4:	4629      	mov	r1, r5
   132f6:	461d      	mov	r5, r3
   132f8:	e7f2      	b.n	132e0 <process_event+0x338>
   132fa:	462b      	mov	r3, r5
   132fc:	e7fa      	b.n	132f4 <process_event+0x34c>
   132fe:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   13300:	4643      	mov	r3, r8
   13302:	464a      	mov	r2, r9
   13304:	4620      	mov	r0, r4
   13306:	683f      	ldr	r7, [r7, #0]
   13308:	f011 f920 	bl	2454c <notify_one>
   1330c:	e7c5      	b.n	1329a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
   1330e:	4658      	mov	r0, fp
   13310:	f00d f9f6 	bl	20700 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13314:	8ba3      	ldrh	r3, [r4, #28]
   13316:	f023 0308 	bic.w	r3, r3, #8
   1331a:	83a3      	strh	r3, [r4, #28]
   1331c:	e6ac      	b.n	13078 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1331e:	068b      	lsls	r3, r1, #26
   13320:	f57f ae64 	bpl.w	12fec <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13324:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13328:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1332a:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   1332e:	e647      	b.n	12fc0 <process_event+0x18>
	__asm__ volatile(
   13330:	f385 8811 	msr	BASEPRI, r5
   13334:	f3bf 8f6f 	isb	sy
}
   13338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1333c:	00013351 	.word	0x00013351
   13340:	0002837e 	.word	0x0002837e
   13344:	000283d7 	.word	0x000283d7
   13348:	00027f8a 	.word	0x00027f8a
   1334c:	000283ec 	.word	0x000283ec

00013350 <transition_complete>:
{
   13350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13352:	4604      	mov	r4, r0
   13354:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13356:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1335a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1335e:	f3ef 8711 	mrs	r7, BASEPRI
   13362:	f383 8812 	msr	BASEPRI_MAX, r3
   13366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1336a:	4630      	mov	r0, r6
   1336c:	f00d f9aa 	bl	206c4 <z_spin_lock_valid>
   13370:	b968      	cbnz	r0, 1338e <transition_complete+0x3e>
   13372:	4a0c      	ldr	r2, [pc, #48]	; (133a4 <transition_complete+0x54>)
   13374:	490c      	ldr	r1, [pc, #48]	; (133a8 <transition_complete+0x58>)
   13376:	480d      	ldr	r0, [pc, #52]	; (133ac <transition_complete+0x5c>)
   13378:	2394      	movs	r3, #148	; 0x94
   1337a:	f011 f9b7 	bl	246ec <assert_print>
   1337e:	480c      	ldr	r0, [pc, #48]	; (133b0 <transition_complete+0x60>)
   13380:	4631      	mov	r1, r6
   13382:	f011 f9b3 	bl	246ec <assert_print>
   13386:	4807      	ldr	r0, [pc, #28]	; (133a4 <transition_complete+0x54>)
   13388:	2194      	movs	r1, #148	; 0x94
   1338a:	f011 f9a8 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   1338e:	4630      	mov	r0, r6
   13390:	f00d f9b6 	bl	20700 <z_spin_lock_set_owner>
	mgr->last_res = res;
   13394:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   13396:	463a      	mov	r2, r7
   13398:	4620      	mov	r0, r4
   1339a:	2101      	movs	r1, #1
}
   1339c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   133a0:	f7ff be02 	b.w	12fa8 <process_event>
   133a4:	0002837e 	.word	0x0002837e
   133a8:	000283d7 	.word	0x000283d7
   133ac:	00027f8a 	.word	0x00027f8a
   133b0:	000283ec 	.word	0x000283ec

000133b4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   133b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133b8:	4604      	mov	r4, r0
   133ba:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   133bc:	f011 f8b6 	bl	2452c <validate_args>

	if (rv < 0) {
   133c0:	1e05      	subs	r5, r0, #0
   133c2:	db67      	blt.n	13494 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   133c4:	f104 0914 	add.w	r9, r4, #20
   133c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   133cc:	f3ef 8a11 	mrs	sl, BASEPRI
   133d0:	f383 8812 	msr	BASEPRI_MAX, r3
   133d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   133d8:	4648      	mov	r0, r9
   133da:	f00d f973 	bl	206c4 <z_spin_lock_valid>
   133de:	4680      	mov	r8, r0
   133e0:	b960      	cbnz	r0, 133fc <onoff_request+0x48>
   133e2:	4a38      	ldr	r2, [pc, #224]	; (134c4 <onoff_request+0x110>)
   133e4:	4938      	ldr	r1, [pc, #224]	; (134c8 <onoff_request+0x114>)
   133e6:	4839      	ldr	r0, [pc, #228]	; (134cc <onoff_request+0x118>)
   133e8:	2394      	movs	r3, #148	; 0x94
   133ea:	f011 f97f 	bl	246ec <assert_print>
   133ee:	4649      	mov	r1, r9
   133f0:	4837      	ldr	r0, [pc, #220]	; (134d0 <onoff_request+0x11c>)
   133f2:	f011 f97b 	bl	246ec <assert_print>
   133f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   133f8:	4832      	ldr	r0, [pc, #200]	; (134c4 <onoff_request+0x110>)
   133fa:	e040      	b.n	1347e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
   133fc:	4648      	mov	r0, r9
   133fe:	f00d f97f 	bl	20700 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   13402:	8be3      	ldrh	r3, [r4, #30]
   13404:	8ba6      	ldrh	r6, [r4, #28]
   13406:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1340a:	4293      	cmp	r3, r2
   1340c:	f006 0607 	and.w	r6, r6, #7
   13410:	d043      	beq.n	1349a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   13412:	2e02      	cmp	r6, #2
   13414:	d113      	bne.n	1343e <onoff_request+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   13416:	3301      	adds	r3, #1
   13418:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1341a:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1341c:	4648      	mov	r0, r9
   1341e:	f00d f95f 	bl	206e0 <z_spin_unlock_valid>
   13422:	2800      	cmp	r0, #0
   13424:	d13f      	bne.n	134a6 <onoff_request+0xf2>
   13426:	4a27      	ldr	r2, [pc, #156]	; (134c4 <onoff_request+0x110>)
   13428:	492a      	ldr	r1, [pc, #168]	; (134d4 <onoff_request+0x120>)
   1342a:	4828      	ldr	r0, [pc, #160]	; (134cc <onoff_request+0x118>)
   1342c:	23c2      	movs	r3, #194	; 0xc2
   1342e:	f011 f95d 	bl	246ec <assert_print>
   13432:	4649      	mov	r1, r9
   13434:	4828      	ldr	r0, [pc, #160]	; (134d8 <onoff_request+0x124>)
   13436:	f011 f959 	bl	246ec <assert_print>
   1343a:	21c2      	movs	r1, #194	; 0xc2
   1343c:	e7dc      	b.n	133f8 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
   1343e:	2e06      	cmp	r6, #6
   13440:	d813      	bhi.n	1346a <onoff_request+0xb6>
   13442:	e8df f006 	tbb	[pc, r6]
   13446:	2d09      	.short	0x2d09
   13448:	04091212 	.word	0x04091212
   1344c:	09          	.byte	0x09
   1344d:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   1344e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   13452:	f04f 0800 	mov.w	r8, #0
   13456:	e7e1      	b.n	1341c <onoff_request+0x68>
	parent->next = child;
   13458:	2300      	movs	r3, #0
   1345a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   1345c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1345e:	b983      	cbnz	r3, 13482 <onoff_request+0xce>
	list->head = node;
   13460:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   13464:	b186      	cbz	r6, 13488 <onoff_request+0xd4>
	rv = state;
   13466:	4635      	mov	r5, r6
   13468:	e7f3      	b.n	13452 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1346a:	491c      	ldr	r1, [pc, #112]	; (134dc <onoff_request+0x128>)
   1346c:	4817      	ldr	r0, [pc, #92]	; (134cc <onoff_request+0x118>)
   1346e:	4a1c      	ldr	r2, [pc, #112]	; (134e0 <onoff_request+0x12c>)
   13470:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   13474:	f011 f93a 	bl	246ec <assert_print>
   13478:	4819      	ldr	r0, [pc, #100]	; (134e0 <onoff_request+0x12c>)
   1347a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1347e:	f011 f92e 	bl	246de <assert_post_action>
	parent->next = child;
   13482:	601f      	str	r7, [r3, #0]
	list->tail = node;
   13484:	6067      	str	r7, [r4, #4]
}
   13486:	e7ed      	b.n	13464 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
   13488:	4652      	mov	r2, sl
   1348a:	2102      	movs	r1, #2
   1348c:	4620      	mov	r0, r4
   1348e:	f7ff fd8b 	bl	12fa8 <process_event>
   13492:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   13494:	4628      	mov	r0, r5
   13496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   1349a:	f06f 050a 	mvn.w	r5, #10
   1349e:	e7d8      	b.n	13452 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
   134a0:	f06f 0504 	mvn.w	r5, #4
   134a4:	e7d5      	b.n	13452 <onoff_request+0x9e>
	__asm__ volatile(
   134a6:	f38a 8811 	msr	BASEPRI, sl
   134aa:	f3bf 8f6f 	isb	sy
		if (notify) {
   134ae:	f1b8 0f00 	cmp.w	r8, #0
   134b2:	d0ef      	beq.n	13494 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
   134b4:	2300      	movs	r3, #0
   134b6:	4632      	mov	r2, r6
   134b8:	4639      	mov	r1, r7
   134ba:	4620      	mov	r0, r4
   134bc:	f011 f846 	bl	2454c <notify_one>
   134c0:	e7e8      	b.n	13494 <onoff_request+0xe0>
   134c2:	bf00      	nop
   134c4:	0002837e 	.word	0x0002837e
   134c8:	000283d7 	.word	0x000283d7
   134cc:	00027f8a 	.word	0x00027f8a
   134d0:	000283ec 	.word	0x000283ec
   134d4:	000283ab 	.word	0x000283ab
   134d8:	000283c2 	.word	0x000283c2
   134dc:	00028368 	.word	0x00028368
   134e0:	000282db 	.word	0x000282db

000134e4 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   134e4:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   134e6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   134e8:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   134ea:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   134ee:	2a02      	cmp	r2, #2
{
   134f0:	4603      	mov	r3, r0
	switch (method) {
   134f2:	d00a      	beq.n	1350a <sys_notify_finalize+0x26>
   134f4:	2a03      	cmp	r2, #3
   134f6:	f04f 0100 	mov.w	r1, #0
   134fa:	d003      	beq.n	13504 <sys_notify_finalize+0x20>
   134fc:	2a01      	cmp	r2, #1
   134fe:	d10a      	bne.n	13516 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   13500:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   13502:	e006      	b.n	13512 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   13504:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   13506:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   13508:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   1350a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1350c:	2200      	movs	r2, #0
   1350e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   13510:	b958      	cbnz	r0, 1352a <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
   13512:	2000      	movs	r0, #0
   13514:	e7f8      	b.n	13508 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   13516:	4906      	ldr	r1, [pc, #24]	; (13530 <sys_notify_finalize+0x4c>)
   13518:	4806      	ldr	r0, [pc, #24]	; (13534 <sys_notify_finalize+0x50>)
   1351a:	4a07      	ldr	r2, [pc, #28]	; (13538 <sys_notify_finalize+0x54>)
   1351c:	2345      	movs	r3, #69	; 0x45
   1351e:	f011 f8e5 	bl	246ec <assert_print>
   13522:	4805      	ldr	r0, [pc, #20]	; (13538 <sys_notify_finalize+0x54>)
   13524:	2145      	movs	r1, #69	; 0x45
   13526:	f011 f8da 	bl	246de <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1352a:	f010 f9cd 	bl	238c8 <z_impl_k_poll_signal_raise>
   1352e:	e7f0      	b.n	13512 <sys_notify_finalize+0x2e>
   13530:	0002ab0f 	.word	0x0002ab0f
   13534:	00027f8a 	.word	0x00027f8a
   13538:	00028404 	.word	0x00028404

0001353c <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   1353c:	b538      	push	{r3, r4, r5, lr}
   1353e:	460d      	mov	r5, r1
   13540:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   13542:	2220      	movs	r2, #32
   13544:	2100      	movs	r1, #0
   13546:	f011 fce9 	bl	24f1c <memset>
	buffer->get_wlen = cfg->get_wlen;
   1354a:	68eb      	ldr	r3, [r5, #12]
   1354c:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   1354e:	68ab      	ldr	r3, [r5, #8]
   13550:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   13552:	682b      	ldr	r3, [r5, #0]
   13554:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   13556:	686b      	ldr	r3, [r5, #4]
   13558:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   1355a:	2200      	movs	r2, #0
   1355c:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   1355e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   13560:	b123      	cbz	r3, 1356c <mpsc_pbuf_init+0x30>
   13562:	1e59      	subs	r1, r3, #1
   13564:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   13566:	bf08      	it	eq
   13568:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   1356c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1356e:	2201      	movs	r2, #1
   13570:	2100      	movs	r1, #0
   13572:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   13576:	f013 fbc6 	bl	26d06 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
   1357a:	b148      	cbz	r0, 13590 <mpsc_pbuf_init+0x54>
   1357c:	4905      	ldr	r1, [pc, #20]	; (13594 <mpsc_pbuf_init+0x58>)
   1357e:	4806      	ldr	r0, [pc, #24]	; (13598 <mpsc_pbuf_init+0x5c>)
   13580:	4a06      	ldr	r2, [pc, #24]	; (1359c <mpsc_pbuf_init+0x60>)
   13582:	232e      	movs	r3, #46	; 0x2e
   13584:	f011 f8b2 	bl	246ec <assert_print>
   13588:	4804      	ldr	r0, [pc, #16]	; (1359c <mpsc_pbuf_init+0x60>)
   1358a:	212e      	movs	r1, #46	; 0x2e
   1358c:	f011 f8a7 	bl	246de <assert_post_action>
	ARG_UNUSED(err);
}
   13590:	bd38      	pop	{r3, r4, r5, pc}
   13592:	bf00      	nop
   13594:	00028453 	.word	0x00028453
   13598:	00027f8a 	.word	0x00027f8a
   1359c:	0002842d 	.word	0x0002842d

000135a0 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   135a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a4:	b089      	sub	sp, #36	; 0x24
   135a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   135aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
	union mpsc_pbuf_generic *dropped_item = NULL;
   135ac:	2700      	movs	r7, #0
	if (wlen > (buffer->size)) {
   135ae:	428b      	cmp	r3, r1
{
   135b0:	4604      	mov	r4, r0
   135b2:	4688      	mov	r8, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   135b4:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
   135b6:	9707      	str	r7, [sp, #28]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   135b8:	46ba      	mov	sl, r7
	if (wlen > (buffer->size)) {
   135ba:	d353      	bcc.n	13664 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
   135bc:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   135c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   135c4:	f3ef 8b11 	mrs	fp, BASEPRI
   135c8:	f383 8812 	msr	BASEPRI_MAX, r3
   135cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   135d0:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
   135d2:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   135d4:	f00d f876 	bl	206c4 <z_spin_lock_valid>
   135d8:	b958      	cbnz	r0, 135f2 <mpsc_pbuf_alloc+0x52>
   135da:	4a4b      	ldr	r2, [pc, #300]	; (13708 <mpsc_pbuf_alloc+0x168>)
   135dc:	494b      	ldr	r1, [pc, #300]	; (1370c <mpsc_pbuf_alloc+0x16c>)
   135de:	484c      	ldr	r0, [pc, #304]	; (13710 <mpsc_pbuf_alloc+0x170>)
   135e0:	2394      	movs	r3, #148	; 0x94
   135e2:	f011 f883 	bl	246ec <assert_print>
   135e6:	4631      	mov	r1, r6
   135e8:	484a      	ldr	r0, [pc, #296]	; (13714 <mpsc_pbuf_alloc+0x174>)
   135ea:	f011 f87f 	bl	246ec <assert_print>
   135ee:	2194      	movs	r1, #148	; 0x94
   135f0:	e05e      	b.n	136b0 <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
   135f2:	4630      	mov	r0, r6
   135f4:	f00d f884 	bl	20700 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
   135f8:	9a07      	ldr	r2, [sp, #28]
   135fa:	b12a      	cbz	r2, 13608 <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   135fc:	4639      	mov	r1, r7
   135fe:	4620      	mov	r0, r4
   13600:	f011 f953 	bl	248aa <post_drop_action>
			tmp_wr_idx_shift = 0;
   13604:	2300      	movs	r3, #0
   13606:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
   13608:	a906      	add	r1, sp, #24
   1360a:	4620      	mov	r0, r4
   1360c:	f011 f87b 	bl	24706 <free_space>

		if (free_wlen >= wlen) {
   13610:	9906      	ldr	r1, [sp, #24]
   13612:	4541      	cmp	r1, r8
		wrap = free_space(buffer, &free_wlen);
   13614:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
   13616:	d32e      	bcc.n	13676 <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   13618:	6822      	ldr	r2, [r4, #0]
			item =
   1361a:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
   1361c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   13620:	f021 0103 	bic.w	r1, r1, #3
   13624:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   13628:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1362c:	6821      	ldr	r1, [r4, #0]
   1362e:	4642      	mov	r2, r8
   13630:	4620      	mov	r0, r4
   13632:	f011 f88c 	bl	2474e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   13636:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   13638:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1363a:	4298      	cmp	r0, r3
   1363c:	d016      	beq.n	1366c <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   1363e:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13640:	4630      	mov	r0, r6
   13642:	f00d f84d 	bl	206e0 <z_spin_unlock_valid>
   13646:	b340      	cbz	r0, 1369a <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
   13648:	f389 8811 	msr	BASEPRI, r9
   1364c:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   13650:	9905      	ldr	r1, [sp, #20]
   13652:	b129      	cbz	r1, 13660 <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   13654:	69a2      	ldr	r2, [r4, #24]
   13656:	b10a      	cbz	r2, 1365c <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
   13658:	4620      	mov	r0, r4
   1365a:	4790      	blx	r2
			}
			dropped_item = NULL;
   1365c:	2300      	movs	r3, #0
   1365e:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   13660:	2d00      	cmp	r5, #0
   13662:	d1ad      	bne.n	135c0 <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   13664:	4650      	mov	r0, sl
   13666:	b009      	add	sp, #36	; 0x24
   13668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   1366c:	6923      	ldr	r3, [r4, #16]
   1366e:	f043 0308 	orr.w	r3, r3, #8
   13672:	6123      	str	r3, [r4, #16]
   13674:	e7e3      	b.n	1363e <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
   13676:	b118      	cbz	r0, 13680 <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
   13678:	4620      	mov	r0, r4
   1367a:	f011 f882 	bl	24782 <add_skip_item>
			cont = true;
   1367e:	e7df      	b.n	13640 <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   13680:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   13684:	4313      	orrs	r3, r2
   13686:	d036      	beq.n	136f6 <mpsc_pbuf_alloc+0x156>
   13688:	9103      	str	r1, [sp, #12]
   1368a:	f013 faee 	bl	26c6a <k_is_in_isr>
   1368e:	9903      	ldr	r1, [sp, #12]
   13690:	bb88      	cbnz	r0, 136f6 <mpsc_pbuf_alloc+0x156>
   13692:	4630      	mov	r0, r6
   13694:	f00d f824 	bl	206e0 <z_spin_unlock_valid>
   13698:	b968      	cbnz	r0, 136b6 <mpsc_pbuf_alloc+0x116>
   1369a:	4a1b      	ldr	r2, [pc, #108]	; (13708 <mpsc_pbuf_alloc+0x168>)
   1369c:	491e      	ldr	r1, [pc, #120]	; (13718 <mpsc_pbuf_alloc+0x178>)
   1369e:	481c      	ldr	r0, [pc, #112]	; (13710 <mpsc_pbuf_alloc+0x170>)
   136a0:	23c2      	movs	r3, #194	; 0xc2
   136a2:	f011 f823 	bl	246ec <assert_print>
   136a6:	4631      	mov	r1, r6
   136a8:	481c      	ldr	r0, [pc, #112]	; (1371c <mpsc_pbuf_alloc+0x17c>)
   136aa:	f011 f81f 	bl	246ec <assert_print>
   136ae:	21c2      	movs	r1, #194	; 0xc2
   136b0:	4815      	ldr	r0, [pc, #84]	; (13708 <mpsc_pbuf_alloc+0x168>)
   136b2:	f011 f814 	bl	246de <assert_post_action>
   136b6:	f38b 8811 	msr	BASEPRI, fp
   136ba:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   136be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   136c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   136c6:	f00d fafb 	bl	20cc0 <z_impl_k_sem_take>
   136ca:	4605      	mov	r5, r0
	__asm__ volatile(
   136cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   136d0:	f3ef 8911 	mrs	r9, BASEPRI
   136d4:	f383 8812 	msr	BASEPRI_MAX, r3
   136d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   136dc:	4630      	mov	r0, r6
   136de:	f00c fff1 	bl	206c4 <z_spin_lock_valid>
   136e2:	2800      	cmp	r0, #0
   136e4:	f43f af79 	beq.w	135da <mpsc_pbuf_alloc+0x3a>
	z_spin_lock_set_owner(l);
   136e8:	4630      	mov	r0, r6
			cont = (err == 0) ? true : false;
   136ea:	fab5 f585 	clz	r5, r5
   136ee:	f00d f807 	bl	20700 <z_spin_lock_set_owner>
   136f2:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   136f4:	e7a4      	b.n	13640 <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
   136f6:	ab07      	add	r3, sp, #28
   136f8:	aa05      	add	r2, sp, #20
   136fa:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   136fc:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   136fe:	f011 f85d 	bl	247bc <drop_item_locked>
   13702:	4605      	mov	r5, r0
   13704:	e79c      	b.n	13640 <mpsc_pbuf_alloc+0xa0>
   13706:	bf00      	nop
   13708:	0002837e 	.word	0x0002837e
   1370c:	000283d7 	.word	0x000283d7
   13710:	00027f8a 	.word	0x00027f8a
   13714:	000283ec 	.word	0x000283ec
   13718:	000283ab 	.word	0x000283ab
   1371c:	000283c2 	.word	0x000283c2

00013720 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   13720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13724:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   13726:	69c3      	ldr	r3, [r0, #28]
   13728:	4608      	mov	r0, r1
{
   1372a:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
   1372c:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   1372e:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   13732:	4607      	mov	r7, r0
   13734:	f04f 0340 	mov.w	r3, #64	; 0x40
   13738:	f3ef 8811 	mrs	r8, BASEPRI
   1373c:	f383 8812 	msr	BASEPRI_MAX, r3
   13740:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13744:	4628      	mov	r0, r5
   13746:	f00c ffbd 	bl	206c4 <z_spin_lock_valid>
   1374a:	b968      	cbnz	r0, 13768 <mpsc_pbuf_commit+0x48>
   1374c:	4a19      	ldr	r2, [pc, #100]	; (137b4 <mpsc_pbuf_commit+0x94>)
   1374e:	491a      	ldr	r1, [pc, #104]	; (137b8 <mpsc_pbuf_commit+0x98>)
   13750:	481a      	ldr	r0, [pc, #104]	; (137bc <mpsc_pbuf_commit+0x9c>)
   13752:	2394      	movs	r3, #148	; 0x94
   13754:	f010 ffca 	bl	246ec <assert_print>
   13758:	4629      	mov	r1, r5
   1375a:	4819      	ldr	r0, [pc, #100]	; (137c0 <mpsc_pbuf_commit+0xa0>)
   1375c:	f010 ffc6 	bl	246ec <assert_print>
   13760:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13762:	4814      	ldr	r0, [pc, #80]	; (137b4 <mpsc_pbuf_commit+0x94>)
   13764:	f010 ffbb 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   13768:	4628      	mov	r0, r5
   1376a:	f00c ffc9 	bl	20700 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   1376e:	7833      	ldrb	r3, [r6, #0]
   13770:	f043 0301 	orr.w	r3, r3, #1
   13774:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   13776:	6861      	ldr	r1, [r4, #4]
   13778:	463a      	mov	r2, r7
   1377a:	4620      	mov	r0, r4
   1377c:	f010 ffe7 	bl	2474e <idx_inc>
   13780:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   13782:	4620      	mov	r0, r4
   13784:	f011 f8ac 	bl	248e0 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13788:	4628      	mov	r0, r5
   1378a:	f00c ffa9 	bl	206e0 <z_spin_unlock_valid>
   1378e:	b958      	cbnz	r0, 137a8 <mpsc_pbuf_commit+0x88>
   13790:	4a08      	ldr	r2, [pc, #32]	; (137b4 <mpsc_pbuf_commit+0x94>)
   13792:	490c      	ldr	r1, [pc, #48]	; (137c4 <mpsc_pbuf_commit+0xa4>)
   13794:	4809      	ldr	r0, [pc, #36]	; (137bc <mpsc_pbuf_commit+0x9c>)
   13796:	23c2      	movs	r3, #194	; 0xc2
   13798:	f010 ffa8 	bl	246ec <assert_print>
   1379c:	4629      	mov	r1, r5
   1379e:	480a      	ldr	r0, [pc, #40]	; (137c8 <mpsc_pbuf_commit+0xa8>)
   137a0:	f010 ffa4 	bl	246ec <assert_print>
   137a4:	21c2      	movs	r1, #194	; 0xc2
   137a6:	e7dc      	b.n	13762 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
   137a8:	f388 8811 	msr	BASEPRI, r8
   137ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   137b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   137b4:	0002837e 	.word	0x0002837e
   137b8:	000283d7 	.word	0x000283d7
   137bc:	00027f8a 	.word	0x00027f8a
   137c0:	000283ec 	.word	0x000283ec
   137c4:	000283ab 	.word	0x000283ab
   137c8:	000283c2 	.word	0x000283c2

000137cc <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   137cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   137d0:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
   137d2:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   137d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   137da:	f3ef 8811 	mrs	r8, BASEPRI
   137de:	f383 8812 	msr	BASEPRI_MAX, r3
   137e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   137e6:	4638      	mov	r0, r7
   137e8:	f00c ff6c 	bl	206c4 <z_spin_lock_valid>
   137ec:	4605      	mov	r5, r0
   137ee:	b968      	cbnz	r0, 1380c <mpsc_pbuf_claim+0x40>
   137f0:	4a34      	ldr	r2, [pc, #208]	; (138c4 <mpsc_pbuf_claim+0xf8>)
   137f2:	4935      	ldr	r1, [pc, #212]	; (138c8 <mpsc_pbuf_claim+0xfc>)
   137f4:	4835      	ldr	r0, [pc, #212]	; (138cc <mpsc_pbuf_claim+0x100>)
   137f6:	2394      	movs	r3, #148	; 0x94
   137f8:	f010 ff78 	bl	246ec <assert_print>
   137fc:	4639      	mov	r1, r7
   137fe:	4834      	ldr	r0, [pc, #208]	; (138d0 <mpsc_pbuf_claim+0x104>)
   13800:	f010 ff74 	bl	246ec <assert_print>
   13804:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13806:	482f      	ldr	r0, [pc, #188]	; (138c4 <mpsc_pbuf_claim+0xf8>)
   13808:	f010 ff69 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   1380c:	4638      	mov	r0, r7
   1380e:	f00c ff77 	bl	20700 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   13812:	6923      	ldr	r3, [r4, #16]
   13814:	68a2      	ldr	r2, [r4, #8]
   13816:	f013 0f08 	tst.w	r3, #8
   1381a:	d102      	bne.n	13822 <mpsc_pbuf_claim+0x56>
   1381c:	6863      	ldr	r3, [r4, #4]
   1381e:	429a      	cmp	r2, r3
   13820:	d900      	bls.n	13824 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
   13822:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   13824:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   13826:	2b00      	cmp	r3, #0
   13828:	d03d      	beq.n	138a6 <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
   1382a:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
   1382c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   13830:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
   13834:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   13838:	d038      	beq.n	138ac <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
   1383a:	2802      	cmp	r0, #2
   1383c:	d103      	bne.n	13846 <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
   1383e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   13842:	08b6      	lsrs	r6, r6, #2
   13844:	d105      	bne.n	13852 <mpsc_pbuf_claim+0x86>
   13846:	07d8      	lsls	r0, r3, #31
   13848:	d41d      	bmi.n	13886 <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
   1384a:	69e3      	ldr	r3, [r4, #28]
   1384c:	4648      	mov	r0, r9
   1384e:	4798      	blx	r3
   13850:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   13852:	68a1      	ldr	r1, [r4, #8]
   13854:	4632      	mov	r2, r6
   13856:	4620      	mov	r0, r4
   13858:	f010 ff79 	bl	2474e <idx_inc>
				rd_idx_inc(buffer, inc);
   1385c:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
   1385e:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   13860:	4620      	mov	r0, r4
   13862:	f010 ff82 	bl	2476a <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13866:	4638      	mov	r0, r7
   13868:	f00c ff3a 	bl	206e0 <z_spin_unlock_valid>
   1386c:	bb00      	cbnz	r0, 138b0 <mpsc_pbuf_claim+0xe4>
   1386e:	4a15      	ldr	r2, [pc, #84]	; (138c4 <mpsc_pbuf_claim+0xf8>)
   13870:	4918      	ldr	r1, [pc, #96]	; (138d4 <mpsc_pbuf_claim+0x108>)
   13872:	4816      	ldr	r0, [pc, #88]	; (138cc <mpsc_pbuf_claim+0x100>)
   13874:	23c2      	movs	r3, #194	; 0xc2
   13876:	f010 ff39 	bl	246ec <assert_print>
   1387a:	4639      	mov	r1, r7
   1387c:	4816      	ldr	r0, [pc, #88]	; (138d8 <mpsc_pbuf_claim+0x10c>)
   1387e:	f010 ff35 	bl	246ec <assert_print>
   13882:	21c2      	movs	r1, #194	; 0xc2
   13884:	e7bf      	b.n	13806 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
   13886:	f043 0302 	orr.w	r3, r3, #2
   1388a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   1388e:	4648      	mov	r0, r9
   13890:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
   13892:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   13894:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   13896:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   13898:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   1389a:	4620      	mov	r0, r4
   1389c:	f010 ff57 	bl	2474e <idx_inc>
		cont = false;
   138a0:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
   138a2:	60a0      	str	r0, [r4, #8]
   138a4:	e7df      	b.n	13866 <mpsc_pbuf_claim+0x9a>
		cont = false;
   138a6:	461d      	mov	r5, r3
			item = NULL;
   138a8:	46a9      	mov	r9, r5
   138aa:	e7dc      	b.n	13866 <mpsc_pbuf_claim+0x9a>
		cont = false;
   138ac:	4605      	mov	r5, r0
   138ae:	e7fb      	b.n	138a8 <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
   138b0:	f388 8811 	msr	BASEPRI, r8
   138b4:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   138b8:	2d00      	cmp	r5, #0
   138ba:	d18c      	bne.n	137d6 <mpsc_pbuf_claim+0xa>

	return item;
}
   138bc:	4648      	mov	r0, r9
   138be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   138c2:	bf00      	nop
   138c4:	0002837e 	.word	0x0002837e
   138c8:	000283d7 	.word	0x000283d7
   138cc:	00027f8a 	.word	0x00027f8a
   138d0:	000283ec 	.word	0x000283ec
   138d4:	000283ab 	.word	0x000283ab
   138d8:	000283c2 	.word	0x000283c2

000138dc <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   138dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138e0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   138e2:	69c3      	ldr	r3, [r0, #28]
   138e4:	4608      	mov	r0, r1
{
   138e6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   138e8:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   138ea:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   138ee:	4607      	mov	r7, r0
	__asm__ volatile(
   138f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   138f4:	f3ef 8811 	mrs	r8, BASEPRI
   138f8:	f383 8812 	msr	BASEPRI_MAX, r3
   138fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13900:	4630      	mov	r0, r6
   13902:	f00c fedf 	bl	206c4 <z_spin_lock_valid>
   13906:	b968      	cbnz	r0, 13924 <mpsc_pbuf_free+0x48>
   13908:	4a26      	ldr	r2, [pc, #152]	; (139a4 <mpsc_pbuf_free+0xc8>)
   1390a:	4927      	ldr	r1, [pc, #156]	; (139a8 <mpsc_pbuf_free+0xcc>)
   1390c:	4827      	ldr	r0, [pc, #156]	; (139ac <mpsc_pbuf_free+0xd0>)
   1390e:	2394      	movs	r3, #148	; 0x94
   13910:	f010 feec 	bl	246ec <assert_print>
   13914:	4631      	mov	r1, r6
   13916:	4826      	ldr	r0, [pc, #152]	; (139b0 <mpsc_pbuf_free+0xd4>)
   13918:	f010 fee8 	bl	246ec <assert_print>
   1391c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1391e:	4821      	ldr	r0, [pc, #132]	; (139a4 <mpsc_pbuf_free+0xc8>)
   13920:	f010 fedd 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   13924:	4630      	mov	r0, r6
   13926:	f00c feeb 	bl	20700 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1392a:	782b      	ldrb	r3, [r5, #0]
   1392c:	f36f 0300 	bfc	r3, #0, #1
   13930:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   13932:	6923      	ldr	r3, [r4, #16]
   13934:	079b      	lsls	r3, r3, #30
   13936:	d505      	bpl.n	13944 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   13938:	68e2      	ldr	r2, [r4, #12]
   1393a:	6a23      	ldr	r3, [r4, #32]
   1393c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   13940:	429d      	cmp	r5, r3
   13942:	d120      	bne.n	13986 <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
   13944:	782b      	ldrb	r3, [r5, #0]
   13946:	f36f 0341 	bfc	r3, #1, #1
   1394a:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   1394c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   13950:	4299      	cmp	r1, r3
   13952:	d104      	bne.n	1395e <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   13954:	463a      	mov	r2, r7
   13956:	4620      	mov	r0, r4
   13958:	f010 fef9 	bl	2474e <idx_inc>
   1395c:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   1395e:	4639      	mov	r1, r7
   13960:	4620      	mov	r0, r4
   13962:	f010 ff02 	bl	2476a <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13966:	4630      	mov	r0, r6
   13968:	f00c feba 	bl	206e0 <z_spin_unlock_valid>
   1396c:	b980      	cbnz	r0, 13990 <mpsc_pbuf_free+0xb4>
   1396e:	4a0d      	ldr	r2, [pc, #52]	; (139a4 <mpsc_pbuf_free+0xc8>)
   13970:	4910      	ldr	r1, [pc, #64]	; (139b4 <mpsc_pbuf_free+0xd8>)
   13972:	480e      	ldr	r0, [pc, #56]	; (139ac <mpsc_pbuf_free+0xd0>)
   13974:	23c2      	movs	r3, #194	; 0xc2
   13976:	f010 feb9 	bl	246ec <assert_print>
   1397a:	4631      	mov	r1, r6
   1397c:	480e      	ldr	r0, [pc, #56]	; (139b8 <mpsc_pbuf_free+0xdc>)
   1397e:	f010 feb5 	bl	246ec <assert_print>
   13982:	21c2      	movs	r1, #194	; 0xc2
   13984:	e7cb      	b.n	1391e <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   13986:	682b      	ldr	r3, [r5, #0]
   13988:	f367 039f 	bfi	r3, r7, #2, #30
   1398c:	602b      	str	r3, [r5, #0]
   1398e:	e7ea      	b.n	13966 <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
   13990:	f388 8811 	msr	BASEPRI, r8
   13994:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13998:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   1399c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   139a0:	f00d b94a 	b.w	20c38 <z_impl_k_sem_give>
   139a4:	0002837e 	.word	0x0002837e
   139a8:	000283d7 	.word	0x000283d7
   139ac:	00027f8a 	.word	0x00027f8a
   139b0:	000283ec 	.word	0x000283ec
   139b4:	000283ab 	.word	0x000283ab
   139b8:	000283c2 	.word	0x000283c2

000139bc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   139bc:	f00b bbe4 	b.w	1f188 <SystemInit>

000139c0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   139c0:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   139c2:	4910      	ldr	r1, [pc, #64]	; (13a04 <enable_logger+0x44>)
   139c4:	4810      	ldr	r0, [pc, #64]	; (13a08 <enable_logger+0x48>)
{
   139c6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   139c8:	2200      	movs	r2, #0
   139ca:	f013 fa72 	bl	26eb2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   139ce:	4d0f      	ldr	r5, [pc, #60]	; (13a0c <enable_logger+0x4c>)
   139d0:	490f      	ldr	r1, [pc, #60]	; (13a10 <enable_logger+0x50>)
   139d2:	2200      	movs	r2, #0
   139d4:	2300      	movs	r3, #0
   139d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   139da:	2400      	movs	r4, #0
   139dc:	230e      	movs	r3, #14
   139de:	e9cd 3403 	strd	r3, r4, [sp, #12]
   139e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   139e6:	4b0b      	ldr	r3, [pc, #44]	; (13a14 <enable_logger+0x54>)
   139e8:	9400      	str	r4, [sp, #0]
   139ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
   139ee:	4628      	mov	r0, r5
   139f0:	f00c fd9e 	bl	20530 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   139f4:	4908      	ldr	r1, [pc, #32]	; (13a18 <enable_logger+0x58>)
   139f6:	4628      	mov	r0, r5
   139f8:	f013 f93d 	bl	26c76 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   139fc:	4620      	mov	r0, r4
   139fe:	b009      	add	sp, #36	; 0x24
   13a00:	bd30      	pop	{r4, r5, pc}
   13a02:	bf00      	nop
   13a04:	00013b61 	.word	0x00013b61
   13a08:	20001c38 	.word	0x20001c38
   13a0c:	20001768 	.word	0x20001768
   13a10:	20003700 	.word	0x20003700
   13a14:	00013e51 	.word	0x00013e51
   13a18:	0002845c 	.word	0x0002845c

00013a1c <activate_foreach_backend>:
{
   13a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a20:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13a7c <activate_foreach_backend+0x60>
{
   13a24:	4604      	mov	r4, r0
	while (mask_cpy) {
   13a26:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   13a28:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   13a2c:	b914      	cbnz	r4, 13a34 <activate_foreach_backend+0x18>
}
   13a2e:	4638      	mov	r0, r7
   13a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   13a34:	fa94 f5a4 	rbit	r5, r4
   13a38:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   13a3c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a40:	012e      	lsls	r6, r5, #4
   13a42:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   13a46:	ea6f 0a03 	mvn.w	sl, r3
   13a4a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a4e:	7b2b      	ldrb	r3, [r5, #12]
   13a50:	2b00      	cmp	r3, #0
   13a52:	d0eb      	beq.n	13a2c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   13a54:	f858 3006 	ldr.w	r3, [r8, r6]
   13a58:	691b      	ldr	r3, [r3, #16]
   13a5a:	b94b      	cbnz	r3, 13a70 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   13a5c:	4446      	add	r6, r8
			log_backend_enable(backend,
   13a5e:	2204      	movs	r2, #4
   13a60:	6873      	ldr	r3, [r6, #4]
   13a62:	4628      	mov	r0, r5
   13a64:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   13a66:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   13a6a:	f000 faf7 	bl	1405c <log_backend_enable>
   13a6e:	e7dd      	b.n	13a2c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   13a70:	4628      	mov	r0, r5
   13a72:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a74:	2800      	cmp	r0, #0
   13a76:	d1d9      	bne.n	13a2c <activate_foreach_backend+0x10>
   13a78:	e7f0      	b.n	13a5c <activate_foreach_backend+0x40>
   13a7a:	bf00      	nop
   13a7c:	00027420 	.word	0x00027420

00013a80 <z_log_init>:
{
   13a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13a84:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 13b5c <z_log_init+0xdc>
   13a88:	4c2d      	ldr	r4, [pc, #180]	; (13b40 <z_log_init+0xc0>)
   13a8a:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13a8e:	2b9f      	cmp	r3, #159	; 0x9f
{
   13a90:	4680      	mov	r8, r0
   13a92:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13a94:	d90b      	bls.n	13aae <z_log_init+0x2e>
   13a96:	492b      	ldr	r1, [pc, #172]	; (13b44 <z_log_init+0xc4>)
   13a98:	4a2b      	ldr	r2, [pc, #172]	; (13b48 <z_log_init+0xc8>)
   13a9a:	482c      	ldr	r0, [pc, #176]	; (13b4c <z_log_init+0xcc>)
   13a9c:	f44f 738c 	mov.w	r3, #280	; 0x118
   13aa0:	f010 fe24 	bl	246ec <assert_print>
   13aa4:	f44f 718c 	mov.w	r1, #280	; 0x118
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13aa8:	4827      	ldr	r0, [pc, #156]	; (13b48 <z_log_init+0xc8>)
   13aaa:	f010 fe18 	bl	246de <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
   13aae:	4828      	ldr	r0, [pc, #160]	; (13b50 <z_log_init+0xd0>)
   13ab0:	f010 ff45 	bl	2493e <atomic_inc>
   13ab4:	4606      	mov	r6, r0
   13ab6:	b360      	cbz	r0, 13b12 <z_log_init+0x92>
	uint32_t mask = 0;
   13ab8:	2500      	movs	r5, #0
}
   13aba:	4628      	mov	r0, r5
   13abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   13ac0:	7b23      	ldrb	r3, [r4, #12]
   13ac2:	b173      	cbz	r3, 13ae2 <z_log_init+0x62>
	if (backend->api->init) {
   13ac4:	6823      	ldr	r3, [r4, #0]
   13ac6:	68db      	ldr	r3, [r3, #12]
   13ac8:	b10b      	cbz	r3, 13ace <z_log_init+0x4e>
		backend->api->init(backend);
   13aca:	4620      	mov	r0, r4
   13acc:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13ace:	6823      	ldr	r3, [r4, #0]
   13ad0:	691b      	ldr	r3, [r3, #16]
   13ad2:	b9b3      	cbnz	r3, 13b02 <z_log_init+0x82>
				log_backend_enable(backend,
   13ad4:	6863      	ldr	r3, [r4, #4]
   13ad6:	2204      	movs	r2, #4
   13ad8:	6819      	ldr	r1, [r3, #0]
   13ada:	4620      	mov	r0, r4
   13adc:	f000 fabe 	bl	1405c <log_backend_enable>
			i++;
   13ae0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ae2:	3410      	adds	r4, #16
   13ae4:	454c      	cmp	r4, r9
   13ae6:	d918      	bls.n	13b1a <z_log_init+0x9a>
   13ae8:	491a      	ldr	r1, [pc, #104]	; (13b54 <z_log_init+0xd4>)
   13aea:	4a17      	ldr	r2, [pc, #92]	; (13b48 <z_log_init+0xc8>)
   13aec:	4817      	ldr	r0, [pc, #92]	; (13b4c <z_log_init+0xcc>)
   13aee:	f240 1325 	movw	r3, #293	; 0x125
   13af2:	f010 fdfb 	bl	246ec <assert_print>
   13af6:	4818      	ldr	r0, [pc, #96]	; (13b58 <z_log_init+0xd8>)
   13af8:	f010 fdf8 	bl	246ec <assert_print>
   13afc:	f240 1125 	movw	r1, #293	; 0x125
   13b00:	e7d2      	b.n	13aa8 <z_log_init+0x28>
		return backend->api->is_ready(backend);
   13b02:	4620      	mov	r0, r4
   13b04:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13b06:	2800      	cmp	r0, #0
   13b08:	d0e4      	beq.n	13ad4 <z_log_init+0x54>
				mask |= BIT(i);
   13b0a:	fa0a f306 	lsl.w	r3, sl, r6
   13b0e:	431d      	orrs	r5, r3
   13b10:	e7e6      	b.n	13ae0 <z_log_init+0x60>
	uint32_t mask = 0;
   13b12:	4605      	mov	r5, r0
				mask |= BIT(i);
   13b14:	f04f 0a01 	mov.w	sl, #1
   13b18:	e7e4      	b.n	13ae4 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13b1a:	d3d1      	bcc.n	13ac0 <z_log_init+0x40>
	if (blocking) {
   13b1c:	f1b8 0f00 	cmp.w	r8, #0
   13b20:	d0cb      	beq.n	13aba <z_log_init+0x3a>
		while (mask) {
   13b22:	2d00      	cmp	r5, #0
   13b24:	d0c8      	beq.n	13ab8 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
   13b26:	4628      	mov	r0, r5
   13b28:	f7ff ff78 	bl	13a1c <activate_foreach_backend>
   13b2c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13b2e:	2f00      	cmp	r7, #0
   13b30:	d0f7      	beq.n	13b22 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
   13b32:	2100      	movs	r1, #0
   13b34:	f44f 70a4 	mov.w	r0, #328	; 0x148
   13b38:	f00e fed0 	bl	228dc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   13b3c:	e7f1      	b.n	13b22 <z_log_init+0xa2>
   13b3e:	bf00      	nop
   13b40:	00027420 	.word	0x00027420
   13b44:	00028491 	.word	0x00028491
   13b48:	00028464 	.word	0x00028464
   13b4c:	00027f8a 	.word	0x00027f8a
   13b50:	20002d20 	.word	0x20002d20
   13b54:	000284b5 	.word	0x000284b5
   13b58:	000284d6 	.word	0x000284d6
   13b5c:	00027440 	.word	0x00027440

00013b60 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   13b60:	4801      	ldr	r0, [pc, #4]	; (13b68 <log_process_thread_timer_expiry_fn+0x8>)
   13b62:	f00d b869 	b.w	20c38 <z_impl_k_sem_give>
   13b66:	bf00      	nop
   13b68:	2000093c 	.word	0x2000093c

00013b6c <log_format_func_t_get>:
}
   13b6c:	4b01      	ldr	r3, [pc, #4]	; (13b74 <log_format_func_t_get+0x8>)
   13b6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13b72:	4770      	bx	lr
   13b74:	00027504 	.word	0x00027504

00013b78 <log_set_timestamp_func>:
{
   13b78:	b508      	push	{r3, lr}
   13b7a:	4603      	mov	r3, r0
   13b7c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   13b7e:	b12b      	cbz	r3, 13b8c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   13b80:	4a04      	ldr	r2, [pc, #16]	; (13b94 <log_set_timestamp_func+0x1c>)
   13b82:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   13b84:	f000 fd9e 	bl	146c4 <log_output_timestamp_freq_set>
	return 0;
   13b88:	2000      	movs	r0, #0
}
   13b8a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13b8c:	f06f 0015 	mvn.w	r0, #21
   13b90:	e7fb      	b.n	13b8a <log_set_timestamp_func+0x12>
   13b92:	bf00      	nop
   13b94:	200005d0 	.word	0x200005d0

00013b98 <z_log_notify_backend_enabled>:
{
   13b98:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13b9a:	4c04      	ldr	r4, [pc, #16]	; (13bac <z_log_notify_backend_enabled+0x14>)
   13b9c:	7823      	ldrb	r3, [r4, #0]
   13b9e:	b913      	cbnz	r3, 13ba6 <z_log_notify_backend_enabled+0xe>
   13ba0:	4803      	ldr	r0, [pc, #12]	; (13bb0 <z_log_notify_backend_enabled+0x18>)
   13ba2:	f00d f849 	bl	20c38 <z_impl_k_sem_give>
	backend_attached = true;
   13ba6:	2301      	movs	r3, #1
   13ba8:	7023      	strb	r3, [r4, #0]
}
   13baa:	bd10      	pop	{r4, pc}
   13bac:	20003125 	.word	0x20003125
   13bb0:	2000093c 	.word	0x2000093c

00013bb4 <z_log_dropped>:
{
   13bb4:	b510      	push	{r4, lr}
   13bb6:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   13bb8:	4808      	ldr	r0, [pc, #32]	; (13bdc <z_log_dropped+0x28>)
   13bba:	f010 fec0 	bl	2493e <atomic_inc>
	if (buffered) {
   13bbe:	b15c      	cbz	r4, 13bd8 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13bc0:	f3bf 8f5b 	dmb	ish
   13bc4:	4b06      	ldr	r3, [pc, #24]	; (13be0 <z_log_dropped+0x2c>)
   13bc6:	e853 1f00 	ldrex	r1, [r3]
   13bca:	3901      	subs	r1, #1
   13bcc:	e843 1200 	strex	r2, r1, [r3]
   13bd0:	2a00      	cmp	r2, #0
   13bd2:	d1f8      	bne.n	13bc6 <z_log_dropped+0x12>
   13bd4:	f3bf 8f5b 	dmb	ish
}
   13bd8:	bd10      	pop	{r4, pc}
   13bda:	bf00      	nop
   13bdc:	20002d18 	.word	0x20002d18
   13be0:	20002d1c 	.word	0x20002d1c

00013be4 <z_log_dropped_read_and_clear>:
}
   13be4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13be6:	4b06      	ldr	r3, [pc, #24]	; (13c00 <z_log_dropped_read_and_clear+0x1c>)
   13be8:	f3bf 8f5b 	dmb	ish
   13bec:	4601      	mov	r1, r0
   13bee:	e853 0f00 	ldrex	r0, [r3]
   13bf2:	e843 1200 	strex	r2, r1, [r3]
   13bf6:	2a00      	cmp	r2, #0
   13bf8:	d1f9      	bne.n	13bee <z_log_dropped_read_and_clear+0xa>
   13bfa:	f3bf 8f5b 	dmb	ish
   13bfe:	4770      	bx	lr
   13c00:	20002d18 	.word	0x20002d18

00013c04 <dropped_notify>:
{
   13c04:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13c06:	f7ff ffed 	bl	13be4 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c0a:	4c10      	ldr	r4, [pc, #64]	; (13c4c <dropped_notify+0x48>)
   13c0c:	4e10      	ldr	r6, [pc, #64]	; (13c50 <dropped_notify+0x4c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   13c0e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c10:	42b4      	cmp	r4, r6
   13c12:	d919      	bls.n	13c48 <dropped_notify+0x44>
   13c14:	490f      	ldr	r1, [pc, #60]	; (13c54 <dropped_notify+0x50>)
   13c16:	4a10      	ldr	r2, [pc, #64]	; (13c58 <dropped_notify+0x54>)
   13c18:	4810      	ldr	r0, [pc, #64]	; (13c5c <dropped_notify+0x58>)
   13c1a:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   13c1e:	f010 fd65 	bl	246ec <assert_print>
   13c22:	480f      	ldr	r0, [pc, #60]	; (13c60 <dropped_notify+0x5c>)
   13c24:	f010 fd62 	bl	246ec <assert_print>
   13c28:	480b      	ldr	r0, [pc, #44]	; (13c58 <dropped_notify+0x54>)
   13c2a:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   13c2e:	f010 fd56 	bl	246de <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13c32:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13c34:	795b      	ldrb	r3, [r3, #5]
   13c36:	b12b      	cbz	r3, 13c44 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
   13c38:	6823      	ldr	r3, [r4, #0]
   13c3a:	685b      	ldr	r3, [r3, #4]
   13c3c:	b113      	cbz	r3, 13c44 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
   13c3e:	4629      	mov	r1, r5
   13c40:	4620      	mov	r0, r4
   13c42:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c44:	3410      	adds	r4, #16
   13c46:	e7e3      	b.n	13c10 <dropped_notify+0xc>
   13c48:	d3f3      	bcc.n	13c32 <dropped_notify+0x2e>
}
   13c4a:	bd70      	pop	{r4, r5, r6, pc}
   13c4c:	00027420 	.word	0x00027420
   13c50:	00027440 	.word	0x00027440
   13c54:	000284b5 	.word	0x000284b5
   13c58:	00028464 	.word	0x00028464
   13c5c:	00027f8a 	.word	0x00027f8a
   13c60:	000284d6 	.word	0x000284d6

00013c64 <z_log_msg_init>:
{
   13c64:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13c66:	4c04      	ldr	r4, [pc, #16]	; (13c78 <z_log_msg_init+0x14>)
   13c68:	4904      	ldr	r1, [pc, #16]	; (13c7c <z_log_msg_init+0x18>)
   13c6a:	4620      	mov	r0, r4
   13c6c:	f7ff fc66 	bl	1353c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13c70:	4b03      	ldr	r3, [pc, #12]	; (13c80 <z_log_msg_init+0x1c>)
   13c72:	601c      	str	r4, [r3, #0]
}
   13c74:	bd10      	pop	{r4, pc}
   13c76:	bf00      	nop
   13c78:	20000854 	.word	0x20000854
   13c7c:	000274f0 	.word	0x000274f0
   13c80:	20002d10 	.word	0x20002d10

00013c84 <log_core_init>:
	panic_mode = false;
   13c84:	4a08      	ldr	r2, [pc, #32]	; (13ca8 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   13c86:	4809      	ldr	r0, [pc, #36]	; (13cac <log_core_init+0x28>)
{
   13c88:	b508      	push	{r3, lr}
	panic_mode = false;
   13c8a:	2300      	movs	r3, #0
   13c8c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13c8e:	4a08      	ldr	r2, [pc, #32]	; (13cb0 <log_core_init+0x2c>)
   13c90:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   13c92:	4a08      	ldr	r2, [pc, #32]	; (13cb4 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   13c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   13c98:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13c9a:	f7ff ff6d 	bl	13b78 <log_set_timestamp_func>
}
   13c9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   13ca2:	f7ff bfdf 	b.w	13c64 <z_log_msg_init>
   13ca6:	bf00      	nop
   13ca8:	20003126 	.word	0x20003126
   13cac:	0002493b 	.word	0x0002493b
   13cb0:	20002d18 	.word	0x20002d18
   13cb4:	20002d1c 	.word	0x20002d1c

00013cb8 <z_log_msg_alloc>:
{
   13cb8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13cba:	2200      	movs	r2, #0
   13cbc:	4801      	ldr	r0, [pc, #4]	; (13cc4 <z_log_msg_alloc+0xc>)
   13cbe:	2300      	movs	r3, #0
   13cc0:	f7ff bc6e 	b.w	135a0 <mpsc_pbuf_alloc>
   13cc4:	20000854 	.word	0x20000854

00013cc8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13cc8:	4801      	ldr	r0, [pc, #4]	; (13cd0 <z_log_msg_local_claim+0x8>)
   13cca:	f7ff bd7f 	b.w	137cc <mpsc_pbuf_claim>
   13cce:	bf00      	nop
   13cd0:	20000854 	.word	0x20000854

00013cd4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   13cd4:	4b02      	ldr	r3, [pc, #8]	; (13ce0 <z_log_msg_free+0xc>)
{
   13cd6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13cd8:	6818      	ldr	r0, [r3, #0]
   13cda:	f7ff bdff 	b.w	138dc <mpsc_pbuf_free>
   13cde:	bf00      	nop
   13ce0:	20002d10 	.word	0x20002d10

00013ce4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   13ce4:	4801      	ldr	r0, [pc, #4]	; (13cec <z_log_msg_pending+0x8>)
   13ce6:	f010 be08 	b.w	248fa <mpsc_pbuf_is_pending>
   13cea:	bf00      	nop
   13cec:	20000854 	.word	0x20000854

00013cf0 <z_impl_log_process>:
{
   13cf0:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   13cf2:	4b30      	ldr	r3, [pc, #192]	; (13db4 <z_impl_log_process+0xc4>)
   13cf4:	7818      	ldrb	r0, [r3, #0]
   13cf6:	2800      	cmp	r0, #0
   13cf8:	d05b      	beq.n	13db2 <z_impl_log_process+0xc2>
	return z_log_msg_local_claim();
   13cfa:	f7ff ffe5 	bl	13cc8 <z_log_msg_local_claim>
	if (msg) {
   13cfe:	4605      	mov	r5, r0
   13d00:	b360      	cbz	r0, 13d5c <z_impl_log_process+0x6c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13d02:	f3bf 8f5b 	dmb	ish
   13d06:	4b2c      	ldr	r3, [pc, #176]	; (13db8 <z_impl_log_process+0xc8>)
   13d08:	e853 1f00 	ldrex	r1, [r3]
   13d0c:	3901      	subs	r1, #1
   13d0e:	e843 1200 	strex	r2, r1, [r3]
   13d12:	2a00      	cmp	r2, #0
   13d14:	d1f8      	bne.n	13d08 <z_impl_log_process+0x18>
   13d16:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d1a:	4c28      	ldr	r4, [pc, #160]	; (13dbc <z_impl_log_process+0xcc>)
   13d1c:	4e28      	ldr	r6, [pc, #160]	; (13dc0 <z_impl_log_process+0xd0>)
   13d1e:	42b4      	cmp	r4, r6
   13d20:	d918      	bls.n	13d54 <z_impl_log_process+0x64>
   13d22:	4928      	ldr	r1, [pc, #160]	; (13dc4 <z_impl_log_process+0xd4>)
   13d24:	4a28      	ldr	r2, [pc, #160]	; (13dc8 <z_impl_log_process+0xd8>)
   13d26:	4829      	ldr	r0, [pc, #164]	; (13dcc <z_impl_log_process+0xdc>)
   13d28:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   13d2c:	f010 fcde 	bl	246ec <assert_print>
   13d30:	4827      	ldr	r0, [pc, #156]	; (13dd0 <z_impl_log_process+0xe0>)
   13d32:	f010 fcdb 	bl	246ec <assert_print>
   13d36:	4824      	ldr	r0, [pc, #144]	; (13dc8 <z_impl_log_process+0xd8>)
   13d38:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   13d3c:	f010 fccf 	bl	246de <assert_post_action>
	return backend->cb->active;
   13d40:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   13d42:	795b      	ldrb	r3, [r3, #5]
   13d44:	b123      	cbz	r3, 13d50 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   13d46:	6823      	ldr	r3, [r4, #0]
   13d48:	4629      	mov	r1, r5
   13d4a:	681b      	ldr	r3, [r3, #0]
   13d4c:	4620      	mov	r0, r4
   13d4e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d50:	3410      	adds	r4, #16
   13d52:	e7e4      	b.n	13d1e <z_impl_log_process+0x2e>
   13d54:	d3f4      	bcc.n	13d40 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   13d56:	4628      	mov	r0, r5
   13d58:	f7ff ffbc 	bl	13cd4 <z_log_msg_free>
	return dropped_cnt > 0;
   13d5c:	4b1d      	ldr	r3, [pc, #116]	; (13dd4 <z_impl_log_process+0xe4>)
   13d5e:	4c1e      	ldr	r4, [pc, #120]	; (13dd8 <z_impl_log_process+0xe8>)
		if ((dropped_pend || unordered_pend) &&
   13d60:	681b      	ldr	r3, [r3, #0]
   13d62:	2b00      	cmp	r3, #0
   13d64:	dd19      	ble.n	13d9a <z_impl_log_process+0xaa>
	return z_impl_k_uptime_ticks();
   13d66:	f013 f87c 	bl	26e62 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13d6e:	fba0 0302 	umull	r0, r3, r0, r2
   13d72:	fb02 3101 	mla	r1, r2, r1, r3
   13d76:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13d78:	e9d4 2000 	ldrd	r2, r0, [r4]
   13d7c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   13d80:	1a9b      	subs	r3, r3, r2
   13d82:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   13d86:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13d8a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   13d8e:	4293      	cmp	r3, r2
   13d90:	f171 0100 	sbcs.w	r1, r1, #0
   13d94:	d301      	bcc.n	13d9a <z_impl_log_process+0xaa>
				dropped_notify();
   13d96:	f7ff ff35 	bl	13c04 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13d9a:	e9d4 3200 	ldrd	r3, r2, [r4]
   13d9e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13da2:	f142 0200 	adc.w	r2, r2, #0
   13da6:	e9c4 3200 	strd	r3, r2, [r4]
}
   13daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   13dae:	f7ff bf99 	b.w	13ce4 <z_log_msg_pending>
}
   13db2:	bd70      	pop	{r4, r5, r6, pc}
   13db4:	20003125 	.word	0x20003125
   13db8:	20002d1c 	.word	0x20002d1c
   13dbc:	00027420 	.word	0x00027420
   13dc0:	00027440 	.word	0x00027440
   13dc4:	000284b5 	.word	0x000284b5
   13dc8:	00028464 	.word	0x00028464
   13dcc:	00027f8a 	.word	0x00027f8a
   13dd0:	000284d6 	.word	0x000284d6
   13dd4:	20002d18 	.word	0x20002d18
   13dd8:	20001c30 	.word	0x20001c30

00013ddc <z_impl_log_panic>:
{
   13ddc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   13dde:	4d15      	ldr	r5, [pc, #84]	; (13e34 <z_impl_log_panic+0x58>)
   13de0:	7829      	ldrb	r1, [r5, #0]
   13de2:	bb29      	cbnz	r1, 13e30 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
   13de4:	2001      	movs	r0, #1
   13de6:	f7ff fe4b 	bl	13a80 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dea:	4c13      	ldr	r4, [pc, #76]	; (13e38 <z_impl_log_panic+0x5c>)
   13dec:	4e13      	ldr	r6, [pc, #76]	; (13e3c <z_impl_log_panic+0x60>)
   13dee:	42b4      	cmp	r4, r6
   13df0:	d917      	bls.n	13e22 <z_impl_log_panic+0x46>
   13df2:	4913      	ldr	r1, [pc, #76]	; (13e40 <z_impl_log_panic+0x64>)
   13df4:	4a13      	ldr	r2, [pc, #76]	; (13e44 <z_impl_log_panic+0x68>)
   13df6:	4814      	ldr	r0, [pc, #80]	; (13e48 <z_impl_log_panic+0x6c>)
   13df8:	f240 1387 	movw	r3, #391	; 0x187
   13dfc:	f010 fc76 	bl	246ec <assert_print>
   13e00:	4812      	ldr	r0, [pc, #72]	; (13e4c <z_impl_log_panic+0x70>)
   13e02:	f010 fc73 	bl	246ec <assert_print>
   13e06:	480f      	ldr	r0, [pc, #60]	; (13e44 <z_impl_log_panic+0x68>)
   13e08:	f240 1187 	movw	r1, #391	; 0x187
   13e0c:	f010 fc67 	bl	246de <assert_post_action>
	return backend->cb->active;
   13e10:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13e12:	795b      	ldrb	r3, [r3, #5]
   13e14:	b11b      	cbz	r3, 13e1e <z_impl_log_panic+0x42>
	backend->api->panic(backend);
   13e16:	6823      	ldr	r3, [r4, #0]
   13e18:	4620      	mov	r0, r4
   13e1a:	689b      	ldr	r3, [r3, #8]
   13e1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e1e:	3410      	adds	r4, #16
   13e20:	e7e5      	b.n	13dee <z_impl_log_panic+0x12>
   13e22:	d3f5      	bcc.n	13e10 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13e24:	f7ff ff64 	bl	13cf0 <z_impl_log_process>
		while (log_process() == true) {
   13e28:	2800      	cmp	r0, #0
   13e2a:	d1fb      	bne.n	13e24 <z_impl_log_panic+0x48>
	panic_mode = true;
   13e2c:	2301      	movs	r3, #1
   13e2e:	702b      	strb	r3, [r5, #0]
}
   13e30:	bd70      	pop	{r4, r5, r6, pc}
   13e32:	bf00      	nop
   13e34:	20003126 	.word	0x20003126
   13e38:	00027420 	.word	0x00027420
   13e3c:	00027440 	.word	0x00027440
   13e40:	000284b5 	.word	0x000284b5
   13e44:	00028464 	.word	0x00028464
   13e48:	00027f8a 	.word	0x00027f8a
   13e4c:	000284d6 	.word	0x000284d6

00013e50 <log_process_thread_func>:
{
   13e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13e54:	4b2f      	ldr	r3, [pc, #188]	; (13f14 <log_process_thread_func+0xc4>)
   13e56:	4f30      	ldr	r7, [pc, #192]	; (13f18 <log_process_thread_func+0xc8>)
   13e58:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13e5a:	091b      	lsrs	r3, r3, #4
   13e5c:	d10b      	bne.n	13e76 <log_process_thread_func+0x26>
   13e5e:	492f      	ldr	r1, [pc, #188]	; (13f1c <log_process_thread_func+0xcc>)
   13e60:	4a2f      	ldr	r2, [pc, #188]	; (13f20 <log_process_thread_func+0xd0>)
   13e62:	4830      	ldr	r0, [pc, #192]	; (13f24 <log_process_thread_func+0xd4>)
   13e64:	f240 335b 	movw	r3, #859	; 0x35b
   13e68:	f010 fc40 	bl	246ec <assert_print>
   13e6c:	f240 315b 	movw	r1, #859	; 0x35b
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e70:	482b      	ldr	r0, [pc, #172]	; (13f20 <log_process_thread_func+0xd0>)
   13e72:	f010 fc34 	bl	246de <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
   13e76:	2100      	movs	r1, #0
   13e78:	4608      	mov	r0, r1
   13e7a:	f7ff fe01 	bl	13a80 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13e7e:	4604      	mov	r4, r0
   13e80:	b340      	cbz	r0, 13ed4 <log_process_thread_func+0x84>
   13e82:	f240 6867 	movw	r8, #1639	; 0x667
   13e86:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13e8a:	f00e fd5b 	bl	22944 <z_impl_z_current_get>
	proc_tid = process_tid;
   13e8e:	4b26      	ldr	r3, [pc, #152]	; (13f28 <log_process_thread_func+0xd8>)
   13e90:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13e92:	b130      	cbz	r0, 13ea2 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13e94:	4b25      	ldr	r3, [pc, #148]	; (13f2c <log_process_thread_func+0xdc>)
	    process_tid &&
   13e96:	681b      	ldr	r3, [r3, #0]
   13e98:	2b09      	cmp	r3, #9
   13e9a:	dd02      	ble.n	13ea2 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
   13e9c:	4824      	ldr	r0, [pc, #144]	; (13f30 <log_process_thread_func+0xe0>)
   13e9e:	f00c fecb 	bl	20c38 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   13ea2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 13f30 <log_process_thread_func+0xe0>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13ea6:	2500      	movs	r5, #0
		if (activate_mask) {
   13ea8:	b144      	cbz	r4, 13ebc <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
   13eaa:	4620      	mov	r0, r4
   13eac:	f7ff fdb6 	bl	13a1c <activate_foreach_backend>
			if (!activate_mask) {
   13eb0:	4604      	mov	r4, r0
   13eb2:	b918      	cbnz	r0, 13ebc <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
   13eb4:	f04f 38ff 	mov.w	r8, #4294967295
   13eb8:	f04f 39ff 	mov.w	r9, #4294967295
   13ebc:	f7ff ff18 	bl	13cf0 <z_impl_log_process>
		if (log_process() == false) {
   13ec0:	4606      	mov	r6, r0
   13ec2:	b928      	cbnz	r0, 13ed0 <log_process_thread_func+0x80>
			if (processed_any) {
   13ec4:	b95d      	cbnz	r5, 13ede <log_process_thread_func+0x8e>
   13ec6:	4642      	mov	r2, r8
   13ec8:	464b      	mov	r3, r9
   13eca:	4650      	mov	r0, sl
   13ecc:	f00c fef8 	bl	20cc0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13ed0:	4635      	mov	r5, r6
   13ed2:	e7e9      	b.n	13ea8 <log_process_thread_func+0x58>
   13ed4:	f04f 38ff 	mov.w	r8, #4294967295
   13ed8:	f04f 39ff 	mov.w	r9, #4294967295
   13edc:	e7d5      	b.n	13e8a <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13ede:	4d0d      	ldr	r5, [pc, #52]	; (13f14 <log_process_thread_func+0xc4>)
   13ee0:	e008      	b.n	13ef4 <log_process_thread_func+0xa4>
   13ee2:	d2f0      	bcs.n	13ec6 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13ee4:	682b      	ldr	r3, [r5, #0]
   13ee6:	699b      	ldr	r3, [r3, #24]
   13ee8:	b11b      	cbz	r3, 13ef2 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
   13eea:	2200      	movs	r2, #0
   13eec:	4611      	mov	r1, r2
   13eee:	4628      	mov	r0, r5
   13ef0:	4798      	blx	r3
   13ef2:	3510      	adds	r5, #16
   13ef4:	42bd      	cmp	r5, r7
   13ef6:	d9f4      	bls.n	13ee2 <log_process_thread_func+0x92>
   13ef8:	490e      	ldr	r1, [pc, #56]	; (13f34 <log_process_thread_func+0xe4>)
   13efa:	4a09      	ldr	r2, [pc, #36]	; (13f20 <log_process_thread_func+0xd0>)
   13efc:	4809      	ldr	r0, [pc, #36]	; (13f24 <log_process_thread_func+0xd4>)
   13efe:	f240 334f 	movw	r3, #847	; 0x34f
   13f02:	f010 fbf3 	bl	246ec <assert_print>
   13f06:	480c      	ldr	r0, [pc, #48]	; (13f38 <log_process_thread_func+0xe8>)
   13f08:	f010 fbf0 	bl	246ec <assert_print>
   13f0c:	f240 314f 	movw	r1, #847	; 0x34f
   13f10:	e7ae      	b.n	13e70 <log_process_thread_func+0x20>
   13f12:	bf00      	nop
   13f14:	00027420 	.word	0x00027420
   13f18:	00027440 	.word	0x00027440
   13f1c:	000284f5 	.word	0x000284f5
   13f20:	00028464 	.word	0x00028464
   13f24:	00027f8a 	.word	0x00027f8a
   13f28:	20002d14 	.word	0x20002d14
   13f2c:	20002d1c 	.word	0x20002d1c
   13f30:	2000093c 	.word	0x2000093c
   13f34:	000284b5 	.word	0x000284b5
   13f38:	000284d6 	.word	0x000284d6

00013f3c <z_log_msg_post_finalize>:
{
   13f3c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13f3e:	482b      	ldr	r0, [pc, #172]	; (13fec <z_log_msg_post_finalize+0xb0>)
   13f40:	f010 fcfd 	bl	2493e <atomic_inc>
	if (panic_mode) {
   13f44:	4b2a      	ldr	r3, [pc, #168]	; (13ff0 <z_log_msg_post_finalize+0xb4>)
   13f46:	781b      	ldrb	r3, [r3, #0]
   13f48:	2b00      	cmp	r3, #0
   13f4a:	d034      	beq.n	13fb6 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
   13f4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f50:	f3ef 8411 	mrs	r4, BASEPRI
   13f54:	f383 8812 	msr	BASEPRI_MAX, r3
   13f58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13f5c:	4825      	ldr	r0, [pc, #148]	; (13ff4 <z_log_msg_post_finalize+0xb8>)
   13f5e:	f00c fbb1 	bl	206c4 <z_spin_lock_valid>
   13f62:	b968      	cbnz	r0, 13f80 <z_log_msg_post_finalize+0x44>
   13f64:	4a24      	ldr	r2, [pc, #144]	; (13ff8 <z_log_msg_post_finalize+0xbc>)
   13f66:	4925      	ldr	r1, [pc, #148]	; (13ffc <z_log_msg_post_finalize+0xc0>)
   13f68:	4825      	ldr	r0, [pc, #148]	; (14000 <z_log_msg_post_finalize+0xc4>)
   13f6a:	2394      	movs	r3, #148	; 0x94
   13f6c:	f010 fbbe 	bl	246ec <assert_print>
   13f70:	4920      	ldr	r1, [pc, #128]	; (13ff4 <z_log_msg_post_finalize+0xb8>)
   13f72:	4824      	ldr	r0, [pc, #144]	; (14004 <z_log_msg_post_finalize+0xc8>)
   13f74:	f010 fbba 	bl	246ec <assert_print>
   13f78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13f7a:	481f      	ldr	r0, [pc, #124]	; (13ff8 <z_log_msg_post_finalize+0xbc>)
   13f7c:	f010 fbaf 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   13f80:	481c      	ldr	r0, [pc, #112]	; (13ff4 <z_log_msg_post_finalize+0xb8>)
   13f82:	f00c fbbd 	bl	20700 <z_spin_lock_set_owner>
   13f86:	f7ff feb3 	bl	13cf0 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13f8a:	481a      	ldr	r0, [pc, #104]	; (13ff4 <z_log_msg_post_finalize+0xb8>)
   13f8c:	f00c fba8 	bl	206e0 <z_spin_unlock_valid>
   13f90:	b958      	cbnz	r0, 13faa <z_log_msg_post_finalize+0x6e>
   13f92:	4a19      	ldr	r2, [pc, #100]	; (13ff8 <z_log_msg_post_finalize+0xbc>)
   13f94:	491c      	ldr	r1, [pc, #112]	; (14008 <z_log_msg_post_finalize+0xcc>)
   13f96:	481a      	ldr	r0, [pc, #104]	; (14000 <z_log_msg_post_finalize+0xc4>)
   13f98:	23c2      	movs	r3, #194	; 0xc2
   13f9a:	f010 fba7 	bl	246ec <assert_print>
   13f9e:	4915      	ldr	r1, [pc, #84]	; (13ff4 <z_log_msg_post_finalize+0xb8>)
   13fa0:	481a      	ldr	r0, [pc, #104]	; (1400c <z_log_msg_post_finalize+0xd0>)
   13fa2:	f010 fba3 	bl	246ec <assert_print>
   13fa6:	21c2      	movs	r1, #194	; 0xc2
   13fa8:	e7e7      	b.n	13f7a <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
   13faa:	f384 8811 	msr	BASEPRI, r4
   13fae:	f3bf 8f6f 	isb	sy
}
   13fb2:	b002      	add	sp, #8
   13fb4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13fb6:	4b16      	ldr	r3, [pc, #88]	; (14010 <z_log_msg_post_finalize+0xd4>)
   13fb8:	681b      	ldr	r3, [r3, #0]
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d0f9      	beq.n	13fb2 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
   13fbe:	b950      	cbnz	r0, 13fd6 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
   13fc0:	2200      	movs	r2, #0
   13fc2:	2300      	movs	r3, #0
   13fc4:	e9cd 2300 	strd	r2, r3, [sp]
   13fc8:	4812      	ldr	r0, [pc, #72]	; (14014 <z_log_msg_post_finalize+0xd8>)
   13fca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13fce:	2300      	movs	r3, #0
   13fd0:	f00f f95c 	bl	2328c <z_impl_k_timer_start>
   13fd4:	e7ed      	b.n	13fb2 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13fd6:	280a      	cmp	r0, #10
   13fd8:	d1eb      	bne.n	13fb2 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
   13fda:	480e      	ldr	r0, [pc, #56]	; (14014 <z_log_msg_post_finalize+0xd8>)
   13fdc:	f012 ff75 	bl	26eca <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13fe0:	480d      	ldr	r0, [pc, #52]	; (14018 <z_log_msg_post_finalize+0xdc>)
}
   13fe2:	b002      	add	sp, #8
   13fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13fe8:	f00c be26 	b.w	20c38 <z_impl_k_sem_give>
   13fec:	20002d1c 	.word	0x20002d1c
   13ff0:	20003126 	.word	0x20003126
   13ff4:	20002d0c 	.word	0x20002d0c
   13ff8:	0002837e 	.word	0x0002837e
   13ffc:	000283d7 	.word	0x000283d7
   14000:	00027f8a 	.word	0x00027f8a
   14004:	000283ec 	.word	0x000283ec
   14008:	000283ab 	.word	0x000283ab
   1400c:	000283c2 	.word	0x000283c2
   14010:	20002d14 	.word	0x20002d14
   14014:	20001c38 	.word	0x20001c38
   14018:	2000093c 	.word	0x2000093c

0001401c <z_log_msg_commit>:
{
   1401c:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1401e:	4b06      	ldr	r3, [pc, #24]	; (14038 <z_log_msg_commit+0x1c>)
   14020:	681b      	ldr	r3, [r3, #0]
{
   14022:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14024:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   14026:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   14028:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   1402a:	4804      	ldr	r0, [pc, #16]	; (1403c <z_log_msg_commit+0x20>)
   1402c:	f7ff fb78 	bl	13720 <mpsc_pbuf_commit>
}
   14030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   14034:	f7ff bf82 	b.w	13f3c <z_log_msg_post_finalize>
   14038:	200005d0 	.word	0x200005d0
   1403c:	20000854 	.word	0x20000854

00014040 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14040:	4a04      	ldr	r2, [pc, #16]	; (14054 <log_source_name_get+0x14>)
   14042:	4b05      	ldr	r3, [pc, #20]	; (14058 <log_source_name_get+0x18>)
   14044:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   14046:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   1404a:	bf34      	ite	cc
   1404c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   14050:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   14052:	4770      	bx	lr
   14054:	00027320 	.word	0x00027320
   14058:	00027420 	.word	0x00027420

0001405c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1405c:	4b0e      	ldr	r3, [pc, #56]	; (14098 <log_backend_enable+0x3c>)
   1405e:	1ac3      	subs	r3, r0, r3
   14060:	111b      	asrs	r3, r3, #4
   14062:	3301      	adds	r3, #1
{
   14064:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
   14066:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
   14068:	b948      	cbnz	r0, 1407e <log_backend_enable+0x22>
   1406a:	490c      	ldr	r1, [pc, #48]	; (1409c <log_backend_enable+0x40>)
   1406c:	480c      	ldr	r0, [pc, #48]	; (140a0 <log_backend_enable+0x44>)
   1406e:	4a0d      	ldr	r2, [pc, #52]	; (140a4 <log_backend_enable+0x48>)
   14070:	23de      	movs	r3, #222	; 0xde
   14072:	f010 fb3b 	bl	246ec <assert_print>
   14076:	480b      	ldr	r0, [pc, #44]	; (140a4 <log_backend_enable+0x48>)
   14078:	21de      	movs	r1, #222	; 0xde
   1407a:	f010 fb30 	bl	246de <assert_post_action>
	backend->cb->id = id;
   1407e:	6844      	ldr	r4, [r0, #4]
   14080:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   14082:	6843      	ldr	r3, [r0, #4]
   14084:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   14086:	6843      	ldr	r3, [r0, #4]
   14088:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1408a:	6843      	ldr	r3, [r0, #4]
   1408c:	2201      	movs	r2, #1
   1408e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   14090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
   14094:	f7ff bd80 	b.w	13b98 <z_log_notify_backend_enabled>
   14098:	00027420 	.word	0x00027420
   1409c:	00028595 	.word	0x00028595
   140a0:	00027f8a 	.word	0x00027f8a
   140a4:	0002855d 	.word	0x0002855d

000140a8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   140a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ac:	b08f      	sub	sp, #60	; 0x3c
   140ae:	af04      	add	r7, sp, #16
   140b0:	f3c1 284a 	ubfx	r8, r1, #9, #11
   140b4:	60b8      	str	r0, [r7, #8]
   140b6:	460d      	mov	r5, r1
   140b8:	4691      	mov	r9, r2
   140ba:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   140bc:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   140be:	f1b8 0f00 	cmp.w	r8, #0
   140c2:	d066      	beq.n	14192 <z_impl_z_log_msg_static_create+0xea>
	struct z_cbprintf_buf_desc buf_desc = {
   140c4:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   140c6:	f107 0314 	add.w	r3, r7, #20
   140ca:	f04f 0b04 	mov.w	fp, #4
   140ce:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   140d2:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   140d6:	e9c7 6607 	strd	r6, r6, [r7, #28]
   140da:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   140dc:	9301      	str	r3, [sp, #4]
   140de:	f8cd b008 	str.w	fp, [sp, #8]
   140e2:	f8cd a000 	str.w	sl, [sp]
   140e6:	f107 031c 	add.w	r3, r7, #28
   140ea:	68f9      	ldr	r1, [r7, #12]
   140ec:	4632      	mov	r2, r6
   140ee:	4648      	mov	r0, r9
   140f0:	f7fe fbb4 	bl	1285c <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   140f4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   140f8:	4603      	mov	r3, r0
   140fa:	d31c      	bcc.n	14136 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   140fc:	466c      	mov	r4, sp
   140fe:	b08a      	sub	sp, #40	; 0x28
   14100:	f8d9 1004 	ldr.w	r1, [r9, #4]
   14104:	ab04      	add	r3, sp, #16
   14106:	482b      	ldr	r0, [pc, #172]	; (141b4 <z_impl_z_log_msg_static_create+0x10c>)
   14108:	e9c3 0105 	strd	r0, r1, [r3, #20]
   1410c:	f240 71ff 	movw	r1, #2047	; 0x7ff
   14110:	61d9      	str	r1, [r3, #28]
   14112:	461a      	mov	r2, r3
   14114:	f44f 7100 	mov.w	r1, #512	; 0x200
   14118:	8419      	strh	r1, [r3, #32]
   1411a:	4b27      	ldr	r3, [pc, #156]	; (141b8 <z_impl_z_log_msg_static_create+0x110>)
   1411c:	f842 3f10 	str.w	r3, [r2, #16]!
   14120:	4826      	ldr	r0, [pc, #152]	; (141bc <z_impl_z_log_msg_static_create+0x114>)
   14122:	4633      	mov	r3, r6
   14124:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   14128:	f7ff ffbe 	bl	140a8 <z_impl_z_log_msg_static_create>
   1412c:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   1412e:	372c      	adds	r7, #44	; 0x2c
   14130:	46bd      	mov	sp, r7
   14132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   14136:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1413a:	f104 0017 	add.w	r0, r4, #23
   1413e:	4418      	add	r0, r3
   14140:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14144:	0880      	lsrs	r0, r0, #2
   14146:	603b      	str	r3, [r7, #0]
   14148:	f7ff fdb6 	bl	13cb8 <z_log_msg_alloc>
   1414c:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   14150:	4604      	mov	r4, r0
   14152:	b330      	cbz	r0, 141a2 <z_impl_z_log_msg_static_create+0xfa>
	struct z_cbprintf_buf_desc buf_desc = {
   14154:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   14156:	4a1a      	ldr	r2, [pc, #104]	; (141c0 <z_impl_z_log_msg_static_create+0x118>)
	struct z_cbprintf_buf_desc buf_desc = {
   14158:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   1415c:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   14160:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   14164:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   14166:	e9cd a300 	strd	sl, r3, [sp]
   1416a:	f8cd b008 	str.w	fp, [sp, #8]
   1416e:	68f9      	ldr	r1, [r7, #12]
   14170:	f107 031c 	add.w	r3, r7, #28
   14174:	4648      	mov	r0, r9
   14176:	f7fe fb71 	bl	1285c <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
   1417a:	2800      	cmp	r0, #0
   1417c:	da11      	bge.n	141a2 <z_impl_z_log_msg_static_create+0xfa>
   1417e:	4911      	ldr	r1, [pc, #68]	; (141c4 <z_impl_z_log_msg_static_create+0x11c>)
   14180:	4811      	ldr	r0, [pc, #68]	; (141c8 <z_impl_z_log_msg_static_create+0x120>)
   14182:	4a12      	ldr	r2, [pc, #72]	; (141cc <z_impl_z_log_msg_static_create+0x124>)
   14184:	2356      	movs	r3, #86	; 0x56
   14186:	f010 fab1 	bl	246ec <assert_print>
   1418a:	4810      	ldr	r0, [pc, #64]	; (141cc <z_impl_z_log_msg_static_create+0x124>)
   1418c:	2156      	movs	r1, #86	; 0x56
   1418e:	f010 faa6 	bl	246de <assert_post_action>
   14192:	f104 0017 	add.w	r0, r4, #23
   14196:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1419a:	0880      	lsrs	r0, r0, #2
   1419c:	f7ff fd8c 	bl	13cb8 <z_log_msg_alloc>
   141a0:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
   141a2:	f368 2553 	bfi	r5, r8, #9, #11
   141a6:	687b      	ldr	r3, [r7, #4]
   141a8:	68b9      	ldr	r1, [r7, #8]
   141aa:	462a      	mov	r2, r5
   141ac:	4620      	mov	r0, r4
   141ae:	f010 fbfc 	bl	249aa <z_log_msg_finalize>
   141b2:	e7bc      	b.n	1412e <z_impl_z_log_msg_static_create+0x86>
   141b4:	000285b5 	.word	0x000285b5
   141b8:	01000004 	.word	0x01000004
   141bc:	000273c8 	.word	0x000273c8
   141c0:	0002497f 	.word	0x0002497f
   141c4:	00028621 	.word	0x00028621
   141c8:	00027f8a 	.word	0x00027f8a
   141cc:	000285f4 	.word	0x000285f4

000141d0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   141d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d4:	b087      	sub	sp, #28
   141d6:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   141da:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   141de:	4604      	mov	r4, r0
   141e0:	460f      	mov	r7, r1
   141e2:	4693      	mov	fp, r2
   141e4:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   141e6:	b1ae      	cbz	r6, 14214 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   141e8:	2110      	movs	r1, #16
   141ea:	f8cd 9000 	str.w	r9, [sp]
   141ee:	4633      	mov	r3, r6
   141f0:	4652      	mov	r2, sl
   141f2:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   141f4:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   141f8:	f7fe f914 	bl	12424 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   141fc:	1e01      	subs	r1, r0, #0
   141fe:	da0a      	bge.n	14216 <z_impl_z_log_msg_runtime_vcreate+0x46>
   14200:	491f      	ldr	r1, [pc, #124]	; (14280 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   14202:	4a20      	ldr	r2, [pc, #128]	; (14284 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   14204:	4820      	ldr	r0, [pc, #128]	; (14288 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   14206:	2375      	movs	r3, #117	; 0x75
   14208:	f010 fa70 	bl	246ec <assert_print>
   1420c:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
   1420e:	481d      	ldr	r0, [pc, #116]	; (14284 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   14210:	f010 fa65 	bl	246de <assert_post_action>
		plen = 0;
   14214:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14216:	f105 0017 	add.w	r0, r5, #23
   1421a:	4408      	add	r0, r1
	struct log_msg_desc desc =
   1421c:	4b1b      	ldr	r3, [pc, #108]	; (1428c <z_impl_z_log_msg_runtime_vcreate+0xbc>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   1421e:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   14220:	f004 0407 	and.w	r4, r4, #7
   14224:	f00b 0b07 	and.w	fp, fp, #7
   14228:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   1422a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1422e:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   14232:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
   14236:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   14238:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   1423a:	f7ff fd3d 	bl	13cb8 <z_log_msg_alloc>
	struct log_msg_desc desc =
   1423e:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
   14242:	4605      	mov	r5, r0
   14244:	b190      	cbz	r0, 1426c <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
   14246:	b18e      	cbz	r6, 1426c <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   14248:	9903      	ldr	r1, [sp, #12]
   1424a:	f8cd 9000 	str.w	r9, [sp]
   1424e:	4633      	mov	r3, r6
   14250:	4652      	mov	r2, sl
   14252:	3010      	adds	r0, #16
   14254:	f7fe f8e6 	bl	12424 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   14258:	2800      	cmp	r0, #0
   1425a:	da07      	bge.n	1426c <z_impl_z_log_msg_runtime_vcreate+0x9c>
   1425c:	4908      	ldr	r1, [pc, #32]	; (14280 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   1425e:	4a09      	ldr	r2, [pc, #36]	; (14284 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   14260:	4809      	ldr	r0, [pc, #36]	; (14288 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   14262:	238f      	movs	r3, #143	; 0x8f
   14264:	f010 fa42 	bl	246ec <assert_print>
   14268:	218f      	movs	r1, #143	; 0x8f
   1426a:	e7d0      	b.n	1420e <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1426c:	4643      	mov	r3, r8
   1426e:	4622      	mov	r2, r4
   14270:	4639      	mov	r1, r7
   14272:	4628      	mov	r0, r5
	}
}
   14274:	b007      	add	sp, #28
   14276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1427a:	f010 bb96 	b.w	249aa <z_log_msg_finalize>
   1427e:	bf00      	nop
   14280:	00028620 	.word	0x00028620
   14284:	000285f4 	.word	0x000285f4
   14288:	00027f8a 	.word	0x00027f8a
   1428c:	000ffe00 	.word	0x000ffe00

00014290 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14290:	b40e      	push	{r1, r2, r3}
   14292:	b503      	push	{r0, r1, lr}
   14294:	ab03      	add	r3, sp, #12
   14296:	4601      	mov	r1, r0
   14298:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1429c:	4804      	ldr	r0, [pc, #16]	; (142b0 <print_formatted+0x20>)
	va_start(args, fmt);
   1429e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   142a0:	f010 fba9 	bl	249f6 <cbvprintf>
	va_end(args);

	return length;
}
   142a4:	b002      	add	sp, #8
   142a6:	f85d eb04 	ldr.w	lr, [sp], #4
   142aa:	b003      	add	sp, #12
   142ac:	4770      	bx	lr
   142ae:	bf00      	nop
   142b0:	000142d1 	.word	0x000142d1

000142b4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   142b4:	06ca      	lsls	r2, r1, #27
   142b6:	d405      	bmi.n	142c4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   142b8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   142ba:	bf4c      	ite	mi
   142bc:	4902      	ldrmi	r1, [pc, #8]	; (142c8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   142be:	4903      	ldrpl	r1, [pc, #12]	; (142cc <newline_print+0x18>)
   142c0:	f7ff bfe6 	b.w	14290 <print_formatted>
	}
}
   142c4:	4770      	bx	lr
   142c6:	bf00      	nop
   142c8:	0002a570 	.word	0x0002a570
   142cc:	0002862a 	.word	0x0002862a

000142d0 <out_func>:
{
   142d0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   142d2:	684b      	ldr	r3, [r1, #4]
   142d4:	681a      	ldr	r2, [r3, #0]
   142d6:	68cb      	ldr	r3, [r1, #12]
   142d8:	429a      	cmp	r2, r3
{
   142da:	4605      	mov	r5, r0
   142dc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   142de:	d102      	bne.n	142e6 <out_func+0x16>
		log_output_flush(out_ctx);
   142e0:	4608      	mov	r0, r1
   142e2:	f010 fb8f 	bl	24a04 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   142e6:	6863      	ldr	r3, [r4, #4]
   142e8:	f3bf 8f5b 	dmb	ish
   142ec:	e853 2f00 	ldrex	r2, [r3]
   142f0:	1c51      	adds	r1, r2, #1
   142f2:	e843 1000 	strex	r0, r1, [r3]
   142f6:	2800      	cmp	r0, #0
   142f8:	d1f8      	bne.n	142ec <out_func+0x1c>
   142fa:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   142fe:	68a3      	ldr	r3, [r4, #8]
   14300:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   14302:	6863      	ldr	r3, [r4, #4]
   14304:	681a      	ldr	r2, [r3, #0]
   14306:	68e3      	ldr	r3, [r4, #12]
   14308:	429a      	cmp	r2, r3
   1430a:	d909      	bls.n	14320 <out_func+0x50>
   1430c:	4905      	ldr	r1, [pc, #20]	; (14324 <out_func+0x54>)
   1430e:	4806      	ldr	r0, [pc, #24]	; (14328 <out_func+0x58>)
   14310:	4a06      	ldr	r2, [pc, #24]	; (1432c <out_func+0x5c>)
   14312:	237a      	movs	r3, #122	; 0x7a
   14314:	f010 f9ea 	bl	246ec <assert_print>
   14318:	4804      	ldr	r0, [pc, #16]	; (1432c <out_func+0x5c>)
   1431a:	217a      	movs	r1, #122	; 0x7a
   1431c:	f010 f9df 	bl	246de <assert_post_action>
}
   14320:	2000      	movs	r0, #0
   14322:	bd38      	pop	{r3, r4, r5, pc}
   14324:	0002865c 	.word	0x0002865c
   14328:	00027f8a 	.word	0x00027f8a
   1432c:	0002862d 	.word	0x0002862d

00014330 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   14330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14334:	b08b      	sub	sp, #44	; 0x2c
   14336:	469b      	mov	fp, r3
   14338:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   1433c:	9305      	str	r3, [sp, #20]
   1433e:	e9dd 9315 	ldrd	r9, r3, [sp, #84]	; 0x54
   14342:	9306      	str	r3, [sp, #24]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14344:	9b05      	ldr	r3, [sp, #20]
{
   14346:	9208      	str	r2, [sp, #32]
   14348:	e9dd 7617 	ldrd	r7, r6, [sp, #92]	; 0x5c
   1434c:	4604      	mov	r4, r0
   1434e:	460d      	mov	r5, r1
	if (!raw_string) {
   14350:	2b00      	cmp	r3, #0
   14352:	f000 8087 	beq.w	14464 <log_output_process+0x134>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   14356:	f006 0301 	and.w	r3, r6, #1
   1435a:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1435c:	f006 0308 	and.w	r3, r6, #8
   14360:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14362:	f010 fb0a 	bl	2497a <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14366:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   1436a:	4602      	mov	r2, r0
   1436c:	2800      	cmp	r0, #0
   1436e:	d049      	beq.n	14404 <log_output_process+0xd4>
		length += print_formatted(output, "%s ", tag);
   14370:	498c      	ldr	r1, [pc, #560]	; (145a4 <log_output_process+0x274>)
   14372:	4620      	mov	r0, r4
   14374:	f7ff ff8c 	bl	14290 <print_formatted>
   14378:	4680      	mov	r8, r0
	if (stamp) {
   1437a:	f1ba 0f00 	cmp.w	sl, #0
   1437e:	d008      	beq.n	14392 <log_output_process+0x62>
	if (!format) {
   14380:	f016 0f44 	tst.w	r6, #68	; 0x44
   14384:	d140      	bne.n	14408 <log_output_process+0xd8>
		length = print_formatted(output, "[%08lu] ", timestamp);
   14386:	4988      	ldr	r1, [pc, #544]	; (145a8 <log_output_process+0x278>)
   14388:	462a      	mov	r2, r5
   1438a:	4620      	mov	r0, r4
   1438c:	f7ff ff80 	bl	14290 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   14390:	4480      	add	r8, r0
	if (color) {
   14392:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14394:	b15b      	cbz	r3, 143ae <log_output_process+0x7e>
		const char *log_color = start && (colors[level] != NULL) ?
   14396:	4b85      	ldr	r3, [pc, #532]	; (145ac <log_output_process+0x27c>)
   14398:	9a05      	ldr	r2, [sp, #20]
		print_formatted(output, "%s", log_color);
   1439a:	4985      	ldr	r1, [pc, #532]	; (145b0 <log_output_process+0x280>)
		const char *log_color = start && (colors[level] != NULL) ?
   1439c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   143a0:	4b84      	ldr	r3, [pc, #528]	; (145b4 <log_output_process+0x284>)
   143a2:	4620      	mov	r0, r4
   143a4:	2a00      	cmp	r2, #0
   143a6:	bf08      	it	eq
   143a8:	461a      	moveq	r2, r3
   143aa:	f7ff ff71 	bl	14290 <print_formatted>
	if (level_on) {
   143ae:	9b07      	ldr	r3, [sp, #28]
   143b0:	2b00      	cmp	r3, #0
   143b2:	d055      	beq.n	14460 <log_output_process+0x130>
		total += print_formatted(output, "<%s> ", severity[level]);
   143b4:	4b80      	ldr	r3, [pc, #512]	; (145b8 <log_output_process+0x288>)
   143b6:	9a05      	ldr	r2, [sp, #20]
   143b8:	4980      	ldr	r1, [pc, #512]	; (145bc <log_output_process+0x28c>)
   143ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   143be:	4620      	mov	r0, r4
   143c0:	f7ff ff66 	bl	14290 <print_formatted>
   143c4:	4605      	mov	r5, r0
	if (domain) {
   143c6:	9b08      	ldr	r3, [sp, #32]
   143c8:	b12b      	cbz	r3, 143d6 <log_output_process+0xa6>
		total += print_formatted(output, "%s/", domain);
   143ca:	497d      	ldr	r1, [pc, #500]	; (145c0 <log_output_process+0x290>)
   143cc:	461a      	mov	r2, r3
   143ce:	4620      	mov	r0, r4
   143d0:	f7ff ff5e 	bl	14290 <print_formatted>
   143d4:	4405      	add	r5, r0
	if (source) {
   143d6:	f1bb 0f00 	cmp.w	fp, #0
   143da:	d005      	beq.n	143e8 <log_output_process+0xb8>
		total += print_formatted(output,
   143dc:	4979      	ldr	r1, [pc, #484]	; (145c4 <log_output_process+0x294>)
   143de:	465a      	mov	r2, fp
   143e0:	4620      	mov	r0, r4
   143e2:	f7ff ff55 	bl	14290 <print_formatted>
   143e6:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   143e8:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   143ea:	f1b9 0f00 	cmp.w	r9, #0
   143ee:	d149      	bne.n	14484 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   143f0:	2f00      	cmp	r7, #0
   143f2:	d160      	bne.n	144b6 <log_output_process+0x186>
	if (color) {
   143f4:	07f3      	lsls	r3, r6, #31
   143f6:	f100 80ce 	bmi.w	14596 <log_output_process+0x266>
	newline_print(output, flags);
   143fa:	4631      	mov	r1, r6
   143fc:	4620      	mov	r0, r4
   143fe:	f7ff ff59 	bl	142b4 <newline_print>
}
   14402:	e0c2      	b.n	1458a <log_output_process+0x25a>
	uint32_t length = 0U;
   14404:	4680      	mov	r8, r0
   14406:	e7b8      	b.n	1437a <log_output_process+0x4a>
	} else if (freq != 0U) {
   14408:	4b6f      	ldr	r3, [pc, #444]	; (145c8 <log_output_process+0x298>)
   1440a:	6818      	ldr	r0, [r3, #0]
   1440c:	2800      	cmp	r0, #0
   1440e:	d0bf      	beq.n	14390 <log_output_process+0x60>
		timestamp /= timestamp_div;
   14410:	4b6e      	ldr	r3, [pc, #440]	; (145cc <log_output_process+0x29c>)
		ms = (remainder * 1000U) / freq;
   14412:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   14416:	681b      	ldr	r3, [r3, #0]
   14418:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   1441c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   14420:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   14424:	fb00 5513 	mls	r5, r0, r3, r5
   14428:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   1442c:	fb0e f505 	mul.w	r5, lr, r5
   14430:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   14434:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14436:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   1443a:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1443e:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   14442:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14446:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   1444a:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1444c:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   14450:	495f      	ldr	r1, [pc, #380]	; (145d0 <log_output_process+0x2a0>)
   14452:	e9cd c501 	strd	ip, r5, [sp, #4]
   14456:	4652      	mov	r2, sl
   14458:	4620      	mov	r0, r4
   1445a:	f7ff ff19 	bl	14290 <print_formatted>
   1445e:	e797      	b.n	14390 <log_output_process+0x60>
	int total = 0;
   14460:	9d07      	ldr	r5, [sp, #28]
   14462:	e7b0      	b.n	143c6 <log_output_process+0x96>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14464:	f1bb 0f01 	cmp.w	fp, #1
   14468:	d107      	bne.n	1447a <log_output_process+0x14a>
	if (package) {
   1446a:	f1b9 0f00 	cmp.w	r9, #0
   1446e:	d11d      	bne.n	144ac <log_output_process+0x17c>
	if (data_len) {
   14470:	2f00      	cmp	r7, #0
   14472:	f000 808a 	beq.w	1458a <log_output_process+0x25a>
		prefix_offset = 0;
   14476:	2500      	movs	r5, #0
   14478:	e01d      	b.n	144b6 <log_output_process+0x186>
	if (package) {
   1447a:	f1b9 0f00 	cmp.w	r9, #0
   1447e:	d0f7      	beq.n	14470 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14480:	4854      	ldr	r0, [pc, #336]	; (145d4 <log_output_process+0x2a4>)
   14482:	e014      	b.n	144ae <log_output_process+0x17e>
		cb = out_func;
   14484:	4854      	ldr	r0, [pc, #336]	; (145d8 <log_output_process+0x2a8>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14486:	4955      	ldr	r1, [pc, #340]	; (145dc <log_output_process+0x2ac>)
   14488:	464b      	mov	r3, r9
   1448a:	4622      	mov	r2, r4
   1448c:	f00f fe8a 	bl	241a4 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
   14490:	2800      	cmp	r0, #0
   14492:	da0e      	bge.n	144b2 <log_output_process+0x182>
   14494:	4952      	ldr	r1, [pc, #328]	; (145e0 <log_output_process+0x2b0>)
   14496:	4853      	ldr	r0, [pc, #332]	; (145e4 <log_output_process+0x2b4>)
   14498:	4a53      	ldr	r2, [pc, #332]	; (145e8 <log_output_process+0x2b8>)
   1449a:	f44f 7302 	mov.w	r3, #520	; 0x208
   1449e:	f010 f925 	bl	246ec <assert_print>
   144a2:	4851      	ldr	r0, [pc, #324]	; (145e8 <log_output_process+0x2b8>)
   144a4:	f44f 7102 	mov.w	r1, #520	; 0x208
   144a8:	f010 f919 	bl	246de <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   144ac:	484a      	ldr	r0, [pc, #296]	; (145d8 <log_output_process+0x2a8>)
		prefix_offset = 0;
   144ae:	9d05      	ldr	r5, [sp, #20]
   144b0:	e7e9      	b.n	14486 <log_output_process+0x156>
	if (data_len) {
   144b2:	2f00      	cmp	r7, #0
   144b4:	d065      	beq.n	14582 <log_output_process+0x252>
		print_formatted(output, " ");
   144b6:	f8df 9140 	ldr.w	r9, [pc, #320]	; 145f8 <log_output_process+0x2c8>
			print_formatted(output, "%02x ", data[i]);
   144ba:	f8df a140 	ldr.w	sl, [pc, #320]	; 145fc <log_output_process+0x2cc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   144be:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   144c0:	4631      	mov	r1, r6
   144c2:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   144c4:	46b8      	mov	r8, r7
   144c6:	bf28      	it	cs
   144c8:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   144cc:	f7ff fef2 	bl	142b4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   144d0:	f04f 0b00 	mov.w	fp, #0
   144d4:	455d      	cmp	r5, fp
   144d6:	dc42      	bgt.n	1455e <log_output_process+0x22e>
			print_formatted(output, "%02x ", data[i]);
   144d8:	9b06      	ldr	r3, [sp, #24]
   144da:	4651      	mov	r1, sl
   144dc:	781a      	ldrb	r2, [r3, #0]
   144de:	4620      	mov	r0, r4
   144e0:	f7ff fed6 	bl	14290 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   144e4:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   144e8:	f01b 0f07 	tst.w	fp, #7
   144ec:	d103      	bne.n	144f6 <log_output_process+0x1c6>
			print_formatted(output, " ");
   144ee:	4649      	mov	r1, r9
   144f0:	4620      	mov	r0, r4
   144f2:	f7ff fecd 	bl	14290 <print_formatted>
		if (i < length) {
   144f6:	45d8      	cmp	r8, fp
   144f8:	d938      	bls.n	1456c <log_output_process+0x23c>
			print_formatted(output, "%02x ", data[i]);
   144fa:	9b06      	ldr	r3, [sp, #24]
   144fc:	4651      	mov	r1, sl
   144fe:	f813 200b 	ldrb.w	r2, [r3, fp]
   14502:	4620      	mov	r0, r4
   14504:	f7ff fec4 	bl	14290 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14508:	f10b 0b01 	add.w	fp, fp, #1
   1450c:	f1bb 0f10 	cmp.w	fp, #16
   14510:	d1ea      	bne.n	144e8 <log_output_process+0x1b8>
	print_formatted(output, "|");
   14512:	4936      	ldr	r1, [pc, #216]	; (145ec <log_output_process+0x2bc>)
   14514:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14516:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   1451a:	f7ff feb9 	bl	14290 <print_formatted>
		if (i < length) {
   1451e:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   14520:	9b06      	ldr	r3, [sp, #24]
   14522:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   14524:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   14528:	295f      	cmp	r1, #95	; 0x5f
   1452a:	bf28      	it	cs
   1452c:	222e      	movcs	r2, #46	; 0x2e
   1452e:	4930      	ldr	r1, [pc, #192]	; (145f0 <log_output_process+0x2c0>)
   14530:	4620      	mov	r0, r4
   14532:	f7ff fead 	bl	14290 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14536:	f10b 0b01 	add.w	fp, fp, #1
   1453a:	f1bb 0f10 	cmp.w	fp, #16
   1453e:	d01a      	beq.n	14576 <log_output_process+0x246>
		if (i > 0 && !(i % 8)) {
   14540:	f01b 0f07 	tst.w	fp, #7
   14544:	d103      	bne.n	1454e <log_output_process+0x21e>
			print_formatted(output, " ");
   14546:	4649      	mov	r1, r9
   14548:	4620      	mov	r0, r4
   1454a:	f7ff fea1 	bl	14290 <print_formatted>
		if (i < length) {
   1454e:	45d8      	cmp	r8, fp
   14550:	465a      	mov	r2, fp
   14552:	d8e5      	bhi.n	14520 <log_output_process+0x1f0>
			print_formatted(output, " ");
   14554:	4649      	mov	r1, r9
   14556:	4620      	mov	r0, r4
   14558:	f7ff fe9a 	bl	14290 <print_formatted>
   1455c:	e7eb      	b.n	14536 <log_output_process+0x206>
		print_formatted(output, " ");
   1455e:	4649      	mov	r1, r9
   14560:	4620      	mov	r0, r4
   14562:	f7ff fe95 	bl	14290 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14566:	f10b 0b01 	add.w	fp, fp, #1
   1456a:	e7b3      	b.n	144d4 <log_output_process+0x1a4>
			print_formatted(output, "   ");
   1456c:	4921      	ldr	r1, [pc, #132]	; (145f4 <log_output_process+0x2c4>)
   1456e:	4620      	mov	r0, r4
   14570:	f7ff fe8e 	bl	14290 <print_formatted>
   14574:	e7c8      	b.n	14508 <log_output_process+0x1d8>
		data += length;
   14576:	9b06      	ldr	r3, [sp, #24]
	} while (len);
   14578:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   1457c:	4443      	add	r3, r8
   1457e:	9306      	str	r3, [sp, #24]
	} while (len);
   14580:	d19d      	bne.n	144be <log_output_process+0x18e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14582:	9b05      	ldr	r3, [sp, #20]
   14584:	2b00      	cmp	r3, #0
   14586:	f47f af35 	bne.w	143f4 <log_output_process+0xc4>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1458a:	4620      	mov	r0, r4
}
   1458c:	b00b      	add	sp, #44	; 0x2c
   1458e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   14592:	f010 ba37 	b.w	24a04 <log_output_flush>
		print_formatted(output, "%s", log_color);
   14596:	4a07      	ldr	r2, [pc, #28]	; (145b4 <log_output_process+0x284>)
   14598:	4905      	ldr	r1, [pc, #20]	; (145b0 <log_output_process+0x280>)
   1459a:	4620      	mov	r0, r4
   1459c:	f7ff fe78 	bl	14290 <print_formatted>
}
   145a0:	e72b      	b.n	143fa <log_output_process+0xca>
   145a2:	bf00      	nop
   145a4:	00028691 	.word	0x00028691
   145a8:	00028695 	.word	0x00028695
   145ac:	00027514 	.word	0x00027514
   145b0:	000295a2 	.word	0x000295a2
   145b4:	0002868c 	.word	0x0002868c
   145b8:	00027528 	.word	0x00027528
   145bc:	000286ba 	.word	0x000286ba
   145c0:	000286c0 	.word	0x000286c0
   145c4:	000286c4 	.word	0x000286c4
   145c8:	20002d28 	.word	0x20002d28
   145cc:	20002d24 	.word	0x20002d24
   145d0:	0002869e 	.word	0x0002869e
   145d4:	00024a1f 	.word	0x00024a1f
   145d8:	000142d1 	.word	0x000142d1
   145dc:	000249f7 	.word	0x000249f7
   145e0:	000286c9 	.word	0x000286c9
   145e4:	00027f8a 	.word	0x00027f8a
   145e8:	0002862d 	.word	0x0002862d
   145ec:	000286dc 	.word	0x000286dc
   145f0:	000286de 	.word	0x000286de
   145f4:	000286d8 	.word	0x000286d8
   145f8:	000286da 	.word	0x000286da
   145fc:	000286d2 	.word	0x000286d2

00014600 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   14604:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   14606:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14608:	688e      	ldr	r6, [r1, #8]
   1460a:	b086      	sub	sp, #24
   1460c:	4605      	mov	r5, r0
   1460e:	460c      	mov	r4, r1
   14610:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   14612:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   14616:	b15b      	cbz	r3, 14630 <log_output_msg_process+0x30>
   14618:	4a13      	ldr	r2, [pc, #76]	; (14668 <log_output_msg_process+0x68>)
   1461a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1461c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14620:	2900      	cmp	r1, #0
   14622:	db1f      	blt.n	14664 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   14624:	7820      	ldrb	r0, [r4, #0]
   14626:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1462a:	f7ff fd09 	bl	14040 <log_source_name_get>
   1462e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   14630:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   14632:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   14634:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   14638:	9700      	str	r7, [sp, #0]
   1463a:	f3c2 224a 	ubfx	r2, r2, #9, #11
   1463e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   14640:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   14644:	f3c0 100b 	ubfx	r0, r0, #4, #12
   14648:	bf08      	it	eq
   1464a:	2100      	moveq	r1, #0
   1464c:	e9cd 0803 	strd	r0, r8, [sp, #12]
   14650:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14654:	2200      	movs	r2, #0
   14656:	4631      	mov	r1, r6
   14658:	4628      	mov	r0, r5
   1465a:	f7ff fe69 	bl	14330 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1465e:	b006      	add	sp, #24
   14660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14664:	2300      	movs	r3, #0
   14666:	e7e3      	b.n	14630 <log_output_msg_process+0x30>
   14668:	00027320 	.word	0x00027320

0001466c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   1466c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1466e:	f242 730f 	movw	r3, #9999	; 0x270f
   14672:	428b      	cmp	r3, r1
   14674:	bf28      	it	cs
   14676:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   14678:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1467a:	4a0f      	ldr	r2, [pc, #60]	; (146b8 <log_output_dropped_process+0x4c>)
{
   1467c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1467e:	2105      	movs	r1, #5
   14680:	4668      	mov	r0, sp
   14682:	f00f fe09 	bl	24298 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14686:	6863      	ldr	r3, [r4, #4]
   14688:	490c      	ldr	r1, [pc, #48]	; (146bc <log_output_dropped_process+0x50>)
   1468a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1468c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1468e:	220b      	movs	r2, #11
   14690:	4628      	mov	r0, r5
   14692:	f010 f9a3 	bl	249dc <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   14696:	6863      	ldr	r3, [r4, #4]
   14698:	4632      	mov	r2, r6
   1469a:	4669      	mov	r1, sp
   1469c:	4628      	mov	r0, r5
   1469e:	685b      	ldr	r3, [r3, #4]
   146a0:	f010 f99c 	bl	249dc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   146a4:	6863      	ldr	r3, [r4, #4]
   146a6:	4906      	ldr	r1, [pc, #24]	; (146c0 <log_output_dropped_process+0x54>)
   146a8:	685b      	ldr	r3, [r3, #4]
   146aa:	221b      	movs	r2, #27
   146ac:	4628      	mov	r0, r5
   146ae:	f010 f995 	bl	249dc <buffer_write>
		     output->control_block->ctx);
}
   146b2:	b002      	add	sp, #8
   146b4:	bd70      	pop	{r4, r5, r6, pc}
   146b6:	bf00      	nop
   146b8:	0002b0c6 	.word	0x0002b0c6
   146bc:	000286fd 	.word	0x000286fd
   146c0:	000286e1 	.word	0x000286e1

000146c4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   146c4:	4a07      	ldr	r2, [pc, #28]	; (146e4 <log_output_timestamp_freq_set+0x20>)
   146c6:	2100      	movs	r1, #0
   146c8:	2301      	movs	r3, #1
   146ca:	4290      	cmp	r0, r2
   146cc:	d806      	bhi.n	146dc <log_output_timestamp_freq_set+0x18>
   146ce:	4a06      	ldr	r2, [pc, #24]	; (146e8 <log_output_timestamp_freq_set+0x24>)
   146d0:	b901      	cbnz	r1, 146d4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   146d2:	2301      	movs	r3, #1
   146d4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   146d6:	4b05      	ldr	r3, [pc, #20]	; (146ec <log_output_timestamp_freq_set+0x28>)
   146d8:	6018      	str	r0, [r3, #0]
}
   146da:	4770      	bx	lr
		frequency /= 2U;
   146dc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   146de:	005b      	lsls	r3, r3, #1
   146e0:	2101      	movs	r1, #1
   146e2:	e7f2      	b.n	146ca <log_output_timestamp_freq_set+0x6>
   146e4:	000f4240 	.word	0x000f4240
   146e8:	20002d24 	.word	0x20002d24
   146ec:	20002d28 	.word	0x20002d28

000146f0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   146f0:	4b01      	ldr	r3, [pc, #4]	; (146f8 <log_backend_rtt_init+0x8>)
   146f2:	2201      	movs	r2, #1
   146f4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   146f6:	4770      	bx	lr
   146f8:	20003127 	.word	0x20003127

000146fc <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   146fc:	4b01      	ldr	r3, [pc, #4]	; (14704 <format_set+0x8>)
	return 0;
}
   146fe:	2000      	movs	r0, #0
	log_format_current = log_type;
   14700:	6019      	str	r1, [r3, #0]
}
   14702:	4770      	bx	lr
   14704:	20002d40 	.word	0x20002d40

00014708 <panic>:
	panic_mode = true;
   14708:	4b02      	ldr	r3, [pc, #8]	; (14714 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1470a:	4803      	ldr	r0, [pc, #12]	; (14718 <panic+0x10>)
   1470c:	2201      	movs	r2, #1
   1470e:	701a      	strb	r2, [r3, #0]
   14710:	f010 b978 	b.w	24a04 <log_output_flush>
   14714:	20003128 	.word	0x20003128
   14718:	00027558 	.word	0x00027558

0001471c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1471c:	4801      	ldr	r0, [pc, #4]	; (14724 <dropped+0x8>)
   1471e:	f7ff bfa5 	b.w	1466c <log_output_dropped_process>
   14722:	bf00      	nop
   14724:	00027558 	.word	0x00027558

00014728 <process>:
{
   14728:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1472a:	4b06      	ldr	r3, [pc, #24]	; (14744 <process+0x1c>)
   1472c:	6818      	ldr	r0, [r3, #0]
{
   1472e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14730:	f7ff fa1c 	bl	13b6c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   14734:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14736:	4603      	mov	r3, r0
}
   14738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   1473c:	4802      	ldr	r0, [pc, #8]	; (14748 <process+0x20>)
   1473e:	220f      	movs	r2, #15
   14740:	4718      	bx	r3
   14742:	bf00      	nop
   14744:	20002d40 	.word	0x20002d40
   14748:	00027558 	.word	0x00027558

0001474c <on_failed_write>:
	if (retry_cnt == 0) {
   1474c:	b910      	cbnz	r0, 14754 <on_failed_write+0x8>
		host_present = false;
   1474e:	4b07      	ldr	r3, [pc, #28]	; (1476c <on_failed_write+0x20>)
   14750:	7018      	strb	r0, [r3, #0]
}
   14752:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14754:	4b06      	ldr	r3, [pc, #24]	; (14770 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   14756:	781b      	ldrb	r3, [r3, #0]
   14758:	b11b      	cbz	r3, 14762 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   1475a:	f241 3088 	movw	r0, #5000	; 0x1388
   1475e:	f012 bb82 	b.w	26e66 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   14762:	20a4      	movs	r0, #164	; 0xa4
   14764:	2100      	movs	r1, #0
   14766:	f00e b8b9 	b.w	228dc <z_impl_k_sleep>
   1476a:	bf00      	nop
   1476c:	20003127 	.word	0x20003127
   14770:	20003128 	.word	0x20003128

00014774 <data_out_block_mode>:
{
   14774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14778:	f8df 9078 	ldr.w	r9, [pc, #120]	; 147f4 <data_out_block_mode+0x80>
   1477c:	4f1c      	ldr	r7, [pc, #112]	; (147f0 <data_out_block_mode+0x7c>)
{
   1477e:	4680      	mov	r8, r0
   14780:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   14782:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   14784:	f899 5000 	ldrb.w	r5, [r9]
   14788:	b995      	cbnz	r5, 147b0 <data_out_block_mode+0x3c>
			RTT_LOCK();
   1478a:	f00b fad3 	bl	1fd34 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1478e:	4628      	mov	r0, r5
   14790:	4632      	mov	r2, r6
   14792:	4641      	mov	r1, r8
   14794:	f00b fa7c 	bl	1fc90 <SEGGER_RTT_WriteSkipNoLock>
   14798:	4605      	mov	r5, r0
			RTT_UNLOCK();
   1479a:	f00b fad5 	bl	1fd48 <zephyr_rtt_mutex_unlock>
		if (ret) {
   1479e:	b1e5      	cbz	r5, 147da <data_out_block_mode+0x66>
	host_present = true;
   147a0:	2301      	movs	r3, #1
   147a2:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   147a4:	f899 3000 	ldrb.w	r3, [r9]
   147a8:	b973      	cbnz	r3, 147c8 <data_out_block_mode+0x54>
}
   147aa:	4630      	mov	r0, r6
   147ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   147b0:	4632      	mov	r2, r6
   147b2:	4641      	mov	r1, r8
   147b4:	2000      	movs	r0, #0
   147b6:	f00b fa6b 	bl	1fc90 <SEGGER_RTT_WriteSkipNoLock>
   147ba:	4605      	mov	r5, r0
   147bc:	e7ef      	b.n	1479e <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   147be:	4620      	mov	r0, r4
   147c0:	f7ff ffc4 	bl	1474c <on_failed_write>
   147c4:	1e65      	subs	r5, r4, #1
   147c6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   147c8:	2000      	movs	r0, #0
   147ca:	f00b faa9 	bl	1fd20 <SEGGER_RTT_HasDataUp>
   147ce:	2800      	cmp	r0, #0
   147d0:	d0eb      	beq.n	147aa <data_out_block_mode+0x36>
   147d2:	783b      	ldrb	r3, [r7, #0]
   147d4:	2b00      	cmp	r3, #0
   147d6:	d1f2      	bne.n	147be <data_out_block_mode+0x4a>
   147d8:	e7e7      	b.n	147aa <data_out_block_mode+0x36>
		} else if (host_present) {
   147da:	783b      	ldrb	r3, [r7, #0]
   147dc:	2b00      	cmp	r3, #0
   147de:	d0e4      	beq.n	147aa <data_out_block_mode+0x36>
			retry_cnt--;
   147e0:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   147e2:	4620      	mov	r0, r4
   147e4:	f7ff ffb2 	bl	1474c <on_failed_write>
	} while ((ret == 0) && host_present);
   147e8:	783b      	ldrb	r3, [r7, #0]
   147ea:	2b00      	cmp	r3, #0
   147ec:	d1ca      	bne.n	14784 <data_out_block_mode+0x10>
   147ee:	e7dc      	b.n	147aa <data_out_block_mode+0x36>
   147f0:	20003127 	.word	0x20003127
   147f4:	20003128 	.word	0x20003128

000147f8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   147f8:	4b01      	ldr	r3, [pc, #4]	; (14800 <format_set+0x8>)
	return 0;
}
   147fa:	2000      	movs	r0, #0
	log_format_current = log_type;
   147fc:	6019      	str	r1, [r3, #0]
}
   147fe:	4770      	bx	lr
   14800:	20002d58 	.word	0x20002d58

00014804 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   14804:	4b02      	ldr	r3, [pc, #8]	; (14810 <panic+0xc>)
	log_output_flush(output);
   14806:	4803      	ldr	r0, [pc, #12]	; (14814 <panic+0x10>)
   14808:	2201      	movs	r2, #1
   1480a:	701a      	strb	r2, [r3, #0]
   1480c:	f010 b8fa 	b.w	24a04 <log_output_flush>
   14810:	2000313a 	.word	0x2000313a
   14814:	00027584 	.word	0x00027584

00014818 <dropped>:
	log_output_dropped_process(output, cnt);
   14818:	4801      	ldr	r0, [pc, #4]	; (14820 <dropped+0x8>)
   1481a:	f7ff bf27 	b.w	1466c <log_output_dropped_process>
   1481e:	bf00      	nop
   14820:	00027584 	.word	0x00027584

00014824 <process>:
{
   14824:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14826:	4b06      	ldr	r3, [pc, #24]	; (14840 <process+0x1c>)
   14828:	6818      	ldr	r0, [r3, #0]
{
   1482a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1482c:	f7ff f99e 	bl	13b6c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   14830:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14832:	4603      	mov	r3, r0
}
   14834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   14838:	4802      	ldr	r0, [pc, #8]	; (14844 <process+0x20>)
   1483a:	220f      	movs	r2, #15
   1483c:	4718      	bx	r3
   1483e:	bf00      	nop
   14840:	20002d58 	.word	0x20002d58
   14844:	00027584 	.word	0x00027584

00014848 <char_out>:
{
   14848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
   1484a:	4f07      	ldr	r7, [pc, #28]	; (14868 <char_out+0x20>)
   1484c:	460d      	mov	r5, r1
   1484e:	4604      	mov	r4, r0
   14850:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   14852:	42b4      	cmp	r4, r6
   14854:	d101      	bne.n	1485a <char_out+0x12>
}
   14856:	4628      	mov	r0, r5
   14858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1485a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1485e:	68bb      	ldr	r3, [r7, #8]
   14860:	4801      	ldr	r0, [pc, #4]	; (14868 <char_out+0x20>)
   14862:	69db      	ldr	r3, [r3, #28]
   14864:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14866:	e7f4      	b.n	14852 <char_out+0xa>
   14868:	00027160 	.word	0x00027160

0001486c <log_backend_uart_init>:
{
   1486c:	b508      	push	{r3, lr}
   1486e:	4807      	ldr	r0, [pc, #28]	; (1488c <log_backend_uart_init+0x20>)
   14870:	f012 f9cd 	bl	26c0e <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   14874:	b948      	cbnz	r0, 1488a <log_backend_uart_init+0x1e>
   14876:	4906      	ldr	r1, [pc, #24]	; (14890 <log_backend_uart_init+0x24>)
   14878:	4806      	ldr	r0, [pc, #24]	; (14894 <log_backend_uart_init+0x28>)
   1487a:	4a07      	ldr	r2, [pc, #28]	; (14898 <log_backend_uart_init+0x2c>)
   1487c:	237f      	movs	r3, #127	; 0x7f
   1487e:	f00f ff35 	bl	246ec <assert_print>
   14882:	4805      	ldr	r0, [pc, #20]	; (14898 <log_backend_uart_init+0x2c>)
   14884:	217f      	movs	r1, #127	; 0x7f
   14886:	f00f ff2a 	bl	246de <assert_post_action>
}
   1488a:	bd08      	pop	{r3, pc}
   1488c:	00027160 	.word	0x00027160
   14890:	00028777 	.word	0x00028777
   14894:	00027f8a 	.word	0x00027f8a
   14898:	00028739 	.word	0x00028739

0001489c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   148a0:	4605      	mov	r5, r0
	__asm__ volatile(
   148a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   148a6:	f3ef 8611 	mrs	r6, BASEPRI
   148aa:	f383 8812 	msr	BASEPRI_MAX, r3
   148ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   148b2:	4820      	ldr	r0, [pc, #128]	; (14934 <pm_state_notify+0x98>)
   148b4:	f00b ff06 	bl	206c4 <z_spin_lock_valid>
   148b8:	b968      	cbnz	r0, 148d6 <pm_state_notify+0x3a>
   148ba:	4a1f      	ldr	r2, [pc, #124]	; (14938 <pm_state_notify+0x9c>)
   148bc:	491f      	ldr	r1, [pc, #124]	; (1493c <pm_state_notify+0xa0>)
   148be:	4820      	ldr	r0, [pc, #128]	; (14940 <pm_state_notify+0xa4>)
   148c0:	2394      	movs	r3, #148	; 0x94
   148c2:	f00f ff13 	bl	246ec <assert_print>
   148c6:	491b      	ldr	r1, [pc, #108]	; (14934 <pm_state_notify+0x98>)
   148c8:	481e      	ldr	r0, [pc, #120]	; (14944 <pm_state_notify+0xa8>)
   148ca:	f00f ff0f 	bl	246ec <assert_print>
   148ce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   148d0:	4819      	ldr	r0, [pc, #100]	; (14938 <pm_state_notify+0x9c>)
   148d2:	f00f ff04 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   148d6:	4817      	ldr	r0, [pc, #92]	; (14934 <pm_state_notify+0x98>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   148d8:	4f1b      	ldr	r7, [pc, #108]	; (14948 <pm_state_notify+0xac>)
   148da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 14958 <pm_state_notify+0xbc>
   148de:	f00b ff0f 	bl	20700 <z_spin_lock_set_owner>
	return list->head;
   148e2:	4b1a      	ldr	r3, [pc, #104]	; (1494c <pm_state_notify+0xb0>)
   148e4:	681c      	ldr	r4, [r3, #0]
   148e6:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   148ea:	b97c      	cbnz	r4, 1490c <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   148ec:	4811      	ldr	r0, [pc, #68]	; (14934 <pm_state_notify+0x98>)
   148ee:	f00b fef7 	bl	206e0 <z_spin_unlock_valid>
   148f2:	b9c8      	cbnz	r0, 14928 <pm_state_notify+0x8c>
   148f4:	4a10      	ldr	r2, [pc, #64]	; (14938 <pm_state_notify+0x9c>)
   148f6:	4916      	ldr	r1, [pc, #88]	; (14950 <pm_state_notify+0xb4>)
   148f8:	4811      	ldr	r0, [pc, #68]	; (14940 <pm_state_notify+0xa4>)
   148fa:	23c2      	movs	r3, #194	; 0xc2
   148fc:	f00f fef6 	bl	246ec <assert_print>
   14900:	490c      	ldr	r1, [pc, #48]	; (14934 <pm_state_notify+0x98>)
   14902:	4814      	ldr	r0, [pc, #80]	; (14954 <pm_state_notify+0xb8>)
   14904:	f00f fef2 	bl	246ec <assert_print>
   14908:	21c2      	movs	r1, #194	; 0xc2
   1490a:	e7e1      	b.n	148d0 <pm_state_notify+0x34>
			callback = notifier->state_exit;
   1490c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   14910:	2d00      	cmp	r5, #0
   14912:	bf18      	it	ne
   14914:	4613      	movne	r3, r2
		if (callback) {
   14916:	b12b      	cbz	r3, 14924 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14918:	f898 2010 	ldrb.w	r2, [r8, #16]
   1491c:	fb09 f202 	mul.w	r2, r9, r2
   14920:	5cb8      	ldrb	r0, [r7, r2]
   14922:	4798      	blx	r3
	return node->next;
   14924:	6824      	ldr	r4, [r4, #0]
   14926:	e7e0      	b.n	148ea <pm_state_notify+0x4e>
	__asm__ volatile(
   14928:	f386 8811 	msr	BASEPRI, r6
   1492c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   14930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14934:	20002d5c 	.word	0x20002d5c
   14938:	0002837e 	.word	0x0002837e
   1493c:	000283d7 	.word	0x000283d7
   14940:	00027f8a 	.word	0x00027f8a
   14944:	000283ec 	.word	0x000283ec
   14948:	20002d70 	.word	0x20002d70
   1494c:	20002d7c 	.word	0x20002d7c
   14950:	000283ab 	.word	0x000283ab
   14954:	000283c2 	.word	0x000283c2
   14958:	200030a8 	.word	0x200030a8

0001495c <pm_system_resume>:

void pm_system_resume(void)
{
   1495c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1495e:	4b19      	ldr	r3, [pc, #100]	; (149c4 <pm_system_resume+0x68>)
   14960:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14962:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14966:	f004 031f 	and.w	r3, r4, #31
   1496a:	2201      	movs	r2, #1
   1496c:	409a      	lsls	r2, r3
   1496e:	4b16      	ldr	r3, [pc, #88]	; (149c8 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14970:	0961      	lsrs	r1, r4, #5
   14972:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14976:	43d0      	mvns	r0, r2
   14978:	e853 1f00 	ldrex	r1, [r3]
   1497c:	ea01 0500 	and.w	r5, r1, r0
   14980:	e843 5600 	strex	r6, r5, [r3]
   14984:	2e00      	cmp	r6, #0
   14986:	d1f7      	bne.n	14978 <pm_system_resume+0x1c>
   14988:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1498c:	420a      	tst	r2, r1
   1498e:	d013      	beq.n	149b8 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   14990:	4b0e      	ldr	r3, [pc, #56]	; (149cc <pm_system_resume+0x70>)
   14992:	4d0f      	ldr	r5, [pc, #60]	; (149d0 <pm_system_resume+0x74>)
   14994:	b18b      	cbz	r3, 149ba <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14996:	230c      	movs	r3, #12
   14998:	4363      	muls	r3, r4
   1499a:	18ea      	adds	r2, r5, r3
   1499c:	5ce8      	ldrb	r0, [r5, r3]
   1499e:	7851      	ldrb	r1, [r2, #1]
   149a0:	f010 fae1 	bl	24f66 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   149a4:	2000      	movs	r0, #0
   149a6:	f7ff ff79 	bl	1489c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   149aa:	230c      	movs	r3, #12
   149ac:	435c      	muls	r4, r3
   149ae:	192a      	adds	r2, r5, r4
   149b0:	2300      	movs	r3, #0
   149b2:	512b      	str	r3, [r5, r4]
   149b4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   149b8:	bd70      	pop	{r4, r5, r6, pc}
   149ba:	f383 8811 	msr	BASEPRI, r3
   149be:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   149c2:	e7ef      	b.n	149a4 <pm_system_resume+0x48>
   149c4:	200030a8 	.word	0x200030a8
   149c8:	20002d84 	.word	0x20002d84
   149cc:	00024f67 	.word	0x00024f67
   149d0:	20002d70 	.word	0x20002d70

000149d4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   149d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   149d8:	4b47      	ldr	r3, [pc, #284]	; (14af8 <pm_system_suspend+0x124>)
{
   149da:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   149dc:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   149de:	f04f 0340 	mov.w	r3, #64	; 0x40
   149e2:	f3ef 8811 	mrs	r8, BASEPRI
   149e6:	f383 8812 	msr	BASEPRI_MAX, r3
   149ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   149ee:	4843      	ldr	r0, [pc, #268]	; (14afc <pm_system_suspend+0x128>)
   149f0:	f00b fe68 	bl	206c4 <z_spin_lock_valid>
   149f4:	b968      	cbnz	r0, 14a12 <pm_system_suspend+0x3e>
   149f6:	4a42      	ldr	r2, [pc, #264]	; (14b00 <pm_system_suspend+0x12c>)
   149f8:	4942      	ldr	r1, [pc, #264]	; (14b04 <pm_system_suspend+0x130>)
   149fa:	4843      	ldr	r0, [pc, #268]	; (14b08 <pm_system_suspend+0x134>)
   149fc:	2394      	movs	r3, #148	; 0x94
   149fe:	f00f fe75 	bl	246ec <assert_print>
   14a02:	493e      	ldr	r1, [pc, #248]	; (14afc <pm_system_suspend+0x128>)
   14a04:	4841      	ldr	r0, [pc, #260]	; (14b0c <pm_system_suspend+0x138>)
   14a06:	f00f fe71 	bl	246ec <assert_print>
   14a0a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14a0c:	483c      	ldr	r0, [pc, #240]	; (14b00 <pm_system_suspend+0x12c>)
   14a0e:	f00f fe66 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   14a12:	483a      	ldr	r0, [pc, #232]	; (14afc <pm_system_suspend+0x128>)
   14a14:	4e3e      	ldr	r6, [pc, #248]	; (14b10 <pm_system_suspend+0x13c>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14a16:	240c      	movs	r4, #12
   14a18:	f00b fe72 	bl	20700 <z_spin_lock_set_owner>
   14a1c:	436c      	muls	r4, r5
   14a1e:	4b3d      	ldr	r3, [pc, #244]	; (14b14 <pm_system_suspend+0x140>)
   14a20:	5d19      	ldrb	r1, [r3, r4]
   14a22:	191a      	adds	r2, r3, r4
   14a24:	b1b9      	cbz	r1, 14a56 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14a26:	ca07      	ldmia	r2, {r0, r1, r2}
   14a28:	eb06 0c04 	add.w	ip, r6, r4
   14a2c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14a30:	2200      	movs	r2, #0
   14a32:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14a34:	4831      	ldr	r0, [pc, #196]	; (14afc <pm_system_suspend+0x128>)
   14a36:	f00b fe53 	bl	206e0 <z_spin_unlock_valid>
   14a3a:	4604      	mov	r4, r0
   14a3c:	b9b0      	cbnz	r0, 14a6c <pm_system_suspend+0x98>
   14a3e:	4a30      	ldr	r2, [pc, #192]	; (14b00 <pm_system_suspend+0x12c>)
   14a40:	4935      	ldr	r1, [pc, #212]	; (14b18 <pm_system_suspend+0x144>)
   14a42:	4831      	ldr	r0, [pc, #196]	; (14b08 <pm_system_suspend+0x134>)
   14a44:	23c2      	movs	r3, #194	; 0xc2
   14a46:	f00f fe51 	bl	246ec <assert_print>
   14a4a:	492c      	ldr	r1, [pc, #176]	; (14afc <pm_system_suspend+0x128>)
   14a4c:	4833      	ldr	r0, [pc, #204]	; (14b1c <pm_system_suspend+0x148>)
   14a4e:	f00f fe4d 	bl	246ec <assert_print>
   14a52:	21c2      	movs	r1, #194	; 0xc2
   14a54:	e7da      	b.n	14a0c <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   14a56:	4639      	mov	r1, r7
   14a58:	4628      	mov	r0, r5
   14a5a:	f000 f869 	bl	14b30 <pm_policy_next_state>
		if (info != NULL) {
   14a5e:	2800      	cmp	r0, #0
   14a60:	d0e8      	beq.n	14a34 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   14a62:	c807      	ldmia	r0, {r0, r1, r2}
   14a64:	4434      	add	r4, r6
   14a66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   14a6a:	e7e3      	b.n	14a34 <pm_system_suspend+0x60>
	__asm__ volatile(
   14a6c:	f388 8811 	msr	BASEPRI, r8
   14a70:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14a74:	230c      	movs	r3, #12
   14a76:	436b      	muls	r3, r5
   14a78:	18f2      	adds	r2, r6, r3
   14a7a:	5cf3      	ldrb	r3, [r6, r3]
   14a7c:	2b00      	cmp	r3, #0
   14a7e:	d039      	beq.n	14af4 <pm_system_suspend+0x120>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14a80:	1c7b      	adds	r3, r7, #1
   14a82:	d00f      	beq.n	14aa4 <pm_system_suspend+0xd0>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14a84:	f8d2 e008 	ldr.w	lr, [r2, #8]
   14a88:	4825      	ldr	r0, [pc, #148]	; (14b20 <pm_system_suspend+0x14c>)
   14a8a:	4a26      	ldr	r2, [pc, #152]	; (14b24 <pm_system_suspend+0x150>)
   14a8c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   14a90:	2100      	movs	r1, #0
   14a92:	2300      	movs	r3, #0
   14a94:	fbee 010c 	umlal	r0, r1, lr, ip
   14a98:	f7eb fef0 	bl	87c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   14a9c:	2101      	movs	r1, #1
   14a9e:	1a38      	subs	r0, r7, r0
   14aa0:	f009 f80c 	bl	1dabc <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14aa4:	f00d f8e0 	bl	21c68 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14aa8:	2001      	movs	r0, #1
   14aaa:	f7ff fef7 	bl	1489c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14aae:	f3bf 8f5b 	dmb	ish
   14ab2:	4b1d      	ldr	r3, [pc, #116]	; (14b28 <pm_system_suspend+0x154>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14ab4:	096a      	lsrs	r2, r5, #5
   14ab6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   14aba:	f005 011f 	and.w	r1, r5, #31
   14abe:	2201      	movs	r2, #1
   14ac0:	408a      	lsls	r2, r1
   14ac2:	e853 0f00 	ldrex	r0, [r3]
   14ac6:	4310      	orrs	r0, r2
   14ac8:	e843 0100 	strex	r1, r0, [r3]
   14acc:	2900      	cmp	r1, #0
   14ace:	d1f8      	bne.n	14ac2 <pm_system_suspend+0xee>
   14ad0:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   14ad4:	4b15      	ldr	r3, [pc, #84]	; (14b2c <pm_system_suspend+0x158>)
   14ad6:	b133      	cbz	r3, 14ae6 <pm_system_suspend+0x112>
		pm_state_set(info->state, info->substate_id);
   14ad8:	230c      	movs	r3, #12
   14ada:	436b      	muls	r3, r5
   14adc:	18f2      	adds	r2, r6, r3
   14ade:	5cf0      	ldrb	r0, [r6, r3]
   14ae0:	7851      	ldrb	r1, [r2, #1]
   14ae2:	f010 fa34 	bl	24f4e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14ae6:	f7ff ff39 	bl	1495c <pm_system_resume>
	k_sched_unlock();
   14aea:	f00d f929 	bl	21d40 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   14aee:	4620      	mov	r0, r4
   14af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   14af4:	461c      	mov	r4, r3
   14af6:	e7fa      	b.n	14aee <pm_system_suspend+0x11a>
   14af8:	200030a8 	.word	0x200030a8
   14afc:	20002d60 	.word	0x20002d60
   14b00:	0002837e 	.word	0x0002837e
   14b04:	000283d7 	.word	0x000283d7
   14b08:	00027f8a 	.word	0x00027f8a
   14b0c:	000283ec 	.word	0x000283ec
   14b10:	20002d70 	.word	0x20002d70
   14b14:	20002d64 	.word	0x20002d64
   14b18:	000283ab 	.word	0x000283ab
   14b1c:	000283c2 	.word	0x000283c2
   14b20:	000f423f 	.word	0x000f423f
   14b24:	000f4240 	.word	0x000f4240
   14b28:	20002d84 	.word	0x20002d84
   14b2c:	00024f4f 	.word	0x00024f4f

00014b30 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b34:	b085      	sub	sp, #20
   14b36:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14b38:	a903      	add	r1, sp, #12
   14b3a:	f000 f843 	bl	14bc4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14b3e:	4b1e      	ldr	r3, [pc, #120]	; (14bb8 <pm_policy_next_state+0x88>)
   14b40:	9d03      	ldr	r5, [sp, #12]
   14b42:	f8d3 a000 	ldr.w	sl, [r3]
   14b46:	f8df 8078 	ldr.w	r8, [pc, #120]	; 14bc0 <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14b4a:	1e43      	subs	r3, r0, #1
   14b4c:	b21b      	sxth	r3, r3
   14b4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14b52:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14b54:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14b58:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14b5c:	f04f 0b00 	mov.w	fp, #0
   14b60:	b924      	cbnz	r4, 14b6c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   14b62:	46a1      	mov	r9, r4
}
   14b64:	4648      	mov	r0, r9
   14b66:	b005      	add	sp, #20
   14b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b6c:	6868      	ldr	r0, [r5, #4]
   14b6e:	4a13      	ldr	r2, [pc, #76]	; (14bbc <pm_policy_next_state+0x8c>)
   14b70:	46c4      	mov	ip, r8
   14b72:	4659      	mov	r1, fp
   14b74:	fbe0 c107 	umlal	ip, r1, r0, r7
   14b78:	2300      	movs	r3, #0
   14b7a:	4660      	mov	r0, ip
   14b7c:	f7eb fe7e 	bl	87c <__aeabi_uldivmod>
   14b80:	9001      	str	r0, [sp, #4]
   14b82:	68a8      	ldr	r0, [r5, #8]
   14b84:	4a0d      	ldr	r2, [pc, #52]	; (14bbc <pm_policy_next_state+0x8c>)
   14b86:	46c4      	mov	ip, r8
   14b88:	4659      	mov	r1, fp
   14b8a:	fbe0 c107 	umlal	ip, r1, r0, r7
   14b8e:	2300      	movs	r3, #0
   14b90:	4660      	mov	r0, ip
   14b92:	f7eb fe73 	bl	87c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14b96:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   14b9a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14b9c:	d001      	beq.n	14ba2 <pm_policy_next_state+0x72>
   14b9e:	4582      	cmp	sl, r0
   14ba0:	d905      	bls.n	14bae <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   14ba2:	1c73      	adds	r3, r6, #1
   14ba4:	d0de      	beq.n	14b64 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   14ba6:	9b01      	ldr	r3, [sp, #4]
   14ba8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   14baa:	42b0      	cmp	r0, r6
   14bac:	d9da      	bls.n	14b64 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14bae:	3c01      	subs	r4, #1
   14bb0:	b2a4      	uxth	r4, r4
   14bb2:	3d0c      	subs	r5, #12
   14bb4:	e7d4      	b.n	14b60 <pm_policy_next_state+0x30>
   14bb6:	bf00      	nop
   14bb8:	200005d4 	.word	0x200005d4
   14bbc:	000f4240 	.word	0x000f4240
   14bc0:	000f423f 	.word	0x000f423f

00014bc4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14bc4:	b908      	cbnz	r0, 14bca <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14bc6:	4b02      	ldr	r3, [pc, #8]	; (14bd0 <pm_state_cpu_get_all+0xc>)
   14bc8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14bca:	2000      	movs	r0, #0
   14bcc:	4770      	bx	lr
   14bce:	bf00      	nop
   14bd0:	00027594 	.word	0x00027594

00014bd4 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   14bd4:	4b03      	ldr	r3, [pc, #12]	; (14be4 <nus_ccc_cfg_changed+0x10>)
   14bd6:	689b      	ldr	r3, [r3, #8]
   14bd8:	b11b      	cbz	r3, 14be2 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   14bda:	1e48      	subs	r0, r1, #1
   14bdc:	bf18      	it	ne
   14bde:	2001      	movne	r0, #1
   14be0:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   14be2:	4770      	bx	lr
   14be4:	20002d88 	.word	0x20002d88

00014be8 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   14be8:	b510      	push	{r4, lr}
   14bea:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   14bec:	4b03      	ldr	r3, [pc, #12]	; (14bfc <on_receive+0x14>)
   14bee:	681b      	ldr	r3, [r3, #0]
{
   14bf0:	4611      	mov	r1, r2
	if (nus_cb.received) {
   14bf2:	b10b      	cbz	r3, 14bf8 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   14bf4:	4622      	mov	r2, r4
   14bf6:	4798      	blx	r3
}
	return len;
}
   14bf8:	4620      	mov	r0, r4
   14bfa:	bd10      	pop	{r4, pc}
   14bfc:	20002d88 	.word	0x20002d88

00014c00 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   14c00:	b130      	cbz	r0, 14c10 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   14c02:	4b04      	ldr	r3, [pc, #16]	; (14c14 <bt_nus_init+0x14>)
   14c04:	6802      	ldr	r2, [r0, #0]
   14c06:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   14c08:	6842      	ldr	r2, [r0, #4]
   14c0a:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   14c0c:	6882      	ldr	r2, [r0, #8]
   14c0e:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   14c10:	2000      	movs	r0, #0
   14c12:	4770      	bx	lr
   14c14:	20002d88 	.word	0x20002d88

00014c18 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14c18:	4904      	ldr	r1, [pc, #16]	; (14c2c <sub_bytes+0x14>)
   14c1a:	1e43      	subs	r3, r0, #1
   14c1c:	300f      	adds	r0, #15
   14c1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14c22:	5c8a      	ldrb	r2, [r1, r2]
   14c24:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14c26:	4283      	cmp	r3, r0
   14c28:	d1f9      	bne.n	14c1e <sub_bytes+0x6>
	}
}
   14c2a:	4770      	bx	lr
   14c2c:	000287b5 	.word	0x000287b5

00014c30 <tc_aes128_set_encrypt_key>:
{
   14c30:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   14c32:	4e26      	ldr	r6, [pc, #152]	; (14ccc <tc_aes128_set_encrypt_key+0x9c>)
{
   14c34:	4607      	mov	r7, r0
   14c36:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14c38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14c3a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14c3c:	ad01      	add	r5, sp, #4
   14c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14c40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14c44:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14c48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14c4c:	4638      	mov	r0, r7
   14c4e:	2f00      	cmp	r7, #0
   14c50:	d038      	beq.n	14cc4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14c52:	2c00      	cmp	r4, #0
   14c54:	d038      	beq.n	14cc8 <tc_aes128_set_encrypt_key+0x98>
   14c56:	1f38      	subs	r0, r7, #4
   14c58:	4621      	mov	r1, r4
   14c5a:	4602      	mov	r2, r0
   14c5c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c5e:	784b      	ldrb	r3, [r1, #1]
   14c60:	780d      	ldrb	r5, [r1, #0]
   14c62:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14c64:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14c68:	78cd      	ldrb	r5, [r1, #3]
   14c6a:	432b      	orrs	r3, r5
   14c6c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14c6e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14c70:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14c74:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c76:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14c7a:	d1f0      	bne.n	14c5e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14c7c:	4c14      	ldr	r4, [pc, #80]	; (14cd0 <tc_aes128_set_encrypt_key+0xa0>)
   14c7e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14c80:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14c82:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14c84:	d116      	bne.n	14cb4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14c86:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14c8a:	5ca5      	ldrb	r5, [r4, r2]
   14c8c:	0e1a      	lsrs	r2, r3, #24
   14c8e:	5ca2      	ldrb	r2, [r4, r2]
   14c90:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14c94:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14c98:	b2db      	uxtb	r3, r3
   14c9a:	5d65      	ldrb	r5, [r4, r5]
   14c9c:	5ce3      	ldrb	r3, [r4, r3]
   14c9e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   14ca2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14ca6:	f021 0303 	bic.w	r3, r1, #3
   14caa:	3330      	adds	r3, #48	; 0x30
   14cac:	446b      	add	r3, sp
   14cae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   14cb2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14cb4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14cb8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14cba:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14cbc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14cbe:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14cc0:	d1de      	bne.n	14c80 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14cc2:	2001      	movs	r0, #1
}
   14cc4:	b00d      	add	sp, #52	; 0x34
   14cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14cc8:	4620      	mov	r0, r4
   14cca:	e7fb      	b.n	14cc4 <tc_aes128_set_encrypt_key+0x94>
   14ccc:	00027454 	.word	0x00027454
   14cd0:	000287b5 	.word	0x000287b5

00014cd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14cd4:	4901      	ldr	r1, [pc, #4]	; (14cdc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14cd6:	2210      	movs	r2, #16
	str	r2, [r1]
   14cd8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14cda:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14cdc:	e000ed10 	.word	0xe000ed10

00014ce0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14ce0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14ce2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14ce4:	f380 8811 	msr	BASEPRI, r0
	isb
   14ce8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14cec:	f3bf 8f4f 	dsb	sy
   14cf0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14cf2:	b662      	cpsie	i
	isb
   14cf4:	f3bf 8f6f 	isb	sy

	bx	lr
   14cf8:	4770      	bx	lr
   14cfa:	bf00      	nop

00014cfc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14cfc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14cfe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14d00:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14d04:	f3bf 8f4f 	dsb	sy
   14d08:	bf20      	wfe

	msr	BASEPRI, r0
   14d0a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14d0e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14d10:	4770      	bx	lr
   14d12:	bf00      	nop

00014d14 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d18:	4680      	mov	r8, r0
   14d1a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14d1c:	460c      	mov	r4, r1
   14d1e:	2900      	cmp	r1, #0
   14d20:	f000 8093 	beq.w	14e4a <z_arm_fatal_error+0x136>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14d24:	46e9      	mov	r9, sp
   14d26:	b08a      	sub	sp, #40	; 0x28
   14d28:	e9d1 1200 	ldrd	r1, r2, [r1]
   14d2c:	68a3      	ldr	r3, [r4, #8]
   14d2e:	466d      	mov	r5, sp
   14d30:	4849      	ldr	r0, [pc, #292]	; (14e58 <z_arm_fatal_error+0x144>)
   14d32:	462e      	mov	r6, r5
   14d34:	f04f 0a05 	mov.w	sl, #5
   14d38:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14d3c:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14d40:	f846 af10 	str.w	sl, [r6, #16]!
   14d44:	4845      	ldr	r0, [pc, #276]	; (14e5c <z_arm_fatal_error+0x148>)
   14d46:	4632      	mov	r2, r6
   14d48:	2300      	movs	r3, #0
   14d4a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14d4e:	f7ff f9ab 	bl	140a8 <z_impl_z_log_msg_static_create>
   14d52:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14d54:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14d58:	6963      	ldr	r3, [r4, #20]
   14d5a:	46ad      	mov	sp, r5
   14d5c:	4840      	ldr	r0, [pc, #256]	; (14e60 <z_arm_fatal_error+0x14c>)
   14d5e:	f8c5 a010 	str.w	sl, [r5, #16]
   14d62:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14d66:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14d6a:	483c      	ldr	r0, [pc, #240]	; (14e5c <z_arm_fatal_error+0x148>)
   14d6c:	4632      	mov	r2, r6
   14d6e:	2300      	movs	r3, #0
   14d70:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14d74:	f7ff f998 	bl	140a8 <z_impl_z_log_msg_static_create>
   14d78:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14d7a:	b088      	sub	sp, #32
   14d7c:	69e3      	ldr	r3, [r4, #28]
   14d7e:	466a      	mov	r2, sp
   14d80:	4938      	ldr	r1, [pc, #224]	; (14e64 <z_arm_fatal_error+0x150>)
   14d82:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14d86:	2303      	movs	r3, #3
   14d88:	f842 3f10 	str.w	r3, [r2, #16]!
   14d8c:	4833      	ldr	r0, [pc, #204]	; (14e5c <z_arm_fatal_error+0x148>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14d8e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 14e70 <z_arm_fatal_error+0x15c>
   14d92:	2300      	movs	r3, #0
   14d94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d98:	f7ff f986 	bl	140a8 <z_impl_z_log_msg_static_create>
   14d9c:	4626      	mov	r6, r4
   14d9e:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14da0:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14da2:	f04f 0a0a 	mov.w	sl, #10
   14da6:	edd6 7a08 	vldr	s15, [r6, #32]
   14daa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   14dae:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   14db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14db6:	46e9      	mov	r9, sp
   14db8:	ee17 1a90 	vmov	r1, s15
   14dbc:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   14dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14dc4:	b08e      	sub	sp, #56	; 0x38
   14dc6:	ee17 3a90 	vmov	r3, s15
   14dca:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   14dce:	466a      	mov	r2, sp
   14dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14dd4:	1c68      	adds	r0, r5, #1
   14dd6:	e9c2 0108 	strd	r0, r1, [r2, #32]
   14dda:	1ca9      	adds	r1, r5, #2
   14ddc:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
   14de0:	1ceb      	adds	r3, r5, #3
   14de2:	e9c2 b505 	strd	fp, r5, [r2, #20]
   14de6:	ed82 7a07 	vstr	s14, [r2, #28]
   14dea:	6313      	str	r3, [r2, #48]	; 0x30
   14dec:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
   14df0:	f842 af10 	str.w	sl, [r2, #16]!
   14df4:	4819      	ldr	r0, [pc, #100]	; (14e5c <z_arm_fatal_error+0x148>)
   14df6:	2300      	movs	r3, #0
   14df8:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14dfc:	3504      	adds	r5, #4
   14dfe:	f7ff f953 	bl	140a8 <z_impl_z_log_msg_static_create>
   14e02:	2d10      	cmp	r5, #16
   14e04:	46cd      	mov	sp, r9
   14e06:	f106 0610 	add.w	r6, r6, #16
   14e0a:	d1cc      	bne.n	14da6 <z_arm_fatal_error+0x92>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   14e0c:	b088      	sub	sp, #32
   14e0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14e10:	466a      	mov	r2, sp
   14e12:	4915      	ldr	r1, [pc, #84]	; (14e68 <z_arm_fatal_error+0x154>)
   14e14:	2503      	movs	r5, #3
   14e16:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14e1a:	f842 5f10 	str.w	r5, [r2, #16]!
   14e1e:	480f      	ldr	r0, [pc, #60]	; (14e5c <z_arm_fatal_error+0x148>)
   14e20:	2300      	movs	r3, #0
   14e22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e26:	f7ff f93f 	bl	140a8 <z_impl_z_log_msg_static_create>
   14e2a:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14e2c:	b088      	sub	sp, #32
   14e2e:	69a3      	ldr	r3, [r4, #24]
   14e30:	466a      	mov	r2, sp
   14e32:	490e      	ldr	r1, [pc, #56]	; (14e6c <z_arm_fatal_error+0x158>)
   14e34:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14e38:	f842 5f10 	str.w	r5, [r2, #16]!
   14e3c:	4807      	ldr	r0, [pc, #28]	; (14e5c <z_arm_fatal_error+0x148>)
   14e3e:	2300      	movs	r3, #0
   14e40:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e44:	f7ff f930 	bl	140a8 <z_impl_z_log_msg_static_create>
   14e48:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14e4a:	4621      	mov	r1, r4
   14e4c:	4640      	mov	r0, r8
   14e4e:	f00a ff81 	bl	1fd54 <z_fatal_error>
}
   14e52:	46bd      	mov	sp, r7
   14e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e58:	000288b5 	.word	0x000288b5
   14e5c:	00027400 	.word	0x00027400
   14e60:	000288e4 	.word	0x000288e4
   14e64:	00028913 	.word	0x00028913
   14e68:	00028965 	.word	0x00028965
   14e6c:	00028974 	.word	0x00028974
   14e70:	00028922 	.word	0x00028922

00014e74 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14e74:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14e76:	2800      	cmp	r0, #0
   14e78:	db07      	blt.n	14e8a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e7a:	4a04      	ldr	r2, [pc, #16]	; (14e8c <arch_irq_enable+0x18>)
   14e7c:	0941      	lsrs	r1, r0, #5
   14e7e:	2301      	movs	r3, #1
   14e80:	f000 001f 	and.w	r0, r0, #31
   14e84:	4083      	lsls	r3, r0
   14e86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14e8a:	4770      	bx	lr
   14e8c:	e000e100 	.word	0xe000e100

00014e90 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14e90:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14e92:	2800      	cmp	r0, #0
   14e94:	db0c      	blt.n	14eb0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14e96:	0943      	lsrs	r3, r0, #5
   14e98:	4906      	ldr	r1, [pc, #24]	; (14eb4 <arch_irq_disable+0x24>)
   14e9a:	f000 001f 	and.w	r0, r0, #31
   14e9e:	3320      	adds	r3, #32
   14ea0:	2201      	movs	r2, #1
   14ea2:	4082      	lsls	r2, r0
   14ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14ea8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14eac:	f3bf 8f6f 	isb	sy
}
   14eb0:	4770      	bx	lr
   14eb2:	bf00      	nop
   14eb4:	e000e100 	.word	0xe000e100

00014eb8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14eb8:	4b05      	ldr	r3, [pc, #20]	; (14ed0 <arch_irq_is_enabled+0x18>)
   14eba:	0942      	lsrs	r2, r0, #5
   14ebc:	f000 001f 	and.w	r0, r0, #31
   14ec0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14ec4:	2301      	movs	r3, #1
   14ec6:	fa03 f000 	lsl.w	r0, r3, r0
}
   14eca:	4010      	ands	r0, r2
   14ecc:	4770      	bx	lr
   14ece:	bf00      	nop
   14ed0:	e000e100 	.word	0xe000e100

00014ed4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14ed4:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14ed6:	07d3      	lsls	r3, r2, #31
{
   14ed8:	4604      	mov	r4, r0
   14eda:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14edc:	d412      	bmi.n	14f04 <z_arm_irq_priority_set+0x30>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14ede:	1c8b      	adds	r3, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14ee0:	2b07      	cmp	r3, #7
   14ee2:	d910      	bls.n	14f06 <z_arm_irq_priority_set+0x32>
   14ee4:	4a11      	ldr	r2, [pc, #68]	; (14f2c <z_arm_irq_priority_set+0x58>)
   14ee6:	4912      	ldr	r1, [pc, #72]	; (14f30 <z_arm_irq_priority_set+0x5c>)
   14ee8:	4812      	ldr	r0, [pc, #72]	; (14f34 <z_arm_irq_priority_set+0x60>)
   14eea:	235b      	movs	r3, #91	; 0x5b
   14eec:	f00f fbfe 	bl	246ec <assert_print>
   14ef0:	4811      	ldr	r0, [pc, #68]	; (14f38 <z_arm_irq_priority_set+0x64>)
   14ef2:	4629      	mov	r1, r5
   14ef4:	2306      	movs	r3, #6
   14ef6:	4622      	mov	r2, r4
   14ef8:	f00f fbf8 	bl	246ec <assert_print>
   14efc:	480b      	ldr	r0, [pc, #44]	; (14f2c <z_arm_irq_priority_set+0x58>)
   14efe:	215b      	movs	r1, #91	; 0x5b
   14f00:	f00f fbed 	bl	246de <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14f04:	2300      	movs	r3, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14f06:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14f08:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f0a:	bfac      	ite	ge
   14f0c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f10:	4a0a      	ldrlt	r2, [pc, #40]	; (14f3c <z_arm_irq_priority_set+0x68>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f12:	ea4f 1343 	mov.w	r3, r3, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f16:	bfb8      	it	lt
   14f18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f1c:	b2db      	uxtb	r3, r3
   14f1e:	bfaa      	itet	ge
   14f20:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f24:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f26:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   14f2a:	bd38      	pop	{r3, r4, r5, pc}
   14f2c:	000289a2 	.word	0x000289a2
   14f30:	000289d8 	.word	0x000289d8
   14f34:	00027f8a 	.word	0x00027f8a
   14f38:	000289f3 	.word	0x000289f3
   14f3c:	e000ed14 	.word	0xe000ed14

00014f40 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14f40:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14f42:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14f44:	4b04      	ldr	r3, [pc, #16]	; (14f58 <_arch_isr_direct_pm+0x18>)
   14f46:	699a      	ldr	r2, [r3, #24]
   14f48:	b11a      	cbz	r2, 14f52 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14f4a:	2200      	movs	r2, #0
   14f4c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14f4e:	f011 fe99 	bl	26c84 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14f52:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14f54:	bd08      	pop	{r3, pc}
   14f56:	bf00      	nop
   14f58:	200030a8 	.word	0x200030a8

00014f5c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14f5c:	bf30      	wfi
    b z_SysNmiOnReset
   14f5e:	f7ff bffd 	b.w	14f5c <z_SysNmiOnReset>
   14f62:	bf00      	nop

00014f64 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14f64:	4a14      	ldr	r2, [pc, #80]	; (14fb8 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14f66:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14f68:	4b14      	ldr	r3, [pc, #80]	; (14fbc <z_arm_prep_c+0x58>)
   14f6a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14f6e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f74:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14f78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14f7c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   14f84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14f88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   14f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   14f90:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   14f94:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   14f98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14f9c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   14fa0:	2300      	movs	r3, #0
   14fa2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14fa6:	f00a ffa7 	bl	1fef8 <z_bss_zero>
	z_data_copy();
   14faa:	f00d fe09 	bl	22bc0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14fae:	f000 fca3 	bl	158f8 <z_arm_interrupt_init>
	z_cstart();
   14fb2:	f00a ffe5 	bl	1ff80 <z_cstart>
   14fb6:	bf00      	nop
   14fb8:	00000000 	.word	0x00000000
   14fbc:	e000ed00 	.word	0xe000ed00

00014fc0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14fc0:	4a09      	ldr	r2, [pc, #36]	; (14fe8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14fc2:	490a      	ldr	r1, [pc, #40]	; (14fec <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14fc4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14fc6:	6809      	ldr	r1, [r1, #0]
   14fc8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14fca:	4909      	ldr	r1, [pc, #36]	; (14ff0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14fcc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14fce:	684b      	ldr	r3, [r1, #4]
   14fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14fd4:	604b      	str	r3, [r1, #4]
   14fd6:	2300      	movs	r3, #0
   14fd8:	f383 8811 	msr	BASEPRI, r3
   14fdc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14fe0:	6893      	ldr	r3, [r2, #8]
}
   14fe2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14fe4:	4770      	bx	lr
   14fe6:	bf00      	nop
   14fe8:	200030a8 	.word	0x200030a8
   14fec:	00027aa0 	.word	0x00027aa0
   14ff0:	e000ed00 	.word	0xe000ed00

00014ff4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14ff4:	4921      	ldr	r1, [pc, #132]	; (1507c <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14ff6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   14ff8:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14ffc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15000:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15002:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15006:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   1500a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   1500e:	d103      	bne.n	15018 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   15010:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   15014:	ec80 8a10 	vstmia	r0, {s16-s31}

00015018 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15018:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1501a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1501e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15022:	4f17      	ldr	r7, [pc, #92]	; (15080 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15024:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15028:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1502a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1502c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1502e:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15032:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   15034:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15036:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15038:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   1503c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   15040:	d003      	beq.n	1504a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   15042:	2300      	movs	r3, #0
    vmsr fpscr, r3
   15044:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   15048:	e003      	b.n	15052 <in_fp_endif>

0001504a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   1504a:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   1504e:	ec90 8a10 	vldmia	r0, {s16-s31}

00015052 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   15052:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   15056:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1505a:	f383 8814 	msr	CONTROL, r3
    isb
   1505e:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15062:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15064:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   15066:	f000 fce3 	bl	15a30 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1506a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1506e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15072:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15076:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1507a:	4770      	bx	lr
    ldr r1, =_kernel
   1507c:	200030a8 	.word	0x200030a8
    ldr v4, =_SCS_ICSR
   15080:	e000ed04 	.word	0xe000ed04

00015084 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15084:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15088:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1508a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1508e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15092:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15094:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15098:	2902      	cmp	r1, #2
    beq _oops
   1509a:	d0ff      	beq.n	1509c <_oops>

0001509c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1509c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1509e:	f00f fef6 	bl	24e8e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   150a2:	bd01      	pop	{r0, pc}

000150a4 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   150a4:	7b01      	ldrb	r1, [r0, #12]
   150a6:	0789      	lsls	r1, r1, #30
   150a8:	d505      	bpl.n	150b6 <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   150aa:	6e81      	ldr	r1, [r0, #104]	; 0x68
   150ac:	3140      	adds	r1, #64	; 0x40
   150ae:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   150b0:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
   150b2:	3940      	subs	r1, #64	; 0x40
   150b4:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   150b6:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   150ba:	9b00      	ldr	r3, [sp, #0]
   150bc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   150c0:	490f      	ldr	r1, [pc, #60]	; (15100 <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
   150c2:	9b01      	ldr	r3, [sp, #4]
   150c4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   150c8:	9b02      	ldr	r3, [sp, #8]
   150ca:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   150ce:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   150d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   150d6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   150da:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   150de:	2300      	movs	r3, #0
   150e0:	6783      	str	r3, [r0, #120]	; 0x78
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   150e2:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   150e4:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   150e8:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   150ec:	f64f 5308 	movw	r3, #64776	; 0xfd08
   150f0:	bf08      	it	eq
   150f2:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
   150f6:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   150f8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   150fc:	4770      	bx	lr
   150fe:	bf00      	nop
   15100:	000242b3 	.word	0x000242b3

00015104 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   15104:	7b03      	ldrb	r3, [r0, #12]
   15106:	f013 0f02 	tst.w	r3, #2
   1510a:	4b19      	ldr	r3, [pc, #100]	; (15170 <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
   1510c:	d103      	bne.n	15116 <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
   1510e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   15112:	06d2      	lsls	r2, r2, #27
   15114:	d417      	bmi.n	15146 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   15116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   15118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   1511c:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   1511e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15122:	0719      	lsls	r1, r3, #28
   15124:	d409      	bmi.n	1513a <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   15126:	f043 0308 	orr.w	r3, r3, #8
   1512a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
   1512e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15130:	3340      	adds	r3, #64	; 0x40
   15132:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
   15134:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   15136:	3b40      	subs	r3, #64	; 0x40
   15138:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
   1513a:	7b03      	ldrb	r3, [r0, #12]
   1513c:	f043 0302 	orr.w	r3, r3, #2
   15140:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   15142:	2080      	movs	r0, #128	; 0x80
   15144:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   15146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   15148:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   1514c:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   1514e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15152:	071a      	lsls	r2, r3, #28
   15154:	d401      	bmi.n	1515a <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   15156:	2040      	movs	r0, #64	; 0x40
}
   15158:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   1515a:	f023 0308 	bic.w	r3, r3, #8
   1515e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
   15162:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15164:	3b40      	subs	r3, #64	; 0x40
   15166:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
   15168:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1516a:	3340      	adds	r3, #64	; 0x40
   1516c:	66c3      	str	r3, [r0, #108]	; 0x6c
   1516e:	e7f2      	b.n	15156 <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
   15170:	e000ef00 	.word	0xe000ef00

00015174 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15174:	4a0c      	ldr	r2, [pc, #48]	; (151a8 <z_check_thread_stack_fail+0x34>)
{
   15176:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   15178:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1517a:	b1a0      	cbz	r0, 151a6 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   1517c:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15180:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   15182:	f012 0f08 	tst.w	r2, #8
   15186:	bf0c      	ite	eq
   15188:	2240      	moveq	r2, #64	; 0x40
   1518a:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1518c:	f113 0f16 	cmn.w	r3, #22
   15190:	d004      	beq.n	1519c <z_check_thread_stack_fail+0x28>
   15192:	1a82      	subs	r2, r0, r2
   15194:	429a      	cmp	r2, r3
   15196:	d805      	bhi.n	151a4 <z_check_thread_stack_fail+0x30>
   15198:	4283      	cmp	r3, r0
   1519a:	d203      	bcs.n	151a4 <z_check_thread_stack_fail+0x30>
		return 0;
   1519c:	4281      	cmp	r1, r0
   1519e:	bf28      	it	cs
   151a0:	2000      	movcs	r0, #0
   151a2:	4770      	bx	lr
   151a4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   151a6:	4770      	bx	lr
   151a8:	200030a8 	.word	0x200030a8

000151ac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   151ac:	b508      	push	{r3, lr}
   151ae:	4614      	mov	r4, r2
   151b0:	460d      	mov	r5, r1
   151b2:	2200      	movs	r2, #0
   151b4:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   151b8:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   151bc:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   151c0:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
   151c4:	f3bf 8f6f 	isb	sy
   151c8:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   151cc:	4a08      	ldr	r2, [pc, #32]	; (151f0 <arch_switch_to_main_thread+0x44>)
   151ce:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   151d0:	f000 fc2e 	bl	15a30 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   151d4:	4620      	mov	r0, r4
   151d6:	f385 8809 	msr	PSP, r5
   151da:	2100      	movs	r1, #0
   151dc:	b663      	cpsie	if
   151de:	f381 8811 	msr	BASEPRI, r1
   151e2:	f3bf 8f6f 	isb	sy
   151e6:	2200      	movs	r2, #0
   151e8:	2300      	movs	r3, #0
   151ea:	f00f f862 	bl	242b2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   151ee:	bf00      	nop
   151f0:	200030a8 	.word	0x200030a8

000151f4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   151f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   151f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   151f8:	4a0b      	ldr	r2, [pc, #44]	; (15228 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   151fa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   151fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   151fe:	bf1e      	ittt	ne
	movne	r1, #0
   15200:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15202:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   15204:	f011 fd3e 	blne	26c84 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15208:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1520a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1520e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15212:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15216:	4905      	ldr	r1, [pc, #20]	; (1522c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15218:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1521a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1521c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1521e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15222:	4903      	ldr	r1, [pc, #12]	; (15230 <_isr_wrapper+0x3c>)
	bx r1
   15224:	4708      	bx	r1
   15226:	0000      	.short	0x0000
	ldr r2, =_kernel
   15228:	200030a8 	.word	0x200030a8
	ldr r1, =_sw_isr_table
   1522c:	00027178 	.word	0x00027178
	ldr r1, =z_arm_int_exit
   15230:	00015235 	.word	0x00015235

00015234 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15234:	4b04      	ldr	r3, [pc, #16]	; (15248 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15236:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15238:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1523a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1523c:	d003      	beq.n	15246 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1523e:	4903      	ldr	r1, [pc, #12]	; (1524c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15244:	600a      	str	r2, [r1, #0]

00015246 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15246:	4770      	bx	lr
	ldr r3, =_kernel
   15248:	200030a8 	.word	0x200030a8
	ldr r1, =_SCS_ICSR
   1524c:	e000ed04 	.word	0xe000ed04

00015250 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15254:	b086      	sub	sp, #24
   15256:	4606      	mov	r6, r0
   15258:	af00      	add	r7, sp, #0
   1525a:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   1525c:	4b47      	ldr	r3, [pc, #284]	; (1537c <bus_fault.constprop.0+0x12c>)
   1525e:	617b      	str	r3, [r7, #20]
   15260:	2402      	movs	r4, #2
   15262:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15266:	4846      	ldr	r0, [pc, #280]	; (15380 <bus_fault.constprop.0+0x130>)
   15268:	613c      	str	r4, [r7, #16]
   1526a:	f107 0210 	add.w	r2, r7, #16
   1526e:	f00f fe1d 	bl	24eac <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15272:	4b44      	ldr	r3, [pc, #272]	; (15384 <bus_fault.constprop.0+0x134>)
   15274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15276:	04d9      	lsls	r1, r3, #19
   15278:	d56d      	bpl.n	15356 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   1527a:	4b43      	ldr	r3, [pc, #268]	; (15388 <bus_fault.constprop.0+0x138>)
   1527c:	4840      	ldr	r0, [pc, #256]	; (15380 <bus_fault.constprop.0+0x130>)
   1527e:	e9c7 4304 	strd	r4, r3, [r7, #16]
   15282:	f107 0210 	add.w	r2, r7, #16
   15286:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1528a:	f00f fe0f 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   1528e:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15290:	4b3c      	ldr	r3, [pc, #240]	; (15384 <bus_fault.constprop.0+0x134>)
   15292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15294:	051a      	lsls	r2, r3, #20
   15296:	d50b      	bpl.n	152b0 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   15298:	4b3c      	ldr	r3, [pc, #240]	; (1538c <bus_fault.constprop.0+0x13c>)
   1529a:	617b      	str	r3, [r7, #20]
   1529c:	2302      	movs	r3, #2
   1529e:	4838      	ldr	r0, [pc, #224]	; (15380 <bus_fault.constprop.0+0x130>)
   152a0:	613b      	str	r3, [r7, #16]
   152a2:	f107 0210 	add.w	r2, r7, #16
   152a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152aa:	f00f fdff 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   152ae:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   152b0:	4c34      	ldr	r4, [pc, #208]	; (15384 <bus_fault.constprop.0+0x134>)
   152b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   152b4:	059b      	lsls	r3, r3, #22
   152b6:	d523      	bpl.n	15300 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   152b8:	46e8      	mov	r8, sp
   152ba:	4b35      	ldr	r3, [pc, #212]	; (15390 <bus_fault.constprop.0+0x140>)
   152bc:	617b      	str	r3, [r7, #20]
   152be:	2302      	movs	r3, #2
   152c0:	482f      	ldr	r0, [pc, #188]	; (15380 <bus_fault.constprop.0+0x130>)
   152c2:	613b      	str	r3, [r7, #16]
   152c4:	f107 0210 	add.w	r2, r7, #16
   152c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152cc:	f00f fdee 	bl	24eac <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   152d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   152d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   152d4:	0410      	lsls	r0, r2, #16
   152d6:	d512      	bpl.n	152fe <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   152d8:	b088      	sub	sp, #32
   152da:	466a      	mov	r2, sp
   152dc:	492d      	ldr	r1, [pc, #180]	; (15394 <bus_fault.constprop.0+0x144>)
   152de:	4828      	ldr	r0, [pc, #160]	; (15380 <bus_fault.constprop.0+0x130>)
   152e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   152e4:	2303      	movs	r3, #3
   152e6:	f842 3f10 	str.w	r3, [r2, #16]!
   152ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   152ee:	f00f fddd 	bl	24eac <z_log_msg_static_create.constprop.0>
   152f2:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   152f4:	b11e      	cbz	r6, 152fe <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   152f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   152f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   152fc:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   152fe:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15300:	4b20      	ldr	r3, [pc, #128]	; (15384 <bus_fault.constprop.0+0x134>)
   15302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15304:	0559      	lsls	r1, r3, #21
   15306:	d50b      	bpl.n	15320 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   15308:	4b23      	ldr	r3, [pc, #140]	; (15398 <bus_fault.constprop.0+0x148>)
   1530a:	617b      	str	r3, [r7, #20]
   1530c:	2302      	movs	r3, #2
   1530e:	481c      	ldr	r0, [pc, #112]	; (15380 <bus_fault.constprop.0+0x130>)
   15310:	613b      	str	r3, [r7, #16]
   15312:	f107 0210 	add.w	r2, r7, #16
   15316:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1531a:	f00f fdc7 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   1531e:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15320:	4b18      	ldr	r3, [pc, #96]	; (15384 <bus_fault.constprop.0+0x134>)
   15322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15324:	05d2      	lsls	r2, r2, #23
   15326:	d518      	bpl.n	1535a <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   15328:	4b1c      	ldr	r3, [pc, #112]	; (1539c <bus_fault.constprop.0+0x14c>)
   1532a:	617b      	str	r3, [r7, #20]
   1532c:	2302      	movs	r3, #2
   1532e:	4814      	ldr	r0, [pc, #80]	; (15380 <bus_fault.constprop.0+0x130>)
   15330:	613b      	str	r3, [r7, #16]
   15332:	f107 0210 	add.w	r2, r7, #16
   15336:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1533a:	f00f fdb7 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   1533e:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15340:	4a10      	ldr	r2, [pc, #64]	; (15384 <bus_fault.constprop.0+0x134>)
   15342:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15344:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15348:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   1534a:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   1534c:	2300      	movs	r3, #0
   1534e:	702b      	strb	r3, [r5, #0]
}
   15350:	46bd      	mov	sp, r7
   15352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   15356:	2016      	movs	r0, #22
   15358:	e79a      	b.n	15290 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1535c:	049b      	lsls	r3, r3, #18
   1535e:	d5ef      	bpl.n	15340 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15360:	4b0f      	ldr	r3, [pc, #60]	; (153a0 <bus_fault.constprop.0+0x150>)
   15362:	617b      	str	r3, [r7, #20]
   15364:	2302      	movs	r3, #2
   15366:	4806      	ldr	r0, [pc, #24]	; (15380 <bus_fault.constprop.0+0x130>)
   15368:	613b      	str	r3, [r7, #16]
   1536a:	f107 0210 	add.w	r2, r7, #16
   1536e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15372:	f00f fd9b 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   15376:	201c      	movs	r0, #28
   15378:	e7e2      	b.n	15340 <bus_fault.constprop.0+0xf0>
   1537a:	bf00      	nop
   1537c:	00028a33 	.word	0x00028a33
   15380:	00027400 	.word	0x00027400
   15384:	e000ed00 	.word	0xe000ed00
   15388:	00028a49 	.word	0x00028a49
   1538c:	00028a5a 	.word	0x00028a5a
   15390:	00028a6d 	.word	0x00028a6d
   15394:	00028a86 	.word	0x00028a86
   15398:	00028a9b 	.word	0x00028a9b
   1539c:	00028ab6 	.word	0x00028ab6
   153a0:	00028ace 	.word	0x00028ace

000153a4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   153a4:	b510      	push	{r4, lr}
   153a6:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   153a8:	4b36      	ldr	r3, [pc, #216]	; (15484 <usage_fault.constprop.0+0xe0>)
   153aa:	4837      	ldr	r0, [pc, #220]	; (15488 <usage_fault.constprop.0+0xe4>)
   153ac:	9305      	str	r3, [sp, #20]
   153ae:	aa04      	add	r2, sp, #16
   153b0:	2402      	movs	r4, #2
   153b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   153b6:	9404      	str	r4, [sp, #16]
   153b8:	f00f fd78 	bl	24eac <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   153bc:	4b33      	ldr	r3, [pc, #204]	; (1548c <usage_fault.constprop.0+0xe8>)
   153be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   153c0:	019a      	lsls	r2, r3, #6
   153c2:	d55d      	bpl.n	15480 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   153c4:	4b32      	ldr	r3, [pc, #200]	; (15490 <usage_fault.constprop.0+0xec>)
   153c6:	4830      	ldr	r0, [pc, #192]	; (15488 <usage_fault.constprop.0+0xe4>)
   153c8:	aa04      	add	r2, sp, #16
   153ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   153ce:	e9cd 4304 	strd	r4, r3, [sp, #16]
   153d2:	f00f fd6b 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   153d6:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   153d8:	4b2c      	ldr	r3, [pc, #176]	; (1548c <usage_fault.constprop.0+0xe8>)
   153da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   153dc:	01db      	lsls	r3, r3, #7
   153de:	d50a      	bpl.n	153f6 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   153e0:	4b2c      	ldr	r3, [pc, #176]	; (15494 <usage_fault.constprop.0+0xf0>)
   153e2:	4829      	ldr	r0, [pc, #164]	; (15488 <usage_fault.constprop.0+0xe4>)
   153e4:	9305      	str	r3, [sp, #20]
   153e6:	aa04      	add	r2, sp, #16
   153e8:	2302      	movs	r3, #2
   153ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   153ee:	9304      	str	r3, [sp, #16]
   153f0:	f00f fd5c 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   153f4:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   153f6:	4b25      	ldr	r3, [pc, #148]	; (1548c <usage_fault.constprop.0+0xe8>)
   153f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   153fa:	031c      	lsls	r4, r3, #12
   153fc:	d50a      	bpl.n	15414 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   153fe:	4b26      	ldr	r3, [pc, #152]	; (15498 <usage_fault.constprop.0+0xf4>)
   15400:	4821      	ldr	r0, [pc, #132]	; (15488 <usage_fault.constprop.0+0xe4>)
   15402:	9305      	str	r3, [sp, #20]
   15404:	aa04      	add	r2, sp, #16
   15406:	2302      	movs	r3, #2
   15408:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1540c:	9304      	str	r3, [sp, #16]
   1540e:	f00f fd4d 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   15412:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15414:	4b1d      	ldr	r3, [pc, #116]	; (1548c <usage_fault.constprop.0+0xe8>)
   15416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15418:	0359      	lsls	r1, r3, #13
   1541a:	d50a      	bpl.n	15432 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1541c:	4b1f      	ldr	r3, [pc, #124]	; (1549c <usage_fault.constprop.0+0xf8>)
   1541e:	481a      	ldr	r0, [pc, #104]	; (15488 <usage_fault.constprop.0+0xe4>)
   15420:	9305      	str	r3, [sp, #20]
   15422:	aa04      	add	r2, sp, #16
   15424:	2302      	movs	r3, #2
   15426:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1542a:	9304      	str	r3, [sp, #16]
   1542c:	f00f fd3e 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   15430:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15432:	4b16      	ldr	r3, [pc, #88]	; (1548c <usage_fault.constprop.0+0xe8>)
   15434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15436:	039a      	lsls	r2, r3, #14
   15438:	d50a      	bpl.n	15450 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1543a:	4b19      	ldr	r3, [pc, #100]	; (154a0 <usage_fault.constprop.0+0xfc>)
   1543c:	4812      	ldr	r0, [pc, #72]	; (15488 <usage_fault.constprop.0+0xe4>)
   1543e:	9305      	str	r3, [sp, #20]
   15440:	aa04      	add	r2, sp, #16
   15442:	2302      	movs	r3, #2
   15444:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15448:	9304      	str	r3, [sp, #16]
   1544a:	f00f fd2f 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1544e:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15450:	4b0e      	ldr	r3, [pc, #56]	; (1548c <usage_fault.constprop.0+0xe8>)
   15452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15454:	03db      	lsls	r3, r3, #15
   15456:	d50a      	bpl.n	1546e <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15458:	4b12      	ldr	r3, [pc, #72]	; (154a4 <usage_fault.constprop.0+0x100>)
   1545a:	480b      	ldr	r0, [pc, #44]	; (15488 <usage_fault.constprop.0+0xe4>)
   1545c:	9305      	str	r3, [sp, #20]
   1545e:	aa04      	add	r2, sp, #16
   15460:	2302      	movs	r3, #2
   15462:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15466:	9304      	str	r3, [sp, #16]
   15468:	f00f fd20 	bl	24eac <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   1546c:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1546e:	4a07      	ldr	r2, [pc, #28]	; (1548c <usage_fault.constprop.0+0xe8>)
   15470:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15472:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15476:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1547a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1547c:	b006      	add	sp, #24
   1547e:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   15480:	201d      	movs	r0, #29
   15482:	e7a9      	b.n	153d8 <usage_fault.constprop.0+0x34>
   15484:	00028afd 	.word	0x00028afd
   15488:	00027400 	.word	0x00027400
   1548c:	e000ed00 	.word	0xe000ed00
   15490:	00028b15 	.word	0x00028b15
   15494:	00028b28 	.word	0x00028b28
   15498:	00028b42 	.word	0x00028b42
   1549c:	00028b60 	.word	0x00028b60
   154a0:	00028b85 	.word	0x00028b85
   154a4:	00028b9f 	.word	0x00028b9f

000154a8 <mem_manage_fault>:
{
   154a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   154ac:	b086      	sub	sp, #24
   154ae:	4681      	mov	r9, r0
   154b0:	af00      	add	r7, sp, #0
   154b2:	468a      	mov	sl, r1
   154b4:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   154b6:	4b5a      	ldr	r3, [pc, #360]	; (15620 <mem_manage_fault+0x178>)
   154b8:	485a      	ldr	r0, [pc, #360]	; (15624 <mem_manage_fault+0x17c>)
   154ba:	617b      	str	r3, [r7, #20]
   154bc:	2402      	movs	r4, #2
   154be:	613c      	str	r4, [r7, #16]
   154c0:	f107 0210 	add.w	r2, r7, #16
   154c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154c8:	f00f fcf0 	bl	24eac <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   154cc:	4b56      	ldr	r3, [pc, #344]	; (15628 <mem_manage_fault+0x180>)
   154ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154d0:	06d8      	lsls	r0, r3, #27
   154d2:	d545      	bpl.n	15560 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   154d4:	4b55      	ldr	r3, [pc, #340]	; (1562c <mem_manage_fault+0x184>)
   154d6:	4853      	ldr	r0, [pc, #332]	; (15624 <mem_manage_fault+0x17c>)
   154d8:	e9c7 4304 	strd	r4, r3, [r7, #16]
   154dc:	f107 0210 	add.w	r2, r7, #16
   154e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   154e4:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   154e6:	f00f fce1 	bl	24eac <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   154ea:	4b4f      	ldr	r3, [pc, #316]	; (15628 <mem_manage_fault+0x180>)
   154ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154ee:	0719      	lsls	r1, r3, #28
   154f0:	d50b      	bpl.n	1550a <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   154f2:	4b4f      	ldr	r3, [pc, #316]	; (15630 <mem_manage_fault+0x188>)
   154f4:	617b      	str	r3, [r7, #20]
   154f6:	2302      	movs	r3, #2
   154f8:	484a      	ldr	r0, [pc, #296]	; (15624 <mem_manage_fault+0x17c>)
   154fa:	613b      	str	r3, [r7, #16]
   154fc:	f107 0210 	add.w	r2, r7, #16
   15500:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   15504:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   15506:	f00f fcd1 	bl	24eac <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1550a:	4d47      	ldr	r5, [pc, #284]	; (15628 <mem_manage_fault+0x180>)
   1550c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1550e:	079a      	lsls	r2, r3, #30
   15510:	d528      	bpl.n	15564 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   15512:	466c      	mov	r4, sp
   15514:	4b47      	ldr	r3, [pc, #284]	; (15634 <mem_manage_fault+0x18c>)
   15516:	617b      	str	r3, [r7, #20]
   15518:	2302      	movs	r3, #2
   1551a:	613b      	str	r3, [r7, #16]
   1551c:	4841      	ldr	r0, [pc, #260]	; (15624 <mem_manage_fault+0x17c>)
   1551e:	f107 0210 	add.w	r2, r7, #16
   15522:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15526:	f00f fcc1 	bl	24eac <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   1552a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1552c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1552e:	061b      	lsls	r3, r3, #24
   15530:	d560      	bpl.n	155f4 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15532:	b088      	sub	sp, #32
   15534:	466a      	mov	r2, sp
   15536:	4b40      	ldr	r3, [pc, #256]	; (15638 <mem_manage_fault+0x190>)
   15538:	483a      	ldr	r0, [pc, #232]	; (15624 <mem_manage_fault+0x17c>)
   1553a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1553e:	2303      	movs	r3, #3
   15540:	f842 3f10 	str.w	r3, [r2, #16]!
   15544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15548:	f00f fcb0 	bl	24eac <z_log_msg_static_create.constprop.0>
   1554c:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   1554e:	f1ba 0f00 	cmp.w	sl, #0
   15552:	d003      	beq.n	1555c <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15554:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1555a:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   1555c:	2413      	movs	r4, #19
   1555e:	e003      	b.n	15568 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   15560:	2410      	movs	r4, #16
   15562:	e7c2      	b.n	154ea <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   15564:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   15568:	4b2f      	ldr	r3, [pc, #188]	; (15628 <mem_manage_fault+0x180>)
   1556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1556c:	07d8      	lsls	r0, r3, #31
   1556e:	d50b      	bpl.n	15588 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   15570:	4b32      	ldr	r3, [pc, #200]	; (1563c <mem_manage_fault+0x194>)
   15572:	617b      	str	r3, [r7, #20]
   15574:	2302      	movs	r3, #2
   15576:	482b      	ldr	r0, [pc, #172]	; (15624 <mem_manage_fault+0x17c>)
   15578:	613b      	str	r3, [r7, #16]
   1557a:	f107 0210 	add.w	r2, r7, #16
   1557e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   15582:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   15584:	f00f fc92 	bl	24eac <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15588:	4b27      	ldr	r3, [pc, #156]	; (15628 <mem_manage_fault+0x180>)
   1558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1558c:	0699      	lsls	r1, r3, #26
   1558e:	d50b      	bpl.n	155a8 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   15590:	4b2b      	ldr	r3, [pc, #172]	; (15640 <mem_manage_fault+0x198>)
   15592:	617b      	str	r3, [r7, #20]
   15594:	2302      	movs	r3, #2
   15596:	4823      	ldr	r0, [pc, #140]	; (15624 <mem_manage_fault+0x17c>)
   15598:	613b      	str	r3, [r7, #16]
   1559a:	f107 0210 	add.w	r2, r7, #16
   1559e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   155a2:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   155a4:	f00f fc82 	bl	24eac <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   155a8:	4d1f      	ldr	r5, [pc, #124]	; (15628 <mem_manage_fault+0x180>)
   155aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   155ac:	06da      	lsls	r2, r3, #27
   155ae:	d402      	bmi.n	155b6 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   155b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   155b2:	079b      	lsls	r3, r3, #30
   155b4:	d50a      	bpl.n	155cc <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   155b6:	686b      	ldr	r3, [r5, #4]
   155b8:	0518      	lsls	r0, r3, #20
   155ba:	d507      	bpl.n	155cc <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   155bc:	4649      	mov	r1, r9
   155be:	4630      	mov	r0, r6
   155c0:	f7ff fdd8 	bl	15174 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   155c4:	b1c8      	cbz	r0, 155fa <mem_manage_fault+0x152>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   155c6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   155ca:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   155cc:	4b16      	ldr	r3, [pc, #88]	; (15628 <mem_manage_fault+0x180>)
   155ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   155d0:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   155d2:	bf42      	ittt	mi
   155d4:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   155d6:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   155da:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   155dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   155de:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   155e2:	629a      	str	r2, [r3, #40]	; 0x28
}
   155e4:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   155e6:	2300      	movs	r3, #0
}
   155e8:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   155ea:	f888 3000 	strb.w	r3, [r8]
}
   155ee:	46bd      	mov	sp, r7
   155f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   155f4:	f06f 0615 	mvn.w	r6, #21
   155f8:	e7b0      	b.n	1555c <mem_manage_fault+0xb4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   155fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   155fc:	06d9      	lsls	r1, r3, #27
   155fe:	d5e5      	bpl.n	155cc <mem_manage_fault+0x124>
   15600:	4910      	ldr	r1, [pc, #64]	; (15644 <mem_manage_fault+0x19c>)
   15602:	4a11      	ldr	r2, [pc, #68]	; (15648 <mem_manage_fault+0x1a0>)
   15604:	4811      	ldr	r0, [pc, #68]	; (1564c <mem_manage_fault+0x1a4>)
   15606:	f240 135b 	movw	r3, #347	; 0x15b
   1560a:	f00f f86f 	bl	246ec <assert_print>
   1560e:	4810      	ldr	r0, [pc, #64]	; (15650 <mem_manage_fault+0x1a8>)
   15610:	f00f f86c 	bl	246ec <assert_print>
   15614:	480c      	ldr	r0, [pc, #48]	; (15648 <mem_manage_fault+0x1a0>)
   15616:	f240 115b 	movw	r1, #347	; 0x15b
   1561a:	f00f f860 	bl	246de <assert_post_action>
   1561e:	bf00      	nop
   15620:	00028bca 	.word	0x00028bca
   15624:	00027400 	.word	0x00027400
   15628:	e000ed00 	.word	0xe000ed00
   1562c:	00028be0 	.word	0x00028be0
   15630:	00028a5a 	.word	0x00028a5a
   15634:	00028c13 	.word	0x00028c13
   15638:	00028c2b 	.word	0x00028c2b
   1563c:	00028c41 	.word	0x00028c41
   15640:	00028ace 	.word	0x00028ace
   15644:	00028c9a 	.word	0x00028c9a
   15648:	00028c60 	.word	0x00028c60
   1564c:	00027f8a 	.word	0x00027f8a
   15650:	00028ce4 	.word	0x00028ce4

00015654 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15658:	4b8a      	ldr	r3, [pc, #552]	; (15884 <z_arm_fault+0x230>)
{
   1565a:	b09d      	sub	sp, #116	; 0x74
   1565c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1565e:	6858      	ldr	r0, [r3, #4]
{
   15660:	af00      	add	r7, sp, #0
   15662:	f3c0 0308 	ubfx	r3, r0, #0, #9
   15666:	2600      	movs	r6, #0
   15668:	f386 8811 	msr	BASEPRI, r6
   1566c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15670:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   15674:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   15678:	d10e      	bne.n	15698 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1567a:	f002 040c 	and.w	r4, r2, #12
   1567e:	2c08      	cmp	r4, #8
   15680:	d119      	bne.n	156b6 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15682:	4b81      	ldr	r3, [pc, #516]	; (15888 <z_arm_fault+0x234>)
   15684:	61fb      	str	r3, [r7, #28]
   15686:	2302      	movs	r3, #2
   15688:	4880      	ldr	r0, [pc, #512]	; (1588c <z_arm_fault+0x238>)
   1568a:	61bb      	str	r3, [r7, #24]
   1568c:	f107 0218 	add.w	r2, r7, #24
   15690:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15694:	f00f fc0a 	bl	24eac <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   15698:	497d      	ldr	r1, [pc, #500]	; (15890 <z_arm_fault+0x23c>)
   1569a:	4a7e      	ldr	r2, [pc, #504]	; (15894 <z_arm_fault+0x240>)
   1569c:	487e      	ldr	r0, [pc, #504]	; (15898 <z_arm_fault+0x244>)
   1569e:	f240 433e 	movw	r3, #1086	; 0x43e
   156a2:	f00f f823 	bl	246ec <assert_print>
   156a6:	487d      	ldr	r0, [pc, #500]	; (1589c <z_arm_fault+0x248>)
   156a8:	f00f f820 	bl	246ec <assert_print>
   156ac:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
   156b0:	4878      	ldr	r0, [pc, #480]	; (15894 <z_arm_fault+0x240>)
   156b2:	f00f f814 	bl	246de <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   156b6:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   156b8:	bf4c      	ite	mi
   156ba:	460d      	movmi	r5, r1
			*nested_exc = true;
   156bc:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   156be:	2d00      	cmp	r5, #0
   156c0:	d0ea      	beq.n	15698 <z_arm_fault+0x44>
	*recoverable = false;
   156c2:	2200      	movs	r2, #0
   156c4:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
   156c6:	1eda      	subs	r2, r3, #3
   156c8:	2a09      	cmp	r2, #9
   156ca:	f200 80bb 	bhi.w	15844 <z_arm_fault+0x1f0>
   156ce:	e8df f002 	tbb	[pc, r2]
   156d2:	ae05      	.short	0xae05
   156d4:	b9b991b1 	.word	0xb9b991b1
   156d8:	b4b9b9b9 	.word	0xb4b9b9b9
	PR_FAULT_INFO("***** HARD FAULT *****");
   156dc:	46e9      	mov	r9, sp
   156de:	4b70      	ldr	r3, [pc, #448]	; (158a0 <z_arm_fault+0x24c>)
   156e0:	61fb      	str	r3, [r7, #28]
   156e2:	f04f 0802 	mov.w	r8, #2
   156e6:	f107 0218 	add.w	r2, r7, #24
   156ea:	4868      	ldr	r0, [pc, #416]	; (1588c <z_arm_fault+0x238>)
   156ec:	f8c7 8018 	str.w	r8, [r7, #24]
   156f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   156f4:	f00f fbda 	bl	24eac <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   156f8:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   156fa:	4c62      	ldr	r4, [pc, #392]	; (15884 <z_arm_fault+0x230>)
	*recoverable = false;
   156fc:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   156fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15700:	079a      	lsls	r2, r3, #30
   15702:	d50b      	bpl.n	1571c <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   15704:	4b67      	ldr	r3, [pc, #412]	; (158a4 <z_arm_fault+0x250>)
		PR_EXC("  Debug event");
   15706:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1570a:	4860      	ldr	r0, [pc, #384]	; (1588c <z_arm_fault+0x238>)
   1570c:	f107 0218 	add.w	r2, r7, #24
   15710:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15714:	f00f fbca 	bl	24eac <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15718:	2400      	movs	r4, #0
   1571a:	e038      	b.n	1578e <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1571c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1571e:	2b00      	cmp	r3, #0
   15720:	da01      	bge.n	15726 <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
   15722:	4b61      	ldr	r3, [pc, #388]	; (158a8 <z_arm_fault+0x254>)
   15724:	e7ef      	b.n	15706 <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15726:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15728:	005b      	lsls	r3, r3, #1
   1572a:	d573      	bpl.n	15814 <z_arm_fault+0x1c0>
		PR_EXC("  Fault escalation (see below)");
   1572c:	4b5f      	ldr	r3, [pc, #380]	; (158ac <z_arm_fault+0x258>)
   1572e:	4857      	ldr	r0, [pc, #348]	; (1588c <z_arm_fault+0x238>)
   15730:	e9c7 8306 	strd	r8, r3, [r7, #24]
   15734:	f107 0218 	add.w	r2, r7, #24
   15738:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1573c:	f00f fbb6 	bl	24eac <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15740:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15742:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15748:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1574a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1574e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15752:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   15754:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1575c:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1575e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15762:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15766:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1576a:	429a      	cmp	r2, r3
   1576c:	d12b      	bne.n	157c6 <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1576e:	b088      	sub	sp, #32
   15770:	682b      	ldr	r3, [r5, #0]
   15772:	466a      	mov	r2, sp
   15774:	494e      	ldr	r1, [pc, #312]	; (158b0 <z_arm_fault+0x25c>)
   15776:	4845      	ldr	r0, [pc, #276]	; (1588c <z_arm_fault+0x238>)
   15778:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1577c:	2303      	movs	r3, #3
   1577e:	f842 3f10 	str.w	r3, [r2, #16]!
   15782:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15786:	f00f fb91 	bl	24eac <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   1578a:	682c      	ldr	r4, [r5, #0]
   1578c:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1578e:	79fb      	ldrb	r3, [r7, #7]
   15790:	b9ab      	cbnz	r3, 157be <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15792:	2268      	movs	r2, #104	; 0x68
   15794:	4629      	mov	r1, r5
   15796:	f107 0008 	add.w	r0, r7, #8
   1579a:	f00f fbb4 	bl	24f06 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   157a0:	2e00      	cmp	r6, #0
   157a2:	d06a      	beq.n	1587a <z_arm_fault+0x226>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   157a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   157a8:	b922      	cbnz	r2, 157b4 <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   157aa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   157ae:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   157b2:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   157b4:	f107 0108 	add.w	r1, r7, #8
   157b8:	4620      	mov	r0, r4
   157ba:	f7ff faab 	bl	14d14 <z_arm_fatal_error>
}
   157be:	3774      	adds	r7, #116	; 0x74
   157c0:	46bd      	mov	sp, r7
   157c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   157c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   157c8:	b2db      	uxtb	r3, r3
   157ca:	b133      	cbz	r3, 157da <z_arm_fault+0x186>
			reason = mem_manage_fault(esf, 1, recoverable);
   157cc:	1dfa      	adds	r2, r7, #7
   157ce:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   157d0:	4628      	mov	r0, r5
   157d2:	f7ff fe69 	bl	154a8 <mem_manage_fault>
   157d6:	4604      	mov	r4, r0
		break;
   157d8:	e7d9      	b.n	1578e <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   157da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   157dc:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   157e0:	d004      	beq.n	157ec <z_arm_fault+0x198>
			reason = bus_fault(esf, 1, recoverable);
   157e2:	1df9      	adds	r1, r7, #7
   157e4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   157e6:	f7ff fd33 	bl	15250 <bus_fault.constprop.0>
   157ea:	e7f4      	b.n	157d6 <z_arm_fault+0x182>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   157ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   157ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   157f2:	d302      	bcc.n	157fa <z_arm_fault+0x1a6>
		reason = usage_fault(esf);
   157f4:	f7ff fdd6 	bl	153a4 <usage_fault.constprop.0>
   157f8:	e7ed      	b.n	157d6 <z_arm_fault+0x182>
			__ASSERT(0,
   157fa:	492e      	ldr	r1, [pc, #184]	; (158b4 <z_arm_fault+0x260>)
   157fc:	4a25      	ldr	r2, [pc, #148]	; (15894 <z_arm_fault+0x240>)
   157fe:	4826      	ldr	r0, [pc, #152]	; (15898 <z_arm_fault+0x244>)
   15800:	f44f 7344 	mov.w	r3, #784	; 0x310
   15804:	f00e ff72 	bl	246ec <assert_print>
   15808:	482b      	ldr	r0, [pc, #172]	; (158b8 <z_arm_fault+0x264>)
   1580a:	f00e ff6f 	bl	246ec <assert_print>
   1580e:	f44f 7144 	mov.w	r1, #784	; 0x310
   15812:	e74d      	b.n	156b0 <z_arm_fault+0x5c>
		__ASSERT(0,
   15814:	4927      	ldr	r1, [pc, #156]	; (158b4 <z_arm_fault+0x260>)
   15816:	4a1f      	ldr	r2, [pc, #124]	; (15894 <z_arm_fault+0x240>)
   15818:	481f      	ldr	r0, [pc, #124]	; (15898 <z_arm_fault+0x244>)
   1581a:	f44f 7345 	mov.w	r3, #788	; 0x314
   1581e:	f00e ff65 	bl	246ec <assert_print>
   15822:	4826      	ldr	r0, [pc, #152]	; (158bc <z_arm_fault+0x268>)
   15824:	f00e ff62 	bl	246ec <assert_print>
   15828:	f44f 7145 	mov.w	r1, #788	; 0x314
   1582c:	e740      	b.n	156b0 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
   1582e:	1dfa      	adds	r2, r7, #7
   15830:	2100      	movs	r1, #0
   15832:	e7cd      	b.n	157d0 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   15834:	1df9      	adds	r1, r7, #7
   15836:	2000      	movs	r0, #0
   15838:	e7d5      	b.n	157e6 <z_arm_fault+0x192>
	PR_FAULT_INFO(
   1583a:	4b21      	ldr	r3, [pc, #132]	; (158c0 <z_arm_fault+0x26c>)
   1583c:	61fb      	str	r3, [r7, #28]
   1583e:	2302      	movs	r3, #2
   15840:	61bb      	str	r3, [r7, #24]
   15842:	e762      	b.n	1570a <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
   15844:	4a1f      	ldr	r2, [pc, #124]	; (158c4 <z_arm_fault+0x270>)
   15846:	4920      	ldr	r1, [pc, #128]	; (158c8 <z_arm_fault+0x274>)
   15848:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   1584c:	466c      	mov	r4, sp
   1584e:	b08a      	sub	sp, #40	; 0x28
   15850:	bf18      	it	ne
   15852:	4611      	movne	r1, r2
   15854:	466a      	mov	r2, sp
   15856:	3b10      	subs	r3, #16
   15858:	61d3      	str	r3, [r2, #28]
   1585a:	481c      	ldr	r0, [pc, #112]	; (158cc <z_arm_fault+0x278>)
   1585c:	f44f 7300 	mov.w	r3, #512	; 0x200
   15860:	8413      	strh	r3, [r2, #32]
   15862:	4b1b      	ldr	r3, [pc, #108]	; (158d0 <z_arm_fault+0x27c>)
   15864:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15868:	f842 3f10 	str.w	r3, [r2, #16]!
   1586c:	4807      	ldr	r0, [pc, #28]	; (1588c <z_arm_fault+0x238>)
   1586e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15872:	f00f fb1b 	bl	24eac <z_log_msg_static_create.constprop.0>
   15876:	46a5      	mov	sp, r4
}
   15878:	e74e      	b.n	15718 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1587a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1587e:	f023 0301 	bic.w	r3, r3, #1
   15882:	e796      	b.n	157b2 <z_arm_fault+0x15e>
   15884:	e000ed00 	.word	0xe000ed00
   15888:	00028d35 	.word	0x00028d35
   1588c:	00027400 	.word	0x00027400
   15890:	00028d60 	.word	0x00028d60
   15894:	00028c60 	.word	0x00028c60
   15898:	00027f8a 	.word	0x00027f8a
   1589c:	00028d73 	.word	0x00028d73
   158a0:	00028db1 	.word	0x00028db1
   158a4:	00028dc8 	.word	0x00028dc8
   158a8:	00028de9 	.word	0x00028de9
   158ac:	00028df7 	.word	0x00028df7
   158b0:	00028e16 	.word	0x00028e16
   158b4:	0002ab0f 	.word	0x0002ab0f
   158b8:	00028e32 	.word	0x00028e32
   158bc:	00028e56 	.word	0x00028e56
   158c0:	00028e86 	.word	0x00028e86
   158c4:	00028d1c 	.word	0x00028d1c
   158c8:	00028d07 	.word	0x00028d07
   158cc:	00028eaa 	.word	0x00028eaa
   158d0:	01000004 	.word	0x01000004

000158d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   158d4:	4a02      	ldr	r2, [pc, #8]	; (158e0 <z_arm_fault_init+0xc>)
   158d6:	6953      	ldr	r3, [r2, #20]
   158d8:	f043 0310 	orr.w	r3, r3, #16
   158dc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   158de:	4770      	bx	lr
   158e0:	e000ed00 	.word	0xe000ed00

000158e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   158e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   158e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   158ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   158ee:	4672      	mov	r2, lr
	bl z_arm_fault
   158f0:	f7ff feb0 	bl	15654 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   158f4:	bd01      	pop	{r0, pc}
   158f6:	bf00      	nop

000158f8 <z_arm_interrupt_init>:
   158f8:	4804      	ldr	r0, [pc, #16]	; (1590c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   158fa:	2300      	movs	r3, #0
   158fc:	2140      	movs	r1, #64	; 0x40
   158fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15900:	3301      	adds	r3, #1
   15902:	2b27      	cmp	r3, #39	; 0x27
   15904:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15908:	d1f9      	bne.n	158fe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1590a:	4770      	bx	lr
   1590c:	e000e100 	.word	0xe000e100

00015910 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15910:	2000      	movs	r0, #0
    msr CONTROL, r0
   15912:	f380 8814 	msr	CONTROL, r0
    isb
   15916:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1591a:	f7fe f84f 	bl	139bc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1591e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15920:	490d      	ldr	r1, [pc, #52]	; (15958 <__start+0x48>)
    str r0, [r1]
   15922:	6008      	str	r0, [r1, #0]
    dsb
   15924:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15928:	480c      	ldr	r0, [pc, #48]	; (1595c <__start+0x4c>)
    msr msp, r0
   1592a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1592e:	f000 f82b 	bl	15988 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15932:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15934:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15938:	4809      	ldr	r0, [pc, #36]	; (15960 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1593a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   1593e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15940:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15944:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15948:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1594a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1594c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15950:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15954:	f7ff fb06 	bl	14f64 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15958:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1595c:	20007680 	.word	0x20007680
    ldr r0, =z_interrupt_stacks
   15960:	20005c80 	.word	0x20005c80

00015964 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15964:	4907      	ldr	r1, [pc, #28]	; (15984 <z_arm_clear_arm_mpu_config+0x20>)
   15966:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1596a:	2300      	movs	r3, #0
	int num_regions =
   1596c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15970:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   15972:	4293      	cmp	r3, r2
   15974:	db00      	blt.n	15978 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   15976:	4770      	bx	lr
  MPU->RNR = rnr;
   15978:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   1597c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15980:	3301      	adds	r3, #1
   15982:	e7f6      	b.n	15972 <z_arm_clear_arm_mpu_config+0xe>
   15984:	e000ed00 	.word	0xe000ed00

00015988 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15988:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1598a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1598c:	2300      	movs	r3, #0
   1598e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15992:	f7ff ffe7 	bl	15964 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   15996:	4b14      	ldr	r3, [pc, #80]	; (159e8 <z_arm_init_arch_hw_at_boot+0x60>)
   15998:	f04f 32ff 	mov.w	r2, #4294967295
   1599c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   159a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   159a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   159a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   159ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   159b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   159b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   159b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   159bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   159c0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   159c4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   159c8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   159cc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   159d0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   159d4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   159d8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   159dc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   159de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   159e2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   159e6:	bd08      	pop	{r3, pc}
   159e8:	e000e100 	.word	0xe000e100

000159ec <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   159ec:	4b08      	ldr	r3, [pc, #32]	; (15a10 <z_impl_k_thread_abort+0x24>)
   159ee:	689b      	ldr	r3, [r3, #8]
   159f0:	4283      	cmp	r3, r0
   159f2:	d10b      	bne.n	15a0c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   159f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   159f8:	b143      	cbz	r3, 15a0c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   159fa:	4b06      	ldr	r3, [pc, #24]	; (15a14 <z_impl_k_thread_abort+0x28>)
   159fc:	685a      	ldr	r2, [r3, #4]
   159fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   15a02:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15a0a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15a0c:	f00c bfa0 	b.w	22950 <z_thread_abort>
   15a10:	200030a8 	.word	0x200030a8
   15a14:	e000ed00 	.word	0xe000ed00

00015a18 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15a18:	4b02      	ldr	r3, [pc, #8]	; (15a24 <z_arm_configure_static_mpu_regions+0xc>)
   15a1a:	4a03      	ldr	r2, [pc, #12]	; (15a28 <z_arm_configure_static_mpu_regions+0x10>)
   15a1c:	4803      	ldr	r0, [pc, #12]	; (15a2c <z_arm_configure_static_mpu_regions+0x14>)
   15a1e:	2101      	movs	r1, #1
   15a20:	f000 b898 	b.w	15b54 <arm_core_mpu_configure_static_mpu_regions>
   15a24:	20010000 	.word	0x20010000
   15a28:	20000000 	.word	0x20000000
   15a2c:	0002760c 	.word	0x0002760c

00015a30 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15a30:	b510      	push	{r4, lr}
   15a32:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   15a34:	f7ff fb66 	bl	15104 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15a38:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   15a3a:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15a3c:	4805      	ldr	r0, [pc, #20]	; (15a54 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
   15a3e:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
   15a40:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15a44:	4b04      	ldr	r3, [pc, #16]	; (15a58 <z_arm_configure_dynamic_mpu_regions+0x28>)
   15a46:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   15a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15a4c:	2101      	movs	r1, #1
   15a4e:	f000 b8a7 	b.w	15ba0 <arm_core_mpu_configure_dynamic_mpu_regions>
   15a52:	bf00      	nop
   15a54:	20002d94 	.word	0x20002d94
   15a58:	150b0000 	.word	0x150b0000

00015a5c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15a60:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 15b24 <mpu_configure_regions+0xc8>
   15a64:	469c      	mov	ip, r3
   15a66:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   15a68:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   15a6a:	2300      	movs	r3, #0
   15a6c:	428b      	cmp	r3, r1
   15a6e:	da1a      	bge.n	15aa6 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   15a70:	6844      	ldr	r4, [r0, #4]
   15a72:	2c00      	cmp	r4, #0
   15a74:	d04d      	beq.n	15b12 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15a76:	f1bc 0f00 	cmp.w	ip, #0
   15a7a:	d01d      	beq.n	15ab8 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15a7c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15a7e:	4234      	tst	r4, r6
   15a80:	d015      	beq.n	15aae <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15a82:	466c      	mov	r4, sp
   15a84:	b088      	sub	sp, #32
   15a86:	466a      	mov	r2, sp
   15a88:	4923      	ldr	r1, [pc, #140]	; (15b18 <mpu_configure_regions+0xbc>)
   15a8a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15a8e:	2303      	movs	r3, #3
   15a90:	f842 3f10 	str.w	r3, [r2, #16]!
   15a94:	4821      	ldr	r0, [pc, #132]	; (15b1c <mpu_configure_regions+0xc0>)
   15a96:	2300      	movs	r3, #0
   15a98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a9c:	f7fe fb04 	bl	140a8 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   15aa0:	f06f 0515 	mvn.w	r5, #21
   15aa4:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15aa6:	4628      	mov	r0, r5
   15aa8:	46bd      	mov	sp, r7
   15aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   15aae:	2c1f      	cmp	r4, #31
   15ab0:	d9e7      	bls.n	15a82 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   15ab2:	6802      	ldr	r2, [r0, #0]
		&&
   15ab4:	4216      	tst	r6, r2
   15ab6:	d1e4      	bne.n	15a82 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15ab8:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   15aba:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15abc:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15abe:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   15ac2:	d914      	bls.n	15aee <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   15ac4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15ac8:	d813      	bhi.n	15af2 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15aca:	3c01      	subs	r4, #1
   15acc:	fab4 f484 	clz	r4, r4
   15ad0:	f1c4 041f 	rsb	r4, r4, #31
   15ad4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15ad6:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15ada:	ea46 0604 	orr.w	r6, r6, r4
   15ade:	d90a      	bls.n	15af6 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15ae0:	466c      	mov	r4, sp
   15ae2:	b088      	sub	sp, #32
   15ae4:	466a      	mov	r2, sp
   15ae6:	4b0e      	ldr	r3, [pc, #56]	; (15b20 <mpu_configure_regions+0xc4>)
   15ae8:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15aec:	e7cf      	b.n	15a8e <mpu_configure_regions+0x32>
		return REGION_32B;
   15aee:	2408      	movs	r4, #8
   15af0:	e7f1      	b.n	15ad6 <mpu_configure_regions+0x7a>
		return REGION_4G;
   15af2:	243e      	movs	r4, #62	; 0x3e
   15af4:	e7ef      	b.n	15ad6 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15af6:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   15afa:	432a      	orrs	r2, r5
   15afc:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15b00:	f046 0601 	orr.w	r6, r6, #1
   15b04:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15b08:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   15b0c:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15b0e:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   15b12:	3301      	adds	r3, #1
   15b14:	300c      	adds	r0, #12
   15b16:	e7a9      	b.n	15a6c <mpu_configure_regions+0x10>
   15b18:	00028ec1 	.word	0x00028ec1
   15b1c:	000273e8 	.word	0x000273e8
   15b20:	00028ee4 	.word	0x00028ee4
   15b24:	e000ed00 	.word	0xe000ed00

00015b28 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15b28:	4b04      	ldr	r3, [pc, #16]	; (15b3c <arm_core_mpu_enable+0x14>)
   15b2a:	2205      	movs	r2, #5
   15b2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15b30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15b34:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15b38:	4770      	bx	lr
   15b3a:	bf00      	nop
   15b3c:	e000ed00 	.word	0xe000ed00

00015b40 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15b40:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15b44:	4b02      	ldr	r3, [pc, #8]	; (15b50 <arm_core_mpu_disable+0x10>)
   15b46:	2200      	movs	r2, #0
   15b48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15b4c:	4770      	bx	lr
   15b4e:	bf00      	nop
   15b50:	e000ed00 	.word	0xe000ed00

00015b54 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15b54:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15b56:	4d0d      	ldr	r5, [pc, #52]	; (15b8c <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15b58:	2301      	movs	r3, #1
   15b5a:	782a      	ldrb	r2, [r5, #0]
   15b5c:	460c      	mov	r4, r1
   15b5e:	f7ff ff7d 	bl	15a5c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15b62:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   15b64:	3016      	adds	r0, #22
   15b66:	d10f      	bne.n	15b88 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15b68:	4a09      	ldr	r2, [pc, #36]	; (15b90 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15b6a:	490a      	ldr	r1, [pc, #40]	; (15b94 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   15b6c:	480a      	ldr	r0, [pc, #40]	; (15b98 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   15b6e:	f44f 738d 	mov.w	r3, #282	; 0x11a
   15b72:	f00e fdbb 	bl	246ec <assert_print>
   15b76:	4809      	ldr	r0, [pc, #36]	; (15b9c <arm_core_mpu_configure_static_mpu_regions+0x48>)
   15b78:	4621      	mov	r1, r4
   15b7a:	f00e fdb7 	bl	246ec <assert_print>
   15b7e:	4804      	ldr	r0, [pc, #16]	; (15b90 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15b80:	f44f 718d 	mov.w	r1, #282	; 0x11a
   15b84:	f00e fdab 	bl	246de <assert_post_action>
			regions_num);
	}
}
   15b88:	bd38      	pop	{r3, r4, r5, pc}
   15b8a:	bf00      	nop
   15b8c:	2000313b 	.word	0x2000313b
   15b90:	00028f0a 	.word	0x00028f0a
   15b94:	0002ab0f 	.word	0x0002ab0f
   15b98:	00027f8a 	.word	0x00027f8a
   15b9c:	00028f41 	.word	0x00028f41

00015ba0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15ba0:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15ba2:	4a12      	ldr	r2, [pc, #72]	; (15bec <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   15ba4:	2300      	movs	r3, #0
   15ba6:	7812      	ldrb	r2, [r2, #0]
   15ba8:	460c      	mov	r4, r1
   15baa:	f7ff ff57 	bl	15a5c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15bae:	f110 0f16 	cmn.w	r0, #22
   15bb2:	d004      	beq.n	15bbe <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
   15bb4:	4b0e      	ldr	r3, [pc, #56]	; (15bf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   15bb6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15bb8:	2807      	cmp	r0, #7
   15bba:	dd10      	ble.n	15bde <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15bbc:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15bbe:	4a0d      	ldr	r2, [pc, #52]	; (15bf4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   15bc0:	490d      	ldr	r1, [pc, #52]	; (15bf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   15bc2:	480e      	ldr	r0, [pc, #56]	; (15bfc <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   15bc4:	f240 1339 	movw	r3, #313	; 0x139
   15bc8:	f00e fd90 	bl	246ec <assert_print>
   15bcc:	480c      	ldr	r0, [pc, #48]	; (15c00 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   15bce:	4621      	mov	r1, r4
   15bd0:	f00e fd8c 	bl	246ec <assert_print>
   15bd4:	4807      	ldr	r0, [pc, #28]	; (15bf4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   15bd6:	f240 1139 	movw	r1, #313	; 0x139
   15bda:	f00e fd80 	bl	246de <assert_post_action>
  MPU->RNR = rnr;
   15bde:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15be2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   15be6:	3001      	adds	r0, #1
   15be8:	e7e6      	b.n	15bb8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
   15bea:	bf00      	nop
   15bec:	2000313b 	.word	0x2000313b
   15bf0:	e000ed00 	.word	0xe000ed00
   15bf4:	00028f0a 	.word	0x00028f0a
   15bf8:	0002ab0f 	.word	0x0002ab0f
   15bfc:	00027f8a 	.word	0x00027f8a
   15c00:	00028f6d 	.word	0x00028f6d

00015c04 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15c04:	4925      	ldr	r1, [pc, #148]	; (15c9c <z_arm_mpu_init+0x98>)
{
   15c06:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15c08:	680c      	ldr	r4, [r1, #0]
   15c0a:	2c08      	cmp	r4, #8
   15c0c:	d910      	bls.n	15c30 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   15c0e:	4a24      	ldr	r2, [pc, #144]	; (15ca0 <z_arm_mpu_init+0x9c>)
   15c10:	4924      	ldr	r1, [pc, #144]	; (15ca4 <z_arm_mpu_init+0xa0>)
   15c12:	4825      	ldr	r0, [pc, #148]	; (15ca8 <z_arm_mpu_init+0xa4>)
   15c14:	f240 1351 	movw	r3, #337	; 0x151
   15c18:	f00e fd68 	bl	246ec <assert_print>
   15c1c:	4621      	mov	r1, r4
   15c1e:	4823      	ldr	r0, [pc, #140]	; (15cac <z_arm_mpu_init+0xa8>)
   15c20:	2208      	movs	r2, #8
   15c22:	f00e fd63 	bl	246ec <assert_print>
   15c26:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   15c2a:	481d      	ldr	r0, [pc, #116]	; (15ca0 <z_arm_mpu_init+0x9c>)
   15c2c:	f00e fd57 	bl	246de <assert_post_action>
	arm_core_mpu_disable();
   15c30:	f7ff ff86 	bl	15b40 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15c34:	6848      	ldr	r0, [r1, #4]
   15c36:	491e      	ldr	r1, [pc, #120]	; (15cb0 <z_arm_mpu_init+0xac>)
   15c38:	2200      	movs	r2, #0
   15c3a:	4294      	cmp	r4, r2
   15c3c:	f100 000c 	add.w	r0, r0, #12
   15c40:	d116      	bne.n	15c70 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
   15c42:	4b1c      	ldr	r3, [pc, #112]	; (15cb4 <z_arm_mpu_init+0xb0>)
   15c44:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   15c46:	f7ff ff6f 	bl	15b28 <arm_core_mpu_enable>
	__ASSERT(
   15c4a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   15c4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15c52:	2b08      	cmp	r3, #8
   15c54:	d01f      	beq.n	15c96 <z_arm_mpu_init+0x92>
   15c56:	4918      	ldr	r1, [pc, #96]	; (15cb8 <z_arm_mpu_init+0xb4>)
   15c58:	4a11      	ldr	r2, [pc, #68]	; (15ca0 <z_arm_mpu_init+0x9c>)
   15c5a:	4813      	ldr	r0, [pc, #76]	; (15ca8 <z_arm_mpu_init+0xa4>)
   15c5c:	f240 13b7 	movw	r3, #439	; 0x1b7
   15c60:	f00e fd44 	bl	246ec <assert_print>
   15c64:	4815      	ldr	r0, [pc, #84]	; (15cbc <z_arm_mpu_init+0xb8>)
   15c66:	f00e fd41 	bl	246ec <assert_print>
   15c6a:	f240 11b7 	movw	r1, #439	; 0x1b7
   15c6e:	e7dc      	b.n	15c2a <z_arm_mpu_init+0x26>
   15c70:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15c74:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   15c78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15c7c:	4313      	orrs	r3, r2
   15c7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15c82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15c86:	f850 3c04 	ldr.w	r3, [r0, #-4]
   15c8a:	f043 0301 	orr.w	r3, r3, #1
   15c8e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15c92:	3201      	adds	r2, #1
   15c94:	e7d1      	b.n	15c3a <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   15c96:	2000      	movs	r0, #0
   15c98:	bd10      	pop	{r4, pc}
   15c9a:	bf00      	nop
   15c9c:	00027618 	.word	0x00027618
   15ca0:	00028f0a 	.word	0x00028f0a
   15ca4:	0002ab0f 	.word	0x0002ab0f
   15ca8:	00027f8a 	.word	0x00027f8a
   15cac:	00028f9a 	.word	0x00028f9a
   15cb0:	e000ed00 	.word	0xe000ed00
   15cb4:	2000313b 	.word	0x2000313b
   15cb8:	00028fce 	.word	0x00028fce
   15cbc:	0002901e 	.word	0x0002901e

00015cc0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15cc0:	4b01      	ldr	r3, [pc, #4]	; (15cc8 <__stdout_hook_install+0x8>)
   15cc2:	6018      	str	r0, [r3, #0]
}
   15cc4:	4770      	bx	lr
   15cc6:	bf00      	nop
   15cc8:	2000060c 	.word	0x2000060c

00015ccc <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   15ccc:	b40c      	push	{r2, r3}
   15cce:	b510      	push	{r4, lr}
   15cd0:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   15cd2:	b909      	cbnz	r1, 15cd8 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   15cd4:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   15cd8:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   15cda:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   15cde:	ab09      	add	r3, sp, #36	; 0x24
   15ce0:	9a08      	ldr	r2, [sp, #32]
   15ce2:	9400      	str	r4, [sp, #0]
   15ce4:	a904      	add	r1, sp, #16
   15ce6:	4805      	ldr	r0, [pc, #20]	; (15cfc <snprintf+0x30>)
   15ce8:	9303      	str	r3, [sp, #12]
   15cea:	f7fb f945 	bl	10f78 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   15cee:	9b04      	ldr	r3, [sp, #16]
   15cf0:	701c      	strb	r4, [r3, #0]
	return r;
}
   15cf2:	b006      	add	sp, #24
   15cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15cf8:	b002      	add	sp, #8
   15cfa:	4770      	bx	lr
   15cfc:	00024f35 	.word	0x00024f35

00015d00 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15d00:	f04f 0340 	mov.w	r3, #64	; 0x40
   15d04:	f3ef 8211 	mrs	r2, BASEPRI
   15d08:	f383 8812 	msr	BASEPRI_MAX, r3
   15d0c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15d10:	4906      	ldr	r1, [pc, #24]	; (15d2c <nordicsemi_nrf52_init+0x2c>)
   15d12:	2301      	movs	r3, #1
   15d14:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15d18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15d1c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15d20:	f382 8811 	msr	BASEPRI, r2
   15d24:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15d28:	2000      	movs	r0, #0
   15d2a:	4770      	bx	lr
   15d2c:	4001e000 	.word	0x4001e000

00015d30 <sys_arch_reboot>:
    *p_gpregret = val;
   15d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15d34:	b2c0      	uxtb	r0, r0
   15d36:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15d3a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15d3e:	4905      	ldr	r1, [pc, #20]	; (15d54 <sys_arch_reboot+0x24>)
   15d40:	4b05      	ldr	r3, [pc, #20]	; (15d58 <sys_arch_reboot+0x28>)
   15d42:	68ca      	ldr	r2, [r1, #12]
   15d44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15d48:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15d4a:	60cb      	str	r3, [r1, #12]
   15d4c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15d50:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15d52:	e7fd      	b.n	15d50 <sys_arch_reboot+0x20>
   15d54:	e000ed00 	.word	0xe000ed00
   15d58:	05fa0004 	.word	0x05fa0004

00015d5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15d5c:	b120      	cbz	r0, 15d68 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15d5e:	4b03      	ldr	r3, [pc, #12]	; (15d6c <arch_busy_wait+0x10>)
   15d60:	0180      	lsls	r0, r0, #6
   15d62:	f043 0301 	orr.w	r3, r3, #1
   15d66:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15d68:	4770      	bx	lr
   15d6a:	bf00      	nop
   15d6c:	000274d0 	.word	0x000274d0

00015d70 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   15d70:	b508      	push	{r3, lr}
   15d72:	4804      	ldr	r0, [pc, #16]	; (15d84 <xoshiro128_initialize+0x14>)
   15d74:	f010 ff4b 	bl	26c0e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   15d78:	2800      	cmp	r0, #0
}
   15d7a:	bf0c      	ite	eq
   15d7c:	f06f 0012 	mvneq.w	r0, #18
   15d80:	2000      	movne	r0, #0
   15d82:	bd08      	pop	{r3, pc}
   15d84:	00027130 	.word	0x00027130

00015d88 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15d88:	4b0e      	ldr	r3, [pc, #56]	; (15dc4 <bt_hex+0x3c>)
   15d8a:	2940      	cmp	r1, #64	; 0x40
{
   15d8c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15d8e:	bf28      	it	cs
   15d90:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   15d92:	4c0d      	ldr	r4, [pc, #52]	; (15dc8 <bt_hex+0x40>)
   15d94:	1846      	adds	r6, r0, r1
   15d96:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15d98:	42b0      	cmp	r0, r6
   15d9a:	f103 0302 	add.w	r3, r3, #2
   15d9e:	d104      	bne.n	15daa <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15da0:	2300      	movs	r3, #0
   15da2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15da6:	4807      	ldr	r0, [pc, #28]	; (15dc4 <bt_hex+0x3c>)
   15da8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15daa:	7802      	ldrb	r2, [r0, #0]
   15dac:	0912      	lsrs	r2, r2, #4
   15dae:	5ca2      	ldrb	r2, [r4, r2]
   15db0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15db4:	f810 2b01 	ldrb.w	r2, [r0], #1
   15db8:	f002 020f 	and.w	r2, r2, #15
   15dbc:	5ca2      	ldrb	r2, [r4, r2]
   15dbe:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15dc2:	e7e9      	b.n	15d98 <bt_hex+0x10>
   15dc4:	2000315a 	.word	0x2000315a
   15dc8:	0002906c 	.word	0x0002906c

00015dcc <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15dcc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15dce:	7803      	ldrb	r3, [r0, #0]
   15dd0:	b08b      	sub	sp, #44	; 0x2c
   15dd2:	4604      	mov	r4, r0
   15dd4:	ad07      	add	r5, sp, #28
   15dd6:	2b03      	cmp	r3, #3
   15dd8:	d821      	bhi.n	15e1e <bt_addr_le_str+0x52>
   15dda:	e8df f003 	tbb	[pc, r3]
   15dde:	1a02      	.short	0x1a02
   15de0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15de2:	4912      	ldr	r1, [pc, #72]	; (15e2c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   15de4:	4628      	mov	r0, r5
   15de6:	f00f f864 	bl	24eb2 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15dea:	9505      	str	r5, [sp, #20]
   15dec:	7863      	ldrb	r3, [r4, #1]
   15dee:	9304      	str	r3, [sp, #16]
   15df0:	78a3      	ldrb	r3, [r4, #2]
   15df2:	9303      	str	r3, [sp, #12]
   15df4:	78e3      	ldrb	r3, [r4, #3]
   15df6:	9302      	str	r3, [sp, #8]
   15df8:	7923      	ldrb	r3, [r4, #4]
   15dfa:	9301      	str	r3, [sp, #4]
   15dfc:	7963      	ldrb	r3, [r4, #5]
   15dfe:	9300      	str	r3, [sp, #0]
   15e00:	79a3      	ldrb	r3, [r4, #6]
   15e02:	4a0b      	ldr	r2, [pc, #44]	; (15e30 <bt_addr_le_str+0x64>)
   15e04:	480b      	ldr	r0, [pc, #44]	; (15e34 <bt_addr_le_str+0x68>)
   15e06:	211e      	movs	r1, #30
   15e08:	f00e fa46 	bl	24298 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15e0c:	4809      	ldr	r0, [pc, #36]	; (15e34 <bt_addr_le_str+0x68>)
   15e0e:	b00b      	add	sp, #44	; 0x2c
   15e10:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15e12:	4909      	ldr	r1, [pc, #36]	; (15e38 <bt_addr_le_str+0x6c>)
   15e14:	e7e6      	b.n	15de4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   15e16:	4909      	ldr	r1, [pc, #36]	; (15e3c <bt_addr_le_str+0x70>)
   15e18:	e7e4      	b.n	15de4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   15e1a:	4909      	ldr	r1, [pc, #36]	; (15e40 <bt_addr_le_str+0x74>)
   15e1c:	e7e2      	b.n	15de4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15e1e:	4a09      	ldr	r2, [pc, #36]	; (15e44 <bt_addr_le_str+0x78>)
   15e20:	210a      	movs	r1, #10
   15e22:	4628      	mov	r0, r5
   15e24:	f00e fa38 	bl	24298 <snprintk>
		break;
   15e28:	e7df      	b.n	15dea <bt_addr_le_str+0x1e>
   15e2a:	bf00      	nop
   15e2c:	00027c60 	.word	0x00027c60
   15e30:	00027c82 	.word	0x00027c82
   15e34:	2000313c 	.word	0x2000313c
   15e38:	00027c67 	.word	0x00027c67
   15e3c:	00027c6e 	.word	0x00027c6e
   15e40:	00027c78 	.word	0x00027c78
   15e44:	0002a1bb 	.word	0x0002a1bb

00015e48 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   15e48:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15e4a:	4d0a      	ldr	r5, [pc, #40]	; (15e74 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15e4c:	4b0a      	ldr	r3, [pc, #40]	; (15e78 <long_wq_init+0x30>)
{
   15e4e:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15e50:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15e52:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15e54:	9302      	str	r3, [sp, #8]
   15e56:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15e58:	f00b fa62 	bl	21320 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15e5c:	ab02      	add	r3, sp, #8
   15e5e:	9300      	str	r3, [sp, #0]
   15e60:	4628      	mov	r0, r5
   15e62:	4906      	ldr	r1, [pc, #24]	; (15e7c <long_wq_init+0x34>)
   15e64:	230a      	movs	r3, #10
   15e66:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15e6a:	f00b fa73 	bl	21354 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15e6e:	4620      	mov	r0, r4
   15e70:	b005      	add	sp, #20
   15e72:	bd30      	pop	{r4, r5, pc}
   15e74:	20001c70 	.word	0x20001c70
   15e78:	0002907d 	.word	0x0002907d
   15e7c:	20003f80 	.word	0x20003f80

00015e80 <bt_long_wq_schedule>:
{
   15e80:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15e82:	4801      	ldr	r0, [pc, #4]	; (15e88 <bt_long_wq_schedule+0x8>)
   15e84:	f00b bafa 	b.w	2147c <k_work_schedule_for_queue>
   15e88:	20001c70 	.word	0x20001c70

00015e8c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15e8c:	b430      	push	{r4, r5}
   15e8e:	4603      	mov	r3, r0
   15e90:	4608      	mov	r0, r1
	switch (src->type) {
   15e92:	781a      	ldrb	r2, [r3, #0]
   15e94:	2a01      	cmp	r2, #1
   15e96:	d013      	beq.n	15ec0 <uuid_to_uuid128+0x34>
   15e98:	2a02      	cmp	r2, #2
   15e9a:	d026      	beq.n	15eea <uuid_to_uuid128+0x5e>
   15e9c:	b972      	cbnz	r2, 15ebc <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15e9e:	4a15      	ldr	r2, [pc, #84]	; (15ef4 <uuid_to_uuid128+0x68>)
   15ea0:	f102 0410 	add.w	r4, r2, #16
   15ea4:	f852 5b04 	ldr.w	r5, [r2], #4
   15ea8:	f841 5b04 	str.w	r5, [r1], #4
   15eac:	42a2      	cmp	r2, r4
   15eae:	d1f9      	bne.n	15ea4 <uuid_to_uuid128+0x18>
   15eb0:	7812      	ldrb	r2, [r2, #0]
   15eb2:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15eb4:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   15eb6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15eb8:	0a1b      	lsrs	r3, r3, #8
   15eba:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15ebc:	bc30      	pop	{r4, r5}
   15ebe:	4770      	bx	lr
		*dst = uuid128_base;
   15ec0:	4a0c      	ldr	r2, [pc, #48]	; (15ef4 <uuid_to_uuid128+0x68>)
   15ec2:	f102 0410 	add.w	r4, r2, #16
   15ec6:	f852 5b04 	ldr.w	r5, [r2], #4
   15eca:	f841 5b04 	str.w	r5, [r1], #4
   15ece:	42a2      	cmp	r2, r4
   15ed0:	d1f9      	bne.n	15ec6 <uuid_to_uuid128+0x3a>
   15ed2:	7812      	ldrb	r2, [r2, #0]
   15ed4:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15ed6:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15ed8:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15eda:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   15ede:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15ee0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15ee2:	0a1b      	lsrs	r3, r3, #8
   15ee4:	7382      	strb	r2, [r0, #14]
   15ee6:	7403      	strb	r3, [r0, #16]
}
   15ee8:	e7e8      	b.n	15ebc <uuid_to_uuid128+0x30>
}
   15eea:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15eec:	2211      	movs	r2, #17
   15eee:	4619      	mov	r1, r3
   15ef0:	f00f b809 	b.w	24f06 <memcpy>
   15ef4:	00029086 	.word	0x00029086

00015ef8 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15ef8:	2805      	cmp	r0, #5
{
   15efa:	b538      	push	{r3, r4, r5, lr}
   15efc:	4605      	mov	r5, r0
   15efe:	d803      	bhi.n	15f08 <bt_buf_get_rx+0x10>
   15f00:	212a      	movs	r1, #42	; 0x2a
   15f02:	40c1      	lsrs	r1, r0
   15f04:	07c9      	lsls	r1, r1, #31
   15f06:	d40c      	bmi.n	15f22 <bt_buf_get_rx+0x2a>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15f08:	490c      	ldr	r1, [pc, #48]	; (15f3c <bt_buf_get_rx+0x44>)
   15f0a:	4a0d      	ldr	r2, [pc, #52]	; (15f40 <bt_buf_get_rx+0x48>)
   15f0c:	480d      	ldr	r0, [pc, #52]	; (15f44 <bt_buf_get_rx+0x4c>)
   15f0e:	233d      	movs	r3, #61	; 0x3d
   15f10:	f00e fbec 	bl	246ec <assert_print>
   15f14:	480c      	ldr	r0, [pc, #48]	; (15f48 <bt_buf_get_rx+0x50>)
   15f16:	f00e fbe9 	bl	246ec <assert_print>
   15f1a:	4809      	ldr	r0, [pc, #36]	; (15f40 <bt_buf_get_rx+0x48>)
   15f1c:	213d      	movs	r1, #61	; 0x3d
   15f1e:	f00e fbde 	bl	246de <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   15f22:	480a      	ldr	r0, [pc, #40]	; (15f4c <bt_buf_get_rx+0x54>)
   15f24:	f010 f9dd 	bl	262e2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15f28:	4604      	mov	r4, r0
   15f2a:	b120      	cbz	r0, 15f36 <bt_buf_get_rx+0x3e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   15f2c:	2100      	movs	r1, #0
   15f2e:	300c      	adds	r0, #12
   15f30:	f006 f92e 	bl	1c190 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15f34:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15f36:	4620      	mov	r0, r4
   15f38:	bd38      	pop	{r3, r4, r5, pc}
   15f3a:	bf00      	nop
   15f3c:	000290c6 	.word	0x000290c6
   15f40:	00029097 	.word	0x00029097
   15f44:	00027f8a 	.word	0x00027f8a
   15f48:	0002910b 	.word	0x0002910b
   15f4c:	20000a78 	.word	0x20000a78

00015f50 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15f50:	b570      	push	{r4, r5, r6, lr}
   15f52:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15f54:	480d      	ldr	r0, [pc, #52]	; (15f8c <bt_buf_get_cmd_complete+0x3c>)
   15f56:	f3bf 8f5b 	dmb	ish
   15f5a:	460b      	mov	r3, r1
   15f5c:	2100      	movs	r1, #0
   15f5e:	e850 4f00 	ldrex	r4, [r0]
   15f62:	e840 1500 	strex	r5, r1, [r0]
   15f66:	2d00      	cmp	r5, #0
   15f68:	d1f9      	bne.n	15f5e <bt_buf_get_cmd_complete+0xe>
   15f6a:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   15f6e:	b924      	cbnz	r4, 15f7a <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15f74:	2001      	movs	r0, #1
   15f76:	f7ff bfbf 	b.w	15ef8 <bt_buf_get_rx>
   15f7a:	2301      	movs	r3, #1
   15f7c:	f104 000c 	add.w	r0, r4, #12
   15f80:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   15f82:	8221      	strh	r1, [r4, #16]
   15f84:	f006 f904 	bl	1c190 <net_buf_simple_reserve>
}
   15f88:	4620      	mov	r0, r4
   15f8a:	bd70      	pop	{r4, r5, r6, pc}
   15f8c:	200004c0 	.word	0x200004c0

00015f90 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15f90:	b570      	push	{r4, r5, r6, lr}
   15f92:	4604      	mov	r4, r0
	switch (evt) {
   15f94:	2c0f      	cmp	r4, #15
{
   15f96:	460d      	mov	r5, r1
   15f98:	4610      	mov	r0, r2
   15f9a:	4619      	mov	r1, r3
	switch (evt) {
   15f9c:	d805      	bhi.n	15faa <bt_buf_get_evt+0x1a>
   15f9e:	2c0d      	cmp	r4, #13
   15fa0:	d90d      	bls.n	15fbe <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15fa6:	f7ff bfd3 	b.w	15f50 <bt_buf_get_cmd_complete>
	switch (evt) {
   15faa:	2c13      	cmp	r4, #19
   15fac:	d107      	bne.n	15fbe <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15fae:	480c      	ldr	r0, [pc, #48]	; (15fe0 <bt_buf_get_evt+0x50>)
   15fb0:	f010 f997 	bl	262e2 <net_buf_alloc_fixed>
			if (buf) {
   15fb4:	4604      	mov	r4, r0
   15fb6:	b938      	cbnz	r0, 15fc8 <bt_buf_get_evt+0x38>
{
   15fb8:	2400      	movs	r4, #0
}
   15fba:	4620      	mov	r0, r4
   15fbc:	bd70      	pop	{r4, r5, r6, pc}
   15fbe:	4602      	mov	r2, r0
   15fc0:	460b      	mov	r3, r1
		if (discardable) {
   15fc2:	b145      	cbz	r5, 15fd6 <bt_buf_get_evt+0x46>
   15fc4:	4807      	ldr	r0, [pc, #28]	; (15fe4 <bt_buf_get_evt+0x54>)
   15fc6:	e7f3      	b.n	15fb0 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15fc8:	2100      	movs	r1, #0
   15fca:	300c      	adds	r0, #12
   15fcc:	f006 f8e0 	bl	1c190 <net_buf_simple_reserve>
   15fd0:	2301      	movs	r3, #1
   15fd2:	7623      	strb	r3, [r4, #24]
}
   15fd4:	e7f1      	b.n	15fba <bt_buf_get_evt+0x2a>
}
   15fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15fda:	2001      	movs	r0, #1
   15fdc:	f7ff bf8c 	b.w	15ef8 <bt_buf_get_rx>
   15fe0:	20000aac 	.word	0x20000aac
   15fe4:	200009dc 	.word	0x200009dc

00015fe8 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   15fe8:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15fea:	4d0c      	ldr	r5, [pc, #48]	; (1601c <ver_str+0x34>)
{
   15fec:	4606      	mov	r6, r0
	const char * const str[] = {
   15fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15ff0:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15ff2:	466c      	mov	r4, sp
   15ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15ffe:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   16002:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   16004:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   16008:	bf9b      	ittet	ls
   1600a:	ab0e      	addls	r3, sp, #56	; 0x38
   1600c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   16010:	4803      	ldrhi	r0, [pc, #12]	; (16020 <ver_str+0x38>)
		return str[ver];
   16012:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   16016:	b00e      	add	sp, #56	; 0x38
   16018:	bd70      	pop	{r4, r5, r6, pc}
   1601a:	bf00      	nop
   1601c:	00027480 	.word	0x00027480
   16020:	00029133 	.word	0x00029133

00016024 <hci_disconn_complete_prio>:
{
   16024:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16026:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16028:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   1602c:	781b      	ldrb	r3, [r3, #0]
   1602e:	b963      	cbnz	r3, 1604a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   16030:	4620      	mov	r0, r4
   16032:	f002 fe2b 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   16036:	4605      	mov	r5, r0
   16038:	b940      	cbnz	r0, 1604c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1603a:	4b08      	ldr	r3, [pc, #32]	; (1605c <hci_disconn_complete_prio+0x38>)
   1603c:	881a      	ldrh	r2, [r3, #0]
   1603e:	b922      	cbnz	r2, 1604a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16040:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   16044:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   16048:	8018      	strh	r0, [r3, #0]
}
   1604a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1604c:	2101      	movs	r1, #1
   1604e:	f002 fe25 	bl	18c9c <bt_conn_set_state>
	bt_conn_unref(conn);
   16052:	4628      	mov	r0, r5
}
   16054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   16058:	f002 bde0 	b.w	18c1c <bt_conn_unref>
   1605c:	20003108 	.word	0x20003108

00016060 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16060:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16062:	4c08      	ldr	r4, [pc, #32]	; (16084 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16064:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16066:	2205      	movs	r2, #5
   16068:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   1606c:	f003 f896 	bl	1919c <bt_conn_lookup_state_le>
		if (!conn) {
   16070:	b938      	cbnz	r0, 16082 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16072:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   16076:	4904      	ldr	r1, [pc, #16]	; (16088 <find_pending_connect.part.0+0x28>)
}
   16078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1607c:	2204      	movs	r2, #4
   1607e:	f003 b88d 	b.w	1919c <bt_conn_lookup_state_le>
}
   16082:	bd10      	pop	{r4, pc}
   16084:	20000388 	.word	0x20000388
   16088:	00029052 	.word	0x00029052

0001608c <hci_data_buf_overflow>:
{
   1608c:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1608e:	68c3      	ldr	r3, [r0, #12]
{
   16090:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16092:	b088      	sub	sp, #32
   16094:	781b      	ldrb	r3, [r3, #0]
   16096:	466a      	mov	r2, sp
   16098:	4906      	ldr	r1, [pc, #24]	; (160b4 <hci_data_buf_overflow+0x28>)
   1609a:	4807      	ldr	r0, [pc, #28]	; (160b8 <hci_data_buf_overflow+0x2c>)
   1609c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   160a0:	2303      	movs	r3, #3
   160a2:	f842 3f10 	str.w	r3, [r2, #16]!
   160a6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   160aa:	f00e ffe9 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   160ae:	46bd      	mov	sp, r7
   160b0:	bd80      	pop	{r7, pc}
   160b2:	bf00      	nop
   160b4:	0002913b 	.word	0x0002913b
   160b8:	00027368 	.word	0x00027368

000160bc <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   160bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   160be:	4b06      	ldr	r3, [pc, #24]	; (160d8 <le_conn_param_neg_reply.part.0+0x1c>)
   160c0:	9305      	str	r3, [sp, #20]
   160c2:	4806      	ldr	r0, [pc, #24]	; (160dc <le_conn_param_neg_reply.part.0+0x20>)
   160c4:	2302      	movs	r3, #2
   160c6:	aa04      	add	r2, sp, #16
   160c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   160cc:	9304      	str	r3, [sp, #16]
   160ce:	f00e ffd7 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   160d2:	b007      	add	sp, #28
   160d4:	f85d fb04 	ldr.w	pc, [sp], #4
   160d8:	00029163 	.word	0x00029163
   160dc:	00027368 	.word	0x00027368

000160e0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   160e0:	b598      	push	{r3, r4, r7, lr}
   160e2:	4601      	mov	r1, r0
   160e4:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   160e6:	480d      	ldr	r0, [pc, #52]	; (1611c <rx_queue_put+0x3c>)
   160e8:	f005 fea0 	bl	1be2c <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   160ec:	490c      	ldr	r1, [pc, #48]	; (16120 <rx_queue_put+0x40>)
   160ee:	480d      	ldr	r0, [pc, #52]	; (16124 <rx_queue_put+0x44>)
   160f0:	f010 fe6d 	bl	26dce <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   160f4:	2800      	cmp	r0, #0
   160f6:	da0e      	bge.n	16116 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   160f8:	466c      	mov	r4, sp
   160fa:	b088      	sub	sp, #32
   160fc:	466a      	mov	r2, sp
   160fe:	4b0a      	ldr	r3, [pc, #40]	; (16128 <rx_queue_put+0x48>)
   16100:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16104:	2303      	movs	r3, #3
   16106:	f842 3f10 	str.w	r3, [r2, #16]!
   1610a:	4808      	ldr	r0, [pc, #32]	; (1612c <rx_queue_put+0x4c>)
   1610c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16110:	f00e ffb6 	bl	25080 <z_log_msg_static_create.constprop.0>
   16114:	46a5      	mov	sp, r4
	}
}
   16116:	46bd      	mov	sp, r7
   16118:	bd98      	pop	{r3, r4, r7, pc}
   1611a:	bf00      	nop
   1611c:	200004c4 	.word	0x200004c4
   16120:	2000064c 	.word	0x2000064c
   16124:	20001e20 	.word	0x20001e20
   16128:	0002917d 	.word	0x0002917d
   1612c:	00027368 	.word	0x00027368

00016130 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16130:	b5b0      	push	{r4, r5, r7, lr}
   16132:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16134:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16136:	af00      	add	r7, sp, #0
   16138:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1613a:	4629      	mov	r1, r5
   1613c:	68d8      	ldr	r0, [r3, #12]
   1613e:	f7ff fe23 	bl	15d88 <bt_hex>
   16142:	b08a      	sub	sp, #40	; 0x28
   16144:	466a      	mov	r2, sp
   16146:	4b09      	ldr	r3, [pc, #36]	; (1616c <handle_event.part.0+0x3c>)
   16148:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1614c:	f240 4302 	movw	r3, #1026	; 0x402
   16150:	8493      	strh	r3, [r2, #36]	; 0x24
   16152:	4b07      	ldr	r3, [pc, #28]	; (16170 <handle_event.part.0+0x40>)
   16154:	e9c2 5007 	strd	r5, r0, [r2, #28]
   16158:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   1615c:	f842 3f10 	str.w	r3, [r2, #16]!
   16160:	4804      	ldr	r0, [pc, #16]	; (16174 <handle_event.part.0+0x44>)
   16162:	f00e ff8d 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   16166:	46bd      	mov	sp, r7
   16168:	bdb0      	pop	{r4, r5, r7, pc}
   1616a:	bf00      	nop
   1616c:	0002919a 	.word	0x0002919a
   16170:	01000005 	.word	0x01000005
   16174:	00027368 	.word	0x00027368

00016178 <hci_hardware_error>:
{
   16178:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1617a:	2101      	movs	r1, #1
   1617c:	af00      	add	r7, sp, #0
   1617e:	300c      	adds	r0, #12
   16180:	f006 f866 	bl	1c250 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16184:	b088      	sub	sp, #32
   16186:	7803      	ldrb	r3, [r0, #0]
   16188:	466a      	mov	r2, sp
   1618a:	4906      	ldr	r1, [pc, #24]	; (161a4 <hci_hardware_error+0x2c>)
   1618c:	4806      	ldr	r0, [pc, #24]	; (161a8 <hci_hardware_error+0x30>)
   1618e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16192:	2303      	movs	r3, #3
   16194:	f842 3f10 	str.w	r3, [r2, #16]!
   16198:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1619c:	f00e ff70 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   161a0:	46bd      	mov	sp, r7
   161a2:	bd80      	pop	{r7, pc}
   161a4:	000291bc 	.word	0x000291bc
   161a8:	00027368 	.word	0x00027368

000161ac <le_data_len_change>:
{
   161ac:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161ae:	68c3      	ldr	r3, [r0, #12]
   161b0:	881c      	ldrh	r4, [r3, #0]
{
   161b2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   161b4:	4620      	mov	r0, r4
   161b6:	f002 fd69 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   161ba:	b980      	cbnz	r0, 161de <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   161bc:	466d      	mov	r5, sp
   161be:	b088      	sub	sp, #32
   161c0:	466a      	mov	r2, sp
   161c2:	4b08      	ldr	r3, [pc, #32]	; (161e4 <le_data_len_change+0x38>)
   161c4:	4808      	ldr	r0, [pc, #32]	; (161e8 <le_data_len_change+0x3c>)
   161c6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   161ca:	2303      	movs	r3, #3
   161cc:	f842 3f10 	str.w	r3, [r2, #16]!
   161d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161d4:	f00e ff54 	bl	25080 <z_log_msg_static_create.constprop.0>
   161d8:	46ad      	mov	sp, r5
}
   161da:	46bd      	mov	sp, r7
   161dc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   161de:	f002 fd1d 	bl	18c1c <bt_conn_unref>
   161e2:	e7fa      	b.n	161da <le_data_len_change+0x2e>
   161e4:	000291de 	.word	0x000291de
   161e8:	00027368 	.word	0x00027368

000161ec <le_phy_update_complete>:
{
   161ec:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161ee:	68c3      	ldr	r3, [r0, #12]
   161f0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   161f4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   161f6:	4620      	mov	r0, r4
   161f8:	f002 fd48 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   161fc:	b980      	cbnz	r0, 16220 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   161fe:	466d      	mov	r5, sp
   16200:	b088      	sub	sp, #32
   16202:	466a      	mov	r2, sp
   16204:	4b08      	ldr	r3, [pc, #32]	; (16228 <le_phy_update_complete+0x3c>)
   16206:	4809      	ldr	r0, [pc, #36]	; (1622c <le_phy_update_complete+0x40>)
   16208:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1620c:	2303      	movs	r3, #3
   1620e:	f842 3f10 	str.w	r3, [r2, #16]!
   16212:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16216:	f00e ff33 	bl	25080 <z_log_msg_static_create.constprop.0>
   1621a:	46ad      	mov	sp, r5
}
   1621c:	46bd      	mov	sp, r7
   1621e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16220:	f002 fcfc 	bl	18c1c <bt_conn_unref>
   16224:	e7fa      	b.n	1621c <le_phy_update_complete+0x30>
   16226:	bf00      	nop
   16228:	000291de 	.word	0x000291de
   1622c:	00027368 	.word	0x00027368

00016230 <hci_disconn_complete>:
{
   16230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16234:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   16236:	782e      	ldrb	r6, [r5, #0]
{
   16238:	af00      	add	r7, sp, #0
	if (evt->status) {
   1623a:	b9ae      	cbnz	r6, 16268 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1623c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16240:	4640      	mov	r0, r8
   16242:	f002 fd23 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   16246:	4604      	mov	r4, r0
   16248:	b988      	cbnz	r0, 1626e <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1624a:	466c      	mov	r4, sp
   1624c:	b088      	sub	sp, #32
   1624e:	466a      	mov	r2, sp
   16250:	4b0b      	ldr	r3, [pc, #44]	; (16280 <hci_disconn_complete+0x50>)
   16252:	480c      	ldr	r0, [pc, #48]	; (16284 <hci_disconn_complete+0x54>)
   16254:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16258:	2303      	movs	r3, #3
   1625a:	f842 3f10 	str.w	r3, [r2, #16]!
   1625e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16262:	f00e ff0d 	bl	25080 <z_log_msg_static_create.constprop.0>
   16266:	46a5      	mov	sp, r4
}
   16268:	46bd      	mov	sp, r7
   1626a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1626e:	78eb      	ldrb	r3, [r5, #3]
   16270:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16272:	4631      	mov	r1, r6
   16274:	f002 fd12 	bl	18c9c <bt_conn_set_state>
		bt_conn_unref(conn);
   16278:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1627a:	f002 fccf 	bl	18c1c <bt_conn_unref>
   1627e:	e7f3      	b.n	16268 <hci_disconn_complete+0x38>
   16280:	00029202 	.word	0x00029202
   16284:	00027368 	.word	0x00027368

00016288 <handle_event>:
{
   16288:	b5b0      	push	{r4, r5, r7, lr}
   1628a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1628e:	af00      	add	r7, sp, #0
   16290:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   16292:	4293      	cmp	r3, r2
   16294:	d103      	bne.n	1629e <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   16296:	4620      	mov	r0, r4
   16298:	f7ff ff4a 	bl	16130 <handle_event.part.0>
}
   1629c:	e018      	b.n	162d0 <handle_event+0x48>
		if (handler->event != event) {
   1629e:	4610      	mov	r0, r2
   162a0:	f810 5b08 	ldrb.w	r5, [r0], #8
   162a4:	42a5      	cmp	r5, r4
   162a6:	d119      	bne.n	162dc <handle_event+0x54>
		if (buf->len < handler->min_len) {
   162a8:	8a0b      	ldrh	r3, [r1, #16]
   162aa:	7850      	ldrb	r0, [r2, #1]
   162ac:	4298      	cmp	r0, r3
   162ae:	d911      	bls.n	162d4 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   162b0:	466d      	mov	r5, sp
   162b2:	b088      	sub	sp, #32
   162b4:	466a      	mov	r2, sp
   162b6:	490a      	ldr	r1, [pc, #40]	; (162e0 <handle_event+0x58>)
   162b8:	61d4      	str	r4, [r2, #28]
   162ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
   162be:	2304      	movs	r3, #4
   162c0:	f842 3f10 	str.w	r3, [r2, #16]!
   162c4:	4807      	ldr	r0, [pc, #28]	; (162e4 <handle_event+0x5c>)
   162c6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   162ca:	f00e fed9 	bl	25080 <z_log_msg_static_create.constprop.0>
   162ce:	46ad      	mov	sp, r5
}
   162d0:	46bd      	mov	sp, r7
   162d2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   162d4:	6853      	ldr	r3, [r2, #4]
   162d6:	4608      	mov	r0, r1
   162d8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   162da:	e7f9      	b.n	162d0 <handle_event+0x48>
   162dc:	4602      	mov	r2, r0
   162de:	e7d8      	b.n	16292 <handle_event+0xa>
   162e0:	00029228 	.word	0x00029228
   162e4:	00027368 	.word	0x00027368

000162e8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   162e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   162ea:	4855      	ldr	r0, [pc, #340]	; (16440 <rx_work_handler+0x158>)
{
   162ec:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   162ee:	f005 fe07 	bl	1bf00 <net_buf_slist_get>
	if (!buf) {
   162f2:	4604      	mov	r4, r0
   162f4:	2800      	cmp	r0, #0
   162f6:	d06a      	beq.n	163ce <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   162f8:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   162fa:	2b01      	cmp	r3, #1
   162fc:	d069      	beq.n	163d2 <rx_work_handler+0xea>
   162fe:	2b03      	cmp	r3, #3
   16300:	f040 8099 	bne.w	16436 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16304:	8a03      	ldrh	r3, [r0, #16]
   16306:	2b03      	cmp	r3, #3
   16308:	d80c      	bhi.n	16324 <rx_work_handler+0x3c>
   1630a:	4a4e      	ldr	r2, [pc, #312]	; (16444 <rx_work_handler+0x15c>)
   1630c:	494e      	ldr	r1, [pc, #312]	; (16448 <rx_work_handler+0x160>)
   1630e:	484f      	ldr	r0, [pc, #316]	; (1644c <rx_work_handler+0x164>)
   16310:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   16314:	f00e f9ea 	bl	246ec <assert_print>
   16318:	4040      	eors	r0, r0
   1631a:	f380 8811 	msr	BASEPRI, r0
   1631e:	f04f 0003 	mov.w	r0, #3
   16322:	df02      	svc	2
   16324:	2104      	movs	r1, #4
   16326:	f104 000c 	add.w	r0, r4, #12
   1632a:	f005 ff91 	bl	1c250 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1632e:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   16330:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   16332:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16334:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   16336:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1633a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1633c:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1633e:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   16340:	d010      	beq.n	16364 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   16342:	466d      	mov	r5, sp
   16344:	b088      	sub	sp, #32
   16346:	466a      	mov	r2, sp
   16348:	4841      	ldr	r0, [pc, #260]	; (16450 <rx_work_handler+0x168>)
   1634a:	61d3      	str	r3, [r2, #28]
   1634c:	2304      	movs	r3, #4
   1634e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   16352:	f842 3f10 	str.w	r3, [r2, #16]!
   16356:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1635a:	483e      	ldr	r0, [pc, #248]	; (16454 <rx_work_handler+0x16c>)
   1635c:	f00e fe90 	bl	25080 <z_log_msg_static_create.constprop.0>
   16360:	46ad      	mov	sp, r5
   16362:	e064      	b.n	1642e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16364:	f002 fc92 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   16368:	4605      	mov	r5, r0
   1636a:	b960      	cbnz	r0, 16386 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1636c:	466d      	mov	r5, sp
   1636e:	b088      	sub	sp, #32
   16370:	8b63      	ldrh	r3, [r4, #26]
   16372:	466a      	mov	r2, sp
   16374:	4938      	ldr	r1, [pc, #224]	; (16458 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   16376:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1637a:	2303      	movs	r3, #3
   1637c:	f842 3f10 	str.w	r3, [r2, #16]!
   16380:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16384:	e7e9      	b.n	1635a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   16386:	f002 fd8b 	bl	18ea0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1638a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   1638c:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1638e:	4621      	mov	r1, r4
   16390:	4628      	mov	r0, r5
   16392:	f002 fab5 	bl	18900 <bt_conn_recv>
	bt_conn_unref(conn);
   16396:	4628      	mov	r0, r5
   16398:	f002 fc40 	bl	18c1c <bt_conn_unref>
	return list->head;
   1639c:	4b2f      	ldr	r3, [pc, #188]	; (1645c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1639e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   163a2:	b1a3      	cbz	r3, 163ce <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   163a4:	492e      	ldr	r1, [pc, #184]	; (16460 <rx_work_handler+0x178>)
   163a6:	482f      	ldr	r0, [pc, #188]	; (16464 <rx_work_handler+0x17c>)
   163a8:	f010 fd11 	bl	26dce <k_work_submit_to_queue>
#endif
		if (err < 0) {
   163ac:	2800      	cmp	r0, #0
   163ae:	da0e      	bge.n	163ce <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   163b0:	466c      	mov	r4, sp
   163b2:	b088      	sub	sp, #32
   163b4:	466a      	mov	r2, sp
   163b6:	4b2c      	ldr	r3, [pc, #176]	; (16468 <rx_work_handler+0x180>)
   163b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   163bc:	2303      	movs	r3, #3
   163be:	f842 3f10 	str.w	r3, [r2, #16]!
   163c2:	4824      	ldr	r0, [pc, #144]	; (16454 <rx_work_handler+0x16c>)
   163c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   163c8:	f00e fe5a 	bl	25080 <z_log_msg_static_create.constprop.0>
   163cc:	46a5      	mov	sp, r4
		}
	}
}
   163ce:	46bd      	mov	sp, r7
   163d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   163d2:	8a03      	ldrh	r3, [r0, #16]
   163d4:	2b01      	cmp	r3, #1
   163d6:	d80c      	bhi.n	163f2 <rx_work_handler+0x10a>
   163d8:	4a1a      	ldr	r2, [pc, #104]	; (16444 <rx_work_handler+0x15c>)
   163da:	491b      	ldr	r1, [pc, #108]	; (16448 <rx_work_handler+0x160>)
   163dc:	481b      	ldr	r0, [pc, #108]	; (1644c <rx_work_handler+0x164>)
   163de:	f640 2347 	movw	r3, #2631	; 0xa47
   163e2:	f00e f983 	bl	246ec <assert_print>
   163e6:	4040      	eors	r0, r0
   163e8:	f380 8811 	msr	BASEPRI, r0
   163ec:	f04f 0003 	mov.w	r0, #3
   163f0:	df02      	svc	2
   163f2:	2102      	movs	r1, #2
   163f4:	f104 000c 	add.w	r0, r4, #12
   163f8:	f005 ff2a 	bl	1c250 <net_buf_simple_pull_mem>
   163fc:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   163fe:	7800      	ldrb	r0, [r0, #0]
   16400:	f00e fe1c 	bl	2503c <bt_hci_evt_get_flags>
   16404:	0783      	lsls	r3, r0, #30
   16406:	d40c      	bmi.n	16422 <rx_work_handler+0x13a>
   16408:	4a0e      	ldr	r2, [pc, #56]	; (16444 <rx_work_handler+0x15c>)
   1640a:	4918      	ldr	r1, [pc, #96]	; (1646c <rx_work_handler+0x184>)
   1640c:	480f      	ldr	r0, [pc, #60]	; (1644c <rx_work_handler+0x164>)
   1640e:	f640 234b 	movw	r3, #2635	; 0xa4b
   16412:	f00e f96b 	bl	246ec <assert_print>
   16416:	4040      	eors	r0, r0
   16418:	f380 8811 	msr	BASEPRI, r0
   1641c:	f04f 0003 	mov.w	r0, #3
   16420:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16422:	4a13      	ldr	r2, [pc, #76]	; (16470 <rx_work_handler+0x188>)
   16424:	7828      	ldrb	r0, [r5, #0]
   16426:	2304      	movs	r3, #4
   16428:	4621      	mov	r1, r4
   1642a:	f7ff ff2d 	bl	16288 <handle_event>
		net_buf_unref(buf);
   1642e:	4620      	mov	r0, r4
   16430:	f005 fde8 	bl	1c004 <net_buf_unref>
		break;
   16434:	e7b2      	b.n	1639c <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16436:	466d      	mov	r5, sp
   16438:	b088      	sub	sp, #32
   1643a:	466a      	mov	r2, sp
   1643c:	490d      	ldr	r1, [pc, #52]	; (16474 <rx_work_handler+0x18c>)
   1643e:	e79a      	b.n	16376 <rx_work_handler+0x8e>
   16440:	200004c4 	.word	0x200004c4
   16444:	0002924a 	.word	0x0002924a
   16448:	0002927e 	.word	0x0002927e
   1644c:	00027f8a 	.word	0x00027f8a
   16450:	00029297 	.word	0x00029297
   16454:	00027368 	.word	0x00027368
   16458:	000292bb 	.word	0x000292bb
   1645c:	20000388 	.word	0x20000388
   16460:	2000064c 	.word	0x2000064c
   16464:	20001e20 	.word	0x20001e20
   16468:	0002917d 	.word	0x0002917d
   1646c:	000292dd 	.word	0x000292dd
   16470:	000276c0 	.word	0x000276c0
   16474:	0002930b 	.word	0x0002930b

00016478 <hci_le_meta_event>:
{
   16478:	b510      	push	{r4, lr}
   1647a:	2101      	movs	r1, #1
   1647c:	4604      	mov	r4, r0
   1647e:	300c      	adds	r0, #12
   16480:	f005 fee6 	bl	1c250 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16484:	4621      	mov	r1, r4
   16486:	4a03      	ldr	r2, [pc, #12]	; (16494 <hci_le_meta_event+0x1c>)
   16488:	7800      	ldrb	r0, [r0, #0]
}
   1648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1648e:	2307      	movs	r3, #7
   16490:	f7ff befa 	b.w	16288 <handle_event>
   16494:	000276e0 	.word	0x000276e0

00016498 <le_remote_feat_complete>:
{
   16498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1649a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1649c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   164a0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   164a2:	4630      	mov	r0, r6
   164a4:	f002 fbf2 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   164a8:	4604      	mov	r4, r0
   164aa:	b980      	cbnz	r0, 164ce <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   164ac:	466c      	mov	r4, sp
   164ae:	b088      	sub	sp, #32
   164b0:	466a      	mov	r2, sp
   164b2:	4b0f      	ldr	r3, [pc, #60]	; (164f0 <le_remote_feat_complete+0x58>)
   164b4:	480f      	ldr	r0, [pc, #60]	; (164f4 <le_remote_feat_complete+0x5c>)
   164b6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   164ba:	2303      	movs	r3, #3
   164bc:	f842 3f10 	str.w	r3, [r2, #16]!
   164c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   164c4:	f00e fddc 	bl	25080 <z_log_msg_static_create.constprop.0>
   164c8:	46a5      	mov	sp, r4
}
   164ca:	46bd      	mov	sp, r7
   164cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   164ce:	782b      	ldrb	r3, [r5, #0]
   164d0:	b923      	cbnz	r3, 164dc <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   164d2:	2208      	movs	r2, #8
   164d4:	1ce9      	adds	r1, r5, #3
   164d6:	30b5      	adds	r0, #181	; 0xb5
   164d8:	f00e fd15 	bl	24f06 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   164dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   164e0:	1d20      	adds	r0, r4, #4
   164e2:	f00e fdbe 	bl	25062 <atomic_or>
	bt_conn_unref(conn);
   164e6:	4620      	mov	r0, r4
   164e8:	f002 fb98 	bl	18c1c <bt_conn_unref>
   164ec:	e7ed      	b.n	164ca <le_remote_feat_complete+0x32>
   164ee:	bf00      	nop
   164f0:	000291de 	.word	0x000291de
   164f4:	00027368 	.word	0x00027368

000164f8 <hci_cmd_done>:
{
   164f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   164fc:	4606      	mov	r6, r0
   164fe:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16500:	7a90      	ldrb	r0, [r2, #10]
   16502:	4d43      	ldr	r5, [pc, #268]	; (16610 <hci_cmd_done+0x118>)
{
   16504:	4688      	mov	r8, r1
   16506:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16508:	f005 fb68 	bl	1bbdc <net_buf_pool_get>
   1650c:	4285      	cmp	r5, r0
   1650e:	d018      	beq.n	16542 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16510:	7aa4      	ldrb	r4, [r4, #10]
   16512:	4620      	mov	r0, r4
   16514:	f005 fb62 	bl	1bbdc <net_buf_pool_get>
   16518:	46e8      	mov	r8, sp
   1651a:	b08a      	sub	sp, #40	; 0x28
   1651c:	466a      	mov	r2, sp
   1651e:	4b3d      	ldr	r3, [pc, #244]	; (16614 <hci_cmd_done+0x11c>)
   16520:	6255      	str	r5, [r2, #36]	; 0x24
   16522:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16526:	2306      	movs	r3, #6
   16528:	e9c2 4007 	strd	r4, r0, [r2, #28]
   1652c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   16530:	f842 3f10 	str.w	r3, [r2, #16]!
   16534:	4838      	ldr	r0, [pc, #224]	; (16618 <hci_cmd_done+0x120>)
   16536:	f00e fda3 	bl	25080 <z_log_msg_static_create.constprop.0>
   1653a:	46c5      	mov	sp, r8
}
   1653c:	46bd      	mov	sp, r7
   1653e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16542:	4620      	mov	r0, r4
   16544:	f005 fb52 	bl	1bbec <net_buf_id>
   16548:	4d34      	ldr	r5, [pc, #208]	; (1661c <hci_cmd_done+0x124>)
   1654a:	f04f 090c 	mov.w	r9, #12
   1654e:	fb09 5000 	mla	r0, r9, r0, r5
   16552:	8843      	ldrh	r3, [r0, #2]
   16554:	42b3      	cmp	r3, r6
   16556:	d016      	beq.n	16586 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   16558:	4620      	mov	r0, r4
   1655a:	f005 fb47 	bl	1bbec <net_buf_id>
   1655e:	fb09 5000 	mla	r0, r9, r0, r5
   16562:	466c      	mov	r4, sp
   16564:	b088      	sub	sp, #32
   16566:	8843      	ldrh	r3, [r0, #2]
   16568:	466a      	mov	r2, sp
   1656a:	492d      	ldr	r1, [pc, #180]	; (16620 <hci_cmd_done+0x128>)
   1656c:	61d3      	str	r3, [r2, #28]
   1656e:	2304      	movs	r3, #4
   16570:	e9c2 1605 	strd	r1, r6, [r2, #20]
   16574:	4828      	ldr	r0, [pc, #160]	; (16618 <hci_cmd_done+0x120>)
   16576:	f842 3f10 	str.w	r3, [r2, #16]!
   1657a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1657e:	f00e fd7f 	bl	25080 <z_log_msg_static_create.constprop.0>
   16582:	46a5      	mov	sp, r4
		return;
   16584:	e7da      	b.n	1653c <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   16586:	4e27      	ldr	r6, [pc, #156]	; (16624 <hci_cmd_done+0x12c>)
   16588:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1658c:	b120      	cbz	r0, 16598 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   1658e:	f005 fd39 	bl	1c004 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16592:	2300      	movs	r3, #0
   16594:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   16598:	4620      	mov	r0, r4
   1659a:	f005 fb27 	bl	1bbec <net_buf_id>
   1659e:	260c      	movs	r6, #12
   165a0:	fb06 5000 	mla	r0, r6, r0, r5
   165a4:	6843      	ldr	r3, [r0, #4]
   165a6:	b1ab      	cbz	r3, 165d4 <hci_cmd_done+0xdc>
   165a8:	f1b8 0f00 	cmp.w	r8, #0
   165ac:	d112      	bne.n	165d4 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   165ae:	4620      	mov	r0, r4
   165b0:	f005 fb1c 	bl	1bbec <net_buf_id>
   165b4:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   165b8:	2101      	movs	r1, #1
   165ba:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   165bc:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   165c0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   165c2:	f003 061f 	and.w	r6, r3, #31
   165c6:	40b1      	lsls	r1, r6
	if (val) {
   165c8:	095b      	lsrs	r3, r3, #5
   165ca:	b1da      	cbz	r2, 16604 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   165cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   165d0:	f00e fd47 	bl	25062 <atomic_or>
	if (cmd(buf)->sync) {
   165d4:	4620      	mov	r0, r4
   165d6:	f005 fb09 	bl	1bbec <net_buf_id>
   165da:	260c      	movs	r6, #12
   165dc:	fb06 5000 	mla	r0, r6, r0, r5
   165e0:	6883      	ldr	r3, [r0, #8]
   165e2:	2b00      	cmp	r3, #0
   165e4:	d0aa      	beq.n	1653c <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   165e6:	4620      	mov	r0, r4
   165e8:	f005 fb00 	bl	1bbec <net_buf_id>
   165ec:	4370      	muls	r0, r6
   165ee:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   165f2:	4620      	mov	r0, r4
   165f4:	f005 fafa 	bl	1bbec <net_buf_id>
   165f8:	fb06 5500 	mla	r5, r6, r0, r5
   165fc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   165fe:	f00a fb1b 	bl	20c38 <z_impl_k_sem_give>
}
   16602:	e79b      	b.n	1653c <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16604:	43c9      	mvns	r1, r1
   16606:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1660a:	f00e fd3c 	bl	25086 <atomic_and.isra.0>
   1660e:	e7e1      	b.n	165d4 <hci_cmd_done+0xdc>
   16610:	20000a44 	.word	0x20000a44
   16614:	0002931f 	.word	0x0002931f
   16618:	00027368 	.word	0x00027368
   1661c:	20002da0 	.word	0x20002da0
   16620:	00029354 	.word	0x00029354
   16624:	20000388 	.word	0x20000388

00016628 <hci_cmd_status>:
{
   16628:	b538      	push	{r3, r4, r5, lr}
   1662a:	2104      	movs	r1, #4
   1662c:	4604      	mov	r4, r0
   1662e:	300c      	adds	r0, #12
   16630:	f005 fe0e 	bl	1c250 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16634:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16636:	7801      	ldrb	r1, [r0, #0]
   16638:	8840      	ldrh	r0, [r0, #2]
   1663a:	4622      	mov	r2, r4
   1663c:	f7ff ff5c 	bl	164f8 <hci_cmd_done>
	if (ncmd) {
   16640:	b125      	cbz	r5, 1664c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   16642:	4803      	ldr	r0, [pc, #12]	; (16650 <hci_cmd_status+0x28>)
}
   16644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16648:	f00a baf6 	b.w	20c38 <z_impl_k_sem_give>
   1664c:	bd38      	pop	{r3, r4, r5, pc}
   1664e:	bf00      	nop
   16650:	200004a8 	.word	0x200004a8

00016654 <hci_cmd_complete>:
{
   16654:	b538      	push	{r3, r4, r5, lr}
   16656:	2103      	movs	r1, #3
   16658:	4604      	mov	r4, r0
   1665a:	300c      	adds	r0, #12
   1665c:	f005 fdf8 	bl	1c250 <net_buf_simple_pull_mem>
	status = buf->data[0];
   16660:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   16662:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16664:	7819      	ldrb	r1, [r3, #0]
   16666:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1666a:	4622      	mov	r2, r4
   1666c:	f7ff ff44 	bl	164f8 <hci_cmd_done>
	if (ncmd) {
   16670:	b125      	cbz	r5, 1667c <hci_cmd_complete+0x28>
   16672:	4803      	ldr	r0, [pc, #12]	; (16680 <hci_cmd_complete+0x2c>)
}
   16674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16678:	f00a bade 	b.w	20c38 <z_impl_k_sem_give>
   1667c:	bd38      	pop	{r3, r4, r5, pc}
   1667e:	bf00      	nop
   16680:	200004a8 	.word	0x200004a8

00016684 <hci_num_completed_packets>:
{
   16684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16688:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1668a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   1668e:	8a01      	ldrh	r1, [r0, #16]
   16690:	f898 4000 	ldrb.w	r4, [r8]
   16694:	2301      	movs	r3, #1
   16696:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1669a:	428b      	cmp	r3, r1
{
   1669c:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   1669e:	f240 808c 	bls.w	167ba <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   166a2:	466d      	mov	r5, sp
   166a4:	b08a      	sub	sp, #40	; 0x28
   166a6:	466a      	mov	r2, sp
   166a8:	4846      	ldr	r0, [pc, #280]	; (167c4 <hci_num_completed_packets+0x140>)
   166aa:	e9c2 3107 	strd	r3, r1, [r2, #28]
   166ae:	2305      	movs	r3, #5
   166b0:	e9c2 0405 	strd	r0, r4, [r2, #20]
   166b4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   166b8:	f842 3f10 	str.w	r3, [r2, #16]!
   166bc:	4842      	ldr	r0, [pc, #264]	; (167c8 <hci_num_completed_packets+0x144>)
   166be:	f00e fcdf 	bl	25080 <z_log_msg_static_create.constprop.0>
   166c2:	46ad      	mov	sp, r5
}
   166c4:	371c      	adds	r7, #28
   166c6:	46bd      	mov	sp, r7
   166c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   166cc:	466c      	mov	r4, sp
   166ce:	b088      	sub	sp, #32
   166d0:	466a      	mov	r2, sp
   166d2:	4b3e      	ldr	r3, [pc, #248]	; (167cc <hci_num_completed_packets+0x148>)
   166d4:	483c      	ldr	r0, [pc, #240]	; (167c8 <hci_num_completed_packets+0x144>)
   166d6:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   166da:	2303      	movs	r3, #3
   166dc:	f842 3f10 	str.w	r3, [r2, #16]!
   166e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   166e4:	f00e fccc 	bl	25080 <z_log_msg_static_create.constprop.0>
   166e8:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   166ea:	3501      	adds	r5, #1
   166ec:	f898 3000 	ldrb.w	r3, [r8]
   166f0:	429d      	cmp	r5, r3
   166f2:	dae7      	bge.n	166c4 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   166f4:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   166f8:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   166fc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16700:	4658      	mov	r0, fp
   16702:	f002 fac3 	bl	18c8c <bt_conn_lookup_handle>
		if (!conn) {
   16706:	4604      	mov	r4, r0
   16708:	2800      	cmp	r0, #0
   1670a:	d0df      	beq.n	166cc <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   1670c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   16710:	b346      	cbz	r6, 16764 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   16712:	f04f 0340 	mov.w	r3, #64	; 0x40
   16716:	f3ef 8211 	mrs	r2, BASEPRI
   1671a:	f383 8812 	msr	BASEPRI_MAX, r3
   1671e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16722:	69e3      	ldr	r3, [r4, #28]
   16724:	b16b      	cbz	r3, 16742 <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   16726:	3b01      	subs	r3, #1
   16728:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1672a:	f382 8811 	msr	BASEPRI, r2
   1672e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16732:	4620      	mov	r0, r4
   16734:	f002 f85c 	bl	187f0 <bt_conn_get_pkts>
   16738:	3e01      	subs	r6, #1
   1673a:	f00a fa7d 	bl	20c38 <z_impl_k_sem_give>
   1673e:	b2b6      	uxth	r6, r6
   16740:	e7e6      	b.n	16710 <hci_num_completed_packets+0x8c>
   16742:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16744:	b993      	cbnz	r3, 1676c <hci_num_completed_packets+0xe8>
   16746:	f382 8811 	msr	BASEPRI, r2
   1674a:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   1674e:	2302      	movs	r3, #2
   16750:	481d      	ldr	r0, [pc, #116]	; (167c8 <hci_num_completed_packets+0x144>)
   16752:	f8c7 a014 	str.w	sl, [r7, #20]
   16756:	f107 0210 	add.w	r2, r7, #16
   1675a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1675e:	613b      	str	r3, [r7, #16]
   16760:	f00e fc8e 	bl	25080 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   16764:	4620      	mov	r0, r4
   16766:	f002 fa59 	bl	18c1c <bt_conn_unref>
   1676a:	e7be      	b.n	166ea <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1676c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1676e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16770:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16772:	428b      	cmp	r3, r1
	list->tail = node;
   16774:	bf08      	it	eq
   16776:	61a0      	streq	r0, [r4, #24]
   16778:	f382 8811 	msr	BASEPRI, r2
   1677c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16780:	f04f 0240 	mov.w	r2, #64	; 0x40
   16784:	f3ef 8111 	mrs	r1, BASEPRI
   16788:	f382 8812 	msr	BASEPRI_MAX, r2
   1678c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16790:	68da      	ldr	r2, [r3, #12]
   16792:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   16794:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   16798:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   1679c:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1679e:	b94a      	cbnz	r2, 167b4 <hci_num_completed_packets+0x130>
	list->head = node;
   167a0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   167a4:	f381 8811 	msr	BASEPRI, r1
   167a8:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   167ac:	4658      	mov	r0, fp
   167ae:	f00a fdb1 	bl	21314 <k_work_submit>
   167b2:	e7be      	b.n	16732 <hci_num_completed_packets+0xae>
	parent->next = child;
   167b4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   167b6:	6263      	str	r3, [r4, #36]	; 0x24
}
   167b8:	e7f4      	b.n	167a4 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   167ba:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   167bc:	f8df a010 	ldr.w	sl, [pc, #16]	; 167d0 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   167c0:	46a9      	mov	r9, r5
   167c2:	e793      	b.n	166ec <hci_num_completed_packets+0x68>
   167c4:	00029387 	.word	0x00029387
   167c8:	00027368 	.word	0x00027368
   167cc:	000293b1 	.word	0x000293b1
   167d0:	000293cd 	.word	0x000293cd

000167d4 <le_conn_update_complete>:
{
   167d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   167d6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   167d8:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   167da:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   167de:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   167e0:	4630      	mov	r0, r6
   167e2:	f002 fa53 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   167e6:	4604      	mov	r4, r0
   167e8:	b988      	cbnz	r0, 1680e <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   167ea:	466c      	mov	r4, sp
   167ec:	b088      	sub	sp, #32
   167ee:	466a      	mov	r2, sp
   167f0:	4b2d      	ldr	r3, [pc, #180]	; (168a8 <le_conn_update_complete+0xd4>)
   167f2:	482e      	ldr	r0, [pc, #184]	; (168ac <le_conn_update_complete+0xd8>)
   167f4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   167f8:	2303      	movs	r3, #3
   167fa:	f842 3f10 	str.w	r3, [r2, #16]!
   167fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16802:	f00e fc3d 	bl	25080 <z_log_msg_static_create.constprop.0>
   16806:	46a5      	mov	sp, r4
}
   16808:	370c      	adds	r7, #12
   1680a:	46bd      	mov	sp, r7
   1680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1680e:	782b      	ldrb	r3, [r5, #0]
   16810:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   16812:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16816:	d117      	bne.n	16848 <le_conn_update_complete+0x74>
   16818:	78c3      	ldrb	r3, [r0, #3]
   1681a:	2b01      	cmp	r3, #1
   1681c:	d128      	bne.n	16870 <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1681e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   16822:	4630      	mov	r0, r6
   16824:	f00e fc1d 	bl	25062 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16828:	0542      	lsls	r2, r0, #21
   1682a:	d40d      	bmi.n	16848 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   1682c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   16830:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   16832:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   16834:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   16838:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1683a:	4620      	mov	r0, r4
   1683c:	f003 f82a 	bl	19894 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   16840:	4620      	mov	r0, r4
   16842:	f002 f9eb 	bl	18c1c <bt_conn_unref>
   16846:	e7df      	b.n	16808 <le_conn_update_complete+0x34>
		if (!evt->status) {
   16848:	782b      	ldrb	r3, [r5, #0]
   1684a:	b98b      	cbnz	r3, 16870 <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1684c:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   16850:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   16854:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   16858:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1685c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16860:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16864:	f46f 7180 	mvn.w	r1, #256	; 0x100
   16868:	4630      	mov	r0, r6
   1686a:	f00e fc0c 	bl	25086 <atomic_and.isra.0>
}
   1686e:	e017      	b.n	168a0 <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16870:	f3bf 8f5b 	dmb	ish
   16874:	6863      	ldr	r3, [r4, #4]
   16876:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   1687a:	05db      	lsls	r3, r3, #23
   1687c:	d5f2      	bpl.n	16864 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1687e:	782b      	ldrb	r3, [r5, #0]
   16880:	2b20      	cmp	r3, #32
   16882:	d1ef      	bne.n	16864 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   16884:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   16888:	2b00      	cmp	r3, #0
   1688a:	d0eb      	beq.n	16864 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   1688c:	3b01      	subs	r3, #1
   1688e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   16892:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16896:	2300      	movs	r3, #0
   16898:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1689c:	f00a fe64 	bl	21568 <k_work_schedule>
		notify_le_param_updated(conn);
   168a0:	4620      	mov	r0, r4
   168a2:	f002 fb61 	bl	18f68 <notify_le_param_updated>
   168a6:	e7cb      	b.n	16840 <le_conn_update_complete+0x6c>
   168a8:	000291de 	.word	0x000291de
   168ac:	00027368 	.word	0x00027368

000168b0 <bt_hci_cmd_state_set_init>:
{
   168b0:	b510      	push	{r4, lr}
	state->bit = bit;
   168b2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   168b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   168ba:	720b      	strb	r3, [r1, #8]
{
   168bc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   168be:	f005 f995 	bl	1bbec <net_buf_id>
   168c2:	4b03      	ldr	r3, [pc, #12]	; (168d0 <bt_hci_cmd_state_set_init+0x20>)
   168c4:	220c      	movs	r2, #12
   168c6:	fb02 3300 	mla	r3, r2, r0, r3
   168ca:	605c      	str	r4, [r3, #4]
}
   168cc:	bd10      	pop	{r4, pc}
   168ce:	bf00      	nop
   168d0:	20002da0 	.word	0x20002da0

000168d4 <bt_hci_cmd_create>:
{
   168d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   168d8:	f04f 32ff 	mov.w	r2, #4294967295
   168dc:	4606      	mov	r6, r0
   168de:	f04f 33ff 	mov.w	r3, #4294967295
   168e2:	481e      	ldr	r0, [pc, #120]	; (1695c <bt_hci_cmd_create+0x88>)
   168e4:	460f      	mov	r7, r1
   168e6:	f00f fcfc 	bl	262e2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   168ea:	4604      	mov	r4, r0
   168ec:	b958      	cbnz	r0, 16906 <bt_hci_cmd_create+0x32>
   168ee:	491c      	ldr	r1, [pc, #112]	; (16960 <bt_hci_cmd_create+0x8c>)
   168f0:	481c      	ldr	r0, [pc, #112]	; (16964 <bt_hci_cmd_create+0x90>)
   168f2:	4a1d      	ldr	r2, [pc, #116]	; (16968 <bt_hci_cmd_create+0x94>)
   168f4:	f44f 7381 	mov.w	r3, #258	; 0x102
   168f8:	f00d fef8 	bl	246ec <assert_print>
   168fc:	481a      	ldr	r0, [pc, #104]	; (16968 <bt_hci_cmd_create+0x94>)
   168fe:	f44f 7181 	mov.w	r1, #258	; 0x102
   16902:	f00d feec 	bl	246de <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   16906:	f100 0a0c 	add.w	sl, r0, #12
   1690a:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1690c:	f04f 0800 	mov.w	r8, #0
   16910:	4650      	mov	r0, sl
   16912:	f005 fc3d 	bl	1c190 <net_buf_simple_reserve>
   16916:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1691a:	4620      	mov	r0, r4
   1691c:	f005 f966 	bl	1bbec <net_buf_id>
   16920:	4d12      	ldr	r5, [pc, #72]	; (1696c <bt_hci_cmd_create+0x98>)
   16922:	f04f 090c 	mov.w	r9, #12
   16926:	fb09 5000 	mla	r0, r9, r0, r5
   1692a:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1692c:	4620      	mov	r0, r4
   1692e:	f005 f95d 	bl	1bbec <net_buf_id>
   16932:	fb09 5000 	mla	r0, r9, r0, r5
   16936:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1693a:	4620      	mov	r0, r4
   1693c:	f005 f956 	bl	1bbec <net_buf_id>
   16940:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   16944:	2103      	movs	r1, #3
   16946:	4650      	mov	r0, sl
   16948:	f8c5 8004 	str.w	r8, [r5, #4]
   1694c:	f005 fc9e 	bl	1c28c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   16950:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   16952:	7087      	strb	r7, [r0, #2]
}
   16954:	4620      	mov	r0, r4
   16956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1695a:	bf00      	nop
   1695c:	20000a44 	.word	0x20000a44
   16960:	0002a58c 	.word	0x0002a58c
   16964:	00027f8a 	.word	0x00027f8a
   16968:	0002924a 	.word	0x0002924a
   1696c:	20002da0 	.word	0x20002da0

00016970 <bt_hci_cmd_send_sync>:
{
   16970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16974:	b087      	sub	sp, #28
   16976:	4606      	mov	r6, r0
   16978:	af00      	add	r7, sp, #0
   1697a:	4615      	mov	r5, r2
	if (!buf) {
   1697c:	460c      	mov	r4, r1
   1697e:	b921      	cbnz	r1, 1698a <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   16980:	f7ff ffa8 	bl	168d4 <bt_hci_cmd_create>
		if (!buf) {
   16984:	4604      	mov	r4, r0
   16986:	2800      	cmp	r0, #0
   16988:	d05f      	beq.n	16a4a <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1698a:	2201      	movs	r2, #1
   1698c:	2100      	movs	r1, #0
   1698e:	4638      	mov	r0, r7
   16990:	f010 f9b9 	bl	26d06 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16994:	4620      	mov	r0, r4
   16996:	f005 f929 	bl	1bbec <net_buf_id>
   1699a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 16a6c <bt_hci_cmd_send_sync+0xfc>
   1699e:	230c      	movs	r3, #12
   169a0:	fb03 9000 	mla	r0, r3, r0, r9
   169a4:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   169a6:	4620      	mov	r0, r4
   169a8:	f005 fb70 	bl	1c08c <net_buf_ref>
   169ac:	4601      	mov	r1, r0
   169ae:	4828      	ldr	r0, [pc, #160]	; (16a50 <bt_hci_cmd_send_sync+0xe0>)
   169b0:	f005 fb02 	bl	1bfb8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   169b4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   169b8:	2300      	movs	r3, #0
   169ba:	4638      	mov	r0, r7
   169bc:	f00a f980 	bl	20cc0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   169c0:	4680      	mov	r8, r0
   169c2:	b188      	cbz	r0, 169e8 <bt_hci_cmd_send_sync+0x78>
   169c4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   169c8:	4a22      	ldr	r2, [pc, #136]	; (16a54 <bt_hci_cmd_send_sync+0xe4>)
   169ca:	4923      	ldr	r1, [pc, #140]	; (16a58 <bt_hci_cmd_send_sync+0xe8>)
   169cc:	4823      	ldr	r0, [pc, #140]	; (16a5c <bt_hci_cmd_send_sync+0xec>)
   169ce:	f00d fe8d 	bl	246ec <assert_print>
   169d2:	4823      	ldr	r0, [pc, #140]	; (16a60 <bt_hci_cmd_send_sync+0xf0>)
   169d4:	4642      	mov	r2, r8
   169d6:	4631      	mov	r1, r6
   169d8:	f00d fe88 	bl	246ec <assert_print>
   169dc:	4040      	eors	r0, r0
   169de:	f380 8811 	msr	BASEPRI, r0
   169e2:	f04f 0003 	mov.w	r0, #3
   169e6:	df02      	svc	2
	status = cmd(buf)->status;
   169e8:	4620      	mov	r0, r4
   169ea:	f005 f8ff 	bl	1bbec <net_buf_id>
   169ee:	230c      	movs	r3, #12
   169f0:	4358      	muls	r0, r3
   169f2:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   169f6:	f1b8 0f00 	cmp.w	r8, #0
   169fa:	d01e      	beq.n	16a3a <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   169fc:	466d      	mov	r5, sp
   169fe:	b088      	sub	sp, #32
   16a00:	466a      	mov	r2, sp
   16a02:	4b18      	ldr	r3, [pc, #96]	; (16a64 <bt_hci_cmd_send_sync+0xf4>)
   16a04:	f8c2 801c 	str.w	r8, [r2, #28]
   16a08:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16a0c:	2304      	movs	r3, #4
   16a0e:	f842 3f10 	str.w	r3, [r2, #16]!
   16a12:	4815      	ldr	r0, [pc, #84]	; (16a68 <bt_hci_cmd_send_sync+0xf8>)
   16a14:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16a18:	f00e fb32 	bl	25080 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16a1c:	4620      	mov	r0, r4
   16a1e:	46ad      	mov	sp, r5
   16a20:	f005 faf0 	bl	1c004 <net_buf_unref>
			return -ECONNREFUSED;
   16a24:	f1b8 0f09 	cmp.w	r8, #9
   16a28:	bf14      	ite	ne
   16a2a:	f06f 0004 	mvnne.w	r0, #4
   16a2e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   16a32:	371c      	adds	r7, #28
   16a34:	46bd      	mov	sp, r7
   16a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   16a3a:	b115      	cbz	r5, 16a42 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   16a3c:	602c      	str	r4, [r5, #0]
	return 0;
   16a3e:	2000      	movs	r0, #0
   16a40:	e7f7      	b.n	16a32 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   16a42:	4620      	mov	r0, r4
   16a44:	f005 fade 	bl	1c004 <net_buf_unref>
   16a48:	e7f9      	b.n	16a3e <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   16a4a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16a4e:	e7f0      	b.n	16a32 <bt_hci_cmd_send_sync+0xc2>
   16a50:	200004cc 	.word	0x200004cc
   16a54:	0002924a 	.word	0x0002924a
   16a58:	00028453 	.word	0x00028453
   16a5c:	00027f8a 	.word	0x00027f8a
   16a60:	000293e4 	.word	0x000293e4
   16a64:	00029410 	.word	0x00029410
   16a68:	00027368 	.word	0x00027368
   16a6c:	20002da0 	.word	0x20002da0

00016a70 <hci_le_read_max_data_len>:
{
   16a70:	b570      	push	{r4, r5, r6, lr}
   16a72:	b088      	sub	sp, #32
   16a74:	4606      	mov	r6, r0
   16a76:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16a78:	aa01      	add	r2, sp, #4
   16a7a:	2100      	movs	r1, #0
   16a7c:	f242 002f 	movw	r0, #8239	; 0x202f
   16a80:	f7ff ff76 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   16a84:	4604      	mov	r4, r0
   16a86:	b160      	cbz	r0, 16aa2 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   16a88:	4b0b      	ldr	r3, [pc, #44]	; (16ab8 <hci_le_read_max_data_len+0x48>)
   16a8a:	9307      	str	r3, [sp, #28]
   16a8c:	480b      	ldr	r0, [pc, #44]	; (16abc <hci_le_read_max_data_len+0x4c>)
   16a8e:	2302      	movs	r3, #2
   16a90:	aa06      	add	r2, sp, #24
   16a92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16a96:	9306      	str	r3, [sp, #24]
   16a98:	f00e faf2 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   16a9c:	4620      	mov	r0, r4
   16a9e:	b008      	add	sp, #32
   16aa0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16aa2:	9801      	ldr	r0, [sp, #4]
   16aa4:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16aa6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16aaa:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16aac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16ab0:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16ab2:	f005 faa7 	bl	1c004 <net_buf_unref>
	return 0;
   16ab6:	e7f1      	b.n	16a9c <hci_le_read_max_data_len+0x2c>
   16ab8:	0002942c 	.word	0x0002942c
   16abc:	00027368 	.word	0x00027368

00016ac0 <bt_hci_le_rand>:
{
   16ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16ac2:	4b14      	ldr	r3, [pc, #80]	; (16b14 <bt_hci_le_rand+0x54>)
   16ac4:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   16ac8:	2b00      	cmp	r3, #0
{
   16aca:	4605      	mov	r5, r0
   16acc:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16ace:	da1d      	bge.n	16b0c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16ad0:	b914      	cbnz	r4, 16ad8 <bt_hci_le_rand+0x18>
	return 0;
   16ad2:	4620      	mov	r0, r4
}
   16ad4:	b003      	add	sp, #12
   16ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16ad8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16ada:	aa01      	add	r2, sp, #4
   16adc:	f04f 0100 	mov.w	r1, #0
   16ae0:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   16ae4:	4626      	mov	r6, r4
   16ae6:	bf28      	it	cs
   16ae8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16aea:	f7ff ff41 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   16aee:	2800      	cmp	r0, #0
   16af0:	d1f0      	bne.n	16ad4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16af2:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16af4:	68f9      	ldr	r1, [r7, #12]
   16af6:	4632      	mov	r2, r6
   16af8:	3101      	adds	r1, #1
   16afa:	4628      	mov	r0, r5
   16afc:	f00e fa03 	bl	24f06 <memcpy>
		net_buf_unref(rsp);
   16b00:	4638      	mov	r0, r7
   16b02:	f005 fa7f 	bl	1c004 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   16b06:	4435      	add	r5, r6
		len -= count;
   16b08:	1ba4      	subs	r4, r4, r6
   16b0a:	e7e1      	b.n	16ad0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16b0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16b10:	e7e0      	b.n	16ad4 <bt_hci_le_rand+0x14>
   16b12:	bf00      	nop
   16b14:	20000388 	.word	0x20000388

00016b18 <bt_hci_le_enh_conn_complete>:
{
   16b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b1c:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   16b1e:	4bae      	ldr	r3, [pc, #696]	; (16dd8 <bt_hci_le_enh_conn_complete+0x2c0>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16b20:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16b24:	8819      	ldrh	r1, [r3, #0]
   16b26:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   16b2a:	4291      	cmp	r1, r2
   16b2c:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   16b30:	bf08      	it	eq
   16b32:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
   16b34:	7804      	ldrb	r4, [r0, #0]
{
   16b36:	af02      	add	r7, sp, #8
   16b38:	4605      	mov	r5, r0
			return true;
   16b3a:	bf08      	it	eq
   16b3c:	2601      	moveq	r6, #1
	if (evt->status) {
   16b3e:	b3a4      	cbz	r4, 16baa <bt_hci_le_enh_conn_complete+0x92>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16b40:	2c3c      	cmp	r4, #60	; 0x3c
   16b42:	d122      	bne.n	16b8a <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16b44:	f001 fa8e 	bl	18064 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16b48:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16b4c:	3010      	adds	r0, #16
   16b4e:	f00e fa9a 	bl	25086 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16b52:	2000      	movs	r0, #0
   16b54:	f7ff fa84 	bl	16060 <find_pending_connect.part.0>
		if (!conn) {
   16b58:	4605      	mov	r5, r0
   16b5a:	b970      	cbnz	r0, 16b7a <bt_hci_le_enh_conn_complete+0x62>
			LOG_ERR("No pending peripheral connection");
   16b5c:	4b9f      	ldr	r3, [pc, #636]	; (16ddc <bt_hci_le_enh_conn_complete+0x2c4>)
   16b5e:	627b      	str	r3, [r7, #36]	; 0x24
   16b60:	2302      	movs	r3, #2
   16b62:	489f      	ldr	r0, [pc, #636]	; (16de0 <bt_hci_le_enh_conn_complete+0x2c8>)
   16b64:	623b      	str	r3, [r7, #32]
   16b66:	f107 0220 	add.w	r2, r7, #32
   16b6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16b6e:	f00e fa87 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   16b72:	3728      	adds	r7, #40	; 0x28
   16b74:	46bd      	mov	sp, r7
   16b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16b7a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16b7c:	2100      	movs	r1, #0
   16b7e:	f002 f88d 	bl	18c9c <bt_conn_set_state>
		bt_conn_unref(conn);
   16b82:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16b84:	f002 f84a 	bl	18c1c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16b88:	e7f3      	b.n	16b72 <bt_hci_le_enh_conn_complete+0x5a>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16b8a:	466d      	mov	r5, sp
   16b8c:	b088      	sub	sp, #32
   16b8e:	aa02      	add	r2, sp, #8
   16b90:	4b94      	ldr	r3, [pc, #592]	; (16de4 <bt_hci_le_enh_conn_complete+0x2cc>)
   16b92:	4893      	ldr	r0, [pc, #588]	; (16de0 <bt_hci_le_enh_conn_complete+0x2c8>)
   16b94:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16b98:	2303      	movs	r3, #3
   16b9a:	f842 3f10 	str.w	r3, [r2, #16]!
   16b9e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16ba2:	f00e fa6d 	bl	25080 <z_log_msg_static_create.constprop.0>
   16ba6:	46ad      	mov	sp, r5
		return;
   16ba8:	e7e3      	b.n	16b72 <bt_hci_le_enh_conn_complete+0x5a>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16baa:	78c3      	ldrb	r3, [r0, #3]
   16bac:	2b01      	cmp	r3, #1
   16bae:	bf08      	it	eq
   16bb0:	4b8d      	ldreq	r3, [pc, #564]	; (16de8 <bt_hci_le_enh_conn_complete+0x2d0>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16bb2:	f100 0904 	add.w	r9, r0, #4
   16bb6:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16bb8:	bf08      	it	eq
   16bba:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16bbe:	f00e fa39 	bl	25034 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16bc2:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16bc4:	b348      	cbz	r0, 16c1a <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16bc6:	f107 0010 	add.w	r0, r7, #16
   16bca:	f00e fa29 	bl	25020 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   16bce:	2206      	movs	r2, #6
   16bd0:	f105 0111 	add.w	r1, r5, #17
   16bd4:	f107 0009 	add.w	r0, r7, #9
   16bd8:	f00e f995 	bl	24f06 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   16bdc:	2301      	movs	r3, #1
   16bde:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16be0:	78eb      	ldrb	r3, [r5, #3]
   16be2:	2b01      	cmp	r3, #1
   16be4:	d029      	beq.n	16c3a <bt_hci_le_enh_conn_complete+0x122>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   16be6:	4648      	mov	r0, r9
   16be8:	f7ff f8f0 	bl	15dcc <bt_addr_le_str>
   16bec:	466c      	mov	r4, sp
   16bee:	b088      	sub	sp, #32
   16bf0:	aa02      	add	r2, sp, #8
   16bf2:	4b7e      	ldr	r3, [pc, #504]	; (16dec <bt_hci_le_enh_conn_complete+0x2d4>)
   16bf4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
   16bfc:	8393      	strh	r3, [r2, #28]
   16bfe:	4b7c      	ldr	r3, [pc, #496]	; (16df0 <bt_hci_le_enh_conn_complete+0x2d8>)
   16c00:	f842 3f10 	str.w	r3, [r2, #16]!
   16c04:	4876      	ldr	r0, [pc, #472]	; (16de0 <bt_hci_le_enh_conn_complete+0x2c8>)
   16c06:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   16c0a:	f00e fa39 	bl	25080 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16c0e:	211f      	movs	r1, #31
   16c10:	46a5      	mov	sp, r4
   16c12:	4640      	mov	r0, r8
   16c14:	f00e fa43 	bl	2509e <bt_hci_disconnect>
		return;
   16c18:	e7ab      	b.n	16b72 <bt_hci_le_enh_conn_complete+0x5a>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   16c1a:	4620      	mov	r0, r4
   16c1c:	f00e faef 	bl	251fe <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   16c20:	2207      	movs	r2, #7
   16c22:	4601      	mov	r1, r0
   16c24:	f107 0010 	add.w	r0, r7, #16
   16c28:	f00e f96d 	bl	24f06 <memcpy>
   16c2c:	2207      	movs	r2, #7
   16c2e:	4649      	mov	r1, r9
   16c30:	f107 0008 	add.w	r0, r7, #8
   16c34:	f00e f967 	bl	24f06 <memcpy>
}
   16c38:	e7d2      	b.n	16be0 <bt_hci_le_enh_conn_complete+0xc8>
   16c3a:	f107 0010 	add.w	r0, r7, #16
   16c3e:	f7ff fa0f 	bl	16060 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c42:	78eb      	ldrb	r3, [r5, #3]
   16c44:	2b01      	cmp	r3, #1
   16c46:	4604      	mov	r4, r0
   16c48:	d10a      	bne.n	16c60 <bt_hci_le_enh_conn_complete+0x148>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16c4a:	f001 fa0b 	bl	18064 <bt_le_adv_lookup_legacy>
   16c4e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16c52:	4682      	mov	sl, r0
   16c54:	3010      	adds	r0, #16
   16c56:	f00e fa16 	bl	25086 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16c5a:	4650      	mov	r0, sl
   16c5c:	f00e fbe0 	bl	25420 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16c60:	2c00      	cmp	r4, #0
   16c62:	d0c0      	beq.n	16be6 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = sys_le16_to_cpu(evt->handle);
   16c64:	4620      	mov	r0, r4
   16c66:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   16c6a:	f820 3b90 	strh.w	r3, [r0], #144
	memcpy(dst, src, sizeof(*dst));
   16c6e:	2207      	movs	r2, #7
   16c70:	f107 0110 	add.w	r1, r7, #16
   16c74:	f00e f947 	bl	24f06 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16c78:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   16c7c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16c80:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16c84:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16c88:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   16c8c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   16c90:	78eb      	ldrb	r3, [r5, #3]
   16c92:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16c94:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c96:	2b01      	cmp	r3, #1
	conn->err = 0U;
   16c98:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c9a:	d118      	bne.n	16cce <bt_hci_le_enh_conn_complete+0x1b6>
   16c9c:	2207      	movs	r2, #7
   16c9e:	f107 0108 	add.w	r1, r7, #8
   16ca2:	f104 0097 	add.w	r0, r4, #151	; 0x97
   16ca6:	f00e f92e 	bl	24f06 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16caa:	f001 f9db 	bl	18064 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   16cae:	7a21      	ldrb	r1, [r4, #8]
   16cb0:	4d4d      	ldr	r5, [pc, #308]	; (16de8 <bt_hci_le_enh_conn_complete+0x2d0>)
   16cb2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   16cb6:	4429      	add	r1, r5
   16cb8:	2207      	movs	r2, #7
   16cba:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   16cbe:	f00e f922 	bl	24f06 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16cc2:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   16cc6:	065d      	lsls	r5, r3, #25
   16cc8:	d501      	bpl.n	16cce <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   16cca:	f001 fb93 	bl	183f4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16cce:	2107      	movs	r1, #7
   16cd0:	4620      	mov	r0, r4
   16cd2:	f001 ffe3 	bl	18c9c <bt_conn_set_state>
	if (is_disconnected) {
   16cd6:	b11e      	cbz	r6, 16ce0 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16cd8:	2101      	movs	r1, #1
   16cda:	4620      	mov	r0, r4
   16cdc:	f001 ffde 	bl	18c9c <bt_conn_set_state>
	bt_conn_connected(conn);
   16ce0:	4620      	mov	r0, r4
   16ce2:	f00e fbd1 	bl	25488 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16ce6:	7aa3      	ldrb	r3, [r4, #10]
   16ce8:	2b07      	cmp	r3, #7
   16cea:	d170      	bne.n	16dce <bt_hci_le_enh_conn_complete+0x2b6>
   16cec:	f3bf 8f5b 	dmb	ish
   16cf0:	6863      	ldr	r3, [r4, #4]
   16cf2:	4d3d      	ldr	r5, [pc, #244]	; (16de8 <bt_hci_le_enh_conn_complete+0x2d0>)
   16cf4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16cf8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16cfc:	d129      	bne.n	16d52 <bt_hci_le_enh_conn_complete+0x23a>
   16cfe:	78e3      	ldrb	r3, [r4, #3]
   16d00:	b11b      	cbz	r3, 16d0a <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16d02:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16d06:	0718      	lsls	r0, r3, #28
   16d08:	d523      	bpl.n	16d52 <bt_hci_le_enh_conn_complete+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16d0a:	2102      	movs	r1, #2
   16d0c:	f242 0016 	movw	r0, #8214	; 0x2016
   16d10:	f7ff fde0 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   16d14:	4606      	mov	r6, r0
   16d16:	2800      	cmp	r0, #0
   16d18:	d05b      	beq.n	16dd2 <bt_hci_le_enh_conn_complete+0x2ba>
   16d1a:	2102      	movs	r1, #2
   16d1c:	300c      	adds	r0, #12
   16d1e:	f005 fab5 	bl	1c28c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16d22:	8823      	ldrh	r3, [r4, #0]
   16d24:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16d26:	2200      	movs	r2, #0
   16d28:	4631      	mov	r1, r6
   16d2a:	f242 0016 	movw	r0, #8214	; 0x2016
   16d2e:	f7ff fe1f 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   16d32:	b170      	cbz	r0, 16d52 <bt_hci_le_enh_conn_complete+0x23a>
			LOG_ERR("Failed read remote features (%d)", err);
   16d34:	466e      	mov	r6, sp
   16d36:	b088      	sub	sp, #32
   16d38:	aa02      	add	r2, sp, #8
   16d3a:	4b2e      	ldr	r3, [pc, #184]	; (16df4 <bt_hci_le_enh_conn_complete+0x2dc>)
   16d3c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16d40:	2303      	movs	r3, #3
   16d42:	f842 3f10 	str.w	r3, [r2, #16]!
   16d46:	4826      	ldr	r0, [pc, #152]	; (16de0 <bt_hci_le_enh_conn_complete+0x2c8>)
   16d48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d4c:	f00e f998 	bl	25080 <z_log_msg_static_create.constprop.0>
   16d50:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16d52:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   16d56:	07d9      	lsls	r1, r3, #31
   16d58:	d516      	bpl.n	16d88 <bt_hci_le_enh_conn_complete+0x270>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16d5a:	2100      	movs	r1, #0
   16d5c:	2302      	movs	r3, #2
   16d5e:	9100      	str	r1, [sp, #0]
   16d60:	461a      	mov	r2, r3
   16d62:	4620      	mov	r0, r4
   16d64:	f00e f9d4 	bl	25110 <bt_le_set_phy>
		if (err) {
   16d68:	b170      	cbz	r0, 16d88 <bt_hci_le_enh_conn_complete+0x270>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16d6a:	466e      	mov	r6, sp
   16d6c:	b088      	sub	sp, #32
   16d6e:	aa02      	add	r2, sp, #8
   16d70:	4b21      	ldr	r3, [pc, #132]	; (16df8 <bt_hci_le_enh_conn_complete+0x2e0>)
   16d72:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16d76:	2303      	movs	r3, #3
   16d78:	f842 3f10 	str.w	r3, [r2, #16]!
   16d7c:	4818      	ldr	r0, [pc, #96]	; (16de0 <bt_hci_le_enh_conn_complete+0x2c8>)
   16d7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d82:	f00e f97d 	bl	25080 <z_log_msg_static_create.constprop.0>
   16d86:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16d88:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16d8c:	069a      	lsls	r2, r3, #26
   16d8e:	d51e      	bpl.n	16dce <bt_hci_le_enh_conn_complete+0x2b6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16d90:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16d94:	689b      	ldr	r3, [r3, #8]
   16d96:	079b      	lsls	r3, r3, #30
   16d98:	d519      	bpl.n	16dce <bt_hci_le_enh_conn_complete+0x2b6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16d9a:	1db9      	adds	r1, r7, #6
   16d9c:	1d38      	adds	r0, r7, #4
   16d9e:	f7ff fe67 	bl	16a70 <hci_le_read_max_data_len>
			if (!err) {
   16da2:	b9a0      	cbnz	r0, 16dce <bt_hci_le_enh_conn_complete+0x2b6>
				err = bt_le_set_data_len(conn,
   16da4:	88fa      	ldrh	r2, [r7, #6]
   16da6:	88b9      	ldrh	r1, [r7, #4]
   16da8:	4620      	mov	r0, r4
   16daa:	f00e f993 	bl	250d4 <bt_le_set_data_len>
				if (err) {
   16dae:	b170      	cbz	r0, 16dce <bt_hci_le_enh_conn_complete+0x2b6>
					LOG_ERR("Failed to set data len (%d)", err);
   16db0:	466d      	mov	r5, sp
   16db2:	b088      	sub	sp, #32
   16db4:	aa02      	add	r2, sp, #8
   16db6:	4b11      	ldr	r3, [pc, #68]	; (16dfc <bt_hci_le_enh_conn_complete+0x2e4>)
   16db8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16dbc:	2303      	movs	r3, #3
   16dbe:	f842 3f10 	str.w	r3, [r2, #16]!
   16dc2:	4807      	ldr	r0, [pc, #28]	; (16de0 <bt_hci_le_enh_conn_complete+0x2c8>)
   16dc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16dc8:	f00e f95a 	bl	25080 <z_log_msg_static_create.constprop.0>
   16dcc:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16dce:	4620      	mov	r0, r4
   16dd0:	e6d8      	b.n	16b84 <bt_hci_le_enh_conn_complete+0x6c>
		return -ENOBUFS;
   16dd2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16dd6:	e7ad      	b.n	16d34 <bt_hci_le_enh_conn_complete+0x21c>
   16dd8:	20003108 	.word	0x20003108
   16ddc:	0002944c 	.word	0x0002944c
   16de0:	00027368 	.word	0x00027368
   16de4:	0002946d 	.word	0x0002946d
   16de8:	20000388 	.word	0x20000388
   16dec:	00029486 	.word	0x00029486
   16df0:	01000003 	.word	0x01000003
   16df4:	000294a2 	.word	0x000294a2
   16df8:	000294c3 	.word	0x000294c3
   16dfc:	000294da 	.word	0x000294da

00016e00 <le_legacy_conn_complete>:
{
   16e00:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16e02:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
   16e04:	4c18      	ldr	r4, [pc, #96]	; (16e68 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   16e06:	780b      	ldrb	r3, [r1, #0]
{
   16e08:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   16e0a:	2207      	movs	r2, #7
	enh.status         = evt->status;
   16e0c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16e10:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16e14:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   16e18:	78cb      	ldrb	r3, [r1, #3]
   16e1a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   16e1e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16e22:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   16e26:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16e2a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   16e2e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16e32:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   16e36:	7c4b      	ldrb	r3, [r1, #17]
   16e38:	f88d 301d 	strb.w	r3, [sp, #29]
   16e3c:	3104      	adds	r1, #4
   16e3e:	a801      	add	r0, sp, #4
   16e40:	f00e f861 	bl	24f06 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   16e44:	4621      	mov	r1, r4
   16e46:	2206      	movs	r2, #6
   16e48:	f10d 000b 	add.w	r0, sp, #11
   16e4c:	f00e f85b 	bl	24f06 <memcpy>
   16e50:	2206      	movs	r2, #6
   16e52:	4621      	mov	r1, r4
   16e54:	f10d 0011 	add.w	r0, sp, #17
   16e58:	f00e f855 	bl	24f06 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   16e5c:	4668      	mov	r0, sp
   16e5e:	f7ff fe5b 	bl	16b18 <bt_hci_le_enh_conn_complete>
}
   16e62:	b008      	add	sp, #32
   16e64:	bd10      	pop	{r4, pc}
   16e66:	bf00      	nop
   16e68:	00029066 	.word	0x00029066

00016e6c <bt_send>:
	return bt_dev.drv->send(buf);
   16e6c:	4b02      	ldr	r3, [pc, #8]	; (16e78 <bt_send+0xc>)
   16e6e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   16e72:	695b      	ldr	r3, [r3, #20]
   16e74:	4718      	bx	r3
   16e76:	bf00      	nop
   16e78:	20000388 	.word	0x20000388

00016e7c <bt_hci_cmd_send>:
{
   16e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e7e:	4605      	mov	r5, r0
   16e80:	af00      	add	r7, sp, #0
	if (!buf) {
   16e82:	460c      	mov	r4, r1
   16e84:	b919      	cbnz	r1, 16e8e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   16e86:	f7ff fd25 	bl	168d4 <bt_hci_cmd_create>
		if (!buf) {
   16e8a:	4604      	mov	r4, r0
   16e8c:	b318      	cbz	r0, 16ed6 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16e8e:	f640 4335 	movw	r3, #3125	; 0xc35
   16e92:	429d      	cmp	r5, r3
   16e94:	d119      	bne.n	16eca <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   16e96:	4620      	mov	r0, r4
   16e98:	f7ff ffe8 	bl	16e6c <bt_send>
		if (err) {
   16e9c:	4605      	mov	r5, r0
   16e9e:	b188      	cbz	r0, 16ec4 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   16ea0:	466e      	mov	r6, sp
   16ea2:	b088      	sub	sp, #32
   16ea4:	466a      	mov	r2, sp
   16ea6:	4b0d      	ldr	r3, [pc, #52]	; (16edc <bt_hci_cmd_send+0x60>)
   16ea8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16eac:	2303      	movs	r3, #3
   16eae:	480c      	ldr	r0, [pc, #48]	; (16ee0 <bt_hci_cmd_send+0x64>)
   16eb0:	f842 3f10 	str.w	r3, [r2, #16]!
   16eb4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16eb8:	f00e f8e2 	bl	25080 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   16ebc:	4620      	mov	r0, r4
   16ebe:	46b5      	mov	sp, r6
   16ec0:	f005 f8a0 	bl	1c004 <net_buf_unref>
}
   16ec4:	4628      	mov	r0, r5
   16ec6:	46bd      	mov	sp, r7
   16ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16eca:	4806      	ldr	r0, [pc, #24]	; (16ee4 <bt_hci_cmd_send+0x68>)
   16ecc:	4621      	mov	r1, r4
   16ece:	f005 f873 	bl	1bfb8 <net_buf_put>
	return 0;
   16ed2:	2500      	movs	r5, #0
   16ed4:	e7f6      	b.n	16ec4 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   16ed6:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16eda:	e7f3      	b.n	16ec4 <bt_hci_cmd_send+0x48>
   16edc:	000294f6 	.word	0x000294f6
   16ee0:	00027368 	.word	0x00027368
   16ee4:	200004cc 	.word	0x200004cc

00016ee8 <le_conn_param_req>:
{
   16ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16eec:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16eee:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16ef0:	78d9      	ldrb	r1, [r3, #3]
   16ef2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16ef4:	f8b3 8000 	ldrh.w	r8, [r3]
{
   16ef8:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16efe:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16f00:	7959      	ldrb	r1, [r3, #5]
   16f02:	791a      	ldrb	r2, [r3, #4]
   16f04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16f08:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16f0a:	799a      	ldrb	r2, [r3, #6]
   16f0c:	79d9      	ldrb	r1, [r3, #7]
   16f0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16f12:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16f14:	7a1a      	ldrb	r2, [r3, #8]
   16f16:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16f18:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16f1c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16f20:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16f22:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16f24:	f001 feb2 	bl	18c8c <bt_conn_lookup_handle>
	if (!conn) {
   16f28:	4606      	mov	r6, r0
   16f2a:	b9b0      	cbnz	r0, 16f5a <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16f2c:	466d      	mov	r5, sp
   16f2e:	b088      	sub	sp, #32
   16f30:	466a      	mov	r2, sp
   16f32:	4b20      	ldr	r3, [pc, #128]	; (16fb4 <le_conn_param_req+0xcc>)
   16f34:	4820      	ldr	r0, [pc, #128]	; (16fb8 <le_conn_param_req+0xd0>)
   16f36:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16f3a:	2303      	movs	r3, #3
   16f3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16f40:	f842 3f10 	str.w	r3, [r2, #16]!
   16f44:	f00e f89c 	bl	25080 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16f48:	2102      	movs	r1, #2
   16f4a:	46ad      	mov	sp, r5
   16f4c:	4620      	mov	r0, r4
   16f4e:	f00e f92b 	bl	251a8 <le_conn_param_neg_reply>
}
   16f52:	3708      	adds	r7, #8
   16f54:	46bd      	mov	sp, r7
   16f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   16f5a:	4639      	mov	r1, r7
   16f5c:	f002 f868 	bl	19030 <le_param_req>
   16f60:	b938      	cbnz	r0, 16f72 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16f62:	211e      	movs	r1, #30
   16f64:	4620      	mov	r0, r4
   16f66:	f00e f91f 	bl	251a8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16f6a:	4630      	mov	r0, r6
   16f6c:	f001 fe56 	bl	18c1c <bt_conn_unref>
   16f70:	e7ef      	b.n	16f52 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16f72:	210e      	movs	r1, #14
   16f74:	f242 0020 	movw	r0, #8224	; 0x2020
   16f78:	f7ff fcac 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   16f7c:	4605      	mov	r5, r0
   16f7e:	2800      	cmp	r0, #0
   16f80:	d0f3      	beq.n	16f6a <le_conn_param_req+0x82>
   16f82:	210e      	movs	r1, #14
   16f84:	300c      	adds	r0, #12
   16f86:	f005 f981 	bl	1c28c <net_buf_simple_add>
   16f8a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   16f8c:	220e      	movs	r2, #14
   16f8e:	2100      	movs	r1, #0
   16f90:	f00d ffc4 	bl	24f1c <memset>
	cp->handle = sys_cpu_to_le16(handle);
   16f94:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16f98:	883b      	ldrh	r3, [r7, #0]
   16f9a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16f9c:	887b      	ldrh	r3, [r7, #2]
   16f9e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16fa0:	88bb      	ldrh	r3, [r7, #4]
   16fa2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16fa4:	88fb      	ldrh	r3, [r7, #6]
   16fa6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16fa8:	4629      	mov	r1, r5
   16faa:	f242 0020 	movw	r0, #8224	; 0x2020
   16fae:	f7ff ff65 	bl	16e7c <bt_hci_cmd_send>
   16fb2:	e7da      	b.n	16f6a <le_conn_param_req+0x82>
   16fb4:	000291de 	.word	0x000291de
   16fb8:	00027368 	.word	0x00027368

00016fbc <hci_tx_thread>:
{
   16fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16fc0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 1711c <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
   16fc4:	f8df 9180 	ldr.w	r9, [pc, #384]	; 17148 <hci_tx_thread+0x18c>
{
   16fc8:	b087      	sub	sp, #28
   16fca:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   16fcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16fd0:	4851      	ldr	r0, [pc, #324]	; (17118 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16fd2:	f36f 3394 	bfc	r3, #14, #7
   16fd6:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16fda:	f001 fd9d 	bl	18b18 <bt_conn_prepare_events>
   16fde:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16fe0:	484e      	ldr	r0, [pc, #312]	; (1711c <hci_tx_thread+0x160>)
   16fe2:	f04f 32ff 	mov.w	r2, #4294967295
   16fe6:	f04f 33ff 	mov.w	r3, #4294967295
   16fea:	4629      	mov	r1, r5
   16fec:	f00c fb90 	bl	23710 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16ff0:	b160      	cbz	r0, 1700c <hci_tx_thread+0x50>
   16ff2:	494b      	ldr	r1, [pc, #300]	; (17120 <hci_tx_thread+0x164>)
   16ff4:	484b      	ldr	r0, [pc, #300]	; (17124 <hci_tx_thread+0x168>)
   16ff6:	f640 23c8 	movw	r3, #2760	; 0xac8
   16ffa:	464a      	mov	r2, r9
   16ffc:	f00d fb76 	bl	246ec <assert_print>
   17000:	4040      	eors	r0, r0
   17002:	f380 8811 	msr	BASEPRI, r0
   17006:	f04f 0003 	mov.w	r0, #3
   1700a:	df02      	svc	2
{
   1700c:	4e43      	ldr	r6, [pc, #268]	; (1711c <hci_tx_thread+0x160>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1700e:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   17012:	b915      	cbnz	r5, 1701a <hci_tx_thread+0x5e>
	z_impl_k_yield();
   17014:	f00b fb28 	bl	22668 <z_impl_k_yield>
	while (1) {
   17018:	e7d8      	b.n	16fcc <hci_tx_thread+0x10>
		switch (ev->state) {
   1701a:	68f3      	ldr	r3, [r6, #12]
   1701c:	f3c3 3386 	ubfx	r3, r3, #14, #7
   17020:	2b02      	cmp	r3, #2
   17022:	d960      	bls.n	170e6 <hci_tx_thread+0x12a>
   17024:	2b04      	cmp	r3, #4
   17026:	d168      	bne.n	170fa <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   17028:	7b33      	ldrb	r3, [r6, #12]
   1702a:	2b00      	cmp	r3, #0
   1702c:	d15e      	bne.n	170ec <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1702e:	483e      	ldr	r0, [pc, #248]	; (17128 <hci_tx_thread+0x16c>)
   17030:	2200      	movs	r2, #0
   17032:	2300      	movs	r3, #0
   17034:	f00f f95a 	bl	262ec <net_buf_get>
	BT_ASSERT(buf);
   17038:	4604      	mov	r4, r0
   1703a:	b960      	cbnz	r0, 17056 <hci_tx_thread+0x9a>
   1703c:	493b      	ldr	r1, [pc, #236]	; (1712c <hci_tx_thread+0x170>)
   1703e:	4839      	ldr	r0, [pc, #228]	; (17124 <hci_tx_thread+0x168>)
   17040:	f640 235a 	movw	r3, #2650	; 0xa5a
   17044:	464a      	mov	r2, r9
   17046:	f00d fb51 	bl	246ec <assert_print>
   1704a:	4040      	eors	r0, r0
   1704c:	f380 8811 	msr	BASEPRI, r0
   17050:	f04f 0003 	mov.w	r0, #3
   17054:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   17056:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1714c <hci_tx_thread+0x190>
	return z_impl_k_sem_take(sem, timeout);
   1705a:	4835      	ldr	r0, [pc, #212]	; (17130 <hci_tx_thread+0x174>)
   1705c:	f04f 33ff 	mov.w	r3, #4294967295
   17060:	f04f 32ff 	mov.w	r2, #4294967295
   17064:	f009 fe2c 	bl	20cc0 <z_impl_k_sem_take>
   17068:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   1706c:	b18b      	cbz	r3, 17092 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   1706e:	4b31      	ldr	r3, [pc, #196]	; (17134 <hci_tx_thread+0x178>)
   17070:	4831      	ldr	r0, [pc, #196]	; (17138 <hci_tx_thread+0x17c>)
   17072:	617b      	str	r3, [r7, #20]
   17074:	f107 0210 	add.w	r2, r7, #16
   17078:	2302      	movs	r3, #2
   1707a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1707e:	613b      	str	r3, [r7, #16]
   17080:	f00d fffe 	bl	25080 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   17084:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   17088:	f004 ffbc 	bl	1c004 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1708c:	2300      	movs	r3, #0
   1708e:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   17092:	4620      	mov	r0, r4
   17094:	f004 fffa 	bl	1c08c <net_buf_ref>
   17098:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   1709c:	4620      	mov	r0, r4
   1709e:	f7ff fee5 	bl	16e6c <bt_send>
	if (err) {
   170a2:	b300      	cbz	r0, 170e6 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   170a4:	46eb      	mov	fp, sp
   170a6:	b088      	sub	sp, #32
   170a8:	466a      	mov	r2, sp
   170aa:	4b24      	ldr	r3, [pc, #144]	; (1713c <hci_tx_thread+0x180>)
   170ac:	e9c2 3005 	strd	r3, r0, [r2, #20]
   170b0:	2303      	movs	r3, #3
   170b2:	f842 3f10 	str.w	r3, [r2, #16]!
   170b6:	4820      	ldr	r0, [pc, #128]	; (17138 <hci_tx_thread+0x17c>)
   170b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170bc:	f00d ffe0 	bl	25080 <z_log_msg_static_create.constprop.0>
   170c0:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   170c2:	481b      	ldr	r0, [pc, #108]	; (17130 <hci_tx_thread+0x174>)
   170c4:	f009 fdb8 	bl	20c38 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   170c8:	4620      	mov	r0, r4
   170ca:	f004 fd8f 	bl	1bbec <net_buf_id>
   170ce:	4b1c      	ldr	r3, [pc, #112]	; (17140 <hci_tx_thread+0x184>)
   170d0:	220c      	movs	r2, #12
   170d2:	fb02 3000 	mla	r0, r2, r0, r3
   170d6:	211f      	movs	r1, #31
   170d8:	8840      	ldrh	r0, [r0, #2]
   170da:	4622      	mov	r2, r4
   170dc:	f7ff fa0c 	bl	164f8 <hci_cmd_done>
		net_buf_unref(buf);
   170e0:	4620      	mov	r0, r4
   170e2:	f004 ff8f 	bl	1c004 <net_buf_unref>
	for (; count; ev++, count--) {
   170e6:	3614      	adds	r6, #20
   170e8:	3d01      	subs	r5, #1
   170ea:	e792      	b.n	17012 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   170ec:	2b01      	cmp	r3, #1
   170ee:	d1fa      	bne.n	170e6 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   170f0:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   170f2:	3838      	subs	r0, #56	; 0x38
   170f4:	f002 f9c8 	bl	19488 <bt_conn_process_tx>
   170f8:	e7f5      	b.n	170e6 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   170fa:	466c      	mov	r4, sp
   170fc:	b088      	sub	sp, #32
   170fe:	466a      	mov	r2, sp
   17100:	4910      	ldr	r1, [pc, #64]	; (17144 <hci_tx_thread+0x188>)
   17102:	480d      	ldr	r0, [pc, #52]	; (17138 <hci_tx_thread+0x17c>)
		switch (ev->state) {
   17104:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   17108:	f842 af10 	str.w	sl, [r2, #16]!
   1710c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17110:	f00d ffb6 	bl	25080 <z_log_msg_static_create.constprop.0>
   17114:	46a5      	mov	sp, r4
   17116:	e7e6      	b.n	170e6 <hci_tx_thread+0x12a>
   17118:	20000624 	.word	0x20000624
   1711c:	20000610 	.word	0x20000610
   17120:	00028453 	.word	0x00028453
   17124:	00027f8a 	.word	0x00027f8a
   17128:	200004cc 	.word	0x200004cc
   1712c:	0002a58c 	.word	0x0002a58c
   17130:	200004a8 	.word	0x200004a8
   17134:	00029518 	.word	0x00029518
   17138:	00027368 	.word	0x00027368
   1713c:	000294f6 	.word	0x000294f6
   17140:	20002da0 	.word	0x20002da0
   17144:	00029533 	.word	0x00029533
   17148:	0002924a 	.word	0x0002924a
   1714c:	20000388 	.word	0x20000388

00017150 <hci_event_prio>:
{
   17150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17154:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17156:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1715a:	4630      	mov	r0, r6
   1715c:	f00f f8d0 	bl	26300 <net_buf_simple_headroom>
	state->len = buf->len;
   17160:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17164:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   17168:	4605      	mov	r5, r0
   1716a:	d80c      	bhi.n	17186 <hci_event_prio+0x36>
   1716c:	4a1c      	ldr	r2, [pc, #112]	; (171e0 <hci_event_prio+0x90>)
   1716e:	491d      	ldr	r1, [pc, #116]	; (171e4 <hci_event_prio+0x94>)
   17170:	481d      	ldr	r0, [pc, #116]	; (171e8 <hci_event_prio+0x98>)
   17172:	f640 636f 	movw	r3, #3695	; 0xe6f
   17176:	f00d fab9 	bl	246ec <assert_print>
   1717a:	4040      	eors	r0, r0
   1717c:	f380 8811 	msr	BASEPRI, r0
   17180:	f04f 0003 	mov.w	r0, #3
   17184:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   17186:	4630      	mov	r0, r6
   17188:	2102      	movs	r1, #2
   1718a:	f005 f861 	bl	1c250 <net_buf_simple_pull_mem>
   1718e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17190:	7800      	ldrb	r0, [r0, #0]
   17192:	f00d ff53 	bl	2503c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17196:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17198:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1719a:	d40c      	bmi.n	171b6 <hci_event_prio+0x66>
   1719c:	4a10      	ldr	r2, [pc, #64]	; (171e0 <hci_event_prio+0x90>)
   1719e:	4913      	ldr	r1, [pc, #76]	; (171ec <hci_event_prio+0x9c>)
   171a0:	4811      	ldr	r0, [pc, #68]	; (171e8 <hci_event_prio+0x98>)
   171a2:	f640 6373 	movw	r3, #3699	; 0xe73
   171a6:	f00d faa1 	bl	246ec <assert_print>
   171aa:	4040      	eors	r0, r0
   171ac:	f380 8811 	msr	BASEPRI, r0
   171b0:	f04f 0003 	mov.w	r0, #3
   171b4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   171b6:	2305      	movs	r3, #5
   171b8:	4a0d      	ldr	r2, [pc, #52]	; (171f0 <hci_event_prio+0xa0>)
   171ba:	7838      	ldrb	r0, [r7, #0]
   171bc:	4621      	mov	r1, r4
   171be:	f7ff f863 	bl	16288 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   171c2:	07b3      	lsls	r3, r6, #30
   171c4:	d507      	bpl.n	171d6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   171c6:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   171c8:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   171cc:	fa13 f585 	uxtah	r5, r3, r5
   171d0:	60e5      	str	r5, [r4, #12]
}
   171d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   171d6:	4620      	mov	r0, r4
}
   171d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   171dc:	f004 bf12 	b.w	1c004 <net_buf_unref>
   171e0:	0002924a 	.word	0x0002924a
   171e4:	0002927e 	.word	0x0002927e
   171e8:	00027f8a 	.word	0x00027f8a
   171ec:	00029554 	.word	0x00029554
   171f0:	00027698 	.word	0x00027698

000171f4 <bt_recv>:
{
   171f4:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   171f6:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   171f8:	2b01      	cmp	r3, #1
{
   171fa:	af00      	add	r7, sp, #0
   171fc:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   171fe:	d006      	beq.n	1720e <bt_recv+0x1a>
   17200:	2b03      	cmp	r3, #3
   17202:	d112      	bne.n	1722a <bt_recv+0x36>
			rx_queue_put(buf);
   17204:	f7fe ff6c 	bl	160e0 <rx_queue_put>
		return 0;
   17208:	2000      	movs	r0, #0
}
   1720a:	46bd      	mov	sp, r7
   1720c:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1720e:	68c3      	ldr	r3, [r0, #12]
   17210:	7818      	ldrb	r0, [r3, #0]
   17212:	f00d ff13 	bl	2503c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   17216:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17218:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1721a:	d502      	bpl.n	17222 <bt_recv+0x2e>
			hci_event_prio(buf);
   1721c:	4620      	mov	r0, r4
   1721e:	f7ff ff97 	bl	17150 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17222:	07ab      	lsls	r3, r5, #30
   17224:	d5f0      	bpl.n	17208 <bt_recv+0x14>
			rx_queue_put(buf);
   17226:	4620      	mov	r0, r4
   17228:	e7ec      	b.n	17204 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1722a:	466d      	mov	r5, sp
   1722c:	b088      	sub	sp, #32
   1722e:	466a      	mov	r2, sp
   17230:	4908      	ldr	r1, [pc, #32]	; (17254 <bt_recv+0x60>)
   17232:	4809      	ldr	r0, [pc, #36]	; (17258 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   17234:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17238:	2303      	movs	r3, #3
   1723a:	f842 3f10 	str.w	r3, [r2, #16]!
   1723e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17242:	f00d ff1d 	bl	25080 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   17246:	4620      	mov	r0, r4
   17248:	46ad      	mov	sp, r5
   1724a:	f004 fedb 	bl	1c004 <net_buf_unref>
		return -EINVAL;
   1724e:	f06f 0015 	mvn.w	r0, #21
   17252:	e7da      	b.n	1720a <bt_recv+0x16>
   17254:	0002956d 	.word	0x0002956d
   17258:	00027368 	.word	0x00027368

0001725c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1725c:	4a08      	ldr	r2, [pc, #32]	; (17280 <bt_hci_driver_register+0x24>)
{
   1725e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17260:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   17264:	b930      	cbnz	r0, 17274 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   17266:	68d9      	ldr	r1, [r3, #12]
   17268:	b139      	cbz	r1, 1727a <bt_hci_driver_register+0x1e>
   1726a:	6959      	ldr	r1, [r3, #20]
   1726c:	b129      	cbz	r1, 1727a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1726e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   17272:	4770      	bx	lr
		return -EALREADY;
   17274:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17278:	4770      	bx	lr
		return -EINVAL;
   1727a:	f06f 0015 	mvn.w	r0, #21
}
   1727e:	4770      	bx	lr
   17280:	20000388 	.word	0x20000388

00017284 <bt_finalize_init>:
{
   17284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   17288:	4c45      	ldr	r4, [pc, #276]	; (173a0 <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1728a:	4846      	ldr	r0, [pc, #280]	; (173a4 <bt_finalize_init+0x120>)
   1728c:	4d46      	ldr	r5, [pc, #280]	; (173a8 <bt_finalize_init+0x124>)
{
   1728e:	b083      	sub	sp, #12
   17290:	2104      	movs	r1, #4
   17292:	af00      	add	r7, sp, #0
   17294:	f00d fee5 	bl	25062 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   17298:	79e2      	ldrb	r2, [r4, #7]
   1729a:	4b44      	ldr	r3, [pc, #272]	; (173ac <bt_finalize_init+0x128>)
   1729c:	4620      	mov	r0, r4
   1729e:	2a01      	cmp	r2, #1
   172a0:	bf88      	it	hi
   172a2:	461d      	movhi	r5, r3
   172a4:	466e      	mov	r6, sp
   172a6:	f7fe fd91 	bl	15dcc <bt_addr_le_str>
   172aa:	b08a      	sub	sp, #40	; 0x28
   172ac:	466b      	mov	r3, sp
   172ae:	4940      	ldr	r1, [pc, #256]	; (173b0 <bt_finalize_init+0x12c>)
   172b0:	61d8      	str	r0, [r3, #28]
   172b2:	e9c3 1505 	strd	r1, r5, [r3, #20]
   172b6:	493f      	ldr	r1, [pc, #252]	; (173b4 <bt_finalize_init+0x130>)
   172b8:	6079      	str	r1, [r7, #4]
   172ba:	f103 0210 	add.w	r2, r3, #16
   172be:	1d38      	adds	r0, r7, #4
   172c0:	f103 011f 	add.w	r1, r3, #31
   172c4:	f103 0523 	add.w	r5, r3, #35	; 0x23
   172c8:	f810 cb01 	ldrb.w	ip, [r0], #1
   172cc:	f801 cf01 	strb.w	ip, [r1, #1]!
   172d0:	42a9      	cmp	r1, r5
   172d2:	d1f9      	bne.n	172c8 <bt_finalize_init+0x44>
   172d4:	4938      	ldr	r1, [pc, #224]	; (173b8 <bt_finalize_init+0x134>)
   172d6:	6119      	str	r1, [r3, #16]
   172d8:	4838      	ldr	r0, [pc, #224]	; (173bc <bt_finalize_init+0x138>)
   172da:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 173a0 <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   172de:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 173d0 <bt_finalize_init+0x14c>
   172e2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 173bc <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   172e6:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   172ea:	f00d fec9 	bl	25080 <z_log_msg_static_create.constprop.0>
   172ee:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   172f0:	4e33      	ldr	r6, [pc, #204]	; (173c0 <bt_finalize_init+0x13c>)
	for (i = 1; i < bt_dev.id_count; i++) {
   172f2:	2501      	movs	r5, #1
   172f4:	79e3      	ldrb	r3, [r4, #7]
   172f6:	429d      	cmp	r5, r3
   172f8:	f10b 0b07 	add.w	fp, fp, #7
   172fc:	db39      	blt.n	17372 <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   172fe:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   17302:	4628      	mov	r0, r5
   17304:	f7fe fe70 	bl	15fe8 <ver_str>
   17308:	466e      	mov	r6, sp
   1730a:	b08c      	sub	sp, #48	; 0x30
   1730c:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   17310:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   17314:	466a      	mov	r2, sp
   17316:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 173d4 <bt_finalize_init+0x150>
   1731a:	6253      	str	r3, [r2, #36]	; 0x24
   1731c:	e9c2 5107 	strd	r5, r1, [r2, #28]
   17320:	4b28      	ldr	r3, [pc, #160]	; (173c4 <bt_finalize_init+0x140>)
   17322:	f44f 7500 	mov.w	r5, #512	; 0x200
   17326:	e9c2 c005 	strd	ip, r0, [r2, #20]
   1732a:	8515      	strh	r5, [r2, #40]	; 0x28
   1732c:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   17330:	f842 3f10 	str.w	r3, [r2, #16]!
   17334:	4821      	ldr	r0, [pc, #132]	; (173bc <bt_finalize_init+0x138>)
   17336:	f00d fea3 	bl	25080 <z_log_msg_static_create.constprop.0>
   1733a:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   1733c:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   17340:	4630      	mov	r0, r6
   17342:	f7fe fe51 	bl	15fe8 <ver_str>
   17346:	b08a      	sub	sp, #40	; 0x28
   17348:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1734c:	466a      	mov	r2, sp
   1734e:	491e      	ldr	r1, [pc, #120]	; (173c8 <bt_finalize_init+0x144>)
   17350:	8495      	strh	r5, [r2, #36]	; 0x24
   17352:	e9c2 6307 	strd	r6, r3, [r2, #28]
   17356:	4b1d      	ldr	r3, [pc, #116]	; (173cc <bt_finalize_init+0x148>)
   17358:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1735c:	f842 3f10 	str.w	r3, [r2, #16]!
   17360:	4816      	ldr	r0, [pc, #88]	; (173bc <bt_finalize_init+0x138>)
   17362:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   17366:	f00d fe8b 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   1736a:	370c      	adds	r7, #12
   1736c:	46bd      	mov	sp, r7
   1736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   17372:	4658      	mov	r0, fp
   17374:	f7fe fd2a 	bl	15dcc <bt_addr_le_str>
   17378:	46ea      	mov	sl, sp
   1737a:	b08a      	sub	sp, #40	; 0x28
   1737c:	466a      	mov	r2, sp
   1737e:	f240 3301 	movw	r3, #769	; 0x301
   17382:	e9c2 6505 	strd	r6, r5, [r2, #20]
   17386:	61d0      	str	r0, [r2, #28]
   17388:	8413      	strh	r3, [r2, #32]
   1738a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1738e:	f842 8f10 	str.w	r8, [r2, #16]!
   17392:	4648      	mov	r0, r9
   17394:	f00d fe74 	bl	25080 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   17398:	3501      	adds	r5, #1
   1739a:	46d5      	mov	sp, sl
   1739c:	e7aa      	b.n	172f4 <bt_finalize_init+0x70>
   1739e:	bf00      	nop
   173a0:	20000388 	.word	0x20000388
   173a4:	2000045c 	.word	0x2000045c
   173a8:	0002a571 	.word	0x0002a571
   173ac:	00029581 	.word	0x00029581
   173b0:	00029585 	.word	0x00029585
   173b4:	03010200 	.word	0x03010200
   173b8:	02000004 	.word	0x02000004
   173bc:	00027368 	.word	0x00027368
   173c0:	00029594 	.word	0x00029594
   173c4:	01000006 	.word	0x01000006
   173c8:	000295e3 	.word	0x000295e3
   173cc:	01000005 	.word	0x01000005
   173d0:	01000004 	.word	0x01000004
   173d4:	000295a5 	.word	0x000295a5

000173d8 <bt_init>:
{
   173d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   173da:	4dc0      	ldr	r5, [pc, #768]	; (176dc <bt_init+0x304>)
{
   173dc:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   173de:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   173e2:	6899      	ldr	r1, [r3, #8]
   173e4:	f011 0101 	ands.w	r1, r1, #1
{
   173e8:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   173ea:	d122      	bne.n	17432 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   173ec:	f107 0208 	add.w	r2, r7, #8
   173f0:	f640 4003 	movw	r0, #3075	; 0xc03
   173f4:	f7ff fabc 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   173f8:	4604      	mov	r4, r0
   173fa:	2800      	cmp	r0, #0
   173fc:	d170      	bne.n	174e0 <bt_init+0x108>
		hci_reset_complete(rsp);
   173fe:	68b8      	ldr	r0, [r7, #8]
	uint8_t status = buf->data[0];
   17400:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   17402:	781b      	ldrb	r3, [r3, #0]
   17404:	b99b      	cbnz	r3, 1742e <bt_init+0x56>
   17406:	f3bf 8f5b 	dmb	ish
   1740a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   1740e:	f3bf 8f5b 	dmb	ish
   17412:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17416:	f003 0309 	and.w	r3, r3, #9
   1741a:	f3bf 8f5b 	dmb	ish
   1741e:	e852 1f00 	ldrex	r1, [r2]
   17422:	e842 3400 	strex	r4, r3, [r2]
   17426:	2c00      	cmp	r4, #0
   17428:	d1f9      	bne.n	1741e <bt_init+0x46>
   1742a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1742e:	f004 fde9 	bl	1c004 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   17432:	f107 0208 	add.w	r2, r7, #8
   17436:	2100      	movs	r1, #0
   17438:	f241 0003 	movw	r0, #4099	; 0x1003
   1743c:	f7ff fa98 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17440:	4604      	mov	r4, r0
   17442:	2800      	cmp	r0, #0
   17444:	d14c      	bne.n	174e0 <bt_init+0x108>
	read_local_features_complete(rsp);
   17446:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   17448:	48a5      	ldr	r0, [pc, #660]	; (176e0 <bt_init+0x308>)
   1744a:	68f1      	ldr	r1, [r6, #12]
   1744c:	2208      	movs	r2, #8
   1744e:	3101      	adds	r1, #1
   17450:	f00d fd59 	bl	24f06 <memcpy>
	net_buf_unref(rsp);
   17454:	4630      	mov	r0, r6
   17456:	f004 fdd5 	bl	1c004 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1745a:	4621      	mov	r1, r4
   1745c:	f107 0208 	add.w	r2, r7, #8
   17460:	f241 0001 	movw	r0, #4097	; 0x1001
   17464:	f7ff fa84 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17468:	4604      	mov	r4, r0
   1746a:	2800      	cmp	r0, #0
   1746c:	d138      	bne.n	174e0 <bt_init+0x108>
	read_local_ver_complete(rsp);
   1746e:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   17470:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   17472:	785a      	ldrb	r2, [r3, #1]
   17474:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   17478:	885a      	ldrh	r2, [r3, #2]
   1747a:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   1747e:	791a      	ldrb	r2, [r3, #4]
   17480:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   17484:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   17488:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1748c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   17490:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   17494:	f004 fdb6 	bl	1c004 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   17498:	4621      	mov	r1, r4
   1749a:	f107 0208 	add.w	r2, r7, #8
   1749e:	f241 0002 	movw	r0, #4098	; 0x1002
   174a2:	f7ff fa65 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   174a6:	4604      	mov	r4, r0
   174a8:	b9d0      	cbnz	r0, 174e0 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   174aa:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   174ac:	488d      	ldr	r0, [pc, #564]	; (176e4 <bt_init+0x30c>)
   174ae:	68f1      	ldr	r1, [r6, #12]
   174b0:	2240      	movs	r2, #64	; 0x40
   174b2:	3101      	adds	r1, #1
   174b4:	f00d fd27 	bl	24f06 <memcpy>
	net_buf_unref(rsp);
   174b8:	4630      	mov	r0, r6
   174ba:	f004 fda3 	bl	1c004 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   174be:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   174c2:	065e      	lsls	r6, r3, #25
   174c4:	d410      	bmi.n	174e8 <bt_init+0x110>
		LOG_ERR("Non-LE capable controller detected!");
   174c6:	4b88      	ldr	r3, [pc, #544]	; (176e8 <bt_init+0x310>)
   174c8:	61fb      	str	r3, [r7, #28]
   174ca:	2302      	movs	r3, #2
   174cc:	4887      	ldr	r0, [pc, #540]	; (176ec <bt_init+0x314>)
   174ce:	61bb      	str	r3, [r7, #24]
   174d0:	f107 0218 	add.w	r2, r7, #24
   174d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   174d8:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   174dc:	f00d fdd0 	bl	25080 <z_log_msg_static_create.constprop.0>
}
   174e0:	4620      	mov	r0, r4
   174e2:	3724      	adds	r7, #36	; 0x24
   174e4:	46bd      	mov	sp, r7
   174e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   174e8:	4621      	mov	r1, r4
   174ea:	f107 0208 	add.w	r2, r7, #8
   174ee:	f242 0003 	movw	r0, #8195	; 0x2003
   174f2:	f7ff fa3d 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   174f6:	4604      	mov	r4, r0
   174f8:	2800      	cmp	r0, #0
   174fa:	d1f1      	bne.n	174e0 <bt_init+0x108>
	read_le_features_complete(rsp);
   174fc:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   174fe:	487c      	ldr	r0, [pc, #496]	; (176f0 <bt_init+0x318>)
   17500:	68f1      	ldr	r1, [r6, #12]
   17502:	2208      	movs	r2, #8
   17504:	3101      	adds	r1, #1
   17506:	f00d fcfe 	bl	24f06 <memcpy>
	net_buf_unref(rsp);
   1750a:	4630      	mov	r0, r6
   1750c:	f004 fd7a 	bl	1c004 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   17510:	4621      	mov	r1, r4
   17512:	f107 0208 	add.w	r2, r7, #8
   17516:	f242 0002 	movw	r0, #8194	; 0x2002
   1751a:	f7ff fa29 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   1751e:	4604      	mov	r4, r0
   17520:	2800      	cmp	r0, #0
   17522:	d1dd      	bne.n	174e0 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   17524:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   17526:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   17528:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1752c:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   1752e:	b141      	cbz	r1, 17542 <bt_init+0x16a>
   17530:	78d9      	ldrb	r1, [r3, #3]
   17532:	b131      	cbz	r1, 17542 <bt_init+0x16a>
	bt_dev.le.acl_mtu = acl_mtu;
   17534:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   17538:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1753a:	486e      	ldr	r0, [pc, #440]	; (176f4 <bt_init+0x31c>)
   1753c:	4611      	mov	r1, r2
   1753e:	f00f fbe2 	bl	26d06 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   17542:	4620      	mov	r0, r4
   17544:	f004 fd5e 	bl	1c004 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17548:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   1754c:	f016 0620 	ands.w	r6, r6, #32
   17550:	d118      	bne.n	17584 <bt_init+0x1ac>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   17552:	2102      	movs	r1, #2
   17554:	f640 406d 	movw	r0, #3181	; 0xc6d
   17558:	f7ff f9bc 	bl	168d4 <bt_hci_cmd_create>
		if (!buf) {
   1755c:	4604      	mov	r4, r0
   1755e:	2800      	cmp	r0, #0
   17560:	f000 80a8 	beq.w	176b4 <bt_init+0x2dc>
	return net_buf_simple_add(&buf->b, len);
   17564:	2102      	movs	r1, #2
   17566:	300c      	adds	r0, #12
   17568:	f004 fe90 	bl	1c28c <net_buf_simple_add>
		cp_le->le = 0x01;
   1756c:	2301      	movs	r3, #1
   1756e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17570:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   17572:	4621      	mov	r1, r4
   17574:	4632      	mov	r2, r6
   17576:	f640 406d 	movw	r0, #3181	; 0xc6d
   1757a:	f7ff f9f9 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   1757e:	4604      	mov	r4, r0
   17580:	2800      	cmp	r0, #0
   17582:	d1ad      	bne.n	174e0 <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   17584:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   17588:	071c      	lsls	r4, r3, #28
   1758a:	d513      	bpl.n	175b4 <bt_init+0x1dc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1758c:	f107 0208 	add.w	r2, r7, #8
   17590:	2100      	movs	r1, #0
   17592:	f242 001c 	movw	r0, #8220	; 0x201c
   17596:	f7ff f9eb 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   1759a:	4604      	mov	r4, r0
   1759c:	2800      	cmp	r0, #0
   1759e:	d19f      	bne.n	174e0 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   175a0:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   175a2:	68c3      	ldr	r3, [r0, #12]
   175a4:	f8d3 2001 	ldr.w	r2, [r3, #1]
   175a8:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   175ac:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   175b0:	f004 fd28 	bl	1c004 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   175b4:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   175b8:	0698      	lsls	r0, r3, #26
   175ba:	d520      	bpl.n	175fe <bt_init+0x226>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   175bc:	1d39      	adds	r1, r7, #4
   175be:	1cb8      	adds	r0, r7, #2
   175c0:	f7ff fa56 	bl	16a70 <hci_le_read_max_data_len>
		if (err) {
   175c4:	4604      	mov	r4, r0
   175c6:	2800      	cmp	r0, #0
   175c8:	d18a      	bne.n	174e0 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   175ca:	2104      	movs	r1, #4
   175cc:	f242 0024 	movw	r0, #8228	; 0x2024
   175d0:	f7ff f980 	bl	168d4 <bt_hci_cmd_create>
		if (!buf) {
   175d4:	4606      	mov	r6, r0
   175d6:	2800      	cmp	r0, #0
   175d8:	d06c      	beq.n	176b4 <bt_init+0x2dc>
   175da:	2104      	movs	r1, #4
   175dc:	300c      	adds	r0, #12
   175de:	f004 fe55 	bl	1c28c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   175e2:	887b      	ldrh	r3, [r7, #2]
   175e4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   175e6:	88bb      	ldrh	r3, [r7, #4]
   175e8:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   175ea:	4622      	mov	r2, r4
   175ec:	4631      	mov	r1, r6
   175ee:	f242 0024 	movw	r0, #8228	; 0x2024
   175f2:	f7ff f9bd 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   175f6:	4604      	mov	r4, r0
   175f8:	2800      	cmp	r0, #0
   175fa:	f47f af71 	bne.w	174e0 <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   175fe:	2108      	movs	r1, #8
   17600:	f242 0001 	movw	r0, #8193	; 0x2001
   17604:	f7ff f966 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   17608:	4604      	mov	r4, r0
   1760a:	2800      	cmp	r0, #0
   1760c:	d052      	beq.n	176b4 <bt_init+0x2dc>
   1760e:	2108      	movs	r1, #8
   17610:	300c      	adds	r0, #12
   17612:	f004 fe3b 	bl	1c28c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   17616:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1761a:	f012 0f02 	tst.w	r2, #2
   1761e:	bf14      	ite	ne
   17620:	232f      	movne	r3, #47	; 0x2f
   17622:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   17624:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17626:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1762a:	bf48      	it	mi
   1762c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17630:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   17634:	bf18      	it	ne
   17636:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   1763a:	2200      	movs	r2, #0
   1763c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1763e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   17642:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   17644:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   17646:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   17648:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1764a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1764c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1764e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17650:	4621      	mov	r1, r4
   17652:	f242 0001 	movw	r0, #8193	; 0x2001
   17656:	f7ff f98b 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   1765a:	4604      	mov	r4, r0
   1765c:	2800      	cmp	r0, #0
   1765e:	f47f af3f 	bne.w	174e0 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17662:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   17666:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1766a:	069a      	lsls	r2, r3, #26
   1766c:	d425      	bmi.n	176ba <bt_init+0x2e2>
	if (bt_dev.le.acl_mtu) {
   1766e:	b9d1      	cbnz	r1, 176a6 <bt_init+0x2ce>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17670:	f107 0208 	add.w	r2, r7, #8
   17674:	f241 0005 	movw	r0, #4101	; 0x1005
   17678:	f7ff f97a 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   1767c:	4604      	mov	r4, r0
   1767e:	2800      	cmp	r0, #0
   17680:	f47f af2e 	bne.w	174e0 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   17684:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   17688:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   1768a:	b94b      	cbnz	r3, 176a0 <bt_init+0x2c8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1768c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1768e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17692:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   17696:	889a      	ldrh	r2, [r3, #4]
   17698:	4816      	ldr	r0, [pc, #88]	; (176f4 <bt_init+0x31c>)
   1769a:	4611      	mov	r1, r2
   1769c:	f00f fb33 	bl	26d06 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   176a0:	4620      	mov	r0, r4
   176a2:	f004 fcaf 	bl	1c004 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   176a6:	2108      	movs	r1, #8
   176a8:	f640 4001 	movw	r0, #3073	; 0xc01
   176ac:	f7ff f912 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   176b0:	4604      	mov	r4, r0
   176b2:	bb18      	cbnz	r0, 176fc <bt_init+0x324>
		return -ENOBUFS;
   176b4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   176b8:	e712      	b.n	174e0 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   176ba:	2900      	cmp	r1, #0
   176bc:	d1f3      	bne.n	176a6 <bt_init+0x2ce>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   176be:	4b0e      	ldr	r3, [pc, #56]	; (176f8 <bt_init+0x320>)
   176c0:	61fb      	str	r3, [r7, #28]
   176c2:	2302      	movs	r3, #2
   176c4:	4809      	ldr	r0, [pc, #36]	; (176ec <bt_init+0x314>)
   176c6:	61bb      	str	r3, [r7, #24]
   176c8:	f107 0218 	add.w	r2, r7, #24
   176cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   176d0:	f00d fcd6 	bl	25080 <z_log_msg_static_create.constprop.0>
		return -EIO;
   176d4:	f06f 0404 	mvn.w	r4, #4
   176d8:	e702      	b.n	174e0 <bt_init+0x108>
   176da:	bf00      	nop
   176dc:	20000388 	.word	0x20000388
   176e0:	20000400 	.word	0x20000400
   176e4:	20000408 	.word	0x20000408
   176e8:	0002960a 	.word	0x0002960a
   176ec:	00027368 	.word	0x00027368
   176f0:	20000460 	.word	0x20000460
   176f4:	20000490 	.word	0x20000490
   176f8:	0002962e 	.word	0x0002962e
   176fc:	2108      	movs	r1, #8
   176fe:	300c      	adds	r0, #12
   17700:	f004 fdc4 	bl	1c28c <net_buf_simple_add>
	dst[0] = val;
   17704:	2310      	movs	r3, #16
   17706:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17708:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   1770a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   1770c:	7043      	strb	r3, [r0, #1]
   1770e:	2602      	movs	r6, #2
   17710:	2320      	movs	r3, #32
	dst[0] = val;
   17712:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   17714:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   17716:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   17718:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1771a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1771c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1771e:	4621      	mov	r1, r4
   17720:	f640 4001 	movw	r0, #3073	; 0xc01
   17724:	f7ff f924 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17728:	4604      	mov	r4, r0
   1772a:	2800      	cmp	r0, #0
   1772c:	f47f aed8 	bne.w	174e0 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17730:	4601      	mov	r1, r0
   17732:	1d3a      	adds	r2, r7, #4
   17734:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17738:	f7ff f91a 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   1773c:	b1c0      	cbz	r0, 17770 <bt_init+0x398>
		LOG_WRN("Vendor HCI extensions not available");
   1773e:	4b57      	ldr	r3, [pc, #348]	; (1789c <bt_init+0x4c4>)
   17740:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
   17744:	4856      	ldr	r0, [pc, #344]	; (178a0 <bt_init+0x4c8>)
   17746:	f107 0218 	add.w	r2, r7, #24
   1774a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1774e:	f00d fc97 	bl	25080 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   17752:	f000 fb69 	bl	17e28 <bt_id_init>
	if (err) {
   17756:	4604      	mov	r4, r0
   17758:	2800      	cmp	r0, #0
   1775a:	f47f aec1 	bne.w	174e0 <bt_init+0x108>
		err = bt_conn_init();
   1775e:	f001 ff21 	bl	195a4 <bt_conn_init>
		if (err) {
   17762:	4604      	mov	r4, r0
   17764:	2800      	cmp	r0, #0
   17766:	f47f aebb 	bne.w	174e0 <bt_init+0x108>
	bt_finalize_init();
   1776a:	f7ff fd8b 	bl	17284 <bt_finalize_init>
	return 0;
   1776e:	e6b7      	b.n	174e0 <bt_init+0x108>
	rp.info = (void *)rsp->data;
   17770:	687b      	ldr	r3, [r7, #4]
   17772:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   17774:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   17778:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1777a:	bf96      	itet	ls
   1777c:	4a49      	ldrls	r2, [pc, #292]	; (178a4 <bt_init+0x4cc>)
	return "unknown";
   1777e:	494a      	ldrhi	r1, [pc, #296]	; (178a8 <bt_init+0x4d0>)
		return plat_str[platform];
   17780:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   17784:	466e      	mov	r6, sp
   17786:	b08a      	sub	sp, #40	; 0x28
   17788:	466a      	mov	r2, sp
   1778a:	4848      	ldr	r0, [pc, #288]	; (178ac <bt_init+0x4d4>)
   1778c:	61d3      	str	r3, [r2, #28]
   1778e:	f44f 7300 	mov.w	r3, #512	; 0x200
   17792:	8413      	strh	r3, [r2, #32]
   17794:	4b46      	ldr	r3, [pc, #280]	; (178b0 <bt_init+0x4d8>)
   17796:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1779a:	f842 3f10 	str.w	r3, [r2, #16]!
   1779e:	4840      	ldr	r0, [pc, #256]	; (178a0 <bt_init+0x4c8>)
   177a0:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   177a4:	f00d fc6c 	bl	25080 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   177a8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   177ac:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   177b0:	2a02      	cmp	r2, #2
   177b2:	46b5      	mov	sp, r6
   177b4:	d14c      	bne.n	17850 <bt_init+0x478>
	if (variant < ARRAY_SIZE(nordic_str)) {
   177b6:	2b03      	cmp	r3, #3
   177b8:	d84a      	bhi.n	17850 <bt_init+0x478>
		return nordic_str[variant];
   177ba:	4a3e      	ldr	r2, [pc, #248]	; (178b4 <bt_init+0x4dc>)
   177bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   177c0:	466e      	mov	r6, sp
   177c2:	b08a      	sub	sp, #40	; 0x28
   177c4:	466a      	mov	r2, sp
   177c6:	483c      	ldr	r0, [pc, #240]	; (178b8 <bt_init+0x4e0>)
   177c8:	61d3      	str	r3, [r2, #28]
   177ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   177ce:	8413      	strh	r3, [r2, #32]
   177d0:	4b37      	ldr	r3, [pc, #220]	; (178b0 <bt_init+0x4d8>)
   177d2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   177d6:	f842 3f10 	str.w	r3, [r2, #16]!
   177da:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   177de:	4830      	ldr	r0, [pc, #192]	; (178a0 <bt_init+0x4c8>)
   177e0:	f00d fc4e 	bl	25080 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   177e4:	7963      	ldrb	r3, [r4, #5]
   177e6:	f894 c006 	ldrb.w	ip, [r4, #6]
   177ea:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   177ee:	2b03      	cmp	r3, #3
   177f0:	46b5      	mov	sp, r6
		return var_str[variant];
   177f2:	bf98      	it	ls
   177f4:	4a31      	ldrls	r2, [pc, #196]	; (178bc <bt_init+0x4e4>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   177f6:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   177fa:	bf94      	ite	ls
   177fc:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   17800:	4929      	ldrhi	r1, [pc, #164]	; (178a8 <bt_init+0x4d0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   17802:	466c      	mov	r4, sp
   17804:	b08c      	sub	sp, #48	; 0x30
   17806:	466a      	mov	r2, sp
   17808:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 178d4 <bt_init+0x4fc>
   1780c:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   17810:	f44f 7300 	mov.w	r3, #512	; 0x200
   17814:	8593      	strh	r3, [r2, #44]	; 0x2c
   17816:	4b2a      	ldr	r3, [pc, #168]	; (178c0 <bt_init+0x4e8>)
   17818:	e9c2 e105 	strd	lr, r1, [r2, #20]
   1781c:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   17820:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   17824:	f842 3f10 	str.w	r3, [r2, #16]!
   17828:	481d      	ldr	r0, [pc, #116]	; (178a0 <bt_init+0x4c8>)
   1782a:	f00d fc29 	bl	25080 <z_log_msg_static_create.constprop.0>
   1782e:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   17830:	6878      	ldr	r0, [r7, #4]
   17832:	f004 fbe7 	bl	1c004 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   17836:	1d3a      	adds	r2, r7, #4
   17838:	2100      	movs	r1, #0
   1783a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1783e:	f7ff f897 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17842:	4604      	mov	r4, r0
   17844:	b130      	cbz	r0, 17854 <bt_init+0x47c>
		LOG_WRN("Failed to read supported vendor commands");
   17846:	4b1f      	ldr	r3, [pc, #124]	; (178c4 <bt_init+0x4ec>)
			LOG_WRN("Failed to read supported vendor features");
   17848:	61fb      	str	r3, [r7, #28]
   1784a:	2302      	movs	r3, #2
   1784c:	61bb      	str	r3, [r7, #24]
   1784e:	e779      	b.n	17744 <bt_init+0x36c>
		return "unknown";
   17850:	4915      	ldr	r1, [pc, #84]	; (178a8 <bt_init+0x4d0>)
   17852:	e7b5      	b.n	177c0 <bt_init+0x3e8>
	rp.cmds = (void *)rsp->data;
   17854:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   17856:	481c      	ldr	r0, [pc, #112]	; (178c8 <bt_init+0x4f0>)
   17858:	68f1      	ldr	r1, [r6, #12]
   1785a:	2202      	movs	r2, #2
   1785c:	3101      	adds	r1, #1
   1785e:	f00d fb52 	bl	24f06 <memcpy>
	net_buf_unref(rsp);
   17862:	4630      	mov	r0, r6
   17864:	f004 fbce 	bl	1c004 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17868:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   1786c:	075b      	lsls	r3, r3, #29
   1786e:	f57f af70 	bpl.w	17752 <bt_init+0x37a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17872:	1d3a      	adds	r2, r7, #4
   17874:	4621      	mov	r1, r4
   17876:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1787a:	f7ff f879 	bl	16970 <bt_hci_cmd_send_sync>
		if (err) {
   1787e:	b108      	cbz	r0, 17884 <bt_init+0x4ac>
			LOG_WRN("Failed to read supported vendor features");
   17880:	4b12      	ldr	r3, [pc, #72]	; (178cc <bt_init+0x4f4>)
   17882:	e7e1      	b.n	17848 <bt_init+0x470>
		rp.feat = (void *)rsp->data;
   17884:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17886:	4812      	ldr	r0, [pc, #72]	; (178d0 <bt_init+0x4f8>)
   17888:	68e1      	ldr	r1, [r4, #12]
   1788a:	2201      	movs	r2, #1
   1788c:	4411      	add	r1, r2
   1788e:	f00d fb3a 	bl	24f06 <memcpy>
		net_buf_unref(rsp);
   17892:	4620      	mov	r0, r4
   17894:	f004 fbb6 	bl	1c004 <net_buf_unref>
   17898:	e75b      	b.n	17752 <bt_init+0x37a>
   1789a:	bf00      	nop
   1789c:	00029651 	.word	0x00029651
   178a0:	00027368 	.word	0x00027368
   178a4:	00027688 	.word	0x00027688
   178a8:	00029133 	.word	0x00029133
   178ac:	00029675 	.word	0x00029675
   178b0:	01000004 	.word	0x01000004
   178b4:	00027678 	.word	0x00027678
   178b8:	0002968e 	.word	0x0002968e
   178bc:	00027668 	.word	0x00027668
   178c0:	01000007 	.word	0x01000007
   178c4:	000296d3 	.word	0x000296d3
   178c8:	20000449 	.word	0x20000449
   178cc:	000296fc 	.word	0x000296fc
   178d0:	20000448 	.word	0x20000448
   178d4:	000296a6 	.word	0x000296a6

000178d8 <init_work>:
{
   178d8:	b510      	push	{r4, lr}
	err = bt_init();
   178da:	f7ff fd7d 	bl	173d8 <bt_init>
	if (ready_cb) {
   178de:	4b03      	ldr	r3, [pc, #12]	; (178ec <init_work+0x14>)
   178e0:	681b      	ldr	r3, [r3, #0]
   178e2:	b113      	cbz	r3, 178ea <init_work+0x12>
}
   178e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   178e8:	4718      	bx	r3
}
   178ea:	bd10      	pop	{r4, pc}
   178ec:	20002db8 	.word	0x20002db8

000178f0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   178f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   178f2:	4d3c      	ldr	r5, [pc, #240]	; (179e4 <bt_enable+0xf4>)
{
   178f4:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   178f6:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   178fa:	af08      	add	r7, sp, #32
   178fc:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   178fe:	b983      	cbnz	r3, 17922 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   17900:	4b39      	ldr	r3, [pc, #228]	; (179e8 <bt_enable+0xf8>)
   17902:	617b      	str	r3, [r7, #20]
   17904:	4839      	ldr	r0, [pc, #228]	; (179ec <bt_enable+0xfc>)
   17906:	2302      	movs	r3, #2
   17908:	f107 0210 	add.w	r2, r7, #16
   1790c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   17910:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   17914:	613b      	str	r3, [r7, #16]
   17916:	f00d fbb3 	bl	25080 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1791a:	4620      	mov	r0, r4
   1791c:	371c      	adds	r7, #28
   1791e:	46bd      	mov	sp, r7
   17920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17922:	f06f 0102 	mvn.w	r1, #2
   17926:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   1792a:	f00d fbac 	bl	25086 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1792e:	2101      	movs	r1, #1
   17930:	f00d fb97 	bl	25062 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17934:	ea10 0401 	ands.w	r4, r0, r1
   17938:	d150      	bne.n	179dc <bt_enable+0xec>
	ready_cb = cb;
   1793a:	4b2d      	ldr	r3, [pc, #180]	; (179f0 <bt_enable+0x100>)
   1793c:	601e      	str	r6, [r3, #0]
   1793e:	460a      	mov	r2, r1
   17940:	f505 7090 	add.w	r0, r5, #288	; 0x120
   17944:	f00f f9df 	bl	26d06 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   17948:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1794c:	f00f f9b5 	bl	26cba <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17950:	2200      	movs	r2, #0
   17952:	2300      	movs	r3, #0
   17954:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17958:	f06f 0308 	mvn.w	r3, #8
   1795c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17960:	e9cd 4400 	strd	r4, r4, [sp]
   17964:	4b23      	ldr	r3, [pc, #140]	; (179f4 <bt_enable+0x104>)
   17966:	4924      	ldr	r1, [pc, #144]	; (179f8 <bt_enable+0x108>)
   17968:	9404      	str	r4, [sp, #16]
   1796a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1796e:	4823      	ldr	r0, [pc, #140]	; (179fc <bt_enable+0x10c>)
   17970:	f008 fdde 	bl	20530 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17974:	4922      	ldr	r1, [pc, #136]	; (17a00 <bt_enable+0x110>)
   17976:	4821      	ldr	r0, [pc, #132]	; (179fc <bt_enable+0x10c>)
   17978:	f00f f97d 	bl	26c76 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1797c:	4821      	ldr	r0, [pc, #132]	; (17a04 <bt_enable+0x114>)
   1797e:	f009 fccf 	bl	21320 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   17982:	4921      	ldr	r1, [pc, #132]	; (17a08 <bt_enable+0x118>)
   17984:	481f      	ldr	r0, [pc, #124]	; (17a04 <bt_enable+0x114>)
   17986:	9400      	str	r4, [sp, #0]
   17988:	f06f 0307 	mvn.w	r3, #7
   1798c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17990:	f009 fce0 	bl	21354 <k_work_queue_start>
   17994:	491d      	ldr	r1, [pc, #116]	; (17a0c <bt_enable+0x11c>)
   17996:	481b      	ldr	r0, [pc, #108]	; (17a04 <bt_enable+0x114>)
   17998:	f00f f96d 	bl	26c76 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1799c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   179a0:	68db      	ldr	r3, [r3, #12]
   179a2:	4798      	blx	r3
	if (err) {
   179a4:	4604      	mov	r4, r0
   179a6:	b178      	cbz	r0, 179c8 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   179a8:	466d      	mov	r5, sp
   179aa:	462a      	mov	r2, r5
   179ac:	b088      	sub	sp, #32
   179ae:	4b18      	ldr	r3, [pc, #96]	; (17a10 <bt_enable+0x120>)
   179b0:	e9c5 3005 	strd	r3, r0, [r5, #20]
   179b4:	2303      	movs	r3, #3
   179b6:	f842 3f10 	str.w	r3, [r2, #16]!
   179ba:	480c      	ldr	r0, [pc, #48]	; (179ec <bt_enable+0xfc>)
   179bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   179c0:	f00d fb5e 	bl	25080 <z_log_msg_static_create.constprop.0>
   179c4:	46ad      	mov	sp, r5
		return err;
   179c6:	e7a8      	b.n	1791a <bt_enable+0x2a>
	if (!cb) {
   179c8:	b91e      	cbnz	r6, 179d2 <bt_enable+0xe2>
		return bt_init();
   179ca:	f7ff fd05 	bl	173d8 <bt_init>
   179ce:	4604      	mov	r4, r0
   179d0:	e7a3      	b.n	1791a <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   179d2:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   179d6:	f009 fc9d 	bl	21314 <k_work_submit>
	return 0;
   179da:	e79e      	b.n	1791a <bt_enable+0x2a>
		return -EALREADY;
   179dc:	f06f 0477 	mvn.w	r4, #119	; 0x77
   179e0:	e79b      	b.n	1791a <bt_enable+0x2a>
   179e2:	bf00      	nop
   179e4:	20000388 	.word	0x20000388
   179e8:	00029725 	.word	0x00029725
   179ec:	00027368 	.word	0x00027368
   179f0:	20002db8 	.word	0x20002db8
   179f4:	00016fbd 	.word	0x00016fbd
   179f8:	20004500 	.word	0x20004500
   179fc:	20001d58 	.word	0x20001d58
   17a00:	0002973e 	.word	0x0002973e
   17a04:	20001e20 	.word	0x20001e20
   17a08:	20004b80 	.word	0x20004b80
   17a0c:	00029744 	.word	0x00029744
   17a10:	0002974a 	.word	0x0002974a

00017a14 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a14:	4b04      	ldr	r3, [pc, #16]	; (17a28 <bt_is_ready+0x14>)
   17a16:	f3bf 8f5b 	dmb	ish
   17a1a:	6818      	ldr	r0, [r3, #0]
   17a1c:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   17a20:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17a24:	4770      	bx	lr
   17a26:	bf00      	nop
   17a28:	2000045c 	.word	0x2000045c

00017a2c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   17a2c:	4800      	ldr	r0, [pc, #0]	; (17a30 <bt_get_name+0x4>)
   17a2e:	4770      	bx	lr
   17a30:	00027f44 	.word	0x00027f44

00017a34 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17a36:	4f0a      	ldr	r7, [pc, #40]	; (17a60 <id_find+0x2c>)
{
   17a38:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   17a3a:	2500      	movs	r5, #0
   17a3c:	79fb      	ldrb	r3, [r7, #7]
   17a3e:	b2ec      	uxtb	r4, r5
   17a40:	42a3      	cmp	r3, r4
   17a42:	d802      	bhi.n	17a4a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17a44:	f06f 0001 	mvn.w	r0, #1
   17a48:	e009      	b.n	17a5e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   17a4a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   17a4e:	4439      	add	r1, r7
   17a50:	4630      	mov	r0, r6
   17a52:	f00d fbc9 	bl	251e8 <bt_addr_le_eq>
   17a56:	3501      	adds	r5, #1
   17a58:	2800      	cmp	r0, #0
   17a5a:	d0ef      	beq.n	17a3c <id_find+0x8>
   17a5c:	4620      	mov	r0, r4
}
   17a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a60:	20000388 	.word	0x20000388

00017a64 <set_random_address>:
{
   17a64:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17a66:	4913      	ldr	r1, [pc, #76]	; (17ab4 <set_random_address+0x50>)
   17a68:	2206      	movs	r2, #6
   17a6a:	4605      	mov	r5, r0
   17a6c:	f00d fa3b 	bl	24ee6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17a70:	b1d8      	cbz	r0, 17aaa <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17a72:	2106      	movs	r1, #6
   17a74:	f242 0005 	movw	r0, #8197	; 0x2005
   17a78:	f7fe ff2c 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   17a7c:	4604      	mov	r4, r0
   17a7e:	b1b0      	cbz	r0, 17aae <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17a80:	2206      	movs	r2, #6
   17a82:	4629      	mov	r1, r5
   17a84:	300c      	adds	r0, #12
   17a86:	f00e fc47 	bl	26318 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17a8a:	2200      	movs	r2, #0
   17a8c:	4621      	mov	r1, r4
   17a8e:	f242 0005 	movw	r0, #8197	; 0x2005
   17a92:	f7fe ff6d 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17a96:	b948      	cbnz	r0, 17aac <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17a98:	2206      	movs	r2, #6
   17a9a:	4806      	ldr	r0, [pc, #24]	; (17ab4 <set_random_address+0x50>)
   17a9c:	4629      	mov	r1, r5
   17a9e:	f00d fa32 	bl	24f06 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17aa2:	4b05      	ldr	r3, [pc, #20]	; (17ab8 <set_random_address+0x54>)
   17aa4:	2201      	movs	r2, #1
   17aa6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   17aaa:	2000      	movs	r0, #0
}
   17aac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17aae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17ab2:	e7fb      	b.n	17aac <set_random_address+0x48>
   17ab4:	200003f1 	.word	0x200003f1
   17ab8:	20000388 	.word	0x20000388

00017abc <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   17abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17abe:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17ac0:	460d      	mov	r5, r1
   17ac2:	b179      	cbz	r1, 17ae4 <id_create.constprop.0+0x28>
   17ac4:	4914      	ldr	r1, [pc, #80]	; (17b18 <id_create.constprop.0+0x5c>)
   17ac6:	4628      	mov	r0, r5
   17ac8:	f00d fb8e 	bl	251e8 <bt_addr_le_eq>
   17acc:	b950      	cbnz	r0, 17ae4 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   17ace:	4813      	ldr	r0, [pc, #76]	; (17b1c <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17ad0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17ad4:	2207      	movs	r2, #7
   17ad6:	4629      	mov	r1, r5
   17ad8:	4420      	add	r0, r4
   17ada:	f00d fa14 	bl	24f06 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   17ade:	2000      	movs	r0, #0
}
   17ae0:	b003      	add	sp, #12
   17ae2:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   17ae4:	4668      	mov	r0, sp
   17ae6:	f00d fa8d 	bl	25004 <bt_addr_le_create_static>
			if (err) {
   17aea:	2800      	cmp	r0, #0
   17aec:	d1f8      	bne.n	17ae0 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   17aee:	4668      	mov	r0, sp
   17af0:	f7ff ffa0 	bl	17a34 <id_find>
   17af4:	2800      	cmp	r0, #0
   17af6:	daf5      	bge.n	17ae4 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17af8:	4b08      	ldr	r3, [pc, #32]	; (17b1c <id_create.constprop.0+0x60>)
   17afa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17afe:	441c      	add	r4, r3
   17b00:	2207      	movs	r2, #7
   17b02:	4669      	mov	r1, sp
   17b04:	4620      	mov	r0, r4
   17b06:	f00d f9fe 	bl	24f06 <memcpy>
		if (addr) {
   17b0a:	2d00      	cmp	r5, #0
   17b0c:	d0e7      	beq.n	17ade <id_create.constprop.0+0x22>
   17b0e:	2207      	movs	r2, #7
   17b10:	4621      	mov	r1, r4
   17b12:	4628      	mov	r0, r5
   17b14:	e7e1      	b.n	17ada <id_create.constprop.0+0x1e>
   17b16:	bf00      	nop
   17b18:	00029059 	.word	0x00029059
   17b1c:	20000388 	.word	0x20000388

00017b20 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17b20:	b570      	push	{r4, r5, r6, lr}
   17b22:	460d      	mov	r5, r1
   17b24:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17b26:	4604      	mov	r4, r0
   17b28:	b920      	cbnz	r0, 17b34 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   17b2a:	b31d      	cbz	r5, 17b74 <bt_id_create+0x54>
			return -EINVAL;
   17b2c:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   17b30:	b006      	add	sp, #24
   17b32:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17b34:	4921      	ldr	r1, [pc, #132]	; (17bbc <bt_id_create+0x9c>)
   17b36:	f00d fb57 	bl	251e8 <bt_addr_le_eq>
   17b3a:	2800      	cmp	r0, #0
   17b3c:	d1f5      	bne.n	17b2a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17b3e:	7823      	ldrb	r3, [r4, #0]
   17b40:	2b01      	cmp	r3, #1
   17b42:	d104      	bne.n	17b4e <bt_id_create+0x2e>
   17b44:	79a3      	ldrb	r3, [r4, #6]
   17b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17b4a:	2bc0      	cmp	r3, #192	; 0xc0
   17b4c:	d00a      	beq.n	17b64 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   17b4e:	4b1c      	ldr	r3, [pc, #112]	; (17bc0 <bt_id_create+0xa0>)
   17b50:	9305      	str	r3, [sp, #20]
   17b52:	481c      	ldr	r0, [pc, #112]	; (17bc4 <bt_id_create+0xa4>)
   17b54:	2302      	movs	r3, #2
   17b56:	aa04      	add	r2, sp, #16
   17b58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17b5c:	9304      	str	r3, [sp, #16]
   17b5e:	f00d fb4b 	bl	251f8 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17b62:	e7e3      	b.n	17b2c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   17b64:	4620      	mov	r0, r4
   17b66:	f7ff ff65 	bl	17a34 <id_find>
   17b6a:	2800      	cmp	r0, #0
   17b6c:	dbdd      	blt.n	17b2a <bt_id_create+0xa>
			return -EALREADY;
   17b6e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17b72:	e7dd      	b.n	17b30 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17b74:	4d14      	ldr	r5, [pc, #80]	; (17bc8 <bt_id_create+0xa8>)
   17b76:	79eb      	ldrb	r3, [r5, #7]
   17b78:	2b01      	cmp	r3, #1
   17b7a:	d01c      	beq.n	17bb6 <bt_id_create+0x96>
   17b7c:	f3bf 8f5b 	dmb	ish
   17b80:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   17b84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17b88:	07db      	lsls	r3, r3, #31
   17b8a:	d50b      	bpl.n	17ba4 <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   17b8c:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   17b8e:	4621      	mov	r1, r4
   17b90:	4630      	mov	r0, r6
   17b92:	f7ff ff93 	bl	17abc <id_create.constprop.0>
	if (err) {
   17b96:	2800      	cmp	r0, #0
   17b98:	d1ca      	bne.n	17b30 <bt_id_create+0x10>
		bt_dev.id_count++;
   17b9a:	79eb      	ldrb	r3, [r5, #7]
   17b9c:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   17b9e:	4630      	mov	r0, r6
		bt_dev.id_count++;
   17ba0:	71eb      	strb	r3, [r5, #7]
	return new_id;
   17ba2:	e7c5      	b.n	17b30 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   17ba4:	2c00      	cmp	r4, #0
   17ba6:	d0c1      	beq.n	17b2c <bt_id_create+0xc>
   17ba8:	4904      	ldr	r1, [pc, #16]	; (17bbc <bt_id_create+0x9c>)
   17baa:	4620      	mov	r0, r4
   17bac:	f00d fb1c 	bl	251e8 <bt_addr_le_eq>
   17bb0:	2800      	cmp	r0, #0
   17bb2:	d0eb      	beq.n	17b8c <bt_id_create+0x6c>
   17bb4:	e7ba      	b.n	17b2c <bt_id_create+0xc>
		return -ENOMEM;
   17bb6:	f06f 000b 	mvn.w	r0, #11
   17bba:	e7b9      	b.n	17b30 <bt_id_create+0x10>
   17bbc:	00029059 	.word	0x00029059
   17bc0:	00029859 	.word	0x00029859
   17bc4:	00027370 	.word	0x00027370
   17bc8:	20000388 	.word	0x20000388

00017bcc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17bcc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   17bce:	4604      	mov	r4, r0
{
   17bd0:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   17bd2:	b960      	cbnz	r0, 17bee <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   17bd4:	4b1a      	ldr	r3, [pc, #104]	; (17c40 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   17bd6:	9307      	str	r3, [sp, #28]
   17bd8:	481a      	ldr	r0, [pc, #104]	; (17c44 <bt_id_read_public_addr+0x78>)
   17bda:	2302      	movs	r3, #2
   17bdc:	aa06      	add	r2, sp, #24
   17bde:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17be2:	9306      	str	r3, [sp, #24]
   17be4:	f00d fb08 	bl	251f8 <z_log_msg_static_create.constprop.0>
		return 0U;
   17be8:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17bea:	b008      	add	sp, #32
   17bec:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17bee:	aa01      	add	r2, sp, #4
   17bf0:	2100      	movs	r1, #0
   17bf2:	f241 0009 	movw	r0, #4105	; 0x1009
   17bf6:	f7fe febb 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17bfa:	4606      	mov	r6, r0
   17bfc:	b108      	cbz	r0, 17c02 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   17bfe:	4b12      	ldr	r3, [pc, #72]	; (17c48 <bt_id_read_public_addr+0x7c>)
   17c00:	e7e9      	b.n	17bd6 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   17c02:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   17c04:	4911      	ldr	r1, [pc, #68]	; (17c4c <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17c06:	68dd      	ldr	r5, [r3, #12]
   17c08:	3501      	adds	r5, #1
   17c0a:	2206      	movs	r2, #6
   17c0c:	4628      	mov	r0, r5
   17c0e:	f00d f96a 	bl	24ee6 <memcmp>
   17c12:	b918      	cbnz	r0, 17c1c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   17c14:	9801      	ldr	r0, [sp, #4]
   17c16:	f004 f9f5 	bl	1c004 <net_buf_unref>
		return 0U;
   17c1a:	e7e5      	b.n	17be8 <bt_id_read_public_addr+0x1c>
   17c1c:	490c      	ldr	r1, [pc, #48]	; (17c50 <bt_id_read_public_addr+0x84>)
   17c1e:	2206      	movs	r2, #6
   17c20:	4628      	mov	r0, r5
   17c22:	f00d f960 	bl	24ee6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17c26:	2800      	cmp	r0, #0
   17c28:	d0f4      	beq.n	17c14 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   17c2a:	2206      	movs	r2, #6
   17c2c:	4629      	mov	r1, r5
   17c2e:	1c60      	adds	r0, r4, #1
   17c30:	f00d f969 	bl	24f06 <memcpy>
	net_buf_unref(rsp);
   17c34:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17c36:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   17c38:	f004 f9e4 	bl	1c004 <net_buf_unref>
	return 1U;
   17c3c:	2001      	movs	r0, #1
   17c3e:	e7d4      	b.n	17bea <bt_id_read_public_addr+0x1e>
   17c40:	00029887 	.word	0x00029887
   17c44:	00027370 	.word	0x00027370
   17c48:	000298a0 	.word	0x000298a0
   17c4c:	00029066 	.word	0x00029066
   17c50:	00029060 	.word	0x00029060

00017c54 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   17c54:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   17c56:	4668      	mov	r0, sp
   17c58:	f7ff ffb8 	bl	17bcc <bt_id_read_public_addr>
   17c5c:	4b04      	ldr	r3, [pc, #16]	; (17c70 <bt_setup_public_id_addr+0x1c>)
   17c5e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   17c60:	b118      	cbz	r0, 17c6a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   17c62:	4669      	mov	r1, sp
   17c64:	2000      	movs	r0, #0
   17c66:	f7ff ff29 	bl	17abc <id_create.constprop.0>
}
   17c6a:	b003      	add	sp, #12
   17c6c:	f85d fb04 	ldr.w	pc, [sp], #4
   17c70:	20000388 	.word	0x20000388

00017c74 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17c78:	4b22      	ldr	r3, [pc, #136]	; (17d04 <bt_read_static_addr+0x90>)
   17c7a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   17c7e:	07db      	lsls	r3, r3, #31
{
   17c80:	b088      	sub	sp, #32
   17c82:	4607      	mov	r7, r0
   17c84:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17c86:	d40e      	bmi.n	17ca6 <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   17c88:	4b1f      	ldr	r3, [pc, #124]	; (17d08 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   17c8a:	9307      	str	r3, [sp, #28]
   17c8c:	481f      	ldr	r0, [pc, #124]	; (17d0c <bt_read_static_addr+0x98>)
   17c8e:	2302      	movs	r3, #2
   17c90:	aa06      	add	r2, sp, #24
   17c92:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   17c96:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   17c98:	9306      	str	r3, [sp, #24]
   17c9a:	f00d faad 	bl	251f8 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   17c9e:	4628      	mov	r0, r5
   17ca0:	b008      	add	sp, #32
   17ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17ca6:	aa01      	add	r2, sp, #4
   17ca8:	2100      	movs	r1, #0
   17caa:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17cae:	f7fe fe5f 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   17cb2:	4604      	mov	r4, r0
   17cb4:	b108      	cbz	r0, 17cba <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   17cb6:	4b16      	ldr	r3, [pc, #88]	; (17d10 <bt_read_static_addr+0x9c>)
   17cb8:	e7e7      	b.n	17c8a <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   17cba:	9b01      	ldr	r3, [sp, #4]
   17cbc:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   17cbe:	7875      	ldrb	r5, [r6, #1]
   17cc0:	4545      	cmp	r5, r8
   17cc2:	bf28      	it	cs
   17cc4:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   17cc6:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17cc8:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   17ccc:	42a5      	cmp	r5, r4
   17cce:	dc0f      	bgt.n	17cf0 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   17cd0:	9801      	ldr	r0, [sp, #4]
   17cd2:	f004 f997 	bl	1c004 <net_buf_unref>
	if (!cnt) {
   17cd6:	2d00      	cmp	r5, #0
   17cd8:	d1e1      	bne.n	17c9e <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   17cda:	4b0e      	ldr	r3, [pc, #56]	; (17d14 <bt_read_static_addr+0xa0>)
   17cdc:	9307      	str	r3, [sp, #28]
   17cde:	480b      	ldr	r0, [pc, #44]	; (17d0c <bt_read_static_addr+0x98>)
   17ce0:	2302      	movs	r3, #2
   17ce2:	aa06      	add	r2, sp, #24
   17ce4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17ce8:	9306      	str	r3, [sp, #24]
   17cea:	f00d fa85 	bl	251f8 <z_log_msg_static_create.constprop.0>
   17cee:	e7d6      	b.n	17c9e <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17cf0:	4631      	mov	r1, r6
   17cf2:	fb08 7004 	mla	r0, r8, r4, r7
   17cf6:	2216      	movs	r2, #22
   17cf8:	f00d f905 	bl	24f06 <memcpy>
	for (i = 0; i < cnt; i++) {
   17cfc:	3401      	adds	r4, #1
   17cfe:	3616      	adds	r6, #22
   17d00:	e7e4      	b.n	17ccc <bt_read_static_addr+0x58>
   17d02:	bf00      	nop
   17d04:	20000388 	.word	0x20000388
   17d08:	000298be 	.word	0x000298be
   17d0c:	00027370 	.word	0x00027370
   17d10:	000298ea 	.word	0x000298ea
   17d14:	0002990a 	.word	0x0002990a

00017d18 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17d18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   17d1a:	4e15      	ldr	r6, [pc, #84]	; (17d70 <bt_setup_random_id_addr+0x58>)
   17d1c:	79f4      	ldrb	r4, [r6, #7]
{
   17d1e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   17d20:	b92c      	cbnz	r4, 17d2e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   17d22:	2101      	movs	r1, #1
   17d24:	a802      	add	r0, sp, #8
   17d26:	f7ff ffa5 	bl	17c74 <bt_read_static_addr>
   17d2a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   17d2c:	b9c8      	cbnz	r0, 17d62 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   17d2e:	2100      	movs	r1, #0
   17d30:	4608      	mov	r0, r1
}
   17d32:	b009      	add	sp, #36	; 0x24
   17d34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   17d38:	f7ff bef2 	b.w	17b20 <bt_id_create>
   17d3c:	ab02      	add	r3, sp, #8
   17d3e:	fb07 3105 	mla	r1, r7, r5, r3
   17d42:	2206      	movs	r2, #6
   17d44:	f10d 0001 	add.w	r0, sp, #1
   17d48:	f00d f8dd 	bl	24f06 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17d4c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   17d4e:	4669      	mov	r1, sp
   17d50:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   17d52:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   17d56:	f7ff feb1 	bl	17abc <id_create.constprop.0>
				if (err) {
   17d5a:	3401      	adds	r4, #1
   17d5c:	b110      	cbz	r0, 17d64 <bt_setup_random_id_addr+0x4c>
}
   17d5e:	b009      	add	sp, #36	; 0x24
   17d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   17d62:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17d64:	79f3      	ldrb	r3, [r6, #7]
   17d66:	b2e5      	uxtb	r5, r4
   17d68:	42ab      	cmp	r3, r5
   17d6a:	d8e7      	bhi.n	17d3c <bt_setup_random_id_addr+0x24>
			return 0;
   17d6c:	2000      	movs	r0, #0
   17d6e:	e7f6      	b.n	17d5e <bt_setup_random_id_addr+0x46>
   17d70:	20000388 	.word	0x20000388

00017d74 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   17d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d78:	4690      	mov	r8, r2
   17d7a:	460e      	mov	r6, r1
   17d7c:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   17d7e:	4602      	mov	r2, r0
   17d80:	2800      	cmp	r0, #0
   17d82:	d04b      	beq.n	17e1c <bt_id_set_adv_own_addr+0xa8>
   17d84:	2b00      	cmp	r3, #0
   17d86:	d049      	beq.n	17e1c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17d88:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   17d8a:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17d8c:	d531      	bpl.n	17df2 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17d8e:	4f25      	ldr	r7, [pc, #148]	; (17e24 <bt_id_set_adv_own_addr+0xb0>)
   17d90:	f1b8 0f00 	cmp.w	r8, #0
   17d94:	d013      	beq.n	17dbe <bt_id_set_adv_own_addr+0x4a>
   17d96:	0688      	lsls	r0, r1, #26
   17d98:	d40a      	bmi.n	17db0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17d9a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17d9e:	5cfb      	ldrb	r3, [r7, r3]
   17da0:	2b01      	cmp	r3, #1
   17da2:	d015      	beq.n	17dd0 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   17da4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17da6:	06b2      	lsls	r2, r6, #26
   17da8:	d50f      	bpl.n	17dca <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17daa:	f043 0302 	orr.w	r3, r3, #2
   17dae:	e00b      	b.n	17dc8 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17db0:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   17db4:	0659      	lsls	r1, r3, #25
   17db6:	d4f0      	bmi.n	17d9a <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   17db8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17dbc:	e006      	b.n	17dcc <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17dbe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17dc2:	5cfb      	ldrb	r3, [r7, r3]
   17dc4:	2b01      	cmp	r3, #1
   17dc6:	d003      	beq.n	17dd0 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   17dc8:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   17dca:	2000      	movs	r0, #0
}
   17dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17dd0:	2107      	movs	r1, #7
   17dd2:	fb01 7104 	mla	r1, r1, r4, r7
   17dd6:	3101      	adds	r1, #1
   17dd8:	4610      	mov	r0, r2
   17dda:	f00d fa15 	bl	25208 <bt_id_set_adv_random_addr>
				if (err) {
   17dde:	2800      	cmp	r0, #0
   17de0:	d1f4      	bne.n	17dcc <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   17de2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17de6:	5d3b      	ldrb	r3, [r7, r4]
   17de8:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17dea:	f1b8 0f00 	cmp.w	r8, #0
   17dee:	d0ec      	beq.n	17dca <bt_id_set_adv_own_addr+0x56>
   17df0:	e7d9      	b.n	17da6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   17df2:	074b      	lsls	r3, r1, #29
   17df4:	d50e      	bpl.n	17e14 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17df6:	4e0b      	ldr	r6, [pc, #44]	; (17e24 <bt_id_set_adv_own_addr+0xb0>)
   17df8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   17dfc:	5df3      	ldrb	r3, [r6, r7]
   17dfe:	2b01      	cmp	r3, #1
   17e00:	d1e2      	bne.n	17dc8 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17e02:	2107      	movs	r1, #7
   17e04:	fb11 3104 	smlabb	r1, r1, r4, r3
   17e08:	4431      	add	r1, r6
   17e0a:	f00d f9fd 	bl	25208 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   17e0e:	5df3      	ldrb	r3, [r6, r7]
   17e10:	702b      	strb	r3, [r5, #0]
		if (err) {
   17e12:	e7db      	b.n	17dcc <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   17e14:	f00d fa00 	bl	25218 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17e18:	2301      	movs	r3, #1
   17e1a:	e7f9      	b.n	17e10 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   17e1c:	f06f 0015 	mvn.w	r0, #21
   17e20:	e7d4      	b.n	17dcc <bt_id_set_adv_own_addr+0x58>
   17e22:	bf00      	nop
   17e24:	20000388 	.word	0x20000388

00017e28 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   17e28:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   17e2a:	4d13      	ldr	r5, [pc, #76]	; (17e78 <bt_id_init+0x50>)
   17e2c:	79eb      	ldrb	r3, [r5, #7]
{
   17e2e:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   17e30:	b11b      	cbz	r3, 17e3a <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   17e32:	2400      	movs	r4, #0
}
   17e34:	4620      	mov	r0, r4
   17e36:	b007      	add	sp, #28
   17e38:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   17e3a:	f7ff ff0b 	bl	17c54 <bt_setup_public_id_addr>
		if (err) {
   17e3e:	4604      	mov	r4, r0
   17e40:	b150      	cbz	r0, 17e58 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   17e42:	4b0e      	ldr	r3, [pc, #56]	; (17e7c <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   17e44:	9305      	str	r3, [sp, #20]
   17e46:	480e      	ldr	r0, [pc, #56]	; (17e80 <bt_id_init+0x58>)
   17e48:	2302      	movs	r3, #2
   17e4a:	aa04      	add	r2, sp, #16
   17e4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17e50:	9304      	str	r3, [sp, #16]
   17e52:	f00d f9d1 	bl	251f8 <z_log_msg_static_create.constprop.0>
			return err;
   17e56:	e7ed      	b.n	17e34 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   17e58:	79eb      	ldrb	r3, [r5, #7]
   17e5a:	2b00      	cmp	r3, #0
   17e5c:	d1e9      	bne.n	17e32 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   17e5e:	f7ff ff5b 	bl	17d18 <bt_setup_random_id_addr>
		if (err) {
   17e62:	4604      	mov	r4, r0
   17e64:	2800      	cmp	r0, #0
   17e66:	d1ec      	bne.n	17e42 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   17e68:	1c68      	adds	r0, r5, #1
   17e6a:	f7ff fdfb 	bl	17a64 <set_random_address>
		if (err) {
   17e6e:	4604      	mov	r4, r0
   17e70:	2800      	cmp	r0, #0
   17e72:	d0df      	beq.n	17e34 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   17e74:	4b03      	ldr	r3, [pc, #12]	; (17e84 <bt_id_init+0x5c>)
   17e76:	e7e5      	b.n	17e44 <bt_id_init+0x1c>
   17e78:	20000388 	.word	0x20000388
   17e7c:	00029933 	.word	0x00029933
   17e80:	00027370 	.word	0x00027370
   17e84:	00029952 	.word	0x00029952

00017e88 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   17e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e8c:	b089      	sub	sp, #36	; 0x24
   17e8e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17e90:	2120      	movs	r1, #32
{
   17e92:	9000      	str	r0, [sp, #0]
   17e94:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17e96:	f7fe fd1d 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   17e9a:	4605      	mov	r5, r0
   17e9c:	2800      	cmp	r0, #0
   17e9e:	d05b      	beq.n	17f58 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   17ea0:	2120      	movs	r1, #32
   17ea2:	300c      	adds	r0, #12
   17ea4:	f004 f9f2 	bl	1c28c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   17ea8:	2220      	movs	r2, #32
   17eaa:	2100      	movs	r1, #0
   17eac:	4681      	mov	r9, r0
   17eae:	f00d f835 	bl	24f1c <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   17eb2:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   17eb6:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   17eba:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   17ebc:	f8d4 8000 	ldr.w	r8, [r4]
   17ec0:	2300      	movs	r3, #0
   17ec2:	6862      	ldr	r2, [r4, #4]
   17ec4:	4293      	cmp	r3, r2
   17ec6:	d30c      	bcc.n	17ee2 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   17ec8:	3408      	adds	r4, #8
   17eca:	45a2      	cmp	sl, r4
   17ecc:	d1f6      	bne.n	17ebc <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17ece:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   17ed0:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17ed4:	2200      	movs	r2, #0
   17ed6:	4629      	mov	r1, r5
}
   17ed8:	b009      	add	sp, #36	; 0x24
   17eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17ede:	f7fe bd47 	b.w	16970 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   17ee2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   17ee6:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17eea:	1cb0      	adds	r0, r6, #2
   17eec:	1811      	adds	r1, r2, r0
   17eee:	291f      	cmp	r1, #31
   17ef0:	d91b      	bls.n	17f2a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17ef2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   17ef6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17efa:	d101      	bne.n	17f00 <hci_set_ad+0x78>
   17efc:	2a00      	cmp	r2, #0
   17efe:	dc12      	bgt.n	17f26 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   17f00:	4b17      	ldr	r3, [pc, #92]	; (17f60 <hci_set_ad+0xd8>)
   17f02:	9307      	str	r3, [sp, #28]
   17f04:	2302      	movs	r3, #2
   17f06:	9306      	str	r3, [sp, #24]
   17f08:	4816      	ldr	r0, [pc, #88]	; (17f64 <hci_set_ad+0xdc>)
   17f0a:	2300      	movs	r3, #0
   17f0c:	aa06      	add	r2, sp, #24
   17f0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f12:	f7fc f8c9 	bl	140a8 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   17f16:	4628      	mov	r0, r5
   17f18:	f004 f874 	bl	1c004 <net_buf_unref>
					return -EINVAL;
   17f1c:	f06f 0015 	mvn.w	r0, #21
}
   17f20:	b009      	add	sp, #36	; 0x24
   17f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   17f26:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17f2a:	b2d7      	uxtb	r7, r2
   17f2c:	1c79      	adds	r1, r7, #1
   17f2e:	f80b 1006 	strb.w	r1, [fp, r6]
   17f32:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   17f34:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   17f36:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17f3a:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   17f3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   17f42:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17f44:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   17f46:	f00c ffde 	bl	24f06 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17f4a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17f4c:	4437      	add	r7, r6
   17f4e:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   17f50:	3301      	adds	r3, #1
   17f52:	f108 0808 	add.w	r8, r8, #8
   17f56:	e7b4      	b.n	17ec2 <hci_set_ad+0x3a>
		return -ENOBUFS;
   17f58:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17f5c:	e7e0      	b.n	17f20 <hci_set_ad+0x98>
   17f5e:	bf00      	nop
   17f60:	00029975 	.word	0x00029975
   17f64:	00027340 	.word	0x00027340

00017f68 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   17f68:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   17f6a:	4904      	ldr	r1, [pc, #16]	; (17f7c <adv_is_directed+0x14>)
   17f6c:	2207      	movs	r2, #7
   17f6e:	3009      	adds	r0, #9
   17f70:	f00c ffb9 	bl	24ee6 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   17f74:	3800      	subs	r0, #0
   17f76:	bf18      	it	ne
   17f78:	2001      	movne	r0, #1
   17f7a:	bd08      	pop	{r3, pc}
   17f7c:	00029059 	.word	0x00029059

00017f80 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17f80:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17f82:	4b15      	ldr	r3, [pc, #84]	; (17fd8 <le_adv_start_add_conn+0x58>)
   17f84:	7802      	ldrb	r2, [r0, #0]
   17f86:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   17f8a:	4604      	mov	r4, r0
   17f8c:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   17f8e:	f7ff ffeb 	bl	17f68 <adv_is_directed>
   17f92:	4603      	mov	r3, r0
   17f94:	7820      	ldrb	r0, [r4, #0]
   17f96:	b96b      	cbnz	r3, 17fb4 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17f98:	4910      	ldr	r1, [pc, #64]	; (17fdc <le_adv_start_add_conn+0x5c>)
   17f9a:	f001 f89b 	bl	190d4 <bt_conn_add_le>
		if (!conn) {
   17f9e:	4604      	mov	r4, r0
   17fa0:	b910      	cbnz	r0, 17fa8 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   17fa2:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   17fa6:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   17fa8:	2104      	movs	r1, #4
   17faa:	f000 fe77 	bl	18c9c <bt_conn_set_state>
		*out_conn = conn;
   17fae:	602c      	str	r4, [r5, #0]
		return 0;
   17fb0:	2000      	movs	r0, #0
   17fb2:	e7f8      	b.n	17fa6 <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17fb4:	f104 0609 	add.w	r6, r4, #9
   17fb8:	4631      	mov	r1, r6
   17fba:	f001 f8bf 	bl	1913c <bt_conn_exists_le>
   17fbe:	b940      	cbnz	r0, 17fd2 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   17fc0:	7820      	ldrb	r0, [r4, #0]
   17fc2:	4631      	mov	r1, r6
   17fc4:	f001 f886 	bl	190d4 <bt_conn_add_le>
	if (!conn) {
   17fc8:	4604      	mov	r4, r0
   17fca:	2800      	cmp	r0, #0
   17fcc:	d0e9      	beq.n	17fa2 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17fce:	2105      	movs	r1, #5
   17fd0:	e7eb      	b.n	17faa <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   17fd2:	f06f 0015 	mvn.w	r0, #21
   17fd6:	e7e6      	b.n	17fa6 <le_adv_start_add_conn+0x26>
   17fd8:	20000388 	.word	0x20000388
   17fdc:	00029052 	.word	0x00029052

00017fe0 <valid_adv_param>:
{
   17fe0:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17fe2:	6843      	ldr	r3, [r0, #4]
{
   17fe4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17fe6:	0558      	lsls	r0, r3, #21
   17fe8:	d501      	bpl.n	17fee <valid_adv_param+0xe>
		return false;
   17fea:	2000      	movs	r0, #0
}
   17fec:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17fee:	6922      	ldr	r2, [r4, #16]
   17ff0:	b10a      	cbz	r2, 17ff6 <valid_adv_param+0x16>
   17ff2:	07d9      	lsls	r1, r3, #31
   17ff4:	d5f9      	bpl.n	17fea <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   17ff6:	4d19      	ldr	r5, [pc, #100]	; (1805c <valid_adv_param+0x7c>)
   17ff8:	7820      	ldrb	r0, [r4, #0]
   17ffa:	79eb      	ldrb	r3, [r5, #7]
   17ffc:	4283      	cmp	r3, r0
   17ffe:	d9f4      	bls.n	17fea <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18000:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18004:	4916      	ldr	r1, [pc, #88]	; (18060 <valid_adv_param+0x80>)
   18006:	2207      	movs	r2, #7
   18008:	4428      	add	r0, r5
   1800a:	f00c ff6c 	bl	24ee6 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1800e:	2800      	cmp	r0, #0
   18010:	d0eb      	beq.n	17fea <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18012:	6860      	ldr	r0, [r4, #4]
   18014:	07c2      	lsls	r2, r0, #31
   18016:	d406      	bmi.n	18026 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   18018:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1801c:	2b08      	cmp	r3, #8
   1801e:	d802      	bhi.n	18026 <valid_adv_param+0x46>
   18020:	68a3      	ldr	r3, [r4, #8]
   18022:	2b9f      	cmp	r3, #159	; 0x9f
   18024:	d9e1      	bls.n	17fea <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   18026:	f010 0f30 	tst.w	r0, #48	; 0x30
   1802a:	d002      	beq.n	18032 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1802c:	6923      	ldr	r3, [r4, #16]
   1802e:	2b00      	cmp	r3, #0
   18030:	d0db      	beq.n	17fea <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   18032:	06c3      	lsls	r3, r0, #27
   18034:	d401      	bmi.n	1803a <valid_adv_param+0x5a>
   18036:	6923      	ldr	r3, [r4, #16]
   18038:	b943      	cbnz	r3, 1804c <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1803a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1803e:	429a      	cmp	r2, r3
   18040:	d8d3      	bhi.n	17fea <valid_adv_param+0xa>
   18042:	2a1f      	cmp	r2, #31
   18044:	d9d1      	bls.n	17fea <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   18046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1804a:	d8ce      	bhi.n	17fea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1804c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   18050:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   18054:	bf18      	it	ne
   18056:	2001      	movne	r0, #1
   18058:	e7c8      	b.n	17fec <valid_adv_param+0xc>
   1805a:	bf00      	nop
   1805c:	20000388 	.word	0x20000388
   18060:	00029059 	.word	0x00029059

00018064 <bt_le_adv_lookup_legacy>:
}
   18064:	4800      	ldr	r0, [pc, #0]	; (18068 <bt_le_adv_lookup_legacy+0x4>)
   18066:	4770      	bx	lr
   18068:	200003a0 	.word	0x200003a0

0001806c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18070:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   18072:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   18076:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   18078:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1807a:	ebba 0403 	subs.w	r4, sl, r3
{
   1807e:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18080:	4892      	ldr	r0, [pc, #584]	; (182cc <bt_le_adv_start_legacy+0x260>)
	struct bt_conn *conn = NULL;
   18082:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   18084:	bf18      	it	ne
   18086:	2401      	movne	r4, #1
   18088:	f00d f8f0 	bl	2526c <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1808c:	0747      	lsls	r7, r0, #29
{
   1808e:	460d      	mov	r5, r1
   18090:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18092:	f140 8112 	bpl.w	182ba <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   18096:	4608      	mov	r0, r1
   18098:	f7ff ffa2 	bl	17fe0 <valid_adv_param>
   1809c:	b928      	cbnz	r0, 180aa <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1809e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   180a2:	4620      	mov	r0, r4
   180a4:	b013      	add	sp, #76	; 0x4c
   180a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   180aa:	4628      	mov	r0, r5
   180ac:	f00d f8cb 	bl	25246 <bt_id_adv_random_addr_check>
   180b0:	4681      	mov	r9, r0
   180b2:	2800      	cmp	r0, #0
   180b4:	d0f3      	beq.n	1809e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   180b6:	f106 0810 	add.w	r8, r6, #16
   180ba:	4640      	mov	r0, r8
   180bc:	f00d f8d6 	bl	2526c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   180c0:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   180c4:	0600      	lsls	r0, r0, #24
   180c6:	f100 80fb 	bmi.w	182c0 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
   180ca:	220f      	movs	r2, #15
   180cc:	4639      	mov	r1, r7
   180ce:	a808      	add	r0, sp, #32
   180d0:	f00c ff24 	bl	24f1c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   180d4:	68ab      	ldr	r3, [r5, #8]
   180d6:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   180da:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   180dc:	68eb      	ldr	r3, [r5, #12]
   180de:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   180e2:	f00d f8b4 	bl	2524e <get_adv_channel_map>
	if (adv->id != param->id) {
   180e6:	7832      	ldrb	r2, [r6, #0]
   180e8:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   180ea:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   180ee:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   180f0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   180f4:	d004      	beq.n	18100 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   180f6:	4875      	ldr	r0, [pc, #468]	; (182cc <bt_le_adv_start_legacy+0x260>)
   180f8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   180fc:	f00d f8bc 	bl	25278 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   18100:	4a73      	ldr	r2, [pc, #460]	; (182d0 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
   18102:	782b      	ldrb	r3, [r5, #0]
   18104:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   18106:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1810a:	6869      	ldr	r1, [r5, #4]
   1810c:	4622      	mov	r2, r4
   1810e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   18112:	4630      	mov	r0, r6
   18114:	f7ff fe2e 	bl	17d74 <bt_id_set_adv_own_addr>
	if (err) {
   18118:	4604      	mov	r4, r0
   1811a:	2800      	cmp	r0, #0
   1811c:	d1c1      	bne.n	180a2 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1811e:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   18122:	2207      	movs	r2, #7
	if (dir_adv) {
   18124:	f1ba 0f00 	cmp.w	sl, #0
   18128:	d013      	beq.n	18152 <bt_le_adv_start_legacy+0xe6>
   1812a:	6929      	ldr	r1, [r5, #16]
   1812c:	f00c feeb 	bl	24f06 <memcpy>
	name_type = get_adv_name_type_param(param);
   18130:	4628      	mov	r0, r5
   18132:	f00d f940 	bl	253b6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18136:	686b      	ldr	r3, [r5, #4]
   18138:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1813a:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1813c:	d416      	bmi.n	1816c <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1813e:	059b      	lsls	r3, r3, #22
   18140:	d403      	bmi.n	1814a <bt_le_adv_start_legacy+0xde>
   18142:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18144:	b90b      	cbnz	r3, 1814a <bt_le_adv_start_legacy+0xde>
   18146:	2f02      	cmp	r7, #2
   18148:	d15a      	bne.n	18200 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1814a:	2302      	movs	r3, #2
   1814c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18150:	e01a      	b.n	18188 <bt_le_adv_start_legacy+0x11c>
   18152:	4960      	ldr	r1, [pc, #384]	; (182d4 <bt_le_adv_start_legacy+0x268>)
   18154:	f00c fed7 	bl	24f06 <memcpy>
	name_type = get_adv_name_type_param(param);
   18158:	4628      	mov	r0, r5
   1815a:	f00d f92c 	bl	253b6 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1815e:	686b      	ldr	r3, [r5, #4]
   18160:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   18162:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18164:	d5eb      	bpl.n	1813e <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   18166:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1816a:	e00d      	b.n	18188 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1816c:	f013 0f10 	tst.w	r3, #16
   18170:	bf0c      	ite	eq
   18172:	2301      	moveq	r3, #1
   18174:	2304      	movne	r3, #4
   18176:	6929      	ldr	r1, [r5, #16]
   18178:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1817c:	2207      	movs	r2, #7
   1817e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   18182:	f00c fec0 	bl	24f06 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   18186:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   18188:	210f      	movs	r1, #15
   1818a:	f242 0006 	movw	r0, #8198	; 0x2006
   1818e:	f7fe fba1 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   18192:	4604      	mov	r4, r0
   18194:	2800      	cmp	r0, #0
   18196:	f000 8096 	beq.w	182c6 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1819a:	220f      	movs	r2, #15
   1819c:	a908      	add	r1, sp, #32
   1819e:	300c      	adds	r0, #12
   181a0:	f00e f8ba 	bl	26318 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   181a4:	4621      	mov	r1, r4
   181a6:	2200      	movs	r2, #0
   181a8:	f242 0006 	movw	r0, #8198	; 0x2006
   181ac:	f7fe fbe0 	bl	16970 <bt_hci_cmd_send_sync>
	if (err) {
   181b0:	4604      	mov	r4, r0
   181b2:	2800      	cmp	r0, #0
   181b4:	f47f af75 	bne.w	180a2 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   181b8:	f1ba 0f00 	cmp.w	sl, #0
   181bc:	d026      	beq.n	1820c <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   181be:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   181c0:	07dc      	lsls	r4, r3, #31
   181c2:	d431      	bmi.n	18228 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
   181c4:	2101      	movs	r1, #1
   181c6:	4630      	mov	r0, r6
   181c8:	f00d f905 	bl	253d6 <bt_le_adv_set_enable_legacy>
	if (err) {
   181cc:	4604      	mov	r4, r0
   181ce:	2800      	cmp	r0, #0
   181d0:	d06b      	beq.n	182aa <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
   181d2:	4b41      	ldr	r3, [pc, #260]	; (182d8 <bt_le_adv_start_legacy+0x26c>)
   181d4:	9311      	str	r3, [sp, #68]	; 0x44
   181d6:	2302      	movs	r3, #2
   181d8:	9310      	str	r3, [sp, #64]	; 0x40
   181da:	4840      	ldr	r0, [pc, #256]	; (182dc <bt_le_adv_start_legacy+0x270>)
   181dc:	2300      	movs	r3, #0
   181de:	aa10      	add	r2, sp, #64	; 0x40
   181e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   181e4:	f7fb ff60 	bl	140a8 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   181e8:	9d07      	ldr	r5, [sp, #28]
   181ea:	2d00      	cmp	r5, #0
   181ec:	f43f af59 	beq.w	180a2 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   181f0:	4628      	mov	r0, r5
   181f2:	2100      	movs	r1, #0
   181f4:	f000 fd52 	bl	18c9c <bt_conn_set_state>
			bt_conn_unref(conn);
   181f8:	4628      	mov	r0, r5
   181fa:	f000 fd0f 	bl	18c1c <bt_conn_unref>
   181fe:	e750      	b.n	180a2 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18200:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   18202:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18206:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1820a:	e7bd      	b.n	18188 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1820c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1820e:	9300      	str	r3, [sp, #0]
   18210:	e9cd 9701 	strd	r9, r7, [sp, #4]
   18214:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18216:	9a05      	ldr	r2, [sp, #20]
   18218:	4659      	mov	r1, fp
   1821a:	4630      	mov	r0, r6
   1821c:	f00d f854 	bl	252c8 <le_adv_update.constprop.0>
		if (err) {
   18220:	4604      	mov	r4, r0
   18222:	2800      	cmp	r0, #0
   18224:	d0cb      	beq.n	181be <bt_le_adv_start_legacy+0x152>
   18226:	e73c      	b.n	180a2 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   18228:	a907      	add	r1, sp, #28
   1822a:	4630      	mov	r0, r6
   1822c:	f7ff fea8 	bl	17f80 <le_adv_start_add_conn>
		if (err) {
   18230:	4604      	mov	r4, r0
   18232:	2800      	cmp	r0, #0
   18234:	d0c6      	beq.n	181c4 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   18236:	f110 0f0c 	cmn.w	r0, #12
   1823a:	f47f af32 	bne.w	180a2 <bt_le_adv_start_legacy+0x36>
   1823e:	f1ba 0f00 	cmp.w	sl, #0
   18242:	f47f af2e 	bne.w	180a2 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   18246:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   18248:	0798      	lsls	r0, r3, #30
   1824a:	f53f af2a 	bmi.w	180a2 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1824e:	686c      	ldr	r4, [r5, #4]
   18250:	f084 0402 	eor.w	r4, r4, #2
   18254:	f3c4 0440 	ubfx	r4, r4, #1, #1
   18258:	f004 0201 	and.w	r2, r4, #1
   1825c:	210e      	movs	r1, #14
   1825e:	4640      	mov	r0, r8
   18260:	f00d f819 	bl	25296 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   18264:	1e7b      	subs	r3, r7, #1
   18266:	425a      	negs	r2, r3
   18268:	415a      	adcs	r2, r3
   1826a:	2108      	movs	r1, #8
   1826c:	4640      	mov	r0, r8
   1826e:	f00d f812 	bl	25296 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   18272:	1eb9      	subs	r1, r7, #2
   18274:	424a      	negs	r2, r1
   18276:	414a      	adcs	r2, r1
   18278:	4640      	mov	r0, r8
   1827a:	2109      	movs	r1, #9
   1827c:	f00d f80b 	bl	25296 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   18280:	686a      	ldr	r2, [r5, #4]
   18282:	210a      	movs	r1, #10
   18284:	f002 0201 	and.w	r2, r2, #1
   18288:	4640      	mov	r0, r8
   1828a:	f00d f804 	bl	25296 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1828e:	464a      	mov	r2, r9
   18290:	210b      	movs	r1, #11
   18292:	4640      	mov	r0, r8
   18294:	f00c ffff 	bl	25296 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   18298:	686a      	ldr	r2, [r5, #4]
   1829a:	210d      	movs	r1, #13
   1829c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   182a0:	4640      	mov	r0, r8
   182a2:	f00c fff8 	bl	25296 <atomic_set_bit_to>
	return 0;
   182a6:	2400      	movs	r4, #0
   182a8:	e6fb      	b.n	180a2 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   182aa:	9807      	ldr	r0, [sp, #28]
   182ac:	b108      	cbz	r0, 182b2 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
   182ae:	f000 fcb5 	bl	18c1c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   182b2:	f1ba 0f00 	cmp.w	sl, #0
   182b6:	d1cf      	bne.n	18258 <bt_le_adv_start_legacy+0x1ec>
   182b8:	e7c9      	b.n	1824e <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   182ba:	f06f 040a 	mvn.w	r4, #10
   182be:	e6f0      	b.n	180a2 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   182c0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   182c4:	e6ed      	b.n	180a2 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   182c6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   182ca:	e6ea      	b.n	180a2 <bt_le_adv_start_legacy+0x36>
   182cc:	2000045c 	.word	0x2000045c
   182d0:	20000388 	.word	0x20000388
   182d4:	00029059 	.word	0x00029059
   182d8:	0002998e 	.word	0x0002998e
   182dc:	00027340 	.word	0x00027340

000182e0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   182e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   182e2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   182e4:	9a06      	ldr	r2, [sp, #24]
{
   182e6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   182e8:	e9cd 3200 	strd	r3, r2, [sp]
   182ec:	462b      	mov	r3, r5
   182ee:	460a      	mov	r2, r1
   182f0:	4601      	mov	r1, r0
   182f2:	4811      	ldr	r0, [pc, #68]	; (18338 <bt_le_adv_start+0x58>)
   182f4:	f7ff feba 	bl	1806c <bt_le_adv_start_legacy>
   182f8:	4621      	mov	r1, r4
   182fa:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   182fc:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   182fe:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   18302:	429d      	cmp	r5, r3
   18304:	d102      	bne.n	1830c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   18306:	4630      	mov	r0, r6
   18308:	b002      	add	sp, #8
   1830a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1830c:	880a      	ldrh	r2, [r1, #0]
   1830e:	4282      	cmp	r2, r0
   18310:	d104      	bne.n	1831c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   18312:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   18314:	b112      	cbz	r2, 1831c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   18316:	7812      	ldrb	r2, [r2, #0]
   18318:	07d2      	lsls	r2, r2, #31
   1831a:	d402      	bmi.n	18322 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1831c:	3301      	adds	r3, #1
   1831e:	3108      	adds	r1, #8
   18320:	e7ef      	b.n	18302 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   18322:	4906      	ldr	r1, [pc, #24]	; (1833c <bt_le_adv_start+0x5c>)
   18324:	4806      	ldr	r0, [pc, #24]	; (18340 <bt_le_adv_start+0x60>)
   18326:	f009 f87d 	bl	21424 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1832a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1832e:	2300      	movs	r3, #0
   18330:	4803      	ldr	r0, [pc, #12]	; (18340 <bt_le_adv_start+0x60>)
   18332:	f009 f993 	bl	2165c <k_work_reschedule>
   18336:	e7e6      	b.n	18306 <bt_le_adv_start+0x26>
   18338:	200003a0 	.word	0x200003a0
   1833c:	000183bd 	.word	0x000183bd
   18340:	200003b8 	.word	0x200003b8

00018344 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   18344:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   18346:	4819      	ldr	r0, [pc, #100]	; (183ac <bt_le_adv_stop+0x68>)
   18348:	f00d f86a 	bl	25420 <bt_le_lim_adv_cancel_timeout>
   1834c:	4818      	ldr	r0, [pc, #96]	; (183b0 <bt_le_adv_stop+0x6c>)
   1834e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   18352:	f00c ff91 	bl	25278 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18356:	4816      	ldr	r0, [pc, #88]	; (183b0 <bt_le_adv_stop+0x6c>)
   18358:	f00c ff88 	bl	2526c <atomic_get>
   1835c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1835e:	061a      	lsls	r2, r3, #24
   18360:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   18364:	d521      	bpl.n	183aa <bt_le_adv_stop+0x66>
   18366:	4812      	ldr	r0, [pc, #72]	; (183b0 <bt_le_adv_stop+0x6c>)
   18368:	f00c ff80 	bl	2526c <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1836c:	0543      	lsls	r3, r0, #21
   1836e:	d512      	bpl.n	18396 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   18370:	480e      	ldr	r0, [pc, #56]	; (183ac <bt_le_adv_stop+0x68>)
   18372:	f7ff fdf9 	bl	17f68 <adv_is_directed>
   18376:	4b0f      	ldr	r3, [pc, #60]	; (183b4 <bt_le_adv_stop+0x70>)
   18378:	b998      	cbnz	r0, 183a2 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1837a:	490f      	ldr	r1, [pc, #60]	; (183b8 <bt_le_adv_stop+0x74>)
   1837c:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1837e:	7e18      	ldrb	r0, [r3, #24]
   18380:	f000 ff0c 	bl	1919c <bt_conn_lookup_state_le>
   18384:	4604      	mov	r4, r0
	if (conn) {
   18386:	b130      	cbz	r0, 18396 <bt_le_adv_stop+0x52>
		conn->err = status;
   18388:	2100      	movs	r1, #0
   1838a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1838c:	f000 fc86 	bl	18c9c <bt_conn_set_state>
		bt_conn_unref(conn);
   18390:	4620      	mov	r0, r4
   18392:	f000 fc43 	bl	18c1c <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   18396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1839a:	4804      	ldr	r0, [pc, #16]	; (183ac <bt_le_adv_stop+0x68>)
   1839c:	2100      	movs	r1, #0
   1839e:	f00d b81a 	b.w	253d6 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   183a2:	2205      	movs	r2, #5
   183a4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   183a8:	e7e9      	b.n	1837e <bt_le_adv_stop+0x3a>
}
   183aa:	bd10      	pop	{r4, pc}
   183ac:	200003a0 	.word	0x200003a0
   183b0:	200003b0 	.word	0x200003b0
   183b4:	20000388 	.word	0x20000388
   183b8:	00029052 	.word	0x00029052

000183bc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   183bc:	b598      	push	{r3, r4, r7, lr}
   183be:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   183c0:	f7ff ffc0 	bl	18344 <bt_le_adv_stop>
#endif
	if (err) {
   183c4:	b178      	cbz	r0, 183e6 <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   183c6:	466c      	mov	r4, sp
   183c8:	b088      	sub	sp, #32
   183ca:	466a      	mov	r2, sp
   183cc:	4b07      	ldr	r3, [pc, #28]	; (183ec <adv_timeout+0x30>)
   183ce:	e9c2 3005 	strd	r3, r0, [r2, #20]
   183d2:	2303      	movs	r3, #3
   183d4:	f842 3f10 	str.w	r3, [r2, #16]!
   183d8:	4805      	ldr	r0, [pc, #20]	; (183f0 <adv_timeout+0x34>)
   183da:	2300      	movs	r3, #0
   183dc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   183e0:	f7fb fe62 	bl	140a8 <z_impl_z_log_msg_static_create>
   183e4:	46a5      	mov	sp, r4
	}
}
   183e6:	46bd      	mov	sp, r7
   183e8:	bd98      	pop	{r3, r4, r7, pc}
   183ea:	bf00      	nop
   183ec:	000299a9 	.word	0x000299a9
   183f0:	00027340 	.word	0x00027340

000183f4 <bt_le_adv_resume>:
{
   183f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   183f6:	b083      	sub	sp, #12
   183f8:	4839      	ldr	r0, [pc, #228]	; (184e0 <bt_le_adv_resume+0xec>)
   183fa:	4c39      	ldr	r4, [pc, #228]	; (184e0 <bt_le_adv_resume+0xec>)
   183fc:	af00      	add	r7, sp, #0
   183fe:	f00c ff35 	bl	2526c <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   18402:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   18406:	d041      	beq.n	1848c <bt_le_adv_resume+0x98>
   18408:	4620      	mov	r0, r4
   1840a:	f00c ff2f 	bl	2526c <atomic_get>
   1840e:	0603      	lsls	r3, r0, #24
   18410:	d43c      	bmi.n	1848c <bt_le_adv_resume+0x98>
   18412:	4620      	mov	r0, r4
   18414:	f00c ff2a 	bl	2526c <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   18418:	0546      	lsls	r6, r0, #21
   1841a:	d537      	bpl.n	1848c <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
   1841c:	1d39      	adds	r1, r7, #4
   1841e:	f1a4 0010 	sub.w	r0, r4, #16
   18422:	f7ff fdad 	bl	17f80 <le_adv_start_add_conn>
	if (err) {
   18426:	bb88      	cbnz	r0, 1848c <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
   18428:	f1a4 0010 	sub.w	r0, r4, #16
   1842c:	f7ff fd9c 	bl	17f68 <adv_is_directed>
   18430:	4602      	mov	r2, r0
   18432:	4620      	mov	r0, r4
   18434:	f00c ff1a 	bl	2526c <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18438:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1843c:	4620      	mov	r0, r4
   1843e:	f00c ff15 	bl	2526c <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18442:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   18446:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18448:	ea4f 0141 	mov.w	r1, r1, lsl #1
   1844c:	4824      	ldr	r0, [pc, #144]	; (184e0 <bt_le_adv_resume+0xec>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   1844e:	bf48      	it	mi
   18450:	f041 0101 	orrmi.w	r1, r1, #1
   18454:	f00c ff0a 	bl	2526c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   18458:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   1845a:	bf48      	it	mi
   1845c:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   18460:	4820      	ldr	r0, [pc, #128]	; (184e4 <bt_le_adv_resume+0xf0>)
   18462:	1cfb      	adds	r3, r7, #3
   18464:	f7ff fc86 	bl	17d74 <bt_id_set_adv_own_addr>
		if (err) {
   18468:	4605      	mov	r5, r0
   1846a:	b190      	cbz	r0, 18492 <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   1846c:	466c      	mov	r4, sp
   1846e:	b088      	sub	sp, #32
   18470:	466a      	mov	r2, sp
   18472:	4b1d      	ldr	r3, [pc, #116]	; (184e8 <bt_le_adv_resume+0xf4>)
   18474:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18478:	2303      	movs	r3, #3
   1847a:	f842 3f10 	str.w	r3, [r2, #16]!
   1847e:	481b      	ldr	r0, [pc, #108]	; (184ec <bt_le_adv_resume+0xf8>)
   18480:	2300      	movs	r3, #0
   18482:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18486:	f7fb fe0f 	bl	140a8 <z_impl_z_log_msg_static_create>
   1848a:	46a5      	mov	sp, r4
}
   1848c:	370c      	adds	r7, #12
   1848e:	46bd      	mov	sp, r7
   18490:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
   18492:	4814      	ldr	r0, [pc, #80]	; (184e4 <bt_le_adv_resume+0xf0>)
   18494:	2101      	movs	r1, #1
   18496:	f00c ff9e 	bl	253d6 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1849a:	687e      	ldr	r6, [r7, #4]
	if (err) {
   1849c:	b918      	cbnz	r0, 184a6 <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
   1849e:	4630      	mov	r0, r6
   184a0:	f000 fbbc 	bl	18c1c <bt_conn_unref>
	if (persist_paused) {
   184a4:	e7f2      	b.n	1848c <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   184a6:	4629      	mov	r1, r5
   184a8:	4630      	mov	r0, r6
   184aa:	f000 fbf7 	bl	18c9c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   184ae:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   184b2:	480b      	ldr	r0, [pc, #44]	; (184e0 <bt_le_adv_resume+0xec>)
   184b4:	f00c fee0 	bl	25278 <atomic_and>
   184b8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   184ba:	4630      	mov	r0, r6
   184bc:	f000 fbae 	bl	18c1c <bt_conn_unref>
	if (persist_paused) {
   184c0:	046b      	lsls	r3, r5, #17
   184c2:	d5e3      	bpl.n	1848c <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   184c4:	f3bf 8f5b 	dmb	ish
   184c8:	e854 3f00 	ldrex	r3, [r4]
   184cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   184d0:	e844 3200 	strex	r2, r3, [r4]
   184d4:	2a00      	cmp	r2, #0
   184d6:	d1f7      	bne.n	184c8 <bt_le_adv_resume+0xd4>
   184d8:	f3bf 8f5b 	dmb	ish
   184dc:	e7d6      	b.n	1848c <bt_le_adv_resume+0x98>
   184de:	bf00      	nop
   184e0:	200003b0 	.word	0x200003b0
   184e4:	200003a0 	.word	0x200003a0
   184e8:	000299c8 	.word	0x000299c8
   184ec:	00027340 	.word	0x00027340

000184f0 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   184f0:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   184f2:	4b13      	ldr	r3, [pc, #76]	; (18540 <notify_connected+0x50>)
   184f4:	681d      	ldr	r5, [r3, #0]
{
   184f6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   184f8:	b995      	cbnz	r5, 18520 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   184fa:	4d12      	ldr	r5, [pc, #72]	; (18544 <notify_connected+0x54>)
   184fc:	4e12      	ldr	r6, [pc, #72]	; (18548 <notify_connected+0x58>)
   184fe:	42b5      	cmp	r5, r6
   18500:	d91c      	bls.n	1853c <notify_connected+0x4c>
   18502:	4912      	ldr	r1, [pc, #72]	; (1854c <notify_connected+0x5c>)
   18504:	4a12      	ldr	r2, [pc, #72]	; (18550 <notify_connected+0x60>)
   18506:	4813      	ldr	r0, [pc, #76]	; (18554 <notify_connected+0x64>)
   18508:	f240 53ba 	movw	r3, #1466	; 0x5ba
   1850c:	f00c f8ee 	bl	246ec <assert_print>
   18510:	4811      	ldr	r0, [pc, #68]	; (18558 <notify_connected+0x68>)
   18512:	f00c f8eb 	bl	246ec <assert_print>
   18516:	480e      	ldr	r0, [pc, #56]	; (18550 <notify_connected+0x60>)
   18518:	f240 51ba 	movw	r1, #1466	; 0x5ba
   1851c:	f00c f8df 	bl	246de <assert_post_action>
		if (cb->connected) {
   18520:	682b      	ldr	r3, [r5, #0]
   18522:	b113      	cbz	r3, 1852a <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   18524:	7a61      	ldrb	r1, [r4, #9]
   18526:	4620      	mov	r0, r4
   18528:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1852a:	692d      	ldr	r5, [r5, #16]
   1852c:	e7e4      	b.n	184f8 <notify_connected+0x8>
		if (cb->connected) {
   1852e:	682b      	ldr	r3, [r5, #0]
   18530:	b113      	cbz	r3, 18538 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   18532:	7a61      	ldrb	r1, [r4, #9]
   18534:	4620      	mov	r0, r4
   18536:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18538:	3514      	adds	r5, #20
   1853a:	e7e0      	b.n	184fe <notify_connected+0xe>
   1853c:	d3f7      	bcc.n	1852e <notify_connected+0x3e>
		}
	}
}
   1853e:	bd70      	pop	{r4, r5, r6, pc}
   18540:	20002dec 	.word	0x20002dec
   18544:	000272f4 	.word	0x000272f4
   18548:	00027308 	.word	0x00027308
   1854c:	00029a35 	.word	0x00029a35
   18550:	00029a05 	.word	0x00029a05
   18554:	00027f8a 	.word	0x00027f8a
   18558:	000284d6 	.word	0x000284d6

0001855c <tx_notify>:
{
   1855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18560:	4f15      	ldr	r7, [pc, #84]	; (185b8 <tx_notify+0x5c>)
{
   18562:	4604      	mov	r4, r0
	tx->cb = NULL;
   18564:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   18568:	f04f 0240 	mov.w	r2, #64	; 0x40
   1856c:	f3ef 8311 	mrs	r3, BASEPRI
   18570:	f382 8812 	msr	BASEPRI_MAX, r2
   18574:	f3bf 8f6f 	isb	sy
	return list->head;
   18578:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1857a:	b929      	cbnz	r1, 18588 <tx_notify+0x2c>
	__asm__ volatile(
   1857c:	f383 8811 	msr	BASEPRI, r3
   18580:	f3bf 8f6f 	isb	sy
}
   18584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18588:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1858a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1858c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1858e:	4281      	cmp	r1, r0
	list->tail = node;
   18590:	bf08      	it	eq
   18592:	6262      	streq	r2, [r4, #36]	; 0x24
   18594:	f383 8811 	msr	BASEPRI, r3
   18598:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1859c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   185a0:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   185a4:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   185a8:	4638      	mov	r0, r7
   185aa:	f00e fb93 	bl	26cd4 <k_queue_append>
		cb(conn, user_data, 0);
   185ae:	2200      	movs	r2, #0
   185b0:	4631      	mov	r1, r6
   185b2:	4620      	mov	r0, r4
   185b4:	47a8      	blx	r5
	while (1) {
   185b6:	e7d7      	b.n	18568 <tx_notify+0xc>
   185b8:	2000098c 	.word	0x2000098c

000185bc <conn_tx_destroy>:
{
   185bc:	b570      	push	{r4, r5, r6, lr}
   185be:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   185c0:	b949      	cbnz	r1, 185d6 <conn_tx_destroy+0x1a>
   185c2:	490d      	ldr	r1, [pc, #52]	; (185f8 <conn_tx_destroy+0x3c>)
   185c4:	480d      	ldr	r0, [pc, #52]	; (185fc <conn_tx_destroy+0x40>)
   185c6:	4a0e      	ldr	r2, [pc, #56]	; (18600 <conn_tx_destroy+0x44>)
   185c8:	2343      	movs	r3, #67	; 0x43
   185ca:	f00c f88f 	bl	246ec <assert_print>
   185ce:	480c      	ldr	r0, [pc, #48]	; (18600 <conn_tx_destroy+0x44>)
   185d0:	2143      	movs	r1, #67	; 0x43
   185d2:	f00c f884 	bl	246de <assert_post_action>
	void *user_data = tx->user_data;
   185d6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   185da:	2200      	movs	r2, #0
	tx->user_data = NULL;
   185dc:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   185e0:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   185e2:	4808      	ldr	r0, [pc, #32]	; (18604 <conn_tx_destroy+0x48>)
   185e4:	f00e fb76 	bl	26cd4 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   185e8:	4631      	mov	r1, r6
   185ea:	4620      	mov	r0, r4
   185ec:	462b      	mov	r3, r5
   185ee:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   185f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   185f6:	4718      	bx	r3
   185f8:	00029a50 	.word	0x00029a50
   185fc:	00027f8a 	.word	0x00027f8a
   18600:	00029a05 	.word	0x00029a05
   18604:	2000098c 	.word	0x2000098c

00018608 <send_frag>:
{
   18608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   1860c:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 187ec <send_frag+0x1e4>
{
   18610:	b083      	sub	sp, #12
   18612:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   18614:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   18618:	2b00      	cmp	r3, #0
{
   1861a:	af00      	add	r7, sp, #0
   1861c:	4604      	mov	r4, r0
   1861e:	460d      	mov	r5, r1
	return NULL;
   18620:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   18624:	4616      	mov	r6, r2
	return NULL;
   18626:	bf08      	it	eq
   18628:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   1862a:	2200      	movs	r2, #0
   1862c:	2300      	movs	r3, #0
   1862e:	f008 fb47 	bl	20cc0 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   18632:	2800      	cmp	r0, #0
   18634:	f040 80ca 	bne.w	187cc <send_frag+0x1c4>
	if (frag) {
   18638:	2e00      	cmp	r6, #0
   1863a:	f000 8090 	beq.w	1875e <send_frag+0x156>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1863e:	f106 0b0c 	add.w	fp, r6, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18642:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   18646:	607b      	str	r3, [r7, #4]
   18648:	4658      	mov	r0, fp
   1864a:	f00d fe5d 	bl	26308 <net_buf_simple_tailroom>
   1864e:	687b      	ldr	r3, [r7, #4]
   18650:	4298      	cmp	r0, r3
   18652:	d97f      	bls.n	18754 <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
   18654:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18658:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   1865c:	607a      	str	r2, [r7, #4]
   1865e:	4658      	mov	r0, fp
   18660:	f00d fe5a 	bl	26318 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18664:	687a      	ldr	r2, [r7, #4]
   18666:	4628      	mov	r0, r5
   18668:	4611      	mov	r1, r2
   1866a:	f003 fdd3 	bl	1c214 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   1866e:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18670:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   18672:	2b07      	cmp	r3, #7
   18674:	f040 80a7 	bne.w	187c6 <send_frag+0x1be>
	__asm__ volatile(
   18678:	f04f 0340 	mov.w	r3, #64	; 0x40
   1867c:	f3ef 8211 	mrs	r2, BASEPRI
   18680:	f383 8812 	msr	BASEPRI_MAX, r3
   18684:	f3bf 8f6f 	isb	sy
	if (tx) {
   18688:	2d00      	cmp	r5, #0
   1868a:	d073      	beq.n	18774 <send_frag+0x16c>
	parent->next = child;
   1868c:	2300      	movs	r3, #0
   1868e:	602b      	str	r3, [r5, #0]
	return list->tail;
   18690:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   18692:	2b00      	cmp	r3, #0
   18694:	d16b      	bne.n	1876e <send_frag+0x166>
	list->head = node;
   18696:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1869a:	f382 8811 	msr	BASEPRI, r2
   1869e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   186a2:	2104      	movs	r1, #4
   186a4:	f106 000c 	add.w	r0, r6, #12
   186a8:	f003 fd94 	bl	1c1d4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   186ac:	8823      	ldrh	r3, [r4, #0]
   186ae:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   186b2:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   186b6:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   186ba:	8a33      	ldrh	r3, [r6, #16]
   186bc:	3b04      	subs	r3, #4
   186be:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   186c0:	2302      	movs	r3, #2
   186c2:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   186c4:	4630      	mov	r0, r6
   186c6:	f7fe fbd1 	bl	16e6c <bt_send>
	if (err) {
   186ca:	4680      	mov	r8, r0
   186cc:	2800      	cmp	r0, #0
   186ce:	d03c      	beq.n	1874a <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
   186d0:	46eb      	mov	fp, sp
   186d2:	b088      	sub	sp, #32
   186d4:	466a      	mov	r2, sp
   186d6:	4b3f      	ldr	r3, [pc, #252]	; (187d4 <send_frag+0x1cc>)
   186d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   186dc:	2303      	movs	r3, #3
   186de:	f842 3f10 	str.w	r3, [r2, #16]!
   186e2:	483d      	ldr	r0, [pc, #244]	; (187d8 <send_frag+0x1d0>)
   186e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   186e8:	f00c fe9d 	bl	25426 <z_log_msg_static_create.constprop.0>
   186ec:	46dd      	mov	sp, fp
	__asm__ volatile(
   186ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   186f2:	f3ef 8111 	mrs	r1, BASEPRI
   186f6:	f383 8812 	msr	BASEPRI_MAX, r3
   186fa:	f3bf 8f6f 	isb	sy
		if (tx) {
   186fe:	2d00      	cmp	r5, #0
   18700:	d04e      	beq.n	187a0 <send_frag+0x198>
	return list->head;
   18702:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18704:	2200      	movs	r2, #0
   18706:	b15b      	cbz	r3, 18720 <send_frag+0x118>
   18708:	429d      	cmp	r5, r3
   1870a:	d146      	bne.n	1879a <send_frag+0x192>
	return node->next;
   1870c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1870e:	2a00      	cmp	r2, #0
   18710:	d13d      	bne.n	1878e <send_frag+0x186>
   18712:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   18714:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   18716:	4295      	cmp	r5, r2
   18718:	d100      	bne.n	1871c <send_frag+0x114>
	list->tail = node;
   1871a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1871c:	2300      	movs	r3, #0
   1871e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   18720:	f381 8811 	msr	BASEPRI, r1
   18724:	f3bf 8f6f 	isb	sy
		err = -EIO;
   18728:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   1872c:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   18730:	482a      	ldr	r0, [pc, #168]	; (187dc <send_frag+0x1d4>)
   18732:	2b00      	cmp	r3, #0
   18734:	bf08      	it	eq
   18736:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   18738:	f008 fa7e 	bl	20c38 <z_impl_k_sem_give>
	if (tx) {
   1873c:	b12d      	cbz	r5, 1874a <send_frag+0x142>
		tx_data(buf)->tx = NULL;
   1873e:	2300      	movs	r3, #0
   18740:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   18742:	4629      	mov	r1, r5
   18744:	4620      	mov	r0, r4
   18746:	f7ff ff39 	bl	185bc <conn_tx_destroy>
}
   1874a:	4640      	mov	r0, r8
   1874c:	370c      	adds	r7, #12
   1874e:	46bd      	mov	sp, r7
   18750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   18754:	4658      	mov	r0, fp
   18756:	f00d fdd7 	bl	26308 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1875a:	b282      	uxth	r2, r0
   1875c:	e77c      	b.n	18658 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1875e:	2200      	movs	r2, #0
   18760:	2300      	movs	r3, #0
   18762:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18766:	f00d fdc1 	bl	262ec <net_buf_get>
   1876a:	4606      	mov	r6, r0
		frag = buf;
   1876c:	e77f      	b.n	1866e <send_frag+0x66>
   1876e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18770:	61a5      	str	r5, [r4, #24]
}
   18772:	e792      	b.n	1869a <send_frag+0x92>
	return list->tail;
   18774:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18776:	b133      	cbz	r3, 18786 <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
   18778:	f103 0a0c 	add.w	sl, r3, #12
   1877c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1877e:	3301      	adds	r3, #1
   18780:	f8ca 3000 	str.w	r3, [sl]
   18784:	e789      	b.n	1869a <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   18786:	69e3      	ldr	r3, [r4, #28]
   18788:	f104 0a1c 	add.w	sl, r4, #28
   1878c:	e7f7      	b.n	1877e <send_frag+0x176>
	parent->next = child;
   1878e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   18790:	69a3      	ldr	r3, [r4, #24]
   18792:	429d      	cmp	r5, r3
	list->tail = node;
   18794:	bf08      	it	eq
   18796:	61a2      	streq	r2, [r4, #24]
}
   18798:	e7c0      	b.n	1871c <send_frag+0x114>
	return node->next;
   1879a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1879c:	681b      	ldr	r3, [r3, #0]
   1879e:	e7b2      	b.n	18706 <send_frag+0xfe>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   187a0:	f8da 3000 	ldr.w	r3, [sl]
   187a4:	b95b      	cbnz	r3, 187be <send_frag+0x1b6>
   187a6:	490e      	ldr	r1, [pc, #56]	; (187e0 <send_frag+0x1d8>)
   187a8:	480e      	ldr	r0, [pc, #56]	; (187e4 <send_frag+0x1dc>)
   187aa:	4a0f      	ldr	r2, [pc, #60]	; (187e8 <send_frag+0x1e0>)
   187ac:	f240 2351 	movw	r3, #593	; 0x251
   187b0:	f00b ff9c 	bl	246ec <assert_print>
   187b4:	480c      	ldr	r0, [pc, #48]	; (187e8 <send_frag+0x1e0>)
   187b6:	f240 2151 	movw	r1, #593	; 0x251
   187ba:	f00b ff90 	bl	246de <assert_post_action>
			(*pending_no_cb)--;
   187be:	3b01      	subs	r3, #1
   187c0:	f8ca 3000 	str.w	r3, [sl]
   187c4:	e7ac      	b.n	18720 <send_frag+0x118>
		err = -ENOTCONN;
   187c6:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   187ca:	e7af      	b.n	1872c <send_frag+0x124>
		return -ENOBUFS;
   187cc:	f06f 0868 	mvn.w	r8, #104	; 0x68
   187d0:	e7bb      	b.n	1874a <send_frag+0x142>
   187d2:	bf00      	nop
   187d4:	000294f6 	.word	0x000294f6
   187d8:	00027350 	.word	0x00027350
   187dc:	20000490 	.word	0x20000490
   187e0:	00029a53 	.word	0x00029a53
   187e4:	00027f8a 	.word	0x00027f8a
   187e8:	00029a05 	.word	0x00029a05
   187ec:	20000388 	.word	0x20000388

000187f0 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   187f0:	4804      	ldr	r0, [pc, #16]	; (18804 <bt_conn_get_pkts+0x14>)
   187f2:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   187f6:	2b00      	cmp	r3, #0
   187f8:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   187fc:	bf08      	it	eq
   187fe:	2000      	moveq	r0, #0
   18800:	4770      	bx	lr
   18802:	bf00      	nop
   18804:	20000388 	.word	0x20000388

00018808 <bt_conn_new>:
{
   18808:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1880a:	2200      	movs	r2, #0
   1880c:	4604      	mov	r4, r0
   1880e:	428a      	cmp	r2, r1
   18810:	d102      	bne.n	18818 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18812:	2400      	movs	r4, #0
}
   18814:	4620      	mov	r0, r4
   18816:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18818:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   1881c:	2001      	movs	r0, #1
   1881e:	f3bf 8f5b 	dmb	ish
   18822:	e853 5f00 	ldrex	r5, [r3]
   18826:	2d00      	cmp	r5, #0
   18828:	d104      	bne.n	18834 <bt_conn_new+0x2c>
   1882a:	e843 0c00 	strex	ip, r0, [r3]
   1882e:	f1bc 0f00 	cmp.w	ip, #0
   18832:	d1f6      	bne.n	18822 <bt_conn_new+0x1a>
   18834:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18838:	d002      	beq.n	18840 <bt_conn_new+0x38>
   1883a:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1883c:	4402      	add	r2, r0
   1883e:	e7e6      	b.n	1880e <bt_conn_new+0x6>
	if (!conn) {
   18840:	2c00      	cmp	r4, #0
   18842:	d0e6      	beq.n	18812 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   18844:	22c4      	movs	r2, #196	; 0xc4
   18846:	2100      	movs	r1, #0
   18848:	4620      	mov	r0, r4
   1884a:	f00c fb67 	bl	24f1c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1884e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18852:	4904      	ldr	r1, [pc, #16]	; (18864 <bt_conn_new+0x5c>)
   18854:	f008 fde6 	bl	21424 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18858:	4903      	ldr	r1, [pc, #12]	; (18868 <bt_conn_new+0x60>)
   1885a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1885e:	f008 fc93 	bl	21188 <k_work_init>
	return conn;
   18862:	e7d7      	b.n	18814 <bt_conn_new+0xc>
   18864:	00019319 	.word	0x00019319
   18868:	0002542d 	.word	0x0002542d

0001886c <conn_cleanup>:
{
   1886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18870:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   18872:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18874:	f104 0638 	add.w	r6, r4, #56	; 0x38
   18878:	2300      	movs	r3, #0
   1887a:	2200      	movs	r2, #0
   1887c:	4630      	mov	r0, r6
   1887e:	f00d fd35 	bl	262ec <net_buf_get>
   18882:	4603      	mov	r3, r0
   18884:	b980      	cbnz	r0, 188a8 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   18886:	6963      	ldr	r3, [r4, #20]
   18888:	b1cb      	cbz	r3, 188be <conn_cleanup+0x52>
   1888a:	4918      	ldr	r1, [pc, #96]	; (188ec <conn_cleanup+0x80>)
   1888c:	4a18      	ldr	r2, [pc, #96]	; (188f0 <conn_cleanup+0x84>)
   1888e:	4819      	ldr	r0, [pc, #100]	; (188f4 <conn_cleanup+0x88>)
   18890:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   18894:	f00b ff2a 	bl	246ec <assert_print>
   18898:	4817      	ldr	r0, [pc, #92]	; (188f8 <conn_cleanup+0x8c>)
   1889a:	f00b ff27 	bl	246ec <assert_print>
   1889e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   188a2:	4813      	ldr	r0, [pc, #76]	; (188f0 <conn_cleanup+0x84>)
   188a4:	f00b ff1b 	bl	246de <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   188a8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   188aa:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   188ac:	f003 fbaa 	bl	1c004 <net_buf_unref>
		if (tx) {
   188b0:	2d00      	cmp	r5, #0
   188b2:	d0e1      	beq.n	18878 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   188b4:	4629      	mov	r1, r5
   188b6:	4620      	mov	r0, r4
   188b8:	f7ff fe80 	bl	185bc <conn_tx_destroy>
   188bc:	e7da      	b.n	18874 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   188be:	69e3      	ldr	r3, [r4, #28]
   188c0:	b14b      	cbz	r3, 188d6 <conn_cleanup+0x6a>
   188c2:	490e      	ldr	r1, [pc, #56]	; (188fc <conn_cleanup+0x90>)
   188c4:	4a0a      	ldr	r2, [pc, #40]	; (188f0 <conn_cleanup+0x84>)
   188c6:	480b      	ldr	r0, [pc, #44]	; (188f4 <conn_cleanup+0x88>)
   188c8:	f240 23f1 	movw	r3, #753	; 0x2f1
   188cc:	f00b ff0e 	bl	246ec <assert_print>
   188d0:	f240 21f1 	movw	r1, #753	; 0x2f1
   188d4:	e7e5      	b.n	188a2 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   188d6:	4620      	mov	r0, r4
   188d8:	f00c fdab 	bl	25432 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   188dc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   188e0:	2200      	movs	r2, #0
}
   188e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   188e6:	2300      	movs	r3, #0
   188e8:	f008 beb8 	b.w	2165c <k_work_reschedule>
   188ec:	00029a66 	.word	0x00029a66
   188f0:	00029a05 	.word	0x00029a05
   188f4:	00027f8a 	.word	0x00027f8a
   188f8:	00029a8c 	.word	0x00029a8c
   188fc:	00029aa1 	.word	0x00029aa1

00018900 <bt_conn_recv>:
{
   18900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18904:	b086      	sub	sp, #24
   18906:	4616      	mov	r6, r2
   18908:	af00      	add	r7, sp, #0
   1890a:	4604      	mov	r4, r0
   1890c:	460d      	mov	r5, r1
	tx_notify(conn);
   1890e:	f7ff fe25 	bl	1855c <tx_notify>
	switch (flags) {
   18912:	2e01      	cmp	r6, #1
   18914:	d030      	beq.n	18978 <bt_conn_recv+0x78>
   18916:	2e02      	cmp	r6, #2
   18918:	d16a      	bne.n	189f0 <bt_conn_recv+0xf0>
		if (conn->rx) {
   1891a:	6923      	ldr	r3, [r4, #16]
   1891c:	b163      	cbz	r3, 18938 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   1891e:	4b40      	ldr	r3, [pc, #256]	; (18a20 <bt_conn_recv+0x120>)
   18920:	4840      	ldr	r0, [pc, #256]	; (18a24 <bt_conn_recv+0x124>)
   18922:	e9c7 6304 	strd	r6, r3, [r7, #16]
   18926:	f107 0210 	add.w	r2, r7, #16
   1892a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1892e:	f00c fd7a 	bl	25426 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   18932:	4620      	mov	r0, r4
   18934:	f00c fd7d 	bl	25432 <bt_conn_reset_rx_state>
		conn->rx = buf;
   18938:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1893a:	6921      	ldr	r1, [r4, #16]
   1893c:	8a08      	ldrh	r0, [r1, #16]
   1893e:	2801      	cmp	r0, #1
   18940:	d930      	bls.n	189a4 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18942:	68cb      	ldr	r3, [r1, #12]
   18944:	881b      	ldrh	r3, [r3, #0]
   18946:	3304      	adds	r3, #4
   18948:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1894a:	4298      	cmp	r0, r3
   1894c:	d32a      	bcc.n	189a4 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   1894e:	d95f      	bls.n	18a10 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   18950:	466d      	mov	r5, sp
   18952:	b088      	sub	sp, #32
   18954:	466a      	mov	r2, sp
   18956:	4934      	ldr	r1, [pc, #208]	; (18a28 <bt_conn_recv+0x128>)
   18958:	61d3      	str	r3, [r2, #28]
   1895a:	2304      	movs	r3, #4
   1895c:	e9c2 1005 	strd	r1, r0, [r2, #20]
   18960:	f842 3f10 	str.w	r3, [r2, #16]!
   18964:	482f      	ldr	r0, [pc, #188]	; (18a24 <bt_conn_recv+0x124>)
   18966:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1896a:	f00c fd5c 	bl	25426 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1896e:	4620      	mov	r0, r4
   18970:	46ad      	mov	sp, r5
   18972:	f00c fd5e 	bl	25432 <bt_conn_reset_rx_state>
		return;
   18976:	e015      	b.n	189a4 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   18978:	6920      	ldr	r0, [r4, #16]
   1897a:	b970      	cbnz	r0, 1899a <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   1897c:	4b2b      	ldr	r3, [pc, #172]	; (18a2c <bt_conn_recv+0x12c>)
   1897e:	617b      	str	r3, [r7, #20]
   18980:	2302      	movs	r3, #2
   18982:	4828      	ldr	r0, [pc, #160]	; (18a24 <bt_conn_recv+0x124>)
   18984:	613b      	str	r3, [r7, #16]
   18986:	f107 0210 	add.w	r2, r7, #16
   1898a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1898e:	f00c fd4a 	bl	25426 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   18992:	4620      	mov	r0, r4
   18994:	f00c fd4d 	bl	25432 <bt_conn_reset_rx_state>
   18998:	e001      	b.n	1899e <bt_conn_recv+0x9e>
		if (!buf->len) {
   1899a:	8a2e      	ldrh	r6, [r5, #16]
   1899c:	b936      	cbnz	r6, 189ac <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1899e:	4628      	mov	r0, r5
   189a0:	f003 fb30 	bl	1c004 <net_buf_unref>
}
   189a4:	3718      	adds	r7, #24
   189a6:	46bd      	mov	sp, r7
   189a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   189ac:	300c      	adds	r0, #12
   189ae:	f00d fcab 	bl	26308 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   189b2:	4286      	cmp	r6, r0
   189b4:	d912      	bls.n	189dc <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   189b6:	4b1e      	ldr	r3, [pc, #120]	; (18a30 <bt_conn_recv+0x130>)
   189b8:	617b      	str	r3, [r7, #20]
   189ba:	2302      	movs	r3, #2
   189bc:	613b      	str	r3, [r7, #16]
   189be:	4819      	ldr	r0, [pc, #100]	; (18a24 <bt_conn_recv+0x124>)
   189c0:	f107 0210 	add.w	r2, r7, #16
   189c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   189c8:	f00c fd2d 	bl	25426 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   189cc:	2200      	movs	r2, #0
   189ce:	6921      	ldr	r1, [r4, #16]
   189d0:	4620      	mov	r0, r4
   189d2:	f000 ff21 	bl	19818 <bt_l2cap_recv>
			conn->rx = NULL;
   189d6:	2300      	movs	r3, #0
   189d8:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   189da:	e7e0      	b.n	1899e <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   189dc:	6920      	ldr	r0, [r4, #16]
   189de:	8a2a      	ldrh	r2, [r5, #16]
   189e0:	68e9      	ldr	r1, [r5, #12]
   189e2:	300c      	adds	r0, #12
   189e4:	f00d fc98 	bl	26318 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   189e8:	4628      	mov	r0, r5
   189ea:	f003 fb0b 	bl	1c004 <net_buf_unref>
		break;
   189ee:	e7a4      	b.n	1893a <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   189f0:	46e8      	mov	r8, sp
   189f2:	b088      	sub	sp, #32
   189f4:	466a      	mov	r2, sp
   189f6:	4b0f      	ldr	r3, [pc, #60]	; (18a34 <bt_conn_recv+0x134>)
   189f8:	480a      	ldr	r0, [pc, #40]	; (18a24 <bt_conn_recv+0x124>)
	switch (flags) {
   189fa:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   189fe:	2303      	movs	r3, #3
   18a00:	f842 3f10 	str.w	r3, [r2, #16]!
   18a04:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a08:	f00c fd0d 	bl	25426 <z_log_msg_static_create.constprop.0>
   18a0c:	46c5      	mov	sp, r8
   18a0e:	e7c0      	b.n	18992 <bt_conn_recv+0x92>
	conn->rx = NULL;
   18a10:	2300      	movs	r3, #0
   18a12:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   18a14:	2201      	movs	r2, #1
   18a16:	4620      	mov	r0, r4
   18a18:	f000 fefe 	bl	19818 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   18a1c:	e7c2      	b.n	189a4 <bt_conn_recv+0xa4>
   18a1e:	bf00      	nop
   18a20:	00029aba 	.word	0x00029aba
   18a24:	00027350 	.word	0x00027350
   18a28:	00029b3a 	.word	0x00029b3a
   18a2c:	00029ad7 	.word	0x00029ad7
   18a30:	00029af5 	.word	0x00029af5
   18a34:	00029b1c 	.word	0x00029b1c

00018a38 <bt_conn_send_cb>:
{
   18a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a3c:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   18a3e:	7acb      	ldrb	r3, [r1, #11]
   18a40:	2b07      	cmp	r3, #7
{
   18a42:	b086      	sub	sp, #24
   18a44:	4606      	mov	r6, r0
   18a46:	460d      	mov	r5, r1
   18a48:	4617      	mov	r7, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   18a4a:	d80e      	bhi.n	18a6a <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   18a4c:	4b2c      	ldr	r3, [pc, #176]	; (18b00 <bt_conn_send_cb+0xc8>)
   18a4e:	482d      	ldr	r0, [pc, #180]	; (18b04 <bt_conn_send_cb+0xcc>)
   18a50:	9305      	str	r3, [sp, #20]
   18a52:	aa04      	add	r2, sp, #16
   18a54:	2302      	movs	r3, #2
   18a56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18a5a:	9304      	str	r3, [sp, #16]
   18a5c:	f00c fce3 	bl	25426 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   18a60:	f06f 0015 	mvn.w	r0, #21
}
   18a64:	b006      	add	sp, #24
   18a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   18a6a:	7a83      	ldrb	r3, [r0, #10]
   18a6c:	2b07      	cmp	r3, #7
   18a6e:	d00c      	beq.n	18a8a <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   18a70:	4b25      	ldr	r3, [pc, #148]	; (18b08 <bt_conn_send_cb+0xd0>)
   18a72:	9305      	str	r3, [sp, #20]
   18a74:	4823      	ldr	r0, [pc, #140]	; (18b04 <bt_conn_send_cb+0xcc>)
   18a76:	2302      	movs	r3, #2
   18a78:	aa04      	add	r2, sp, #16
   18a7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18a7e:	9304      	str	r3, [sp, #16]
   18a80:	f00c fcd1 	bl	25426 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   18a84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18a88:	e7ec      	b.n	18a64 <bt_conn_send_cb+0x2c>
	if (cb) {
   18a8a:	2a00      	cmp	r2, #0
   18a8c:	d033      	beq.n	18af6 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   18a8e:	f009 ff59 	bl	22944 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18a92:	4b1e      	ldr	r3, [pc, #120]	; (18b0c <bt_conn_send_cb+0xd4>)
   18a94:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   18a96:	481e      	ldr	r0, [pc, #120]	; (18b10 <bt_conn_send_cb+0xd8>)
   18a98:	bf07      	ittee	eq
   18a9a:	2200      	moveq	r2, #0
   18a9c:	2300      	moveq	r3, #0
   18a9e:	f04f 32ff 	movne.w	r2, #4294967295
   18aa2:	f04f 33ff 	movne.w	r3, #4294967295
   18aa6:	f008 f85d 	bl	20b64 <z_impl_k_queue_get>
   18aaa:	4604      	mov	r4, r0
		if (!tx) {
   18aac:	b328      	cbz	r0, 18afa <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   18aae:	7ab3      	ldrb	r3, [r6, #10]
   18ab0:	2b07      	cmp	r3, #7
   18ab2:	d012      	beq.n	18ada <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   18ab4:	4b17      	ldr	r3, [pc, #92]	; (18b14 <bt_conn_send_cb+0xdc>)
   18ab6:	9305      	str	r3, [sp, #20]
   18ab8:	4812      	ldr	r0, [pc, #72]	; (18b04 <bt_conn_send_cb+0xcc>)
   18aba:	2302      	movs	r3, #2
   18abc:	aa04      	add	r2, sp, #16
   18abe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ac2:	9304      	str	r3, [sp, #16]
   18ac4:	f00c fcaf 	bl	25426 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   18ac8:	2300      	movs	r3, #0
	tx->user_data = NULL;
   18aca:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   18ace:	4810      	ldr	r0, [pc, #64]	; (18b10 <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   18ad0:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   18ad2:	4621      	mov	r1, r4
   18ad4:	f00e f8fe 	bl	26cd4 <k_queue_append>
}
   18ad8:	e7d4      	b.n	18a84 <bt_conn_send_cb+0x4c>
		tx->user_data = user_data;
   18ada:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   18ade:	2300      	movs	r3, #0
   18ae0:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   18ae2:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   18ae4:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   18ae6:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   18aea:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   18aec:	4629      	mov	r1, r5
   18aee:	f003 fa63 	bl	1bfb8 <net_buf_put>
	return 0;
   18af2:	4620      	mov	r0, r4
   18af4:	e7b6      	b.n	18a64 <bt_conn_send_cb+0x2c>
   18af6:	4614      	mov	r4, r2
   18af8:	e7f3      	b.n	18ae2 <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   18afa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18afe:	e7b1      	b.n	18a64 <bt_conn_send_cb+0x2c>
   18b00:	00029b55 	.word	0x00029b55
   18b04:	00027350 	.word	0x00027350
   18b08:	00029b72 	.word	0x00029b72
   18b0c:	20002bf0 	.word	0x20002bf0
   18b10:	2000098c 	.word	0x2000098c
   18b14:	00029b81 	.word	0x00029b81

00018b18 <bt_conn_prepare_events>:
{
   18b18:	b570      	push	{r4, r5, r6, lr}
   18b1a:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   18b1c:	4823      	ldr	r0, [pc, #140]	; (18bac <bt_conn_prepare_events+0x94>)
   18b1e:	f00e fa8a 	bl	27036 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   18b22:	4b22      	ldr	r3, [pc, #136]	; (18bac <bt_conn_prepare_events+0x94>)
   18b24:	2200      	movs	r2, #0
   18b26:	4620      	mov	r0, r4
   18b28:	2101      	movs	r1, #1
   18b2a:	f00a fdaf 	bl	2368c <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18b2e:	f3bf 8f5b 	dmb	ish
   18b32:	4b1f      	ldr	r3, [pc, #124]	; (18bb0 <bt_conn_prepare_events+0x98>)
   18b34:	681a      	ldr	r2, [r3, #0]
   18b36:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   18b3a:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   18b3e:	b90a      	cbnz	r2, 18b44 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   18b40:	2001      	movs	r0, #1
}
   18b42:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18b44:	f1a3 01c4 	sub.w	r1, r3, #196	; 0xc4
   18b48:	f813 3cba 	ldrb.w	r3, [r3, #-186]
   18b4c:	b993      	cbnz	r3, 18b74 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b4e:	f3bf 8f5b 	dmb	ish
   18b52:	1d0b      	adds	r3, r1, #4
   18b54:	e853 2f00 	ldrex	r2, [r3]
   18b58:	f022 0540 	bic.w	r5, r2, #64	; 0x40
   18b5c:	e843 5600 	strex	r6, r5, [r3]
   18b60:	2e00      	cmp	r6, #0
   18b62:	d1f7      	bne.n	18b54 <bt_conn_prepare_events+0x3c>
   18b64:	f3bf 8f5b 	dmb	ish
   18b68:	0653      	lsls	r3, r2, #25
   18b6a:	d503      	bpl.n	18b74 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   18b6c:	4608      	mov	r0, r1
   18b6e:	f7ff fe7d 	bl	1886c <conn_cleanup>
		return -ENOTCONN;
   18b72:	e7e5      	b.n	18b40 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   18b74:	7a8b      	ldrb	r3, [r1, #10]
   18b76:	2b07      	cmp	r3, #7
   18b78:	d1e2      	bne.n	18b40 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   18b7a:	4b0e      	ldr	r3, [pc, #56]	; (18bb4 <bt_conn_prepare_events+0x9c>)
   18b7c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   18b80:	2a00      	cmp	r2, #0
   18b82:	d0dd      	beq.n	18b40 <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   18b84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   18b88:	6b89      	ldr	r1, [r1, #56]	; 0x38
   18b8a:	b151      	cbz	r1, 18ba2 <bt_conn_prepare_events+0x8a>
   18b8c:	b94a      	cbnz	r2, 18ba2 <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
   18b8e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   18b92:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   18b94:	f00a fd7a 	bl	2368c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   18b98:	2301      	movs	r3, #1
   18b9a:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18b9e:	2002      	movs	r0, #2
	return ev_count;
   18ba0:	e7cf      	b.n	18b42 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   18ba2:	4b05      	ldr	r3, [pc, #20]	; (18bb8 <bt_conn_prepare_events+0xa0>)
   18ba4:	2200      	movs	r2, #0
   18ba6:	2104      	movs	r1, #4
   18ba8:	e7f4      	b.n	18b94 <bt_conn_prepare_events+0x7c>
   18baa:	bf00      	nop
   18bac:	2000065c 	.word	0x2000065c
   18bb0:	20001fcc 	.word	0x20001fcc
   18bb4:	20000388 	.word	0x20000388
   18bb8:	20001f40 	.word	0x20001f40

00018bbc <bt_conn_ref>:
{
   18bbc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   18bbe:	b958      	cbnz	r0, 18bd8 <bt_conn_ref+0x1c>
   18bc0:	4913      	ldr	r1, [pc, #76]	; (18c10 <bt_conn_ref+0x54>)
   18bc2:	4814      	ldr	r0, [pc, #80]	; (18c14 <bt_conn_ref+0x58>)
   18bc4:	4a14      	ldr	r2, [pc, #80]	; (18c18 <bt_conn_ref+0x5c>)
   18bc6:	f240 43db 	movw	r3, #1243	; 0x4db
   18bca:	f00b fd8f 	bl	246ec <assert_print>
   18bce:	4812      	ldr	r0, [pc, #72]	; (18c18 <bt_conn_ref+0x5c>)
   18bd0:	f240 41db 	movw	r1, #1243	; 0x4db
   18bd4:	f00b fd83 	bl	246de <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18bd8:	f3bf 8f5b 	dmb	ish
   18bdc:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18be0:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   18be4:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
		if (!old) {
   18be8:	b17b      	cbz	r3, 18c0a <bt_conn_ref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18bea:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   18bee:	1c59      	adds	r1, r3, #1
   18bf0:	e852 4f00 	ldrex	r4, [r2]
   18bf4:	429c      	cmp	r4, r3
   18bf6:	d104      	bne.n	18c02 <bt_conn_ref+0x46>
   18bf8:	e842 1c00 	strex	ip, r1, [r2]
   18bfc:	f1bc 0f00 	cmp.w	ip, #0
   18c00:	d1f6      	bne.n	18bf0 <bt_conn_ref+0x34>
   18c02:	f3bf 8f5b 	dmb	ish
   18c06:	d1e7      	bne.n	18bd8 <bt_conn_ref+0x1c>
}
   18c08:	bd10      	pop	{r4, pc}
			return NULL;
   18c0a:	4618      	mov	r0, r3
   18c0c:	e7fc      	b.n	18c08 <bt_conn_ref+0x4c>
   18c0e:	bf00      	nop
   18c10:	00029e3d 	.word	0x00029e3d
   18c14:	00027f8a 	.word	0x00027f8a
   18c18:	00029a05 	.word	0x00029a05

00018c1c <bt_conn_unref>:
{
   18c1c:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   18c1e:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18c22:	f3bf 8f5b 	dmb	ish
   18c26:	e853 2f00 	ldrex	r2, [r3]
   18c2a:	1e51      	subs	r1, r2, #1
   18c2c:	e843 1400 	strex	r4, r1, [r3]
   18c30:	2c00      	cmp	r4, #0
   18c32:	d1f8      	bne.n	18c26 <bt_conn_unref+0xa>
   18c34:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   18c38:	2a00      	cmp	r2, #0
   18c3a:	dc0e      	bgt.n	18c5a <bt_conn_unref+0x3e>
   18c3c:	490f      	ldr	r1, [pc, #60]	; (18c7c <bt_conn_unref+0x60>)
   18c3e:	4a10      	ldr	r2, [pc, #64]	; (18c80 <bt_conn_unref+0x64>)
   18c40:	4810      	ldr	r0, [pc, #64]	; (18c84 <bt_conn_unref+0x68>)
   18c42:	f240 43f7 	movw	r3, #1271	; 0x4f7
   18c46:	f00b fd51 	bl	246ec <assert_print>
   18c4a:	480f      	ldr	r0, [pc, #60]	; (18c88 <bt_conn_unref+0x6c>)
   18c4c:	f00b fd4e 	bl	246ec <assert_print>
   18c50:	480b      	ldr	r0, [pc, #44]	; (18c80 <bt_conn_unref+0x64>)
   18c52:	f240 41f7 	movw	r1, #1271	; 0x4f7
   18c56:	f00b fd42 	bl	246de <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   18c5a:	8842      	ldrh	r2, [r0, #2]
   18c5c:	f240 1301 	movw	r3, #257	; 0x101
   18c60:	429a      	cmp	r2, r3
   18c62:	d10a      	bne.n	18c7a <bt_conn_unref+0x5e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18c64:	f3bf 8f5b 	dmb	ish
   18c68:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18c6c:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   18c70:	b91b      	cbnz	r3, 18c7a <bt_conn_unref+0x5e>
}
   18c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   18c76:	f7ff bbbd 	b.w	183f4 <bt_le_adv_resume>
}
   18c7a:	bd10      	pop	{r4, pc}
   18c7c:	00029ba7 	.word	0x00029ba7
   18c80:	00029a05 	.word	0x00029a05
   18c84:	00027f8a 	.word	0x00027f8a
   18c88:	00029baf 	.word	0x00029baf

00018c8c <bt_conn_lookup_handle>:
{
   18c8c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18c8e:	2101      	movs	r1, #1
   18c90:	4801      	ldr	r0, [pc, #4]	; (18c98 <bt_conn_lookup_handle+0xc>)
   18c92:	f00c bbd7 	b.w	25444 <conn_lookup_handle>
   18c96:	bf00      	nop
   18c98:	20001f08 	.word	0x20001f08

00018c9c <bt_conn_set_state>:
{
   18c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   18ca0:	7a86      	ldrb	r6, [r0, #10]
   18ca2:	428e      	cmp	r6, r1
{
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	4604      	mov	r4, r0
   18ca8:	460d      	mov	r5, r1
	if (conn->state == state) {
   18caa:	d118      	bne.n	18cde <bt_conn_set_state+0x42>
	switch (state) {
   18cac:	2e08      	cmp	r6, #8
   18cae:	bf96      	itet	ls
   18cb0:	4b72      	ldrls	r3, [pc, #456]	; (18e7c <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   18cb2:	4b73      	ldrhi	r3, [pc, #460]	; (18e80 <bt_conn_set_state+0x1e4>)
   18cb4:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   18cb8:	466c      	mov	r4, sp
   18cba:	b088      	sub	sp, #32
   18cbc:	466a      	mov	r2, sp
   18cbe:	4971      	ldr	r1, [pc, #452]	; (18e84 <bt_conn_set_state+0x1e8>)
   18cc0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
   18cc8:	8393      	strh	r3, [r2, #28]
   18cca:	4b6f      	ldr	r3, [pc, #444]	; (18e88 <bt_conn_set_state+0x1ec>)
   18ccc:	f842 3f10 	str.w	r3, [r2, #16]!
   18cd0:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   18cd4:	486d      	ldr	r0, [pc, #436]	; (18e8c <bt_conn_set_state+0x1f0>)
   18cd6:	f00c fba6 	bl	25426 <z_log_msg_static_create.constprop.0>
   18cda:	46a5      	mov	sp, r4
   18cdc:	e04c      	b.n	18d78 <bt_conn_set_state+0xdc>
	conn->state = state;
   18cde:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   18ce0:	b926      	cbnz	r6, 18cec <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   18ce2:	7883      	ldrb	r3, [r0, #2]
   18ce4:	2b08      	cmp	r3, #8
   18ce6:	d001      	beq.n	18cec <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   18ce8:	f7ff ff68 	bl	18bbc <bt_conn_ref>
	switch (conn->state) {
   18cec:	7aa3      	ldrb	r3, [r4, #10]
   18cee:	2b08      	cmp	r3, #8
   18cf0:	f200 80bf 	bhi.w	18e72 <bt_conn_set_state+0x1d6>
   18cf4:	e8df f003 	tbb	[pc, r3]
   18cf8:	40400543 	.word	0x40400543
   18cfc:	25404040 	.word	0x25404040
   18d00:	40          	.byte	0x40
   18d01:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   18d02:	4d63      	ldr	r5, [pc, #396]	; (18e90 <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   18d04:	f04f 0800 	mov.w	r8, #0
	return NULL;
   18d08:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   18d0c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18d10:	f3ef 8311 	mrs	r3, BASEPRI
   18d14:	f382 8812 	msr	BASEPRI_MAX, r2
   18d18:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18d1c:	69e2      	ldr	r2, [r4, #28]
   18d1e:	2a00      	cmp	r2, #0
   18d20:	f000 8082 	beq.w	18e28 <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   18d24:	3a01      	subs	r2, #1
   18d26:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   18d28:	f383 8811 	msr	BASEPRI, r3
   18d2c:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   18d30:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   18d34:	2b00      	cmp	r3, #0
   18d36:	bf14      	ite	ne
   18d38:	4630      	movne	r0, r6
   18d3a:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   18d3c:	f007 ff7c 	bl	20c38 <z_impl_k_sem_give>
}
   18d40:	e7e4      	b.n	18d0c <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18d42:	78a3      	ldrb	r3, [r4, #2]
   18d44:	2b04      	cmp	r3, #4
   18d46:	d017      	beq.n	18d78 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   18d48:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18d4c:	f00d ffb5 	bl	26cba <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   18d50:	4850      	ldr	r0, [pc, #320]	; (18e94 <bt_conn_set_state+0x1f8>)
   18d52:	2100      	movs	r1, #0
   18d54:	f00a fdb8 	bl	238c8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   18d58:	2300      	movs	r3, #0
	list->tail = NULL;
   18d5a:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18d5e:	78e3      	ldrb	r3, [r4, #3]
   18d60:	2b01      	cmp	r3, #1
   18d62:	d109      	bne.n	18d78 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   18d64:	2303      	movs	r3, #3
   18d66:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   18d6a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   18d6e:	2300      	movs	r3, #0
   18d70:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18d74:	f008 fbf8 	bl	21568 <k_work_schedule>
}
   18d78:	46bd      	mov	sp, r7
   18d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   18d7e:	78a3      	ldrb	r3, [r4, #2]
   18d80:	2b04      	cmp	r3, #4
   18d82:	d103      	bne.n	18d8c <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   18d84:	4620      	mov	r0, r4
   18d86:	f7ff ff49 	bl	18c1c <bt_conn_unref>
			break;
   18d8a:	e7f5      	b.n	18d78 <bt_conn_set_state+0xdc>
		switch (old_state) {
   18d8c:	2e08      	cmp	r6, #8
   18d8e:	d8f3      	bhi.n	18d78 <bt_conn_set_state+0xdc>
   18d90:	a301      	add	r3, pc, #4	; (adr r3, 18d98 <bt_conn_set_state+0xfc>)
   18d92:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18d96:	bf00      	nop
   18d98:	00018e11 	.word	0x00018e11
   18d9c:	00018dbd 	.word	0x00018dbd
   18da0:	00018e03 	.word	0x00018e03
   18da4:	00018d85 	.word	0x00018d85
   18da8:	00018d85 	.word	0x00018d85
   18dac:	00018e03 	.word	0x00018e03
   18db0:	00018e03 	.word	0x00018e03
   18db4:	00018e11 	.word	0x00018e11
   18db8:	00018e11 	.word	0x00018e11
			tx_notify(conn);
   18dbc:	4620      	mov	r0, r4
   18dbe:	f7ff fbcd 	bl	1855c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18dc2:	78a3      	ldrb	r3, [r4, #2]
   18dc4:	2b01      	cmp	r3, #1
   18dc6:	d10a      	bne.n	18dde <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   18dc8:	f104 0560 	add.w	r5, r4, #96	; 0x60
   18dcc:	4628      	mov	r0, r5
   18dce:	f00e f80f 	bl	26df0 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18dd2:	f010 0f0c 	tst.w	r0, #12
   18dd6:	d002      	beq.n	18dde <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   18dd8:	4628      	mov	r0, r5
   18dda:	f008 fc45 	bl	21668 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18dde:	f3bf 8f5b 	dmb	ish
   18de2:	3404      	adds	r4, #4
   18de4:	e854 3f00 	ldrex	r3, [r4]
   18de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18dec:	e844 3200 	strex	r2, r3, [r4]
   18df0:	2a00      	cmp	r2, #0
   18df2:	d1f7      	bne.n	18de4 <bt_conn_set_state+0x148>
   18df4:	f3bf 8f5b 	dmb	ish
   18df8:	2100      	movs	r1, #0
   18dfa:	4826      	ldr	r0, [pc, #152]	; (18e94 <bt_conn_set_state+0x1f8>)
   18dfc:	f00a fd64 	bl	238c8 <z_impl_k_poll_signal_raise>
   18e00:	e7ba      	b.n	18d78 <bt_conn_set_state+0xdc>
			if (conn->err) {
   18e02:	7a63      	ldrb	r3, [r4, #9]
   18e04:	2b00      	cmp	r3, #0
   18e06:	d0bd      	beq.n	18d84 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   18e08:	4620      	mov	r0, r4
   18e0a:	f7ff fb71 	bl	184f0 <notify_connected>
   18e0e:	e7b9      	b.n	18d84 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   18e10:	466c      	mov	r4, sp
   18e12:	b088      	sub	sp, #32
   18e14:	466a      	mov	r2, sp
   18e16:	4b20      	ldr	r3, [pc, #128]	; (18e98 <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   18e18:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18e1c:	2303      	movs	r3, #3
   18e1e:	f842 3f10 	str.w	r3, [r2, #16]!
   18e22:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18e26:	e755      	b.n	18cd4 <bt_conn_set_state+0x38>
	return list->head;
   18e28:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   18e2a:	b921      	cbnz	r1, 18e36 <bt_conn_set_state+0x19a>
   18e2c:	f383 8811 	msr	BASEPRI, r3
   18e30:	f3bf 8f6f 	isb	sy
		if (!node) {
   18e34:	e7a0      	b.n	18d78 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18e36:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   18e38:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18e3a:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18e3c:	4281      	cmp	r1, r0
	list->tail = node;
   18e3e:	bf08      	it	eq
   18e40:	61a2      	streq	r2, [r4, #24]
   18e42:	f383 8811 	msr	BASEPRI, r3
   18e46:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18e4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   18e4e:	f3ef 8311 	mrs	r3, BASEPRI
   18e52:	f382 8812 	msr	BASEPRI_MAX, r2
   18e56:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   18e5a:	68ca      	ldr	r2, [r1, #12]
   18e5c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   18e5e:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   18e62:	f383 8811 	msr	BASEPRI, r3
   18e66:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   18e6a:	4620      	mov	r0, r4
   18e6c:	f7ff fba6 	bl	185bc <conn_tx_destroy>
   18e70:	e75e      	b.n	18d30 <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   18e72:	466c      	mov	r4, sp
   18e74:	b088      	sub	sp, #32
   18e76:	466a      	mov	r2, sp
   18e78:	4b08      	ldr	r3, [pc, #32]	; (18e9c <bt_conn_set_state+0x200>)
   18e7a:	e7cd      	b.n	18e18 <bt_conn_set_state+0x17c>
   18e7c:	00027728 	.word	0x00027728
   18e80:	00029bcd 	.word	0x00029bcd
   18e84:	00029bd7 	.word	0x00029bd7
   18e88:	01000003 	.word	0x01000003
   18e8c:	00027350 	.word	0x00027350
   18e90:	20000388 	.word	0x20000388
   18e94:	2000065c 	.word	0x2000065c
   18e98:	00029be8 	.word	0x00029be8
   18e9c:	00029bff 	.word	0x00029bff

00018ea0 <bt_conn_index>:
		index = conn - acl_conns;
   18ea0:	4a0c      	ldr	r2, [pc, #48]	; (18ed4 <bt_conn_index+0x34>)
   18ea2:	490d      	ldr	r1, [pc, #52]	; (18ed8 <bt_conn_index+0x38>)
{
   18ea4:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   18ea6:	1a83      	subs	r3, r0, r2
   18ea8:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   18eaa:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   18eac:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   18eb0:	d00e      	beq.n	18ed0 <bt_conn_index+0x30>
   18eb2:	490a      	ldr	r1, [pc, #40]	; (18edc <bt_conn_index+0x3c>)
   18eb4:	4a0a      	ldr	r2, [pc, #40]	; (18ee0 <bt_conn_index+0x40>)
   18eb6:	480b      	ldr	r0, [pc, #44]	; (18ee4 <bt_conn_index+0x44>)
   18eb8:	f240 5315 	movw	r3, #1301	; 0x515
   18ebc:	f00b fc16 	bl	246ec <assert_print>
   18ec0:	4809      	ldr	r0, [pc, #36]	; (18ee8 <bt_conn_index+0x48>)
   18ec2:	f00b fc13 	bl	246ec <assert_print>
   18ec6:	4806      	ldr	r0, [pc, #24]	; (18ee0 <bt_conn_index+0x40>)
   18ec8:	f240 5115 	movw	r1, #1301	; 0x515
   18ecc:	f00b fc07 	bl	246de <assert_post_action>
}
   18ed0:	b2d8      	uxtb	r0, r3
   18ed2:	bd08      	pop	{r3, pc}
   18ed4:	20001f08 	.word	0x20001f08
   18ed8:	c28f5c29 	.word	0xc28f5c29
   18edc:	00029c1b 	.word	0x00029c1b
   18ee0:	00029a05 	.word	0x00029a05
   18ee4:	00027f8a 	.word	0x00027f8a
   18ee8:	00029ce4 	.word	0x00029ce4

00018eec <bt_conn_create_pdu_timeout>:
{
   18eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   18eee:	b087      	sub	sp, #28
   18ef0:	4604      	mov	r4, r0
   18ef2:	460d      	mov	r5, r1
   18ef4:	4617      	mov	r7, r2
   18ef6:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   18ef8:	f00d feb7 	bl	26c6a <k_is_in_isr>
   18efc:	b158      	cbz	r0, 18f16 <bt_conn_create_pdu_timeout+0x2a>
   18efe:	4914      	ldr	r1, [pc, #80]	; (18f50 <bt_conn_create_pdu_timeout+0x64>)
   18f00:	4814      	ldr	r0, [pc, #80]	; (18f54 <bt_conn_create_pdu_timeout+0x68>)
   18f02:	4a15      	ldr	r2, [pc, #84]	; (18f58 <bt_conn_create_pdu_timeout+0x6c>)
   18f04:	f240 5331 	movw	r3, #1329	; 0x531
   18f08:	f00b fbf0 	bl	246ec <assert_print>
   18f0c:	4812      	ldr	r0, [pc, #72]	; (18f58 <bt_conn_create_pdu_timeout+0x6c>)
   18f0e:	f240 5131 	movw	r1, #1329	; 0x531
   18f12:	f00b fbe4 	bl	246de <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   18f16:	4911      	ldr	r1, [pc, #68]	; (18f5c <bt_conn_create_pdu_timeout+0x70>)
   18f18:	463a      	mov	r2, r7
   18f1a:	2c00      	cmp	r4, #0
   18f1c:	bf14      	ite	ne
   18f1e:	4620      	movne	r0, r4
   18f20:	4608      	moveq	r0, r1
   18f22:	4633      	mov	r3, r6
   18f24:	f00d f9dd 	bl	262e2 <net_buf_alloc_fixed>
	if (!buf) {
   18f28:	4604      	mov	r4, r0
   18f2a:	b960      	cbnz	r0, 18f46 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   18f2c:	4b0c      	ldr	r3, [pc, #48]	; (18f60 <bt_conn_create_pdu_timeout+0x74>)
   18f2e:	9305      	str	r3, [sp, #20]
   18f30:	480c      	ldr	r0, [pc, #48]	; (18f64 <bt_conn_create_pdu_timeout+0x78>)
   18f32:	2302      	movs	r3, #2
   18f34:	aa04      	add	r2, sp, #16
   18f36:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18f3a:	9304      	str	r3, [sp, #16]
   18f3c:	f00c fa73 	bl	25426 <z_log_msg_static_create.constprop.0>
}
   18f40:	4620      	mov	r0, r4
   18f42:	b007      	add	sp, #28
   18f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   18f46:	1d29      	adds	r1, r5, #4
   18f48:	300c      	adds	r0, #12
   18f4a:	f003 f921 	bl	1c190 <net_buf_simple_reserve>
	return buf;
   18f4e:	e7f7      	b.n	18f40 <bt_conn_create_pdu_timeout+0x54>
   18f50:	00029cfe 	.word	0x00029cfe
   18f54:	00027f8a 	.word	0x00027f8a
   18f58:	00029a05 	.word	0x00029a05
   18f5c:	200009a8 	.word	0x200009a8
   18f60:	00029d0d 	.word	0x00029d0d
   18f64:	00027350 	.word	0x00027350

00018f68 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   18f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18f6a:	f3bf 8f5b 	dmb	ish
   18f6e:	6842      	ldr	r2, [r0, #4]
   18f70:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18f74:	0592      	lsls	r2, r2, #22
{
   18f76:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18f78:	f100 0304 	add.w	r3, r0, #4
   18f7c:	d519      	bpl.n	18fb2 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   18f7e:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18f82:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   18f86:	4291      	cmp	r1, r2
   18f88:	d813      	bhi.n	18fb2 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   18f8a:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   18f8e:	4291      	cmp	r1, r2
   18f90:	d30f      	bcc.n	18fb2 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   18f92:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   18f96:	4291      	cmp	r1, r2
   18f98:	d10b      	bne.n	18fb2 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18f9a:	f3bf 8f5b 	dmb	ish
   18f9e:	e853 1f00 	ldrex	r1, [r3]
   18fa2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   18fa6:	e843 1200 	strex	r2, r1, [r3]
   18faa:	2a00      	cmp	r2, #0
   18fac:	d1f7      	bne.n	18f9e <notify_le_param_updated+0x36>
   18fae:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18fb2:	4b18      	ldr	r3, [pc, #96]	; (19014 <notify_le_param_updated+0xac>)
   18fb4:	681d      	ldr	r5, [r3, #0]
   18fb6:	b995      	cbnz	r5, 18fde <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18fb8:	4d17      	ldr	r5, [pc, #92]	; (19018 <notify_le_param_updated+0xb0>)
   18fba:	4f18      	ldr	r7, [pc, #96]	; (1901c <notify_le_param_updated+0xb4>)
   18fbc:	42bd      	cmp	r5, r7
   18fbe:	d926      	bls.n	1900e <notify_le_param_updated+0xa6>
   18fc0:	4917      	ldr	r1, [pc, #92]	; (19020 <notify_le_param_updated+0xb8>)
   18fc2:	4a18      	ldr	r2, [pc, #96]	; (19024 <notify_le_param_updated+0xbc>)
   18fc4:	4818      	ldr	r0, [pc, #96]	; (19028 <notify_le_param_updated+0xc0>)
   18fc6:	f240 6304 	movw	r3, #1540	; 0x604
   18fca:	f00b fb8f 	bl	246ec <assert_print>
   18fce:	4817      	ldr	r0, [pc, #92]	; (1902c <notify_le_param_updated+0xc4>)
   18fd0:	f00b fb8c 	bl	246ec <assert_print>
   18fd4:	4813      	ldr	r0, [pc, #76]	; (19024 <notify_le_param_updated+0xbc>)
   18fd6:	f240 6104 	movw	r1, #1540	; 0x604
   18fda:	f00b fb80 	bl	246de <assert_post_action>
		if (cb->le_param_updated) {
   18fde:	68ee      	ldr	r6, [r5, #12]
   18fe0:	b13e      	cbz	r6, 18ff2 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   18fe2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18fe6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18fea:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18fee:	4620      	mov	r0, r4
   18ff0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   18ff2:	692d      	ldr	r5, [r5, #16]
   18ff4:	e7df      	b.n	18fb6 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   18ff6:	68ee      	ldr	r6, [r5, #12]
   18ff8:	b13e      	cbz	r6, 1900a <notify_le_param_updated+0xa2>
			cb->le_param_updated(conn, conn->le.interval,
   18ffa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18ffe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19002:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19006:	4620      	mov	r0, r4
   19008:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1900a:	3514      	adds	r5, #20
   1900c:	e7d6      	b.n	18fbc <notify_le_param_updated+0x54>
   1900e:	d3f2      	bcc.n	18ff6 <notify_le_param_updated+0x8e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   19010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19012:	bf00      	nop
   19014:	20002dec 	.word	0x20002dec
   19018:	000272f4 	.word	0x000272f4
   1901c:	00027308 	.word	0x00027308
   19020:	00029a35 	.word	0x00029a35
   19024:	00029a05 	.word	0x00029a05
   19028:	00027f8a 	.word	0x00027f8a
   1902c:	000284d6 	.word	0x000284d6

00019030 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19034:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   19036:	4608      	mov	r0, r1
{
   19038:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1903a:	f00c f894 	bl	25166 <bt_le_conn_params_valid>
   1903e:	4605      	mov	r5, r0
   19040:	b918      	cbnz	r0, 1904a <le_param_req+0x1a>
		return false;
   19042:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19044:	4628      	mov	r0, r5
   19046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1904a:	4b1b      	ldr	r3, [pc, #108]	; (190b8 <le_param_req+0x88>)
   1904c:	681e      	ldr	r6, [r3, #0]
   1904e:	b99e      	cbnz	r6, 19078 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19050:	4e1a      	ldr	r6, [pc, #104]	; (190bc <le_param_req+0x8c>)
   19052:	f8df 807c 	ldr.w	r8, [pc, #124]	; 190d0 <le_param_req+0xa0>
   19056:	4546      	cmp	r6, r8
   19058:	d927      	bls.n	190aa <le_param_req+0x7a>
   1905a:	4919      	ldr	r1, [pc, #100]	; (190c0 <le_param_req+0x90>)
   1905c:	4a19      	ldr	r2, [pc, #100]	; (190c4 <le_param_req+0x94>)
   1905e:	481a      	ldr	r0, [pc, #104]	; (190c8 <le_param_req+0x98>)
   19060:	f240 634c 	movw	r3, #1612	; 0x64c
   19064:	f00b fb42 	bl	246ec <assert_print>
   19068:	4818      	ldr	r0, [pc, #96]	; (190cc <le_param_req+0x9c>)
   1906a:	f00b fb3f 	bl	246ec <assert_print>
   1906e:	4815      	ldr	r0, [pc, #84]	; (190c4 <le_param_req+0x94>)
   19070:	f240 614c 	movw	r1, #1612	; 0x64c
   19074:	f00b fb33 	bl	246de <assert_post_action>
		if (!cb->le_param_req) {
   19078:	68b3      	ldr	r3, [r6, #8]
   1907a:	b90b      	cbnz	r3, 19080 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   1907c:	6936      	ldr	r6, [r6, #16]
   1907e:	e7e6      	b.n	1904e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   19080:	4621      	mov	r1, r4
   19082:	4638      	mov	r0, r7
   19084:	4798      	blx	r3
   19086:	2800      	cmp	r0, #0
   19088:	d0db      	beq.n	19042 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1908a:	4620      	mov	r0, r4
   1908c:	f00c f86b 	bl	25166 <bt_le_conn_params_valid>
   19090:	2800      	cmp	r0, #0
   19092:	d1f3      	bne.n	1907c <le_param_req+0x4c>
   19094:	e7d5      	b.n	19042 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   19096:	4621      	mov	r1, r4
   19098:	4638      	mov	r0, r7
   1909a:	4798      	blx	r3
   1909c:	2800      	cmp	r0, #0
   1909e:	d0d0      	beq.n	19042 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   190a0:	4620      	mov	r0, r4
   190a2:	f00c f860 	bl	25166 <bt_le_conn_params_valid>
   190a6:	b920      	cbnz	r0, 190b2 <le_param_req+0x82>
   190a8:	e7cb      	b.n	19042 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   190aa:	d2cb      	bcs.n	19044 <le_param_req+0x14>
		if (!cb->le_param_req) {
   190ac:	68b3      	ldr	r3, [r6, #8]
   190ae:	2b00      	cmp	r3, #0
   190b0:	d1f1      	bne.n	19096 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   190b2:	3614      	adds	r6, #20
   190b4:	e7cf      	b.n	19056 <le_param_req+0x26>
   190b6:	bf00      	nop
   190b8:	20002dec 	.word	0x20002dec
   190bc:	000272f4 	.word	0x000272f4
   190c0:	00029a35 	.word	0x00029a35
   190c4:	00029a05 	.word	0x00029a05
   190c8:	00027f8a 	.word	0x00027f8a
   190cc:	000284d6 	.word	0x000284d6
   190d0:	00027308 	.word	0x00027308

000190d4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   190d4:	b570      	push	{r4, r5, r6, lr}
   190d6:	4606      	mov	r6, r0
   190d8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   190da:	4809      	ldr	r0, [pc, #36]	; (19100 <bt_conn_add_le+0x2c>)
   190dc:	2101      	movs	r1, #1
   190de:	f7ff fb93 	bl	18808 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   190e2:	4604      	mov	r4, r0
   190e4:	b150      	cbz	r0, 190fc <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   190e6:	7206      	strb	r6, [r0, #8]
   190e8:	2207      	movs	r2, #7
   190ea:	4629      	mov	r1, r5
   190ec:	3090      	adds	r0, #144	; 0x90
   190ee:	f00b ff0a 	bl	24f06 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   190f2:	2301      	movs	r3, #1
   190f4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   190f6:	4b03      	ldr	r3, [pc, #12]	; (19104 <bt_conn_add_le+0x30>)
   190f8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   190fc:	4620      	mov	r0, r4
   190fe:	bd70      	pop	{r4, r5, r6, pc}
   19100:	20001f08 	.word	0x20001f08
   19104:	00280018 	.word	0x00280018

00019108 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   19108:	b570      	push	{r4, r5, r6, lr}
   1910a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1910c:	480a      	ldr	r0, [pc, #40]	; (19138 <bt_conn_lookup_addr_le+0x30>)
{
   1910e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19110:	f7ff fd54 	bl	18bbc <bt_conn_ref>
   19114:	4604      	mov	r4, r0

		if (!conn) {
   19116:	b120      	cbz	r0, 19122 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19118:	7883      	ldrb	r3, [r0, #2]
   1911a:	2b01      	cmp	r3, #1
   1911c:	d004      	beq.n	19128 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1911e:	f7ff fd7d 	bl	18c1c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   19122:	2400      	movs	r4, #0
}
   19124:	4620      	mov	r0, r4
   19126:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19128:	4632      	mov	r2, r6
   1912a:	4629      	mov	r1, r5
   1912c:	f00c f9b5 	bl	2549a <bt_conn_is_peer_addr_le>
   19130:	2800      	cmp	r0, #0
   19132:	d1f7      	bne.n	19124 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   19134:	4620      	mov	r0, r4
   19136:	e7f2      	b.n	1911e <bt_conn_lookup_addr_le+0x16>
   19138:	20001f08 	.word	0x20001f08

0001913c <bt_conn_exists_le>:
{
   1913c:	b5b0      	push	{r4, r5, r7, lr}
   1913e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19140:	f7ff ffe2 	bl	19108 <bt_conn_lookup_addr_le>
	if (conn) {
   19144:	4604      	mov	r4, r0
   19146:	b1e0      	cbz	r0, 19182 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19148:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   1914a:	2b08      	cmp	r3, #8
   1914c:	bf96      	itet	ls
   1914e:	4a0e      	ldrls	r2, [pc, #56]	; (19188 <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19150:	4b0e      	ldrhi	r3, [pc, #56]	; (1918c <bt_conn_exists_le+0x50>)
   19152:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   19156:	466d      	mov	r5, sp
   19158:	b088      	sub	sp, #32
   1915a:	466a      	mov	r2, sp
   1915c:	490c      	ldr	r1, [pc, #48]	; (19190 <bt_conn_exists_le+0x54>)
   1915e:	480d      	ldr	r0, [pc, #52]	; (19194 <bt_conn_exists_le+0x58>)
   19160:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19164:	f44f 7300 	mov.w	r3, #512	; 0x200
   19168:	8393      	strh	r3, [r2, #28]
   1916a:	4b0b      	ldr	r3, [pc, #44]	; (19198 <bt_conn_exists_le+0x5c>)
   1916c:	f842 3f10 	str.w	r3, [r2, #16]!
   19170:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   19174:	f00c f957 	bl	25426 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   19178:	4620      	mov	r0, r4
   1917a:	46ad      	mov	sp, r5
   1917c:	f7ff fd4e 	bl	18c1c <bt_conn_unref>
		return true;
   19180:	2001      	movs	r0, #1
}
   19182:	46bd      	mov	sp, r7
   19184:	bdb0      	pop	{r4, r5, r7, pc}
   19186:	bf00      	nop
   19188:	00027728 	.word	0x00027728
   1918c:	00029bcd 	.word	0x00029bcd
   19190:	00029d36 	.word	0x00029d36
   19194:	00027350 	.word	0x00027350
   19198:	01000003 	.word	0x01000003

0001919c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1919e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   191a0:	480e      	ldr	r0, [pc, #56]	; (191dc <bt_conn_lookup_state_le+0x40>)
{
   191a2:	460e      	mov	r6, r1
   191a4:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   191a6:	f7ff fd09 	bl	18bbc <bt_conn_ref>

		if (!conn) {
   191aa:	4604      	mov	r4, r0
   191ac:	b120      	cbz	r0, 191b8 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   191ae:	7883      	ldrb	r3, [r0, #2]
   191b0:	2b01      	cmp	r3, #1
   191b2:	d003      	beq.n	191bc <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   191b4:	f7ff fd32 	bl	18c1c <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   191b8:	2400      	movs	r4, #0
   191ba:	e00d      	b.n	191d8 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   191bc:	b136      	cbz	r6, 191cc <bt_conn_lookup_state_le+0x30>
   191be:	4632      	mov	r2, r6
   191c0:	4629      	mov	r1, r5
   191c2:	f00c f96a 	bl	2549a <bt_conn_is_peer_addr_le>
   191c6:	b908      	cbnz	r0, 191cc <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   191c8:	4620      	mov	r0, r4
   191ca:	e7f3      	b.n	191b4 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   191cc:	7aa3      	ldrb	r3, [r4, #10]
   191ce:	42bb      	cmp	r3, r7
   191d0:	d1fa      	bne.n	191c8 <bt_conn_lookup_state_le+0x2c>
   191d2:	7a23      	ldrb	r3, [r4, #8]
   191d4:	42ab      	cmp	r3, r5
   191d6:	d1f7      	bne.n	191c8 <bt_conn_lookup_state_le+0x2c>
}
   191d8:	4620      	mov	r0, r4
   191da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191dc:	20001f08 	.word	0x20001f08

000191e0 <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   191e0:	b510      	push	{r4, lr}
	info->type = conn->type;
   191e2:	7883      	ldrb	r3, [r0, #2]
   191e4:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   191e6:	78c3      	ldrb	r3, [r0, #3]
   191e8:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   191ea:	7a03      	ldrb	r3, [r0, #8]
   191ec:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   191ee:	7a84      	ldrb	r4, [r0, #10]
	switch (state) {
   191f0:	2c08      	cmp	r4, #8
   191f2:	d80c      	bhi.n	1920e <bt_conn_get_info+0x2e>
	info->state = conn_internal_to_public_state(conn->state);
   191f4:	4b27      	ldr	r3, [pc, #156]	; (19294 <bt_conn_get_info+0xb4>)
   191f6:	5d1b      	ldrb	r3, [r3, r4]
   191f8:	770b      	strb	r3, [r1, #28]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   191fa:	2301      	movs	r3, #1
   191fc:	774b      	strb	r3, [r1, #29]
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   191fe:	2300      	movs	r3, #0
   19200:	83cb      	strh	r3, [r1, #30]
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   19202:	7883      	ldrb	r3, [r0, #2]
   19204:	2b01      	cmp	r3, #1
   19206:	d012      	beq.n	1922e <bt_conn_get_info+0x4e>
		}
		return 0;
#endif
	}

	return -EINVAL;
   19208:	f06f 0015 	mvn.w	r0, #21
}
   1920c:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   1920e:	4a22      	ldr	r2, [pc, #136]	; (19298 <bt_conn_get_info+0xb8>)
   19210:	4922      	ldr	r1, [pc, #136]	; (1929c <bt_conn_get_info+0xbc>)
   19212:	4823      	ldr	r0, [pc, #140]	; (192a0 <bt_conn_get_info+0xc0>)
   19214:	f640 1385 	movw	r3, #2437	; 0x985
   19218:	f00b fa68 	bl	246ec <assert_print>
   1921c:	4821      	ldr	r0, [pc, #132]	; (192a4 <bt_conn_get_info+0xc4>)
   1921e:	4621      	mov	r1, r4
   19220:	f00b fa64 	bl	246ec <assert_print>
   19224:	481c      	ldr	r0, [pc, #112]	; (19298 <bt_conn_get_info+0xb8>)
   19226:	f640 1185 	movw	r1, #2437	; 0x985
   1922a:	f00b fa58 	bl	246de <assert_post_action>
		info->le.dst = &conn->le.dst;
   1922e:	f100 0390 	add.w	r3, r0, #144	; 0x90
   19232:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   19234:	7a03      	ldrb	r3, [r0, #8]
   19236:	4a1c      	ldr	r2, [pc, #112]	; (192a8 <bt_conn_get_info+0xc8>)
   19238:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1923c:	4413      	add	r3, r2
   1923e:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19240:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   19242:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   19246:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1924a:	b114      	cbz	r4, 19252 <bt_conn_get_info+0x72>
   1924c:	461c      	mov	r4, r3
   1924e:	4613      	mov	r3, r2
   19250:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   19252:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   19256:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   1925a:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   1925c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   19260:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   19262:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   19266:	830b      	strh	r3, [r1, #24]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   19268:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1926c:	b123      	cbz	r3, 19278 <bt_conn_get_info+0x98>
   1926e:	7b5b      	ldrb	r3, [r3, #13]
   19270:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   19272:	bf44      	itt	mi
   19274:	2301      	movmi	r3, #1
   19276:	77cb      	strbmi	r3, [r1, #31]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   19278:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1927c:	b113      	cbz	r3, 19284 <bt_conn_get_info+0xa4>
   1927e:	7b5b      	ldrb	r3, [r3, #13]
   19280:	069b      	lsls	r3, r3, #26
   19282:	d401      	bmi.n	19288 <bt_conn_get_info+0xa8>
		return 0;
   19284:	2000      	movs	r0, #0
   19286:	e7c1      	b.n	1920c <bt_conn_get_info+0x2c>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   19288:	7fcb      	ldrb	r3, [r1, #31]
   1928a:	f043 0302 	orr.w	r3, r3, #2
   1928e:	77cb      	strb	r3, [r1, #31]
   19290:	e7f8      	b.n	19284 <bt_conn_get_info+0xa4>
   19292:	bf00      	nop
   19294:	00029dc0 	.word	0x00029dc0
   19298:	00029a05 	.word	0x00029a05
   1929c:	0002ab0f 	.word	0x0002ab0f
   192a0:	00027f8a 	.word	0x00027f8a
   192a4:	00029d59 	.word	0x00029d59
   192a8:	20000388 	.word	0x20000388

000192ac <send_conn_le_param_update>:
{
   192ac:	b538      	push	{r3, r4, r5, lr}
   192ae:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   192b0:	4608      	mov	r0, r1
{
   192b2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   192b4:	f00b ff57 	bl	25166 <bt_le_conn_params_valid>
   192b8:	b348      	cbz	r0, 1930e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   192ba:	4b16      	ldr	r3, [pc, #88]	; (19314 <send_conn_le_param_update+0x68>)
   192bc:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   192c0:	0799      	lsls	r1, r3, #30
   192c2:	d407      	bmi.n	192d4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   192c4:	78e3      	ldrb	r3, [r4, #3]
   192c6:	b183      	cbz	r3, 192ea <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   192c8:	4629      	mov	r1, r5
   192ca:	4620      	mov	r0, r4
}
   192cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   192d0:	f000 bae0 	b.w	19894 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   192d4:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   192d8:	079a      	lsls	r2, r3, #30
   192da:	d5f3      	bpl.n	192c4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   192dc:	f3bf 8f5b 	dmb	ish
   192e0:	6863      	ldr	r3, [r4, #4]
   192e2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   192e6:	055b      	lsls	r3, r3, #21
   192e8:	d4ec      	bmi.n	192c4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   192ea:	4629      	mov	r1, r5
   192ec:	4620      	mov	r0, r4
   192ee:	f00c f8f6 	bl	254de <bt_conn_le_conn_update>
		if (rc == 0) {
   192f2:	b958      	cbnz	r0, 1930c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   192f4:	882b      	ldrh	r3, [r5, #0]
   192f6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   192fa:	886b      	ldrh	r3, [r5, #2]
   192fc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   19300:	88ab      	ldrh	r3, [r5, #4]
   19302:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   19306:	88eb      	ldrh	r3, [r5, #6]
   19308:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1930c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1930e:	f06f 0015 	mvn.w	r0, #21
   19312:	e7fb      	b.n	1930c <send_conn_le_param_update+0x60>
   19314:	20000388 	.word	0x20000388

00019318 <deferred_work>:
{
   19318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1931c:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   1931e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   19322:	af00      	add	r7, sp, #0
   19324:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   19326:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1932a:	bb8b      	cbnz	r3, 19390 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   1932c:	4630      	mov	r0, r6
   1932e:	f00c f933 	bl	25598 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   19332:	4b47      	ldr	r3, [pc, #284]	; (19450 <deferred_work+0x138>)
   19334:	681d      	ldr	r5, [r3, #0]
   19336:	b99d      	cbnz	r5, 19360 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19338:	4d46      	ldr	r5, [pc, #280]	; (19454 <deferred_work+0x13c>)
   1933a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 19478 <deferred_work+0x160>
   1933e:	4545      	cmp	r5, r8
   19340:	d91e      	bls.n	19380 <deferred_work+0x68>
   19342:	4945      	ldr	r1, [pc, #276]	; (19458 <deferred_work+0x140>)
   19344:	4a45      	ldr	r2, [pc, #276]	; (1945c <deferred_work+0x144>)
   19346:	4846      	ldr	r0, [pc, #280]	; (19460 <deferred_work+0x148>)
   19348:	f240 53cb 	movw	r3, #1483	; 0x5cb
   1934c:	f00b f9ce 	bl	246ec <assert_print>
   19350:	4844      	ldr	r0, [pc, #272]	; (19464 <deferred_work+0x14c>)
   19352:	f00b f9cb 	bl	246ec <assert_print>
   19356:	4841      	ldr	r0, [pc, #260]	; (1945c <deferred_work+0x144>)
   19358:	f240 51cb 	movw	r1, #1483	; 0x5cb
   1935c:	f00b f9bf 	bl	246de <assert_post_action>
		if (cb->disconnected) {
   19360:	686b      	ldr	r3, [r5, #4]
   19362:	b11b      	cbz	r3, 1936c <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   19364:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   19368:	4630      	mov	r0, r6
   1936a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1936c:	692d      	ldr	r5, [r5, #16]
   1936e:	e7e2      	b.n	19336 <deferred_work+0x1e>
		if (cb->disconnected) {
   19370:	686b      	ldr	r3, [r5, #4]
   19372:	b11b      	cbz	r3, 1937c <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   19374:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   19378:	4630      	mov	r0, r6
   1937a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1937c:	3514      	adds	r5, #20
   1937e:	e7de      	b.n	1933e <deferred_work+0x26>
   19380:	d3f6      	bcc.n	19370 <deferred_work+0x58>
		bt_conn_unref(conn);
   19382:	4630      	mov	r0, r6
   19384:	f7ff fc4a 	bl	18c1c <bt_conn_unref>
}
   19388:	3708      	adds	r7, #8
   1938a:	46bd      	mov	sp, r7
   1938c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   19390:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   19394:	2b01      	cmp	r3, #1
   19396:	d1f7      	bne.n	19388 <deferred_work+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19398:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1939c:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   193a0:	e855 3f00 	ldrex	r3, [r5]
   193a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   193a8:	e845 2100 	strex	r1, r2, [r5]
   193ac:	2900      	cmp	r1, #0
   193ae:	d1f7      	bne.n	193a0 <deferred_work+0x88>
   193b0:	f3bf 8f5b 	dmb	ish
   193b4:	0599      	lsls	r1, r3, #22
   193b6:	d531      	bpl.n	1941c <deferred_work+0x104>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   193b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   193ba:	603b      	str	r3, [r7, #0]
   193bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   193be:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   193c0:	4639      	mov	r1, r7
   193c2:	4630      	mov	r0, r6
   193c4:	f7ff ff72 	bl	192ac <send_conn_le_param_update>
		if (!err) {
   193c8:	b9c0      	cbnz	r0, 193fc <deferred_work+0xe4>
   193ca:	f3bf 8f5b 	dmb	ish
   193ce:	e855 3f00 	ldrex	r3, [r5]
   193d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   193d6:	e845 3200 	strex	r2, r3, [r5]
   193da:	2a00      	cmp	r2, #0
   193dc:	d1f7      	bne.n	193ce <deferred_work+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   193de:	f3bf 8f5b 	dmb	ish
   193e2:	f3bf 8f5b 	dmb	ish
   193e6:	e855 3f00 	ldrex	r3, [r5]
   193ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   193ee:	e845 3200 	strex	r2, r3, [r5]
   193f2:	2a00      	cmp	r2, #0
   193f4:	d1f7      	bne.n	193e6 <deferred_work+0xce>
   193f6:	f3bf 8f5b 	dmb	ish
   193fa:	e7c5      	b.n	19388 <deferred_work+0x70>
			LOG_WRN("Send LE param update failed (err %d)", err);
   193fc:	466c      	mov	r4, sp
   193fe:	b088      	sub	sp, #32
   19400:	466a      	mov	r2, sp
   19402:	4b19      	ldr	r3, [pc, #100]	; (19468 <deferred_work+0x150>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   19404:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19408:	2303      	movs	r3, #3
   1940a:	f842 3f10 	str.w	r3, [r2, #16]!
   1940e:	4817      	ldr	r0, [pc, #92]	; (1946c <deferred_work+0x154>)
   19410:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19414:	f00c f807 	bl	25426 <z_log_msg_static_create.constprop.0>
   19418:	46a5      	mov	sp, r4
   1941a:	e7e2      	b.n	193e2 <deferred_work+0xca>
		param = BT_LE_CONN_PARAM(
   1941c:	4a14      	ldr	r2, [pc, #80]	; (19470 <deferred_work+0x158>)
   1941e:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   19422:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   19426:	4639      	mov	r1, r7
   19428:	4630      	mov	r0, r6
   1942a:	f7ff ff3f 	bl	192ac <send_conn_le_param_update>
		if (!err) {
   1942e:	b950      	cbnz	r0, 19446 <deferred_work+0x12e>
   19430:	f3bf 8f5b 	dmb	ish
   19434:	e855 3f00 	ldrex	r3, [r5]
   19438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1943c:	e845 3200 	strex	r2, r3, [r5]
   19440:	2a00      	cmp	r2, #0
   19442:	d0cc      	beq.n	193de <deferred_work+0xc6>
   19444:	e7f6      	b.n	19434 <deferred_work+0x11c>
			LOG_WRN("Send auto LE param update failed (err %d)",
   19446:	466c      	mov	r4, sp
   19448:	b088      	sub	sp, #32
   1944a:	466a      	mov	r2, sp
   1944c:	4b09      	ldr	r3, [pc, #36]	; (19474 <deferred_work+0x15c>)
   1944e:	e7d9      	b.n	19404 <deferred_work+0xec>
   19450:	20002dec 	.word	0x20002dec
   19454:	000272f4 	.word	0x000272f4
   19458:	00029a35 	.word	0x00029a35
   1945c:	00029a05 	.word	0x00029a05
   19460:	00027f8a 	.word	0x00027f8a
   19464:	000284d6 	.word	0x000284d6
   19468:	00029d71 	.word	0x00029d71
   1946c:	00027350 	.word	0x00027350
   19470:	03200320 	.word	0x03200320
   19474:	00029d96 	.word	0x00029d96
   19478:	00027308 	.word	0x00027308

0001947c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1947c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1947e:	4801      	ldr	r0, [pc, #4]	; (19484 <bt_conn_create_frag_timeout+0x8>)
   19480:	f7ff bd34 	b.w	18eec <bt_conn_create_pdu_timeout>
   19484:	20000a10 	.word	0x20000a10

00019488 <bt_conn_process_tx>:
{
   19488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1948c:	7a83      	ldrb	r3, [r0, #10]
{
   1948e:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19490:	b993      	cbnz	r3, 194b8 <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19492:	f3bf 8f5b 	dmb	ish
   19496:	1d03      	adds	r3, r0, #4
   19498:	e853 2f00 	ldrex	r2, [r3]
   1949c:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   194a0:	e843 1400 	strex	r4, r1, [r3]
   194a4:	2c00      	cmp	r4, #0
   194a6:	d1f7      	bne.n	19498 <bt_conn_process_tx+0x10>
   194a8:	f3bf 8f5b 	dmb	ish
   194ac:	0653      	lsls	r3, r2, #25
   194ae:	d503      	bpl.n	194b8 <bt_conn_process_tx+0x30>
}
   194b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   194b4:	f7ff b9da 	b.w	1886c <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   194b8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   194bc:	f00d fc1f 	bl	26cfe <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   194c0:	4604      	mov	r4, r0
   194c2:	b960      	cbnz	r0, 194de <bt_conn_process_tx+0x56>
   194c4:	4a33      	ldr	r2, [pc, #204]	; (19594 <bt_conn_process_tx+0x10c>)
   194c6:	4934      	ldr	r1, [pc, #208]	; (19598 <bt_conn_process_tx+0x110>)
   194c8:	4834      	ldr	r0, [pc, #208]	; (1959c <bt_conn_process_tx+0x114>)
   194ca:	f44f 735d 	mov.w	r3, #884	; 0x374
   194ce:	f00b f90d 	bl	246ec <assert_print>
   194d2:	4040      	eors	r0, r0
   194d4:	f380 8811 	msr	BASEPRI, r0
   194d8:	f04f 0003 	mov.w	r0, #3
   194dc:	df02      	svc	2
	buf = net_buf_ref(buf);
   194de:	4620      	mov	r0, r4
   194e0:	f002 fdd4 	bl	1c08c <net_buf_ref>
	return bt_dev.le.acl_mtu;
   194e4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 195a0 <bt_conn_process_tx+0x118>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   194e8:	8a02      	ldrh	r2, [r0, #16]
   194ea:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   194ee:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   194f0:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   194f2:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   194f4:	d807      	bhi.n	19506 <bt_conn_process_tx+0x7e>
   194f6:	b932      	cbnz	r2, 19506 <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   194f8:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   194fa:	4621      	mov	r1, r4
   194fc:	4628      	mov	r0, r5
   194fe:	f7ff f883 	bl	18608 <send_frag>
   19502:	4606      	mov	r6, r0
   19504:	e030      	b.n	19568 <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
   19506:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   19508:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   1950c:	8a22      	ldrh	r2, [r4, #16]
   1950e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   19512:	429a      	cmp	r2, r3
   19514:	d804      	bhi.n	19520 <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
   19516:	2301      	movs	r3, #1
   19518:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   1951a:	2200      	movs	r2, #0
   1951c:	2303      	movs	r3, #3
   1951e:	e7ec      	b.n	194fa <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
   19520:	f04f 33ff 	mov.w	r3, #4294967295
   19524:	f04f 32ff 	mov.w	r2, #4294967295
   19528:	2000      	movs	r0, #0
   1952a:	f7ff ffa7 	bl	1947c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1952e:	7aab      	ldrb	r3, [r5, #10]
   19530:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19532:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19534:	d006      	beq.n	19544 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
   19536:	f002 fd65 	bl	1c004 <net_buf_unref>
	net_buf_unref(buf);
   1953a:	4620      	mov	r0, r4
}
   1953c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   19540:	f002 bd60 	b.w	1c004 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   19544:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   19548:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   1954c:	4602      	mov	r2, r0
   1954e:	463b      	mov	r3, r7
   19550:	4621      	mov	r1, r4
   19552:	4628      	mov	r0, r5
   19554:	f7ff f858 	bl	18608 <send_frag>
		if (err) {
   19558:	4606      	mov	r6, r0
   1955a:	b1b8      	cbz	r0, 1958c <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
   1955c:	f007 0701 	and.w	r7, r7, #1
   19560:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   19562:	4640      	mov	r0, r8
   19564:	f002 fd4e 	bl	1c004 <net_buf_unref>
	net_buf_unref(buf);
   19568:	4620      	mov	r0, r4
   1956a:	f002 fd4b 	bl	1c004 <net_buf_unref>
	if (err  == -EIO) {
   1956e:	3605      	adds	r6, #5
   19570:	d10e      	bne.n	19590 <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19572:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   19574:	2300      	movs	r3, #0
   19576:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   19578:	4620      	mov	r0, r4
   1957a:	f002 fd43 	bl	1c004 <net_buf_unref>
		if (tx) {
   1957e:	b13e      	cbz	r6, 19590 <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
   19580:	4631      	mov	r1, r6
   19582:	4628      	mov	r0, r5
}
   19584:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   19588:	f7ff b818 	b.w	185bc <conn_tx_destroy>
		flags = FRAG_CONT;
   1958c:	2701      	movs	r7, #1
   1958e:	e7bd      	b.n	1950c <bt_conn_process_tx+0x84>
}
   19590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19594:	00029a05 	.word	0x00029a05
   19598:	0002a58c 	.word	0x0002a58c
   1959c:	00027f8a 	.word	0x00027f8a
   195a0:	20000388 	.word	0x20000388

000195a4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   195a4:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   195a6:	480c      	ldr	r0, [pc, #48]	; (195d8 <bt_conn_init+0x34>)
   195a8:	f00d fb87 	bl	26cba <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   195ac:	490b      	ldr	r1, [pc, #44]	; (195dc <bt_conn_init+0x38>)
   195ae:	480a      	ldr	r0, [pc, #40]	; (195d8 <bt_conn_init+0x34>)
   195b0:	f00d fb90 	bl	26cd4 <k_queue_append>
   195b4:	490a      	ldr	r1, [pc, #40]	; (195e0 <bt_conn_init+0x3c>)
   195b6:	4808      	ldr	r0, [pc, #32]	; (195d8 <bt_conn_init+0x34>)
   195b8:	f00d fb8c 	bl	26cd4 <k_queue_append>
   195bc:	4909      	ldr	r1, [pc, #36]	; (195e4 <bt_conn_init+0x40>)
   195be:	4806      	ldr	r0, [pc, #24]	; (195d8 <bt_conn_init+0x34>)
   195c0:	f00d fb88 	bl	26cd4 <k_queue_append>
	}

	bt_att_init();
   195c4:	f001 f954 	bl	1a870 <bt_att_init>

	err = bt_smp_init();
   195c8:	f00c fe88 	bl	262dc <bt_smp_init>
	if (err) {
   195cc:	4604      	mov	r4, r0
   195ce:	b908      	cbnz	r0, 195d4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   195d0:	f00c f820 	bl	25614 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   195d4:	4620      	mov	r0, r4
   195d6:	bd10      	pop	{r4, pc}
   195d8:	2000098c 	.word	0x2000098c
   195dc:	20002dbc 	.word	0x20002dbc
   195e0:	20002dcc 	.word	0x20002dcc
   195e4:	20002ddc 	.word	0x20002ddc

000195e8 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   195e8:	b580      	push	{r7, lr}
   195ea:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   195ec:	b088      	sub	sp, #32
   195ee:	466a      	mov	r2, sp
   195f0:	4b06      	ldr	r3, [pc, #24]	; (1960c <l2cap_create_le_sig_pdu.part.0+0x24>)
   195f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   195f6:	2303      	movs	r3, #3
   195f8:	f842 3f10 	str.w	r3, [r2, #16]!
   195fc:	4804      	ldr	r0, [pc, #16]	; (19610 <l2cap_create_le_sig_pdu.part.0+0x28>)
   195fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19602:	f00b ff95 	bl	25530 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   19606:	2000      	movs	r0, #0
   19608:	46bd      	mov	sp, r7
   1960a:	bd80      	pop	{r7, pc}
   1960c:	00029e42 	.word	0x00029e42
   19610:	00027378 	.word	0x00027378

00019614 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19614:	b580      	push	{r7, lr}
   19616:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   19618:	b088      	sub	sp, #32
   1961a:	466a      	mov	r2, sp
   1961c:	4b07      	ldr	r3, [pc, #28]	; (1963c <l2cap_accept.part.0+0x28>)
   1961e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19622:	2303      	movs	r3, #3
   19624:	f842 3f10 	str.w	r3, [r2, #16]!
   19628:	4805      	ldr	r0, [pc, #20]	; (19640 <l2cap_accept.part.0+0x2c>)
   1962a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1962e:	f00b ff7f 	bl	25530 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   19632:	f06f 000b 	mvn.w	r0, #11
   19636:	46bd      	mov	sp, r7
   19638:	bd80      	pop	{r7, pc}
   1963a:	bf00      	nop
   1963c:	00029e6a 	.word	0x00029e6a
   19640:	00027378 	.word	0x00027378

00019644 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   19644:	4b04      	ldr	r3, [pc, #16]	; (19658 <l2cap_accept+0x14>)
   19646:	681a      	ldr	r2, [r3, #0]
   19648:	b10a      	cbz	r2, 1964e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1964a:	f7ff bfe3 	b.w	19614 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1964e:	4803      	ldr	r0, [pc, #12]	; (1965c <l2cap_accept+0x18>)
   19650:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   19652:	600b      	str	r3, [r1, #0]
}
   19654:	4610      	mov	r0, r2
   19656:	4770      	bx	lr
   19658:	20002df0 	.word	0x20002df0
   1965c:	0002776c 	.word	0x0002776c

00019660 <bt_l2cap_connected>:
{
   19660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19662:	4d2c      	ldr	r5, [pc, #176]	; (19714 <bt_l2cap_connected+0xb4>)
   19664:	4f2c      	ldr	r7, [pc, #176]	; (19718 <bt_l2cap_connected+0xb8>)
{
   19666:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19668:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1966a:	42bd      	cmp	r5, r7
   1966c:	d94e      	bls.n	1970c <bt_l2cap_connected+0xac>
   1966e:	492b      	ldr	r1, [pc, #172]	; (1971c <bt_l2cap_connected+0xbc>)
   19670:	4a2b      	ldr	r2, [pc, #172]	; (19720 <bt_l2cap_connected+0xc0>)
   19672:	482c      	ldr	r0, [pc, #176]	; (19724 <bt_l2cap_connected+0xc4>)
   19674:	f240 1381 	movw	r3, #385	; 0x181
   19678:	f00b f838 	bl	246ec <assert_print>
   1967c:	482a      	ldr	r0, [pc, #168]	; (19728 <bt_l2cap_connected+0xc8>)
   1967e:	f00b f835 	bl	246ec <assert_print>
   19682:	4827      	ldr	r0, [pc, #156]	; (19720 <bt_l2cap_connected+0xc0>)
   19684:	f240 1181 	movw	r1, #385	; 0x181
   19688:	f00b f829 	bl	246de <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   1968c:	686b      	ldr	r3, [r5, #4]
   1968e:	a901      	add	r1, sp, #4
   19690:	4620      	mov	r0, r4
   19692:	4798      	blx	r3
   19694:	2800      	cmp	r0, #0
   19696:	db34      	blt.n	19702 <bt_l2cap_connected+0xa2>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   19698:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1969a:	882a      	ldrh	r2, [r5, #0]
   1969c:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1969e:	849a      	strh	r2, [r3, #36]	; 0x24
   196a0:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   196a4:	68a8      	ldr	r0, [r5, #8]
   196a6:	f3bf 8f5b 	dmb	ish
   196aa:	e852 1f00 	ldrex	r1, [r2]
   196ae:	e842 6c00 	strex	ip, r6, [r2]
   196b2:	f1bc 0f00 	cmp.w	ip, #0
   196b6:	d1f8      	bne.n	196aa <bt_l2cap_connected+0x4a>
   196b8:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   196bc:	609e      	str	r6, [r3, #8]
	return list->tail;
   196be:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   196c0:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   196c4:	b9f9      	cbnz	r1, 19706 <bt_l2cap_connected+0xa6>
	list->head = node;
   196c6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   196ca:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   196cc:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   196ce:	9801      	ldr	r0, [sp, #4]
   196d0:	6843      	ldr	r3, [r0, #4]
   196d2:	681b      	ldr	r3, [r3, #0]
   196d4:	b103      	cbz	r3, 196d8 <bt_l2cap_connected+0x78>
			chan->ops->connected(chan);
   196d6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   196d8:	9b01      	ldr	r3, [sp, #4]
   196da:	f3bf 8f5b 	dmb	ish
   196de:	3310      	adds	r3, #16
   196e0:	e853 1f00 	ldrex	r1, [r3]
   196e4:	f041 0101 	orr.w	r1, r1, #1
   196e8:	e843 1200 	strex	r2, r1, [r3]
   196ec:	2a00      	cmp	r2, #0
   196ee:	d1f7      	bne.n	196e0 <bt_l2cap_connected+0x80>
   196f0:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   196f4:	9801      	ldr	r0, [sp, #4]
   196f6:	6843      	ldr	r3, [r0, #4]
   196f8:	69db      	ldr	r3, [r3, #28]
   196fa:	b113      	cbz	r3, 19702 <bt_l2cap_connected+0xa2>
			chan->ops->status(chan, chan->status);
   196fc:	f100 0110 	add.w	r1, r0, #16
   19700:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19702:	350c      	adds	r5, #12
   19704:	e7b1      	b.n	1966a <bt_l2cap_connected+0xa>
	parent->next = child;
   19706:	600a      	str	r2, [r1, #0]
	list->tail = node;
   19708:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1970a:	e7de      	b.n	196ca <bt_l2cap_connected+0x6a>
   1970c:	d3be      	bcc.n	1968c <bt_l2cap_connected+0x2c>
}
   1970e:	b003      	add	sp, #12
   19710:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19712:	bf00      	nop
   19714:	000272d0 	.word	0x000272d0
   19718:	000272f4 	.word	0x000272f4
   1971c:	00029ec2 	.word	0x00029ec2
   19720:	00029e91 	.word	0x00029e91
   19724:	00027f8a 	.word	0x00027f8a
   19728:	000284d6 	.word	0x000284d6

0001972c <l2cap_recv>:
{
   1972c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1972e:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   19730:	8a0b      	ldrh	r3, [r1, #16]
   19732:	2b03      	cmp	r3, #3
{
   19734:	af02      	add	r7, sp, #8
   19736:	4606      	mov	r6, r0
   19738:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1973a:	d80b      	bhi.n	19754 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   1973c:	4b30      	ldr	r3, [pc, #192]	; (19800 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1973e:	617b      	str	r3, [r7, #20]
   19740:	2302      	movs	r3, #2
   19742:	4830      	ldr	r0, [pc, #192]	; (19804 <l2cap_recv+0xd8>)
   19744:	613b      	str	r3, [r7, #16]
   19746:	f107 0210 	add.w	r2, r7, #16
   1974a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1974e:	f00b feef 	bl	25530 <z_log_msg_static_create.constprop.0>
		return 0;
   19752:	e019      	b.n	19788 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   19754:	2104      	movs	r1, #4
   19756:	f105 000c 	add.w	r0, r5, #12
   1975a:	f002 fd79 	bl	1c250 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1975e:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19760:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19762:	4299      	cmp	r1, r3
   19764:	4604      	mov	r4, r0
   19766:	d013      	beq.n	19790 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19768:	466c      	mov	r4, sp
   1976a:	b088      	sub	sp, #32
   1976c:	aa02      	add	r2, sp, #8
   1976e:	4826      	ldr	r0, [pc, #152]	; (19808 <l2cap_recv+0xdc>)
   19770:	61d3      	str	r3, [r2, #28]
   19772:	2304      	movs	r3, #4
   19774:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19778:	f842 3f10 	str.w	r3, [r2, #16]!
   1977c:	4821      	ldr	r0, [pc, #132]	; (19804 <l2cap_recv+0xd8>)
   1977e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19782:	f00b fed5 	bl	25530 <z_log_msg_static_create.constprop.0>
   19786:	46a5      	mov	sp, r4
}
   19788:	2000      	movs	r0, #0
   1978a:	371c      	adds	r7, #28
   1978c:	46bd      	mov	sp, r7
   1978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19790:	7843      	ldrb	r3, [r0, #1]
   19792:	b90b      	cbnz	r3, 19798 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19794:	4b1d      	ldr	r3, [pc, #116]	; (1980c <l2cap_recv+0xe0>)
   19796:	e7d2      	b.n	1973e <l2cap_recv+0x12>
	switch (hdr->code) {
   19798:	7803      	ldrb	r3, [r0, #0]
   1979a:	2b01      	cmp	r3, #1
   1979c:	d0f4      	beq.n	19788 <l2cap_recv+0x5c>
   1979e:	2b13      	cmp	r3, #19
   197a0:	d103      	bne.n	197aa <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   197a2:	2901      	cmp	r1, #1
   197a4:	d8f0      	bhi.n	19788 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   197a6:	4b1a      	ldr	r3, [pc, #104]	; (19810 <l2cap_recv+0xe4>)
   197a8:	e7c9      	b.n	1973e <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   197aa:	466d      	mov	r5, sp
   197ac:	b088      	sub	sp, #32
   197ae:	aa02      	add	r2, sp, #8
   197b0:	4918      	ldr	r1, [pc, #96]	; (19814 <l2cap_recv+0xe8>)
   197b2:	4814      	ldr	r0, [pc, #80]	; (19804 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   197b4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   197b8:	2303      	movs	r3, #3
   197ba:	f842 3f10 	str.w	r3, [r2, #16]!
   197be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   197c2:	f00b feb5 	bl	25530 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   197c6:	2202      	movs	r2, #2
   197c8:	7861      	ldrb	r1, [r4, #1]
   197ca:	46ad      	mov	sp, r5
   197cc:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   197ce:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   197d0:	f00b feb1 	bl	25536 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   197d4:	4604      	mov	r4, r0
   197d6:	2800      	cmp	r0, #0
   197d8:	d0d6      	beq.n	19788 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   197da:	2102      	movs	r1, #2
   197dc:	300c      	adds	r0, #12
   197de:	f002 fd55 	bl	1c28c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   197e2:	2300      	movs	r3, #0
   197e4:	7003      	strb	r3, [r0, #0]
   197e6:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   197e8:	4622      	mov	r2, r4
   197ea:	9300      	str	r3, [sp, #0]
   197ec:	2105      	movs	r1, #5
   197ee:	4628      	mov	r0, r5
   197f0:	f00b feed 	bl	255ce <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   197f4:	2800      	cmp	r0, #0
   197f6:	d0c7      	beq.n	19788 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   197f8:	4620      	mov	r0, r4
   197fa:	f002 fc03 	bl	1c004 <net_buf_unref>
   197fe:	e7c3      	b.n	19788 <l2cap_recv+0x5c>
   19800:	00029ee9 	.word	0x00029ee9
   19804:	00027378 	.word	0x00027378
   19808:	00029f07 	.word	0x00029f07
   1980c:	00029f28 	.word	0x00029f28
   19810:	00029f49 	.word	0x00029f49
   19814:	00029f65 	.word	0x00029f65

00019818 <bt_l2cap_recv>:
{
   19818:	b5b0      	push	{r4, r5, r7, lr}
   1981a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1981c:	8a0b      	ldrh	r3, [r1, #16]
   1981e:	2b03      	cmp	r3, #3
{
   19820:	af00      	add	r7, sp, #0
   19822:	4605      	mov	r5, r0
   19824:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19826:	d810      	bhi.n	1984a <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   19828:	4b17      	ldr	r3, [pc, #92]	; (19888 <bt_l2cap_recv+0x70>)
   1982a:	617b      	str	r3, [r7, #20]
   1982c:	4817      	ldr	r0, [pc, #92]	; (1988c <bt_l2cap_recv+0x74>)
   1982e:	2302      	movs	r3, #2
   19830:	f107 0210 	add.w	r2, r7, #16
   19834:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19838:	613b      	str	r3, [r7, #16]
   1983a:	f00b fe79 	bl	25530 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   1983e:	4620      	mov	r0, r4
   19840:	f002 fbe0 	bl	1c004 <net_buf_unref>
}
   19844:	3718      	adds	r7, #24
   19846:	46bd      	mov	sp, r7
   19848:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1984a:	2104      	movs	r1, #4
   1984c:	f104 000c 	add.w	r0, r4, #12
   19850:	f002 fcfe 	bl	1c250 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19854:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19856:	4628      	mov	r0, r5
   19858:	f00b fed2 	bl	25600 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1985c:	b978      	cbnz	r0, 1987e <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1985e:	466d      	mov	r5, sp
   19860:	b088      	sub	sp, #32
   19862:	466a      	mov	r2, sp
   19864:	4b0a      	ldr	r3, [pc, #40]	; (19890 <bt_l2cap_recv+0x78>)
   19866:	4809      	ldr	r0, [pc, #36]	; (1988c <bt_l2cap_recv+0x74>)
   19868:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1986c:	2303      	movs	r3, #3
   1986e:	f842 3f10 	str.w	r3, [r2, #16]!
   19872:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19876:	f00b fe5b 	bl	25530 <z_log_msg_static_create.constprop.0>
   1987a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1987c:	e7df      	b.n	1983e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1987e:	6843      	ldr	r3, [r0, #4]
   19880:	4621      	mov	r1, r4
   19882:	695b      	ldr	r3, [r3, #20]
   19884:	4798      	blx	r3
   19886:	e7da      	b.n	1983e <bt_l2cap_recv+0x26>
   19888:	00029f8d 	.word	0x00029f8d
   1988c:	00027378 	.word	0x00027378
   19890:	00029faa 	.word	0x00029faa

00019894 <bt_l2cap_update_conn_param>:
{
   19894:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   19896:	4b17      	ldr	r3, [pc, #92]	; (198f4 <bt_l2cap_update_conn_param+0x60>)
{
   19898:	460e      	mov	r6, r1
	ident++;
   1989a:	7819      	ldrb	r1, [r3, #0]
   1989c:	3101      	adds	r1, #1
   1989e:	b2c9      	uxtb	r1, r1
   198a0:	2901      	cmp	r1, #1
   198a2:	bf38      	it	cc
   198a4:	2101      	movcc	r1, #1
{
   198a6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   198a8:	2208      	movs	r2, #8
   198aa:	2012      	movs	r0, #18
	ident++;
   198ac:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   198ae:	f00b fe42 	bl	25536 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   198b2:	4604      	mov	r4, r0
   198b4:	b1d0      	cbz	r0, 198ec <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   198b6:	2108      	movs	r1, #8
   198b8:	300c      	adds	r0, #12
   198ba:	f002 fce7 	bl	1c28c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   198be:	8833      	ldrh	r3, [r6, #0]
   198c0:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   198c2:	8873      	ldrh	r3, [r6, #2]
   198c4:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   198c6:	88b3      	ldrh	r3, [r6, #4]
   198c8:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   198ca:	88f3      	ldrh	r3, [r6, #6]
   198cc:	80c3      	strh	r3, [r0, #6]
   198ce:	2300      	movs	r3, #0
   198d0:	4628      	mov	r0, r5
   198d2:	9300      	str	r3, [sp, #0]
   198d4:	4622      	mov	r2, r4
   198d6:	2105      	movs	r1, #5
   198d8:	f00b fe79 	bl	255ce <bt_l2cap_send_cb>
	if (err) {
   198dc:	4605      	mov	r5, r0
   198de:	b110      	cbz	r0, 198e6 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   198e0:	4620      	mov	r0, r4
   198e2:	f002 fb8f 	bl	1c004 <net_buf_unref>
}
   198e6:	4628      	mov	r0, r5
   198e8:	b002      	add	sp, #8
   198ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   198ec:	f06f 050b 	mvn.w	r5, #11
   198f0:	e7f9      	b.n	198e6 <bt_l2cap_update_conn_param+0x52>
   198f2:	bf00      	nop
   198f4:	200031db 	.word	0x200031db

000198f8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   198f8:	2823      	cmp	r0, #35	; 0x23
   198fa:	d81f      	bhi.n	1993c <att_op_get_type+0x44>
   198fc:	281a      	cmp	r0, #26
   198fe:	d804      	bhi.n	1990a <att_op_get_type+0x12>
   19900:	1e43      	subs	r3, r0, #1
   19902:	2b18      	cmp	r3, #24
   19904:	d90e      	bls.n	19924 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   19906:	2006      	movs	r0, #6
   19908:	4770      	bx	lr
	switch (op) {
   1990a:	f1a0 031b 	sub.w	r3, r0, #27
   1990e:	2b08      	cmp	r3, #8
   19910:	d81e      	bhi.n	19950 <att_op_get_type+0x58>
   19912:	e8df f003 	tbb	[pc, r3]
   19916:	1d05      	.short	0x1d05
   19918:	191d231b 	.word	0x191d231b
   1991c:	1d25      	.short	0x1d25
   1991e:	05          	.byte	0x05
   1991f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   19920:	2003      	movs	r0, #3
   19922:	4770      	bx	lr
	switch (op) {
   19924:	4a0f      	ldr	r2, [pc, #60]	; (19964 <att_op_get_type+0x6c>)
   19926:	2301      	movs	r3, #1
   19928:	4083      	lsls	r3, r0
   1992a:	401a      	ands	r2, r3
   1992c:	b9c2      	cbnz	r2, 19960 <att_op_get_type+0x68>
   1992e:	4a0e      	ldr	r2, [pc, #56]	; (19968 <att_op_get_type+0x70>)
   19930:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   19932:	2a00      	cmp	r2, #0
   19934:	bf14      	ite	ne
   19936:	2001      	movne	r0, #1
   19938:	2006      	moveq	r0, #6
   1993a:	4770      	bx	lr
	switch (op) {
   1993c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19940:	2b52      	cmp	r3, #82	; 0x52
   19942:	d105      	bne.n	19950 <att_op_get_type+0x58>
		return ATT_COMMAND;
   19944:	2000      	movs	r0, #0
}
   19946:	4770      	bx	lr
		return ATT_REQUEST;
   19948:	2001      	movs	r0, #1
   1994a:	4770      	bx	lr
		return ATT_INDICATION;
   1994c:	2005      	movs	r0, #5
   1994e:	4770      	bx	lr
		return ATT_COMMAND;
   19950:	f010 0f40 	tst.w	r0, #64	; 0x40
   19954:	bf0c      	ite	eq
   19956:	2006      	moveq	r0, #6
   19958:	2000      	movne	r0, #0
   1995a:	4770      	bx	lr
	switch (op) {
   1995c:	2004      	movs	r0, #4
   1995e:	4770      	bx	lr
		return ATT_RESPONSE;
   19960:	2002      	movs	r0, #2
   19962:	4770      	bx	lr
   19964:	028aaaaa 	.word	0x028aaaaa
   19968:	01455554 	.word	0x01455554

0001996c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1996c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1996e:	3804      	subs	r0, #4
   19970:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   19972:	a901      	add	r1, sp, #4
   19974:	4802      	ldr	r0, [pc, #8]	; (19980 <bt_att_released+0x14>)
   19976:	f006 fd21 	bl	203bc <k_mem_slab_free>
}
   1997a:	b003      	add	sp, #12
   1997c:	f85d fb04 	ldr.w	pc, [sp], #4
   19980:	200008bc 	.word	0x200008bc

00019984 <tx_meta_data_free>:
{
   19984:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   19986:	4604      	mov	r4, r0
   19988:	b948      	cbnz	r0, 1999e <tx_meta_data_free+0x1a>
   1998a:	490a      	ldr	r1, [pc, #40]	; (199b4 <tx_meta_data_free+0x30>)
   1998c:	480a      	ldr	r0, [pc, #40]	; (199b8 <tx_meta_data_free+0x34>)
   1998e:	4a0b      	ldr	r2, [pc, #44]	; (199bc <tx_meta_data_free+0x38>)
   19990:	23ae      	movs	r3, #174	; 0xae
   19992:	f00a feab 	bl	246ec <assert_print>
   19996:	4809      	ldr	r0, [pc, #36]	; (199bc <tx_meta_data_free+0x38>)
   19998:	21ae      	movs	r1, #174	; 0xae
   1999a:	f00a fea0 	bl	246de <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   1999e:	2100      	movs	r1, #0
   199a0:	2214      	movs	r2, #20
   199a2:	f00b fabb 	bl	24f1c <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   199a6:	4621      	mov	r1, r4
   199a8:	4805      	ldr	r0, [pc, #20]	; (199c0 <tx_meta_data_free+0x3c>)
}
   199aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   199ae:	f00d b991 	b.w	26cd4 <k_queue_append>
   199b2:	bf00      	nop
   199b4:	00029b17 	.word	0x00029b17
   199b8:	00027f8a 	.word	0x00027f8a
   199bc:	00029fe6 	.word	0x00029fe6
   199c0:	20000970 	.word	0x20000970

000199c4 <find_type_cb>:
{
   199c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199c8:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   199ca:	f8d2 a000 	ldr.w	sl, [r2]
{
   199ce:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   199d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   199d4:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   199d6:	2500      	movs	r5, #0
   199d8:	f642 0301 	movw	r3, #10241	; 0x2801
{
   199dc:	4680      	mov	r8, r0
   199de:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   199e0:	6800      	ldr	r0, [r0, #0]
   199e2:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   199e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
   199e8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   199ec:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   199ee:	f00b fac0 	bl	24f72 <bt_uuid_cmp>
   199f2:	2800      	cmp	r0, #0
   199f4:	d070      	beq.n	19ad8 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   199f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   199fa:	f8d8 0000 	ldr.w	r0, [r8]
   199fe:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19a02:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19a04:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   19a08:	f00b fab3 	bl	24f72 <bt_uuid_cmp>
   19a0c:	b138      	cbz	r0, 19a1e <find_type_cb+0x5a>
		if (data->group &&
   19a0e:	68a3      	ldr	r3, [r4, #8]
   19a10:	b11b      	cbz	r3, 19a1a <find_type_cb+0x56>
   19a12:	885a      	ldrh	r2, [r3, #2]
   19a14:	42b2      	cmp	r2, r6
   19a16:	d200      	bcs.n	19a1a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   19a18:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19a1a:	2001      	movs	r0, #1
   19a1c:	e009      	b.n	19a32 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19a1e:	6861      	ldr	r1, [r4, #4]
   19a20:	4608      	mov	r0, r1
   19a22:	f00b fe02 	bl	2562a <net_buf_frags_len>
   19a26:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19a2a:	1a1b      	subs	r3, r3, r0
   19a2c:	2b03      	cmp	r3, #3
   19a2e:	d804      	bhi.n	19a3a <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   19a30:	2000      	movs	r0, #0
}
   19a32:	3744      	adds	r7, #68	; 0x44
   19a34:	46bd      	mov	sp, r7
   19a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19a3a:	4608      	mov	r0, r1
   19a3c:	f002 fb3e 	bl	1c0bc <net_buf_frag_last>
   19a40:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   19a42:	6860      	ldr	r0, [r4, #4]
   19a44:	f00b fdf1 	bl	2562a <net_buf_frags_len>
   19a48:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   19a4c:	f105 090c 	add.w	r9, r5, #12
   19a50:	ebab 0b00 	sub.w	fp, fp, r0
   19a54:	4648      	mov	r0, r9
   19a56:	f00c fc57 	bl	26308 <net_buf_simple_tailroom>
   19a5a:	4558      	cmp	r0, fp
   19a5c:	d93f      	bls.n	19ade <find_type_cb+0x11a>
   19a5e:	6860      	ldr	r0, [r4, #4]
   19a60:	f00b fde3 	bl	2562a <net_buf_frags_len>
   19a64:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19a68:	1a18      	subs	r0, r3, r0
	if (!len) {
   19a6a:	b970      	cbnz	r0, 19a8a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19a6c:	6863      	ldr	r3, [r4, #4]
   19a6e:	7a98      	ldrb	r0, [r3, #10]
   19a70:	f002 f8b4 	bl	1bbdc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19a74:	2200      	movs	r2, #0
   19a76:	2300      	movs	r3, #0
   19a78:	f00c fc33 	bl	262e2 <net_buf_alloc_fixed>
		if (!frag) {
   19a7c:	4605      	mov	r5, r0
   19a7e:	2800      	cmp	r0, #0
   19a80:	d0d6      	beq.n	19a30 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   19a82:	4601      	mov	r1, r0
   19a84:	6860      	ldr	r0, [r4, #4]
   19a86:	f002 fb5f 	bl	1c148 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19a8a:	2300      	movs	r3, #0
   19a8c:	9300      	str	r3, [sp, #0]
   19a8e:	f8d8 a004 	ldr.w	sl, [r8, #4]
   19a92:	6878      	ldr	r0, [r7, #4]
   19a94:	4641      	mov	r1, r8
   19a96:	2310      	movs	r3, #16
   19a98:	f107 0208 	add.w	r2, r7, #8
   19a9c:	47d0      	blx	sl
	if (read < 0) {
   19a9e:	f1b0 0800 	subs.w	r8, r0, #0
   19aa2:	db19      	blt.n	19ad8 <find_type_cb+0x114>
	if (read != data->value_len) {
   19aa4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19aa6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   19aa8:	4542      	cmp	r2, r8
   19aaa:	d03f      	beq.n	19b2c <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19aac:	4601      	mov	r1, r0
   19aae:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19ab2:	f00b fa8c 	bl	24fce <bt_uuid_create>
   19ab6:	b9b0      	cbnz	r0, 19ae6 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   19ab8:	466d      	mov	r5, sp
   19aba:	b088      	sub	sp, #32
   19abc:	7c23      	ldrb	r3, [r4, #16]
   19abe:	aa02      	add	r2, sp, #8
   19ac0:	491d      	ldr	r1, [pc, #116]	; (19b38 <find_type_cb+0x174>)
   19ac2:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   19ac6:	2303      	movs	r3, #3
   19ac8:	f842 3f10 	str.w	r3, [r2, #16]!
   19acc:	481b      	ldr	r0, [pc, #108]	; (19b3c <find_type_cb+0x178>)
   19ace:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19ad2:	f00b fe98 	bl	25806 <z_log_msg_static_create.constprop.0>
   19ad6:	46ad      	mov	sp, r5
	data->group = NULL;
   19ad8:	2300      	movs	r3, #0
   19ada:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   19adc:	e79d      	b.n	19a1a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   19ade:	4648      	mov	r0, r9
   19ae0:	f00c fc12 	bl	26308 <net_buf_simple_tailroom>
   19ae4:	e7c1      	b.n	19a6a <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19ae6:	fa5f f288 	uxtb.w	r2, r8
   19aea:	f107 0108 	add.w	r1, r7, #8
   19aee:	f107 0018 	add.w	r0, r7, #24
   19af2:	f00b fa6c 	bl	24fce <bt_uuid_create>
   19af6:	b930      	cbnz	r0, 19b06 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   19af8:	466d      	mov	r5, sp
   19afa:	b088      	sub	sp, #32
   19afc:	aa02      	add	r2, sp, #8
   19afe:	4b10      	ldr	r3, [pc, #64]	; (19b40 <find_type_cb+0x17c>)
   19b00:	e9c2 3805 	strd	r3, r8, [r2, #20]
   19b04:	e7df      	b.n	19ac6 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   19b06:	f107 0118 	add.w	r1, r7, #24
   19b0a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19b0e:	f00b fa30 	bl	24f72 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19b12:	2800      	cmp	r0, #0
   19b14:	d1e0      	bne.n	19ad8 <find_type_cb+0x114>
	data->err = 0x00;
   19b16:	2300      	movs	r3, #0
   19b18:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   19b1a:	2104      	movs	r1, #4
   19b1c:	f105 000c 	add.w	r0, r5, #12
   19b20:	f002 fbb4 	bl	1c28c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19b24:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19b26:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19b28:	68a3      	ldr	r3, [r4, #8]
   19b2a:	e775      	b.n	19a18 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   19b2c:	f107 0108 	add.w	r1, r7, #8
   19b30:	f00b f9d9 	bl	24ee6 <memcmp>
   19b34:	e7ed      	b.n	19b12 <find_type_cb+0x14e>
   19b36:	bf00      	nop
   19b38:	0002a015 	.word	0x0002a015
   19b3c:	00027348 	.word	0x00027348
   19b40:	0002a034 	.word	0x0002a034

00019b44 <chan_send>:
{
   19b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19b48:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   19b4a:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   19b4e:	68cb      	ldr	r3, [r1, #12]
{
   19b50:	b089      	sub	sp, #36	; 0x24
   19b52:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   19b54:	3034      	adds	r0, #52	; 0x34
   19b56:	2102      	movs	r1, #2
   19b58:	f00b fd81 	bl	2565e <atomic_test_bit>
   19b5c:	b970      	cbnz	r0, 19b7c <chan_send+0x38>
		LOG_ERR("ATT channel not connected");
   19b5e:	4b36      	ldr	r3, [pc, #216]	; (19c38 <chan_send+0xf4>)
   19b60:	4836      	ldr	r0, [pc, #216]	; (19c3c <chan_send+0xf8>)
   19b62:	e9cd 1306 	strd	r1, r3, [sp, #24]
   19b66:	aa06      	add	r2, sp, #24
   19b68:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   19b6c:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   19b70:	f00b fe49 	bl	25806 <z_log_msg_static_create.constprop.0>
}
   19b74:	4628      	mov	r0, r5
   19b76:	b009      	add	sp, #36	; 0x24
   19b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19b7c:	781b      	ldrb	r3, [r3, #0]
   19b7e:	2bd2      	cmp	r3, #210	; 0xd2
   19b80:	d117      	bne.n	19bb2 <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   19b82:	6833      	ldr	r3, [r6, #0]
   19b84:	4621      	mov	r1, r4
   19b86:	6818      	ldr	r0, [r3, #0]
   19b88:	f00c fba5 	bl	262d6 <bt_smp_sign>
		if (err) {
   19b8c:	4605      	mov	r5, r0
   19b8e:	b180      	cbz	r0, 19bb2 <chan_send+0x6e>
			LOG_ERR("Error signing data");
   19b90:	4b2b      	ldr	r3, [pc, #172]	; (19c40 <chan_send+0xfc>)
   19b92:	9307      	str	r3, [sp, #28]
   19b94:	aa06      	add	r2, sp, #24
   19b96:	2302      	movs	r3, #2
   19b98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19b9c:	4827      	ldr	r0, [pc, #156]	; (19c3c <chan_send+0xf8>)
   19b9e:	9306      	str	r3, [sp, #24]
   19ba0:	f00b fe31 	bl	25806 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   19ba4:	69a0      	ldr	r0, [r4, #24]
   19ba6:	f7ff feed 	bl	19984 <tx_meta_data_free>
			net_buf_unref(buf);
   19baa:	4620      	mov	r0, r4
   19bac:	f002 fa2a 	bl	1c004 <net_buf_unref>
			return err;
   19bb0:	e7e0      	b.n	19b74 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   19bb2:	f104 000c 	add.w	r0, r4, #12
   19bb6:	f00c fba3 	bl	26300 <net_buf_simple_headroom>
	state->len = buf->len;
   19bba:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   19bbe:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19bc2:	6833      	ldr	r3, [r6, #0]
   19bc4:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19bc6:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19bc8:	4607      	mov	r7, r0
   19bca:	7818      	ldrb	r0, [r3, #0]
   19bcc:	f7ff fe94 	bl	198f8 <att_op_get_type>
   19bd0:	2805      	cmp	r0, #5
   19bd2:	4605      	mov	r5, r0
	switch (op_type) {
   19bd4:	d820      	bhi.n	19c18 <chan_send+0xd4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19bd6:	4b1b      	ldr	r3, [pc, #108]	; (19c44 <chan_send+0x100>)
   19bd8:	f8cd 9000 	str.w	r9, [sp]
   19bdc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19be0:	4622      	mov	r2, r4
   19be2:	2104      	movs	r1, #4
   19be4:	4630      	mov	r0, r6
   19be6:	f00b fcf2 	bl	255ce <bt_l2cap_send_cb>
	if (err) {
   19bea:	4605      	mov	r5, r0
   19bec:	2800      	cmp	r0, #0
   19bee:	d0c1      	beq.n	19b74 <chan_send+0x30>
		if (err == -ENOBUFS) {
   19bf0:	f110 0f69 	cmn.w	r0, #105	; 0x69
   19bf4:	d109      	bne.n	19c0a <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   19bf6:	4b14      	ldr	r3, [pc, #80]	; (19c48 <chan_send+0x104>)
   19bf8:	9307      	str	r3, [sp, #28]
   19bfa:	4810      	ldr	r0, [pc, #64]	; (19c3c <chan_send+0xf8>)
   19bfc:	2302      	movs	r3, #2
   19bfe:	aa06      	add	r2, sp, #24
   19c00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19c04:	9306      	str	r3, [sp, #24]
   19c06:	f00b fdfe 	bl	25806 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   19c0a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   19c0c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   19c10:	fa13 f787 	uxtah	r7, r3, r7
   19c14:	60e7      	str	r7, [r4, #12]
}
   19c16:	e7ad      	b.n	19b74 <chan_send+0x30>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   19c18:	4a0c      	ldr	r2, [pc, #48]	; (19c4c <chan_send+0x108>)
   19c1a:	490d      	ldr	r1, [pc, #52]	; (19c50 <chan_send+0x10c>)
   19c1c:	480d      	ldr	r0, [pc, #52]	; (19c54 <chan_send+0x110>)
   19c1e:	f44f 7319 	mov.w	r3, #612	; 0x264
   19c22:	f00a fd63 	bl	246ec <assert_print>
   19c26:	480c      	ldr	r0, [pc, #48]	; (19c58 <chan_send+0x114>)
   19c28:	4629      	mov	r1, r5
   19c2a:	f00a fd5f 	bl	246ec <assert_print>
   19c2e:	4807      	ldr	r0, [pc, #28]	; (19c4c <chan_send+0x108>)
   19c30:	f44f 7119 	mov.w	r1, #612	; 0x264
   19c34:	f00a fd53 	bl	246de <assert_post_action>
   19c38:	0002a053 	.word	0x0002a053
   19c3c:	00027348 	.word	0x00027348
   19c40:	0002a06d 	.word	0x0002a06d
   19c44:	00027794 	.word	0x00027794
   19c48:	0002a099 	.word	0x0002a099
   19c4c:	00029fe6 	.word	0x00029fe6
   19c50:	0002ab0f 	.word	0x0002ab0f
   19c54:	00027f8a 	.word	0x00027f8a
   19c58:	0002a080 	.word	0x0002a080

00019c5c <bt_att_chan_req_send>:
{
   19c5c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   19c5e:	b958      	cbnz	r0, 19c78 <bt_att_chan_req_send+0x1c>
   19c60:	4919      	ldr	r1, [pc, #100]	; (19cc8 <bt_att_chan_req_send+0x6c>)
   19c62:	4a1a      	ldr	r2, [pc, #104]	; (19ccc <bt_att_chan_req_send+0x70>)
   19c64:	481a      	ldr	r0, [pc, #104]	; (19cd0 <bt_att_chan_req_send+0x74>)
   19c66:	f240 3325 	movw	r3, #805	; 0x325
   19c6a:	f00a fd3f 	bl	246ec <assert_print>
   19c6e:	f240 3125 	movw	r1, #805	; 0x325
	__ASSERT_NO_MSG(req);
   19c72:	4816      	ldr	r0, [pc, #88]	; (19ccc <bt_att_chan_req_send+0x70>)
   19c74:	f00a fd33 	bl	246de <assert_post_action>
   19c78:	b949      	cbnz	r1, 19c8e <bt_att_chan_req_send+0x32>
   19c7a:	4916      	ldr	r1, [pc, #88]	; (19cd4 <bt_att_chan_req_send+0x78>)
   19c7c:	4a13      	ldr	r2, [pc, #76]	; (19ccc <bt_att_chan_req_send+0x70>)
   19c7e:	4814      	ldr	r0, [pc, #80]	; (19cd0 <bt_att_chan_req_send+0x74>)
   19c80:	f240 3326 	movw	r3, #806	; 0x326
   19c84:	f00a fd32 	bl	246ec <assert_print>
   19c88:	f240 3126 	movw	r1, #806	; 0x326
   19c8c:	e7f1      	b.n	19c72 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   19c8e:	684a      	ldr	r2, [r1, #4]
   19c90:	b94a      	cbnz	r2, 19ca6 <bt_att_chan_req_send+0x4a>
   19c92:	4911      	ldr	r1, [pc, #68]	; (19cd8 <bt_att_chan_req_send+0x7c>)
   19c94:	4a0d      	ldr	r2, [pc, #52]	; (19ccc <bt_att_chan_req_send+0x70>)
   19c96:	480e      	ldr	r0, [pc, #56]	; (19cd0 <bt_att_chan_req_send+0x74>)
   19c98:	f240 3327 	movw	r3, #807	; 0x327
   19c9c:	f00a fd26 	bl	246ec <assert_print>
   19ca0:	f240 3127 	movw	r1, #807	; 0x327
   19ca4:	e7e5      	b.n	19c72 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   19ca6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19ca8:	b14b      	cbz	r3, 19cbe <bt_att_chan_req_send+0x62>
   19caa:	490c      	ldr	r1, [pc, #48]	; (19cdc <bt_att_chan_req_send+0x80>)
   19cac:	4a07      	ldr	r2, [pc, #28]	; (19ccc <bt_att_chan_req_send+0x70>)
   19cae:	4808      	ldr	r0, [pc, #32]	; (19cd0 <bt_att_chan_req_send+0x74>)
   19cb0:	f44f 734a 	mov.w	r3, #808	; 0x328
   19cb4:	f00a fd1a 	bl	246ec <assert_print>
   19cb8:	f44f 714a 	mov.w	r1, #808	; 0x328
   19cbc:	e7d9      	b.n	19c72 <bt_att_chan_req_send+0x16>
}
   19cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   19cc2:	f00b bda3 	b.w	2580c <chan_req_send>
   19cc6:	bf00      	nop
   19cc8:	0002a0bc 	.word	0x0002a0bc
   19ccc:	00029fe6 	.word	0x00029fe6
   19cd0:	00027f8a 	.word	0x00027f8a
   19cd4:	0002a0d2 	.word	0x0002a0d2
   19cd8:	0002a0c1 	.word	0x0002a0c1
   19cdc:	0002a0cb 	.word	0x0002a0cb

00019ce0 <att_get>:
{
   19ce0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   19ce2:	7a83      	ldrb	r3, [r0, #10]
   19ce4:	2b07      	cmp	r3, #7
   19ce6:	d00d      	beq.n	19d04 <att_get+0x24>
		LOG_WRN("Not connected");
   19ce8:	4b13      	ldr	r3, [pc, #76]	; (19d38 <att_get+0x58>)
   19cea:	9305      	str	r3, [sp, #20]
   19cec:	2302      	movs	r3, #2
   19cee:	9304      	str	r3, [sp, #16]
   19cf0:	aa04      	add	r2, sp, #16
   19cf2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   19cf6:	4811      	ldr	r0, [pc, #68]	; (19d3c <att_get+0x5c>)
   19cf8:	f00b fd85 	bl	25806 <z_log_msg_static_create.constprop.0>
		return NULL;
   19cfc:	2000      	movs	r0, #0
}
   19cfe:	b007      	add	sp, #28
   19d00:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19d04:	2104      	movs	r1, #4
   19d06:	f00b fc7b 	bl	25600 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19d0a:	4603      	mov	r3, r0
   19d0c:	b938      	cbnz	r0, 19d1e <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   19d0e:	4b0c      	ldr	r3, [pc, #48]	; (19d40 <att_get+0x60>)
   19d10:	9305      	str	r3, [sp, #20]
   19d12:	2302      	movs	r3, #2
   19d14:	9304      	str	r3, [sp, #16]
   19d16:	aa04      	add	r2, sp, #16
   19d18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19d1c:	e7eb      	b.n	19cf6 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   19d1e:	2102      	movs	r1, #2
   19d20:	3030      	adds	r0, #48	; 0x30
   19d22:	f00b fc9c 	bl	2565e <atomic_test_bit>
   19d26:	b918      	cbnz	r0, 19d30 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   19d28:	4b06      	ldr	r3, [pc, #24]	; (19d44 <att_get+0x64>)
   19d2a:	e9cd 1304 	strd	r1, r3, [sp, #16]
   19d2e:	e7f2      	b.n	19d16 <att_get+0x36>
	return att_chan->att;
   19d30:	f853 0c04 	ldr.w	r0, [r3, #-4]
   19d34:	e7e3      	b.n	19cfe <att_get+0x1e>
   19d36:	bf00      	nop
   19d38:	0002a0d6 	.word	0x0002a0d6
   19d3c:	00027348 	.word	0x00027348
   19d40:	0002a0e4 	.word	0x0002a0e4
   19d44:	0002a053 	.word	0x0002a053

00019d48 <bt_att_connected>:
{
   19d48:	b510      	push	{r4, lr}
   19d4a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   19d4e:	4604      	mov	r4, r0
   19d50:	f3bf 8f5b 	dmb	ish
   19d54:	e853 1f00 	ldrex	r1, [r3]
   19d58:	f041 0104 	orr.w	r1, r1, #4
   19d5c:	e843 1200 	strex	r2, r1, [r3]
   19d60:	2a00      	cmp	r2, #0
   19d62:	d1f7      	bne.n	19d54 <bt_att_connected+0xc>
   19d64:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19d68:	2317      	movs	r3, #23
   19d6a:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19d6c:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   19d6e:	1f20      	subs	r0, r4, #4
   19d70:	f00b fd06 	bl	25780 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   19d74:	f104 0054 	add.w	r0, r4, #84	; 0x54
   19d78:	4903      	ldr	r1, [pc, #12]	; (19d88 <bt_att_connected+0x40>)
   19d7a:	f007 fb53 	bl	21424 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   19d7e:	6820      	ldr	r0, [r4, #0]
}
   19d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   19d84:	f001 bebc 	b.w	1bb00 <bt_gatt_connected>
   19d88:	0001aa79 	.word	0x0001aa79

00019d8c <read_group_cb>:
{
   19d8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19d90:	4605      	mov	r5, r0
   19d92:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19d94:	f04f 0800 	mov.w	r8, #0
   19d98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19d9c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   19d9e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19da0:	f88d 8008 	strb.w	r8, [sp, #8]
   19da4:	a902      	add	r1, sp, #8
{
   19da6:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19da8:	f8ad 300a 	strh.w	r3, [sp, #10]
   19dac:	f00b f8e1 	bl	24f72 <bt_uuid_cmp>
   19db0:	b1a0      	cbz	r0, 19ddc <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19db2:	f642 0301 	movw	r3, #10241	; 0x2801
   19db6:	6828      	ldr	r0, [r5, #0]
   19db8:	f88d 800c 	strb.w	r8, [sp, #12]
   19dbc:	a903      	add	r1, sp, #12
   19dbe:	f8ad 300e 	strh.w	r3, [sp, #14]
   19dc2:	f00b f8d6 	bl	24f72 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19dc6:	b148      	cbz	r0, 19ddc <read_group_cb+0x50>
		if (data->group &&
   19dc8:	6923      	ldr	r3, [r4, #16]
   19dca:	b11b      	cbz	r3, 19dd4 <read_group_cb+0x48>
   19dcc:	885a      	ldrh	r2, [r3, #2]
   19dce:	42b2      	cmp	r2, r6
   19dd0:	d200      	bcs.n	19dd4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   19dd2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19dd4:	2001      	movs	r0, #1
}
   19dd6:	b004      	add	sp, #16
   19dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19ddc:	6861      	ldr	r1, [r4, #4]
   19dde:	6828      	ldr	r0, [r5, #0]
   19de0:	f00b f8c7 	bl	24f72 <bt_uuid_cmp>
   19de4:	b110      	cbz	r0, 19dec <read_group_cb+0x60>
		data->group = NULL;
   19de6:	2300      	movs	r3, #0
   19de8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   19dea:	e7f3      	b.n	19dd4 <read_group_cb+0x48>
	if (data->rsp->len &&
   19dec:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19dee:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   19df0:	781a      	ldrb	r2, [r3, #0]
   19df2:	b132      	cbz	r2, 19e02 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19df4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   19df6:	8a01      	ldrh	r1, [r0, #16]
   19df8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19dfa:	4293      	cmp	r3, r2
   19dfc:	da01      	bge.n	19e02 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   19dfe:	2000      	movs	r0, #0
   19e00:	e7e9      	b.n	19dd6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   19e02:	2104      	movs	r1, #4
   19e04:	300c      	adds	r0, #12
   19e06:	f002 fa41 	bl	1c28c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19e0a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19e0c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19e0e:	6923      	ldr	r3, [r4, #16]
   19e10:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19e12:	4b08      	ldr	r3, [pc, #32]	; (19e34 <read_group_cb+0xa8>)
   19e14:	9300      	str	r3, [sp, #0]
   19e16:	9401      	str	r4, [sp, #4]
   19e18:	68a2      	ldr	r2, [r4, #8]
   19e1a:	2300      	movs	r3, #0
   19e1c:	4629      	mov	r1, r5
   19e1e:	4638      	mov	r0, r7
   19e20:	f00b fd33 	bl	2588a <att_chan_read>
	if (read < 0) {
   19e24:	2800      	cmp	r0, #0
   19e26:	dbea      	blt.n	19dfe <read_group_cb+0x72>
	if (!data->group) {
   19e28:	6920      	ldr	r0, [r4, #16]
   19e2a:	3800      	subs	r0, #0
   19e2c:	bf18      	it	ne
   19e2e:	2001      	movne	r0, #1
   19e30:	e7d1      	b.n	19dd6 <read_group_cb+0x4a>
   19e32:	bf00      	nop
   19e34:	000257e7 	.word	0x000257e7

00019e38 <read_type_cb>:
{
   19e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   19e3c:	6817      	ldr	r7, [r2, #0]
{
   19e3e:	4605      	mov	r5, r0
   19e40:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19e42:	6800      	ldr	r0, [r0, #0]
   19e44:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   19e46:	687e      	ldr	r6, [r7, #4]
{
   19e48:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19e4a:	f00b f892 	bl	24f72 <bt_uuid_cmp>
   19e4e:	4681      	mov	r9, r0
   19e50:	2800      	cmp	r0, #0
   19e52:	d13c      	bne.n	19ece <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19e54:	4630      	mov	r0, r6
   19e56:	2295      	movs	r2, #149	; 0x95
   19e58:	4629      	mov	r1, r5
   19e5a:	f00c f9b5 	bl	261c8 <bt_gatt_check_perm>
   19e5e:	4606      	mov	r6, r0
   19e60:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   19e62:	b140      	cbz	r0, 19e76 <read_type_cb+0x3e>
		if (data->rsp->len) {
   19e64:	68e3      	ldr	r3, [r4, #12]
   19e66:	781b      	ldrb	r3, [r3, #0]
   19e68:	b10b      	cbz	r3, 19e6e <read_type_cb+0x36>
			data->err = 0x00;
   19e6a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   19e6e:	2000      	movs	r0, #0
}
   19e70:	b003      	add	sp, #12
   19e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19e76:	68a0      	ldr	r0, [r4, #8]
   19e78:	f002 f920 	bl	1c0bc <net_buf_frag_last>
   19e7c:	2102      	movs	r1, #2
   19e7e:	300c      	adds	r0, #12
   19e80:	f002 fa04 	bl	1c28c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19e84:	4b13      	ldr	r3, [pc, #76]	; (19ed4 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19e86:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   19e88:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19e8c:	9300      	str	r3, [sp, #0]
   19e8e:	9401      	str	r4, [sp, #4]
   19e90:	68a2      	ldr	r2, [r4, #8]
   19e92:	4633      	mov	r3, r6
   19e94:	4629      	mov	r1, r5
   19e96:	4638      	mov	r0, r7
   19e98:	f00b fcf7 	bl	2588a <att_chan_read>
	if (read < 0) {
   19e9c:	2800      	cmp	r0, #0
   19e9e:	da07      	bge.n	19eb0 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   19ea0:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19ea4:	bf26      	itte	cs
   19ea6:	4240      	negcs	r0, r0
   19ea8:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   19eaa:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   19eac:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   19eae:	e7de      	b.n	19e6e <read_type_cb+0x36>
	if (!data->item) {
   19eb0:	6923      	ldr	r3, [r4, #16]
   19eb2:	2b00      	cmp	r3, #0
   19eb4:	d0db      	beq.n	19e6e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19eb6:	68a0      	ldr	r0, [r4, #8]
   19eb8:	f00b fbb7 	bl	2562a <net_buf_frags_len>
   19ebc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   19ebe:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19ec0:	68e3      	ldr	r3, [r4, #12]
   19ec2:	781b      	ldrb	r3, [r3, #0]
   19ec4:	4298      	cmp	r0, r3
   19ec6:	bf94      	ite	ls
   19ec8:	2000      	movls	r0, #0
   19eca:	2001      	movhi	r0, #1
   19ecc:	e7d0      	b.n	19e70 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   19ece:	2001      	movs	r0, #1
   19ed0:	e7ce      	b.n	19e70 <read_type_cb+0x38>
   19ed2:	bf00      	nop
   19ed4:	0002563b 	.word	0x0002563b

00019ed8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19edc:	b082      	sub	sp, #8
   19ede:	af00      	add	r7, sp, #0
   19ee0:	4604      	mov	r4, r0
   19ee2:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19ee4:	483b      	ldr	r0, [pc, #236]	; (19fd4 <bt_att_accept+0xfc>)
   19ee6:	2200      	movs	r2, #0
   19ee8:	2300      	movs	r3, #0
   19eea:	4639      	mov	r1, r7
   19eec:	f006 f9fc 	bl	202e8 <k_mem_slab_alloc>
   19ef0:	4605      	mov	r5, r0
   19ef2:	b1a8      	cbz	r0, 19f20 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   19ef4:	466d      	mov	r5, sp
   19ef6:	b088      	sub	sp, #32
   19ef8:	466a      	mov	r2, sp
   19efa:	4b37      	ldr	r3, [pc, #220]	; (19fd8 <bt_att_accept+0x100>)
   19efc:	4837      	ldr	r0, [pc, #220]	; (19fdc <bt_att_accept+0x104>)
   19efe:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19f02:	2303      	movs	r3, #3
   19f04:	f842 3f10 	str.w	r3, [r2, #16]!
   19f08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19f0c:	f00b fc7b 	bl	25806 <z_log_msg_static_create.constprop.0>
   19f10:	46ad      	mov	sp, r5
		return -ENOMEM;
   19f12:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   19f16:	4628      	mov	r0, r5
   19f18:	3708      	adds	r7, #8
   19f1a:	46bd      	mov	sp, r7
   19f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   19f20:	f008 fd10 	bl	22944 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   19f24:	4b2e      	ldr	r3, [pc, #184]	; (19fe0 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   19f26:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   19f28:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   19f2a:	2230      	movs	r2, #48	; 0x30
   19f2c:	6838      	ldr	r0, [r7, #0]
   19f2e:	f00a fff5 	bl	24f1c <memset>
	att->conn = conn;
   19f32:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19f34:	482b      	ldr	r0, [pc, #172]	; (19fe4 <bt_att_accept+0x10c>)
	att->conn = conn;
   19f36:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   19f38:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19f3a:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   19f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   19f40:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19f44:	2200      	movs	r2, #0
   19f46:	2300      	movs	r3, #0
   19f48:	1d39      	adds	r1, r7, #4
   19f4a:	f006 f9cd 	bl	202e8 <k_mem_slab_alloc>
   19f4e:	4605      	mov	r5, r0
   19f50:	b180      	cbz	r0, 19f74 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   19f52:	6823      	ldr	r3, [r4, #0]
   19f54:	466c      	mov	r4, sp
   19f56:	b088      	sub	sp, #32
   19f58:	466a      	mov	r2, sp
   19f5a:	4923      	ldr	r1, [pc, #140]	; (19fe8 <bt_att_accept+0x110>)
   19f5c:	481f      	ldr	r0, [pc, #124]	; (19fdc <bt_att_accept+0x104>)
   19f5e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19f62:	2303      	movs	r3, #3
   19f64:	f842 3f10 	str.w	r3, [r2, #16]!
   19f68:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19f6c:	f00b fc4b 	bl	25806 <z_log_msg_static_create.constprop.0>
   19f70:	46a5      	mov	sp, r4
	if (!chan) {
   19f72:	e7ce      	b.n	19f12 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   19f74:	4601      	mov	r1, r0
   19f76:	2290      	movs	r2, #144	; 0x90
   19f78:	6878      	ldr	r0, [r7, #4]
   19f7a:	f00a ffcf 	bl	24f1c <memset>
	chan->chan.chan.ops = &ops;
   19f7e:	6878      	ldr	r0, [r7, #4]
   19f80:	4b1a      	ldr	r3, [pc, #104]	; (19fec <bt_att_accept+0x114>)
   19f82:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   19f84:	303c      	adds	r0, #60	; 0x3c
   19f86:	f00c fe98 	bl	26cba <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19f8a:	687b      	ldr	r3, [r7, #4]
   19f8c:	f3bf 8f5b 	dmb	ish
   19f90:	3334      	adds	r3, #52	; 0x34
   19f92:	e853 2f00 	ldrex	r2, [r3]
   19f96:	e843 5100 	strex	r1, r5, [r3]
   19f9a:	2900      	cmp	r1, #0
   19f9c:	d1f9      	bne.n	19f92 <bt_att_accept+0xba>
   19f9e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19fa2:	687b      	ldr	r3, [r7, #4]
   19fa4:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   19fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   19fa8:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   19fac:	b91b      	cbnz	r3, 19fb6 <bt_att_accept+0xde>
   19fae:	f104 000c 	add.w	r0, r4, #12
   19fb2:	f00c fe82 	bl	26cba <z_impl_k_queue_init>
	return list->head;
   19fb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   19fb8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   19fbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   19fbe:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   19fc2:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   19fc4:	b902      	cbnz	r2, 19fc8 <bt_att_accept+0xf0>
	list->tail = node;
   19fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   19fc8:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   19fca:	2b00      	cmp	r3, #0
   19fcc:	d0a1      	beq.n	19f12 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   19fce:	3304      	adds	r3, #4
   19fd0:	6033      	str	r3, [r6, #0]
	return 0;
   19fd2:	e7a0      	b.n	19f16 <bt_att_accept+0x3e>
   19fd4:	2000089c 	.word	0x2000089c
   19fd8:	0002a0ff 	.word	0x0002a0ff
   19fdc:	00027348 	.word	0x00027348
   19fe0:	20002e5c 	.word	0x20002e5c
   19fe4:	200008bc 	.word	0x200008bc
   19fe8:	0002a124 	.word	0x0002a124
   19fec:	2000066c 	.word	0x2000066c

00019ff0 <bt_att_chan_create_pdu>:
{
   19ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   19ff4:	b086      	sub	sp, #24
   19ff6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19ff8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19ffa:	1c53      	adds	r3, r2, #1
   19ffc:	428b      	cmp	r3, r1
{
   19ffe:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a000:	d915      	bls.n	1a02e <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1a002:	466c      	mov	r4, sp
   1a004:	b088      	sub	sp, #32
   1a006:	466a      	mov	r2, sp
   1a008:	482d      	ldr	r0, [pc, #180]	; (1a0c0 <bt_att_chan_create_pdu+0xd0>)
   1a00a:	61d3      	str	r3, [r2, #28]
   1a00c:	2304      	movs	r3, #4
   1a00e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1a012:	f842 3f10 	str.w	r3, [r2, #16]!
   1a016:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a01a:	482a      	ldr	r0, [pc, #168]	; (1a0c4 <bt_att_chan_create_pdu+0xd4>)
   1a01c:	f00b fbf3 	bl	25806 <z_log_msg_static_create.constprop.0>
   1a020:	46a5      	mov	sp, r4
		return NULL;
   1a022:	2400      	movs	r4, #0
}
   1a024:	4620      	mov	r0, r4
   1a026:	3718      	adds	r7, #24
   1a028:	46bd      	mov	sp, r7
   1a02a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1a02e:	4628      	mov	r0, r5
   1a030:	f7ff fc62 	bl	198f8 <att_op_get_type>
   1a034:	2802      	cmp	r0, #2
   1a036:	d019      	beq.n	1a06c <bt_att_chan_create_pdu+0x7c>
   1a038:	2804      	cmp	r0, #4
   1a03a:	d017      	beq.n	1a06c <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   1a03c:	f04f 38ff 	mov.w	r8, #4294967295
   1a040:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1a044:	2100      	movs	r1, #0
   1a046:	4642      	mov	r2, r8
   1a048:	464b      	mov	r3, r9
   1a04a:	4608      	mov	r0, r1
   1a04c:	f00b fabc 	bl	255c8 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a050:	4604      	mov	r4, r0
   1a052:	b980      	cbnz	r0, 1a076 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a054:	466c      	mov	r4, sp
   1a056:	b088      	sub	sp, #32
   1a058:	466a      	mov	r2, sp
   1a05a:	4b1b      	ldr	r3, [pc, #108]	; (1a0c8 <bt_att_chan_create_pdu+0xd8>)
   1a05c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a060:	2303      	movs	r3, #3
   1a062:	f842 3f10 	str.w	r3, [r2, #16]!
   1a066:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a06a:	e7d6      	b.n	1a01a <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1a06c:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1a070:	f04f 0900 	mov.w	r9, #0
   1a074:	e7e6      	b.n	1a044 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1a076:	f008 fc65 	bl	22944 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a07a:	4b14      	ldr	r3, [pc, #80]	; (1a0cc <bt_att_chan_create_pdu+0xdc>)
   1a07c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1a07e:	4814      	ldr	r0, [pc, #80]	; (1a0d0 <bt_att_chan_create_pdu+0xe0>)
   1a080:	bf07      	ittee	eq
   1a082:	2200      	moveq	r2, #0
   1a084:	2300      	moveq	r3, #0
   1a086:	4642      	movne	r2, r8
   1a088:	464b      	movne	r3, r9
   1a08a:	f006 fd6b 	bl	20b64 <z_impl_k_queue_get>
	if (!data) {
   1a08e:	b970      	cbnz	r0, 1a0ae <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   1a090:	4b10      	ldr	r3, [pc, #64]	; (1a0d4 <bt_att_chan_create_pdu+0xe4>)
   1a092:	617b      	str	r3, [r7, #20]
   1a094:	480b      	ldr	r0, [pc, #44]	; (1a0c4 <bt_att_chan_create_pdu+0xd4>)
   1a096:	2302      	movs	r3, #2
   1a098:	f107 0210 	add.w	r2, r7, #16
   1a09c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a0a0:	613b      	str	r3, [r7, #16]
   1a0a2:	f00b fbb0 	bl	25806 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a0a6:	4620      	mov	r0, r4
   1a0a8:	f001 ffac 	bl	1c004 <net_buf_unref>
		return NULL;
   1a0ac:	e7b9      	b.n	1a022 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1a0ae:	61a0      	str	r0, [r4, #24]
   1a0b0:	2101      	movs	r1, #1
   1a0b2:	f104 000c 	add.w	r0, r4, #12
   1a0b6:	f002 f8e9 	bl	1c28c <net_buf_simple_add>
	hdr->code = op;
   1a0ba:	7005      	strb	r5, [r0, #0]
	return buf;
   1a0bc:	e7b2      	b.n	1a024 <bt_att_chan_create_pdu+0x34>
   1a0be:	bf00      	nop
   1a0c0:	0002a149 	.word	0x0002a149
   1a0c4:	00027348 	.word	0x00027348
   1a0c8:	00029e42 	.word	0x00029e42
   1a0cc:	20002bf0 	.word	0x20002bf0
   1a0d0:	20000970 	.word	0x20000970
   1a0d4:	0002a16e 	.word	0x0002a16e

0001a0d8 <bt_att_recv>:
{
   1a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0dc:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1a0de:	8a0b      	ldrh	r3, [r1, #16]
{
   1a0e0:	af00      	add	r7, sp, #0
   1a0e2:	4682      	mov	sl, r0
   1a0e4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a0e6:	b97b      	cbnz	r3, 1a108 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1a0e8:	4b4c      	ldr	r3, [pc, #304]	; (1a21c <bt_att_recv+0x144>)
   1a0ea:	617b      	str	r3, [r7, #20]
   1a0ec:	2302      	movs	r3, #2
   1a0ee:	613b      	str	r3, [r7, #16]
   1a0f0:	f107 0210 	add.w	r2, r7, #16
   1a0f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   1a0f8:	4849      	ldr	r0, [pc, #292]	; (1a220 <bt_att_recv+0x148>)
   1a0fa:	f00b fb84 	bl	25806 <z_log_msg_static_create.constprop.0>
}
   1a0fe:	2000      	movs	r0, #0
   1a100:	371c      	adds	r7, #28
   1a102:	46bd      	mov	sp, r7
   1a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a108:	2101      	movs	r1, #1
   1a10a:	f104 000c 	add.w	r0, r4, #12
   1a10e:	f002 f89f 	bl	1c250 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1a112:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1a116:	4605      	mov	r5, r0
   1a118:	2b00      	cmp	r3, #0
   1a11a:	d0f0      	beq.n	1a0fe <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1a11c:	7801      	ldrb	r1, [r0, #0]
   1a11e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1a234 <bt_att_recv+0x15c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a122:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a126:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1a128:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1a12c:	4288      	cmp	r0, r1
   1a12e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1a132:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1a136:	d114      	bne.n	1a162 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1a138:	f892 9002 	ldrb.w	r9, [r2, #2]
   1a13c:	f1b9 0f01 	cmp.w	r9, #1
   1a140:	d131      	bne.n	1a1a6 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a142:	2100      	movs	r1, #0
   1a144:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1a148:	f00b fc54 	bl	259f4 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1a14c:	2800      	cmp	r0, #0
   1a14e:	d035      	beq.n	1a1bc <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   1a150:	4b34      	ldr	r3, [pc, #208]	; (1a224 <bt_att_recv+0x14c>)
   1a152:	617b      	str	r3, [r7, #20]
   1a154:	2302      	movs	r3, #2
   1a156:	613b      	str	r3, [r7, #16]
   1a158:	f107 0210 	add.w	r2, r7, #16
   1a15c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a160:	e7ca      	b.n	1a0f8 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a162:	3301      	adds	r3, #1
   1a164:	2b0e      	cmp	r3, #14
   1a166:	d1df      	bne.n	1a128 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1a168:	466c      	mov	r4, sp
   1a16a:	b088      	sub	sp, #32
   1a16c:	466a      	mov	r2, sp
   1a16e:	4b2e      	ldr	r3, [pc, #184]	; (1a228 <bt_att_recv+0x150>)
   1a170:	482b      	ldr	r0, [pc, #172]	; (1a220 <bt_att_recv+0x148>)
   1a172:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1a176:	2303      	movs	r3, #3
   1a178:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a17c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a180:	f00b fb41 	bl	25806 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1a184:	7829      	ldrb	r1, [r5, #0]
   1a186:	46a5      	mov	sp, r4
   1a188:	4608      	mov	r0, r1
   1a18a:	f7ff fbb5 	bl	198f8 <att_op_get_type>
   1a18e:	2800      	cmp	r0, #0
   1a190:	d0b5      	beq.n	1a0fe <bt_att_recv+0x26>
   1a192:	2805      	cmp	r0, #5
   1a194:	d0b3      	beq.n	1a0fe <bt_att_recv+0x26>
	if (!req) {
   1a196:	2900      	cmp	r1, #0
   1a198:	d0b1      	beq.n	1a0fe <bt_att_recv+0x26>
   1a19a:	2306      	movs	r3, #6
   1a19c:	2200      	movs	r2, #0
   1a19e:	4630      	mov	r0, r6
   1a1a0:	f00b fd7c 	bl	25c9c <send_err_rsp.part.0>
   1a1a4:	e7ab      	b.n	1a0fe <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1a1a6:	f1b9 0f05 	cmp.w	r9, #5
   1a1aa:	d107      	bne.n	1a1bc <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1a1ac:	2101      	movs	r1, #1
   1a1ae:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1a1b2:	f00b fc1f 	bl	259f4 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1a1b6:	b108      	cbz	r0, 1a1bc <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   1a1b8:	4b1c      	ldr	r3, [pc, #112]	; (1a22c <bt_att_recv+0x154>)
   1a1ba:	e7ca      	b.n	1a152 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1a1bc:	44d8      	add	r8, fp
   1a1be:	8a23      	ldrh	r3, [r4, #16]
   1a1c0:	f898 2001 	ldrb.w	r2, [r8, #1]
   1a1c4:	429a      	cmp	r2, r3
   1a1c6:	d916      	bls.n	1a1f6 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a1c8:	46e9      	mov	r9, sp
   1a1ca:	b088      	sub	sp, #32
   1a1cc:	7829      	ldrb	r1, [r5, #0]
   1a1ce:	466a      	mov	r2, sp
   1a1d0:	4817      	ldr	r0, [pc, #92]	; (1a230 <bt_att_recv+0x158>)
   1a1d2:	61d1      	str	r1, [r2, #28]
   1a1d4:	2404      	movs	r4, #4
   1a1d6:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1a1da:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a1de:	f842 4f10 	str.w	r4, [r2, #16]!
   1a1e2:	480f      	ldr	r0, [pc, #60]	; (1a220 <bt_att_recv+0x148>)
   1a1e4:	f00b fb0f 	bl	25806 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1a1e8:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a1ec:	2b01      	cmp	r3, #1
   1a1ee:	46cd      	mov	sp, r9
   1a1f0:	d185      	bne.n	1a0fe <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1a1f2:	4623      	mov	r3, r4
   1a1f4:	e00c      	b.n	1a210 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1a1f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a1fa:	4621      	mov	r1, r4
   1a1fc:	4630      	mov	r0, r6
   1a1fe:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1a200:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1a204:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1a206:	f47f af7a 	bne.w	1a0fe <bt_att_recv+0x26>
   1a20a:	2800      	cmp	r0, #0
   1a20c:	f43f af77 	beq.w	1a0fe <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1a210:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1a212:	2900      	cmp	r1, #0
   1a214:	f43f af73 	beq.w	1a0fe <bt_att_recv+0x26>
   1a218:	e7c0      	b.n	1a19c <bt_att_recv+0xc4>
   1a21a:	bf00      	nop
   1a21c:	0002a18d 	.word	0x0002a18d
   1a220:	00027348 	.word	0x00027348
   1a224:	0002a1c2 	.word	0x0002a1c2
   1a228:	0002a1a8 	.word	0x0002a1a8
   1a22c:	0002a1de 	.word	0x0002a1de
   1a230:	0002a1fd 	.word	0x0002a1fd
   1a234:	000277ac 	.word	0x000277ac

0001a238 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a23a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a23c:	6803      	ldr	r3, [r0, #0]
   1a23e:	460d      	mov	r5, r1
   1a240:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a242:	b087      	sub	sp, #28
   1a244:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a246:	bf18      	it	ne
   1a248:	2101      	movne	r1, #1
   1a24a:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a24c:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a24e:	f00b ffd7 	bl	26200 <bt_gatt_change_aware>
   1a252:	b948      	cbnz	r0, 1a268 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a254:	2105      	movs	r1, #5
   1a256:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a25a:	f00b fbcb 	bl	259f4 <atomic_test_and_set_bit>
   1a25e:	2800      	cmp	r0, #0
   1a260:	d048      	beq.n	1a2f4 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1a262:	2000      	movs	r0, #0
}
   1a264:	b007      	add	sp, #28
   1a266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1a268:	2e00      	cmp	r6, #0
   1a26a:	d045      	beq.n	1a2f8 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1a26c:	2218      	movs	r2, #24
   1a26e:	2100      	movs	r1, #0
   1a270:	4668      	mov	r0, sp
   1a272:	f00a fe53 	bl	24f1c <memset>
	if (rsp) {
   1a276:	bb67      	cbnz	r7, 1a2d2 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1a278:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a27a:	4a20      	ldr	r2, [pc, #128]	; (1a2fc <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1a27c:	681b      	ldr	r3, [r3, #0]
   1a27e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1a280:	2300      	movs	r3, #0
   1a282:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1a286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a288:	9303      	str	r3, [sp, #12]
	data.len = len;
   1a28a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1a28e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a292:	2301      	movs	r3, #1
   1a294:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a298:	4631      	mov	r1, r6
   1a29a:	466b      	mov	r3, sp
   1a29c:	4630      	mov	r0, r6
	data.req = req;
   1a29e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a2a2:	f00b fa16 	bl	256d2 <bt_gatt_foreach_attr>
	if (data.err) {
   1a2a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a2aa:	b1e3      	cbz	r3, 1a2e6 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1a2ac:	2f00      	cmp	r7, #0
   1a2ae:	d0d8      	beq.n	1a262 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a2b0:	9b01      	ldr	r3, [sp, #4]
   1a2b2:	6998      	ldr	r0, [r3, #24]
   1a2b4:	f7ff fb66 	bl	19984 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a2b8:	9801      	ldr	r0, [sp, #4]
   1a2ba:	f001 fea3 	bl	1c004 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1a2be:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1a2c2:	2d00      	cmp	r5, #0
   1a2c4:	d0cd      	beq.n	1a262 <att_write_rsp.constprop.0+0x2a>
   1a2c6:	4632      	mov	r2, r6
   1a2c8:	4629      	mov	r1, r5
   1a2ca:	4620      	mov	r0, r4
   1a2cc:	f00b fce6 	bl	25c9c <send_err_rsp.part.0>
   1a2d0:	e7c7      	b.n	1a262 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1a2d2:	2200      	movs	r2, #0
   1a2d4:	4639      	mov	r1, r7
   1a2d6:	4620      	mov	r0, r4
   1a2d8:	f7ff fe8a 	bl	19ff0 <bt_att_chan_create_pdu>
   1a2dc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1a2de:	2800      	cmp	r0, #0
   1a2e0:	d1ca      	bne.n	1a278 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1a2e2:	200e      	movs	r0, #14
   1a2e4:	e7be      	b.n	1a264 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1a2e6:	9901      	ldr	r1, [sp, #4]
   1a2e8:	2900      	cmp	r1, #0
   1a2ea:	d0ba      	beq.n	1a262 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1a2ec:	4620      	mov	r0, r4
   1a2ee:	f00b fabe 	bl	2586e <bt_att_chan_send_rsp>
   1a2f2:	e7b6      	b.n	1a262 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a2f4:	2012      	movs	r0, #18
   1a2f6:	e7b5      	b.n	1a264 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a2f8:	2001      	movs	r0, #1
   1a2fa:	e7b3      	b.n	1a264 <att_write_rsp.constprop.0+0x2c>
   1a2fc:	00025671 	.word	0x00025671

0001a300 <bt_att_create_pdu>:
{
   1a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a302:	af00      	add	r7, sp, #0
   1a304:	460e      	mov	r6, r1
   1a306:	4615      	mov	r5, r2
	att = att_get(conn);
   1a308:	f7ff fcea 	bl	19ce0 <att_get>
	if (!att) {
   1a30c:	b1e0      	cbz	r0, 1a348 <bt_att_create_pdu+0x48>
	return list->head;
   1a30e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a310:	4618      	mov	r0, r3
   1a312:	b11b      	cbz	r3, 1a31c <bt_att_create_pdu+0x1c>
	return node->next;
   1a314:	f850 3988 	ldr.w	r3, [r0], #-136
   1a318:	b103      	cbz	r3, 1a31c <bt_att_create_pdu+0x1c>
   1a31a:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a31c:	1c6c      	adds	r4, r5, #1
   1a31e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a320:	b118      	cbz	r0, 1a32a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a322:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a324:	42a1      	cmp	r1, r4
   1a326:	d21a      	bcs.n	1a35e <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a328:	b983      	cbnz	r3, 1a34c <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1a32a:	466d      	mov	r5, sp
   1a32c:	b088      	sub	sp, #32
   1a32e:	466a      	mov	r2, sp
   1a330:	4b0f      	ldr	r3, [pc, #60]	; (1a370 <bt_att_create_pdu+0x70>)
   1a332:	4810      	ldr	r0, [pc, #64]	; (1a374 <bt_att_create_pdu+0x74>)
   1a334:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a338:	2303      	movs	r3, #3
   1a33a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a33e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a342:	f00b fa60 	bl	25806 <z_log_msg_static_create.constprop.0>
   1a346:	46ad      	mov	sp, r5
		return NULL;
   1a348:	2000      	movs	r0, #0
   1a34a:	e00c      	b.n	1a366 <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a34c:	4618      	mov	r0, r3
   1a34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1a352:	b153      	cbz	r3, 1a36a <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a354:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a356:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a358:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a35c:	d8f6      	bhi.n	1a34c <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1a35e:	462a      	mov	r2, r5
   1a360:	4631      	mov	r1, r6
   1a362:	f7ff fe45 	bl	19ff0 <bt_att_chan_create_pdu>
}
   1a366:	46bd      	mov	sp, r7
   1a368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a36a:	4614      	mov	r4, r2
   1a36c:	e7d9      	b.n	1a322 <bt_att_create_pdu+0x22>
   1a36e:	bf00      	nop
   1a370:	0002a21c 	.word	0x0002a21c
   1a374:	00027348 	.word	0x00027348

0001a378 <att_read_group_req>:
{
   1a378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a37c:	8a0e      	ldrh	r6, [r1, #16]
   1a37e:	3e04      	subs	r6, #4
   1a380:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1a382:	2e02      	cmp	r6, #2
{
   1a384:	4604      	mov	r4, r0
   1a386:	b08c      	sub	sp, #48	; 0x30
   1a388:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a38a:	d001      	beq.n	1a390 <att_read_group_req+0x18>
   1a38c:	2e10      	cmp	r6, #16
   1a38e:	d16a      	bne.n	1a466 <att_read_group_req+0xee>
   1a390:	2104      	movs	r1, #4
   1a392:	300c      	adds	r0, #12
   1a394:	f001 ff5c 	bl	1c250 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a398:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a39c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a39e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a3a0:	1d01      	adds	r1, r0, #4
   1a3a2:	4632      	mov	r2, r6
   1a3a4:	4640      	mov	r0, r8
   1a3a6:	f00a fe12 	bl	24fce <bt_uuid_create>
   1a3aa:	2800      	cmp	r0, #0
   1a3ac:	d05d      	beq.n	1a46a <att_read_group_req+0xf2>
	if (!start || !end) {
   1a3ae:	2d00      	cmp	r5, #0
   1a3b0:	d03a      	beq.n	1a428 <att_read_group_req+0xb0>
   1a3b2:	2600      	movs	r6, #0
   1a3b4:	2f00      	cmp	r7, #0
   1a3b6:	d036      	beq.n	1a426 <att_read_group_req+0xae>
	if (start > end) {
   1a3b8:	42bd      	cmp	r5, r7
   1a3ba:	d835      	bhi.n	1a428 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a3bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a3c0:	a901      	add	r1, sp, #4
   1a3c2:	4640      	mov	r0, r8
   1a3c4:	f88d 6004 	strb.w	r6, [sp, #4]
   1a3c8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a3cc:	f00a fdd1 	bl	24f72 <bt_uuid_cmp>
   1a3d0:	bb70      	cbnz	r0, 1a430 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a3d2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a3d4:	2214      	movs	r2, #20
   1a3d6:	2100      	movs	r1, #0
   1a3d8:	a807      	add	r0, sp, #28
   1a3da:	f00a fd9f 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1a3de:	2201      	movs	r2, #1
   1a3e0:	2111      	movs	r1, #17
   1a3e2:	4630      	mov	r0, r6
   1a3e4:	f7ff ff8c 	bl	1a300 <bt_att_create_pdu>
   1a3e8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1a3ea:	2800      	cmp	r0, #0
   1a3ec:	d03d      	beq.n	1a46a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1a3ee:	2101      	movs	r1, #1
   1a3f0:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a3f2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1a3f6:	f001 ff49 	bl	1c28c <net_buf_simple_add>
	data.rsp->len = 0U;
   1a3fa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a3fc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a3fe:	4a1c      	ldr	r2, [pc, #112]	; (1a470 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1a400:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a402:	4639      	mov	r1, r7
	data.group = NULL;
   1a404:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a406:	4628      	mov	r0, r5
   1a408:	ab07      	add	r3, sp, #28
   1a40a:	f00b f962 	bl	256d2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1a40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a410:	781b      	ldrb	r3, [r3, #0]
   1a412:	bb1b      	cbnz	r3, 1a45c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a416:	6998      	ldr	r0, [r3, #24]
   1a418:	f7ff fab4 	bl	19984 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a41c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a41e:	f001 fdf1 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a422:	230a      	movs	r3, #10
   1a424:	e001      	b.n	1a42a <att_read_group_req+0xb2>
			*err = 0U;
   1a426:	463d      	mov	r5, r7
	if (!req) {
   1a428:	2301      	movs	r3, #1
   1a42a:	462a      	mov	r2, r5
   1a42c:	2110      	movs	r1, #16
   1a42e:	e00e      	b.n	1a44e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1a430:	f642 0301 	movw	r3, #10241	; 0x2801
   1a434:	a907      	add	r1, sp, #28
   1a436:	4640      	mov	r0, r8
   1a438:	f88d 601c 	strb.w	r6, [sp, #28]
   1a43c:	f8ad 301e 	strh.w	r3, [sp, #30]
   1a440:	f00a fd97 	bl	24f72 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a444:	2800      	cmp	r0, #0
   1a446:	d0c4      	beq.n	1a3d2 <att_read_group_req+0x5a>
	if (!req) {
   1a448:	2310      	movs	r3, #16
   1a44a:	462a      	mov	r2, r5
   1a44c:	4619      	mov	r1, r3
   1a44e:	4620      	mov	r0, r4
   1a450:	f00b fc24 	bl	25c9c <send_err_rsp.part.0>
		return 0;
   1a454:	2000      	movs	r0, #0
}
   1a456:	b00c      	add	sp, #48	; 0x30
   1a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1a45c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a45e:	4620      	mov	r0, r4
   1a460:	f00b fa05 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a464:	e7f6      	b.n	1a454 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1a466:	2004      	movs	r0, #4
   1a468:	e7f5      	b.n	1a456 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1a46a:	200e      	movs	r0, #14
   1a46c:	e7f3      	b.n	1a456 <att_read_group_req+0xde>
   1a46e:	bf00      	nop
   1a470:	00019d8d 	.word	0x00019d8d

0001a474 <att_read_mult_vl_req>:
{
   1a474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a478:	6846      	ldr	r6, [r0, #4]
{
   1a47a:	b085      	sub	sp, #20
   1a47c:	4604      	mov	r4, r0
   1a47e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a480:	4630      	mov	r0, r6
   1a482:	2101      	movs	r1, #1
   1a484:	f00b febc 	bl	26200 <bt_gatt_change_aware>
   1a488:	b950      	cbnz	r0, 1a4a0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a48a:	2105      	movs	r1, #5
   1a48c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a490:	f00b fab0 	bl	259f4 <atomic_test_and_set_bit>
   1a494:	2800      	cmp	r0, #0
   1a496:	d13b      	bne.n	1a510 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a498:	2012      	movs	r0, #18
}
   1a49a:	b005      	add	sp, #20
   1a49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a4a0:	2210      	movs	r2, #16
   1a4a2:	2100      	movs	r1, #0
   1a4a4:	4668      	mov	r0, sp
   1a4a6:	f00a fd39 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1a4aa:	2200      	movs	r2, #0
   1a4ac:	2121      	movs	r1, #33	; 0x21
   1a4ae:	4630      	mov	r0, r6
   1a4b0:	f7ff ff26 	bl	1a300 <bt_att_create_pdu>
   1a4b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a4b6:	b368      	cbz	r0, 1a514 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a4b8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a518 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1a4bc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1a4be:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a4c2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a4c6:	8a2b      	ldrh	r3, [r5, #16]
   1a4c8:	2b01      	cmp	r3, #1
   1a4ca:	d804      	bhi.n	1a4d6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a4cc:	9902      	ldr	r1, [sp, #8]
   1a4ce:	4620      	mov	r0, r4
   1a4d0:	f00b f9cd 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a4d4:	e01c      	b.n	1a510 <att_read_mult_vl_req+0x9c>
   1a4d6:	4638      	mov	r0, r7
   1a4d8:	f00b ff0a 	bl	262f0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a4dc:	466b      	mov	r3, sp
   1a4de:	464a      	mov	r2, r9
   1a4e0:	4601      	mov	r1, r0
   1a4e2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a4e4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a4e8:	f00b f8f3 	bl	256d2 <bt_gatt_foreach_attr>
		if (data.err) {
   1a4ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a4f0:	2b00      	cmp	r3, #0
   1a4f2:	d0e8      	beq.n	1a4c6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a4f4:	9b02      	ldr	r3, [sp, #8]
   1a4f6:	6998      	ldr	r0, [r3, #24]
   1a4f8:	f7ff fa44 	bl	19984 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a4fc:	9802      	ldr	r0, [sp, #8]
   1a4fe:	f001 fd81 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a502:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a506:	4632      	mov	r2, r6
   1a508:	2120      	movs	r1, #32
   1a50a:	4620      	mov	r0, r4
   1a50c:	f00b fbc6 	bl	25c9c <send_err_rsp.part.0>
			return 0;
   1a510:	2000      	movs	r0, #0
   1a512:	e7c2      	b.n	1a49a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a514:	200e      	movs	r0, #14
   1a516:	e7c0      	b.n	1a49a <att_read_mult_vl_req+0x26>
   1a518:	00025a65 	.word	0x00025a65

0001a51c <att_read_mult_req>:
{
   1a51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a520:	6846      	ldr	r6, [r0, #4]
{
   1a522:	b085      	sub	sp, #20
   1a524:	4604      	mov	r4, r0
   1a526:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a528:	4630      	mov	r0, r6
   1a52a:	2101      	movs	r1, #1
   1a52c:	f00b fe68 	bl	26200 <bt_gatt_change_aware>
   1a530:	b950      	cbnz	r0, 1a548 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a532:	2105      	movs	r1, #5
   1a534:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a538:	f00b fa5c 	bl	259f4 <atomic_test_and_set_bit>
   1a53c:	2800      	cmp	r0, #0
   1a53e:	d13b      	bne.n	1a5b8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a540:	2012      	movs	r0, #18
}
   1a542:	b005      	add	sp, #20
   1a544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a548:	2210      	movs	r2, #16
   1a54a:	2100      	movs	r1, #0
   1a54c:	4668      	mov	r0, sp
   1a54e:	f00a fce5 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1a552:	2200      	movs	r2, #0
   1a554:	210f      	movs	r1, #15
   1a556:	4630      	mov	r0, r6
   1a558:	f7ff fed2 	bl	1a300 <bt_att_create_pdu>
   1a55c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a55e:	b368      	cbz	r0, 1a5bc <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a560:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a5c0 <att_read_mult_req+0xa4>
	data.chan = chan;
   1a564:	9400      	str	r4, [sp, #0]
   1a566:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a56a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a56e:	8a2b      	ldrh	r3, [r5, #16]
   1a570:	2b01      	cmp	r3, #1
   1a572:	d804      	bhi.n	1a57e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a574:	9902      	ldr	r1, [sp, #8]
   1a576:	4620      	mov	r0, r4
   1a578:	f00b f979 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a57c:	e01c      	b.n	1a5b8 <att_read_mult_req+0x9c>
   1a57e:	4638      	mov	r0, r7
   1a580:	f00b feb6 	bl	262f0 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a584:	466b      	mov	r3, sp
   1a586:	464a      	mov	r2, r9
   1a588:	4601      	mov	r1, r0
   1a58a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a58c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a590:	f00b f89f 	bl	256d2 <bt_gatt_foreach_attr>
		if (data.err) {
   1a594:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a598:	2b00      	cmp	r3, #0
   1a59a:	d0e8      	beq.n	1a56e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a59c:	9b02      	ldr	r3, [sp, #8]
   1a59e:	6998      	ldr	r0, [r3, #24]
   1a5a0:	f7ff f9f0 	bl	19984 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a5a4:	9802      	ldr	r0, [sp, #8]
   1a5a6:	f001 fd2d 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a5aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a5ae:	4632      	mov	r2, r6
   1a5b0:	210e      	movs	r1, #14
   1a5b2:	4620      	mov	r0, r4
   1a5b4:	f00b fb72 	bl	25c9c <send_err_rsp.part.0>
			return 0;
   1a5b8:	2000      	movs	r0, #0
   1a5ba:	e7c2      	b.n	1a542 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a5bc:	200e      	movs	r0, #14
   1a5be:	e7c0      	b.n	1a542 <att_read_mult_req+0x26>
   1a5c0:	00025a1f 	.word	0x00025a1f

0001a5c4 <att_read_rsp>:
{
   1a5c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a5c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1a5cc:	4604      	mov	r4, r0
   1a5ce:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a5d0:	4640      	mov	r0, r8
   1a5d2:	2101      	movs	r1, #1
{
   1a5d4:	4617      	mov	r7, r2
   1a5d6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1a5d8:	f00b fe12 	bl	26200 <bt_gatt_change_aware>
   1a5dc:	b948      	cbnz	r0, 1a5f2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a5de:	2105      	movs	r1, #5
   1a5e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a5e4:	f00b fa06 	bl	259f4 <atomic_test_and_set_bit>
   1a5e8:	bb78      	cbnz	r0, 1a64a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a5ea:	2012      	movs	r0, #18
}
   1a5ec:	b004      	add	sp, #16
   1a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1a5f2:	b38d      	cbz	r5, 1a658 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1a5f4:	2210      	movs	r2, #16
   1a5f6:	2100      	movs	r1, #0
   1a5f8:	4668      	mov	r0, sp
   1a5fa:	f00a fc8f 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1a5fe:	2200      	movs	r2, #0
   1a600:	4639      	mov	r1, r7
   1a602:	4640      	mov	r0, r8
   1a604:	f7ff fe7c 	bl	1a300 <bt_att_create_pdu>
   1a608:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a60a:	b338      	cbz	r0, 1a65c <att_read_rsp+0x98>
	data.offset = offset;
   1a60c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a610:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a614:	2301      	movs	r3, #1
   1a616:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a61a:	4a11      	ldr	r2, [pc, #68]	; (1a660 <att_read_rsp+0x9c>)
	data.chan = chan;
   1a61c:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a61e:	466b      	mov	r3, sp
   1a620:	4629      	mov	r1, r5
   1a622:	4628      	mov	r0, r5
   1a624:	f00b f855 	bl	256d2 <bt_gatt_foreach_attr>
	if (data.err) {
   1a628:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a62c:	b17b      	cbz	r3, 1a64e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a62e:	9b02      	ldr	r3, [sp, #8]
   1a630:	6998      	ldr	r0, [r3, #24]
   1a632:	f7ff f9a7 	bl	19984 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a636:	9802      	ldr	r0, [sp, #8]
   1a638:	f001 fce4 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a63c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a640:	462a      	mov	r2, r5
   1a642:	4631      	mov	r1, r6
   1a644:	4620      	mov	r0, r4
   1a646:	f00b fb29 	bl	25c9c <send_err_rsp.part.0>
			return 0;
   1a64a:	2000      	movs	r0, #0
   1a64c:	e7ce      	b.n	1a5ec <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1a64e:	9902      	ldr	r1, [sp, #8]
   1a650:	4620      	mov	r0, r4
   1a652:	f00b f90c 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a656:	e7f8      	b.n	1a64a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a658:	2001      	movs	r0, #1
   1a65a:	e7c7      	b.n	1a5ec <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1a65c:	200e      	movs	r0, #14
   1a65e:	e7c5      	b.n	1a5ec <att_read_rsp+0x28>
   1a660:	00025a1f 	.word	0x00025a1f

0001a664 <att_read_type_req>:
{
   1a664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a668:	8a0d      	ldrh	r5, [r1, #16]
   1a66a:	3d04      	subs	r5, #4
   1a66c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1a66e:	2d02      	cmp	r5, #2
{
   1a670:	4604      	mov	r4, r0
   1a672:	b08c      	sub	sp, #48	; 0x30
   1a674:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a676:	d001      	beq.n	1a67c <att_read_type_req+0x18>
   1a678:	2d10      	cmp	r5, #16
   1a67a:	d150      	bne.n	1a71e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a67c:	2104      	movs	r1, #4
   1a67e:	300c      	adds	r0, #12
   1a680:	f001 fde6 	bl	1c250 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a684:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a688:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a68a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a68c:	1d01      	adds	r1, r0, #4
   1a68e:	462a      	mov	r2, r5
   1a690:	4640      	mov	r0, r8
   1a692:	f00a fc9c 	bl	24fce <bt_uuid_create>
   1a696:	b188      	cbz	r0, 1a6bc <att_read_type_req+0x58>
	if (!start || !end) {
   1a698:	b19e      	cbz	r6, 1a6c2 <att_read_type_req+0x5e>
   1a69a:	b18f      	cbz	r7, 1a6c0 <att_read_type_req+0x5c>
	if (start > end) {
   1a69c:	42b7      	cmp	r7, r6
   1a69e:	d310      	bcc.n	1a6c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1a6a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1a6a2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a6a4:	2100      	movs	r1, #0
   1a6a6:	eb0d 0002 	add.w	r0, sp, r2
   1a6aa:	f00a fc37 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1a6ae:	2201      	movs	r2, #1
   1a6b0:	2109      	movs	r1, #9
   1a6b2:	4628      	mov	r0, r5
   1a6b4:	f7ff fe24 	bl	1a300 <bt_att_create_pdu>
   1a6b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1a6ba:	b960      	cbnz	r0, 1a6d6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1a6bc:	200e      	movs	r0, #14
   1a6be:	e007      	b.n	1a6d0 <att_read_type_req+0x6c>
			*err = 0U;
   1a6c0:	463e      	mov	r6, r7
	if (!req) {
   1a6c2:	2301      	movs	r3, #1
   1a6c4:	4632      	mov	r2, r6
   1a6c6:	2108      	movs	r1, #8
   1a6c8:	4620      	mov	r0, r4
   1a6ca:	f00b fae7 	bl	25c9c <send_err_rsp.part.0>
		return 0;
   1a6ce:	2000      	movs	r0, #0
}
   1a6d0:	b00c      	add	sp, #48	; 0x30
   1a6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1a6d6:	2101      	movs	r1, #1
   1a6d8:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a6da:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1a6de:	f001 fdd5 	bl	1c28c <net_buf_simple_add>
	data.rsp->len = 0U;
   1a6e2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a6e4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1a6e6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a6e8:	230a      	movs	r3, #10
   1a6ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1a6ee:	4a0d      	ldr	r2, [pc, #52]	; (1a724 <att_read_type_req+0xc0>)
   1a6f0:	ab06      	add	r3, sp, #24
   1a6f2:	4639      	mov	r1, r7
   1a6f4:	4630      	mov	r0, r6
   1a6f6:	f00a ffec 	bl	256d2 <bt_gatt_foreach_attr>
	if (data.err) {
   1a6fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a6fe:	b14b      	cbz	r3, 1a714 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a700:	9b08      	ldr	r3, [sp, #32]
   1a702:	6998      	ldr	r0, [r3, #24]
   1a704:	f7ff f93e 	bl	19984 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a708:	9808      	ldr	r0, [sp, #32]
   1a70a:	f001 fc7b 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a70e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a712:	e7d7      	b.n	1a6c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1a714:	9908      	ldr	r1, [sp, #32]
   1a716:	4620      	mov	r0, r4
   1a718:	f00b f8a9 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a71c:	e7d7      	b.n	1a6ce <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1a71e:	2004      	movs	r0, #4
   1a720:	e7d6      	b.n	1a6d0 <att_read_type_req+0x6c>
   1a722:	bf00      	nop
   1a724:	00019e39 	.word	0x00019e39

0001a728 <att_find_type_req>:
{
   1a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a72c:	460f      	mov	r7, r1
   1a72e:	b086      	sub	sp, #24
   1a730:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1a732:	2106      	movs	r1, #6
   1a734:	f107 000c 	add.w	r0, r7, #12
   1a738:	f001 fd8a 	bl	1c250 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a73c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a73e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1a742:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1a744:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1a748:	b1c5      	cbz	r5, 1a77c <att_find_type_req+0x54>
   1a74a:	2300      	movs	r3, #0
   1a74c:	f1b8 0f00 	cmp.w	r8, #0
   1a750:	d013      	beq.n	1a77a <att_find_type_req+0x52>
	if (start > end) {
   1a752:	4545      	cmp	r5, r8
   1a754:	d812      	bhi.n	1a77c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1a756:	f88d 3000 	strb.w	r3, [sp]
   1a75a:	f88d 3004 	strb.w	r3, [sp, #4]
   1a75e:	a901      	add	r1, sp, #4
   1a760:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a764:	4668      	mov	r0, sp
   1a766:	f8ad 2002 	strh.w	r2, [sp, #2]
   1a76a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a76e:	f00a fc00 	bl	24f72 <bt_uuid_cmp>
   1a772:	4606      	mov	r6, r0
   1a774:	b160      	cbz	r0, 1a790 <att_find_type_req+0x68>
	if (!req) {
   1a776:	230a      	movs	r3, #10
   1a778:	e001      	b.n	1a77e <att_find_type_req+0x56>
			*err = 0U;
   1a77a:	4645      	mov	r5, r8
	if (!req) {
   1a77c:	2301      	movs	r3, #1
   1a77e:	462a      	mov	r2, r5
   1a780:	2106      	movs	r1, #6
   1a782:	4620      	mov	r0, r4
   1a784:	f00b fa8a 	bl	25c9c <send_err_rsp.part.0>
		return 0;
   1a788:	2000      	movs	r0, #0
}
   1a78a:	b006      	add	sp, #24
   1a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a790:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a794:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1a796:	4601      	mov	r1, r0
   1a798:	2214      	movs	r2, #20
   1a79a:	a801      	add	r0, sp, #4
   1a79c:	f00a fbbe 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1a7a0:	4632      	mov	r2, r6
   1a7a2:	2107      	movs	r1, #7
   1a7a4:	4650      	mov	r0, sl
   1a7a6:	f7ff fdab 	bl	1a300 <bt_att_create_pdu>
   1a7aa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a7ac:	b1f8      	cbz	r0, 1a7ee <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a7ae:	230a      	movs	r3, #10
   1a7b0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a7b4:	4a0f      	ldr	r2, [pc, #60]	; (1a7f4 <att_find_type_req+0xcc>)
	data.chan = chan;
   1a7b6:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a7b8:	ab01      	add	r3, sp, #4
   1a7ba:	4641      	mov	r1, r8
   1a7bc:	4628      	mov	r0, r5
	data.value = value;
   1a7be:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1a7c2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a7c6:	f00a ff84 	bl	256d2 <bt_gatt_foreach_attr>
	if (data.err) {
   1a7ca:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a7ce:	b14b      	cbz	r3, 1a7e4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a7d0:	9b02      	ldr	r3, [sp, #8]
   1a7d2:	6998      	ldr	r0, [r3, #24]
   1a7d4:	f7ff f8d6 	bl	19984 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a7d8:	9802      	ldr	r0, [sp, #8]
   1a7da:	f001 fc13 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a7de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a7e2:	e7cc      	b.n	1a77e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1a7e4:	9902      	ldr	r1, [sp, #8]
   1a7e6:	4620      	mov	r0, r4
   1a7e8:	f00b f841 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a7ec:	e7cc      	b.n	1a788 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1a7ee:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a7f0:	e7cb      	b.n	1a78a <att_find_type_req+0x62>
   1a7f2:	bf00      	nop
   1a7f4:	000199c5 	.word	0x000199c5

0001a7f8 <att_find_info_req>:
{
   1a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1a7fa:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a7fc:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a7fe:	885e      	ldrh	r6, [r3, #2]
{
   1a800:	b085      	sub	sp, #20
   1a802:	4604      	mov	r4, r0
	if (!start || !end) {
   1a804:	b195      	cbz	r5, 1a82c <att_find_info_req+0x34>
   1a806:	b186      	cbz	r6, 1a82a <att_find_info_req+0x32>
	if (start > end) {
   1a808:	42b5      	cmp	r5, r6
   1a80a:	d80f      	bhi.n	1a82c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a80c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1a80e:	2210      	movs	r2, #16
   1a810:	2100      	movs	r1, #0
   1a812:	4668      	mov	r0, sp
   1a814:	f00a fb82 	bl	24f1c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1a818:	2200      	movs	r2, #0
   1a81a:	2105      	movs	r1, #5
   1a81c:	4638      	mov	r0, r7
   1a81e:	f7ff fd6f 	bl	1a300 <bt_att_create_pdu>
   1a822:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1a824:	b958      	cbnz	r0, 1a83e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1a826:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1a828:	e007      	b.n	1a83a <att_find_info_req+0x42>
			*err = 0U;
   1a82a:	4635      	mov	r5, r6
	if (!req) {
   1a82c:	2301      	movs	r3, #1
   1a82e:	462a      	mov	r2, r5
   1a830:	2104      	movs	r1, #4
   1a832:	4620      	mov	r0, r4
   1a834:	f00b fa32 	bl	25c9c <send_err_rsp.part.0>
		return 0;
   1a838:	2000      	movs	r0, #0
}
   1a83a:	b005      	add	sp, #20
   1a83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a83e:	466b      	mov	r3, sp
   1a840:	4a0a      	ldr	r2, [pc, #40]	; (1a86c <att_find_info_req+0x74>)
	data.chan = chan;
   1a842:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a844:	4631      	mov	r1, r6
   1a846:	4628      	mov	r0, r5
   1a848:	f00a ff43 	bl	256d2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1a84c:	9b02      	ldr	r3, [sp, #8]
   1a84e:	b943      	cbnz	r3, 1a862 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a850:	9b01      	ldr	r3, [sp, #4]
   1a852:	6998      	ldr	r0, [r3, #24]
   1a854:	f7ff f896 	bl	19984 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a858:	9801      	ldr	r0, [sp, #4]
   1a85a:	f001 fbd3 	bl	1c004 <net_buf_unref>
	if (!req) {
   1a85e:	230a      	movs	r3, #10
   1a860:	e7e5      	b.n	1a82e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1a862:	9901      	ldr	r1, [sp, #4]
   1a864:	4620      	mov	r0, r4
   1a866:	f00b f802 	bl	2586e <bt_att_chan_send_rsp>
	return 0;
   1a86a:	e7e5      	b.n	1a838 <att_find_info_req+0x40>
   1a86c:	000256e9 	.word	0x000256e9

0001a870 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1a870:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a872:	4c0b      	ldr	r4, [pc, #44]	; (1a8a0 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1a874:	4d0b      	ldr	r5, [pc, #44]	; (1a8a4 <bt_att_init+0x34>)
   1a876:	4620      	mov	r0, r4
   1a878:	f00c fa1f 	bl	26cba <z_impl_k_queue_init>
   1a87c:	4629      	mov	r1, r5
   1a87e:	4620      	mov	r0, r4
   1a880:	f00c fa28 	bl	26cd4 <k_queue_append>
   1a884:	f105 0114 	add.w	r1, r5, #20
   1a888:	4620      	mov	r0, r4
   1a88a:	f00c fa23 	bl	26cd4 <k_queue_append>
   1a88e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a892:	4620      	mov	r0, r4
   1a894:	f00c fa1e 	bl	26cd4 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1a898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1a89c:	f000 bbb6 	b.w	1b00c <bt_gatt_init>
   1a8a0:	20000970 	.word	0x20000970
   1a8a4:	20002e20 	.word	0x20002e20

0001a8a8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1a8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1a8aa:	2300      	movs	r3, #0
{
   1a8ac:	4605      	mov	r5, r0
   1a8ae:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1a8b0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1a8b2:	f008 f847 	bl	22944 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1a8b6:	4b0b      	ldr	r3, [pc, #44]	; (1a8e4 <bt_att_req_alloc+0x3c>)
   1a8b8:	681b      	ldr	r3, [r3, #0]
   1a8ba:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1a8bc:	bf04      	itt	eq
   1a8be:	2500      	moveq	r5, #0
   1a8c0:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1a8c2:	a901      	add	r1, sp, #4
   1a8c4:	4808      	ldr	r0, [pc, #32]	; (1a8e8 <bt_att_req_alloc+0x40>)
   1a8c6:	462a      	mov	r2, r5
   1a8c8:	4623      	mov	r3, r4
   1a8ca:	f005 fd0d 	bl	202e8 <k_mem_slab_alloc>
   1a8ce:	4601      	mov	r1, r0
   1a8d0:	b930      	cbnz	r0, 1a8e0 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1a8d2:	9801      	ldr	r0, [sp, #4]
   1a8d4:	2210      	movs	r2, #16
   1a8d6:	f00a fb21 	bl	24f1c <memset>

	return req;
   1a8da:	9801      	ldr	r0, [sp, #4]
}
   1a8dc:	b003      	add	sp, #12
   1a8de:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1a8e0:	2000      	movs	r0, #0
   1a8e2:	e7fb      	b.n	1a8dc <bt_att_req_alloc+0x34>
   1a8e4:	20002e5c 	.word	0x20002e5c
   1a8e8:	200008dc 	.word	0x200008dc

0001a8ec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1a8ec:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1a8ee:	6883      	ldr	r3, [r0, #8]
{
   1a8f0:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1a8f2:	b14b      	cbz	r3, 1a908 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1a8f4:	6998      	ldr	r0, [r3, #24]
   1a8f6:	f7ff f845 	bl	19984 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1a8fa:	9b01      	ldr	r3, [sp, #4]
   1a8fc:	6898      	ldr	r0, [r3, #8]
   1a8fe:	f001 fb81 	bl	1c004 <net_buf_unref>
		req->buf = NULL;
   1a902:	9b01      	ldr	r3, [sp, #4]
   1a904:	2200      	movs	r2, #0
   1a906:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1a908:	4803      	ldr	r0, [pc, #12]	; (1a918 <bt_att_req_free+0x2c>)
   1a90a:	a901      	add	r1, sp, #4
   1a90c:	f005 fd56 	bl	203bc <k_mem_slab_free>
}
   1a910:	b003      	add	sp, #12
   1a912:	f85d fb04 	ldr.w	pc, [sp], #4
   1a916:	bf00      	nop
   1a918:	200008dc 	.word	0x200008dc

0001a91c <att_handle_rsp>:
{
   1a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a920:	4604      	mov	r4, r0
   1a922:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1a924:	3058      	adds	r0, #88	; 0x58
{
   1a926:	460e      	mov	r6, r1
   1a928:	4617      	mov	r7, r2
   1a92a:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1a92c:	f006 fe9c 	bl	21668 <k_work_cancel_delayable>
	if (!chan->req) {
   1a930:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a932:	b980      	cbnz	r0, 1a956 <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   1a934:	4b19      	ldr	r3, [pc, #100]	; (1a99c <att_handle_rsp+0x80>)
   1a936:	9307      	str	r3, [sp, #28]
   1a938:	4819      	ldr	r0, [pc, #100]	; (1a9a0 <att_handle_rsp+0x84>)
   1a93a:	2302      	movs	r3, #2
   1a93c:	aa06      	add	r2, sp, #24
   1a93e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a942:	9306      	str	r3, [sp, #24]
   1a944:	f00a ff5f 	bl	25806 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1a948:	6820      	ldr	r0, [r4, #0]
   1a94a:	f00b f8ec 	bl	25b26 <att_req_send_process>
}
   1a94e:	2000      	movs	r0, #0
   1a950:	b008      	add	sp, #32
   1a952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1a956:	4b13      	ldr	r3, [pc, #76]	; (1a9a4 <att_handle_rsp+0x88>)
   1a958:	4298      	cmp	r0, r3
   1a95a:	f04f 0800 	mov.w	r8, #0
   1a95e:	d102      	bne.n	1a966 <att_handle_rsp+0x4a>
		chan->req = NULL;
   1a960:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   1a964:	e7f0      	b.n	1a948 <att_handle_rsp+0x2c>
	func = chan->req->func;
   1a966:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1a96a:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1a96e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a970:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1a974:	f7ff ffba 	bl	1a8ec <bt_att_req_free>
	att_req_send_process(chan->att);
   1a978:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1a97a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1a97e:	f00b f8d2 	bl	25b26 <att_req_send_process>
	if (func) {
   1a982:	f1b9 0f00 	cmp.w	r9, #0
   1a986:	d0e2      	beq.n	1a94e <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1a988:	6820      	ldr	r0, [r4, #0]
   1a98a:	f8cd a000 	str.w	sl, [sp]
   1a98e:	6800      	ldr	r0, [r0, #0]
   1a990:	463b      	mov	r3, r7
   1a992:	4632      	mov	r2, r6
   1a994:	4629      	mov	r1, r5
   1a996:	47c8      	blx	r9
   1a998:	e7d9      	b.n	1a94e <att_handle_rsp+0x32>
   1a99a:	bf00      	nop
   1a99c:	0002a237 	.word	0x0002a237
   1a9a0:	00027348 	.word	0x00027348
   1a9a4:	20002e60 	.word	0x20002e60

0001a9a8 <bt_att_disconnected>:
{
   1a9a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1a9ac:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1a9b0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1a9b2:	2e00      	cmp	r6, #0
   1a9b4:	d05a      	beq.n	1aa6c <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1a9b6:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1a9ba:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1a9be:	f00a ffef 	bl	259a0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1a9c2:	1f27      	subs	r7, r4, #4
   1a9c4:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1a9c8:	2200      	movs	r2, #0
   1a9ca:	2300      	movs	r3, #0
   1a9cc:	4640      	mov	r0, r8
   1a9ce:	f00b fc8d 	bl	262ec <net_buf_get>
   1a9d2:	4605      	mov	r5, r0
   1a9d4:	bb48      	cbnz	r0, 1aa2a <bt_att_disconnected+0x82>
	if (chan->req) {
   1a9d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a9d8:	b12b      	cbz	r3, 1a9e6 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1a9da:	4602      	mov	r2, r0
   1a9dc:	4601      	mov	r1, r0
   1a9de:	230e      	movs	r3, #14
   1a9e0:	4638      	mov	r0, r7
   1a9e2:	f7ff ff9b 	bl	1a91c <att_handle_rsp>
	chan->att = NULL;
   1a9e6:	2300      	movs	r3, #0
   1a9e8:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1a9ec:	2102      	movs	r1, #2
   1a9ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a9f2:	f00a ffee 	bl	259d2 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1a9f6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	d137      	bne.n	1aa6c <bt_att_disconnected+0xc4>
	att_reset(att);
   1a9fc:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1a9fe:	9803      	ldr	r0, [sp, #12]
   1aa00:	2200      	movs	r2, #0
   1aa02:	2300      	movs	r3, #0
   1aa04:	300c      	adds	r0, #12
   1aa06:	f00b fc71 	bl	262ec <net_buf_get>
   1aa0a:	4605      	mov	r5, r0
   1aa0c:	b9a0      	cbnz	r0, 1aa38 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1aa0e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1aa10:	6845      	ldr	r5, [r0, #4]
   1aa12:	b9c5      	cbnz	r5, 1aa46 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1aa14:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1aa16:	a903      	add	r1, sp, #12
   1aa18:	4816      	ldr	r0, [pc, #88]	; (1aa74 <bt_att_disconnected+0xcc>)
   1aa1a:	f005 fccf 	bl	203bc <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1aa1e:	6820      	ldr	r0, [r4, #0]
}
   1aa20:	b004      	add	sp, #16
   1aa22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1aa26:	f001 b88f 	b.w	1bb48 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1aa2a:	69a8      	ldr	r0, [r5, #24]
   1aa2c:	f7fe ffaa 	bl	19984 <tx_meta_data_free>
		net_buf_unref(buf);
   1aa30:	4628      	mov	r0, r5
   1aa32:	f001 fae7 	bl	1c004 <net_buf_unref>
   1aa36:	e7c7      	b.n	1a9c8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1aa38:	69a8      	ldr	r0, [r5, #24]
   1aa3a:	f7fe ffa3 	bl	19984 <tx_meta_data_free>
		net_buf_unref(buf);
   1aa3e:	4628      	mov	r0, r5
   1aa40:	f001 fae0 	bl	1c004 <net_buf_unref>
   1aa44:	e7db      	b.n	1a9fe <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aa46:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1aa48:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1aa4a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aa4c:	4295      	cmp	r5, r2
	list->tail = node;
   1aa4e:	bf08      	it	eq
   1aa50:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1aa52:	686e      	ldr	r6, [r5, #4]
   1aa54:	b136      	cbz	r6, 1aa64 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1aa56:	68eb      	ldr	r3, [r5, #12]
   1aa58:	9300      	str	r3, [sp, #0]
   1aa5a:	2300      	movs	r3, #0
   1aa5c:	6800      	ldr	r0, [r0, #0]
   1aa5e:	461a      	mov	r2, r3
   1aa60:	210e      	movs	r1, #14
   1aa62:	47b0      	blx	r6
		bt_att_req_free(req);
   1aa64:	4628      	mov	r0, r5
   1aa66:	f7ff ff41 	bl	1a8ec <bt_att_req_free>
   1aa6a:	e7d0      	b.n	1aa0e <bt_att_disconnected+0x66>
}
   1aa6c:	b004      	add	sp, #16
   1aa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aa72:	bf00      	nop
   1aa74:	2000089c 	.word	0x2000089c

0001aa78 <att_timeout>:
{
   1aa78:	b510      	push	{r4, lr}
   1aa7a:	4604      	mov	r4, r0
   1aa7c:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1aa7e:	4b08      	ldr	r3, [pc, #32]	; (1aaa0 <att_timeout+0x28>)
   1aa80:	9305      	str	r3, [sp, #20]
   1aa82:	4808      	ldr	r0, [pc, #32]	; (1aaa4 <att_timeout+0x2c>)
   1aa84:	2302      	movs	r3, #2
   1aa86:	aa04      	add	r2, sp, #16
   1aa88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1aa8c:	9304      	str	r3, [sp, #16]
   1aa8e:	f00a feba 	bl	25806 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1aa92:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   1aa96:	b006      	add	sp, #24
   1aa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1aa9c:	f7ff bf84 	b.w	1a9a8 <bt_att_disconnected>
   1aaa0:	0002a24e 	.word	0x0002a24e
   1aaa4:	00027348 	.word	0x00027348

0001aaa8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aaaa:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1aaac:	b958      	cbnz	r0, 1aac6 <bt_att_send+0x1e>
   1aaae:	4929      	ldr	r1, [pc, #164]	; (1ab54 <bt_att_send+0xac>)
   1aab0:	4a29      	ldr	r2, [pc, #164]	; (1ab58 <bt_att_send+0xb0>)
   1aab2:	482a      	ldr	r0, [pc, #168]	; (1ab5c <bt_att_send+0xb4>)
   1aab4:	f640 63ba 	movw	r3, #3770	; 0xeba
   1aab8:	f009 fe18 	bl	246ec <assert_print>
   1aabc:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(buf);
   1aac0:	4825      	ldr	r0, [pc, #148]	; (1ab58 <bt_att_send+0xb0>)
   1aac2:	f009 fe0c 	bl	246de <assert_post_action>
   1aac6:	b949      	cbnz	r1, 1aadc <bt_att_send+0x34>
   1aac8:	4925      	ldr	r1, [pc, #148]	; (1ab60 <bt_att_send+0xb8>)
   1aaca:	4a23      	ldr	r2, [pc, #140]	; (1ab58 <bt_att_send+0xb0>)
   1aacc:	4823      	ldr	r0, [pc, #140]	; (1ab5c <bt_att_send+0xb4>)
   1aace:	f640 63bb 	movw	r3, #3771	; 0xebb
   1aad2:	f009 fe0b 	bl	246ec <assert_print>
   1aad6:	f640 61bb 	movw	r1, #3771	; 0xebb
   1aada:	e7f1      	b.n	1aac0 <bt_att_send+0x18>

	att = att_get(conn);
   1aadc:	f7ff f900 	bl	19ce0 <att_get>
	if (!att) {
   1aae0:	4605      	mov	r5, r0
   1aae2:	b940      	cbnz	r0, 1aaf6 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1aae4:	69a0      	ldr	r0, [r4, #24]
   1aae6:	f7fe ff4d 	bl	19984 <tx_meta_data_free>
		net_buf_unref(buf);
   1aaea:	4620      	mov	r0, r4
   1aaec:	f001 fa8a 	bl	1c004 <net_buf_unref>
		return -ENOTCONN;
   1aaf0:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1aaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1aaf6:	f100 060c 	add.w	r6, r0, #12
   1aafa:	4621      	mov	r1, r4
   1aafc:	4630      	mov	r0, r6
   1aafe:	f001 fa5b 	bl	1bfb8 <net_buf_put>
	return list->head;
   1ab02:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ab04:	b14d      	cbz	r5, 1ab1a <bt_att_send+0x72>
	return node->next;
   1ab06:	f855 4988 	ldr.w	r4, [r5], #-136
   1ab0a:	b104      	cbz	r4, 1ab0e <bt_att_send+0x66>
   1ab0c:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1ab0e:	4631      	mov	r1, r6
   1ab10:	4628      	mov	r0, r5
   1ab12:	f00a fe93 	bl	2583c <process_queue>
		if (!err) {
   1ab16:	4603      	mov	r3, r0
   1ab18:	b980      	cbnz	r0, 1ab3c <bt_att_send+0x94>
	return 0;
   1ab1a:	2000      	movs	r0, #0
   1ab1c:	e7ea      	b.n	1aaf4 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1ab1e:	2103      	movs	r1, #3
   1ab20:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1ab24:	f00a fd9b 	bl	2565e <atomic_test_bit>
   1ab28:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1ab2a:	f105 0034 	add.w	r0, r5, #52	; 0x34
   1ab2e:	f00a fd96 	bl	2565e <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1ab32:	4287      	cmp	r7, r0
   1ab34:	f06f 0301 	mvn.w	r3, #1
   1ab38:	d107      	bne.n	1ab4a <bt_att_send+0xa2>
   1ab3a:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ab3c:	2c00      	cmp	r4, #0
   1ab3e:	d0ec      	beq.n	1ab1a <bt_att_send+0x72>
   1ab40:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1ab44:	b922      	cbnz	r2, 1ab50 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   1ab46:	3302      	adds	r3, #2
   1ab48:	d0e9      	beq.n	1ab1e <bt_att_send+0x76>
{
   1ab4a:	4625      	mov	r5, r4
   1ab4c:	4614      	mov	r4, r2
   1ab4e:	e7de      	b.n	1ab0e <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ab50:	3a88      	subs	r2, #136	; 0x88
   1ab52:	e7f8      	b.n	1ab46 <bt_att_send+0x9e>
   1ab54:	00029e3d 	.word	0x00029e3d
   1ab58:	00029fe6 	.word	0x00029fe6
   1ab5c:	00027f8a 	.word	0x00027f8a
   1ab60:	0002a58c 	.word	0x0002a58c

0001ab64 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1ab64:	b510      	push	{r4, lr}
   1ab66:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1ab68:	b958      	cbnz	r0, 1ab82 <bt_att_req_send+0x1e>
   1ab6a:	4915      	ldr	r1, [pc, #84]	; (1abc0 <bt_att_req_send+0x5c>)
   1ab6c:	4a15      	ldr	r2, [pc, #84]	; (1abc4 <bt_att_req_send+0x60>)
   1ab6e:	4816      	ldr	r0, [pc, #88]	; (1abc8 <bt_att_req_send+0x64>)
   1ab70:	f44f 636d 	mov.w	r3, #3792	; 0xed0
   1ab74:	f009 fdba 	bl	246ec <assert_print>
   1ab78:	f44f 616d 	mov.w	r1, #3792	; 0xed0
	__ASSERT_NO_MSG(req);
   1ab7c:	4811      	ldr	r0, [pc, #68]	; (1abc4 <bt_att_req_send+0x60>)
   1ab7e:	f009 fdae 	bl	246de <assert_post_action>
   1ab82:	b949      	cbnz	r1, 1ab98 <bt_att_req_send+0x34>
   1ab84:	4911      	ldr	r1, [pc, #68]	; (1abcc <bt_att_req_send+0x68>)
   1ab86:	4a0f      	ldr	r2, [pc, #60]	; (1abc4 <bt_att_req_send+0x60>)
   1ab88:	480f      	ldr	r0, [pc, #60]	; (1abc8 <bt_att_req_send+0x64>)
   1ab8a:	f640 63d1 	movw	r3, #3793	; 0xed1
   1ab8e:	f009 fdad 	bl	246ec <assert_print>
   1ab92:	f640 61d1 	movw	r1, #3793	; 0xed1
   1ab96:	e7f1      	b.n	1ab7c <bt_att_req_send+0x18>

	att = att_get(conn);
   1ab98:	f7ff f8a2 	bl	19ce0 <att_get>
	if (!att) {
   1ab9c:	b160      	cbz	r0, 1abb8 <bt_att_req_send+0x54>
	parent->next = child;
   1ab9e:	2300      	movs	r3, #0
   1aba0:	6023      	str	r3, [r4, #0]
	return list->tail;
   1aba2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1aba4:	b92b      	cbnz	r3, 1abb2 <bt_att_req_send+0x4e>
	list->head = node;
   1aba6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1abaa:	f00a ffbc 	bl	25b26 <att_req_send_process>

	return 0;
   1abae:	2000      	movs	r0, #0
}
   1abb0:	bd10      	pop	{r4, pc}
	parent->next = child;
   1abb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1abb4:	6084      	str	r4, [r0, #8]
}
   1abb6:	e7f8      	b.n	1abaa <bt_att_req_send+0x46>
		return -ENOTCONN;
   1abb8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1abbc:	e7f8      	b.n	1abb0 <bt_att_req_send+0x4c>
   1abbe:	bf00      	nop
   1abc0:	00029e3d 	.word	0x00029e3d
   1abc4:	00029fe6 	.word	0x00029fe6
   1abc8:	00027f8a 	.word	0x00027f8a
   1abcc:	0002a0d2 	.word	0x0002a0d2

0001abd0 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1abd0:	b570      	push	{r4, r5, r6, lr}
   1abd2:	4d14      	ldr	r5, [pc, #80]	; (1ac24 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1abd4:	4606      	mov	r6, r0
   1abd6:	b140      	cbz	r0, 1abea <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1abd8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1abdc:	462a      	mov	r2, r5
   1abde:	1e6c      	subs	r4, r5, #1
   1abe0:	f00a fc5b 	bl	2549a <bt_conn_is_peer_addr_le>
   1abe4:	b198      	cbz	r0, 1ac0e <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1abe6:	4620      	mov	r0, r4
   1abe8:	e00c      	b.n	1ac04 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1abea:	490f      	ldr	r1, [pc, #60]	; (1ac28 <find_cf_cfg+0x58>)
   1abec:	4628      	mov	r0, r5
   1abee:	f00b f982 	bl	25ef6 <bt_addr_le_eq>
   1abf2:	b940      	cbnz	r0, 1ac06 <find_cf_cfg+0x36>
   1abf4:	490c      	ldr	r1, [pc, #48]	; (1ac28 <find_cf_cfg+0x58>)
   1abf6:	f105 0010 	add.w	r0, r5, #16
   1abfa:	f00b f97c 	bl	25ef6 <bt_addr_le_eq>
   1abfe:	b120      	cbz	r0, 1ac0a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ac00:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1ac04:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ac06:	1e68      	subs	r0, r5, #1
   1ac08:	e7fc      	b.n	1ac04 <find_cf_cfg+0x34>
	return NULL;
   1ac0a:	2000      	movs	r0, #0
   1ac0c:	e7fa      	b.n	1ac04 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ac0e:	7c21      	ldrb	r1, [r4, #16]
   1ac10:	f104 0211 	add.w	r2, r4, #17
   1ac14:	4630      	mov	r0, r6
   1ac16:	f00a fc40 	bl	2549a <bt_conn_is_peer_addr_le>
   1ac1a:	2800      	cmp	r0, #0
   1ac1c:	d0f5      	beq.n	1ac0a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ac1e:	f104 0010 	add.w	r0, r4, #16
   1ac22:	e7ef      	b.n	1ac04 <find_cf_cfg+0x34>
   1ac24:	20002e89 	.word	0x20002e89
   1ac28:	00029059 	.word	0x00029059

0001ac2c <find_sc_cfg>:
{
   1ac2c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1ac2e:	4c0e      	ldr	r4, [pc, #56]	; (1ac68 <find_sc_cfg+0x3c>)
   1ac30:	7823      	ldrb	r3, [r4, #0]
   1ac32:	4283      	cmp	r3, r0
{
   1ac34:	4605      	mov	r5, r0
   1ac36:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1ac38:	d00c      	beq.n	1ac54 <find_sc_cfg+0x28>
   1ac3a:	7b23      	ldrb	r3, [r4, #12]
   1ac3c:	42ab      	cmp	r3, r5
   1ac3e:	d110      	bne.n	1ac62 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1ac40:	480a      	ldr	r0, [pc, #40]	; (1ac6c <find_sc_cfg+0x40>)
   1ac42:	4631      	mov	r1, r6
   1ac44:	f00b f957 	bl	25ef6 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1ac48:	b158      	cbz	r0, 1ac62 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ac4a:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1ac4c:	220c      	movs	r2, #12
   1ac4e:	fb02 4003 	mla	r0, r2, r3, r4
   1ac52:	e007      	b.n	1ac64 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1ac54:	1c60      	adds	r0, r4, #1
   1ac56:	f00b f94e 	bl	25ef6 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1ac5a:	2800      	cmp	r0, #0
   1ac5c:	d0ed      	beq.n	1ac3a <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ac5e:	2300      	movs	r3, #0
   1ac60:	e7f4      	b.n	1ac4c <find_sc_cfg+0x20>
	return NULL;
   1ac62:	2000      	movs	r0, #0
}
   1ac64:	bd70      	pop	{r4, r5, r6, pc}
   1ac66:	bf00      	nop
   1ac68:	2000310a 	.word	0x2000310a
   1ac6c:	20003117 	.word	0x20003117

0001ac70 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1ac70:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1ac72:	1c4a      	adds	r2, r1, #1
{
   1ac74:	460c      	mov	r4, r1
		if (conn) {
   1ac76:	4605      	mov	r5, r0
   1ac78:	b968      	cbnz	r0, 1ac96 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ac7a:	490e      	ldr	r1, [pc, #56]	; (1acb4 <find_ccc_cfg+0x44>)
   1ac7c:	4610      	mov	r0, r2
   1ac7e:	f00b f93a 	bl	25ef6 <bt_addr_le_eq>
   1ac82:	b930      	cbnz	r0, 1ac92 <find_ccc_cfg+0x22>
   1ac84:	490b      	ldr	r1, [pc, #44]	; (1acb4 <find_ccc_cfg+0x44>)
   1ac86:	f104 000b 	add.w	r0, r4, #11
   1ac8a:	f00b f934 	bl	25ef6 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ac8e:	b170      	cbz	r0, 1acae <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ac90:	340a      	adds	r4, #10
   1ac92:	4620      	mov	r0, r4
   1ac94:	e00c      	b.n	1acb0 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ac96:	7809      	ldrb	r1, [r1, #0]
   1ac98:	f00a fbff 	bl	2549a <bt_conn_is_peer_addr_le>
   1ac9c:	2800      	cmp	r0, #0
   1ac9e:	d1f8      	bne.n	1ac92 <find_ccc_cfg+0x22>
   1aca0:	7aa1      	ldrb	r1, [r4, #10]
   1aca2:	f104 020b 	add.w	r2, r4, #11
   1aca6:	4628      	mov	r0, r5
   1aca8:	f00a fbf7 	bl	2549a <bt_conn_is_peer_addr_le>
   1acac:	e7ef      	b.n	1ac8e <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1acae:	2000      	movs	r0, #0
}
   1acb0:	bd38      	pop	{r3, r4, r5, pc}
   1acb2:	bf00      	nop
   1acb4:	00029059 	.word	0x00029059

0001acb8 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1acb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1acbc:	b087      	sub	sp, #28
   1acbe:	461e      	mov	r6, r3
   1acc0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1acc4:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1acc8:	4681      	mov	r9, r0
   1acca:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1accc:	2b00      	cmp	r3, #0
   1acce:	d14b      	bne.n	1ad68 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1acd0:	1e73      	subs	r3, r6, #1
   1acd2:	2b01      	cmp	r3, #1
   1acd4:	d84b      	bhi.n	1ad6e <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1acd6:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1acd8:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1acda:	7815      	ldrb	r5, [r2, #0]
   1acdc:	bf18      	it	ne
   1acde:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1ace0:	f7ff ffc6 	bl	1ac70 <find_ccc_cfg>
	if (!cfg) {
   1ace4:	4604      	mov	r4, r0
   1ace6:	b9f0      	cbnz	r0, 1ad26 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1ace8:	b91d      	cbnz	r5, 1acf2 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1acea:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1acec:	b007      	add	sp, #28
   1acee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1acf2:	4641      	mov	r1, r8
   1acf4:	f7ff ffbc 	bl	1ac70 <find_ccc_cfg>
		if (!cfg) {
   1acf8:	4604      	mov	r4, r0
   1acfa:	b960      	cbnz	r0, 1ad16 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1acfc:	4b1d      	ldr	r3, [pc, #116]	; (1ad74 <bt_gatt_attr_write_ccc+0xbc>)
   1acfe:	481e      	ldr	r0, [pc, #120]	; (1ad78 <bt_gatt_attr_write_ccc+0xc0>)
   1ad00:	9305      	str	r3, [sp, #20]
   1ad02:	aa04      	add	r2, sp, #16
   1ad04:	2302      	movs	r3, #2
   1ad06:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ad0a:	9304      	str	r3, [sp, #16]
   1ad0c:	f00b f913 	bl	25f36 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ad10:	f06f 0010 	mvn.w	r0, #16
   1ad14:	e7ea      	b.n	1acec <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ad16:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1ad1a:	3001      	adds	r0, #1
   1ad1c:	f00b f908 	bl	25f30 <bt_addr_le_copy>
		cfg->id = conn->id;
   1ad20:	f899 3008 	ldrb.w	r3, [r9, #8]
   1ad24:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1ad26:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1ad2a:	b98b      	cbnz	r3, 1ad50 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   1ad2c:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1ad2e:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   1ad32:	42ab      	cmp	r3, r5
   1ad34:	d003      	beq.n	1ad3e <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   1ad36:	4641      	mov	r1, r8
   1ad38:	4638      	mov	r0, r7
   1ad3a:	f00b f864 	bl	25e06 <gatt_ccc_changed>
	if (!value) {
   1ad3e:	2d00      	cmp	r5, #0
   1ad40:	d1d3      	bne.n	1acea <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ad42:	490e      	ldr	r1, [pc, #56]	; (1ad7c <bt_gatt_attr_write_ccc+0xc4>)
   1ad44:	1c60      	adds	r0, r4, #1
   1ad46:	f00b f8f3 	bl	25f30 <bt_addr_le_copy>
	cfg->id = 0U;
   1ad4a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1ad4c:	8125      	strh	r5, [r4, #8]
}
   1ad4e:	e7cc      	b.n	1acea <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1ad50:	462a      	mov	r2, r5
   1ad52:	4639      	mov	r1, r7
   1ad54:	4648      	mov	r0, r9
   1ad56:	4798      	blx	r3
		if (write < 0) {
   1ad58:	2800      	cmp	r0, #0
   1ad5a:	dbc7      	blt.n	1acec <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1ad5c:	3801      	subs	r0, #1
   1ad5e:	2801      	cmp	r0, #1
   1ad60:	d9e4      	bls.n	1ad2c <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1ad62:	f06f 000d 	mvn.w	r0, #13
   1ad66:	e7c1      	b.n	1acec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ad68:	f06f 0006 	mvn.w	r0, #6
   1ad6c:	e7be      	b.n	1acec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ad6e:	f06f 000c 	mvn.w	r0, #12
   1ad72:	e7bb      	b.n	1acec <bt_gatt_attr_write_ccc+0x34>
   1ad74:	0002a261 	.word	0x0002a261
   1ad78:	00027360 	.word	0x00027360
   1ad7c:	00029059 	.word	0x00029059

0001ad80 <clear_cf_cfg>:
{
   1ad80:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ad82:	490c      	ldr	r1, [pc, #48]	; (1adb4 <clear_cf_cfg+0x34>)
{
   1ad84:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ad86:	3001      	adds	r0, #1
   1ad88:	f00b f8d2 	bl	25f30 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ad8c:	f104 0008 	add.w	r0, r4, #8
   1ad90:	2201      	movs	r2, #1
   1ad92:	2100      	movs	r1, #0
   1ad94:	f00a f8c2 	bl	24f1c <memset>
   1ad98:	f3bf 8f5b 	dmb	ish
   1ad9c:	340c      	adds	r4, #12
   1ad9e:	2300      	movs	r3, #0
   1ada0:	e854 2f00 	ldrex	r2, [r4]
   1ada4:	e844 3100 	strex	r1, r3, [r4]
   1ada8:	2900      	cmp	r1, #0
   1adaa:	d1f9      	bne.n	1ada0 <clear_cf_cfg+0x20>
   1adac:	f3bf 8f5b 	dmb	ish
}
   1adb0:	bd10      	pop	{r4, pc}
   1adb2:	bf00      	nop
   1adb4:	00029059 	.word	0x00029059

0001adb8 <sc_save>:
{
   1adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adbc:	b086      	sub	sp, #24
   1adbe:	4680      	mov	r8, r0
   1adc0:	460f      	mov	r7, r1
   1adc2:	4616      	mov	r6, r2
   1adc4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1adc6:	f7ff ff31 	bl	1ac2c <find_sc_cfg>
	if (!cfg) {
   1adca:	4604      	mov	r4, r0
   1adcc:	b9b0      	cbnz	r0, 1adfc <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1adce:	4912      	ldr	r1, [pc, #72]	; (1ae18 <sc_save+0x60>)
   1add0:	f7ff ff2c 	bl	1ac2c <find_sc_cfg>
		if (!cfg) {
   1add4:	4604      	mov	r4, r0
   1add6:	b960      	cbnz	r0, 1adf2 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1add8:	4b10      	ldr	r3, [pc, #64]	; (1ae1c <sc_save+0x64>)
   1adda:	9305      	str	r3, [sp, #20]
   1addc:	4810      	ldr	r0, [pc, #64]	; (1ae20 <sc_save+0x68>)
   1adde:	2302      	movs	r3, #2
   1ade0:	aa04      	add	r2, sp, #16
   1ade2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ade6:	9304      	str	r3, [sp, #16]
   1ade8:	f00b f8a5 	bl	25f36 <z_log_msg_static_create.constprop.0>
}
   1adec:	b006      	add	sp, #24
   1adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1adf2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1adf6:	4639      	mov	r1, r7
   1adf8:	f00b f89a 	bl	25f30 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1adfc:	8922      	ldrh	r2, [r4, #8]
   1adfe:	8963      	ldrh	r3, [r4, #10]
   1ae00:	b91a      	cbnz	r2, 1ae0a <sc_save+0x52>
   1ae02:	b92b      	cbnz	r3, 1ae10 <sc_save+0x58>
		cfg->data.start = start;
   1ae04:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1ae06:	8165      	strh	r5, [r4, #10]
   1ae08:	e7f0      	b.n	1adec <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1ae0a:	4296      	cmp	r6, r2
		*start = new_start;
   1ae0c:	bf38      	it	cc
   1ae0e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1ae10:	429d      	cmp	r5, r3
   1ae12:	d9eb      	bls.n	1adec <sc_save+0x34>
   1ae14:	e7f7      	b.n	1ae06 <sc_save+0x4e>
   1ae16:	bf00      	nop
   1ae18:	00029059 	.word	0x00029059
   1ae1c:	0002a27b 	.word	0x0002a27b
   1ae20:	00027360 	.word	0x00027360

0001ae24 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1ae24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ae28:	4b28      	ldr	r3, [pc, #160]	; (1aecc <disconnected_cb+0xa8>)
{
   1ae2a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ae2c:	6882      	ldr	r2, [r0, #8]
   1ae2e:	429a      	cmp	r2, r3
{
   1ae30:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ae32:	d12b      	bne.n	1ae8c <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1ae34:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1ae36:	8aab      	ldrh	r3, [r5, #20]
   1ae38:	b343      	cbz	r3, 1ae8c <disconnected_cb+0x68>
   1ae3a:	1c6c      	adds	r4, r5, #1
   1ae3c:	f105 0915 	add.w	r9, r5, #21
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1ae40:	f04f 0800 	mov.w	r8, #0

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   1ae44:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1ae48:	b19b      	cbz	r3, 1ae72 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ae4a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1ae4e:	4622      	mov	r2, r4
   1ae50:	4630      	mov	r0, r6
   1ae52:	f00a fb22 	bl	2549a <bt_conn_is_peer_addr_le>
   1ae56:	b9e0      	cbnz	r0, 1ae92 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ae58:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1ae5c:	4621      	mov	r1, r4
   1ae5e:	f7fe f953 	bl	19108 <bt_conn_lookup_addr_le>
			if (tmp) {
   1ae62:	b130      	cbz	r0, 1ae72 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1ae64:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   1ae66:	2b07      	cmp	r3, #7
   1ae68:	bf08      	it	eq
   1ae6a:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1ae6e:	f7fd fed5 	bl	18c1c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ae72:	340a      	adds	r4, #10
   1ae74:	454c      	cmp	r4, r9
   1ae76:	d1e5      	bne.n	1ae44 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1ae78:	f1b8 0f00 	cmp.w	r8, #0
   1ae7c:	d106      	bne.n	1ae8c <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1ae7e:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1ae80:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1ae84:	b113      	cbz	r3, 1ae8c <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1ae86:	4641      	mov	r1, r8
   1ae88:	4638      	mov	r0, r7
   1ae8a:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1ae8c:	2001      	movs	r0, #1
   1ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae92:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   1ae96:	7a30      	ldrb	r0, [r6, #8]
   1ae98:	4651      	mov	r1, sl
   1ae9a:	f00a f9a3 	bl	251e4 <bt_addr_le_is_bonded>
   1ae9e:	b978      	cbnz	r0, 1aec0 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1aea0:	4b0b      	ldr	r3, [pc, #44]	; (1aed0 <disconnected_cb+0xac>)
   1aea2:	429d      	cmp	r5, r3
   1aea4:	d102      	bne.n	1aeac <disconnected_cb+0x88>
					sc_clear(conn);
   1aea6:	4630      	mov	r0, r6
   1aea8:	f00b f848 	bl	25f3c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1aeac:	4909      	ldr	r1, [pc, #36]	; (1aed4 <disconnected_cb+0xb0>)
   1aeae:	4620      	mov	r0, r4
   1aeb0:	f00b f83e 	bl	25f30 <bt_addr_le_copy>
	cfg->id = 0U;
   1aeb4:	2300      	movs	r3, #0
   1aeb6:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1aeba:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1aebe:	e7d8      	b.n	1ae72 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1aec0:	4651      	mov	r1, sl
   1aec2:	4620      	mov	r0, r4
   1aec4:	f00b f834 	bl	25f30 <bt_addr_le_copy>
   1aec8:	e7d3      	b.n	1ae72 <disconnected_cb+0x4e>
   1aeca:	bf00      	nop
   1aecc:	0001acb9 	.word	0x0001acb9
   1aed0:	200006ac 	.word	0x200006ac
   1aed4:	00029059 	.word	0x00029059

0001aed8 <read_ppcp>:
{
   1aed8:	b513      	push	{r0, r1, r4, lr}
   1aeda:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1aede:	4c0b      	ldr	r4, [pc, #44]	; (1af0c <read_ppcp+0x34>)
{
   1aee0:	4610      	mov	r0, r2
	if (offset > value_len) {
   1aee2:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1aee4:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   1aee8:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1aeec:	d80b      	bhi.n	1af06 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1aeee:	f1c1 0408 	rsb	r4, r1, #8
   1aef2:	429c      	cmp	r4, r3
   1aef4:	bfa8      	it	ge
   1aef6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1aef8:	4622      	mov	r2, r4
   1aefa:	4469      	add	r1, sp
   1aefc:	f00a f803 	bl	24f06 <memcpy>
}
   1af00:	4620      	mov	r0, r4
   1af02:	b002      	add	sp, #8
   1af04:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1af06:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1af0a:	e7f9      	b.n	1af00 <read_ppcp+0x28>
   1af0c:	03200320 	.word	0x03200320

0001af10 <cf_write>:
{
   1af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af14:	b086      	sub	sp, #24
   1af16:	461f      	mov	r7, r3
   1af18:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1af1c:	2b01      	cmp	r3, #1
{
   1af1e:	4606      	mov	r6, r0
   1af20:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1af22:	d83a      	bhi.n	1af9a <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1af24:	443b      	add	r3, r7
   1af26:	2b01      	cmp	r3, #1
   1af28:	463d      	mov	r5, r7
   1af2a:	dc39      	bgt.n	1afa0 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1af2c:	f7ff fe50 	bl	1abd0 <find_cf_cfg>
	if (!cfg) {
   1af30:	4604      	mov	r4, r0
   1af32:	b998      	cbnz	r0, 1af5c <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1af34:	f7ff fe4c 	bl	1abd0 <find_cf_cfg>
	if (!cfg) {
   1af38:	4604      	mov	r4, r0
   1af3a:	b978      	cbnz	r0, 1af5c <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1af3c:	4b1b      	ldr	r3, [pc, #108]	; (1afac <cf_write+0x9c>)
   1af3e:	9305      	str	r3, [sp, #20]
   1af40:	481b      	ldr	r0, [pc, #108]	; (1afb0 <cf_write+0xa0>)
   1af42:	2302      	movs	r3, #2
   1af44:	aa04      	add	r2, sp, #16
   1af46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1af4a:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1af4e:	9304      	str	r3, [sp, #16]
   1af50:	f00a fff1 	bl	25f36 <z_log_msg_static_create.constprop.0>
}
   1af54:	4628      	mov	r0, r5
   1af56:	b006      	add	sp, #24
   1af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1af5c:	b197      	cbz	r7, 1af84 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1af5e:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1af60:	f898 2000 	ldrb.w	r2, [r8]
   1af64:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1af66:	fa21 f003 	lsr.w	r0, r1, r3
   1af6a:	07c7      	lsls	r7, r0, #31
   1af6c:	d503      	bpl.n	1af76 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1af6e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1af72:	07c0      	lsls	r0, r0, #31
   1af74:	d517      	bpl.n	1afa6 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1af76:	3301      	adds	r3, #1
   1af78:	2b03      	cmp	r3, #3
   1af7a:	d1f4      	bne.n	1af66 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1af7c:	f002 0207 	and.w	r2, r2, #7
   1af80:	4311      	orrs	r1, r2
   1af82:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1af84:	1c60      	adds	r0, r4, #1
   1af86:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1af8a:	f00a ffd1 	bl	25f30 <bt_addr_le_copy>
	cfg->id = conn->id;
   1af8e:	7a33      	ldrb	r3, [r6, #8]
   1af90:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   1af92:	4620      	mov	r0, r4
   1af94:	f00b f89d 	bl	260d2 <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   1af98:	e7dc      	b.n	1af54 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1af9a:	f06f 0506 	mvn.w	r5, #6
   1af9e:	e7d9      	b.n	1af54 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1afa0:	f06f 050c 	mvn.w	r5, #12
   1afa4:	e7d6      	b.n	1af54 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1afa6:	f06f 0512 	mvn.w	r5, #18
   1afaa:	e7d3      	b.n	1af54 <cf_write+0x44>
   1afac:	0002a29a 	.word	0x0002a29a
   1afb0:	00027360 	.word	0x00027360

0001afb4 <sc_indicate_rsp>:
{
   1afb4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1afb6:	4914      	ldr	r1, [pc, #80]	; (1b008 <sc_indicate_rsp+0x54>)
   1afb8:	f3bf 8f5b 	dmb	ish
   1afbc:	4604      	mov	r4, r0
   1afbe:	e851 3f00 	ldrex	r3, [r1]
   1afc2:	f023 0302 	bic.w	r3, r3, #2
   1afc6:	e841 3200 	strex	r2, r3, [r1]
   1afca:	2a00      	cmp	r2, #0
   1afcc:	d1f7      	bne.n	1afbe <sc_indicate_rsp+0xa>
   1afce:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1afd2:	4608      	mov	r0, r1
   1afd4:	f00a ff97 	bl	25f06 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1afd8:	07c2      	lsls	r2, r0, #31
   1afda:	d505      	bpl.n	1afe8 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   1afdc:	2200      	movs	r2, #0
   1afde:	2300      	movs	r3, #0
   1afe0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1afe4:	f006 fb3a 	bl	2165c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1afe8:	4620      	mov	r0, r4
   1afea:	f00a fee4 	bl	25db6 <bt_att_fixed_chan_only>
   1afee:	b150      	cbz	r0, 1b006 <sc_indicate_rsp+0x52>
		cfg = find_cf_cfg(conn);
   1aff0:	4620      	mov	r0, r4
   1aff2:	f7ff fded 	bl	1abd0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1aff6:	b130      	cbz	r0, 1b006 <sc_indicate_rsp+0x52>
   1aff8:	7a03      	ldrb	r3, [r0, #8]
   1affa:	07db      	lsls	r3, r3, #31
   1affc:	d503      	bpl.n	1b006 <sc_indicate_rsp+0x52>
}
   1affe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   1b002:	f00b b866 	b.w	260d2 <set_change_aware_no_store.constprop.0.isra.0>
}
   1b006:	bd10      	pop	{r4, pc}
   1b008:	20002088 	.word	0x20002088

0001b00c <bt_gatt_init>:
{
   1b00c:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b00e:	4820      	ldr	r0, [pc, #128]	; (1b090 <bt_gatt_init+0x84>)
   1b010:	2101      	movs	r1, #1
   1b012:	f00a ff7e 	bl	25f12 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1b016:	07c3      	lsls	r3, r0, #31
   1b018:	d439      	bmi.n	1b08e <bt_gatt_init+0x82>
   1b01a:	2102      	movs	r1, #2
   1b01c:	481c      	ldr	r0, [pc, #112]	; (1b090 <bt_gatt_init+0x84>)
   1b01e:	f00a ff78 	bl	25f12 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1b022:	4008      	ands	r0, r1
   1b024:	d11f      	bne.n	1b066 <bt_gatt_init+0x5a>
   1b026:	491b      	ldr	r1, [pc, #108]	; (1b094 <bt_gatt_init+0x88>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b028:	4a1b      	ldr	r2, [pc, #108]	; (1b098 <bt_gatt_init+0x8c>)
   1b02a:	880b      	ldrh	r3, [r1, #0]
   1b02c:	4c1b      	ldr	r4, [pc, #108]	; (1b09c <bt_gatt_init+0x90>)
   1b02e:	42a2      	cmp	r2, r4
   1b030:	d916      	bls.n	1b060 <bt_gatt_init+0x54>
   1b032:	b100      	cbz	r0, 1b036 <bt_gatt_init+0x2a>
   1b034:	800b      	strh	r3, [r1, #0]
   1b036:	491a      	ldr	r1, [pc, #104]	; (1b0a0 <bt_gatt_init+0x94>)
   1b038:	4a1a      	ldr	r2, [pc, #104]	; (1b0a4 <bt_gatt_init+0x98>)
   1b03a:	481b      	ldr	r0, [pc, #108]	; (1b0a8 <bt_gatt_init+0x9c>)
   1b03c:	f240 53c3 	movw	r3, #1475	; 0x5c3
   1b040:	f009 fb54 	bl	246ec <assert_print>
   1b044:	4819      	ldr	r0, [pc, #100]	; (1b0ac <bt_gatt_init+0xa0>)
   1b046:	f009 fb51 	bl	246ec <assert_print>
   1b04a:	4816      	ldr	r0, [pc, #88]	; (1b0a4 <bt_gatt_init+0x98>)
   1b04c:	f240 51c3 	movw	r1, #1475	; 0x5c3
   1b050:	f009 fb45 	bl	246de <assert_post_action>
		last_static_handle += svc->attr_count;
   1b054:	6850      	ldr	r0, [r2, #4]
   1b056:	4403      	add	r3, r0
   1b058:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b05a:	3208      	adds	r2, #8
   1b05c:	2001      	movs	r0, #1
   1b05e:	e7e6      	b.n	1b02e <bt_gatt_init+0x22>
   1b060:	d3f8      	bcc.n	1b054 <bt_gatt_init+0x48>
   1b062:	b100      	cbz	r0, 1b066 <bt_gatt_init+0x5a>
   1b064:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1b066:	4b12      	ldr	r3, [pc, #72]	; (1b0b0 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b068:	4912      	ldr	r1, [pc, #72]	; (1b0b4 <bt_gatt_init+0xa8>)
   1b06a:	4813      	ldr	r0, [pc, #76]	; (1b0b8 <bt_gatt_init+0xac>)
   1b06c:	2200      	movs	r2, #0
	list->tail = NULL;
   1b06e:	e9c3 2200 	strd	r2, r2, [r3]
   1b072:	f006 f9d7 	bl	21424 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b076:	4810      	ldr	r0, [pc, #64]	; (1b0b8 <bt_gatt_init+0xac>)
   1b078:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b07c:	2300      	movs	r3, #0
   1b07e:	f7fa feff 	bl	15e80 <bt_long_wq_schedule>
}
   1b082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b086:	490d      	ldr	r1, [pc, #52]	; (1b0bc <bt_gatt_init+0xb0>)
   1b088:	480d      	ldr	r0, [pc, #52]	; (1b0c0 <bt_gatt_init+0xb4>)
   1b08a:	f006 b9cb 	b.w	21424 <k_work_init_delayable>
}
   1b08e:	bd10      	pop	{r4, pc}
   1b090:	20002ea8 	.word	0x20002ea8
   1b094:	20003122 	.word	0x20003122
   1b098:	00027308 	.word	0x00027308
   1b09c:	00027320 	.word	0x00027320
   1b0a0:	0002a2fd 	.word	0x0002a2fd
   1b0a4:	0002a2c6 	.word	0x0002a2c6
   1b0a8:	00027f8a 	.word	0x00027f8a
   1b0ac:	000284d6 	.word	0x000284d6
   1b0b0:	20002eac 	.word	0x20002eac
   1b0b4:	0001b335 	.word	0x0001b335
   1b0b8:	20001fe0 	.word	0x20001fe0
   1b0bc:	0001b759 	.word	0x0001b759
   1b0c0:	20002058 	.word	0x20002058

0001b0c4 <bt_gatt_attr_get_handle>:
{
   1b0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1b0c8:	4603      	mov	r3, r0
   1b0ca:	b398      	cbz	r0, 1b134 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   1b0cc:	8a00      	ldrh	r0, [r0, #16]
   1b0ce:	bb88      	cbnz	r0, 1b134 <bt_gatt_attr_get_handle+0x70>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b0d0:	491a      	ldr	r1, [pc, #104]	; (1b13c <bt_gatt_attr_get_handle+0x78>)
   1b0d2:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1b150 <bt_gatt_attr_get_handle+0x8c>
	uint16_t handle = 1;
   1b0d6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b0d8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b0dc:	4571      	cmp	r1, lr
   1b0de:	d928      	bls.n	1b132 <bt_gatt_attr_get_handle+0x6e>
   1b0e0:	4917      	ldr	r1, [pc, #92]	; (1b140 <bt_gatt_attr_get_handle+0x7c>)
   1b0e2:	4a18      	ldr	r2, [pc, #96]	; (1b144 <bt_gatt_attr_get_handle+0x80>)
   1b0e4:	4818      	ldr	r0, [pc, #96]	; (1b148 <bt_gatt_attr_get_handle+0x84>)
   1b0e6:	f240 7329 	movw	r3, #1833	; 0x729
   1b0ea:	f009 faff 	bl	246ec <assert_print>
   1b0ee:	4817      	ldr	r0, [pc, #92]	; (1b14c <bt_gatt_attr_get_handle+0x88>)
   1b0f0:	f009 fafc 	bl	246ec <assert_print>
   1b0f4:	4813      	ldr	r0, [pc, #76]	; (1b144 <bt_gatt_attr_get_handle+0x80>)
   1b0f6:	f240 7129 	movw	r1, #1833	; 0x729
   1b0fa:	f009 faf0 	bl	246de <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b0fe:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1b102:	42bb      	cmp	r3, r7
   1b104:	d304      	bcc.n	1b110 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b106:	fb0c 7206 	mla	r2, ip, r6, r7
   1b10a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1b10c:	4293      	cmp	r3, r2
   1b10e:	d90e      	bls.n	1b12e <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   1b110:	4434      	add	r4, r6
   1b112:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b114:	3108      	adds	r1, #8
   1b116:	4614      	mov	r4, r2
   1b118:	e7e0      	b.n	1b0dc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1b11a:	fb0c 7805 	mla	r8, ip, r5, r7
   1b11e:	4543      	cmp	r3, r8
   1b120:	d00a      	beq.n	1b138 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b122:	3501      	adds	r5, #1
   1b124:	1962      	adds	r2, r4, r5
   1b126:	42b5      	cmp	r5, r6
   1b128:	b292      	uxth	r2, r2
   1b12a:	d1f6      	bne.n	1b11a <bt_gatt_attr_get_handle+0x56>
   1b12c:	e7f2      	b.n	1b114 <bt_gatt_attr_get_handle+0x50>
   1b12e:	2500      	movs	r5, #0
   1b130:	e7f8      	b.n	1b124 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b132:	d3e4      	bcc.n	1b0fe <bt_gatt_attr_get_handle+0x3a>
}
   1b134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b138:	4610      	mov	r0, r2
   1b13a:	e7fb      	b.n	1b134 <bt_gatt_attr_get_handle+0x70>
   1b13c:	00027308 	.word	0x00027308
   1b140:	0002a2f6 	.word	0x0002a2f6
   1b144:	0002a2c6 	.word	0x0002a2c6
   1b148:	00027f8a 	.word	0x00027f8a
   1b14c:	000284d6 	.word	0x000284d6
   1b150:	00027320 	.word	0x00027320

0001b154 <bt_gatt_foreach_attr_type>:
{
   1b154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b158:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1b15c:	9100      	str	r1, [sp, #0]
   1b15e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1b160:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b164:	2d00      	cmp	r5, #0
   1b166:	bf08      	it	eq
   1b168:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1b16a:	4b2b      	ldr	r3, [pc, #172]	; (1b218 <bt_gatt_foreach_attr_type+0xc4>)
   1b16c:	881b      	ldrh	r3, [r3, #0]
   1b16e:	4283      	cmp	r3, r0
{
   1b170:	4607      	mov	r7, r0
   1b172:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1b174:	d232      	bcs.n	1b1dc <bt_gatt_foreach_attr_type+0x88>
}
   1b176:	b003      	add	sp, #12
   1b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b17c:	5889      	ldr	r1, [r1, r2]
   1b17e:	9301      	str	r3, [sp, #4]
   1b180:	4640      	mov	r0, r8
   1b182:	f009 fef6 	bl	24f72 <bt_uuid_cmp>
   1b186:	9b01      	ldr	r3, [sp, #4]
   1b188:	b190      	cbz	r0, 1b1b0 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b18a:	3401      	adds	r4, #1
   1b18c:	f10a 0a01 	add.w	sl, sl, #1
   1b190:	b2a4      	uxth	r4, r4
   1b192:	6873      	ldr	r3, [r6, #4]
   1b194:	4553      	cmp	r3, sl
   1b196:	d92c      	bls.n	1b1f2 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1b198:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b19a:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   1b19c:	429c      	cmp	r4, r3
   1b19e:	d8ea      	bhi.n	1b176 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1b1a0:	42bc      	cmp	r4, r7
   1b1a2:	d3f2      	bcc.n	1b18a <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b1a4:	fb0b f20a 	mul.w	r2, fp, sl
   1b1a8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b1aa:	f1b8 0f00 	cmp.w	r8, #0
   1b1ae:	d1e5      	bne.n	1b17c <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1b1b0:	f1b9 0f00 	cmp.w	r9, #0
   1b1b4:	d10b      	bne.n	1b1ce <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1b1b6:	3d01      	subs	r5, #1
   1b1b8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1b1ba:	4618      	mov	r0, r3
   1b1bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b1c0:	4621      	mov	r1, r4
   1b1c2:	4798      	blx	r3
	if (!*num_matches) {
   1b1c4:	2d00      	cmp	r5, #0
   1b1c6:	d0d6      	beq.n	1b176 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b1c8:	2800      	cmp	r0, #0
   1b1ca:	d1de      	bne.n	1b18a <bt_gatt_foreach_attr_type+0x36>
   1b1cc:	e7d3      	b.n	1b176 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1b1ce:	68da      	ldr	r2, [r3, #12]
   1b1d0:	4591      	cmp	r9, r2
   1b1d2:	d1da      	bne.n	1b18a <bt_gatt_foreach_attr_type+0x36>
   1b1d4:	e7ef      	b.n	1b1b6 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b1d6:	f04f 0a00 	mov.w	sl, #0
   1b1da:	e7da      	b.n	1b192 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1dc:	4e0f      	ldr	r6, [pc, #60]	; (1b21c <bt_gatt_foreach_attr_type+0xc8>)
		uint16_t handle = 1;
   1b1de:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b1e0:	f04f 0b14 	mov.w	fp, #20
   1b1e4:	e006      	b.n	1b1f4 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1e6:	d2c6      	bcs.n	1b176 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1b1e8:	6873      	ldr	r3, [r6, #4]
   1b1ea:	4423      	add	r3, r4
   1b1ec:	42bb      	cmp	r3, r7
   1b1ee:	d2f2      	bcs.n	1b1d6 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1b1f0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1f2:	3608      	adds	r6, #8
   1b1f4:	4b0a      	ldr	r3, [pc, #40]	; (1b220 <bt_gatt_foreach_attr_type+0xcc>)
   1b1f6:	429e      	cmp	r6, r3
   1b1f8:	d9f5      	bls.n	1b1e6 <bt_gatt_foreach_attr_type+0x92>
   1b1fa:	490a      	ldr	r1, [pc, #40]	; (1b224 <bt_gatt_foreach_attr_type+0xd0>)
   1b1fc:	4a0a      	ldr	r2, [pc, #40]	; (1b228 <bt_gatt_foreach_attr_type+0xd4>)
   1b1fe:	480b      	ldr	r0, [pc, #44]	; (1b22c <bt_gatt_foreach_attr_type+0xd8>)
   1b200:	f240 73ed 	movw	r3, #2029	; 0x7ed
   1b204:	f009 fa72 	bl	246ec <assert_print>
   1b208:	4809      	ldr	r0, [pc, #36]	; (1b230 <bt_gatt_foreach_attr_type+0xdc>)
   1b20a:	f009 fa6f 	bl	246ec <assert_print>
   1b20e:	4806      	ldr	r0, [pc, #24]	; (1b228 <bt_gatt_foreach_attr_type+0xd4>)
   1b210:	f240 71ed 	movw	r1, #2029	; 0x7ed
   1b214:	f009 fa63 	bl	246de <assert_post_action>
   1b218:	20003122 	.word	0x20003122
   1b21c:	00027308 	.word	0x00027308
   1b220:	00027320 	.word	0x00027320
   1b224:	0002a2f6 	.word	0x0002a2f6
   1b228:	0002a2c6 	.word	0x0002a2c6
   1b22c:	00027f8a 	.word	0x00027f8a
   1b230:	000284d6 	.word	0x000284d6

0001b234 <db_hash_gen>:
{
   1b234:	b510      	push	{r4, lr}
   1b236:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1b238:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b23a:	aa22      	add	r2, sp, #136	; 0x88
   1b23c:	4669      	mov	r1, sp
   1b23e:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1b240:	e9cd 4400 	strd	r4, r4, [sp]
   1b244:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b248:	f009 fd57 	bl	24cfa <tc_cmac_setup>
   1b24c:	b958      	cbnz	r0, 1b266 <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1b24e:	4b15      	ldr	r3, [pc, #84]	; (1b2a4 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1b250:	9309      	str	r3, [sp, #36]	; 0x24
   1b252:	4815      	ldr	r0, [pc, #84]	; (1b2a8 <db_hash_gen+0x74>)
   1b254:	2302      	movs	r3, #2
   1b256:	aa08      	add	r2, sp, #32
   1b258:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b25c:	9308      	str	r3, [sp, #32]
   1b25e:	f00a fe6a 	bl	25f36 <z_log_msg_static_create.constprop.0>
}
   1b262:	b04e      	add	sp, #312	; 0x138
   1b264:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1b266:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b26a:	2001      	movs	r0, #1
   1b26c:	4a0f      	ldr	r2, [pc, #60]	; (1b2ac <db_hash_gen+0x78>)
   1b26e:	ab0a      	add	r3, sp, #40	; 0x28
   1b270:	f00a ff9f 	bl	261b2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b274:	480e      	ldr	r0, [pc, #56]	; (1b2b0 <db_hash_gen+0x7c>)
   1b276:	a90a      	add	r1, sp, #40	; 0x28
   1b278:	f009 fdd4 	bl	24e24 <tc_cmac_final>
   1b27c:	b908      	cbnz	r0, 1b282 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1b27e:	4b0d      	ldr	r3, [pc, #52]	; (1b2b4 <db_hash_gen+0x80>)
   1b280:	e7e6      	b.n	1b250 <db_hash_gen+0x1c>
   1b282:	4b0b      	ldr	r3, [pc, #44]	; (1b2b0 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1b284:	4621      	mov	r1, r4
   1b286:	f103 0210 	add.w	r2, r3, #16
   1b28a:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b28c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b28e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b292:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1b296:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b298:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1b29a:	d1f6      	bne.n	1b28a <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b29c:	4806      	ldr	r0, [pc, #24]	; (1b2b8 <db_hash_gen+0x84>)
   1b29e:	f00a fe38 	bl	25f12 <atomic_or>
   1b2a2:	e7de      	b.n	1b262 <db_hash_gen+0x2e>
   1b2a4:	0002a325 	.word	0x0002a325
   1b2a8:	00027360 	.word	0x00027360
   1b2ac:	00025e51 	.word	0x00025e51
   1b2b0:	20001fd0 	.word	0x20001fd0
   1b2b4:	0002a33e 	.word	0x0002a33e
   1b2b8:	20002088 	.word	0x20002088

0001b2bc <db_hash_read>:
{
   1b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b2be:	491a      	ldr	r1, [pc, #104]	; (1b328 <db_hash_read+0x6c>)
{
   1b2c0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b2c4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b2c6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b2ca:	4615      	mov	r5, r2
   1b2cc:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b2ce:	f006 fa25 	bl	2171c <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b2d2:	4816      	ldr	r0, [pc, #88]	; (1b32c <db_hash_read+0x70>)
   1b2d4:	f00a fe17 	bl	25f06 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b2d8:	0701      	lsls	r1, r0, #28
   1b2da:	d401      	bmi.n	1b2e0 <db_hash_read+0x24>
		db_hash_gen();
   1b2dc:	f7ff ffaa 	bl	1b234 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1b2e0:	4620      	mov	r0, r4
   1b2e2:	f7ff fc75 	bl	1abd0 <find_cf_cfg>
	if (cfg &&
   1b2e6:	b168      	cbz	r0, 1b304 <db_hash_read+0x48>
   1b2e8:	7a03      	ldrb	r3, [r0, #8]
   1b2ea:	07da      	lsls	r2, r3, #31
   1b2ec:	d50a      	bpl.n	1b304 <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b2ee:	f100 040c 	add.w	r4, r0, #12
   1b2f2:	4620      	mov	r0, r4
   1b2f4:	f00a fe07 	bl	25f06 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1b2f8:	07c3      	lsls	r3, r0, #31
   1b2fa:	d403      	bmi.n	1b304 <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b2fc:	2102      	movs	r1, #2
   1b2fe:	4620      	mov	r0, r4
   1b300:	f00a fe07 	bl	25f12 <atomic_or>
	if (offset > value_len) {
   1b304:	2e10      	cmp	r6, #16
   1b306:	d80c      	bhi.n	1b322 <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
   1b308:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b30c:	4908      	ldr	r1, [pc, #32]	; (1b330 <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
   1b30e:	42bc      	cmp	r4, r7
   1b310:	bfa8      	it	ge
   1b312:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b314:	4622      	mov	r2, r4
   1b316:	4431      	add	r1, r6
   1b318:	4628      	mov	r0, r5
   1b31a:	f009 fdf4 	bl	24f06 <memcpy>
}
   1b31e:	4620      	mov	r0, r4
   1b320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b322:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b326:	e7fa      	b.n	1b31e <db_hash_read+0x62>
   1b328:	20002010 	.word	0x20002010
   1b32c:	20002088 	.word	0x20002088
   1b330:	20001fd0 	.word	0x20001fd0

0001b334 <db_hash_process>:
{
   1b334:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b336:	4805      	ldr	r0, [pc, #20]	; (1b34c <db_hash_process+0x18>)
   1b338:	f00a fde5 	bl	25f06 <atomic_get>
	if (new_hash) {
   1b33c:	0703      	lsls	r3, r0, #28
   1b33e:	d403      	bmi.n	1b348 <db_hash_process+0x14>
}
   1b340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   1b344:	f7ff bf76 	b.w	1b234 <db_hash_gen>
}
   1b348:	bd08      	pop	{r3, pc}
   1b34a:	bf00      	nop
   1b34c:	20002088 	.word	0x20002088

0001b350 <bt_gatt_attr_next>:
{
   1b350:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1b352:	2300      	movs	r3, #0
   1b354:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1b356:	f7ff feb5 	bl	1b0c4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1b35a:	1c41      	adds	r1, r0, #1
   1b35c:	b289      	uxth	r1, r1
   1b35e:	4608      	mov	r0, r1
   1b360:	4a03      	ldr	r2, [pc, #12]	; (1b370 <bt_gatt_attr_next+0x20>)
   1b362:	ab01      	add	r3, sp, #4
   1b364:	f00a ff25 	bl	261b2 <bt_gatt_foreach_attr>
}
   1b368:	9801      	ldr	r0, [sp, #4]
   1b36a:	b003      	add	sp, #12
   1b36c:	f85d fb04 	ldr.w	pc, [sp], #4
   1b370:	00025e01 	.word	0x00025e01

0001b374 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1b374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b378:	460c      	mov	r4, r1
   1b37a:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1b37c:	4605      	mov	r5, r0
   1b37e:	b970      	cbnz	r0, 1b39e <bt_gatt_is_subscribed+0x2a>
   1b380:	4960      	ldr	r1, [pc, #384]	; (1b504 <bt_gatt_is_subscribed+0x190>)
   1b382:	4a61      	ldr	r2, [pc, #388]	; (1b508 <bt_gatt_is_subscribed+0x194>)
   1b384:	4861      	ldr	r0, [pc, #388]	; (1b50c <bt_gatt_is_subscribed+0x198>)
   1b386:	f640 532e 	movw	r3, #3374	; 0xd2e
   1b38a:	f009 f9af 	bl	246ec <assert_print>
   1b38e:	4860      	ldr	r0, [pc, #384]	; (1b510 <bt_gatt_is_subscribed+0x19c>)
   1b390:	f009 f9ac 	bl	246ec <assert_print>
   1b394:	f640 512e 	movw	r1, #3374	; 0xd2e
	__ASSERT(attr, "invalid parameter\n");
   1b398:	485b      	ldr	r0, [pc, #364]	; (1b508 <bt_gatt_is_subscribed+0x194>)
   1b39a:	f009 f9a0 	bl	246de <assert_post_action>
   1b39e:	b961      	cbnz	r1, 1b3ba <bt_gatt_is_subscribed+0x46>
   1b3a0:	495c      	ldr	r1, [pc, #368]	; (1b514 <bt_gatt_is_subscribed+0x1a0>)
   1b3a2:	4a59      	ldr	r2, [pc, #356]	; (1b508 <bt_gatt_is_subscribed+0x194>)
   1b3a4:	4859      	ldr	r0, [pc, #356]	; (1b50c <bt_gatt_is_subscribed+0x198>)
   1b3a6:	f640 532f 	movw	r3, #3375	; 0xd2f
   1b3aa:	f009 f99f 	bl	246ec <assert_print>
   1b3ae:	4858      	ldr	r0, [pc, #352]	; (1b510 <bt_gatt_is_subscribed+0x19c>)
   1b3b0:	f009 f99c 	bl	246ec <assert_print>
   1b3b4:	f640 512f 	movw	r1, #3375	; 0xd2f
   1b3b8:	e7ee      	b.n	1b398 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1b3ba:	7a83      	ldrb	r3, [r0, #10]
   1b3bc:	2b07      	cmp	r3, #7
   1b3be:	d110      	bne.n	1b3e2 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b3c0:	2300      	movs	r3, #0
   1b3c2:	f88d 300c 	strb.w	r3, [sp, #12]
   1b3c6:	6820      	ldr	r0, [r4, #0]
   1b3c8:	f642 0303 	movw	r3, #10243	; 0x2803
   1b3cc:	a903      	add	r1, sp, #12
   1b3ce:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b3d2:	f009 fdce 	bl	24f72 <bt_uuid_cmp>
   1b3d6:	b9d0      	cbnz	r0, 1b40e <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   1b3d8:	68e3      	ldr	r3, [r4, #12]
   1b3da:	799b      	ldrb	r3, [r3, #6]
   1b3dc:	f013 0f30 	tst.w	r3, #48	; 0x30
   1b3e0:	d103      	bne.n	1b3ea <bt_gatt_is_subscribed+0x76>
		return false;
   1b3e2:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   1b3e4:	b004      	add	sp, #16
   1b3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1b3ea:	4620      	mov	r0, r4
   1b3ec:	f7ff ffb0 	bl	1b350 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b3f0:	4604      	mov	r4, r0
   1b3f2:	b960      	cbnz	r0, 1b40e <bt_gatt_is_subscribed+0x9a>
   1b3f4:	4947      	ldr	r1, [pc, #284]	; (1b514 <bt_gatt_is_subscribed+0x1a0>)
   1b3f6:	4a44      	ldr	r2, [pc, #272]	; (1b508 <bt_gatt_is_subscribed+0x194>)
   1b3f8:	4844      	ldr	r0, [pc, #272]	; (1b50c <bt_gatt_is_subscribed+0x198>)
   1b3fa:	f44f 6354 	mov.w	r3, #3392	; 0xd40
   1b3fe:	f009 f975 	bl	246ec <assert_print>
   1b402:	4845      	ldr	r0, [pc, #276]	; (1b518 <bt_gatt_is_subscribed+0x1a4>)
   1b404:	f009 f972 	bl	246ec <assert_print>
   1b408:	f44f 6154 	mov.w	r1, #3392	; 0xd40
   1b40c:	e7c4      	b.n	1b398 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b40e:	2300      	movs	r3, #0
   1b410:	6820      	ldr	r0, [r4, #0]
   1b412:	f88d 300c 	strb.w	r3, [sp, #12]
   1b416:	a903      	add	r1, sp, #12
   1b418:	f642 1302 	movw	r3, #10498	; 0x2902
   1b41c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b420:	f009 fda7 	bl	24f72 <bt_uuid_cmp>
   1b424:	b188      	cbz	r0, 1b44a <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1b426:	4620      	mov	r0, r4
   1b428:	f7ff ff92 	bl	1b350 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b42c:	4604      	mov	r4, r0
   1b42e:	b960      	cbnz	r0, 1b44a <bt_gatt_is_subscribed+0xd6>
   1b430:	4938      	ldr	r1, [pc, #224]	; (1b514 <bt_gatt_is_subscribed+0x1a0>)
   1b432:	4a35      	ldr	r2, [pc, #212]	; (1b508 <bt_gatt_is_subscribed+0x194>)
   1b434:	4835      	ldr	r0, [pc, #212]	; (1b50c <bt_gatt_is_subscribed+0x198>)
   1b436:	f640 5346 	movw	r3, #3398	; 0xd46
   1b43a:	f009 f957 	bl	246ec <assert_print>
   1b43e:	4836      	ldr	r0, [pc, #216]	; (1b518 <bt_gatt_is_subscribed+0x1a4>)
   1b440:	f009 f954 	bl	246ec <assert_print>
   1b444:	f640 5146 	movw	r1, #3398	; 0xd46
   1b448:	e7a6      	b.n	1b398 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b44a:	2700      	movs	r7, #0
   1b44c:	f642 1802 	movw	r8, #10498	; 0x2902
   1b450:	6820      	ldr	r0, [r4, #0]
   1b452:	f88d 7000 	strb.w	r7, [sp]
   1b456:	4669      	mov	r1, sp
   1b458:	f8ad 8002 	strh.w	r8, [sp, #2]
   1b45c:	f009 fd89 	bl	24f72 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b460:	bb20      	cbnz	r0, 1b4ac <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b462:	2300      	movs	r3, #0
   1b464:	6820      	ldr	r0, [r4, #0]
   1b466:	f88d 300c 	strb.w	r3, [sp, #12]
   1b46a:	a903      	add	r1, sp, #12
   1b46c:	f642 1302 	movw	r3, #10498	; 0x2902
   1b470:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b474:	f009 fd7d 	bl	24f72 <bt_uuid_cmp>
   1b478:	2800      	cmp	r0, #0
   1b47a:	d1b2      	bne.n	1b3e2 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   1b47c:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1b47e:	4622      	mov	r2, r4
   1b480:	4628      	mov	r0, r5
   1b482:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b486:	f00a f808 	bl	2549a <bt_conn_is_peer_addr_le>
   1b48a:	b110      	cbz	r0, 1b492 <bt_gatt_is_subscribed+0x11e>
   1b48c:	8923      	ldrh	r3, [r4, #8]
   1b48e:	421e      	tst	r6, r3
   1b490:	d10a      	bne.n	1b4a8 <bt_gatt_is_subscribed+0x134>
   1b492:	7aa1      	ldrb	r1, [r4, #10]
   1b494:	f104 020b 	add.w	r2, r4, #11
   1b498:	4628      	mov	r0, r5
   1b49a:	f009 fffe 	bl	2549a <bt_conn_is_peer_addr_le>
   1b49e:	2800      	cmp	r0, #0
   1b4a0:	d09f      	beq.n	1b3e2 <bt_gatt_is_subscribed+0x6e>
   1b4a2:	8a63      	ldrh	r3, [r4, #18]
   1b4a4:	421e      	tst	r6, r3
   1b4a6:	d09c      	beq.n	1b3e2 <bt_gatt_is_subscribed+0x6e>
			return true;
   1b4a8:	2001      	movs	r0, #1
   1b4aa:	e79b      	b.n	1b3e4 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b4ac:	6820      	ldr	r0, [r4, #0]
   1b4ae:	f88d 7004 	strb.w	r7, [sp, #4]
   1b4b2:	f642 0303 	movw	r3, #10243	; 0x2803
   1b4b6:	a901      	add	r1, sp, #4
   1b4b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b4bc:	f009 fd59 	bl	24f72 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b4c0:	2800      	cmp	r0, #0
   1b4c2:	d0ce      	beq.n	1b462 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b4c4:	6820      	ldr	r0, [r4, #0]
   1b4c6:	f88d 7008 	strb.w	r7, [sp, #8]
   1b4ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b4ce:	a902      	add	r1, sp, #8
   1b4d0:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b4d4:	f009 fd4d 	bl	24f72 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b4d8:	2800      	cmp	r0, #0
   1b4da:	d0c2      	beq.n	1b462 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b4dc:	6820      	ldr	r0, [r4, #0]
   1b4de:	f88d 700c 	strb.w	r7, [sp, #12]
   1b4e2:	f642 0301 	movw	r3, #10241	; 0x2801
   1b4e6:	a903      	add	r1, sp, #12
   1b4e8:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b4ec:	f009 fd41 	bl	24f72 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b4f0:	2800      	cmp	r0, #0
   1b4f2:	d0b6      	beq.n	1b462 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   1b4f4:	4620      	mov	r0, r4
   1b4f6:	f7ff ff2b 	bl	1b350 <bt_gatt_attr_next>
		if (!attr) {
   1b4fa:	4604      	mov	r4, r0
   1b4fc:	2800      	cmp	r0, #0
   1b4fe:	d1a7      	bne.n	1b450 <bt_gatt_is_subscribed+0xdc>
   1b500:	e76f      	b.n	1b3e2 <bt_gatt_is_subscribed+0x6e>
   1b502:	bf00      	nop
   1b504:	00029e3d 	.word	0x00029e3d
   1b508:	0002a2c6 	.word	0x0002a2c6
   1b50c:	00027f8a 	.word	0x00027f8a
   1b510:	0002a357 	.word	0x0002a357
   1b514:	0002a36c 	.word	0x0002a36c
   1b518:	0002a371 	.word	0x0002a371

0001b51c <gatt_indicate>:
{
   1b51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b520:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b522:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b524:	8a4f      	ldrh	r7, [r1, #18]
   1b526:	f017 0714 	ands.w	r7, r7, #20
{
   1b52a:	b086      	sub	sp, #24
   1b52c:	4680      	mov	r8, r0
   1b52e:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b530:	d00f      	beq.n	1b552 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1b532:	4b33      	ldr	r3, [pc, #204]	; (1b600 <gatt_indicate+0xe4>)
   1b534:	9305      	str	r3, [sp, #20]
   1b536:	4833      	ldr	r0, [pc, #204]	; (1b604 <gatt_indicate+0xe8>)
   1b538:	2302      	movs	r3, #2
   1b53a:	aa04      	add	r2, sp, #16
   1b53c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1b540:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1b544:	9304      	str	r3, [sp, #16]
   1b546:	f00a fcf6 	bl	25f36 <z_log_msg_static_create.constprop.0>
}
   1b54a:	4628      	mov	r0, r5
   1b54c:	b006      	add	sp, #24
   1b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1b552:	2202      	movs	r2, #2
   1b554:	f7ff ff0e 	bl	1b374 <bt_gatt_is_subscribed>
   1b558:	b960      	cbnz	r0, 1b574 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1b55a:	4b2b      	ldr	r3, [pc, #172]	; (1b608 <gatt_indicate+0xec>)
   1b55c:	9305      	str	r3, [sp, #20]
   1b55e:	4829      	ldr	r0, [pc, #164]	; (1b604 <gatt_indicate+0xe8>)
   1b560:	2302      	movs	r3, #2
   1b562:	aa04      	add	r2, sp, #16
   1b564:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b568:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1b56a:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1b56e:	f00a fce2 	bl	25f36 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1b572:	e7ea      	b.n	1b54a <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b574:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1b578:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1b57a:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b57c:	f7ff f994 	bl	1a8a8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1b580:	3602      	adds	r6, #2
	if (!req) {
   1b582:	4604      	mov	r4, r0
   1b584:	b1b0      	cbz	r0, 1b5b4 <gatt_indicate+0x98>
	req->func = func;
   1b586:	4b21      	ldr	r3, [pc, #132]	; (1b60c <gatt_indicate+0xf0>)
   1b588:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1b58a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b58c:	4632      	mov	r2, r6
   1b58e:	211d      	movs	r1, #29
   1b590:	4640      	mov	r0, r8
   1b592:	f7fe feb5 	bl	1a300 <bt_att_create_pdu>
	if (!buf) {
   1b596:	4606      	mov	r6, r0
   1b598:	b978      	cbnz	r0, 1b5ba <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   1b59a:	4b1d      	ldr	r3, [pc, #116]	; (1b610 <gatt_indicate+0xf4>)
   1b59c:	4819      	ldr	r0, [pc, #100]	; (1b604 <gatt_indicate+0xe8>)
   1b59e:	9305      	str	r3, [sp, #20]
   1b5a0:	aa04      	add	r2, sp, #16
   1b5a2:	2302      	movs	r3, #2
   1b5a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b5a8:	9304      	str	r3, [sp, #16]
   1b5aa:	f00a fcc4 	bl	25f36 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1b5ae:	4620      	mov	r0, r4
   1b5b0:	f7ff f99c 	bl	1a8ec <bt_att_req_free>
		return -ENOMEM;
   1b5b4:	f06f 050b 	mvn.w	r5, #11
   1b5b8:	e7c7      	b.n	1b54a <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1b5ba:	2301      	movs	r3, #1
   1b5bc:	463a      	mov	r2, r7
   1b5be:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   1b5c0:	f106 0a0c 	add.w	sl, r6, #12
   1b5c4:	f00a fc15 	bl	25df2 <bt_att_set_tx_meta_data>
   1b5c8:	2102      	movs	r1, #2
   1b5ca:	4650      	mov	r0, sl
   1b5cc:	f000 fe5e 	bl	1c28c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b5d0:	4607      	mov	r7, r0
   1b5d2:	4650      	mov	r0, sl
   1b5d4:	f827 9b02 	strh.w	r9, [r7], #2
   1b5d8:	8aa9      	ldrh	r1, [r5, #20]
   1b5da:	f000 fe57 	bl	1c28c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b5de:	8aaa      	ldrh	r2, [r5, #20]
   1b5e0:	6929      	ldr	r1, [r5, #16]
   1b5e2:	4638      	mov	r0, r7
   1b5e4:	f009 fc8f 	bl	24f06 <memcpy>
	req->buf = buf;
   1b5e8:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1b5ea:	4621      	mov	r1, r4
   1b5ec:	4640      	mov	r0, r8
   1b5ee:	f7ff fab9 	bl	1ab64 <bt_att_req_send>
	if (err) {
   1b5f2:	4605      	mov	r5, r0
   1b5f4:	2800      	cmp	r0, #0
   1b5f6:	d0a8      	beq.n	1b54a <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1b5f8:	4620      	mov	r0, r4
   1b5fa:	f7ff f977 	bl	1a8ec <bt_att_req_free>
   1b5fe:	e7a4      	b.n	1b54a <gatt_indicate+0x2e>
   1b600:	0002a387 	.word	0x0002a387
   1b604:	00027360 	.word	0x00027360
   1b608:	0002a39d 	.word	0x0002a39d
   1b60c:	00025e23 	.word	0x00025e23
   1b610:	0002a3c8 	.word	0x0002a3c8

0001b614 <bt_gatt_indicate>:
{
   1b614:	b530      	push	{r4, r5, lr}
   1b616:	4605      	mov	r5, r0
   1b618:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b61a:	460c      	mov	r4, r1
   1b61c:	b971      	cbnz	r1, 1b63c <bt_gatt_indicate+0x28>
   1b61e:	4946      	ldr	r1, [pc, #280]	; (1b738 <bt_gatt_indicate+0x124>)
   1b620:	4a46      	ldr	r2, [pc, #280]	; (1b73c <bt_gatt_indicate+0x128>)
   1b622:	4847      	ldr	r0, [pc, #284]	; (1b740 <bt_gatt_indicate+0x12c>)
   1b624:	f640 33da 	movw	r3, #3034	; 0xbda
   1b628:	f009 f860 	bl	246ec <assert_print>
   1b62c:	4845      	ldr	r0, [pc, #276]	; (1b744 <bt_gatt_indicate+0x130>)
   1b62e:	f009 f85d 	bl	246ec <assert_print>
   1b632:	f640 31da 	movw	r1, #3034	; 0xbda
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b636:	4841      	ldr	r0, [pc, #260]	; (1b73c <bt_gatt_indicate+0x128>)
   1b638:	f009 f851 	bl	246de <assert_post_action>
   1b63c:	684b      	ldr	r3, [r1, #4]
   1b63e:	b973      	cbnz	r3, 1b65e <bt_gatt_indicate+0x4a>
   1b640:	680b      	ldr	r3, [r1, #0]
   1b642:	b963      	cbnz	r3, 1b65e <bt_gatt_indicate+0x4a>
   1b644:	4940      	ldr	r1, [pc, #256]	; (1b748 <bt_gatt_indicate+0x134>)
   1b646:	4a3d      	ldr	r2, [pc, #244]	; (1b73c <bt_gatt_indicate+0x128>)
   1b648:	483d      	ldr	r0, [pc, #244]	; (1b740 <bt_gatt_indicate+0x12c>)
   1b64a:	f640 33db 	movw	r3, #3035	; 0xbdb
   1b64e:	f009 f84d 	bl	246ec <assert_print>
   1b652:	483c      	ldr	r0, [pc, #240]	; (1b744 <bt_gatt_indicate+0x130>)
   1b654:	f009 f84a 	bl	246ec <assert_print>
   1b658:	f640 31db 	movw	r1, #3035	; 0xbdb
   1b65c:	e7eb      	b.n	1b636 <bt_gatt_indicate+0x22>
   1b65e:	483b      	ldr	r0, [pc, #236]	; (1b74c <bt_gatt_indicate+0x138>)
   1b660:	f00a fc51 	bl	25f06 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b664:	0742      	lsls	r2, r0, #29
   1b666:	d561      	bpl.n	1b72c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b668:	b115      	cbz	r5, 1b670 <bt_gatt_indicate+0x5c>
   1b66a:	7aab      	ldrb	r3, [r5, #10]
   1b66c:	2b07      	cmp	r3, #7
   1b66e:	d160      	bne.n	1b732 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1b670:	6860      	ldr	r0, [r4, #4]
   1b672:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b674:	f7ff fd26 	bl	1b0c4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b678:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b67a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b67e:	b33a      	cbz	r2, 1b6d0 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b680:	a905      	add	r1, sp, #20
   1b682:	9102      	str	r1, [sp, #8]
   1b684:	4932      	ldr	r1, [pc, #200]	; (1b750 <bt_gatt_indicate+0x13c>)
   1b686:	9101      	str	r1, [sp, #4]
   1b688:	2101      	movs	r1, #1
	found->attr = NULL;
   1b68a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b68c:	9100      	str	r1, [sp, #0]
   1b68e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b692:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b694:	f7ff fd5e 	bl	1b154 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b698:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b69a:	b91b      	cbnz	r3, 1b6a4 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1b69c:	f06f 0001 	mvn.w	r0, #1
}
   1b6a0:	b00b      	add	sp, #44	; 0x2c
   1b6a2:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b6a4:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b6a6:	9b05      	ldr	r3, [sp, #20]
   1b6a8:	6818      	ldr	r0, [r3, #0]
   1b6aa:	2300      	movs	r3, #0
   1b6ac:	f88d 3010 	strb.w	r3, [sp, #16]
   1b6b0:	a904      	add	r1, sp, #16
   1b6b2:	f642 0303 	movw	r3, #10243	; 0x2803
   1b6b6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b6ba:	f009 fc5a 	bl	24f72 <bt_uuid_cmp>
   1b6be:	b970      	cbnz	r0, 1b6de <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b6c0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b6c2:	68c3      	ldr	r3, [r0, #12]
   1b6c4:	799b      	ldrb	r3, [r3, #6]
   1b6c6:	069b      	lsls	r3, r3, #26
   1b6c8:	d405      	bmi.n	1b6d6 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1b6ca:	f06f 0015 	mvn.w	r0, #21
   1b6ce:	e7e7      	b.n	1b6a0 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   1b6d0:	2800      	cmp	r0, #0
   1b6d2:	d1e8      	bne.n	1b6a6 <bt_gatt_indicate+0x92>
   1b6d4:	e7e2      	b.n	1b69c <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b6d6:	f00a fd1e 	bl	26116 <bt_gatt_attr_value_handle>
   1b6da:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1b6de:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1b6e2:	b13d      	cbz	r5, 1b6f4 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1b6e4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b6e6:	4601      	mov	r1, r0
		params->_ref = 1;
   1b6e8:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b6ea:	4622      	mov	r2, r4
   1b6ec:	4628      	mov	r0, r5
   1b6ee:	f7ff ff15 	bl	1b51c <gatt_indicate>
   1b6f2:	e7d5      	b.n	1b6a0 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1b6f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b6f8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b6fa:	2302      	movs	r3, #2
   1b6fc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b700:	f642 1302 	movw	r3, #10498	; 0x2902
   1b704:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b708:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b70a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b70c:	9302      	str	r3, [sp, #8]
   1b70e:	4b11      	ldr	r3, [pc, #68]	; (1b754 <bt_gatt_indicate+0x140>)
   1b710:	9301      	str	r3, [sp, #4]
   1b712:	2301      	movs	r3, #1
   1b714:	9300      	str	r3, [sp, #0]
   1b716:	aa04      	add	r2, sp, #16
   1b718:	462b      	mov	r3, r5
   1b71a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b71e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b720:	f88d 5010 	strb.w	r5, [sp, #16]
   1b724:	f7ff fd16 	bl	1b154 <bt_gatt_foreach_attr_type>
	return data.err;
   1b728:	9807      	ldr	r0, [sp, #28]
   1b72a:	e7b9      	b.n	1b6a0 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1b72c:	f06f 000a 	mvn.w	r0, #10
   1b730:	e7b6      	b.n	1b6a0 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1b732:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b736:	e7b3      	b.n	1b6a0 <bt_gatt_indicate+0x8c>
   1b738:	0002a3ef 	.word	0x0002a3ef
   1b73c:	0002a2c6 	.word	0x0002a2c6
   1b740:	00027f8a 	.word	0x00027f8a
   1b744:	0002a3f6 	.word	0x0002a3f6
   1b748:	0002a40c 	.word	0x0002a40c
   1b74c:	2000045c 	.word	0x2000045c
   1b750:	00025e49 	.word	0x00025e49
   1b754:	0001b9cd 	.word	0x0001b9cd

0001b758 <sc_process>:
{
   1b758:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b75a:	f100 0430 	add.w	r4, r0, #48	; 0x30
{
   1b75e:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b760:	f1a0 0120 	sub.w	r1, r0, #32
   1b764:	4620      	mov	r0, r4
   1b766:	f00a fbce 	bl	25f06 <atomic_get>
   1b76a:	f3c0 0240 	ubfx	r2, r0, #1, #1
   1b76e:	0780      	lsls	r0, r0, #30
   1b770:	d50e      	bpl.n	1b790 <sc_process+0x38>
   1b772:	491c      	ldr	r1, [pc, #112]	; (1b7e4 <sc_process+0x8c>)
   1b774:	4a1c      	ldr	r2, [pc, #112]	; (1b7e8 <sc_process+0x90>)
   1b776:	481d      	ldr	r0, [pc, #116]	; (1b7ec <sc_process+0x94>)
   1b778:	f240 532c 	movw	r3, #1324	; 0x52c
   1b77c:	f008 ffb6 	bl	246ec <assert_print>
   1b780:	481b      	ldr	r0, [pc, #108]	; (1b7f0 <sc_process+0x98>)
   1b782:	f008 ffb3 	bl	246ec <assert_print>
   1b786:	4818      	ldr	r0, [pc, #96]	; (1b7e8 <sc_process+0x90>)
   1b788:	f240 512c 	movw	r1, #1324	; 0x52c
   1b78c:	f008 ffa7 	bl	246de <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b790:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1b794:	9001      	str	r0, [sp, #4]
   1b796:	f3bf 8f5b 	dmb	ish
   1b79a:	e854 0f00 	ldrex	r0, [r4]
   1b79e:	f020 0001 	bic.w	r0, r0, #1
   1b7a2:	e844 0500 	strex	r5, r0, [r4]
   1b7a6:	2d00      	cmp	r5, #0
   1b7a8:	d1f7      	bne.n	1b79a <sc_process+0x42>
   1b7aa:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b7ae:	4811      	ldr	r0, [pc, #68]	; (1b7f4 <sc_process+0x9c>)
   1b7b0:	f843 0c1c 	str.w	r0, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1b7b4:	4810      	ldr	r0, [pc, #64]	; (1b7f8 <sc_process+0xa0>)
   1b7b6:	f843 0c18 	str.w	r0, [r3, #-24]
	sc->params.data = &sc_range[0];
   1b7ba:	a801      	add	r0, sp, #4
   1b7bc:	f843 0c10 	str.w	r0, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1b7c0:	2004      	movs	r0, #4
   1b7c2:	f823 0c0c 	strh.w	r0, [r3, #-12]
	sc->start = 0U;
   1b7c6:	f823 2c08 	strh.w	r2, [r3, #-8]
	sc->end = 0U;
   1b7ca:	f823 2c06 	strh.w	r2, [r3, #-6]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b7ce:	4610      	mov	r0, r2
   1b7d0:	f7ff ff20 	bl	1b614 <bt_gatt_indicate>
   1b7d4:	b918      	cbnz	r0, 1b7de <sc_process+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b7d6:	2102      	movs	r1, #2
   1b7d8:	4620      	mov	r0, r4
   1b7da:	f00a fb9a 	bl	25f12 <atomic_or>
}
   1b7de:	b003      	add	sp, #12
   1b7e0:	bd30      	pop	{r4, r5, pc}
   1b7e2:	bf00      	nop
   1b7e4:	0002a429 	.word	0x0002a429
   1b7e8:	0002a2c6 	.word	0x0002a2c6
   1b7ec:	00027f8a 	.word	0x00027f8a
   1b7f0:	0002a45a 	.word	0x0002a45a
   1b7f4:	00027844 	.word	0x00027844
   1b7f8:	0001afb5 	.word	0x0001afb5

0001b7fc <update_ccc>:
{
   1b7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b800:	b088      	sub	sp, #32
	struct bt_conn *conn = data->conn;
   1b802:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b804:	4b35      	ldr	r3, [pc, #212]	; (1b8dc <update_ccc+0xe0>)
   1b806:	6882      	ldr	r2, [r0, #8]
   1b808:	429a      	cmp	r2, r3
{
   1b80a:	af00      	add	r7, sp, #0
   1b80c:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b80e:	d160      	bne.n	1b8d2 <update_ccc+0xd6>
	ccc = attr->user_data;
   1b810:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b812:	f106 0a01 	add.w	sl, r6, #1
   1b816:	f106 0815 	add.w	r8, r6, #21
		if (!cfg->value ||
   1b81a:	f8ba 3007 	ldrh.w	r3, [sl, #7]
   1b81e:	b1e3      	cbz	r3, 1b85a <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b820:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
   1b824:	4652      	mov	r2, sl
   1b826:	4628      	mov	r0, r5
   1b828:	f009 fe37 	bl	2549a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b82c:	b1a8      	cbz	r0, 1b85a <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b82e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1b832:	4621      	mov	r1, r4
   1b834:	4628      	mov	r0, r5
   1b836:	f00a fcc7 	bl	261c8 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b83a:	2803      	cmp	r0, #3
   1b83c:	d112      	bne.n	1b864 <update_ccc+0x68>
				LOG_WRN("CCC %p not writable", attr);
   1b83e:	46e9      	mov	r9, sp
   1b840:	b088      	sub	sp, #32
   1b842:	466a      	mov	r2, sp
   1b844:	4b26      	ldr	r3, [pc, #152]	; (1b8e0 <update_ccc+0xe4>)
   1b846:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b84a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b84e:	f842 0f10 	str.w	r0, [r2, #16]!
   1b852:	4824      	ldr	r0, [pc, #144]	; (1b8e4 <update_ccc+0xe8>)
   1b854:	f00a fb6f 	bl	25f36 <z_log_msg_static_create.constprop.0>
   1b858:	46cd      	mov	sp, r9
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b85a:	f10a 0a0a 	add.w	sl, sl, #10
   1b85e:	45c2      	cmp	sl, r8
   1b860:	d1db      	bne.n	1b81a <update_ccc+0x1e>
   1b862:	e036      	b.n	1b8d2 <update_ccc+0xd6>
		gatt_ccc_changed(attr, ccc);
   1b864:	4631      	mov	r1, r6
   1b866:	4620      	mov	r0, r4
   1b868:	f00a facd 	bl	25e06 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b86c:	4b1e      	ldr	r3, [pc, #120]	; (1b8e8 <update_ccc+0xec>)
   1b86e:	429e      	cmp	r6, r3
   1b870:	d12f      	bne.n	1b8d2 <update_ccc+0xd6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b872:	7a28      	ldrb	r0, [r5, #8]
   1b874:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b878:	f7ff f9d8 	bl	1ac2c <find_sc_cfg>
	if (!cfg) {
   1b87c:	b348      	cbz	r0, 1b8d2 <update_ccc+0xd6>
	if (!(cfg->data.start || cfg->data.end)) {
   1b87e:	8902      	ldrh	r2, [r0, #8]
   1b880:	8943      	ldrh	r3, [r0, #10]
   1b882:	ea52 0103 	orrs.w	r1, r2, r3
   1b886:	d024      	beq.n	1b8d2 <update_ccc+0xd6>
	index = bt_conn_index(conn);
   1b888:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b88a:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b88c:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1b88e:	f7fd fb07 	bl	18ea0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b892:	4916      	ldr	r1, [pc, #88]	; (1b8ec <update_ccc+0xf0>)
   1b894:	4a16      	ldr	r2, [pc, #88]	; (1b8f0 <update_ccc+0xf4>)
   1b896:	2318      	movs	r3, #24
   1b898:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b89c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b89e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b8a0:	4a14      	ldr	r2, [pc, #80]	; (1b8f4 <update_ccc+0xf8>)
   1b8a2:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b8a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1b8a8:	1d3a      	adds	r2, r7, #4
   1b8aa:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b8ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1b8b0:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b8b2:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   1b8b4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b8b6:	f7ff fead 	bl	1b614 <bt_gatt_indicate>
   1b8ba:	b150      	cbz	r0, 1b8d2 <update_ccc+0xd6>
		LOG_ERR("SC restore indication failed");
   1b8bc:	4b0e      	ldr	r3, [pc, #56]	; (1b8f8 <update_ccc+0xfc>)
   1b8be:	61fb      	str	r3, [r7, #28]
   1b8c0:	4808      	ldr	r0, [pc, #32]	; (1b8e4 <update_ccc+0xe8>)
   1b8c2:	2302      	movs	r3, #2
   1b8c4:	f107 0218 	add.w	r2, r7, #24
   1b8c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8cc:	61bb      	str	r3, [r7, #24]
   1b8ce:	f00a fb32 	bl	25f36 <z_log_msg_static_create.constprop.0>
}
   1b8d2:	2001      	movs	r0, #1
   1b8d4:	3720      	adds	r7, #32
   1b8d6:	46bd      	mov	sp, r7
   1b8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b8dc:	0001acb9 	.word	0x0001acb9
   1b8e0:	0002a475 	.word	0x0002a475
   1b8e4:	00027360 	.word	0x00027360
   1b8e8:	200006ac 	.word	0x200006ac
   1b8ec:	20002e70 	.word	0x20002e70
   1b8f0:	00027844 	.word	0x00027844
   1b8f4:	000260db 	.word	0x000260db
   1b8f8:	0002a489 	.word	0x0002a489

0001b8fc <gatt_notify>:
{
   1b8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b900:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b902:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b904:	8a4b      	ldrh	r3, [r1, #18]
   1b906:	f003 0314 	and.w	r3, r3, #20
{
   1b90a:	b087      	sub	sp, #28
   1b90c:	4607      	mov	r7, r0
   1b90e:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b910:	b173      	cbz	r3, 1b930 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1b912:	4b2a      	ldr	r3, [pc, #168]	; (1b9bc <gatt_notify+0xc0>)
   1b914:	482a      	ldr	r0, [pc, #168]	; (1b9c0 <gatt_notify+0xc4>)
   1b916:	9305      	str	r3, [sp, #20]
   1b918:	aa04      	add	r2, sp, #16
   1b91a:	2302      	movs	r3, #2
   1b91c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b920:	9304      	str	r3, [sp, #16]
   1b922:	f00a fb08 	bl	25f36 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1b926:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b92a:	b007      	add	sp, #28
   1b92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1b930:	2201      	movs	r2, #1
   1b932:	f7ff fd1f 	bl	1b374 <bt_gatt_is_subscribed>
   1b936:	b960      	cbnz	r0, 1b952 <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   1b938:	4b22      	ldr	r3, [pc, #136]	; (1b9c4 <gatt_notify+0xc8>)
   1b93a:	4821      	ldr	r0, [pc, #132]	; (1b9c0 <gatt_notify+0xc4>)
   1b93c:	9305      	str	r3, [sp, #20]
   1b93e:	aa04      	add	r2, sp, #16
   1b940:	2302      	movs	r3, #2
   1b942:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b946:	9304      	str	r3, [sp, #16]
   1b948:	f00a faf5 	bl	25f36 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1b94c:	f06f 0015 	mvn.w	r0, #21
   1b950:	e7eb      	b.n	1b92a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1b952:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b954:	211b      	movs	r1, #27
   1b956:	3202      	adds	r2, #2
   1b958:	4638      	mov	r0, r7
   1b95a:	f7fe fcd1 	bl	1a300 <bt_att_create_pdu>
	if (!buf) {
   1b95e:	4605      	mov	r5, r0
   1b960:	b960      	cbnz	r0, 1b97c <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1b962:	4b19      	ldr	r3, [pc, #100]	; (1b9c8 <gatt_notify+0xcc>)
   1b964:	4816      	ldr	r0, [pc, #88]	; (1b9c0 <gatt_notify+0xc4>)
   1b966:	9305      	str	r3, [sp, #20]
   1b968:	aa04      	add	r2, sp, #16
   1b96a:	2302      	movs	r3, #2
   1b96c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b970:	9304      	str	r3, [sp, #16]
   1b972:	f00a fae0 	bl	25f36 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1b976:	f06f 000b 	mvn.w	r0, #11
   1b97a:	e7d6      	b.n	1b92a <gatt_notify+0x2e>
   1b97c:	f100 090c 	add.w	r9, r0, #12
   1b980:	2102      	movs	r1, #2
   1b982:	4648      	mov	r0, r9
   1b984:	f000 fc82 	bl	1c28c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b988:	4606      	mov	r6, r0
   1b98a:	4648      	mov	r0, r9
   1b98c:	f826 8b02 	strh.w	r8, [r6], #2
   1b990:	89a1      	ldrh	r1, [r4, #12]
   1b992:	f000 fc7b 	bl	1c28c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b996:	89a2      	ldrh	r2, [r4, #12]
   1b998:	68a1      	ldr	r1, [r4, #8]
   1b99a:	4630      	mov	r0, r6
   1b99c:	f009 fab3 	bl	24f06 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1b9a0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1b9a4:	4628      	mov	r0, r5
   1b9a6:	2301      	movs	r3, #1
   1b9a8:	f00a fa23 	bl	25df2 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1b9ac:	4629      	mov	r1, r5
   1b9ae:	4638      	mov	r0, r7
}
   1b9b0:	b007      	add	sp, #28
   1b9b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1b9b6:	f7ff b877 	b.w	1aaa8 <bt_att_send>
   1b9ba:	bf00      	nop
   1b9bc:	0002a387 	.word	0x0002a387
   1b9c0:	00027360 	.word	0x00027360
   1b9c4:	0002a39d 	.word	0x0002a39d
   1b9c8:	0002a4a6 	.word	0x0002a4a6

0001b9cc <notify_cb>:
{
   1b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9d0:	4b45      	ldr	r3, [pc, #276]	; (1bae8 <notify_cb+0x11c>)
{
   1b9d2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9d4:	6882      	ldr	r2, [r0, #8]
   1b9d6:	429a      	cmp	r2, r3
{
   1b9d8:	b086      	sub	sp, #24
   1b9da:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9dc:	d136      	bne.n	1ba4c <notify_cb+0x80>
	ccc = attr->user_data;
   1b9de:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b9e2:	4b42      	ldr	r3, [pc, #264]	; (1baec <notify_cb+0x120>)
   1b9e4:	4599      	cmp	r9, r3
   1b9e6:	d119      	bne.n	1ba1c <notify_cb+0x50>
   1b9e8:	4c41      	ldr	r4, [pc, #260]	; (1baf0 <notify_cb+0x124>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b9ea:	4f42      	ldr	r7, [pc, #264]	; (1baf4 <notify_cb+0x128>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b9ec:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b9ee:	4639      	mov	r1, r7
   1b9f0:	4620      	mov	r0, r4
   1b9f2:	f00a fa80 	bl	25ef6 <bt_addr_le_eq>
   1b9f6:	b978      	cbnz	r0, 1ba18 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b9f8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1b9fc:	2207      	movs	r2, #7
   1b9fe:	4621      	mov	r1, r4
   1ba00:	f7fd fbcc 	bl	1919c <bt_conn_lookup_state_le>
			if (!conn) {
   1ba04:	bb40      	cbnz	r0, 1ba58 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1ba06:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1ba08:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1ba0c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1ba0e:	4621      	mov	r1, r4
   1ba10:	8853      	ldrh	r3, [r2, #2]
   1ba12:	8812      	ldrh	r2, [r2, #0]
   1ba14:	f7ff f9d0 	bl	1adb8 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ba18:	340c      	adds	r4, #12
   1ba1a:	b1de      	cbz	r6, 1ba54 <notify_cb+0x88>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ba1c:	f109 0601 	add.w	r6, r9, #1
   1ba20:	f109 0a15 	add.w	sl, r9, #21
		if (cfg->value != data->type) {
   1ba24:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1ba28:	89ab      	ldrh	r3, [r5, #12]
   1ba2a:	429a      	cmp	r2, r3
   1ba2c:	d10b      	bne.n	1ba46 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ba2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1ba32:	4631      	mov	r1, r6
   1ba34:	f7fd fb68 	bl	19108 <bt_conn_lookup_addr_le>
		if (!conn) {
   1ba38:	4604      	mov	r4, r0
   1ba3a:	b120      	cbz	r0, 1ba46 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1ba3c:	7a83      	ldrb	r3, [r0, #10]
   1ba3e:	2b07      	cmp	r3, #7
   1ba40:	d00d      	beq.n	1ba5e <notify_cb+0x92>
			bt_conn_unref(conn);
   1ba42:	f7fd f8eb 	bl	18c1c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ba46:	360a      	adds	r6, #10
   1ba48:	4556      	cmp	r6, sl
   1ba4a:	d1eb      	bne.n	1ba24 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1ba4c:	2001      	movs	r0, #1
}
   1ba4e:	b006      	add	sp, #24
   1ba50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ba54:	2601      	movs	r6, #1
   1ba56:	e7ca      	b.n	1b9ee <notify_cb+0x22>
			bt_conn_unref(conn);
   1ba58:	f7fd f8e0 	bl	18c1c <bt_conn_unref>
   1ba5c:	e7dc      	b.n	1ba18 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ba5e:	f8d9 3020 	ldr.w	r3, [r9, #32]
   1ba62:	b123      	cbz	r3, 1ba6e <notify_cb+0xa2>
   1ba64:	4641      	mov	r1, r8
   1ba66:	4798      	blx	r3
   1ba68:	b908      	cbnz	r0, 1ba6e <notify_cb+0xa2>
			bt_conn_unref(conn);
   1ba6a:	4620      	mov	r0, r4
   1ba6c:	e7e9      	b.n	1ba42 <notify_cb+0x76>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1ba6e:	f8b8 3012 	ldrh.w	r3, [r8, #18]
   1ba72:	f003 0314 	and.w	r3, r3, #20
   1ba76:	b153      	cbz	r3, 1ba8e <notify_cb+0xc2>
			LOG_WRN("Link is not encrypted");
   1ba78:	4b1f      	ldr	r3, [pc, #124]	; (1baf8 <notify_cb+0x12c>)
   1ba7a:	9305      	str	r3, [sp, #20]
   1ba7c:	481f      	ldr	r0, [pc, #124]	; (1bafc <notify_cb+0x130>)
   1ba7e:	2302      	movs	r3, #2
   1ba80:	aa04      	add	r2, sp, #16
   1ba82:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ba86:	9304      	str	r3, [sp, #16]
   1ba88:	f00a fa55 	bl	25f36 <z_log_msg_static_create.constprop.0>
			bt_conn_unref(conn);
   1ba8c:	e7ed      	b.n	1ba6a <notify_cb+0x9e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1ba8e:	89ab      	ldrh	r3, [r5, #12]
   1ba90:	2b02      	cmp	r3, #2
   1ba92:	d115      	bne.n	1bac0 <notify_cb+0xf4>
   1ba94:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1ba98:	079a      	lsls	r2, r3, #30
   1ba9a:	d405      	bmi.n	1baa8 <notify_cb+0xdc>
		bt_conn_unref(conn);
   1ba9c:	4620      	mov	r0, r4
   1ba9e:	f7fd f8bd 	bl	18c1c <bt_conn_unref>
		data->err = 0;
   1baa2:	2300      	movs	r3, #0
   1baa4:	60ab      	str	r3, [r5, #8]
   1baa6:	e7ce      	b.n	1ba46 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1baa8:	692a      	ldr	r2, [r5, #16]
   1baaa:	88a9      	ldrh	r1, [r5, #4]
   1baac:	4620      	mov	r0, r4
   1baae:	f7ff fd35 	bl	1b51c <gatt_indicate>
			if (err == 0) {
   1bab2:	4607      	mov	r7, r0
   1bab4:	b980      	cbnz	r0, 1bad8 <notify_cb+0x10c>
				data->ind_params->_ref++;
   1bab6:	692a      	ldr	r2, [r5, #16]
   1bab8:	7d93      	ldrb	r3, [r2, #22]
   1baba:	3301      	adds	r3, #1
   1babc:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1babe:	e7ed      	b.n	1ba9c <notify_cb+0xd0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1bac0:	2b01      	cmp	r3, #1
   1bac2:	d1eb      	bne.n	1ba9c <notify_cb+0xd0>
   1bac4:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1bac8:	07db      	lsls	r3, r3, #31
   1baca:	d5e7      	bpl.n	1ba9c <notify_cb+0xd0>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1bacc:	692a      	ldr	r2, [r5, #16]
   1bace:	88a9      	ldrh	r1, [r5, #4]
   1bad0:	4620      	mov	r0, r4
   1bad2:	f7ff ff13 	bl	1b8fc <gatt_notify>
   1bad6:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1bad8:	4620      	mov	r0, r4
   1bada:	f7fd f89f 	bl	18c1c <bt_conn_unref>
		if (err < 0) {
   1bade:	2f00      	cmp	r7, #0
   1bae0:	dadf      	bge.n	1baa2 <notify_cb+0xd6>
			return BT_GATT_ITER_STOP;
   1bae2:	2000      	movs	r0, #0
   1bae4:	e7b3      	b.n	1ba4e <notify_cb+0x82>
   1bae6:	bf00      	nop
   1bae8:	0001acb9 	.word	0x0001acb9
   1baec:	200006ac 	.word	0x200006ac
   1baf0:	2000310b 	.word	0x2000310b
   1baf4:	00029059 	.word	0x00029059
   1baf8:	0002a387 	.word	0x0002a387
   1bafc:	00027360 	.word	0x00027360

0001bb00 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1bb00:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bb02:	4a06      	ldr	r2, [pc, #24]	; (1bb1c <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1bb04:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bb06:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1bb08:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bb0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1bb0e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bb12:	f00a fb4e 	bl	261b2 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1bb16:	b003      	add	sp, #12
   1bb18:	f85d fb04 	ldr.w	pc, [sp], #4
   1bb1c:	0001b7fd 	.word	0x0001b7fd

0001bb20 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1bb22:	4b08      	ldr	r3, [pc, #32]	; (1bb44 <bt_gatt_att_max_mtu_changed+0x24>)
   1bb24:	681c      	ldr	r4, [r3, #0]
   1bb26:	4605      	mov	r5, r0
   1bb28:	460e      	mov	r6, r1
   1bb2a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1bb2c:	b14c      	cbz	r4, 1bb42 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1bb2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1bb32:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1bb34:	b11b      	cbz	r3, 1bb3e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1bb36:	463a      	mov	r2, r7
   1bb38:	4631      	mov	r1, r6
   1bb3a:	4628      	mov	r0, r5
   1bb3c:	4798      	blx	r3
	return node->next;
   1bb3e:	6864      	ldr	r4, [r4, #4]
   1bb40:	e7f4      	b.n	1bb2c <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1bb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb44:	20002eac 	.word	0x20002eac

0001bb48 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1bb48:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1bb4a:	4603      	mov	r3, r0
   1bb4c:	4a0f      	ldr	r2, [pc, #60]	; (1bb8c <bt_gatt_disconnected+0x44>)
{
   1bb4e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1bb50:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bb54:	2001      	movs	r0, #1
   1bb56:	f00a fb2c 	bl	261b2 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1bb5a:	4620      	mov	r0, r4
   1bb5c:	f7ff f838 	bl	1abd0 <find_cf_cfg>
	if (!cfg) {
   1bb60:	4605      	mov	r5, r0
   1bb62:	b188      	cbz	r0, 1bb88 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bb64:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1bb68:	7a20      	ldrb	r0, [r4, #8]
   1bb6a:	4631      	mov	r1, r6
   1bb6c:	f009 fb3a 	bl	251e4 <bt_addr_le_is_bonded>
   1bb70:	b920      	cbnz	r0, 1bb7c <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1bb72:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1bb74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1bb78:	f7ff b902 	b.w	1ad80 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bb7c:	4631      	mov	r1, r6
   1bb7e:	1c68      	adds	r0, r5, #1
}
   1bb80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bb84:	f00a b9d4 	b.w	25f30 <bt_addr_le_copy>
}
   1bb88:	bd70      	pop	{r4, r5, r6, pc}
   1bb8a:	bf00      	nop
   1bb8c:	0001ae25 	.word	0x0001ae25

0001bb90 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1bb90:	b580      	push	{r7, lr}
   1bb92:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1bb94:	b088      	sub	sp, #32
   1bb96:	466a      	mov	r2, sp
   1bb98:	4b07      	ldr	r3, [pc, #28]	; (1bbb8 <bt_smp_accept.part.0+0x28>)
   1bb9a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bb9e:	2303      	movs	r3, #3
   1bba0:	f842 3f10 	str.w	r3, [r2, #16]!
   1bba4:	4805      	ldr	r0, [pc, #20]	; (1bbbc <bt_smp_accept.part.0+0x2c>)
   1bba6:	2300      	movs	r3, #0
   1bba8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bbac:	f7f8 fa7c 	bl	140a8 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   1bbb0:	f06f 000b 	mvn.w	r0, #11
   1bbb4:	46bd      	mov	sp, r7
   1bbb6:	bd80      	pop	{r7, pc}
   1bbb8:	0002a4de 	.word	0x0002a4de
   1bbbc:	000273a0 	.word	0x000273a0

0001bbc0 <bt_smp_accept>:
		if (smp->chan.conn) {
   1bbc0:	4b04      	ldr	r3, [pc, #16]	; (1bbd4 <bt_smp_accept+0x14>)
   1bbc2:	681a      	ldr	r2, [r3, #0]
   1bbc4:	b10a      	cbz	r2, 1bbca <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bbc6:	f7ff bfe3 	b.w	1bb90 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1bbca:	4803      	ldr	r0, [pc, #12]	; (1bbd8 <bt_smp_accept+0x18>)
   1bbcc:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   1bbce:	600b      	str	r3, [r1, #0]
}
   1bbd0:	4610      	mov	r0, r2
   1bbd2:	4770      	bx	lr
   1bbd4:	20002eb4 	.word	0x20002eb4
   1bbd8:	00027948 	.word	0x00027948

0001bbdc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1bbdc:	4b02      	ldr	r3, [pc, #8]	; (1bbe8 <net_buf_pool_get+0xc>)
   1bbde:	2234      	movs	r2, #52	; 0x34
   1bbe0:	fb02 3000 	mla	r0, r2, r0, r3
   1bbe4:	4770      	bx	lr
   1bbe6:	bf00      	nop
   1bbe8:	200009a8 	.word	0x200009a8

0001bbec <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bbec:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bbee:	4b07      	ldr	r3, [pc, #28]	; (1bc0c <net_buf_id+0x20>)
   1bbf0:	2134      	movs	r1, #52	; 0x34
   1bbf2:	fb01 3302 	mla	r3, r1, r2, r3
   1bbf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bbf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bbfc:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bbfe:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bc00:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1bc04:	fbb0 f0f3 	udiv	r0, r0, r3
   1bc08:	4770      	bx	lr
   1bc0a:	bf00      	nop
   1bc0c:	200009a8 	.word	0x200009a8

0001bc10 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1bc10:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bc12:	4b0a      	ldr	r3, [pc, #40]	; (1bc3c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bc14:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bc16:	2434      	movs	r4, #52	; 0x34
   1bc18:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1bc1c:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bc20:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1bc22:	681a      	ldr	r2, [r3, #0]
   1bc24:	4294      	cmp	r4, r2
   1bc26:	bf94      	ite	ls
   1bc28:	600c      	strls	r4, [r1, #0]
   1bc2a:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1bc2c:	e9d3 5400 	ldrd	r5, r4, [r3]
   1bc30:	f7ff ffdc 	bl	1bbec <net_buf_id>
}
   1bc34:	fb05 4000 	mla	r0, r5, r0, r4
   1bc38:	bd38      	pop	{r3, r4, r5, pc}
   1bc3a:	bf00      	nop
   1bc3c:	200009a8 	.word	0x200009a8

0001bc40 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc44:	b085      	sub	sp, #20
   1bc46:	4605      	mov	r5, r0
   1bc48:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bc4a:	4610      	mov	r0, r2
   1bc4c:	4619      	mov	r1, r3
{
   1bc4e:	4692      	mov	sl, r2
   1bc50:	4699      	mov	r9, r3
   1bc52:	4690      	mov	r8, r2
   1bc54:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bc56:	f00b f90a 	bl	26e6e <sys_clock_timeout_end_calc>
   1bc5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1bc5e:	b945      	cbnz	r5, 1bc72 <net_buf_alloc_len+0x32>
   1bc60:	4966      	ldr	r1, [pc, #408]	; (1bdfc <net_buf_alloc_len+0x1bc>)
   1bc62:	4a67      	ldr	r2, [pc, #412]	; (1be00 <net_buf_alloc_len+0x1c0>)
   1bc64:	4867      	ldr	r0, [pc, #412]	; (1be04 <net_buf_alloc_len+0x1c4>)
   1bc66:	23f4      	movs	r3, #244	; 0xf4
   1bc68:	f008 fd40 	bl	246ec <assert_print>
   1bc6c:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1bc6e:	4864      	ldr	r0, [pc, #400]	; (1be00 <net_buf_alloc_len+0x1c0>)
   1bc70:	e019      	b.n	1bca6 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1bc72:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1bc76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc7a:	f3ef 8b11 	mrs	fp, BASEPRI
   1bc7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bc86:	4630      	mov	r0, r6
   1bc88:	f004 fd1c 	bl	206c4 <z_spin_lock_valid>
   1bc8c:	b968      	cbnz	r0, 1bcaa <net_buf_alloc_len+0x6a>
   1bc8e:	4a5e      	ldr	r2, [pc, #376]	; (1be08 <net_buf_alloc_len+0x1c8>)
   1bc90:	495e      	ldr	r1, [pc, #376]	; (1be0c <net_buf_alloc_len+0x1cc>)
   1bc92:	485c      	ldr	r0, [pc, #368]	; (1be04 <net_buf_alloc_len+0x1c4>)
   1bc94:	2394      	movs	r3, #148	; 0x94
   1bc96:	f008 fd29 	bl	246ec <assert_print>
   1bc9a:	4631      	mov	r1, r6
   1bc9c:	485c      	ldr	r0, [pc, #368]	; (1be10 <net_buf_alloc_len+0x1d0>)
   1bc9e:	f008 fd25 	bl	246ec <assert_print>
   1bca2:	2194      	movs	r1, #148	; 0x94
   1bca4:	4858      	ldr	r0, [pc, #352]	; (1be08 <net_buf_alloc_len+0x1c8>)
   1bca6:	f008 fd1a 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   1bcaa:	4630      	mov	r0, r6
   1bcac:	f004 fd28 	bl	20700 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1bcb0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1bcb2:	2b00      	cmp	r3, #0
   1bcb4:	d070      	beq.n	1bd98 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1bcb6:	8c2a      	ldrh	r2, [r5, #32]
   1bcb8:	429a      	cmp	r2, r3
   1bcba:	d94d      	bls.n	1bd58 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1bcbc:	2200      	movs	r2, #0
   1bcbe:	2300      	movs	r3, #0
   1bcc0:	4628      	mov	r0, r5
   1bcc2:	f004 ff4f 	bl	20b64 <z_impl_k_queue_get>
			if (buf) {
   1bcc6:	4604      	mov	r4, r0
   1bcc8:	2800      	cmp	r0, #0
   1bcca:	d045      	beq.n	1bd58 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bccc:	4630      	mov	r0, r6
   1bcce:	f004 fd07 	bl	206e0 <z_spin_unlock_valid>
   1bcd2:	b958      	cbnz	r0, 1bcec <net_buf_alloc_len+0xac>
   1bcd4:	4a4c      	ldr	r2, [pc, #304]	; (1be08 <net_buf_alloc_len+0x1c8>)
   1bcd6:	494f      	ldr	r1, [pc, #316]	; (1be14 <net_buf_alloc_len+0x1d4>)
   1bcd8:	484a      	ldr	r0, [pc, #296]	; (1be04 <net_buf_alloc_len+0x1c4>)
   1bcda:	23c2      	movs	r3, #194	; 0xc2
   1bcdc:	f008 fd06 	bl	246ec <assert_print>
   1bce0:	4631      	mov	r1, r6
   1bce2:	484d      	ldr	r0, [pc, #308]	; (1be18 <net_buf_alloc_len+0x1d8>)
   1bce4:	f008 fd02 	bl	246ec <assert_print>
   1bce8:	21c2      	movs	r1, #194	; 0xc2
   1bcea:	e7db      	b.n	1bca4 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1bcec:	f38b 8811 	msr	BASEPRI, fp
   1bcf0:	f3bf 8f6f 	isb	sy
	if (size) {
   1bcf4:	9d03      	ldr	r5, [sp, #12]
   1bcf6:	2d00      	cmp	r5, #0
   1bcf8:	d074      	beq.n	1bde4 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bcfa:	ea59 030a 	orrs.w	r3, r9, sl
   1bcfe:	d012      	beq.n	1bd26 <net_buf_alloc_len+0xe6>
   1bd00:	f1b9 3fff 	cmp.w	r9, #4294967295
   1bd04:	bf08      	it	eq
   1bd06:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1bd0a:	d00c      	beq.n	1bd26 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1bd0c:	f007 f9b8 	bl	23080 <sys_clock_tick_get>
   1bd10:	9b01      	ldr	r3, [sp, #4]
   1bd12:	ebb3 0800 	subs.w	r8, r3, r0
   1bd16:	9b02      	ldr	r3, [sp, #8]
   1bd18:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1bd1c:	2f00      	cmp	r7, #0
   1bd1e:	bfbc      	itt	lt
   1bd20:	f04f 0800 	movlt.w	r8, #0
   1bd24:	4647      	movlt	r7, r8
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bd26:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bd28:	4e3c      	ldr	r6, [pc, #240]	; (1be1c <net_buf_alloc_len+0x1dc>)
   1bd2a:	f04f 0934 	mov.w	r9, #52	; 0x34
   1bd2e:	fb09 6303 	mla	r3, r9, r3, r6
   1bd32:	4642      	mov	r2, r8
   1bd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd36:	681b      	ldr	r3, [r3, #0]
   1bd38:	a903      	add	r1, sp, #12
   1bd3a:	f8d3 a000 	ldr.w	sl, [r3]
   1bd3e:	4620      	mov	r0, r4
   1bd40:	463b      	mov	r3, r7
   1bd42:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1bd44:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1bd46:	2800      	cmp	r0, #0
   1bd48:	d13c      	bne.n	1bdc4 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1bd4a:	7aa0      	ldrb	r0, [r4, #10]
   1bd4c:	4621      	mov	r1, r4
   1bd4e:	fb00 6009 	mla	r0, r0, r9, r6
   1bd52:	f00a ffca 	bl	26cea <k_queue_prepend>
}
   1bd56:	e030      	b.n	1bdba <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1bd58:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1bd5a:	1e63      	subs	r3, r4, #1
   1bd5c:	846b      	strh	r3, [r5, #34]	; 0x22
   1bd5e:	4630      	mov	r0, r6
   1bd60:	f004 fcbe 	bl	206e0 <z_spin_unlock_valid>
   1bd64:	2800      	cmp	r0, #0
   1bd66:	d0b5      	beq.n	1bcd4 <net_buf_alloc_len+0x94>
   1bd68:	f38b 8811 	msr	BASEPRI, fp
   1bd6c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bd70:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bd74:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bd76:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bd78:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bd7a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bd7c:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bd80:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1bd84:	4b25      	ldr	r3, [pc, #148]	; (1be1c <net_buf_alloc_len+0x1dc>)
   1bd86:	4a26      	ldr	r2, [pc, #152]	; (1be20 <net_buf_alloc_len+0x1e0>)
   1bd88:	1aeb      	subs	r3, r5, r3
   1bd8a:	109b      	asrs	r3, r3, #2
   1bd8c:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1bd8e:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1bd90:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1bd94:	72e3      	strb	r3, [r4, #11]
		goto success;
   1bd96:	e7ad      	b.n	1bcf4 <net_buf_alloc_len+0xb4>
   1bd98:	4630      	mov	r0, r6
   1bd9a:	f004 fca1 	bl	206e0 <z_spin_unlock_valid>
   1bd9e:	2800      	cmp	r0, #0
   1bda0:	d098      	beq.n	1bcd4 <net_buf_alloc_len+0x94>
   1bda2:	f38b 8811 	msr	BASEPRI, fp
   1bda6:	f3bf 8f6f 	isb	sy
   1bdaa:	4652      	mov	r2, sl
   1bdac:	464b      	mov	r3, r9
   1bdae:	4628      	mov	r0, r5
   1bdb0:	f004 fed8 	bl	20b64 <z_impl_k_queue_get>
	if (!buf) {
   1bdb4:	4604      	mov	r4, r0
   1bdb6:	2800      	cmp	r0, #0
   1bdb8:	d19c      	bne.n	1bcf4 <net_buf_alloc_len+0xb4>
		return NULL;
   1bdba:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1bdbc:	4620      	mov	r0, r4
   1bdbe:	b005      	add	sp, #20
   1bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1bdc4:	9b03      	ldr	r3, [sp, #12]
   1bdc6:	429d      	cmp	r5, r3
   1bdc8:	d90d      	bls.n	1bde6 <net_buf_alloc_len+0x1a6>
   1bdca:	4916      	ldr	r1, [pc, #88]	; (1be24 <net_buf_alloc_len+0x1e4>)
   1bdcc:	4a0c      	ldr	r2, [pc, #48]	; (1be00 <net_buf_alloc_len+0x1c0>)
   1bdce:	480d      	ldr	r0, [pc, #52]	; (1be04 <net_buf_alloc_len+0x1c4>)
   1bdd0:	f240 1355 	movw	r3, #341	; 0x155
   1bdd4:	f008 fc8a 	bl	246ec <assert_print>
   1bdd8:	4813      	ldr	r0, [pc, #76]	; (1be28 <net_buf_alloc_len+0x1e8>)
   1bdda:	f008 fc87 	bl	246ec <assert_print>
   1bdde:	f240 1155 	movw	r1, #341	; 0x155
   1bde2:	e744      	b.n	1bc6e <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1bde4:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1bde6:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1bde8:	2201      	movs	r2, #1
	buf->frags = NULL;
   1bdea:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1bdec:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1bdee:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1bdf0:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1bdf2:	6963      	ldr	r3, [r4, #20]
   1bdf4:	8262      	strh	r2, [r4, #18]
   1bdf6:	60e3      	str	r3, [r4, #12]
}
   1bdf8:	e7e0      	b.n	1bdbc <net_buf_alloc_len+0x17c>
   1bdfa:	bf00      	nop
   1bdfc:	0002a559 	.word	0x0002a559
   1be00:	0002a50a 	.word	0x0002a50a
   1be04:	00027f8a 	.word	0x00027f8a
   1be08:	0002837e 	.word	0x0002837e
   1be0c:	000283d7 	.word	0x000283d7
   1be10:	000283ec 	.word	0x000283ec
   1be14:	000283ab 	.word	0x000283ab
   1be18:	000283c2 	.word	0x000283c2
   1be1c:	200009a8 	.word	0x200009a8
   1be20:	c4ec4ec5 	.word	0xc4ec4ec5
   1be24:	0002a55e 	.word	0x0002a55e
   1be28:	0002a56f 	.word	0x0002a56f

0001be2c <net_buf_slist_put>:
}

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1be2c:	b570      	push	{r4, r5, r6, lr}
   1be2e:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1be30:	4605      	mov	r5, r0
   1be32:	b958      	cbnz	r0, 1be4c <net_buf_slist_put+0x20>
   1be34:	4928      	ldr	r1, [pc, #160]	; (1bed8 <net_buf_slist_put+0xac>)
   1be36:	4a29      	ldr	r2, [pc, #164]	; (1bedc <net_buf_slist_put+0xb0>)
   1be38:	4829      	ldr	r0, [pc, #164]	; (1bee0 <net_buf_slist_put+0xb4>)
   1be3a:	f240 13b3 	movw	r3, #435	; 0x1b3
   1be3e:	f008 fc55 	bl	246ec <assert_print>
   1be42:	f240 11b3 	movw	r1, #435	; 0x1b3
	__ASSERT_NO_MSG(buf);
   1be46:	4825      	ldr	r0, [pc, #148]	; (1bedc <net_buf_slist_put+0xb0>)
   1be48:	f008 fc49 	bl	246de <assert_post_action>
   1be4c:	b949      	cbnz	r1, 1be62 <net_buf_slist_put+0x36>
   1be4e:	4925      	ldr	r1, [pc, #148]	; (1bee4 <net_buf_slist_put+0xb8>)
   1be50:	4a22      	ldr	r2, [pc, #136]	; (1bedc <net_buf_slist_put+0xb0>)
   1be52:	4823      	ldr	r0, [pc, #140]	; (1bee0 <net_buf_slist_put+0xb4>)
   1be54:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   1be58:	f008 fc48 	bl	246ec <assert_print>
   1be5c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   1be60:	e7f1      	b.n	1be46 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1be62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be66:	f3ef 8611 	mrs	r6, BASEPRI
   1be6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1be6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be72:	481d      	ldr	r0, [pc, #116]	; (1bee8 <net_buf_slist_put+0xbc>)
   1be74:	f004 fc26 	bl	206c4 <z_spin_lock_valid>
   1be78:	b960      	cbnz	r0, 1be94 <net_buf_slist_put+0x68>
   1be7a:	4a1c      	ldr	r2, [pc, #112]	; (1beec <net_buf_slist_put+0xc0>)
   1be7c:	491c      	ldr	r1, [pc, #112]	; (1bef0 <net_buf_slist_put+0xc4>)
   1be7e:	4818      	ldr	r0, [pc, #96]	; (1bee0 <net_buf_slist_put+0xb4>)
   1be80:	2394      	movs	r3, #148	; 0x94
   1be82:	f008 fc33 	bl	246ec <assert_print>
   1be86:	4918      	ldr	r1, [pc, #96]	; (1bee8 <net_buf_slist_put+0xbc>)
   1be88:	481a      	ldr	r0, [pc, #104]	; (1bef4 <net_buf_slist_put+0xc8>)
   1be8a:	f008 fc2f 	bl	246ec <assert_print>
   1be8e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1be90:	4816      	ldr	r0, [pc, #88]	; (1beec <net_buf_slist_put+0xc0>)
   1be92:	e7d9      	b.n	1be48 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1be94:	4814      	ldr	r0, [pc, #80]	; (1bee8 <net_buf_slist_put+0xbc>)
   1be96:	f004 fc33 	bl	20700 <z_spin_lock_set_owner>
	parent->next = child;
   1be9a:	2300      	movs	r3, #0
   1be9c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1be9e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1bea0:	b98b      	cbnz	r3, 1bec6 <net_buf_slist_put+0x9a>
	list->head = node;
   1bea2:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bea6:	4810      	ldr	r0, [pc, #64]	; (1bee8 <net_buf_slist_put+0xbc>)
   1bea8:	f004 fc1a 	bl	206e0 <z_spin_unlock_valid>
   1beac:	b970      	cbnz	r0, 1becc <net_buf_slist_put+0xa0>
   1beae:	4a0f      	ldr	r2, [pc, #60]	; (1beec <net_buf_slist_put+0xc0>)
   1beb0:	4911      	ldr	r1, [pc, #68]	; (1bef8 <net_buf_slist_put+0xcc>)
   1beb2:	480b      	ldr	r0, [pc, #44]	; (1bee0 <net_buf_slist_put+0xb4>)
   1beb4:	23c2      	movs	r3, #194	; 0xc2
   1beb6:	f008 fc19 	bl	246ec <assert_print>
   1beba:	490b      	ldr	r1, [pc, #44]	; (1bee8 <net_buf_slist_put+0xbc>)
   1bebc:	480f      	ldr	r0, [pc, #60]	; (1befc <net_buf_slist_put+0xd0>)
   1bebe:	f008 fc15 	bl	246ec <assert_print>
   1bec2:	21c2      	movs	r1, #194	; 0xc2
   1bec4:	e7e4      	b.n	1be90 <net_buf_slist_put+0x64>
	parent->next = child;
   1bec6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bec8:	606c      	str	r4, [r5, #4]
}
   1beca:	e7ec      	b.n	1bea6 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1becc:	f386 8811 	msr	BASEPRI, r6
   1bed0:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1bed4:	bd70      	pop	{r4, r5, r6, pc}
   1bed6:	bf00      	nop
   1bed8:	0002a572 	.word	0x0002a572
   1bedc:	0002a50a 	.word	0x0002a50a
   1bee0:	00027f8a 	.word	0x00027f8a
   1bee4:	0002a58c 	.word	0x0002a58c
   1bee8:	20002ee4 	.word	0x20002ee4
   1beec:	0002837e 	.word	0x0002837e
   1bef0:	000283d7 	.word	0x000283d7
   1bef4:	000283ec 	.word	0x000283ec
   1bef8:	000283ab 	.word	0x000283ab
   1befc:	000283c2 	.word	0x000283c2

0001bf00 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1bf00:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1bf02:	4604      	mov	r4, r0
   1bf04:	b958      	cbnz	r0, 1bf1e <net_buf_slist_get+0x1e>
   1bf06:	4923      	ldr	r1, [pc, #140]	; (1bf94 <net_buf_slist_get+0x94>)
   1bf08:	4823      	ldr	r0, [pc, #140]	; (1bf98 <net_buf_slist_get+0x98>)
   1bf0a:	4a24      	ldr	r2, [pc, #144]	; (1bf9c <net_buf_slist_get+0x9c>)
   1bf0c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1bf10:	f008 fbec 	bl	246ec <assert_print>
   1bf14:	4821      	ldr	r0, [pc, #132]	; (1bf9c <net_buf_slist_get+0x9c>)
   1bf16:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bf1a:	f008 fbe0 	bl	246de <assert_post_action>
	__asm__ volatile(
   1bf1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf22:	f3ef 8611 	mrs	r6, BASEPRI
   1bf26:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf2a:	f3bf 8f6f 	isb	sy
   1bf2e:	481c      	ldr	r0, [pc, #112]	; (1bfa0 <net_buf_slist_get+0xa0>)
   1bf30:	f004 fbc8 	bl	206c4 <z_spin_lock_valid>
   1bf34:	b960      	cbnz	r0, 1bf50 <net_buf_slist_get+0x50>
   1bf36:	4a1b      	ldr	r2, [pc, #108]	; (1bfa4 <net_buf_slist_get+0xa4>)
   1bf38:	491b      	ldr	r1, [pc, #108]	; (1bfa8 <net_buf_slist_get+0xa8>)
   1bf3a:	4817      	ldr	r0, [pc, #92]	; (1bf98 <net_buf_slist_get+0x98>)
   1bf3c:	2394      	movs	r3, #148	; 0x94
   1bf3e:	f008 fbd5 	bl	246ec <assert_print>
   1bf42:	4917      	ldr	r1, [pc, #92]	; (1bfa0 <net_buf_slist_get+0xa0>)
   1bf44:	4819      	ldr	r0, [pc, #100]	; (1bfac <net_buf_slist_get+0xac>)
   1bf46:	f008 fbd1 	bl	246ec <assert_print>
   1bf4a:	2194      	movs	r1, #148	; 0x94
   1bf4c:	4815      	ldr	r0, [pc, #84]	; (1bfa4 <net_buf_slist_get+0xa4>)
   1bf4e:	e7e4      	b.n	1bf1a <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1bf50:	4813      	ldr	r0, [pc, #76]	; (1bfa0 <net_buf_slist_get+0xa0>)
   1bf52:	f004 fbd5 	bl	20700 <z_spin_lock_set_owner>
	return list->head;
   1bf56:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1bf58:	b12d      	cbz	r5, 1bf66 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf5a:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1bf5c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1bf5e:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf60:	4295      	cmp	r5, r2
	list->tail = node;
   1bf62:	bf08      	it	eq
   1bf64:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bf66:	480e      	ldr	r0, [pc, #56]	; (1bfa0 <net_buf_slist_get+0xa0>)
   1bf68:	f004 fbba 	bl	206e0 <z_spin_unlock_valid>
   1bf6c:	b958      	cbnz	r0, 1bf86 <net_buf_slist_get+0x86>
   1bf6e:	4a0d      	ldr	r2, [pc, #52]	; (1bfa4 <net_buf_slist_get+0xa4>)
   1bf70:	490f      	ldr	r1, [pc, #60]	; (1bfb0 <net_buf_slist_get+0xb0>)
   1bf72:	4809      	ldr	r0, [pc, #36]	; (1bf98 <net_buf_slist_get+0x98>)
   1bf74:	23c2      	movs	r3, #194	; 0xc2
   1bf76:	f008 fbb9 	bl	246ec <assert_print>
   1bf7a:	4909      	ldr	r1, [pc, #36]	; (1bfa0 <net_buf_slist_get+0xa0>)
   1bf7c:	480d      	ldr	r0, [pc, #52]	; (1bfb4 <net_buf_slist_get+0xb4>)
   1bf7e:	f008 fbb5 	bl	246ec <assert_print>
   1bf82:	21c2      	movs	r1, #194	; 0xc2
   1bf84:	e7e2      	b.n	1bf4c <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1bf86:	f386 8811 	msr	BASEPRI, r6
   1bf8a:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1bf8e:	4628      	mov	r0, r5
   1bf90:	bd70      	pop	{r4, r5, r6, pc}
   1bf92:	bf00      	nop
   1bf94:	0002a572 	.word	0x0002a572
   1bf98:	00027f8a 	.word	0x00027f8a
   1bf9c:	0002a50a 	.word	0x0002a50a
   1bfa0:	20002ee4 	.word	0x20002ee4
   1bfa4:	0002837e 	.word	0x0002837e
   1bfa8:	000283d7 	.word	0x000283d7
   1bfac:	000283ec 	.word	0x000283ec
   1bfb0:	000283ab 	.word	0x000283ab
   1bfb4:	000283c2 	.word	0x000283c2

0001bfb8 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1bfb8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1bfba:	b958      	cbnz	r0, 1bfd4 <net_buf_put+0x1c>
   1bfbc:	490d      	ldr	r1, [pc, #52]	; (1bff4 <net_buf_put+0x3c>)
   1bfbe:	4a0e      	ldr	r2, [pc, #56]	; (1bff8 <net_buf_put+0x40>)
   1bfc0:	480e      	ldr	r0, [pc, #56]	; (1bffc <net_buf_put+0x44>)
   1bfc2:	f240 13cd 	movw	r3, #461	; 0x1cd
   1bfc6:	f008 fb91 	bl	246ec <assert_print>
   1bfca:	f240 11cd 	movw	r1, #461	; 0x1cd
	__ASSERT_NO_MSG(buf);
   1bfce:	480a      	ldr	r0, [pc, #40]	; (1bff8 <net_buf_put+0x40>)
   1bfd0:	f008 fb85 	bl	246de <assert_post_action>
   1bfd4:	b949      	cbnz	r1, 1bfea <net_buf_put+0x32>
   1bfd6:	490a      	ldr	r1, [pc, #40]	; (1c000 <net_buf_put+0x48>)
   1bfd8:	4a07      	ldr	r2, [pc, #28]	; (1bff8 <net_buf_put+0x40>)
   1bfda:	4808      	ldr	r0, [pc, #32]	; (1bffc <net_buf_put+0x44>)
   1bfdc:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   1bfe0:	f008 fb84 	bl	246ec <assert_print>
   1bfe4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1bfe8:	e7f1      	b.n	1bfce <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1bfea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1bfee:	f00a be71 	b.w	26cd4 <k_queue_append>
   1bff2:	bf00      	nop
   1bff4:	0002a577 	.word	0x0002a577
   1bff8:	0002a50a 	.word	0x0002a50a
   1bffc:	00027f8a 	.word	0x00027f8a
   1c000:	0002a58c 	.word	0x0002a58c

0001c004 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c008:	4605      	mov	r5, r0
   1c00a:	b328      	cbz	r0, 1c058 <net_buf_unref+0x54>
   1c00c:	4e1b      	ldr	r6, [pc, #108]	; (1c07c <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c00e:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1c010:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1c014:	462c      	mov	r4, r5
   1c016:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1c018:	7a23      	ldrb	r3, [r4, #8]
   1c01a:	3b01      	subs	r3, #1
   1c01c:	b2db      	uxtb	r3, r3
   1c01e:	7223      	strb	r3, [r4, #8]
   1c020:	b9c3      	cbnz	r3, 1c054 <net_buf_unref+0x50>
		if (buf->__buf) {
   1c022:	6961      	ldr	r1, [r4, #20]
   1c024:	b159      	cbz	r1, 1c03e <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c026:	7a63      	ldrb	r3, [r4, #9]
   1c028:	07db      	lsls	r3, r3, #31
   1c02a:	d407      	bmi.n	1c03c <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c02c:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1c02e:	fb08 6303 	mla	r3, r8, r3, r6
   1c032:	4620      	mov	r0, r4
   1c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c036:	681b      	ldr	r3, [r3, #0]
   1c038:	689b      	ldr	r3, [r3, #8]
   1c03a:	4798      	blx	r3
			buf->__buf = NULL;
   1c03c:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1c03e:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1c040:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c042:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1c046:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1c048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c04a:	b18b      	cbz	r3, 1c070 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1c04c:	4620      	mov	r0, r4
   1c04e:	4798      	blx	r3
	while (buf) {
   1c050:	2d00      	cmp	r5, #0
   1c052:	d1df      	bne.n	1c014 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1c058:	4909      	ldr	r1, [pc, #36]	; (1c080 <net_buf_unref+0x7c>)
   1c05a:	480a      	ldr	r0, [pc, #40]	; (1c084 <net_buf_unref+0x80>)
   1c05c:	4a0a      	ldr	r2, [pc, #40]	; (1c088 <net_buf_unref+0x84>)
   1c05e:	f240 13d9 	movw	r3, #473	; 0x1d9
   1c062:	f008 fb43 	bl	246ec <assert_print>
   1c066:	4808      	ldr	r0, [pc, #32]	; (1c088 <net_buf_unref+0x84>)
   1c068:	f240 11d9 	movw	r1, #473	; 0x1d9
   1c06c:	f008 fb37 	bl	246de <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1c070:	4621      	mov	r1, r4
   1c072:	fb00 6008 	mla	r0, r0, r8, r6
   1c076:	f00a fe38 	bl	26cea <k_queue_prepend>
}
   1c07a:	e7e9      	b.n	1c050 <net_buf_unref+0x4c>
   1c07c:	200009a8 	.word	0x200009a8
   1c080:	0002a58c 	.word	0x0002a58c
   1c084:	00027f8a 	.word	0x00027f8a
   1c088:	0002a50a 	.word	0x0002a50a

0001c08c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1c08c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1c08e:	b958      	cbnz	r0, 1c0a8 <net_buf_ref+0x1c>
   1c090:	4907      	ldr	r1, [pc, #28]	; (1c0b0 <net_buf_ref+0x24>)
   1c092:	4808      	ldr	r0, [pc, #32]	; (1c0b4 <net_buf_ref+0x28>)
   1c094:	4a08      	ldr	r2, [pc, #32]	; (1c0b8 <net_buf_ref+0x2c>)
   1c096:	f44f 7302 	mov.w	r3, #520	; 0x208
   1c09a:	f008 fb27 	bl	246ec <assert_print>
   1c09e:	4806      	ldr	r0, [pc, #24]	; (1c0b8 <net_buf_ref+0x2c>)
   1c0a0:	f44f 7102 	mov.w	r1, #520	; 0x208
   1c0a4:	f008 fb1b 	bl	246de <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c0a8:	7a02      	ldrb	r2, [r0, #8]
   1c0aa:	3201      	adds	r2, #1
   1c0ac:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1c0ae:	bd08      	pop	{r3, pc}
   1c0b0:	0002a58c 	.word	0x0002a58c
   1c0b4:	00027f8a 	.word	0x00027f8a
   1c0b8:	0002a50a 	.word	0x0002a50a

0001c0bc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c0bc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1c0be:	4603      	mov	r3, r0
   1c0c0:	b958      	cbnz	r0, 1c0da <net_buf_frag_last+0x1e>
   1c0c2:	4908      	ldr	r1, [pc, #32]	; (1c0e4 <net_buf_frag_last+0x28>)
   1c0c4:	4808      	ldr	r0, [pc, #32]	; (1c0e8 <net_buf_frag_last+0x2c>)
   1c0c6:	4a09      	ldr	r2, [pc, #36]	; (1c0ec <net_buf_frag_last+0x30>)
   1c0c8:	f240 2345 	movw	r3, #581	; 0x245
   1c0cc:	f008 fb0e 	bl	246ec <assert_print>
   1c0d0:	4806      	ldr	r0, [pc, #24]	; (1c0ec <net_buf_frag_last+0x30>)
   1c0d2:	f240 2145 	movw	r1, #581	; 0x245
   1c0d6:	f008 fb02 	bl	246de <assert_post_action>

	while (buf->frags) {
   1c0da:	4618      	mov	r0, r3
   1c0dc:	685b      	ldr	r3, [r3, #4]
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	d1fb      	bne.n	1c0da <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1c0e2:	bd08      	pop	{r3, pc}
   1c0e4:	0002a58c 	.word	0x0002a58c
   1c0e8:	00027f8a 	.word	0x00027f8a
   1c0ec:	0002a50a 	.word	0x0002a50a

0001c0f0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c0f0:	b570      	push	{r4, r5, r6, lr}
   1c0f2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1c0f4:	4604      	mov	r4, r0
   1c0f6:	b958      	cbnz	r0, 1c110 <net_buf_frag_insert+0x20>
   1c0f8:	490f      	ldr	r1, [pc, #60]	; (1c138 <net_buf_frag_insert+0x48>)
   1c0fa:	4a10      	ldr	r2, [pc, #64]	; (1c13c <net_buf_frag_insert+0x4c>)
   1c0fc:	4810      	ldr	r0, [pc, #64]	; (1c140 <net_buf_frag_insert+0x50>)
   1c0fe:	f44f 7314 	mov.w	r3, #592	; 0x250
   1c102:	f008 faf3 	bl	246ec <assert_print>
   1c106:	f44f 7114 	mov.w	r1, #592	; 0x250
	__ASSERT_NO_MSG(frag);
   1c10a:	480c      	ldr	r0, [pc, #48]	; (1c13c <net_buf_frag_insert+0x4c>)
   1c10c:	f008 fae7 	bl	246de <assert_post_action>
   1c110:	b949      	cbnz	r1, 1c126 <net_buf_frag_insert+0x36>
   1c112:	490c      	ldr	r1, [pc, #48]	; (1c144 <net_buf_frag_insert+0x54>)
   1c114:	4a09      	ldr	r2, [pc, #36]	; (1c13c <net_buf_frag_insert+0x4c>)
   1c116:	480a      	ldr	r0, [pc, #40]	; (1c140 <net_buf_frag_insert+0x50>)
   1c118:	f240 2351 	movw	r3, #593	; 0x251
   1c11c:	f008 fae6 	bl	246ec <assert_print>
   1c120:	f240 2151 	movw	r1, #593	; 0x251
   1c124:	e7f1      	b.n	1c10a <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1c126:	6846      	ldr	r6, [r0, #4]
   1c128:	b11e      	cbz	r6, 1c132 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c12a:	4608      	mov	r0, r1
   1c12c:	f7ff ffc6 	bl	1c0bc <net_buf_frag_last>
   1c130:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c132:	6065      	str	r5, [r4, #4]
}
   1c134:	bd70      	pop	{r4, r5, r6, pc}
   1c136:	bf00      	nop
   1c138:	0002a57c 	.word	0x0002a57c
   1c13c:	0002a50a 	.word	0x0002a50a
   1c140:	00027f8a 	.word	0x00027f8a
   1c144:	0002a583 	.word	0x0002a583

0001c148 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c148:	b538      	push	{r3, r4, r5, lr}
   1c14a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1c14c:	460c      	mov	r4, r1
   1c14e:	b959      	cbnz	r1, 1c168 <net_buf_frag_add+0x20>
   1c150:	490c      	ldr	r1, [pc, #48]	; (1c184 <net_buf_frag_add+0x3c>)
   1c152:	480d      	ldr	r0, [pc, #52]	; (1c188 <net_buf_frag_add+0x40>)
   1c154:	4a0d      	ldr	r2, [pc, #52]	; (1c18c <net_buf_frag_add+0x44>)
   1c156:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1c15a:	f008 fac7 	bl	246ec <assert_print>
   1c15e:	480b      	ldr	r0, [pc, #44]	; (1c18c <net_buf_frag_add+0x44>)
   1c160:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1c164:	f008 fabb 	bl	246de <assert_post_action>

	if (!head) {
   1c168:	b920      	cbnz	r0, 1c174 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1c16e:	4608      	mov	r0, r1
   1c170:	f7ff bf8c 	b.w	1c08c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c174:	f7ff ffa2 	bl	1c0bc <net_buf_frag_last>
   1c178:	4621      	mov	r1, r4
   1c17a:	f7ff ffb9 	bl	1c0f0 <net_buf_frag_insert>
}
   1c17e:	4628      	mov	r0, r5
   1c180:	bd38      	pop	{r3, r4, r5, pc}
   1c182:	bf00      	nop
   1c184:	0002a583 	.word	0x0002a583
   1c188:	00027f8a 	.word	0x00027f8a
   1c18c:	0002a50a 	.word	0x0002a50a

0001c190 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c190:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1c192:	b948      	cbnz	r0, 1c1a8 <net_buf_simple_reserve+0x18>
   1c194:	490b      	ldr	r1, [pc, #44]	; (1c1c4 <net_buf_simple_reserve+0x34>)
   1c196:	4a0c      	ldr	r2, [pc, #48]	; (1c1c8 <net_buf_simple_reserve+0x38>)
   1c198:	480c      	ldr	r0, [pc, #48]	; (1c1cc <net_buf_simple_reserve+0x3c>)
   1c19a:	232b      	movs	r3, #43	; 0x2b
   1c19c:	f008 faa6 	bl	246ec <assert_print>
   1c1a0:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   1c1a2:	4809      	ldr	r0, [pc, #36]	; (1c1c8 <net_buf_simple_reserve+0x38>)
   1c1a4:	f008 fa9b 	bl	246de <assert_post_action>
   1c1a8:	8883      	ldrh	r3, [r0, #4]
   1c1aa:	b13b      	cbz	r3, 1c1bc <net_buf_simple_reserve+0x2c>
   1c1ac:	4908      	ldr	r1, [pc, #32]	; (1c1d0 <net_buf_simple_reserve+0x40>)
   1c1ae:	4a06      	ldr	r2, [pc, #24]	; (1c1c8 <net_buf_simple_reserve+0x38>)
   1c1b0:	4806      	ldr	r0, [pc, #24]	; (1c1cc <net_buf_simple_reserve+0x3c>)
   1c1b2:	232c      	movs	r3, #44	; 0x2c
   1c1b4:	f008 fa9a 	bl	246ec <assert_print>
   1c1b8:	212c      	movs	r1, #44	; 0x2c
   1c1ba:	e7f2      	b.n	1c1a2 <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c1bc:	6883      	ldr	r3, [r0, #8]
   1c1be:	440b      	add	r3, r1
   1c1c0:	6003      	str	r3, [r0, #0]
}
   1c1c2:	bd08      	pop	{r3, pc}
   1c1c4:	0002a58c 	.word	0x0002a58c
   1c1c8:	0002a590 	.word	0x0002a590
   1c1cc:	00027f8a 	.word	0x00027f8a
   1c1d0:	0002a5bb 	.word	0x0002a5bb

0001c1d4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1c1d4:	b508      	push	{r3, lr}
   1c1d6:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c1d8:	6800      	ldr	r0, [r0, #0]
   1c1da:	689a      	ldr	r2, [r3, #8]
   1c1dc:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1c1de:	4291      	cmp	r1, r2
   1c1e0:	d90b      	bls.n	1c1fa <net_buf_simple_push+0x26>
   1c1e2:	4909      	ldr	r1, [pc, #36]	; (1c208 <net_buf_simple_push+0x34>)
   1c1e4:	4809      	ldr	r0, [pc, #36]	; (1c20c <net_buf_simple_push+0x38>)
   1c1e6:	4a0a      	ldr	r2, [pc, #40]	; (1c210 <net_buf_simple_push+0x3c>)
   1c1e8:	f240 132d 	movw	r3, #301	; 0x12d
   1c1ec:	f008 fa7e 	bl	246ec <assert_print>
   1c1f0:	4807      	ldr	r0, [pc, #28]	; (1c210 <net_buf_simple_push+0x3c>)
   1c1f2:	f240 112d 	movw	r1, #301	; 0x12d
   1c1f6:	f008 fa72 	bl	246de <assert_post_action>
	buf->len += len;
   1c1fa:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1c1fc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1c1fe:	4411      	add	r1, r2
	buf->data -= len;
   1c200:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1c202:	8099      	strh	r1, [r3, #4]
}
   1c204:	bd08      	pop	{r3, pc}
   1c206:	bf00      	nop
   1c208:	0002a5da 	.word	0x0002a5da
   1c20c:	00027f8a 	.word	0x00027f8a
   1c210:	0002a590 	.word	0x0002a590

0001c214 <net_buf_simple_pull>:
{
   1c214:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1c216:	8882      	ldrh	r2, [r0, #4]
   1c218:	428a      	cmp	r2, r1
{
   1c21a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1c21c:	d20b      	bcs.n	1c236 <net_buf_simple_pull+0x22>
   1c21e:	4909      	ldr	r1, [pc, #36]	; (1c244 <net_buf_simple_pull+0x30>)
   1c220:	4809      	ldr	r0, [pc, #36]	; (1c248 <net_buf_simple_pull+0x34>)
   1c222:	4a0a      	ldr	r2, [pc, #40]	; (1c24c <net_buf_simple_pull+0x38>)
   1c224:	f240 138d 	movw	r3, #397	; 0x18d
   1c228:	f008 fa60 	bl	246ec <assert_print>
   1c22c:	4807      	ldr	r0, [pc, #28]	; (1c24c <net_buf_simple_pull+0x38>)
   1c22e:	f240 118d 	movw	r1, #397	; 0x18d
   1c232:	f008 fa54 	bl	246de <assert_post_action>
	buf->len -= len;
   1c236:	1a52      	subs	r2, r2, r1
   1c238:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1c23a:	6800      	ldr	r0, [r0, #0]
   1c23c:	4408      	add	r0, r1
   1c23e:	6018      	str	r0, [r3, #0]
}
   1c240:	bd08      	pop	{r3, pc}
   1c242:	bf00      	nop
   1c244:	0002a5ca 	.word	0x0002a5ca
   1c248:	00027f8a 	.word	0x00027f8a
   1c24c:	0002a590 	.word	0x0002a590

0001c250 <net_buf_simple_pull_mem>:
{
   1c250:	b508      	push	{r3, lr}
   1c252:	4603      	mov	r3, r0
	void *data = buf->data;
   1c254:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1c256:	889a      	ldrh	r2, [r3, #4]
   1c258:	428a      	cmp	r2, r1
   1c25a:	d20b      	bcs.n	1c274 <net_buf_simple_pull_mem+0x24>
   1c25c:	4908      	ldr	r1, [pc, #32]	; (1c280 <net_buf_simple_pull_mem+0x30>)
   1c25e:	4809      	ldr	r0, [pc, #36]	; (1c284 <net_buf_simple_pull_mem+0x34>)
   1c260:	4a09      	ldr	r2, [pc, #36]	; (1c288 <net_buf_simple_pull_mem+0x38>)
   1c262:	f240 1399 	movw	r3, #409	; 0x199
   1c266:	f008 fa41 	bl	246ec <assert_print>
   1c26a:	4807      	ldr	r0, [pc, #28]	; (1c288 <net_buf_simple_pull_mem+0x38>)
   1c26c:	f240 1199 	movw	r1, #409	; 0x199
   1c270:	f008 fa35 	bl	246de <assert_post_action>
	buf->len -= len;
   1c274:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1c276:	4401      	add	r1, r0
	buf->len -= len;
   1c278:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1c27a:	6019      	str	r1, [r3, #0]
}
   1c27c:	bd08      	pop	{r3, pc}
   1c27e:	bf00      	nop
   1c280:	0002a5ca 	.word	0x0002a5ca
   1c284:	00027f8a 	.word	0x00027f8a
   1c288:	0002a590 	.word	0x0002a590

0001c28c <net_buf_simple_add>:
{
   1c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1c28e:	8885      	ldrh	r5, [r0, #4]
   1c290:	6803      	ldr	r3, [r0, #0]
   1c292:	460e      	mov	r6, r1
   1c294:	4604      	mov	r4, r0
   1c296:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1c298:	f00a f836 	bl	26308 <net_buf_simple_tailroom>
   1c29c:	42b0      	cmp	r0, r6
   1c29e:	d209      	bcs.n	1c2b4 <net_buf_simple_add+0x28>
   1c2a0:	4906      	ldr	r1, [pc, #24]	; (1c2bc <net_buf_simple_add+0x30>)
   1c2a2:	4807      	ldr	r0, [pc, #28]	; (1c2c0 <net_buf_simple_add+0x34>)
   1c2a4:	4a07      	ldr	r2, [pc, #28]	; (1c2c4 <net_buf_simple_add+0x38>)
   1c2a6:	233e      	movs	r3, #62	; 0x3e
   1c2a8:	f008 fa20 	bl	246ec <assert_print>
   1c2ac:	4805      	ldr	r0, [pc, #20]	; (1c2c4 <net_buf_simple_add+0x38>)
   1c2ae:	213e      	movs	r1, #62	; 0x3e
   1c2b0:	f008 fa15 	bl	246de <assert_post_action>
	buf->len += len;
   1c2b4:	4435      	add	r5, r6
   1c2b6:	80a5      	strh	r5, [r4, #4]
}
   1c2b8:	4638      	mov	r0, r7
   1c2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c2bc:	0002a5fe 	.word	0x0002a5fe
   1c2c0:	00027f8a 	.word	0x00027f8a
   1c2c4:	0002a590 	.word	0x0002a590

0001c2c8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c2ca:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c2cc:	490a      	ldr	r1, [pc, #40]	; (1c2f8 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2ce:	4a0b      	ldr	r2, [pc, #44]	; (1c2fc <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c2d0:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2d2:	2340      	movs	r3, #64	; 0x40
   1c2d4:	9300      	str	r3, [sp, #0]
   1c2d6:	1149      	asrs	r1, r1, #5
{
   1c2d8:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2da:	4623      	mov	r3, r4
   1c2dc:	4808      	ldr	r0, [pc, #32]	; (1c300 <onoff_start+0x38>)
   1c2de:	f00a f841 	bl	26364 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c2e2:	1e01      	subs	r1, r0, #0
   1c2e4:	da05      	bge.n	1c2f2 <onoff_start+0x2a>
		notify(mgr, err);
   1c2e6:	4628      	mov	r0, r5
   1c2e8:	4623      	mov	r3, r4
	}
}
   1c2ea:	b003      	add	sp, #12
   1c2ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1c2f0:	4718      	bx	r3
}
   1c2f2:	b003      	add	sp, #12
   1c2f4:	bd30      	pop	{r4, r5, pc}
   1c2f6:	bf00      	nop
   1c2f8:	20002efc 	.word	0x20002efc
   1c2fc:	000263cf 	.word	0x000263cf
   1c300:	00027100 	.word	0x00027100

0001c304 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c304:	b2c9      	uxtb	r1, r1
   1c306:	2901      	cmp	r1, #1
{
   1c308:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c30a:	d909      	bls.n	1c320 <get_status+0x1c>
   1c30c:	4908      	ldr	r1, [pc, #32]	; (1c330 <get_status+0x2c>)
   1c30e:	4809      	ldr	r0, [pc, #36]	; (1c334 <get_status+0x30>)
   1c310:	4a09      	ldr	r2, [pc, #36]	; (1c338 <get_status+0x34>)
   1c312:	237a      	movs	r3, #122	; 0x7a
   1c314:	f008 f9ea 	bl	246ec <assert_print>
   1c318:	4807      	ldr	r0, [pc, #28]	; (1c338 <get_status+0x34>)
   1c31a:	217a      	movs	r1, #122	; 0x7a
   1c31c:	f008 f9df 	bl	246de <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c320:	6903      	ldr	r3, [r0, #16]
   1c322:	220c      	movs	r2, #12
   1c324:	fb01 3302 	mla	r3, r1, r2, r3
   1c328:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1c32a:	f000 0007 	and.w	r0, r0, #7
   1c32e:	bd08      	pop	{r3, pc}
   1c330:	0002a66e 	.word	0x0002a66e
   1c334:	00027f8a 	.word	0x00027f8a
   1c338:	0002a631 	.word	0x0002a631

0001c33c <stop>:
{
   1c33c:	b570      	push	{r4, r5, r6, lr}
   1c33e:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c340:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1c342:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c344:	d90b      	bls.n	1c35e <stop+0x22>
   1c346:	4919      	ldr	r1, [pc, #100]	; (1c3ac <stop+0x70>)
   1c348:	4819      	ldr	r0, [pc, #100]	; (1c3b0 <stop+0x74>)
   1c34a:	4a1a      	ldr	r2, [pc, #104]	; (1c3b4 <stop+0x78>)
   1c34c:	f240 135d 	movw	r3, #349	; 0x15d
   1c350:	f008 f9cc 	bl	246ec <assert_print>
   1c354:	4817      	ldr	r0, [pc, #92]	; (1c3b4 <stop+0x78>)
   1c356:	f240 115d 	movw	r1, #349	; 0x15d
   1c35a:	f008 f9c0 	bl	246de <assert_post_action>
	__asm__ volatile(
   1c35e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c362:	f3ef 8511 	mrs	r5, BASEPRI
   1c366:	f384 8812 	msr	BASEPRI_MAX, r4
   1c36a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c36e:	260c      	movs	r6, #12
   1c370:	fb06 3401 	mla	r4, r6, r1, r3
   1c374:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c376:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1c37a:	d008      	beq.n	1c38e <stop+0x52>
   1c37c:	42a2      	cmp	r2, r4
   1c37e:	d006      	beq.n	1c38e <stop+0x52>
	__asm__ volatile(
   1c380:	f385 8811 	msr	BASEPRI, r5
   1c384:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1c388:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c38c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c38e:	4371      	muls	r1, r6
   1c390:	440b      	add	r3, r1
   1c392:	2201      	movs	r2, #1
   1c394:	649a      	str	r2, [r3, #72]	; 0x48
   1c396:	f385 8811 	msr	BASEPRI, r5
   1c39a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1c39e:	6843      	ldr	r3, [r0, #4]
   1c3a0:	440b      	add	r3, r1
   1c3a2:	685b      	ldr	r3, [r3, #4]
   1c3a4:	4798      	blx	r3
	return 0;
   1c3a6:	2000      	movs	r0, #0
   1c3a8:	e7f0      	b.n	1c38c <stop+0x50>
   1c3aa:	bf00      	nop
   1c3ac:	0002a66e 	.word	0x0002a66e
   1c3b0:	00027f8a 	.word	0x00027f8a
   1c3b4:	0002a631 	.word	0x0002a631

0001c3b8 <onoff_stop>:
{
   1c3b8:	b570      	push	{r4, r5, r6, lr}
   1c3ba:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c3bc:	4906      	ldr	r1, [pc, #24]	; (1c3d8 <onoff_stop+0x20>)
   1c3be:	1a41      	subs	r1, r0, r1
{
   1c3c0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c3c2:	1149      	asrs	r1, r1, #5
   1c3c4:	4805      	ldr	r0, [pc, #20]	; (1c3dc <onoff_stop+0x24>)
   1c3c6:	2240      	movs	r2, #64	; 0x40
   1c3c8:	f7ff ffb8 	bl	1c33c <stop>
	notify(mgr, res);
   1c3cc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c3ce:	4601      	mov	r1, r0
	notify(mgr, res);
   1c3d0:	4620      	mov	r0, r4
}
   1c3d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c3d6:	4718      	bx	r3
   1c3d8:	20002efc 	.word	0x20002efc
   1c3dc:	00027100 	.word	0x00027100

0001c3e0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c3e0:	2200      	movs	r2, #0
{
   1c3e2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c3e4:	2101      	movs	r1, #1
{
   1c3e6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c3e8:	4610      	mov	r0, r2
   1c3ea:	f7f8 fd73 	bl	14ed4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c3ee:	480f      	ldr	r0, [pc, #60]	; (1c42c <clk_init+0x4c>)
   1c3f0:	f002 fea6 	bl	1f140 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c3f4:	4b0e      	ldr	r3, [pc, #56]	; (1c430 <clk_init+0x50>)
   1c3f6:	4298      	cmp	r0, r3
   1c3f8:	d115      	bne.n	1c426 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c3fa:	f00a fb79 	bl	26af0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c3fe:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c400:	490c      	ldr	r1, [pc, #48]	; (1c434 <clk_init+0x54>)
   1c402:	4630      	mov	r0, r6
   1c404:	f008 f8b8 	bl	24578 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c408:	2800      	cmp	r0, #0
   1c40a:	db0b      	blt.n	1c424 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c40c:	2501      	movs	r5, #1
   1c40e:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1c410:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c412:	4908      	ldr	r1, [pc, #32]	; (1c434 <clk_init+0x54>)
   1c414:	f104 0020 	add.w	r0, r4, #32
   1c418:	f008 f8ae 	bl	24578 <onoff_manager_init>
		if (err < 0) {
   1c41c:	2800      	cmp	r0, #0
   1c41e:	db01      	blt.n	1c424 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c420:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1c422:	2000      	movs	r0, #0
}
   1c424:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c426:	f06f 0004 	mvn.w	r0, #4
   1c42a:	e7fb      	b.n	1c424 <clk_init+0x44>
   1c42c:	0001c46d 	.word	0x0001c46d
   1c430:	0bad0000 	.word	0x0bad0000
   1c434:	0002797c 	.word	0x0002797c

0001c438 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c438:	b570      	push	{r4, r5, r6, lr}
   1c43a:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c43c:	230c      	movs	r3, #12
   1c43e:	4809      	ldr	r0, [pc, #36]	; (1c464 <clkstarted_handle.constprop.0+0x2c>)
   1c440:	434b      	muls	r3, r1
   1c442:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1c444:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c448:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1c44a:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1c44c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1c44e:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c450:	f009 ff75 	bl	2633e <set_on_state>
	if (callback) {
   1c454:	b12d      	cbz	r5, 1c462 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c456:	4632      	mov	r2, r6
   1c458:	462b      	mov	r3, r5
   1c45a:	4803      	ldr	r0, [pc, #12]	; (1c468 <clkstarted_handle.constprop.0+0x30>)
}
   1c45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c460:	4718      	bx	r3
}
   1c462:	bd70      	pop	{r4, r5, r6, pc}
   1c464:	20002efc 	.word	0x20002efc
   1c468:	00027100 	.word	0x00027100

0001c46c <clock_event_handler>:
	switch (event) {
   1c46c:	2801      	cmp	r0, #1
{
   1c46e:	b508      	push	{r3, lr}
	switch (event) {
   1c470:	d006      	beq.n	1c480 <clock_event_handler+0x14>
   1c472:	2803      	cmp	r0, #3
   1c474:	d008      	beq.n	1c488 <clock_event_handler+0x1c>
   1c476:	b998      	cbnz	r0, 1c4a0 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c478:	4b0f      	ldr	r3, [pc, #60]	; (1c4b8 <clock_event_handler+0x4c>)
   1c47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c47c:	075b      	lsls	r3, r3, #29
   1c47e:	d119      	bne.n	1c4b4 <clock_event_handler+0x48>
}
   1c480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c484:	f7ff bfd8 	b.w	1c438 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1c488:	490c      	ldr	r1, [pc, #48]	; (1c4bc <clock_event_handler+0x50>)
   1c48a:	4a0d      	ldr	r2, [pc, #52]	; (1c4c0 <clock_event_handler+0x54>)
   1c48c:	480d      	ldr	r0, [pc, #52]	; (1c4c4 <clock_event_handler+0x58>)
   1c48e:	f240 236e 	movw	r3, #622	; 0x26e
   1c492:	f008 f92b 	bl	246ec <assert_print>
   1c496:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1c49a:	4809      	ldr	r0, [pc, #36]	; (1c4c0 <clock_event_handler+0x54>)
   1c49c:	f008 f91f 	bl	246de <assert_post_action>
   1c4a0:	4906      	ldr	r1, [pc, #24]	; (1c4bc <clock_event_handler+0x50>)
   1c4a2:	4a07      	ldr	r2, [pc, #28]	; (1c4c0 <clock_event_handler+0x54>)
   1c4a4:	4807      	ldr	r0, [pc, #28]	; (1c4c4 <clock_event_handler+0x58>)
   1c4a6:	f240 2372 	movw	r3, #626	; 0x272
   1c4aa:	f008 f91f 	bl	246ec <assert_print>
   1c4ae:	f240 2172 	movw	r1, #626	; 0x272
   1c4b2:	e7f2      	b.n	1c49a <clock_event_handler+0x2e>
}
   1c4b4:	bd08      	pop	{r3, pc}
   1c4b6:	bf00      	nop
   1c4b8:	20002efc 	.word	0x20002efc
   1c4bc:	0002ab0f 	.word	0x0002ab0f
   1c4c0:	0002a631 	.word	0x0002a631
   1c4c4:	00027f8a 	.word	0x00027f8a

0001c4c8 <generic_hfclk_start>:
{
   1c4c8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c4ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4ce:	f3ef 8111 	mrs	r1, BASEPRI
   1c4d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c4d6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c4da:	4a12      	ldr	r2, [pc, #72]	; (1c524 <generic_hfclk_start+0x5c>)
   1c4dc:	6813      	ldr	r3, [r2, #0]
   1c4de:	f043 0002 	orr.w	r0, r3, #2
   1c4e2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c4e4:	07da      	lsls	r2, r3, #31
   1c4e6:	d408      	bmi.n	1c4fa <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c4e8:	f381 8811 	msr	BASEPRI, r1
   1c4ec:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c4f0:	2001      	movs	r0, #1
}
   1c4f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c4f6:	f002 bddd 	b.w	1f0b4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c4fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c4fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c502:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c506:	07d3      	lsls	r3, r2, #31
   1c508:	d5ee      	bpl.n	1c4e8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c50a:	4807      	ldr	r0, [pc, #28]	; (1c528 <generic_hfclk_start+0x60>)
   1c50c:	f009 ff17 	bl	2633e <set_on_state>
   1c510:	f381 8811 	msr	BASEPRI, r1
   1c514:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1c518:	2000      	movs	r0, #0
}
   1c51a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c51e:	f7ff bf8b 	b.w	1c438 <clkstarted_handle.constprop.0>
   1c522:	bf00      	nop
   1c524:	20002f54 	.word	0x20002f54
   1c528:	20002f44 	.word	0x20002f44

0001c52c <api_blocking_start>:
{
   1c52c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c52e:	2200      	movs	r2, #0
   1c530:	2301      	movs	r3, #1
   1c532:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c536:	ab04      	add	r3, sp, #16
   1c538:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c53c:	4a09      	ldr	r2, [pc, #36]	; (1c564 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c53e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c542:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c544:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c548:	f009 ff3a 	bl	263c0 <api_start>
	if (err < 0) {
   1c54c:	2800      	cmp	r0, #0
   1c54e:	db05      	blt.n	1c55c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c550:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c554:	2300      	movs	r3, #0
   1c556:	4668      	mov	r0, sp
   1c558:	f004 fbb2 	bl	20cc0 <z_impl_k_sem_take>
}
   1c55c:	b007      	add	sp, #28
   1c55e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c562:	bf00      	nop
   1c564:	000263e1 	.word	0x000263e1

0001c568 <lfclk_start>:
{
   1c568:	b510      	push	{r4, lr}
	if (!once) {
   1c56a:	4c07      	ldr	r4, [pc, #28]	; (1c588 <lfclk_start+0x20>)
   1c56c:	7823      	ldrb	r3, [r4, #0]
   1c56e:	b92b      	cbnz	r3, 1c57c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1c570:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1c574:	f00a fc77 	bl	26e66 <z_impl_k_busy_wait>
		once = true;
   1c578:	2301      	movs	r3, #1
   1c57a:	7023      	strb	r3, [r4, #0]
}
   1c57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c580:	2000      	movs	r0, #0
   1c582:	f002 bd97 	b.w	1f0b4 <nrfx_clock_start>
   1c586:	bf00      	nop
   1c588:	200031dc 	.word	0x200031dc

0001c58c <generic_hfclk_stop>:
{
   1c58c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c58e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c592:	f3ef 8411 	mrs	r4, BASEPRI
   1c596:	f383 8812 	msr	BASEPRI_MAX, r3
   1c59a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c59e:	4a07      	ldr	r2, [pc, #28]	; (1c5bc <generic_hfclk_stop+0x30>)
   1c5a0:	6813      	ldr	r3, [r2, #0]
   1c5a2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c5a6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c5a8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c5aa:	d402      	bmi.n	1c5b2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c5ac:	2001      	movs	r0, #1
   1c5ae:	f002 fda9 	bl	1f104 <nrfx_clock_stop>
	__asm__ volatile(
   1c5b2:	f384 8811 	msr	BASEPRI, r4
   1c5b6:	f3bf 8f6f 	isb	sy
}
   1c5ba:	bd10      	pop	{r4, pc}
   1c5bc:	20002f54 	.word	0x20002f54

0001c5c0 <z_nrf_clock_control_lf_on>:
{
   1c5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c5c4:	4945      	ldr	r1, [pc, #276]	; (1c6dc <z_nrf_clock_control_lf_on+0x11c>)
   1c5c6:	f3bf 8f5b 	dmb	ish
   1c5ca:	4606      	mov	r6, r0
   1c5cc:	2201      	movs	r2, #1
   1c5ce:	e851 3f00 	ldrex	r3, [r1]
   1c5d2:	e841 2000 	strex	r0, r2, [r1]
   1c5d6:	2800      	cmp	r0, #0
   1c5d8:	d1f9      	bne.n	1c5ce <z_nrf_clock_control_lf_on+0xe>
   1c5da:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c5de:	b9a3      	cbnz	r3, 1c60a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c5e0:	493f      	ldr	r1, [pc, #252]	; (1c6e0 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   1c5e2:	4840      	ldr	r0, [pc, #256]	; (1c6e4 <z_nrf_clock_control_lf_on+0x124>)
   1c5e4:	604b      	str	r3, [r1, #4]
   1c5e6:	60cb      	str	r3, [r1, #12]
   1c5e8:	608a      	str	r2, [r1, #8]
   1c5ea:	f7f6 fee3 	bl	133b4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1c5ee:	2800      	cmp	r0, #0
   1c5f0:	da0b      	bge.n	1c60a <z_nrf_clock_control_lf_on+0x4a>
   1c5f2:	493d      	ldr	r1, [pc, #244]	; (1c6e8 <z_nrf_clock_control_lf_on+0x128>)
   1c5f4:	4a3d      	ldr	r2, [pc, #244]	; (1c6ec <z_nrf_clock_control_lf_on+0x12c>)
   1c5f6:	483e      	ldr	r0, [pc, #248]	; (1c6f0 <z_nrf_clock_control_lf_on+0x130>)
   1c5f8:	f44f 730c 	mov.w	r3, #560	; 0x230
   1c5fc:	f008 f876 	bl	246ec <assert_print>
   1c600:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1c604:	4839      	ldr	r0, [pc, #228]	; (1c6ec <z_nrf_clock_control_lf_on+0x12c>)
   1c606:	f008 f86a 	bl	246de <assert_post_action>
	switch (start_mode) {
   1c60a:	b376      	cbz	r6, 1c66a <z_nrf_clock_control_lf_on+0xaa>
   1c60c:	1e73      	subs	r3, r6, #1
   1c60e:	2b01      	cmp	r3, #1
   1c610:	d859      	bhi.n	1c6c6 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c612:	2e01      	cmp	r6, #1
   1c614:	d107      	bne.n	1c626 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c61a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c61e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c622:	2b01      	cmp	r3, #1
   1c624:	d021      	beq.n	1c66a <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c626:	f00a fb20 	bl	26c6a <k_is_in_isr>
   1c62a:	4605      	mov	r5, r0
   1c62c:	b9f8      	cbnz	r0, 1c66e <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
   1c62e:	4b31      	ldr	r3, [pc, #196]	; (1c6f4 <z_nrf_clock_control_lf_on+0x134>)
   1c630:	781b      	ldrb	r3, [r3, #0]
   1c632:	b1e3      	cbz	r3, 1c66e <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
   1c634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c638:	2202      	movs	r2, #2
   1c63a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c63e:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c640:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1c6fc <z_nrf_clock_control_lf_on+0x13c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c644:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c648:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c64c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c650:	03d2      	lsls	r2, r2, #15
   1c652:	d516      	bpl.n	1c682 <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c654:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c658:	2b01      	cmp	r3, #1
   1c65a:	d001      	beq.n	1c660 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c65c:	2e01      	cmp	r6, #1
   1c65e:	d110      	bne.n	1c682 <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
   1c660:	b35d      	cbz	r5, 1c6ba <z_nrf_clock_control_lf_on+0xfa>
   1c662:	f387 8811 	msr	BASEPRI, r7
   1c666:	f3bf 8f6f 	isb	sy
}
   1c66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c66e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c672:	f3ef 8711 	mrs	r7, BASEPRI
   1c676:	f383 8812 	msr	BASEPRI_MAX, r3
   1c67a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c67e:	2501      	movs	r5, #1
   1c680:	e7de      	b.n	1c640 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c682:	b1ad      	cbz	r5, 1c6b0 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c684:	4638      	mov	r0, r7
   1c686:	f7f8 fb39 	bl	14cfc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c68a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c68e:	2b00      	cmp	r3, #0
   1c690:	d1da      	bne.n	1c648 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c692:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c696:	2a00      	cmp	r2, #0
   1c698:	d0d6      	beq.n	1c648 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c69a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1c69e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c6a2:	2301      	movs	r3, #1
   1c6a4:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c6a8:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c6ac:	60a3      	str	r3, [r4, #8]
}
   1c6ae:	e7cb      	b.n	1c648 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
   1c6b0:	2100      	movs	r1, #0
   1c6b2:	2021      	movs	r0, #33	; 0x21
   1c6b4:	f006 f912 	bl	228dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c6b8:	e7e7      	b.n	1c68a <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
   1c6ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c6be:	2202      	movs	r2, #2
   1c6c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c6c4:	e7d1      	b.n	1c66a <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
   1c6c6:	490c      	ldr	r1, [pc, #48]	; (1c6f8 <z_nrf_clock_control_lf_on+0x138>)
   1c6c8:	4a08      	ldr	r2, [pc, #32]	; (1c6ec <z_nrf_clock_control_lf_on+0x12c>)
   1c6ca:	4809      	ldr	r0, [pc, #36]	; (1c6f0 <z_nrf_clock_control_lf_on+0x130>)
   1c6cc:	f240 2342 	movw	r3, #578	; 0x242
   1c6d0:	f008 f80c 	bl	246ec <assert_print>
   1c6d4:	f240 2142 	movw	r1, #578	; 0x242
   1c6d8:	e794      	b.n	1c604 <z_nrf_clock_control_lf_on+0x44>
   1c6da:	bf00      	nop
   1c6dc:	20002ef8 	.word	0x20002ef8
   1c6e0:	20002ee8 	.word	0x20002ee8
   1c6e4:	20002f1c 	.word	0x20002f1c
   1c6e8:	000286c9 	.word	0x000286c9
   1c6ec:	0002a631 	.word	0x0002a631
   1c6f0:	00027f8a 	.word	0x00027f8a
   1c6f4:	200036e4 	.word	0x200036e4
   1c6f8:	0002ab0f 	.word	0x0002ab0f
   1c6fc:	e000e100 	.word	0xe000e100

0001c700 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1c700:	b508      	push	{r3, lr}
   1c702:	4807      	ldr	r0, [pc, #28]	; (1c720 <uart_console_init+0x20>)
   1c704:	f00a fa83 	bl	26c0e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1c708:	b138      	cbz	r0, 1c71a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c70a:	4806      	ldr	r0, [pc, #24]	; (1c724 <uart_console_init+0x24>)
   1c70c:	f7f9 fad8 	bl	15cc0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c710:	4804      	ldr	r0, [pc, #16]	; (1c724 <uart_console_init+0x24>)
   1c712:	f7f6 fad9 	bl	12cc8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c716:	2000      	movs	r0, #0
}
   1c718:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c71a:	f06f 0012 	mvn.w	r0, #18
   1c71e:	e7fb      	b.n	1c718 <uart_console_init+0x18>
   1c720:	00027160 	.word	0x00027160
   1c724:	0001c729 	.word	0x0001c729

0001c728 <console_out>:
	if ('\n' == c) {
   1c728:	280a      	cmp	r0, #10
{
   1c72a:	b538      	push	{r3, r4, r5, lr}
   1c72c:	4d07      	ldr	r5, [pc, #28]	; (1c74c <console_out+0x24>)
   1c72e:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c730:	d104      	bne.n	1c73c <console_out+0x14>
   1c732:	68ab      	ldr	r3, [r5, #8]
   1c734:	210d      	movs	r1, #13
   1c736:	69db      	ldr	r3, [r3, #28]
   1c738:	4628      	mov	r0, r5
   1c73a:	4798      	blx	r3
   1c73c:	68ab      	ldr	r3, [r5, #8]
   1c73e:	4803      	ldr	r0, [pc, #12]	; (1c74c <console_out+0x24>)
   1c740:	69db      	ldr	r3, [r3, #28]
   1c742:	b2e1      	uxtb	r1, r4
   1c744:	4798      	blx	r3
}
   1c746:	4620      	mov	r0, r4
   1c748:	bd38      	pop	{r3, r4, r5, pc}
   1c74a:	bf00      	nop
   1c74c:	00027160 	.word	0x00027160

0001c750 <random_byte_get>:
   1c750:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c754:	f3ef 8211 	mrs	r2, BASEPRI
   1c758:	f383 8812 	msr	BASEPRI_MAX, r3
   1c75c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c760:	4b09      	ldr	r3, [pc, #36]	; (1c788 <random_byte_get+0x38>)
   1c762:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c766:	b161      	cbz	r1, 1c782 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c768:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c76a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c76e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1c772:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c776:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c778:	f382 8811 	msr	BASEPRI, r2
   1c77c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c780:	4770      	bx	lr
	int retval = -EAGAIN;
   1c782:	f06f 000a 	mvn.w	r0, #10
   1c786:	e7f7      	b.n	1c778 <random_byte_get+0x28>
   1c788:	4000d000 	.word	0x4000d000

0001c78c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c78c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c78e:	4603      	mov	r3, r0
   1c790:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1c792:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1c794:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1c798:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c79c:	f3ef 8211 	mrs	r2, BASEPRI
   1c7a0:	f385 8812 	msr	BASEPRI_MAX, r5
   1c7a4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c7a8:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c7aa:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c7ae:	1be4      	subs	r4, r4, r7
   1c7b0:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1c7b4:	42a0      	cmp	r0, r4
		len = available;
   1c7b6:	bf88      	it	hi
   1c7b8:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c7ba:	183e      	adds	r6, r7, r0
   1c7bc:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1c7c0:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1c7c2:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1c7c4:	f382 8811 	msr	BASEPRI, r2
   1c7c8:	f3bf 8f6f 	isb	sy
   1c7cc:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1c7ce:	428a      	cmp	r2, r1
   1c7d0:	d117      	bne.n	1c802 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c7d2:	4577      	cmp	r7, lr
   1c7d4:	d10d      	bne.n	1c7f2 <rng_pool_get+0x66>
	__asm__ volatile(
   1c7d6:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c7da:	f3ef 8211 	mrs	r2, BASEPRI
   1c7de:	f381 8812 	msr	BASEPRI_MAX, r1
   1c7e2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c7e6:	7819      	ldrb	r1, [r3, #0]
   1c7e8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1c7ea:	f382 8811 	msr	BASEPRI, r2
   1c7ee:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1c7f2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1c7f4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1c7f6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c7f8:	bf22      	ittt	cs
   1c7fa:	4b06      	ldrcs	r3, [pc, #24]	; (1c814 <rng_pool_get+0x88>)
   1c7fc:	2201      	movcs	r2, #1
   1c7fe:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c802:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1c804:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c806:	7976      	ldrb	r6, [r6, #5]
   1c808:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1c80c:	ea05 050c 	and.w	r5, r5, ip
   1c810:	e7dd      	b.n	1c7ce <rng_pool_get+0x42>
   1c812:	bf00      	nop
   1c814:	4000d000 	.word	0x4000d000

0001c818 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1c818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c81c:	4d2e      	ldr	r5, [pc, #184]	; (1c8d8 <entropy_nrf5_get_entropy_isr+0xc0>)
   1c81e:	6900      	ldr	r0, [r0, #16]
   1c820:	42a8      	cmp	r0, r5
{
   1c822:	460e      	mov	r6, r1
   1c824:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c826:	d00b      	beq.n	1c840 <entropy_nrf5_get_entropy_isr+0x28>
   1c828:	492c      	ldr	r1, [pc, #176]	; (1c8dc <entropy_nrf5_get_entropy_isr+0xc4>)
   1c82a:	482d      	ldr	r0, [pc, #180]	; (1c8e0 <entropy_nrf5_get_entropy_isr+0xc8>)
   1c82c:	4a2d      	ldr	r2, [pc, #180]	; (1c8e4 <entropy_nrf5_get_entropy_isr+0xcc>)
   1c82e:	f240 1307 	movw	r3, #263	; 0x107
   1c832:	f007 ff5b 	bl	246ec <assert_print>
   1c836:	482b      	ldr	r0, [pc, #172]	; (1c8e4 <entropy_nrf5_get_entropy_isr+0xcc>)
   1c838:	f240 1107 	movw	r1, #263	; 0x107
   1c83c:	f007 ff4f 	bl	246de <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c840:	43db      	mvns	r3, r3
   1c842:	f013 0501 	ands.w	r5, r3, #1
   1c846:	d004      	beq.n	1c852 <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c848:	3030      	adds	r0, #48	; 0x30
   1c84a:	f7ff ff9f 	bl	1c78c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c852:	b3a2      	cbz	r2, 1c8be <entropy_nrf5_get_entropy_isr+0xa6>
	__asm__ volatile(
   1c854:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c858:	f3ef 8811 	mrs	r8, BASEPRI
   1c85c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c860:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c864:	200d      	movs	r0, #13
   1c866:	f7f8 fb27 	bl	14eb8 <arch_irq_is_enabled>
   1c86a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c86c:	200d      	movs	r0, #13
   1c86e:	f7f8 fb0f 	bl	14e90 <arch_irq_disable>
	__asm__ volatile(
   1c872:	f388 8811 	msr	BASEPRI, r8
   1c876:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c87a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1c8e8 <entropy_nrf5_get_entropy_isr+0xd0>
   1c87e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1c8ec <entropy_nrf5_get_entropy_isr+0xd4>
   1c882:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1c886:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1c88a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c88e:	2301      	movs	r3, #1
   1c890:	f8ca 3000 	str.w	r3, [sl]
   1c894:	4625      	mov	r5, r4
   1c896:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c89a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1c89e:	b183      	cbz	r3, 1c8c2 <entropy_nrf5_get_entropy_isr+0xaa>
			byte = random_byte_get();
   1c8a0:	f7ff ff56 	bl	1c750 <random_byte_get>
			if (byte < 0) {
   1c8a4:	1e03      	subs	r3, r0, #0
   1c8a6:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1c8aa:	dbf6      	blt.n	1c89a <entropy_nrf5_get_entropy_isr+0x82>
			buf[--len] = byte;
   1c8ac:	3d01      	subs	r5, #1
   1c8ae:	b2ad      	uxth	r5, r5
   1c8b0:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c8b2:	2d00      	cmp	r5, #0
   1c8b4:	d1f1      	bne.n	1c89a <entropy_nrf5_get_entropy_isr+0x82>
		if (irq_enabled) {
   1c8b6:	b117      	cbz	r7, 1c8be <entropy_nrf5_get_entropy_isr+0xa6>
			irq_enable(IRQN);
   1c8b8:	200d      	movs	r0, #13
   1c8ba:	f7f8 fadb 	bl	14e74 <arch_irq_enable>
	return cnt;
   1c8be:	4620      	mov	r0, r4
   1c8c0:	e7c5      	b.n	1c84e <entropy_nrf5_get_entropy_isr+0x36>
	__asm__ volatile(
   1c8c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c8c6:	f3ef 8011 	mrs	r0, BASEPRI
   1c8ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1c8ce:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1c8d2:	f7f8 fa13 	bl	14cfc <arch_cpu_atomic_idle>
}
   1c8d6:	e7e0      	b.n	1c89a <entropy_nrf5_get_entropy_isr+0x82>
   1c8d8:	20002f58 	.word	0x20002f58
   1c8dc:	0002a6ed 	.word	0x0002a6ed
   1c8e0:	00027f8a 	.word	0x00027f8a
   1c8e4:	0002a6bb 	.word	0x0002a6bb
   1c8e8:	4000d000 	.word	0x4000d000
   1c8ec:	e000e100 	.word	0xe000e100

0001c8f0 <entropy_nrf5_get_entropy>:
{
   1c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c8f4:	4b19      	ldr	r3, [pc, #100]	; (1c95c <entropy_nrf5_get_entropy+0x6c>)
   1c8f6:	6907      	ldr	r7, [r0, #16]
   1c8f8:	429f      	cmp	r7, r3
{
   1c8fa:	460d      	mov	r5, r1
   1c8fc:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c8fe:	d105      	bne.n	1c90c <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c900:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1c904:	b964      	cbnz	r4, 1c920 <entropy_nrf5_get_entropy+0x30>
}
   1c906:	4620      	mov	r0, r4
   1c908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c90c:	4914      	ldr	r1, [pc, #80]	; (1c960 <entropy_nrf5_get_entropy+0x70>)
   1c90e:	4815      	ldr	r0, [pc, #84]	; (1c964 <entropy_nrf5_get_entropy+0x74>)
   1c910:	4a15      	ldr	r2, [pc, #84]	; (1c968 <entropy_nrf5_get_entropy+0x78>)
   1c912:	23e9      	movs	r3, #233	; 0xe9
   1c914:	f007 feea 	bl	246ec <assert_print>
   1c918:	4813      	ldr	r0, [pc, #76]	; (1c968 <entropy_nrf5_get_entropy+0x78>)
   1c91a:	21e9      	movs	r1, #233	; 0xe9
   1c91c:	f007 fedf 	bl	246de <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1c920:	f04f 33ff 	mov.w	r3, #4294967295
   1c924:	f04f 32ff 	mov.w	r2, #4294967295
   1c928:	4638      	mov	r0, r7
   1c92a:	f004 f9c9 	bl	20cc0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c92e:	4622      	mov	r2, r4
   1c930:	4629      	mov	r1, r5
   1c932:	4640      	mov	r0, r8
   1c934:	f7ff ff2a 	bl	1c78c <rng_pool_get>
   1c938:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c93a:	4638      	mov	r0, r7
   1c93c:	f004 f97c 	bl	20c38 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c940:	b93e      	cbnz	r6, 1c952 <entropy_nrf5_get_entropy+0x62>
	return z_impl_k_sem_take(sem, timeout);
   1c942:	f04f 32ff 	mov.w	r2, #4294967295
   1c946:	f04f 33ff 	mov.w	r3, #4294967295
   1c94a:	4808      	ldr	r0, [pc, #32]	; (1c96c <entropy_nrf5_get_entropy+0x7c>)
   1c94c:	f004 f9b8 	bl	20cc0 <z_impl_k_sem_take>
	while (len) {
   1c950:	e7e6      	b.n	1c920 <entropy_nrf5_get_entropy+0x30>
		len -= bytes;
   1c952:	1ba4      	subs	r4, r4, r6
   1c954:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c956:	4435      	add	r5, r6
   1c958:	e7d4      	b.n	1c904 <entropy_nrf5_get_entropy+0x14>
   1c95a:	bf00      	nop
   1c95c:	20002f58 	.word	0x20002f58
   1c960:	0002a6ed 	.word	0x0002a6ed
   1c964:	00027f8a 	.word	0x00027f8a
   1c968:	0002a6bb 	.word	0x0002a6bb
   1c96c:	20002f70 	.word	0x20002f70

0001c970 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1c970:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c972:	4b21      	ldr	r3, [pc, #132]	; (1c9f8 <entropy_nrf5_init+0x88>)
   1c974:	6904      	ldr	r4, [r0, #16]
   1c976:	429c      	cmp	r4, r3
   1c978:	d00b      	beq.n	1c992 <entropy_nrf5_init+0x22>
   1c97a:	4920      	ldr	r1, [pc, #128]	; (1c9fc <entropy_nrf5_init+0x8c>)
   1c97c:	4820      	ldr	r0, [pc, #128]	; (1ca00 <entropy_nrf5_init+0x90>)
   1c97e:	4a21      	ldr	r2, [pc, #132]	; (1ca04 <entropy_nrf5_init+0x94>)
   1c980:	f240 134b 	movw	r3, #331	; 0x14b
   1c984:	f007 feb2 	bl	246ec <assert_print>
   1c988:	481e      	ldr	r0, [pc, #120]	; (1ca04 <entropy_nrf5_init+0x94>)
   1c98a:	f240 114b 	movw	r1, #331	; 0x14b
   1c98e:	f007 fea6 	bl	246de <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c992:	2201      	movs	r2, #1
   1c994:	4611      	mov	r1, r2
   1c996:	4620      	mov	r0, r4
   1c998:	f00a f9b5 	bl	26d06 <z_impl_k_sem_init>
   1c99c:	2201      	movs	r2, #1
   1c99e:	2100      	movs	r1, #0
   1c9a0:	f104 0018 	add.w	r0, r4, #24
   1c9a4:	f00a f9af 	bl	26d06 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c9a8:	f240 4307 	movw	r3, #1031	; 0x407
   1c9ac:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c9b0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c9b4:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c9b6:	230c      	movs	r3, #12
   1c9b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c9bc:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1c9be:	4b12      	ldr	r3, [pc, #72]	; (1ca08 <entropy_nrf5_init+0x98>)
   1c9c0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c9c4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c9c8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c9cc:	f022 0201 	bic.w	r2, r2, #1
   1c9d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1c9d4:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c9d6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1c9da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1c9de:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c9e2:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c9e4:	6019      	str	r1, [r3, #0]
   1c9e6:	200d      	movs	r0, #13
   1c9e8:	f7f8 fa74 	bl	14ed4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c9ec:	200d      	movs	r0, #13
   1c9ee:	f7f8 fa41 	bl	14e74 <arch_irq_enable>

	return 0;
}
   1c9f2:	4628      	mov	r0, r5
   1c9f4:	bd38      	pop	{r3, r4, r5, pc}
   1c9f6:	bf00      	nop
   1c9f8:	20002f58 	.word	0x20002f58
   1c9fc:	0002a6ed 	.word	0x0002a6ed
   1ca00:	00027f8a 	.word	0x00027f8a
   1ca04:	0002a6bb 	.word	0x0002a6bb
   1ca08:	4000d000 	.word	0x4000d000

0001ca0c <isr>:
{
   1ca0c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ca0e:	f7ff fe9f 	bl	1c750 <random_byte_get>
	if (byte < 0) {
   1ca12:	2800      	cmp	r0, #0
   1ca14:	db20      	blt.n	1ca58 <isr+0x4c>
	uint8_t last  = rngp->last;
   1ca16:	4b17      	ldr	r3, [pc, #92]	; (1ca74 <isr+0x68>)
   1ca18:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1ca1c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ca20:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ca24:	1b14      	subs	r4, r2, r4
   1ca26:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ca2a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ca2c:	d10d      	bne.n	1ca4a <isr+0x3e>
	uint8_t last  = rngp->last;
   1ca2e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ca32:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ca36:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ca3a:	1b14      	subs	r4, r2, r4
   1ca3c:	ea31 0404 	bics.w	r4, r1, r4
   1ca40:	d10b      	bne.n	1ca5a <isr+0x4e>
   1ca42:	4b0d      	ldr	r3, [pc, #52]	; (1ca78 <isr+0x6c>)
   1ca44:	2201      	movs	r2, #1
   1ca46:	605a      	str	r2, [r3, #4]
}
   1ca48:	e00e      	b.n	1ca68 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ca4a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ca4c:	3201      	adds	r2, #1
   1ca4e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ca50:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ca54:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1ca58:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ca5a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ca5c:	3201      	adds	r2, #1
   1ca5e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ca60:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ca64:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ca68:	4804      	ldr	r0, [pc, #16]	; (1ca7c <isr+0x70>)
}
   1ca6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ca6e:	f004 b8e3 	b.w	20c38 <z_impl_k_sem_give>
   1ca72:	bf00      	nop
   1ca74:	20002f58 	.word	0x20002f58
   1ca78:	4000d000 	.word	0x4000d000
   1ca7c:	20002f70 	.word	0x20002f70

0001ca80 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ca80:	b510      	push	{r4, lr}
	return port->data;
   1ca82:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ca84:	b961      	cbnz	r1, 1caa0 <gpio_nrfx_manage_callback+0x20>
   1ca86:	4920      	ldr	r1, [pc, #128]	; (1cb08 <gpio_nrfx_manage_callback+0x88>)
   1ca88:	4a20      	ldr	r2, [pc, #128]	; (1cb0c <gpio_nrfx_manage_callback+0x8c>)
   1ca8a:	4821      	ldr	r0, [pc, #132]	; (1cb10 <gpio_nrfx_manage_callback+0x90>)
   1ca8c:	232a      	movs	r3, #42	; 0x2a
   1ca8e:	f007 fe2d 	bl	246ec <assert_print>
   1ca92:	4820      	ldr	r0, [pc, #128]	; (1cb14 <gpio_nrfx_manage_callback+0x94>)
   1ca94:	f007 fe2a 	bl	246ec <assert_print>
   1ca98:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1ca9a:	481c      	ldr	r0, [pc, #112]	; (1cb0c <gpio_nrfx_manage_callback+0x8c>)
   1ca9c:	f007 fe1f 	bl	246de <assert_post_action>
   1caa0:	6848      	ldr	r0, [r1, #4]
   1caa2:	b950      	cbnz	r0, 1caba <gpio_nrfx_manage_callback+0x3a>
   1caa4:	491c      	ldr	r1, [pc, #112]	; (1cb18 <gpio_nrfx_manage_callback+0x98>)
   1caa6:	4a19      	ldr	r2, [pc, #100]	; (1cb0c <gpio_nrfx_manage_callback+0x8c>)
   1caa8:	4819      	ldr	r0, [pc, #100]	; (1cb10 <gpio_nrfx_manage_callback+0x90>)
   1caaa:	232b      	movs	r3, #43	; 0x2b
   1caac:	f007 fe1e 	bl	246ec <assert_print>
   1cab0:	481a      	ldr	r0, [pc, #104]	; (1cb1c <gpio_nrfx_manage_callback+0x9c>)
   1cab2:	f007 fe1b 	bl	246ec <assert_print>
   1cab6:	212b      	movs	r1, #43	; 0x2b
   1cab8:	e7ef      	b.n	1ca9a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1caba:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1cabc:	b1f8      	cbz	r0, 1cafe <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cabe:	4288      	cmp	r0, r1
   1cac0:	d119      	bne.n	1caf6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1cac2:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1cac4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1cac6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cac8:	42a1      	cmp	r1, r4
   1caca:	d100      	bne.n	1cace <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1cacc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1cace:	2000      	movs	r0, #0
   1cad0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1cad2:	b12a      	cbz	r2, 1cae0 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1cad4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1cad6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cad8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1cada:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cadc:	b902      	cbnz	r2, 1cae0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1cade:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1cae0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cae2:	e010      	b.n	1cb06 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cae4:	4281      	cmp	r1, r0
   1cae6:	d106      	bne.n	1caf6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1cae8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1caea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1caec:	6898      	ldr	r0, [r3, #8]
   1caee:	4281      	cmp	r1, r0
   1caf0:	d1ed      	bne.n	1cace <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1caf2:	609c      	str	r4, [r3, #8]
}
   1caf4:	e7eb      	b.n	1cace <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1caf6:	4604      	mov	r4, r0
   1caf8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cafa:	2800      	cmp	r0, #0
   1cafc:	d1f2      	bne.n	1cae4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1cafe:	2a00      	cmp	r2, #0
   1cb00:	d1e8      	bne.n	1cad4 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1cb02:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1cb06:	bd10      	pop	{r4, pc}
   1cb08:	00027e88 	.word	0x00027e88
   1cb0c:	0002a72c 	.word	0x0002a72c
   1cb10:	00027f8a 	.word	0x00027f8a
   1cb14:	0002a768 	.word	0x0002a768
   1cb18:	0002a777 	.word	0x0002a777
   1cb1c:	0002a789 	.word	0x0002a789

0001cb20 <gpio_nrfx_pin_interrupt_configure>:
{
   1cb20:	b530      	push	{r4, r5, lr}
	return port->config;
   1cb22:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cb24:	7b05      	ldrb	r5, [r0, #12]
   1cb26:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1cb2a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1cb2e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cb30:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1cb34:	d105      	bne.n	1cb42 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1cb36:	4620      	mov	r0, r4
   1cb38:	f002 ff68 	bl	1fa0c <nrfx_gpiote_trigger_disable>
		return 0;
   1cb3c:	2000      	movs	r0, #0
}
   1cb3e:	b005      	add	sp, #20
   1cb40:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cb42:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1cb44:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cb48:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1cb4c:	d114      	bne.n	1cb78 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1cb4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cb52:	bf0c      	ite	eq
   1cb54:	2304      	moveq	r3, #4
   1cb56:	2305      	movne	r3, #5
   1cb58:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	4619      	mov	r1, r3
   1cb60:	aa02      	add	r2, sp, #8
   1cb62:	4620      	mov	r0, r4
   1cb64:	f002 fd5c 	bl	1f620 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cb68:	4b27      	ldr	r3, [pc, #156]	; (1cc08 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1cb6a:	4298      	cmp	r0, r3
   1cb6c:	d148      	bne.n	1cc00 <gpio_nrfx_pin_interrupt_configure+0xe0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1cb6e:	2101      	movs	r1, #1
   1cb70:	4620      	mov	r0, r4
   1cb72:	f002 fedf 	bl	1f934 <nrfx_gpiote_trigger_enable>
	return 0;
   1cb76:	e7e1      	b.n	1cb3c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1cb78:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1cb7c:	d022      	beq.n	1cbc4 <gpio_nrfx_pin_interrupt_configure+0xa4>
   1cb7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1cb82:	bf14      	ite	ne
   1cb84:	2301      	movne	r3, #1
   1cb86:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cb88:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1cb8c:	6883      	ldr	r3, [r0, #8]
   1cb8e:	40cb      	lsrs	r3, r1
   1cb90:	07d9      	lsls	r1, r3, #31
   1cb92:	d4e3      	bmi.n	1cb5c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1cb94:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1cb98:	d1e0      	bne.n	1cb5c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1cb9a:	0963      	lsrs	r3, r4, #5
   1cb9c:	d106      	bne.n	1cbac <gpio_nrfx_pin_interrupt_configure+0x8c>
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1cb9e:	f004 031f 	and.w	r3, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1cba2:	f04f 32ff 	mov.w	r2, #4294967295
   1cba6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cba8:	07d2      	lsls	r2, r2, #31
   1cbaa:	d40d      	bmi.n	1cbc8 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1cbac:	4917      	ldr	r1, [pc, #92]	; (1cc0c <gpio_nrfx_pin_interrupt_configure+0xec>)
   1cbae:	4818      	ldr	r0, [pc, #96]	; (1cc10 <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1cbb0:	4a18      	ldr	r2, [pc, #96]	; (1cc14 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1cbb2:	f240 2347 	movw	r3, #583	; 0x247
   1cbb6:	f007 fd99 	bl	246ec <assert_print>
   1cbba:	4816      	ldr	r0, [pc, #88]	; (1cc14 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1cbbc:	f240 2147 	movw	r1, #583	; 0x247
   1cbc0:	f007 fd8d 	bl	246de <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1cbc4:	2303      	movs	r3, #3
   1cbc6:	e7df      	b.n	1cb88 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1cbc8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1cbcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1cbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1cbd4:	07db      	lsls	r3, r3, #31
   1cbd6:	d4c1      	bmi.n	1cb5c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cbd8:	f10d 0507 	add.w	r5, sp, #7
   1cbdc:	4629      	mov	r1, r5
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f002 fe42 	bl	1f868 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1cbe4:	4b0c      	ldr	r3, [pc, #48]	; (1cc18 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1cbe6:	4298      	cmp	r0, r3
   1cbe8:	d001      	beq.n	1cbee <gpio_nrfx_pin_interrupt_configure+0xce>
		trigger_config.p_in_channel = &ch;
   1cbea:	9503      	str	r5, [sp, #12]
   1cbec:	e7b6      	b.n	1cb5c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1cbee:	4628      	mov	r0, r5
   1cbf0:	f002 fe9a 	bl	1f928 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1cbf4:	4b04      	ldr	r3, [pc, #16]	; (1cc08 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1cbf6:	4298      	cmp	r0, r3
   1cbf8:	d0f7      	beq.n	1cbea <gpio_nrfx_pin_interrupt_configure+0xca>
				return -ENOMEM;
   1cbfa:	f06f 000b 	mvn.w	r0, #11
   1cbfe:	e79e      	b.n	1cb3e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1cc00:	f06f 0015 	mvn.w	r0, #21
   1cc04:	e79b      	b.n	1cb3e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1cc06:	bf00      	nop
   1cc08:	0bad0000 	.word	0x0bad0000
   1cc0c:	0002a7d3 	.word	0x0002a7d3
   1cc10:	00027f8a 	.word	0x00027f8a
   1cc14:	0002a7a0 	.word	0x0002a7a0
   1cc18:	0bad0004 	.word	0x0bad0004

0001cc1c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1cc1c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1cc1e:	f002 fe73 	bl	1f908 <nrfx_gpiote_is_init>
   1cc22:	4604      	mov	r4, r0
   1cc24:	b968      	cbnz	r0, 1cc42 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1cc26:	f002 fe47 	bl	1f8b8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1cc2a:	4b08      	ldr	r3, [pc, #32]	; (1cc4c <gpio_nrfx_init+0x30>)
   1cc2c:	4298      	cmp	r0, r3
   1cc2e:	d10a      	bne.n	1cc46 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1cc30:	4807      	ldr	r0, [pc, #28]	; (1cc50 <gpio_nrfx_init+0x34>)
   1cc32:	4621      	mov	r1, r4
   1cc34:	f002 fe12 	bl	1f85c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1cc38:	4622      	mov	r2, r4
   1cc3a:	2105      	movs	r1, #5
   1cc3c:	2006      	movs	r0, #6
   1cc3e:	f7f8 f949 	bl	14ed4 <z_arm_irq_priority_set>
		return 0;
   1cc42:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1cc44:	bd10      	pop	{r4, pc}
		return -EIO;
   1cc46:	f06f 0004 	mvn.w	r0, #4
   1cc4a:	e7fb      	b.n	1cc44 <gpio_nrfx_init+0x28>
   1cc4c:	0bad0000 	.word	0x0bad0000
   1cc50:	0001cc55 	.word	0x0001cc55

0001cc54 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1cc54:	0943      	lsrs	r3, r0, #5
{
   1cc56:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1cc58:	d107      	bne.n	1cc6a <nrfx_gpio_handler+0x16>
	return list->head;
   1cc5a:	4b12      	ldr	r3, [pc, #72]	; (1cca4 <nrfx_gpio_handler+0x50>)
   1cc5c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cc5e:	b121      	cbz	r1, 1cc6a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1cc60:	2501      	movs	r5, #1
	return node->next;
   1cc62:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1cc64:	4e10      	ldr	r6, [pc, #64]	; (1cca8 <nrfx_gpio_handler+0x54>)
   1cc66:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cc68:	b901      	cbnz	r1, 1cc6c <nrfx_gpio_handler+0x18>
}
   1cc6a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1cc6c:	688a      	ldr	r2, [r1, #8]
   1cc6e:	402a      	ands	r2, r5
   1cc70:	d010      	beq.n	1cc94 <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
   1cc72:	684b      	ldr	r3, [r1, #4]
   1cc74:	b963      	cbnz	r3, 1cc90 <nrfx_gpio_handler+0x3c>
   1cc76:	490d      	ldr	r1, [pc, #52]	; (1ccac <nrfx_gpio_handler+0x58>)
   1cc78:	4a0d      	ldr	r2, [pc, #52]	; (1ccb0 <nrfx_gpio_handler+0x5c>)
   1cc7a:	480e      	ldr	r0, [pc, #56]	; (1ccb4 <nrfx_gpio_handler+0x60>)
   1cc7c:	234d      	movs	r3, #77	; 0x4d
   1cc7e:	f007 fd35 	bl	246ec <assert_print>
   1cc82:	480d      	ldr	r0, [pc, #52]	; (1ccb8 <nrfx_gpio_handler+0x64>)
   1cc84:	f007 fd32 	bl	246ec <assert_print>
   1cc88:	4809      	ldr	r0, [pc, #36]	; (1ccb0 <nrfx_gpio_handler+0x5c>)
   1cc8a:	214d      	movs	r1, #77	; 0x4d
   1cc8c:	f007 fd27 	bl	246de <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cc90:	4630      	mov	r0, r6
   1cc92:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cc94:	b11c      	cbz	r4, 1cc9e <nrfx_gpio_handler+0x4a>
   1cc96:	6823      	ldr	r3, [r4, #0]
   1cc98:	4621      	mov	r1, r4
   1cc9a:	461c      	mov	r4, r3
   1cc9c:	e7e4      	b.n	1cc68 <nrfx_gpio_handler+0x14>
   1cc9e:	4623      	mov	r3, r4
   1cca0:	e7fa      	b.n	1cc98 <nrfx_gpio_handler+0x44>
   1cca2:	bf00      	nop
   1cca4:	20002fac 	.word	0x20002fac
   1cca8:	00027118 	.word	0x00027118
   1ccac:	0002a7f6 	.word	0x0002a7f6
   1ccb0:	0002a72c 	.word	0x0002a72c
   1ccb4:	00027f8a 	.word	0x00027f8a
   1ccb8:	0002a789 	.word	0x0002a789

0001ccbc <gpio_nrfx_pin_configure>:
{
   1ccbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1ccc0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ccc4:	f898 300c 	ldrb.w	r3, [r8, #12]
   1ccc8:	f001 051f 	and.w	r5, r1, #31
   1cccc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1ccd0:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ccd2:	4628      	mov	r0, r5
   1ccd4:	f10d 0103 	add.w	r1, sp, #3
{
   1ccd8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ccda:	f002 fdc5 	bl	1f868 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1ccde:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cce2:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1cce4:	d115      	bne.n	1cd12 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1cce6:	4628      	mov	r0, r5
   1cce8:	f002 feba 	bl	1fa60 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1ccec:	4b49      	ldr	r3, [pc, #292]	; (1ce14 <gpio_nrfx_pin_configure+0x158>)
   1ccee:	429e      	cmp	r6, r3
   1ccf0:	d171      	bne.n	1cdd6 <gpio_nrfx_pin_configure+0x11a>
			err = nrfx_gpiote_channel_free(ch);
   1ccf2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1ccf6:	f002 fe11 	bl	1f91c <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1ccfa:	42b0      	cmp	r0, r6
   1ccfc:	d06b      	beq.n	1cdd6 <gpio_nrfx_pin_configure+0x11a>
   1ccfe:	4946      	ldr	r1, [pc, #280]	; (1ce18 <gpio_nrfx_pin_configure+0x15c>)
   1cd00:	4a46      	ldr	r2, [pc, #280]	; (1ce1c <gpio_nrfx_pin_configure+0x160>)
   1cd02:	4847      	ldr	r0, [pc, #284]	; (1ce20 <gpio_nrfx_pin_configure+0x164>)
   1cd04:	236a      	movs	r3, #106	; 0x6a
   1cd06:	f007 fcf1 	bl	246ec <assert_print>
   1cd0a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1cd0c:	4843      	ldr	r0, [pc, #268]	; (1ce1c <gpio_nrfx_pin_configure+0x160>)
   1cd0e:	f007 fce6 	bl	246de <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cd12:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cd14:	4619      	mov	r1, r3
   1cd16:	aa02      	add	r2, sp, #8
   1cd18:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cd1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cd1e:	f002 fc7f 	bl	1f620 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cd22:	4b3c      	ldr	r3, [pc, #240]	; (1ce14 <gpio_nrfx_pin_configure+0x158>)
   1cd24:	4298      	cmp	r0, r3
   1cd26:	d004      	beq.n	1cd32 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1cd28:	f06f 0015 	mvn.w	r0, #21
}
   1cd2c:	b004      	add	sp, #16
   1cd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1cd32:	4286      	cmp	r6, r0
   1cd34:	d10d      	bne.n	1cd52 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1cd36:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1cd3a:	f002 fdef 	bl	1f91c <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1cd3e:	42b0      	cmp	r0, r6
   1cd40:	d007      	beq.n	1cd52 <gpio_nrfx_pin_configure+0x96>
   1cd42:	4935      	ldr	r1, [pc, #212]	; (1ce18 <gpio_nrfx_pin_configure+0x15c>)
   1cd44:	4a35      	ldr	r2, [pc, #212]	; (1ce1c <gpio_nrfx_pin_configure+0x160>)
   1cd46:	4836      	ldr	r0, [pc, #216]	; (1ce20 <gpio_nrfx_pin_configure+0x164>)
   1cd48:	237c      	movs	r3, #124	; 0x7c
   1cd4a:	f007 fccf 	bl	246ec <assert_print>
   1cd4e:	217c      	movs	r1, #124	; 0x7c
   1cd50:	e7dc      	b.n	1cd0c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1cd52:	03a6      	lsls	r6, r4, #14
   1cd54:	d54e      	bpl.n	1cdf4 <gpio_nrfx_pin_configure+0x138>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cd56:	f240 3306 	movw	r3, #774	; 0x306
   1cd5a:	4023      	ands	r3, r4
   1cd5c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1cd60:	d019      	beq.n	1cd96 <gpio_nrfx_pin_configure+0xda>
   1cd62:	d80c      	bhi.n	1cd7e <gpio_nrfx_pin_configure+0xc2>
   1cd64:	2b06      	cmp	r3, #6
   1cd66:	d017      	beq.n	1cd98 <gpio_nrfx_pin_configure+0xdc>
   1cd68:	d804      	bhi.n	1cd74 <gpio_nrfx_pin_configure+0xb8>
   1cd6a:	b1ab      	cbz	r3, 1cd98 <gpio_nrfx_pin_configure+0xdc>
   1cd6c:	2b02      	cmp	r3, #2
   1cd6e:	d1db      	bne.n	1cd28 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1cd70:	2304      	movs	r3, #4
   1cd72:	e011      	b.n	1cd98 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cd74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1cd78:	d1d6      	bne.n	1cd28 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1cd7a:	2301      	movs	r3, #1
   1cd7c:	e00c      	b.n	1cd98 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cd7e:	f240 2202 	movw	r2, #514	; 0x202
   1cd82:	4293      	cmp	r3, r2
   1cd84:	d029      	beq.n	1cdda <gpio_nrfx_pin_configure+0x11e>
   1cd86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1cd8a:	d028      	beq.n	1cdde <gpio_nrfx_pin_configure+0x122>
   1cd8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1cd90:	d1ca      	bne.n	1cd28 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1cd92:	2302      	movs	r3, #2
   1cd94:	e000      	b.n	1cd98 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1cd96:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1cd98:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1cd9c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1cda0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1cda4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1cda6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1cdaa:	bf54      	ite	pl
   1cdac:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1cdb0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1cdb2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1cdb4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1cdb8:	d513      	bpl.n	1cde2 <gpio_nrfx_pin_configure+0x126>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1cdba:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1cdbe:	2301      	movs	r3, #1
   1cdc0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1cdc2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1cdc6:	2200      	movs	r2, #0
   1cdc8:	a901      	add	r1, sp, #4
   1cdca:	4628      	mov	r0, r5
   1cdcc:	f002 fcd2 	bl	1f774 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1cdd0:	4b10      	ldr	r3, [pc, #64]	; (1ce14 <gpio_nrfx_pin_configure+0x158>)
   1cdd2:	4298      	cmp	r0, r3
   1cdd4:	d1a8      	bne.n	1cd28 <gpio_nrfx_pin_configure+0x6c>
   1cdd6:	2000      	movs	r0, #0
   1cdd8:	e7a8      	b.n	1cd2c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1cdda:	2305      	movs	r3, #5
   1cddc:	e7dc      	b.n	1cd98 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cdde:	2303      	movs	r3, #3
   1cde0:	e7da      	b.n	1cd98 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1cde2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1cde4:	bf41      	itttt	mi
   1cde6:	2301      	movmi	r3, #1
   1cde8:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1cdec:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1cdee:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1cdf2:	e7e8      	b.n	1cdc6 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1cdf4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1cdf6:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1cdfa:	bf54      	ite	pl
   1cdfc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1ce00:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ce02:	461a      	mov	r2, r3
   1ce04:	a901      	add	r1, sp, #4
   1ce06:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1ce08:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ce0c:	f002 fc08 	bl	1f620 <nrfx_gpiote_input_configure>
   1ce10:	e7de      	b.n	1cdd0 <gpio_nrfx_pin_configure+0x114>
   1ce12:	bf00      	nop
   1ce14:	0bad0000 	.word	0x0bad0000
   1ce18:	0002a82e 	.word	0x0002a82e
   1ce1c:	0002a802 	.word	0x0002a802
   1ce20:	00027f8a 	.word	0x00027f8a

0001ce24 <nrf_gpio_pin_port_decode>:
{
   1ce24:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ce26:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1ce28:	0953      	lsrs	r3, r2, #5
   1ce2a:	d104      	bne.n	1ce36 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1ce2c:	f04f 33ff 	mov.w	r3, #4294967295
   1ce30:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ce32:	07db      	lsls	r3, r3, #31
   1ce34:	d40b      	bmi.n	1ce4e <nrf_gpio_pin_port_decode+0x2a>
   1ce36:	4907      	ldr	r1, [pc, #28]	; (1ce54 <nrf_gpio_pin_port_decode+0x30>)
   1ce38:	4807      	ldr	r0, [pc, #28]	; (1ce58 <nrf_gpio_pin_port_decode+0x34>)
   1ce3a:	4a08      	ldr	r2, [pc, #32]	; (1ce5c <nrf_gpio_pin_port_decode+0x38>)
   1ce3c:	f240 2347 	movw	r3, #583	; 0x247
   1ce40:	f007 fc54 	bl	246ec <assert_print>
   1ce44:	4805      	ldr	r0, [pc, #20]	; (1ce5c <nrf_gpio_pin_port_decode+0x38>)
   1ce46:	f240 2147 	movw	r1, #583	; 0x247
   1ce4a:	f007 fc48 	bl	246de <assert_post_action>
}
   1ce4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1ce52:	bd08      	pop	{r3, pc}
   1ce54:	0002a7d3 	.word	0x0002a7d3
   1ce58:	00027f8a 	.word	0x00027f8a
   1ce5c:	0002a7a0 	.word	0x0002a7a0

0001ce60 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1ce60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ce62:	461d      	mov	r5, r3
	return config->uarte_regs;
   1ce64:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1ce66:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1ce68:	f8d3 c000 	ldr.w	ip, [r3]
{
   1ce6c:	4606      	mov	r6, r0
   1ce6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce72:	f3ef 8711 	mrs	r7, BASEPRI
   1ce76:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce7a:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1ce7e:	68e3      	ldr	r3, [r4, #12]
   1ce80:	68d8      	ldr	r0, [r3, #12]
   1ce82:	b138      	cbz	r0, 1ce94 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1ce84:	f387 8811 	msr	BASEPRI, r7
   1ce88:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1ce8c:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1ce90:	b003      	add	sp, #12
   1ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1ce94:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1ce96:	68e3      	ldr	r3, [r4, #12]
   1ce98:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   1ce9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ce9e:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1cea2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1cea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ceaa:	68e3      	ldr	r3, [r4, #12]
   1ceac:	d111      	bne.n	1ced2 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1ceae:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1ceb0:	68e3      	ldr	r3, [r4, #12]
   1ceb2:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1ceb4:	4621      	mov	r1, r4
   1ceb6:	4630      	mov	r0, r6
   1ceb8:	f009 fcf7 	bl	268aa <start_tx_locked>
   1cebc:	f387 8811 	msr	BASEPRI, r7
   1cec0:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1cec4:	7ae3      	ldrb	r3, [r4, #11]
   1cec6:	2b01      	cmp	r3, #1
   1cec8:	d101      	bne.n	1cece <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1ceca:	1c6b      	adds	r3, r5, #1
   1cecc:	d106      	bne.n	1cedc <uarte_nrfx_tx+0x7c>
	return 0;
   1cece:	2000      	movs	r0, #0
   1ced0:	e7de      	b.n	1ce90 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1ced2:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1ced4:	4620      	mov	r0, r4
   1ced6:	f009 fc62 	bl	2679e <setup_tx_cache>
   1ceda:	e7eb      	b.n	1ceb4 <uarte_nrfx_tx+0x54>
			return ((t * to_hz + off) / from_hz);
   1cedc:	480b      	ldr	r0, [pc, #44]	; (1cf0c <uarte_nrfx_tx+0xac>)
   1cede:	4a0c      	ldr	r2, [pc, #48]	; (1cf10 <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1cee0:	68e4      	ldr	r4, [r4, #12]
   1cee2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1cee6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ceea:	2100      	movs	r1, #0
   1ceec:	2300      	movs	r3, #0
   1ceee:	fbc5 0106 	smlal	r0, r1, r5, r6
   1cef2:	f7e3 fcc3 	bl	87c <__aeabi_uldivmod>
   1cef6:	3420      	adds	r4, #32
   1cef8:	4602      	mov	r2, r0
   1cefa:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1cefc:	2000      	movs	r0, #0
   1cefe:	2100      	movs	r1, #0
   1cf00:	e9cd 0100 	strd	r0, r1, [sp]
   1cf04:	4620      	mov	r0, r4
   1cf06:	f006 f9c1 	bl	2328c <z_impl_k_timer_start>
   1cf0a:	e7e0      	b.n	1cece <uarte_nrfx_tx+0x6e>
   1cf0c:	000f423f 	.word	0x000f423f
   1cf10:	000f4240 	.word	0x000f4240

0001cf14 <uarte_nrfx_configure>:
{
   1cf14:	b570      	push	{r4, r5, r6, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1cf16:	794b      	ldrb	r3, [r1, #5]
   1cf18:	2b01      	cmp	r3, #1
   1cf1a:	d120      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1cf1c:	798b      	ldrb	r3, [r1, #6]
   1cf1e:	2b03      	cmp	r3, #3
   1cf20:	d11d      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
   1cf22:	79cd      	ldrb	r5, [r1, #7]
   1cf24:	b10d      	cbz	r5, 1cf2a <uarte_nrfx_configure+0x16>
   1cf26:	2d01      	cmp	r5, #1
   1cf28:	d119      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
	switch (cfg->parity) {
   1cf2a:	790a      	ldrb	r2, [r1, #4]
   1cf2c:	b112      	cbz	r2, 1cf34 <uarte_nrfx_configure+0x20>
   1cf2e:	2a02      	cmp	r2, #2
   1cf30:	d115      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
   1cf32:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1cf34:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1cf36:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1cf38:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1cf3c:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   1cf3e:	d064      	beq.n	1d00a <uarte_nrfx_configure+0xf6>
   1cf40:	d82b      	bhi.n	1cf9a <uarte_nrfx_configure+0x86>
   1cf42:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1cf46:	d063      	beq.n	1d010 <uarte_nrfx_configure+0xfc>
   1cf48:	d814      	bhi.n	1cf74 <uarte_nrfx_configure+0x60>
   1cf4a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1cf4e:	d061      	beq.n	1d014 <uarte_nrfx_configure+0x100>
   1cf50:	d808      	bhi.n	1cf64 <uarte_nrfx_configure+0x50>
   1cf52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1cf56:	d060      	beq.n	1d01a <uarte_nrfx_configure+0x106>
   1cf58:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1cf5c:	d060      	beq.n	1d020 <uarte_nrfx_configure+0x10c>
   1cf5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cf62:	e051      	b.n	1d008 <uarte_nrfx_configure+0xf4>
   1cf64:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1cf68:	d05d      	beq.n	1d026 <uarte_nrfx_configure+0x112>
   1cf6a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1cf6e:	d1f6      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1cf70:	4b37      	ldr	r3, [pc, #220]	; (1d050 <uarte_nrfx_configure+0x13c>)
   1cf72:	e03c      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cf74:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1cf78:	d058      	beq.n	1d02c <uarte_nrfx_configure+0x118>
   1cf7a:	d807      	bhi.n	1cf8c <uarte_nrfx_configure+0x78>
   1cf7c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1cf80:	d056      	beq.n	1d030 <uarte_nrfx_configure+0x11c>
   1cf82:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1cf86:	d1ea      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1cf88:	4b32      	ldr	r3, [pc, #200]	; (1d054 <uarte_nrfx_configure+0x140>)
   1cf8a:	e030      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cf8c:	f647 2412 	movw	r4, #31250	; 0x7a12
   1cf90:	42a3      	cmp	r3, r4
   1cf92:	d1e4      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1cf94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1cf98:	e029      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cf9a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1cf9e:	d049      	beq.n	1d034 <uarte_nrfx_configure+0x120>
   1cfa0:	d813      	bhi.n	1cfca <uarte_nrfx_configure+0xb6>
   1cfa2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1cfa6:	d048      	beq.n	1d03a <uarte_nrfx_configure+0x126>
   1cfa8:	d809      	bhi.n	1cfbe <uarte_nrfx_configure+0xaa>
   1cfaa:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1cfae:	42a3      	cmp	r3, r4
   1cfb0:	d045      	beq.n	1d03e <uarte_nrfx_configure+0x12a>
   1cfb2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1cfb6:	d1d2      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1cfb8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1cfbc:	e017      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cfbe:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1cfc2:	d1cc      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1cfc4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1cfc8:	e011      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cfca:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1cfce:	d039      	beq.n	1d044 <uarte_nrfx_configure+0x130>
   1cfd0:	d808      	bhi.n	1cfe4 <uarte_nrfx_configure+0xd0>
   1cfd2:	4c21      	ldr	r4, [pc, #132]	; (1d058 <uarte_nrfx_configure+0x144>)
   1cfd4:	42a3      	cmp	r3, r4
   1cfd6:	d038      	beq.n	1d04a <uarte_nrfx_configure+0x136>
   1cfd8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1cfdc:	d1bf      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1cfde:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1cfe2:	e004      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cfe4:	4c1d      	ldr	r4, [pc, #116]	; (1d05c <uarte_nrfx_configure+0x148>)
   1cfe6:	42a3      	cmp	r3, r4
   1cfe8:	d1b9      	bne.n	1cf5e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1cfea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1cfee:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1cff0:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   1cff4:	6843      	ldr	r3, [r0, #4]
   1cff6:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1cff8:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1cffa:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1cffe:	c903      	ldmia	r1, {r0, r1}
   1d000:	1d23      	adds	r3, r4, #4
   1d002:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1d006:	2000      	movs	r0, #0
}
   1d008:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d00a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d00e:	e7ee      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d010:	4b13      	ldr	r3, [pc, #76]	; (1d060 <uarte_nrfx_configure+0x14c>)
   1d012:	e7ec      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d014:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d018:	e7e9      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1d01a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d01e:	e7e6      	b.n	1cfee <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1d020:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d024:	e7e3      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d026:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d02a:	e7e0      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d02c:	4b0d      	ldr	r3, [pc, #52]	; (1d064 <uarte_nrfx_configure+0x150>)
   1d02e:	e7de      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d030:	4b0d      	ldr	r3, [pc, #52]	; (1d068 <uarte_nrfx_configure+0x154>)
   1d032:	e7dc      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d034:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d038:	e7d9      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d03a:	4b0c      	ldr	r3, [pc, #48]	; (1d06c <uarte_nrfx_configure+0x158>)
   1d03c:	e7d7      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d03e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d042:	e7d4      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d044:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d048:	e7d1      	b.n	1cfee <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d04a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d04e:	e7ce      	b.n	1cfee <uarte_nrfx_configure+0xda>
   1d050:	0013b000 	.word	0x0013b000
   1d054:	004ea000 	.word	0x004ea000
   1d058:	0003d090 	.word	0x0003d090
   1d05c:	000f4240 	.word	0x000f4240
   1d060:	00275000 	.word	0x00275000
   1d064:	0075c000 	.word	0x0075c000
   1d068:	003af000 	.word	0x003af000
   1d06c:	013a9000 	.word	0x013a9000

0001d070 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d074:	2200      	movs	r2, #0
   1d076:	b087      	sub	sp, #28
   1d078:	4607      	mov	r7, r0
   1d07a:	2101      	movs	r1, #1
   1d07c:	2002      	movs	r0, #2
   1d07e:	f7f7 ff29 	bl	14ed4 <z_arm_irq_priority_set>
   1d082:	2002      	movs	r0, #2
   1d084:	f7f7 fef6 	bl	14e74 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1d088:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d08c:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1d08e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d092:	2100      	movs	r1, #0
   1d094:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1d098:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d09a:	f8d8 900c 	ldr.w	r9, [r8, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1d09e:	466a      	mov	r2, sp
   1d0a0:	4648      	mov	r0, r9
   1d0a2:	f009 f9e0 	bl	26466 <pinctrl_lookup_state>
	if (ret < 0) {
   1d0a6:	1e05      	subs	r5, r0, #0
   1d0a8:	db26      	blt.n	1d0f8 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1d0aa:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d0ac:	f8d9 2000 	ldr.w	r2, [r9]
   1d0b0:	7919      	ldrb	r1, [r3, #4]
   1d0b2:	6818      	ldr	r0, [r3, #0]
   1d0b4:	f009 f9ea 	bl	2648c <pinctrl_configure_pins>
	if (err < 0) {
   1d0b8:	1e05      	subs	r5, r0, #0
   1d0ba:	db1d      	blt.n	1d0f8 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d0bc:	1d31      	adds	r1, r6, #4
   1d0be:	4638      	mov	r0, r7
   1d0c0:	f7ff ff28 	bl	1cf14 <uarte_nrfx_configure>
	if (err) {
   1d0c4:	4605      	mov	r5, r0
   1d0c6:	b9b8      	cbnz	r0, 1d0f8 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d0c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d0cc:	0799      	lsls	r1, r3, #30
   1d0ce:	d52b      	bpl.n	1d128 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d0d0:	f106 001c 	add.w	r0, r6, #28
   1d0d4:	f002 fda6 	bl	1fc24 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d0d8:	4b4b      	ldr	r3, [pc, #300]	; (1d208 <uarte_0_init+0x198>)
   1d0da:	4298      	cmp	r0, r3
   1d0dc:	d010      	beq.n	1d100 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1d0de:	4b4b      	ldr	r3, [pc, #300]	; (1d20c <uarte_0_init+0x19c>)
   1d0e0:	9305      	str	r3, [sp, #20]
   1d0e2:	2302      	movs	r3, #2
   1d0e4:	9304      	str	r3, [sp, #16]
   1d0e6:	484a      	ldr	r0, [pc, #296]	; (1d210 <uarte_0_init+0x1a0>)
   1d0e8:	462b      	mov	r3, r5
   1d0ea:	aa04      	add	r2, sp, #16
   1d0ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1d0f0:	f06f 0504 	mvn.w	r5, #4
   1d0f4:	f7f6 ffd8 	bl	140a8 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1d0f8:	4628      	mov	r0, r5
   1d0fa:	b007      	add	sp, #28
   1d0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d100:	7f33      	ldrb	r3, [r6, #28]
   1d102:	00db      	lsls	r3, r3, #3
   1d104:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d108:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1d10c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d110:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1d114:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d118:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d11c:	7f32      	ldrb	r2, [r6, #28]
   1d11e:	2301      	movs	r3, #1
   1d120:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d122:	4a3c      	ldr	r2, [pc, #240]	; (1d214 <uarte_0_init+0x1a4>)
   1d124:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d128:	68f3      	ldr	r3, [r6, #12]
   1d12a:	2b00      	cmp	r3, #0
   1d12c:	d059      	beq.n	1d1e2 <uarte_0_init+0x172>
	return config->uarte_regs;
   1d12e:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d130:	f8d7 9010 	ldr.w	r9, [r7, #16]
	return config->uarte_regs;
   1d134:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d136:	2204      	movs	r2, #4
   1d138:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d13c:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1d140:	2201      	movs	r2, #1
   1d142:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1d146:	4934      	ldr	r1, [pc, #208]	; (1d218 <uarte_0_init+0x1a8>)
   1d148:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d14c:	2108      	movs	r1, #8
   1d14e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d152:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d156:	b1a1      	cbz	r1, 1d182 <uarte_0_init+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d158:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d15a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d15e:	b91a      	cbnz	r2, 1d168 <uarte_0_init+0xf8>
   1d160:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d164:	2a00      	cmp	r2, #0
   1d166:	d0f8      	beq.n	1d15a <uarte_0_init+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d168:	2200      	movs	r2, #0
   1d16a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d16e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d172:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d176:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d17a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d17e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d182:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1d186:	4925      	ldr	r1, [pc, #148]	; (1d21c <uarte_0_init+0x1ac>)
   1d188:	2200      	movs	r2, #0
   1d18a:	3080      	adds	r0, #128	; 0x80
   1d18c:	f009 fe91 	bl	26eb2 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d190:	f8d9 300c 	ldr.w	r3, [r9, #12]
	timer->user_data = user_data;
   1d194:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d198:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1d19c:	4920      	ldr	r1, [pc, #128]	; (1d220 <uarte_0_init+0x1b0>)
   1d19e:	2200      	movs	r2, #0
   1d1a0:	3020      	adds	r0, #32
   1d1a2:	f009 fe86 	bl	26eb2 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d1a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1d1aa:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d1ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d1b2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d1b4:	bf5c      	itt	pl
   1d1b6:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d1ba:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d1be:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d1c2:	06db      	lsls	r3, r3, #27
   1d1c4:	bf44      	itt	mi
   1d1c6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d1ca:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d1ce:	6973      	ldr	r3, [r6, #20]
   1d1d0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d1d4:	2300      	movs	r3, #0
   1d1d6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d1da:	2301      	movs	r3, #1
   1d1dc:	60a3      	str	r3, [r4, #8]
   1d1de:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d1e0:	e78a      	b.n	1d0f8 <uarte_0_init+0x88>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d1e2:	2308      	movs	r3, #8
   1d1e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d1e8:	f898 3008 	ldrb.w	r3, [r8, #8]
   1d1ec:	2b00      	cmp	r3, #0
   1d1ee:	d1de      	bne.n	1d1ae <uarte_0_init+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d1f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d1f4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d1f8:	69b3      	ldr	r3, [r6, #24]
   1d1fa:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d1fe:	2301      	movs	r3, #1
   1d200:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d204:	6023      	str	r3, [r4, #0]
}
   1d206:	e7d2      	b.n	1d1ae <uarte_0_init+0x13e>
   1d208:	0bad0000 	.word	0x0bad0000
   1d20c:	0002a850 	.word	0x0002a850
   1d210:	00027418 	.word	0x00027418
   1d214:	4001f000 	.word	0x4001f000
   1d218:	000a0210 	.word	0x000a0210
   1d21c:	000268e1 	.word	0x000268e1
   1d220:	000269b1 	.word	0x000269b1

0001d224 <uarte_nrfx_poll_out>:
{
   1d224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d228:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1d22a:	6905      	ldr	r5, [r0, #16]
{
   1d22c:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d22e:	f009 fd1c 	bl	26c6a <k_is_in_isr>
   1d232:	b9b0      	cbnz	r0, 1d262 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1d234:	4b2a      	ldr	r3, [pc, #168]	; (1d2e0 <uarte_nrfx_poll_out+0xbc>)
   1d236:	781b      	ldrb	r3, [r3, #0]
   1d238:	b19b      	cbz	r3, 1d262 <uarte_nrfx_poll_out+0x3e>
{
   1d23a:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d23c:	6860      	ldr	r0, [r4, #4]
   1d23e:	f009 fb24 	bl	2688a <is_tx_ready.isra.0>
   1d242:	2800      	cmp	r0, #0
   1d244:	d138      	bne.n	1d2b8 <uarte_nrfx_poll_out+0x94>
   1d246:	2001      	movs	r0, #1
   1d248:	f009 fc64 	bl	26b14 <nrfx_busy_wait>
   1d24c:	3f01      	subs	r7, #1
   1d24e:	d1f5      	bne.n	1d23c <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1d250:	2100      	movs	r1, #0
   1d252:	2021      	movs	r0, #33	; 0x21
   1d254:	f005 fb42 	bl	228dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d258:	e7ef      	b.n	1d23a <uarte_nrfx_poll_out+0x16>
   1d25a:	f381 8811 	msr	BASEPRI, r1
   1d25e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d262:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d266:	f3ef 8111 	mrs	r1, BASEPRI
   1d26a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d26e:	f3bf 8f6f 	isb	sy
   1d272:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
   1d276:	4640      	mov	r0, r8
   1d278:	460f      	mov	r7, r1
   1d27a:	f009 fb06 	bl	2688a <is_tx_ready.isra.0>
   1d27e:	2800      	cmp	r0, #0
   1d280:	d0eb      	beq.n	1d25a <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d282:	68eb      	ldr	r3, [r5, #12]
   1d284:	b15b      	cbz	r3, 1d29e <uarte_nrfx_poll_out+0x7a>
   1d286:	68da      	ldr	r2, [r3, #12]
   1d288:	b14a      	cbz	r2, 1d29e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d28a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d28e:	2a00      	cmp	r2, #0
   1d290:	da05      	bge.n	1d29e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d292:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d296:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d29a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d29e:	696b      	ldr	r3, [r5, #20]
   1d2a0:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d2a2:	6969      	ldr	r1, [r5, #20]
   1d2a4:	2201      	movs	r2, #1
   1d2a6:	4620      	mov	r0, r4
   1d2a8:	f009 f996 	bl	265d8 <tx_start>
	__asm__ volatile(
   1d2ac:	f387 8811 	msr	BASEPRI, r7
   1d2b0:	f3bf 8f6f 	isb	sy
}
   1d2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d2b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2bc:	f3ef 8111 	mrs	r1, BASEPRI
   1d2c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2c4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d2c8:	6860      	ldr	r0, [r4, #4]
   1d2ca:	460f      	mov	r7, r1
   1d2cc:	f009 fadd 	bl	2688a <is_tx_ready.isra.0>
   1d2d0:	2800      	cmp	r0, #0
   1d2d2:	d1e4      	bne.n	1d29e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d2d4:	f381 8811 	msr	BASEPRI, r1
   1d2d8:	f3bf 8f6f 	isb	sy
}
   1d2dc:	e7b8      	b.n	1d250 <uarte_nrfx_poll_out+0x2c>
   1d2de:	bf00      	nop
   1d2e0:	200036e4 	.word	0x200036e4

0001d2e4 <uarte_nrfx_rx_enable>:
{
   1d2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1d2e8:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d2ec:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d2ee:	f8da 9000 	ldr.w	r9, [sl]
{
   1d2f2:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1d2f4:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1d2f8:	4605      	mov	r5, r0
   1d2fa:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   1d2fc:	b172      	cbz	r2, 1d31c <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1d2fe:	4946      	ldr	r1, [pc, #280]	; (1d418 <uarte_nrfx_rx_enable+0x134>)
   1d300:	4a46      	ldr	r2, [pc, #280]	; (1d41c <uarte_nrfx_rx_enable+0x138>)
   1d302:	4847      	ldr	r0, [pc, #284]	; (1d420 <uarte_nrfx_rx_enable+0x13c>)
   1d304:	f240 3341 	movw	r3, #833	; 0x341
   1d308:	f007 f9f0 	bl	246ec <assert_print>
   1d30c:	4845      	ldr	r0, [pc, #276]	; (1d424 <uarte_nrfx_rx_enable+0x140>)
   1d30e:	f007 f9ed 	bl	246ec <assert_print>
   1d312:	4842      	ldr	r0, [pc, #264]	; (1d41c <uarte_nrfx_rx_enable+0x138>)
   1d314:	f240 3141 	movw	r1, #833	; 0x341
   1d318:	f007 f9e1 	bl	246de <assert_post_action>
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1d31c:	68e2      	ldr	r2, [r4, #12]
   1d31e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1d322:	2900      	cmp	r1, #0
   1d324:	d175      	bne.n	1d412 <uarte_nrfx_rx_enable+0x12e>
   1d326:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1d32a:	2900      	cmp	r1, #0
   1d32c:	d171      	bne.n	1d412 <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
   1d32e:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1d330:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   1d334:	bfc4      	itt	gt
   1d336:	2205      	movgt	r2, #5
   1d338:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1d33c:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   1d33e:	bfd8      	it	le
   1d340:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   1d342:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1d344:	68e3      	ldr	r3, [r4, #12]
   1d346:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1d34a:	68e3      	ldr	r3, [r4, #12]
   1d34c:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1d34e:	68e2      	ldr	r2, [r4, #12]
   1d350:	2300      	movs	r3, #0
   1d352:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1d354:	68e2      	ldr	r2, [r4, #12]
   1d356:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1d358:	68e2      	ldr	r2, [r4, #12]
   1d35a:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d35c:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d360:	06da      	lsls	r2, r3, #27
   1d362:	d523      	bpl.n	1d3ac <uarte_nrfx_rx_enable+0xc8>
		if (data->async->rx_flush_cnt) {
   1d364:	68e1      	ldr	r1, [r4, #12]
   1d366:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1d36a:	b1fe      	cbz	r6, 1d3ac <uarte_nrfx_rx_enable+0xc8>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1d36c:	42be      	cmp	r6, r7
   1d36e:	bf28      	it	cs
   1d370:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1d372:	4640      	mov	r0, r8
   1d374:	4632      	mov	r2, r6
   1d376:	31c4      	adds	r1, #196	; 0xc4
   1d378:	f007 fdc5 	bl	24f06 <memcpy>
			if (!len) {
   1d37c:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1d37e:	44b0      	add	r8, r6
			if (!len) {
   1d380:	d114      	bne.n	1d3ac <uarte_nrfx_rx_enable+0xc8>
				data->async->rx_flush_cnt -= cpy_len;
   1d382:	68e2      	ldr	r2, [r4, #12]
   1d384:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   1d388:	1b9b      	subs	r3, r3, r6
   1d38a:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1d38e:	4631      	mov	r1, r6
   1d390:	4628      	mov	r0, r5
   1d392:	f009 f950 	bl	26636 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1d396:	68e1      	ldr	r1, [r4, #12]
   1d398:	4628      	mov	r0, r5
   1d39a:	3158      	adds	r1, #88	; 0x58
   1d39c:	f009 f964 	bl	26668 <rx_buf_release>
				notify_rx_disable(dev);
   1d3a0:	4628      	mov	r0, r5
   1d3a2:	f009 f979 	bl	26698 <notify_rx_disable>
	return 0;
   1d3a6:	2000      	movs	r0, #0
}
   1d3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d3ac:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d3ae:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d3b2:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d3b6:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1d3ba:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   1d3be:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1d3c2:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   1d3c6:	68e3      	ldr	r3, [r4, #12]
   1d3c8:	2201      	movs	r2, #1
   1d3ca:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d3ce:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d3d2:	06db      	lsls	r3, r3, #27
   1d3d4:	d519      	bpl.n	1d40a <uarte_nrfx_rx_enable+0x126>
	__asm__ volatile(
   1d3d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3da:	f3ef 8111 	mrs	r1, BASEPRI
   1d3de:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3e2:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1d3e6:	692b      	ldr	r3, [r5, #16]
   1d3e8:	68db      	ldr	r3, [r3, #12]
   1d3ea:	b12b      	cbz	r3, 1d3f8 <uarte_nrfx_rx_enable+0x114>
		data->async->low_power_mask |= mask;
   1d3ec:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1d3f0:	f042 0202 	orr.w	r2, r2, #2
   1d3f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   1d3f8:	686b      	ldr	r3, [r5, #4]
   1d3fa:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d3fc:	2208      	movs	r2, #8
   1d3fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1d402:	f381 8811 	msr	BASEPRI, r1
   1d406:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d40a:	2301      	movs	r3, #1
   1d40c:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1d410:	e7c9      	b.n	1d3a6 <uarte_nrfx_rx_enable+0xc2>
		return -EBUSY;
   1d412:	f06f 000f 	mvn.w	r0, #15
   1d416:	e7c7      	b.n	1d3a8 <uarte_nrfx_rx_enable+0xc4>
   1d418:	0002ab0f 	.word	0x0002ab0f
   1d41c:	0002a86f 	.word	0x0002a86f
   1d420:	00027f8a 	.word	0x00027f8a
   1d424:	0002a8a3 	.word	0x0002a8a3

0001d428 <uarte_nrfx_isr_async>:
{
   1d428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1d42c:	6843      	ldr	r3, [r0, #4]
   1d42e:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1d430:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d432:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1d436:	b088      	sub	sp, #32
   1d438:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   1d43a:	b169      	cbz	r1, 1d458 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d43c:	2200      	movs	r2, #0
   1d43e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1d442:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1d446:	68da      	ldr	r2, [r3, #12]
   1d448:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1d44c:	3301      	adds	r3, #1
   1d44e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1d452:	b008      	add	sp, #32
   1d454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d458:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d45c:	b323      	cbz	r3, 1d4a8 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d45e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1d462:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1d466:	6843      	ldr	r3, [r0, #4]
   1d468:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d46a:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d46e:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
   1d472:	2214      	movs	r2, #20
   1d474:	a803      	add	r0, sp, #12
   1d476:	f007 fd51 	bl	24f1c <memset>
   1d47a:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d47c:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1d47e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d482:	f100 810c 	bmi.w	1d69e <uarte_nrfx_isr_async+0x276>
   1d486:	07b3      	lsls	r3, r6, #30
   1d488:	f100 810b 	bmi.w	1d6a2 <uarte_nrfx_isr_async+0x27a>
   1d48c:	0777      	lsls	r7, r6, #29
   1d48e:	f100 810a 	bmi.w	1d6a6 <uarte_nrfx_isr_async+0x27e>
   1d492:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1d496:	4620      	mov	r0, r4
   1d498:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d49a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1d49e:	f009 f8c3 	bl	26628 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1d4a2:	4620      	mov	r0, r4
   1d4a4:	f009 f956 	bl	26754 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4a8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1d4ac:	2b00      	cmp	r3, #0
   1d4ae:	d033      	beq.n	1d518 <uarte_nrfx_isr_async+0xf0>
    return p_reg->INTENSET & mask;
   1d4b0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1d4b4:	06d8      	lsls	r0, r3, #27
   1d4b6:	d52f      	bpl.n	1d518 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4b8:	f04f 0800 	mov.w	r8, #0
   1d4bc:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1d4c0:	6926      	ldr	r6, [r4, #16]
   1d4c2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1d4c6:	6863      	ldr	r3, [r4, #4]
   1d4c8:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1d4ca:	68f3      	ldr	r3, [r6, #12]
   1d4cc:	2201      	movs	r2, #1
   1d4ce:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1d4d2:	68f0      	ldr	r0, [r6, #12]
   1d4d4:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1d4d6:	f009 fcf8 	bl	26eca <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1d4da:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1d4dc:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1d4e0:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1d4e4:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1d4e8:	68f2      	ldr	r2, [r6, #12]
   1d4ea:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1d4ec:	1a1b      	subs	r3, r3, r0
   1d4ee:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1d4f0:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1d4f2:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1d4f6:	4408      	add	r0, r1
	if (rx_len > 0) {
   1d4f8:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1d4fa:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1d4fc:	dd02      	ble.n	1d504 <uarte_nrfx_isr_async+0xdc>
		notify_uart_rx_rdy(dev, rx_len);
   1d4fe:	4620      	mov	r0, r4
   1d500:	f009 f899 	bl	26636 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1d504:	68f1      	ldr	r1, [r6, #12]
   1d506:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1d50a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1d50e:	2b00      	cmp	r3, #0
   1d510:	f040 80cb 	bne.w	1d6aa <uarte_nrfx_isr_async+0x282>
		data->async->is_in_irq = false;
   1d514:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d518:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1d51c:	b383      	cbz	r3, 1d580 <uarte_nrfx_isr_async+0x158>
   1d51e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d522:	bb6e      	cbnz	r6, 1d580 <uarte_nrfx_isr_async+0x158>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d524:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d528:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
   1d52a:	6927      	ldr	r7, [r4, #16]
   1d52c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d530:	4631      	mov	r1, r6
   1d532:	a803      	add	r0, sp, #12
   1d534:	f007 fcf2 	bl	24f1c <memset>
   1d538:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1d53a:	a903      	add	r1, sp, #12
   1d53c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d53e:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1d542:	f009 f871 	bl	26628 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1d546:	68fb      	ldr	r3, [r7, #12]
   1d548:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1d54a:	1c51      	adds	r1, r2, #1
   1d54c:	d018      	beq.n	1d580 <uarte_nrfx_isr_async+0x158>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1d54e:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1d550:	68ff      	ldr	r7, [r7, #12]
   1d552:	498f      	ldr	r1, [pc, #572]	; (1d790 <uarte_nrfx_isr_async+0x368>)
			      K_USEC(data->async->rx_timeout_slab),
   1d554:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1d556:	4a8f      	ldr	r2, [pc, #572]	; (1d794 <uarte_nrfx_isr_async+0x36c>)
   1d558:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1d55c:	468e      	mov	lr, r1
   1d55e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d562:	4631      	mov	r1, r6
   1d564:	fbcc e100 	smlal	lr, r1, ip, r0
   1d568:	2300      	movs	r3, #0
   1d56a:	4670      	mov	r0, lr
   1d56c:	f7e3 f986 	bl	87c <__aeabi_uldivmod>
   1d570:	4602      	mov	r2, r0
   1d572:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d574:	e9cd 0100 	strd	r0, r1, [sp]
   1d578:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1d57c:	f005 fe86 	bl	2328c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d580:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d584:	b363      	cbz	r3, 1d5e0 <uarte_nrfx_isr_async+0x1b8>
   1d586:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d58a:	bb4e      	cbnz	r6, 1d5e0 <uarte_nrfx_isr_async+0x1b8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d58c:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1d590:	6927      	ldr	r7, [r4, #16]
   1d592:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
   1d596:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
   1d598:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1d59c:	3158      	adds	r1, #88	; 0x58
   1d59e:	4620      	mov	r0, r4
   1d5a0:	f009 f862 	bl	26668 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1d5a4:	68f9      	ldr	r1, [r7, #12]
   1d5a6:	4620      	mov	r0, r4
   1d5a8:	3164      	adds	r1, #100	; 0x64
   1d5aa:	f009 f85d 	bl	26668 <rx_buf_release>
	data->async->rx_enabled = false;
   1d5ae:	68fb      	ldr	r3, [r7, #12]
   1d5b0:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1d5b4:	68fb      	ldr	r3, [r7, #12]
   1d5b6:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1d5ba:	b132      	cbz	r2, 1d5ca <uarte_nrfx_isr_async+0x1a2>
		data->async->discard_rx_fifo = false;
   1d5bc:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1d5c0:	6860      	ldr	r0, [r4, #4]
   1d5c2:	4632      	mov	r2, r6
   1d5c4:	4631      	mov	r1, r6
   1d5c6:	f009 f902 	bl	267ce <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d5ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d5ce:	06d8      	lsls	r0, r3, #27
   1d5d0:	d503      	bpl.n	1d5da <uarte_nrfx_isr_async+0x1b2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1d5d2:	2102      	movs	r1, #2
   1d5d4:	4620      	mov	r0, r4
   1d5d6:	f009 f92e 	bl	26836 <async_uart_release>
	notify_rx_disable(dev);
   1d5da:	4620      	mov	r0, r4
   1d5dc:	f009 f85c 	bl	26698 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d5e0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1d5e4:	b1db      	cbz	r3, 1d61e <uarte_nrfx_isr_async+0x1f6>
    return p_reg->INTENSET & mask;
   1d5e6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1d5ea:	05d9      	lsls	r1, r3, #23
   1d5ec:	d517      	bpl.n	1d61e <uarte_nrfx_isr_async+0x1f6>
	return config->uarte_regs;
   1d5ee:	6863      	ldr	r3, [r4, #4]
   1d5f0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1d5f2:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d5f6:	f3ef 8211 	mrs	r2, BASEPRI
   1d5fa:	f381 8812 	msr	BASEPRI_MAX, r1
   1d5fe:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d602:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d606:	b131      	cbz	r1, 1d616 <uarte_nrfx_isr_async+0x1ee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d608:	2100      	movs	r1, #0
   1d60a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d60e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d612:	2101      	movs	r1, #1
   1d614:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d616:	f382 8811 	msr	BASEPRI, r2
   1d61a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d61e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1d622:	2b00      	cmp	r3, #0
   1d624:	f43f af15 	beq.w	1d452 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1d628:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1d62c:	025a      	lsls	r2, r3, #9
   1d62e:	f57f af10 	bpl.w	1d452 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1d632:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d634:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d636:	e9d3 7300 	ldrd	r7, r3, [r3]
   1d63a:	06db      	lsls	r3, r3, #27
   1d63c:	d466      	bmi.n	1d70c <uarte_nrfx_isr_async+0x2e4>
	if (!data->async->tx_buf) {
   1d63e:	68eb      	ldr	r3, [r5, #12]
   1d640:	689b      	ldr	r3, [r3, #8]
   1d642:	2b00      	cmp	r3, #0
   1d644:	f43f af05 	beq.w	1d452 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1d648:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d64c:	f3ef 8211 	mrs	r2, BASEPRI
   1d650:	f383 8812 	msr	BASEPRI_MAX, r3
   1d654:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1d658:	68eb      	ldr	r3, [r5, #12]
   1d65a:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1d65e:	2900      	cmp	r1, #0
   1d660:	bfac      	ite	ge
   1d662:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1d666:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1d66a:	f382 8811 	msr	BASEPRI, r2
   1d66e:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1d672:	68eb      	ldr	r3, [r5, #12]
   1d674:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1d678:	2a00      	cmp	r2, #0
   1d67a:	d054      	beq.n	1d726 <uarte_nrfx_isr_async+0x2fe>
	__asm__ volatile(
   1d67c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d680:	f3ef 8611 	mrs	r6, BASEPRI
   1d684:	f383 8812 	msr	BASEPRI_MAX, r3
   1d688:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1d68c:	4629      	mov	r1, r5
   1d68e:	4620      	mov	r0, r4
   1d690:	f009 f90b 	bl	268aa <start_tx_locked>
	__asm__ volatile(
   1d694:	f386 8811 	msr	BASEPRI, r6
   1d698:	f3bf 8f6f 	isb	sy
				return;
   1d69c:	e6d9      	b.n	1d452 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d69e:	2601      	movs	r6, #1
   1d6a0:	e6f9      	b.n	1d496 <uarte_nrfx_isr_async+0x6e>
   1d6a2:	2602      	movs	r6, #2
   1d6a4:	e6f7      	b.n	1d496 <uarte_nrfx_isr_async+0x6e>
   1d6a6:	2604      	movs	r6, #4
   1d6a8:	e6f5      	b.n	1d496 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1d6aa:	3158      	adds	r1, #88	; 0x58
   1d6ac:	4620      	mov	r0, r4
   1d6ae:	f008 ffdb 	bl	26668 <rx_buf_release>
	__asm__ volatile(
   1d6b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d6b6:	f3ef 8111 	mrs	r1, BASEPRI
   1d6ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1d6be:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1d6c2:	68f3      	ldr	r3, [r6, #12]
   1d6c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d6c6:	b1f2      	cbz	r2, 1d706 <uarte_nrfx_isr_async+0x2de>
		data->async->rx_buf = data->async->rx_next_buf;
   1d6c8:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1d6ca:	68f3      	ldr	r3, [r6, #12]
   1d6cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d6ce:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1d6d0:	68f2      	ldr	r2, [r6, #12]
   1d6d2:	2300      	movs	r3, #0
   1d6d4:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1d6d6:	68f2      	ldr	r2, [r6, #12]
   1d6d8:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1d6da:	68f2      	ldr	r2, [r6, #12]
   1d6dc:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d6e2:	b90b      	cbnz	r3, 1d6e8 <uarte_nrfx_isr_async+0x2c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6e4:	2301      	movs	r3, #1
   1d6e6:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1d6e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1d6ec:	f023 0320 	bic.w	r3, r3, #32
   1d6f0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1d6f4:	f381 8811 	msr	BASEPRI, r1
   1d6f8:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1d6fc:	68f3      	ldr	r3, [r6, #12]
   1d6fe:	2200      	movs	r2, #0
   1d700:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   1d704:	e708      	b.n	1d518 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d706:	2301      	movs	r3, #1
   1d708:	607b      	str	r3, [r7, #4]
}
   1d70a:	e7f3      	b.n	1d6f4 <uarte_nrfx_isr_async+0x2cc>
    p_reg->INTENCLR = mask;
   1d70c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d710:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1d714:	2101      	movs	r1, #1
   1d716:	4620      	mov	r0, r4
   1d718:	f009 f88d 	bl	26836 <async_uart_release>
		if (!data->async->tx_size) {
   1d71c:	68eb      	ldr	r3, [r5, #12]
   1d71e:	68db      	ldr	r3, [r3, #12]
   1d720:	2b00      	cmp	r3, #0
   1d722:	d18c      	bne.n	1d63e <uarte_nrfx_isr_async+0x216>
   1d724:	e695      	b.n	1d452 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1d726:	6899      	ldr	r1, [r3, #8]
   1d728:	691a      	ldr	r2, [r3, #16]
   1d72a:	4291      	cmp	r1, r2
   1d72c:	d00c      	beq.n	1d748 <uarte_nrfx_isr_async+0x320>
		if (amount == data->async->xfer_len) {
   1d72e:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1d730:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1d732:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1d734:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1d736:	d128      	bne.n	1d78a <uarte_nrfx_isr_async+0x362>
			data->async->tx_cache_offset += amount;
   1d738:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1d73a:	4628      	mov	r0, r5
   1d73c:	f009 f82f 	bl	2679e <setup_tx_cache>
   1d740:	2800      	cmp	r0, #0
   1d742:	d19b      	bne.n	1d67c <uarte_nrfx_isr_async+0x254>
			amount = data->async->tx_cache_offset;
   1d744:	68eb      	ldr	r3, [r5, #12]
   1d746:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1d748:	68e8      	ldr	r0, [r5, #12]
   1d74a:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1d74c:	f009 fbbd 	bl	26eca <z_impl_k_timer_stop>
	struct uart_event evt = {
   1d750:	2214      	movs	r2, #20
   1d752:	2100      	movs	r1, #0
   1d754:	a803      	add	r0, sp, #12
   1d756:	f007 fbe1 	bl	24f1c <memset>
		.data.tx.buf = data->async->tx_buf,
   1d75a:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   1d75c:	689a      	ldr	r2, [r3, #8]
   1d75e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1d762:	68db      	ldr	r3, [r3, #12]
   1d764:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1d766:	bf1c      	itt	ne
   1d768:	2301      	movne	r3, #1
   1d76a:	f88d 300c 	strbne.w	r3, [sp, #12]
   1d76e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d772:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1d776:	68ea      	ldr	r2, [r5, #12]
   1d778:	2300      	movs	r3, #0
   1d77a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1d77c:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   1d77e:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   1d780:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1d782:	4620      	mov	r0, r4
   1d784:	f008 ff50 	bl	26628 <user_callback>
   1d788:	e663      	b.n	1d452 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1d78a:	4616      	mov	r6, r2
   1d78c:	e7dc      	b.n	1d748 <uarte_nrfx_isr_async+0x320>
   1d78e:	bf00      	nop
   1d790:	000f423f 	.word	0x000f423f
   1d794:	000f4240 	.word	0x000f4240

0001d798 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d798:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d79a:	490e      	ldr	r1, [pc, #56]	; (1d7d4 <sys_clock_timeout_handler+0x3c>)
   1d79c:	e9d1 3400 	ldrd	r3, r4, [r1]
   1d7a0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1d7a2:	18c3      	adds	r3, r0, r3
   1d7a4:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1d7a8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1d7ac:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d7b0:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1d7b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d7b8:	d209      	bcs.n	1d7ce <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d7ba:	4b07      	ldr	r3, [pc, #28]	; (1d7d8 <sys_clock_timeout_handler+0x40>)
   1d7bc:	681b      	ldr	r3, [r3, #0]
   1d7be:	0a1a      	lsrs	r2, r3, #8
   1d7c0:	061b      	lsls	r3, r3, #24
   1d7c2:	199c      	adds	r4, r3, r6
   1d7c4:	4b05      	ldr	r3, [pc, #20]	; (1d7dc <sys_clock_timeout_handler+0x44>)
   1d7c6:	f142 0500 	adc.w	r5, r2, #0
   1d7ca:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1d7ce:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1d7d0:	f005 bba8 	b.w	22f24 <sys_clock_announce>
   1d7d4:	200020a0 	.word	0x200020a0
   1d7d8:	20002fc0 	.word	0x20002fc0
   1d7dc:	200020a8 	.word	0x200020a8

0001d7e0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d7e0:	4b0d      	ldr	r3, [pc, #52]	; (1d818 <z_nrf_rtc_timer_read+0x38>)
   1d7e2:	6818      	ldr	r0, [r3, #0]
   1d7e4:	0a01      	lsrs	r1, r0, #8
   1d7e6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1d7e8:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1d7ec:	4b0b      	ldr	r3, [pc, #44]	; (1d81c <z_nrf_rtc_timer_read+0x3c>)
   1d7ee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d7f2:	1818      	adds	r0, r3, r0
   1d7f4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d7f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d7fc:	d20a      	bcs.n	1d814 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d7fe:	4b08      	ldr	r3, [pc, #32]	; (1d820 <z_nrf_rtc_timer_read+0x40>)
   1d800:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d804:	4290      	cmp	r0, r2
   1d806:	eb71 0303 	sbcs.w	r3, r1, r3
   1d80a:	d203      	bcs.n	1d814 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d80c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d810:	f141 0100 	adc.w	r1, r1, #0
}
   1d814:	4770      	bx	lr
   1d816:	bf00      	nop
   1d818:	20002fc0 	.word	0x20002fc0
   1d81c:	40011000 	.word	0x40011000
   1d820:	200020a8 	.word	0x200020a8

0001d824 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1d824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1d828:	4c2b      	ldr	r4, [pc, #172]	; (1d8d8 <rtc_nrf_isr+0xb4>)
   1d82a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d82e:	0799      	lsls	r1, r3, #30
   1d830:	d50b      	bpl.n	1d84a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d832:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d836:	b143      	cbz	r3, 1d84a <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1d838:	4a28      	ldr	r2, [pc, #160]	; (1d8dc <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d83a:	2300      	movs	r3, #0
   1d83c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d840:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d844:	6813      	ldr	r3, [r2, #0]
   1d846:	3301      	adds	r3, #1
   1d848:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d84a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d84e:	03da      	lsls	r2, r3, #15
   1d850:	d523      	bpl.n	1d89a <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d852:	f3bf 8f5b 	dmb	ish
   1d856:	4b22      	ldr	r3, [pc, #136]	; (1d8e0 <rtc_nrf_isr+0xbc>)
   1d858:	e853 2f00 	ldrex	r2, [r3]
   1d85c:	f022 0101 	bic.w	r1, r2, #1
   1d860:	e843 1000 	strex	r0, r1, [r3]
   1d864:	2800      	cmp	r0, #0
   1d866:	d1f7      	bne.n	1d858 <rtc_nrf_isr+0x34>
   1d868:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1d86c:	07d3      	lsls	r3, r2, #31
   1d86e:	d402      	bmi.n	1d876 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d870:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d874:	b18b      	cbz	r3, 1d89a <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d876:	2500      	movs	r5, #0
   1d878:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d87c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1d880:	f7ff ffae 	bl	1d7e0 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d884:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d888:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1d88a:	4b16      	ldr	r3, [pc, #88]	; (1d8e4 <rtc_nrf_isr+0xc0>)
   1d88c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1d890:	42b0      	cmp	r0, r6
   1d892:	41b9      	sbcs	r1, r7
   1d894:	d204      	bcs.n	1d8a0 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d896:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1d89a:	b003      	add	sp, #12
   1d89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d8a0:	f04f 38ff 	mov.w	r8, #4294967295
   1d8a4:	f04f 39ff 	mov.w	r9, #4294967295
   1d8a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1d8ac:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1d8b0:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d8b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d8b6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d8ba:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d8be:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d8c2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1d8c6:	2900      	cmp	r1, #0
   1d8c8:	d0e7      	beq.n	1d89a <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1d8ca:	9000      	str	r0, [sp, #0]
   1d8cc:	4632      	mov	r2, r6
   1d8ce:	463b      	mov	r3, r7
   1d8d0:	4628      	mov	r0, r5
   1d8d2:	4788      	blx	r1
   1d8d4:	e7e1      	b.n	1d89a <rtc_nrf_isr+0x76>
   1d8d6:	bf00      	nop
   1d8d8:	40011000 	.word	0x40011000
   1d8dc:	20002fc0 	.word	0x20002fc0
   1d8e0:	20002fb8 	.word	0x20002fb8
   1d8e4:	20002090 	.word	0x20002090

0001d8e8 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1d8e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8ec:	4d4b      	ldr	r5, [pc, #300]	; (1da1c <compare_set.constprop.0.isra.0+0x134>)
   1d8ee:	f3bf 8f5b 	dmb	ish
   1d8f2:	4606      	mov	r6, r0
   1d8f4:	460f      	mov	r7, r1
   1d8f6:	e855 8f00 	ldrex	r8, [r5]
   1d8fa:	f028 0301 	bic.w	r3, r8, #1
   1d8fe:	e845 3200 	strex	r2, r3, [r5]
   1d902:	2a00      	cmp	r2, #0
   1d904:	d1f7      	bne.n	1d8f6 <compare_set.constprop.0.isra.0+0xe>
   1d906:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   1d90a:	4c45      	ldr	r4, [pc, #276]	; (1da20 <compare_set.constprop.0.isra.0+0x138>)
   1d90c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1d910:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1d914:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d918:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d91c:	f7ff ff60 	bl	1d7e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d920:	42b0      	cmp	r0, r6
   1d922:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   1d926:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1d92a:	d240      	bcs.n	1d9ae <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1d92c:	4b3d      	ldr	r3, [pc, #244]	; (1da24 <compare_set.constprop.0.isra.0+0x13c>)
   1d92e:	1a30      	subs	r0, r6, r0
   1d930:	eb67 0101 	sbc.w	r1, r7, r1
   1d934:	4298      	cmp	r0, r3
   1d936:	f171 0100 	sbcs.w	r1, r1, #0
   1d93a:	d24c      	bcs.n	1d9d6 <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   1d93c:	4b3a      	ldr	r3, [pc, #232]	; (1da28 <compare_set.constprop.0.isra.0+0x140>)
   1d93e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d942:	429f      	cmp	r7, r3
   1d944:	bf08      	it	eq
   1d946:	4296      	cmpeq	r6, r2
   1d948:	d03e      	beq.n	1d9c8 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d94a:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   1d94e:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d952:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   1d956:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   1d95a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d95e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1da38 <compare_set.constprop.0.isra.0+0x150>
	uint32_t cc_val = req_cc;
   1d962:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1d964:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   1d966:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d96a:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d96e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1d972:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   1d976:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d97a:	ebae 0302 	sub.w	r3, lr, r2
   1d97e:	445b      	add	r3, fp
   1d980:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d984:	4553      	cmp	r3, sl
   1d986:	d91f      	bls.n	1d9c8 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d988:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   1d98c:	b15b      	cbz	r3, 1d9a6 <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   1d98e:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d992:	1a13      	subs	r3, r2, r0
   1d994:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1d998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1d99c:	d914      	bls.n	1d9c8 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d99e:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   1d9a2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   1d9a6:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   1d9aa:	3101      	adds	r1, #1
	for (;;) {
   1d9ac:	e7dd      	b.n	1d96a <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d9ae:	4b1f      	ldr	r3, [pc, #124]	; (1da2c <compare_set.constprop.0.isra.0+0x144>)
   1d9b0:	f3bf 8f5b 	dmb	ish
   1d9b4:	e853 1f00 	ldrex	r1, [r3]
   1d9b8:	f041 0101 	orr.w	r1, r1, #1
   1d9bc:	e843 1200 	strex	r2, r1, [r3]
   1d9c0:	2a00      	cmp	r2, #0
   1d9c2:	d1f7      	bne.n	1d9b4 <compare_set.constprop.0.isra.0+0xcc>
   1d9c4:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1d9c8:	4b17      	ldr	r3, [pc, #92]	; (1da28 <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
   1d9ca:	4a19      	ldr	r2, [pc, #100]	; (1da30 <compare_set.constprop.0.isra.0+0x148>)
   1d9cc:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   1d9ce:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
   1d9d2:	2200      	movs	r2, #0
   1d9d4:	605a      	str	r2, [r3, #4]
	if (key) {
   1d9d6:	f1b8 0f00 	cmp.w	r8, #0
   1d9da:	d01c      	beq.n	1da16 <compare_set.constprop.0.isra.0+0x12e>
   1d9dc:	f3bf 8f5b 	dmb	ish
   1d9e0:	e855 3f00 	ldrex	r3, [r5]
   1d9e4:	f043 0301 	orr.w	r3, r3, #1
   1d9e8:	e845 3200 	strex	r2, r3, [r5]
   1d9ec:	2a00      	cmp	r2, #0
   1d9ee:	d1f7      	bne.n	1d9e0 <compare_set.constprop.0.isra.0+0xf8>
   1d9f0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1d9f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d9f8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d9fc:	4b0b      	ldr	r3, [pc, #44]	; (1da2c <compare_set.constprop.0.isra.0+0x144>)
   1d9fe:	f3bf 8f5b 	dmb	ish
   1da02:	681b      	ldr	r3, [r3, #0]
   1da04:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1da08:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1da0a:	bf42      	ittt	mi
   1da0c:	4b09      	ldrmi	r3, [pc, #36]	; (1da34 <compare_set.constprop.0.isra.0+0x14c>)
   1da0e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1da12:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1da16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da1a:	bf00      	nop
   1da1c:	20002fbc 	.word	0x20002fbc
   1da20:	40011000 	.word	0x40011000
   1da24:	00800001 	.word	0x00800001
   1da28:	20002090 	.word	0x20002090
   1da2c:	20002fb8 	.word	0x20002fb8
   1da30:	0001d799 	.word	0x0001d799
   1da34:	e000e100 	.word	0xe000e100
   1da38:	007ffffd 	.word	0x007ffffd

0001da3c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1da3c:	b570      	push	{r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1da3e:	4c19      	ldr	r4, [pc, #100]	; (1daa4 <sys_clock_driver_init+0x68>)
   1da40:	4b19      	ldr	r3, [pc, #100]	; (1daa8 <sys_clock_driver_init+0x6c>)
   1da42:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1da46:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1da4a:	4b18      	ldr	r3, [pc, #96]	; (1daac <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   1da4c:	2500      	movs	r5, #0
   1da4e:	f04f 30ff 	mov.w	r0, #4294967295
   1da52:	f04f 31ff 	mov.w	r1, #4294967295
   1da56:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1da5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1da5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1da62:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1da66:	4b12      	ldr	r3, [pc, #72]	; (1dab0 <sys_clock_driver_init+0x74>)
   1da68:	2602      	movs	r6, #2
   1da6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1da6e:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1da72:	2101      	movs	r1, #1
   1da74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1da78:	2011      	movs	r0, #17
   1da7a:	462a      	mov	r2, r5
   1da7c:	f7f7 fa2a 	bl	14ed4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1da80:	2011      	movs	r0, #17
   1da82:	f7f7 f9f7 	bl	14e74 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1da86:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1da88:	4a0a      	ldr	r2, [pc, #40]	; (1dab4 <sys_clock_driver_init+0x78>)
   1da8a:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1da8c:	2100      	movs	r1, #0
   1da8e:	6023      	str	r3, [r4, #0]
   1da90:	4809      	ldr	r0, [pc, #36]	; (1dab8 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1da92:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1da94:	f7ff ff28 	bl	1d8e8 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1da98:	4630      	mov	r0, r6
   1da9a:	f7fe fd91 	bl	1c5c0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1da9e:	4628      	mov	r0, r5
   1daa0:	bd70      	pop	{r4, r5, r6, pc}
   1daa2:	bf00      	nop
   1daa4:	40011000 	.word	0x40011000
   1daa8:	000f0003 	.word	0x000f0003
   1daac:	20002090 	.word	0x20002090
   1dab0:	e000e100 	.word	0xe000e100
   1dab4:	20002fbc 	.word	0x20002fbc
   1dab8:	007fffff 	.word	0x007fffff

0001dabc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1dabc:	1c43      	adds	r3, r0, #1
{
   1dabe:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1dac0:	d01d      	beq.n	1dafe <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1dac2:	2801      	cmp	r0, #1
   1dac4:	dd1d      	ble.n	1db02 <sys_clock_set_timeout+0x46>
   1dac6:	4a10      	ldr	r2, [pc, #64]	; (1db08 <sys_clock_set_timeout+0x4c>)
   1dac8:	4b10      	ldr	r3, [pc, #64]	; (1db0c <sys_clock_set_timeout+0x50>)
   1daca:	4290      	cmp	r0, r2
   1dacc:	bfd4      	ite	le
   1dace:	4604      	movle	r4, r0
   1dad0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dad2:	f7ff fe85 	bl	1d7e0 <z_nrf_rtc_timer_read>
   1dad6:	4a0e      	ldr	r2, [pc, #56]	; (1db10 <sys_clock_set_timeout+0x54>)
   1dad8:	e9d2 3100 	ldrd	r3, r1, [r2]
   1dadc:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1dade:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   1dae2:	4a0a      	ldr	r2, [pc, #40]	; (1db0c <sys_clock_set_timeout+0x50>)
		cyc = 0;
   1dae4:	bf28      	it	cs
   1dae6:	2400      	movcs	r4, #0
	cyc += unannounced;
   1dae8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1daea:	4294      	cmp	r4, r2
   1daec:	bf28      	it	cs
   1daee:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1daf0:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1daf2:	f141 0100 	adc.w	r1, r1, #0
}
   1daf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dafa:	f7ff bef5 	b.w	1d8e8 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1dafe:	4c03      	ldr	r4, [pc, #12]	; (1db0c <sys_clock_set_timeout+0x50>)
   1db00:	e7e7      	b.n	1dad2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1db02:	2401      	movs	r4, #1
   1db04:	e7e5      	b.n	1dad2 <sys_clock_set_timeout+0x16>
   1db06:	bf00      	nop
   1db08:	007ffffe 	.word	0x007ffffe
   1db0c:	007fffff 	.word	0x007fffff
   1db10:	200020a0 	.word	0x200020a0

0001db14 <sys_clock_elapsed>:
{
   1db14:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1db16:	f7ff fe63 	bl	1d7e0 <z_nrf_rtc_timer_read>
   1db1a:	4b02      	ldr	r3, [pc, #8]	; (1db24 <sys_clock_elapsed+0x10>)
   1db1c:	681b      	ldr	r3, [r3, #0]
}
   1db1e:	1ac0      	subs	r0, r0, r3
   1db20:	bd08      	pop	{r3, pc}
   1db22:	bf00      	nop
   1db24:	200020a0 	.word	0x200020a0

0001db28 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1db28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1db2c:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   1db30:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1db34:	6906      	ldr	r6, [r0, #16]
{
   1db36:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1db38:	d00e      	beq.n	1db58 <z_impl_gpio_pin_configure+0x30>
   1db3a:	4942      	ldr	r1, [pc, #264]	; (1dc44 <z_impl_gpio_pin_configure+0x11c>)
   1db3c:	4a42      	ldr	r2, [pc, #264]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1db3e:	4843      	ldr	r0, [pc, #268]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1db40:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1db44:	f006 fdd2 	bl	246ec <assert_print>
   1db48:	4841      	ldr	r0, [pc, #260]	; (1dc50 <z_impl_gpio_pin_configure+0x128>)
   1db4a:	f006 fdcf 	bl	246ec <assert_print>
   1db4e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1db52:	483d      	ldr	r0, [pc, #244]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1db54:	f006 fdc3 	bl	246de <assert_post_action>
   1db58:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1db5c:	2a30      	cmp	r2, #48	; 0x30
   1db5e:	d10c      	bne.n	1db7a <z_impl_gpio_pin_configure+0x52>
   1db60:	493c      	ldr	r1, [pc, #240]	; (1dc54 <z_impl_gpio_pin_configure+0x12c>)
   1db62:	4a39      	ldr	r2, [pc, #228]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1db64:	4839      	ldr	r0, [pc, #228]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1db66:	f240 23d7 	movw	r3, #727	; 0x2d7
   1db6a:	f006 fdbf 	bl	246ec <assert_print>
   1db6e:	483a      	ldr	r0, [pc, #232]	; (1dc58 <z_impl_gpio_pin_configure+0x130>)
   1db70:	f006 fdbc 	bl	246ec <assert_print>
   1db74:	f240 21d7 	movw	r1, #727	; 0x2d7
   1db78:	e7eb      	b.n	1db52 <z_impl_gpio_pin_configure+0x2a>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   1db7a:	4a38      	ldr	r2, [pc, #224]	; (1dc5c <z_impl_gpio_pin_configure+0x134>)
   1db7c:	4d38      	ldr	r5, [pc, #224]	; (1dc60 <z_impl_gpio_pin_configure+0x138>)
   1db7e:	401a      	ands	r2, r3
   1db80:	42aa      	cmp	r2, r5
   1db82:	d10c      	bne.n	1db9e <z_impl_gpio_pin_configure+0x76>
   1db84:	4937      	ldr	r1, [pc, #220]	; (1dc64 <z_impl_gpio_pin_configure+0x13c>)
   1db86:	4a30      	ldr	r2, [pc, #192]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1db88:	4830      	ldr	r0, [pc, #192]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1db8a:	f240 23db 	movw	r3, #731	; 0x2db
   1db8e:	f006 fdad 	bl	246ec <assert_print>
   1db92:	4835      	ldr	r0, [pc, #212]	; (1dc68 <z_impl_gpio_pin_configure+0x140>)
   1db94:	f006 fdaa 	bl	246ec <assert_print>
   1db98:	f240 21db 	movw	r1, #731	; 0x2db
   1db9c:	e7d9      	b.n	1db52 <z_impl_gpio_pin_configure+0x2a>
		 "Input cannot be enabled for 'Open Drain', 'Open Source' modes without Output");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1db9e:	f003 0206 	and.w	r2, r3, #6
   1dba2:	2a04      	cmp	r2, #4
   1dba4:	d109      	bne.n	1dbba <z_impl_gpio_pin_configure+0x92>
   1dba6:	4931      	ldr	r1, [pc, #196]	; (1dc6c <z_impl_gpio_pin_configure+0x144>)
   1dba8:	4a27      	ldr	r2, [pc, #156]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1dbaa:	4828      	ldr	r0, [pc, #160]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1dbac:	f240 23de 	movw	r3, #734	; 0x2de
   1dbb0:	f006 fd9c 	bl	246ec <assert_print>
   1dbb4:	f240 21de 	movw	r1, #734	; 0x2de
   1dbb8:	e7cb      	b.n	1db52 <z_impl_gpio_pin_configure+0x2a>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1dbba:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1dbbe:	d016      	beq.n	1dbee <z_impl_gpio_pin_configure+0xc6>
   1dbc0:	039d      	lsls	r5, r3, #14
   1dbc2:	d40c      	bmi.n	1dbde <z_impl_gpio_pin_configure+0xb6>
   1dbc4:	492a      	ldr	r1, [pc, #168]	; (1dc70 <z_impl_gpio_pin_configure+0x148>)
   1dbc6:	4a20      	ldr	r2, [pc, #128]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1dbc8:	4820      	ldr	r0, [pc, #128]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1dbca:	f240 23e1 	movw	r3, #737	; 0x2e1
   1dbce:	f006 fd8d 	bl	246ec <assert_print>
   1dbd2:	4828      	ldr	r0, [pc, #160]	; (1dc74 <z_impl_gpio_pin_configure+0x14c>)
   1dbd4:	f006 fd8a 	bl	246ec <assert_print>
   1dbd8:	f240 21e1 	movw	r1, #737	; 0x2e1
   1dbdc:	e7b9      	b.n	1db52 <z_impl_gpio_pin_configure+0x2a>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1dbde:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1dbe2:	d018      	beq.n	1dc16 <z_impl_gpio_pin_configure+0xee>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1dbe4:	4a24      	ldr	r2, [pc, #144]	; (1dc78 <z_impl_gpio_pin_configure+0x150>)
   1dbe6:	439a      	bics	r2, r3
   1dbe8:	d101      	bne.n	1dbee <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1dbea:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dbee:	6824      	ldr	r4, [r4, #0]
   1dbf0:	2501      	movs	r5, #1
   1dbf2:	408d      	lsls	r5, r1
   1dbf4:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1dbf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dbfa:	d119      	bne.n	1dc30 <z_impl_gpio_pin_configure+0x108>
   1dbfc:	491f      	ldr	r1, [pc, #124]	; (1dc7c <z_impl_gpio_pin_configure+0x154>)
   1dbfe:	4a12      	ldr	r2, [pc, #72]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1dc00:	4812      	ldr	r0, [pc, #72]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1dc02:	f240 23f1 	movw	r3, #753	; 0x2f1
   1dc06:	f006 fd71 	bl	246ec <assert_print>
   1dc0a:	481d      	ldr	r0, [pc, #116]	; (1dc80 <z_impl_gpio_pin_configure+0x158>)
   1dc0c:	f006 fd6e 	bl	246ec <assert_print>
   1dc10:	f240 21f1 	movw	r1, #753	; 0x2f1
   1dc14:	e79d      	b.n	1db52 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1dc16:	491b      	ldr	r1, [pc, #108]	; (1dc84 <z_impl_gpio_pin_configure+0x15c>)
   1dc18:	4a0b      	ldr	r2, [pc, #44]	; (1dc48 <z_impl_gpio_pin_configure+0x120>)
   1dc1a:	480c      	ldr	r0, [pc, #48]	; (1dc4c <z_impl_gpio_pin_configure+0x124>)
   1dc1c:	f240 23e5 	movw	r3, #741	; 0x2e5
   1dc20:	f006 fd64 	bl	246ec <assert_print>
   1dc24:	4818      	ldr	r0, [pc, #96]	; (1dc88 <z_impl_gpio_pin_configure+0x160>)
   1dc26:	f006 fd61 	bl	246ec <assert_print>
   1dc2a:	f240 21e5 	movw	r1, #741	; 0x2e5
   1dc2e:	e790      	b.n	1db52 <z_impl_gpio_pin_configure+0x2a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dc30:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1dc32:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1dc34:	bf4c      	ite	mi
   1dc36:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1dc38:	43ac      	bicpl	r4, r5
   1dc3a:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   1dc3c:	683b      	ldr	r3, [r7, #0]
}
   1dc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1dc42:	4718      	bx	r3
   1dc44:	0002a90b 	.word	0x0002a90b
   1dc48:	0002a8da 	.word	0x0002a8da
   1dc4c:	00027f8a 	.word	0x00027f8a
   1dc50:	0002a968 	.word	0x0002a968
   1dc54:	0002a98c 	.word	0x0002a98c
   1dc58:	0002a9c5 	.word	0x0002a9c5
   1dc5c:	00030002 	.word	0x00030002
   1dc60:	00010002 	.word	0x00010002
   1dc64:	0002aa02 	.word	0x0002aa02
   1dc68:	0002aa49 	.word	0x0002aa49
   1dc6c:	0002aa98 	.word	0x0002aa98
   1dc70:	0002aacb 	.word	0x0002aacb
   1dc74:	0002ab11 	.word	0x0002ab11
   1dc78:	00100001 	.word	0x00100001
   1dc7c:	0002abb9 	.word	0x0002abb9
   1dc80:	0002abf7 	.word	0x0002abf7
   1dc84:	0002ab4c 	.word	0x0002ab4c
   1dc88:	0002ab8d 	.word	0x0002ab8d

0001dc8c <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1dc8c:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc8e:	2301      	movs	r3, #1
   1dc90:	fa03 f101 	lsl.w	r1, r3, r1
   1dc94:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1dc96:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1dc98:	681b      	ldr	r3, [r3, #0]
   1dc9a:	4219      	tst	r1, r3
   1dc9c:	d10e      	bne.n	1dcbc <gpio_pin_set+0x30>
   1dc9e:	490e      	ldr	r1, [pc, #56]	; (1dcd8 <gpio_pin_set+0x4c>)
   1dca0:	4a0e      	ldr	r2, [pc, #56]	; (1dcdc <gpio_pin_set+0x50>)
   1dca2:	480f      	ldr	r0, [pc, #60]	; (1dce0 <gpio_pin_set+0x54>)
   1dca4:	f240 535c 	movw	r3, #1372	; 0x55c
   1dca8:	f006 fd20 	bl	246ec <assert_print>
   1dcac:	480d      	ldr	r0, [pc, #52]	; (1dce4 <gpio_pin_set+0x58>)
   1dcae:	f006 fd1d 	bl	246ec <assert_print>
   1dcb2:	480a      	ldr	r0, [pc, #40]	; (1dcdc <gpio_pin_set+0x50>)
   1dcb4:	f240 515c 	movw	r1, #1372	; 0x55c
   1dcb8:	f006 fd11 	bl	246de <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1dcbc:	6823      	ldr	r3, [r4, #0]
   1dcbe:	4219      	tst	r1, r3
   1dcc0:	d003      	beq.n	1dcca <gpio_pin_set+0x3e>
	if (value != 0)	{
   1dcc2:	b122      	cbz	r2, 1dcce <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   1dcc4:	6883      	ldr	r3, [r0, #8]
   1dcc6:	691b      	ldr	r3, [r3, #16]
   1dcc8:	e003      	b.n	1dcd2 <gpio_pin_set+0x46>
	if (value != 0)	{
   1dcca:	2a00      	cmp	r2, #0
   1dccc:	d0fa      	beq.n	1dcc4 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1dcce:	6883      	ldr	r3, [r0, #8]
   1dcd0:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1dcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1dcd6:	4718      	bx	r3
   1dcd8:	0002abb9 	.word	0x0002abb9
   1dcdc:	0002a8da 	.word	0x0002a8da
   1dce0:	00027f8a 	.word	0x00027f8a
   1dce4:	0002abf7 	.word	0x0002abf7

0001dce8 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcec:	4e15      	ldr	r6, [pc, #84]	; (1dd44 <dk_set_leds_state.part.0+0x5c>)
   1dcee:	b086      	sub	sp, #24
   1dcf0:	4607      	mov	r7, r0
   1dcf2:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dcf4:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1dcf6:	fa27 f205 	lsr.w	r2, r7, r5
   1dcfa:	f012 0201 	ands.w	r2, r2, #1
   1dcfe:	d117      	bne.n	1dd30 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1dd00:	fa28 f305 	lsr.w	r3, r8, r5
   1dd04:	07db      	lsls	r3, r3, #31
   1dd06:	d515      	bpl.n	1dd34 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1dd08:	7931      	ldrb	r1, [r6, #4]
   1dd0a:	6830      	ldr	r0, [r6, #0]
   1dd0c:	f7ff ffbe 	bl	1dc8c <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1dd10:	4604      	mov	r4, r0
   1dd12:	b178      	cbz	r0, 1dd34 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1dd14:	4b0c      	ldr	r3, [pc, #48]	; (1dd48 <dk_set_leds_state.part.0+0x60>)
   1dd16:	9305      	str	r3, [sp, #20]
   1dd18:	480c      	ldr	r0, [pc, #48]	; (1dd4c <dk_set_leds_state.part.0+0x64>)
   1dd1a:	2302      	movs	r3, #2
   1dd1c:	aa04      	add	r2, sp, #16
   1dd1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dd22:	9304      	str	r3, [sp, #16]
   1dd24:	f008 fe4d 	bl	269c2 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1dd28:	4620      	mov	r0, r4
   1dd2a:	b006      	add	sp, #24
   1dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1dd30:	2201      	movs	r2, #1
   1dd32:	e7e9      	b.n	1dd08 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dd34:	3501      	adds	r5, #1
   1dd36:	2d04      	cmp	r5, #4
   1dd38:	f106 0608 	add.w	r6, r6, #8
   1dd3c:	d1db      	bne.n	1dcf6 <dk_set_leds_state.part.0+0xe>
	return 0;
   1dd3e:	2400      	movs	r4, #0
   1dd40:	e7f2      	b.n	1dd28 <dk_set_leds_state.part.0+0x40>
   1dd42:	bf00      	nop
   1dd44:	00027a68 	.word	0x00027a68
   1dd48:	0002ac09 	.word	0x0002ac09
   1dd4c:	000273b8 	.word	0x000273b8

0001dd50 <dk_leds_init>:
{
   1dd50:	b570      	push	{r4, r5, r6, lr}
   1dd52:	4c12      	ldr	r4, [pc, #72]	; (1dd9c <dk_leds_init+0x4c>)
   1dd54:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dd56:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1dd58:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1dd5a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1dd5c:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1dd5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1dd62:	f7ff fee1 	bl	1db28 <z_impl_gpio_pin_configure>
		if (err) {
   1dd66:	4605      	mov	r5, r0
   1dd68:	b950      	cbnz	r0, 1dd80 <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dd6a:	3601      	adds	r6, #1
   1dd6c:	2e04      	cmp	r6, #4
   1dd6e:	f104 0408 	add.w	r4, r4, #8
   1dd72:	d1f1      	bne.n	1dd58 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1dd74:	210f      	movs	r1, #15
}
   1dd76:	b006      	add	sp, #24
   1dd78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dd7c:	f7ff bfb4 	b.w	1dce8 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1dd80:	4b07      	ldr	r3, [pc, #28]	; (1dda0 <dk_leds_init+0x50>)
   1dd82:	9305      	str	r3, [sp, #20]
   1dd84:	4807      	ldr	r0, [pc, #28]	; (1dda4 <dk_leds_init+0x54>)
   1dd86:	2302      	movs	r3, #2
   1dd88:	aa04      	add	r2, sp, #16
   1dd8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dd8e:	9304      	str	r3, [sp, #16]
   1dd90:	f008 fe17 	bl	269c2 <z_log_msg_static_create.constprop.0>
}
   1dd94:	4628      	mov	r0, r5
   1dd96:	b006      	add	sp, #24
   1dd98:	bd70      	pop	{r4, r5, r6, pc}
   1dd9a:	bf00      	nop
   1dd9c:	00027a68 	.word	0x00027a68
   1dda0:	0002ac1f 	.word	0x0002ac1f
   1dda4:	000273b8 	.word	0x000273b8

0001dda8 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1dda8:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1ddaa:	2803      	cmp	r0, #3
{
   1ddac:	b086      	sub	sp, #24
   1ddae:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1ddb0:	d90e      	bls.n	1ddd0 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1ddb2:	4b12      	ldr	r3, [pc, #72]	; (1ddfc <dk_set_led+0x54>)
   1ddb4:	9305      	str	r3, [sp, #20]
   1ddb6:	4812      	ldr	r0, [pc, #72]	; (1de00 <dk_set_led+0x58>)
   1ddb8:	2302      	movs	r3, #2
   1ddba:	aa04      	add	r2, sp, #16
   1ddbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1ddc0:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1ddc4:	9304      	str	r3, [sp, #16]
   1ddc6:	f008 fdfc 	bl	269c2 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1ddca:	4620      	mov	r0, r4
   1ddcc:	b006      	add	sp, #24
   1ddce:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1ddd0:	4b0c      	ldr	r3, [pc, #48]	; (1de04 <dk_set_led+0x5c>)
   1ddd2:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1ddd6:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1ddda:	7909      	ldrb	r1, [r1, #4]
   1dddc:	f7ff ff56 	bl	1dc8c <gpio_pin_set>
	if (err) {
   1dde0:	4604      	mov	r4, r0
   1dde2:	2800      	cmp	r0, #0
   1dde4:	d0f1      	beq.n	1ddca <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1dde6:	4b08      	ldr	r3, [pc, #32]	; (1de08 <dk_set_led+0x60>)
   1dde8:	9305      	str	r3, [sp, #20]
   1ddea:	4805      	ldr	r0, [pc, #20]	; (1de00 <dk_set_led+0x58>)
   1ddec:	2302      	movs	r3, #2
   1ddee:	aa04      	add	r2, sp, #16
   1ddf0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ddf4:	9304      	str	r3, [sp, #16]
   1ddf6:	f008 fde4 	bl	269c2 <z_log_msg_static_create.constprop.0>
   1ddfa:	e7e6      	b.n	1ddca <dk_set_led+0x22>
   1ddfc:	0002ac39 	.word	0x0002ac39
   1de00:	000273b8 	.word	0x000273b8
   1de04:	00027a68 	.word	0x00027a68
   1de08:	0002ac09 	.word	0x0002ac09

0001de0c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1de0c:	4602      	mov	r2, r0
   1de0e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1de10:	4801      	ldr	r0, [pc, #4]	; (1de18 <multithreading_lock_acquire+0xc>)
   1de12:	f002 bcaf 	b.w	20774 <z_impl_k_mutex_lock>
   1de16:	bf00      	nop
   1de18:	20000914 	.word	0x20000914

0001de1c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1de1c:	4801      	ldr	r0, [pc, #4]	; (1de24 <multithreading_lock_release+0x8>)
   1de1e:	f002 bd79 	b.w	20914 <z_impl_k_mutex_unlock>
   1de22:	bf00      	nop
   1de24:	20000914 	.word	0x20000914

0001de28 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1de28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1de2a:	f7f5 ffd7 	bl	13ddc <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1de2e:	4b07      	ldr	r3, [pc, #28]	; (1de4c <k_sys_fatal_error_handler+0x24>)
   1de30:	9305      	str	r3, [sp, #20]
   1de32:	2302      	movs	r3, #2
   1de34:	9304      	str	r3, [sp, #16]
   1de36:	4806      	ldr	r0, [pc, #24]	; (1de50 <k_sys_fatal_error_handler+0x28>)
   1de38:	2300      	movs	r3, #0
   1de3a:	aa04      	add	r2, sp, #16
   1de3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1de40:	f7f6 f932 	bl	140a8 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1de44:	2000      	movs	r0, #0
   1de46:	f7f7 ff73 	bl	15d30 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1de4a:	bf00      	nop
   1de4c:	0002ac68 	.word	0x0002ac68
   1de50:	000273c0 	.word	0x000273c0

0001de54 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1de54:	b598      	push	{r3, r4, r7, lr}
   1de56:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1de58:	466c      	mov	r4, sp
   1de5a:	b08a      	sub	sp, #40	; 0x28
   1de5c:	466a      	mov	r2, sp
   1de5e:	4b0c      	ldr	r3, [pc, #48]	; (1de90 <sdc_assertion_handler+0x3c>)
   1de60:	61d1      	str	r1, [r2, #28]
   1de62:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1de66:	f44f 7300 	mov.w	r3, #512	; 0x200
   1de6a:	8413      	strh	r3, [r2, #32]
   1de6c:	4b09      	ldr	r3, [pc, #36]	; (1de94 <sdc_assertion_handler+0x40>)
   1de6e:	f842 3f10 	str.w	r3, [r2, #16]!
   1de72:	4809      	ldr	r0, [pc, #36]	; (1de98 <sdc_assertion_handler+0x44>)
   1de74:	2300      	movs	r3, #0
   1de76:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1de7a:	f7f6 f915 	bl	140a8 <z_impl_z_log_msg_static_create>
   1de7e:	46a5      	mov	sp, r4
	k_oops();
   1de80:	4040      	eors	r0, r0
   1de82:	f380 8811 	msr	BASEPRI, r0
   1de86:	f04f 0003 	mov.w	r0, #3
   1de8a:	df02      	svc	2
}
   1de8c:	46bd      	mov	sp, r7
   1de8e:	bd98      	pop	{r3, r4, r7, pc}
   1de90:	0002ac85 	.word	0x0002ac85
   1de94:	01000004 	.word	0x01000004
   1de98:	00027398 	.word	0x00027398

0001de9c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1de9c:	b510      	push	{r4, lr}
   1de9e:	4603      	mov	r3, r0
   1dea0:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1dea2:	4811      	ldr	r0, [pc, #68]	; (1dee8 <rand_prio_low_vector_get_blocking+0x4c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1dea4:	6881      	ldr	r1, [r0, #8]
   1dea6:	680c      	ldr	r4, [r1, #0]
   1dea8:	b964      	cbnz	r4, 1dec4 <rand_prio_low_vector_get_blocking+0x28>
   1deaa:	4910      	ldr	r1, [pc, #64]	; (1deec <rand_prio_low_vector_get_blocking+0x50>)
   1deac:	4a10      	ldr	r2, [pc, #64]	; (1def0 <rand_prio_low_vector_get_blocking+0x54>)
   1deae:	4811      	ldr	r0, [pc, #68]	; (1def4 <rand_prio_low_vector_get_blocking+0x58>)
   1deb0:	234d      	movs	r3, #77	; 0x4d
   1deb2:	f006 fc1b 	bl	246ec <assert_print>
   1deb6:	4810      	ldr	r0, [pc, #64]	; (1def8 <rand_prio_low_vector_get_blocking+0x5c>)
   1deb8:	f006 fc18 	bl	246ec <assert_print>
   1debc:	480c      	ldr	r0, [pc, #48]	; (1def0 <rand_prio_low_vector_get_blocking+0x54>)
   1debe:	214d      	movs	r1, #77	; 0x4d
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1dec0:	f006 fc0d 	bl	246de <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1dec4:	4619      	mov	r1, r3
   1dec6:	47a0      	blx	r4
   1dec8:	b168      	cbz	r0, 1dee6 <rand_prio_low_vector_get_blocking+0x4a>
   1deca:	490c      	ldr	r1, [pc, #48]	; (1defc <rand_prio_low_vector_get_blocking+0x60>)
   1decc:	4a0c      	ldr	r2, [pc, #48]	; (1df00 <rand_prio_low_vector_get_blocking+0x64>)
   1dece:	4809      	ldr	r0, [pc, #36]	; (1def4 <rand_prio_low_vector_get_blocking+0x58>)
   1ded0:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1ded4:	f006 fc0a 	bl	246ec <assert_print>
   1ded8:	480a      	ldr	r0, [pc, #40]	; (1df04 <rand_prio_low_vector_get_blocking+0x68>)
   1deda:	f006 fc07 	bl	246ec <assert_print>
   1dede:	4808      	ldr	r0, [pc, #32]	; (1df00 <rand_prio_low_vector_get_blocking+0x64>)
   1dee0:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1dee4:	e7ec      	b.n	1dec0 <rand_prio_low_vector_get_blocking+0x24>
	(void) err;
}
   1dee6:	bd10      	pop	{r4, pc}
   1dee8:	00027130 	.word	0x00027130
   1deec:	0002acde 	.word	0x0002acde
   1def0:	0002acaa 	.word	0x0002acaa
   1def4:	00027f8a 	.word	0x00027f8a
   1def8:	0002acfe 	.word	0x0002acfe
   1defc:	00028453 	.word	0x00028453
   1df00:	0002ad24 	.word	0x0002ad24
   1df04:	0002ad5d 	.word	0x0002ad5d

0001df08 <rand_prio_low_vector_get>:
{
   1df08:	b538      	push	{r3, r4, r5, lr}
   1df0a:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1df0c:	480d      	ldr	r0, [pc, #52]	; (1df44 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1df0e:	6883      	ldr	r3, [r0, #8]
   1df10:	685d      	ldr	r5, [r3, #4]
   1df12:	460a      	mov	r2, r1
   1df14:	b975      	cbnz	r5, 1df34 <rand_prio_low_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1df16:	490c      	ldr	r1, [pc, #48]	; (1df48 <rand_prio_low_vector_get+0x40>)
   1df18:	4a0c      	ldr	r2, [pc, #48]	; (1df4c <rand_prio_low_vector_get+0x44>)
   1df1a:	480d      	ldr	r0, [pc, #52]	; (1df50 <rand_prio_low_vector_get+0x48>)
   1df1c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1df20:	f006 fbe4 	bl	246ec <assert_print>
   1df24:	480b      	ldr	r0, [pc, #44]	; (1df54 <rand_prio_low_vector_get+0x4c>)
   1df26:	f006 fbe1 	bl	246ec <assert_print>
   1df2a:	4808      	ldr	r0, [pc, #32]	; (1df4c <rand_prio_low_vector_get+0x44>)
   1df2c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   1df30:	f006 fbd5 	bl	246de <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1df34:	2300      	movs	r3, #0
   1df36:	4621      	mov	r1, r4
   1df38:	47a8      	blx	r5
   1df3a:	2800      	cmp	r0, #0
   1df3c:	dbeb      	blt.n	1df16 <rand_prio_low_vector_get+0xe>
}
   1df3e:	b2c0      	uxtb	r0, r0
   1df40:	bd38      	pop	{r3, r4, r5, pc}
   1df42:	bf00      	nop
   1df44:	00027130 	.word	0x00027130
   1df48:	0002ad97 	.word	0x0002ad97
   1df4c:	0002ad24 	.word	0x0002ad24
   1df50:	00027f8a 	.word	0x00027f8a
   1df54:	0002ada0 	.word	0x0002ada0

0001df58 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1df58:	4901      	ldr	r1, [pc, #4]	; (1df60 <receive_signal_raise+0x8>)
   1df5a:	4802      	ldr	r0, [pc, #8]	; (1df64 <receive_signal_raise+0xc>)
   1df5c:	f008 bf37 	b.w	26dce <k_work_submit_to_queue>
   1df60:	20002fc4 	.word	0x20002fc4
   1df64:	20002978 	.word	0x20002978

0001df68 <rand_prio_high_vector_get>:
{
   1df68:	b538      	push	{r3, r4, r5, lr}
   1df6a:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1df6c:	480d      	ldr	r0, [pc, #52]	; (1dfa4 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1df6e:	6883      	ldr	r3, [r0, #8]
   1df70:	685d      	ldr	r5, [r3, #4]
   1df72:	460a      	mov	r2, r1
   1df74:	b975      	cbnz	r5, 1df94 <rand_prio_high_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1df76:	490c      	ldr	r1, [pc, #48]	; (1dfa8 <rand_prio_high_vector_get+0x40>)
   1df78:	4a0c      	ldr	r2, [pc, #48]	; (1dfac <rand_prio_high_vector_get+0x44>)
   1df7a:	480d      	ldr	r0, [pc, #52]	; (1dfb0 <rand_prio_high_vector_get+0x48>)
   1df7c:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   1df80:	f006 fbb4 	bl	246ec <assert_print>
   1df84:	480b      	ldr	r0, [pc, #44]	; (1dfb4 <rand_prio_high_vector_get+0x4c>)
   1df86:	f006 fbb1 	bl	246ec <assert_print>
   1df8a:	4808      	ldr	r0, [pc, #32]	; (1dfac <rand_prio_high_vector_get+0x44>)
   1df8c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
   1df90:	f006 fba5 	bl	246de <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1df94:	2300      	movs	r3, #0
   1df96:	4621      	mov	r1, r4
   1df98:	47a8      	blx	r5
   1df9a:	2800      	cmp	r0, #0
   1df9c:	dbeb      	blt.n	1df76 <rand_prio_high_vector_get+0xe>
}
   1df9e:	b2c0      	uxtb	r0, r0
   1dfa0:	bd38      	pop	{r3, r4, r5, pc}
   1dfa2:	bf00      	nop
   1dfa4:	00027130 	.word	0x00027130
   1dfa8:	0002ad97 	.word	0x0002ad97
   1dfac:	0002ad24 	.word	0x0002ad24
   1dfb0:	00027f8a 	.word	0x00027f8a
   1dfb4:	0002ade3 	.word	0x0002ade3

0001dfb8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   1dfb8:	b5b0      	push	{r4, r5, r7, lr}
   1dfba:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   1dfbc:	4839      	ldr	r0, [pc, #228]	; (1e0a4 <hci_driver_init+0xec>)
{
   1dfbe:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1dfc0:	f7f9 f94c 	bl	1725c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1dfc4:	4838      	ldr	r0, [pc, #224]	; (1e0a8 <hci_driver_init+0xf0>)
   1dfc6:	f7e3 f877 	bl	10b8 <sdc_init>
		err = sdc_support_adv();
   1dfca:	f7e3 f8ef 	bl	11ac <sdc_support_adv>
		if (err) {
   1dfce:	b120      	cbz	r0, 1dfda <hci_driver_init+0x22>
			return -ENOTSUP;
   1dfd0:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1dfd4:	3708      	adds	r7, #8
   1dfd6:	46bd      	mov	sp, r7
   1dfd8:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1dfda:	f7e3 f917 	bl	120c <sdc_support_peripheral>
		if (err) {
   1dfde:	2800      	cmp	r0, #0
   1dfe0:	d1f6      	bne.n	1dfd0 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1dfe2:	f7e3 f8f3 	bl	11cc <sdc_support_dle_peripheral>
			if (err) {
   1dfe6:	2800      	cmp	r0, #0
   1dfe8:	d1f2      	bne.n	1dfd0 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1dfea:	f7e3 f8ff 	bl	11ec <sdc_support_le_2m_phy>
		if (err) {
   1dfee:	2800      	cmp	r0, #0
   1dff0:	d1ee      	bne.n	1dfd0 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1dff2:	f7e3 f91b 	bl	122c <sdc_support_phy_update_peripheral>
			if (err) {
   1dff6:	4604      	mov	r4, r0
   1dff8:	2800      	cmp	r0, #0
   1dffa:	d1e9      	bne.n	1dfd0 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1dffc:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dffe:	1d3a      	adds	r2, r7, #4
   1e000:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1e002:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e004:	f7e2 ffce 	bl	fa4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e008:	2800      	cmp	r0, #0
   1e00a:	dbe3      	blt.n	1dfd4 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1e00c:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e00e:	1d3a      	adds	r2, r7, #4
   1e010:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1e012:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e014:	f7e2 ffc6 	bl	fa4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e018:	2800      	cmp	r0, #0
   1e01a:	dbdb      	blt.n	1dfd4 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1e01c:	4b23      	ldr	r3, [pc, #140]	; (1e0ac <hci_driver_init+0xf4>)
   1e01e:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e020:	1d3a      	adds	r2, r7, #4
   1e022:	2103      	movs	r1, #3
   1e024:	4620      	mov	r0, r4
   1e026:	f7e2 ffbd 	bl	fa4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e02a:	2800      	cmp	r0, #0
   1e02c:	dbd2      	blt.n	1dfd4 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1e02e:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e032:	1d3a      	adds	r2, r7, #4
   1e034:	2104      	movs	r1, #4
   1e036:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1e038:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e03a:	f7e2 ffb3 	bl	fa4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e03e:	2800      	cmp	r0, #0
   1e040:	dbc8      	blt.n	1dfd4 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e042:	1d3a      	adds	r2, r7, #4
   1e044:	2105      	movs	r1, #5
   1e046:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1e048:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e04a:	f7e2 ffab 	bl	fa4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e04e:	2800      	cmp	r0, #0
   1e050:	dbc0      	blt.n	1dfd4 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1e052:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e054:	1d3a      	adds	r2, r7, #4
   1e056:	2107      	movs	r1, #7
   1e058:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1e05a:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e05c:	f7e2 ffa2 	bl	fa4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e060:	2800      	cmp	r0, #0
   1e062:	dbb7      	blt.n	1dfd4 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1e064:	f240 73fa 	movw	r3, #2042	; 0x7fa
   1e068:	4298      	cmp	r0, r3
   1e06a:	dd19      	ble.n	1e0a0 <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1e06c:	466c      	mov	r4, sp
   1e06e:	b088      	sub	sp, #32
   1e070:	466a      	mov	r2, sp
   1e072:	490f      	ldr	r1, [pc, #60]	; (1e0b0 <hci_driver_init+0xf8>)
   1e074:	61d0      	str	r0, [r2, #28]
   1e076:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1e07a:	2304      	movs	r3, #4
   1e07c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e080:	480c      	ldr	r0, [pc, #48]	; (1e0b4 <hci_driver_init+0xfc>)
   1e082:	2300      	movs	r3, #0
   1e084:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e088:	f7f6 f80e 	bl	140a8 <z_impl_z_log_msg_static_create>
   1e08c:	46a5      	mov	sp, r4
		k_panic();
   1e08e:	4040      	eors	r0, r0
   1e090:	f380 8811 	msr	BASEPRI, r0
   1e094:	f04f 0004 	mov.w	r0, #4
   1e098:	df02      	svc	2
		return -ENOMEM;
   1e09a:	f06f 000b 	mvn.w	r0, #11
   1e09e:	e799      	b.n	1dfd4 <hci_driver_init+0x1c>
	return 0;
   1e0a0:	2000      	movs	r0, #0
	if (err) {
   1e0a2:	e797      	b.n	1dfd4 <hci_driver_init+0x1c>
   1e0a4:	00027a88 	.word	0x00027a88
   1e0a8:	0001de55 	.word	0x0001de55
   1e0ac:	02031b1b 	.word	0x02031b1b
   1e0b0:	0002ae27 	.word	0x0002ae27
   1e0b4:	00027398 	.word	0x00027398

0001e0b8 <hci_driver_open>:
{
   1e0b8:	b590      	push	{r4, r7, lr}
   1e0ba:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1e0bc:	492f      	ldr	r1, [pc, #188]	; (1e17c <hci_driver_open+0xc4>)
   1e0be:	4830      	ldr	r0, [pc, #192]	; (1e180 <hci_driver_open+0xc8>)
{
   1e0c0:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1e0c2:	f003 f861 	bl	21188 <k_work_init>
		hci_ecdh_init();
   1e0c6:	f000 fedd 	bl	1ee84 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1e0ca:	1d38      	adds	r0, r7, #4
   1e0cc:	f7e2 ff5c 	bl	f88 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1e0d0:	466c      	mov	r4, sp
   1e0d2:	b088      	sub	sp, #32
   1e0d4:	466a      	mov	r2, sp
   1e0d6:	4b2b      	ldr	r3, [pc, #172]	; (1e184 <hci_driver_open+0xcc>)
   1e0d8:	6153      	str	r3, [r2, #20]
   1e0da:	4b2b      	ldr	r3, [pc, #172]	; (1e188 <hci_driver_open+0xd0>)
   1e0dc:	6193      	str	r3, [r2, #24]
   1e0de:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e0e2:	8393      	strh	r3, [r2, #28]
   1e0e4:	4b29      	ldr	r3, [pc, #164]	; (1e18c <hci_driver_open+0xd4>)
   1e0e6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0ea:	4929      	ldr	r1, [pc, #164]	; (1e190 <hci_driver_open+0xd8>)
   1e0ec:	4829      	ldr	r0, [pc, #164]	; (1e194 <hci_driver_open+0xdc>)
   1e0ee:	1d3b      	adds	r3, r7, #4
   1e0f0:	f7f5 ffda 	bl	140a8 <z_impl_z_log_msg_static_create>
   1e0f4:	46a5      	mov	sp, r4
   1e0f6:	4828      	ldr	r0, [pc, #160]	; (1e198 <hci_driver_open+0xe0>)
   1e0f8:	f008 fd89 	bl	26c0e <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1e0fc:	4603      	mov	r3, r0
   1e0fe:	b980      	cbnz	r0, 1e122 <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1e100:	4a26      	ldr	r2, [pc, #152]	; (1e19c <hci_driver_open+0xe4>)
   1e102:	62fa      	str	r2, [r7, #44]	; 0x2c
   1e104:	2202      	movs	r2, #2
   1e106:	62ba      	str	r2, [r7, #40]	; 0x28
   1e108:	4822      	ldr	r0, [pc, #136]	; (1e194 <hci_driver_open+0xdc>)
   1e10a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e10e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1e112:	f06f 0412 	mvn.w	r4, #18
   1e116:	f7f5 ffc7 	bl	140a8 <z_impl_z_log_msg_static_create>
}
   1e11a:	4620      	mov	r0, r4
   1e11c:	3734      	adds	r7, #52	; 0x34
   1e11e:	46bd      	mov	sp, r7
   1e120:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1e122:	4a1f      	ldr	r2, [pc, #124]	; (1e1a0 <hci_driver_open+0xe8>)
   1e124:	ca07      	ldmia	r2, {r0, r1, r2}
   1e126:	f107 0318 	add.w	r3, r7, #24
   1e12a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1e12e:	4618      	mov	r0, r3
   1e130:	f7e3 f8d4 	bl	12dc <sdc_rand_source_register>
	if (err) {
   1e134:	b188      	cbz	r0, 1e15a <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1e136:	b088      	sub	sp, #32
   1e138:	466a      	mov	r2, sp
   1e13a:	4b1a      	ldr	r3, [pc, #104]	; (1e1a4 <hci_driver_open+0xec>)
   1e13c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e140:	2303      	movs	r3, #3
   1e142:	f842 3f10 	str.w	r3, [r2, #16]!
   1e146:	4813      	ldr	r0, [pc, #76]	; (1e194 <hci_driver_open+0xdc>)
   1e148:	2300      	movs	r3, #0
   1e14a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e14e:	f7f5 ffab 	bl	140a8 <z_impl_z_log_msg_static_create>
   1e152:	46a5      	mov	sp, r4
		return -EINVAL;
   1e154:	f06f 0415 	mvn.w	r4, #21
   1e158:	e7df      	b.n	1e11a <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1e15a:	f04f 30ff 	mov.w	r0, #4294967295
   1e15e:	f04f 31ff 	mov.w	r1, #4294967295
   1e162:	f7ff fe53 	bl	1de0c <multithreading_lock_acquire>
	if (err) {
   1e166:	4604      	mov	r4, r0
   1e168:	2800      	cmp	r0, #0
   1e16a:	d1d6      	bne.n	1e11a <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1e16c:	490e      	ldr	r1, [pc, #56]	; (1e1a8 <hci_driver_open+0xf0>)
   1e16e:	480f      	ldr	r0, [pc, #60]	; (1e1ac <hci_driver_open+0xf4>)
   1e170:	f7e2 ff78 	bl	1064 <sdc_enable>
	if (err) {
   1e174:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1e176:	f7ff fe51 	bl	1de1c <multithreading_lock_release>
	return 0;
   1e17a:	e7ce      	b.n	1e11a <hci_driver_open+0x62>
   1e17c:	00026a77 	.word	0x00026a77
   1e180:	20002fc4 	.word	0x20002fc4
   1e184:	000295a2 	.word	0x000295a2
   1e188:	0002ae49 	.word	0x0002ae49
   1e18c:	01000003 	.word	0x01000003
   1e190:	01401cc0 	.word	0x01401cc0
   1e194:	00027398 	.word	0x00027398
   1e198:	00027130 	.word	0x00027130
   1e19c:	0002ae70 	.word	0x0002ae70
   1e1a0:	000274b8 	.word	0x000274b8
   1e1a4:	0002ae90 	.word	0x0002ae90
   1e1a8:	200020b0 	.word	0x200020b0
   1e1ac:	0001df59 	.word	0x0001df59

0001e1b0 <hci_driver_receive_process>:
{
   1e1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e1b2:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e1b4:	f04f 30ff 	mov.w	r0, #4294967295
{
   1e1b8:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e1ba:	f04f 31ff 	mov.w	r1, #4294967295
   1e1be:	f7ff fe25 	bl	1de0c <multithreading_lock_acquire>
	if (!errcode) {
   1e1c2:	bb40      	cbnz	r0, 1e216 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1e1c4:	4d33      	ldr	r5, [pc, #204]	; (1e294 <hci_driver_receive_process+0xe4>)
   1e1c6:	1df9      	adds	r1, r7, #7
   1e1c8:	4628      	mov	r0, r5
   1e1ca:	f000 fce5 	bl	1eb98 <hci_internal_msg_get>
   1e1ce:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e1d0:	f7ff fe24 	bl	1de1c <multithreading_lock_release>
	if (errcode) {
   1e1d4:	b9fc      	cbnz	r4, 1e216 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1e1d6:	79fe      	ldrb	r6, [r7, #7]
   1e1d8:	2e04      	cmp	r6, #4
   1e1da:	d133      	bne.n	1e244 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1e1dc:	7828      	ldrb	r0, [r5, #0]
   1e1de:	283e      	cmp	r0, #62	; 0x3e
   1e1e0:	d01c      	beq.n	1e21c <hci_driver_receive_process+0x6c>
   1e1e2:	28ff      	cmp	r0, #255	; 0xff
   1e1e4:	d021      	beq.n	1e22a <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1e1e6:	f04f 32ff 	mov.w	r2, #4294967295
   1e1ea:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e1ee:	4621      	mov	r1, r4
   1e1f0:	f7f7 fece 	bl	15f90 <bt_buf_get_evt>
	if (!evt_buf) {
   1e1f4:	4606      	mov	r6, r0
   1e1f6:	b9d8      	cbnz	r0, 1e230 <hci_driver_receive_process+0x80>
		if (discardable) {
   1e1f8:	b95c      	cbnz	r4, 1e212 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1e1fa:	4b27      	ldr	r3, [pc, #156]	; (1e298 <hci_driver_receive_process+0xe8>)
   1e1fc:	61fb      	str	r3, [r7, #28]
   1e1fe:	2302      	movs	r3, #2
   1e200:	61bb      	str	r3, [r7, #24]
   1e202:	4826      	ldr	r0, [pc, #152]	; (1e29c <hci_driver_receive_process+0xec>)
   1e204:	4623      	mov	r3, r4
   1e206:	f107 0218 	add.w	r2, r7, #24
   1e20a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e20e:	f7f5 ff4b 	bl	140a8 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1e212:	f7ff fea1 	bl	1df58 <receive_signal_raise>
}
   1e216:	3724      	adds	r7, #36	; 0x24
   1e218:	46bd      	mov	sp, r7
   1e21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1e21c:	78ab      	ldrb	r3, [r5, #2]
   1e21e:	2b02      	cmp	r3, #2
		switch (subevent) {
   1e220:	d1e1      	bne.n	1e1e6 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e222:	2200      	movs	r2, #0
   1e224:	2300      	movs	r3, #0
			return true;
   1e226:	2401      	movs	r4, #1
   1e228:	e7e1      	b.n	1e1ee <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1e22a:	78ab      	ldrb	r3, [r5, #2]
   1e22c:	2b80      	cmp	r3, #128	; 0x80
   1e22e:	e7f7      	b.n	1e220 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1e230:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e232:	4918      	ldr	r1, [pc, #96]	; (1e294 <hci_driver_receive_process+0xe4>)
   1e234:	3202      	adds	r2, #2
   1e236:	300c      	adds	r0, #12
   1e238:	f008 f86e 	bl	26318 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1e23c:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1e23e:	f7f8 ffd9 	bl	171f4 <bt_recv>
   1e242:	e7e6      	b.n	1e212 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1e244:	2e02      	cmp	r6, #2
   1e246:	d114      	bne.n	1e272 <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1e248:	f04f 32ff 	mov.w	r2, #4294967295
   1e24c:	f04f 33ff 	mov.w	r3, #4294967295
   1e250:	2003      	movs	r0, #3
   1e252:	f7f7 fe51 	bl	15ef8 <bt_buf_get_rx>
	if (!data_buf) {
   1e256:	4604      	mov	r4, r0
   1e258:	b918      	cbnz	r0, 1e262 <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1e25a:	4b11      	ldr	r3, [pc, #68]	; (1e2a0 <hci_driver_receive_process+0xf0>)
   1e25c:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1e260:	e7cf      	b.n	1e202 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1e262:	886a      	ldrh	r2, [r5, #2]
   1e264:	4629      	mov	r1, r5
   1e266:	3204      	adds	r2, #4
   1e268:	300c      	adds	r0, #12
   1e26a:	f008 f855 	bl	26318 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1e26e:	4620      	mov	r0, r4
   1e270:	e7e5      	b.n	1e23e <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1e272:	466d      	mov	r5, sp
   1e274:	b088      	sub	sp, #32
   1e276:	466a      	mov	r2, sp
   1e278:	4b0a      	ldr	r3, [pc, #40]	; (1e2a4 <hci_driver_receive_process+0xf4>)
   1e27a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e27e:	2303      	movs	r3, #3
   1e280:	f842 3f10 	str.w	r3, [r2, #16]!
   1e284:	4805      	ldr	r0, [pc, #20]	; (1e29c <hci_driver_receive_process+0xec>)
   1e286:	4623      	mov	r3, r4
   1e288:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e28c:	f7f5 ff0c 	bl	140a8 <z_impl_z_log_msg_static_create>
   1e290:	46ad      	mov	sp, r5
   1e292:	e7be      	b.n	1e212 <hci_driver_receive_process+0x62>
   1e294:	200031e7 	.word	0x200031e7
   1e298:	0002aeb4 	.word	0x0002aeb4
   1e29c:	00027398 	.word	0x00027398
   1e2a0:	0002aece 	.word	0x0002aece
   1e2a4:	0002aee7 	.word	0x0002aee7

0001e2a8 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1e2a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1e2aa:	4cc7      	ldr	r4, [pc, #796]	; (1e5c8 <hci_internal_cmd_put+0x320>)
   1e2ac:	8806      	ldrh	r6, [r0, #0]
   1e2ae:	7823      	ldrb	r3, [r4, #0]
{
   1e2b0:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1e2b2:	2b00      	cmp	r3, #0
   1e2b4:	f040 8468 	bne.w	1eb88 <hci_internal_cmd_put+0x8e0>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1e2b8:	2304      	movs	r3, #4
   1e2ba:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1e2be:	4bc3      	ldr	r3, [pc, #780]	; (1e5cc <hci_internal_cmd_put+0x324>)
   1e2c0:	681f      	ldr	r7, [r3, #0]
   1e2c2:	b1bf      	cbz	r7, 1e2f4 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   1e2c4:	f10d 0306 	add.w	r3, sp, #6
   1e2c8:	f10d 0207 	add.w	r2, sp, #7
   1e2cc:	1c61      	adds	r1, r4, #1
   1e2ce:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1e2d0:	2801      	cmp	r0, #1
   1e2d2:	d00f      	beq.n	1e2f4 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   1e2d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e2d8:	2b00      	cmp	r3, #0
   1e2da:	f040 8431 	bne.w	1eb40 <hci_internal_cmd_put+0x898>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e2de:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e2e2:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e2e4:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1e2e6:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e2e8:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1e2ea:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e2ec:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e2ee:	71a0      	strb	r0, [r4, #6]
}
   1e2f0:	f000 bc2f 	b.w	1eb52 <hci_internal_cmd_put+0x8aa>
		switch (BT_OGF(opcode)) {
   1e2f4:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1e2f8:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1e2fc:	d20f      	bcs.n	1e31e <hci_internal_cmd_put+0x76>
   1e2fe:	2b00      	cmp	r3, #0
   1e300:	d079      	beq.n	1e3f6 <hci_internal_cmd_put+0x14e>
   1e302:	3b01      	subs	r3, #1
   1e304:	2b07      	cmp	r3, #7
   1e306:	f200 8411 	bhi.w	1eb2c <hci_internal_cmd_put+0x884>
   1e30a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e30e:	000d      	.short	0x000d
   1e310:	003f040f 	.word	0x003f040f
   1e314:	040f008e 	.word	0x040f008e
   1e318:	040f040f 	.word	0x040f040f
   1e31c:	0163      	.short	0x0163
   1e31e:	2b3f      	cmp	r3, #63	; 0x3f
   1e320:	f000 8339 	beq.w	1e996 <hci_internal_cmd_put+0x6ee>
	switch (opcode)	{
   1e324:	2001      	movs	r0, #1
   1e326:	e391      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
	return ((uint16_t)src[1] << 8) | src[0];
   1e328:	4628      	mov	r0, r5
	switch (opcode)	{
   1e32a:	f240 4206 	movw	r2, #1030	; 0x406
   1e32e:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1e332:	4293      	cmp	r3, r2
   1e334:	d010      	beq.n	1e358 <hci_internal_cmd_put+0xb0>
   1e336:	f240 421d 	movw	r2, #1053	; 0x41d
   1e33a:	4293      	cmp	r3, r2
   1e33c:	d023      	beq.n	1e386 <hci_internal_cmd_put+0xde>
   1e33e:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1e340:	f240 4306 	movw	r3, #1030	; 0x406
   1e344:	429e      	cmp	r6, r3
   1e346:	f040 83eb 	bne.w	1eb20 <hci_internal_cmd_put+0x878>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e34a:	230f      	movs	r3, #15
   1e34c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e34e:	2304      	movs	r3, #4
   1e350:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e352:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e354:	2301      	movs	r3, #1
   1e356:	e033      	b.n	1e3c0 <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1e358:	f7ef f85c 	bl	d414 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1e35c:	f242 0332 	movw	r3, #8242	; 0x2032
   1e360:	429e      	cmp	r6, r3
   1e362:	f240 83d5 	bls.w	1eb10 <hci_internal_cmd_put+0x868>
   1e366:	f242 0385 	movw	r3, #8325	; 0x2085
   1e36a:	429e      	cmp	r6, r3
   1e36c:	d840      	bhi.n	1e3f0 <hci_internal_cmd_put+0x148>
   1e36e:	f242 036c 	movw	r3, #8300	; 0x206c
   1e372:	429e      	cmp	r6, r3
   1e374:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1e378:	f200 83da 	bhi.w	1eb30 <hci_internal_cmd_put+0x888>
   1e37c:	3b03      	subs	r3, #3
   1e37e:	b29b      	uxth	r3, r3
   1e380:	2b01      	cmp	r3, #1
   1e382:	d835      	bhi.n	1e3f0 <hci_internal_cmd_put+0x148>
   1e384:	e7e1      	b.n	1e34a <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1e386:	f7ef f847 	bl	d418 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1e38a:	e7e7      	b.n	1e35c <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e38c:	4628      	mov	r0, r5
	switch (opcode)	{
   1e38e:	f640 4263 	movw	r2, #3171	; 0xc63
   1e392:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1e396:	4293      	cmp	r3, r2
   1e398:	d03b      	beq.n	1e412 <hci_internal_cmd_put+0x16a>
   1e39a:	dc16      	bgt.n	1e3ca <hci_internal_cmd_put+0x122>
   1e39c:	f640 4203 	movw	r2, #3075	; 0xc03
   1e3a0:	4293      	cmp	r3, r2
   1e3a2:	d02a      	beq.n	1e3fa <hci_internal_cmd_put+0x152>
   1e3a4:	f640 422d 	movw	r2, #3117	; 0xc2d
   1e3a8:	4293      	cmp	r3, r2
   1e3aa:	d029      	beq.n	1e400 <hci_internal_cmd_put+0x158>
   1e3ac:	f640 4201 	movw	r2, #3073	; 0xc01
   1e3b0:	4293      	cmp	r3, r2
   1e3b2:	d01b      	beq.n	1e3ec <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e3b4:	230f      	movs	r3, #15
   1e3b6:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e3b8:	2304      	movs	r3, #4
   1e3ba:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e3bc:	2301      	movs	r3, #1
   1e3be:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1e3c0:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e3c2:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   1e3c6:	7023      	strb	r3, [r4, #0]
   1e3c8:	e0d5      	b.n	1e576 <hci_internal_cmd_put+0x2ce>
	switch (opcode)	{
   1e3ca:	f640 427b 	movw	r2, #3195	; 0xc7b
   1e3ce:	4293      	cmp	r3, r2
   1e3d0:	d022      	beq.n	1e418 <hci_internal_cmd_put+0x170>
   1e3d2:	f640 427c 	movw	r2, #3196	; 0xc7c
   1e3d6:	4293      	cmp	r3, r2
   1e3d8:	d1ec      	bne.n	1e3b4 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   1e3da:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e3de:	497c      	ldr	r1, [pc, #496]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1e3e0:	3302      	adds	r3, #2
   1e3e2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e3e6:	f7ee ffa3 	bl	d330 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1e3ea:	e001      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1e3ec:	f7ee ff96 	bl	d31c <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1e3f0:	2801      	cmp	r0, #1
   1e3f2:	f47f af74 	bne.w	1e2de <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   1e3f6:	2001      	movs	r0, #1
   1e3f8:	e3a2      	b.n	1eb40 <hci_internal_cmd_put+0x898>
		return sdc_hci_cmd_cb_reset();
   1e3fa:	f7e3 f86f 	bl	14dc <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1e3fe:	e7f7      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1e400:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e404:	4972      	ldr	r1, [pc, #456]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1e406:	3303      	adds	r3, #3
   1e408:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e40c:	f7ee ff84 	bl	d318 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1e410:	e7ee      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1e412:	f7ee ff88 	bl	d326 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1e416:	e7eb      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		*param_length_out +=
   1e418:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e41c:	496c      	ldr	r1, [pc, #432]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1e41e:	3304      	adds	r3, #4
   1e420:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e424:	f7ee ff76 	bl	d314 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1e428:	e7e2      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   1e42a:	882b      	ldrh	r3, [r5, #0]
   1e42c:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1e430:	3b01      	subs	r3, #1
   1e432:	2b08      	cmp	r3, #8
   1e434:	d8be      	bhi.n	1e3b4 <hci_internal_cmd_put+0x10c>
   1e436:	a201      	add	r2, pc, #4	; (adr r2, 1e43c <hci_internal_cmd_put+0x194>)
   1e438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e43c:	0001e461 	.word	0x0001e461
   1e440:	0001e473 	.word	0x0001e473
   1e444:	0001e57d 	.word	0x0001e57d
   1e448:	0001e3b5 	.word	0x0001e3b5
   1e44c:	0001e3b5 	.word	0x0001e3b5
   1e450:	0001e3b5 	.word	0x0001e3b5
   1e454:	0001e3b5 	.word	0x0001e3b5
   1e458:	0001e3b5 	.word	0x0001e3b5
   1e45c:	0001e5b5 	.word	0x0001e5b5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e460:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e464:	485a      	ldr	r0, [pc, #360]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e466:	3308      	adds	r3, #8
   1e468:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e46c:	f7ee ff93 	bl	d396 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1e470:	e7be      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e472:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e476:	4d56      	ldr	r5, [pc, #344]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e478:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e47a:	2230      	movs	r2, #48	; 0x30
   1e47c:	2100      	movs	r1, #0
   1e47e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e480:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e484:	f006 fd4a 	bl	24f1c <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e488:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e48c:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e48e:	2300      	movs	r3, #0
   1e490:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   1e492:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   1e494:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   1e496:	f043 0320 	orr.w	r3, r3, #32
   1e49a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1e49c:	7a63      	ldrb	r3, [r4, #9]
   1e49e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e4a2:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1e4a4:	7b23      	ldrb	r3, [r4, #12]
   1e4a6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e4aa:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1e4ac:	7c63      	ldrb	r3, [r4, #17]
   1e4ae:	f043 0304 	orr.w	r3, r3, #4
   1e4b2:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1e4b4:	7d63      	ldrb	r3, [r4, #21]
   1e4b6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1e4ba:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1e4be:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1e4c0:	7da3      	ldrb	r3, [r4, #22]
   1e4c2:	f043 0302 	orr.w	r3, r3, #2
   1e4c6:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1e4c8:	7f63      	ldrb	r3, [r4, #29]
   1e4ca:	f043 0304 	orr.w	r3, r3, #4
   1e4ce:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1e4d0:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e4d4:	f063 0308 	orn	r3, r3, #8
   1e4d8:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1e4dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1e4e0:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1e4e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1e4e8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1e4ec:	f063 030c 	orn	r3, r3, #12
   1e4f0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1e4f4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1e4f8:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1e4fc:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1e500:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1e504:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1e508:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1e50c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1e510:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1e514:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e518:	220e      	movs	r2, #14
   1e51a:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   1e51c:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   1e520:	2201      	movs	r2, #1
   1e522:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   1e524:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1e528:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1e52c:	f023 0307 	bic.w	r3, r3, #7
   1e530:	f043 0307 	orr.w	r3, r3, #7
   1e534:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1e538:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1e53c:	f063 0307 	orn	r3, r3, #7
   1e540:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1e544:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1e548:	4313      	orrs	r3, r2
   1e54a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1e54e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1e552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e556:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1e55a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1e55e:	f043 0304 	orr.w	r3, r3, #4
   1e562:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1e566:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1e56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e56e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   1e572:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   1e576:	2000      	movs	r0, #0
}
   1e578:	b003      	add	sp, #12
   1e57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e57c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e580:	4d13      	ldr	r5, [pc, #76]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e582:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e584:	2208      	movs	r2, #8
   1e586:	2100      	movs	r1, #0
   1e588:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e58a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e58e:	f006 fcc5 	bl	24f1c <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e592:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e596:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e598:	2300      	movs	r3, #0
   1e59a:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   1e59c:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   1e59e:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e5a0:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   1e5a2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e5a6:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   1e5a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   1e5ac:	2201      	movs	r2, #1
   1e5ae:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   1e5b0:	72e3      	strb	r3, [r4, #11]
   1e5b2:	e7de      	b.n	1e572 <hci_internal_cmd_put+0x2ca>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e5b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e5b8:	4805      	ldr	r0, [pc, #20]	; (1e5d0 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e5ba:	3306      	adds	r3, #6
   1e5bc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e5c0:	f7ee fee7 	bl	d392 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1e5c4:	e714      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
   1e5c6:	bf00      	nop
   1e5c8:	2000322d 	.word	0x2000322d
   1e5cc:	20002fd4 	.word	0x20002fd4
   1e5d0:	20003234 	.word	0x20003234
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e5d4:	4628      	mov	r0, r5
	switch (opcode)	{
   1e5d6:	f242 014b 	movw	r1, #8267	; 0x204b
   1e5da:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e5de:	b21a      	sxth	r2, r3
   1e5e0:	428a      	cmp	r2, r1
   1e5e2:	f300 80bf 	bgt.w	1e764 <hci_internal_cmd_put+0x4bc>
   1e5e6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e5ea:	f242 0232 	movw	r2, #8242	; 0x2032
   1e5ee:	dc1a      	bgt.n	1e626 <hci_internal_cmd_put+0x37e>
	switch (hci_opcode) {
   1e5f0:	4296      	cmp	r6, r2
   1e5f2:	f000 80c4 	beq.w	1e77e <hci_internal_cmd_put+0x4d6>
   1e5f6:	f200 82bf 	bhi.w	1eb78 <hci_internal_cmd_put+0x8d0>
   1e5fa:	f242 0326 	movw	r3, #8230	; 0x2026
   1e5fe:	429e      	cmp	r6, r3
   1e600:	f63f aef9 	bhi.w	1e3f6 <hci_internal_cmd_put+0x14e>
   1e604:	2001      	movs	r0, #1
   1e606:	f242 030c 	movw	r3, #8204	; 0x200c
   1e60a:	429e      	cmp	r6, r3
   1e60c:	f67f ae98 	bls.w	1e340 <hci_internal_cmd_put+0x98>
   1e610:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1e614:	4ad9      	ldr	r2, [pc, #868]	; (1e97c <hci_internal_cmd_put+0x6d4>)
   1e616:	3b0d      	subs	r3, #13
   1e618:	b29b      	uxth	r3, r3
   1e61a:	fa22 f303 	lsr.w	r3, r2, r3
   1e61e:	07db      	lsls	r3, r3, #31
   1e620:	f57f aee6 	bpl.w	1e3f0 <hci_internal_cmd_put+0x148>
   1e624:	e691      	b.n	1e34a <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1e626:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1e62a:	3b01      	subs	r3, #1
   1e62c:	2b4a      	cmp	r3, #74	; 0x4a
   1e62e:	d8df      	bhi.n	1e5f0 <hci_internal_cmd_put+0x348>
   1e630:	a101      	add	r1, pc, #4	; (adr r1, 1e638 <hci_internal_cmd_put+0x390>)
   1e632:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1e636:	bf00      	nop
   1e638:	0001e797 	.word	0x0001e797
   1e63c:	0001e7b1 	.word	0x0001e7b1
   1e640:	0001e7c3 	.word	0x0001e7c3
   1e644:	0001e5f1 	.word	0x0001e5f1
   1e648:	0001e829 	.word	0x0001e829
   1e64c:	0001e82f 	.word	0x0001e82f
   1e650:	0001e835 	.word	0x0001e835
   1e654:	0001e847 	.word	0x0001e847
   1e658:	0001e84d 	.word	0x0001e84d
   1e65c:	0001e853 	.word	0x0001e853
   1e660:	0001e5f1 	.word	0x0001e5f1
   1e664:	0001e5f1 	.word	0x0001e5f1
   1e668:	0001e5f1 	.word	0x0001e5f1
   1e66c:	0001e5f1 	.word	0x0001e5f1
   1e670:	0001e85f 	.word	0x0001e85f
   1e674:	0001e871 	.word	0x0001e871
   1e678:	0001e877 	.word	0x0001e877
   1e67c:	0001e87d 	.word	0x0001e87d
   1e680:	0001e5f1 	.word	0x0001e5f1
   1e684:	0001e5f1 	.word	0x0001e5f1
   1e688:	0001e883 	.word	0x0001e883
   1e68c:	0001e895 	.word	0x0001e895
   1e690:	0001e89b 	.word	0x0001e89b
   1e694:	0001e8ad 	.word	0x0001e8ad
   1e698:	0001e5f1 	.word	0x0001e5f1
   1e69c:	0001e8bf 	.word	0x0001e8bf
   1e6a0:	0001e8d1 	.word	0x0001e8d1
   1e6a4:	0001e8e3 	.word	0x0001e8e3
   1e6a8:	0001e5f1 	.word	0x0001e5f1
   1e6ac:	0001e5f1 	.word	0x0001e5f1
   1e6b0:	0001e5f1 	.word	0x0001e5f1
   1e6b4:	0001e5f1 	.word	0x0001e5f1
   1e6b8:	0001e5f1 	.word	0x0001e5f1
   1e6bc:	0001e90f 	.word	0x0001e90f
   1e6c0:	0001e921 	.word	0x0001e921
   1e6c4:	0001e933 	.word	0x0001e933
   1e6c8:	0001e939 	.word	0x0001e939
   1e6cc:	0001e93f 	.word	0x0001e93f
   1e6d0:	0001e5f1 	.word	0x0001e5f1
   1e6d4:	0001e5f1 	.word	0x0001e5f1
   1e6d8:	0001e5f1 	.word	0x0001e5f1
   1e6dc:	0001e5f1 	.word	0x0001e5f1
   1e6e0:	0001e5f1 	.word	0x0001e5f1
   1e6e4:	0001e5f1 	.word	0x0001e5f1
   1e6e8:	0001e5f1 	.word	0x0001e5f1
   1e6ec:	0001e5f1 	.word	0x0001e5f1
   1e6f0:	0001e94b 	.word	0x0001e94b
   1e6f4:	0001e95d 	.word	0x0001e95d
   1e6f8:	0001e96f 	.word	0x0001e96f
   1e6fc:	0001e975 	.word	0x0001e975
   1e700:	0001e5f1 	.word	0x0001e5f1
   1e704:	0001e5f1 	.word	0x0001e5f1
   1e708:	0001e5f1 	.word	0x0001e5f1
   1e70c:	0001e5f1 	.word	0x0001e5f1
   1e710:	0001e5f1 	.word	0x0001e5f1
   1e714:	0001e5f1 	.word	0x0001e5f1
   1e718:	0001e5f1 	.word	0x0001e5f1
   1e71c:	0001e5f1 	.word	0x0001e5f1
   1e720:	0001e5f1 	.word	0x0001e5f1
   1e724:	0001e5f1 	.word	0x0001e5f1
   1e728:	0001e5f1 	.word	0x0001e5f1
   1e72c:	0001e5f1 	.word	0x0001e5f1
   1e730:	0001e5f1 	.word	0x0001e5f1
   1e734:	0001e5f1 	.word	0x0001e5f1
   1e738:	0001e5f1 	.word	0x0001e5f1
   1e73c:	0001e5f1 	.word	0x0001e5f1
   1e740:	0001e5f1 	.word	0x0001e5f1
   1e744:	0001e5f1 	.word	0x0001e5f1
   1e748:	0001e5f1 	.word	0x0001e5f1
   1e74c:	0001e5f1 	.word	0x0001e5f1
   1e750:	0001e5f1 	.word	0x0001e5f1
   1e754:	0001e5f1 	.word	0x0001e5f1
   1e758:	0001e5f1 	.word	0x0001e5f1
   1e75c:	0001e5f1 	.word	0x0001e5f1
   1e760:	0001e985 	.word	0x0001e985
   1e764:	f242 035e 	movw	r3, #8286	; 0x205e
   1e768:	429a      	cmp	r2, r3
   1e76a:	f000 80eb 	beq.w	1e944 <hci_internal_cmd_put+0x69c>
   1e76e:	f242 037c 	movw	r3, #8316	; 0x207c
   1e772:	429a      	cmp	r2, r3
   1e774:	d070      	beq.n	1e858 <hci_internal_cmd_put+0x5b0>
	switch (hci_opcode) {
   1e776:	f242 0332 	movw	r3, #8242	; 0x2032
   1e77a:	429e      	cmp	r6, r3
   1e77c:	e739      	b.n	1e5f2 <hci_internal_cmd_put+0x34a>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e77e:	230f      	movs	r3, #15
   1e780:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e782:	2304      	movs	r3, #4
   1e784:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e786:	2301      	movs	r3, #1
   1e788:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e78a:	2232      	movs	r2, #50	; 0x32
   1e78c:	7162      	strb	r2, [r4, #5]
   1e78e:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1e790:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e792:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1e794:	e617      	b.n	1e3c6 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1e796:	f7ee fe30 	bl	d3fa <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1e79a:	f242 0332 	movw	r3, #8242	; 0x2032
   1e79e:	429e      	cmp	r6, r3
   1e7a0:	f47f addc 	bne.w	1e35c <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e7a4:	230f      	movs	r3, #15
   1e7a6:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e7a8:	2304      	movs	r3, #4
   1e7aa:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e7ac:	70e0      	strb	r0, [r4, #3]
   1e7ae:	e0ac      	b.n	1e90a <hci_internal_cmd_put+0x662>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e7b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e7b4:	4872      	ldr	r0, [pc, #456]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e7b6:	3303      	adds	r3, #3
   1e7b8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e7bc:	f7ee fdff 	bl	d3be <sdc_hci_cmd_le_read_buffer_size>
   1e7c0:	e7eb      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e7c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e7c6:	4d6e      	ldr	r5, [pc, #440]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e7c8:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e7ca:	2208      	movs	r2, #8
   1e7cc:	2100      	movs	r1, #0
   1e7ce:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e7d0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e7d4:	f006 fba2 	bl	24f1c <memset>
	features->params.le_encryption = 1;
   1e7d8:	79e3      	ldrb	r3, [r4, #7]
   1e7da:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1e7de:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1e7e2:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1e7e4:	7a23      	ldrb	r3, [r4, #8]
   1e7e6:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1e7ea:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1e7ee:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1e7f0:	f242 0332 	movw	r3, #8242	; 0x2032
   1e7f4:	429e      	cmp	r6, r3
   1e7f6:	d008      	beq.n	1e80a <hci_internal_cmd_put+0x562>
   1e7f8:	f200 81b8 	bhi.w	1eb6c <hci_internal_cmd_put+0x8c4>
   1e7fc:	f242 0326 	movw	r3, #8230	; 0x2026
   1e800:	429e      	cmp	r6, r3
   1e802:	f240 818b 	bls.w	1eb1c <hci_internal_cmd_put+0x874>
		return 0;
   1e806:	2000      	movs	r0, #0
   1e808:	e569      	b.n	1e2de <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e80a:	230f      	movs	r3, #15
   1e80c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e80e:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   1e810:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e812:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e814:	2300      	movs	r3, #0
   1e816:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e818:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   1e81a:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   1e81c:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1e81e:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e820:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1e822:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1e826:	e6a6      	b.n	1e576 <hci_internal_cmd_put+0x2ce>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1e828:	f7ee fdee 	bl	d408 <sdc_hci_cmd_le_set_random_address>
   1e82c:	e7b5      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1e82e:	f7ee fddc 	bl	d3ea <sdc_hci_cmd_le_set_adv_params>
   1e832:	e7b2      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1e834:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e838:	4851      	ldr	r0, [pc, #324]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1e83a:	3301      	adds	r3, #1
   1e83c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e840:	f7ee fdbb 	bl	d3ba <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1e844:	e7a9      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1e846:	f7ee fdcc 	bl	d3e2 <sdc_hci_cmd_le_set_adv_data>
   1e84a:	e7a6      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1e84c:	f7ee fdde 	bl	d40c <sdc_hci_cmd_le_set_scan_response_data>
   1e850:	e7a3      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1e852:	f7ee fdc8 	bl	d3e6 <sdc_hci_cmd_le_set_adv_enable>
   1e856:	e7a0      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1e858:	f7ee fdcb 	bl	d3f2 <sdc_hci_cmd_le_set_data_related_address_changes>
   1e85c:	e79d      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e85e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e862:	4847      	ldr	r0, [pc, #284]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e864:	3301      	adds	r3, #1
   1e866:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e86a:	f7ee fdac 	bl	d3c6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1e86e:	e794      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1e870:	f7ee fd95 	bl	d39e <sdc_hci_cmd_le_clear_filter_accept_list>
   1e874:	e791      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1e876:	f7ee fd90 	bl	d39a <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1e87a:	e78e      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1e87c:	f7ee fdaf 	bl	d3de <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1e880:	e78b      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e882:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e886:	493e      	ldr	r1, [pc, #248]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e888:	3307      	adds	r3, #7
   1e88a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e88e:	f7ee fd98 	bl	d3c2 <sdc_hci_cmd_le_read_channel_map>
   1e892:	e782      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1e894:	f7ee fd9d 	bl	d3d2 <sdc_hci_cmd_le_read_remote_features>
   1e898:	e77f      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e89a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e89e:	4938      	ldr	r1, [pc, #224]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e8a0:	3310      	adds	r3, #16
   1e8a2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e8a6:	f7ee fd7c 	bl	d3a2 <sdc_hci_cmd_le_encrypt>
   1e8aa:	e776      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e8ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e8b0:	4833      	ldr	r0, [pc, #204]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e8b2:	3308      	adds	r3, #8
   1e8b4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e8b8:	f7ee fd7d 	bl	d3b6 <sdc_hci_cmd_le_rand>
   1e8bc:	e76d      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e8be:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e8c2:	492f      	ldr	r1, [pc, #188]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e8c4:	3302      	adds	r3, #2
   1e8c6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e8ca:	f7ee fd70 	bl	d3ae <sdc_hci_cmd_le_long_term_key_request_reply>
   1e8ce:	e764      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1e8d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e8d4:	492a      	ldr	r1, [pc, #168]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1e8d6:	3302      	adds	r3, #2
   1e8d8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e8dc:	f7ee fd63 	bl	d3a6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1e8e0:	e75b      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1e8e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e8e6:	3308      	adds	r3, #8
   1e8e8:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1e8ec:	238f      	movs	r3, #143	; 0x8f
   1e8ee:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1e8f0:	23c0      	movs	r3, #192	; 0xc0
   1e8f2:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   1e8f4:	f242 0332 	movw	r3, #8242	; 0x2032
   1e8f8:	429e      	cmp	r6, r3
   1e8fa:	f47f af7d 	bne.w	1e7f8 <hci_internal_cmd_put+0x550>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e8fe:	230f      	movs	r3, #15
   1e900:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e902:	2304      	movs	r3, #4
   1e904:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e906:	2300      	movs	r3, #0
   1e908:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1e90a:	2301      	movs	r3, #1
   1e90c:	e73d      	b.n	1e78a <hci_internal_cmd_put+0x4e2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e90e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e912:	491b      	ldr	r1, [pc, #108]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e914:	3302      	adds	r3, #2
   1e916:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e91a:	f7ee fd68 	bl	d3ee <sdc_hci_cmd_le_set_data_length>
   1e91e:	e73c      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1e920:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e924:	4816      	ldr	r0, [pc, #88]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1e926:	3304      	adds	r3, #4
   1e928:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e92c:	f7ee fd53 	bl	d3d6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1e930:	e733      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1e932:	f7ee fd6d 	bl	d410 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1e936:	e730      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_read_local_p256_public_key();
   1e938:	f000 fad4 	bl	1eee4 <hci_cmd_le_read_local_p256_public_key>
   1e93c:	e72d      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1e93e:	f008 f89c 	bl	26a7a <hci_cmd_le_generate_dhkey>
   1e942:	e72a      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1e944:	f008 f89c 	bl	26a80 <hci_cmd_le_generate_dhkey_v2>
   1e948:	e727      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e94a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e94e:	480c      	ldr	r0, [pc, #48]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e950:	3308      	adds	r3, #8
   1e952:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e956:	f7ee fd38 	bl	d3ca <sdc_hci_cmd_le_read_max_data_length>
   1e95a:	e71e      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e95c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e960:	4907      	ldr	r1, [pc, #28]	; (1e980 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e962:	3304      	adds	r3, #4
   1e964:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e968:	f7ee fd31 	bl	d3ce <sdc_hci_cmd_le_read_phy>
   1e96c:	e715      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1e96e:	f7ee fd42 	bl	d3f6 <sdc_hci_cmd_le_set_default_phy>
   1e972:	e712      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1e974:	f7ee fd46 	bl	d404 <sdc_hci_cmd_le_set_phy>
   1e978:	e70f      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
   1e97a:	bf00      	nop
   1e97c:	03001241 	.word	0x03001241
   1e980:	20003234 	.word	0x20003234
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e984:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e988:	4881      	ldr	r0, [pc, #516]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e98a:	3302      	adds	r3, #2
   1e98c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e990:	f7ee fd23 	bl	d3da <sdc_hci_cmd_le_read_transmit_power>
   1e994:	e701      	b.n	1e79a <hci_internal_cmd_put+0x4f2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e996:	4628      	mov	r0, r5
	switch (opcode)	{
   1e998:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1e99c:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e9a0:	4293      	cmp	r3, r2
   1e9a2:	d823      	bhi.n	1e9ec <hci_internal_cmd_put+0x744>
   1e9a4:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1e9a8:	f67f acbc 	bls.w	1e324 <hci_internal_cmd_put+0x7c>
   1e9ac:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1e9b0:	3b01      	subs	r3, #1
   1e9b2:	2b0a      	cmp	r3, #10
   1e9b4:	f63f acb6 	bhi.w	1e324 <hci_internal_cmd_put+0x7c>
   1e9b8:	a201      	add	r2, pc, #4	; (adr r2, 1e9c0 <hci_internal_cmd_put+0x718>)
   1e9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e9be:	bf00      	nop
   1e9c0:	0001ea3d 	.word	0x0001ea3d
   1e9c4:	0001ea59 	.word	0x0001ea59
   1e9c8:	0001e325 	.word	0x0001e325
   1e9cc:	0001e325 	.word	0x0001e325
   1e9d0:	0001e325 	.word	0x0001e325
   1e9d4:	0001eaad 	.word	0x0001eaad
   1e9d8:	0001e325 	.word	0x0001e325
   1e9dc:	0001e325 	.word	0x0001e325
   1e9e0:	0001ea89 	.word	0x0001ea89
   1e9e4:	0001ea9b 	.word	0x0001ea9b
   1e9e8:	0001eab3 	.word	0x0001eab3
   1e9ec:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1e9f0:	b292      	uxth	r2, r2
   1e9f2:	2a0c      	cmp	r2, #12
   1e9f4:	f63f ac96 	bhi.w	1e324 <hci_internal_cmd_put+0x7c>
   1e9f8:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1e9fc:	2b0c      	cmp	r3, #12
   1e9fe:	f63f ac91 	bhi.w	1e324 <hci_internal_cmd_put+0x7c>
   1ea02:	a201      	add	r2, pc, #4	; (adr r2, 1ea08 <hci_internal_cmd_put+0x760>)
   1ea04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ea08:	0001eac5 	.word	0x0001eac5
   1ea0c:	0001eae7 	.word	0x0001eae7
   1ea10:	0001eaed 	.word	0x0001eaed
   1ea14:	0001eaf3 	.word	0x0001eaf3
   1ea18:	0001eaf9 	.word	0x0001eaf9
   1ea1c:	0001eaff 	.word	0x0001eaff
   1ea20:	0001e325 	.word	0x0001e325
   1ea24:	0001e325 	.word	0x0001e325
   1ea28:	0001e325 	.word	0x0001e325
   1ea2c:	0001eb05 	.word	0x0001eb05
   1ea30:	0001e325 	.word	0x0001e325
   1ea34:	0001e325 	.word	0x0001e325
   1ea38:	0001eb0b 	.word	0x0001eb0b
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1ea3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1ea40:	4853      	ldr	r0, [pc, #332]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1ea42:	330c      	adds	r3, #12
   1ea44:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1ea48:	f7e2 fdf0 	bl	162c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1ea4c:	f026 0308 	bic.w	r3, r6, #8
   1ea50:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1ea54:	4293      	cmp	r3, r2
   1ea56:	e066      	b.n	1eb26 <hci_internal_cmd_put+0x87e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1ea58:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ea5c:	484c      	ldr	r0, [pc, #304]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1ea5e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1ea60:	2202      	movs	r2, #2
   1ea62:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1ea64:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ea68:	f006 fa58 	bl	24f1c <memset>
	cmds->read_version_info = 1;
   1ea6c:	79e3      	ldrb	r3, [r4, #7]
   1ea6e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1ea72:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1ea76:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1ea78:	7a23      	ldrb	r3, [r4, #8]
   1ea7a:	f023 0307 	bic.w	r3, r3, #7
   1ea7e:	f043 0307 	orr.w	r3, r3, #7
   1ea82:	7223      	strb	r3, [r4, #8]
		return 0;
   1ea84:	2000      	movs	r0, #0
   1ea86:	e7e1      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ea88:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ea8c:	4840      	ldr	r0, [pc, #256]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ea8e:	3317      	adds	r3, #23
   1ea90:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ea94:	f7e2 fd7e 	bl	1594 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1ea98:	e7d8      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		*param_length_out +=
   1ea9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ea9e:	483c      	ldr	r0, [pc, #240]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out +=
   1eaa0:	3320      	adds	r3, #32
   1eaa2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1eaa6:	f7e2 fd2d 	bl	1504 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1eaaa:	e7cf      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1eaac:	f7ee fc6f 	bl	d38e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1eab0:	e7cc      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1eab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1eab6:	4836      	ldr	r0, [pc, #216]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1eab8:	3301      	adds	r3, #1
   1eaba:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1eabe:	f7ee fc52 	bl	d366 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1eac2:	e7c3      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1eac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1eac8:	4831      	ldr	r0, [pc, #196]	; (1eb90 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1eaca:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1eacc:	2202      	movs	r2, #2
   1eace:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ead0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ead4:	f006 fa22 	bl	24f1c <memset>
	cmds->read_supported_vs_commands = 1;
   1ead8:	79e3      	ldrb	r3, [r4, #7]
   1eada:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1eade:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1eae2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1eae4:	e7ce      	b.n	1ea84 <hci_internal_cmd_put+0x7dc>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1eae6:	f7ee fc31 	bl	d34c <sdc_hci_cmd_vs_llpm_mode_set>
   1eaea:	e7af      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1eaec:	f7ee fc2a 	bl	d344 <sdc_hci_cmd_vs_conn_update>
   1eaf0:	e7ac      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1eaf2:	f7ee fc1f 	bl	d334 <sdc_hci_cmd_vs_conn_event_extend>
   1eaf6:	e7a9      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1eaf8:	f7ee fc2e 	bl	d358 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1eafc:	e7a6      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1eafe:	f7ee fc23 	bl	d348 <sdc_hci_cmd_vs_event_length_set>
   1eb02:	e7a3      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1eb04:	f7ee fc24 	bl	d350 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1eb08:	e7a0      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1eb0a:	f7ee fc2a 	bl	d362 <sdc_hci_cmd_vs_set_adv_randomness>
   1eb0e:	e79d      	b.n	1ea4c <hci_internal_cmd_put+0x7a4>
	switch (hci_opcode) {
   1eb10:	f242 0326 	movw	r3, #8230	; 0x2026
   1eb14:	429e      	cmp	r6, r3
   1eb16:	f67f ad76 	bls.w	1e606 <hci_internal_cmd_put+0x35e>
   1eb1a:	e469      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		return 0;
   1eb1c:	2000      	movs	r0, #0
   1eb1e:	e572      	b.n	1e606 <hci_internal_cmd_put+0x35e>
	switch (hci_opcode) {
   1eb20:	f240 431d 	movw	r3, #1053	; 0x41d
   1eb24:	429e      	cmp	r6, r3
   1eb26:	f43f ac10 	beq.w	1e34a <hci_internal_cmd_put+0xa2>
   1eb2a:	e461      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   1eb2c:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1eb2e:	e45f      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1eb30:	4a18      	ldr	r2, [pc, #96]	; (1eb94 <hci_internal_cmd_put+0x8ec>)
   1eb32:	3b2d      	subs	r3, #45	; 0x2d
   1eb34:	b29b      	uxth	r3, r3
   1eb36:	fa22 f303 	lsr.w	r3, r2, r3
   1eb3a:	07da      	lsls	r2, r3, #31
   1eb3c:	f57f ac58 	bpl.w	1e3f0 <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1eb40:	230f      	movs	r3, #15
   1eb42:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1eb44:	2304      	movs	r3, #4
   1eb46:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1eb48:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1eb4a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1eb4c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1eb4e:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   1eb52:	2301      	movs	r3, #1
   1eb54:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1eb56:	f242 0383 	movw	r3, #8323	; 0x2083
   1eb5a:	429e      	cmp	r6, r3
   1eb5c:	f47f ad0b 	bne.w	1e576 <hci_internal_cmd_put+0x2ce>
		&&
   1eb60:	7863      	ldrb	r3, [r4, #1]
   1eb62:	2b0e      	cmp	r3, #14
   1eb64:	f47f ad07 	bne.w	1e576 <hci_internal_cmd_put+0x2ce>
		cmd_complete_or_status.occurred = false;
   1eb68:	2300      	movs	r3, #0
   1eb6a:	e42c      	b.n	1e3c6 <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   1eb6c:	f242 0385 	movw	r3, #8325	; 0x2085
   1eb70:	429e      	cmp	r6, r3
   1eb72:	d906      	bls.n	1eb82 <hci_internal_cmd_put+0x8da>
		return 0;
   1eb74:	2000      	movs	r0, #0
   1eb76:	e43b      	b.n	1e3f0 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1eb78:	f242 0385 	movw	r3, #8325	; 0x2085
   1eb7c:	2001      	movs	r0, #1
   1eb7e:	f7ff bbf4 	b.w	1e36a <hci_internal_cmd_put+0xc2>
		return 0;
   1eb82:	2000      	movs	r0, #0
   1eb84:	f7ff bbf3 	b.w	1e36e <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   1eb88:	f04f 30ff 	mov.w	r0, #4294967295
   1eb8c:	e4f4      	b.n	1e578 <hci_internal_cmd_put+0x2d0>
   1eb8e:	bf00      	nop
   1eb90:	20003234 	.word	0x20003234
   1eb94:	01000401 	.word	0x01000401

0001eb98 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1eb98:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1eb9a:	4c09      	ldr	r4, [pc, #36]	; (1ebc0 <hci_internal_msg_get+0x28>)
   1eb9c:	7823      	ldrb	r3, [r4, #0]
{
   1eb9e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1eba0:	b91b      	cbnz	r3, 1ebaa <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1eba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1eba6:	f7ee bba5 	b.w	d2f4 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1ebaa:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1ebac:	1c61      	adds	r1, r4, #1
   1ebae:	3202      	adds	r2, #2
   1ebb0:	f006 f9a9 	bl	24f06 <memcpy>
		cmd_complete_or_status.occurred = false;
   1ebb4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ebb6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1ebb8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ebba:	702b      	strb	r3, [r5, #0]
}
   1ebbc:	bd38      	pop	{r3, r4, r5, pc}
   1ebbe:	bf00      	nop
   1ebc0:	2000322d 	.word	0x2000322d

0001ebc4 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1ebc4:	b570      	push	{r4, r5, r6, lr}
   1ebc6:	4606      	mov	r6, r0
   1ebc8:	460c      	mov	r4, r1
   1ebca:	4d0f      	ldr	r5, [pc, #60]	; (1ec08 <bt_rand+0x44>)
   1ebcc:	4628      	mov	r0, r5
   1ebce:	f008 f81e 	bl	26c0e <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1ebd2:	b1a8      	cbz	r0, 1ec00 <bt_rand+0x3c>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1ebd4:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1ebd6:	68ab      	ldr	r3, [r5, #8]
   1ebd8:	681b      	ldr	r3, [r3, #0]
   1ebda:	b963      	cbnz	r3, 1ebf6 <bt_rand+0x32>
   1ebdc:	490b      	ldr	r1, [pc, #44]	; (1ec0c <bt_rand+0x48>)
   1ebde:	4a0c      	ldr	r2, [pc, #48]	; (1ec10 <bt_rand+0x4c>)
   1ebe0:	480c      	ldr	r0, [pc, #48]	; (1ec14 <bt_rand+0x50>)
   1ebe2:	234d      	movs	r3, #77	; 0x4d
   1ebe4:	f005 fd82 	bl	246ec <assert_print>
   1ebe8:	480b      	ldr	r0, [pc, #44]	; (1ec18 <bt_rand+0x54>)
   1ebea:	f005 fd7f 	bl	246ec <assert_print>
   1ebee:	4808      	ldr	r0, [pc, #32]	; (1ec10 <bt_rand+0x4c>)
   1ebf0:	214d      	movs	r1, #77	; 0x4d
   1ebf2:	f005 fd74 	bl	246de <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1ebf6:	4631      	mov	r1, r6
   1ebf8:	4628      	mov	r0, r5
}
   1ebfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ebfe:	4718      	bx	r3
   1ec00:	f06f 0012 	mvn.w	r0, #18
   1ec04:	bd70      	pop	{r4, r5, r6, pc}
   1ec06:	bf00      	nop
   1ec08:	00027130 	.word	0x00027130
   1ec0c:	0002acde 	.word	0x0002acde
   1ec10:	0002acaa 	.word	0x0002acaa
   1ec14:	00027f8a 	.word	0x00027f8a
   1ec18:	0002acfe 	.word	0x0002acfe

0001ec1c <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ec1c:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1ec1e:	b508      	push	{r3, lr}
   1ec20:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1ec24:	d910      	bls.n	1ec48 <sys_memcpy_swap.constprop.0+0x2c>
   1ec26:	4298      	cmp	r0, r3
   1ec28:	d213      	bcs.n	1ec52 <sys_memcpy_swap.constprop.0+0x36>
   1ec2a:	490e      	ldr	r1, [pc, #56]	; (1ec64 <sys_memcpy_swap.constprop.0+0x48>)
   1ec2c:	4a0e      	ldr	r2, [pc, #56]	; (1ec68 <sys_memcpy_swap.constprop.0+0x4c>)
   1ec2e:	480f      	ldr	r0, [pc, #60]	; (1ec6c <sys_memcpy_swap.constprop.0+0x50>)
   1ec30:	f240 2315 	movw	r3, #533	; 0x215
   1ec34:	f005 fd5a 	bl	246ec <assert_print>
   1ec38:	480d      	ldr	r0, [pc, #52]	; (1ec70 <sys_memcpy_swap.constprop.0+0x54>)
   1ec3a:	f005 fd57 	bl	246ec <assert_print>
   1ec3e:	480a      	ldr	r0, [pc, #40]	; (1ec68 <sys_memcpy_swap.constprop.0+0x4c>)
   1ec40:	f240 2115 	movw	r1, #533	; 0x215
   1ec44:	f005 fd4b 	bl	246de <assert_post_action>
   1ec48:	d0ef      	beq.n	1ec2a <sys_memcpy_swap.constprop.0+0xe>
   1ec4a:	f100 0220 	add.w	r2, r0, #32
   1ec4e:	4291      	cmp	r1, r2
   1ec50:	e7ea      	b.n	1ec28 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1ec52:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1ec54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ec58:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1ec5c:	428b      	cmp	r3, r1
   1ec5e:	d1f9      	bne.n	1ec54 <sys_memcpy_swap.constprop.0+0x38>
}
   1ec60:	bd08      	pop	{r3, pc}
   1ec62:	bf00      	nop
   1ec64:	0002af7a 	.word	0x0002af7a
   1ec68:	0002af48 	.word	0x0002af48
   1ec6c:	00027f8a 	.word	0x00027f8a
   1ec70:	0002afd1 	.word	0x0002afd1

0001ec74 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ec76:	4b24      	ldr	r3, [pc, #144]	; (1ed08 <ecdh_p256_common_secret+0x94>)
   1ec78:	4924      	ldr	r1, [pc, #144]	; (1ed0c <ecdh_p256_common_secret+0x98>)
   1ec7a:	f103 0220 	add.w	r2, r3, #32
   1ec7e:	2800      	cmp	r0, #0
   1ec80:	bf08      	it	eq
   1ec82:	4619      	moveq	r1, r3
{
   1ec84:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ec86:	4610      	mov	r0, r2
   1ec88:	f004 ff1a 	bl	23ac0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1ec8c:	4604      	mov	r4, r0
   1ec8e:	b180      	cbz	r0, 1ecb2 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1ec90:	466d      	mov	r5, sp
   1ec92:	b088      	sub	sp, #32
   1ec94:	466a      	mov	r2, sp
   1ec96:	4b1e      	ldr	r3, [pc, #120]	; (1ed10 <ecdh_p256_common_secret+0x9c>)
   1ec98:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ec9c:	2303      	movs	r3, #3
   1ec9e:	f842 3f10 	str.w	r3, [r2, #16]!
   1eca2:	481c      	ldr	r0, [pc, #112]	; (1ed14 <ecdh_p256_common_secret+0xa0>)
   1eca4:	2300      	movs	r3, #0
   1eca6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ecaa:	f7f5 f9fd 	bl	140a8 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1ecae:	2412      	movs	r4, #18
   1ecb0:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ecb2:	f04f 32ff 	mov.w	r2, #4294967295
   1ecb6:	f04f 33ff 	mov.w	r3, #4294967295
   1ecba:	2001      	movs	r0, #1
   1ecbc:	f7f7 f91c 	bl	15ef8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1ecc0:	f100 060c 	add.w	r6, r0, #12
   1ecc4:	2102      	movs	r1, #2
   1ecc6:	4605      	mov	r5, r0
   1ecc8:	4630      	mov	r0, r6
   1ecca:	f7fd fadf 	bl	1c28c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ecce:	233e      	movs	r3, #62	; 0x3e
   1ecd0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1ecd2:	2322      	movs	r3, #34	; 0x22
   1ecd4:	7043      	strb	r3, [r0, #1]
   1ecd6:	2101      	movs	r1, #1
   1ecd8:	4630      	mov	r0, r6
   1ecda:	f7fd fad7 	bl	1c28c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1ecde:	2309      	movs	r3, #9
   1ece0:	7003      	strb	r3, [r0, #0]
   1ece2:	2121      	movs	r1, #33	; 0x21
   1ece4:	4630      	mov	r0, r6
   1ece6:	f7fd fad1 	bl	1c28c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1ecea:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1ecee:	b134      	cbz	r4, 1ecfe <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1ecf0:	2220      	movs	r2, #32
   1ecf2:	21ff      	movs	r1, #255	; 0xff
   1ecf4:	f006 f912 	bl	24f1c <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1ecf8:	4628      	mov	r0, r5
   1ecfa:	46bd      	mov	sp, r7
   1ecfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1ecfe:	4906      	ldr	r1, [pc, #24]	; (1ed18 <ecdh_p256_common_secret+0xa4>)
   1ed00:	f7ff ff8c 	bl	1ec1c <sys_memcpy_swap.constprop.0>
   1ed04:	e7f8      	b.n	1ecf8 <ecdh_p256_common_secret+0x84>
   1ed06:	bf00      	nop
   1ed08:	20003274 	.word	0x20003274
   1ed0c:	0002b04f 	.word	0x0002b04f
   1ed10:	0002b011 	.word	0x0002b011
   1ed14:	00027390 	.word	0x00027390
   1ed18:	20003294 	.word	0x20003294

0001ed1c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1ed1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed1e:	4c42      	ldr	r4, [pc, #264]	; (1ee28 <ecdh_cmd_process+0x10c>)
   1ed20:	f3bf 8f5b 	dmb	ish
   1ed24:	6823      	ldr	r3, [r4, #0]
   1ed26:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1ed2a:	2b02      	cmp	r3, #2
{
   1ed2c:	b087      	sub	sp, #28
   1ed2e:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1ed30:	d05a      	beq.n	1ede8 <ecdh_cmd_process+0xcc>
   1ed32:	2b04      	cmp	r3, #4
   1ed34:	d05d      	beq.n	1edf2 <ecdh_cmd_process+0xd6>
   1ed36:	2b01      	cmp	r3, #1
   1ed38:	d15d      	bne.n	1edf6 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1ed3a:	4c3c      	ldr	r4, [pc, #240]	; (1ee2c <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1ed3c:	4e3c      	ldr	r6, [pc, #240]	; (1ee30 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1ed3e:	2120      	movs	r1, #32
   1ed40:	4620      	mov	r0, r4
   1ed42:	f7ff ff3f 	bl	1ebc4 <bt_rand>
		if (err) {
   1ed46:	2800      	cmp	r0, #0
   1ed48:	d143      	bne.n	1edd2 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1ed4a:	2220      	movs	r2, #32
   1ed4c:	4631      	mov	r1, r6
   1ed4e:	4620      	mov	r0, r4
   1ed50:	f006 f8c9 	bl	24ee6 <memcmp>
   1ed54:	2800      	cmp	r0, #0
   1ed56:	d0f2      	beq.n	1ed3e <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1ed58:	4836      	ldr	r0, [pc, #216]	; (1ee34 <ecdh_cmd_process+0x118>)
   1ed5a:	4621      	mov	r1, r4
   1ed5c:	f004 fe9c 	bl	23a98 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1ed60:	4605      	mov	r5, r0
   1ed62:	2800      	cmp	r0, #0
   1ed64:	d1eb      	bne.n	1ed3e <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ed66:	f04f 32ff 	mov.w	r2, #4294967295
   1ed6a:	f04f 33ff 	mov.w	r3, #4294967295
   1ed6e:	2001      	movs	r0, #1
   1ed70:	f7f7 f8c2 	bl	15ef8 <bt_buf_get_rx>
   1ed74:	f100 060c 	add.w	r6, r0, #12
   1ed78:	2102      	movs	r1, #2
   1ed7a:	4604      	mov	r4, r0
   1ed7c:	4630      	mov	r0, r6
   1ed7e:	f7fd fa85 	bl	1c28c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ed82:	233e      	movs	r3, #62	; 0x3e
   1ed84:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1ed86:	2342      	movs	r3, #66	; 0x42
   1ed88:	7043      	strb	r3, [r0, #1]
   1ed8a:	2101      	movs	r1, #1
   1ed8c:	4630      	mov	r0, r6
   1ed8e:	f7fd fa7d 	bl	1c28c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1ed92:	2308      	movs	r3, #8
   1ed94:	7003      	strb	r3, [r0, #0]
   1ed96:	2141      	movs	r1, #65	; 0x41
   1ed98:	4630      	mov	r0, r6
   1ed9a:	f7fd fa77 	bl	1c28c <net_buf_simple_add>
   1ed9e:	4606      	mov	r6, r0
	evt->status = status;
   1eda0:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1eda4:	b1bd      	cbz	r5, 1edd6 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1eda6:	2240      	movs	r2, #64	; 0x40
   1eda8:	2100      	movs	r1, #0
   1edaa:	f006 f8b7 	bl	24f1c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1edae:	f3bf 8f5b 	dmb	ish
   1edb2:	2300      	movs	r3, #0
   1edb4:	e857 2f00 	ldrex	r2, [r7]
   1edb8:	e847 3100 	strex	r1, r3, [r7]
   1edbc:	2900      	cmp	r1, #0
   1edbe:	d1f9      	bne.n	1edb4 <ecdh_cmd_process+0x98>
   1edc0:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1edc4:	b36c      	cbz	r4, 1ee22 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1edc6:	4620      	mov	r0, r4
	}
}
   1edc8:	b007      	add	sp, #28
   1edca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1edce:	f7f8 ba11 	b.w	171f4 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1edd2:	251f      	movs	r5, #31
   1edd4:	e7c7      	b.n	1ed66 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1edd6:	4917      	ldr	r1, [pc, #92]	; (1ee34 <ecdh_cmd_process+0x118>)
   1edd8:	f7ff ff20 	bl	1ec1c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1eddc:	4916      	ldr	r1, [pc, #88]	; (1ee38 <ecdh_cmd_process+0x11c>)
   1edde:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1ede2:	f7ff ff1b 	bl	1ec1c <sys_memcpy_swap.constprop.0>
		break;
   1ede6:	e7e2      	b.n	1edae <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1ede8:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1edea:	f7ff ff43 	bl	1ec74 <ecdh_p256_common_secret>
   1edee:	4604      	mov	r4, r0
		break;
   1edf0:	e7dd      	b.n	1edae <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1edf2:	2001      	movs	r0, #1
   1edf4:	e7f9      	b.n	1edea <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1edf6:	4b11      	ldr	r3, [pc, #68]	; (1ee3c <ecdh_cmd_process+0x120>)
   1edf8:	9305      	str	r3, [sp, #20]
   1edfa:	2302      	movs	r3, #2
   1edfc:	9304      	str	r3, [sp, #16]
   1edfe:	2300      	movs	r3, #0
   1ee00:	480f      	ldr	r0, [pc, #60]	; (1ee40 <ecdh_cmd_process+0x124>)
   1ee02:	aa04      	add	r2, sp, #16
   1ee04:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ee08:	f7f5 f94e 	bl	140a8 <z_impl_z_log_msg_static_create>
   1ee0c:	f3bf 8f5b 	dmb	ish
   1ee10:	2300      	movs	r3, #0
   1ee12:	e854 2f00 	ldrex	r2, [r4]
   1ee16:	e844 3100 	strex	r1, r3, [r4]
   1ee1a:	2900      	cmp	r1, #0
   1ee1c:	d1f9      	bne.n	1ee12 <ecdh_cmd_process+0xf6>
   1ee1e:	f3bf 8f5b 	dmb	ish
}
   1ee22:	b007      	add	sp, #28
   1ee24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee26:	bf00      	nop
   1ee28:	20002fe8 	.word	0x20002fe8
   1ee2c:	20003274 	.word	0x20003274
   1ee30:	0002b04f 	.word	0x0002b04f
   1ee34:	20003294 	.word	0x20003294
   1ee38:	200032b4 	.word	0x200032b4
   1ee3c:	0002b032 	.word	0x0002b032
   1ee40:	00027390 	.word	0x00027390

0001ee44 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ee44:	b510      	push	{r4, lr}
   1ee46:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ee48:	2210      	movs	r2, #16
   1ee4a:	2100      	movs	r1, #0
   1ee4c:	a801      	add	r0, sp, #4
   1ee4e:	f006 f865 	bl	24f1c <memset>
   1ee52:	4c0b      	ldr	r4, [pc, #44]	; (1ee80 <ecdh_thread+0x3c>)
   1ee54:	9405      	str	r4, [sp, #20]
   1ee56:	2301      	movs	r3, #1
   1ee58:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1ee5c:	f04f 32ff 	mov.w	r2, #4294967295
   1ee60:	f04f 33ff 	mov.w	r3, #4294967295
   1ee64:	2101      	movs	r1, #1
   1ee66:	a801      	add	r0, sp, #4
   1ee68:	f004 fc52 	bl	23710 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ee6c:	4620      	mov	r0, r4
   1ee6e:	f008 f8e7 	bl	27040 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ee72:	9b04      	ldr	r3, [sp, #16]
   1ee74:	f36f 3394 	bfc	r3, #14, #7
   1ee78:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ee7a:	f7ff ff4f 	bl	1ed1c <ecdh_cmd_process>
	while (true) {
   1ee7e:	e7ed      	b.n	1ee5c <ecdh_thread+0x18>
   1ee80:	20002fd8 	.word	0x20002fd8

0001ee84 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1ee84:	b510      	push	{r4, lr}
   1ee86:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ee88:	480e      	ldr	r0, [pc, #56]	; (1eec4 <hci_ecdh_init+0x40>)
   1ee8a:	f008 f8d4 	bl	27036 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ee8e:	4c0e      	ldr	r4, [pc, #56]	; (1eec8 <hci_ecdh_init+0x44>)
   1ee90:	490e      	ldr	r1, [pc, #56]	; (1eecc <hci_ecdh_init+0x48>)
   1ee92:	2200      	movs	r2, #0
   1ee94:	2300      	movs	r3, #0
   1ee96:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ee9a:	2300      	movs	r3, #0
   1ee9c:	220a      	movs	r2, #10
   1ee9e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1eea2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1eea6:	9300      	str	r3, [sp, #0]
   1eea8:	f44f 7262 	mov.w	r2, #904	; 0x388
   1eeac:	4b08      	ldr	r3, [pc, #32]	; (1eed0 <hci_ecdh_init+0x4c>)
   1eeae:	4620      	mov	r0, r4
   1eeb0:	f001 fb3e 	bl	20530 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1eeb4:	4907      	ldr	r1, [pc, #28]	; (1eed4 <hci_ecdh_init+0x50>)
   1eeb6:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1eeb8:	b008      	add	sp, #32
   1eeba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eebe:	f007 beda 	b.w	26c76 <z_impl_k_thread_name_set>
   1eec2:	bf00      	nop
   1eec4:	20002fd8 	.word	0x20002fd8
   1eec8:	200028b0 	.word	0x200028b0
   1eecc:	20005400 	.word	0x20005400
   1eed0:	0001ee45 	.word	0x0001ee45
   1eed4:	0002b042 	.word	0x0002b042

0001eed8 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1eed8:	4801      	ldr	r0, [pc, #4]	; (1eee0 <hci_ecdh_uninit+0x8>)
   1eeda:	f7f6 bd87 	b.w	159ec <z_impl_k_thread_abort>
   1eede:	bf00      	nop
   1eee0:	200028b0 	.word	0x200028b0

0001eee4 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1eee4:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1eee6:	4b0b      	ldr	r3, [pc, #44]	; (1ef14 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1eee8:	f3bf 8f5b 	dmb	ish
   1eeec:	2201      	movs	r2, #1
   1eeee:	e853 1f00 	ldrex	r1, [r3]
   1eef2:	2900      	cmp	r1, #0
   1eef4:	d103      	bne.n	1eefe <hci_cmd_le_read_local_p256_public_key+0x1a>
   1eef6:	e843 2000 	strex	r0, r2, [r3]
   1eefa:	2800      	cmp	r0, #0
   1eefc:	d1f7      	bne.n	1eeee <hci_cmd_le_read_local_p256_public_key+0xa>
   1eefe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1ef02:	d105      	bne.n	1ef10 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1ef04:	4804      	ldr	r0, [pc, #16]	; (1ef18 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1ef06:	2100      	movs	r1, #0
   1ef08:	f004 fcde 	bl	238c8 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1ef0c:	2000      	movs	r0, #0
}
   1ef0e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ef10:	200c      	movs	r0, #12
   1ef12:	e7fc      	b.n	1ef0e <hci_cmd_le_read_local_p256_public_key+0x2a>
   1ef14:	20002fe8 	.word	0x20002fe8
   1ef18:	20002fd8 	.word	0x20002fd8

0001ef1c <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1ef1c:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ef1e:	2900      	cmp	r1, #0
   1ef20:	4b11      	ldr	r3, [pc, #68]	; (1ef68 <cmd_le_generate_dhkey+0x4c>)
   1ef22:	f3bf 8f5b 	dmb	ish
{
   1ef26:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ef28:	bf0c      	ite	eq
   1ef2a:	2202      	moveq	r2, #2
   1ef2c:	2204      	movne	r2, #4
   1ef2e:	e853 1f00 	ldrex	r1, [r3]
   1ef32:	2900      	cmp	r1, #0
   1ef34:	d103      	bne.n	1ef3e <cmd_le_generate_dhkey+0x22>
   1ef36:	e843 2000 	strex	r0, r2, [r3]
   1ef3a:	2800      	cmp	r0, #0
   1ef3c:	d1f7      	bne.n	1ef2e <cmd_le_generate_dhkey+0x12>
   1ef3e:	f3bf 8f5b 	dmb	ish
   1ef42:	d10e      	bne.n	1ef62 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1ef44:	4621      	mov	r1, r4
   1ef46:	4809      	ldr	r0, [pc, #36]	; (1ef6c <cmd_le_generate_dhkey+0x50>)
   1ef48:	f7ff fe68 	bl	1ec1c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1ef4c:	4808      	ldr	r0, [pc, #32]	; (1ef70 <cmd_le_generate_dhkey+0x54>)
   1ef4e:	f104 0120 	add.w	r1, r4, #32
   1ef52:	f7ff fe63 	bl	1ec1c <sys_memcpy_swap.constprop.0>
   1ef56:	4807      	ldr	r0, [pc, #28]	; (1ef74 <cmd_le_generate_dhkey+0x58>)
   1ef58:	2100      	movs	r1, #0
   1ef5a:	f004 fcb5 	bl	238c8 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1ef5e:	2000      	movs	r0, #0
}
   1ef60:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ef62:	200c      	movs	r0, #12
   1ef64:	e7fc      	b.n	1ef60 <cmd_le_generate_dhkey+0x44>
   1ef66:	bf00      	nop
   1ef68:	20002fe8 	.word	0x20002fe8
   1ef6c:	20003294 	.word	0x20003294
   1ef70:	200032b4 	.word	0x200032b4
   1ef74:	20002fd8 	.word	0x20002fd8

0001ef78 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1ef78:	4901      	ldr	r1, [pc, #4]	; (1ef80 <mpsl_low_prio_irq_handler+0x8>)
   1ef7a:	4802      	ldr	r0, [pc, #8]	; (1ef84 <mpsl_low_prio_irq_handler+0xc>)
   1ef7c:	f007 bf27 	b.w	26dce <k_work_submit_to_queue>
   1ef80:	20002fec 	.word	0x20002fec
   1ef84:	20002978 	.word	0x20002978

0001ef88 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   1ef88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ef8a:	2332      	movs	r3, #50	; 0x32
   1ef8c:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ef90:	4a10      	ldr	r2, [pc, #64]	; (1efd4 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1ef92:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1ef94:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ef96:	2119      	movs	r1, #25
   1ef98:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1ef9a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1ef9e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1efa2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1efa6:	f7ed fb8b 	bl	c6c0 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1efaa:	4604      	mov	r4, r0
   1efac:	b970      	cbnz	r0, 1efcc <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1efae:	4601      	mov	r1, r0
   1efb0:	462a      	mov	r2, r5
   1efb2:	2008      	movs	r0, #8
   1efb4:	f7f5 ff8e 	bl	14ed4 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1efb8:	462a      	mov	r2, r5
   1efba:	4621      	mov	r1, r4
   1efbc:	200b      	movs	r0, #11
   1efbe:	f7f5 ff89 	bl	14ed4 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1efc2:	462a      	mov	r2, r5
   1efc4:	4621      	mov	r1, r4
   1efc6:	4628      	mov	r0, r5
   1efc8:	f7f5 ff84 	bl	14ed4 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1efcc:	4620      	mov	r0, r4
   1efce:	b003      	add	sp, #12
   1efd0:	bd30      	pop	{r4, r5, pc}
   1efd2:	bf00      	nop
   1efd4:	0001f015 	.word	0x0001f015

0001efd8 <mpsl_low_prio_work_handler>:
{
   1efd8:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1efda:	f04f 30ff 	mov.w	r0, #4294967295
   1efde:	f04f 31ff 	mov.w	r1, #4294967295
   1efe2:	f7fe ff13 	bl	1de0c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1efe6:	b148      	cbz	r0, 1effc <mpsl_low_prio_work_handler+0x24>
   1efe8:	4907      	ldr	r1, [pc, #28]	; (1f008 <mpsl_low_prio_work_handler+0x30>)
   1efea:	4808      	ldr	r0, [pc, #32]	; (1f00c <mpsl_low_prio_work_handler+0x34>)
   1efec:	4a08      	ldr	r2, [pc, #32]	; (1f010 <mpsl_low_prio_work_handler+0x38>)
   1efee:	2347      	movs	r3, #71	; 0x47
   1eff0:	f005 fb7c 	bl	246ec <assert_print>
   1eff4:	4806      	ldr	r0, [pc, #24]	; (1f010 <mpsl_low_prio_work_handler+0x38>)
   1eff6:	2147      	movs	r1, #71	; 0x47
   1eff8:	f005 fb71 	bl	246de <assert_post_action>
	mpsl_low_priority_process();
   1effc:	f7f1 fd7e 	bl	10afc <mpsl_low_priority_process>
}
   1f000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1f004:	f7fe bf0a 	b.w	1de1c <multithreading_lock_release>
   1f008:	0002b0a8 	.word	0x0002b0a8
   1f00c:	00027f8a 	.word	0x00027f8a
   1f010:	0002b07b 	.word	0x0002b07b

0001f014 <m_assert_handler>:
{
   1f014:	b598      	push	{r3, r4, r7, lr}
   1f016:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1f018:	466c      	mov	r4, sp
   1f01a:	b08a      	sub	sp, #40	; 0x28
   1f01c:	466a      	mov	r2, sp
   1f01e:	4b0c      	ldr	r3, [pc, #48]	; (1f050 <m_assert_handler+0x3c>)
   1f020:	61d1      	str	r1, [r2, #28]
   1f022:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f026:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f02a:	8413      	strh	r3, [r2, #32]
   1f02c:	4b09      	ldr	r3, [pc, #36]	; (1f054 <m_assert_handler+0x40>)
   1f02e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f032:	4809      	ldr	r0, [pc, #36]	; (1f058 <m_assert_handler+0x44>)
   1f034:	2300      	movs	r3, #0
   1f036:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f03a:	f7f5 f835 	bl	140a8 <z_impl_z_log_msg_static_create>
   1f03e:	46a5      	mov	sp, r4
	k_oops();
   1f040:	4040      	eors	r0, r0
   1f042:	f380 8811 	msr	BASEPRI, r0
   1f046:	f04f 0003 	mov.w	r0, #3
   1f04a:	df02      	svc	2
}
   1f04c:	46bd      	mov	sp, r7
   1f04e:	bd98      	pop	{r3, r4, r7, pc}
   1f050:	0002b0b5 	.word	0x0002b0b5
   1f054:	01000004 	.word	0x01000004
   1f058:	000273e0 	.word	0x000273e0

0001f05c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   1f05c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1f05e:	4d0d      	ldr	r5, [pc, #52]	; (1f094 <mpsl_low_prio_init+0x38>)
   1f060:	490d      	ldr	r1, [pc, #52]	; (1f098 <mpsl_low_prio_init+0x3c>)
   1f062:	2400      	movs	r4, #0
   1f064:	9400      	str	r4, [sp, #0]
   1f066:	f06f 0309 	mvn.w	r3, #9
   1f06a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f06e:	4628      	mov	r0, r5
   1f070:	f002 f970 	bl	21354 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1f074:	4909      	ldr	r1, [pc, #36]	; (1f09c <mpsl_low_prio_init+0x40>)
   1f076:	4628      	mov	r0, r5
   1f078:	f007 fdfd 	bl	26c76 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1f07c:	4908      	ldr	r1, [pc, #32]	; (1f0a0 <mpsl_low_prio_init+0x44>)
   1f07e:	4809      	ldr	r0, [pc, #36]	; (1f0a4 <mpsl_low_prio_init+0x48>)
   1f080:	f002 f882 	bl	21188 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f084:	4622      	mov	r2, r4
   1f086:	2104      	movs	r1, #4
   1f088:	2019      	movs	r0, #25
   1f08a:	f7f5 ff23 	bl	14ed4 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f08e:	4620      	mov	r0, r4
   1f090:	b003      	add	sp, #12
   1f092:	bd30      	pop	{r4, r5, pc}
   1f094:	20002978 	.word	0x20002978
   1f098:	20005800 	.word	0x20005800
   1f09c:	0002b0c9 	.word	0x0002b0c9
   1f0a0:	0001efd9 	.word	0x0001efd9
   1f0a4:	20002fec 	.word	0x20002fec

0001f0a8 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f0a8:	4b01      	ldr	r3, [pc, #4]	; (1f0b0 <mpsl_hfclk_callback+0x8>)
   1f0aa:	2000      	movs	r0, #0
   1f0ac:	681b      	ldr	r3, [r3, #0]
   1f0ae:	4718      	bx	r3
   1f0b0:	20002ffc 	.word	0x20002ffc

0001f0b4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f0b4:	b510      	push	{r4, lr}
	switch (domain) {
   1f0b6:	b130      	cbz	r0, 1f0c6 <nrfx_clock_start+0x12>
   1f0b8:	2801      	cmp	r0, #1
   1f0ba:	d10a      	bne.n	1f0d2 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f0c0:	480a      	ldr	r0, [pc, #40]	; (1f0ec <nrfx_clock_start+0x38>)
   1f0c2:	f7ed b95f 	b.w	c384 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f0c6:	4b0a      	ldr	r3, [pc, #40]	; (1f0f0 <nrfx_clock_start+0x3c>)
}
   1f0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f0cc:	681b      	ldr	r3, [r3, #0]
   1f0ce:	2001      	movs	r0, #1
   1f0d0:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1f0d2:	4908      	ldr	r1, [pc, #32]	; (1f0f4 <nrfx_clock_start+0x40>)
   1f0d4:	4a08      	ldr	r2, [pc, #32]	; (1f0f8 <nrfx_clock_start+0x44>)
   1f0d6:	4809      	ldr	r0, [pc, #36]	; (1f0fc <nrfx_clock_start+0x48>)
   1f0d8:	231c      	movs	r3, #28
   1f0da:	f005 fb07 	bl	246ec <assert_print>
   1f0de:	4808      	ldr	r0, [pc, #32]	; (1f100 <nrfx_clock_start+0x4c>)
   1f0e0:	f005 fb04 	bl	246ec <assert_print>
   1f0e4:	4804      	ldr	r0, [pc, #16]	; (1f0f8 <nrfx_clock_start+0x44>)
   1f0e6:	211c      	movs	r1, #28
   1f0e8:	f005 faf9 	bl	246de <assert_post_action>
   1f0ec:	0001f0a9 	.word	0x0001f0a9
   1f0f0:	20002ffc 	.word	0x20002ffc
   1f0f4:	0002ab0f 	.word	0x0002ab0f
   1f0f8:	0002b0dd 	.word	0x0002b0dd
   1f0fc:	00027f8a 	.word	0x00027f8a
   1f100:	0002b11a 	.word	0x0002b11a

0001f104 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f104:	b508      	push	{r3, lr}
	switch (domain) {
   1f106:	b190      	cbz	r0, 1f12e <nrfx_clock_stop+0x2a>
   1f108:	2801      	cmp	r0, #1
   1f10a:	d103      	bne.n	1f114 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f10c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1f110:	f7ed b92a 	b.w	c368 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1f114:	4906      	ldr	r1, [pc, #24]	; (1f130 <nrfx_clock_stop+0x2c>)
   1f116:	4a07      	ldr	r2, [pc, #28]	; (1f134 <nrfx_clock_stop+0x30>)
   1f118:	4807      	ldr	r0, [pc, #28]	; (1f138 <nrfx_clock_stop+0x34>)
   1f11a:	232a      	movs	r3, #42	; 0x2a
   1f11c:	f005 fae6 	bl	246ec <assert_print>
   1f120:	4806      	ldr	r0, [pc, #24]	; (1f13c <nrfx_clock_stop+0x38>)
   1f122:	f005 fae3 	bl	246ec <assert_print>
   1f126:	4803      	ldr	r0, [pc, #12]	; (1f134 <nrfx_clock_stop+0x30>)
   1f128:	212a      	movs	r1, #42	; 0x2a
   1f12a:	f005 fad8 	bl	246de <assert_post_action>
}
   1f12e:	bd08      	pop	{r3, pc}
   1f130:	0002ab0f 	.word	0x0002ab0f
   1f134:	0002b0dd 	.word	0x0002b0dd
   1f138:	00027f8a 	.word	0x00027f8a
   1f13c:	0002b11a 	.word	0x0002b11a

0001f140 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1f140:	4b01      	ldr	r3, [pc, #4]	; (1f148 <nrfx_clock_init+0x8>)
   1f142:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1f144:	4801      	ldr	r0, [pc, #4]	; (1f14c <nrfx_clock_init+0xc>)
   1f146:	4770      	bx	lr
   1f148:	20002ffc 	.word	0x20002ffc
   1f14c:	0bad0000 	.word	0x0bad0000

0001f150 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f150:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1f154:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f158:	2a06      	cmp	r2, #6
   1f15a:	d109      	bne.n	1f170 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f15c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1f160:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f164:	3b03      	subs	r3, #3
   1f166:	2b04      	cmp	r3, #4
   1f168:	d802      	bhi.n	1f170 <nrf52_errata_16+0x20>
   1f16a:	4a02      	ldr	r2, [pc, #8]	; (1f174 <nrf52_errata_16+0x24>)
   1f16c:	5cd0      	ldrb	r0, [r2, r3]
   1f16e:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
   1f170:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   1f172:	4770      	bx	lr
   1f174:	0002b139 	.word	0x0002b139

0001f178 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f178:	4a02      	ldr	r2, [pc, #8]	; (1f184 <nvmc_wait+0xc>)
   1f17a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f17e:	2b00      	cmp	r3, #0
   1f180:	d0fb      	beq.n	1f17a <nvmc_wait+0x2>
}
   1f182:	4770      	bx	lr
   1f184:	4001e000 	.word	0x4001e000

0001f188 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1f188:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1f18a:	f007 fcb4 	bl	26af6 <nrf52_errata_108>
   1f18e:	b140      	cbz	r0, 1f1a2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1f190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f194:	4a93      	ldr	r2, [pc, #588]	; (1f3e4 <SystemInit+0x25c>)
   1f196:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1f19a:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1f19e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1f1a2:	f7ff ffd5 	bl	1f150 <nrf52_errata_16>
   1f1a6:	b110      	cbz	r0, 1f1ae <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1f1a8:	4b8f      	ldr	r3, [pc, #572]	; (1f3e8 <SystemInit+0x260>)
   1f1aa:	4a90      	ldr	r2, [pc, #576]	; (1f3ec <SystemInit+0x264>)
   1f1ac:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1f1ae:	f007 fca2 	bl	26af6 <nrf52_errata_108>
   1f1b2:	b148      	cbz	r0, 1f1c8 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1f1b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f1b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f1bc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1f1c0:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1f1c4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1f1c8:	f7ff ffc2 	bl	1f150 <nrf52_errata_16>
   1f1cc:	b130      	cbz	r0, 1f1dc <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1f1ce:	4a88      	ldr	r2, [pc, #544]	; (1f3f0 <SystemInit+0x268>)
   1f1d0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1f1d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f1d8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f1dc:	f007 fc8b 	bl	26af6 <nrf52_errata_108>
   1f1e0:	b140      	cbz	r0, 1f1f4 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f1e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f1e6:	2200      	movs	r2, #0
   1f1e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f1ec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f1f0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1f1f4:	f7ff ffac 	bl	1f150 <nrf52_errata_16>
   1f1f8:	b120      	cbz	r0, 1f204 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1f1fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f1fe:	2203      	movs	r2, #3
   1f200:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1f204:	f7ff ffa4 	bl	1f150 <nrf52_errata_16>
   1f208:	b160      	cbz	r0, 1f224 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1f20a:	4b7a      	ldr	r3, [pc, #488]	; (1f3f4 <SystemInit+0x26c>)
   1f20c:	2205      	movs	r2, #5
   1f20e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1f212:	2201      	movs	r2, #1
   1f214:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1f218:	2200      	movs	r2, #0
   1f21a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1f21e:	223f      	movs	r2, #63	; 0x3f
   1f220:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1f224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f228:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f22c:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f22e:	bf09      	itett	eq
   1f230:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1f234:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1f238:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1f23c:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1f240:	bf08      	it	eq
   1f242:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f246:	2a06      	cmp	r2, #6
   1f248:	d14d      	bne.n	1f2e6 <SystemInit+0x15e>
            {
                switch(var2)
   1f24a:	3b03      	subs	r3, #3
   1f24c:	2b04      	cmp	r3, #4
   1f24e:	d803      	bhi.n	1f258 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f250:	4a69      	ldr	r2, [pc, #420]	; (1f3f8 <SystemInit+0x270>)
   1f252:	5cd3      	ldrb	r3, [r2, r3]
   1f254:	2b00      	cmp	r3, #0
   1f256:	d046      	beq.n	1f2e6 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f25c:	4b67      	ldr	r3, [pc, #412]	; (1f3fc <SystemInit+0x274>)
   1f25e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f262:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f266:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f26a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f26e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f272:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f276:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f27a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f27e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f282:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f286:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f28a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f28e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f292:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f296:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f29a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f29e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f2a2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f2a6:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f2aa:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f2ae:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f2b2:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f2b6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f2ba:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f2be:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f2c2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f2c6:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f2ca:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f2ce:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f2d2:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f2d6:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f2da:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f2de:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f2e2:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1f2e6:	f007 fc06 	bl	26af6 <nrf52_errata_108>
   1f2ea:	b148      	cbz	r0, 1f300 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1f2ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f2f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f2f4:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f2f8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1f2fc:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f300:	f007 fbf9 	bl	26af6 <nrf52_errata_108>
   1f304:	b148      	cbz	r0, 1f31a <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f30a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f30e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f310:	bf44      	itt	mi
   1f312:	f06f 0201 	mvnmi.w	r2, #1
   1f316:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f31a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f31e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f322:	2a06      	cmp	r2, #6
   1f324:	d10e      	bne.n	1f344 <SystemInit+0x1bc>
            {
                switch(var2)
   1f326:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1f32a:	3b03      	subs	r3, #3
   1f32c:	2b04      	cmp	r3, #4
   1f32e:	d802      	bhi.n	1f336 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1f330:	4a33      	ldr	r2, [pc, #204]	; (1f400 <SystemInit+0x278>)
   1f332:	5cd3      	ldrb	r3, [r2, r3]
   1f334:	b133      	cbz	r3, 1f344 <SystemInit+0x1bc>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1f336:	4a33      	ldr	r2, [pc, #204]	; (1f404 <SystemInit+0x27c>)
   1f338:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1f33c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f340:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1f344:	4a2a      	ldr	r2, [pc, #168]	; (1f3f0 <SystemInit+0x268>)
   1f346:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1f34a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1f34e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1f352:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f356:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f35a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1f35e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f362:	2a06      	cmp	r2, #6
   1f364:	d10f      	bne.n	1f386 <SystemInit+0x1fe>
            {
                switch(var2)
   1f366:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1f36a:	3b03      	subs	r3, #3
   1f36c:	2b04      	cmp	r3, #4
   1f36e:	d802      	bhi.n	1f376 <SystemInit+0x1ee>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f370:	4a25      	ldr	r2, [pc, #148]	; (1f408 <SystemInit+0x280>)
   1f372:	5cd3      	ldrb	r3, [r2, r3]
   1f374:	b13b      	cbz	r3, 1f386 <SystemInit+0x1fe>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f376:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f37a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f37e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f382:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f386:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f38a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f38e:	2a00      	cmp	r2, #0
   1f390:	db03      	blt.n	1f39a <SystemInit+0x212>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f392:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f396:	2b00      	cmp	r3, #0
   1f398:	da22      	bge.n	1f3e0 <SystemInit+0x258>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f39a:	491c      	ldr	r1, [pc, #112]	; (1f40c <SystemInit+0x284>)
   1f39c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f39e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3a2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3a6:	2415      	movs	r4, #21
    nvmc_wait();
   1f3a8:	f7ff fee6 	bl	1f178 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f3ac:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f3b0:	f7ff fee2 	bl	1f178 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f3b4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f3b8:	f7ff fede 	bl	1f178 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f3bc:	2300      	movs	r3, #0
   1f3be:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f3c2:	f7ff fed9 	bl	1f178 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1f3c6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f3ca:	4909      	ldr	r1, [pc, #36]	; (1f3f0 <SystemInit+0x268>)
   1f3cc:	4b10      	ldr	r3, [pc, #64]	; (1f410 <SystemInit+0x288>)
   1f3ce:	68ca      	ldr	r2, [r1, #12]
   1f3d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f3d4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f3d6:	60cb      	str	r3, [r1, #12]
   1f3d8:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f3dc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f3de:	e7fd      	b.n	1f3dc <SystemInit+0x254>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   1f3e0:	bd10      	pop	{r4, pc}
   1f3e2:	bf00      	nop
   1f3e4:	40013000 	.word	0x40013000
   1f3e8:	4007c000 	.word	0x4007c000
   1f3ec:	baadf00d 	.word	0xbaadf00d
   1f3f0:	e000ed00 	.word	0xe000ed00
   1f3f4:	40005000 	.word	0x40005000
   1f3f8:	0002b134 	.word	0x0002b134
   1f3fc:	4000c000 	.word	0x4000c000
   1f400:	0002b12f 	.word	0x0002b12f
   1f404:	40001000 	.word	0x40001000
   1f408:	0002b12a 	.word	0x0002b12a
   1f40c:	4001e000 	.word	0x4001e000
   1f410:	05fa0004 	.word	0x05fa0004

0001f414 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f414:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f416:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f418:	6802      	ldr	r2, [r0, #0]
   1f41a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1f41e:	fab2 f382 	clz	r3, r2
   1f422:	f1c3 031f 	rsb	r3, r3, #31
   1f426:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f428:	fa05 f403 	lsl.w	r4, r5, r3
   1f42c:	ea22 0404 	bic.w	r4, r2, r4
   1f430:	e850 6f00 	ldrex	r6, [r0]
   1f434:	4296      	cmp	r6, r2
   1f436:	d104      	bne.n	1f442 <nrfx_flag32_alloc+0x2e>
   1f438:	e840 4c00 	strex	ip, r4, [r0]
   1f43c:	f1bc 0f00 	cmp.w	ip, #0
   1f440:	d1f6      	bne.n	1f430 <nrfx_flag32_alloc+0x1c>
   1f442:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f446:	d1e7      	bne.n	1f418 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1f448:	4801      	ldr	r0, [pc, #4]	; (1f450 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1f44a:	700b      	strb	r3, [r1, #0]
}
   1f44c:	bd70      	pop	{r4, r5, r6, pc}
   1f44e:	bf00      	nop
   1f450:	0bad0000 	.word	0x0bad0000

0001f454 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1f454:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f456:	6803      	ldr	r3, [r0, #0]
   1f458:	40cb      	lsrs	r3, r1
   1f45a:	07db      	lsls	r3, r3, #31
   1f45c:	d414      	bmi.n	1f488 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f45e:	2301      	movs	r3, #1
   1f460:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1f462:	6802      	ldr	r2, [r0, #0]
   1f464:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f468:	ea43 0102 	orr.w	r1, r3, r2
   1f46c:	e850 4f00 	ldrex	r4, [r0]
   1f470:	4294      	cmp	r4, r2
   1f472:	d104      	bne.n	1f47e <nrfx_flag32_free+0x2a>
   1f474:	e840 1c00 	strex	ip, r1, [r0]
   1f478:	f1bc 0f00 	cmp.w	ip, #0
   1f47c:	d1f6      	bne.n	1f46c <nrfx_flag32_free+0x18>
   1f47e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f482:	d1ee      	bne.n	1f462 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1f484:	4801      	ldr	r0, [pc, #4]	; (1f48c <nrfx_flag32_free+0x38>)
}
   1f486:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f488:	4801      	ldr	r0, [pc, #4]	; (1f490 <nrfx_flag32_free+0x3c>)
   1f48a:	e7fc      	b.n	1f486 <nrfx_flag32_free+0x32>
   1f48c:	0bad0000 	.word	0x0bad0000
   1f490:	0bad0004 	.word	0x0bad0004

0001f494 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f494:	4b03      	ldr	r3, [pc, #12]	; (1f4a4 <pin_in_use_by_te+0x10>)
   1f496:	3008      	adds	r0, #8
   1f498:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f49c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f4a0:	4770      	bx	lr
   1f4a2:	bf00      	nop
   1f4a4:	20000708 	.word	0x20000708

0001f4a8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f4a8:	4b04      	ldr	r3, [pc, #16]	; (1f4bc <pin_has_trigger+0x14>)
   1f4aa:	3008      	adds	r0, #8
   1f4ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f4b0:	f010 001c 	ands.w	r0, r0, #28
   1f4b4:	bf18      	it	ne
   1f4b6:	2001      	movne	r0, #1
   1f4b8:	4770      	bx	lr
   1f4ba:	bf00      	nop
   1f4bc:	20000708 	.word	0x20000708

0001f4c0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f4c0:	4b03      	ldr	r3, [pc, #12]	; (1f4d0 <pin_is_output+0x10>)
   1f4c2:	3008      	adds	r0, #8
   1f4c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f4c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f4cc:	4770      	bx	lr
   1f4ce:	bf00      	nop
   1f4d0:	20000708 	.word	0x20000708

0001f4d4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f4d4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f4d6:	f100 0308 	add.w	r3, r0, #8
   1f4da:	4c0c      	ldr	r4, [pc, #48]	; (1f50c <call_handler+0x38>)
   1f4dc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f4e0:	05da      	lsls	r2, r3, #23
{
   1f4e2:	4605      	mov	r5, r0
   1f4e4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f4e6:	d507      	bpl.n	1f4f8 <call_handler+0x24>
   1f4e8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f4ec:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f4f0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f4f4:	6852      	ldr	r2, [r2, #4]
   1f4f6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f4f8:	68a3      	ldr	r3, [r4, #8]
   1f4fa:	b12b      	cbz	r3, 1f508 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f4fc:	68e2      	ldr	r2, [r4, #12]
   1f4fe:	4631      	mov	r1, r6
   1f500:	4628      	mov	r0, r5
    }
}
   1f502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f506:	4718      	bx	r3
}
   1f508:	bd70      	pop	{r4, r5, r6, pc}
   1f50a:	bf00      	nop
   1f50c:	20000708 	.word	0x20000708

0001f510 <release_handler>:
{
   1f510:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f512:	4a18      	ldr	r2, [pc, #96]	; (1f574 <release_handler+0x64>)
   1f514:	3008      	adds	r0, #8
   1f516:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f51a:	05d9      	lsls	r1, r3, #23
   1f51c:	d51d      	bpl.n	1f55a <release_handler+0x4a>
   1f51e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f522:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f526:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f52a:	f102 040e 	add.w	r4, r2, #14
   1f52e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f530:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f534:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f538:	d003      	beq.n	1f542 <release_handler+0x32>
   1f53a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f53e:	4299      	cmp	r1, r3
   1f540:	d00b      	beq.n	1f55a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f542:	3001      	adds	r0, #1
   1f544:	2820      	cmp	r0, #32
   1f546:	d1f3      	bne.n	1f530 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f548:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f54a:	480b      	ldr	r0, [pc, #44]	; (1f578 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1f54c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f550:	f7ff ff80 	bl	1f454 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f554:	4b09      	ldr	r3, [pc, #36]	; (1f57c <release_handler+0x6c>)
   1f556:	4298      	cmp	r0, r3
   1f558:	d100      	bne.n	1f55c <release_handler+0x4c>
}
   1f55a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f55c:	4908      	ldr	r1, [pc, #32]	; (1f580 <release_handler+0x70>)
   1f55e:	4809      	ldr	r0, [pc, #36]	; (1f584 <release_handler+0x74>)
   1f560:	4a09      	ldr	r2, [pc, #36]	; (1f588 <release_handler+0x78>)
   1f562:	f44f 7399 	mov.w	r3, #306	; 0x132
   1f566:	f005 f8c1 	bl	246ec <assert_print>
   1f56a:	4807      	ldr	r0, [pc, #28]	; (1f588 <release_handler+0x78>)
   1f56c:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f570:	f005 f8b5 	bl	246de <assert_post_action>
   1f574:	20000708 	.word	0x20000708
   1f578:	2000075c 	.word	0x2000075c
   1f57c:	0bad0000 	.word	0x0bad0000
   1f580:	0002a82e 	.word	0x0002a82e
   1f584:	00027f8a 	.word	0x00027f8a
   1f588:	0002b13e 	.word	0x0002b13e

0001f58c <pin_handler_trigger_uninit>:
{
   1f58c:	b538      	push	{r3, r4, r5, lr}
   1f58e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f590:	f7ff ff80 	bl	1f494 <pin_in_use_by_te>
   1f594:	4c09      	ldr	r4, [pc, #36]	; (1f5bc <pin_handler_trigger_uninit+0x30>)
   1f596:	f102 0508 	add.w	r5, r2, #8
   1f59a:	b140      	cbz	r0, 1f5ae <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f59c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f5a0:	4907      	ldr	r1, [pc, #28]	; (1f5c0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f5a2:	0b5b      	lsrs	r3, r3, #13
   1f5a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f5a8:	2000      	movs	r0, #0
   1f5aa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1f5ae:	4610      	mov	r0, r2
   1f5b0:	f7ff ffae 	bl	1f510 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f5b4:	2300      	movs	r3, #0
   1f5b6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f5ba:	bd38      	pop	{r3, r4, r5, pc}
   1f5bc:	20000708 	.word	0x20000708
   1f5c0:	40006000 	.word	0x40006000

0001f5c4 <nrf_gpio_pin_port_decode>:
{
   1f5c4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f5c6:	6802      	ldr	r2, [r0, #0]
{
   1f5c8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f5ca:	4610      	mov	r0, r2
   1f5cc:	f007 faa4 	bl	26b18 <nrf_gpio_pin_present_check>
   1f5d0:	b958      	cbnz	r0, 1f5ea <nrf_gpio_pin_port_decode+0x26>
   1f5d2:	490f      	ldr	r1, [pc, #60]	; (1f610 <nrf_gpio_pin_port_decode+0x4c>)
   1f5d4:	4a0f      	ldr	r2, [pc, #60]	; (1f614 <nrf_gpio_pin_port_decode+0x50>)
   1f5d6:	4810      	ldr	r0, [pc, #64]	; (1f618 <nrf_gpio_pin_port_decode+0x54>)
   1f5d8:	f240 2347 	movw	r3, #583	; 0x247
   1f5dc:	f005 f886 	bl	246ec <assert_print>
   1f5e0:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f5e4:	480b      	ldr	r0, [pc, #44]	; (1f614 <nrf_gpio_pin_port_decode+0x50>)
   1f5e6:	f005 f87a 	bl	246de <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1f5ea:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f5ee:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f5f0:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f5f2:	d009      	beq.n	1f608 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   1f5f4:	4909      	ldr	r1, [pc, #36]	; (1f61c <nrf_gpio_pin_port_decode+0x58>)
   1f5f6:	4a07      	ldr	r2, [pc, #28]	; (1f614 <nrf_gpio_pin_port_decode+0x50>)
   1f5f8:	4807      	ldr	r0, [pc, #28]	; (1f618 <nrf_gpio_pin_port_decode+0x54>)
   1f5fa:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1f5fe:	f005 f875 	bl	246ec <assert_print>
   1f602:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f606:	e7ed      	b.n	1f5e4 <nrf_gpio_pin_port_decode+0x20>
}
   1f608:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1f60c:	bd08      	pop	{r3, pc}
   1f60e:	bf00      	nop
   1f610:	0002a7d3 	.word	0x0002a7d3
   1f614:	0002a7a0 	.word	0x0002a7a0
   1f618:	00027f8a 	.word	0x00027f8a
   1f61c:	0002ab0f 	.word	0x0002ab0f

0001f620 <nrfx_gpiote_input_configure>:
{
   1f620:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f622:	4604      	mov	r4, r0
   1f624:	b085      	sub	sp, #20
   1f626:	4617      	mov	r7, r2
   1f628:	461d      	mov	r5, r3
    if (p_input_config)
   1f62a:	b1d9      	cbz	r1, 1f664 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f62c:	f007 fa80 	bl	26b30 <pin_is_task_output>
   1f630:	bb00      	cbnz	r0, 1f674 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f632:	460b      	mov	r3, r1
   1f634:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f638:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f63c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f640:	f10d 020f 	add.w	r2, sp, #15
   1f644:	f10d 010e 	add.w	r1, sp, #14
   1f648:	4620      	mov	r0, r4
   1f64a:	f007 fa7c 	bl	26b46 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f64e:	4a44      	ldr	r2, [pc, #272]	; (1f760 <nrfx_gpiote_input_configure+0x140>)
   1f650:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f654:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f658:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f65c:	f043 0301 	orr.w	r3, r3, #1
   1f660:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f664:	b34f      	cbz	r7, 1f6ba <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   1f666:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f668:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f66a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f66c:	f7ff ff28 	bl	1f4c0 <pin_is_output>
   1f670:	b110      	cbz	r0, 1f678 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f672:	b1ba      	cbz	r2, 1f6a4 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   1f674:	483b      	ldr	r0, [pc, #236]	; (1f764 <nrfx_gpiote_input_configure+0x144>)
   1f676:	e022      	b.n	1f6be <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f678:	4b39      	ldr	r3, [pc, #228]	; (1f760 <nrfx_gpiote_input_configure+0x140>)
   1f67a:	f104 0c08 	add.w	ip, r4, #8
   1f67e:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   1f682:	f021 0120 	bic.w	r1, r1, #32
   1f686:	04c9      	lsls	r1, r1, #19
   1f688:	0cc9      	lsrs	r1, r1, #19
   1f68a:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   1f68e:	b14a      	cbz	r2, 1f6a4 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   1f690:	2e03      	cmp	r6, #3
   1f692:	d8ef      	bhi.n	1f674 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f694:	687a      	ldr	r2, [r7, #4]
   1f696:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f698:	b99e      	cbnz	r6, 1f6c2 <nrfx_gpiote_input_configure+0xa2>
   1f69a:	4b33      	ldr	r3, [pc, #204]	; (1f768 <nrfx_gpiote_input_configure+0x148>)
   1f69c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1f6a0:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f6a4:	4a2e      	ldr	r2, [pc, #184]	; (1f760 <nrfx_gpiote_input_configure+0x140>)
   1f6a6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f6aa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f6ae:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f6b2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f6b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f6ba:	bb3d      	cbnz	r5, 1f70c <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   1f6bc:	482b      	ldr	r0, [pc, #172]	; (1f76c <nrfx_gpiote_input_configure+0x14c>)
}
   1f6be:	b005      	add	sp, #20
   1f6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f6c2:	00ba      	lsls	r2, r7, #2
   1f6c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f6c8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f6cc:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f6d0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f6d4:	f020 0003 	bic.w	r0, r0, #3
   1f6d8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f6dc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f6e0:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1f6e4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f6e8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f6ec:	0220      	lsls	r0, r4, #8
   1f6ee:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f6f2:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1f6f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1f6fa:	ea40 000e 	orr.w	r0, r0, lr
   1f6fe:	f041 0120 	orr.w	r1, r1, #32
   1f702:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   1f706:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f70a:	e7cb      	b.n	1f6a4 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f70c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f710:	4620      	mov	r0, r4
   1f712:	f7ff fefd 	bl	1f510 <release_handler>
    if (!handler)
   1f716:	2e00      	cmp	r6, #0
   1f718:	d0d0      	beq.n	1f6bc <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f71a:	4d11      	ldr	r5, [pc, #68]	; (1f760 <nrfx_gpiote_input_configure+0x140>)
   1f71c:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f720:	4296      	cmp	r6, r2
   1f722:	d101      	bne.n	1f728 <nrfx_gpiote_input_configure+0x108>
   1f724:	429f      	cmp	r7, r3
   1f726:	d018      	beq.n	1f75a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f728:	4811      	ldr	r0, [pc, #68]	; (1f770 <nrfx_gpiote_input_configure+0x150>)
   1f72a:	f10d 010f 	add.w	r1, sp, #15
   1f72e:	f7ff fe71 	bl	1f414 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f732:	4b0e      	ldr	r3, [pc, #56]	; (1f76c <nrfx_gpiote_input_configure+0x14c>)
   1f734:	4298      	cmp	r0, r3
   1f736:	d1c2      	bne.n	1f6be <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   1f738:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f73c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f740:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f744:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f746:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f748:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f74c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f754:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1f758:	e7b0      	b.n	1f6bc <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f75a:	2200      	movs	r2, #0
   1f75c:	e7ee      	b.n	1f73c <nrfx_gpiote_input_configure+0x11c>
   1f75e:	bf00      	nop
   1f760:	20000708 	.word	0x20000708
   1f764:	0bad0004 	.word	0x0bad0004
   1f768:	40006000 	.word	0x40006000
   1f76c:	0bad0000 	.word	0x0bad0000
   1f770:	2000075c 	.word	0x2000075c

0001f774 <nrfx_gpiote_output_configure>:
{
   1f774:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f776:	4604      	mov	r4, r0
   1f778:	b085      	sub	sp, #20
   1f77a:	4615      	mov	r5, r2
    if (p_config)
   1f77c:	b321      	cbz	r1, 1f7c8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f77e:	f7ff fe9f 	bl	1f4c0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f782:	b920      	cbnz	r0, 1f78e <nrfx_gpiote_output_configure+0x1a>
   1f784:	4620      	mov	r0, r4
   1f786:	f7ff fe85 	bl	1f494 <pin_in_use_by_te>
   1f78a:	2800      	cmp	r0, #0
   1f78c:	d15e      	bne.n	1f84c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f78e:	4620      	mov	r0, r4
   1f790:	f7ff fe8a 	bl	1f4a8 <pin_has_trigger>
   1f794:	b110      	cbz	r0, 1f79c <nrfx_gpiote_output_configure+0x28>
   1f796:	784b      	ldrb	r3, [r1, #1]
   1f798:	2b01      	cmp	r3, #1
   1f79a:	d057      	beq.n	1f84c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f79c:	2301      	movs	r3, #1
   1f79e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f7a2:	2300      	movs	r3, #0
   1f7a4:	e9cd 1300 	strd	r1, r3, [sp]
   1f7a8:	1c4a      	adds	r2, r1, #1
   1f7aa:	1c8b      	adds	r3, r1, #2
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	f10d 010f 	add.w	r1, sp, #15
   1f7b2:	f007 f9c8 	bl	26b46 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f7b6:	4a26      	ldr	r2, [pc, #152]	; (1f850 <nrfx_gpiote_output_configure+0xdc>)
   1f7b8:	f104 0108 	add.w	r1, r4, #8
   1f7bc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f7c0:	f043 0303 	orr.w	r3, r3, #3
   1f7c4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f7c8:	b915      	cbnz	r5, 1f7d0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f7ca:	4822      	ldr	r0, [pc, #136]	; (1f854 <nrfx_gpiote_output_configure+0xe0>)
}
   1f7cc:	b005      	add	sp, #20
   1f7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f7d0:	4620      	mov	r0, r4
   1f7d2:	f7ff fe75 	bl	1f4c0 <pin_is_output>
        if (pin_is_input(pin))
   1f7d6:	b3c8      	cbz	r0, 1f84c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f7d8:	4e1d      	ldr	r6, [pc, #116]	; (1f850 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1f7da:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f7de:	f104 0708 	add.w	r7, r4, #8
   1f7e2:	4661      	mov	r1, ip
   1f7e4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f7e8:	0089      	lsls	r1, r1, #2
   1f7ea:	f020 0020 	bic.w	r0, r0, #32
   1f7ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f7f2:	04c0      	lsls	r0, r0, #19
   1f7f4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f7f8:	0cc0      	lsrs	r0, r0, #19
   1f7fa:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f7fe:	2300      	movs	r3, #0
   1f800:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f804:	786a      	ldrb	r2, [r5, #1]
   1f806:	2a00      	cmp	r2, #0
   1f808:	d0df      	beq.n	1f7ca <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f80a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1f80e:	78ad      	ldrb	r5, [r5, #2]
   1f810:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1f814:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f818:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f81c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f820:	0223      	lsls	r3, r4, #8
   1f822:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f826:	0412      	lsls	r2, r2, #16
   1f828:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f82c:	ea43 030e 	orr.w	r3, r3, lr
   1f830:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f832:	052a      	lsls	r2, r5, #20
   1f834:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f838:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f83c:	4313      	orrs	r3, r2
   1f83e:	f040 0020 	orr.w	r0, r0, #32
   1f842:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f846:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f84a:	e7be      	b.n	1f7ca <nrfx_gpiote_output_configure+0x56>
{
   1f84c:	4802      	ldr	r0, [pc, #8]	; (1f858 <nrfx_gpiote_output_configure+0xe4>)
   1f84e:	e7bd      	b.n	1f7cc <nrfx_gpiote_output_configure+0x58>
   1f850:	20000708 	.word	0x20000708
   1f854:	0bad0000 	.word	0x0bad0000
   1f858:	0bad0004 	.word	0x0bad0004

0001f85c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f85c:	4b01      	ldr	r3, [pc, #4]	; (1f864 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f85e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f862:	4770      	bx	lr
   1f864:	20000708 	.word	0x20000708

0001f868 <nrfx_gpiote_channel_get>:
{
   1f868:	b508      	push	{r3, lr}
   1f86a:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1f86c:	b959      	cbnz	r1, 1f886 <nrfx_gpiote_channel_get+0x1e>
   1f86e:	490c      	ldr	r1, [pc, #48]	; (1f8a0 <nrfx_gpiote_channel_get+0x38>)
   1f870:	480c      	ldr	r0, [pc, #48]	; (1f8a4 <nrfx_gpiote_channel_get+0x3c>)
   1f872:	4a0d      	ldr	r2, [pc, #52]	; (1f8a8 <nrfx_gpiote_channel_get+0x40>)
   1f874:	f240 2335 	movw	r3, #565	; 0x235
   1f878:	f004 ff38 	bl	246ec <assert_print>
   1f87c:	480a      	ldr	r0, [pc, #40]	; (1f8a8 <nrfx_gpiote_channel_get+0x40>)
   1f87e:	f240 2135 	movw	r1, #565	; 0x235
   1f882:	f004 ff2c 	bl	246de <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f886:	f7ff fe05 	bl	1f494 <pin_in_use_by_te>
   1f88a:	b138      	cbz	r0, 1f89c <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f88c:	4b07      	ldr	r3, [pc, #28]	; (1f8ac <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   1f88e:	4808      	ldr	r0, [pc, #32]	; (1f8b0 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f890:	3208      	adds	r2, #8
   1f892:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1f896:	0b5b      	lsrs	r3, r3, #13
   1f898:	700b      	strb	r3, [r1, #0]
}
   1f89a:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f89c:	4805      	ldr	r0, [pc, #20]	; (1f8b4 <nrfx_gpiote_channel_get+0x4c>)
   1f89e:	e7fc      	b.n	1f89a <nrfx_gpiote_channel_get+0x32>
   1f8a0:	0002b17c 	.word	0x0002b17c
   1f8a4:	00027f8a 	.word	0x00027f8a
   1f8a8:	0002b13e 	.word	0x0002b13e
   1f8ac:	20000708 	.word	0x20000708
   1f8b0:	0bad0000 	.word	0x0bad0000
   1f8b4:	0bad0004 	.word	0x0bad0004

0001f8b8 <nrfx_gpiote_init>:
{
   1f8b8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f8ba:	4c0f      	ldr	r4, [pc, #60]	; (1f8f8 <nrfx_gpiote_init+0x40>)
   1f8bc:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1f8c0:	b9bd      	cbnz	r5, 1f8f2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f8c2:	2240      	movs	r2, #64	; 0x40
   1f8c4:	4629      	mov	r1, r5
   1f8c6:	f104 0010 	add.w	r0, r4, #16
   1f8ca:	f005 fb27 	bl	24f1c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f8ce:	2006      	movs	r0, #6
   1f8d0:	f7f5 fad0 	bl	14e74 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f8d4:	4b09      	ldr	r3, [pc, #36]	; (1f8fc <nrfx_gpiote_init+0x44>)
    return err_code;
   1f8d6:	480a      	ldr	r0, [pc, #40]	; (1f900 <nrfx_gpiote_init+0x48>)
   1f8d8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f8dc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f8e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f8e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f8e8:	2301      	movs	r3, #1
   1f8ea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f8ee:	6563      	str	r3, [r4, #84]	; 0x54
}
   1f8f0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f8f2:	4804      	ldr	r0, [pc, #16]	; (1f904 <nrfx_gpiote_init+0x4c>)
   1f8f4:	e7fc      	b.n	1f8f0 <nrfx_gpiote_init+0x38>
   1f8f6:	bf00      	nop
   1f8f8:	20000708 	.word	0x20000708
   1f8fc:	40006000 	.word	0x40006000
   1f900:	0bad0000 	.word	0x0bad0000
   1f904:	0bad0005 	.word	0x0bad0005

0001f908 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f908:	4b03      	ldr	r3, [pc, #12]	; (1f918 <nrfx_gpiote_is_init+0x10>)
   1f90a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1f90e:	3800      	subs	r0, #0
   1f910:	bf18      	it	ne
   1f912:	2001      	movne	r0, #1
   1f914:	4770      	bx	lr
   1f916:	bf00      	nop
   1f918:	20000708 	.word	0x20000708

0001f91c <nrfx_gpiote_channel_free>:
{
   1f91c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f91e:	4801      	ldr	r0, [pc, #4]	; (1f924 <nrfx_gpiote_channel_free+0x8>)
   1f920:	f7ff bd98 	b.w	1f454 <nrfx_flag32_free>
   1f924:	20000758 	.word	0x20000758

0001f928 <nrfx_gpiote_channel_alloc>:
{
   1f928:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f92a:	4801      	ldr	r0, [pc, #4]	; (1f930 <nrfx_gpiote_channel_alloc+0x8>)
   1f92c:	f7ff bd72 	b.w	1f414 <nrfx_flag32_alloc>
   1f930:	20000758 	.word	0x20000758

0001f934 <nrfx_gpiote_trigger_enable>:
{
   1f934:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f936:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1f938:	f7ff fdb6 	bl	1f4a8 <pin_has_trigger>
   1f93c:	b958      	cbnz	r0, 1f956 <nrfx_gpiote_trigger_enable+0x22>
   1f93e:	492d      	ldr	r1, [pc, #180]	; (1f9f4 <nrfx_gpiote_trigger_enable+0xc0>)
   1f940:	4a2d      	ldr	r2, [pc, #180]	; (1f9f8 <nrfx_gpiote_trigger_enable+0xc4>)
   1f942:	482e      	ldr	r0, [pc, #184]	; (1f9fc <nrfx_gpiote_trigger_enable+0xc8>)
   1f944:	f240 33df 	movw	r3, #991	; 0x3df
   1f948:	f004 fed0 	bl	246ec <assert_print>
   1f94c:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1f950:	4829      	ldr	r0, [pc, #164]	; (1f9f8 <nrfx_gpiote_trigger_enable+0xc4>)
   1f952:	f004 fec4 	bl	246de <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f956:	4620      	mov	r0, r4
   1f958:	f7ff fd9c 	bl	1f494 <pin_in_use_by_te>
   1f95c:	4a28      	ldr	r2, [pc, #160]	; (1fa00 <nrfx_gpiote_trigger_enable+0xcc>)
   1f95e:	f104 0508 	add.w	r5, r4, #8
   1f962:	b1f8      	cbz	r0, 1f9a4 <nrfx_gpiote_trigger_enable+0x70>
    return !pin_is_output(pin);
   1f964:	4620      	mov	r0, r4
   1f966:	f7ff fdab 	bl	1f4c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f96a:	b9d8      	cbnz	r0, 1f9a4 <nrfx_gpiote_trigger_enable+0x70>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f96c:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   1f970:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f972:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   1f974:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1f978:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   1f97c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f980:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f984:	6020      	str	r0, [r4, #0]
   1f986:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f988:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1f98c:	f040 0001 	orr.w	r0, r0, #1
   1f990:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f994:	b121      	cbz	r1, 1f9a0 <nrfx_gpiote_trigger_enable+0x6c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f996:	2301      	movs	r3, #1
   1f998:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f99a:	4a1a      	ldr	r2, [pc, #104]	; (1fa04 <nrfx_gpiote_trigger_enable+0xd0>)
   1f99c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f9a0:	b003      	add	sp, #12
   1f9a2:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f9a4:	b949      	cbnz	r1, 1f9ba <nrfx_gpiote_trigger_enable+0x86>
   1f9a6:	4918      	ldr	r1, [pc, #96]	; (1fa08 <nrfx_gpiote_trigger_enable+0xd4>)
   1f9a8:	4a13      	ldr	r2, [pc, #76]	; (1f9f8 <nrfx_gpiote_trigger_enable+0xc4>)
   1f9aa:	4814      	ldr	r0, [pc, #80]	; (1f9fc <nrfx_gpiote_trigger_enable+0xc8>)
   1f9ac:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1f9b0:	f004 fe9c 	bl	246ec <assert_print>
   1f9b4:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f9b8:	e7ca      	b.n	1f950 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f9ba:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f9be:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f9c2:	2b04      	cmp	r3, #4
   1f9c4:	d012      	beq.n	1f9ec <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f9c6:	2b05      	cmp	r3, #5
   1f9c8:	d012      	beq.n	1f9f0 <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f9ca:	a801      	add	r0, sp, #4
   1f9cc:	9401      	str	r4, [sp, #4]
   1f9ce:	f7ff fdf9 	bl	1f5c4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f9d2:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f9d4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f9d8:	40d9      	lsrs	r1, r3
   1f9da:	f001 0101 	and.w	r1, r1, #1
   1f9de:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f9e0:	4620      	mov	r0, r4
}
   1f9e2:	b003      	add	sp, #12
   1f9e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f9e8:	f007 b8fa 	b.w	26be0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f9ec:	2103      	movs	r1, #3
   1f9ee:	e7f7      	b.n	1f9e0 <nrfx_gpiote_trigger_enable+0xac>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f9f0:	2102      	movs	r1, #2
   1f9f2:	e7f5      	b.n	1f9e0 <nrfx_gpiote_trigger_enable+0xac>
   1f9f4:	0002b186 	.word	0x0002b186
   1f9f8:	0002b13e 	.word	0x0002b13e
   1f9fc:	00027f8a 	.word	0x00027f8a
   1fa00:	20000708 	.word	0x20000708
   1fa04:	40006000 	.word	0x40006000
   1fa08:	0002b19b 	.word	0x0002b19b

0001fa0c <nrfx_gpiote_trigger_disable>:
{
   1fa0c:	b508      	push	{r3, lr}
   1fa0e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fa10:	f7ff fd40 	bl	1f494 <pin_in_use_by_te>
   1fa14:	b1c8      	cbz	r0, 1fa4a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1fa16:	4610      	mov	r0, r2
   1fa18:	f7ff fd52 	bl	1f4c0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fa1c:	b9a8      	cbnz	r0, 1fa4a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fa1e:	3208      	adds	r2, #8
   1fa20:	4b0d      	ldr	r3, [pc, #52]	; (1fa58 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1fa22:	490e      	ldr	r1, [pc, #56]	; (1fa5c <nrfx_gpiote_trigger_disable+0x50>)
   1fa24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1fa28:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fa2a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1fa2c:	409a      	lsls	r2, r3
   1fa2e:	009b      	lsls	r3, r3, #2
   1fa30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fa34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fa38:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fa3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fa40:	f022 0203 	bic.w	r2, r2, #3
   1fa44:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1fa48:	bd08      	pop	{r3, pc}
   1fa4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fa4e:	2100      	movs	r1, #0
   1fa50:	4610      	mov	r0, r2
   1fa52:	f007 b8c5 	b.w	26be0 <nrf_gpio_cfg_sense_set>
   1fa56:	bf00      	nop
   1fa58:	20000708 	.word	0x20000708
   1fa5c:	40006000 	.word	0x40006000

0001fa60 <nrfx_gpiote_pin_uninit>:
{
   1fa60:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fa62:	4b0e      	ldr	r3, [pc, #56]	; (1fa9c <nrfx_gpiote_pin_uninit+0x3c>)
   1fa64:	f100 0208 	add.w	r2, r0, #8
{
   1fa68:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fa6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1fa6e:	07db      	lsls	r3, r3, #31
   1fa70:	d511      	bpl.n	1fa96 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1fa72:	f7ff ffcb 	bl	1fa0c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1fa76:	4620      	mov	r0, r4
   1fa78:	f7ff fd88 	bl	1f58c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fa7c:	a801      	add	r0, sp, #4
   1fa7e:	9401      	str	r4, [sp, #4]
   1fa80:	f7ff fda0 	bl	1f5c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fa84:	9b01      	ldr	r3, [sp, #4]
   1fa86:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fa8a:	2202      	movs	r2, #2
   1fa8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1fa90:	4803      	ldr	r0, [pc, #12]	; (1faa0 <nrfx_gpiote_pin_uninit+0x40>)
}
   1fa92:	b002      	add	sp, #8
   1fa94:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fa96:	4803      	ldr	r0, [pc, #12]	; (1faa4 <nrfx_gpiote_pin_uninit+0x44>)
   1fa98:	e7fb      	b.n	1fa92 <nrfx_gpiote_pin_uninit+0x32>
   1fa9a:	bf00      	nop
   1fa9c:	20000708 	.word	0x20000708
   1faa0:	0bad0000 	.word	0x0bad0000
   1faa4:	0bad0004 	.word	0x0bad0004

0001faa8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1faa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1faac:	4b59      	ldr	r3, [pc, #356]	; (1fc14 <nrfx_gpiote_irq_handler+0x16c>)
    return p_reg->INTENSET & mask;
   1faae:	485a      	ldr	r0, [pc, #360]	; (1fc18 <nrfx_gpiote_irq_handler+0x170>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fab0:	495a      	ldr	r1, [pc, #360]	; (1fc1c <nrfx_gpiote_irq_handler+0x174>)
    uint32_t status = 0;
   1fab2:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1fab4:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fab6:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fab8:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1faba:	b135      	cbz	r5, 1faca <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1fabc:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1fac0:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fac2:	bf1e      	ittt	ne
   1fac4:	601c      	strne	r4, [r3, #0]
   1fac6:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1fac8:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1faca:	3304      	adds	r3, #4
   1facc:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1face:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fad2:	d1f1      	bne.n	1fab8 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fad4:	4f50      	ldr	r7, [pc, #320]	; (1fc18 <nrfx_gpiote_irq_handler+0x170>)
   1fad6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1fada:	b1bb      	cbz	r3, 1fb0c <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   1fadc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fae0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1fae4:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1fae6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1faea:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1faee:	9c00      	ldr	r4, [sp, #0]
   1faf0:	b994      	cbnz	r4, 1fb18 <nrfx_gpiote_irq_handler+0x70>
        *p_masks = gpio_regs[i]->LATCH;
   1faf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1faf6:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
   1fafa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1fafe:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1fb02:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1fb04:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   1fb08:	2b00      	cmp	r3, #0
   1fb0a:	d1ee      	bne.n	1faea <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   1fb0c:	2401      	movs	r4, #1
    while (mask)
   1fb0e:	2e00      	cmp	r6, #0
   1fb10:	d168      	bne.n	1fbe4 <nrfx_gpiote_irq_handler+0x13c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1fb12:	b003      	add	sp, #12
   1fb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1fb18:	fa94 f4a4 	rbit	r4, r4
   1fb1c:	fab4 f484 	clz	r4, r4
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1fb20:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb22:	4a3f      	ldr	r2, [pc, #252]	; (1fc20 <nrfx_gpiote_irq_handler+0x178>)
   1fb24:	9401      	str	r4, [sp, #4]
   1fb26:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1fb2a:	f004 0107 	and.w	r1, r4, #7
   1fb2e:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1fb32:	f81d 2000 	ldrb.w	r2, [sp, r0]
   1fb36:	fa08 f101 	lsl.w	r1, r8, r1
   1fb3a:	ea22 0201 	bic.w	r2, r2, r1
   1fb3e:	f80d 2000 	strb.w	r2, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb42:	a801      	add	r0, sp, #4
   1fb44:	f7ff fd3e 	bl	1f5c4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fb48:	9a01      	ldr	r2, [sp, #4]
   1fb4a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1fb4e:	ea4f 099a 	mov.w	r9, sl, lsr #2
   1fb52:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   1fb56:	f3ca 0b82 	ubfx	fp, sl, #2, #3
    if (is_level(trigger))
   1fb5a:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb5e:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1fb60:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   1fb64:	d023      	beq.n	1fbae <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1fb66:	4659      	mov	r1, fp
   1fb68:	4620      	mov	r0, r4
   1fb6a:	f7ff fcb3 	bl	1f4d4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb6e:	a801      	add	r0, sp, #4
   1fb70:	9401      	str	r4, [sp, #4]
   1fb72:	f7ff fd27 	bl	1f5c4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fb76:	9b01      	ldr	r3, [sp, #4]
   1fb78:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fb7c:	b2ed      	uxtb	r5, r5
   1fb7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1fb82:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1fb86:	429d      	cmp	r5, r3
   1fb88:	d107      	bne.n	1fb9a <nrfx_gpiote_irq_handler+0xf2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fb8a:	2100      	movs	r1, #0
   1fb8c:	4620      	mov	r0, r4
   1fb8e:	f007 f827 	bl	26be0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1fb92:	4629      	mov	r1, r5
   1fb94:	4620      	mov	r0, r4
   1fb96:	f007 f823 	bl	26be0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fb9a:	a801      	add	r0, sp, #4
   1fb9c:	9401      	str	r4, [sp, #4]
   1fb9e:	f7ff fd11 	bl	1f5c4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1fba2:	9b01      	ldr	r3, [sp, #4]
   1fba4:	fa08 f303 	lsl.w	r3, r8, r3
   1fba8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1fbac:	e79f      	b.n	1faee <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fbae:	2d02      	cmp	r5, #2
   1fbb0:	d10c      	bne.n	1fbcc <nrfx_gpiote_irq_handler+0x124>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fbb2:	2103      	movs	r1, #3
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	f007 f813 	bl	26be0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1fbba:	f00b 0305 	and.w	r3, fp, #5
   1fbbe:	2b01      	cmp	r3, #1
   1fbc0:	d1eb      	bne.n	1fb9a <nrfx_gpiote_irq_handler+0xf2>
            call_handler(pin, trigger);
   1fbc2:	4651      	mov	r1, sl
   1fbc4:	4620      	mov	r0, r4
   1fbc6:	f7ff fc85 	bl	1f4d4 <call_handler>
   1fbca:	e7e6      	b.n	1fb9a <nrfx_gpiote_irq_handler+0xf2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fbcc:	2102      	movs	r1, #2
   1fbce:	4620      	mov	r0, r4
   1fbd0:	f007 f806 	bl	26be0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1fbd4:	f1bb 0f03 	cmp.w	fp, #3
   1fbd8:	d0f3      	beq.n	1fbc2 <nrfx_gpiote_irq_handler+0x11a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1fbda:	2d03      	cmp	r5, #3
   1fbdc:	d1dd      	bne.n	1fb9a <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1fbde:	f1bb 0f02 	cmp.w	fp, #2
   1fbe2:	e7ed      	b.n	1fbc0 <nrfx_gpiote_irq_handler+0x118>
        uint32_t ch = NRF_CTZ(mask);
   1fbe4:	fa96 f3a6 	rbit	r3, r6
   1fbe8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1fbec:	fa04 f203 	lsl.w	r2, r4, r3
   1fbf0:	009b      	lsls	r3, r3, #2
   1fbf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fbf6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fbfa:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1fbfe:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1fc02:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1fc06:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1fc0a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1fc0e:	f7ff fc61 	bl	1f4d4 <call_handler>
   1fc12:	e77c      	b.n	1fb0e <nrfx_gpiote_irq_handler+0x66>
   1fc14:	40006100 	.word	0x40006100
   1fc18:	40006000 	.word	0x40006000
   1fc1c:	40006120 	.word	0x40006120
   1fc20:	20000708 	.word	0x20000708

0001fc24 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1fc24:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1fc26:	4801      	ldr	r0, [pc, #4]	; (1fc2c <nrfx_ppi_channel_alloc+0x8>)
   1fc28:	f7ff bbf4 	b.w	1f414 <nrfx_flag32_alloc>
   1fc2c:	20000764 	.word	0x20000764

0001fc30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1fc30:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fc32:	4c11      	ldr	r4, [pc, #68]	; (1fc78 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1fc34:	4a11      	ldr	r2, [pc, #68]	; (1fc7c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1fc36:	4912      	ldr	r1, [pc, #72]	; (1fc80 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fc38:	2303      	movs	r3, #3
   1fc3a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1fc3c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fc3e:	4b11      	ldr	r3, [pc, #68]	; (1fc84 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1fc40:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fc42:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1fc44:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1fc48:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1fc4a:	2300      	movs	r3, #0
   1fc4c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1fc4e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fc50:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1fc52:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1fc54:	4a0c      	ldr	r2, [pc, #48]	; (1fc88 <_DoInit+0x58>)
   1fc56:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1fc58:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1fc5a:	2210      	movs	r2, #16
   1fc5c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1fc5e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1fc60:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fc62:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1fc64:	f005 f925 	bl	24eb2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1fc68:	4908      	ldr	r1, [pc, #32]	; (1fc8c <_DoInit+0x5c>)
   1fc6a:	4620      	mov	r0, r4
   1fc6c:	f005 f921 	bl	24eb2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1fc70:	2320      	movs	r3, #32
   1fc72:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1fc74:	bd10      	pop	{r4, pc}
   1fc76:	bf00      	nop
   1fc78:	20003000 	.word	0x20003000
   1fc7c:	0002b1c6 	.word	0x0002b1c6
   1fc80:	0002b1cf 	.word	0x0002b1cf
   1fc84:	200032e4 	.word	0x200032e4
   1fc88:	200032d4 	.word	0x200032d4
   1fc8c:	0002b1d3 	.word	0x0002b1d3

0001fc90 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fc90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1fc94:	4f21      	ldr	r7, [pc, #132]	; (1fd1c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1fc96:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fc9a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1fc9c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fca0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1fca2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1fca4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1fca6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fca8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1fcaa:	d831      	bhi.n	1fd10 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1fcac:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1fcb0:	ebaa 0905 	sub.w	r9, sl, r5
   1fcb4:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1fcb8:	4294      	cmp	r4, r2
   1fcba:	d811      	bhi.n	1fce0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1fcbc:	2318      	movs	r3, #24
   1fcbe:	fb06 3303 	mla	r3, r6, r3, r3
   1fcc2:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1fcc4:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1fcc6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1fcc8:	4641      	mov	r1, r8
   1fcca:	4428      	add	r0, r5
   1fccc:	f005 f91b 	bl	24f06 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1fcd0:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1fcd2:	2318      	movs	r3, #24
   1fcd4:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1fcd8:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1fcda:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1fcdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1fce0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1fce2:	429c      	cmp	r4, r3
   1fce4:	d818      	bhi.n	1fd18 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1fce6:	fb00 bb0b 	mla	fp, r0, fp, fp
   1fcea:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1fcec:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1fcee:	f8db 0004 	ldr.w	r0, [fp, #4]
   1fcf2:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1fcf4:	4428      	add	r0, r5
   1fcf6:	f005 f906 	bl	24f06 <memcpy>
      if (NumBytes) {
   1fcfa:	ebb4 040a 	subs.w	r4, r4, sl
   1fcfe:	d0e8      	beq.n	1fcd2 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1fd00:	f8db 0004 	ldr.w	r0, [fp, #4]
   1fd04:	4622      	mov	r2, r4
   1fd06:	eb08 0109 	add.w	r1, r8, r9
   1fd0a:	f005 f8fc 	bl	24f06 <memcpy>
      return 1;
   1fd0e:	e7e0      	b.n	1fcd2 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1fd10:	3b01      	subs	r3, #1
   1fd12:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1fd14:	42a3      	cmp	r3, r4
   1fd16:	d2d1      	bcs.n	1fcbc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1fd18:	2000      	movs	r0, #0
   1fd1a:	e7df      	b.n	1fcdc <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1fd1c:	20003000 	.word	0x20003000

0001fd20 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1fd20:	4b03      	ldr	r3, [pc, #12]	; (1fd30 <SEGGER_RTT_HasDataUp+0x10>)
   1fd22:	2218      	movs	r2, #24
   1fd24:	fb02 3300 	mla	r3, r2, r0, r3
   1fd28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1fd2a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1fd2c:	1a80      	subs	r0, r0, r2
   1fd2e:	4770      	bx	lr
   1fd30:	20003000 	.word	0x20003000

0001fd34 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1fd34:	4803      	ldr	r0, [pc, #12]	; (1fd44 <zephyr_rtt_mutex_lock+0x10>)
   1fd36:	f04f 32ff 	mov.w	r2, #4294967295
   1fd3a:	f04f 33ff 	mov.w	r3, #4294967295
   1fd3e:	f000 bd19 	b.w	20774 <z_impl_k_mutex_lock>
   1fd42:	bf00      	nop
   1fd44:	20000928 	.word	0x20000928

0001fd48 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1fd48:	4801      	ldr	r0, [pc, #4]	; (1fd50 <zephyr_rtt_mutex_unlock+0x8>)
   1fd4a:	f000 bde3 	b.w	20914 <z_impl_k_mutex_unlock>
   1fd4e:	bf00      	nop
   1fd50:	20000928 	.word	0x20000928

0001fd54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1fd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fd58:	b086      	sub	sp, #24
   1fd5a:	4604      	mov	r4, r0
   1fd5c:	af00      	add	r7, sp, #0
   1fd5e:	460e      	mov	r6, r1
	__asm__ volatile(
   1fd60:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd64:	f3ef 8811 	mrs	r8, BASEPRI
   1fd68:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd6c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1fd70:	f002 fde8 	bl	22944 <z_impl_z_current_get>
   1fd74:	2c04      	cmp	r4, #4
   1fd76:	bf96      	itet	ls
   1fd78:	4b33      	ldrls	r3, [pc, #204]	; (1fe48 <z_fatal_error+0xf4>)
   1fd7a:	4b34      	ldrhi	r3, [pc, #208]	; (1fe4c <z_fatal_error+0xf8>)
   1fd7c:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1fd80:	46e9      	mov	r9, sp
   1fd82:	b08a      	sub	sp, #40	; 0x28
   1fd84:	4605      	mov	r5, r0
   1fd86:	466a      	mov	r2, sp
   1fd88:	4931      	ldr	r1, [pc, #196]	; (1fe50 <z_fatal_error+0xfc>)
   1fd8a:	61d3      	str	r3, [r2, #28]
   1fd8c:	f240 3301 	movw	r3, #769	; 0x301
   1fd90:	8493      	strh	r3, [r2, #36]	; 0x24
   1fd92:	f04f 0a00 	mov.w	sl, #0
   1fd96:	4b2f      	ldr	r3, [pc, #188]	; (1fe54 <z_fatal_error+0x100>)
   1fd98:	f8c2 a020 	str.w	sl, [r2, #32]
   1fd9c:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1fda0:	f842 3f10 	str.w	r3, [r2, #16]!
   1fda4:	482c      	ldr	r0, [pc, #176]	; (1fe58 <z_fatal_error+0x104>)
   1fda6:	4653      	mov	r3, sl
   1fda8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1fdac:	f7f4 f97c 	bl	140a8 <z_impl_z_log_msg_static_create>
   1fdb0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1fdb2:	b17e      	cbz	r6, 1fdd4 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1fdb4:	69f3      	ldr	r3, [r6, #28]
   1fdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1fdba:	b15b      	cbz	r3, 1fdd4 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1fdbc:	4b27      	ldr	r3, [pc, #156]	; (1fe5c <z_fatal_error+0x108>)
   1fdbe:	617b      	str	r3, [r7, #20]
   1fdc0:	2302      	movs	r3, #2
   1fdc2:	613b      	str	r3, [r7, #16]
   1fdc4:	4824      	ldr	r0, [pc, #144]	; (1fe58 <z_fatal_error+0x104>)
   1fdc6:	4653      	mov	r3, sl
   1fdc8:	f107 0210 	add.w	r2, r7, #16
   1fdcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1fdd0:	f7f4 f96a 	bl	140a8 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1fdd4:	b12d      	cbz	r5, 1fde2 <z_fatal_error+0x8e>
   1fdd6:	4628      	mov	r0, r5
   1fdd8:	f006 ff50 	bl	26c7c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1fddc:	b108      	cbz	r0, 1fde2 <z_fatal_error+0x8e>
   1fdde:	7803      	ldrb	r3, [r0, #0]
   1fde0:	b903      	cbnz	r3, 1fde4 <z_fatal_error+0x90>
		thread_name = "unknown";
   1fde2:	481f      	ldr	r0, [pc, #124]	; (1fe60 <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1fde4:	46e9      	mov	r9, sp
   1fde6:	b08a      	sub	sp, #40	; 0x28
   1fde8:	466a      	mov	r2, sp
   1fdea:	4b1e      	ldr	r3, [pc, #120]	; (1fe64 <z_fatal_error+0x110>)
   1fdec:	61d0      	str	r0, [r2, #28]
   1fdee:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1fdf2:	f240 3301 	movw	r3, #769	; 0x301
   1fdf6:	8413      	strh	r3, [r2, #32]
   1fdf8:	4b1b      	ldr	r3, [pc, #108]	; (1fe68 <z_fatal_error+0x114>)
   1fdfa:	f842 3f10 	str.w	r3, [r2, #16]!
   1fdfe:	4816      	ldr	r0, [pc, #88]	; (1fe58 <z_fatal_error+0x104>)
   1fe00:	2300      	movs	r3, #0
   1fe02:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1fe06:	f7f4 f94f 	bl	140a8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1fe0a:	4631      	mov	r1, r6
   1fe0c:	46cd      	mov	sp, r9
   1fe0e:	4620      	mov	r0, r4
   1fe10:	f7fe f80a 	bl	1de28 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1fe14:	2c04      	cmp	r4, #4
   1fe16:	d10c      	bne.n	1fe32 <z_fatal_error+0xde>
   1fe18:	4914      	ldr	r1, [pc, #80]	; (1fe6c <z_fatal_error+0x118>)
   1fe1a:	4a15      	ldr	r2, [pc, #84]	; (1fe70 <z_fatal_error+0x11c>)
   1fe1c:	4815      	ldr	r0, [pc, #84]	; (1fe74 <z_fatal_error+0x120>)
   1fe1e:	2393      	movs	r3, #147	; 0x93
   1fe20:	f004 fc64 	bl	246ec <assert_print>
   1fe24:	4814      	ldr	r0, [pc, #80]	; (1fe78 <z_fatal_error+0x124>)
   1fe26:	f004 fc61 	bl	246ec <assert_print>
   1fe2a:	4811      	ldr	r0, [pc, #68]	; (1fe70 <z_fatal_error+0x11c>)
   1fe2c:	2193      	movs	r1, #147	; 0x93
   1fe2e:	f004 fc56 	bl	246de <assert_post_action>
	__asm__ volatile(
   1fe32:	f388 8811 	msr	BASEPRI, r8
   1fe36:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fe3a:	4628      	mov	r0, r5
   1fe3c:	f7f5 fdd6 	bl	159ec <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1fe40:	3718      	adds	r7, #24
   1fe42:	46bd      	mov	sp, r7
   1fe44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fe48:	00027aa4 	.word	0x00027aa4
   1fe4c:	0002b1da 	.word	0x0002b1da
   1fe50:	0002b1e8 	.word	0x0002b1e8
   1fe54:	01000005 	.word	0x01000005
   1fe58:	00027400 	.word	0x00027400
   1fe5c:	0002b210 	.word	0x0002b210
   1fe60:	00029133 	.word	0x00029133
   1fe64:	0002b231 	.word	0x0002b231
   1fe68:	01000004 	.word	0x01000004
   1fe6c:	0002b26b 	.word	0x0002b26b
   1fe70:	0002b249 	.word	0x0002b249
   1fe74:	00027f8a 	.word	0x00027f8a
   1fe78:	0002b288 	.word	0x0002b288

0001fe7c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe7c:	4b10      	ldr	r3, [pc, #64]	; (1fec0 <z_sys_init_run_level+0x44>)
{
   1fe7e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fe80:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1fe84:	3001      	adds	r0, #1
   1fe86:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fe8a:	42a6      	cmp	r6, r4
   1fe8c:	d800      	bhi.n	1fe90 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1fe8e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   1fe90:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1fe94:	b18d      	cbz	r5, 1feba <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1fe96:	4628      	mov	r0, r5
   1fe98:	4798      	blx	r3
			if (rc != 0) {
   1fe9a:	b138      	cbz	r0, 1feac <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1fe9c:	2800      	cmp	r0, #0
   1fe9e:	bfb8      	it	lt
   1fea0:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1fea2:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1fea4:	28ff      	cmp	r0, #255	; 0xff
   1fea6:	bfa8      	it	ge
   1fea8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1feaa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1feac:	68ea      	ldr	r2, [r5, #12]
   1feae:	7853      	ldrb	r3, [r2, #1]
   1feb0:	f043 0301 	orr.w	r3, r3, #1
   1feb4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1feb6:	3408      	adds	r4, #8
   1feb8:	e7e7      	b.n	1fe8a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1feba:	4798      	blx	r3
   1febc:	e7fb      	b.n	1feb6 <z_sys_init_run_level+0x3a>
   1febe:	bf00      	nop
   1fec0:	00027ab8 	.word	0x00027ab8

0001fec4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1fec4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1fec6:	4b0a      	ldr	r3, [pc, #40]	; (1fef0 <bg_thread_main+0x2c>)
   1fec8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1feca:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1fecc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1fece:	f7ff ffd5 	bl	1fe7c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1fed2:	f003 fddb 	bl	23a8c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1fed6:	2004      	movs	r0, #4
   1fed8:	f7ff ffd0 	bl	1fe7c <z_sys_init_run_level>

	z_init_static_threads();
   1fedc:	f000 fb6e 	bl	205bc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1fee0:	f7f2 f94c 	bl	1217c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1fee4:	4a03      	ldr	r2, [pc, #12]	; (1fef4 <bg_thread_main+0x30>)
   1fee6:	7b13      	ldrb	r3, [r2, #12]
   1fee8:	f023 0301 	bic.w	r3, r3, #1
   1feec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1feee:	bd08      	pop	{r3, pc}
   1fef0:	200036e4 	.word	0x200036e4
   1fef4:	20002b28 	.word	0x20002b28

0001fef8 <z_bss_zero>:
{
   1fef8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1fefa:	4803      	ldr	r0, [pc, #12]	; (1ff08 <z_bss_zero+0x10>)
   1fefc:	4a03      	ldr	r2, [pc, #12]	; (1ff0c <z_bss_zero+0x14>)
   1fefe:	2100      	movs	r1, #0
   1ff00:	1a12      	subs	r2, r2, r0
   1ff02:	f006 fe8f 	bl	26c24 <z_early_memset>
}
   1ff06:	bd08      	pop	{r3, pc}
   1ff08:	20000ae0 	.word	0x20000ae0
   1ff0c:	200036e8 	.word	0x200036e8

0001ff10 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1ff10:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1ff12:	4e16      	ldr	r6, [pc, #88]	; (1ff6c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ff14:	4d16      	ldr	r5, [pc, #88]	; (1ff70 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1ff16:	4917      	ldr	r1, [pc, #92]	; (1ff74 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   1ff18:	23c8      	movs	r3, #200	; 0xc8
{
   1ff1a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1ff1c:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1ff20:	2201      	movs	r2, #1
   1ff22:	2300      	movs	r3, #0
   1ff24:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ff28:	220f      	movs	r2, #15
   1ff2a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ff2e:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ff30:	2318      	movs	r3, #24
   1ff32:	fb03 5500 	mla	r5, r3, r0, r5
{
   1ff36:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1ff38:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1ff3c:	fb00 1104 	mla	r1, r0, r4, r1
   1ff40:	4b0d      	ldr	r3, [pc, #52]	; (1ff78 <z_init_cpu+0x68>)
   1ff42:	9500      	str	r5, [sp, #0]
   1ff44:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1ff48:	4630      	mov	r0, r6
   1ff4a:	f000 fa99 	bl	20480 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ff4e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ff50:	4a0a      	ldr	r2, [pc, #40]	; (1ff7c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1ff52:	60ee      	str	r6, [r5, #12]
   1ff54:	f023 0304 	bic.w	r3, r3, #4
   1ff58:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1ff5a:	f44f 6308 	mov.w	r3, #2176	; 0x880
   1ff5e:	fb04 3303 	mla	r3, r4, r3, r3
   1ff62:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1ff64:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   1ff66:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1ff68:	b006      	add	sp, #24
   1ff6a:	bd70      	pop	{r4, r5, r6, pc}
   1ff6c:	20002a60 	.word	0x20002a60
   1ff70:	200030a8 	.word	0x200030a8
   1ff74:	20006500 	.word	0x20006500
   1ff78:	00020711 	.word	0x00020711
   1ff7c:	20005c80 	.word	0x20005c80

0001ff80 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1ff80:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1ff82:	2000      	movs	r0, #0
{
   1ff84:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1ff86:	f7ff ff79 	bl	1fe7c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ff8a:	4b2f      	ldr	r3, [pc, #188]	; (20048 <z_cstart+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ff8c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ff90:	4c2e      	ldr	r4, [pc, #184]	; (2004c <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1ff92:	4e2f      	ldr	r6, [pc, #188]	; (20050 <z_cstart+0xd0>)
   1ff94:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ff96:	4f2f      	ldr	r7, [pc, #188]	; (20054 <z_cstart+0xd4>)
   1ff98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ff9c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ff9e:	23e0      	movs	r3, #224	; 0xe0
   1ffa0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1ffa4:	2500      	movs	r5, #0
   1ffa6:	2320      	movs	r3, #32
   1ffa8:	77e3      	strb	r3, [r4, #31]
   1ffaa:	7625      	strb	r5, [r4, #24]
   1ffac:	7665      	strb	r5, [r4, #25]
   1ffae:	76a5      	strb	r5, [r4, #26]
   1ffb0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ffb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ffb6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ffba:	6263      	str	r3, [r4, #36]	; 0x24
   1ffbc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ffc0:	f7f5 fc88 	bl	158d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ffc4:	f7f4 fe86 	bl	14cd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ffc8:	f04f 33ff 	mov.w	r3, #4294967295
   1ffcc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ffce:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   1ffd0:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1ffd2:	f7f5 fe17 	bl	15c04 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1ffd6:	f7f5 fd1f 	bl	15a18 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1ffda:	f7f3 fe53 	bl	13c84 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ffde:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1ffe2:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ffe4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1ffe8:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1ffec:	f003 fd30 	bl	23a50 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1fff0:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1fff2:	f006 fe0b 	bl	26c0c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1fff6:	2001      	movs	r0, #1
   1fff8:	f7ff ff40 	bl	1fe7c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fffc:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1fffe:	4c16      	ldr	r4, [pc, #88]	; (20058 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   20000:	f7ff ff3c 	bl	1fe7c <z_sys_init_run_level>
	z_sched_init();
   20004:	f002 fb28 	bl	22658 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20008:	4b14      	ldr	r3, [pc, #80]	; (2005c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2000a:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2000c:	9305      	str	r3, [sp, #20]
   2000e:	2301      	movs	r3, #1
   20010:	4913      	ldr	r1, [pc, #76]	; (20060 <z_cstart+0xe0>)
   20012:	9500      	str	r5, [sp, #0]
   20014:	e9cd 5303 	strd	r5, r3, [sp, #12]
   20018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2001c:	463b      	mov	r3, r7
   2001e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   20022:	4620      	mov	r0, r4
   20024:	f000 fa2c 	bl	20480 <z_setup_new_thread>
   20028:	7b62      	ldrb	r2, [r4, #13]
   2002a:	4606      	mov	r6, r0
   2002c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   20030:	4620      	mov	r0, r4
   20032:	7362      	strb	r2, [r4, #13]
   20034:	f001 fcf6 	bl	21a24 <z_ready_thread>
	z_init_cpu(0);
   20038:	4628      	mov	r0, r5
   2003a:	f7ff ff69 	bl	1ff10 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2003e:	463a      	mov	r2, r7
   20040:	4631      	mov	r1, r6
   20042:	4620      	mov	r0, r4
   20044:	f7f5 f8b2 	bl	151ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20048:	20006500 	.word	0x20006500
   2004c:	e000ed00 	.word	0xe000ed00
   20050:	200030a8 	.word	0x200030a8
   20054:	0001fec5 	.word	0x0001fec5
   20058:	20002b28 	.word	0x20002b28
   2005c:	0002b307 	.word	0x0002b307
   20060:	20006680 	.word	0x20006680

00020064 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   20064:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20066:	4c0d      	ldr	r4, [pc, #52]	; (2009c <statics_init+0x38>)
   20068:	4d0d      	ldr	r5, [pc, #52]	; (200a0 <statics_init+0x3c>)
   2006a:	42ac      	cmp	r4, r5
   2006c:	d913      	bls.n	20096 <statics_init+0x32>
   2006e:	490d      	ldr	r1, [pc, #52]	; (200a4 <statics_init+0x40>)
   20070:	4a0d      	ldr	r2, [pc, #52]	; (200a8 <statics_init+0x44>)
   20072:	480e      	ldr	r0, [pc, #56]	; (200ac <statics_init+0x48>)
   20074:	2317      	movs	r3, #23
   20076:	f004 fb39 	bl	246ec <assert_print>
   2007a:	480d      	ldr	r0, [pc, #52]	; (200b0 <statics_init+0x4c>)
   2007c:	f004 fb36 	bl	246ec <assert_print>
   20080:	4809      	ldr	r0, [pc, #36]	; (200a8 <statics_init+0x44>)
   20082:	2117      	movs	r1, #23
   20084:	f004 fb2b 	bl	246de <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20088:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2008c:	4620      	mov	r0, r4
   2008e:	f006 fdcd 	bl	26c2c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20092:	3418      	adds	r4, #24
   20094:	e7e9      	b.n	2006a <statics_init+0x6>
   20096:	d3f7      	bcc.n	20088 <statics_init+0x24>
		}
	}
	return 0;
}
   20098:	2000      	movs	r0, #0
   2009a:	bd38      	pop	{r3, r4, r5, pc}
   2009c:	200008fc 	.word	0x200008fc
   200a0:	20000914 	.word	0x20000914
   200a4:	0002b331 	.word	0x0002b331
   200a8:	0002b30f 	.word	0x0002b30f
   200ac:	00027f8a 	.word	0x00027f8a
   200b0:	000284d6 	.word	0x000284d6

000200b4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   200b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200b8:	b085      	sub	sp, #20
   200ba:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   200be:	4680      	mov	r8, r0
   200c0:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   200c2:	4648      	mov	r0, r9
   200c4:	4659      	mov	r1, fp
{
   200c6:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   200c8:	f006 fed1 	bl	26e6e <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   200cc:	f1bb 3fff 	cmp.w	fp, #4294967295
   200d0:	bf08      	it	eq
   200d2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   200d6:	4606      	mov	r6, r0
   200d8:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   200da:	bf04      	itt	eq
   200dc:	f04f 36ff 	moveq.w	r6, #4294967295
   200e0:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   200e4:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   200e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ec:	f3ef 8511 	mrs	r5, BASEPRI
   200f0:	f383 8812 	msr	BASEPRI_MAX, r3
   200f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   200f8:	4620      	mov	r0, r4
   200fa:	f000 fae3 	bl	206c4 <z_spin_lock_valid>
   200fe:	b960      	cbnz	r0, 2011a <k_heap_aligned_alloc+0x66>
   20100:	4a33      	ldr	r2, [pc, #204]	; (201d0 <k_heap_aligned_alloc+0x11c>)
   20102:	4934      	ldr	r1, [pc, #208]	; (201d4 <k_heap_aligned_alloc+0x120>)
   20104:	4834      	ldr	r0, [pc, #208]	; (201d8 <k_heap_aligned_alloc+0x124>)
   20106:	2394      	movs	r3, #148	; 0x94
   20108:	f004 faf0 	bl	246ec <assert_print>
   2010c:	4621      	mov	r1, r4
   2010e:	4833      	ldr	r0, [pc, #204]	; (201dc <k_heap_aligned_alloc+0x128>)
   20110:	f004 faec 	bl	246ec <assert_print>
   20114:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20116:	482e      	ldr	r0, [pc, #184]	; (201d0 <k_heap_aligned_alloc+0x11c>)
   20118:	e031      	b.n	2017e <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   2011a:	4620      	mov	r0, r4
   2011c:	f000 faf0 	bl	20700 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20120:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20124:	b113      	cbz	r3, 2012c <k_heap_aligned_alloc+0x78>
   20126:	ea5b 0909 	orrs.w	r9, fp, r9
   2012a:	d11d      	bne.n	20168 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2012c:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20130:	9903      	ldr	r1, [sp, #12]
   20132:	4652      	mov	r2, sl
   20134:	4640      	mov	r0, r8
   20136:	f7f2 fe29 	bl	12d8c <sys_heap_aligned_alloc>
   2013a:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   2013c:	f002 ffa0 	bl	23080 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20140:	f1b9 0f00 	cmp.w	r9, #0
   20144:	d01d      	beq.n	20182 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20146:	4620      	mov	r0, r4
   20148:	f000 faca 	bl	206e0 <z_spin_unlock_valid>
   2014c:	2800      	cmp	r0, #0
   2014e:	d137      	bne.n	201c0 <k_heap_aligned_alloc+0x10c>
   20150:	4a1f      	ldr	r2, [pc, #124]	; (201d0 <k_heap_aligned_alloc+0x11c>)
   20152:	4923      	ldr	r1, [pc, #140]	; (201e0 <k_heap_aligned_alloc+0x12c>)
   20154:	4820      	ldr	r0, [pc, #128]	; (201d8 <k_heap_aligned_alloc+0x124>)
   20156:	23c2      	movs	r3, #194	; 0xc2
   20158:	f004 fac8 	bl	246ec <assert_print>
   2015c:	4621      	mov	r1, r4
   2015e:	4821      	ldr	r0, [pc, #132]	; (201e4 <k_heap_aligned_alloc+0x130>)
   20160:	f004 fac4 	bl	246ec <assert_print>
   20164:	21c2      	movs	r1, #194	; 0xc2
   20166:	e7d6      	b.n	20116 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20168:	491f      	ldr	r1, [pc, #124]	; (201e8 <k_heap_aligned_alloc+0x134>)
   2016a:	4a20      	ldr	r2, [pc, #128]	; (201ec <k_heap_aligned_alloc+0x138>)
   2016c:	481a      	ldr	r0, [pc, #104]	; (201d8 <k_heap_aligned_alloc+0x124>)
   2016e:	234b      	movs	r3, #75	; 0x4b
   20170:	f004 fabc 	bl	246ec <assert_print>
   20174:	481e      	ldr	r0, [pc, #120]	; (201f0 <k_heap_aligned_alloc+0x13c>)
   20176:	f004 fab9 	bl	246ec <assert_print>
   2017a:	481c      	ldr	r0, [pc, #112]	; (201ec <k_heap_aligned_alloc+0x138>)
   2017c:	214b      	movs	r1, #75	; 0x4b
   2017e:	f004 faae 	bl	246de <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   20182:	1a30      	subs	r0, r6, r0
   20184:	eb67 0101 	sbc.w	r1, r7, r1
   20188:	2801      	cmp	r0, #1
   2018a:	f171 0300 	sbcs.w	r3, r1, #0
   2018e:	dbda      	blt.n	20146 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20190:	e9cd 0100 	strd	r0, r1, [sp]
   20194:	465a      	mov	r2, fp
   20196:	4629      	mov	r1, r5
   20198:	4620      	mov	r0, r4
   2019a:	f001 ff8d 	bl	220b8 <z_pend_curr>
   2019e:	f04f 0340 	mov.w	r3, #64	; 0x40
   201a2:	f3ef 8511 	mrs	r5, BASEPRI
   201a6:	f383 8812 	msr	BASEPRI_MAX, r3
   201aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201ae:	4620      	mov	r0, r4
   201b0:	f000 fa88 	bl	206c4 <z_spin_lock_valid>
   201b4:	2800      	cmp	r0, #0
   201b6:	d0a3      	beq.n	20100 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   201b8:	4620      	mov	r0, r4
   201ba:	f000 faa1 	bl	20700 <z_spin_lock_set_owner>
	return k;
   201be:	e7b7      	b.n	20130 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   201c0:	f385 8811 	msr	BASEPRI, r5
   201c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   201c8:	4648      	mov	r0, r9
   201ca:	b005      	add	sp, #20
   201cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201d0:	0002837e 	.word	0x0002837e
   201d4:	000283d7 	.word	0x000283d7
   201d8:	00027f8a 	.word	0x00027f8a
   201dc:	000283ec 	.word	0x000283ec
   201e0:	000283ab 	.word	0x000283ab
   201e4:	000283c2 	.word	0x000283c2
   201e8:	0002b347 	.word	0x0002b347
   201ec:	0002b30f 	.word	0x0002b30f
   201f0:	0002a56f 	.word	0x0002a56f

000201f4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   201f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201f6:	4605      	mov	r5, r0
   201f8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   201fa:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   201fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   20202:	f3ef 8711 	mrs	r7, BASEPRI
   20206:	f383 8812 	msr	BASEPRI_MAX, r3
   2020a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2020e:	4620      	mov	r0, r4
   20210:	f000 fa58 	bl	206c4 <z_spin_lock_valid>
   20214:	b968      	cbnz	r0, 20232 <k_heap_free+0x3e>
   20216:	4a1a      	ldr	r2, [pc, #104]	; (20280 <k_heap_free+0x8c>)
   20218:	491a      	ldr	r1, [pc, #104]	; (20284 <k_heap_free+0x90>)
   2021a:	481b      	ldr	r0, [pc, #108]	; (20288 <k_heap_free+0x94>)
   2021c:	2394      	movs	r3, #148	; 0x94
   2021e:	f004 fa65 	bl	246ec <assert_print>
   20222:	4621      	mov	r1, r4
   20224:	4819      	ldr	r0, [pc, #100]	; (2028c <k_heap_free+0x98>)
   20226:	f004 fa61 	bl	246ec <assert_print>
   2022a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2022c:	4814      	ldr	r0, [pc, #80]	; (20280 <k_heap_free+0x8c>)
   2022e:	f004 fa56 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   20232:	4620      	mov	r0, r4
   20234:	f000 fa64 	bl	20700 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   20238:	4628      	mov	r0, r5
   2023a:	4631      	mov	r1, r6
   2023c:	f7f2 fd60 	bl	12d00 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20240:	f105 000c 	add.w	r0, r5, #12
   20244:	f006 fdf9 	bl	26e3a <z_unpend_all>
   20248:	b128      	cbz	r0, 20256 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   2024a:	4639      	mov	r1, r7
   2024c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2024e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20252:	f001 bc75 	b.w	21b40 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20256:	4620      	mov	r0, r4
   20258:	f000 fa42 	bl	206e0 <z_spin_unlock_valid>
   2025c:	b958      	cbnz	r0, 20276 <k_heap_free+0x82>
   2025e:	4a08      	ldr	r2, [pc, #32]	; (20280 <k_heap_free+0x8c>)
   20260:	490b      	ldr	r1, [pc, #44]	; (20290 <k_heap_free+0x9c>)
   20262:	4809      	ldr	r0, [pc, #36]	; (20288 <k_heap_free+0x94>)
   20264:	23c2      	movs	r3, #194	; 0xc2
   20266:	f004 fa41 	bl	246ec <assert_print>
   2026a:	4621      	mov	r1, r4
   2026c:	4809      	ldr	r0, [pc, #36]	; (20294 <k_heap_free+0xa0>)
   2026e:	f004 fa3d 	bl	246ec <assert_print>
   20272:	21c2      	movs	r1, #194	; 0xc2
   20274:	e7da      	b.n	2022c <k_heap_free+0x38>
	__asm__ volatile(
   20276:	f387 8811 	msr	BASEPRI, r7
   2027a:	f3bf 8f6f 	isb	sy
}
   2027e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20280:	0002837e 	.word	0x0002837e
   20284:	000283d7 	.word	0x000283d7
   20288:	00027f8a 	.word	0x00027f8a
   2028c:	000283ec 	.word	0x000283ec
   20290:	000283ab 	.word	0x000283ab
   20294:	000283c2 	.word	0x000283c2

00020298 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   20298:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2029a:	4c0d      	ldr	r4, [pc, #52]	; (202d0 <init_mem_slab_module+0x38>)
   2029c:	4d0d      	ldr	r5, [pc, #52]	; (202d4 <init_mem_slab_module+0x3c>)
	int rc = 0;
   2029e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   202a0:	42ac      	cmp	r4, r5
   202a2:	d913      	bls.n	202cc <init_mem_slab_module+0x34>
   202a4:	490c      	ldr	r1, [pc, #48]	; (202d8 <init_mem_slab_module+0x40>)
   202a6:	4a0d      	ldr	r2, [pc, #52]	; (202dc <init_mem_slab_module+0x44>)
   202a8:	480d      	ldr	r0, [pc, #52]	; (202e0 <init_mem_slab_module+0x48>)
   202aa:	233c      	movs	r3, #60	; 0x3c
   202ac:	f004 fa1e 	bl	246ec <assert_print>
   202b0:	480c      	ldr	r0, [pc, #48]	; (202e4 <init_mem_slab_module+0x4c>)
   202b2:	f004 fa1b 	bl	246ec <assert_print>
   202b6:	4809      	ldr	r0, [pc, #36]	; (202dc <init_mem_slab_module+0x44>)
   202b8:	213c      	movs	r1, #60	; 0x3c
   202ba:	f004 fa10 	bl	246de <assert_post_action>
		rc = create_free_list(slab);
   202be:	4620      	mov	r0, r4
   202c0:	f006 fcbd 	bl	26c3e <create_free_list>
		if (rc < 0) {
   202c4:	2800      	cmp	r0, #0
   202c6:	db02      	blt.n	202ce <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   202c8:	3420      	adds	r4, #32
   202ca:	e7e9      	b.n	202a0 <init_mem_slab_module+0x8>
   202cc:	d3f7      	bcc.n	202be <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   202ce:	bd38      	pop	{r3, r4, r5, pc}
   202d0:	2000089c 	.word	0x2000089c
   202d4:	200008fc 	.word	0x200008fc
   202d8:	0002b3b2 	.word	0x0002b3b2
   202dc:	0002b38d 	.word	0x0002b38d
   202e0:	00027f8a 	.word	0x00027f8a
   202e4:	000284d6 	.word	0x000284d6

000202e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   202e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   202ec:	4604      	mov	r4, r0
   202ee:	460e      	mov	r6, r1
   202f0:	4690      	mov	r8, r2
   202f2:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   202f4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   202f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   202fc:	f3ef 8911 	mrs	r9, BASEPRI
   20300:	f383 8812 	msr	BASEPRI_MAX, r3
   20304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20308:	4628      	mov	r0, r5
   2030a:	f000 f9db 	bl	206c4 <z_spin_lock_valid>
   2030e:	b968      	cbnz	r0, 2032c <k_mem_slab_alloc+0x44>
   20310:	4a23      	ldr	r2, [pc, #140]	; (203a0 <k_mem_slab_alloc+0xb8>)
   20312:	4924      	ldr	r1, [pc, #144]	; (203a4 <k_mem_slab_alloc+0xbc>)
   20314:	4824      	ldr	r0, [pc, #144]	; (203a8 <k_mem_slab_alloc+0xc0>)
   20316:	2394      	movs	r3, #148	; 0x94
   20318:	f004 f9e8 	bl	246ec <assert_print>
   2031c:	4629      	mov	r1, r5
   2031e:	4823      	ldr	r0, [pc, #140]	; (203ac <k_mem_slab_alloc+0xc4>)
   20320:	f004 f9e4 	bl	246ec <assert_print>
   20324:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20326:	481e      	ldr	r0, [pc, #120]	; (203a0 <k_mem_slab_alloc+0xb8>)
   20328:	f004 f9d9 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   2032c:	4628      	mov	r0, r5
   2032e:	f000 f9e7 	bl	20700 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20332:	69a3      	ldr	r3, [r4, #24]
   20334:	b1b3      	cbz	r3, 20364 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   20336:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   20338:	681b      	ldr	r3, [r3, #0]
   2033a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   2033c:	69e3      	ldr	r3, [r4, #28]
   2033e:	3301      	adds	r3, #1
   20340:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20342:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20344:	4628      	mov	r0, r5
   20346:	f000 f9cb 	bl	206e0 <z_spin_unlock_valid>
   2034a:	bb18      	cbnz	r0, 20394 <k_mem_slab_alloc+0xac>
   2034c:	4a14      	ldr	r2, [pc, #80]	; (203a0 <k_mem_slab_alloc+0xb8>)
   2034e:	4918      	ldr	r1, [pc, #96]	; (203b0 <k_mem_slab_alloc+0xc8>)
   20350:	4815      	ldr	r0, [pc, #84]	; (203a8 <k_mem_slab_alloc+0xc0>)
   20352:	23c2      	movs	r3, #194	; 0xc2
   20354:	f004 f9ca 	bl	246ec <assert_print>
   20358:	4629      	mov	r1, r5
   2035a:	4816      	ldr	r0, [pc, #88]	; (203b4 <k_mem_slab_alloc+0xcc>)
   2035c:	f004 f9c6 	bl	246ec <assert_print>
   20360:	21c2      	movs	r1, #194	; 0xc2
   20362:	e7e0      	b.n	20326 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20364:	ea58 0207 	orrs.w	r2, r8, r7
   20368:	d103      	bne.n	20372 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   2036a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   2036c:	f06f 040b 	mvn.w	r4, #11
   20370:	e7e8      	b.n	20344 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20372:	4622      	mov	r2, r4
   20374:	e9cd 8700 	strd	r8, r7, [sp]
   20378:	4649      	mov	r1, r9
   2037a:	4628      	mov	r0, r5
   2037c:	f001 fe9c 	bl	220b8 <z_pend_curr>
		if (result == 0) {
   20380:	4604      	mov	r4, r0
   20382:	b918      	cbnz	r0, 2038c <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   20384:	4b0c      	ldr	r3, [pc, #48]	; (203b8 <k_mem_slab_alloc+0xd0>)
   20386:	689b      	ldr	r3, [r3, #8]
   20388:	695b      	ldr	r3, [r3, #20]
   2038a:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   2038c:	4620      	mov	r0, r4
   2038e:	b003      	add	sp, #12
   20390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   20394:	f389 8811 	msr	BASEPRI, r9
   20398:	f3bf 8f6f 	isb	sy
	return result;
   2039c:	e7f6      	b.n	2038c <k_mem_slab_alloc+0xa4>
   2039e:	bf00      	nop
   203a0:	0002837e 	.word	0x0002837e
   203a4:	000283d7 	.word	0x000283d7
   203a8:	00027f8a 	.word	0x00027f8a
   203ac:	000283ec 	.word	0x000283ec
   203b0:	000283ab 	.word	0x000283ab
   203b4:	000283c2 	.word	0x000283c2
   203b8:	200030a8 	.word	0x200030a8

000203bc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   203bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203c0:	4604      	mov	r4, r0
   203c2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   203c4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   203c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   203cc:	f3ef 8711 	mrs	r7, BASEPRI
   203d0:	f383 8812 	msr	BASEPRI_MAX, r3
   203d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   203d8:	4628      	mov	r0, r5
   203da:	f000 f973 	bl	206c4 <z_spin_lock_valid>
   203de:	b968      	cbnz	r0, 203fc <k_mem_slab_free+0x40>
   203e0:	4a21      	ldr	r2, [pc, #132]	; (20468 <k_mem_slab_free+0xac>)
   203e2:	4922      	ldr	r1, [pc, #136]	; (2046c <k_mem_slab_free+0xb0>)
   203e4:	4822      	ldr	r0, [pc, #136]	; (20470 <k_mem_slab_free+0xb4>)
   203e6:	2394      	movs	r3, #148	; 0x94
   203e8:	f004 f980 	bl	246ec <assert_print>
   203ec:	4629      	mov	r1, r5
   203ee:	4821      	ldr	r0, [pc, #132]	; (20474 <k_mem_slab_free+0xb8>)
   203f0:	f004 f97c 	bl	246ec <assert_print>
   203f4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   203f6:	481c      	ldr	r0, [pc, #112]	; (20468 <k_mem_slab_free+0xac>)
   203f8:	f004 f971 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   203fc:	4628      	mov	r0, r5
   203fe:	f000 f97f 	bl	20700 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20402:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20406:	f1b8 0f00 	cmp.w	r8, #0
   2040a:	d10f      	bne.n	2042c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2040c:	4620      	mov	r0, r4
   2040e:	f002 f8d3 	bl	225b8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20412:	b158      	cbz	r0, 2042c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20414:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20416:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20418:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2041c:	f001 fb02 	bl	21a24 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20420:	4639      	mov	r1, r7
   20422:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20428:	f001 bb8a 	b.w	21b40 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2042c:	6833      	ldr	r3, [r6, #0]
   2042e:	69a2      	ldr	r2, [r4, #24]
   20430:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20432:	6833      	ldr	r3, [r6, #0]
   20434:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   20436:	69e3      	ldr	r3, [r4, #28]
   20438:	3b01      	subs	r3, #1
   2043a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2043c:	4628      	mov	r0, r5
   2043e:	f000 f94f 	bl	206e0 <z_spin_unlock_valid>
   20442:	b958      	cbnz	r0, 2045c <k_mem_slab_free+0xa0>
   20444:	4a08      	ldr	r2, [pc, #32]	; (20468 <k_mem_slab_free+0xac>)
   20446:	490c      	ldr	r1, [pc, #48]	; (20478 <k_mem_slab_free+0xbc>)
   20448:	4809      	ldr	r0, [pc, #36]	; (20470 <k_mem_slab_free+0xb4>)
   2044a:	23c2      	movs	r3, #194	; 0xc2
   2044c:	f004 f94e 	bl	246ec <assert_print>
   20450:	4629      	mov	r1, r5
   20452:	480a      	ldr	r0, [pc, #40]	; (2047c <k_mem_slab_free+0xc0>)
   20454:	f004 f94a 	bl	246ec <assert_print>
   20458:	21c2      	movs	r1, #194	; 0xc2
   2045a:	e7cc      	b.n	203f6 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   2045c:	f387 8811 	msr	BASEPRI, r7
   20460:	f3bf 8f6f 	isb	sy
}
   20464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20468:	0002837e 	.word	0x0002837e
   2046c:	000283d7 	.word	0x000283d7
   20470:	00027f8a 	.word	0x00027f8a
   20474:	000283ec 	.word	0x000283ec
   20478:	000283ab 	.word	0x000283ab
   2047c:	000283c2 	.word	0x000283c2

00020480 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20480:	b5f0      	push	{r4, r5, r6, r7, lr}
   20482:	b085      	sub	sp, #20
   20484:	4604      	mov	r4, r0
   20486:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   20488:	2d0f      	cmp	r5, #15
   2048a:	d12e      	bne.n	204ea <z_setup_new_thread+0x6a>
   2048c:	4822      	ldr	r0, [pc, #136]	; (20518 <z_setup_new_thread+0x98>)
   2048e:	4283      	cmp	r3, r0
   20490:	d12f      	bne.n	204f2 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20492:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20496:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   20498:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   2049c:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   2049e:	980e      	ldr	r0, [sp, #56]	; 0x38
   204a0:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   204a2:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   204a6:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   204aa:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   204ae:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   204b2:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
   204b4:	2004      	movs	r0, #4
   204b6:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   204b8:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
   204bc:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   204be:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   204c0:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204c4:	9202      	str	r2, [sp, #8]
   204c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   204c8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   204ca:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   204cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   204ce:	9200      	str	r2, [sp, #0]
   204d0:	4620      	mov	r0, r4
   204d2:	463a      	mov	r2, r7
   204d4:	f7f4 fde6 	bl	150a4 <arch_new_thread>
	if (!_current) {
   204d8:	4b10      	ldr	r3, [pc, #64]	; (2051c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   204da:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   204dc:	689b      	ldr	r3, [r3, #8]
   204de:	b103      	cbz	r3, 204e2 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   204e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   204e2:	6763      	str	r3, [r4, #116]	; 0x74
}
   204e4:	4638      	mov	r0, r7
   204e6:	b005      	add	sp, #20
   204e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   204ea:	f105 0010 	add.w	r0, r5, #16
   204ee:	281e      	cmp	r0, #30
   204f0:	d9cf      	bls.n	20492 <z_setup_new_thread+0x12>
   204f2:	4a0b      	ldr	r2, [pc, #44]	; (20520 <z_setup_new_thread+0xa0>)
   204f4:	490b      	ldr	r1, [pc, #44]	; (20524 <z_setup_new_thread+0xa4>)
   204f6:	480c      	ldr	r0, [pc, #48]	; (20528 <z_setup_new_thread+0xa8>)
   204f8:	f44f 7306 	mov.w	r3, #536	; 0x218
   204fc:	f004 f8f6 	bl	246ec <assert_print>
   20500:	480a      	ldr	r0, [pc, #40]	; (2052c <z_setup_new_thread+0xac>)
   20502:	4629      	mov	r1, r5
   20504:	f06f 030f 	mvn.w	r3, #15
   20508:	220e      	movs	r2, #14
   2050a:	f004 f8ef 	bl	246ec <assert_print>
   2050e:	4804      	ldr	r0, [pc, #16]	; (20520 <z_setup_new_thread+0xa0>)
   20510:	f44f 7106 	mov.w	r1, #536	; 0x218
   20514:	f004 f8e3 	bl	246de <assert_post_action>
   20518:	00020711 	.word	0x00020711
   2051c:	200030a8 	.word	0x200030a8
   20520:	0002b3cf 	.word	0x0002b3cf
   20524:	0002b3f2 	.word	0x0002b3f2
   20528:	00027f8a 	.word	0x00027f8a
   2052c:	0002b472 	.word	0x0002b472

00020530 <z_impl_k_thread_create>:
{
   20530:	b5f0      	push	{r4, r5, r6, r7, lr}
   20532:	b087      	sub	sp, #28
   20534:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   20538:	4604      	mov	r4, r0
   2053a:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2053e:	b175      	cbz	r5, 2055e <z_impl_k_thread_create+0x2e>
   20540:	4919      	ldr	r1, [pc, #100]	; (205a8 <z_impl_k_thread_create+0x78>)
   20542:	4a1a      	ldr	r2, [pc, #104]	; (205ac <z_impl_k_thread_create+0x7c>)
   20544:	481a      	ldr	r0, [pc, #104]	; (205b0 <z_impl_k_thread_create+0x80>)
   20546:	f240 238a 	movw	r3, #650	; 0x28a
   2054a:	f004 f8cf 	bl	246ec <assert_print>
   2054e:	4819      	ldr	r0, [pc, #100]	; (205b4 <z_impl_k_thread_create+0x84>)
   20550:	f004 f8cc 	bl	246ec <assert_print>
   20554:	4815      	ldr	r0, [pc, #84]	; (205ac <z_impl_k_thread_create+0x7c>)
   20556:	f240 218a 	movw	r1, #650	; 0x28a
   2055a:	f004 f8c0 	bl	246de <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2055e:	9505      	str	r5, [sp, #20]
   20560:	9d10      	ldr	r5, [sp, #64]	; 0x40
   20562:	9504      	str	r5, [sp, #16]
   20564:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   20566:	9503      	str	r5, [sp, #12]
   20568:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2056a:	9502      	str	r5, [sp, #8]
   2056c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2056e:	9501      	str	r5, [sp, #4]
   20570:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20572:	9500      	str	r5, [sp, #0]
   20574:	f7ff ff84 	bl	20480 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20578:	f1b6 3fff 	cmp.w	r6, #4294967295
   2057c:	bf08      	it	eq
   2057e:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   20582:	d005      	beq.n	20590 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20584:	ea56 0307 	orrs.w	r3, r6, r7
   20588:	d105      	bne.n	20596 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   2058a:	4620      	mov	r0, r4
   2058c:	f001 fb1a 	bl	21bc4 <z_sched_start>
}
   20590:	4620      	mov	r0, r4
   20592:	b007      	add	sp, #28
   20594:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20596:	4908      	ldr	r1, [pc, #32]	; (205b8 <z_impl_k_thread_create+0x88>)
   20598:	463a      	mov	r2, r7
   2059a:	4633      	mov	r3, r6
   2059c:	f104 0018 	add.w	r0, r4, #24
   205a0:	f002 fb6e 	bl	22c80 <z_add_timeout>
   205a4:	e7f4      	b.n	20590 <z_impl_k_thread_create+0x60>
   205a6:	bf00      	nop
   205a8:	0002b4a3 	.word	0x0002b4a3
   205ac:	0002b3cf 	.word	0x0002b3cf
   205b0:	00027f8a 	.word	0x00027f8a
   205b4:	0002b4b5 	.word	0x0002b4b5
   205b8:	00026e33 	.word	0x00026e33

000205bc <z_init_static_threads>:
{
   205bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205c0:	4c39      	ldr	r4, [pc, #228]	; (206a8 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   205c2:	4d3a      	ldr	r5, [pc, #232]	; (206ac <z_init_static_threads+0xf0>)
{
   205c4:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   205c6:	42ac      	cmp	r4, r5
   205c8:	4626      	mov	r6, r4
   205ca:	d92a      	bls.n	20622 <z_init_static_threads+0x66>
   205cc:	4938      	ldr	r1, [pc, #224]	; (206b0 <z_init_static_threads+0xf4>)
   205ce:	4a39      	ldr	r2, [pc, #228]	; (206b4 <z_init_static_threads+0xf8>)
   205d0:	4839      	ldr	r0, [pc, #228]	; (206b8 <z_init_static_threads+0xfc>)
   205d2:	f240 23f1 	movw	r3, #753	; 0x2f1
   205d6:	f004 f889 	bl	246ec <assert_print>
   205da:	4838      	ldr	r0, [pc, #224]	; (206bc <z_init_static_threads+0x100>)
   205dc:	f004 f886 	bl	246ec <assert_print>
   205e0:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
   205e4:	4833      	ldr	r0, [pc, #204]	; (206b4 <z_init_static_threads+0xf8>)
   205e6:	f004 f87a 	bl	246de <assert_post_action>
		z_setup_new_thread(
   205ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   205ee:	9305      	str	r3, [sp, #20]
   205f0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   205f4:	9304      	str	r3, [sp, #16]
   205f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   205fa:	9303      	str	r3, [sp, #12]
   205fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20600:	9302      	str	r3, [sp, #8]
   20602:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20606:	9301      	str	r3, [sp, #4]
   20608:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2060c:	9300      	str	r3, [sp, #0]
   2060e:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   20612:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   20616:	f7ff ff33 	bl	20480 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2061a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2061e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20620:	e7d1      	b.n	205c6 <z_init_static_threads+0xa>
   20622:	42ae      	cmp	r6, r5
   20624:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   20628:	d3df      	bcc.n	205ea <z_init_static_threads+0x2e>
	k_sched_lock();
   2062a:	f001 fb1d 	bl	21c68 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2062e:	4c1e      	ldr	r4, [pc, #120]	; (206a8 <z_init_static_threads+0xec>)
   20630:	f8df 908c 	ldr.w	r9, [pc, #140]	; 206c0 <z_init_static_threads+0x104>
   20634:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20638:	f240 37e7 	movw	r7, #999	; 0x3e7
   2063c:	42ac      	cmp	r4, r5
   2063e:	d92c      	bls.n	2069a <z_init_static_threads+0xde>
   20640:	491b      	ldr	r1, [pc, #108]	; (206b0 <z_init_static_threads+0xf4>)
   20642:	4a1c      	ldr	r2, [pc, #112]	; (206b4 <z_init_static_threads+0xf8>)
   20644:	481c      	ldr	r0, [pc, #112]	; (206b8 <z_init_static_threads+0xfc>)
   20646:	f44f 7344 	mov.w	r3, #784	; 0x310
   2064a:	f004 f84f 	bl	246ec <assert_print>
   2064e:	481b      	ldr	r0, [pc, #108]	; (206bc <z_init_static_threads+0x100>)
   20650:	f004 f84c 	bl	246ec <assert_print>
   20654:	f44f 7144 	mov.w	r1, #784	; 0x310
   20658:	e7c4      	b.n	205e4 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2065a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2065c:	1c5a      	adds	r2, r3, #1
   2065e:	d00d      	beq.n	2067c <z_init_static_threads+0xc0>
					    K_MSEC(thread_data->init_delay));
   20660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20664:	2100      	movs	r1, #0
   20666:	4638      	mov	r0, r7
   20668:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2066c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20670:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20674:	d104      	bne.n	20680 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   20676:	4640      	mov	r0, r8
   20678:	f001 faa4 	bl	21bc4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2067c:	342c      	adds	r4, #44	; 0x2c
   2067e:	e7dd      	b.n	2063c <z_init_static_threads+0x80>
   20680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20684:	2300      	movs	r3, #0
   20686:	f7e0 f8f9 	bl	87c <__aeabi_uldivmod>
   2068a:	4602      	mov	r2, r0
   2068c:	460b      	mov	r3, r1
   2068e:	f108 0018 	add.w	r0, r8, #24
   20692:	4649      	mov	r1, r9
   20694:	f002 faf4 	bl	22c80 <z_add_timeout>
   20698:	e7f0      	b.n	2067c <z_init_static_threads+0xc0>
   2069a:	d3de      	bcc.n	2065a <z_init_static_threads+0x9e>
}
   2069c:	b007      	add	sp, #28
   2069e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   206a2:	f001 bb4d 	b.w	21d40 <k_sched_unlock>
   206a6:	bf00      	nop
   206a8:	000272b0 	.word	0x000272b0
   206ac:	000272b0 	.word	0x000272b0
   206b0:	0002b4da 	.word	0x0002b4da
   206b4:	0002b3cf 	.word	0x0002b3cf
   206b8:	00027f8a 	.word	0x00027f8a
   206bc:	000284d6 	.word	0x000284d6
   206c0:	00026e33 	.word	0x00026e33

000206c4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   206c4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   206c6:	b138      	cbz	r0, 206d8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   206c8:	4b04      	ldr	r3, [pc, #16]	; (206dc <z_spin_lock_valid+0x18>)
   206ca:	7c1b      	ldrb	r3, [r3, #16]
   206cc:	f000 0003 	and.w	r0, r0, #3
   206d0:	1ac0      	subs	r0, r0, r3
   206d2:	bf18      	it	ne
   206d4:	2001      	movne	r0, #1
   206d6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   206d8:	2001      	movs	r0, #1
}
   206da:	4770      	bx	lr
   206dc:	200030a8 	.word	0x200030a8

000206e0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   206e0:	4a06      	ldr	r2, [pc, #24]	; (206fc <z_spin_unlock_valid+0x1c>)
   206e2:	7c11      	ldrb	r1, [r2, #16]
   206e4:	6892      	ldr	r2, [r2, #8]
   206e6:	430a      	orrs	r2, r1
   206e8:	6801      	ldr	r1, [r0, #0]
{
   206ea:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   206ec:	4291      	cmp	r1, r2
   206ee:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   206f2:	bf04      	itt	eq
   206f4:	6018      	streq	r0, [r3, #0]
	return true;
   206f6:	2001      	moveq	r0, #1
}
   206f8:	4770      	bx	lr
   206fa:	bf00      	nop
   206fc:	200030a8 	.word	0x200030a8

00020700 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   20700:	4b02      	ldr	r3, [pc, #8]	; (2070c <z_spin_lock_set_owner+0xc>)
   20702:	7c1a      	ldrb	r2, [r3, #16]
   20704:	689b      	ldr	r3, [r3, #8]
   20706:	4313      	orrs	r3, r2
   20708:	6003      	str	r3, [r0, #0]
}
   2070a:	4770      	bx	lr
   2070c:	200030a8 	.word	0x200030a8

00020710 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20710:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20712:	4c13      	ldr	r4, [pc, #76]	; (20760 <idle+0x50>)
   20714:	68a3      	ldr	r3, [r4, #8]
   20716:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2071a:	2b00      	cmp	r3, #0
   2071c:	db10      	blt.n	20740 <idle+0x30>
	return !z_sys_post_kernel;
   2071e:	4d11      	ldr	r5, [pc, #68]	; (20764 <idle+0x54>)
	__asm__ volatile(
   20720:	f04f 0240 	mov.w	r2, #64	; 0x40
   20724:	f3ef 8311 	mrs	r3, BASEPRI
   20728:	f382 8812 	msr	BASEPRI_MAX, r2
   2072c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20730:	f002 fbb2 	bl	22e98 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20734:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   20736:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20738:	b963      	cbnz	r3, 20754 <idle+0x44>
	arch_cpu_idle();
   2073a:	f7f4 fad1 	bl	14ce0 <arch_cpu_idle>
}
   2073e:	e7ef      	b.n	20720 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20740:	4909      	ldr	r1, [pc, #36]	; (20768 <idle+0x58>)
   20742:	480a      	ldr	r0, [pc, #40]	; (2076c <idle+0x5c>)
   20744:	4a0a      	ldr	r2, [pc, #40]	; (20770 <idle+0x60>)
   20746:	2327      	movs	r3, #39	; 0x27
   20748:	f003 ffd0 	bl	246ec <assert_print>
   2074c:	4808      	ldr	r0, [pc, #32]	; (20770 <idle+0x60>)
   2074e:	2127      	movs	r1, #39	; 0x27
   20750:	f003 ffc5 	bl	246de <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20754:	f7f4 f93e 	bl	149d4 <pm_system_suspend>
   20758:	2800      	cmp	r0, #0
   2075a:	d1e1      	bne.n	20720 <idle+0x10>
   2075c:	e7ed      	b.n	2073a <idle+0x2a>
   2075e:	bf00      	nop
   20760:	200030a8 	.word	0x200030a8
   20764:	200036e4 	.word	0x200036e4
   20768:	0002b528 	.word	0x0002b528
   2076c:	00027f8a 	.word	0x00027f8a
   20770:	0002b507 	.word	0x0002b507

00020774 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20778:	4604      	mov	r4, r0
   2077a:	4617      	mov	r7, r2
   2077c:	461e      	mov	r6, r3
   2077e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20782:	b165      	cbz	r5, 2079e <z_impl_k_mutex_lock+0x2a>
   20784:	4958      	ldr	r1, [pc, #352]	; (208e8 <z_impl_k_mutex_lock+0x174>)
   20786:	4a59      	ldr	r2, [pc, #356]	; (208ec <z_impl_k_mutex_lock+0x178>)
   20788:	4859      	ldr	r0, [pc, #356]	; (208f0 <z_impl_k_mutex_lock+0x17c>)
   2078a:	2365      	movs	r3, #101	; 0x65
   2078c:	f003 ffae 	bl	246ec <assert_print>
   20790:	4858      	ldr	r0, [pc, #352]	; (208f4 <z_impl_k_mutex_lock+0x180>)
   20792:	f003 ffab 	bl	246ec <assert_print>
   20796:	4855      	ldr	r0, [pc, #340]	; (208ec <z_impl_k_mutex_lock+0x178>)
   20798:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2079a:	f003 ffa0 	bl	246de <assert_post_action>
   2079e:	f04f 0340 	mov.w	r3, #64	; 0x40
   207a2:	f3ef 8811 	mrs	r8, BASEPRI
   207a6:	f383 8812 	msr	BASEPRI_MAX, r3
   207aa:	f3bf 8f6f 	isb	sy
   207ae:	4852      	ldr	r0, [pc, #328]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   207b0:	f7ff ff88 	bl	206c4 <z_spin_lock_valid>
   207b4:	b960      	cbnz	r0, 207d0 <z_impl_k_mutex_lock+0x5c>
   207b6:	4a51      	ldr	r2, [pc, #324]	; (208fc <z_impl_k_mutex_lock+0x188>)
   207b8:	4951      	ldr	r1, [pc, #324]	; (20900 <z_impl_k_mutex_lock+0x18c>)
   207ba:	484d      	ldr	r0, [pc, #308]	; (208f0 <z_impl_k_mutex_lock+0x17c>)
   207bc:	2394      	movs	r3, #148	; 0x94
   207be:	f003 ff95 	bl	246ec <assert_print>
   207c2:	494d      	ldr	r1, [pc, #308]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   207c4:	484f      	ldr	r0, [pc, #316]	; (20904 <z_impl_k_mutex_lock+0x190>)
   207c6:	f003 ff91 	bl	246ec <assert_print>
   207ca:	2194      	movs	r1, #148	; 0x94
   207cc:	484b      	ldr	r0, [pc, #300]	; (208fc <z_impl_k_mutex_lock+0x188>)
   207ce:	e7e4      	b.n	2079a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   207d0:	4849      	ldr	r0, [pc, #292]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   207d2:	f7ff ff95 	bl	20700 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   207d6:	68e3      	ldr	r3, [r4, #12]
   207d8:	4a4b      	ldr	r2, [pc, #300]	; (20908 <z_impl_k_mutex_lock+0x194>)
   207da:	b19b      	cbz	r3, 20804 <z_impl_k_mutex_lock+0x90>
   207dc:	68a0      	ldr	r0, [r4, #8]
   207de:	6891      	ldr	r1, [r2, #8]
   207e0:	4288      	cmp	r0, r1
   207e2:	d027      	beq.n	20834 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   207e4:	ea57 0306 	orrs.w	r3, r7, r6
   207e8:	d12c      	bne.n	20844 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207ea:	4843      	ldr	r0, [pc, #268]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   207ec:	f7ff ff78 	bl	206e0 <z_spin_unlock_valid>
   207f0:	b1a0      	cbz	r0, 2081c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   207f2:	f388 8811 	msr	BASEPRI, r8
   207f6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   207fa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   207fe:	b002      	add	sp, #8
   20800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20804:	6891      	ldr	r1, [r2, #8]
   20806:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2080a:	483b      	ldr	r0, [pc, #236]	; (208f8 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2080c:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2080e:	3301      	adds	r3, #1
   20810:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20812:	6893      	ldr	r3, [r2, #8]
   20814:	60a3      	str	r3, [r4, #8]
   20816:	f7ff ff63 	bl	206e0 <z_spin_unlock_valid>
   2081a:	b968      	cbnz	r0, 20838 <z_impl_k_mutex_lock+0xc4>
   2081c:	4a37      	ldr	r2, [pc, #220]	; (208fc <z_impl_k_mutex_lock+0x188>)
   2081e:	493b      	ldr	r1, [pc, #236]	; (2090c <z_impl_k_mutex_lock+0x198>)
   20820:	4833      	ldr	r0, [pc, #204]	; (208f0 <z_impl_k_mutex_lock+0x17c>)
   20822:	23c2      	movs	r3, #194	; 0xc2
   20824:	f003 ff62 	bl	246ec <assert_print>
   20828:	4933      	ldr	r1, [pc, #204]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   2082a:	4839      	ldr	r0, [pc, #228]	; (20910 <z_impl_k_mutex_lock+0x19c>)
   2082c:	f003 ff5e 	bl	246ec <assert_print>
   20830:	21c2      	movs	r1, #194	; 0xc2
   20832:	e7cb      	b.n	207cc <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   20834:	6921      	ldr	r1, [r4, #16]
   20836:	e7e8      	b.n	2080a <z_impl_k_mutex_lock+0x96>
   20838:	f388 8811 	msr	BASEPRI, r8
   2083c:	f3bf 8f6f 	isb	sy
		return 0;
   20840:	2000      	movs	r0, #0
   20842:	e7dc      	b.n	207fe <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20844:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20848:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2084c:	4299      	cmp	r1, r3
   2084e:	bfa8      	it	ge
   20850:	4619      	movge	r1, r3
   20852:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   20856:	4291      	cmp	r1, r2
   20858:	bfb8      	it	lt
   2085a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2085c:	428b      	cmp	r3, r1
   2085e:	dd02      	ble.n	20866 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   20860:	f006 fa17 	bl	26c92 <adjust_owner_prio.isra.0>
   20864:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20866:	e9cd 7600 	strd	r7, r6, [sp]
   2086a:	4823      	ldr	r0, [pc, #140]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   2086c:	4622      	mov	r2, r4
   2086e:	4641      	mov	r1, r8
   20870:	f001 fc22 	bl	220b8 <z_pend_curr>
	if (got_mutex == 0) {
   20874:	2800      	cmp	r0, #0
   20876:	d0e3      	beq.n	20840 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   20878:	f04f 0340 	mov.w	r3, #64	; 0x40
   2087c:	f3ef 8611 	mrs	r6, BASEPRI
   20880:	f383 8812 	msr	BASEPRI_MAX, r3
   20884:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20888:	481b      	ldr	r0, [pc, #108]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   2088a:	f7ff ff1b 	bl	206c4 <z_spin_lock_valid>
   2088e:	2800      	cmp	r0, #0
   20890:	d091      	beq.n	207b6 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   20892:	4819      	ldr	r0, [pc, #100]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   20894:	f7ff ff34 	bl	20700 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   20898:	68a0      	ldr	r0, [r4, #8]
   2089a:	b1c0      	cbz	r0, 208ce <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2089c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2089e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208a0:	429c      	cmp	r4, r3
   208a2:	d00a      	beq.n	208ba <z_impl_k_mutex_lock+0x146>
   208a4:	b14b      	cbz	r3, 208ba <z_impl_k_mutex_lock+0x146>
   208a6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   208aa:	4299      	cmp	r1, r3
   208ac:	bfa8      	it	ge
   208ae:	4619      	movge	r1, r3
   208b0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   208b4:	4299      	cmp	r1, r3
   208b6:	bfb8      	it	lt
   208b8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   208ba:	f006 f9ea 	bl	26c92 <adjust_owner_prio.isra.0>
   208be:	b130      	cbz	r0, 208ce <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   208c0:	480d      	ldr	r0, [pc, #52]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   208c2:	4631      	mov	r1, r6
   208c4:	f001 f93c 	bl	21b40 <z_reschedule>
	return -EAGAIN;
   208c8:	f06f 000a 	mvn.w	r0, #10
   208cc:	e797      	b.n	207fe <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   208ce:	2d00      	cmp	r5, #0
   208d0:	d1f6      	bne.n	208c0 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208d2:	4809      	ldr	r0, [pc, #36]	; (208f8 <z_impl_k_mutex_lock+0x184>)
   208d4:	f7ff ff04 	bl	206e0 <z_spin_unlock_valid>
   208d8:	2800      	cmp	r0, #0
   208da:	d09f      	beq.n	2081c <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   208dc:	f386 8811 	msr	BASEPRI, r6
   208e0:	f3bf 8f6f 	isb	sy
   208e4:	e7f0      	b.n	208c8 <z_impl_k_mutex_lock+0x154>
   208e6:	bf00      	nop
   208e8:	0002b4a3 	.word	0x0002b4a3
   208ec:	0002b550 	.word	0x0002b550
   208f0:	00027f8a 	.word	0x00027f8a
   208f4:	0002b572 	.word	0x0002b572
   208f8:	200030d4 	.word	0x200030d4
   208fc:	0002837e 	.word	0x0002837e
   20900:	000283d7 	.word	0x000283d7
   20904:	000283ec 	.word	0x000283ec
   20908:	200030a8 	.word	0x200030a8
   2090c:	000283ab 	.word	0x000283ab
   20910:	000283c2 	.word	0x000283c2

00020914 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20914:	b570      	push	{r4, r5, r6, lr}
   20916:	4604      	mov	r4, r0
   20918:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2091c:	b166      	cbz	r6, 20938 <z_impl_k_mutex_unlock+0x24>
   2091e:	4938      	ldr	r1, [pc, #224]	; (20a00 <z_impl_k_mutex_unlock+0xec>)
   20920:	4a38      	ldr	r2, [pc, #224]	; (20a04 <z_impl_k_mutex_unlock+0xf0>)
   20922:	4839      	ldr	r0, [pc, #228]	; (20a08 <z_impl_k_mutex_unlock+0xf4>)
   20924:	23cd      	movs	r3, #205	; 0xcd
   20926:	f003 fee1 	bl	246ec <assert_print>
   2092a:	4838      	ldr	r0, [pc, #224]	; (20a0c <z_impl_k_mutex_unlock+0xf8>)
   2092c:	f003 fede 	bl	246ec <assert_print>
   20930:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20932:	4834      	ldr	r0, [pc, #208]	; (20a04 <z_impl_k_mutex_unlock+0xf0>)
   20934:	f003 fed3 	bl	246de <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   20938:	6883      	ldr	r3, [r0, #8]
   2093a:	2b00      	cmp	r3, #0
   2093c:	d059      	beq.n	209f2 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   2093e:	4a34      	ldr	r2, [pc, #208]	; (20a10 <z_impl_k_mutex_unlock+0xfc>)
   20940:	6892      	ldr	r2, [r2, #8]
   20942:	4293      	cmp	r3, r2
   20944:	d158      	bne.n	209f8 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20946:	68c3      	ldr	r3, [r0, #12]
   20948:	b93b      	cbnz	r3, 2095a <z_impl_k_mutex_unlock+0x46>
   2094a:	4932      	ldr	r1, [pc, #200]	; (20a14 <z_impl_k_mutex_unlock+0x100>)
   2094c:	4a2d      	ldr	r2, [pc, #180]	; (20a04 <z_impl_k_mutex_unlock+0xf0>)
   2094e:	482e      	ldr	r0, [pc, #184]	; (20a08 <z_impl_k_mutex_unlock+0xf4>)
   20950:	23e5      	movs	r3, #229	; 0xe5
   20952:	f003 fecb 	bl	246ec <assert_print>
   20956:	21e5      	movs	r1, #229	; 0xe5
   20958:	e7eb      	b.n	20932 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2095a:	2b01      	cmp	r3, #1
   2095c:	d003      	beq.n	20966 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   2095e:	3b01      	subs	r3, #1
   20960:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20962:	2000      	movs	r0, #0
}
   20964:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   20966:	f04f 0340 	mov.w	r3, #64	; 0x40
   2096a:	f3ef 8511 	mrs	r5, BASEPRI
   2096e:	f383 8812 	msr	BASEPRI_MAX, r3
   20972:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20976:	4828      	ldr	r0, [pc, #160]	; (20a18 <z_impl_k_mutex_unlock+0x104>)
   20978:	f7ff fea4 	bl	206c4 <z_spin_lock_valid>
   2097c:	b960      	cbnz	r0, 20998 <z_impl_k_mutex_unlock+0x84>
   2097e:	4a27      	ldr	r2, [pc, #156]	; (20a1c <z_impl_k_mutex_unlock+0x108>)
   20980:	4927      	ldr	r1, [pc, #156]	; (20a20 <z_impl_k_mutex_unlock+0x10c>)
   20982:	4821      	ldr	r0, [pc, #132]	; (20a08 <z_impl_k_mutex_unlock+0xf4>)
   20984:	2394      	movs	r3, #148	; 0x94
   20986:	f003 feb1 	bl	246ec <assert_print>
   2098a:	4923      	ldr	r1, [pc, #140]	; (20a18 <z_impl_k_mutex_unlock+0x104>)
   2098c:	4825      	ldr	r0, [pc, #148]	; (20a24 <z_impl_k_mutex_unlock+0x110>)
   2098e:	f003 fead 	bl	246ec <assert_print>
   20992:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20994:	4821      	ldr	r0, [pc, #132]	; (20a1c <z_impl_k_mutex_unlock+0x108>)
   20996:	e7cd      	b.n	20934 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   20998:	481f      	ldr	r0, [pc, #124]	; (20a18 <z_impl_k_mutex_unlock+0x104>)
   2099a:	f7ff feb1 	bl	20700 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2099e:	6921      	ldr	r1, [r4, #16]
   209a0:	68a0      	ldr	r0, [r4, #8]
   209a2:	f006 f976 	bl	26c92 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   209a6:	4620      	mov	r0, r4
   209a8:	f001 fe06 	bl	225b8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   209ac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   209ae:	b150      	cbz	r0, 209c6 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   209b0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   209b4:	6122      	str	r2, [r4, #16]
   209b6:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   209b8:	f001 f834 	bl	21a24 <z_ready_thread>
		z_reschedule(&lock, key);
   209bc:	4816      	ldr	r0, [pc, #88]	; (20a18 <z_impl_k_mutex_unlock+0x104>)
   209be:	4629      	mov	r1, r5
   209c0:	f001 f8be 	bl	21b40 <z_reschedule>
   209c4:	e7cd      	b.n	20962 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   209c6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209c8:	4813      	ldr	r0, [pc, #76]	; (20a18 <z_impl_k_mutex_unlock+0x104>)
   209ca:	f7ff fe89 	bl	206e0 <z_spin_unlock_valid>
   209ce:	b958      	cbnz	r0, 209e8 <z_impl_k_mutex_unlock+0xd4>
   209d0:	4a12      	ldr	r2, [pc, #72]	; (20a1c <z_impl_k_mutex_unlock+0x108>)
   209d2:	4915      	ldr	r1, [pc, #84]	; (20a28 <z_impl_k_mutex_unlock+0x114>)
   209d4:	480c      	ldr	r0, [pc, #48]	; (20a08 <z_impl_k_mutex_unlock+0xf4>)
   209d6:	23c2      	movs	r3, #194	; 0xc2
   209d8:	f003 fe88 	bl	246ec <assert_print>
   209dc:	490e      	ldr	r1, [pc, #56]	; (20a18 <z_impl_k_mutex_unlock+0x104>)
   209de:	4813      	ldr	r0, [pc, #76]	; (20a2c <z_impl_k_mutex_unlock+0x118>)
   209e0:	f003 fe84 	bl	246ec <assert_print>
   209e4:	21c2      	movs	r1, #194	; 0xc2
   209e6:	e7d5      	b.n	20994 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   209e8:	f385 8811 	msr	BASEPRI, r5
   209ec:	f3bf 8f6f 	isb	sy
   209f0:	e7b7      	b.n	20962 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   209f2:	f06f 0015 	mvn.w	r0, #21
   209f6:	e7b5      	b.n	20964 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   209f8:	f04f 30ff 	mov.w	r0, #4294967295
   209fc:	e7b2      	b.n	20964 <z_impl_k_mutex_unlock+0x50>
   209fe:	bf00      	nop
   20a00:	0002b4a3 	.word	0x0002b4a3
   20a04:	0002b550 	.word	0x0002b550
   20a08:	00027f8a 	.word	0x00027f8a
   20a0c:	0002b572 	.word	0x0002b572
   20a10:	200030a8 	.word	0x200030a8
   20a14:	0002b597 	.word	0x0002b597
   20a18:	200030d4 	.word	0x200030d4
   20a1c:	0002837e 	.word	0x0002837e
   20a20:	000283d7 	.word	0x000283d7
   20a24:	000283ec 	.word	0x000283ec
   20a28:	000283ab 	.word	0x000283ab
   20a2c:	000283c2 	.word	0x000283c2

00020a30 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a34:	4604      	mov	r4, r0
   20a36:	f89d a020 	ldrb.w	sl, [sp, #32]
   20a3a:	460e      	mov	r6, r1
   20a3c:	4690      	mov	r8, r2
   20a3e:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20a40:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20a44:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a48:	f3ef 8711 	mrs	r7, BASEPRI
   20a4c:	f383 8812 	msr	BASEPRI_MAX, r3
   20a50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a54:	4628      	mov	r0, r5
   20a56:	f7ff fe35 	bl	206c4 <z_spin_lock_valid>
   20a5a:	b968      	cbnz	r0, 20a78 <queue_insert+0x48>
   20a5c:	4a3b      	ldr	r2, [pc, #236]	; (20b4c <queue_insert+0x11c>)
   20a5e:	493c      	ldr	r1, [pc, #240]	; (20b50 <queue_insert+0x120>)
   20a60:	483c      	ldr	r0, [pc, #240]	; (20b54 <queue_insert+0x124>)
   20a62:	2394      	movs	r3, #148	; 0x94
   20a64:	f003 fe42 	bl	246ec <assert_print>
   20a68:	4629      	mov	r1, r5
   20a6a:	483b      	ldr	r0, [pc, #236]	; (20b58 <queue_insert+0x128>)
   20a6c:	f003 fe3e 	bl	246ec <assert_print>
   20a70:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a72:	4836      	ldr	r0, [pc, #216]	; (20b4c <queue_insert+0x11c>)
   20a74:	f003 fe33 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   20a78:	4628      	mov	r0, r5
   20a7a:	f7ff fe41 	bl	20700 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20a7e:	f1ba 0f00 	cmp.w	sl, #0
   20a82:	d000      	beq.n	20a86 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20a84:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20a86:	f104 000c 	add.w	r0, r4, #12
   20a8a:	f001 fd95 	bl	225b8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20a8e:	b158      	cbz	r0, 20aa8 <queue_insert+0x78>
   20a90:	2300      	movs	r3, #0
   20a92:	67c3      	str	r3, [r0, #124]	; 0x7c
   20a94:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20a98:	f000 ffc4 	bl	21a24 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20a9c:	4628      	mov	r0, r5
   20a9e:	4639      	mov	r1, r7
   20aa0:	f001 f84e 	bl	21b40 <z_reschedule>
		return 0;
   20aa4:	2000      	movs	r0, #0
   20aa6:	e01c      	b.n	20ae2 <queue_insert+0xb2>
	if (alloc) {
   20aa8:	f1b9 0f00 	cmp.w	r9, #0
   20aac:	d02b      	beq.n	20b06 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   20aae:	2108      	movs	r1, #8
   20ab0:	f002 ffd4 	bl	23a5c <z_thread_aligned_alloc>
		if (anode == NULL) {
   20ab4:	b9b8      	cbnz	r0, 20ae6 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ab6:	4628      	mov	r0, r5
   20ab8:	f7ff fe12 	bl	206e0 <z_spin_unlock_valid>
   20abc:	b958      	cbnz	r0, 20ad6 <queue_insert+0xa6>
   20abe:	4a23      	ldr	r2, [pc, #140]	; (20b4c <queue_insert+0x11c>)
   20ac0:	4926      	ldr	r1, [pc, #152]	; (20b5c <queue_insert+0x12c>)
   20ac2:	4824      	ldr	r0, [pc, #144]	; (20b54 <queue_insert+0x124>)
   20ac4:	23c2      	movs	r3, #194	; 0xc2
   20ac6:	f003 fe11 	bl	246ec <assert_print>
   20aca:	4629      	mov	r1, r5
   20acc:	4824      	ldr	r0, [pc, #144]	; (20b60 <queue_insert+0x130>)
   20ace:	f003 fe0d 	bl	246ec <assert_print>
   20ad2:	21c2      	movs	r1, #194	; 0xc2
   20ad4:	e7cd      	b.n	20a72 <queue_insert+0x42>
	__asm__ volatile(
   20ad6:	f387 8811 	msr	BASEPRI, r7
   20ada:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20ade:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   20ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20ae6:	2201      	movs	r2, #1
		anode->data = data;
   20ae8:	f8c0 8004 	str.w	r8, [r0, #4]
   20aec:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20aee:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20af0:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20af4:	b95e      	cbnz	r6, 20b0e <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20af6:	6822      	ldr	r2, [r4, #0]
   20af8:	430a      	orrs	r2, r1
   20afa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20afc:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20afe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20b00:	b96a      	cbnz	r2, 20b1e <queue_insert+0xee>
	list->tail = node;
   20b02:	6060      	str	r0, [r4, #4]
}
   20b04:	e00b      	b.n	20b1e <queue_insert+0xee>
	node->next_and_flags = flags;
   20b06:	f8c8 9000 	str.w	r9, [r8]
}
   20b0a:	4640      	mov	r0, r8
   20b0c:	e7ef      	b.n	20aee <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20b0e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20b10:	2a03      	cmp	r2, #3
   20b12:	d810      	bhi.n	20b36 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b14:	6001      	str	r1, [r0, #0]
	return list->tail;
   20b16:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20b18:	b939      	cbnz	r1, 20b2a <queue_insert+0xfa>
	list->head = node;
   20b1a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20b1e:	2104      	movs	r1, #4
   20b20:	f104 0014 	add.w	r0, r4, #20
   20b24:	f006 fa79 	bl	2701a <z_handle_obj_poll_events>
   20b28:	e7b8      	b.n	20a9c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b2a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b2c:	f002 0203 	and.w	r2, r2, #3
   20b30:	4302      	orrs	r2, r0
   20b32:	600a      	str	r2, [r1, #0]
   20b34:	e7e5      	b.n	20b02 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20b36:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b3a:	430a      	orrs	r2, r1
   20b3c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20b3e:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20b40:	f002 0203 	and.w	r2, r2, #3
   20b44:	ea40 0302 	orr.w	r3, r0, r2
   20b48:	6033      	str	r3, [r6, #0]
}
   20b4a:	e7e8      	b.n	20b1e <queue_insert+0xee>
   20b4c:	0002837e 	.word	0x0002837e
   20b50:	000283d7 	.word	0x000283d7
   20b54:	00027f8a 	.word	0x00027f8a
   20b58:	000283ec 	.word	0x000283ec
   20b5c:	000283ab 	.word	0x000283ab
   20b60:	000283c2 	.word	0x000283c2

00020b64 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20b68:	4606      	mov	r6, r0
   20b6a:	4691      	mov	r9, r2
   20b6c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20b6e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20b72:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b76:	f3ef 8811 	mrs	r8, BASEPRI
   20b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   20b7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b82:	4628      	mov	r0, r5
   20b84:	f7ff fd9e 	bl	206c4 <z_spin_lock_valid>
   20b88:	b968      	cbnz	r0, 20ba6 <z_impl_k_queue_get+0x42>
   20b8a:	4a24      	ldr	r2, [pc, #144]	; (20c1c <z_impl_k_queue_get+0xb8>)
   20b8c:	4924      	ldr	r1, [pc, #144]	; (20c20 <z_impl_k_queue_get+0xbc>)
   20b8e:	4825      	ldr	r0, [pc, #148]	; (20c24 <z_impl_k_queue_get+0xc0>)
   20b90:	2394      	movs	r3, #148	; 0x94
   20b92:	f003 fdab 	bl	246ec <assert_print>
   20b96:	4629      	mov	r1, r5
   20b98:	4823      	ldr	r0, [pc, #140]	; (20c28 <z_impl_k_queue_get+0xc4>)
   20b9a:	f003 fda7 	bl	246ec <assert_print>
   20b9e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ba0:	481e      	ldr	r0, [pc, #120]	; (20c1c <z_impl_k_queue_get+0xb8>)
   20ba2:	f003 fd9c 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   20ba6:	4628      	mov	r0, r5
   20ba8:	f7ff fdaa 	bl	20700 <z_spin_lock_set_owner>
	return list->head;
   20bac:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20bae:	b1e4      	cbz	r4, 20bea <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20bb0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20bb2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20bb4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20bb8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20bba:	4620      	mov	r0, r4
	list->head = node;
   20bbc:	6033      	str	r3, [r6, #0]
	list->tail = node;
   20bbe:	bf08      	it	eq
   20bc0:	6073      	streq	r3, [r6, #4]
   20bc2:	2101      	movs	r1, #1
   20bc4:	f006 f86d 	bl	26ca2 <z_queue_node_peek>
   20bc8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bca:	4628      	mov	r0, r5
   20bcc:	f7ff fd88 	bl	206e0 <z_spin_unlock_valid>
   20bd0:	b9d8      	cbnz	r0, 20c0a <z_impl_k_queue_get+0xa6>
   20bd2:	4a12      	ldr	r2, [pc, #72]	; (20c1c <z_impl_k_queue_get+0xb8>)
   20bd4:	4915      	ldr	r1, [pc, #84]	; (20c2c <z_impl_k_queue_get+0xc8>)
   20bd6:	4813      	ldr	r0, [pc, #76]	; (20c24 <z_impl_k_queue_get+0xc0>)
   20bd8:	23c2      	movs	r3, #194	; 0xc2
   20bda:	f003 fd87 	bl	246ec <assert_print>
   20bde:	4629      	mov	r1, r5
   20be0:	4813      	ldr	r0, [pc, #76]	; (20c30 <z_impl_k_queue_get+0xcc>)
   20be2:	f003 fd83 	bl	246ec <assert_print>
   20be6:	21c2      	movs	r1, #194	; 0xc2
   20be8:	e7da      	b.n	20ba0 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20bea:	ea59 0307 	orrs.w	r3, r9, r7
   20bee:	d0ec      	beq.n	20bca <z_impl_k_queue_get+0x66>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20bf0:	e9cd 9700 	strd	r9, r7, [sp]
   20bf4:	f106 020c 	add.w	r2, r6, #12
   20bf8:	4641      	mov	r1, r8
   20bfa:	4628      	mov	r0, r5
   20bfc:	f001 fa5c 	bl	220b8 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   20c00:	b938      	cbnz	r0, 20c12 <z_impl_k_queue_get+0xae>
   20c02:	4b0c      	ldr	r3, [pc, #48]	; (20c34 <z_impl_k_queue_get+0xd0>)
   20c04:	689b      	ldr	r3, [r3, #8]
   20c06:	695c      	ldr	r4, [r3, #20]
   20c08:	e003      	b.n	20c12 <z_impl_k_queue_get+0xae>
	__asm__ volatile(
   20c0a:	f388 8811 	msr	BASEPRI, r8
   20c0e:	f3bf 8f6f 	isb	sy
}
   20c12:	4620      	mov	r0, r4
   20c14:	b003      	add	sp, #12
   20c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20c1a:	bf00      	nop
   20c1c:	0002837e 	.word	0x0002837e
   20c20:	000283d7 	.word	0x000283d7
   20c24:	00027f8a 	.word	0x00027f8a
   20c28:	000283ec 	.word	0x000283ec
   20c2c:	000283ab 	.word	0x000283ab
   20c30:	000283c2 	.word	0x000283c2
   20c34:	200030a8 	.word	0x200030a8

00020c38 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20c38:	b538      	push	{r3, r4, r5, lr}
   20c3a:	4604      	mov	r4, r0
	__asm__ volatile(
   20c3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c40:	f3ef 8511 	mrs	r5, BASEPRI
   20c44:	f383 8812 	msr	BASEPRI_MAX, r3
   20c48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c4c:	4817      	ldr	r0, [pc, #92]	; (20cac <z_impl_k_sem_give+0x74>)
   20c4e:	f7ff fd39 	bl	206c4 <z_spin_lock_valid>
   20c52:	b968      	cbnz	r0, 20c70 <z_impl_k_sem_give+0x38>
   20c54:	4a16      	ldr	r2, [pc, #88]	; (20cb0 <z_impl_k_sem_give+0x78>)
   20c56:	4917      	ldr	r1, [pc, #92]	; (20cb4 <z_impl_k_sem_give+0x7c>)
   20c58:	4817      	ldr	r0, [pc, #92]	; (20cb8 <z_impl_k_sem_give+0x80>)
   20c5a:	2394      	movs	r3, #148	; 0x94
   20c5c:	f003 fd46 	bl	246ec <assert_print>
   20c60:	4912      	ldr	r1, [pc, #72]	; (20cac <z_impl_k_sem_give+0x74>)
   20c62:	4816      	ldr	r0, [pc, #88]	; (20cbc <z_impl_k_sem_give+0x84>)
   20c64:	f003 fd42 	bl	246ec <assert_print>
   20c68:	4811      	ldr	r0, [pc, #68]	; (20cb0 <z_impl_k_sem_give+0x78>)
   20c6a:	2194      	movs	r1, #148	; 0x94
   20c6c:	f003 fd37 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   20c70:	480e      	ldr	r0, [pc, #56]	; (20cac <z_impl_k_sem_give+0x74>)
   20c72:	f7ff fd45 	bl	20700 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20c76:	4620      	mov	r0, r4
   20c78:	f001 fc9e 	bl	225b8 <z_unpend_first_thread>

	if (thread != NULL) {
   20c7c:	b148      	cbz	r0, 20c92 <z_impl_k_sem_give+0x5a>
   20c7e:	2200      	movs	r2, #0
   20c80:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20c82:	f000 fecf 	bl	21a24 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20c86:	4629      	mov	r1, r5
   20c88:	4808      	ldr	r0, [pc, #32]	; (20cac <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20c8e:	f000 bf57 	b.w	21b40 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20c92:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20c96:	429a      	cmp	r2, r3
   20c98:	bf18      	it	ne
   20c9a:	3301      	addne	r3, #1
   20c9c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20c9e:	2102      	movs	r1, #2
   20ca0:	f104 0010 	add.w	r0, r4, #16
   20ca4:	f006 f9b9 	bl	2701a <z_handle_obj_poll_events>
}
   20ca8:	e7ed      	b.n	20c86 <z_impl_k_sem_give+0x4e>
   20caa:	bf00      	nop
   20cac:	200030d8 	.word	0x200030d8
   20cb0:	0002837e 	.word	0x0002837e
   20cb4:	000283d7 	.word	0x000283d7
   20cb8:	00027f8a 	.word	0x00027f8a
   20cbc:	000283ec 	.word	0x000283ec

00020cc0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20cc2:	4604      	mov	r4, r0
   20cc4:	4616      	mov	r6, r2
   20cc6:	461d      	mov	r5, r3
   20cc8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   20ccc:	b17b      	cbz	r3, 20cee <z_impl_k_sem_take+0x2e>
   20cce:	ea52 0305 	orrs.w	r3, r2, r5
   20cd2:	d00c      	beq.n	20cee <z_impl_k_sem_take+0x2e>
   20cd4:	492d      	ldr	r1, [pc, #180]	; (20d8c <z_impl_k_sem_take+0xcc>)
   20cd6:	4a2e      	ldr	r2, [pc, #184]	; (20d90 <z_impl_k_sem_take+0xd0>)
   20cd8:	482e      	ldr	r0, [pc, #184]	; (20d94 <z_impl_k_sem_take+0xd4>)
   20cda:	2379      	movs	r3, #121	; 0x79
   20cdc:	f003 fd06 	bl	246ec <assert_print>
   20ce0:	482d      	ldr	r0, [pc, #180]	; (20d98 <z_impl_k_sem_take+0xd8>)
   20ce2:	f003 fd03 	bl	246ec <assert_print>
   20ce6:	482a      	ldr	r0, [pc, #168]	; (20d90 <z_impl_k_sem_take+0xd0>)
   20ce8:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cea:	f003 fcf8 	bl	246de <assert_post_action>
   20cee:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cf2:	f3ef 8711 	mrs	r7, BASEPRI
   20cf6:	f383 8812 	msr	BASEPRI_MAX, r3
   20cfa:	f3bf 8f6f 	isb	sy
   20cfe:	4827      	ldr	r0, [pc, #156]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d00:	f7ff fce0 	bl	206c4 <z_spin_lock_valid>
   20d04:	b960      	cbnz	r0, 20d20 <z_impl_k_sem_take+0x60>
   20d06:	4a26      	ldr	r2, [pc, #152]	; (20da0 <z_impl_k_sem_take+0xe0>)
   20d08:	4926      	ldr	r1, [pc, #152]	; (20da4 <z_impl_k_sem_take+0xe4>)
   20d0a:	4822      	ldr	r0, [pc, #136]	; (20d94 <z_impl_k_sem_take+0xd4>)
   20d0c:	2394      	movs	r3, #148	; 0x94
   20d0e:	f003 fced 	bl	246ec <assert_print>
   20d12:	4922      	ldr	r1, [pc, #136]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d14:	4824      	ldr	r0, [pc, #144]	; (20da8 <z_impl_k_sem_take+0xe8>)
   20d16:	f003 fce9 	bl	246ec <assert_print>
   20d1a:	2194      	movs	r1, #148	; 0x94
   20d1c:	4820      	ldr	r0, [pc, #128]	; (20da0 <z_impl_k_sem_take+0xe0>)
   20d1e:	e7e4      	b.n	20cea <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   20d20:	481e      	ldr	r0, [pc, #120]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d22:	f7ff fced 	bl	20700 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20d26:	68a3      	ldr	r3, [r4, #8]
   20d28:	b1c3      	cbz	r3, 20d5c <z_impl_k_sem_take+0x9c>
		sem->count--;
   20d2a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d2c:	481b      	ldr	r0, [pc, #108]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d2e:	60a3      	str	r3, [r4, #8]
   20d30:	f7ff fcd6 	bl	206e0 <z_spin_unlock_valid>
   20d34:	b958      	cbnz	r0, 20d4e <z_impl_k_sem_take+0x8e>
   20d36:	4a1a      	ldr	r2, [pc, #104]	; (20da0 <z_impl_k_sem_take+0xe0>)
   20d38:	491c      	ldr	r1, [pc, #112]	; (20dac <z_impl_k_sem_take+0xec>)
   20d3a:	4816      	ldr	r0, [pc, #88]	; (20d94 <z_impl_k_sem_take+0xd4>)
   20d3c:	23c2      	movs	r3, #194	; 0xc2
   20d3e:	f003 fcd5 	bl	246ec <assert_print>
   20d42:	4916      	ldr	r1, [pc, #88]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d44:	481a      	ldr	r0, [pc, #104]	; (20db0 <z_impl_k_sem_take+0xf0>)
   20d46:	f003 fcd1 	bl	246ec <assert_print>
   20d4a:	21c2      	movs	r1, #194	; 0xc2
   20d4c:	e7e6      	b.n	20d1c <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   20d4e:	f387 8811 	msr	BASEPRI, r7
   20d52:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20d56:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20d58:	b003      	add	sp, #12
   20d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20d5c:	ea56 0305 	orrs.w	r3, r6, r5
   20d60:	d10b      	bne.n	20d7a <z_impl_k_sem_take+0xba>
   20d62:	480e      	ldr	r0, [pc, #56]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d64:	f7ff fcbc 	bl	206e0 <z_spin_unlock_valid>
   20d68:	2800      	cmp	r0, #0
   20d6a:	d0e4      	beq.n	20d36 <z_impl_k_sem_take+0x76>
   20d6c:	f387 8811 	msr	BASEPRI, r7
   20d70:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20d74:	f06f 000f 	mvn.w	r0, #15
   20d78:	e7ee      	b.n	20d58 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20d7a:	e9cd 6500 	strd	r6, r5, [sp]
   20d7e:	4622      	mov	r2, r4
   20d80:	4639      	mov	r1, r7
   20d82:	4806      	ldr	r0, [pc, #24]	; (20d9c <z_impl_k_sem_take+0xdc>)
   20d84:	f001 f998 	bl	220b8 <z_pend_curr>
	return ret;
   20d88:	e7e6      	b.n	20d58 <z_impl_k_sem_take+0x98>
   20d8a:	bf00      	nop
   20d8c:	0002b5ce 	.word	0x0002b5ce
   20d90:	0002b5ae 	.word	0x0002b5ae
   20d94:	00027f8a 	.word	0x00027f8a
   20d98:	0002a56f 	.word	0x0002a56f
   20d9c:	200030d8 	.word	0x200030d8
   20da0:	0002837e 	.word	0x0002837e
   20da4:	000283d7 	.word	0x000283d7
   20da8:	000283ec 	.word	0x000283ec
   20dac:	000283ab 	.word	0x000283ab
   20db0:	000283c2 	.word	0x000283c2

00020db4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   20db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   20db6:	4b09      	ldr	r3, [pc, #36]	; (20ddc <k_sys_work_q_init+0x28>)
   20db8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   20dba:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   20dbc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   20dbe:	9300      	str	r3, [sp, #0]
   20dc0:	4907      	ldr	r1, [pc, #28]	; (20de0 <k_sys_work_q_init+0x2c>)
   20dc2:	4808      	ldr	r0, [pc, #32]	; (20de4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   20dc4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   20dc8:	f04f 33ff 	mov.w	r3, #4294967295
   20dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20dd0:	f000 fac0 	bl	21354 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   20dd4:	4620      	mov	r0, r4
   20dd6:	b004      	add	sp, #16
   20dd8:	bd10      	pop	{r4, pc}
   20dda:	bf00      	nop
   20ddc:	0002b61c 	.word	0x0002b61c
   20de0:	20007700 	.word	0x20007700
   20de4:	20002bf0 	.word	0x20002bf0

00020de8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   20de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20dec:	4e6e      	ldr	r6, [pc, #440]	; (20fa8 <work_queue_main+0x1c0>)
	return list->head;
   20dee:	4f6f      	ldr	r7, [pc, #444]	; (20fac <work_queue_main+0x1c4>)
   20df0:	b085      	sub	sp, #20
   20df2:	4604      	mov	r4, r0
	__asm__ volatile(
   20df4:	f04f 0340 	mov.w	r3, #64	; 0x40
   20df8:	f3ef 8811 	mrs	r8, BASEPRI
   20dfc:	f383 8812 	msr	BASEPRI_MAX, r3
   20e00:	f3bf 8f6f 	isb	sy
   20e04:	4630      	mov	r0, r6
   20e06:	f7ff fc5d 	bl	206c4 <z_spin_lock_valid>
   20e0a:	b968      	cbnz	r0, 20e28 <work_queue_main+0x40>
   20e0c:	4a68      	ldr	r2, [pc, #416]	; (20fb0 <work_queue_main+0x1c8>)
   20e0e:	4969      	ldr	r1, [pc, #420]	; (20fb4 <work_queue_main+0x1cc>)
   20e10:	4869      	ldr	r0, [pc, #420]	; (20fb8 <work_queue_main+0x1d0>)
   20e12:	2394      	movs	r3, #148	; 0x94
   20e14:	f003 fc6a 	bl	246ec <assert_print>
   20e18:	4963      	ldr	r1, [pc, #396]	; (20fa8 <work_queue_main+0x1c0>)
   20e1a:	4868      	ldr	r0, [pc, #416]	; (20fbc <work_queue_main+0x1d4>)
   20e1c:	f003 fc66 	bl	246ec <assert_print>
   20e20:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e22:	4863      	ldr	r0, [pc, #396]	; (20fb0 <work_queue_main+0x1c8>)
   20e24:	f003 fc5b 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   20e28:	4630      	mov	r0, r6
   20e2a:	f7ff fc69 	bl	20700 <z_spin_lock_set_owner>
   20e2e:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
Z_GENLIST_GET(slist, snode)
   20e32:	b9a5      	cbnz	r5, 20e5e <work_queue_main+0x76>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20e34:	2102      	movs	r1, #2
   20e36:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   20e3a:	f005 ff74 	bl	26d26 <flag_test_and_clear>
   20e3e:	bba8      	cbnz	r0, 20eac <work_queue_main+0xc4>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   20e40:	2300      	movs	r3, #0
   20e42:	9302      	str	r3, [sp, #8]
   20e44:	f04f 32ff 	mov.w	r2, #4294967295
   20e48:	f04f 33ff 	mov.w	r3, #4294967295
   20e4c:	e9cd 2300 	strd	r2, r3, [sp]
   20e50:	4641      	mov	r1, r8
   20e52:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   20e56:	4630      	mov	r0, r6
   20e58:	f001 fea0 	bl	22b9c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   20e5c:	e7ca      	b.n	20df4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20e5e:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   20e62:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20e64:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20e68:	4295      	cmp	r5, r2
	list->tail = node;
   20e6a:	bf08      	it	eq
   20e6c:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   20e70:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   20e74:	f043 0302 	orr.w	r3, r3, #2
   20e78:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   20e7c:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   20e7e:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   20e82:	f023 0304 	bic.w	r3, r3, #4
   20e86:	f043 0301 	orr.w	r3, r3, #1
   20e8a:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e8c:	4630      	mov	r0, r6
   20e8e:	f7ff fc27 	bl	206e0 <z_spin_unlock_valid>
   20e92:	b9a8      	cbnz	r0, 20ec0 <work_queue_main+0xd8>
   20e94:	4a46      	ldr	r2, [pc, #280]	; (20fb0 <work_queue_main+0x1c8>)
   20e96:	494a      	ldr	r1, [pc, #296]	; (20fc0 <work_queue_main+0x1d8>)
   20e98:	4847      	ldr	r0, [pc, #284]	; (20fb8 <work_queue_main+0x1d0>)
   20e9a:	23c2      	movs	r3, #194	; 0xc2
   20e9c:	f003 fc26 	bl	246ec <assert_print>
   20ea0:	4941      	ldr	r1, [pc, #260]	; (20fa8 <work_queue_main+0x1c0>)
   20ea2:	4848      	ldr	r0, [pc, #288]	; (20fc4 <work_queue_main+0x1dc>)
   20ea4:	f003 fc22 	bl	246ec <assert_print>
   20ea8:	21c2      	movs	r1, #194	; 0xc2
   20eaa:	e7ba      	b.n	20e22 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20eac:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   20eb0:	2200      	movs	r2, #0
   20eb2:	2101      	movs	r1, #1
   20eb4:	4628      	mov	r0, r5
   20eb6:	f001 fe13 	bl	22ae0 <z_sched_wake>
   20eba:	2800      	cmp	r0, #0
   20ebc:	d1f8      	bne.n	20eb0 <work_queue_main+0xc8>
   20ebe:	e7bf      	b.n	20e40 <work_queue_main+0x58>
	__asm__ volatile(
   20ec0:	f388 8811 	msr	BASEPRI, r8
   20ec4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   20ec8:	f1b9 0f00 	cmp.w	r9, #0
   20ecc:	d10a      	bne.n	20ee4 <work_queue_main+0xfc>
   20ece:	493e      	ldr	r1, [pc, #248]	; (20fc8 <work_queue_main+0x1e0>)
   20ed0:	4839      	ldr	r0, [pc, #228]	; (20fb8 <work_queue_main+0x1d0>)
   20ed2:	4a3e      	ldr	r2, [pc, #248]	; (20fcc <work_queue_main+0x1e4>)
   20ed4:	f240 239b 	movw	r3, #667	; 0x29b
   20ed8:	f003 fc08 	bl	246ec <assert_print>
   20edc:	483b      	ldr	r0, [pc, #236]	; (20fcc <work_queue_main+0x1e4>)
   20ede:	f240 219b 	movw	r1, #667	; 0x29b
   20ee2:	e79f      	b.n	20e24 <work_queue_main+0x3c>
		handler(work);
   20ee4:	4628      	mov	r0, r5
   20ee6:	47c8      	blx	r9
	__asm__ volatile(
   20ee8:	f04f 0340 	mov.w	r3, #64	; 0x40
   20eec:	f3ef 8a11 	mrs	sl, BASEPRI
   20ef0:	f383 8812 	msr	BASEPRI_MAX, r3
   20ef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ef8:	4630      	mov	r0, r6
   20efa:	f7ff fbe3 	bl	206c4 <z_spin_lock_valid>
   20efe:	2800      	cmp	r0, #0
   20f00:	d084      	beq.n	20e0c <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   20f02:	4630      	mov	r0, r6
   20f04:	f7ff fbfc 	bl	20700 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20f08:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20f0a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   20f0c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20f10:	d417      	bmi.n	20f42 <work_queue_main+0x15a>
	*flagp &= ~BIT(bit);
   20f12:	60ea      	str	r2, [r5, #12]
   20f14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   20f18:	f023 0302 	bic.w	r3, r3, #2
   20f1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f20:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   20f22:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20f26:	f7ff fbdb 	bl	206e0 <z_spin_unlock_valid>
   20f2a:	2800      	cmp	r0, #0
   20f2c:	d0b2      	beq.n	20e94 <work_queue_main+0xac>
	__asm__ volatile(
   20f2e:	f38a 8811 	msr	BASEPRI, sl
   20f32:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20f36:	2d00      	cmp	r5, #0
   20f38:	f47f af5c 	bne.w	20df4 <work_queue_main+0xc>
	z_impl_k_yield();
   20f3c:	f001 fb94 	bl	22668 <z_impl_k_yield>
}
   20f40:	e758      	b.n	20df4 <work_queue_main+0xc>
	return list->head;
   20f42:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20f44:	f023 0303 	bic.w	r3, r3, #3
   20f48:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20f4a:	2800      	cmp	r0, #0
   20f4c:	d0e2      	beq.n	20f14 <work_queue_main+0x12c>
	return node->next;
   20f4e:	f04f 0800 	mov.w	r8, #0
   20f52:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   20f56:	46c3      	mov	fp, r8
   20f58:	2800      	cmp	r0, #0
   20f5a:	d0db      	beq.n	20f14 <work_queue_main+0x12c>
		if (wc->work == work) {
   20f5c:	6843      	ldr	r3, [r0, #4]
   20f5e:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   20f60:	4602      	mov	r2, r0
		if (wc->work == work) {
   20f62:	d10d      	bne.n	20f80 <work_queue_main+0x198>
	return node->next;
   20f64:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20f66:	f1b8 0f00 	cmp.w	r8, #0
   20f6a:	d112      	bne.n	20f92 <work_queue_main+0x1aa>
   20f6c:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   20f6e:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20f70:	4283      	cmp	r3, r0
   20f72:	d100      	bne.n	20f76 <work_queue_main+0x18e>
	list->tail = node;
   20f74:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20f76:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   20f7a:	f7ff fe5d 	bl	20c38 <z_impl_k_sem_give>
}
   20f7e:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20f80:	f1b9 0f00 	cmp.w	r9, #0
   20f84:	d00d      	beq.n	20fa2 <work_queue_main+0x1ba>
	return node->next;
   20f86:	f8d9 3000 	ldr.w	r3, [r9]
   20f8a:	4648      	mov	r0, r9
   20f8c:	4690      	mov	r8, r2
   20f8e:	4699      	mov	r9, r3
   20f90:	e7e2      	b.n	20f58 <work_queue_main+0x170>
	parent->next = child;
   20f92:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20f96:	687b      	ldr	r3, [r7, #4]
   20f98:	4283      	cmp	r3, r0
	list->tail = node;
   20f9a:	bf08      	it	eq
   20f9c:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   20fa0:	e7e9      	b.n	20f76 <work_queue_main+0x18e>
   20fa2:	464b      	mov	r3, r9
   20fa4:	e7f1      	b.n	20f8a <work_queue_main+0x1a2>
   20fa6:	bf00      	nop
   20fa8:	200030e4 	.word	0x200030e4
   20fac:	200030dc 	.word	0x200030dc
   20fb0:	0002837e 	.word	0x0002837e
   20fb4:	000283d7 	.word	0x000283d7
   20fb8:	00027f8a 	.word	0x00027f8a
   20fbc:	000283ec 	.word	0x000283ec
   20fc0:	000283ab 	.word	0x000283ab
   20fc4:	000283c2 	.word	0x000283c2
   20fc8:	0002b646 	.word	0x0002b646
   20fcc:	0002b625 	.word	0x0002b625

00020fd0 <cancel_sync_locked>:
{
   20fd0:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   20fd2:	68c3      	ldr	r3, [r0, #12]
   20fd4:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   20fd8:	079b      	lsls	r3, r3, #30
{
   20fda:	4605      	mov	r5, r0
   20fdc:	460c      	mov	r4, r1
	if (ret) {
   20fde:	d50d      	bpl.n	20ffc <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20fe0:	2201      	movs	r2, #1
   20fe2:	2100      	movs	r1, #0
   20fe4:	f104 0008 	add.w	r0, r4, #8
   20fe8:	f005 fe8d 	bl	26d06 <z_impl_k_sem_init>
	parent->next = child;
   20fec:	2300      	movs	r3, #0
   20fee:	6023      	str	r3, [r4, #0]
	return list->tail;
   20ff0:	4b05      	ldr	r3, [pc, #20]	; (21008 <cancel_sync_locked+0x38>)
	canceler->work = work;
   20ff2:	6065      	str	r5, [r4, #4]
   20ff4:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   20ff6:	b91a      	cbnz	r2, 21000 <cancel_sync_locked+0x30>
	list->head = node;
   20ff8:	e9c3 4400 	strd	r4, r4, [r3]
}
   20ffc:	4630      	mov	r0, r6
   20ffe:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21000:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21002:	605c      	str	r4, [r3, #4]
}
   21004:	e7fa      	b.n	20ffc <cancel_sync_locked+0x2c>
   21006:	bf00      	nop
   21008:	200030dc 	.word	0x200030dc

0002100c <submit_to_queue_locked>:
{
   2100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2100e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21010:	079a      	lsls	r2, r3, #30
{
   21012:	4604      	mov	r4, r0
   21014:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21016:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2101a:	d439      	bmi.n	21090 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2101c:	075b      	lsls	r3, r3, #29
   2101e:	d425      	bmi.n	2106c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   21020:	680b      	ldr	r3, [r1, #0]
   21022:	b90b      	cbnz	r3, 21028 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21024:	6883      	ldr	r3, [r0, #8]
   21026:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   21028:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2102a:	07dd      	lsls	r5, r3, #31
   2102c:	d521      	bpl.n	21072 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   2102e:	68a3      	ldr	r3, [r4, #8]
   21030:	b95b      	cbnz	r3, 2104a <submit_to_queue_locked+0x3e>
   21032:	4928      	ldr	r1, [pc, #160]	; (210d4 <submit_to_queue_locked+0xc8>)
   21034:	4828      	ldr	r0, [pc, #160]	; (210d8 <submit_to_queue_locked+0xcc>)
   21036:	4a29      	ldr	r2, [pc, #164]	; (210dc <submit_to_queue_locked+0xd0>)
   21038:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2103c:	f003 fb56 	bl	246ec <assert_print>
   21040:	4826      	ldr	r0, [pc, #152]	; (210dc <submit_to_queue_locked+0xd0>)
   21042:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   21046:	f003 fb4a 	bl	246de <assert_post_action>
			*queuep = work->queue;
   2104a:	603b      	str	r3, [r7, #0]
			ret = 2;
   2104c:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   2104e:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   21050:	2d00      	cmp	r5, #0
   21052:	d03c      	beq.n	210ce <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21054:	4b22      	ldr	r3, [pc, #136]	; (210e0 <submit_to_queue_locked+0xd4>)
   21056:	689b      	ldr	r3, [r3, #8]
   21058:	42ab      	cmp	r3, r5
   2105a:	d00c      	beq.n	21076 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   2105c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21060:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21062:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21066:	d416      	bmi.n	21096 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   21068:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2106c:	2300      	movs	r3, #0
   2106e:	603b      	str	r3, [r7, #0]
	return ret;
   21070:	e027      	b.n	210c2 <submit_to_queue_locked+0xb6>
		ret = 1;
   21072:	2601      	movs	r6, #1
   21074:	e7eb      	b.n	2104e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21076:	f005 fdf8 	bl	26c6a <k_is_in_isr>
   2107a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   2107e:	2800      	cmp	r0, #0
   21080:	d1ee      	bne.n	21060 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21082:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   21084:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21088:	d5ee      	bpl.n	21068 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   2108a:	b152      	cbz	r2, 210a2 <submit_to_queue_locked+0x96>
   2108c:	075b      	lsls	r3, r3, #29
   2108e:	d408      	bmi.n	210a2 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   21090:	f06f 060f 	mvn.w	r6, #15
   21094:	e7ea      	b.n	2106c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   21096:	2a00      	cmp	r2, #0
   21098:	d1fa      	bne.n	21090 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   2109a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2109e:	2b00      	cmp	r3, #0
   210a0:	d1f6      	bne.n	21090 <submit_to_queue_locked+0x84>
	parent->next = child;
   210a2:	2300      	movs	r3, #0
   210a4:	6023      	str	r3, [r4, #0]
	return list->tail;
   210a6:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   210aa:	b963      	cbnz	r3, 210c6 <submit_to_queue_locked+0xba>
	list->head = node;
   210ac:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   210b0:	4628      	mov	r0, r5
   210b2:	f005 fe52 	bl	26d5a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   210b6:	68e3      	ldr	r3, [r4, #12]
   210b8:	f043 0304 	orr.w	r3, r3, #4
   210bc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   210be:	683b      	ldr	r3, [r7, #0]
   210c0:	60a3      	str	r3, [r4, #8]
}
   210c2:	4630      	mov	r0, r6
   210c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   210c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   210c8:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   210cc:	e7f0      	b.n	210b0 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   210ce:	f06f 0615 	mvn.w	r6, #21
   210d2:	e7cb      	b.n	2106c <submit_to_queue_locked+0x60>
   210d4:	0002b65d 	.word	0x0002b65d
   210d8:	00027f8a 	.word	0x00027f8a
   210dc:	0002b625 	.word	0x0002b625
   210e0:	200030a8 	.word	0x200030a8

000210e4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   210e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   210e6:	4604      	mov	r4, r0
	__asm__ volatile(
   210e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   210ec:	f3ef 8511 	mrs	r5, BASEPRI
   210f0:	f383 8812 	msr	BASEPRI_MAX, r3
   210f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210f8:	481c      	ldr	r0, [pc, #112]	; (2116c <work_timeout+0x88>)
   210fa:	f7ff fae3 	bl	206c4 <z_spin_lock_valid>
   210fe:	b968      	cbnz	r0, 2111c <work_timeout+0x38>
   21100:	4a1b      	ldr	r2, [pc, #108]	; (21170 <work_timeout+0x8c>)
   21102:	491c      	ldr	r1, [pc, #112]	; (21174 <work_timeout+0x90>)
   21104:	481c      	ldr	r0, [pc, #112]	; (21178 <work_timeout+0x94>)
   21106:	2394      	movs	r3, #148	; 0x94
   21108:	f003 faf0 	bl	246ec <assert_print>
   2110c:	4917      	ldr	r1, [pc, #92]	; (2116c <work_timeout+0x88>)
   2110e:	481b      	ldr	r0, [pc, #108]	; (2117c <work_timeout+0x98>)
   21110:	f003 faec 	bl	246ec <assert_print>
   21114:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21116:	4816      	ldr	r0, [pc, #88]	; (21170 <work_timeout+0x8c>)
   21118:	f003 fae1 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   2111c:	4813      	ldr	r0, [pc, #76]	; (2116c <work_timeout+0x88>)
   2111e:	f7ff faef 	bl	20700 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21122:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21124:	2103      	movs	r1, #3
   21126:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   21128:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2112a:	f1a4 0610 	sub.w	r6, r4, #16
   2112e:	f005 fdfa 	bl	26d26 <flag_test_and_clear>
   21132:	b128      	cbz	r0, 21140 <work_timeout+0x5c>
		queue = dw->queue;
   21134:	69a3      	ldr	r3, [r4, #24]
   21136:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21138:	a901      	add	r1, sp, #4
   2113a:	4630      	mov	r0, r6
   2113c:	f7ff ff66 	bl	2100c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21140:	480a      	ldr	r0, [pc, #40]	; (2116c <work_timeout+0x88>)
   21142:	f7ff facd 	bl	206e0 <z_spin_unlock_valid>
   21146:	b958      	cbnz	r0, 21160 <work_timeout+0x7c>
   21148:	4a09      	ldr	r2, [pc, #36]	; (21170 <work_timeout+0x8c>)
   2114a:	490d      	ldr	r1, [pc, #52]	; (21180 <work_timeout+0x9c>)
   2114c:	480a      	ldr	r0, [pc, #40]	; (21178 <work_timeout+0x94>)
   2114e:	23c2      	movs	r3, #194	; 0xc2
   21150:	f003 facc 	bl	246ec <assert_print>
   21154:	4905      	ldr	r1, [pc, #20]	; (2116c <work_timeout+0x88>)
   21156:	480b      	ldr	r0, [pc, #44]	; (21184 <work_timeout+0xa0>)
   21158:	f003 fac8 	bl	246ec <assert_print>
   2115c:	21c2      	movs	r1, #194	; 0xc2
   2115e:	e7da      	b.n	21116 <work_timeout+0x32>
	__asm__ volatile(
   21160:	f385 8811 	msr	BASEPRI, r5
   21164:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   21168:	b002      	add	sp, #8
   2116a:	bd70      	pop	{r4, r5, r6, pc}
   2116c:	200030e4 	.word	0x200030e4
   21170:	0002837e 	.word	0x0002837e
   21174:	000283d7 	.word	0x000283d7
   21178:	00027f8a 	.word	0x00027f8a
   2117c:	000283ec 	.word	0x000283ec
   21180:	000283ab 	.word	0x000283ab
   21184:	000283c2 	.word	0x000283c2

00021188 <k_work_init>:
{
   21188:	b538      	push	{r3, r4, r5, lr}
   2118a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   2118c:	4604      	mov	r4, r0
   2118e:	b948      	cbnz	r0, 211a4 <k_work_init+0x1c>
   21190:	490c      	ldr	r1, [pc, #48]	; (211c4 <k_work_init+0x3c>)
   21192:	4a0d      	ldr	r2, [pc, #52]	; (211c8 <k_work_init+0x40>)
   21194:	480d      	ldr	r0, [pc, #52]	; (211cc <k_work_init+0x44>)
   21196:	2389      	movs	r3, #137	; 0x89
   21198:	f003 faa8 	bl	246ec <assert_print>
   2119c:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   2119e:	480a      	ldr	r0, [pc, #40]	; (211c8 <k_work_init+0x40>)
   211a0:	f003 fa9d 	bl	246de <assert_post_action>
   211a4:	b939      	cbnz	r1, 211b6 <k_work_init+0x2e>
   211a6:	490a      	ldr	r1, [pc, #40]	; (211d0 <k_work_init+0x48>)
   211a8:	4a07      	ldr	r2, [pc, #28]	; (211c8 <k_work_init+0x40>)
   211aa:	4808      	ldr	r0, [pc, #32]	; (211cc <k_work_init+0x44>)
   211ac:	238a      	movs	r3, #138	; 0x8a
   211ae:	f003 fa9d 	bl	246ec <assert_print>
   211b2:	218a      	movs	r1, #138	; 0x8a
   211b4:	e7f3      	b.n	2119e <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   211b6:	2210      	movs	r2, #16
   211b8:	2100      	movs	r1, #0
   211ba:	f003 feaf 	bl	24f1c <memset>
   211be:	6065      	str	r5, [r4, #4]
}
   211c0:	bd38      	pop	{r3, r4, r5, pc}
   211c2:	bf00      	nop
   211c4:	0002b6fc 	.word	0x0002b6fc
   211c8:	0002b625 	.word	0x0002b625
   211cc:	00027f8a 	.word	0x00027f8a
   211d0:	0002b646 	.word	0x0002b646

000211d4 <k_work_busy_get>:
{
   211d4:	b538      	push	{r3, r4, r5, lr}
   211d6:	4604      	mov	r4, r0
	__asm__ volatile(
   211d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   211dc:	f3ef 8511 	mrs	r5, BASEPRI
   211e0:	f383 8812 	msr	BASEPRI_MAX, r3
   211e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   211e8:	4816      	ldr	r0, [pc, #88]	; (21244 <k_work_busy_get+0x70>)
   211ea:	f7ff fa6b 	bl	206c4 <z_spin_lock_valid>
   211ee:	b968      	cbnz	r0, 2120c <k_work_busy_get+0x38>
   211f0:	4a15      	ldr	r2, [pc, #84]	; (21248 <k_work_busy_get+0x74>)
   211f2:	4916      	ldr	r1, [pc, #88]	; (2124c <k_work_busy_get+0x78>)
   211f4:	4816      	ldr	r0, [pc, #88]	; (21250 <k_work_busy_get+0x7c>)
   211f6:	2394      	movs	r3, #148	; 0x94
   211f8:	f003 fa78 	bl	246ec <assert_print>
   211fc:	4911      	ldr	r1, [pc, #68]	; (21244 <k_work_busy_get+0x70>)
   211fe:	4815      	ldr	r0, [pc, #84]	; (21254 <k_work_busy_get+0x80>)
   21200:	f003 fa74 	bl	246ec <assert_print>
   21204:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21206:	4810      	ldr	r0, [pc, #64]	; (21248 <k_work_busy_get+0x74>)
   21208:	f003 fa69 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   2120c:	480d      	ldr	r0, [pc, #52]	; (21244 <k_work_busy_get+0x70>)
   2120e:	f7ff fa77 	bl	20700 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   21212:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21214:	480b      	ldr	r0, [pc, #44]	; (21244 <k_work_busy_get+0x70>)
   21216:	f004 040f 	and.w	r4, r4, #15
   2121a:	f7ff fa61 	bl	206e0 <z_spin_unlock_valid>
   2121e:	b958      	cbnz	r0, 21238 <k_work_busy_get+0x64>
   21220:	4a09      	ldr	r2, [pc, #36]	; (21248 <k_work_busy_get+0x74>)
   21222:	490d      	ldr	r1, [pc, #52]	; (21258 <k_work_busy_get+0x84>)
   21224:	480a      	ldr	r0, [pc, #40]	; (21250 <k_work_busy_get+0x7c>)
   21226:	23c2      	movs	r3, #194	; 0xc2
   21228:	f003 fa60 	bl	246ec <assert_print>
   2122c:	4905      	ldr	r1, [pc, #20]	; (21244 <k_work_busy_get+0x70>)
   2122e:	480b      	ldr	r0, [pc, #44]	; (2125c <k_work_busy_get+0x88>)
   21230:	f003 fa5c 	bl	246ec <assert_print>
   21234:	21c2      	movs	r1, #194	; 0xc2
   21236:	e7e6      	b.n	21206 <k_work_busy_get+0x32>
	__asm__ volatile(
   21238:	f385 8811 	msr	BASEPRI, r5
   2123c:	f3bf 8f6f 	isb	sy
}
   21240:	4620      	mov	r0, r4
   21242:	bd38      	pop	{r3, r4, r5, pc}
   21244:	200030e4 	.word	0x200030e4
   21248:	0002837e 	.word	0x0002837e
   2124c:	000283d7 	.word	0x000283d7
   21250:	00027f8a 	.word	0x00027f8a
   21254:	000283ec 	.word	0x000283ec
   21258:	000283ab 	.word	0x000283ab
   2125c:	000283c2 	.word	0x000283c2

00021260 <z_work_submit_to_queue>:
{
   21260:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   21262:	460c      	mov	r4, r1
{
   21264:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   21266:	b959      	cbnz	r1, 21280 <z_work_submit_to_queue+0x20>
   21268:	4921      	ldr	r1, [pc, #132]	; (212f0 <z_work_submit_to_queue+0x90>)
   2126a:	4822      	ldr	r0, [pc, #136]	; (212f4 <z_work_submit_to_queue+0x94>)
   2126c:	4a22      	ldr	r2, [pc, #136]	; (212f8 <z_work_submit_to_queue+0x98>)
   2126e:	f44f 73ba 	mov.w	r3, #372	; 0x174
   21272:	f003 fa3b 	bl	246ec <assert_print>
   21276:	4820      	ldr	r0, [pc, #128]	; (212f8 <z_work_submit_to_queue+0x98>)
   21278:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2127c:	f003 fa2f 	bl	246de <assert_post_action>
	__asm__ volatile(
   21280:	f04f 0340 	mov.w	r3, #64	; 0x40
   21284:	f3ef 8511 	mrs	r5, BASEPRI
   21288:	f383 8812 	msr	BASEPRI_MAX, r3
   2128c:	f3bf 8f6f 	isb	sy
   21290:	481a      	ldr	r0, [pc, #104]	; (212fc <z_work_submit_to_queue+0x9c>)
   21292:	f7ff fa17 	bl	206c4 <z_spin_lock_valid>
   21296:	b960      	cbnz	r0, 212b2 <z_work_submit_to_queue+0x52>
   21298:	4a19      	ldr	r2, [pc, #100]	; (21300 <z_work_submit_to_queue+0xa0>)
   2129a:	491a      	ldr	r1, [pc, #104]	; (21304 <z_work_submit_to_queue+0xa4>)
   2129c:	4815      	ldr	r0, [pc, #84]	; (212f4 <z_work_submit_to_queue+0x94>)
   2129e:	2394      	movs	r3, #148	; 0x94
   212a0:	f003 fa24 	bl	246ec <assert_print>
   212a4:	4915      	ldr	r1, [pc, #84]	; (212fc <z_work_submit_to_queue+0x9c>)
   212a6:	4818      	ldr	r0, [pc, #96]	; (21308 <z_work_submit_to_queue+0xa8>)
   212a8:	f003 fa20 	bl	246ec <assert_print>
   212ac:	2194      	movs	r1, #148	; 0x94
   212ae:	4814      	ldr	r0, [pc, #80]	; (21300 <z_work_submit_to_queue+0xa0>)
   212b0:	e7e4      	b.n	2127c <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   212b2:	4812      	ldr	r0, [pc, #72]	; (212fc <z_work_submit_to_queue+0x9c>)
   212b4:	f7ff fa24 	bl	20700 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   212b8:	4620      	mov	r0, r4
   212ba:	a901      	add	r1, sp, #4
   212bc:	f7ff fea6 	bl	2100c <submit_to_queue_locked>
   212c0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212c2:	480e      	ldr	r0, [pc, #56]	; (212fc <z_work_submit_to_queue+0x9c>)
   212c4:	f7ff fa0c 	bl	206e0 <z_spin_unlock_valid>
   212c8:	b958      	cbnz	r0, 212e2 <z_work_submit_to_queue+0x82>
   212ca:	4a0d      	ldr	r2, [pc, #52]	; (21300 <z_work_submit_to_queue+0xa0>)
   212cc:	490f      	ldr	r1, [pc, #60]	; (2130c <z_work_submit_to_queue+0xac>)
   212ce:	4809      	ldr	r0, [pc, #36]	; (212f4 <z_work_submit_to_queue+0x94>)
   212d0:	23c2      	movs	r3, #194	; 0xc2
   212d2:	f003 fa0b 	bl	246ec <assert_print>
   212d6:	4909      	ldr	r1, [pc, #36]	; (212fc <z_work_submit_to_queue+0x9c>)
   212d8:	480d      	ldr	r0, [pc, #52]	; (21310 <z_work_submit_to_queue+0xb0>)
   212da:	f003 fa07 	bl	246ec <assert_print>
   212de:	21c2      	movs	r1, #194	; 0xc2
   212e0:	e7e5      	b.n	212ae <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   212e2:	f385 8811 	msr	BASEPRI, r5
   212e6:	f3bf 8f6f 	isb	sy
}
   212ea:	4620      	mov	r0, r4
   212ec:	b003      	add	sp, #12
   212ee:	bd30      	pop	{r4, r5, pc}
   212f0:	0002b6fc 	.word	0x0002b6fc
   212f4:	00027f8a 	.word	0x00027f8a
   212f8:	0002b625 	.word	0x0002b625
   212fc:	200030e4 	.word	0x200030e4
   21300:	0002837e 	.word	0x0002837e
   21304:	000283d7 	.word	0x000283d7
   21308:	000283ec 	.word	0x000283ec
   2130c:	000283ab 	.word	0x000283ab
   21310:	000283c2 	.word	0x000283c2

00021314 <k_work_submit>:
{
   21314:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21316:	4801      	ldr	r0, [pc, #4]	; (2131c <k_work_submit+0x8>)
   21318:	f005 bd59 	b.w	26dce <k_work_submit_to_queue>
   2131c:	20002bf0 	.word	0x20002bf0

00021320 <k_work_queue_init>:
{
   21320:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   21322:	b958      	cbnz	r0, 2133c <k_work_queue_init+0x1c>
   21324:	4908      	ldr	r1, [pc, #32]	; (21348 <k_work_queue_init+0x28>)
   21326:	4809      	ldr	r0, [pc, #36]	; (2134c <k_work_queue_init+0x2c>)
   21328:	4a09      	ldr	r2, [pc, #36]	; (21350 <k_work_queue_init+0x30>)
   2132a:	f240 23b9 	movw	r3, #697	; 0x2b9
   2132e:	f003 f9dd 	bl	246ec <assert_print>
   21332:	4807      	ldr	r0, [pc, #28]	; (21350 <k_work_queue_init+0x30>)
   21334:	f240 21b9 	movw	r1, #697	; 0x2b9
   21338:	f003 f9d1 	bl	246de <assert_post_action>
	*queue = (struct k_work_q) {
   2133c:	22e8      	movs	r2, #232	; 0xe8
   2133e:	2100      	movs	r1, #0
   21340:	f003 fdec 	bl	24f1c <memset>
}
   21344:	bd08      	pop	{r3, pc}
   21346:	bf00      	nop
   21348:	0002b663 	.word	0x0002b663
   2134c:	00027f8a 	.word	0x00027f8a
   21350:	0002b625 	.word	0x0002b625

00021354 <k_work_queue_start>:
{
   21354:	b5f0      	push	{r4, r5, r6, r7, lr}
   21356:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   21358:	4604      	mov	r4, r0
{
   2135a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   2135c:	b958      	cbnz	r0, 21376 <k_work_queue_start+0x22>
   2135e:	492b      	ldr	r1, [pc, #172]	; (2140c <k_work_queue_start+0xb8>)
   21360:	4a2b      	ldr	r2, [pc, #172]	; (21410 <k_work_queue_start+0xbc>)
   21362:	482c      	ldr	r0, [pc, #176]	; (21414 <k_work_queue_start+0xc0>)
   21364:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   21368:	f003 f9c0 	bl	246ec <assert_print>
   2136c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   21370:	4827      	ldr	r0, [pc, #156]	; (21410 <k_work_queue_start+0xbc>)
   21372:	f003 f9b4 	bl	246de <assert_post_action>
   21376:	b949      	cbnz	r1, 2138c <k_work_queue_start+0x38>
   21378:	4927      	ldr	r1, [pc, #156]	; (21418 <k_work_queue_start+0xc4>)
   2137a:	4a25      	ldr	r2, [pc, #148]	; (21410 <k_work_queue_start+0xbc>)
   2137c:	4825      	ldr	r0, [pc, #148]	; (21414 <k_work_queue_start+0xc0>)
   2137e:	f240 23c9 	movw	r3, #713	; 0x2c9
   21382:	f003 f9b3 	bl	246ec <assert_print>
   21386:	f240 21c9 	movw	r1, #713	; 0x2c9
   2138a:	e7f1      	b.n	21370 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   2138c:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   21390:	f010 0001 	ands.w	r0, r0, #1
   21394:	d009      	beq.n	213aa <k_work_queue_start+0x56>
   21396:	4921      	ldr	r1, [pc, #132]	; (2141c <k_work_queue_start+0xc8>)
   21398:	4a1d      	ldr	r2, [pc, #116]	; (21410 <k_work_queue_start+0xbc>)
   2139a:	481e      	ldr	r0, [pc, #120]	; (21414 <k_work_queue_start+0xc0>)
   2139c:	f240 23ca 	movw	r3, #714	; 0x2ca
   213a0:	f003 f9a4 	bl	246ec <assert_print>
   213a4:	f240 21ca 	movw	r1, #714	; 0x2ca
   213a8:	e7e2      	b.n	21370 <k_work_queue_start+0x1c>
	list->tail = NULL;
   213aa:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   213ae:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   213b2:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   213b6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   213ba:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8
	if ((cfg != NULL) && cfg->no_yield) {
   213be:	b31d      	cbz	r5, 21408 <k_work_queue_start+0xb4>
   213c0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   213c2:	2800      	cmp	r0, #0
   213c4:	f240 1001 	movw	r0, #257	; 0x101
   213c8:	bf08      	it	eq
   213ca:	2001      	moveq	r0, #1
	*flagp = flags;
   213cc:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   213d0:	2000      	movs	r0, #0
   213d2:	f04f 36ff 	mov.w	r6, #4294967295
   213d6:	f04f 37ff 	mov.w	r7, #4294967295
   213da:	e9cd 3003 	strd	r3, r0, [sp, #12]
   213de:	e9cd 0001 	strd	r0, r0, [sp, #4]
   213e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   213e6:	4b0e      	ldr	r3, [pc, #56]	; (21420 <k_work_queue_start+0xcc>)
   213e8:	9400      	str	r4, [sp, #0]
   213ea:	4620      	mov	r0, r4
   213ec:	f7ff f8a0 	bl	20530 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   213f0:	b125      	cbz	r5, 213fc <k_work_queue_start+0xa8>
   213f2:	6829      	ldr	r1, [r5, #0]
   213f4:	b111      	cbz	r1, 213fc <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   213f6:	4620      	mov	r0, r4
   213f8:	f005 fc3d 	bl	26c76 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   213fc:	4620      	mov	r0, r4
}
   213fe:	b009      	add	sp, #36	; 0x24
   21400:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21404:	f005 bc3c 	b.w	26c80 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21408:	2001      	movs	r0, #1
   2140a:	e7df      	b.n	213cc <k_work_queue_start+0x78>
   2140c:	0002b6bb 	.word	0x0002b6bb
   21410:	0002b625 	.word	0x0002b625
   21414:	00027f8a 	.word	0x00027f8a
   21418:	0002b6c1 	.word	0x0002b6c1
   2141c:	0002b6c7 	.word	0x0002b6c7
   21420:	00020de9 	.word	0x00020de9

00021424 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   21424:	b538      	push	{r3, r4, r5, lr}
   21426:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21428:	4604      	mov	r4, r0
   2142a:	b958      	cbnz	r0, 21444 <k_work_init_delayable+0x20>
   2142c:	490f      	ldr	r1, [pc, #60]	; (2146c <k_work_init_delayable+0x48>)
   2142e:	4a10      	ldr	r2, [pc, #64]	; (21470 <k_work_init_delayable+0x4c>)
   21430:	4810      	ldr	r0, [pc, #64]	; (21474 <k_work_init_delayable+0x50>)
   21432:	f44f 7350 	mov.w	r3, #832	; 0x340
   21436:	f003 f959 	bl	246ec <assert_print>
   2143a:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   2143e:	480c      	ldr	r0, [pc, #48]	; (21470 <k_work_init_delayable+0x4c>)
   21440:	f003 f94d 	bl	246de <assert_post_action>
   21444:	b949      	cbnz	r1, 2145a <k_work_init_delayable+0x36>
   21446:	490c      	ldr	r1, [pc, #48]	; (21478 <k_work_init_delayable+0x54>)
   21448:	4a09      	ldr	r2, [pc, #36]	; (21470 <k_work_init_delayable+0x4c>)
   2144a:	480a      	ldr	r0, [pc, #40]	; (21474 <k_work_init_delayable+0x50>)
   2144c:	f240 3341 	movw	r3, #833	; 0x341
   21450:	f003 f94c 	bl	246ec <assert_print>
   21454:	f240 3141 	movw	r1, #833	; 0x341
   21458:	e7f1      	b.n	2143e <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   2145a:	2230      	movs	r2, #48	; 0x30
   2145c:	2100      	movs	r1, #0
   2145e:	f003 fd5d 	bl	24f1c <memset>
   21462:	f44f 7380 	mov.w	r3, #256	; 0x100
   21466:	6065      	str	r5, [r4, #4]
   21468:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2146a:	bd38      	pop	{r3, r4, r5, pc}
   2146c:	0002b6fb 	.word	0x0002b6fb
   21470:	0002b625 	.word	0x0002b625
   21474:	00027f8a 	.word	0x00027f8a
   21478:	0002b646 	.word	0x0002b646

0002147c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2147c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2147e:	4616      	mov	r6, r2
   21480:	9001      	str	r0, [sp, #4]
   21482:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21484:	460c      	mov	r4, r1
   21486:	b959      	cbnz	r1, 214a0 <k_work_schedule_for_queue+0x24>
   21488:	492d      	ldr	r1, [pc, #180]	; (21540 <k_work_schedule_for_queue+0xc4>)
   2148a:	482e      	ldr	r0, [pc, #184]	; (21544 <k_work_schedule_for_queue+0xc8>)
   2148c:	4a2e      	ldr	r2, [pc, #184]	; (21548 <k_work_schedule_for_queue+0xcc>)
   2148e:	f240 33ba 	movw	r3, #954	; 0x3ba
   21492:	f003 f92b 	bl	246ec <assert_print>
   21496:	482c      	ldr	r0, [pc, #176]	; (21548 <k_work_schedule_for_queue+0xcc>)
   21498:	f240 31ba 	movw	r1, #954	; 0x3ba
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2149c:	f003 f91f 	bl	246de <assert_post_action>
	__asm__ volatile(
   214a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   214a4:	f3ef 8711 	mrs	r7, BASEPRI
   214a8:	f383 8812 	msr	BASEPRI_MAX, r3
   214ac:	f3bf 8f6f 	isb	sy
   214b0:	4826      	ldr	r0, [pc, #152]	; (2154c <k_work_schedule_for_queue+0xd0>)
   214b2:	f7ff f907 	bl	206c4 <z_spin_lock_valid>
   214b6:	b960      	cbnz	r0, 214d2 <k_work_schedule_for_queue+0x56>
   214b8:	4a25      	ldr	r2, [pc, #148]	; (21550 <k_work_schedule_for_queue+0xd4>)
   214ba:	4926      	ldr	r1, [pc, #152]	; (21554 <k_work_schedule_for_queue+0xd8>)
   214bc:	4821      	ldr	r0, [pc, #132]	; (21544 <k_work_schedule_for_queue+0xc8>)
   214be:	2394      	movs	r3, #148	; 0x94
   214c0:	f003 f914 	bl	246ec <assert_print>
   214c4:	4921      	ldr	r1, [pc, #132]	; (2154c <k_work_schedule_for_queue+0xd0>)
   214c6:	4824      	ldr	r0, [pc, #144]	; (21558 <k_work_schedule_for_queue+0xdc>)
   214c8:	f003 f910 	bl	246ec <assert_print>
   214cc:	2194      	movs	r1, #148	; 0x94
   214ce:	4820      	ldr	r0, [pc, #128]	; (21550 <k_work_schedule_for_queue+0xd4>)
   214d0:	e7e4      	b.n	2149c <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   214d2:	481e      	ldr	r0, [pc, #120]	; (2154c <k_work_schedule_for_queue+0xd0>)
   214d4:	f7ff f914 	bl	20700 <z_spin_lock_set_owner>
	return *flagp;
   214d8:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   214da:	f013 0f0e 	tst.w	r3, #14
   214de:	d125      	bne.n	2152c <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   214e0:	ea55 0206 	orrs.w	r2, r5, r6
   214e4:	d114      	bne.n	21510 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   214e6:	4620      	mov	r0, r4
   214e8:	a901      	add	r1, sp, #4
   214ea:	f7ff fd8f 	bl	2100c <submit_to_queue_locked>
   214ee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214f0:	4816      	ldr	r0, [pc, #88]	; (2154c <k_work_schedule_for_queue+0xd0>)
   214f2:	f7ff f8f5 	bl	206e0 <z_spin_unlock_valid>
   214f6:	b9d8      	cbnz	r0, 21530 <k_work_schedule_for_queue+0xb4>
   214f8:	4a15      	ldr	r2, [pc, #84]	; (21550 <k_work_schedule_for_queue+0xd4>)
   214fa:	4918      	ldr	r1, [pc, #96]	; (2155c <k_work_schedule_for_queue+0xe0>)
   214fc:	4811      	ldr	r0, [pc, #68]	; (21544 <k_work_schedule_for_queue+0xc8>)
   214fe:	23c2      	movs	r3, #194	; 0xc2
   21500:	f003 f8f4 	bl	246ec <assert_print>
   21504:	4911      	ldr	r1, [pc, #68]	; (2154c <k_work_schedule_for_queue+0xd0>)
   21506:	4816      	ldr	r0, [pc, #88]	; (21560 <k_work_schedule_for_queue+0xe4>)
   21508:	f003 f8f0 	bl	246ec <assert_print>
   2150c:	21c2      	movs	r1, #194	; 0xc2
   2150e:	e7de      	b.n	214ce <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   21510:	f043 0308 	orr.w	r3, r3, #8
   21514:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21516:	9b01      	ldr	r3, [sp, #4]
   21518:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2151a:	f104 0010 	add.w	r0, r4, #16
   2151e:	4911      	ldr	r1, [pc, #68]	; (21564 <k_work_schedule_for_queue+0xe8>)
   21520:	4632      	mov	r2, r6
   21522:	462b      	mov	r3, r5
   21524:	f001 fbac 	bl	22c80 <z_add_timeout>
	return ret;
   21528:	2401      	movs	r4, #1
   2152a:	e7e1      	b.n	214f0 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   2152c:	2400      	movs	r4, #0
   2152e:	e7df      	b.n	214f0 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   21530:	f387 8811 	msr	BASEPRI, r7
   21534:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21538:	4620      	mov	r0, r4
   2153a:	b003      	add	sp, #12
   2153c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2153e:	bf00      	nop
   21540:	0002b6fb 	.word	0x0002b6fb
   21544:	00027f8a 	.word	0x00027f8a
   21548:	0002b625 	.word	0x0002b625
   2154c:	200030e4 	.word	0x200030e4
   21550:	0002837e 	.word	0x0002837e
   21554:	000283d7 	.word	0x000283d7
   21558:	000283ec 	.word	0x000283ec
   2155c:	000283ab 	.word	0x000283ab
   21560:	000283c2 	.word	0x000283c2
   21564:	000210e5 	.word	0x000210e5

00021568 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   21568:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2156a:	4801      	ldr	r0, [pc, #4]	; (21570 <k_work_schedule+0x8>)
   2156c:	f7ff bf86 	b.w	2147c <k_work_schedule_for_queue>
   21570:	20002bf0 	.word	0x20002bf0

00021574 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21576:	4616      	mov	r6, r2
   21578:	9001      	str	r0, [sp, #4]
   2157a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2157c:	460c      	mov	r4, r1
   2157e:	b959      	cbnz	r1, 21598 <k_work_reschedule_for_queue+0x24>
   21580:	492c      	ldr	r1, [pc, #176]	; (21634 <k_work_reschedule_for_queue+0xc0>)
   21582:	482d      	ldr	r0, [pc, #180]	; (21638 <k_work_reschedule_for_queue+0xc4>)
   21584:	4a2d      	ldr	r2, [pc, #180]	; (2163c <k_work_reschedule_for_queue+0xc8>)
   21586:	f240 33de 	movw	r3, #990	; 0x3de
   2158a:	f003 f8af 	bl	246ec <assert_print>
   2158e:	482b      	ldr	r0, [pc, #172]	; (2163c <k_work_reschedule_for_queue+0xc8>)
   21590:	f240 31de 	movw	r1, #990	; 0x3de
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21594:	f003 f8a3 	bl	246de <assert_post_action>
	__asm__ volatile(
   21598:	f04f 0340 	mov.w	r3, #64	; 0x40
   2159c:	f3ef 8711 	mrs	r7, BASEPRI
   215a0:	f383 8812 	msr	BASEPRI_MAX, r3
   215a4:	f3bf 8f6f 	isb	sy
   215a8:	4825      	ldr	r0, [pc, #148]	; (21640 <k_work_reschedule_for_queue+0xcc>)
   215aa:	f7ff f88b 	bl	206c4 <z_spin_lock_valid>
   215ae:	b960      	cbnz	r0, 215ca <k_work_reschedule_for_queue+0x56>
   215b0:	4a24      	ldr	r2, [pc, #144]	; (21644 <k_work_reschedule_for_queue+0xd0>)
   215b2:	4925      	ldr	r1, [pc, #148]	; (21648 <k_work_reschedule_for_queue+0xd4>)
   215b4:	4820      	ldr	r0, [pc, #128]	; (21638 <k_work_reschedule_for_queue+0xc4>)
   215b6:	2394      	movs	r3, #148	; 0x94
   215b8:	f003 f898 	bl	246ec <assert_print>
   215bc:	4920      	ldr	r1, [pc, #128]	; (21640 <k_work_reschedule_for_queue+0xcc>)
   215be:	4823      	ldr	r0, [pc, #140]	; (2164c <k_work_reschedule_for_queue+0xd8>)
   215c0:	f003 f894 	bl	246ec <assert_print>
   215c4:	2194      	movs	r1, #148	; 0x94
   215c6:	481f      	ldr	r0, [pc, #124]	; (21644 <k_work_reschedule_for_queue+0xd0>)
   215c8:	e7e4      	b.n	21594 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   215ca:	481d      	ldr	r0, [pc, #116]	; (21640 <k_work_reschedule_for_queue+0xcc>)
   215cc:	f7ff f898 	bl	20700 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   215d0:	4620      	mov	r0, r4
   215d2:	f005 fbb3 	bl	26d3c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   215d6:	ea55 0306 	orrs.w	r3, r5, r6
   215da:	d114      	bne.n	21606 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   215dc:	4620      	mov	r0, r4
   215de:	a901      	add	r1, sp, #4
   215e0:	f7ff fd14 	bl	2100c <submit_to_queue_locked>
   215e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215e6:	4816      	ldr	r0, [pc, #88]	; (21640 <k_work_reschedule_for_queue+0xcc>)
   215e8:	f7ff f87a 	bl	206e0 <z_spin_unlock_valid>
   215ec:	b9d0      	cbnz	r0, 21624 <k_work_reschedule_for_queue+0xb0>
   215ee:	4a15      	ldr	r2, [pc, #84]	; (21644 <k_work_reschedule_for_queue+0xd0>)
   215f0:	4917      	ldr	r1, [pc, #92]	; (21650 <k_work_reschedule_for_queue+0xdc>)
   215f2:	4811      	ldr	r0, [pc, #68]	; (21638 <k_work_reschedule_for_queue+0xc4>)
   215f4:	23c2      	movs	r3, #194	; 0xc2
   215f6:	f003 f879 	bl	246ec <assert_print>
   215fa:	4911      	ldr	r1, [pc, #68]	; (21640 <k_work_reschedule_for_queue+0xcc>)
   215fc:	4815      	ldr	r0, [pc, #84]	; (21654 <k_work_reschedule_for_queue+0xe0>)
   215fe:	f003 f875 	bl	246ec <assert_print>
   21602:	21c2      	movs	r1, #194	; 0xc2
   21604:	e7df      	b.n	215c6 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   21606:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21608:	4913      	ldr	r1, [pc, #76]	; (21658 <k_work_reschedule_for_queue+0xe4>)
	*flagp |= BIT(bit);
   2160a:	f043 0308 	orr.w	r3, r3, #8
   2160e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21610:	9b01      	ldr	r3, [sp, #4]
   21612:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21614:	f104 0010 	add.w	r0, r4, #16
   21618:	4632      	mov	r2, r6
   2161a:	462b      	mov	r3, r5
   2161c:	f001 fb30 	bl	22c80 <z_add_timeout>
	return ret;
   21620:	2401      	movs	r4, #1
   21622:	e7e0      	b.n	215e6 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   21624:	f387 8811 	msr	BASEPRI, r7
   21628:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2162c:	4620      	mov	r0, r4
   2162e:	b003      	add	sp, #12
   21630:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21632:	bf00      	nop
   21634:	0002b6fb 	.word	0x0002b6fb
   21638:	00027f8a 	.word	0x00027f8a
   2163c:	0002b625 	.word	0x0002b625
   21640:	200030e4 	.word	0x200030e4
   21644:	0002837e 	.word	0x0002837e
   21648:	000283d7 	.word	0x000283d7
   2164c:	000283ec 	.word	0x000283ec
   21650:	000283ab 	.word	0x000283ab
   21654:	000283c2 	.word	0x000283c2
   21658:	000210e5 	.word	0x000210e5

0002165c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2165c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2165e:	4801      	ldr	r0, [pc, #4]	; (21664 <k_work_reschedule+0x8>)
   21660:	f7ff bf88 	b.w	21574 <k_work_reschedule_for_queue>
   21664:	20002bf0 	.word	0x20002bf0

00021668 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   21668:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2166a:	4604      	mov	r4, r0
   2166c:	b958      	cbnz	r0, 21686 <k_work_cancel_delayable+0x1e>
   2166e:	4922      	ldr	r1, [pc, #136]	; (216f8 <k_work_cancel_delayable+0x90>)
   21670:	4822      	ldr	r0, [pc, #136]	; (216fc <k_work_cancel_delayable+0x94>)
   21672:	4a23      	ldr	r2, [pc, #140]	; (21700 <k_work_cancel_delayable+0x98>)
   21674:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21678:	f003 f838 	bl	246ec <assert_print>
   2167c:	4820      	ldr	r0, [pc, #128]	; (21700 <k_work_cancel_delayable+0x98>)
   2167e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21682:	f003 f82c 	bl	246de <assert_post_action>
	__asm__ volatile(
   21686:	f04f 0340 	mov.w	r3, #64	; 0x40
   2168a:	f3ef 8511 	mrs	r5, BASEPRI
   2168e:	f383 8812 	msr	BASEPRI_MAX, r3
   21692:	f3bf 8f6f 	isb	sy
   21696:	481b      	ldr	r0, [pc, #108]	; (21704 <k_work_cancel_delayable+0x9c>)
   21698:	f7ff f814 	bl	206c4 <z_spin_lock_valid>
   2169c:	b960      	cbnz	r0, 216b8 <k_work_cancel_delayable+0x50>
   2169e:	4a1a      	ldr	r2, [pc, #104]	; (21708 <k_work_cancel_delayable+0xa0>)
   216a0:	491a      	ldr	r1, [pc, #104]	; (2170c <k_work_cancel_delayable+0xa4>)
   216a2:	4816      	ldr	r0, [pc, #88]	; (216fc <k_work_cancel_delayable+0x94>)
   216a4:	2394      	movs	r3, #148	; 0x94
   216a6:	f003 f821 	bl	246ec <assert_print>
   216aa:	4916      	ldr	r1, [pc, #88]	; (21704 <k_work_cancel_delayable+0x9c>)
   216ac:	4818      	ldr	r0, [pc, #96]	; (21710 <k_work_cancel_delayable+0xa8>)
   216ae:	f003 f81d 	bl	246ec <assert_print>
   216b2:	2194      	movs	r1, #148	; 0x94
   216b4:	4814      	ldr	r0, [pc, #80]	; (21708 <k_work_cancel_delayable+0xa0>)
   216b6:	e7e4      	b.n	21682 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   216b8:	4812      	ldr	r0, [pc, #72]	; (21704 <k_work_cancel_delayable+0x9c>)
   216ba:	f7ff f821 	bl	20700 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   216be:	4620      	mov	r0, r4
   216c0:	f005 fb3c 	bl	26d3c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   216c4:	4620      	mov	r0, r4
   216c6:	f005 fb4f 	bl	26d68 <cancel_async_locked>
   216ca:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216cc:	480d      	ldr	r0, [pc, #52]	; (21704 <k_work_cancel_delayable+0x9c>)
   216ce:	f7ff f807 	bl	206e0 <z_spin_unlock_valid>
   216d2:	b958      	cbnz	r0, 216ec <k_work_cancel_delayable+0x84>
   216d4:	4a0c      	ldr	r2, [pc, #48]	; (21708 <k_work_cancel_delayable+0xa0>)
   216d6:	490f      	ldr	r1, [pc, #60]	; (21714 <k_work_cancel_delayable+0xac>)
   216d8:	4808      	ldr	r0, [pc, #32]	; (216fc <k_work_cancel_delayable+0x94>)
   216da:	23c2      	movs	r3, #194	; 0xc2
   216dc:	f003 f806 	bl	246ec <assert_print>
   216e0:	4908      	ldr	r1, [pc, #32]	; (21704 <k_work_cancel_delayable+0x9c>)
   216e2:	480d      	ldr	r0, [pc, #52]	; (21718 <k_work_cancel_delayable+0xb0>)
   216e4:	f003 f802 	bl	246ec <assert_print>
   216e8:	21c2      	movs	r1, #194	; 0xc2
   216ea:	e7e3      	b.n	216b4 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   216ec:	f385 8811 	msr	BASEPRI, r5
   216f0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   216f4:	4620      	mov	r0, r4
   216f6:	bd38      	pop	{r3, r4, r5, pc}
   216f8:	0002b6fb 	.word	0x0002b6fb
   216fc:	00027f8a 	.word	0x00027f8a
   21700:	0002b625 	.word	0x0002b625
   21704:	200030e4 	.word	0x200030e4
   21708:	0002837e 	.word	0x0002837e
   2170c:	000283d7 	.word	0x000283d7
   21710:	000283ec 	.word	0x000283ec
   21714:	000283ab 	.word	0x000283ab
   21718:	000283c2 	.word	0x000283c2

0002171c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21720:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21722:	4605      	mov	r5, r0
   21724:	b958      	cbnz	r0, 2173e <k_work_cancel_delayable_sync+0x22>
   21726:	493a      	ldr	r1, [pc, #232]	; (21810 <k_work_cancel_delayable_sync+0xf4>)
   21728:	4a3a      	ldr	r2, [pc, #232]	; (21814 <k_work_cancel_delayable_sync+0xf8>)
   2172a:	483b      	ldr	r0, [pc, #236]	; (21818 <k_work_cancel_delayable_sync+0xfc>)
   2172c:	f240 4311 	movw	r3, #1041	; 0x411
   21730:	f002 ffdc 	bl	246ec <assert_print>
   21734:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   21738:	4836      	ldr	r0, [pc, #216]	; (21814 <k_work_cancel_delayable_sync+0xf8>)
   2173a:	f002 ffd0 	bl	246de <assert_post_action>
   2173e:	b949      	cbnz	r1, 21754 <k_work_cancel_delayable_sync+0x38>
   21740:	4936      	ldr	r1, [pc, #216]	; (2181c <k_work_cancel_delayable_sync+0x100>)
   21742:	4a34      	ldr	r2, [pc, #208]	; (21814 <k_work_cancel_delayable_sync+0xf8>)
   21744:	4834      	ldr	r0, [pc, #208]	; (21818 <k_work_cancel_delayable_sync+0xfc>)
   21746:	f240 4312 	movw	r3, #1042	; 0x412
   2174a:	f002 ffcf 	bl	246ec <assert_print>
   2174e:	f240 4112 	movw	r1, #1042	; 0x412
   21752:	e7f1      	b.n	21738 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   21754:	f005 fa89 	bl	26c6a <k_is_in_isr>
   21758:	4604      	mov	r4, r0
   2175a:	b148      	cbz	r0, 21770 <k_work_cancel_delayable_sync+0x54>
   2175c:	4930      	ldr	r1, [pc, #192]	; (21820 <k_work_cancel_delayable_sync+0x104>)
   2175e:	4a2d      	ldr	r2, [pc, #180]	; (21814 <k_work_cancel_delayable_sync+0xf8>)
   21760:	482d      	ldr	r0, [pc, #180]	; (21818 <k_work_cancel_delayable_sync+0xfc>)
   21762:	f240 4313 	movw	r3, #1043	; 0x413
   21766:	f002 ffc1 	bl	246ec <assert_print>
   2176a:	f240 4113 	movw	r1, #1043	; 0x413
   2176e:	e7e3      	b.n	21738 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   21770:	f04f 0340 	mov.w	r3, #64	; 0x40
   21774:	f3ef 8811 	mrs	r8, BASEPRI
   21778:	f383 8812 	msr	BASEPRI_MAX, r3
   2177c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21780:	4828      	ldr	r0, [pc, #160]	; (21824 <k_work_cancel_delayable_sync+0x108>)
   21782:	f7fe ff9f 	bl	206c4 <z_spin_lock_valid>
   21786:	b960      	cbnz	r0, 217a2 <k_work_cancel_delayable_sync+0x86>
   21788:	4a27      	ldr	r2, [pc, #156]	; (21828 <k_work_cancel_delayable_sync+0x10c>)
   2178a:	4928      	ldr	r1, [pc, #160]	; (2182c <k_work_cancel_delayable_sync+0x110>)
   2178c:	4822      	ldr	r0, [pc, #136]	; (21818 <k_work_cancel_delayable_sync+0xfc>)
   2178e:	2394      	movs	r3, #148	; 0x94
   21790:	f002 ffac 	bl	246ec <assert_print>
   21794:	4923      	ldr	r1, [pc, #140]	; (21824 <k_work_cancel_delayable_sync+0x108>)
   21796:	4826      	ldr	r0, [pc, #152]	; (21830 <k_work_cancel_delayable_sync+0x114>)
   21798:	f002 ffa8 	bl	246ec <assert_print>
   2179c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2179e:	4822      	ldr	r0, [pc, #136]	; (21828 <k_work_cancel_delayable_sync+0x10c>)
   217a0:	e7cb      	b.n	2173a <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   217a2:	4820      	ldr	r0, [pc, #128]	; (21824 <k_work_cancel_delayable_sync+0x108>)
   217a4:	f7fe ffac 	bl	20700 <z_spin_lock_set_owner>
	return *flagp;
   217a8:	68eb      	ldr	r3, [r5, #12]
   217aa:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   217ae:	2b00      	cmp	r3, #0
   217b0:	bf14      	ite	ne
   217b2:	2701      	movne	r7, #1
   217b4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   217b6:	d00a      	beq.n	217ce <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   217b8:	4628      	mov	r0, r5
   217ba:	f005 fabf 	bl	26d3c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   217be:	4628      	mov	r0, r5
   217c0:	f005 fad2 	bl	26d68 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   217c4:	4631      	mov	r1, r6
   217c6:	4628      	mov	r0, r5
   217c8:	f7ff fc02 	bl	20fd0 <cancel_sync_locked>
   217cc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217ce:	4815      	ldr	r0, [pc, #84]	; (21824 <k_work_cancel_delayable_sync+0x108>)
   217d0:	f7fe ff86 	bl	206e0 <z_spin_unlock_valid>
   217d4:	b958      	cbnz	r0, 217ee <k_work_cancel_delayable_sync+0xd2>
   217d6:	4a14      	ldr	r2, [pc, #80]	; (21828 <k_work_cancel_delayable_sync+0x10c>)
   217d8:	4916      	ldr	r1, [pc, #88]	; (21834 <k_work_cancel_delayable_sync+0x118>)
   217da:	480f      	ldr	r0, [pc, #60]	; (21818 <k_work_cancel_delayable_sync+0xfc>)
   217dc:	23c2      	movs	r3, #194	; 0xc2
   217de:	f002 ff85 	bl	246ec <assert_print>
   217e2:	4910      	ldr	r1, [pc, #64]	; (21824 <k_work_cancel_delayable_sync+0x108>)
   217e4:	4814      	ldr	r0, [pc, #80]	; (21838 <k_work_cancel_delayable_sync+0x11c>)
   217e6:	f002 ff81 	bl	246ec <assert_print>
   217ea:	21c2      	movs	r1, #194	; 0xc2
   217ec:	e7d7      	b.n	2179e <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   217ee:	f388 8811 	msr	BASEPRI, r8
   217f2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   217f6:	b13c      	cbz	r4, 21808 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   217f8:	f04f 32ff 	mov.w	r2, #4294967295
   217fc:	f04f 33ff 	mov.w	r3, #4294967295
   21800:	f106 0008 	add.w	r0, r6, #8
   21804:	f7ff fa5c 	bl	20cc0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   21808:	4638      	mov	r0, r7
   2180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2180e:	bf00      	nop
   21810:	0002b6fb 	.word	0x0002b6fb
   21814:	0002b625 	.word	0x0002b625
   21818:	00027f8a 	.word	0x00027f8a
   2181c:	0002b6a7 	.word	0x0002b6a7
   21820:	00029cfe 	.word	0x00029cfe
   21824:	200030e4 	.word	0x200030e4
   21828:	0002837e 	.word	0x0002837e
   2182c:	000283d7 	.word	0x000283d7
   21830:	000283ec 	.word	0x000283ec
   21834:	000283ab 	.word	0x000283ab
   21838:	000283c2 	.word	0x000283c2

0002183c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   2183c:	89c3      	ldrh	r3, [r0, #14]
   2183e:	2b7f      	cmp	r3, #127	; 0x7f
   21840:	d812      	bhi.n	21868 <sliceable+0x2c>
	int ret = slice_ticks;
   21842:	4b0a      	ldr	r3, [pc, #40]	; (2186c <sliceable+0x30>)
   21844:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   21846:	b163      	cbz	r3, 21862 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21848:	4b09      	ldr	r3, [pc, #36]	; (21870 <sliceable+0x34>)
   2184a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2184e:	681b      	ldr	r3, [r3, #0]
   21850:	429a      	cmp	r2, r3
   21852:	db09      	blt.n	21868 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   21854:	7b43      	ldrb	r3, [r0, #13]
   21856:	06db      	lsls	r3, r3, #27
   21858:	d106      	bne.n	21868 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2185a:	4b06      	ldr	r3, [pc, #24]	; (21874 <sliceable+0x38>)
   2185c:	1ac3      	subs	r3, r0, r3
   2185e:	bf18      	it	ne
   21860:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   21862:	f003 0001 	and.w	r0, r3, #1
   21866:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   21868:	2300      	movs	r3, #0
   2186a:	e7fa      	b.n	21862 <sliceable+0x26>
   2186c:	200030f0 	.word	0x200030f0
   21870:	200030ec 	.word	0x200030ec
   21874:	20002a60 	.word	0x20002a60

00021878 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   21878:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2187a:	b168      	cbz	r0, 21898 <slice_timeout+0x20>
   2187c:	4b10      	ldr	r3, [pc, #64]	; (218c0 <slice_timeout+0x48>)
   2187e:	4298      	cmp	r0, r3
   21880:	d30a      	bcc.n	21898 <slice_timeout+0x20>
   21882:	f103 0218 	add.w	r2, r3, #24
   21886:	4290      	cmp	r0, r2
   21888:	d206      	bcs.n	21898 <slice_timeout+0x20>
   2188a:	1ac0      	subs	r0, r0, r3
   2188c:	2218      	movs	r2, #24
   2188e:	fbb0 f3f2 	udiv	r3, r0, r2
   21892:	fb02 0313 	mls	r3, r2, r3, r0
   21896:	b15b      	cbz	r3, 218b0 <slice_timeout+0x38>
   21898:	490a      	ldr	r1, [pc, #40]	; (218c4 <slice_timeout+0x4c>)
   2189a:	480b      	ldr	r0, [pc, #44]	; (218c8 <slice_timeout+0x50>)
   2189c:	4a0b      	ldr	r2, [pc, #44]	; (218cc <slice_timeout+0x54>)
   2189e:	f240 13cb 	movw	r3, #459	; 0x1cb
   218a2:	f002 ff23 	bl	246ec <assert_print>
   218a6:	4809      	ldr	r0, [pc, #36]	; (218cc <slice_timeout+0x54>)
   218a8:	f240 11cb 	movw	r1, #459	; 0x1cb
   218ac:	f002 ff17 	bl	246de <assert_post_action>
   218b0:	4b07      	ldr	r3, [pc, #28]	; (218d0 <slice_timeout+0x58>)
   218b2:	10c0      	asrs	r0, r0, #3
   218b4:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   218b6:	4b07      	ldr	r3, [pc, #28]	; (218d4 <slice_timeout+0x5c>)
   218b8:	2201      	movs	r2, #1
   218ba:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   218bc:	bd08      	pop	{r3, pc}
   218be:	bf00      	nop
   218c0:	20002cd8 	.word	0x20002cd8
   218c4:	0002b732 	.word	0x0002b732
   218c8:	00027f8a 	.word	0x00027f8a
   218cc:	0002b710 	.word	0x0002b710
   218d0:	aaaaaaab 	.word	0xaaaaaaab
   218d4:	200036e5 	.word	0x200036e5

000218d8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   218d8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   218da:	4b0e      	ldr	r3, [pc, #56]	; (21914 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   218dc:	4c0e      	ldr	r4, [pc, #56]	; (21918 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   218de:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   218e0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   218e4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   218e8:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   218ea:	4620      	mov	r0, r4
   218ec:	f001 fa88 	bl	22e00 <z_abort_timeout>
	slice_expired[cpu] = false;
   218f0:	4b0a      	ldr	r3, [pc, #40]	; (2191c <z_reset_time_slice+0x44>)
   218f2:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   218f4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   218f6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   218f8:	f7ff ffa0 	bl	2183c <sliceable>
   218fc:	b148      	cbz	r0, 21912 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   218fe:	4b08      	ldr	r3, [pc, #32]	; (21920 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   21900:	4908      	ldr	r1, [pc, #32]	; (21924 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   21902:	681a      	ldr	r2, [r3, #0]
   21904:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   21906:	4620      	mov	r0, r4
   21908:	17d3      	asrs	r3, r2, #31
	}
}
   2190a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2190e:	f001 b9b7 	b.w	22c80 <z_add_timeout>
}
   21912:	bd70      	pop	{r4, r5, r6, pc}
   21914:	200030a8 	.word	0x200030a8
   21918:	20002cd8 	.word	0x20002cd8
   2191c:	200036e5 	.word	0x200036e5
   21920:	200030f0 	.word	0x200030f0
   21924:	00021879 	.word	0x00021879

00021928 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   21928:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2192a:	4d14      	ldr	r5, [pc, #80]	; (2197c <update_cache+0x54>)
   2192c:	462b      	mov	r3, r5
   2192e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21932:	429c      	cmp	r4, r3
   21934:	d000      	beq.n	21938 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21936:	b904      	cbnz	r4, 2193a <update_cache+0x12>
   21938:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   2193a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2193c:	b9a8      	cbnz	r0, 2196a <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   2193e:	b963      	cbnz	r3, 2195a <update_cache+0x32>
   21940:	490f      	ldr	r1, [pc, #60]	; (21980 <update_cache+0x58>)
   21942:	4a10      	ldr	r2, [pc, #64]	; (21984 <update_cache+0x5c>)
   21944:	4810      	ldr	r0, [pc, #64]	; (21988 <update_cache+0x60>)
   21946:	238a      	movs	r3, #138	; 0x8a
   21948:	f002 fed0 	bl	246ec <assert_print>
   2194c:	480f      	ldr	r0, [pc, #60]	; (2198c <update_cache+0x64>)
   2194e:	f002 fecd 	bl	246ec <assert_print>
   21952:	480c      	ldr	r0, [pc, #48]	; (21984 <update_cache+0x5c>)
   21954:	218a      	movs	r1, #138	; 0x8a
   21956:	f002 fec2 	bl	246de <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2195a:	7b5a      	ldrb	r2, [r3, #13]
   2195c:	06d2      	lsls	r2, r2, #27
   2195e:	d104      	bne.n	2196a <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21960:	69a2      	ldr	r2, [r4, #24]
   21962:	b912      	cbnz	r2, 2196a <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   21964:	89da      	ldrh	r2, [r3, #14]
   21966:	2a7f      	cmp	r2, #127	; 0x7f
   21968:	d805      	bhi.n	21976 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2196a:	429c      	cmp	r4, r3
   2196c:	d002      	beq.n	21974 <update_cache+0x4c>
			z_reset_time_slice(thread);
   2196e:	4620      	mov	r0, r4
   21970:	f7ff ffb2 	bl	218d8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   21974:	4623      	mov	r3, r4
   21976:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   21978:	bd38      	pop	{r3, r4, r5, pc}
   2197a:	bf00      	nop
   2197c:	200030a8 	.word	0x200030a8
   21980:	0002b8cb 	.word	0x0002b8cb
   21984:	0002b710 	.word	0x0002b710
   21988:	00027f8a 	.word	0x00027f8a
   2198c:	0002a56f 	.word	0x0002a56f

00021990 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   21990:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21992:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21996:	7b42      	ldrb	r2, [r0, #13]
   21998:	2b00      	cmp	r3, #0
   2199a:	db38      	blt.n	21a0e <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2199c:	06d3      	lsls	r3, r2, #27
   2199e:	d136      	bne.n	21a0e <ready_thread+0x7e>
	return node->next != NULL;
   219a0:	6983      	ldr	r3, [r0, #24]
   219a2:	2b00      	cmp	r3, #0
   219a4:	d133      	bne.n	21a0e <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   219a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   219aa:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   219ac:	4a18      	ldr	r2, [pc, #96]	; (21a10 <ready_thread+0x80>)
   219ae:	4290      	cmp	r0, r2
   219b0:	d109      	bne.n	219c6 <ready_thread+0x36>
   219b2:	4918      	ldr	r1, [pc, #96]	; (21a14 <ready_thread+0x84>)
   219b4:	4818      	ldr	r0, [pc, #96]	; (21a18 <ready_thread+0x88>)
   219b6:	4a19      	ldr	r2, [pc, #100]	; (21a1c <ready_thread+0x8c>)
   219b8:	23bc      	movs	r3, #188	; 0xbc
   219ba:	f002 fe97 	bl	246ec <assert_print>
   219be:	4817      	ldr	r0, [pc, #92]	; (21a1c <ready_thread+0x8c>)
   219c0:	21bc      	movs	r1, #188	; 0xbc
   219c2:	f002 fe8c 	bl	246de <assert_post_action>
	return list->head == list;
   219c6:	4916      	ldr	r1, [pc, #88]	; (21a20 <ready_thread+0x90>)
   219c8:	460a      	mov	r2, r1
   219ca:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   219ce:	4294      	cmp	r4, r2
   219d0:	bf18      	it	ne
   219d2:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   219d4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   219d6:	b923      	cbnz	r3, 219e2 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   219d8:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   219dc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   219de:	6248      	str	r0, [r1, #36]	; 0x24
}
   219e0:	e00c      	b.n	219fc <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   219e2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   219e6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   219ea:	42b5      	cmp	r5, r6
   219ec:	d00b      	beq.n	21a06 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   219ee:	42ae      	cmp	r6, r5
   219f0:	dd09      	ble.n	21a06 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   219f2:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   219f4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   219f8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   219fa:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   219fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21a00:	2000      	movs	r0, #0
   21a02:	f7ff bf91 	b.w	21928 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21a06:	42a3      	cmp	r3, r4
   21a08:	d0e6      	beq.n	219d8 <ready_thread+0x48>
   21a0a:	681b      	ldr	r3, [r3, #0]
   21a0c:	e7e3      	b.n	219d6 <ready_thread+0x46>
}
   21a0e:	bd70      	pop	{r4, r5, r6, pc}
   21a10:	20002a60 	.word	0x20002a60
   21a14:	0002b8f2 	.word	0x0002b8f2
   21a18:	00027f8a 	.word	0x00027f8a
   21a1c:	0002b710 	.word	0x0002b710
   21a20:	200030a8 	.word	0x200030a8

00021a24 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21a24:	b538      	push	{r3, r4, r5, lr}
   21a26:	4604      	mov	r4, r0
	__asm__ volatile(
   21a28:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a2c:	f3ef 8511 	mrs	r5, BASEPRI
   21a30:	f383 8812 	msr	BASEPRI_MAX, r3
   21a34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a38:	4816      	ldr	r0, [pc, #88]	; (21a94 <z_ready_thread+0x70>)
   21a3a:	f7fe fe43 	bl	206c4 <z_spin_lock_valid>
   21a3e:	b968      	cbnz	r0, 21a5c <z_ready_thread+0x38>
   21a40:	4a15      	ldr	r2, [pc, #84]	; (21a98 <z_ready_thread+0x74>)
   21a42:	4916      	ldr	r1, [pc, #88]	; (21a9c <z_ready_thread+0x78>)
   21a44:	4816      	ldr	r0, [pc, #88]	; (21aa0 <z_ready_thread+0x7c>)
   21a46:	2394      	movs	r3, #148	; 0x94
   21a48:	f002 fe50 	bl	246ec <assert_print>
   21a4c:	4911      	ldr	r1, [pc, #68]	; (21a94 <z_ready_thread+0x70>)
   21a4e:	4815      	ldr	r0, [pc, #84]	; (21aa4 <z_ready_thread+0x80>)
   21a50:	f002 fe4c 	bl	246ec <assert_print>
   21a54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a56:	4810      	ldr	r0, [pc, #64]	; (21a98 <z_ready_thread+0x74>)
   21a58:	f002 fe41 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   21a5c:	480d      	ldr	r0, [pc, #52]	; (21a94 <z_ready_thread+0x70>)
   21a5e:	f7fe fe4f 	bl	20700 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   21a62:	4620      	mov	r0, r4
   21a64:	f7ff ff94 	bl	21990 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a68:	480a      	ldr	r0, [pc, #40]	; (21a94 <z_ready_thread+0x70>)
   21a6a:	f7fe fe39 	bl	206e0 <z_spin_unlock_valid>
   21a6e:	b958      	cbnz	r0, 21a88 <z_ready_thread+0x64>
   21a70:	4a09      	ldr	r2, [pc, #36]	; (21a98 <z_ready_thread+0x74>)
   21a72:	490d      	ldr	r1, [pc, #52]	; (21aa8 <z_ready_thread+0x84>)
   21a74:	480a      	ldr	r0, [pc, #40]	; (21aa0 <z_ready_thread+0x7c>)
   21a76:	23c2      	movs	r3, #194	; 0xc2
   21a78:	f002 fe38 	bl	246ec <assert_print>
   21a7c:	4905      	ldr	r1, [pc, #20]	; (21a94 <z_ready_thread+0x70>)
   21a7e:	480b      	ldr	r0, [pc, #44]	; (21aac <z_ready_thread+0x88>)
   21a80:	f002 fe34 	bl	246ec <assert_print>
   21a84:	21c2      	movs	r1, #194	; 0xc2
   21a86:	e7e6      	b.n	21a56 <z_ready_thread+0x32>
	__asm__ volatile(
   21a88:	f385 8811 	msr	BASEPRI, r5
   21a8c:	f3bf 8f6f 	isb	sy
		}
	}
}
   21a90:	bd38      	pop	{r3, r4, r5, pc}
   21a92:	bf00      	nop
   21a94:	200030f4 	.word	0x200030f4
   21a98:	0002837e 	.word	0x0002837e
   21a9c:	000283d7 	.word	0x000283d7
   21aa0:	00027f8a 	.word	0x00027f8a
   21aa4:	000283ec 	.word	0x000283ec
   21aa8:	000283ab 	.word	0x000283ab
   21aac:	000283c2 	.word	0x000283c2

00021ab0 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   21ab0:	b538      	push	{r3, r4, r5, lr}
   21ab2:	4604      	mov	r4, r0
	__asm__ volatile(
   21ab4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ab8:	f3ef 8511 	mrs	r5, BASEPRI
   21abc:	f383 8812 	msr	BASEPRI_MAX, r3
   21ac0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ac4:	4817      	ldr	r0, [pc, #92]	; (21b24 <z_unpend_thread_no_timeout+0x74>)
   21ac6:	f7fe fdfd 	bl	206c4 <z_spin_lock_valid>
   21aca:	b968      	cbnz	r0, 21ae8 <z_unpend_thread_no_timeout+0x38>
   21acc:	4a16      	ldr	r2, [pc, #88]	; (21b28 <z_unpend_thread_no_timeout+0x78>)
   21ace:	4917      	ldr	r1, [pc, #92]	; (21b2c <z_unpend_thread_no_timeout+0x7c>)
   21ad0:	4817      	ldr	r0, [pc, #92]	; (21b30 <z_unpend_thread_no_timeout+0x80>)
   21ad2:	2394      	movs	r3, #148	; 0x94
   21ad4:	f002 fe0a 	bl	246ec <assert_print>
   21ad8:	4912      	ldr	r1, [pc, #72]	; (21b24 <z_unpend_thread_no_timeout+0x74>)
   21ada:	4816      	ldr	r0, [pc, #88]	; (21b34 <z_unpend_thread_no_timeout+0x84>)
   21adc:	f002 fe06 	bl	246ec <assert_print>
   21ae0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ae2:	4811      	ldr	r0, [pc, #68]	; (21b28 <z_unpend_thread_no_timeout+0x78>)
   21ae4:	f002 fdfb 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   21ae8:	480e      	ldr	r0, [pc, #56]	; (21b24 <z_unpend_thread_no_timeout+0x74>)
   21aea:	f7fe fe09 	bl	20700 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   21aee:	68a3      	ldr	r3, [r4, #8]
   21af0:	b113      	cbz	r3, 21af8 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   21af2:	4620      	mov	r0, r4
   21af4:	f000 fc50 	bl	22398 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21af8:	480a      	ldr	r0, [pc, #40]	; (21b24 <z_unpend_thread_no_timeout+0x74>)
   21afa:	f7fe fdf1 	bl	206e0 <z_spin_unlock_valid>
   21afe:	b958      	cbnz	r0, 21b18 <z_unpend_thread_no_timeout+0x68>
   21b00:	4a09      	ldr	r2, [pc, #36]	; (21b28 <z_unpend_thread_no_timeout+0x78>)
   21b02:	490d      	ldr	r1, [pc, #52]	; (21b38 <z_unpend_thread_no_timeout+0x88>)
   21b04:	480a      	ldr	r0, [pc, #40]	; (21b30 <z_unpend_thread_no_timeout+0x80>)
   21b06:	23c2      	movs	r3, #194	; 0xc2
   21b08:	f002 fdf0 	bl	246ec <assert_print>
   21b0c:	4905      	ldr	r1, [pc, #20]	; (21b24 <z_unpend_thread_no_timeout+0x74>)
   21b0e:	480b      	ldr	r0, [pc, #44]	; (21b3c <z_unpend_thread_no_timeout+0x8c>)
   21b10:	f002 fdec 	bl	246ec <assert_print>
   21b14:	21c2      	movs	r1, #194	; 0xc2
   21b16:	e7e4      	b.n	21ae2 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   21b18:	f385 8811 	msr	BASEPRI, r5
   21b1c:	f3bf 8f6f 	isb	sy
		}
	}
}
   21b20:	bd38      	pop	{r3, r4, r5, pc}
   21b22:	bf00      	nop
   21b24:	200030f4 	.word	0x200030f4
   21b28:	0002837e 	.word	0x0002837e
   21b2c:	000283d7 	.word	0x000283d7
   21b30:	00027f8a 	.word	0x00027f8a
   21b34:	000283ec 	.word	0x000283ec
   21b38:	000283ab 	.word	0x000283ab
   21b3c:	000283c2 	.word	0x000283c2

00021b40 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21b40:	b570      	push	{r4, r5, r6, lr}
   21b42:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21b44:	460d      	mov	r5, r1
   21b46:	b9e9      	cbnz	r1, 21b84 <z_reschedule+0x44>
   21b48:	f3ef 8605 	mrs	r6, IPSR
   21b4c:	b9d6      	cbnz	r6, 21b84 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   21b4e:	4b18      	ldr	r3, [pc, #96]	; (21bb0 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   21b50:	69da      	ldr	r2, [r3, #28]
   21b52:	689b      	ldr	r3, [r3, #8]
   21b54:	429a      	cmp	r2, r3
   21b56:	d015      	beq.n	21b84 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b58:	f7fe fdc2 	bl	206e0 <z_spin_unlock_valid>
   21b5c:	b968      	cbnz	r0, 21b7a <z_reschedule+0x3a>
   21b5e:	4a15      	ldr	r2, [pc, #84]	; (21bb4 <z_reschedule+0x74>)
   21b60:	4915      	ldr	r1, [pc, #84]	; (21bb8 <z_reschedule+0x78>)
   21b62:	4816      	ldr	r0, [pc, #88]	; (21bbc <z_reschedule+0x7c>)
   21b64:	23e1      	movs	r3, #225	; 0xe1
   21b66:	f002 fdc1 	bl	246ec <assert_print>
   21b6a:	4621      	mov	r1, r4
   21b6c:	4814      	ldr	r0, [pc, #80]	; (21bc0 <z_reschedule+0x80>)
   21b6e:	f002 fdbd 	bl	246ec <assert_print>
   21b72:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b74:	480f      	ldr	r0, [pc, #60]	; (21bb4 <z_reschedule+0x74>)
   21b76:	f002 fdb2 	bl	246de <assert_post_action>
	ret = arch_swap(key);
   21b7a:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21b80:	f7f3 ba1e 	b.w	14fc0 <arch_swap>
   21b84:	4620      	mov	r0, r4
   21b86:	f7fe fdab 	bl	206e0 <z_spin_unlock_valid>
   21b8a:	b958      	cbnz	r0, 21ba4 <z_reschedule+0x64>
   21b8c:	4a09      	ldr	r2, [pc, #36]	; (21bb4 <z_reschedule+0x74>)
   21b8e:	490a      	ldr	r1, [pc, #40]	; (21bb8 <z_reschedule+0x78>)
   21b90:	480a      	ldr	r0, [pc, #40]	; (21bbc <z_reschedule+0x7c>)
   21b92:	23c2      	movs	r3, #194	; 0xc2
   21b94:	f002 fdaa 	bl	246ec <assert_print>
   21b98:	4621      	mov	r1, r4
   21b9a:	4809      	ldr	r0, [pc, #36]	; (21bc0 <z_reschedule+0x80>)
   21b9c:	f002 fda6 	bl	246ec <assert_print>
   21ba0:	21c2      	movs	r1, #194	; 0xc2
   21ba2:	e7e7      	b.n	21b74 <z_reschedule+0x34>
   21ba4:	f385 8811 	msr	BASEPRI, r5
   21ba8:	f3bf 8f6f 	isb	sy
   21bac:	bd70      	pop	{r4, r5, r6, pc}
   21bae:	bf00      	nop
   21bb0:	200030a8 	.word	0x200030a8
   21bb4:	0002837e 	.word	0x0002837e
   21bb8:	000283ab 	.word	0x000283ab
   21bbc:	00027f8a 	.word	0x00027f8a
   21bc0:	000283c2 	.word	0x000283c2

00021bc4 <z_sched_start>:
{
   21bc4:	b538      	push	{r3, r4, r5, lr}
   21bc6:	4604      	mov	r4, r0
	__asm__ volatile(
   21bc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bcc:	f3ef 8511 	mrs	r5, BASEPRI
   21bd0:	f383 8812 	msr	BASEPRI_MAX, r3
   21bd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21bd8:	481c      	ldr	r0, [pc, #112]	; (21c4c <z_sched_start+0x88>)
   21bda:	f7fe fd73 	bl	206c4 <z_spin_lock_valid>
   21bde:	b968      	cbnz	r0, 21bfc <z_sched_start+0x38>
   21be0:	4a1b      	ldr	r2, [pc, #108]	; (21c50 <z_sched_start+0x8c>)
   21be2:	491c      	ldr	r1, [pc, #112]	; (21c54 <z_sched_start+0x90>)
   21be4:	481c      	ldr	r0, [pc, #112]	; (21c58 <z_sched_start+0x94>)
   21be6:	2394      	movs	r3, #148	; 0x94
   21be8:	f002 fd80 	bl	246ec <assert_print>
   21bec:	4917      	ldr	r1, [pc, #92]	; (21c4c <z_sched_start+0x88>)
   21bee:	481b      	ldr	r0, [pc, #108]	; (21c5c <z_sched_start+0x98>)
   21bf0:	f002 fd7c 	bl	246ec <assert_print>
   21bf4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21bf6:	4816      	ldr	r0, [pc, #88]	; (21c50 <z_sched_start+0x8c>)
   21bf8:	f002 fd71 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   21bfc:	4813      	ldr	r0, [pc, #76]	; (21c4c <z_sched_start+0x88>)
   21bfe:	f7fe fd7f 	bl	20700 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21c02:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21c04:	075a      	lsls	r2, r3, #29
   21c06:	d414      	bmi.n	21c32 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c08:	4810      	ldr	r0, [pc, #64]	; (21c4c <z_sched_start+0x88>)
   21c0a:	f7fe fd69 	bl	206e0 <z_spin_unlock_valid>
   21c0e:	b958      	cbnz	r0, 21c28 <z_sched_start+0x64>
   21c10:	4a0f      	ldr	r2, [pc, #60]	; (21c50 <z_sched_start+0x8c>)
   21c12:	4913      	ldr	r1, [pc, #76]	; (21c60 <z_sched_start+0x9c>)
   21c14:	4810      	ldr	r0, [pc, #64]	; (21c58 <z_sched_start+0x94>)
   21c16:	23c2      	movs	r3, #194	; 0xc2
   21c18:	f002 fd68 	bl	246ec <assert_print>
   21c1c:	490b      	ldr	r1, [pc, #44]	; (21c4c <z_sched_start+0x88>)
   21c1e:	4811      	ldr	r0, [pc, #68]	; (21c64 <z_sched_start+0xa0>)
   21c20:	f002 fd64 	bl	246ec <assert_print>
   21c24:	21c2      	movs	r1, #194	; 0xc2
   21c26:	e7e6      	b.n	21bf6 <z_sched_start+0x32>
	__asm__ volatile(
   21c28:	f385 8811 	msr	BASEPRI, r5
   21c2c:	f3bf 8f6f 	isb	sy
}
   21c30:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21c32:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   21c36:	4620      	mov	r0, r4
   21c38:	7363      	strb	r3, [r4, #13]
   21c3a:	f7ff fea9 	bl	21990 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21c3e:	4629      	mov	r1, r5
   21c40:	4802      	ldr	r0, [pc, #8]	; (21c4c <z_sched_start+0x88>)
}
   21c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21c46:	f7ff bf7b 	b.w	21b40 <z_reschedule>
   21c4a:	bf00      	nop
   21c4c:	200030f4 	.word	0x200030f4
   21c50:	0002837e 	.word	0x0002837e
   21c54:	000283d7 	.word	0x000283d7
   21c58:	00027f8a 	.word	0x00027f8a
   21c5c:	000283ec 	.word	0x000283ec
   21c60:	000283ab 	.word	0x000283ab
   21c64:	000283c2 	.word	0x000283c2

00021c68 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   21c68:	b510      	push	{r4, lr}
	__asm__ volatile(
   21c6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c6e:	f3ef 8411 	mrs	r4, BASEPRI
   21c72:	f383 8812 	msr	BASEPRI_MAX, r3
   21c76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c7a:	4825      	ldr	r0, [pc, #148]	; (21d10 <k_sched_lock+0xa8>)
   21c7c:	f7fe fd22 	bl	206c4 <z_spin_lock_valid>
   21c80:	b960      	cbnz	r0, 21c9c <k_sched_lock+0x34>
   21c82:	4a24      	ldr	r2, [pc, #144]	; (21d14 <k_sched_lock+0xac>)
   21c84:	4924      	ldr	r1, [pc, #144]	; (21d18 <k_sched_lock+0xb0>)
   21c86:	4825      	ldr	r0, [pc, #148]	; (21d1c <k_sched_lock+0xb4>)
   21c88:	2394      	movs	r3, #148	; 0x94
   21c8a:	f002 fd2f 	bl	246ec <assert_print>
   21c8e:	4920      	ldr	r1, [pc, #128]	; (21d10 <k_sched_lock+0xa8>)
   21c90:	4823      	ldr	r0, [pc, #140]	; (21d20 <k_sched_lock+0xb8>)
   21c92:	f002 fd2b 	bl	246ec <assert_print>
   21c96:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c98:	481e      	ldr	r0, [pc, #120]	; (21d14 <k_sched_lock+0xac>)
   21c9a:	e010      	b.n	21cbe <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   21c9c:	481c      	ldr	r0, [pc, #112]	; (21d10 <k_sched_lock+0xa8>)
   21c9e:	f7fe fd2f 	bl	20700 <z_spin_lock_set_owner>
   21ca2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21ca6:	b163      	cbz	r3, 21cc2 <k_sched_lock+0x5a>
   21ca8:	491e      	ldr	r1, [pc, #120]	; (21d24 <k_sched_lock+0xbc>)
   21caa:	4a1f      	ldr	r2, [pc, #124]	; (21d28 <k_sched_lock+0xc0>)
   21cac:	481b      	ldr	r0, [pc, #108]	; (21d1c <k_sched_lock+0xb4>)
   21cae:	23fd      	movs	r3, #253	; 0xfd
   21cb0:	f002 fd1c 	bl	246ec <assert_print>
   21cb4:	481d      	ldr	r0, [pc, #116]	; (21d2c <k_sched_lock+0xc4>)
   21cb6:	f002 fd19 	bl	246ec <assert_print>
   21cba:	21fd      	movs	r1, #253	; 0xfd
   21cbc:	481a      	ldr	r0, [pc, #104]	; (21d28 <k_sched_lock+0xc0>)
   21cbe:	f002 fd0e 	bl	246de <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21cc2:	4b1b      	ldr	r3, [pc, #108]	; (21d30 <k_sched_lock+0xc8>)
   21cc4:	689a      	ldr	r2, [r3, #8]
   21cc6:	7bd3      	ldrb	r3, [r2, #15]
   21cc8:	2b01      	cmp	r3, #1
   21cca:	d10a      	bne.n	21ce2 <k_sched_lock+0x7a>
   21ccc:	4919      	ldr	r1, [pc, #100]	; (21d34 <k_sched_lock+0xcc>)
   21cce:	4a16      	ldr	r2, [pc, #88]	; (21d28 <k_sched_lock+0xc0>)
   21cd0:	4812      	ldr	r0, [pc, #72]	; (21d1c <k_sched_lock+0xb4>)
   21cd2:	23fe      	movs	r3, #254	; 0xfe
   21cd4:	f002 fd0a 	bl	246ec <assert_print>
   21cd8:	4814      	ldr	r0, [pc, #80]	; (21d2c <k_sched_lock+0xc4>)
   21cda:	f002 fd07 	bl	246ec <assert_print>
   21cde:	21fe      	movs	r1, #254	; 0xfe
   21ce0:	e7ec      	b.n	21cbc <k_sched_lock+0x54>
	--_current->base.sched_locked;
   21ce2:	3b01      	subs	r3, #1
   21ce4:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ce6:	480a      	ldr	r0, [pc, #40]	; (21d10 <k_sched_lock+0xa8>)
   21ce8:	f7fe fcfa 	bl	206e0 <z_spin_unlock_valid>
   21cec:	b958      	cbnz	r0, 21d06 <k_sched_lock+0x9e>
   21cee:	4a09      	ldr	r2, [pc, #36]	; (21d14 <k_sched_lock+0xac>)
   21cf0:	4911      	ldr	r1, [pc, #68]	; (21d38 <k_sched_lock+0xd0>)
   21cf2:	480a      	ldr	r0, [pc, #40]	; (21d1c <k_sched_lock+0xb4>)
   21cf4:	23c2      	movs	r3, #194	; 0xc2
   21cf6:	f002 fcf9 	bl	246ec <assert_print>
   21cfa:	4905      	ldr	r1, [pc, #20]	; (21d10 <k_sched_lock+0xa8>)
   21cfc:	480f      	ldr	r0, [pc, #60]	; (21d3c <k_sched_lock+0xd4>)
   21cfe:	f002 fcf5 	bl	246ec <assert_print>
   21d02:	21c2      	movs	r1, #194	; 0xc2
   21d04:	e7c8      	b.n	21c98 <k_sched_lock+0x30>
	__asm__ volatile(
   21d06:	f384 8811 	msr	BASEPRI, r4
   21d0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21d0e:	bd10      	pop	{r4, pc}
   21d10:	200030f4 	.word	0x200030f4
   21d14:	0002837e 	.word	0x0002837e
   21d18:	000283d7 	.word	0x000283d7
   21d1c:	00027f8a 	.word	0x00027f8a
   21d20:	000283ec 	.word	0x000283ec
   21d24:	0002b4a3 	.word	0x0002b4a3
   21d28:	0002b913 	.word	0x0002b913
   21d2c:	0002a56f 	.word	0x0002a56f
   21d30:	200030a8 	.word	0x200030a8
   21d34:	0002b93e 	.word	0x0002b93e
   21d38:	000283ab 	.word	0x000283ab
   21d3c:	000283c2 	.word	0x000283c2

00021d40 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21d40:	b510      	push	{r4, lr}
	__asm__ volatile(
   21d42:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d46:	f3ef 8411 	mrs	r4, BASEPRI
   21d4a:	f383 8812 	msr	BASEPRI_MAX, r3
   21d4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d52:	4829      	ldr	r0, [pc, #164]	; (21df8 <k_sched_unlock+0xb8>)
   21d54:	f7fe fcb6 	bl	206c4 <z_spin_lock_valid>
   21d58:	b960      	cbnz	r0, 21d74 <k_sched_unlock+0x34>
   21d5a:	4a28      	ldr	r2, [pc, #160]	; (21dfc <k_sched_unlock+0xbc>)
   21d5c:	4928      	ldr	r1, [pc, #160]	; (21e00 <k_sched_unlock+0xc0>)
   21d5e:	4829      	ldr	r0, [pc, #164]	; (21e04 <k_sched_unlock+0xc4>)
   21d60:	2394      	movs	r3, #148	; 0x94
   21d62:	f002 fcc3 	bl	246ec <assert_print>
   21d66:	4924      	ldr	r1, [pc, #144]	; (21df8 <k_sched_unlock+0xb8>)
   21d68:	4827      	ldr	r0, [pc, #156]	; (21e08 <k_sched_unlock+0xc8>)
   21d6a:	f002 fcbf 	bl	246ec <assert_print>
   21d6e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d70:	4822      	ldr	r0, [pc, #136]	; (21dfc <k_sched_unlock+0xbc>)
   21d72:	e013      	b.n	21d9c <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   21d74:	4820      	ldr	r0, [pc, #128]	; (21df8 <k_sched_unlock+0xb8>)
   21d76:	f7fe fcc3 	bl	20700 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   21d7a:	4b24      	ldr	r3, [pc, #144]	; (21e0c <k_sched_unlock+0xcc>)
   21d7c:	689a      	ldr	r2, [r3, #8]
   21d7e:	7bd3      	ldrb	r3, [r2, #15]
   21d80:	b973      	cbnz	r3, 21da0 <k_sched_unlock+0x60>
   21d82:	4923      	ldr	r1, [pc, #140]	; (21e10 <k_sched_unlock+0xd0>)
   21d84:	4a23      	ldr	r2, [pc, #140]	; (21e14 <k_sched_unlock+0xd4>)
   21d86:	481f      	ldr	r0, [pc, #124]	; (21e04 <k_sched_unlock+0xc4>)
   21d88:	f240 33ef 	movw	r3, #1007	; 0x3ef
   21d8c:	f002 fcae 	bl	246ec <assert_print>
   21d90:	4821      	ldr	r0, [pc, #132]	; (21e18 <k_sched_unlock+0xd8>)
   21d92:	f002 fcab 	bl	246ec <assert_print>
   21d96:	f240 31ef 	movw	r1, #1007	; 0x3ef
   21d9a:	481e      	ldr	r0, [pc, #120]	; (21e14 <k_sched_unlock+0xd4>)
   21d9c:	f002 fc9f 	bl	246de <assert_post_action>
   21da0:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   21da4:	b160      	cbz	r0, 21dc0 <k_sched_unlock+0x80>
   21da6:	491d      	ldr	r1, [pc, #116]	; (21e1c <k_sched_unlock+0xdc>)
   21da8:	4a1a      	ldr	r2, [pc, #104]	; (21e14 <k_sched_unlock+0xd4>)
   21daa:	4816      	ldr	r0, [pc, #88]	; (21e04 <k_sched_unlock+0xc4>)
   21dac:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   21db0:	f002 fc9c 	bl	246ec <assert_print>
   21db4:	4818      	ldr	r0, [pc, #96]	; (21e18 <k_sched_unlock+0xd8>)
   21db6:	f002 fc99 	bl	246ec <assert_print>
   21dba:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   21dbe:	e7ec      	b.n	21d9a <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   21dc0:	3301      	adds	r3, #1
   21dc2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21dc4:	f7ff fdb0 	bl	21928 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dc8:	480b      	ldr	r0, [pc, #44]	; (21df8 <k_sched_unlock+0xb8>)
   21dca:	f7fe fc89 	bl	206e0 <z_spin_unlock_valid>
   21dce:	b958      	cbnz	r0, 21de8 <k_sched_unlock+0xa8>
   21dd0:	4a0a      	ldr	r2, [pc, #40]	; (21dfc <k_sched_unlock+0xbc>)
   21dd2:	4913      	ldr	r1, [pc, #76]	; (21e20 <k_sched_unlock+0xe0>)
   21dd4:	480b      	ldr	r0, [pc, #44]	; (21e04 <k_sched_unlock+0xc4>)
   21dd6:	23c2      	movs	r3, #194	; 0xc2
   21dd8:	f002 fc88 	bl	246ec <assert_print>
   21ddc:	4906      	ldr	r1, [pc, #24]	; (21df8 <k_sched_unlock+0xb8>)
   21dde:	4811      	ldr	r0, [pc, #68]	; (21e24 <k_sched_unlock+0xe4>)
   21de0:	f002 fc84 	bl	246ec <assert_print>
   21de4:	21c2      	movs	r1, #194	; 0xc2
   21de6:	e7c3      	b.n	21d70 <k_sched_unlock+0x30>
	__asm__ volatile(
   21de8:	f384 8811 	msr	BASEPRI, r4
   21dec:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   21df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   21df4:	f005 b813 	b.w	26e1e <z_reschedule_unlocked>
   21df8:	200030f4 	.word	0x200030f4
   21dfc:	0002837e 	.word	0x0002837e
   21e00:	000283d7 	.word	0x000283d7
   21e04:	00027f8a 	.word	0x00027f8a
   21e08:	000283ec 	.word	0x000283ec
   21e0c:	200030a8 	.word	0x200030a8
   21e10:	0002b96f 	.word	0x0002b96f
   21e14:	0002b710 	.word	0x0002b710
   21e18:	0002a56f 	.word	0x0002a56f
   21e1c:	0002b4a3 	.word	0x0002b4a3
   21e20:	000283ab 	.word	0x000283ab
   21e24:	000283c2 	.word	0x000283c2

00021e28 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   21e28:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21e2a:	4b0b      	ldr	r3, [pc, #44]	; (21e58 <z_priq_dumb_remove+0x30>)
   21e2c:	4299      	cmp	r1, r3
   21e2e:	d10b      	bne.n	21e48 <z_priq_dumb_remove+0x20>
   21e30:	490a      	ldr	r1, [pc, #40]	; (21e5c <z_priq_dumb_remove+0x34>)
   21e32:	480b      	ldr	r0, [pc, #44]	; (21e60 <z_priq_dumb_remove+0x38>)
   21e34:	4a0b      	ldr	r2, [pc, #44]	; (21e64 <z_priq_dumb_remove+0x3c>)
   21e36:	f240 437b 	movw	r3, #1147	; 0x47b
   21e3a:	f002 fc57 	bl	246ec <assert_print>
   21e3e:	4809      	ldr	r0, [pc, #36]	; (21e64 <z_priq_dumb_remove+0x3c>)
   21e40:	f240 417b 	movw	r1, #1147	; 0x47b
   21e44:	f002 fc4b 	bl	246de <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   21e48:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   21e4c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21e4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21e50:	2300      	movs	r3, #0
	node->prev = NULL;
   21e52:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21e56:	bd08      	pop	{r3, pc}
   21e58:	20002a60 	.word	0x20002a60
   21e5c:	0002b8f2 	.word	0x0002b8f2
   21e60:	00027f8a 	.word	0x00027f8a
   21e64:	0002b710 	.word	0x0002b710

00021e68 <move_thread_to_end_of_prio_q>:
{
   21e68:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21e6a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21e6e:	7b43      	ldrb	r3, [r0, #13]
   21e70:	2a00      	cmp	r2, #0
{
   21e72:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21e74:	da06      	bge.n	21e84 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21e7a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21e7c:	4601      	mov	r1, r0
   21e7e:	481d      	ldr	r0, [pc, #116]	; (21ef4 <move_thread_to_end_of_prio_q+0x8c>)
   21e80:	f7ff ffd2 	bl	21e28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21e84:	7b63      	ldrb	r3, [r4, #13]
   21e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21e8a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21e8c:	4b1a      	ldr	r3, [pc, #104]	; (21ef8 <move_thread_to_end_of_prio_q+0x90>)
   21e8e:	429c      	cmp	r4, r3
   21e90:	d109      	bne.n	21ea6 <move_thread_to_end_of_prio_q+0x3e>
   21e92:	491a      	ldr	r1, [pc, #104]	; (21efc <move_thread_to_end_of_prio_q+0x94>)
   21e94:	481a      	ldr	r0, [pc, #104]	; (21f00 <move_thread_to_end_of_prio_q+0x98>)
   21e96:	4a1b      	ldr	r2, [pc, #108]	; (21f04 <move_thread_to_end_of_prio_q+0x9c>)
   21e98:	23bc      	movs	r3, #188	; 0xbc
   21e9a:	f002 fc27 	bl	246ec <assert_print>
   21e9e:	4819      	ldr	r0, [pc, #100]	; (21f04 <move_thread_to_end_of_prio_q+0x9c>)
   21ea0:	21bc      	movs	r1, #188	; 0xbc
   21ea2:	f002 fc1c 	bl	246de <assert_post_action>
	return list->head == list;
   21ea6:	4a18      	ldr	r2, [pc, #96]	; (21f08 <move_thread_to_end_of_prio_q+0xa0>)
   21ea8:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   21eaa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   21eac:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21eb0:	428b      	cmp	r3, r1
   21eb2:	bf08      	it	eq
   21eb4:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21eb6:	b923      	cbnz	r3, 21ec2 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   21eb8:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   21ebc:	6004      	str	r4, [r0, #0]
	list->tail = node;
   21ebe:	6254      	str	r4, [r2, #36]	; 0x24
}
   21ec0:	e00c      	b.n	21edc <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   21ec2:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21ec6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   21eca:	42b5      	cmp	r5, r6
   21ecc:	d00e      	beq.n	21eec <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21ece:	42ae      	cmp	r6, r5
   21ed0:	dd0c      	ble.n	21eec <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   21ed2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21ed4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   21ed8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   21eda:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   21edc:	6890      	ldr	r0, [r2, #8]
   21ede:	1b03      	subs	r3, r0, r4
   21ee0:	4258      	negs	r0, r3
}
   21ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21ee6:	4158      	adcs	r0, r3
   21ee8:	f7ff bd1e 	b.w	21928 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21eec:	4298      	cmp	r0, r3
   21eee:	d0e3      	beq.n	21eb8 <move_thread_to_end_of_prio_q+0x50>
   21ef0:	681b      	ldr	r3, [r3, #0]
   21ef2:	e7e0      	b.n	21eb6 <move_thread_to_end_of_prio_q+0x4e>
   21ef4:	200030c8 	.word	0x200030c8
   21ef8:	20002a60 	.word	0x20002a60
   21efc:	0002b8f2 	.word	0x0002b8f2
   21f00:	00027f8a 	.word	0x00027f8a
   21f04:	0002b710 	.word	0x0002b710
   21f08:	200030a8 	.word	0x200030a8

00021f0c <z_time_slice>:
{
   21f0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21f0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f12:	f3ef 8511 	mrs	r5, BASEPRI
   21f16:	f383 8812 	msr	BASEPRI_MAX, r3
   21f1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f1e:	4823      	ldr	r0, [pc, #140]	; (21fac <z_time_slice+0xa0>)
   21f20:	f7fe fbd0 	bl	206c4 <z_spin_lock_valid>
   21f24:	b968      	cbnz	r0, 21f42 <z_time_slice+0x36>
   21f26:	4a22      	ldr	r2, [pc, #136]	; (21fb0 <z_time_slice+0xa4>)
   21f28:	4922      	ldr	r1, [pc, #136]	; (21fb4 <z_time_slice+0xa8>)
   21f2a:	4823      	ldr	r0, [pc, #140]	; (21fb8 <z_time_slice+0xac>)
   21f2c:	2394      	movs	r3, #148	; 0x94
   21f2e:	f002 fbdd 	bl	246ec <assert_print>
   21f32:	491e      	ldr	r1, [pc, #120]	; (21fac <z_time_slice+0xa0>)
   21f34:	4821      	ldr	r0, [pc, #132]	; (21fbc <z_time_slice+0xb0>)
   21f36:	f002 fbd9 	bl	246ec <assert_print>
   21f3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f3c:	481c      	ldr	r0, [pc, #112]	; (21fb0 <z_time_slice+0xa4>)
   21f3e:	f002 fbce 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   21f42:	481a      	ldr	r0, [pc, #104]	; (21fac <z_time_slice+0xa0>)
   21f44:	f7fe fbdc 	bl	20700 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   21f48:	4b1d      	ldr	r3, [pc, #116]	; (21fc0 <z_time_slice+0xb4>)
	if (pending_current == curr) {
   21f4a:	4a1e      	ldr	r2, [pc, #120]	; (21fc4 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   21f4c:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   21f4e:	6810      	ldr	r0, [r2, #0]
   21f50:	42a0      	cmp	r0, r4
   21f52:	d111      	bne.n	21f78 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   21f54:	f7ff fcc0 	bl	218d8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f58:	4814      	ldr	r0, [pc, #80]	; (21fac <z_time_slice+0xa0>)
   21f5a:	f7fe fbc1 	bl	206e0 <z_spin_unlock_valid>
   21f5e:	b9f8      	cbnz	r0, 21fa0 <z_time_slice+0x94>
   21f60:	4a13      	ldr	r2, [pc, #76]	; (21fb0 <z_time_slice+0xa4>)
   21f62:	4919      	ldr	r1, [pc, #100]	; (21fc8 <z_time_slice+0xbc>)
   21f64:	4814      	ldr	r0, [pc, #80]	; (21fb8 <z_time_slice+0xac>)
   21f66:	23c2      	movs	r3, #194	; 0xc2
   21f68:	f002 fbc0 	bl	246ec <assert_print>
   21f6c:	490f      	ldr	r1, [pc, #60]	; (21fac <z_time_slice+0xa0>)
   21f6e:	4817      	ldr	r0, [pc, #92]	; (21fcc <z_time_slice+0xc0>)
   21f70:	f002 fbbc 	bl	246ec <assert_print>
   21f74:	21c2      	movs	r1, #194	; 0xc2
   21f76:	e7e1      	b.n	21f3c <z_time_slice+0x30>
	pending_current = NULL;
   21f78:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   21f7a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   21f7c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   21f7e:	4a14      	ldr	r2, [pc, #80]	; (21fd0 <z_time_slice+0xc4>)
   21f80:	5cd3      	ldrb	r3, [r2, r3]
   21f82:	2b00      	cmp	r3, #0
   21f84:	d0e8      	beq.n	21f58 <z_time_slice+0x4c>
   21f86:	4620      	mov	r0, r4
   21f88:	f7ff fc58 	bl	2183c <sliceable>
   21f8c:	2800      	cmp	r0, #0
   21f8e:	d0e3      	beq.n	21f58 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   21f90:	7b63      	ldrb	r3, [r4, #13]
   21f92:	06db      	lsls	r3, r3, #27
   21f94:	d102      	bne.n	21f9c <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   21f96:	4620      	mov	r0, r4
   21f98:	f7ff ff66 	bl	21e68 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   21f9c:	4620      	mov	r0, r4
   21f9e:	e7d9      	b.n	21f54 <z_time_slice+0x48>
	__asm__ volatile(
   21fa0:	f385 8811 	msr	BASEPRI, r5
   21fa4:	f3bf 8f6f 	isb	sy
}
   21fa8:	bd38      	pop	{r3, r4, r5, pc}
   21faa:	bf00      	nop
   21fac:	200030f4 	.word	0x200030f4
   21fb0:	0002837e 	.word	0x0002837e
   21fb4:	000283d7 	.word	0x000283d7
   21fb8:	00027f8a 	.word	0x00027f8a
   21fbc:	000283ec 	.word	0x000283ec
   21fc0:	200030a8 	.word	0x200030a8
   21fc4:	200030e8 	.word	0x200030e8
   21fc8:	000283ab 	.word	0x000283ab
   21fcc:	000283c2 	.word	0x000283c2
   21fd0:	200036e5 	.word	0x200036e5

00021fd4 <unready_thread>:
{
   21fd4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   21fd6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   21fda:	7b43      	ldrb	r3, [r0, #13]
   21fdc:	2a00      	cmp	r2, #0
{
   21fde:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21fe0:	da06      	bge.n	21ff0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21fe6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21fe8:	4601      	mov	r1, r0
   21fea:	4806      	ldr	r0, [pc, #24]	; (22004 <unready_thread+0x30>)
   21fec:	f7ff ff1c 	bl	21e28 <z_priq_dumb_remove>
	update_cache(thread == _current);
   21ff0:	4b05      	ldr	r3, [pc, #20]	; (22008 <unready_thread+0x34>)
   21ff2:	6898      	ldr	r0, [r3, #8]
   21ff4:	1b03      	subs	r3, r0, r4
   21ff6:	4258      	negs	r0, r3
}
   21ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21ffc:	4158      	adcs	r0, r3
   21ffe:	f7ff bc93 	b.w	21928 <update_cache>
   22002:	bf00      	nop
   22004:	200030c8 	.word	0x200030c8
   22008:	200030a8 	.word	0x200030a8

0002200c <add_to_waitq_locked>:
{
   2200c:	b538      	push	{r3, r4, r5, lr}
   2200e:	4604      	mov	r4, r0
   22010:	460d      	mov	r5, r1
	unready_thread(thread);
   22012:	f7ff ffdf 	bl	21fd4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22016:	7b63      	ldrb	r3, [r4, #13]
   22018:	f043 0302 	orr.w	r3, r3, #2
   2201c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2201e:	b34d      	cbz	r5, 22074 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22020:	4b15      	ldr	r3, [pc, #84]	; (22078 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   22022:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22024:	429c      	cmp	r4, r3
   22026:	d109      	bne.n	2203c <add_to_waitq_locked+0x30>
   22028:	4914      	ldr	r1, [pc, #80]	; (2207c <add_to_waitq_locked+0x70>)
   2202a:	4815      	ldr	r0, [pc, #84]	; (22080 <add_to_waitq_locked+0x74>)
   2202c:	4a15      	ldr	r2, [pc, #84]	; (22084 <add_to_waitq_locked+0x78>)
   2202e:	23bc      	movs	r3, #188	; 0xbc
   22030:	f002 fb5c 	bl	246ec <assert_print>
   22034:	4813      	ldr	r0, [pc, #76]	; (22084 <add_to_waitq_locked+0x78>)
   22036:	21bc      	movs	r1, #188	; 0xbc
   22038:	f002 fb51 	bl	246de <assert_post_action>
	return list->head == list;
   2203c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2203e:	429d      	cmp	r5, r3
   22040:	d109      	bne.n	22056 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   22042:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22044:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22048:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2204a:	606c      	str	r4, [r5, #4]
}
   2204c:	e012      	b.n	22074 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   2204e:	686a      	ldr	r2, [r5, #4]
   22050:	4293      	cmp	r3, r2
   22052:	d0f6      	beq.n	22042 <add_to_waitq_locked+0x36>
   22054:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22056:	2b00      	cmp	r3, #0
   22058:	d0f3      	beq.n	22042 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   2205a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2205e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   22062:	428a      	cmp	r2, r1
   22064:	d0f3      	beq.n	2204e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22066:	4291      	cmp	r1, r2
   22068:	ddf1      	ble.n	2204e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   2206a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2206c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22070:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22072:	605c      	str	r4, [r3, #4]
}
   22074:	bd38      	pop	{r3, r4, r5, pc}
   22076:	bf00      	nop
   22078:	20002a60 	.word	0x20002a60
   2207c:	0002b8f2 	.word	0x0002b8f2
   22080:	00027f8a 	.word	0x00027f8a
   22084:	0002b710 	.word	0x0002b710

00022088 <pend_locked>:
{
   22088:	b570      	push	{r4, r5, r6, lr}
   2208a:	4615      	mov	r5, r2
   2208c:	461c      	mov	r4, r3
   2208e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   22090:	f7ff ffbc 	bl	2200c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22094:	f1b4 3fff 	cmp.w	r4, #4294967295
   22098:	bf08      	it	eq
   2209a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2209e:	d008      	beq.n	220b2 <pend_locked+0x2a>
   220a0:	462a      	mov	r2, r5
   220a2:	4623      	mov	r3, r4
   220a4:	f106 0018 	add.w	r0, r6, #24
   220a8:	4902      	ldr	r1, [pc, #8]	; (220b4 <pend_locked+0x2c>)
}
   220aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   220ae:	f000 bde7 	b.w	22c80 <z_add_timeout>
   220b2:	bd70      	pop	{r4, r5, r6, pc}
   220b4:	00026e33 	.word	0x00026e33

000220b8 <z_pend_curr>:
{
   220b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   220bc:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 221a0 <z_pend_curr+0xe8>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   220c0:	4c2d      	ldr	r4, [pc, #180]	; (22178 <z_pend_curr+0xc0>)
	pending_current = _current;
   220c2:	4b2e      	ldr	r3, [pc, #184]	; (2217c <z_pend_curr+0xc4>)
{
   220c4:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   220c6:	42a0      	cmp	r0, r4
	pending_current = _current;
   220c8:	f8da 2008 	ldr.w	r2, [sl, #8]
   220cc:	601a      	str	r2, [r3, #0]
{
   220ce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   220d2:	4605      	mov	r5, r0
   220d4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   220d6:	d10b      	bne.n	220f0 <z_pend_curr+0x38>
   220d8:	4929      	ldr	r1, [pc, #164]	; (22180 <z_pend_curr+0xc8>)
   220da:	482a      	ldr	r0, [pc, #168]	; (22184 <z_pend_curr+0xcc>)
   220dc:	4a2a      	ldr	r2, [pc, #168]	; (22188 <z_pend_curr+0xd0>)
   220de:	f240 3356 	movw	r3, #854	; 0x356
   220e2:	f002 fb03 	bl	246ec <assert_print>
   220e6:	4828      	ldr	r0, [pc, #160]	; (22188 <z_pend_curr+0xd0>)
   220e8:	f240 3156 	movw	r1, #854	; 0x356
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   220ec:	f002 faf7 	bl	246de <assert_post_action>
	__asm__ volatile(
   220f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   220f4:	f3ef 8311 	mrs	r3, BASEPRI
   220f8:	f382 8812 	msr	BASEPRI_MAX, r2
   220fc:	f3bf 8f6f 	isb	sy
   22100:	4620      	mov	r0, r4
   22102:	f7fe fadf 	bl	206c4 <z_spin_lock_valid>
   22106:	b960      	cbnz	r0, 22122 <z_pend_curr+0x6a>
   22108:	4a20      	ldr	r2, [pc, #128]	; (2218c <z_pend_curr+0xd4>)
   2210a:	4921      	ldr	r1, [pc, #132]	; (22190 <z_pend_curr+0xd8>)
   2210c:	481d      	ldr	r0, [pc, #116]	; (22184 <z_pend_curr+0xcc>)
   2210e:	2394      	movs	r3, #148	; 0x94
   22110:	f002 faec 	bl	246ec <assert_print>
   22114:	4621      	mov	r1, r4
   22116:	481f      	ldr	r0, [pc, #124]	; (22194 <z_pend_curr+0xdc>)
   22118:	f002 fae8 	bl	246ec <assert_print>
   2211c:	2194      	movs	r1, #148	; 0x94
   2211e:	481b      	ldr	r0, [pc, #108]	; (2218c <z_pend_curr+0xd4>)
   22120:	e7e4      	b.n	220ec <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   22122:	4620      	mov	r0, r4
   22124:	f7fe faec 	bl	20700 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   22128:	f8da 0008 	ldr.w	r0, [sl, #8]
   2212c:	4642      	mov	r2, r8
   2212e:	464b      	mov	r3, r9
   22130:	4639      	mov	r1, r7
   22132:	f7ff ffa9 	bl	22088 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22136:	4628      	mov	r0, r5
   22138:	f7fe fad2 	bl	206e0 <z_spin_unlock_valid>
   2213c:	b958      	cbnz	r0, 22156 <z_pend_curr+0x9e>
   2213e:	4916      	ldr	r1, [pc, #88]	; (22198 <z_pend_curr+0xe0>)
   22140:	4a12      	ldr	r2, [pc, #72]	; (2218c <z_pend_curr+0xd4>)
   22142:	4810      	ldr	r0, [pc, #64]	; (22184 <z_pend_curr+0xcc>)
   22144:	23e1      	movs	r3, #225	; 0xe1
   22146:	f002 fad1 	bl	246ec <assert_print>
   2214a:	4629      	mov	r1, r5
   2214c:	4813      	ldr	r0, [pc, #76]	; (2219c <z_pend_curr+0xe4>)
   2214e:	f002 facd 	bl	246ec <assert_print>
   22152:	21e1      	movs	r1, #225	; 0xe1
   22154:	e7e3      	b.n	2211e <z_pend_curr+0x66>
   22156:	4620      	mov	r0, r4
   22158:	f7fe fac2 	bl	206e0 <z_spin_unlock_valid>
   2215c:	b938      	cbnz	r0, 2216e <z_pend_curr+0xb6>
   2215e:	490e      	ldr	r1, [pc, #56]	; (22198 <z_pend_curr+0xe0>)
   22160:	4a0a      	ldr	r2, [pc, #40]	; (2218c <z_pend_curr+0xd4>)
   22162:	4808      	ldr	r0, [pc, #32]	; (22184 <z_pend_curr+0xcc>)
   22164:	23e1      	movs	r3, #225	; 0xe1
   22166:	f002 fac1 	bl	246ec <assert_print>
   2216a:	4621      	mov	r1, r4
   2216c:	e7ee      	b.n	2214c <z_pend_curr+0x94>
   2216e:	4630      	mov	r0, r6
}
   22170:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22174:	f7f2 bf24 	b.w	14fc0 <arch_swap>
   22178:	200030f4 	.word	0x200030f4
   2217c:	200030e8 	.word	0x200030e8
   22180:	0002b9a0 	.word	0x0002b9a0
   22184:	00027f8a 	.word	0x00027f8a
   22188:	0002b710 	.word	0x0002b710
   2218c:	0002837e 	.word	0x0002837e
   22190:	000283d7 	.word	0x000283d7
   22194:	000283ec 	.word	0x000283ec
   22198:	000283ab 	.word	0x000283ab
   2219c:	000283c2 	.word	0x000283c2
   221a0:	200030a8 	.word	0x200030a8

000221a4 <z_set_prio>:
{
   221a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   221a8:	4604      	mov	r4, r0
   221aa:	460e      	mov	r6, r1
   221ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   221b0:	f3ef 8911 	mrs	r9, BASEPRI
   221b4:	f383 8812 	msr	BASEPRI_MAX, r3
   221b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221bc:	4837      	ldr	r0, [pc, #220]	; (2229c <z_set_prio+0xf8>)
   221be:	f7fe fa81 	bl	206c4 <z_spin_lock_valid>
   221c2:	4607      	mov	r7, r0
   221c4:	b960      	cbnz	r0, 221e0 <z_set_prio+0x3c>
   221c6:	4a36      	ldr	r2, [pc, #216]	; (222a0 <z_set_prio+0xfc>)
   221c8:	4936      	ldr	r1, [pc, #216]	; (222a4 <z_set_prio+0x100>)
   221ca:	4837      	ldr	r0, [pc, #220]	; (222a8 <z_set_prio+0x104>)
   221cc:	2394      	movs	r3, #148	; 0x94
   221ce:	f002 fa8d 	bl	246ec <assert_print>
   221d2:	4932      	ldr	r1, [pc, #200]	; (2229c <z_set_prio+0xf8>)
   221d4:	4835      	ldr	r0, [pc, #212]	; (222ac <z_set_prio+0x108>)
   221d6:	f002 fa89 	bl	246ec <assert_print>
   221da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221dc:	4830      	ldr	r0, [pc, #192]	; (222a0 <z_set_prio+0xfc>)
   221de:	e021      	b.n	22224 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   221e0:	482e      	ldr	r0, [pc, #184]	; (2229c <z_set_prio+0xf8>)
   221e2:	f7fe fa8d 	bl	20700 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   221e6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   221e8:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   221ea:	b276      	sxtb	r6, r6
   221ec:	d11c      	bne.n	22228 <z_set_prio+0x84>
	return node->next != NULL;
   221ee:	69a5      	ldr	r5, [r4, #24]
   221f0:	b9d5      	cbnz	r5, 22228 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   221f2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 222c4 <z_set_prio+0x120>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   221f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   221fa:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   221fc:	4621      	mov	r1, r4
   221fe:	4640      	mov	r0, r8
   22200:	f7ff fe12 	bl	21e28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22204:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   22206:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   22208:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2220c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2220e:	4b28      	ldr	r3, [pc, #160]	; (222b0 <z_set_prio+0x10c>)
   22210:	429c      	cmp	r4, r3
   22212:	d11b      	bne.n	2224c <z_set_prio+0xa8>
   22214:	4927      	ldr	r1, [pc, #156]	; (222b4 <z_set_prio+0x110>)
   22216:	4824      	ldr	r0, [pc, #144]	; (222a8 <z_set_prio+0x104>)
   22218:	4a27      	ldr	r2, [pc, #156]	; (222b8 <z_set_prio+0x114>)
   2221a:	23bc      	movs	r3, #188	; 0xbc
   2221c:	f002 fa66 	bl	246ec <assert_print>
   22220:	4825      	ldr	r0, [pc, #148]	; (222b8 <z_set_prio+0x114>)
   22222:	21bc      	movs	r1, #188	; 0xbc
   22224:	f002 fa5b 	bl	246de <assert_post_action>
			thread->base.prio = prio;
   22228:	73a6      	strb	r6, [r4, #14]
   2222a:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2222c:	481b      	ldr	r0, [pc, #108]	; (2229c <z_set_prio+0xf8>)
   2222e:	f7fe fa57 	bl	206e0 <z_spin_unlock_valid>
   22232:	bb58      	cbnz	r0, 2228c <z_set_prio+0xe8>
   22234:	4a1a      	ldr	r2, [pc, #104]	; (222a0 <z_set_prio+0xfc>)
   22236:	4921      	ldr	r1, [pc, #132]	; (222bc <z_set_prio+0x118>)
   22238:	481b      	ldr	r0, [pc, #108]	; (222a8 <z_set_prio+0x104>)
   2223a:	23c2      	movs	r3, #194	; 0xc2
   2223c:	f002 fa56 	bl	246ec <assert_print>
   22240:	4916      	ldr	r1, [pc, #88]	; (2229c <z_set_prio+0xf8>)
   22242:	481f      	ldr	r0, [pc, #124]	; (222c0 <z_set_prio+0x11c>)
   22244:	f002 fa52 	bl	246ec <assert_print>
   22248:	21c2      	movs	r1, #194	; 0xc2
   2224a:	e7c7      	b.n	221dc <z_set_prio+0x38>
	return list->head == list;
   2224c:	4643      	mov	r3, r8
   2224e:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22252:	4542      	cmp	r2, r8
   22254:	bf18      	it	ne
   22256:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   22258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2225a:	b925      	cbnz	r5, 22266 <z_set_prio+0xc2>
	node->prev = tail;
   2225c:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   22260:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22262:	625c      	str	r4, [r3, #36]	; 0x24
}
   22264:	e00a      	b.n	2227c <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   22266:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   2226a:	428e      	cmp	r6, r1
   2226c:	d00a      	beq.n	22284 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2226e:	42b1      	cmp	r1, r6
   22270:	dd08      	ble.n	22284 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   22272:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   22274:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   22278:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2227a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   2227c:	2001      	movs	r0, #1
   2227e:	f7ff fb53 	bl	21928 <update_cache>
   22282:	e7d3      	b.n	2222c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   22284:	42aa      	cmp	r2, r5
   22286:	d0e9      	beq.n	2225c <z_set_prio+0xb8>
   22288:	682d      	ldr	r5, [r5, #0]
   2228a:	e7e6      	b.n	2225a <z_set_prio+0xb6>
	__asm__ volatile(
   2228c:	f389 8811 	msr	BASEPRI, r9
   22290:	f3bf 8f6f 	isb	sy
}
   22294:	4638      	mov	r0, r7
   22296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2229a:	bf00      	nop
   2229c:	200030f4 	.word	0x200030f4
   222a0:	0002837e 	.word	0x0002837e
   222a4:	000283d7 	.word	0x000283d7
   222a8:	00027f8a 	.word	0x00027f8a
   222ac:	000283ec 	.word	0x000283ec
   222b0:	20002a60 	.word	0x20002a60
   222b4:	0002b8f2 	.word	0x0002b8f2
   222b8:	0002b710 	.word	0x0002b710
   222bc:	000283ab 	.word	0x000283ab
   222c0:	000283c2 	.word	0x000283c2
   222c4:	200030c8 	.word	0x200030c8

000222c8 <z_impl_k_thread_suspend>:
{
   222c8:	b570      	push	{r4, r5, r6, lr}
   222ca:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   222cc:	3018      	adds	r0, #24
   222ce:	f000 fd97 	bl	22e00 <z_abort_timeout>
	__asm__ volatile(
   222d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   222d6:	f3ef 8611 	mrs	r6, BASEPRI
   222da:	f383 8812 	msr	BASEPRI_MAX, r3
   222de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   222e2:	4824      	ldr	r0, [pc, #144]	; (22374 <z_impl_k_thread_suspend+0xac>)
   222e4:	f7fe f9ee 	bl	206c4 <z_spin_lock_valid>
   222e8:	b968      	cbnz	r0, 22306 <z_impl_k_thread_suspend+0x3e>
   222ea:	4a23      	ldr	r2, [pc, #140]	; (22378 <z_impl_k_thread_suspend+0xb0>)
   222ec:	4923      	ldr	r1, [pc, #140]	; (2237c <z_impl_k_thread_suspend+0xb4>)
   222ee:	4824      	ldr	r0, [pc, #144]	; (22380 <z_impl_k_thread_suspend+0xb8>)
   222f0:	2394      	movs	r3, #148	; 0x94
   222f2:	f002 f9fb 	bl	246ec <assert_print>
   222f6:	491f      	ldr	r1, [pc, #124]	; (22374 <z_impl_k_thread_suspend+0xac>)
   222f8:	4822      	ldr	r0, [pc, #136]	; (22384 <z_impl_k_thread_suspend+0xbc>)
   222fa:	f002 f9f7 	bl	246ec <assert_print>
   222fe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22300:	481d      	ldr	r0, [pc, #116]	; (22378 <z_impl_k_thread_suspend+0xb0>)
   22302:	f002 f9ec 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   22306:	481b      	ldr	r0, [pc, #108]	; (22374 <z_impl_k_thread_suspend+0xac>)
   22308:	f7fe f9fa 	bl	20700 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2230c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22310:	7b63      	ldrb	r3, [r4, #13]
   22312:	2a00      	cmp	r2, #0
   22314:	da06      	bge.n	22324 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2231a:	481b      	ldr	r0, [pc, #108]	; (22388 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2231c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2231e:	4621      	mov	r1, r4
   22320:	f7ff fd82 	bl	21e28 <z_priq_dumb_remove>
		update_cache(thread == _current);
   22324:	4d19      	ldr	r5, [pc, #100]	; (2238c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22326:	7b63      	ldrb	r3, [r4, #13]
   22328:	68a8      	ldr	r0, [r5, #8]
   2232a:	f043 0310 	orr.w	r3, r3, #16
   2232e:	7363      	strb	r3, [r4, #13]
   22330:	1b03      	subs	r3, r0, r4
   22332:	4258      	negs	r0, r3
   22334:	4158      	adcs	r0, r3
   22336:	f7ff faf7 	bl	21928 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2233a:	480e      	ldr	r0, [pc, #56]	; (22374 <z_impl_k_thread_suspend+0xac>)
   2233c:	f7fe f9d0 	bl	206e0 <z_spin_unlock_valid>
   22340:	b958      	cbnz	r0, 2235a <z_impl_k_thread_suspend+0x92>
   22342:	4a0d      	ldr	r2, [pc, #52]	; (22378 <z_impl_k_thread_suspend+0xb0>)
   22344:	4912      	ldr	r1, [pc, #72]	; (22390 <z_impl_k_thread_suspend+0xc8>)
   22346:	480e      	ldr	r0, [pc, #56]	; (22380 <z_impl_k_thread_suspend+0xb8>)
   22348:	23c2      	movs	r3, #194	; 0xc2
   2234a:	f002 f9cf 	bl	246ec <assert_print>
   2234e:	4909      	ldr	r1, [pc, #36]	; (22374 <z_impl_k_thread_suspend+0xac>)
   22350:	4810      	ldr	r0, [pc, #64]	; (22394 <z_impl_k_thread_suspend+0xcc>)
   22352:	f002 f9cb 	bl	246ec <assert_print>
   22356:	21c2      	movs	r1, #194	; 0xc2
   22358:	e7d2      	b.n	22300 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   2235a:	f386 8811 	msr	BASEPRI, r6
   2235e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   22362:	68ab      	ldr	r3, [r5, #8]
   22364:	42a3      	cmp	r3, r4
   22366:	d103      	bne.n	22370 <z_impl_k_thread_suspend+0xa8>
}
   22368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2236c:	f004 bd57 	b.w	26e1e <z_reschedule_unlocked>
}
   22370:	bd70      	pop	{r4, r5, r6, pc}
   22372:	bf00      	nop
   22374:	200030f4 	.word	0x200030f4
   22378:	0002837e 	.word	0x0002837e
   2237c:	000283d7 	.word	0x000283d7
   22380:	00027f8a 	.word	0x00027f8a
   22384:	000283ec 	.word	0x000283ec
   22388:	200030c8 	.word	0x200030c8
   2238c:	200030a8 	.word	0x200030a8
   22390:	000283ab 	.word	0x000283ab
   22394:	000283c2 	.word	0x000283c2

00022398 <unpend_thread_no_timeout>:
{
   22398:	b510      	push	{r4, lr}
   2239a:	4604      	mov	r4, r0
   2239c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2239e:	b958      	cbnz	r0, 223b8 <unpend_thread_no_timeout+0x20>
   223a0:	490a      	ldr	r1, [pc, #40]	; (223cc <unpend_thread_no_timeout+0x34>)
   223a2:	480b      	ldr	r0, [pc, #44]	; (223d0 <unpend_thread_no_timeout+0x38>)
   223a4:	4a0b      	ldr	r2, [pc, #44]	; (223d4 <unpend_thread_no_timeout+0x3c>)
   223a6:	f240 23c9 	movw	r3, #713	; 0x2c9
   223aa:	f002 f99f 	bl	246ec <assert_print>
   223ae:	4809      	ldr	r0, [pc, #36]	; (223d4 <unpend_thread_no_timeout+0x3c>)
   223b0:	f240 21c9 	movw	r1, #713	; 0x2c9
   223b4:	f002 f993 	bl	246de <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   223b8:	4621      	mov	r1, r4
   223ba:	f7ff fd35 	bl	21e28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   223be:	7b63      	ldrb	r3, [r4, #13]
   223c0:	f023 0302 	bic.w	r3, r3, #2
   223c4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   223c6:	2300      	movs	r3, #0
   223c8:	60a3      	str	r3, [r4, #8]
}
   223ca:	bd10      	pop	{r4, pc}
   223cc:	0002b9d7 	.word	0x0002b9d7
   223d0:	00027f8a 	.word	0x00027f8a
   223d4:	0002b710 	.word	0x0002b710

000223d8 <z_unpend_thread>:
{
   223d8:	b538      	push	{r3, r4, r5, lr}
   223da:	4604      	mov	r4, r0
	__asm__ volatile(
   223dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   223e0:	f3ef 8511 	mrs	r5, BASEPRI
   223e4:	f383 8812 	msr	BASEPRI_MAX, r3
   223e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223ec:	4819      	ldr	r0, [pc, #100]	; (22454 <z_unpend_thread+0x7c>)
   223ee:	f7fe f969 	bl	206c4 <z_spin_lock_valid>
   223f2:	b968      	cbnz	r0, 22410 <z_unpend_thread+0x38>
   223f4:	4a18      	ldr	r2, [pc, #96]	; (22458 <z_unpend_thread+0x80>)
   223f6:	4919      	ldr	r1, [pc, #100]	; (2245c <z_unpend_thread+0x84>)
   223f8:	4819      	ldr	r0, [pc, #100]	; (22460 <z_unpend_thread+0x88>)
   223fa:	2394      	movs	r3, #148	; 0x94
   223fc:	f002 f976 	bl	246ec <assert_print>
   22400:	4914      	ldr	r1, [pc, #80]	; (22454 <z_unpend_thread+0x7c>)
   22402:	4818      	ldr	r0, [pc, #96]	; (22464 <z_unpend_thread+0x8c>)
   22404:	f002 f972 	bl	246ec <assert_print>
   22408:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2240a:	4813      	ldr	r0, [pc, #76]	; (22458 <z_unpend_thread+0x80>)
   2240c:	f002 f967 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   22410:	4810      	ldr	r0, [pc, #64]	; (22454 <z_unpend_thread+0x7c>)
   22412:	f7fe f975 	bl	20700 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   22416:	68a3      	ldr	r3, [r4, #8]
   22418:	b113      	cbz	r3, 22420 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   2241a:	4620      	mov	r0, r4
   2241c:	f7ff ffbc 	bl	22398 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22420:	480c      	ldr	r0, [pc, #48]	; (22454 <z_unpend_thread+0x7c>)
   22422:	f7fe f95d 	bl	206e0 <z_spin_unlock_valid>
   22426:	b958      	cbnz	r0, 22440 <z_unpend_thread+0x68>
   22428:	4a0b      	ldr	r2, [pc, #44]	; (22458 <z_unpend_thread+0x80>)
   2242a:	490f      	ldr	r1, [pc, #60]	; (22468 <z_unpend_thread+0x90>)
   2242c:	480c      	ldr	r0, [pc, #48]	; (22460 <z_unpend_thread+0x88>)
   2242e:	23c2      	movs	r3, #194	; 0xc2
   22430:	f002 f95c 	bl	246ec <assert_print>
   22434:	4907      	ldr	r1, [pc, #28]	; (22454 <z_unpend_thread+0x7c>)
   22436:	480d      	ldr	r0, [pc, #52]	; (2246c <z_unpend_thread+0x94>)
   22438:	f002 f958 	bl	246ec <assert_print>
   2243c:	21c2      	movs	r1, #194	; 0xc2
   2243e:	e7e4      	b.n	2240a <z_unpend_thread+0x32>
	__asm__ volatile(
   22440:	f385 8811 	msr	BASEPRI, r5
   22444:	f3bf 8f6f 	isb	sy
   22448:	f104 0018 	add.w	r0, r4, #24
}
   2244c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22450:	f000 bcd6 	b.w	22e00 <z_abort_timeout>
   22454:	200030f4 	.word	0x200030f4
   22458:	0002837e 	.word	0x0002837e
   2245c:	000283d7 	.word	0x000283d7
   22460:	00027f8a 	.word	0x00027f8a
   22464:	000283ec 	.word	0x000283ec
   22468:	000283ab 	.word	0x000283ab
   2246c:	000283c2 	.word	0x000283c2

00022470 <z_sched_wake_thread>:
{
   22470:	b570      	push	{r4, r5, r6, lr}
   22472:	4604      	mov	r4, r0
   22474:	460d      	mov	r5, r1
	__asm__ volatile(
   22476:	f04f 0340 	mov.w	r3, #64	; 0x40
   2247a:	f3ef 8611 	mrs	r6, BASEPRI
   2247e:	f383 8812 	msr	BASEPRI_MAX, r3
   22482:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22486:	481f      	ldr	r0, [pc, #124]	; (22504 <z_sched_wake_thread+0x94>)
   22488:	f7fe f91c 	bl	206c4 <z_spin_lock_valid>
   2248c:	b968      	cbnz	r0, 224aa <z_sched_wake_thread+0x3a>
   2248e:	4a1e      	ldr	r2, [pc, #120]	; (22508 <z_sched_wake_thread+0x98>)
   22490:	491e      	ldr	r1, [pc, #120]	; (2250c <z_sched_wake_thread+0x9c>)
   22492:	481f      	ldr	r0, [pc, #124]	; (22510 <z_sched_wake_thread+0xa0>)
   22494:	2394      	movs	r3, #148	; 0x94
   22496:	f002 f929 	bl	246ec <assert_print>
   2249a:	491a      	ldr	r1, [pc, #104]	; (22504 <z_sched_wake_thread+0x94>)
   2249c:	481d      	ldr	r0, [pc, #116]	; (22514 <z_sched_wake_thread+0xa4>)
   2249e:	f002 f925 	bl	246ec <assert_print>
   224a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224a4:	4818      	ldr	r0, [pc, #96]	; (22508 <z_sched_wake_thread+0x98>)
   224a6:	f002 f91a 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   224aa:	4816      	ldr	r0, [pc, #88]	; (22504 <z_sched_wake_thread+0x94>)
   224ac:	f7fe f928 	bl	20700 <z_spin_lock_set_owner>
		if (!killed) {
   224b0:	7b63      	ldrb	r3, [r4, #13]
   224b2:	f013 0f28 	tst.w	r3, #40	; 0x28
   224b6:	d10c      	bne.n	224d2 <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   224b8:	68a3      	ldr	r3, [r4, #8]
   224ba:	b113      	cbz	r3, 224c2 <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   224bc:	4620      	mov	r0, r4
   224be:	f7ff ff6b 	bl	22398 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   224c2:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   224c4:	b9ad      	cbnz	r5, 224f2 <z_sched_wake_thread+0x82>
   224c6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   224ca:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   224cc:	4620      	mov	r0, r4
   224ce:	f7ff fa5f 	bl	21990 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   224d2:	480c      	ldr	r0, [pc, #48]	; (22504 <z_sched_wake_thread+0x94>)
   224d4:	f7fe f904 	bl	206e0 <z_spin_unlock_valid>
   224d8:	b970      	cbnz	r0, 224f8 <z_sched_wake_thread+0x88>
   224da:	4a0b      	ldr	r2, [pc, #44]	; (22508 <z_sched_wake_thread+0x98>)
   224dc:	490e      	ldr	r1, [pc, #56]	; (22518 <z_sched_wake_thread+0xa8>)
   224de:	480c      	ldr	r0, [pc, #48]	; (22510 <z_sched_wake_thread+0xa0>)
   224e0:	23c2      	movs	r3, #194	; 0xc2
   224e2:	f002 f903 	bl	246ec <assert_print>
   224e6:	4907      	ldr	r1, [pc, #28]	; (22504 <z_sched_wake_thread+0x94>)
   224e8:	480c      	ldr	r0, [pc, #48]	; (2251c <z_sched_wake_thread+0xac>)
   224ea:	f002 f8ff 	bl	246ec <assert_print>
   224ee:	21c2      	movs	r1, #194	; 0xc2
   224f0:	e7d8      	b.n	224a4 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   224f2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   224f6:	e7e8      	b.n	224ca <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   224f8:	f386 8811 	msr	BASEPRI, r6
   224fc:	f3bf 8f6f 	isb	sy
}
   22500:	bd70      	pop	{r4, r5, r6, pc}
   22502:	bf00      	nop
   22504:	200030f4 	.word	0x200030f4
   22508:	0002837e 	.word	0x0002837e
   2250c:	000283d7 	.word	0x000283d7
   22510:	00027f8a 	.word	0x00027f8a
   22514:	000283ec 	.word	0x000283ec
   22518:	000283ab 	.word	0x000283ab
   2251c:	000283c2 	.word	0x000283c2

00022520 <z_unpend1_no_timeout>:
{
   22520:	b570      	push	{r4, r5, r6, lr}
   22522:	4605      	mov	r5, r0
	__asm__ volatile(
   22524:	f04f 0340 	mov.w	r3, #64	; 0x40
   22528:	f3ef 8611 	mrs	r6, BASEPRI
   2252c:	f383 8812 	msr	BASEPRI_MAX, r3
   22530:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22534:	4819      	ldr	r0, [pc, #100]	; (2259c <z_unpend1_no_timeout+0x7c>)
   22536:	f7fe f8c5 	bl	206c4 <z_spin_lock_valid>
   2253a:	b968      	cbnz	r0, 22558 <z_unpend1_no_timeout+0x38>
   2253c:	4a18      	ldr	r2, [pc, #96]	; (225a0 <z_unpend1_no_timeout+0x80>)
   2253e:	4919      	ldr	r1, [pc, #100]	; (225a4 <z_unpend1_no_timeout+0x84>)
   22540:	4819      	ldr	r0, [pc, #100]	; (225a8 <z_unpend1_no_timeout+0x88>)
   22542:	2394      	movs	r3, #148	; 0x94
   22544:	f002 f8d2 	bl	246ec <assert_print>
   22548:	4914      	ldr	r1, [pc, #80]	; (2259c <z_unpend1_no_timeout+0x7c>)
   2254a:	4818      	ldr	r0, [pc, #96]	; (225ac <z_unpend1_no_timeout+0x8c>)
   2254c:	f002 f8ce 	bl	246ec <assert_print>
   22550:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22552:	4813      	ldr	r0, [pc, #76]	; (225a0 <z_unpend1_no_timeout+0x80>)
   22554:	f002 f8c3 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   22558:	4810      	ldr	r0, [pc, #64]	; (2259c <z_unpend1_no_timeout+0x7c>)
   2255a:	f7fe f8d1 	bl	20700 <z_spin_lock_set_owner>
	return list->head == list;
   2255e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22560:	42a5      	cmp	r5, r4
   22562:	d013      	beq.n	2258c <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   22564:	b114      	cbz	r4, 2256c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   22566:	4620      	mov	r0, r4
   22568:	f7ff ff16 	bl	22398 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2256c:	480b      	ldr	r0, [pc, #44]	; (2259c <z_unpend1_no_timeout+0x7c>)
   2256e:	f7fe f8b7 	bl	206e0 <z_spin_unlock_valid>
   22572:	b968      	cbnz	r0, 22590 <z_unpend1_no_timeout+0x70>
   22574:	4a0a      	ldr	r2, [pc, #40]	; (225a0 <z_unpend1_no_timeout+0x80>)
   22576:	490e      	ldr	r1, [pc, #56]	; (225b0 <z_unpend1_no_timeout+0x90>)
   22578:	480b      	ldr	r0, [pc, #44]	; (225a8 <z_unpend1_no_timeout+0x88>)
   2257a:	23c2      	movs	r3, #194	; 0xc2
   2257c:	f002 f8b6 	bl	246ec <assert_print>
   22580:	4906      	ldr	r1, [pc, #24]	; (2259c <z_unpend1_no_timeout+0x7c>)
   22582:	480c      	ldr	r0, [pc, #48]	; (225b4 <z_unpend1_no_timeout+0x94>)
   22584:	f002 f8b2 	bl	246ec <assert_print>
   22588:	21c2      	movs	r1, #194	; 0xc2
   2258a:	e7e2      	b.n	22552 <z_unpend1_no_timeout+0x32>
   2258c:	2400      	movs	r4, #0
   2258e:	e7ed      	b.n	2256c <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   22590:	f386 8811 	msr	BASEPRI, r6
   22594:	f3bf 8f6f 	isb	sy
}
   22598:	4620      	mov	r0, r4
   2259a:	bd70      	pop	{r4, r5, r6, pc}
   2259c:	200030f4 	.word	0x200030f4
   225a0:	0002837e 	.word	0x0002837e
   225a4:	000283d7 	.word	0x000283d7
   225a8:	00027f8a 	.word	0x00027f8a
   225ac:	000283ec 	.word	0x000283ec
   225b0:	000283ab 	.word	0x000283ab
   225b4:	000283c2 	.word	0x000283c2

000225b8 <z_unpend_first_thread>:
{
   225b8:	b570      	push	{r4, r5, r6, lr}
   225ba:	4605      	mov	r5, r0
	__asm__ volatile(
   225bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   225c0:	f3ef 8611 	mrs	r6, BASEPRI
   225c4:	f383 8812 	msr	BASEPRI_MAX, r3
   225c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225cc:	481b      	ldr	r0, [pc, #108]	; (2263c <z_unpend_first_thread+0x84>)
   225ce:	f7fe f879 	bl	206c4 <z_spin_lock_valid>
   225d2:	b968      	cbnz	r0, 225f0 <z_unpend_first_thread+0x38>
   225d4:	4a1a      	ldr	r2, [pc, #104]	; (22640 <z_unpend_first_thread+0x88>)
   225d6:	491b      	ldr	r1, [pc, #108]	; (22644 <z_unpend_first_thread+0x8c>)
   225d8:	481b      	ldr	r0, [pc, #108]	; (22648 <z_unpend_first_thread+0x90>)
   225da:	2394      	movs	r3, #148	; 0x94
   225dc:	f002 f886 	bl	246ec <assert_print>
   225e0:	4916      	ldr	r1, [pc, #88]	; (2263c <z_unpend_first_thread+0x84>)
   225e2:	481a      	ldr	r0, [pc, #104]	; (2264c <z_unpend_first_thread+0x94>)
   225e4:	f002 f882 	bl	246ec <assert_print>
   225e8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225ea:	4815      	ldr	r0, [pc, #84]	; (22640 <z_unpend_first_thread+0x88>)
   225ec:	f002 f877 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   225f0:	4812      	ldr	r0, [pc, #72]	; (2263c <z_unpend_first_thread+0x84>)
   225f2:	f7fe f885 	bl	20700 <z_spin_lock_set_owner>
	return list->head == list;
   225f6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225f8:	42a5      	cmp	r5, r4
   225fa:	d017      	beq.n	2262c <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   225fc:	b134      	cbz	r4, 2260c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   225fe:	4620      	mov	r0, r4
   22600:	f7ff feca 	bl	22398 <unpend_thread_no_timeout>
   22604:	f104 0018 	add.w	r0, r4, #24
   22608:	f000 fbfa 	bl	22e00 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2260c:	480b      	ldr	r0, [pc, #44]	; (2263c <z_unpend_first_thread+0x84>)
   2260e:	f7fe f867 	bl	206e0 <z_spin_unlock_valid>
   22612:	b968      	cbnz	r0, 22630 <z_unpend_first_thread+0x78>
   22614:	4a0a      	ldr	r2, [pc, #40]	; (22640 <z_unpend_first_thread+0x88>)
   22616:	490e      	ldr	r1, [pc, #56]	; (22650 <z_unpend_first_thread+0x98>)
   22618:	480b      	ldr	r0, [pc, #44]	; (22648 <z_unpend_first_thread+0x90>)
   2261a:	23c2      	movs	r3, #194	; 0xc2
   2261c:	f002 f866 	bl	246ec <assert_print>
   22620:	4906      	ldr	r1, [pc, #24]	; (2263c <z_unpend_first_thread+0x84>)
   22622:	480c      	ldr	r0, [pc, #48]	; (22654 <z_unpend_first_thread+0x9c>)
   22624:	f002 f862 	bl	246ec <assert_print>
   22628:	21c2      	movs	r1, #194	; 0xc2
   2262a:	e7de      	b.n	225ea <z_unpend_first_thread+0x32>
   2262c:	2400      	movs	r4, #0
   2262e:	e7ed      	b.n	2260c <z_unpend_first_thread+0x54>
	__asm__ volatile(
   22630:	f386 8811 	msr	BASEPRI, r6
   22634:	f3bf 8f6f 	isb	sy
}
   22638:	4620      	mov	r0, r4
   2263a:	bd70      	pop	{r4, r5, r6, pc}
   2263c:	200030f4 	.word	0x200030f4
   22640:	0002837e 	.word	0x0002837e
   22644:	000283d7 	.word	0x000283d7
   22648:	00027f8a 	.word	0x00027f8a
   2264c:	000283ec 	.word	0x000283ec
   22650:	000283ab 	.word	0x000283ab
   22654:	000283c2 	.word	0x000283c2

00022658 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   22658:	4b02      	ldr	r3, [pc, #8]	; (22664 <z_sched_init+0xc>)
   2265a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2265e:	e9c3 2208 	strd	r2, r2, [r3, #32]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   22662:	4770      	bx	lr
   22664:	200030a8 	.word	0x200030a8

00022668 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   22668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2266a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2266e:	b16b      	cbz	r3, 2268c <z_impl_k_yield+0x24>
   22670:	493c      	ldr	r1, [pc, #240]	; (22764 <z_impl_k_yield+0xfc>)
   22672:	4a3d      	ldr	r2, [pc, #244]	; (22768 <z_impl_k_yield+0x100>)
   22674:	483d      	ldr	r0, [pc, #244]	; (2276c <z_impl_k_yield+0x104>)
   22676:	f240 5371 	movw	r3, #1393	; 0x571
   2267a:	f002 f837 	bl	246ec <assert_print>
   2267e:	483c      	ldr	r0, [pc, #240]	; (22770 <z_impl_k_yield+0x108>)
   22680:	f002 f834 	bl	246ec <assert_print>
   22684:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22688:	4837      	ldr	r0, [pc, #220]	; (22768 <z_impl_k_yield+0x100>)
   2268a:	e017      	b.n	226bc <z_impl_k_yield+0x54>
	__asm__ volatile(
   2268c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22690:	f3ef 8611 	mrs	r6, BASEPRI
   22694:	f383 8812 	msr	BASEPRI_MAX, r3
   22698:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2269c:	4835      	ldr	r0, [pc, #212]	; (22774 <z_impl_k_yield+0x10c>)
   2269e:	f7fe f811 	bl	206c4 <z_spin_lock_valid>
   226a2:	b968      	cbnz	r0, 226c0 <z_impl_k_yield+0x58>
   226a4:	4a34      	ldr	r2, [pc, #208]	; (22778 <z_impl_k_yield+0x110>)
   226a6:	4935      	ldr	r1, [pc, #212]	; (2277c <z_impl_k_yield+0x114>)
   226a8:	4830      	ldr	r0, [pc, #192]	; (2276c <z_impl_k_yield+0x104>)
   226aa:	2394      	movs	r3, #148	; 0x94
   226ac:	f002 f81e 	bl	246ec <assert_print>
   226b0:	4930      	ldr	r1, [pc, #192]	; (22774 <z_impl_k_yield+0x10c>)
   226b2:	4833      	ldr	r0, [pc, #204]	; (22780 <z_impl_k_yield+0x118>)
   226b4:	f002 f81a 	bl	246ec <assert_print>
   226b8:	2194      	movs	r1, #148	; 0x94
   226ba:	482f      	ldr	r0, [pc, #188]	; (22778 <z_impl_k_yield+0x110>)
   226bc:	f002 f80f 	bl	246de <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   226c0:	4c30      	ldr	r4, [pc, #192]	; (22784 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   226c2:	482c      	ldr	r0, [pc, #176]	; (22774 <z_impl_k_yield+0x10c>)
   226c4:	f7fe f81c 	bl	20700 <z_spin_lock_set_owner>
   226c8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   226ca:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   226cc:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   226d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   226d4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   226d6:	4628      	mov	r0, r5
   226d8:	f7ff fba6 	bl	21e28 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   226dc:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   226de:	7b5a      	ldrb	r2, [r3, #13]
   226e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   226e4:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   226e6:	4a28      	ldr	r2, [pc, #160]	; (22788 <z_impl_k_yield+0x120>)
   226e8:	4293      	cmp	r3, r2
   226ea:	d107      	bne.n	226fc <z_impl_k_yield+0x94>
   226ec:	4927      	ldr	r1, [pc, #156]	; (2278c <z_impl_k_yield+0x124>)
   226ee:	4a1e      	ldr	r2, [pc, #120]	; (22768 <z_impl_k_yield+0x100>)
   226f0:	481e      	ldr	r0, [pc, #120]	; (2276c <z_impl_k_yield+0x104>)
   226f2:	23bc      	movs	r3, #188	; 0xbc
   226f4:	f001 fffa 	bl	246ec <assert_print>
   226f8:	21bc      	movs	r1, #188	; 0xbc
   226fa:	e7c5      	b.n	22688 <z_impl_k_yield+0x20>
	return list->head == list;
   226fc:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   226fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22700:	42aa      	cmp	r2, r5
   22702:	bf08      	it	eq
   22704:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22706:	b922      	cbnz	r2, 22712 <z_impl_k_yield+0xaa>
	node->prev = tail;
   22708:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   2270c:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2270e:	6263      	str	r3, [r4, #36]	; 0x24
}
   22710:	e00c      	b.n	2272c <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   22712:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   22716:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2271a:	42b8      	cmp	r0, r7
   2271c:	d019      	beq.n	22752 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2271e:	4287      	cmp	r7, r0
   22720:	dd17      	ble.n	22752 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   22722:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22724:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   22728:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2272a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2272c:	2001      	movs	r0, #1
   2272e:	f7ff f8fb 	bl	21928 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22732:	4810      	ldr	r0, [pc, #64]	; (22774 <z_impl_k_yield+0x10c>)
   22734:	f7fd ffd4 	bl	206e0 <z_spin_unlock_valid>
   22738:	b978      	cbnz	r0, 2275a <z_impl_k_yield+0xf2>
   2273a:	4a0f      	ldr	r2, [pc, #60]	; (22778 <z_impl_k_yield+0x110>)
   2273c:	4914      	ldr	r1, [pc, #80]	; (22790 <z_impl_k_yield+0x128>)
   2273e:	480b      	ldr	r0, [pc, #44]	; (2276c <z_impl_k_yield+0x104>)
   22740:	23e1      	movs	r3, #225	; 0xe1
   22742:	f001 ffd3 	bl	246ec <assert_print>
   22746:	490b      	ldr	r1, [pc, #44]	; (22774 <z_impl_k_yield+0x10c>)
   22748:	4812      	ldr	r0, [pc, #72]	; (22794 <z_impl_k_yield+0x12c>)
   2274a:	f001 ffcf 	bl	246ec <assert_print>
   2274e:	21e1      	movs	r1, #225	; 0xe1
   22750:	e7b3      	b.n	226ba <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   22752:	428a      	cmp	r2, r1
   22754:	d0d8      	beq.n	22708 <z_impl_k_yield+0xa0>
   22756:	6812      	ldr	r2, [r2, #0]
   22758:	e7d5      	b.n	22706 <z_impl_k_yield+0x9e>
   2275a:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   2275c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22760:	f7f2 bc2e 	b.w	14fc0 <arch_swap>
   22764:	0002b4a3 	.word	0x0002b4a3
   22768:	0002b710 	.word	0x0002b710
   2276c:	00027f8a 	.word	0x00027f8a
   22770:	0002a56f 	.word	0x0002a56f
   22774:	200030f4 	.word	0x200030f4
   22778:	0002837e 	.word	0x0002837e
   2277c:	000283d7 	.word	0x000283d7
   22780:	000283ec 	.word	0x000283ec
   22784:	200030a8 	.word	0x200030a8
   22788:	20002a60 	.word	0x20002a60
   2278c:	0002b8f2 	.word	0x0002b8f2
   22790:	000283ab 	.word	0x000283ab
   22794:	000283c2 	.word	0x000283c2

00022798 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   22798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2279c:	4605      	mov	r5, r0
   2279e:	460e      	mov	r6, r1
   227a0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   227a4:	b16b      	cbz	r3, 227c2 <z_tick_sleep+0x2a>
   227a6:	493f      	ldr	r1, [pc, #252]	; (228a4 <z_tick_sleep+0x10c>)
   227a8:	4a3f      	ldr	r2, [pc, #252]	; (228a8 <z_tick_sleep+0x110>)
   227aa:	4840      	ldr	r0, [pc, #256]	; (228ac <z_tick_sleep+0x114>)
   227ac:	f240 538d 	movw	r3, #1421	; 0x58d
   227b0:	f001 ff9c 	bl	246ec <assert_print>
   227b4:	483e      	ldr	r0, [pc, #248]	; (228b0 <z_tick_sleep+0x118>)
   227b6:	f001 ff99 	bl	246ec <assert_print>
   227ba:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   227be:	483a      	ldr	r0, [pc, #232]	; (228a8 <z_tick_sleep+0x110>)
   227c0:	e025      	b.n	2280e <z_tick_sleep+0x76>
	if (ticks == 0) {
   227c2:	ea50 0301 	orrs.w	r3, r0, r1
   227c6:	d103      	bne.n	227d0 <z_tick_sleep+0x38>
	z_impl_k_yield();
   227c8:	f7ff ff4e 	bl	22668 <z_impl_k_yield>
		return 0;
   227cc:	2000      	movs	r0, #0
   227ce:	e066      	b.n	2289e <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   227d0:	1c82      	adds	r2, r0, #2
   227d2:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   227d6:	db1c      	blt.n	22812 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   227d8:	f004 fb3f 	bl	26e5a <sys_clock_tick_get_32>
   227dc:	182c      	adds	r4, r5, r0
   227de:	f04f 0340 	mov.w	r3, #64	; 0x40
   227e2:	f3ef 8811 	mrs	r8, BASEPRI
   227e6:	f383 8812 	msr	BASEPRI_MAX, r3
   227ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227ee:	4831      	ldr	r0, [pc, #196]	; (228b4 <z_tick_sleep+0x11c>)
   227f0:	f7fd ff68 	bl	206c4 <z_spin_lock_valid>
   227f4:	b988      	cbnz	r0, 2281a <z_tick_sleep+0x82>
   227f6:	4a30      	ldr	r2, [pc, #192]	; (228b8 <z_tick_sleep+0x120>)
   227f8:	4930      	ldr	r1, [pc, #192]	; (228bc <z_tick_sleep+0x124>)
   227fa:	482c      	ldr	r0, [pc, #176]	; (228ac <z_tick_sleep+0x114>)
   227fc:	2394      	movs	r3, #148	; 0x94
   227fe:	f001 ff75 	bl	246ec <assert_print>
   22802:	492c      	ldr	r1, [pc, #176]	; (228b4 <z_tick_sleep+0x11c>)
   22804:	482e      	ldr	r0, [pc, #184]	; (228c0 <z_tick_sleep+0x128>)
   22806:	f001 ff71 	bl	246ec <assert_print>
   2280a:	2194      	movs	r1, #148	; 0x94
   2280c:	482a      	ldr	r0, [pc, #168]	; (228b8 <z_tick_sleep+0x120>)
   2280e:	f001 ff66 	bl	246de <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   22812:	f06f 0401 	mvn.w	r4, #1
   22816:	1a24      	subs	r4, r4, r0
   22818:	e7e1      	b.n	227de <z_tick_sleep+0x46>
	pending_current = _current;
   2281a:	4f2a      	ldr	r7, [pc, #168]	; (228c4 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   2281c:	4825      	ldr	r0, [pc, #148]	; (228b4 <z_tick_sleep+0x11c>)
   2281e:	f7fd ff6f 	bl	20700 <z_spin_lock_set_owner>
   22822:	4b29      	ldr	r3, [pc, #164]	; (228c8 <z_tick_sleep+0x130>)
   22824:	68b8      	ldr	r0, [r7, #8]
   22826:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22828:	f7ff fbd4 	bl	21fd4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2282c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2282e:	4927      	ldr	r1, [pc, #156]	; (228cc <z_tick_sleep+0x134>)
   22830:	462a      	mov	r2, r5
   22832:	4633      	mov	r3, r6
   22834:	3018      	adds	r0, #24
   22836:	f000 fa23 	bl	22c80 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2283a:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2283c:	481d      	ldr	r0, [pc, #116]	; (228b4 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2283e:	7b53      	ldrb	r3, [r2, #13]
   22840:	f043 0310 	orr.w	r3, r3, #16
   22844:	7353      	strb	r3, [r2, #13]
   22846:	f7fd ff4b 	bl	206e0 <z_spin_unlock_valid>
   2284a:	b958      	cbnz	r0, 22864 <z_tick_sleep+0xcc>
   2284c:	4a1a      	ldr	r2, [pc, #104]	; (228b8 <z_tick_sleep+0x120>)
   2284e:	4920      	ldr	r1, [pc, #128]	; (228d0 <z_tick_sleep+0x138>)
   22850:	4816      	ldr	r0, [pc, #88]	; (228ac <z_tick_sleep+0x114>)
   22852:	23e1      	movs	r3, #225	; 0xe1
   22854:	f001 ff4a 	bl	246ec <assert_print>
   22858:	4916      	ldr	r1, [pc, #88]	; (228b4 <z_tick_sleep+0x11c>)
   2285a:	481e      	ldr	r0, [pc, #120]	; (228d4 <z_tick_sleep+0x13c>)
   2285c:	f001 ff46 	bl	246ec <assert_print>
   22860:	21e1      	movs	r1, #225	; 0xe1
   22862:	e7d3      	b.n	2280c <z_tick_sleep+0x74>
   22864:	4640      	mov	r0, r8
   22866:	f7f2 fbab 	bl	14fc0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2286a:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2286c:	7b5b      	ldrb	r3, [r3, #13]
   2286e:	06db      	lsls	r3, r3, #27
   22870:	d50c      	bpl.n	2288c <z_tick_sleep+0xf4>
   22872:	4919      	ldr	r1, [pc, #100]	; (228d8 <z_tick_sleep+0x140>)
   22874:	4a0c      	ldr	r2, [pc, #48]	; (228a8 <z_tick_sleep+0x110>)
   22876:	480d      	ldr	r0, [pc, #52]	; (228ac <z_tick_sleep+0x114>)
   22878:	f240 53a9 	movw	r3, #1449	; 0x5a9
   2287c:	f001 ff36 	bl	246ec <assert_print>
   22880:	480b      	ldr	r0, [pc, #44]	; (228b0 <z_tick_sleep+0x118>)
   22882:	f001 ff33 	bl	246ec <assert_print>
   22886:	f240 51a9 	movw	r1, #1449	; 0x5a9
   2288a:	e798      	b.n	227be <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2288c:	f004 fae5 	bl	26e5a <sys_clock_tick_get_32>
   22890:	1a20      	subs	r0, r4, r0
   22892:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22896:	2801      	cmp	r0, #1
   22898:	f173 0300 	sbcs.w	r3, r3, #0
   2289c:	db96      	blt.n	227cc <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   2289e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   228a2:	bf00      	nop
   228a4:	0002b4a3 	.word	0x0002b4a3
   228a8:	0002b710 	.word	0x0002b710
   228ac:	00027f8a 	.word	0x00027f8a
   228b0:	0002a56f 	.word	0x0002a56f
   228b4:	200030f4 	.word	0x200030f4
   228b8:	0002837e 	.word	0x0002837e
   228bc:	000283d7 	.word	0x000283d7
   228c0:	000283ec 	.word	0x000283ec
   228c4:	200030a8 	.word	0x200030a8
   228c8:	200030e8 	.word	0x200030e8
   228cc:	00026e33 	.word	0x00026e33
   228d0:	000283ab 	.word	0x000283ab
   228d4:	000283c2 	.word	0x000283c2
   228d8:	0002b9ee 	.word	0x0002b9ee

000228dc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   228dc:	b508      	push	{r3, lr}
   228de:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   228e2:	b173      	cbz	r3, 22902 <z_impl_k_sleep+0x26>
   228e4:	4912      	ldr	r1, [pc, #72]	; (22930 <z_impl_k_sleep+0x54>)
   228e6:	4a13      	ldr	r2, [pc, #76]	; (22934 <z_impl_k_sleep+0x58>)
   228e8:	4813      	ldr	r0, [pc, #76]	; (22938 <z_impl_k_sleep+0x5c>)
   228ea:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   228ee:	f001 fefd 	bl	246ec <assert_print>
   228f2:	4812      	ldr	r0, [pc, #72]	; (2293c <z_impl_k_sleep+0x60>)
   228f4:	f001 fefa 	bl	246ec <assert_print>
   228f8:	480e      	ldr	r0, [pc, #56]	; (22934 <z_impl_k_sleep+0x58>)
   228fa:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   228fe:	f001 feee 	bl	246de <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22902:	f1b1 3fff 	cmp.w	r1, #4294967295
   22906:	bf08      	it	eq
   22908:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2290c:	d106      	bne.n	2291c <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   2290e:	4b0c      	ldr	r3, [pc, #48]	; (22940 <z_impl_k_sleep+0x64>)
   22910:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22912:	f7ff fcd9 	bl	222c8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22916:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2291a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2291c:	f7ff ff3c 	bl	22798 <z_tick_sleep>
   22920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22924:	fb80 0303 	smull	r0, r3, r0, r3
   22928:	0bc0      	lsrs	r0, r0, #15
   2292a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2292e:	e7f4      	b.n	2291a <z_impl_k_sleep+0x3e>
   22930:	0002b4a3 	.word	0x0002b4a3
   22934:	0002b710 	.word	0x0002b710
   22938:	00027f8a 	.word	0x00027f8a
   2293c:	0002a56f 	.word	0x0002a56f
   22940:	200030a8 	.word	0x200030a8

00022944 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22944:	4b01      	ldr	r3, [pc, #4]	; (2294c <z_impl_z_current_get+0x8>)
   22946:	6898      	ldr	r0, [r3, #8]
   22948:	4770      	bx	lr
   2294a:	bf00      	nop
   2294c:	200030a8 	.word	0x200030a8

00022950 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22954:	4604      	mov	r4, r0
   22956:	f04f 0340 	mov.w	r3, #64	; 0x40
   2295a:	f3ef 8611 	mrs	r6, BASEPRI
   2295e:	f383 8812 	msr	BASEPRI_MAX, r3
   22962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22966:	4851      	ldr	r0, [pc, #324]	; (22aac <z_thread_abort+0x15c>)
   22968:	f7fd feac 	bl	206c4 <z_spin_lock_valid>
   2296c:	b968      	cbnz	r0, 2298a <z_thread_abort+0x3a>
   2296e:	4a50      	ldr	r2, [pc, #320]	; (22ab0 <z_thread_abort+0x160>)
   22970:	4950      	ldr	r1, [pc, #320]	; (22ab4 <z_thread_abort+0x164>)
   22972:	4851      	ldr	r0, [pc, #324]	; (22ab8 <z_thread_abort+0x168>)
   22974:	2394      	movs	r3, #148	; 0x94
   22976:	f001 feb9 	bl	246ec <assert_print>
   2297a:	494c      	ldr	r1, [pc, #304]	; (22aac <z_thread_abort+0x15c>)
   2297c:	484f      	ldr	r0, [pc, #316]	; (22abc <z_thread_abort+0x16c>)
   2297e:	f001 feb5 	bl	246ec <assert_print>
   22982:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22984:	484a      	ldr	r0, [pc, #296]	; (22ab0 <z_thread_abort+0x160>)
   22986:	f001 feaa 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   2298a:	4848      	ldr	r0, [pc, #288]	; (22aac <z_thread_abort+0x15c>)
   2298c:	f7fd feb8 	bl	20700 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22990:	7b23      	ldrb	r3, [r4, #12]
   22992:	07d9      	lsls	r1, r3, #31
   22994:	d522      	bpl.n	229dc <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22996:	4845      	ldr	r0, [pc, #276]	; (22aac <z_thread_abort+0x15c>)
   22998:	f7fd fea2 	bl	206e0 <z_spin_unlock_valid>
   2299c:	b958      	cbnz	r0, 229b6 <z_thread_abort+0x66>
   2299e:	4a44      	ldr	r2, [pc, #272]	; (22ab0 <z_thread_abort+0x160>)
   229a0:	4947      	ldr	r1, [pc, #284]	; (22ac0 <z_thread_abort+0x170>)
   229a2:	4845      	ldr	r0, [pc, #276]	; (22ab8 <z_thread_abort+0x168>)
   229a4:	23c2      	movs	r3, #194	; 0xc2
   229a6:	f001 fea1 	bl	246ec <assert_print>
   229aa:	4940      	ldr	r1, [pc, #256]	; (22aac <z_thread_abort+0x15c>)
   229ac:	4845      	ldr	r0, [pc, #276]	; (22ac4 <z_thread_abort+0x174>)
   229ae:	f001 fe9d 	bl	246ec <assert_print>
   229b2:	21c2      	movs	r1, #194	; 0xc2
   229b4:	e7e6      	b.n	22984 <z_thread_abort+0x34>
	__asm__ volatile(
   229b6:	f386 8811 	msr	BASEPRI, r6
   229ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   229be:	4a42      	ldr	r2, [pc, #264]	; (22ac8 <z_thread_abort+0x178>)
   229c0:	4942      	ldr	r1, [pc, #264]	; (22acc <z_thread_abort+0x17c>)
   229c2:	483d      	ldr	r0, [pc, #244]	; (22ab8 <z_thread_abort+0x168>)
   229c4:	f240 63ca 	movw	r3, #1738	; 0x6ca
   229c8:	f001 fe90 	bl	246ec <assert_print>
   229cc:	4621      	mov	r1, r4
   229ce:	4840      	ldr	r0, [pc, #256]	; (22ad0 <z_thread_abort+0x180>)
   229d0:	f001 fe8c 	bl	246ec <assert_print>
   229d4:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   229d8:	483b      	ldr	r0, [pc, #236]	; (22ac8 <z_thread_abort+0x178>)
   229da:	e7d4      	b.n	22986 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   229dc:	7b63      	ldrb	r3, [r4, #13]
   229de:	071a      	lsls	r2, r3, #28
   229e0:	d50a      	bpl.n	229f8 <z_thread_abort+0xa8>
   229e2:	4832      	ldr	r0, [pc, #200]	; (22aac <z_thread_abort+0x15c>)
   229e4:	f7fd fe7c 	bl	206e0 <z_spin_unlock_valid>
   229e8:	2800      	cmp	r0, #0
   229ea:	d0d8      	beq.n	2299e <z_thread_abort+0x4e>
   229ec:	f386 8811 	msr	BASEPRI, r6
   229f0:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   229f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   229f8:	f023 0220 	bic.w	r2, r3, #32
   229fc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22a00:	09d2      	lsrs	r2, r2, #7
   22a02:	d12c      	bne.n	22a5e <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22a04:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   22a06:	68a3      	ldr	r3, [r4, #8]
   22a08:	b113      	cbz	r3, 22a10 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   22a0a:	4620      	mov	r0, r4
   22a0c:	f7ff fcc4 	bl	22398 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22a10:	f104 0018 	add.w	r0, r4, #24
   22a14:	f000 f9f4 	bl	22e00 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22a18:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22a1c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22a20:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a22:	42bd      	cmp	r5, r7
   22a24:	d000      	beq.n	22a28 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22a26:	bb25      	cbnz	r5, 22a72 <z_thread_abort+0x122>
		update_cache(1);
   22a28:	2001      	movs	r0, #1
   22a2a:	f7fe ff7d 	bl	21928 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22a2e:	4b29      	ldr	r3, [pc, #164]	; (22ad4 <z_thread_abort+0x184>)
   22a30:	689b      	ldr	r3, [r3, #8]
   22a32:	42a3      	cmp	r3, r4
   22a34:	d1d5      	bne.n	229e2 <z_thread_abort+0x92>
   22a36:	f3ef 8305 	mrs	r3, IPSR
   22a3a:	2b00      	cmp	r3, #0
   22a3c:	d1d1      	bne.n	229e2 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a3e:	481b      	ldr	r0, [pc, #108]	; (22aac <z_thread_abort+0x15c>)
   22a40:	f7fd fe4e 	bl	206e0 <z_spin_unlock_valid>
   22a44:	bb10      	cbnz	r0, 22a8c <z_thread_abort+0x13c>
   22a46:	4a1a      	ldr	r2, [pc, #104]	; (22ab0 <z_thread_abort+0x160>)
   22a48:	491d      	ldr	r1, [pc, #116]	; (22ac0 <z_thread_abort+0x170>)
   22a4a:	481b      	ldr	r0, [pc, #108]	; (22ab8 <z_thread_abort+0x168>)
   22a4c:	23e1      	movs	r3, #225	; 0xe1
   22a4e:	f001 fe4d 	bl	246ec <assert_print>
   22a52:	4916      	ldr	r1, [pc, #88]	; (22aac <z_thread_abort+0x15c>)
   22a54:	481b      	ldr	r0, [pc, #108]	; (22ac4 <z_thread_abort+0x174>)
   22a56:	f001 fe49 	bl	246ec <assert_print>
   22a5a:	21e1      	movs	r1, #225	; 0xe1
   22a5c:	e792      	b.n	22984 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a5e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22a62:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22a66:	481c      	ldr	r0, [pc, #112]	; (22ad8 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22a68:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22a6a:	4621      	mov	r1, r4
   22a6c:	f7ff f9dc 	bl	21e28 <z_priq_dumb_remove>
}
   22a70:	e7c9      	b.n	22a06 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   22a72:	4628      	mov	r0, r5
   22a74:	f7ff fc90 	bl	22398 <unpend_thread_no_timeout>
   22a78:	f105 0018 	add.w	r0, r5, #24
   22a7c:	f000 f9c0 	bl	22e00 <z_abort_timeout>
   22a80:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22a84:	4628      	mov	r0, r5
   22a86:	f7fe ff83 	bl	21990 <ready_thread>
   22a8a:	e7c9      	b.n	22a20 <z_thread_abort+0xd0>
   22a8c:	4630      	mov	r0, r6
   22a8e:	f7f2 fa97 	bl	14fc0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22a92:	490e      	ldr	r1, [pc, #56]	; (22acc <z_thread_abort+0x17c>)
   22a94:	4a0c      	ldr	r2, [pc, #48]	; (22ac8 <z_thread_abort+0x178>)
   22a96:	4808      	ldr	r0, [pc, #32]	; (22ab8 <z_thread_abort+0x168>)
   22a98:	f240 63f9 	movw	r3, #1785	; 0x6f9
   22a9c:	f001 fe26 	bl	246ec <assert_print>
   22aa0:	480e      	ldr	r0, [pc, #56]	; (22adc <z_thread_abort+0x18c>)
   22aa2:	f001 fe23 	bl	246ec <assert_print>
   22aa6:	f240 61f9 	movw	r1, #1785	; 0x6f9
   22aaa:	e795      	b.n	229d8 <z_thread_abort+0x88>
   22aac:	200030f4 	.word	0x200030f4
   22ab0:	0002837e 	.word	0x0002837e
   22ab4:	000283d7 	.word	0x000283d7
   22ab8:	00027f8a 	.word	0x00027f8a
   22abc:	000283ec 	.word	0x000283ec
   22ac0:	000283ab 	.word	0x000283ab
   22ac4:	000283c2 	.word	0x000283c2
   22ac8:	0002b710 	.word	0x0002b710
   22acc:	0002ab0f 	.word	0x0002ab0f
   22ad0:	0002ba2e 	.word	0x0002ba2e
   22ad4:	200030a8 	.word	0x200030a8
   22ad8:	200030c8 	.word	0x200030c8
   22adc:	0002ba4d 	.word	0x0002ba4d

00022ae0 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   22ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ae4:	4606      	mov	r6, r0
   22ae6:	4688      	mov	r8, r1
   22ae8:	4617      	mov	r7, r2
	__asm__ volatile(
   22aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   22aee:	f3ef 8911 	mrs	r9, BASEPRI
   22af2:	f383 8812 	msr	BASEPRI_MAX, r3
   22af6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22afa:	4821      	ldr	r0, [pc, #132]	; (22b80 <z_sched_wake+0xa0>)
   22afc:	f7fd fde2 	bl	206c4 <z_spin_lock_valid>
   22b00:	4605      	mov	r5, r0
   22b02:	b968      	cbnz	r0, 22b20 <z_sched_wake+0x40>
   22b04:	4a1f      	ldr	r2, [pc, #124]	; (22b84 <z_sched_wake+0xa4>)
   22b06:	4920      	ldr	r1, [pc, #128]	; (22b88 <z_sched_wake+0xa8>)
   22b08:	4820      	ldr	r0, [pc, #128]	; (22b8c <z_sched_wake+0xac>)
   22b0a:	2394      	movs	r3, #148	; 0x94
   22b0c:	f001 fdee 	bl	246ec <assert_print>
   22b10:	491b      	ldr	r1, [pc, #108]	; (22b80 <z_sched_wake+0xa0>)
   22b12:	481f      	ldr	r0, [pc, #124]	; (22b90 <z_sched_wake+0xb0>)
   22b14:	f001 fdea 	bl	246ec <assert_print>
   22b18:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b1a:	481a      	ldr	r0, [pc, #104]	; (22b84 <z_sched_wake+0xa4>)
   22b1c:	f001 fddf 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   22b20:	4817      	ldr	r0, [pc, #92]	; (22b80 <z_sched_wake+0xa0>)
   22b22:	f7fd fded 	bl	20700 <z_spin_lock_set_owner>
	return list->head == list;
   22b26:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22b28:	42a6      	cmp	r6, r4
   22b2a:	d01d      	beq.n	22b68 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   22b2c:	b1f4      	cbz	r4, 22b6c <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   22b2e:	4620      	mov	r0, r4
   22b30:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   22b34:	6167      	str	r7, [r4, #20]
   22b36:	f7ff fc2f 	bl	22398 <unpend_thread_no_timeout>
   22b3a:	f104 0018 	add.w	r0, r4, #24
   22b3e:	f000 f95f 	bl	22e00 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22b42:	4620      	mov	r0, r4
   22b44:	f7fe ff24 	bl	21990 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b48:	480d      	ldr	r0, [pc, #52]	; (22b80 <z_sched_wake+0xa0>)
   22b4a:	f7fd fdc9 	bl	206e0 <z_spin_unlock_valid>
   22b4e:	b978      	cbnz	r0, 22b70 <z_sched_wake+0x90>
   22b50:	4a0c      	ldr	r2, [pc, #48]	; (22b84 <z_sched_wake+0xa4>)
   22b52:	4910      	ldr	r1, [pc, #64]	; (22b94 <z_sched_wake+0xb4>)
   22b54:	480d      	ldr	r0, [pc, #52]	; (22b8c <z_sched_wake+0xac>)
   22b56:	23c2      	movs	r3, #194	; 0xc2
   22b58:	f001 fdc8 	bl	246ec <assert_print>
   22b5c:	4908      	ldr	r1, [pc, #32]	; (22b80 <z_sched_wake+0xa0>)
   22b5e:	480e      	ldr	r0, [pc, #56]	; (22b98 <z_sched_wake+0xb8>)
   22b60:	f001 fdc4 	bl	246ec <assert_print>
   22b64:	21c2      	movs	r1, #194	; 0xc2
   22b66:	e7d8      	b.n	22b1a <z_sched_wake+0x3a>
	bool ret = false;
   22b68:	2500      	movs	r5, #0
   22b6a:	e7ed      	b.n	22b48 <z_sched_wake+0x68>
   22b6c:	4625      	mov	r5, r4
   22b6e:	e7eb      	b.n	22b48 <z_sched_wake+0x68>
	__asm__ volatile(
   22b70:	f389 8811 	msr	BASEPRI, r9
   22b74:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   22b78:	4628      	mov	r0, r5
   22b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22b7e:	bf00      	nop
   22b80:	200030f4 	.word	0x200030f4
   22b84:	0002837e 	.word	0x0002837e
   22b88:	000283d7 	.word	0x000283d7
   22b8c:	00027f8a 	.word	0x00027f8a
   22b90:	000283ec 	.word	0x000283ec
   22b94:	000283ab 	.word	0x000283ab
   22b98:	000283c2 	.word	0x000283c2

00022b9c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22b9c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22b9e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22ba2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22ba4:	e9cd 6700 	strd	r6, r7, [sp]
   22ba8:	f7ff fa86 	bl	220b8 <z_pend_curr>

	if (data != NULL) {
   22bac:	b11c      	cbz	r4, 22bb6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22bae:	4b03      	ldr	r3, [pc, #12]	; (22bbc <z_sched_wait+0x20>)
   22bb0:	689b      	ldr	r3, [r3, #8]
   22bb2:	695b      	ldr	r3, [r3, #20]
   22bb4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22bb6:	b002      	add	sp, #8
   22bb8:	bdd0      	pop	{r4, r6, r7, pc}
   22bba:	bf00      	nop
   22bbc:	200030a8 	.word	0x200030a8

00022bc0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22bc0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22bc2:	4806      	ldr	r0, [pc, #24]	; (22bdc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22bc4:	4a06      	ldr	r2, [pc, #24]	; (22be0 <z_data_copy+0x20>)
   22bc6:	4907      	ldr	r1, [pc, #28]	; (22be4 <z_data_copy+0x24>)
   22bc8:	1a12      	subs	r2, r2, r0
   22bca:	f004 f82d 	bl	26c28 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22bd2:	4a05      	ldr	r2, [pc, #20]	; (22be8 <z_data_copy+0x28>)
   22bd4:	4905      	ldr	r1, [pc, #20]	; (22bec <z_data_copy+0x2c>)
   22bd6:	4806      	ldr	r0, [pc, #24]	; (22bf0 <z_data_copy+0x30>)
   22bd8:	f004 b826 	b.w	26c28 <z_early_memcpy>
   22bdc:	20000000 	.word	0x20000000
   22be0:	20000ae0 	.word	0x20000ae0
   22be4:	0002bdcc 	.word	0x0002bdcc
   22be8:	00000000 	.word	0x00000000
   22bec:	0002bdcc 	.word	0x0002bdcc
   22bf0:	20000000 	.word	0x20000000

00022bf4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22bf4:	4b03      	ldr	r3, [pc, #12]	; (22c04 <elapsed+0x10>)
   22bf6:	681b      	ldr	r3, [r3, #0]
   22bf8:	b90b      	cbnz	r3, 22bfe <elapsed+0xa>
   22bfa:	f7fa bf8b 	b.w	1db14 <sys_clock_elapsed>
}
   22bfe:	2000      	movs	r0, #0
   22c00:	4770      	bx	lr
   22c02:	bf00      	nop
   22c04:	200030f8 	.word	0x200030f8

00022c08 <next_timeout>:

static int32_t next_timeout(void)
{
   22c08:	b510      	push	{r4, lr}
	return list->head == list;
   22c0a:	4b0e      	ldr	r3, [pc, #56]	; (22c44 <next_timeout+0x3c>)
   22c0c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c0e:	429c      	cmp	r4, r3
   22c10:	d104      	bne.n	22c1c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22c12:	f7ff ffef 	bl	22bf4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   22c16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   22c1a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   22c1c:	f7ff ffea 	bl	22bf4 <elapsed>
	if ((to == NULL) ||
   22c20:	2c00      	cmp	r4, #0
   22c22:	d0f8      	beq.n	22c16 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22c24:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22c28:	1a1b      	subs	r3, r3, r0
   22c2a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22c32:	f172 0100 	sbcs.w	r1, r2, #0
   22c36:	daee      	bge.n	22c16 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   22c38:	2a00      	cmp	r2, #0
   22c3a:	bfac      	ite	ge
   22c3c:	4618      	movge	r0, r3
   22c3e:	2000      	movlt	r0, #0
	return ret;
   22c40:	e7eb      	b.n	22c1a <next_timeout+0x12>
   22c42:	bf00      	nop
   22c44:	20000768 	.word	0x20000768

00022c48 <remove_timeout>:
{
   22c48:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22c4a:	b170      	cbz	r0, 22c6a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22c4c:	4b0b      	ldr	r3, [pc, #44]	; (22c7c <remove_timeout+0x34>)
   22c4e:	685b      	ldr	r3, [r3, #4]
   22c50:	4298      	cmp	r0, r3
   22c52:	d00a      	beq.n	22c6a <remove_timeout+0x22>
   22c54:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   22c56:	b143      	cbz	r3, 22c6a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22c58:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22c5c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22c60:	1912      	adds	r2, r2, r4
   22c62:	eb41 0105 	adc.w	r1, r1, r5
   22c66:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   22c6a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22c6e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22c70:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22c72:	2300      	movs	r3, #0
	node->prev = NULL;
   22c74:	e9c0 3300 	strd	r3, r3, [r0]
}
   22c78:	bd30      	pop	{r4, r5, pc}
   22c7a:	bf00      	nop
   22c7c:	20000768 	.word	0x20000768

00022c80 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22c80:	f1b3 3fff 	cmp.w	r3, #4294967295
   22c84:	bf08      	it	eq
   22c86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22c8e:	4604      	mov	r4, r0
   22c90:	4692      	mov	sl, r2
   22c92:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22c94:	f000 8099 	beq.w	22dca <z_add_timeout+0x14a>
	return node->next != NULL;
   22c98:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22c9a:	b166      	cbz	r6, 22cb6 <z_add_timeout+0x36>
   22c9c:	494c      	ldr	r1, [pc, #304]	; (22dd0 <z_add_timeout+0x150>)
   22c9e:	4a4d      	ldr	r2, [pc, #308]	; (22dd4 <z_add_timeout+0x154>)
   22ca0:	484d      	ldr	r0, [pc, #308]	; (22dd8 <z_add_timeout+0x158>)
   22ca2:	235e      	movs	r3, #94	; 0x5e
   22ca4:	f001 fd22 	bl	246ec <assert_print>
   22ca8:	484c      	ldr	r0, [pc, #304]	; (22ddc <z_add_timeout+0x15c>)
   22caa:	f001 fd1f 	bl	246ec <assert_print>
   22cae:	4849      	ldr	r0, [pc, #292]	; (22dd4 <z_add_timeout+0x154>)
   22cb0:	215e      	movs	r1, #94	; 0x5e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cb2:	f001 fd14 	bl	246de <assert_post_action>
	to->fn = fn;
   22cb6:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22cb8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cbc:	f3ef 8711 	mrs	r7, BASEPRI
   22cc0:	f383 8812 	msr	BASEPRI_MAX, r3
   22cc4:	f3bf 8f6f 	isb	sy
   22cc8:	4845      	ldr	r0, [pc, #276]	; (22de0 <z_add_timeout+0x160>)
   22cca:	f7fd fcfb 	bl	206c4 <z_spin_lock_valid>
   22cce:	b960      	cbnz	r0, 22cea <z_add_timeout+0x6a>
   22cd0:	4a44      	ldr	r2, [pc, #272]	; (22de4 <z_add_timeout+0x164>)
   22cd2:	4945      	ldr	r1, [pc, #276]	; (22de8 <z_add_timeout+0x168>)
   22cd4:	4840      	ldr	r0, [pc, #256]	; (22dd8 <z_add_timeout+0x158>)
   22cd6:	2394      	movs	r3, #148	; 0x94
   22cd8:	f001 fd08 	bl	246ec <assert_print>
   22cdc:	4940      	ldr	r1, [pc, #256]	; (22de0 <z_add_timeout+0x160>)
   22cde:	4843      	ldr	r0, [pc, #268]	; (22dec <z_add_timeout+0x16c>)
   22ce0:	f001 fd04 	bl	246ec <assert_print>
   22ce4:	2194      	movs	r1, #148	; 0x94
   22ce6:	483f      	ldr	r0, [pc, #252]	; (22de4 <z_add_timeout+0x164>)
   22ce8:	e7e3      	b.n	22cb2 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   22cea:	483d      	ldr	r0, [pc, #244]	; (22de0 <z_add_timeout+0x160>)
   22cec:	f7fd fd08 	bl	20700 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22cf0:	f1ba 3fff 	cmp.w	sl, #4294967295
   22cf4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   22cf8:	da23      	bge.n	22d42 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22cfa:	493d      	ldr	r1, [pc, #244]	; (22df0 <z_add_timeout+0x170>)
   22cfc:	e9d1 2000 	ldrd	r2, r0, [r1]
   22d00:	f06f 0301 	mvn.w	r3, #1
   22d04:	1a9b      	subs	r3, r3, r2
   22d06:	f04f 32ff 	mov.w	r2, #4294967295
   22d0a:	eb62 0000 	sbc.w	r0, r2, r0
   22d0e:	ebb3 030a 	subs.w	r3, r3, sl
   22d12:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   22d16:	2b01      	cmp	r3, #1
   22d18:	f170 0200 	sbcs.w	r2, r0, #0
   22d1c:	da01      	bge.n	22d22 <z_add_timeout+0xa2>
   22d1e:	2301      	movs	r3, #1
   22d20:	4630      	mov	r0, r6
   22d22:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   22d26:	4b33      	ldr	r3, [pc, #204]	; (22df4 <z_add_timeout+0x174>)
   22d28:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   22d2a:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d2e:	429a      	cmp	r2, r3
   22d30:	bf18      	it	ne
   22d32:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22d34:	b986      	cbnz	r6, 22d58 <z_add_timeout+0xd8>
	node->prev = tail;
   22d36:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   22d3a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22d3e:	605c      	str	r4, [r3, #4]
}
   22d40:	e01c      	b.n	22d7c <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   22d42:	f7ff ff57 	bl	22bf4 <elapsed>
   22d46:	f11a 0801 	adds.w	r8, sl, #1
   22d4a:	f145 0500 	adc.w	r5, r5, #0
   22d4e:	eb18 0300 	adds.w	r3, r8, r0
   22d52:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   22d56:	e7e4      	b.n	22d22 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   22d58:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   22d5c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22d60:	428a      	cmp	r2, r1
   22d62:	eb70 0e05 	sbcs.w	lr, r0, r5
   22d66:	da23      	bge.n	22db0 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   22d68:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   22d6a:	6872      	ldr	r2, [r6, #4]
   22d6c:	eb65 0500 	sbc.w	r5, r5, r0
   22d70:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   22d74:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   22d78:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22d7a:	6074      	str	r4, [r6, #4]
	return list->head == list;
   22d7c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d7e:	429a      	cmp	r2, r3
   22d80:	d006      	beq.n	22d90 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22d82:	4294      	cmp	r4, r2
   22d84:	d104      	bne.n	22d90 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   22d86:	f7ff ff3f 	bl	22c08 <next_timeout>
   22d8a:	2100      	movs	r1, #0
   22d8c:	f7fa fe96 	bl	1dabc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d90:	4813      	ldr	r0, [pc, #76]	; (22de0 <z_add_timeout+0x160>)
   22d92:	f7fd fca5 	bl	206e0 <z_spin_unlock_valid>
   22d96:	b9a0      	cbnz	r0, 22dc2 <z_add_timeout+0x142>
   22d98:	4a12      	ldr	r2, [pc, #72]	; (22de4 <z_add_timeout+0x164>)
   22d9a:	4917      	ldr	r1, [pc, #92]	; (22df8 <z_add_timeout+0x178>)
   22d9c:	480e      	ldr	r0, [pc, #56]	; (22dd8 <z_add_timeout+0x158>)
   22d9e:	23c2      	movs	r3, #194	; 0xc2
   22da0:	f001 fca4 	bl	246ec <assert_print>
   22da4:	490e      	ldr	r1, [pc, #56]	; (22de0 <z_add_timeout+0x160>)
   22da6:	4815      	ldr	r0, [pc, #84]	; (22dfc <z_add_timeout+0x17c>)
   22da8:	f001 fca0 	bl	246ec <assert_print>
   22dac:	21c2      	movs	r1, #194	; 0xc2
   22dae:	e79a      	b.n	22ce6 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   22db0:	1a52      	subs	r2, r2, r1
   22db2:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   22db6:	4566      	cmp	r6, ip
   22db8:	e9c4 2004 	strd	r2, r0, [r4, #16]
   22dbc:	d0bb      	beq.n	22d36 <z_add_timeout+0xb6>
   22dbe:	6836      	ldr	r6, [r6, #0]
   22dc0:	e7b8      	b.n	22d34 <z_add_timeout+0xb4>
	__asm__ volatile(
   22dc2:	f387 8811 	msr	BASEPRI, r7
   22dc6:	f3bf 8f6f 	isb	sy
		}
	}
}
   22dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22dce:	bf00      	nop
   22dd0:	0002ba93 	.word	0x0002ba93
   22dd4:	0002ba6f 	.word	0x0002ba6f
   22dd8:	00027f8a 	.word	0x00027f8a
   22ddc:	0002a56f 	.word	0x0002a56f
   22de0:	200030fc 	.word	0x200030fc
   22de4:	0002837e 	.word	0x0002837e
   22de8:	000283d7 	.word	0x000283d7
   22dec:	000283ec 	.word	0x000283ec
   22df0:	20002cf0 	.word	0x20002cf0
   22df4:	20000768 	.word	0x20000768
   22df8:	000283ab 	.word	0x000283ab
   22dfc:	000283c2 	.word	0x000283c2

00022e00 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   22e00:	b538      	push	{r3, r4, r5, lr}
   22e02:	4604      	mov	r4, r0
	__asm__ volatile(
   22e04:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e08:	f3ef 8511 	mrs	r5, BASEPRI
   22e0c:	f383 8812 	msr	BASEPRI_MAX, r3
   22e10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e14:	4819      	ldr	r0, [pc, #100]	; (22e7c <z_abort_timeout+0x7c>)
   22e16:	f7fd fc55 	bl	206c4 <z_spin_lock_valid>
   22e1a:	b968      	cbnz	r0, 22e38 <z_abort_timeout+0x38>
   22e1c:	4a18      	ldr	r2, [pc, #96]	; (22e80 <z_abort_timeout+0x80>)
   22e1e:	4919      	ldr	r1, [pc, #100]	; (22e84 <z_abort_timeout+0x84>)
   22e20:	4819      	ldr	r0, [pc, #100]	; (22e88 <z_abort_timeout+0x88>)
   22e22:	2394      	movs	r3, #148	; 0x94
   22e24:	f001 fc62 	bl	246ec <assert_print>
   22e28:	4914      	ldr	r1, [pc, #80]	; (22e7c <z_abort_timeout+0x7c>)
   22e2a:	4818      	ldr	r0, [pc, #96]	; (22e8c <z_abort_timeout+0x8c>)
   22e2c:	f001 fc5e 	bl	246ec <assert_print>
   22e30:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e32:	4813      	ldr	r0, [pc, #76]	; (22e80 <z_abort_timeout+0x80>)
   22e34:	f001 fc53 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   22e38:	4810      	ldr	r0, [pc, #64]	; (22e7c <z_abort_timeout+0x7c>)
   22e3a:	f7fd fc61 	bl	20700 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   22e3e:	6823      	ldr	r3, [r4, #0]
   22e40:	b19b      	cbz	r3, 22e6a <z_abort_timeout+0x6a>
			remove_timeout(to);
   22e42:	4620      	mov	r0, r4
   22e44:	f7ff ff00 	bl	22c48 <remove_timeout>
			ret = 0;
   22e48:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e4a:	480c      	ldr	r0, [pc, #48]	; (22e7c <z_abort_timeout+0x7c>)
   22e4c:	f7fd fc48 	bl	206e0 <z_spin_unlock_valid>
   22e50:	b970      	cbnz	r0, 22e70 <z_abort_timeout+0x70>
   22e52:	4a0b      	ldr	r2, [pc, #44]	; (22e80 <z_abort_timeout+0x80>)
   22e54:	490e      	ldr	r1, [pc, #56]	; (22e90 <z_abort_timeout+0x90>)
   22e56:	480c      	ldr	r0, [pc, #48]	; (22e88 <z_abort_timeout+0x88>)
   22e58:	23c2      	movs	r3, #194	; 0xc2
   22e5a:	f001 fc47 	bl	246ec <assert_print>
   22e5e:	4907      	ldr	r1, [pc, #28]	; (22e7c <z_abort_timeout+0x7c>)
   22e60:	480c      	ldr	r0, [pc, #48]	; (22e94 <z_abort_timeout+0x94>)
   22e62:	f001 fc43 	bl	246ec <assert_print>
   22e66:	21c2      	movs	r1, #194	; 0xc2
   22e68:	e7e3      	b.n	22e32 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   22e6a:	f06f 0415 	mvn.w	r4, #21
   22e6e:	e7ec      	b.n	22e4a <z_abort_timeout+0x4a>
	__asm__ volatile(
   22e70:	f385 8811 	msr	BASEPRI, r5
   22e74:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   22e78:	4620      	mov	r0, r4
   22e7a:	bd38      	pop	{r3, r4, r5, pc}
   22e7c:	200030fc 	.word	0x200030fc
   22e80:	0002837e 	.word	0x0002837e
   22e84:	000283d7 	.word	0x000283d7
   22e88:	00027f8a 	.word	0x00027f8a
   22e8c:	000283ec 	.word	0x000283ec
   22e90:	000283ab 	.word	0x000283ab
   22e94:	000283c2 	.word	0x000283c2

00022e98 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   22e98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e9e:	f3ef 8511 	mrs	r5, BASEPRI
   22ea2:	f383 8812 	msr	BASEPRI_MAX, r3
   22ea6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22eaa:	4817      	ldr	r0, [pc, #92]	; (22f08 <z_get_next_timeout_expiry+0x70>)
   22eac:	f7fd fc0a 	bl	206c4 <z_spin_lock_valid>
   22eb0:	b968      	cbnz	r0, 22ece <z_get_next_timeout_expiry+0x36>
   22eb2:	4a16      	ldr	r2, [pc, #88]	; (22f0c <z_get_next_timeout_expiry+0x74>)
   22eb4:	4916      	ldr	r1, [pc, #88]	; (22f10 <z_get_next_timeout_expiry+0x78>)
   22eb6:	4817      	ldr	r0, [pc, #92]	; (22f14 <z_get_next_timeout_expiry+0x7c>)
   22eb8:	2394      	movs	r3, #148	; 0x94
   22eba:	f001 fc17 	bl	246ec <assert_print>
   22ebe:	4912      	ldr	r1, [pc, #72]	; (22f08 <z_get_next_timeout_expiry+0x70>)
   22ec0:	4815      	ldr	r0, [pc, #84]	; (22f18 <z_get_next_timeout_expiry+0x80>)
   22ec2:	f001 fc13 	bl	246ec <assert_print>
   22ec6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ec8:	4810      	ldr	r0, [pc, #64]	; (22f0c <z_get_next_timeout_expiry+0x74>)
   22eca:	f001 fc08 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   22ece:	480e      	ldr	r0, [pc, #56]	; (22f08 <z_get_next_timeout_expiry+0x70>)
   22ed0:	f7fd fc16 	bl	20700 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22ed4:	f7ff fe98 	bl	22c08 <next_timeout>
   22ed8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22eda:	480b      	ldr	r0, [pc, #44]	; (22f08 <z_get_next_timeout_expiry+0x70>)
   22edc:	f7fd fc00 	bl	206e0 <z_spin_unlock_valid>
   22ee0:	b958      	cbnz	r0, 22efa <z_get_next_timeout_expiry+0x62>
   22ee2:	4a0a      	ldr	r2, [pc, #40]	; (22f0c <z_get_next_timeout_expiry+0x74>)
   22ee4:	490d      	ldr	r1, [pc, #52]	; (22f1c <z_get_next_timeout_expiry+0x84>)
   22ee6:	480b      	ldr	r0, [pc, #44]	; (22f14 <z_get_next_timeout_expiry+0x7c>)
   22ee8:	23c2      	movs	r3, #194	; 0xc2
   22eea:	f001 fbff 	bl	246ec <assert_print>
   22eee:	4906      	ldr	r1, [pc, #24]	; (22f08 <z_get_next_timeout_expiry+0x70>)
   22ef0:	480b      	ldr	r0, [pc, #44]	; (22f20 <z_get_next_timeout_expiry+0x88>)
   22ef2:	f001 fbfb 	bl	246ec <assert_print>
   22ef6:	21c2      	movs	r1, #194	; 0xc2
   22ef8:	e7e6      	b.n	22ec8 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   22efa:	f385 8811 	msr	BASEPRI, r5
   22efe:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   22f02:	4620      	mov	r0, r4
   22f04:	bd38      	pop	{r3, r4, r5, pc}
   22f06:	bf00      	nop
   22f08:	200030fc 	.word	0x200030fc
   22f0c:	0002837e 	.word	0x0002837e
   22f10:	000283d7 	.word	0x000283d7
   22f14:	00027f8a 	.word	0x00027f8a
   22f18:	000283ec 	.word	0x000283ec
   22f1c:	000283ab 	.word	0x000283ab
   22f20:	000283c2 	.word	0x000283c2

00022f24 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   22f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f28:	4604      	mov	r4, r0
	__asm__ volatile(
   22f2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f2e:	f3ef 8711 	mrs	r7, BASEPRI
   22f32:	f383 8812 	msr	BASEPRI_MAX, r3
   22f36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f3a:	4847      	ldr	r0, [pc, #284]	; (23058 <sys_clock_announce+0x134>)
   22f3c:	f7fd fbc2 	bl	206c4 <z_spin_lock_valid>
   22f40:	b968      	cbnz	r0, 22f5e <sys_clock_announce+0x3a>
   22f42:	4a46      	ldr	r2, [pc, #280]	; (2305c <sys_clock_announce+0x138>)
   22f44:	4946      	ldr	r1, [pc, #280]	; (23060 <sys_clock_announce+0x13c>)
   22f46:	4847      	ldr	r0, [pc, #284]	; (23064 <sys_clock_announce+0x140>)
   22f48:	2394      	movs	r3, #148	; 0x94
   22f4a:	f001 fbcf 	bl	246ec <assert_print>
   22f4e:	4942      	ldr	r1, [pc, #264]	; (23058 <sys_clock_announce+0x134>)
   22f50:	4845      	ldr	r0, [pc, #276]	; (23068 <sys_clock_announce+0x144>)
   22f52:	f001 fbcb 	bl	246ec <assert_print>
   22f56:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22f58:	4840      	ldr	r0, [pc, #256]	; (2305c <sys_clock_announce+0x138>)
   22f5a:	f001 fbc0 	bl	246de <assert_post_action>
	return list->head == list;
   22f5e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 23078 <sys_clock_announce+0x154>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   22f62:	f8df 8118 	ldr.w	r8, [pc, #280]	; 2307c <sys_clock_announce+0x158>
	z_spin_lock_set_owner(l);
   22f66:	483c      	ldr	r0, [pc, #240]	; (23058 <sys_clock_announce+0x134>)
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   22f68:	4e40      	ldr	r6, [pc, #256]	; (2306c <sys_clock_announce+0x148>)
   22f6a:	f7fd fbc9 	bl	20700 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   22f6e:	f8c8 4000 	str.w	r4, [r8]
   22f72:	f8d9 4000 	ldr.w	r4, [r9]
		t->dticks = 0;
   22f76:	f04f 0a00 	mov.w	sl, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f7a:	454c      	cmp	r4, r9
   22f7c:	bf08      	it	eq
   22f7e:	2400      	moveq	r4, #0
   22f80:	f04f 0b00 	mov.w	fp, #0
		curr_tick += dt;
   22f84:	e9d6 2c00 	ldrd	r2, ip, [r6]
	     (t != NULL) && (t->dticks <= announce_remaining);
   22f88:	f8d8 3000 	ldr.w	r3, [r8]
   22f8c:	2c00      	cmp	r4, #0
   22f8e:	d048      	beq.n	23022 <sys_clock_announce+0xfe>
   22f90:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
   22f94:	17d8      	asrs	r0, r3, #31
   22f96:	42ab      	cmp	r3, r5
   22f98:	eb70 0e01 	sbcs.w	lr, r0, r1
   22f9c:	da05      	bge.n	22faa <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   22f9e:	1aed      	subs	r5, r5, r3
   22fa0:	eb61 0100 	sbc.w	r1, r1, r0
   22fa4:	e9c4 5104 	strd	r5, r1, [r4, #16]
   22fa8:	e03b      	b.n	23022 <sys_clock_announce+0xfe>
		curr_tick += dt;
   22faa:	18aa      	adds	r2, r5, r2
   22fac:	eb4c 73e5 	adc.w	r3, ip, r5, asr #31
		remove_timeout(t);
   22fb0:	4620      	mov	r0, r4
		t->dticks = 0;
   22fb2:	e9c4 ab04 	strd	sl, fp, [r4, #16]
		curr_tick += dt;
   22fb6:	e9c6 2300 	strd	r2, r3, [r6]
		remove_timeout(t);
   22fba:	f7ff fe45 	bl	22c48 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fbe:	4826      	ldr	r0, [pc, #152]	; (23058 <sys_clock_announce+0x134>)
   22fc0:	f7fd fb8e 	bl	206e0 <z_spin_unlock_valid>
   22fc4:	b958      	cbnz	r0, 22fde <sys_clock_announce+0xba>
   22fc6:	4a25      	ldr	r2, [pc, #148]	; (2305c <sys_clock_announce+0x138>)
   22fc8:	4929      	ldr	r1, [pc, #164]	; (23070 <sys_clock_announce+0x14c>)
   22fca:	4826      	ldr	r0, [pc, #152]	; (23064 <sys_clock_announce+0x140>)
   22fcc:	23c2      	movs	r3, #194	; 0xc2
   22fce:	f001 fb8d 	bl	246ec <assert_print>
   22fd2:	4921      	ldr	r1, [pc, #132]	; (23058 <sys_clock_announce+0x134>)
   22fd4:	4827      	ldr	r0, [pc, #156]	; (23074 <sys_clock_announce+0x150>)
   22fd6:	f001 fb89 	bl	246ec <assert_print>
   22fda:	21c2      	movs	r1, #194	; 0xc2
   22fdc:	e7bc      	b.n	22f58 <sys_clock_announce+0x34>
	__asm__ volatile(
   22fde:	f387 8811 	msr	BASEPRI, r7
   22fe2:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22fe6:	68a3      	ldr	r3, [r4, #8]
   22fe8:	4620      	mov	r0, r4
   22fea:	4798      	blx	r3
	__asm__ volatile(
   22fec:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ff0:	f3ef 8711 	mrs	r7, BASEPRI
   22ff4:	f383 8812 	msr	BASEPRI_MAX, r3
   22ff8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ffc:	4816      	ldr	r0, [pc, #88]	; (23058 <sys_clock_announce+0x134>)
   22ffe:	f7fd fb61 	bl	206c4 <z_spin_lock_valid>
   23002:	2800      	cmp	r0, #0
   23004:	d09d      	beq.n	22f42 <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   23006:	4814      	ldr	r0, [pc, #80]	; (23058 <sys_clock_announce+0x134>)
   23008:	f7fd fb7a 	bl	20700 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   2300c:	f8d8 3000 	ldr.w	r3, [r8]
	return list->head == list;
   23010:	f8d9 4000 	ldr.w	r4, [r9]
   23014:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23016:	454c      	cmp	r4, r9
   23018:	f8c8 3000 	str.w	r3, [r8]
   2301c:	d1b2      	bne.n	22f84 <sys_clock_announce+0x60>
		curr_tick += dt;
   2301e:	e9d6 2c00 	ldrd	r2, ip, [r6]
	}

	curr_tick += announce_remaining;
   23022:	189a      	adds	r2, r3, r2
   23024:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
	announce_remaining = 0;
   23028:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2302a:	e9c6 2300 	strd	r2, r3, [r6]
	announce_remaining = 0;
   2302e:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   23032:	f7ff fde9 	bl	22c08 <next_timeout>
   23036:	4621      	mov	r1, r4
   23038:	f7fa fd40 	bl	1dabc <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2303c:	4806      	ldr	r0, [pc, #24]	; (23058 <sys_clock_announce+0x134>)
   2303e:	f7fd fb4f 	bl	206e0 <z_spin_unlock_valid>
   23042:	2800      	cmp	r0, #0
   23044:	d0bf      	beq.n	22fc6 <sys_clock_announce+0xa2>
	__asm__ volatile(
   23046:	f387 8811 	msr	BASEPRI, r7
   2304a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2304e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   23052:	f7fe bf5b 	b.w	21f0c <z_time_slice>
   23056:	bf00      	nop
   23058:	200030fc 	.word	0x200030fc
   2305c:	0002837e 	.word	0x0002837e
   23060:	000283d7 	.word	0x000283d7
   23064:	00027f8a 	.word	0x00027f8a
   23068:	000283ec 	.word	0x000283ec
   2306c:	20002cf0 	.word	0x20002cf0
   23070:	000283ab 	.word	0x000283ab
   23074:	000283c2 	.word	0x000283c2
   23078:	20000768 	.word	0x20000768
   2307c:	200030f8 	.word	0x200030f8

00023080 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   23080:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   23082:	f04f 0340 	mov.w	r3, #64	; 0x40
   23086:	f3ef 8611 	mrs	r6, BASEPRI
   2308a:	f383 8812 	msr	BASEPRI_MAX, r3
   2308e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23092:	481a      	ldr	r0, [pc, #104]	; (230fc <sys_clock_tick_get+0x7c>)
   23094:	f7fd fb16 	bl	206c4 <z_spin_lock_valid>
   23098:	b968      	cbnz	r0, 230b6 <sys_clock_tick_get+0x36>
   2309a:	4a19      	ldr	r2, [pc, #100]	; (23100 <sys_clock_tick_get+0x80>)
   2309c:	4919      	ldr	r1, [pc, #100]	; (23104 <sys_clock_tick_get+0x84>)
   2309e:	481a      	ldr	r0, [pc, #104]	; (23108 <sys_clock_tick_get+0x88>)
   230a0:	2394      	movs	r3, #148	; 0x94
   230a2:	f001 fb23 	bl	246ec <assert_print>
   230a6:	4915      	ldr	r1, [pc, #84]	; (230fc <sys_clock_tick_get+0x7c>)
   230a8:	4818      	ldr	r0, [pc, #96]	; (2310c <sys_clock_tick_get+0x8c>)
   230aa:	f001 fb1f 	bl	246ec <assert_print>
   230ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230b0:	4813      	ldr	r0, [pc, #76]	; (23100 <sys_clock_tick_get+0x80>)
   230b2:	f001 fb14 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   230b6:	4811      	ldr	r0, [pc, #68]	; (230fc <sys_clock_tick_get+0x7c>)
   230b8:	f7fd fb22 	bl	20700 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   230bc:	f7ff fd9a 	bl	22bf4 <elapsed>
   230c0:	4a13      	ldr	r2, [pc, #76]	; (23110 <sys_clock_tick_get+0x90>)
   230c2:	e9d2 4500 	ldrd	r4, r5, [r2]
   230c6:	1904      	adds	r4, r0, r4
   230c8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230cc:	480b      	ldr	r0, [pc, #44]	; (230fc <sys_clock_tick_get+0x7c>)
   230ce:	f7fd fb07 	bl	206e0 <z_spin_unlock_valid>
   230d2:	b958      	cbnz	r0, 230ec <sys_clock_tick_get+0x6c>
   230d4:	4a0a      	ldr	r2, [pc, #40]	; (23100 <sys_clock_tick_get+0x80>)
   230d6:	490f      	ldr	r1, [pc, #60]	; (23114 <sys_clock_tick_get+0x94>)
   230d8:	480b      	ldr	r0, [pc, #44]	; (23108 <sys_clock_tick_get+0x88>)
   230da:	23c2      	movs	r3, #194	; 0xc2
   230dc:	f001 fb06 	bl	246ec <assert_print>
   230e0:	4906      	ldr	r1, [pc, #24]	; (230fc <sys_clock_tick_get+0x7c>)
   230e2:	480d      	ldr	r0, [pc, #52]	; (23118 <sys_clock_tick_get+0x98>)
   230e4:	f001 fb02 	bl	246ec <assert_print>
   230e8:	21c2      	movs	r1, #194	; 0xc2
   230ea:	e7e1      	b.n	230b0 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   230ec:	f386 8811 	msr	BASEPRI, r6
   230f0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   230f4:	4620      	mov	r0, r4
   230f6:	4629      	mov	r1, r5
   230f8:	bd70      	pop	{r4, r5, r6, pc}
   230fa:	bf00      	nop
   230fc:	200030fc 	.word	0x200030fc
   23100:	0002837e 	.word	0x0002837e
   23104:	000283d7 	.word	0x000283d7
   23108:	00027f8a 	.word	0x00027f8a
   2310c:	000283ec 	.word	0x000283ec
   23110:	20002cf0 	.word	0x20002cf0
   23114:	000283ab 	.word	0x000283ab
   23118:	000283c2 	.word	0x000283c2

0002311c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   2311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2311e:	4604      	mov	r4, r0
	__asm__ volatile(
   23120:	f04f 0340 	mov.w	r3, #64	; 0x40
   23124:	f3ef 8711 	mrs	r7, BASEPRI
   23128:	f383 8812 	msr	BASEPRI_MAX, r3
   2312c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23130:	484e      	ldr	r0, [pc, #312]	; (2326c <z_timer_expiration_handler+0x150>)
   23132:	f7fd fac7 	bl	206c4 <z_spin_lock_valid>
   23136:	b968      	cbnz	r0, 23154 <z_timer_expiration_handler+0x38>
   23138:	4a4d      	ldr	r2, [pc, #308]	; (23270 <z_timer_expiration_handler+0x154>)
   2313a:	494e      	ldr	r1, [pc, #312]	; (23274 <z_timer_expiration_handler+0x158>)
   2313c:	484e      	ldr	r0, [pc, #312]	; (23278 <z_timer_expiration_handler+0x15c>)
   2313e:	2394      	movs	r3, #148	; 0x94
   23140:	f001 fad4 	bl	246ec <assert_print>
   23144:	4949      	ldr	r1, [pc, #292]	; (2326c <z_timer_expiration_handler+0x150>)
   23146:	484d      	ldr	r0, [pc, #308]	; (2327c <z_timer_expiration_handler+0x160>)
   23148:	f001 fad0 	bl	246ec <assert_print>
   2314c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2314e:	4848      	ldr	r0, [pc, #288]	; (23270 <z_timer_expiration_handler+0x154>)
   23150:	f001 fac5 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   23154:	4845      	ldr	r0, [pc, #276]	; (2326c <z_timer_expiration_handler+0x150>)
   23156:	f7fd fad3 	bl	20700 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   2315a:	6822      	ldr	r2, [r4, #0]
   2315c:	b182      	cbz	r2, 23180 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2315e:	4843      	ldr	r0, [pc, #268]	; (2326c <z_timer_expiration_handler+0x150>)
   23160:	f7fd fabe 	bl	206e0 <z_spin_unlock_valid>
   23164:	2800      	cmp	r0, #0
   23166:	d17b      	bne.n	23260 <z_timer_expiration_handler+0x144>
   23168:	4a41      	ldr	r2, [pc, #260]	; (23270 <z_timer_expiration_handler+0x154>)
   2316a:	4945      	ldr	r1, [pc, #276]	; (23280 <z_timer_expiration_handler+0x164>)
   2316c:	4842      	ldr	r0, [pc, #264]	; (23278 <z_timer_expiration_handler+0x15c>)
   2316e:	23c2      	movs	r3, #194	; 0xc2
   23170:	f001 fabc 	bl	246ec <assert_print>
   23174:	493d      	ldr	r1, [pc, #244]	; (2326c <z_timer_expiration_handler+0x150>)
   23176:	4843      	ldr	r0, [pc, #268]	; (23284 <z_timer_expiration_handler+0x168>)
   23178:	f001 fab8 	bl	246ec <assert_print>
   2317c:	21c2      	movs	r1, #194	; 0xc2
   2317e:	e7e6      	b.n	2314e <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   23180:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   23184:	1c58      	adds	r0, r3, #1
   23186:	f146 0100 	adc.w	r1, r6, #0
   2318a:	2802      	cmp	r0, #2
   2318c:	f171 0100 	sbcs.w	r1, r1, #0
   23190:	d327      	bcc.n	231e2 <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   23192:	2b01      	cmp	r3, #1
   23194:	f176 0100 	sbcs.w	r1, r6, #0
   23198:	bfbc      	itt	lt
   2319a:	2301      	movlt	r3, #1
   2319c:	4616      	movlt	r6, r2
   2319e:	1e5d      	subs	r5, r3, #1
   231a0:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   231a4:	f003 fe5d 	bl	26e62 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   231a8:	3001      	adds	r0, #1
   231aa:	f141 0100 	adc.w	r1, r1, #0
   231ae:	1940      	adds	r0, r0, r5
   231b0:	eb46 0101 	adc.w	r1, r6, r1
   231b4:	2801      	cmp	r0, #1
   231b6:	f171 0100 	sbcs.w	r1, r1, #0
   231ba:	db4c      	blt.n	23256 <z_timer_expiration_handler+0x13a>
   231bc:	f003 fe51 	bl	26e62 <z_impl_k_uptime_ticks>
   231c0:	3001      	adds	r0, #1
   231c2:	f141 0100 	adc.w	r1, r1, #0
   231c6:	f06f 0201 	mvn.w	r2, #1
   231ca:	1940      	adds	r0, r0, r5
   231cc:	eb46 0301 	adc.w	r3, r6, r1
   231d0:	1a12      	subs	r2, r2, r0
   231d2:	f04f 31ff 	mov.w	r1, #4294967295
   231d6:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   231da:	492b      	ldr	r1, [pc, #172]	; (23288 <z_timer_expiration_handler+0x16c>)
   231dc:	4620      	mov	r0, r4
   231de:	f7ff fd4f 	bl	22c80 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   231e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   231e4:	3301      	adds	r3, #1
   231e6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   231e8:	6a23      	ldr	r3, [r4, #32]
   231ea:	b1db      	cbz	r3, 23224 <z_timer_expiration_handler+0x108>
   231ec:	481f      	ldr	r0, [pc, #124]	; (2326c <z_timer_expiration_handler+0x150>)
   231ee:	f7fd fa77 	bl	206e0 <z_spin_unlock_valid>
   231f2:	2800      	cmp	r0, #0
   231f4:	d0b8      	beq.n	23168 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   231f6:	f387 8811 	msr	BASEPRI, r7
   231fa:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   231fe:	6a23      	ldr	r3, [r4, #32]
   23200:	4620      	mov	r0, r4
   23202:	4798      	blx	r3
	__asm__ volatile(
   23204:	f04f 0340 	mov.w	r3, #64	; 0x40
   23208:	f3ef 8711 	mrs	r7, BASEPRI
   2320c:	f383 8812 	msr	BASEPRI_MAX, r3
   23210:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23214:	4815      	ldr	r0, [pc, #84]	; (2326c <z_timer_expiration_handler+0x150>)
   23216:	f7fd fa55 	bl	206c4 <z_spin_lock_valid>
   2321a:	2800      	cmp	r0, #0
   2321c:	d08c      	beq.n	23138 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   2321e:	4813      	ldr	r0, [pc, #76]	; (2326c <z_timer_expiration_handler+0x150>)
   23220:	f7fd fa6e 	bl	20700 <z_spin_lock_set_owner>
	return list->head == list;
   23224:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23228:	42a5      	cmp	r5, r4
   2322a:	d098      	beq.n	2315e <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2322c:	2d00      	cmp	r5, #0
   2322e:	d096      	beq.n	2315e <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   23230:	4628      	mov	r0, r5
   23232:	f7fe fc3d 	bl	21ab0 <z_unpend_thread_no_timeout>
   23236:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23238:	480c      	ldr	r0, [pc, #48]	; (2326c <z_timer_expiration_handler+0x150>)
   2323a:	67eb      	str	r3, [r5, #124]	; 0x7c
   2323c:	f7fd fa50 	bl	206e0 <z_spin_unlock_valid>
   23240:	2800      	cmp	r0, #0
   23242:	d091      	beq.n	23168 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   23244:	f387 8811 	msr	BASEPRI, r7
   23248:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   2324c:	4628      	mov	r0, r5
}
   2324e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   23252:	f7fe bbe7 	b.w	21a24 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   23256:	f06f 0201 	mvn.w	r2, #1
   2325a:	f04f 33ff 	mov.w	r3, #4294967295
   2325e:	e7bc      	b.n	231da <z_timer_expiration_handler+0xbe>
   23260:	f387 8811 	msr	BASEPRI, r7
   23264:	f3bf 8f6f 	isb	sy
}
   23268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2326a:	bf00      	nop
   2326c:	20003100 	.word	0x20003100
   23270:	0002837e 	.word	0x0002837e
   23274:	000283d7 	.word	0x000283d7
   23278:	00027f8a 	.word	0x00027f8a
   2327c:	000283ec 	.word	0x000283ec
   23280:	000283ab 	.word	0x000283ab
   23284:	000283c2 	.word	0x000283c2
   23288:	0002311d 	.word	0x0002311d

0002328c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   2328c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   23290:	f1b3 3fff 	cmp.w	r3, #4294967295
   23294:	bf08      	it	eq
   23296:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2329a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2329e:	4605      	mov	r5, r0
   232a0:	461c      	mov	r4, r3
   232a2:	4617      	mov	r7, r2
   232a4:	461e      	mov	r6, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   232a6:	d01b      	beq.n	232e0 <z_impl_k_timer_start+0x54>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   232a8:	1c53      	adds	r3, r2, #1
   232aa:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   232ae:	db08      	blt.n	232c2 <z_impl_k_timer_start+0x36>
		duration.ticks = MAX(duration.ticks - 1, 0);
   232b0:	2a01      	cmp	r2, #1
   232b2:	f174 0300 	sbcs.w	r3, r4, #0
   232b6:	bfbc      	itt	lt
   232b8:	2201      	movlt	r2, #1
   232ba:	2400      	movlt	r4, #0
   232bc:	1e57      	subs	r7, r2, #1
   232be:	f144 36ff 	adc.w	r6, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   232c2:	4628      	mov	r0, r5
   232c4:	f7ff fd9c 	bl	22e00 <z_abort_timeout>
	timer->period = period;
   232c8:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
	timer->status = 0U;
   232cc:	2300      	movs	r3, #0
   232ce:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   232d0:	463a      	mov	r2, r7
   232d2:	4633      	mov	r3, r6
   232d4:	4628      	mov	r0, r5
   232d6:	4903      	ldr	r1, [pc, #12]	; (232e4 <z_impl_k_timer_start+0x58>)
		     duration);
}
   232d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   232dc:	f7ff bcd0 	b.w	22c80 <z_add_timeout>
}
   232e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   232e4:	0002311d 	.word	0x0002311d

000232e8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   232e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   232ec:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232ee:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 234c4 <register_events+0x1dc>
{
   232f2:	9301      	str	r3, [sp, #4]
   232f4:	4688      	mov	r8, r1
   232f6:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   232f8:	4604      	mov	r4, r0
	int events_registered = 0;
   232fa:	4637      	mov	r7, r6
	event->poller = NULL;
   232fc:	46b2      	mov	sl, r6
	for (int ii = 0; ii < num_events; ii++) {
   232fe:	4546      	cmp	r6, r8
   23300:	db03      	blt.n	2330a <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   23302:	4638      	mov	r0, r7
   23304:	b003      	add	sp, #12
   23306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2330a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2330e:	f3ef 8b11 	mrs	fp, BASEPRI
   23312:	f383 8812 	msr	BASEPRI_MAX, r3
   23316:	f3bf 8f6f 	isb	sy
   2331a:	4648      	mov	r0, r9
   2331c:	f7fd f9d2 	bl	206c4 <z_spin_lock_valid>
   23320:	b960      	cbnz	r0, 2333c <register_events+0x54>
   23322:	4a65      	ldr	r2, [pc, #404]	; (234b8 <register_events+0x1d0>)
   23324:	4965      	ldr	r1, [pc, #404]	; (234bc <register_events+0x1d4>)
   23326:	4866      	ldr	r0, [pc, #408]	; (234c0 <register_events+0x1d8>)
   23328:	2394      	movs	r3, #148	; 0x94
   2332a:	f001 f9df 	bl	246ec <assert_print>
   2332e:	4965      	ldr	r1, [pc, #404]	; (234c4 <register_events+0x1dc>)
   23330:	4865      	ldr	r0, [pc, #404]	; (234c8 <register_events+0x1e0>)
   23332:	f001 f9db 	bl	246ec <assert_print>
   23336:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23338:	485f      	ldr	r0, [pc, #380]	; (234b8 <register_events+0x1d0>)
   2333a:	e060      	b.n	233fe <register_events+0x116>
	z_spin_lock_set_owner(l);
   2333c:	4648      	mov	r0, r9
   2333e:	f7fd f9df 	bl	20700 <z_spin_lock_set_owner>
	switch (event->type) {
   23342:	7b63      	ldrb	r3, [r4, #13]
   23344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23348:	2b08      	cmp	r3, #8
   2334a:	d84a      	bhi.n	233e2 <register_events+0xfa>
   2334c:	e8df f003 	tbb	[pc, r3]
   23350:	49053d2b 	.word	0x49053d2b
   23354:	49494927 	.word	0x49494927
   23358:	43          	.byte	0x43
   23359:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   2335a:	6923      	ldr	r3, [r4, #16]
   2335c:	689b      	ldr	r3, [r3, #8]
   2335e:	b313      	cbz	r3, 233a6 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23360:	2302      	movs	r3, #2
	event->state |= state;
   23362:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   23364:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   23368:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2336c:	430b      	orrs	r3, r1
   2336e:	f363 3294 	bfi	r2, r3, #14, #7
   23372:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   23374:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23378:	4648      	mov	r0, r9
   2337a:	f7fd f9b1 	bl	206e0 <z_spin_unlock_valid>
   2337e:	3414      	adds	r4, #20
   23380:	2800      	cmp	r0, #0
   23382:	f040 8092 	bne.w	234aa <register_events+0x1c2>
   23386:	4a4c      	ldr	r2, [pc, #304]	; (234b8 <register_events+0x1d0>)
   23388:	4950      	ldr	r1, [pc, #320]	; (234cc <register_events+0x1e4>)
   2338a:	484d      	ldr	r0, [pc, #308]	; (234c0 <register_events+0x1d8>)
   2338c:	23c2      	movs	r3, #194	; 0xc2
   2338e:	f001 f9ad 	bl	246ec <assert_print>
   23392:	494c      	ldr	r1, [pc, #304]	; (234c4 <register_events+0x1dc>)
   23394:	484e      	ldr	r0, [pc, #312]	; (234d0 <register_events+0x1e8>)
   23396:	f001 f9a9 	bl	246ec <assert_print>
   2339a:	21c2      	movs	r1, #194	; 0xc2
   2339c:	e7cc      	b.n	23338 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   2339e:	6923      	ldr	r3, [r4, #16]
   233a0:	681b      	ldr	r3, [r3, #0]
   233a2:	2b00      	cmp	r3, #0
   233a4:	d12d      	bne.n	23402 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   233a6:	9b01      	ldr	r3, [sp, #4]
   233a8:	2b00      	cmp	r3, #0
   233aa:	d1e5      	bne.n	23378 <register_events+0x90>
   233ac:	782b      	ldrb	r3, [r5, #0]
   233ae:	2b00      	cmp	r3, #0
   233b0:	d0e2      	beq.n	23378 <register_events+0x90>
	switch (event->type) {
   233b2:	7b63      	ldrb	r3, [r4, #13]
   233b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   233b8:	2b08      	cmp	r3, #8
   233ba:	d86b      	bhi.n	23494 <register_events+0x1ac>
   233bc:	e8df f003 	tbb	[pc, r3]
   233c0:	6a234935 	.word	0x6a234935
   233c4:	6a6a6a38 	.word	0x6a6a6a38
   233c8:	59          	.byte	0x59
   233c9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   233ca:	6923      	ldr	r3, [r4, #16]
   233cc:	689b      	ldr	r3, [r3, #8]
   233ce:	2b00      	cmp	r3, #0
   233d0:	d0e9      	beq.n	233a6 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   233d2:	2301      	movs	r3, #1
   233d4:	e7c5      	b.n	23362 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   233d6:	6923      	ldr	r3, [r4, #16]
   233d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   233da:	2b00      	cmp	r3, #0
   233dc:	d0e3      	beq.n	233a6 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   233de:	2310      	movs	r3, #16
   233e0:	e7bf      	b.n	23362 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   233e2:	4a3c      	ldr	r2, [pc, #240]	; (234d4 <register_events+0x1ec>)
   233e4:	493c      	ldr	r1, [pc, #240]	; (234d8 <register_events+0x1f0>)
   233e6:	4836      	ldr	r0, [pc, #216]	; (234c0 <register_events+0x1d8>)
   233e8:	2363      	movs	r3, #99	; 0x63
   233ea:	f001 f97f 	bl	246ec <assert_print>
   233ee:	7b61      	ldrb	r1, [r4, #13]
   233f0:	483a      	ldr	r0, [pc, #232]	; (234dc <register_events+0x1f4>)
   233f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   233f6:	f001 f979 	bl	246ec <assert_print>
   233fa:	2163      	movs	r1, #99	; 0x63
   233fc:	4835      	ldr	r0, [pc, #212]	; (234d4 <register_events+0x1ec>)
   233fe:	f001 f96e 	bl	246de <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23402:	2304      	movs	r3, #4
   23404:	e7ad      	b.n	23362 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23406:	6920      	ldr	r0, [r4, #16]
   23408:	b950      	cbnz	r0, 23420 <register_events+0x138>
   2340a:	4935      	ldr	r1, [pc, #212]	; (234e0 <register_events+0x1f8>)
   2340c:	4a31      	ldr	r2, [pc, #196]	; (234d4 <register_events+0x1ec>)
   2340e:	482c      	ldr	r0, [pc, #176]	; (234c0 <register_events+0x1d8>)
   23410:	238d      	movs	r3, #141	; 0x8d
   23412:	f001 f96b 	bl	246ec <assert_print>
   23416:	4833      	ldr	r0, [pc, #204]	; (234e4 <register_events+0x1fc>)
   23418:	f001 f968 	bl	246ec <assert_print>
   2341c:	218d      	movs	r1, #141	; 0x8d
   2341e:	e7ed      	b.n	233fc <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   23420:	462a      	mov	r2, r5
   23422:	4621      	mov	r1, r4
   23424:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   23426:	f003 fd6d 	bl	26f04 <add_event>
	event->poller = poller;
   2342a:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   2342c:	3701      	adds	r7, #1
   2342e:	e7a3      	b.n	23378 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23430:	6920      	ldr	r0, [r4, #16]
   23432:	b950      	cbnz	r0, 2344a <register_events+0x162>
   23434:	492c      	ldr	r1, [pc, #176]	; (234e8 <register_events+0x200>)
   23436:	4a27      	ldr	r2, [pc, #156]	; (234d4 <register_events+0x1ec>)
   23438:	4821      	ldr	r0, [pc, #132]	; (234c0 <register_events+0x1d8>)
   2343a:	2391      	movs	r3, #145	; 0x91
   2343c:	f001 f956 	bl	246ec <assert_print>
   23440:	482a      	ldr	r0, [pc, #168]	; (234ec <register_events+0x204>)
   23442:	f001 f953 	bl	246ec <assert_print>
   23446:	2191      	movs	r1, #145	; 0x91
   23448:	e7d8      	b.n	233fc <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   2344a:	462a      	mov	r2, r5
   2344c:	4621      	mov	r1, r4
   2344e:	3014      	adds	r0, #20
   23450:	e7e9      	b.n	23426 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   23452:	6920      	ldr	r0, [r4, #16]
   23454:	b950      	cbnz	r0, 2346c <register_events+0x184>
   23456:	4926      	ldr	r1, [pc, #152]	; (234f0 <register_events+0x208>)
   23458:	4a1e      	ldr	r2, [pc, #120]	; (234d4 <register_events+0x1ec>)
   2345a:	4819      	ldr	r0, [pc, #100]	; (234c0 <register_events+0x1d8>)
   2345c:	2395      	movs	r3, #149	; 0x95
   2345e:	f001 f945 	bl	246ec <assert_print>
   23462:	4824      	ldr	r0, [pc, #144]	; (234f4 <register_events+0x20c>)
   23464:	f001 f942 	bl	246ec <assert_print>
   23468:	2195      	movs	r1, #149	; 0x95
   2346a:	e7c7      	b.n	233fc <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   2346c:	462a      	mov	r2, r5
   2346e:	4621      	mov	r1, r4
   23470:	e7d9      	b.n	23426 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   23472:	6920      	ldr	r0, [r4, #16]
   23474:	b950      	cbnz	r0, 2348c <register_events+0x1a4>
   23476:	4920      	ldr	r1, [pc, #128]	; (234f8 <register_events+0x210>)
   23478:	4a16      	ldr	r2, [pc, #88]	; (234d4 <register_events+0x1ec>)
   2347a:	4811      	ldr	r0, [pc, #68]	; (234c0 <register_events+0x1d8>)
   2347c:	2399      	movs	r3, #153	; 0x99
   2347e:	f001 f935 	bl	246ec <assert_print>
   23482:	481e      	ldr	r0, [pc, #120]	; (234fc <register_events+0x214>)
   23484:	f001 f932 	bl	246ec <assert_print>
   23488:	2199      	movs	r1, #153	; 0x99
   2348a:	e7b7      	b.n	233fc <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   2348c:	462a      	mov	r2, r5
   2348e:	4621      	mov	r1, r4
   23490:	3028      	adds	r0, #40	; 0x28
   23492:	e7c8      	b.n	23426 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   23494:	4910      	ldr	r1, [pc, #64]	; (234d8 <register_events+0x1f0>)
   23496:	4a0f      	ldr	r2, [pc, #60]	; (234d4 <register_events+0x1ec>)
   23498:	4809      	ldr	r0, [pc, #36]	; (234c0 <register_events+0x1d8>)
   2349a:	23a6      	movs	r3, #166	; 0xa6
   2349c:	f001 f926 	bl	246ec <assert_print>
   234a0:	4817      	ldr	r0, [pc, #92]	; (23500 <register_events+0x218>)
   234a2:	f001 f923 	bl	246ec <assert_print>
   234a6:	21a6      	movs	r1, #166	; 0xa6
   234a8:	e7a8      	b.n	233fc <register_events+0x114>
	__asm__ volatile(
   234aa:	f38b 8811 	msr	BASEPRI, fp
   234ae:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   234b2:	3601      	adds	r6, #1
   234b4:	e723      	b.n	232fe <register_events+0x16>
   234b6:	bf00      	nop
   234b8:	0002837e 	.word	0x0002837e
   234bc:	000283d7 	.word	0x000283d7
   234c0:	00027f8a 	.word	0x00027f8a
   234c4:	20003104 	.word	0x20003104
   234c8:	000283ec 	.word	0x000283ec
   234cc:	000283ab 	.word	0x000283ab
   234d0:	000283c2 	.word	0x000283c2
   234d4:	0002bab3 	.word	0x0002bab3
   234d8:	0002ab0f 	.word	0x0002ab0f
   234dc:	0002bad4 	.word	0x0002bad4
   234e0:	0002baf1 	.word	0x0002baf1
   234e4:	0002bb0b 	.word	0x0002bb0b
   234e8:	0002bb20 	.word	0x0002bb20
   234ec:	0002bb3c 	.word	0x0002bb3c
   234f0:	0002bb4d 	.word	0x0002bb4d
   234f4:	0002bb6a 	.word	0x0002bb6a
   234f8:	0002bb81 	.word	0x0002bb81
   234fc:	0002bb9c 	.word	0x0002bb9c
   23500:	0002bbb5 	.word	0x0002bbb5

00023504 <clear_event_registrations>:
{
   23504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23508:	2314      	movs	r3, #20
   2350a:	4f4e      	ldr	r7, [pc, #312]	; (23644 <clear_event_registrations+0x140>)
   2350c:	4615      	mov	r5, r2
	while (num_events--) {
   2350e:	460c      	mov	r4, r1
   23510:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   23514:	2600      	movs	r6, #0
	while (num_events--) {
   23516:	b90c      	cbnz	r4, 2351c <clear_event_registrations+0x18>
}
   23518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   2351c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   23520:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   23524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23528:	f1a0 0814 	sub.w	r8, r0, #20
   2352c:	2b08      	cmp	r3, #8
   2352e:	d842      	bhi.n	235b6 <clear_event_registrations+0xb2>
   23530:	e8df f003 	tbb	[pc, r3]
   23534:	41052555 	.word	0x41052555
   23538:	41414116 	.word	0x41414116
   2353c:	33          	.byte	0x33
   2353d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2353e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   23542:	2b00      	cmp	r3, #0
   23544:	d142      	bne.n	235cc <clear_event_registrations+0xc8>
   23546:	4940      	ldr	r1, [pc, #256]	; (23648 <clear_event_registrations+0x144>)
   23548:	4a40      	ldr	r2, [pc, #256]	; (2364c <clear_event_registrations+0x148>)
   2354a:	4841      	ldr	r0, [pc, #260]	; (23650 <clear_event_registrations+0x14c>)
   2354c:	23b6      	movs	r3, #182	; 0xb6
   2354e:	f001 f8cd 	bl	246ec <assert_print>
   23552:	4840      	ldr	r0, [pc, #256]	; (23654 <clear_event_registrations+0x150>)
   23554:	f001 f8ca 	bl	246ec <assert_print>
   23558:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2355a:	483c      	ldr	r0, [pc, #240]	; (2364c <clear_event_registrations+0x148>)
   2355c:	f001 f8bf 	bl	246de <assert_post_action>
   23560:	f850 3c04 	ldr.w	r3, [r0, #-4]
   23564:	2b00      	cmp	r3, #0
   23566:	d131      	bne.n	235cc <clear_event_registrations+0xc8>
   23568:	493b      	ldr	r1, [pc, #236]	; (23658 <clear_event_registrations+0x154>)
   2356a:	4a38      	ldr	r2, [pc, #224]	; (2364c <clear_event_registrations+0x148>)
   2356c:	4838      	ldr	r0, [pc, #224]	; (23650 <clear_event_registrations+0x14c>)
   2356e:	23ba      	movs	r3, #186	; 0xba
   23570:	f001 f8bc 	bl	246ec <assert_print>
   23574:	4839      	ldr	r0, [pc, #228]	; (2365c <clear_event_registrations+0x158>)
   23576:	f001 f8b9 	bl	246ec <assert_print>
   2357a:	21ba      	movs	r1, #186	; 0xba
   2357c:	e7ed      	b.n	2355a <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2357e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   23582:	bb1b      	cbnz	r3, 235cc <clear_event_registrations+0xc8>
   23584:	4936      	ldr	r1, [pc, #216]	; (23660 <clear_event_registrations+0x15c>)
   23586:	4a31      	ldr	r2, [pc, #196]	; (2364c <clear_event_registrations+0x148>)
   23588:	4831      	ldr	r0, [pc, #196]	; (23650 <clear_event_registrations+0x14c>)
   2358a:	23be      	movs	r3, #190	; 0xbe
   2358c:	f001 f8ae 	bl	246ec <assert_print>
   23590:	4834      	ldr	r0, [pc, #208]	; (23664 <clear_event_registrations+0x160>)
   23592:	f001 f8ab 	bl	246ec <assert_print>
   23596:	21be      	movs	r1, #190	; 0xbe
   23598:	e7df      	b.n	2355a <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2359a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2359e:	b9ab      	cbnz	r3, 235cc <clear_event_registrations+0xc8>
   235a0:	4931      	ldr	r1, [pc, #196]	; (23668 <clear_event_registrations+0x164>)
   235a2:	4a2a      	ldr	r2, [pc, #168]	; (2364c <clear_event_registrations+0x148>)
   235a4:	482a      	ldr	r0, [pc, #168]	; (23650 <clear_event_registrations+0x14c>)
   235a6:	23c2      	movs	r3, #194	; 0xc2
   235a8:	f001 f8a0 	bl	246ec <assert_print>
   235ac:	482f      	ldr	r0, [pc, #188]	; (2366c <clear_event_registrations+0x168>)
   235ae:	f001 f89d 	bl	246ec <assert_print>
   235b2:	21c2      	movs	r1, #194	; 0xc2
   235b4:	e7d1      	b.n	2355a <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   235b6:	492e      	ldr	r1, [pc, #184]	; (23670 <clear_event_registrations+0x16c>)
   235b8:	4a24      	ldr	r2, [pc, #144]	; (2364c <clear_event_registrations+0x148>)
   235ba:	4825      	ldr	r0, [pc, #148]	; (23650 <clear_event_registrations+0x14c>)
   235bc:	23cf      	movs	r3, #207	; 0xcf
   235be:	f001 f895 	bl	246ec <assert_print>
   235c2:	482c      	ldr	r0, [pc, #176]	; (23674 <clear_event_registrations+0x170>)
   235c4:	f001 f892 	bl	246ec <assert_print>
   235c8:	21cf      	movs	r1, #207	; 0xcf
   235ca:	e7c6      	b.n	2355a <clear_event_registrations+0x56>
	return node->next != NULL;
   235cc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   235d0:	b12b      	cbz	r3, 235de <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   235d2:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   235d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   235d8:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   235da:	e940 6605 	strd	r6, r6, [r0, #-20]
   235de:	4638      	mov	r0, r7
   235e0:	f7fd f87e 	bl	206e0 <z_spin_unlock_valid>
   235e4:	b960      	cbnz	r0, 23600 <clear_event_registrations+0xfc>
   235e6:	4a24      	ldr	r2, [pc, #144]	; (23678 <clear_event_registrations+0x174>)
   235e8:	4924      	ldr	r1, [pc, #144]	; (2367c <clear_event_registrations+0x178>)
   235ea:	4819      	ldr	r0, [pc, #100]	; (23650 <clear_event_registrations+0x14c>)
   235ec:	23c2      	movs	r3, #194	; 0xc2
   235ee:	f001 f87d 	bl	246ec <assert_print>
   235f2:	4914      	ldr	r1, [pc, #80]	; (23644 <clear_event_registrations+0x140>)
   235f4:	4822      	ldr	r0, [pc, #136]	; (23680 <clear_event_registrations+0x17c>)
   235f6:	f001 f879 	bl	246ec <assert_print>
   235fa:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   235fc:	481e      	ldr	r0, [pc, #120]	; (23678 <clear_event_registrations+0x174>)
   235fe:	e7ad      	b.n	2355c <clear_event_registrations+0x58>
   23600:	f385 8811 	msr	BASEPRI, r5
   23604:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23608:	f04f 0340 	mov.w	r3, #64	; 0x40
   2360c:	f3ef 8511 	mrs	r5, BASEPRI
   23610:	f383 8812 	msr	BASEPRI_MAX, r3
   23614:	f3bf 8f6f 	isb	sy
   23618:	4638      	mov	r0, r7
   2361a:	f7fd f853 	bl	206c4 <z_spin_lock_valid>
   2361e:	3c01      	subs	r4, #1
   23620:	b958      	cbnz	r0, 2363a <clear_event_registrations+0x136>
   23622:	4a15      	ldr	r2, [pc, #84]	; (23678 <clear_event_registrations+0x174>)
   23624:	4917      	ldr	r1, [pc, #92]	; (23684 <clear_event_registrations+0x180>)
   23626:	480a      	ldr	r0, [pc, #40]	; (23650 <clear_event_registrations+0x14c>)
   23628:	2394      	movs	r3, #148	; 0x94
   2362a:	f001 f85f 	bl	246ec <assert_print>
   2362e:	4905      	ldr	r1, [pc, #20]	; (23644 <clear_event_registrations+0x140>)
   23630:	4815      	ldr	r0, [pc, #84]	; (23688 <clear_event_registrations+0x184>)
   23632:	f001 f85b 	bl	246ec <assert_print>
   23636:	2194      	movs	r1, #148	; 0x94
   23638:	e7e0      	b.n	235fc <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   2363a:	4638      	mov	r0, r7
   2363c:	f7fd f860 	bl	20700 <z_spin_lock_set_owner>
	return k;
   23640:	4640      	mov	r0, r8
   23642:	e768      	b.n	23516 <clear_event_registrations+0x12>
   23644:	20003104 	.word	0x20003104
   23648:	0002baf1 	.word	0x0002baf1
   2364c:	0002bab3 	.word	0x0002bab3
   23650:	00027f8a 	.word	0x00027f8a
   23654:	0002bb0b 	.word	0x0002bb0b
   23658:	0002bb20 	.word	0x0002bb20
   2365c:	0002bb3c 	.word	0x0002bb3c
   23660:	0002bb4d 	.word	0x0002bb4d
   23664:	0002bb6a 	.word	0x0002bb6a
   23668:	0002bb81 	.word	0x0002bb81
   2366c:	0002bb9c 	.word	0x0002bb9c
   23670:	0002ab0f 	.word	0x0002ab0f
   23674:	0002bbb5 	.word	0x0002bbb5
   23678:	0002837e 	.word	0x0002837e
   2367c:	000283ab 	.word	0x000283ab
   23680:	000283c2 	.word	0x000283c2
   23684:	000283d7 	.word	0x000283d7
   23688:	000283ec 	.word	0x000283ec

0002368c <k_poll_event_init>:
{
   2368c:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2368e:	b162      	cbz	r2, 236aa <k_poll_event_init+0x1e>
   23690:	4917      	ldr	r1, [pc, #92]	; (236f0 <k_poll_event_init+0x64>)
   23692:	4a18      	ldr	r2, [pc, #96]	; (236f4 <k_poll_event_init+0x68>)
   23694:	4818      	ldr	r0, [pc, #96]	; (236f8 <k_poll_event_init+0x6c>)
   23696:	232d      	movs	r3, #45	; 0x2d
   23698:	f001 f828 	bl	246ec <assert_print>
   2369c:	4817      	ldr	r0, [pc, #92]	; (236fc <k_poll_event_init+0x70>)
   2369e:	f001 f825 	bl	246ec <assert_print>
   236a2:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   236a4:	4813      	ldr	r0, [pc, #76]	; (236f4 <k_poll_event_init+0x68>)
   236a6:	f001 f81a 	bl	246de <assert_post_action>
   236aa:	293f      	cmp	r1, #63	; 0x3f
   236ac:	d90a      	bls.n	236c4 <k_poll_event_init+0x38>
   236ae:	4914      	ldr	r1, [pc, #80]	; (23700 <k_poll_event_init+0x74>)
   236b0:	4a10      	ldr	r2, [pc, #64]	; (236f4 <k_poll_event_init+0x68>)
   236b2:	4811      	ldr	r0, [pc, #68]	; (236f8 <k_poll_event_init+0x6c>)
   236b4:	232f      	movs	r3, #47	; 0x2f
   236b6:	f001 f819 	bl	246ec <assert_print>
   236ba:	4812      	ldr	r0, [pc, #72]	; (23704 <k_poll_event_init+0x78>)
   236bc:	f001 f816 	bl	246ec <assert_print>
   236c0:	212f      	movs	r1, #47	; 0x2f
   236c2:	e7ef      	b.n	236a4 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   236c4:	b953      	cbnz	r3, 236dc <k_poll_event_init+0x50>
   236c6:	4910      	ldr	r1, [pc, #64]	; (23708 <k_poll_event_init+0x7c>)
   236c8:	4a0a      	ldr	r2, [pc, #40]	; (236f4 <k_poll_event_init+0x68>)
   236ca:	480b      	ldr	r0, [pc, #44]	; (236f8 <k_poll_event_init+0x6c>)
   236cc:	2330      	movs	r3, #48	; 0x30
   236ce:	f001 f80d 	bl	246ec <assert_print>
   236d2:	480e      	ldr	r0, [pc, #56]	; (2370c <k_poll_event_init+0x80>)
   236d4:	f001 f80a 	bl	246ec <assert_print>
   236d8:	2130      	movs	r1, #48	; 0x30
   236da:	e7e3      	b.n	236a4 <k_poll_event_init+0x18>
	event->poller = NULL;
   236dc:	6082      	str	r2, [r0, #8]
	event->type = type;
   236de:	0209      	lsls	r1, r1, #8
   236e0:	7b02      	ldrb	r2, [r0, #12]
   236e2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   236e6:	4311      	orrs	r1, r2
	event->obj = obj;
   236e8:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   236ec:	bd08      	pop	{r3, pc}
   236ee:	bf00      	nop
   236f0:	0002bbcb 	.word	0x0002bbcb
   236f4:	0002bab3 	.word	0x0002bab3
   236f8:	00027f8a 	.word	0x00027f8a
   236fc:	0002bbeb 	.word	0x0002bbeb
   23700:	0002bc11 	.word	0x0002bc11
   23704:	0002bc35 	.word	0x0002bc35
   23708:	0002bc45 	.word	0x0002bc45
   2370c:	0002bc58 	.word	0x0002bc58

00023710 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23714:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   23716:	4b5c      	ldr	r3, [pc, #368]	; (23888 <z_impl_k_poll+0x178>)
   23718:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   2371c:	2301      	movs	r3, #1
{
   2371e:	4617      	mov	r7, r2
   23720:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   23722:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   23726:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2372a:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   2372e:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   23732:	f1bb 0f00 	cmp.w	fp, #0
   23736:	d00e      	beq.n	23756 <z_impl_k_poll+0x46>
   23738:	4954      	ldr	r1, [pc, #336]	; (2388c <z_impl_k_poll+0x17c>)
   2373a:	4a55      	ldr	r2, [pc, #340]	; (23890 <z_impl_k_poll+0x180>)
   2373c:	4855      	ldr	r0, [pc, #340]	; (23894 <z_impl_k_poll+0x184>)
   2373e:	f240 132d 	movw	r3, #301	; 0x12d
   23742:	f000 ffd3 	bl	246ec <assert_print>
   23746:	4854      	ldr	r0, [pc, #336]	; (23898 <z_impl_k_poll+0x188>)
   23748:	f000 ffd0 	bl	246ec <assert_print>
   2374c:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   23750:	484f      	ldr	r0, [pc, #316]	; (23890 <z_impl_k_poll+0x180>)
   23752:	f000 ffc4 	bl	246de <assert_post_action>
   23756:	b960      	cbnz	r0, 23772 <z_impl_k_poll+0x62>
   23758:	4950      	ldr	r1, [pc, #320]	; (2389c <z_impl_k_poll+0x18c>)
   2375a:	4a4d      	ldr	r2, [pc, #308]	; (23890 <z_impl_k_poll+0x180>)
   2375c:	484d      	ldr	r0, [pc, #308]	; (23894 <z_impl_k_poll+0x184>)
   2375e:	f44f 7397 	mov.w	r3, #302	; 0x12e
   23762:	f000 ffc3 	bl	246ec <assert_print>
   23766:	484e      	ldr	r0, [pc, #312]	; (238a0 <z_impl_k_poll+0x190>)
   23768:	f000 ffc0 	bl	246ec <assert_print>
   2376c:	f44f 7197 	mov.w	r1, #302	; 0x12e
   23770:	e7ee      	b.n	23750 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   23772:	2900      	cmp	r1, #0
   23774:	da0c      	bge.n	23790 <z_impl_k_poll+0x80>
   23776:	494b      	ldr	r1, [pc, #300]	; (238a4 <z_impl_k_poll+0x194>)
   23778:	4a45      	ldr	r2, [pc, #276]	; (23890 <z_impl_k_poll+0x180>)
   2377a:	4846      	ldr	r0, [pc, #280]	; (23894 <z_impl_k_poll+0x184>)
   2377c:	f240 132f 	movw	r3, #303	; 0x12f
   23780:	f000 ffb4 	bl	246ec <assert_print>
   23784:	4848      	ldr	r0, [pc, #288]	; (238a8 <z_impl_k_poll+0x198>)
   23786:	f000 ffb1 	bl	246ec <assert_print>
   2378a:	f240 112f 	movw	r1, #303	; 0x12f
   2378e:	e7df      	b.n	23750 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   23790:	ea57 0306 	orrs.w	r3, r7, r6
   23794:	bf0c      	ite	eq
   23796:	2301      	moveq	r3, #1
   23798:	2300      	movne	r3, #0
   2379a:	f7ff fda5 	bl	232e8 <register_events>
   2379e:	4681      	mov	r9, r0
   237a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   237a4:	f3ef 8a11 	mrs	sl, BASEPRI
   237a8:	f383 8812 	msr	BASEPRI_MAX, r3
   237ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237b0:	483e      	ldr	r0, [pc, #248]	; (238ac <z_impl_k_poll+0x19c>)
   237b2:	f7fc ff87 	bl	206c4 <z_spin_lock_valid>
   237b6:	b960      	cbnz	r0, 237d2 <z_impl_k_poll+0xc2>
   237b8:	4a3d      	ldr	r2, [pc, #244]	; (238b0 <z_impl_k_poll+0x1a0>)
   237ba:	493e      	ldr	r1, [pc, #248]	; (238b4 <z_impl_k_poll+0x1a4>)
   237bc:	4835      	ldr	r0, [pc, #212]	; (23894 <z_impl_k_poll+0x184>)
   237be:	2394      	movs	r3, #148	; 0x94
   237c0:	f000 ff94 	bl	246ec <assert_print>
   237c4:	4939      	ldr	r1, [pc, #228]	; (238ac <z_impl_k_poll+0x19c>)
   237c6:	483c      	ldr	r0, [pc, #240]	; (238b8 <z_impl_k_poll+0x1a8>)
   237c8:	f000 ff90 	bl	246ec <assert_print>
   237cc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237ce:	4838      	ldr	r0, [pc, #224]	; (238b0 <z_impl_k_poll+0x1a0>)
   237d0:	e7bf      	b.n	23752 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   237d2:	4836      	ldr	r0, [pc, #216]	; (238ac <z_impl_k_poll+0x19c>)
   237d4:	f7fc ff94 	bl	20700 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   237d8:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   237dc:	b9e4      	cbnz	r4, 23818 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   237de:	4628      	mov	r0, r5
   237e0:	4652      	mov	r2, sl
   237e2:	4649      	mov	r1, r9
   237e4:	f7ff fe8e 	bl	23504 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   237e8:	4830      	ldr	r0, [pc, #192]	; (238ac <z_impl_k_poll+0x19c>)
   237ea:	f7fc ff79 	bl	206e0 <z_spin_unlock_valid>
   237ee:	b958      	cbnz	r0, 23808 <z_impl_k_poll+0xf8>
   237f0:	4a2f      	ldr	r2, [pc, #188]	; (238b0 <z_impl_k_poll+0x1a0>)
   237f2:	4932      	ldr	r1, [pc, #200]	; (238bc <z_impl_k_poll+0x1ac>)
   237f4:	4827      	ldr	r0, [pc, #156]	; (23894 <z_impl_k_poll+0x184>)
   237f6:	23c2      	movs	r3, #194	; 0xc2
   237f8:	f000 ff78 	bl	246ec <assert_print>
   237fc:	492b      	ldr	r1, [pc, #172]	; (238ac <z_impl_k_poll+0x19c>)
   237fe:	4830      	ldr	r0, [pc, #192]	; (238c0 <z_impl_k_poll+0x1b0>)
   23800:	f000 ff74 	bl	246ec <assert_print>
   23804:	21c2      	movs	r1, #194	; 0xc2
   23806:	e7e2      	b.n	237ce <z_impl_k_poll+0xbe>
	__asm__ volatile(
   23808:	f38a 8811 	msr	BASEPRI, sl
   2380c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23810:	4620      	mov	r0, r4
   23812:	b003      	add	sp, #12
   23814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23818:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   2381c:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23820:	d10b      	bne.n	2383a <z_impl_k_poll+0x12a>
   23822:	4822      	ldr	r0, [pc, #136]	; (238ac <z_impl_k_poll+0x19c>)
   23824:	f7fc ff5c 	bl	206e0 <z_spin_unlock_valid>
   23828:	2800      	cmp	r0, #0
   2382a:	d0e1      	beq.n	237f0 <z_impl_k_poll+0xe0>
   2382c:	f38a 8811 	msr	BASEPRI, sl
   23830:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23834:	f06f 040a 	mvn.w	r4, #10
   23838:	e7ea      	b.n	23810 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2383a:	e9cd 7600 	strd	r7, r6, [sp]
   2383e:	4a21      	ldr	r2, [pc, #132]	; (238c4 <z_impl_k_poll+0x1b4>)
   23840:	481a      	ldr	r0, [pc, #104]	; (238ac <z_impl_k_poll+0x19c>)
   23842:	4651      	mov	r1, sl
   23844:	f7fe fc38 	bl	220b8 <z_pend_curr>
   23848:	4604      	mov	r4, r0
	__asm__ volatile(
   2384a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2384e:	f3ef 8611 	mrs	r6, BASEPRI
   23852:	f383 8812 	msr	BASEPRI_MAX, r3
   23856:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2385a:	4814      	ldr	r0, [pc, #80]	; (238ac <z_impl_k_poll+0x19c>)
   2385c:	f7fc ff32 	bl	206c4 <z_spin_lock_valid>
   23860:	2800      	cmp	r0, #0
   23862:	d0a9      	beq.n	237b8 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   23864:	4811      	ldr	r0, [pc, #68]	; (238ac <z_impl_k_poll+0x19c>)
   23866:	f7fc ff4b 	bl	20700 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2386a:	4628      	mov	r0, r5
   2386c:	4632      	mov	r2, r6
   2386e:	4649      	mov	r1, r9
   23870:	f7ff fe48 	bl	23504 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23874:	480d      	ldr	r0, [pc, #52]	; (238ac <z_impl_k_poll+0x19c>)
   23876:	f7fc ff33 	bl	206e0 <z_spin_unlock_valid>
   2387a:	2800      	cmp	r0, #0
   2387c:	d0b8      	beq.n	237f0 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   2387e:	f386 8811 	msr	BASEPRI, r6
   23882:	f3bf 8f6f 	isb	sy
	return swap_rc;
   23886:	e7c3      	b.n	23810 <z_impl_k_poll+0x100>
   23888:	200030a8 	.word	0x200030a8
   2388c:	0002b4a3 	.word	0x0002b4a3
   23890:	0002bab3 	.word	0x0002bab3
   23894:	00027f8a 	.word	0x00027f8a
   23898:	0002a56f 	.word	0x0002a56f
   2389c:	0002bc72 	.word	0x0002bc72
   238a0:	0002bc88 	.word	0x0002bc88
   238a4:	0002bc97 	.word	0x0002bc97
   238a8:	0002bca7 	.word	0x0002bca7
   238ac:	20003104 	.word	0x20003104
   238b0:	0002837e 	.word	0x0002837e
   238b4:	000283d7 	.word	0x000283d7
   238b8:	000283ec 	.word	0x000283ec
   238bc:	000283ab 	.word	0x000283ab
   238c0:	000283c2 	.word	0x000283c2
   238c4:	20000770 	.word	0x20000770

000238c8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   238c8:	b570      	push	{r4, r5, r6, lr}
   238ca:	4604      	mov	r4, r0
   238cc:	460d      	mov	r5, r1
	__asm__ volatile(
   238ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   238d2:	f3ef 8611 	mrs	r6, BASEPRI
   238d6:	f383 8812 	msr	BASEPRI_MAX, r3
   238da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   238de:	4820      	ldr	r0, [pc, #128]	; (23960 <z_impl_k_poll_signal_raise+0x98>)
   238e0:	f7fc fef0 	bl	206c4 <z_spin_lock_valid>
   238e4:	b968      	cbnz	r0, 23902 <z_impl_k_poll_signal_raise+0x3a>
   238e6:	4a1f      	ldr	r2, [pc, #124]	; (23964 <z_impl_k_poll_signal_raise+0x9c>)
   238e8:	491f      	ldr	r1, [pc, #124]	; (23968 <z_impl_k_poll_signal_raise+0xa0>)
   238ea:	4820      	ldr	r0, [pc, #128]	; (2396c <z_impl_k_poll_signal_raise+0xa4>)
   238ec:	2394      	movs	r3, #148	; 0x94
   238ee:	f000 fefd 	bl	246ec <assert_print>
   238f2:	491b      	ldr	r1, [pc, #108]	; (23960 <z_impl_k_poll_signal_raise+0x98>)
   238f4:	481e      	ldr	r0, [pc, #120]	; (23970 <z_impl_k_poll_signal_raise+0xa8>)
   238f6:	f000 fef9 	bl	246ec <assert_print>
   238fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   238fc:	4819      	ldr	r0, [pc, #100]	; (23964 <z_impl_k_poll_signal_raise+0x9c>)
   238fe:	f000 feee 	bl	246de <assert_post_action>
	z_spin_lock_set_owner(l);
   23902:	4817      	ldr	r0, [pc, #92]	; (23960 <z_impl_k_poll_signal_raise+0x98>)
   23904:	f7fc fefc 	bl	20700 <z_spin_lock_set_owner>
	return list->head == list;
   23908:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   2390a:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   2390c:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2390e:	4284      	cmp	r4, r0
   23910:	60a1      	str	r1, [r4, #8]
   23912:	d10f      	bne.n	23934 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23914:	4812      	ldr	r0, [pc, #72]	; (23960 <z_impl_k_poll_signal_raise+0x98>)
   23916:	f7fc fee3 	bl	206e0 <z_spin_unlock_valid>
   2391a:	b9d8      	cbnz	r0, 23954 <z_impl_k_poll_signal_raise+0x8c>
   2391c:	4a11      	ldr	r2, [pc, #68]	; (23964 <z_impl_k_poll_signal_raise+0x9c>)
   2391e:	4915      	ldr	r1, [pc, #84]	; (23974 <z_impl_k_poll_signal_raise+0xac>)
   23920:	4812      	ldr	r0, [pc, #72]	; (2396c <z_impl_k_poll_signal_raise+0xa4>)
   23922:	23c2      	movs	r3, #194	; 0xc2
   23924:	f000 fee2 	bl	246ec <assert_print>
   23928:	490d      	ldr	r1, [pc, #52]	; (23960 <z_impl_k_poll_signal_raise+0x98>)
   2392a:	4813      	ldr	r0, [pc, #76]	; (23978 <z_impl_k_poll_signal_raise+0xb0>)
   2392c:	f000 fede 	bl	246ec <assert_print>
   23930:	21c2      	movs	r1, #194	; 0xc2
   23932:	e7e3      	b.n	238fc <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   23934:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23938:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2393a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2393c:	2300      	movs	r3, #0
	node->prev = NULL;
   2393e:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23942:	f003 fb10 	bl	26f66 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   23946:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23948:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2394a:	4805      	ldr	r0, [pc, #20]	; (23960 <z_impl_k_poll_signal_raise+0x98>)
   2394c:	f7fe f8f8 	bl	21b40 <z_reschedule>
	return rc;
}
   23950:	4620      	mov	r0, r4
   23952:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   23954:	f386 8811 	msr	BASEPRI, r6
   23958:	f3bf 8f6f 	isb	sy
		return 0;
   2395c:	2400      	movs	r4, #0
   2395e:	e7f7      	b.n	23950 <z_impl_k_poll_signal_raise+0x88>
   23960:	20003104 	.word	0x20003104
   23964:	0002837e 	.word	0x0002837e
   23968:	000283d7 	.word	0x000283d7
   2396c:	00027f8a 	.word	0x00027f8a
   23970:	000283ec 	.word	0x000283ec
   23974:	000283ab 	.word	0x000283ab
   23978:	000283c2 	.word	0x000283c2

0002397c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2397c:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2397e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23982:	4606      	mov	r6, r0
   23984:	460d      	mov	r5, r1
   23986:	d220      	bcs.n	239ca <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   23988:	f04f 0800 	mov.w	r8, #0
   2398c:	f04f 0900 	mov.w	r9, #0
   23990:	e9cd 8900 	strd	r8, r9, [sp]
   23994:	f041 0104 	orr.w	r1, r1, #4
   23998:	f7fc fb8c 	bl	200b4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2399c:	4604      	mov	r4, r0
   2399e:	b1a0      	cbz	r0, 239ca <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   239a0:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   239a4:	b195      	cbz	r5, 239cc <z_heap_aligned_alloc+0x50>
   239a6:	1e6b      	subs	r3, r5, #1
   239a8:	421c      	tst	r4, r3
   239aa:	d00f      	beq.n	239cc <z_heap_aligned_alloc+0x50>
   239ac:	4a09      	ldr	r2, [pc, #36]	; (239d4 <z_heap_aligned_alloc+0x58>)
   239ae:	490a      	ldr	r1, [pc, #40]	; (239d8 <z_heap_aligned_alloc+0x5c>)
   239b0:	480a      	ldr	r0, [pc, #40]	; (239dc <z_heap_aligned_alloc+0x60>)
   239b2:	2325      	movs	r3, #37	; 0x25
   239b4:	f000 fe9a 	bl	246ec <assert_print>
   239b8:	4809      	ldr	r0, [pc, #36]	; (239e0 <z_heap_aligned_alloc+0x64>)
   239ba:	4621      	mov	r1, r4
   239bc:	462a      	mov	r2, r5
   239be:	f000 fe95 	bl	246ec <assert_print>
   239c2:	4804      	ldr	r0, [pc, #16]	; (239d4 <z_heap_aligned_alloc+0x58>)
   239c4:	2125      	movs	r1, #37	; 0x25
   239c6:	f000 fe8a 	bl	246de <assert_post_action>
		return NULL;
   239ca:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   239cc:	4620      	mov	r0, r4
   239ce:	b002      	add	sp, #8
   239d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   239d4:	0002bcb4 	.word	0x0002bcb4
   239d8:	0002bcd8 	.word	0x0002bcd8
   239dc:	00027f8a 	.word	0x00027f8a
   239e0:	0002bd0a 	.word	0x0002bd0a

000239e4 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   239e4:	2803      	cmp	r0, #3
{
   239e6:	b508      	push	{r3, lr}
   239e8:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
   239ea:	d901      	bls.n	239f0 <k_aligned_alloc+0xc>
   239ec:	0783      	lsls	r3, r0, #30
   239ee:	d00c      	beq.n	23a0a <k_aligned_alloc+0x26>
   239f0:	4910      	ldr	r1, [pc, #64]	; (23a34 <k_aligned_alloc+0x50>)
   239f2:	4a11      	ldr	r2, [pc, #68]	; (23a38 <k_aligned_alloc+0x54>)
   239f4:	4811      	ldr	r0, [pc, #68]	; (23a3c <k_aligned_alloc+0x58>)
   239f6:	2342      	movs	r3, #66	; 0x42
   239f8:	f000 fe78 	bl	246ec <assert_print>
   239fc:	4810      	ldr	r0, [pc, #64]	; (23a40 <k_aligned_alloc+0x5c>)
   239fe:	f000 fe75 	bl	246ec <assert_print>
   23a02:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   23a04:	480c      	ldr	r0, [pc, #48]	; (23a38 <k_aligned_alloc+0x54>)
   23a06:	f000 fe6a 	bl	246de <assert_post_action>
   23a0a:	1e43      	subs	r3, r0, #1
   23a0c:	4203      	tst	r3, r0
   23a0e:	d00a      	beq.n	23a26 <k_aligned_alloc+0x42>
   23a10:	490c      	ldr	r1, [pc, #48]	; (23a44 <k_aligned_alloc+0x60>)
   23a12:	4a09      	ldr	r2, [pc, #36]	; (23a38 <k_aligned_alloc+0x54>)
   23a14:	4809      	ldr	r0, [pc, #36]	; (23a3c <k_aligned_alloc+0x58>)
   23a16:	2346      	movs	r3, #70	; 0x46
   23a18:	f000 fe68 	bl	246ec <assert_print>
   23a1c:	480a      	ldr	r0, [pc, #40]	; (23a48 <k_aligned_alloc+0x64>)
   23a1e:	f000 fe65 	bl	246ec <assert_print>
   23a22:	2146      	movs	r1, #70	; 0x46
   23a24:	e7ee      	b.n	23a04 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23a26:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   23a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23a2c:	4807      	ldr	r0, [pc, #28]	; (23a4c <k_aligned_alloc+0x68>)
   23a2e:	f7ff bfa5 	b.w	2397c <z_heap_aligned_alloc>
   23a32:	bf00      	nop
   23a34:	0002bd32 	.word	0x0002bd32
   23a38:	0002bcb4 	.word	0x0002bcb4
   23a3c:	00027f8a 	.word	0x00027f8a
   23a40:	0002bd6f 	.word	0x0002bd6f
   23a44:	000281e8 	.word	0x000281e8
   23a48:	00028203 	.word	0x00028203
   23a4c:	200008fc 	.word	0x200008fc

00023a50 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   23a50:	4b01      	ldr	r3, [pc, #4]	; (23a58 <k_thread_system_pool_assign+0x8>)
   23a52:	6743      	str	r3, [r0, #116]	; 0x74
}
   23a54:	4770      	bx	lr
   23a56:	bf00      	nop
   23a58:	200008fc 	.word	0x200008fc

00023a5c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23a5c:	b538      	push	{r3, r4, r5, lr}
   23a5e:	4604      	mov	r4, r0
   23a60:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23a62:	f003 f902 	bl	26c6a <k_is_in_isr>
   23a66:	b920      	cbnz	r0, 23a72 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23a68:	4b06      	ldr	r3, [pc, #24]	; (23a84 <z_thread_aligned_alloc+0x28>)
   23a6a:	689b      	ldr	r3, [r3, #8]
   23a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   23a6e:	b90b      	cbnz	r3, 23a74 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   23a70:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   23a72:	4b05      	ldr	r3, [pc, #20]	; (23a88 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   23a74:	462a      	mov	r2, r5
   23a76:	4621      	mov	r1, r4
   23a78:	4618      	mov	r0, r3
}
   23a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   23a7e:	f7ff bf7d 	b.w	2397c <z_heap_aligned_alloc>
   23a82:	bf00      	nop
   23a84:	200030a8 	.word	0x200030a8
   23a88:	200008fc 	.word	0x200008fc

00023a8c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   23a8c:	4801      	ldr	r0, [pc, #4]	; (23a94 <boot_banner+0x8>)
   23a8e:	f000 bbf6 	b.w	2427e <printk>
   23a92:	bf00      	nop
   23a94:	0002bd9c 	.word	0x0002bd9c

00023a98 <ocrypto_ecdh_p256_public_key>:
   23a98:	b530      	push	{r4, r5, lr}
   23a9a:	b099      	sub	sp, #100	; 0x64
   23a9c:	4605      	mov	r5, r0
   23a9e:	4668      	mov	r0, sp
   23aa0:	f000 f828 	bl	23af4 <ocrypto_sc_p256_from32bytes>
   23aa4:	4669      	mov	r1, sp
   23aa6:	4604      	mov	r4, r0
   23aa8:	a808      	add	r0, sp, #32
   23aaa:	f000 fa53 	bl	23f54 <ocrypto_curve_p256_scalarmult_base>
   23aae:	a908      	add	r1, sp, #32
   23ab0:	4304      	orrs	r4, r0
   23ab2:	4628      	mov	r0, r5
   23ab4:	f000 f98a 	bl	23dcc <ocrypto_curve_p256_to64bytes>
   23ab8:	4620      	mov	r0, r4
   23aba:	b019      	add	sp, #100	; 0x64
   23abc:	bd30      	pop	{r4, r5, pc}
   23abe:	bf00      	nop

00023ac0 <ocrypto_ecdh_p256_common_secret>:
   23ac0:	b570      	push	{r4, r5, r6, lr}
   23ac2:	b098      	sub	sp, #96	; 0x60
   23ac4:	4605      	mov	r5, r0
   23ac6:	4668      	mov	r0, sp
   23ac8:	4616      	mov	r6, r2
   23aca:	f000 f813 	bl	23af4 <ocrypto_sc_p256_from32bytes>
   23ace:	4631      	mov	r1, r6
   23ad0:	4604      	mov	r4, r0
   23ad2:	a808      	add	r0, sp, #32
   23ad4:	f000 f946 	bl	23d64 <ocrypto_curve_p256_from64bytes>
   23ad8:	a908      	add	r1, sp, #32
   23ada:	466a      	mov	r2, sp
   23adc:	4304      	orrs	r4, r0
   23ade:	4608      	mov	r0, r1
   23ae0:	f000 f982 	bl	23de8 <ocrypto_curve_p256_scalarmult>
   23ae4:	a908      	add	r1, sp, #32
   23ae6:	4304      	orrs	r4, r0
   23ae8:	4628      	mov	r0, r5
   23aea:	f000 f96d 	bl	23dc8 <ocrypto_curve_p256_to32bytes>
   23aee:	4620      	mov	r0, r4
   23af0:	b018      	add	sp, #96	; 0x60
   23af2:	bd70      	pop	{r4, r5, r6, pc}

00023af4 <ocrypto_sc_p256_from32bytes>:
   23af4:	b570      	push	{r4, r5, r6, lr}
   23af6:	680b      	ldr	r3, [r1, #0]
   23af8:	4e12      	ldr	r6, [pc, #72]	; (23b44 <ocrypto_sc_p256_from32bytes+0x50>)
   23afa:	ba1b      	rev	r3, r3
   23afc:	61c3      	str	r3, [r0, #28]
   23afe:	684b      	ldr	r3, [r1, #4]
   23b00:	ba1b      	rev	r3, r3
   23b02:	6183      	str	r3, [r0, #24]
   23b04:	688b      	ldr	r3, [r1, #8]
   23b06:	ba1b      	rev	r3, r3
   23b08:	6143      	str	r3, [r0, #20]
   23b0a:	68cb      	ldr	r3, [r1, #12]
   23b0c:	ba1b      	rev	r3, r3
   23b0e:	6103      	str	r3, [r0, #16]
   23b10:	690b      	ldr	r3, [r1, #16]
   23b12:	ba1b      	rev	r3, r3
   23b14:	60c3      	str	r3, [r0, #12]
   23b16:	694b      	ldr	r3, [r1, #20]
   23b18:	ba1b      	rev	r3, r3
   23b1a:	6083      	str	r3, [r0, #8]
   23b1c:	698b      	ldr	r3, [r1, #24]
   23b1e:	ba1b      	rev	r3, r3
   23b20:	6043      	str	r3, [r0, #4]
   23b22:	69cb      	ldr	r3, [r1, #28]
   23b24:	ba1b      	rev	r3, r3
   23b26:	4632      	mov	r2, r6
   23b28:	6003      	str	r3, [r0, #0]
   23b2a:	4601      	mov	r1, r0
   23b2c:	4604      	mov	r4, r0
   23b2e:	f7dc fedf 	bl	8f0 <ocrypto_bigint_sub256>
   23b32:	4631      	mov	r1, r6
   23b34:	4605      	mov	r5, r0
   23b36:	4602      	mov	r2, r0
   23b38:	4620      	mov	r0, r4
   23b3a:	f7dc fef9 	bl	930 <ocrypto_bigint_cadd256>
   23b3e:	1e68      	subs	r0, r5, #1
   23b40:	bd70      	pop	{r4, r5, r6, pc}
   23b42:	bf00      	nop
   23b44:	00027ad0 	.word	0x00027ad0

00023b48 <p256_zdblu>:
   23b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b4c:	b088      	sub	sp, #32
   23b4e:	460c      	mov	r4, r1
   23b50:	4606      	mov	r6, r0
   23b52:	f102 0120 	add.w	r1, r2, #32
   23b56:	4668      	mov	r0, sp
   23b58:	f106 0720 	add.w	r7, r6, #32
   23b5c:	4690      	mov	r8, r2
   23b5e:	f7dd f9cd 	bl	efc <ocrypto_mod_p256_sqr>
   23b62:	466a      	mov	r2, sp
   23b64:	4669      	mov	r1, sp
   23b66:	4668      	mov	r0, sp
   23b68:	f7dd f8ea 	bl	d40 <ocrypto_mod_p256_add>
   23b6c:	4669      	mov	r1, sp
   23b6e:	4638      	mov	r0, r7
   23b70:	f7dd f9c4 	bl	efc <ocrypto_mod_p256_sqr>
   23b74:	463a      	mov	r2, r7
   23b76:	4639      	mov	r1, r7
   23b78:	4638      	mov	r0, r7
   23b7a:	f104 0520 	add.w	r5, r4, #32
   23b7e:	f7dd f8df 	bl	d40 <ocrypto_mod_p256_add>
   23b82:	466a      	mov	r2, sp
   23b84:	4669      	mov	r1, sp
   23b86:	4668      	mov	r0, sp
   23b88:	f7dd f8da 	bl	d40 <ocrypto_mod_p256_add>
   23b8c:	4641      	mov	r1, r8
   23b8e:	4628      	mov	r0, r5
   23b90:	f7dd f9b4 	bl	efc <ocrypto_mod_p256_sqr>
   23b94:	466a      	mov	r2, sp
   23b96:	4641      	mov	r1, r8
   23b98:	4630      	mov	r0, r6
   23b9a:	f7dd f997 	bl	ecc <ocrypto_mod_p256_mul>
   23b9e:	462a      	mov	r2, r5
   23ba0:	4629      	mov	r1, r5
   23ba2:	4668      	mov	r0, sp
   23ba4:	f7dd f8cc 	bl	d40 <ocrypto_mod_p256_add>
   23ba8:	462a      	mov	r2, r5
   23baa:	4669      	mov	r1, sp
   23bac:	4668      	mov	r0, sp
   23bae:	f7dd f8c7 	bl	d40 <ocrypto_mod_p256_add>
   23bb2:	4a12      	ldr	r2, [pc, #72]	; (23bfc <p256_zdblu+0xb4>)
   23bb4:	4669      	mov	r1, sp
   23bb6:	4668      	mov	r0, sp
   23bb8:	f7dd f8c2 	bl	d40 <ocrypto_mod_p256_add>
   23bbc:	4669      	mov	r1, sp
   23bbe:	4620      	mov	r0, r4
   23bc0:	f7dd f99c 	bl	efc <ocrypto_mod_p256_sqr>
   23bc4:	4632      	mov	r2, r6
   23bc6:	4621      	mov	r1, r4
   23bc8:	4620      	mov	r0, r4
   23bca:	f7dd f8f7 	bl	dbc <ocrypto_mod_p256_sub>
   23bce:	4632      	mov	r2, r6
   23bd0:	4621      	mov	r1, r4
   23bd2:	4620      	mov	r0, r4
   23bd4:	f7dd f8f2 	bl	dbc <ocrypto_mod_p256_sub>
   23bd8:	4622      	mov	r2, r4
   23bda:	4631      	mov	r1, r6
   23bdc:	4628      	mov	r0, r5
   23bde:	f7dd f8ed 	bl	dbc <ocrypto_mod_p256_sub>
   23be2:	466a      	mov	r2, sp
   23be4:	4629      	mov	r1, r5
   23be6:	4628      	mov	r0, r5
   23be8:	f7dd f970 	bl	ecc <ocrypto_mod_p256_mul>
   23bec:	463a      	mov	r2, r7
   23bee:	4629      	mov	r1, r5
   23bf0:	4628      	mov	r0, r5
   23bf2:	f7dd f8e3 	bl	dbc <ocrypto_mod_p256_sub>
   23bf6:	b008      	add	sp, #32
   23bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23bfc:	00027bb0 	.word	0x00027bb0

00023c00 <p256_zaddc>:
   23c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c02:	b099      	sub	sp, #100	; 0x64
   23c04:	4604      	mov	r4, r0
   23c06:	460d      	mov	r5, r1
   23c08:	460a      	mov	r2, r1
   23c0a:	4601      	mov	r1, r0
   23c0c:	4668      	mov	r0, sp
   23c0e:	f7dd f8d5 	bl	dbc <ocrypto_mod_p256_sub>
   23c12:	4669      	mov	r1, sp
   23c14:	4668      	mov	r0, sp
   23c16:	f7dd f971 	bl	efc <ocrypto_mod_p256_sqr>
   23c1a:	466a      	mov	r2, sp
   23c1c:	4621      	mov	r1, r4
   23c1e:	a808      	add	r0, sp, #32
   23c20:	f105 0620 	add.w	r6, r5, #32
   23c24:	f104 0720 	add.w	r7, r4, #32
   23c28:	f7dd f950 	bl	ecc <ocrypto_mod_p256_mul>
   23c2c:	466a      	mov	r2, sp
   23c2e:	4629      	mov	r1, r5
   23c30:	4668      	mov	r0, sp
   23c32:	f7dd f94b 	bl	ecc <ocrypto_mod_p256_mul>
   23c36:	4632      	mov	r2, r6
   23c38:	4639      	mov	r1, r7
   23c3a:	a810      	add	r0, sp, #64	; 0x40
   23c3c:	f7dd f880 	bl	d40 <ocrypto_mod_p256_add>
   23c40:	4632      	mov	r2, r6
   23c42:	4639      	mov	r1, r7
   23c44:	4630      	mov	r0, r6
   23c46:	f7dd f8b9 	bl	dbc <ocrypto_mod_p256_sub>
   23c4a:	4631      	mov	r1, r6
   23c4c:	4628      	mov	r0, r5
   23c4e:	f7dd f955 	bl	efc <ocrypto_mod_p256_sqr>
   23c52:	466a      	mov	r2, sp
   23c54:	a908      	add	r1, sp, #32
   23c56:	4620      	mov	r0, r4
   23c58:	f7dd f872 	bl	d40 <ocrypto_mod_p256_add>
   23c5c:	4622      	mov	r2, r4
   23c5e:	4629      	mov	r1, r5
   23c60:	4628      	mov	r0, r5
   23c62:	f7dd f8ab 	bl	dbc <ocrypto_mod_p256_sub>
   23c66:	466a      	mov	r2, sp
   23c68:	a908      	add	r1, sp, #32
   23c6a:	4668      	mov	r0, sp
   23c6c:	f7dd f8a6 	bl	dbc <ocrypto_mod_p256_sub>
   23c70:	466a      	mov	r2, sp
   23c72:	4639      	mov	r1, r7
   23c74:	4638      	mov	r0, r7
   23c76:	f7dd f929 	bl	ecc <ocrypto_mod_p256_mul>
   23c7a:	462a      	mov	r2, r5
   23c7c:	a908      	add	r1, sp, #32
   23c7e:	4668      	mov	r0, sp
   23c80:	f7dd f89c 	bl	dbc <ocrypto_mod_p256_sub>
   23c84:	466a      	mov	r2, sp
   23c86:	4631      	mov	r1, r6
   23c88:	4630      	mov	r0, r6
   23c8a:	f7dd f91f 	bl	ecc <ocrypto_mod_p256_mul>
   23c8e:	463a      	mov	r2, r7
   23c90:	4631      	mov	r1, r6
   23c92:	4630      	mov	r0, r6
   23c94:	f7dd f892 	bl	dbc <ocrypto_mod_p256_sub>
   23c98:	a910      	add	r1, sp, #64	; 0x40
   23c9a:	4668      	mov	r0, sp
   23c9c:	f7dd f92e 	bl	efc <ocrypto_mod_p256_sqr>
   23ca0:	4622      	mov	r2, r4
   23ca2:	4669      	mov	r1, sp
   23ca4:	4620      	mov	r0, r4
   23ca6:	f7dd f889 	bl	dbc <ocrypto_mod_p256_sub>
   23caa:	a908      	add	r1, sp, #32
   23cac:	4622      	mov	r2, r4
   23cae:	4608      	mov	r0, r1
   23cb0:	f7dd f884 	bl	dbc <ocrypto_mod_p256_sub>
   23cb4:	a910      	add	r1, sp, #64	; 0x40
   23cb6:	aa08      	add	r2, sp, #32
   23cb8:	4608      	mov	r0, r1
   23cba:	f7dd f907 	bl	ecc <ocrypto_mod_p256_mul>
   23cbe:	463a      	mov	r2, r7
   23cc0:	a910      	add	r1, sp, #64	; 0x40
   23cc2:	4638      	mov	r0, r7
   23cc4:	f7dd f87a 	bl	dbc <ocrypto_mod_p256_sub>
   23cc8:	b019      	add	sp, #100	; 0x64
   23cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023ccc <p256_zaddu>:
   23ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23cd0:	b088      	sub	sp, #32
   23cd2:	460c      	mov	r4, r1
   23cd4:	4605      	mov	r5, r0
   23cd6:	4690      	mov	r8, r2
   23cd8:	460a      	mov	r2, r1
   23cda:	4601      	mov	r1, r0
   23cdc:	4668      	mov	r0, sp
   23cde:	f7dd f86d 	bl	dbc <ocrypto_mod_p256_sub>
   23ce2:	4669      	mov	r1, sp
   23ce4:	4668      	mov	r0, sp
   23ce6:	f7dd f909 	bl	efc <ocrypto_mod_p256_sqr>
   23cea:	466a      	mov	r2, sp
   23cec:	4629      	mov	r1, r5
   23cee:	4628      	mov	r0, r5
   23cf0:	f104 0620 	add.w	r6, r4, #32
   23cf4:	f7dd f8ea 	bl	ecc <ocrypto_mod_p256_mul>
   23cf8:	f105 0720 	add.w	r7, r5, #32
   23cfc:	466a      	mov	r2, sp
   23cfe:	4621      	mov	r1, r4
   23d00:	4668      	mov	r0, sp
   23d02:	f7dd f8e3 	bl	ecc <ocrypto_mod_p256_mul>
   23d06:	4632      	mov	r2, r6
   23d08:	4639      	mov	r1, r7
   23d0a:	4630      	mov	r0, r6
   23d0c:	f7dd f856 	bl	dbc <ocrypto_mod_p256_sub>
   23d10:	4631      	mov	r1, r6
   23d12:	4620      	mov	r0, r4
   23d14:	f7dd f8f2 	bl	efc <ocrypto_mod_p256_sqr>
   23d18:	462a      	mov	r2, r5
   23d1a:	4621      	mov	r1, r4
   23d1c:	4620      	mov	r0, r4
   23d1e:	f7dd f84d 	bl	dbc <ocrypto_mod_p256_sub>
   23d22:	466a      	mov	r2, sp
   23d24:	4621      	mov	r1, r4
   23d26:	4620      	mov	r0, r4
   23d28:	f7dd f848 	bl	dbc <ocrypto_mod_p256_sub>
   23d2c:	466a      	mov	r2, sp
   23d2e:	4629      	mov	r1, r5
   23d30:	4640      	mov	r0, r8
   23d32:	f7dd f843 	bl	dbc <ocrypto_mod_p256_sub>
   23d36:	4642      	mov	r2, r8
   23d38:	4639      	mov	r1, r7
   23d3a:	4638      	mov	r0, r7
   23d3c:	f7dd f8c6 	bl	ecc <ocrypto_mod_p256_mul>
   23d40:	4622      	mov	r2, r4
   23d42:	4629      	mov	r1, r5
   23d44:	4668      	mov	r0, sp
   23d46:	f7dd f839 	bl	dbc <ocrypto_mod_p256_sub>
   23d4a:	466a      	mov	r2, sp
   23d4c:	4631      	mov	r1, r6
   23d4e:	4630      	mov	r0, r6
   23d50:	f7dd f8bc 	bl	ecc <ocrypto_mod_p256_mul>
   23d54:	463a      	mov	r2, r7
   23d56:	4631      	mov	r1, r6
   23d58:	4630      	mov	r0, r6
   23d5a:	f7dd f82f 	bl	dbc <ocrypto_mod_p256_sub>
   23d5e:	b008      	add	sp, #32
   23d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023d64 <ocrypto_curve_p256_from64bytes>:
   23d64:	b570      	push	{r4, r5, r6, lr}
   23d66:	f100 0620 	add.w	r6, r0, #32
   23d6a:	b090      	sub	sp, #64	; 0x40
   23d6c:	460d      	mov	r5, r1
   23d6e:	4604      	mov	r4, r0
   23d70:	f000 f914 	bl	23f9c <ocrypto_mod_p256_from_bytes>
   23d74:	f105 0120 	add.w	r1, r5, #32
   23d78:	4630      	mov	r0, r6
   23d7a:	f000 f90f 	bl	23f9c <ocrypto_mod_p256_from_bytes>
   23d7e:	4621      	mov	r1, r4
   23d80:	a808      	add	r0, sp, #32
   23d82:	f7dd f8bb 	bl	efc <ocrypto_mod_p256_sqr>
   23d86:	a908      	add	r1, sp, #32
   23d88:	4608      	mov	r0, r1
   23d8a:	4a0d      	ldr	r2, [pc, #52]	; (23dc0 <ocrypto_curve_p256_from64bytes+0x5c>)
   23d8c:	f7dc ffd8 	bl	d40 <ocrypto_mod_p256_add>
   23d90:	a908      	add	r1, sp, #32
   23d92:	4622      	mov	r2, r4
   23d94:	4608      	mov	r0, r1
   23d96:	f7dd f899 	bl	ecc <ocrypto_mod_p256_mul>
   23d9a:	a908      	add	r1, sp, #32
   23d9c:	4a09      	ldr	r2, [pc, #36]	; (23dc4 <ocrypto_curve_p256_from64bytes+0x60>)
   23d9e:	4608      	mov	r0, r1
   23da0:	f7dc ffce 	bl	d40 <ocrypto_mod_p256_add>
   23da4:	4631      	mov	r1, r6
   23da6:	4668      	mov	r0, sp
   23da8:	f7dd f8a8 	bl	efc <ocrypto_mod_p256_sqr>
   23dac:	2220      	movs	r2, #32
   23dae:	4669      	mov	r1, sp
   23db0:	eb0d 0002 	add.w	r0, sp, r2
   23db4:	f7dc ff96 	bl	ce4 <ocrypto_constant_time_equal>
   23db8:	3801      	subs	r0, #1
   23dba:	b010      	add	sp, #64	; 0x40
   23dbc:	bd70      	pop	{r4, r5, r6, pc}
   23dbe:	bf00      	nop
   23dc0:	00027bb0 	.word	0x00027bb0
   23dc4:	00027b90 	.word	0x00027b90

00023dc8 <ocrypto_curve_p256_to32bytes>:
   23dc8:	f000 b902 	b.w	23fd0 <ocrypto_mod_p256_to_bytes>

00023dcc <ocrypto_curve_p256_to64bytes>:
   23dcc:	b538      	push	{r3, r4, r5, lr}
   23dce:	4604      	mov	r4, r0
   23dd0:	460d      	mov	r5, r1
   23dd2:	f000 f8fd 	bl	23fd0 <ocrypto_mod_p256_to_bytes>
   23dd6:	f105 0120 	add.w	r1, r5, #32
   23dda:	f104 0020 	add.w	r0, r4, #32
   23dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23de2:	f000 b8f5 	b.w	23fd0 <ocrypto_mod_p256_to_bytes>
   23de6:	bf00      	nop

00023de8 <ocrypto_curve_p256_scalarmult>:
   23de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23dec:	4613      	mov	r3, r2
   23dee:	b0b8      	sub	sp, #224	; 0xe0
   23df0:	4a54      	ldr	r2, [pc, #336]	; (23f44 <ocrypto_curve_p256_scalarmult+0x15c>)
   23df2:	4689      	mov	r9, r1
   23df4:	4680      	mov	r8, r0
   23df6:	4619      	mov	r1, r3
   23df8:	a810      	add	r0, sp, #64	; 0x40
   23dfa:	f7dc fd79 	bl	8f0 <ocrypto_bigint_sub256>
   23dfe:	4952      	ldr	r1, [pc, #328]	; (23f48 <ocrypto_curve_p256_scalarmult+0x160>)
   23e00:	4602      	mov	r2, r0
   23e02:	a810      	add	r0, sp, #64	; 0x40
   23e04:	f7dc fd94 	bl	930 <ocrypto_bigint_cadd256>
   23e08:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   23e0a:	494e      	ldr	r1, [pc, #312]	; (23f44 <ocrypto_curve_p256_scalarmult+0x15c>)
   23e0c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   23e10:	4607      	mov	r7, r0
   23e12:	f1c6 0201 	rsb	r2, r6, #1
   23e16:	a810      	add	r0, sp, #64	; 0x40
   23e18:	f7dc fd8a 	bl	930 <ocrypto_bigint_cadd256>
   23e1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   23e1e:	464a      	mov	r2, r9
   23e20:	ea6f 0a03 	mvn.w	sl, r3
   23e24:	a928      	add	r1, sp, #160	; 0xa0
   23e26:	a818      	add	r0, sp, #96	; 0x60
   23e28:	f7ff fe8e 	bl	23b48 <p256_zdblu>
   23e2c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   23e30:	a920      	add	r1, sp, #128	; 0x80
   23e32:	f1ca 0201 	rsb	r2, sl, #1
   23e36:	4608      	mov	r0, r1
   23e38:	f000 f892 	bl	23f60 <ocrypto_mod_p256_cneg>
   23e3c:	f1c7 0701 	rsb	r7, r7, #1
   23e40:	24fe      	movs	r4, #254	; 0xfe
   23e42:	466a      	mov	r2, sp
   23e44:	a918      	add	r1, sp, #96	; 0x60
   23e46:	a828      	add	r0, sp, #160	; 0xa0
   23e48:	f7ff ff40 	bl	23ccc <p256_zaddu>
   23e4c:	1163      	asrs	r3, r4, #5
   23e4e:	aa38      	add	r2, sp, #224	; 0xe0
   23e50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   23e54:	f004 021f 	and.w	r2, r4, #31
   23e58:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   23e5c:	40d3      	lsrs	r3, r2
   23e5e:	4655      	mov	r5, sl
   23e60:	f003 0a01 	and.w	sl, r3, #1
   23e64:	ea8a 0505 	eor.w	r5, sl, r5
   23e68:	462a      	mov	r2, r5
   23e6a:	a928      	add	r1, sp, #160	; 0xa0
   23e6c:	a818      	add	r0, sp, #96	; 0x60
   23e6e:	f7dc fdbb 	bl	9e8 <ocrypto_bigint_cswap256>
   23e72:	462a      	mov	r2, r5
   23e74:	a930      	add	r1, sp, #192	; 0xc0
   23e76:	a820      	add	r0, sp, #128	; 0x80
   23e78:	f7dc fdb6 	bl	9e8 <ocrypto_bigint_cswap256>
   23e7c:	3c01      	subs	r4, #1
   23e7e:	a928      	add	r1, sp, #160	; 0xa0
   23e80:	a818      	add	r0, sp, #96	; 0x60
   23e82:	f7ff febd 	bl	23c00 <p256_zaddc>
   23e86:	1c63      	adds	r3, r4, #1
   23e88:	d1db      	bne.n	23e42 <ocrypto_curve_p256_scalarmult+0x5a>
   23e8a:	f1ca 0201 	rsb	r2, sl, #1
   23e8e:	a920      	add	r1, sp, #128	; 0x80
   23e90:	a808      	add	r0, sp, #32
   23e92:	f000 f865 	bl	23f60 <ocrypto_mod_p256_cneg>
   23e96:	ea86 060a 	eor.w	r6, r6, sl
   23e9a:	466a      	mov	r2, sp
   23e9c:	a918      	add	r1, sp, #96	; 0x60
   23e9e:	a828      	add	r0, sp, #160	; 0xa0
   23ea0:	f7ff ff14 	bl	23ccc <p256_zaddu>
   23ea4:	a928      	add	r1, sp, #160	; 0xa0
   23ea6:	4632      	mov	r2, r6
   23ea8:	a818      	add	r0, sp, #96	; 0x60
   23eaa:	f7dc fd9d 	bl	9e8 <ocrypto_bigint_cswap256>
   23eae:	4632      	mov	r2, r6
   23eb0:	a930      	add	r1, sp, #192	; 0xc0
   23eb2:	a820      	add	r0, sp, #128	; 0x80
   23eb4:	f7dc fd98 	bl	9e8 <ocrypto_bigint_cswap256>
   23eb8:	a908      	add	r1, sp, #32
   23eba:	466a      	mov	r2, sp
   23ebc:	4608      	mov	r0, r1
   23ebe:	f7dd f805 	bl	ecc <ocrypto_mod_p256_mul>
   23ec2:	a908      	add	r1, sp, #32
   23ec4:	4608      	mov	r0, r1
   23ec6:	f000 f89d 	bl	24004 <ocrypto_mod_p256_inv>
   23eca:	a908      	add	r1, sp, #32
   23ecc:	f108 0420 	add.w	r4, r8, #32
   23ed0:	f109 0220 	add.w	r2, r9, #32
   23ed4:	4608      	mov	r0, r1
   23ed6:	f7dc fff9 	bl	ecc <ocrypto_mod_p256_mul>
   23eda:	a920      	add	r1, sp, #128	; 0x80
   23edc:	aa08      	add	r2, sp, #32
   23ede:	4620      	mov	r0, r4
   23ee0:	f7dc fff4 	bl	ecc <ocrypto_mod_p256_mul>
   23ee4:	aa08      	add	r2, sp, #32
   23ee6:	a918      	add	r1, sp, #96	; 0x60
   23ee8:	4668      	mov	r0, sp
   23eea:	f7dc ffef 	bl	ecc <ocrypto_mod_p256_mul>
   23eee:	4669      	mov	r1, sp
   23ef0:	4668      	mov	r0, sp
   23ef2:	f7dd f803 	bl	efc <ocrypto_mod_p256_sqr>
   23ef6:	aa18      	add	r2, sp, #96	; 0x60
   23ef8:	4669      	mov	r1, sp
   23efa:	a808      	add	r0, sp, #32
   23efc:	f7dc ffe6 	bl	ecc <ocrypto_mod_p256_mul>
   23f00:	4621      	mov	r1, r4
   23f02:	4668      	mov	r0, sp
   23f04:	f7dc fffa 	bl	efc <ocrypto_mod_p256_sqr>
   23f08:	aa08      	add	r2, sp, #32
   23f0a:	4669      	mov	r1, sp
   23f0c:	4610      	mov	r0, r2
   23f0e:	f7dc ff55 	bl	dbc <ocrypto_mod_p256_sub>
   23f12:	4a0e      	ldr	r2, [pc, #56]	; (23f4c <ocrypto_curve_p256_scalarmult+0x164>)
   23f14:	a908      	add	r1, sp, #32
   23f16:	4668      	mov	r0, sp
   23f18:	f7dc ff50 	bl	dbc <ocrypto_mod_p256_sub>
   23f1c:	4620      	mov	r0, r4
   23f1e:	2120      	movs	r1, #32
   23f20:	f7dc fef4 	bl	d0c <ocrypto_constant_time_is_zero>
   23f24:	a908      	add	r1, sp, #32
   23f26:	4602      	mov	r2, r0
   23f28:	4244      	negs	r4, r0
   23f2a:	4668      	mov	r0, sp
   23f2c:	f7dc fd5c 	bl	9e8 <ocrypto_bigint_cswap256>
   23f30:	4640      	mov	r0, r8
   23f32:	4a07      	ldr	r2, [pc, #28]	; (23f50 <ocrypto_curve_p256_scalarmult+0x168>)
   23f34:	4669      	mov	r1, sp
   23f36:	f7dc ffc9 	bl	ecc <ocrypto_mod_p256_mul>
   23f3a:	433c      	orrs	r4, r7
   23f3c:	4620      	mov	r0, r4
   23f3e:	b038      	add	sp, #224	; 0xe0
   23f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23f44:	00027b10 	.word	0x00027b10
   23f48:	00027b30 	.word	0x00027b30
   23f4c:	00027b90 	.word	0x00027b90
   23f50:	00027af0 	.word	0x00027af0

00023f54 <ocrypto_curve_p256_scalarmult_base>:
   23f54:	460a      	mov	r2, r1
   23f56:	4901      	ldr	r1, [pc, #4]	; (23f5c <ocrypto_curve_p256_scalarmult_base+0x8>)
   23f58:	f7ff bf46 	b.w	23de8 <ocrypto_curve_p256_scalarmult>
   23f5c:	00027b50 	.word	0x00027b50

00023f60 <ocrypto_mod_p256_cneg>:
   23f60:	b570      	push	{r4, r5, r6, lr}
   23f62:	b088      	sub	sp, #32
   23f64:	4604      	mov	r4, r0
   23f66:	460d      	mov	r5, r1
   23f68:	4616      	mov	r6, r2
   23f6a:	2100      	movs	r1, #0
   23f6c:	2220      	movs	r2, #32
   23f6e:	4668      	mov	r0, sp
   23f70:	f000 ffd4 	bl	24f1c <memset>
   23f74:	2300      	movs	r3, #0
   23f76:	4629      	mov	r1, r5
   23f78:	2220      	movs	r2, #32
   23f7a:	4620      	mov	r0, r4
   23f7c:	9300      	str	r3, [sp, #0]
   23f7e:	f000 ffc2 	bl	24f06 <memcpy>
   23f82:	462a      	mov	r2, r5
   23f84:	4669      	mov	r1, sp
   23f86:	4668      	mov	r0, sp
   23f88:	f7dc ff18 	bl	dbc <ocrypto_mod_p256_sub>
   23f8c:	4632      	mov	r2, r6
   23f8e:	4669      	mov	r1, sp
   23f90:	4620      	mov	r0, r4
   23f92:	f7dc fd29 	bl	9e8 <ocrypto_bigint_cswap256>
   23f96:	b008      	add	sp, #32
   23f98:	bd70      	pop	{r4, r5, r6, pc}
   23f9a:	bf00      	nop

00023f9c <ocrypto_mod_p256_from_bytes>:
   23f9c:	680b      	ldr	r3, [r1, #0]
   23f9e:	ba1b      	rev	r3, r3
   23fa0:	61c3      	str	r3, [r0, #28]
   23fa2:	684b      	ldr	r3, [r1, #4]
   23fa4:	ba1b      	rev	r3, r3
   23fa6:	6183      	str	r3, [r0, #24]
   23fa8:	688b      	ldr	r3, [r1, #8]
   23faa:	ba1b      	rev	r3, r3
   23fac:	6143      	str	r3, [r0, #20]
   23fae:	68cb      	ldr	r3, [r1, #12]
   23fb0:	ba1b      	rev	r3, r3
   23fb2:	6103      	str	r3, [r0, #16]
   23fb4:	690b      	ldr	r3, [r1, #16]
   23fb6:	ba1b      	rev	r3, r3
   23fb8:	60c3      	str	r3, [r0, #12]
   23fba:	694b      	ldr	r3, [r1, #20]
   23fbc:	ba1b      	rev	r3, r3
   23fbe:	6083      	str	r3, [r0, #8]
   23fc0:	698b      	ldr	r3, [r1, #24]
   23fc2:	ba1b      	rev	r3, r3
   23fc4:	6043      	str	r3, [r0, #4]
   23fc6:	69cb      	ldr	r3, [r1, #28]
   23fc8:	ba1b      	rev	r3, r3
   23fca:	6003      	str	r3, [r0, #0]
   23fcc:	4770      	bx	lr
   23fce:	bf00      	nop

00023fd0 <ocrypto_mod_p256_to_bytes>:
   23fd0:	69cb      	ldr	r3, [r1, #28]
   23fd2:	ba1b      	rev	r3, r3
   23fd4:	6003      	str	r3, [r0, #0]
   23fd6:	698b      	ldr	r3, [r1, #24]
   23fd8:	ba1b      	rev	r3, r3
   23fda:	6043      	str	r3, [r0, #4]
   23fdc:	694b      	ldr	r3, [r1, #20]
   23fde:	ba1b      	rev	r3, r3
   23fe0:	6083      	str	r3, [r0, #8]
   23fe2:	690b      	ldr	r3, [r1, #16]
   23fe4:	ba1b      	rev	r3, r3
   23fe6:	60c3      	str	r3, [r0, #12]
   23fe8:	68cb      	ldr	r3, [r1, #12]
   23fea:	ba1b      	rev	r3, r3
   23fec:	6103      	str	r3, [r0, #16]
   23fee:	688b      	ldr	r3, [r1, #8]
   23ff0:	ba1b      	rev	r3, r3
   23ff2:	6143      	str	r3, [r0, #20]
   23ff4:	684b      	ldr	r3, [r1, #4]
   23ff6:	ba1b      	rev	r3, r3
   23ff8:	6183      	str	r3, [r0, #24]
   23ffa:	680b      	ldr	r3, [r1, #0]
   23ffc:	ba1b      	rev	r3, r3
   23ffe:	61c3      	str	r3, [r0, #28]
   24000:	4770      	bx	lr
   24002:	bf00      	nop

00024004 <ocrypto_mod_p256_inv>:
   24004:	b570      	push	{r4, r5, r6, lr}
   24006:	b098      	sub	sp, #96	; 0x60
   24008:	460d      	mov	r5, r1
   2400a:	4606      	mov	r6, r0
   2400c:	a810      	add	r0, sp, #64	; 0x40
   2400e:	f7dc ff75 	bl	efc <ocrypto_mod_p256_sqr>
   24012:	462a      	mov	r2, r5
   24014:	a910      	add	r1, sp, #64	; 0x40
   24016:	4668      	mov	r0, sp
   24018:	f7dc ff58 	bl	ecc <ocrypto_mod_p256_mul>
   2401c:	4669      	mov	r1, sp
   2401e:	a810      	add	r0, sp, #64	; 0x40
   24020:	f7dc ff6c 	bl	efc <ocrypto_mod_p256_sqr>
   24024:	a910      	add	r1, sp, #64	; 0x40
   24026:	4608      	mov	r0, r1
   24028:	f7dc ff68 	bl	efc <ocrypto_mod_p256_sqr>
   2402c:	466a      	mov	r2, sp
   2402e:	a910      	add	r1, sp, #64	; 0x40
   24030:	a808      	add	r0, sp, #32
   24032:	f7dc ff4b 	bl	ecc <ocrypto_mod_p256_mul>
   24036:	a908      	add	r1, sp, #32
   24038:	a810      	add	r0, sp, #64	; 0x40
   2403a:	f7dc ff5f 	bl	efc <ocrypto_mod_p256_sqr>
   2403e:	a910      	add	r1, sp, #64	; 0x40
   24040:	4608      	mov	r0, r1
   24042:	f7dc ff5b 	bl	efc <ocrypto_mod_p256_sqr>
   24046:	a910      	add	r1, sp, #64	; 0x40
   24048:	4608      	mov	r0, r1
   2404a:	f7dc ff57 	bl	efc <ocrypto_mod_p256_sqr>
   2404e:	a910      	add	r1, sp, #64	; 0x40
   24050:	4608      	mov	r0, r1
   24052:	f7dc ff53 	bl	efc <ocrypto_mod_p256_sqr>
   24056:	a910      	add	r1, sp, #64	; 0x40
   24058:	aa08      	add	r2, sp, #32
   2405a:	4608      	mov	r0, r1
   2405c:	f7dc ff36 	bl	ecc <ocrypto_mod_p256_mul>
   24060:	a910      	add	r1, sp, #64	; 0x40
   24062:	4608      	mov	r0, r1
   24064:	f7dc ff4a 	bl	efc <ocrypto_mod_p256_sqr>
   24068:	a910      	add	r1, sp, #64	; 0x40
   2406a:	4608      	mov	r0, r1
   2406c:	f7dc ff46 	bl	efc <ocrypto_mod_p256_sqr>
   24070:	a910      	add	r1, sp, #64	; 0x40
   24072:	466a      	mov	r2, sp
   24074:	a808      	add	r0, sp, #32
   24076:	f7dc ff29 	bl	ecc <ocrypto_mod_p256_mul>
   2407a:	2405      	movs	r4, #5
   2407c:	a908      	add	r1, sp, #32
   2407e:	a810      	add	r0, sp, #64	; 0x40
   24080:	f7dc ff3c 	bl	efc <ocrypto_mod_p256_sqr>
   24084:	a910      	add	r1, sp, #64	; 0x40
   24086:	4608      	mov	r0, r1
   24088:	f7dc ff38 	bl	efc <ocrypto_mod_p256_sqr>
   2408c:	3c01      	subs	r4, #1
   2408e:	a910      	add	r1, sp, #64	; 0x40
   24090:	d1f5      	bne.n	2407e <ocrypto_mod_p256_inv+0x7a>
   24092:	aa08      	add	r2, sp, #32
   24094:	4608      	mov	r0, r1
   24096:	f7dc ff19 	bl	ecc <ocrypto_mod_p256_mul>
   2409a:	2405      	movs	r4, #5
   2409c:	a910      	add	r1, sp, #64	; 0x40
   2409e:	4608      	mov	r0, r1
   240a0:	f7dc ff2c 	bl	efc <ocrypto_mod_p256_sqr>
   240a4:	a910      	add	r1, sp, #64	; 0x40
   240a6:	4608      	mov	r0, r1
   240a8:	f7dc ff28 	bl	efc <ocrypto_mod_p256_sqr>
   240ac:	3c01      	subs	r4, #1
   240ae:	d1f5      	bne.n	2409c <ocrypto_mod_p256_inv+0x98>
   240b0:	a910      	add	r1, sp, #64	; 0x40
   240b2:	aa08      	add	r2, sp, #32
   240b4:	4608      	mov	r0, r1
   240b6:	f7dc ff09 	bl	ecc <ocrypto_mod_p256_mul>
   240ba:	a910      	add	r1, sp, #64	; 0x40
   240bc:	a808      	add	r0, sp, #32
   240be:	f7dc ff1d 	bl	efc <ocrypto_mod_p256_sqr>
   240c2:	a908      	add	r1, sp, #32
   240c4:	4608      	mov	r0, r1
   240c6:	f7dc ff19 	bl	efc <ocrypto_mod_p256_sqr>
   240ca:	a908      	add	r1, sp, #32
   240cc:	466a      	mov	r2, sp
   240ce:	4668      	mov	r0, sp
   240d0:	f7dc fefc 	bl	ecc <ocrypto_mod_p256_mul>
   240d4:	2410      	movs	r4, #16
   240d6:	4669      	mov	r1, sp
   240d8:	a810      	add	r0, sp, #64	; 0x40
   240da:	f7dc ff0f 	bl	efc <ocrypto_mod_p256_sqr>
   240de:	a910      	add	r1, sp, #64	; 0x40
   240e0:	4608      	mov	r0, r1
   240e2:	f7dc ff0b 	bl	efc <ocrypto_mod_p256_sqr>
   240e6:	3c01      	subs	r4, #1
   240e8:	a910      	add	r1, sp, #64	; 0x40
   240ea:	d1f5      	bne.n	240d8 <ocrypto_mod_p256_inv+0xd4>
   240ec:	462a      	mov	r2, r5
   240ee:	4608      	mov	r0, r1
   240f0:	f7dc feec 	bl	ecc <ocrypto_mod_p256_mul>
   240f4:	2440      	movs	r4, #64	; 0x40
   240f6:	a910      	add	r1, sp, #64	; 0x40
   240f8:	4608      	mov	r0, r1
   240fa:	f7dc feff 	bl	efc <ocrypto_mod_p256_sqr>
   240fe:	a910      	add	r1, sp, #64	; 0x40
   24100:	4608      	mov	r0, r1
   24102:	f7dc fefb 	bl	efc <ocrypto_mod_p256_sqr>
   24106:	3c01      	subs	r4, #1
   24108:	d1f5      	bne.n	240f6 <ocrypto_mod_p256_inv+0xf2>
   2410a:	a910      	add	r1, sp, #64	; 0x40
   2410c:	466a      	mov	r2, sp
   2410e:	4608      	mov	r0, r1
   24110:	f7dc fedc 	bl	ecc <ocrypto_mod_p256_mul>
   24114:	2410      	movs	r4, #16
   24116:	a910      	add	r1, sp, #64	; 0x40
   24118:	4608      	mov	r0, r1
   2411a:	f7dc feef 	bl	efc <ocrypto_mod_p256_sqr>
   2411e:	a910      	add	r1, sp, #64	; 0x40
   24120:	4608      	mov	r0, r1
   24122:	f7dc feeb 	bl	efc <ocrypto_mod_p256_sqr>
   24126:	3c01      	subs	r4, #1
   24128:	d1f5      	bne.n	24116 <ocrypto_mod_p256_inv+0x112>
   2412a:	a910      	add	r1, sp, #64	; 0x40
   2412c:	466a      	mov	r2, sp
   2412e:	4608      	mov	r0, r1
   24130:	f7dc fecc 	bl	ecc <ocrypto_mod_p256_mul>
   24134:	2410      	movs	r4, #16
   24136:	a910      	add	r1, sp, #64	; 0x40
   24138:	4608      	mov	r0, r1
   2413a:	f7dc fedf 	bl	efc <ocrypto_mod_p256_sqr>
   2413e:	a910      	add	r1, sp, #64	; 0x40
   24140:	4608      	mov	r0, r1
   24142:	f7dc fedb 	bl	efc <ocrypto_mod_p256_sqr>
   24146:	3c01      	subs	r4, #1
   24148:	d1f5      	bne.n	24136 <ocrypto_mod_p256_inv+0x132>
   2414a:	a910      	add	r1, sp, #64	; 0x40
   2414c:	aa08      	add	r2, sp, #32
   2414e:	4608      	mov	r0, r1
   24150:	f7dc febc 	bl	ecc <ocrypto_mod_p256_mul>
   24154:	462a      	mov	r2, r5
   24156:	a910      	add	r1, sp, #64	; 0x40
   24158:	4630      	mov	r0, r6
   2415a:	f7dc feb7 	bl	ecc <ocrypto_mod_p256_mul>
   2415e:	b018      	add	sp, #96	; 0x60
   24160:	bd70      	pop	{r4, r5, r6, pc}
   24162:	bf00      	nop

00024164 <z_log_msg_static_create.constprop.0>:
   24164:	2300      	movs	r3, #0
   24166:	f7ef bf9f 	b.w	140a8 <z_impl_z_log_msg_static_create>

0002416a <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   2416a:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   2416c:	6883      	ldr	r3, [r0, #8]
   2416e:	68dc      	ldr	r4, [r3, #12]
   24170:	2210      	movs	r2, #16
   24172:	46a4      	mov	ip, r4
   24174:	2332      	movs	r3, #50	; 0x32
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   24176:	f85d 4b04 	ldr.w	r4, [sp], #4
   2417a:	4760      	bx	ip

0002417c <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   2417c:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   2417e:	6883      	ldr	r3, [r0, #8]
   24180:	685c      	ldr	r4, [r3, #4]
   24182:	f04f 33ff 	mov.w	r3, #4294967295
   24186:	46a4      	mov	ip, r4
}
   24188:	f85d 4b04 	ldr.w	r4, [sp], #4
   2418c:	4760      	bx	ip

0002418e <error>:
{
   2418e:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   24190:	2100      	movs	r1, #0
   24192:	200f      	movs	r0, #15
   24194:	f002 fc18 	bl	269c8 <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   24198:	2100      	movs	r1, #0
   2419a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2419e:	f7fe fb9d 	bl	228dc <z_impl_k_sleep>
	while (true) {
   241a2:	e7f9      	b.n	24198 <error+0xa>

000241a4 <cbpprintf_external>:
{
   241a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   241a8:	4606      	mov	r6, r0
   241aa:	460d      	mov	r5, r1
   241ac:	4617      	mov	r7, r2
	if (buf == NULL) {
   241ae:	4698      	mov	r8, r3
   241b0:	b32b      	cbz	r3, 241fe <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   241b2:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   241b6:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   241ba:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   241bc:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   241be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   241c2:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   241c6:	441c      	add	r4, r3
   241c8:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   241ca:	f04f 0a00 	mov.w	sl, #0
   241ce:	45ca      	cmp	sl, r9
   241d0:	d309      	bcc.n	241e6 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   241d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   241d6:	f108 0308 	add.w	r3, r8, #8
   241da:	4639      	mov	r1, r7
   241dc:	4630      	mov	r0, r6
   241de:	46ac      	mov	ip, r5
}
   241e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   241e4:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   241e6:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   241ea:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   241ee:	4620      	mov	r0, r4
   241f0:	f000 fe69 	bl	24ec6 <strlen>
   241f4:	3001      	adds	r0, #1
   241f6:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   241f8:	f10a 0a01 	add.w	sl, sl, #1
   241fc:	e7e7      	b.n	241ce <cbpprintf_external+0x2a>
}
   241fe:	f06f 0015 	mvn.w	r0, #21
   24202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024206 <is_ptr>:
{
   24206:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   24208:	2500      	movs	r5, #0
{
   2420a:	4602      	mov	r2, r0
	bool mod = false;
   2420c:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2420e:	4614      	mov	r4, r2
   24210:	f814 3b01 	ldrb.w	r3, [r4], #1
   24214:	b90b      	cbnz	r3, 2421a <is_ptr+0x14>
					return false;
   24216:	4618      	mov	r0, r3
   24218:	e009      	b.n	2422e <is_ptr+0x28>
		if (mod) {
   2421a:	b198      	cbz	r0, 24244 <is_ptr+0x3e>
			if (cnt == n) {
   2421c:	428d      	cmp	r5, r1
   2421e:	d107      	bne.n	24230 <is_ptr+0x2a>
				if (c == 'p') {
   24220:	2b70      	cmp	r3, #112	; 0x70
   24222:	d004      	beq.n	2422e <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   24224:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   24228:	2a3a      	cmp	r2, #58	; 0x3a
   2422a:	d80b      	bhi.n	24244 <is_ptr+0x3e>
					return false;
   2422c:	2000      	movs	r0, #0
}
   2422e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   24230:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   24234:	2e3a      	cmp	r6, #58	; 0x3a
   24236:	d805      	bhi.n	24244 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   24238:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2423a:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2423c:	1c94      	adds	r4, r2, #2
   2423e:	2b00      	cmp	r3, #0
   24240:	d0e9      	beq.n	24216 <is_ptr+0x10>
   24242:	2000      	movs	r0, #0
		if (c == '%') {
   24244:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   24246:	bf08      	it	eq
   24248:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   2424c:	4622      	mov	r2, r4
   2424e:	e7de      	b.n	2420e <is_ptr+0x8>

00024250 <arch_printk_char_out>:
}
   24250:	2000      	movs	r0, #0
   24252:	4770      	bx	lr

00024254 <str_out>:
{
   24254:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24256:	688a      	ldr	r2, [r1, #8]
   24258:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2425a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2425c:	b114      	cbz	r4, 24264 <str_out+0x10>
   2425e:	684b      	ldr	r3, [r1, #4]
   24260:	4293      	cmp	r3, r2
   24262:	dc01      	bgt.n	24268 <str_out+0x14>
		ctx->count++;
   24264:	608d      	str	r5, [r1, #8]
}
   24266:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24268:	3b01      	subs	r3, #1
   2426a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2426c:	bf08      	it	eq
   2426e:	2200      	moveq	r2, #0
   24270:	608d      	str	r5, [r1, #8]
   24272:	bf0c      	ite	eq
   24274:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24276:	54a0      	strbne	r0, [r4, r2]
   24278:	e7f5      	b.n	24266 <str_out+0x12>

0002427a <vprintk>:
		z_log_vprintk(fmt, ap);
   2427a:	f000 bb6d 	b.w	24958 <z_log_vprintk>

0002427e <printk>:
{
   2427e:	b40f      	push	{r0, r1, r2, r3}
   24280:	b507      	push	{r0, r1, r2, lr}
   24282:	a904      	add	r1, sp, #16
   24284:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24288:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2428a:	f000 fb65 	bl	24958 <z_log_vprintk>
}
   2428e:	b003      	add	sp, #12
   24290:	f85d eb04 	ldr.w	lr, [sp], #4
   24294:	b004      	add	sp, #16
   24296:	4770      	bx	lr

00024298 <snprintk>:
{
   24298:	b40c      	push	{r2, r3}
   2429a:	b507      	push	{r0, r1, r2, lr}
   2429c:	ab04      	add	r3, sp, #16
   2429e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   242a2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   242a4:	f7ee fd16 	bl	12cd4 <vsnprintk>
}
   242a8:	b003      	add	sp, #12
   242aa:	f85d eb04 	ldr.w	lr, [sp], #4
   242ae:	b002      	add	sp, #8
   242b0:	4770      	bx	lr

000242b2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   242b2:	4604      	mov	r4, r0
   242b4:	b508      	push	{r3, lr}
   242b6:	4608      	mov	r0, r1
   242b8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   242ba:	461a      	mov	r2, r3
   242bc:	47a0      	blx	r4
	return z_impl_z_current_get();
   242be:	f7fe fb41 	bl	22944 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   242c2:	f7f1 fb93 	bl	159ec <z_impl_k_thread_abort>

000242c6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   242c6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   242ca:	8840      	ldrh	r0, [r0, #2]
}
   242cc:	0840      	lsrs	r0, r0, #1
   242ce:	4770      	bx	lr

000242d0 <free_list_add>:
{
   242d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242d2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   242d4:	f7ff fff7 	bl	242c6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   242d8:	fab0 f080 	clz	r0, r0
   242dc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   242e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   242e4:	00ca      	lsls	r2, r1, #3
   242e6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   242ea:	1d17      	adds	r7, r2, #4
{
   242ec:	460c      	mov	r4, r1
   242ee:	3206      	adds	r2, #6
   242f0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   242f2:	b956      	cbnz	r6, 2430a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   242f4:	2101      	movs	r1, #1
   242f6:	fa01 f000 	lsl.w	r0, r1, r0
   242fa:	68d9      	ldr	r1, [r3, #12]
   242fc:	4301      	orrs	r1, r0
   242fe:	60d9      	str	r1, [r3, #12]
		b->next = c;
   24300:	f8cc 4010 	str.w	r4, [ip, #16]
   24304:	53dd      	strh	r5, [r3, r7]
   24306:	529d      	strh	r5, [r3, r2]
}
   24308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2430a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2430c:	3104      	adds	r1, #4
   2430e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   24310:	53d8      	strh	r0, [r3, r7]
   24312:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   24316:	529e      	strh	r6, [r3, r2]
   24318:	80c5      	strh	r5, [r0, #6]
   2431a:	525d      	strh	r5, [r3, r1]
   2431c:	e7f4      	b.n	24308 <free_list_add+0x38>

0002431e <free_list_remove_bidx>:
{
   2431e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   24320:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   24324:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   24326:	4299      	cmp	r1, r3
   24328:	f102 0104 	add.w	r1, r2, #4
   2432c:	d10a      	bne.n	24344 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2432e:	2301      	movs	r3, #1
   24330:	fa03 f202 	lsl.w	r2, r3, r2
   24334:	68c3      	ldr	r3, [r0, #12]
   24336:	ea23 0302 	bic.w	r3, r3, r2
   2433a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2433c:	2300      	movs	r3, #0
   2433e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   24342:	bd10      	pop	{r4, pc}
   24344:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   24346:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2434a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2434e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   24352:	80cb      	strh	r3, [r1, #6]
   24354:	8082      	strh	r2, [r0, #4]
}
   24356:	e7f4      	b.n	24342 <free_list_remove_bidx+0x24>

00024358 <free_list_remove>:
{
   24358:	b508      	push	{r3, lr}
   2435a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2435c:	f7ff ffb3 	bl	242c6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   24360:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24364:	f1c2 021f 	rsb	r2, r2, #31
   24368:	4618      	mov	r0, r3
}
   2436a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2436e:	f7ff bfd6 	b.w	2431e <free_list_remove_bidx>

00024372 <alloc_chunk>:
{
   24372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24376:	fab1 f581 	clz	r5, r1
   2437a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2437e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   24382:	4603      	mov	r3, r0
	if (b->next) {
   24384:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   24388:	460e      	mov	r6, r1
	if (b->next) {
   2438a:	b1c2      	cbz	r2, 243be <alloc_chunk+0x4c>
   2438c:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2438e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   24392:	4618      	mov	r0, r3
   24394:	4621      	mov	r1, r4
   24396:	f7ff ff96 	bl	242c6 <chunk_size>
   2439a:	42b0      	cmp	r0, r6
   2439c:	d306      	bcc.n	243ac <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2439e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   243a0:	4618      	mov	r0, r3
   243a2:	f7ff ffbc 	bl	2431e <free_list_remove_bidx>
}
   243a6:	4620      	mov	r0, r4
   243a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   243ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   243b0:	3f01      	subs	r7, #1
   243b2:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   243b4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   243b8:	d001      	beq.n	243be <alloc_chunk+0x4c>
   243ba:	4282      	cmp	r2, r0
   243bc:	d1e7      	bne.n	2438e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   243be:	f1c5 0220 	rsb	r2, r5, #32
   243c2:	f04f 34ff 	mov.w	r4, #4294967295
   243c6:	4094      	lsls	r4, r2
   243c8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   243ca:	4014      	ands	r4, r2
   243cc:	d0eb      	beq.n	243a6 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   243ce:	fa94 f2a4 	rbit	r2, r4
   243d2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   243d6:	1d11      	adds	r1, r2, #4
   243d8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   243dc:	4621      	mov	r1, r4
   243de:	e7df      	b.n	243a0 <alloc_chunk+0x2e>

000243e0 <merge_chunks>:
{
   243e0:	b538      	push	{r3, r4, r5, lr}
   243e2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   243e4:	f7ff ff6f 	bl	242c6 <chunk_size>
{
   243e8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   243ea:	4604      	mov	r4, r0
   243ec:	4611      	mov	r1, r2
   243ee:	4618      	mov	r0, r3
   243f0:	f7ff ff69 	bl	242c6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   243f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   243f8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   243fa:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   243fc:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   243fe:	4618      	mov	r0, r3
   24400:	f7ff ff61 	bl	242c6 <chunk_size>
	void *cmem = &buf[c];
   24404:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   24406:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2440a:	bd38      	pop	{r3, r4, r5, pc}

0002440c <split_chunks>:
{
   2440c:	b538      	push	{r3, r4, r5, lr}
   2440e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   24410:	f7ff ff59 	bl	242c6 <chunk_size>
{
   24414:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   24416:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   24418:	1a51      	subs	r1, r2, r1
   2441a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2441e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24420:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   24422:	8060      	strh	r0, [r4, #2]
   24424:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   24428:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2442a:	8044      	strh	r4, [r0, #2]
   2442c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   24430:	4618      	mov	r0, r3
   24432:	4611      	mov	r1, r2
   24434:	f7ff ff47 	bl	242c6 <chunk_size>
	void *cmem = &buf[c];
   24438:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2443a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2443e:	bd38      	pop	{r3, r4, r5, pc}

00024440 <free_chunk>:
{
   24440:	b538      	push	{r3, r4, r5, lr}
   24442:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   24444:	f7ff ff3f 	bl	242c6 <chunk_size>
   24448:	460c      	mov	r4, r1
   2444a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2444c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24450:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   24452:	07da      	lsls	r2, r3, #31
   24454:	d40a      	bmi.n	2446c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   24456:	4628      	mov	r0, r5
   24458:	f7ff ff7e 	bl	24358 <free_list_remove>
	return c + chunk_size(h, c);
   2445c:	4621      	mov	r1, r4
   2445e:	4628      	mov	r0, r5
   24460:	f7ff ff31 	bl	242c6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24464:	1822      	adds	r2, r4, r0
   24466:	4628      	mov	r0, r5
   24468:	f7ff ffba 	bl	243e0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2446c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24470:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   24472:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   24476:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   24478:	07db      	lsls	r3, r3, #31
   2447a:	d40c      	bmi.n	24496 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2447c:	4628      	mov	r0, r5
   2447e:	f7ff ff6b 	bl	24358 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   24482:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   24486:	4622      	mov	r2, r4
   24488:	1a61      	subs	r1, r4, r1
   2448a:	4628      	mov	r0, r5
   2448c:	f7ff ffa8 	bl	243e0 <merge_chunks>
   24490:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   24494:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   24496:	4621      	mov	r1, r4
   24498:	4628      	mov	r0, r5
}
   2449a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2449e:	f7ff bf17 	b.w	242d0 <free_list_add>

000244a2 <sys_heap_alloc>:
{
   244a2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   244a4:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   244a6:	b909      	cbnz	r1, 244ac <sys_heap_alloc+0xa>
		return NULL;
   244a8:	2000      	movs	r0, #0
}
   244aa:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   244ac:	68ab      	ldr	r3, [r5, #8]
   244ae:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   244b2:	d9f9      	bls.n	244a8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   244b4:	310b      	adds	r1, #11
   244b6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   244b8:	4621      	mov	r1, r4
   244ba:	4628      	mov	r0, r5
   244bc:	f7ff ff59 	bl	24372 <alloc_chunk>
	if (c == 0U) {
   244c0:	4606      	mov	r6, r0
   244c2:	2800      	cmp	r0, #0
   244c4:	d0f0      	beq.n	244a8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   244c6:	4601      	mov	r1, r0
   244c8:	4628      	mov	r0, r5
   244ca:	f7ff fefc 	bl	242c6 <chunk_size>
   244ce:	42a0      	cmp	r0, r4
   244d0:	d907      	bls.n	244e2 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   244d2:	1932      	adds	r2, r6, r4
   244d4:	4628      	mov	r0, r5
   244d6:	f7ff ff99 	bl	2440c <split_chunks>
		free_list_add(h, c + chunk_sz);
   244da:	4611      	mov	r1, r2
   244dc:	4628      	mov	r0, r5
   244de:	f7ff fef7 	bl	242d0 <free_list_add>
	void *cmem = &buf[c];
   244e2:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   244e6:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   244e8:	8853      	ldrh	r3, [r2, #2]
   244ea:	f043 0301 	orr.w	r3, r3, #1
   244ee:	8053      	strh	r3, [r2, #2]
   244f0:	3004      	adds	r0, #4
	return mem;
   244f2:	e7da      	b.n	244aa <sys_heap_alloc+0x8>

000244f4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   244f4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   244f6:	f013 0307 	ands.w	r3, r3, #7
   244fa:	d105      	bne.n	24508 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   244fc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   244fe:	2b00      	cmp	r3, #0
   24500:	bf0c      	ite	eq
   24502:	2000      	moveq	r0, #0
   24504:	2003      	movne	r0, #3
   24506:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24508:	2b02      	cmp	r3, #2
   2450a:	d105      	bne.n	24518 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2450c:	8bc0      	ldrh	r0, [r0, #30]
   2450e:	fab0 f080 	clz	r0, r0
   24512:	0940      	lsrs	r0, r0, #5
   24514:	0080      	lsls	r0, r0, #2
   24516:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24518:	2b01      	cmp	r3, #1
   2451a:	d105      	bne.n	24528 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2451c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2451e:	2b00      	cmp	r3, #0
   24520:	bf0c      	ite	eq
   24522:	2000      	moveq	r0, #0
   24524:	2005      	movne	r0, #5
   24526:	4770      	bx	lr
	int evt = EVT_NOP;
   24528:	2000      	movs	r0, #0
}
   2452a:	4770      	bx	lr

0002452c <validate_args>:
{
   2452c:	b510      	push	{r4, lr}
   2452e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24530:	b100      	cbz	r0, 24534 <validate_args+0x8>
   24532:	b911      	cbnz	r1, 2453a <validate_args+0xe>
		return -EINVAL;
   24534:	f06f 0015 	mvn.w	r0, #21
}
   24538:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2453a:	1d08      	adds	r0, r1, #4
   2453c:	f000 f82f 	bl	2459e <sys_notify_validate>
	if ((rv == 0)
   24540:	2800      	cmp	r0, #0
   24542:	d1f9      	bne.n	24538 <validate_args+0xc>
	    && ((cli->notify.flags
   24544:	68a3      	ldr	r3, [r4, #8]
   24546:	2b03      	cmp	r3, #3
   24548:	d9f6      	bls.n	24538 <validate_args+0xc>
   2454a:	e7f3      	b.n	24534 <validate_args+0x8>

0002454c <notify_one>:
{
   2454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24550:	460d      	mov	r5, r1
   24552:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24554:	4619      	mov	r1, r3
   24556:	1d28      	adds	r0, r5, #4
{
   24558:	4690      	mov	r8, r2
   2455a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2455c:	f7ee ffc2 	bl	134e4 <sys_notify_finalize>
	if (cb) {
   24560:	4604      	mov	r4, r0
   24562:	b138      	cbz	r0, 24574 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24564:	4633      	mov	r3, r6
   24566:	4642      	mov	r2, r8
   24568:	4629      	mov	r1, r5
   2456a:	4638      	mov	r0, r7
   2456c:	46a4      	mov	ip, r4
}
   2456e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24572:	4760      	bx	ip
}
   24574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024578 <onoff_manager_init>:
{
   24578:	b538      	push	{r3, r4, r5, lr}
   2457a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2457c:	4605      	mov	r5, r0
   2457e:	b158      	cbz	r0, 24598 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   24580:	b151      	cbz	r1, 24598 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24582:	680b      	ldr	r3, [r1, #0]
   24584:	b143      	cbz	r3, 24598 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24586:	684b      	ldr	r3, [r1, #4]
   24588:	b133      	cbz	r3, 24598 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2458a:	2220      	movs	r2, #32
   2458c:	2100      	movs	r1, #0
   2458e:	f000 fcc5 	bl	24f1c <memset>
   24592:	612c      	str	r4, [r5, #16]
	return 0;
   24594:	2000      	movs	r0, #0
}
   24596:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24598:	f06f 0015 	mvn.w	r0, #21
   2459c:	e7fb      	b.n	24596 <onoff_manager_init+0x1e>

0002459e <sys_notify_validate>:
	if (notify == NULL) {
   2459e:	4603      	mov	r3, r0
   245a0:	b140      	cbz	r0, 245b4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   245a2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   245a4:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   245a8:	2a02      	cmp	r2, #2
   245aa:	d006      	beq.n	245ba <sys_notify_validate+0x1c>
   245ac:	2a03      	cmp	r2, #3
   245ae:	d004      	beq.n	245ba <sys_notify_validate+0x1c>
   245b0:	2a01      	cmp	r2, #1
   245b2:	d005      	beq.n	245c0 <sys_notify_validate+0x22>
   245b4:	f06f 0015 	mvn.w	r0, #21
}
   245b8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   245ba:	681a      	ldr	r2, [r3, #0]
   245bc:	2a00      	cmp	r2, #0
   245be:	d0f9      	beq.n	245b4 <sys_notify_validate+0x16>
		notify->result = 0;
   245c0:	2000      	movs	r0, #0
   245c2:	6098      	str	r0, [r3, #8]
   245c4:	4770      	bx	lr

000245c6 <_ldiv5>:
	uint32_t v_lo = *v;
   245c6:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   245ca:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   245cc:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   245d0:	fba2 2403 	umull	r2, r4, r2, r3
   245d4:	18d5      	adds	r5, r2, r3
   245d6:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   245da:	fba1 1303 	umull	r1, r3, r1, r3
   245de:	1852      	adds	r2, r2, r1
   245e0:	eb44 0403 	adc.w	r4, r4, r3
   245e4:	1952      	adds	r2, r2, r5
   245e6:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   245ea:	1889      	adds	r1, r1, r2
   245ec:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   245f0:	e9c0 1300 	strd	r1, r3, [r0]
}
   245f4:	bd30      	pop	{r4, r5, pc}

000245f6 <_get_digit>:
{
   245f6:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   245f8:	680a      	ldr	r2, [r1, #0]
   245fa:	2a00      	cmp	r2, #0
{
   245fc:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   245fe:	dd0f      	ble.n	24620 <_get_digit+0x2a>
		--*digit_count;
   24600:	3a01      	subs	r2, #1
   24602:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   24604:	681a      	ldr	r2, [r3, #0]
   24606:	6844      	ldr	r4, [r0, #4]
   24608:	200a      	movs	r0, #10
   2460a:	fba2 1200 	umull	r1, r2, r2, r0
   2460e:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   24612:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   24614:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   24618:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   2461c:	3030      	adds	r0, #48	; 0x30
}
   2461e:	bd10      	pop	{r4, pc}
		rval = '0';
   24620:	2030      	movs	r0, #48	; 0x30
   24622:	e7fc      	b.n	2461e <_get_digit+0x28>

00024624 <encode_uint>:
{
   24624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24628:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   2462a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2462c:	2b6f      	cmp	r3, #111	; 0x6f
{
   2462e:	4680      	mov	r8, r0
   24630:	460f      	mov	r7, r1
   24632:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   24634:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   24638:	d029      	beq.n	2468e <encode_uint+0x6a>
   2463a:	d824      	bhi.n	24686 <encode_uint+0x62>
		return 10;
   2463c:	2b58      	cmp	r3, #88	; 0x58
   2463e:	bf0c      	ite	eq
   24640:	2610      	moveq	r6, #16
   24642:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   24644:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   24648:	4632      	mov	r2, r6
   2464a:	2300      	movs	r3, #0
   2464c:	4640      	mov	r0, r8
   2464e:	4639      	mov	r1, r7
   24650:	f7dc f914 	bl	87c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24654:	2a09      	cmp	r2, #9
   24656:	b2d4      	uxtb	r4, r2
   24658:	d81e      	bhi.n	24698 <encode_uint+0x74>
   2465a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2465c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2465e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   24660:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24664:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   24668:	d301      	bcc.n	2466e <encode_uint+0x4a>
   2466a:	45d1      	cmp	r9, sl
   2466c:	d811      	bhi.n	24692 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2466e:	782b      	ldrb	r3, [r5, #0]
   24670:	069b      	lsls	r3, r3, #26
   24672:	d505      	bpl.n	24680 <encode_uint+0x5c>
		if (radix == 8) {
   24674:	2e08      	cmp	r6, #8
   24676:	d115      	bne.n	246a4 <encode_uint+0x80>
			conv->altform_0 = true;
   24678:	78ab      	ldrb	r3, [r5, #2]
   2467a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2467e:	70ab      	strb	r3, [r5, #2]
}
   24680:	4648      	mov	r0, r9
   24682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   24686:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2468a:	2b70      	cmp	r3, #112	; 0x70
   2468c:	e7d7      	b.n	2463e <encode_uint+0x1a>
	switch (specifier) {
   2468e:	2608      	movs	r6, #8
   24690:	e7d8      	b.n	24644 <encode_uint+0x20>
		value /= radix;
   24692:	4680      	mov	r8, r0
   24694:	460f      	mov	r7, r1
   24696:	e7d7      	b.n	24648 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24698:	f1bb 0f19 	cmp.w	fp, #25
   2469c:	bf94      	ite	ls
   2469e:	3437      	addls	r4, #55	; 0x37
   246a0:	3457      	addhi	r4, #87	; 0x57
   246a2:	e7db      	b.n	2465c <encode_uint+0x38>
		} else if (radix == 16) {
   246a4:	2e10      	cmp	r6, #16
   246a6:	d1eb      	bne.n	24680 <encode_uint+0x5c>
			conv->altform_0c = true;
   246a8:	78ab      	ldrb	r3, [r5, #2]
   246aa:	f043 0310 	orr.w	r3, r3, #16
   246ae:	e7e6      	b.n	2467e <encode_uint+0x5a>

000246b0 <outs>:
{
   246b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246b4:	4607      	mov	r7, r0
   246b6:	4688      	mov	r8, r1
   246b8:	4615      	mov	r5, r2
   246ba:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   246bc:	4614      	mov	r4, r2
   246be:	42b4      	cmp	r4, r6
   246c0:	d305      	bcc.n	246ce <outs+0x1e>
   246c2:	b10e      	cbz	r6, 246c8 <outs+0x18>
	return (int)count;
   246c4:	1b60      	subs	r0, r4, r5
   246c6:	e008      	b.n	246da <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   246c8:	7823      	ldrb	r3, [r4, #0]
   246ca:	2b00      	cmp	r3, #0
   246cc:	d0fa      	beq.n	246c4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   246ce:	f814 0b01 	ldrb.w	r0, [r4], #1
   246d2:	4641      	mov	r1, r8
   246d4:	47b8      	blx	r7
		if (rc < 0) {
   246d6:	2800      	cmp	r0, #0
   246d8:	daf1      	bge.n	246be <outs+0xe>
}
   246da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000246de <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   246de:	4040      	eors	r0, r0
   246e0:	f380 8811 	msr	BASEPRI, r0
   246e4:	f04f 0004 	mov.w	r0, #4
   246e8:	df02      	svc	2
}
   246ea:	4770      	bx	lr

000246ec <assert_print>:

void assert_print(const char *fmt, ...)
{
   246ec:	b40f      	push	{r0, r1, r2, r3}
   246ee:	b507      	push	{r0, r1, r2, lr}
   246f0:	a904      	add	r1, sp, #16
   246f2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   246f6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   246f8:	f7ff fdbf 	bl	2427a <vprintk>

	va_end(ap);
}
   246fc:	b003      	add	sp, #12
   246fe:	f85d eb04 	ldr.w	lr, [sp], #4
   24702:	b004      	add	sp, #16
   24704:	4770      	bx	lr

00024706 <free_space>:
{
   24706:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   24708:	6903      	ldr	r3, [r0, #16]
{
   2470a:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2470c:	f013 0008 	ands.w	r0, r3, #8
   24710:	d109      	bne.n	24726 <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   24712:	6813      	ldr	r3, [r2, #0]
   24714:	68d4      	ldr	r4, [r2, #12]
   24716:	429c      	cmp	r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   24718:	bf97      	itett	ls
   2471a:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2471c:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2471e:	1ad3      	subls	r3, r2, r3
	return true;
   24720:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   24722:	600b      	str	r3, [r1, #0]
}
   24724:	bd10      	pop	{r4, pc}
   24726:	2300      	movs	r3, #0
		return false;
   24728:	4618      	mov	r0, r3
   2472a:	e7fa      	b.n	24722 <free_space+0x1c>

0002472c <get_usage>:
{
   2472c:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2472e:	a901      	add	r1, sp, #4
{
   24730:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   24732:	f7ff ffe8 	bl	24706 <free_space>
   24736:	b120      	cbz	r0, 24742 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   24738:	9b01      	ldr	r3, [sp, #4]
   2473a:	68e2      	ldr	r2, [r4, #12]
   2473c:	3b01      	subs	r3, #1
   2473e:	4413      	add	r3, r2
   24740:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   24742:	6a60      	ldr	r0, [r4, #36]	; 0x24
   24744:	9b01      	ldr	r3, [sp, #4]
   24746:	1ac0      	subs	r0, r0, r3
}
   24748:	3801      	subs	r0, #1
   2474a:	b002      	add	sp, #8
   2474c:	bd10      	pop	{r4, pc}

0002474e <idx_inc>:
{
   2474e:	b510      	push	{r4, lr}
   24750:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   24752:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   24754:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   24756:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   24758:	07d2      	lsls	r2, r2, #31
   2475a:	d502      	bpl.n	24762 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2475c:	3b01      	subs	r3, #1
   2475e:	4018      	ands	r0, r3
}
   24760:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   24762:	4298      	cmp	r0, r3
   24764:	bf28      	it	cs
   24766:	1ac0      	subcs	r0, r0, r3
   24768:	e7fa      	b.n	24760 <idx_inc+0x12>

0002476a <rd_idx_inc>:
{
   2476a:	b510      	push	{r4, lr}
   2476c:	4604      	mov	r4, r0
   2476e:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   24770:	68c1      	ldr	r1, [r0, #12]
   24772:	f7ff ffec 	bl	2474e <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   24776:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   24778:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2477a:	f023 0308 	bic.w	r3, r3, #8
   2477e:	6123      	str	r3, [r4, #16]
}
   24780:	bd10      	pop	{r4, pc}

00024782 <add_skip_item>:
{
   24782:	b538      	push	{r3, r4, r5, lr}
   24784:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   24786:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   24788:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2478a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2478c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   24790:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   24794:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   24796:	6801      	ldr	r1, [r0, #0]
   24798:	462a      	mov	r2, r5
   2479a:	f7ff ffd8 	bl	2474e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2479e:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   247a0:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   247a2:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   247a4:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   247a6:	bf02      	ittt	eq
   247a8:	6923      	ldreq	r3, [r4, #16]
   247aa:	f043 0308 	orreq.w	r3, r3, #8
   247ae:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   247b0:	462a      	mov	r2, r5
   247b2:	4620      	mov	r0, r4
   247b4:	f7ff ffcb 	bl	2474e <idx_inc>
   247b8:	6060      	str	r0, [r4, #4]
}
   247ba:	bd38      	pop	{r3, r4, r5, pc}

000247bc <drop_item_locked>:
{
   247bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   247c0:	68c7      	ldr	r7, [r0, #12]
   247c2:	6a06      	ldr	r6, [r0, #32]
{
   247c4:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   247c6:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   247ca:	f003 0303 	and.w	r3, r3, #3
   247ce:	2b02      	cmp	r3, #2
{
   247d0:	4604      	mov	r4, r0
   247d2:	4688      	mov	r8, r1
   247d4:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   247d6:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   247da:	f04f 0300 	mov.w	r3, #0
   247de:	d009      	beq.n	247f4 <drop_item_locked+0x38>
	*item_to_drop = NULL;
   247e0:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   247e2:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   247e6:	6923      	ldr	r3, [r4, #16]
   247e8:	0799      	lsls	r1, r3, #30
   247ea:	d410      	bmi.n	2480e <drop_item_locked+0x52>
		return false;
   247ec:	2000      	movs	r0, #0
}
   247ee:	b003      	add	sp, #12
   247f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   247f4:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   247f8:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   247fa:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   247fc:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   24800:	d0f1      	beq.n	247e6 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   24802:	f7ff ffb2 	bl	2476a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   24806:	68e3      	ldr	r3, [r4, #12]
   24808:	60a3      	str	r3, [r4, #8]
		return true;
   2480a:	2001      	movs	r0, #1
   2480c:	e7ef      	b.n	247ee <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2480e:	69e3      	ldr	r3, [r4, #28]
   24810:	4650      	mov	r0, sl
   24812:	4798      	blx	r3
	return item->hdr.valid;
   24814:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   24818:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   2481a:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2481c:	d5e6      	bpl.n	247ec <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2481e:	f013 0302 	ands.w	r3, r3, #2
   24822:	d01d      	beq.n	24860 <drop_item_locked+0xa4>
		if (free_wlen) {
   24824:	f1b8 0f00 	cmp.w	r8, #0
   24828:	d003      	beq.n	24832 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2482a:	4641      	mov	r1, r8
   2482c:	4620      	mov	r0, r4
   2482e:	f7ff ffa8 	bl	24782 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   24832:	6861      	ldr	r1, [r4, #4]
   24834:	462a      	mov	r2, r5
   24836:	4620      	mov	r0, r4
   24838:	f7ff ff89 	bl	2474e <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2483c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   24840:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   24842:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   24844:	d104      	bne.n	24850 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   24846:	462a      	mov	r2, r5
   24848:	4620      	mov	r0, r4
   2484a:	f7ff ff80 	bl	2474e <idx_inc>
   2484e:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   24850:	68a3      	ldr	r3, [r4, #8]
   24852:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   24854:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   24856:	6923      	ldr	r3, [r4, #16]
   24858:	f043 0308 	orr.w	r3, r3, #8
   2485c:	6123      	str	r3, [r4, #16]
   2485e:	e7d4      	b.n	2480a <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   24860:	4601      	mov	r1, r0
   24862:	4620      	mov	r0, r4
   24864:	9301      	str	r3, [sp, #4]
   24866:	f7ff ff80 	bl	2476a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2486a:	68e2      	ldr	r2, [r4, #12]
   2486c:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2486e:	f1b8 0f00 	cmp.w	r8, #0
   24872:	d004      	beq.n	2487e <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   24874:	6821      	ldr	r1, [r4, #0]
   24876:	6a22      	ldr	r2, [r4, #32]
   24878:	9b01      	ldr	r3, [sp, #4]
   2487a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2487e:	eb05 0208 	add.w	r2, r5, r8
   24882:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   24886:	6821      	ldr	r1, [r4, #0]
   24888:	4620      	mov	r0, r4
   2488a:	f7ff ff60 	bl	2474e <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2488e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   24890:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   24892:	f043 0308 	orr.w	r3, r3, #8
   24896:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   24898:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2489c:	f36f 0300 	bfc	r3, #0, #1
   248a0:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   248a4:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   248a8:	e7af      	b.n	2480a <drop_item_locked+0x4e>

000248aa <post_drop_action>:
{
   248aa:	b570      	push	{r4, r5, r6, lr}
   248ac:	4604      	mov	r4, r0
   248ae:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   248b0:	f7ff ff4d 	bl	2474e <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   248b4:	6823      	ldr	r3, [r4, #0]
   248b6:	4283      	cmp	r3, r0
   248b8:	d105      	bne.n	248c6 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   248ba:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   248bc:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   248be:	f023 0308 	bic.w	r3, r3, #8
   248c2:	6123      	str	r3, [r4, #16]
}
   248c4:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   248c6:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   248c8:	00ab      	lsls	r3, r5, #2
   248ca:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   248ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   248d2:	4620      	mov	r0, r4
   248d4:	6861      	ldr	r1, [r4, #4]
   248d6:	462a      	mov	r2, r5
   248d8:	f7ff ff39 	bl	2474e <idx_inc>
   248dc:	6060      	str	r0, [r4, #4]
   248de:	e7f1      	b.n	248c4 <post_drop_action+0x1a>

000248e0 <max_utilization_update>:
{
   248e0:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   248e2:	6903      	ldr	r3, [r0, #16]
   248e4:	075b      	lsls	r3, r3, #29
{
   248e6:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   248e8:	d506      	bpl.n	248f8 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   248ea:	6a85      	ldr	r5, [r0, #40]	; 0x28
   248ec:	f7ff ff1e 	bl	2472c <get_usage>
   248f0:	4285      	cmp	r5, r0
   248f2:	bf2c      	ite	cs
   248f4:	62a5      	strcs	r5, [r4, #40]	; 0x28
   248f6:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   248f8:	bd38      	pop	{r3, r4, r5, pc}

000248fa <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   248fa:	6902      	ldr	r2, [r0, #16]
   248fc:	6883      	ldr	r3, [r0, #8]
   248fe:	0712      	lsls	r2, r2, #28
   24900:	d402      	bmi.n	24908 <mpsc_pbuf_is_pending+0xe>
   24902:	6842      	ldr	r2, [r0, #4]
   24904:	429a      	cmp	r2, r3
   24906:	d200      	bcs.n	2490a <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   24908:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   2490a:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2490c:	1e18      	subs	r0, r3, #0
   2490e:	bf18      	it	ne
   24910:	2001      	movne	r0, #1
   24912:	4770      	bx	lr

00024914 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 16);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   24914:	4770      	bx	lr

00024916 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   24916:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   24918:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2491a:	bf5f      	itttt	pl
   2491c:	6803      	ldrpl	r3, [r0, #0]
   2491e:	8842      	ldrhpl	r2, [r0, #2]
   24920:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   24924:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   24928:	bf5d      	ittte	pl
   2492a:	3017      	addpl	r0, #23
   2492c:	f020 0007 	bicpl.w	r0, r0, #7
   24930:	0880      	lsrpl	r0, r0, #2
	return 0;
   24932:	2000      	movmi	r0, #0
}
   24934:	4770      	bx	lr

00024936 <dummy_timestamp>:
}
   24936:	2000      	movs	r0, #0
   24938:	4770      	bx	lr

0002493a <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2493a:	f002 b83e 	b.w	269ba <sys_clock_cycle_get_32>

0002493e <atomic_inc>:
{
   2493e:	4603      	mov	r3, r0
}
   24940:	f3bf 8f5b 	dmb	ish
   24944:	e853 0f00 	ldrex	r0, [r3]
   24948:	1c42      	adds	r2, r0, #1
   2494a:	e843 2100 	strex	r1, r2, [r3]
   2494e:	2900      	cmp	r1, #0
   24950:	d1f8      	bne.n	24944 <atomic_inc+0x6>
   24952:	f3bf 8f5b 	dmb	ish
   24956:	4770      	bx	lr

00024958 <z_log_vprintk>:
{
   24958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2495a:	2300      	movs	r3, #0
   2495c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   24960:	e9cd 3300 	strd	r3, r3, [sp]
   24964:	461a      	mov	r2, r3
   24966:	4619      	mov	r1, r3
   24968:	4618      	mov	r0, r3
   2496a:	f7ef fc31 	bl	141d0 <z_impl_z_log_msg_runtime_vcreate>
}
   2496e:	b005      	add	sp, #20
   24970:	f85d fb04 	ldr.w	pc, [sp], #4

00024974 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   24974:	2001      	movs	r0, #1
   24976:	f7ef b91d 	b.w	13bb4 <z_log_dropped>

0002497a <z_log_get_tag>:
}
   2497a:	2000      	movs	r0, #0
   2497c:	4770      	bx	lr

0002497e <z_cbprintf_cpy>:
{
   2497e:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   24980:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   24984:	1b9b      	subs	r3, r3, r6
   24986:	428b      	cmp	r3, r1
{
   24988:	460c      	mov	r4, r1
   2498a:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2498c:	d30a      	bcc.n	249a4 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2498e:	6813      	ldr	r3, [r2, #0]
   24990:	460a      	mov	r2, r1
   24992:	4601      	mov	r1, r0
   24994:	1998      	adds	r0, r3, r6
   24996:	f000 fab6 	bl	24f06 <memcpy>
	desc->off += len;
   2499a:	68ab      	ldr	r3, [r5, #8]
   2499c:	4423      	add	r3, r4
   2499e:	60ab      	str	r3, [r5, #8]
	return len;
   249a0:	4620      	mov	r0, r4
}
   249a2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   249a4:	f06f 001b 	mvn.w	r0, #27
   249a8:	e7fb      	b.n	249a2 <z_cbprintf_cpy+0x24>

000249aa <z_log_msg_finalize>:
{
   249aa:	b570      	push	{r4, r5, r6, lr}
   249ac:	460e      	mov	r6, r1
   249ae:	4615      	mov	r5, r2
   249b0:	4619      	mov	r1, r3
	if (!msg) {
   249b2:	4604      	mov	r4, r0
   249b4:	b918      	cbnz	r0, 249be <z_log_msg_finalize+0x14>
}
   249b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   249ba:	f7ef b8fb 	b.w	13bb4 <z_log_dropped>
	if (data) {
   249be:	b133      	cbz	r3, 249ce <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   249c0:	f3c2 234a 	ubfx	r3, r2, #9, #11
   249c4:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   249c6:	0d12      	lsrs	r2, r2, #20
   249c8:	4418      	add	r0, r3
   249ca:	f000 fa9c 	bl	24f06 <memcpy>
	msg->hdr.source = source;
   249ce:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   249d2:	4620      	mov	r0, r4
}
   249d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   249d8:	f7ef bb20 	b.w	1401c <z_log_msg_commit>

000249dc <buffer_write>:
{
   249dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249de:	4606      	mov	r6, r0
   249e0:	460d      	mov	r5, r1
   249e2:	4614      	mov	r4, r2
   249e4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   249e6:	4621      	mov	r1, r4
   249e8:	4628      	mov	r0, r5
   249ea:	463a      	mov	r2, r7
   249ec:	47b0      	blx	r6
	} while (len != 0);
   249ee:	1a24      	subs	r4, r4, r0
		buf += processed;
   249f0:	4405      	add	r5, r0
	} while (len != 0);
   249f2:	d1f8      	bne.n	249e6 <buffer_write+0xa>
}
   249f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000249f6 <cbvprintf>:
{
   249f6:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   249f8:	2400      	movs	r4, #0
   249fa:	9400      	str	r4, [sp, #0]
   249fc:	f7ec fabc 	bl	10f78 <z_cbvprintf_impl>
}
   24a00:	b002      	add	sp, #8
   24a02:	bd10      	pop	{r4, pc}

00024a04 <log_output_flush>:
{
   24a04:	b510      	push	{r4, lr}
		     output->control_block->offset,
   24a06:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   24a08:	6881      	ldr	r1, [r0, #8]
{
   24a0a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   24a0c:	e9d2 2300 	ldrd	r2, r3, [r2]
   24a10:	6800      	ldr	r0, [r0, #0]
   24a12:	f7ff ffe3 	bl	249dc <buffer_write>
	output->control_block->offset = 0;
   24a16:	6863      	ldr	r3, [r4, #4]
   24a18:	2200      	movs	r2, #0
   24a1a:	601a      	str	r2, [r3, #0]
}
   24a1c:	bd10      	pop	{r4, pc}

00024a1e <cr_out_func>:
	if (c == '\n') {
   24a1e:	280a      	cmp	r0, #10
{
   24a20:	b538      	push	{r3, r4, r5, lr}
   24a22:	4604      	mov	r4, r0
   24a24:	460d      	mov	r5, r1
	if (c == '\n') {
   24a26:	d102      	bne.n	24a2e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24a28:	200d      	movs	r0, #13
   24a2a:	f7ef fc51 	bl	142d0 <out_func>
	out_func(c, ctx);
   24a2e:	4629      	mov	r1, r5
   24a30:	4620      	mov	r0, r4
   24a32:	f7ef fc4d 	bl	142d0 <out_func>
}
   24a36:	2000      	movs	r0, #0
   24a38:	bd38      	pop	{r3, r4, r5, pc}

00024a3a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   24a3a:	b538      	push	{r3, r4, r5, lr}
   24a3c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   24a3e:	42ab      	cmp	r3, r5
{
   24a40:	4611      	mov	r1, r2
   24a42:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24a44:	d804      	bhi.n	24a50 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   24a46:	461a      	mov	r2, r3
   24a48:	f000 fa5d 	bl	24f06 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   24a4c:	4620      	mov	r0, r4
   24a4e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24a50:	2400      	movs	r4, #0
   24a52:	e7fb      	b.n	24a4c <_copy+0x12>

00024a54 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   24a54:	f000 ba62 	b.w	24f1c <memset>

00024a58 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24a58:	09c3      	lsrs	r3, r0, #7
   24a5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24a5e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24a62:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24a66:	b2c0      	uxtb	r0, r0
   24a68:	4770      	bx	lr

00024a6a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   24a6a:	78cb      	ldrb	r3, [r1, #3]
   24a6c:	7802      	ldrb	r2, [r0, #0]
   24a6e:	4053      	eors	r3, r2
   24a70:	7003      	strb	r3, [r0, #0]
   24a72:	884b      	ldrh	r3, [r1, #2]
   24a74:	7842      	ldrb	r2, [r0, #1]
   24a76:	4053      	eors	r3, r2
   24a78:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   24a7a:	680a      	ldr	r2, [r1, #0]
   24a7c:	7883      	ldrb	r3, [r0, #2]
   24a7e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24a82:	7083      	strb	r3, [r0, #2]
   24a84:	680a      	ldr	r2, [r1, #0]
   24a86:	78c3      	ldrb	r3, [r0, #3]
   24a88:	4053      	eors	r3, r2
   24a8a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   24a8c:	79cb      	ldrb	r3, [r1, #7]
   24a8e:	7902      	ldrb	r2, [r0, #4]
   24a90:	4053      	eors	r3, r2
   24a92:	7103      	strb	r3, [r0, #4]
   24a94:	88cb      	ldrh	r3, [r1, #6]
   24a96:	7942      	ldrb	r2, [r0, #5]
   24a98:	4053      	eors	r3, r2
   24a9a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   24a9c:	684a      	ldr	r2, [r1, #4]
   24a9e:	7983      	ldrb	r3, [r0, #6]
   24aa0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24aa4:	7183      	strb	r3, [r0, #6]
   24aa6:	684a      	ldr	r2, [r1, #4]
   24aa8:	79c3      	ldrb	r3, [r0, #7]
   24aaa:	4053      	eors	r3, r2
   24aac:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   24aae:	7acb      	ldrb	r3, [r1, #11]
   24ab0:	7a02      	ldrb	r2, [r0, #8]
   24ab2:	4053      	eors	r3, r2
   24ab4:	7203      	strb	r3, [r0, #8]
   24ab6:	7a42      	ldrb	r2, [r0, #9]
   24ab8:	894b      	ldrh	r3, [r1, #10]
   24aba:	4053      	eors	r3, r2
   24abc:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   24abe:	688a      	ldr	r2, [r1, #8]
   24ac0:	7a83      	ldrb	r3, [r0, #10]
   24ac2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24ac6:	7283      	strb	r3, [r0, #10]
   24ac8:	688a      	ldr	r2, [r1, #8]
   24aca:	7ac3      	ldrb	r3, [r0, #11]
   24acc:	4053      	eors	r3, r2
   24ace:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   24ad0:	7bcb      	ldrb	r3, [r1, #15]
   24ad2:	7b02      	ldrb	r2, [r0, #12]
   24ad4:	4053      	eors	r3, r2
   24ad6:	7303      	strb	r3, [r0, #12]
   24ad8:	89cb      	ldrh	r3, [r1, #14]
   24ada:	7b42      	ldrb	r2, [r0, #13]
   24adc:	4053      	eors	r3, r2
   24ade:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   24ae0:	68ca      	ldr	r2, [r1, #12]
   24ae2:	7b83      	ldrb	r3, [r0, #14]
   24ae4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24ae8:	7383      	strb	r3, [r0, #14]
   24aea:	68ca      	ldr	r2, [r1, #12]
   24aec:	7bc3      	ldrb	r3, [r0, #15]
   24aee:	4053      	eors	r3, r2
   24af0:	73c3      	strb	r3, [r0, #15]
}
   24af2:	4770      	bx	lr

00024af4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   24af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24af6:	7802      	ldrb	r2, [r0, #0]
   24af8:	f88d 2000 	strb.w	r2, [sp]
   24afc:	7942      	ldrb	r2, [r0, #5]
   24afe:	f88d 2001 	strb.w	r2, [sp, #1]
   24b02:	7a82      	ldrb	r2, [r0, #10]
   24b04:	f88d 2002 	strb.w	r2, [sp, #2]
   24b08:	7bc2      	ldrb	r2, [r0, #15]
   24b0a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24b0e:	7902      	ldrb	r2, [r0, #4]
   24b10:	f88d 2004 	strb.w	r2, [sp, #4]
   24b14:	7a42      	ldrb	r2, [r0, #9]
   24b16:	f88d 2005 	strb.w	r2, [sp, #5]
   24b1a:	7b82      	ldrb	r2, [r0, #14]
   24b1c:	f88d 2006 	strb.w	r2, [sp, #6]
   24b20:	78c2      	ldrb	r2, [r0, #3]
   24b22:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24b26:	7a02      	ldrb	r2, [r0, #8]
   24b28:	f88d 2008 	strb.w	r2, [sp, #8]
   24b2c:	7b42      	ldrb	r2, [r0, #13]
   24b2e:	f88d 2009 	strb.w	r2, [sp, #9]
   24b32:	7882      	ldrb	r2, [r0, #2]
   24b34:	f88d 200a 	strb.w	r2, [sp, #10]
   24b38:	79c2      	ldrb	r2, [r0, #7]
   24b3a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24b3e:	7b02      	ldrb	r2, [r0, #12]
   24b40:	f88d 200c 	strb.w	r2, [sp, #12]
   24b44:	7842      	ldrb	r2, [r0, #1]
   24b46:	7ac3      	ldrb	r3, [r0, #11]
   24b48:	f88d 200d 	strb.w	r2, [sp, #13]
   24b4c:	7982      	ldrb	r2, [r0, #6]
   24b4e:	f88d 200e 	strb.w	r2, [sp, #14]
   24b52:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24b56:	2310      	movs	r3, #16
   24b58:	466a      	mov	r2, sp
   24b5a:	4619      	mov	r1, r3
   24b5c:	f7ff ff6d 	bl	24a3a <_copy>
}
   24b60:	b005      	add	sp, #20
   24b62:	f85d fb04 	ldr.w	pc, [sp], #4

00024b66 <mult_row_column>:
{
   24b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b68:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24b6a:	7808      	ldrb	r0, [r1, #0]
{
   24b6c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24b6e:	f7ff ff73 	bl	24a58 <_double_byte>
   24b72:	4605      	mov	r5, r0
   24b74:	7860      	ldrb	r0, [r4, #1]
   24b76:	f7ff ff6f 	bl	24a58 <_double_byte>
   24b7a:	78a2      	ldrb	r2, [r4, #2]
   24b7c:	7863      	ldrb	r3, [r4, #1]
   24b7e:	4053      	eors	r3, r2
   24b80:	78e2      	ldrb	r2, [r4, #3]
   24b82:	4053      	eors	r3, r2
   24b84:	405d      	eors	r5, r3
   24b86:	4068      	eors	r0, r5
   24b88:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24b8a:	7860      	ldrb	r0, [r4, #1]
   24b8c:	7827      	ldrb	r7, [r4, #0]
   24b8e:	f7ff ff63 	bl	24a58 <_double_byte>
   24b92:	4605      	mov	r5, r0
   24b94:	78a0      	ldrb	r0, [r4, #2]
   24b96:	f7ff ff5f 	bl	24a58 <_double_byte>
   24b9a:	78a3      	ldrb	r3, [r4, #2]
   24b9c:	405f      	eors	r7, r3
   24b9e:	78e3      	ldrb	r3, [r4, #3]
   24ba0:	405f      	eors	r7, r3
   24ba2:	407d      	eors	r5, r7
   24ba4:	4068      	eors	r0, r5
   24ba6:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24ba8:	7863      	ldrb	r3, [r4, #1]
   24baa:	7827      	ldrb	r7, [r4, #0]
   24bac:	78a0      	ldrb	r0, [r4, #2]
   24bae:	405f      	eors	r7, r3
   24bb0:	f7ff ff52 	bl	24a58 <_double_byte>
   24bb4:	4605      	mov	r5, r0
   24bb6:	78e0      	ldrb	r0, [r4, #3]
   24bb8:	f7ff ff4e 	bl	24a58 <_double_byte>
   24bbc:	78e3      	ldrb	r3, [r4, #3]
   24bbe:	405f      	eors	r7, r3
   24bc0:	407d      	eors	r5, r7
   24bc2:	4068      	eors	r0, r5
   24bc4:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   24bc6:	7820      	ldrb	r0, [r4, #0]
   24bc8:	f7ff ff46 	bl	24a58 <_double_byte>
   24bcc:	7862      	ldrb	r2, [r4, #1]
   24bce:	7823      	ldrb	r3, [r4, #0]
   24bd0:	4053      	eors	r3, r2
   24bd2:	78a2      	ldrb	r2, [r4, #2]
   24bd4:	4053      	eors	r3, r2
   24bd6:	ea80 0503 	eor.w	r5, r0, r3
   24bda:	78e0      	ldrb	r0, [r4, #3]
   24bdc:	f7ff ff3c 	bl	24a58 <_double_byte>
   24be0:	b2ed      	uxtb	r5, r5
   24be2:	4045      	eors	r5, r0
   24be4:	70f5      	strb	r5, [r6, #3]
}
   24be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024be8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   24be8:	b570      	push	{r4, r5, r6, lr}
   24bea:	4614      	mov	r4, r2
   24bec:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   24bee:	4605      	mov	r5, r0
   24bf0:	2800      	cmp	r0, #0
   24bf2:	d049      	beq.n	24c88 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   24bf4:	2900      	cmp	r1, #0
   24bf6:	d049      	beq.n	24c8c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   24bf8:	2a00      	cmp	r2, #0
   24bfa:	d049      	beq.n	24c90 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   24bfc:	2310      	movs	r3, #16
   24bfe:	460a      	mov	r2, r1
   24c00:	4668      	mov	r0, sp
   24c02:	4619      	mov	r1, r3
   24c04:	f7ff ff19 	bl	24a3a <_copy>
	add_round_key(state, s->words);
   24c08:	4621      	mov	r1, r4
   24c0a:	4668      	mov	r0, sp
   24c0c:	f7ff ff2d 	bl	24a6a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   24c10:	3410      	adds	r4, #16
   24c12:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24c16:	4668      	mov	r0, sp
   24c18:	f7ef fffe 	bl	14c18 <sub_bytes>
		shift_rows(state);
   24c1c:	4668      	mov	r0, sp
   24c1e:	f7ff ff69 	bl	24af4 <shift_rows>
	mult_row_column(t, s);
   24c22:	4669      	mov	r1, sp
   24c24:	a804      	add	r0, sp, #16
   24c26:	f7ff ff9e 	bl	24b66 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24c2a:	a901      	add	r1, sp, #4
   24c2c:	a805      	add	r0, sp, #20
   24c2e:	f7ff ff9a 	bl	24b66 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   24c32:	a902      	add	r1, sp, #8
   24c34:	a806      	add	r0, sp, #24
   24c36:	f7ff ff96 	bl	24b66 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24c3a:	a903      	add	r1, sp, #12
   24c3c:	a807      	add	r0, sp, #28
   24c3e:	f7ff ff92 	bl	24b66 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24c42:	2310      	movs	r3, #16
   24c44:	4619      	mov	r1, r3
   24c46:	eb0d 0203 	add.w	r2, sp, r3
   24c4a:	4668      	mov	r0, sp
   24c4c:	f7ff fef5 	bl	24a3a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   24c50:	4621      	mov	r1, r4
   24c52:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   24c54:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   24c56:	f7ff ff08 	bl	24a6a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   24c5a:	42b4      	cmp	r4, r6
   24c5c:	d1db      	bne.n	24c16 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   24c5e:	f7ef ffdb 	bl	14c18 <sub_bytes>
	shift_rows(state);
   24c62:	4668      	mov	r0, sp
   24c64:	f7ff ff46 	bl	24af4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   24c68:	4621      	mov	r1, r4
   24c6a:	4668      	mov	r0, sp
   24c6c:	f7ff fefd 	bl	24a6a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   24c70:	2310      	movs	r3, #16
   24c72:	4619      	mov	r1, r3
   24c74:	466a      	mov	r2, sp
   24c76:	4628      	mov	r0, r5
   24c78:	f7ff fedf 	bl	24a3a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   24c7c:	4668      	mov	r0, sp
   24c7e:	2210      	movs	r2, #16
   24c80:	2100      	movs	r1, #0
   24c82:	f7ff fee7 	bl	24a54 <_set>

	return TC_CRYPTO_SUCCESS;
   24c86:	2001      	movs	r0, #1
}
   24c88:	b008      	add	sp, #32
   24c8a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24c8c:	4608      	mov	r0, r1
   24c8e:	e7fb      	b.n	24c88 <tc_aes_encrypt+0xa0>
   24c90:	4610      	mov	r0, r2
   24c92:	e7f9      	b.n	24c88 <tc_aes_encrypt+0xa0>

00024c94 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24c94:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24c96:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24c98:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24c9a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   24c9e:	2b00      	cmp	r3, #0
   24ca0:	bfac      	ite	ge
   24ca2:	2300      	movge	r3, #0
   24ca4:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24ca6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24caa:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   24cae:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   24cb0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24cb4:	d002      	beq.n	24cbc <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24cb6:	7813      	ldrb	r3, [r2, #0]
   24cb8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24cba:	e7f4      	b.n	24ca6 <gf_double+0x12>
	}
}
   24cbc:	bd10      	pop	{r4, pc}

00024cbe <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   24cbe:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24cc0:	b120      	cbz	r0, 24ccc <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   24cc2:	2258      	movs	r2, #88	; 0x58
   24cc4:	2100      	movs	r1, #0
   24cc6:	f7ff fec5 	bl	24a54 <_set>
   24cca:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24ccc:	bd08      	pop	{r3, pc}

00024cce <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   24cce:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24cd0:	4604      	mov	r4, r0
   24cd2:	b188      	cbz	r0, 24cf8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24cd4:	2210      	movs	r2, #16
   24cd6:	2100      	movs	r1, #0
   24cd8:	f7ff febc 	bl	24a54 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   24cdc:	2210      	movs	r2, #16
   24cde:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24ce2:	2100      	movs	r1, #0
   24ce4:	f7ff feb6 	bl	24a54 <_set>
	s->leftover_offset = 0;
   24ce8:	2300      	movs	r3, #0
   24cea:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   24cec:	2200      	movs	r2, #0
   24cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24cf2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24cf6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24cf8:	bd10      	pop	{r4, pc}

00024cfa <tc_cmac_setup>:
{
   24cfa:	b570      	push	{r4, r5, r6, lr}
   24cfc:	4604      	mov	r4, r0
   24cfe:	460d      	mov	r5, r1
   24d00:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   24d02:	b310      	cbz	r0, 24d4a <tc_cmac_setup+0x50>
   24d04:	b311      	cbz	r1, 24d4c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24d06:	2258      	movs	r2, #88	; 0x58
   24d08:	2100      	movs	r1, #0
   24d0a:	f7ff fea3 	bl	24a54 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24d0e:	4629      	mov	r1, r5
	s->sched = sched;
   24d10:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24d12:	4630      	mov	r0, r6
   24d14:	f7ef ff8c 	bl	14c30 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24d18:	2210      	movs	r2, #16
   24d1a:	2100      	movs	r1, #0
   24d1c:	4620      	mov	r0, r4
   24d1e:	f7ff fe99 	bl	24a54 <_set>
	gf_double (s->K1, s->iv);
   24d22:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24d26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24d28:	4621      	mov	r1, r4
   24d2a:	4620      	mov	r0, r4
   24d2c:	f7ff ff5c 	bl	24be8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24d30:	4621      	mov	r1, r4
   24d32:	4628      	mov	r0, r5
   24d34:	f7ff ffae 	bl	24c94 <gf_double>
	gf_double (s->K2, s->K1);
   24d38:	4629      	mov	r1, r5
   24d3a:	f104 0020 	add.w	r0, r4, #32
   24d3e:	f7ff ffa9 	bl	24c94 <gf_double>
	tc_cmac_init(s);
   24d42:	4620      	mov	r0, r4
   24d44:	f7ff ffc3 	bl	24cce <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24d48:	2001      	movs	r0, #1
}
   24d4a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24d4c:	4608      	mov	r0, r1
   24d4e:	e7fc      	b.n	24d4a <tc_cmac_setup+0x50>

00024d50 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d54:	460e      	mov	r6, r1
   24d56:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24d58:	4604      	mov	r4, r0
   24d5a:	2800      	cmp	r0, #0
   24d5c:	d060      	beq.n	24e20 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24d5e:	b1fa      	cbz	r2, 24da0 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   24d60:	2900      	cmp	r1, #0
   24d62:	d05d      	beq.n	24e20 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   24d64:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   24d68:	ea53 0102 	orrs.w	r1, r3, r2
   24d6c:	d058      	beq.n	24e20 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   24d6e:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   24d70:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24d74:	f142 32ff 	adc.w	r2, r2, #4294967295
   24d78:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24d7c:	f1b8 0f00 	cmp.w	r8, #0
   24d80:	d02c      	beq.n	24ddc <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24d82:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24d86:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   24d8a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24d8c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   24d8e:	d20a      	bcs.n	24da6 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24d90:	462b      	mov	r3, r5
   24d92:	4632      	mov	r2, r6
   24d94:	4629      	mov	r1, r5
   24d96:	f7ff fe50 	bl	24a3a <_copy>
			s->leftover_offset += data_length;
   24d9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24d9c:	442b      	add	r3, r5
   24d9e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   24da0:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   24da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   24da6:	463b      	mov	r3, r7
   24da8:	4632      	mov	r2, r6
   24daa:	4639      	mov	r1, r7
   24dac:	f7ff fe45 	bl	24a3a <_copy>
		data_length -= remaining_space;
   24db0:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   24db2:	2300      	movs	r3, #0
   24db4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24db6:	4445      	add	r5, r8
		data += remaining_space;
   24db8:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24dba:	1e63      	subs	r3, r4, #1
   24dbc:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24dc0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24dc4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24dc8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24dca:	ea82 0200 	eor.w	r2, r2, r0
   24dce:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24dd0:	d1f6      	bne.n	24dc0 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24dd2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24dd4:	4621      	mov	r1, r4
   24dd6:	4620      	mov	r0, r4
   24dd8:	f7ff ff06 	bl	24be8 <tc_aes_encrypt>
   24ddc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24de0:	2d10      	cmp	r5, #16
   24de2:	d80a      	bhi.n	24dfa <tc_cmac_update+0xaa>
	if (data_length > 0) {
   24de4:	2d00      	cmp	r5, #0
   24de6:	d0db      	beq.n	24da0 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   24de8:	462b      	mov	r3, r5
   24dea:	4632      	mov	r2, r6
   24dec:	4629      	mov	r1, r5
   24dee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24df2:	f7ff fe22 	bl	24a3a <_copy>
		s->leftover_offset = data_length;
   24df6:	6465      	str	r5, [r4, #68]	; 0x44
   24df8:	e7d2      	b.n	24da0 <tc_cmac_update+0x50>
   24dfa:	1e63      	subs	r3, r4, #1
   24dfc:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   24dfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e06:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24e08:	ea82 0200 	eor.w	r2, r2, r0
   24e0c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e0e:	d1f6      	bne.n	24dfe <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24e10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e12:	4621      	mov	r1, r4
   24e14:	4620      	mov	r0, r4
   24e16:	f7ff fee7 	bl	24be8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24e1a:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24e1c:	3d10      	subs	r5, #16
   24e1e:	e7df      	b.n	24de0 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   24e20:	2000      	movs	r0, #0
   24e22:	e7be      	b.n	24da2 <tc_cmac_update+0x52>

00024e24 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24e24:	b570      	push	{r4, r5, r6, lr}
   24e26:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24e28:	4605      	mov	r5, r0
   24e2a:	b1e8      	cbz	r0, 24e68 <tc_cmac_final+0x44>
   24e2c:	b369      	cbz	r1, 24e8a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24e2e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24e30:	2a10      	cmp	r2, #16
   24e32:	d11a      	bne.n	24e6a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24e34:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e36:	1e63      	subs	r3, r4, #1
   24e38:	3901      	subs	r1, #1
   24e3a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24e3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24e42:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24e46:	4072      	eors	r2, r6
   24e48:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e4c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24e4e:	ea82 0206 	eor.w	r2, r2, r6
   24e52:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24e54:	d1f3      	bne.n	24e3e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24e56:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24e58:	4621      	mov	r1, r4
   24e5a:	4628      	mov	r0, r5
   24e5c:	f7ff fec4 	bl	24be8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24e60:	4620      	mov	r0, r4
   24e62:	f7ff ff2c 	bl	24cbe <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24e66:	2001      	movs	r0, #1
}
   24e68:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24e6a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24e6e:	2100      	movs	r1, #0
   24e70:	f1c2 0210 	rsb	r2, r2, #16
   24e74:	4420      	add	r0, r4
   24e76:	f7ff fded 	bl	24a54 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24e7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24e7c:	4423      	add	r3, r4
   24e7e:	2280      	movs	r2, #128	; 0x80
   24e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24e84:	f104 0120 	add.w	r1, r4, #32
   24e88:	e7d5      	b.n	24e36 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24e8a:	4608      	mov	r0, r1
   24e8c:	e7ec      	b.n	24e68 <tc_cmac_final+0x44>

00024e8e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   24e8e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24e90:	6800      	ldr	r0, [r0, #0]
   24e92:	f7ef bf3f 	b.w	14d14 <z_arm_fatal_error>

00024e96 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24e96:	2100      	movs	r1, #0
   24e98:	2001      	movs	r0, #1
   24e9a:	f7ef bf3b 	b.w	14d14 <z_arm_fatal_error>

00024e9e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   24e9e:	b508      	push	{r3, lr}
	handler();
   24ea0:	f7f0 f85c 	bl	14f5c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24ea8:	f7f0 b9c4 	b.w	15234 <z_arm_exc_exit>

00024eac <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   24eac:	2300      	movs	r3, #0
   24eae:	f7ef b8fb 	b.w	140a8 <z_impl_z_log_msg_static_create>

00024eb2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24eb2:	3901      	subs	r1, #1
   24eb4:	4603      	mov	r3, r0
   24eb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24eba:	b90a      	cbnz	r2, 24ec0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24ebc:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24ebe:	4770      	bx	lr
		*d = *s;
   24ec0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24ec4:	e7f7      	b.n	24eb6 <strcpy+0x4>

00024ec6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24ec6:	4603      	mov	r3, r0
	size_t n = 0;
   24ec8:	2000      	movs	r0, #0

	while (*s != '\0') {
   24eca:	5c1a      	ldrb	r2, [r3, r0]
   24ecc:	b902      	cbnz	r2, 24ed0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24ece:	4770      	bx	lr
		n++;
   24ed0:	3001      	adds	r0, #1
   24ed2:	e7fa      	b.n	24eca <strlen+0x4>

00024ed4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   24ed4:	4603      	mov	r3, r0
	size_t n = 0;
   24ed6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   24ed8:	5c1a      	ldrb	r2, [r3, r0]
   24eda:	b10a      	cbz	r2, 24ee0 <strnlen+0xc>
   24edc:	4288      	cmp	r0, r1
   24ede:	d100      	bne.n	24ee2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   24ee0:	4770      	bx	lr
		n++;
   24ee2:	3001      	adds	r0, #1
   24ee4:	e7f8      	b.n	24ed8 <strnlen+0x4>

00024ee6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24ee6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24ee8:	b15a      	cbz	r2, 24f02 <memcmp+0x1c>
   24eea:	3901      	subs	r1, #1
   24eec:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24eee:	f810 2b01 	ldrb.w	r2, [r0], #1
   24ef2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24ef6:	42a0      	cmp	r0, r4
   24ef8:	d001      	beq.n	24efe <memcmp+0x18>
   24efa:	429a      	cmp	r2, r3
   24efc:	d0f7      	beq.n	24eee <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24efe:	1ad0      	subs	r0, r2, r3
}
   24f00:	bd10      	pop	{r4, pc}
		return 0;
   24f02:	4610      	mov	r0, r2
   24f04:	e7fc      	b.n	24f00 <memcmp+0x1a>

00024f06 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   24f06:	b510      	push	{r4, lr}
   24f08:	1e43      	subs	r3, r0, #1
   24f0a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   24f0c:	4291      	cmp	r1, r2
   24f0e:	d100      	bne.n	24f12 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24f10:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   24f12:	f811 4b01 	ldrb.w	r4, [r1], #1
   24f16:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24f1a:	e7f7      	b.n	24f0c <memcpy+0x6>

00024f1c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24f1c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   24f1e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   24f20:	4603      	mov	r3, r0
	while (n > 0) {
   24f22:	4293      	cmp	r3, r2
   24f24:	d100      	bne.n	24f28 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24f26:	4770      	bx	lr
		*(d_byte++) = c_byte;
   24f28:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24f2c:	e7f9      	b.n	24f22 <memset+0x6>

00024f2e <_stdout_hook_default>:
}
   24f2e:	f04f 30ff 	mov.w	r0, #4294967295
   24f32:	4770      	bx	lr

00024f34 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   24f34:	684b      	ldr	r3, [r1, #4]
   24f36:	2b01      	cmp	r3, #1
   24f38:	dd07      	ble.n	24f4a <sprintf_out+0x16>
		*(p->ptr) = c;
   24f3a:	680b      	ldr	r3, [r1, #0]
   24f3c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24f3e:	680b      	ldr	r3, [r1, #0]
   24f40:	3301      	adds	r3, #1
   24f42:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   24f44:	684b      	ldr	r3, [r1, #4]
   24f46:	3b01      	subs	r3, #1
   24f48:	604b      	str	r3, [r1, #4]
}
   24f4a:	2000      	movs	r0, #0
   24f4c:	4770      	bx	lr

00024f4e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   24f4e:	2806      	cmp	r0, #6
   24f50:	d108      	bne.n	24f64 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24f56:	2201      	movs	r2, #1
   24f58:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24f5c:	f3bf 8f4f 	dsb	sy
        __WFE();
   24f60:	bf20      	wfe
    while (true)
   24f62:	e7fd      	b.n	24f60 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24f64:	4770      	bx	lr

00024f66 <pm_state_exit_post_ops>:
   24f66:	2300      	movs	r3, #0
   24f68:	f383 8811 	msr	BASEPRI, r3
   24f6c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24f70:	4770      	bx	lr

00024f72 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24f72:	b510      	push	{r4, lr}
   24f74:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24f76:	7801      	ldrb	r1, [r0, #0]
   24f78:	7822      	ldrb	r2, [r4, #0]
   24f7a:	428a      	cmp	r2, r1
{
   24f7c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24f7e:	d00f      	beq.n	24fa0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24f80:	4669      	mov	r1, sp
   24f82:	f7f0 ff83 	bl	15e8c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24f86:	a905      	add	r1, sp, #20
   24f88:	4620      	mov	r0, r4
   24f8a:	f7f0 ff7f 	bl	15e8c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24f8e:	2210      	movs	r2, #16
   24f90:	f10d 0115 	add.w	r1, sp, #21
   24f94:	f10d 0001 	add.w	r0, sp, #1
   24f98:	f7ff ffa5 	bl	24ee6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24f9c:	b00a      	add	sp, #40	; 0x28
   24f9e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24fa0:	2a01      	cmp	r2, #1
   24fa2:	d006      	beq.n	24fb2 <bt_uuid_cmp+0x40>
   24fa4:	2a02      	cmp	r2, #2
   24fa6:	d007      	beq.n	24fb8 <bt_uuid_cmp+0x46>
   24fa8:	b972      	cbnz	r2, 24fc8 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24faa:	8840      	ldrh	r0, [r0, #2]
   24fac:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24fae:	1ac0      	subs	r0, r0, r3
   24fb0:	e7f4      	b.n	24f9c <bt_uuid_cmp+0x2a>
   24fb2:	6840      	ldr	r0, [r0, #4]
   24fb4:	6863      	ldr	r3, [r4, #4]
   24fb6:	e7fa      	b.n	24fae <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24fb8:	2210      	movs	r2, #16
   24fba:	1c61      	adds	r1, r4, #1
   24fbc:	3001      	adds	r0, #1
}
   24fbe:	b00a      	add	sp, #40	; 0x28
   24fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24fc4:	f7ff bf8f 	b.w	24ee6 <memcmp>
	switch (u1->type) {
   24fc8:	f06f 0015 	mvn.w	r0, #21
   24fcc:	e7e6      	b.n	24f9c <bt_uuid_cmp+0x2a>

00024fce <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24fce:	2a04      	cmp	r2, #4
{
   24fd0:	b510      	push	{r4, lr}
	switch (data_len) {
   24fd2:	d00a      	beq.n	24fea <bt_uuid_create+0x1c>
   24fd4:	2a10      	cmp	r2, #16
   24fd6:	d00d      	beq.n	24ff4 <bt_uuid_create+0x26>
   24fd8:	2a02      	cmp	r2, #2
   24fda:	f04f 0300 	mov.w	r3, #0
   24fde:	d10f      	bne.n	25000 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24fe0:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24fe2:	880b      	ldrh	r3, [r1, #0]
   24fe4:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24fe6:	2001      	movs	r0, #1
}
   24fe8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   24fea:	2301      	movs	r3, #1
   24fec:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24fee:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24ff0:	6043      	str	r3, [r0, #4]
		break;
   24ff2:	e7f8      	b.n	24fe6 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   24ff4:	2302      	movs	r3, #2
   24ff6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24ffa:	f7ff ff84 	bl	24f06 <memcpy>
		break;
   24ffe:	e7f2      	b.n	24fe6 <bt_uuid_create+0x18>
	switch (data_len) {
   25000:	4618      	mov	r0, r3
   25002:	e7f1      	b.n	24fe8 <bt_uuid_create+0x1a>

00025004 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   25004:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   25006:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   25008:	2106      	movs	r1, #6
{
   2500a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2500c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   25010:	f7f9 fdd8 	bl	1ebc4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   25014:	b918      	cbnz	r0, 2501e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   25016:	79a3      	ldrb	r3, [r4, #6]
   25018:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2501c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2501e:	bd10      	pop	{r4, pc}

00025020 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   25020:	b510      	push	{r4, lr}
   25022:	4604      	mov	r4, r0
   25024:	2207      	movs	r2, #7
   25026:	f7ff ff6e 	bl	24f06 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   2502a:	7823      	ldrb	r3, [r4, #0]
   2502c:	f023 0302 	bic.w	r3, r3, #2
   25030:	7023      	strb	r3, [r4, #0]
}
   25032:	bd10      	pop	{r4, pc}

00025034 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   25034:	7800      	ldrb	r0, [r0, #0]
}
   25036:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2503a:	4770      	bx	lr

0002503c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2503c:	280f      	cmp	r0, #15
   2503e:	d807      	bhi.n	25050 <bt_hci_evt_get_flags+0x14>
   25040:	280d      	cmp	r0, #13
   25042:	d80b      	bhi.n	2505c <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   25044:	2805      	cmp	r0, #5
   25046:	bf08      	it	eq
   25048:	2003      	moveq	r0, #3
   2504a:	bf18      	it	ne
   2504c:	2002      	movne	r0, #2
   2504e:	4770      	bx	lr
	switch (evt) {
   25050:	2813      	cmp	r0, #19
   25052:	d003      	beq.n	2505c <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   25054:	281a      	cmp	r0, #26
   25056:	bf08      	it	eq
   25058:	2001      	moveq	r0, #1
   2505a:	e7f6      	b.n	2504a <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2505c:	2001      	movs	r0, #1
	}
}
   2505e:	4770      	bx	lr

00025060 <hci_vendor_event>:
}
   25060:	4770      	bx	lr

00025062 <atomic_or>:
{
   25062:	b510      	push	{r4, lr}
   25064:	4603      	mov	r3, r0
}
   25066:	f3bf 8f5b 	dmb	ish
   2506a:	e853 0f00 	ldrex	r0, [r3]
   2506e:	ea40 0201 	orr.w	r2, r0, r1
   25072:	e843 2400 	strex	r4, r2, [r3]
   25076:	2c00      	cmp	r4, #0
   25078:	d1f7      	bne.n	2506a <atomic_or+0x8>
   2507a:	f3bf 8f5b 	dmb	ish
   2507e:	bd10      	pop	{r4, pc}

00025080 <z_log_msg_static_create.constprop.0>:
   25080:	2300      	movs	r3, #0
   25082:	f7ef b811 	b.w	140a8 <z_impl_z_log_msg_static_create>

00025086 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25086:	f3bf 8f5b 	dmb	ish
   2508a:	e850 3f00 	ldrex	r3, [r0]
   2508e:	400b      	ands	r3, r1
   25090:	e840 3200 	strex	r2, r3, [r0]
   25094:	2a00      	cmp	r2, #0
   25096:	d1f8      	bne.n	2508a <atomic_and.isra.0+0x4>
   25098:	f3bf 8f5b 	dmb	ish
}
   2509c:	4770      	bx	lr

0002509e <bt_hci_disconnect>:
{
   2509e:	b570      	push	{r4, r5, r6, lr}
   250a0:	4606      	mov	r6, r0
   250a2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   250a4:	f240 4006 	movw	r0, #1030	; 0x406
   250a8:	2103      	movs	r1, #3
   250aa:	f7f1 fc13 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   250ae:	4604      	mov	r4, r0
   250b0:	b168      	cbz	r0, 250ce <bt_hci_disconnect+0x30>
   250b2:	2103      	movs	r1, #3
   250b4:	300c      	adds	r0, #12
   250b6:	f7f7 f8e9 	bl	1c28c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   250ba:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   250bc:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   250be:	4621      	mov	r1, r4
   250c0:	2200      	movs	r2, #0
}
   250c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   250c6:	f240 4006 	movw	r0, #1030	; 0x406
   250ca:	f7f1 bc51 	b.w	16970 <bt_hci_cmd_send_sync>
}
   250ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   250d2:	bd70      	pop	{r4, r5, r6, pc}

000250d4 <bt_le_set_data_len>:
{
   250d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250d6:	4607      	mov	r7, r0
   250d8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   250da:	f242 0022 	movw	r0, #8226	; 0x2022
   250de:	2106      	movs	r1, #6
{
   250e0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   250e2:	f7f1 fbf7 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   250e6:	4604      	mov	r4, r0
   250e8:	b178      	cbz	r0, 2510a <bt_le_set_data_len+0x36>
   250ea:	2106      	movs	r1, #6
   250ec:	300c      	adds	r0, #12
   250ee:	f7f7 f8cd 	bl	1c28c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   250f2:	883b      	ldrh	r3, [r7, #0]
   250f4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   250f6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   250f8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   250fa:	4621      	mov	r1, r4
   250fc:	2200      	movs	r2, #0
}
   250fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   25102:	f242 0022 	movw	r0, #8226	; 0x2022
   25106:	f7f1 bc33 	b.w	16970 <bt_hci_cmd_send_sync>
}
   2510a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025110 <bt_le_set_phy>:
{
   25110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25114:	4681      	mov	r9, r0
   25116:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   25118:	f242 0032 	movw	r0, #8242	; 0x2032
   2511c:	2107      	movs	r1, #7
{
   2511e:	f89d a020 	ldrb.w	sl, [sp, #32]
   25122:	4617      	mov	r7, r2
   25124:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   25126:	f7f1 fbd5 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   2512a:	4605      	mov	r5, r0
   2512c:	b1a0      	cbz	r0, 25158 <bt_le_set_phy+0x48>
   2512e:	2107      	movs	r1, #7
   25130:	300c      	adds	r0, #12
   25132:	f7f7 f8ab 	bl	1c28c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   25136:	f8b9 3000 	ldrh.w	r3, [r9]
   2513a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2513c:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   25140:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   25142:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   25144:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   25148:	4629      	mov	r1, r5
   2514a:	2200      	movs	r2, #0
}
   2514c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   25150:	f242 0032 	movw	r0, #8242	; 0x2032
   25154:	f7f1 bc0c 	b.w	16970 <bt_hci_cmd_send_sync>
}
   25158:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025160 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   25160:	68c0      	ldr	r0, [r0, #12]
   25162:	f7f1 bcd9 	b.w	16b18 <bt_hci_le_enh_conn_complete>

00025166 <bt_le_conn_params_valid>:
{
   25166:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   25168:	8803      	ldrh	r3, [r0, #0]
   2516a:	8842      	ldrh	r2, [r0, #2]
   2516c:	4293      	cmp	r3, r2
   2516e:	d819      	bhi.n	251a4 <bt_le_conn_params_valid+0x3e>
   25170:	2b05      	cmp	r3, #5
   25172:	d917      	bls.n	251a4 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   25174:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   25178:	d814      	bhi.n	251a4 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2517a:	8883      	ldrh	r3, [r0, #4]
   2517c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   25180:	d210      	bcs.n	251a4 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   25182:	88c0      	ldrh	r0, [r0, #6]
   25184:	f1a0 010a 	sub.w	r1, r0, #10
   25188:	b289      	uxth	r1, r1
   2518a:	f640 4476 	movw	r4, #3190	; 0xc76
   2518e:	42a1      	cmp	r1, r4
   25190:	d808      	bhi.n	251a4 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   25192:	3301      	adds	r3, #1
   25194:	b29b      	uxth	r3, r3
   25196:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   25198:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2519c:	bf34      	ite	cc
   2519e:	2001      	movcc	r0, #1
   251a0:	2000      	movcs	r0, #0
}
   251a2:	bd10      	pop	{r4, pc}
		return false;
   251a4:	2000      	movs	r0, #0
   251a6:	e7fc      	b.n	251a2 <bt_le_conn_params_valid+0x3c>

000251a8 <le_conn_param_neg_reply>:
{
   251a8:	b570      	push	{r4, r5, r6, lr}
   251aa:	4606      	mov	r6, r0
   251ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   251ae:	f242 0021 	movw	r0, #8225	; 0x2021
   251b2:	2103      	movs	r1, #3
   251b4:	f7f1 fb8e 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   251b8:	4604      	mov	r4, r0
   251ba:	b918      	cbnz	r0, 251c4 <le_conn_param_neg_reply+0x1c>
}
   251bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   251c0:	f7f0 bf7c 	b.w	160bc <le_conn_param_neg_reply.part.0>
   251c4:	2103      	movs	r1, #3
   251c6:	300c      	adds	r0, #12
   251c8:	f7f7 f860 	bl	1c28c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   251cc:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   251ce:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   251d0:	4621      	mov	r1, r4
   251d2:	f242 0021 	movw	r0, #8225	; 0x2021
}
   251d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   251da:	f7f1 be4f 	b.w	16e7c <bt_hci_cmd_send>

000251de <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   251de:	f240 3041 	movw	r0, #833	; 0x341
   251e2:	4770      	bx	lr

000251e4 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   251e4:	2000      	movs	r0, #0
   251e6:	4770      	bx	lr

000251e8 <bt_addr_le_eq>:
{
   251e8:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   251ea:	2207      	movs	r2, #7
   251ec:	f7ff fe7b 	bl	24ee6 <memcmp>
}
   251f0:	fab0 f080 	clz	r0, r0
   251f4:	0940      	lsrs	r0, r0, #5
   251f6:	bd08      	pop	{r3, pc}

000251f8 <z_log_msg_static_create.constprop.0>:
   251f8:	2300      	movs	r3, #0
   251fa:	f7ee bf55 	b.w	140a8 <z_impl_z_log_msg_static_create>

000251fe <bt_lookup_id_addr>:
	return addr;
   251fe:	2800      	cmp	r0, #0
}
   25200:	bf0c      	ite	eq
   25202:	4608      	moveq	r0, r1
   25204:	2000      	movne	r0, #0
   25206:	4770      	bx	lr

00025208 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   25208:	b118      	cbz	r0, 25212 <bt_id_set_adv_random_addr+0xa>
   2520a:	b111      	cbz	r1, 25212 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2520c:	4608      	mov	r0, r1
   2520e:	f7f2 bc29 	b.w	17a64 <set_random_address>
}
   25212:	f06f 0015 	mvn.w	r0, #21
   25216:	4770      	bx	lr

00025218 <bt_id_set_adv_private_addr>:
{
   25218:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2521a:	4604      	mov	r4, r0
   2521c:	b180      	cbz	r0, 25240 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2521e:	2106      	movs	r1, #6
   25220:	4668      	mov	r0, sp
   25222:	f7f9 fccf 	bl	1ebc4 <bt_rand>
	if (err) {
   25226:	b948      	cbnz	r0, 2523c <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   25228:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2522c:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2522e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25232:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   25234:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   25238:	f7ff ffe6 	bl	25208 <bt_id_set_adv_random_addr>
}
   2523c:	b002      	add	sp, #8
   2523e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25240:	f06f 0015 	mvn.w	r0, #21
   25244:	e7fa      	b.n	2523c <bt_id_set_adv_private_addr+0x24>

00025246 <bt_id_adv_random_addr_check>:
}
   25246:	3800      	subs	r0, #0
   25248:	bf18      	it	ne
   2524a:	2001      	movne	r0, #1
   2524c:	4770      	bx	lr

0002524e <get_adv_channel_map>:
{
   2524e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   25250:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   25254:	bf0c      	ite	eq
   25256:	2007      	moveq	r0, #7
   25258:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2525a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2525c:	bf48      	it	mi
   2525e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   25262:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   25264:	bf48      	it	mi
   25266:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2526a:	4770      	bx	lr

0002526c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2526c:	f3bf 8f5b 	dmb	ish
   25270:	6800      	ldr	r0, [r0, #0]
   25272:	f3bf 8f5b 	dmb	ish
}
   25276:	4770      	bx	lr

00025278 <atomic_and>:
{
   25278:	b510      	push	{r4, lr}
   2527a:	4603      	mov	r3, r0
}
   2527c:	f3bf 8f5b 	dmb	ish
   25280:	e853 0f00 	ldrex	r0, [r3]
   25284:	ea00 0201 	and.w	r2, r0, r1
   25288:	e843 2400 	strex	r4, r2, [r3]
   2528c:	2c00      	cmp	r4, #0
   2528e:	d1f7      	bne.n	25280 <atomic_and+0x8>
   25290:	f3bf 8f5b 	dmb	ish
   25294:	bd10      	pop	{r4, pc}

00025296 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25296:	2301      	movs	r3, #1
{
   25298:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2529a:	fa03 f101 	lsl.w	r1, r3, r1
{
   2529e:	4604      	mov	r4, r0
	if (val) {
   252a0:	b16a      	cbz	r2, 252be <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   252a2:	f3bf 8f5b 	dmb	ish
   252a6:	e854 3f00 	ldrex	r3, [r4]
   252aa:	430b      	orrs	r3, r1
   252ac:	e844 3200 	strex	r2, r3, [r4]
   252b0:	2a00      	cmp	r2, #0
   252b2:	d1f8      	bne.n	252a6 <atomic_set_bit_to+0x10>
   252b4:	f3bf 8f5b 	dmb	ish
	}
}
   252b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   252bc:	4770      	bx	lr
   252be:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   252c2:	43c9      	mvns	r1, r1
   252c4:	f7ff bfd8 	b.w	25278 <atomic_and>

000252c8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   252c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252cc:	b087      	sub	sp, #28
   252ce:	4605      	mov	r5, r0
   252d0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   252d4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   252d8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   252dc:	460c      	mov	r4, r1
   252de:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   252e0:	2100      	movs	r1, #0
   252e2:	2210      	movs	r2, #16
   252e4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   252e6:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   252e8:	f7ff fe18 	bl	24f1c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   252ec:	b9ee      	cbnz	r6, 2532a <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   252ee:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   252f2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   252f4:	a902      	add	r1, sp, #8
   252f6:	f242 0008 	movw	r0, #8200	; 0x2008
   252fa:	f7f2 fdc5 	bl	17e88 <hci_set_ad>
		if (err) {
   252fe:	4604      	mov	r4, r0
   25300:	b978      	cbnz	r0, 25322 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   25302:	f1ba 0f00 	cmp.w	sl, #0
   25306:	d13e      	bne.n	25386 <le_adv_update.constprop.0+0xbe>
   25308:	3510      	adds	r5, #16
   2530a:	f3bf 8f5b 	dmb	ish
   2530e:	e855 3f00 	ldrex	r3, [r5]
   25312:	f043 0304 	orr.w	r3, r3, #4
   25316:	e845 3200 	strex	r2, r3, [r5]
   2531a:	2a00      	cmp	r2, #0
   2531c:	d1f7      	bne.n	2530e <le_adv_update.constprop.0+0x46>
   2531e:	f3bf 8f5b 	dmb	ish
}
   25322:	4620      	mov	r0, r4
   25324:	b007      	add	sp, #28
   25326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2532a:	f7f2 fb7f 	bl	17a2c <bt_get_name>
   2532e:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   25330:	b9e4      	cbnz	r4, 2536c <le_adv_update.constprop.0+0xa4>
   25332:	bb37      	cbnz	r7, 25382 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   25334:	4658      	mov	r0, fp
   25336:	f7ff fdc6 	bl	24ec6 <strlen>
   2533a:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2533c:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2533e:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   25342:	f88d 3000 	strb.w	r3, [sp]
   25346:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2534a:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2534e:	d1d0      	bne.n	252f2 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   25350:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   25354:	9605      	str	r6, [sp, #20]
			d_len = 2;
   25356:	2202      	movs	r2, #2
   25358:	e7cc      	b.n	252f4 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2535a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2535e:	3a08      	subs	r2, #8
   25360:	2a01      	cmp	r2, #1
   25362:	d925      	bls.n	253b0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   25364:	3301      	adds	r3, #1
   25366:	4598      	cmp	r8, r3
   25368:	d1f7      	bne.n	2535a <le_adv_update.constprop.0+0x92>
   2536a:	e7e2      	b.n	25332 <le_adv_update.constprop.0+0x6a>
   2536c:	2300      	movs	r3, #0
   2536e:	e7fa      	b.n	25366 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   25370:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   25374:	3a08      	subs	r2, #8
   25376:	2a01      	cmp	r2, #1
   25378:	d91a      	bls.n	253b0 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2537a:	3301      	adds	r3, #1
   2537c:	4599      	cmp	r9, r3
   2537e:	d1f7      	bne.n	25370 <le_adv_update.constprop.0+0xa8>
   25380:	e7d8      	b.n	25334 <le_adv_update.constprop.0+0x6c>
   25382:	2300      	movs	r3, #0
   25384:	e7fa      	b.n	2537c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   25386:	2e02      	cmp	r6, #2
   25388:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2538c:	bf08      	it	eq
   2538e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   25390:	a902      	add	r1, sp, #8
			d_len = 2;
   25392:	bf08      	it	eq
   25394:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   25396:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2539a:	bf08      	it	eq
   2539c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   253a0:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   253a4:	f7f2 fd70 	bl	17e88 <hci_set_ad>
		if (err) {
   253a8:	2800      	cmp	r0, #0
   253aa:	d0ad      	beq.n	25308 <le_adv_update.constprop.0+0x40>
   253ac:	4604      	mov	r4, r0
   253ae:	e7b8      	b.n	25322 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   253b0:	f06f 0415 	mvn.w	r4, #21
   253b4:	e7b5      	b.n	25322 <le_adv_update.constprop.0+0x5a>

000253b6 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   253b6:	6843      	ldr	r3, [r0, #4]
   253b8:	f013 0008 	ands.w	r0, r3, #8
   253bc:	d00a      	beq.n	253d4 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   253be:	035a      	lsls	r2, r3, #13
   253c0:	d407      	bmi.n	253d2 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   253c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   253c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   253ca:	bf14      	ite	ne
   253cc:	2002      	movne	r0, #2
   253ce:	2001      	moveq	r0, #1
   253d0:	4770      	bx	lr
   253d2:	2001      	movs	r0, #1
}
   253d4:	4770      	bx	lr

000253d6 <bt_le_adv_set_enable_legacy>:
{
   253d6:	b570      	push	{r4, r5, r6, lr}
   253d8:	4606      	mov	r6, r0
   253da:	b086      	sub	sp, #24
   253dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   253de:	f242 000a 	movw	r0, #8202	; 0x200a
   253e2:	2101      	movs	r1, #1
   253e4:	f7f1 fa76 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   253e8:	4604      	mov	r4, r0
   253ea:	b1b0      	cbz	r0, 2541a <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   253ec:	300c      	adds	r0, #12
	if (enable) {
   253ee:	b195      	cbz	r5, 25416 <bt_le_adv_set_enable_legacy+0x40>
   253f0:	2101      	movs	r1, #1
   253f2:	f000 ff9d 	bl	26330 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   253f6:	f106 0210 	add.w	r2, r6, #16
   253fa:	a903      	add	r1, sp, #12
   253fc:	4620      	mov	r0, r4
   253fe:	9500      	str	r5, [sp, #0]
   25400:	2307      	movs	r3, #7
   25402:	f7f1 fa55 	bl	168b0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   25406:	2200      	movs	r2, #0
   25408:	4621      	mov	r1, r4
   2540a:	f242 000a 	movw	r0, #8202	; 0x200a
   2540e:	f7f1 faaf 	bl	16970 <bt_hci_cmd_send_sync>
}
   25412:	b006      	add	sp, #24
   25414:	bd70      	pop	{r4, r5, r6, pc}
   25416:	4629      	mov	r1, r5
   25418:	e7eb      	b.n	253f2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2541a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2541e:	e7f8      	b.n	25412 <bt_le_adv_set_enable_legacy+0x3c>

00025420 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   25420:	3018      	adds	r0, #24
   25422:	f7fc b921 	b.w	21668 <k_work_cancel_delayable>

00025426 <z_log_msg_static_create.constprop.0>:
   25426:	2300      	movs	r3, #0
   25428:	f7ee be3e 	b.w	140a8 <z_impl_z_log_msg_static_create>

0002542c <tx_complete_work>:
	tx_notify(conn);
   2542c:	3828      	subs	r0, #40	; 0x28
   2542e:	f7f3 b895 	b.w	1855c <tx_notify>

00025432 <bt_conn_reset_rx_state>:
{
   25432:	b510      	push	{r4, lr}
   25434:	4604      	mov	r4, r0
	if (!conn->rx) {
   25436:	6900      	ldr	r0, [r0, #16]
   25438:	b118      	cbz	r0, 25442 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2543a:	f7f6 fde3 	bl	1c004 <net_buf_unref>
	conn->rx = NULL;
   2543e:	2300      	movs	r3, #0
   25440:	6123      	str	r3, [r4, #16]
}
   25442:	bd10      	pop	{r4, pc}

00025444 <conn_lookup_handle>:
{
   25444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25448:	4607      	mov	r7, r0
   2544a:	460e      	mov	r6, r1
   2544c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2544e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25450:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   25454:	42b4      	cmp	r4, r6
   25456:	d103      	bne.n	25460 <conn_lookup_handle+0x1c>
	return NULL;
   25458:	2300      	movs	r3, #0
}
   2545a:	4618      	mov	r0, r3
   2545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   25460:	fb09 7004 	mla	r0, r9, r4, r7
   25464:	f7f3 fbaa 	bl	18bbc <bt_conn_ref>
   25468:	4603      	mov	r3, r0
		if (!conn) {
   2546a:	b158      	cbz	r0, 25484 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2546c:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2546e:	2d01      	cmp	r5, #1
   25470:	d002      	beq.n	25478 <conn_lookup_handle+0x34>
   25472:	3d07      	subs	r5, #7
   25474:	2d01      	cmp	r5, #1
   25476:	d803      	bhi.n	25480 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   25478:	881a      	ldrh	r2, [r3, #0]
   2547a:	4542      	cmp	r2, r8
   2547c:	d0ed      	beq.n	2545a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2547e:	4618      	mov	r0, r3
   25480:	f7f3 fbcc 	bl	18c1c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   25484:	3401      	adds	r4, #1
   25486:	e7e5      	b.n	25454 <conn_lookup_handle+0x10>

00025488 <bt_conn_connected>:
{
   25488:	b510      	push	{r4, lr}
   2548a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2548c:	f7f4 f8e8 	bl	19660 <bt_l2cap_connected>
	notify_connected(conn);
   25490:	4620      	mov	r0, r4
}
   25492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   25496:	f7f3 b82b 	b.w	184f0 <notify_connected>

0002549a <bt_conn_is_peer_addr_le>:
{
   2549a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2549c:	7a03      	ldrb	r3, [r0, #8]
   2549e:	428b      	cmp	r3, r1
{
   254a0:	4604      	mov	r4, r0
   254a2:	4615      	mov	r5, r2
	if (id != conn->id) {
   254a4:	d115      	bne.n	254d2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   254a6:	f100 0190 	add.w	r1, r0, #144	; 0x90
   254aa:	2207      	movs	r2, #7
   254ac:	4628      	mov	r0, r5
   254ae:	f7ff fd1a 	bl	24ee6 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   254b2:	b180      	cbz	r0, 254d6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   254b4:	78e3      	ldrb	r3, [r4, #3]
   254b6:	2207      	movs	r2, #7
   254b8:	b943      	cbnz	r3, 254cc <bt_conn_is_peer_addr_le+0x32>
   254ba:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   254be:	4628      	mov	r0, r5
   254c0:	f7ff fd11 	bl	24ee6 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   254c4:	fab0 f080 	clz	r0, r0
   254c8:	0940      	lsrs	r0, r0, #5
}
   254ca:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   254cc:	f104 0197 	add.w	r1, r4, #151	; 0x97
   254d0:	e7f5      	b.n	254be <bt_conn_is_peer_addr_le+0x24>
		return false;
   254d2:	2000      	movs	r0, #0
   254d4:	e7f9      	b.n	254ca <bt_conn_is_peer_addr_le+0x30>
		return true;
   254d6:	2001      	movs	r0, #1
   254d8:	e7f7      	b.n	254ca <bt_conn_is_peer_addr_le+0x30>

000254da <bt_conn_get_dst>:
}
   254da:	3090      	adds	r0, #144	; 0x90
   254dc:	4770      	bx	lr

000254de <bt_conn_le_conn_update>:
{
   254de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254e0:	4607      	mov	r7, r0
   254e2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   254e4:	f242 0013 	movw	r0, #8211	; 0x2013
   254e8:	210e      	movs	r1, #14
   254ea:	f7f1 f9f3 	bl	168d4 <bt_hci_cmd_create>
	if (!buf) {
   254ee:	4606      	mov	r6, r0
   254f0:	b1d0      	cbz	r0, 25528 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   254f2:	210e      	movs	r1, #14
   254f4:	300c      	adds	r0, #12
   254f6:	f7f6 fec9 	bl	1c28c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   254fa:	220e      	movs	r2, #14
   254fc:	4604      	mov	r4, r0
   254fe:	2100      	movs	r1, #0
   25500:	f7ff fd0c 	bl	24f1c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   25504:	883b      	ldrh	r3, [r7, #0]
   25506:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25508:	882b      	ldrh	r3, [r5, #0]
   2550a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2550c:	886b      	ldrh	r3, [r5, #2]
   2550e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25510:	88ab      	ldrh	r3, [r5, #4]
   25512:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   25514:	88eb      	ldrh	r3, [r5, #6]
   25516:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25518:	4631      	mov	r1, r6
   2551a:	2200      	movs	r2, #0
}
   2551c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25520:	f242 0013 	movw	r0, #8211	; 0x2013
   25524:	f7f1 ba24 	b.w	16970 <bt_hci_cmd_send_sync>
}
   25528:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002552e <l2cap_connected>:
}
   2552e:	4770      	bx	lr

00025530 <z_log_msg_static_create.constprop.0>:
   25530:	2300      	movs	r3, #0
   25532:	f7ee bdb9 	b.w	140a8 <z_impl_z_log_msg_static_create>

00025536 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   25536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25538:	4605      	mov	r5, r0
   2553a:	460f      	mov	r7, r1
   2553c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2553e:	2300      	movs	r3, #0
   25540:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25544:	2104      	movs	r1, #4
   25546:	2000      	movs	r0, #0
   25548:	f7f3 fcd0 	bl	18eec <bt_conn_create_pdu_timeout>
	if (!buf) {
   2554c:	4604      	mov	r4, r0
   2554e:	b920      	cbnz	r0, 2555a <l2cap_create_le_sig_pdu.constprop.0+0x24>
   25550:	4628      	mov	r0, r5
}
   25552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25556:	f7f4 b847 	b.w	195e8 <l2cap_create_le_sig_pdu.part.0>
   2555a:	2104      	movs	r1, #4
   2555c:	300c      	adds	r0, #12
   2555e:	f7f6 fe95 	bl	1c28c <net_buf_simple_add>
	hdr->code = code;
   25562:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   25564:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   25566:	8046      	strh	r6, [r0, #2]
}
   25568:	4620      	mov	r0, r4
   2556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002556c <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2556c:	4770      	bx	lr

0002556e <bt_l2cap_chan_del>:
{
   2556e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   25570:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   25574:	4604      	mov	r4, r0
	if (!chan->conn) {
   25576:	b123      	cbz	r3, 25582 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   25578:	686b      	ldr	r3, [r5, #4]
   2557a:	b103      	cbz	r3, 2557e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2557c:	4798      	blx	r3
	chan->conn = NULL;
   2557e:	2300      	movs	r3, #0
   25580:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   25582:	68e3      	ldr	r3, [r4, #12]
   25584:	b10b      	cbz	r3, 2558a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   25586:	4620      	mov	r0, r4
   25588:	4798      	blx	r3
	if (ops->released) {
   2558a:	6a2b      	ldr	r3, [r5, #32]
   2558c:	b11b      	cbz	r3, 25596 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2558e:	4620      	mov	r0, r4
}
   25590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   25594:	4718      	bx	r3
}
   25596:	bd70      	pop	{r4, r5, r6, pc}

00025598 <bt_l2cap_disconnected>:
{
   25598:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2559a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2559c:	b130      	cbz	r0, 255ac <bt_l2cap_disconnected+0x14>
	return node->next;
   2559e:	f850 4908 	ldr.w	r4, [r0], #-8
   255a2:	b104      	cbz	r4, 255a6 <bt_l2cap_disconnected+0xe>
   255a4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   255a6:	f7ff ffe2 	bl	2556e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   255aa:	b904      	cbnz	r4, 255ae <bt_l2cap_disconnected+0x16>
}
   255ac:	bd38      	pop	{r3, r4, r5, pc}
   255ae:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   255b0:	b12d      	cbz	r5, 255be <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   255b2:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   255b4:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   255b6:	f7ff ffda 	bl	2556e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   255ba:	462c      	mov	r4, r5
   255bc:	e7f7      	b.n	255ae <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   255be:	4620      	mov	r0, r4
}
   255c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   255c4:	f7ff bfd3 	b.w	2556e <bt_l2cap_chan_del>

000255c8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   255c8:	3104      	adds	r1, #4
   255ca:	f7f3 bc8f 	b.w	18eec <bt_conn_create_pdu_timeout>

000255ce <bt_l2cap_send_cb>:
{
   255ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255d2:	4614      	mov	r4, r2
   255d4:	4605      	mov	r5, r0
   255d6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   255d8:	f102 000c 	add.w	r0, r2, #12
   255dc:	2104      	movs	r1, #4
   255de:	461e      	mov	r6, r3
   255e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   255e4:	f7f6 fdf6 	bl	1c1d4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   255e8:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   255ea:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   255ec:	3a04      	subs	r2, #4
   255ee:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   255f0:	4643      	mov	r3, r8
   255f2:	4632      	mov	r2, r6
   255f4:	4621      	mov	r1, r4
   255f6:	4628      	mov	r0, r5
}
   255f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   255fc:	f7f3 ba1c 	b.w	18a38 <bt_conn_send_cb>

00025600 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   25600:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25602:	b130      	cbz	r0, 25612 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25604:	8983      	ldrh	r3, [r0, #12]
   25606:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25608:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2560c:	d001      	beq.n	25612 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2560e:	6880      	ldr	r0, [r0, #8]
   25610:	e7f7      	b.n	25602 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   25612:	4770      	bx	lr

00025614 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   25614:	4770      	bx	lr

00025616 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   25616:	4603      	mov	r3, r0
	return list->head;
   25618:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2561a:	b128      	cbz	r0, 25628 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2561c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2561e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25620:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25622:	4288      	cmp	r0, r1
	list->tail = node;
   25624:	bf08      	it	eq
   25626:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25628:	4770      	bx	lr

0002562a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2562a:	4603      	mov	r3, r0
	size_t bytes = 0;
   2562c:	2000      	movs	r0, #0

	while (buf) {
   2562e:	b903      	cbnz	r3, 25632 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   25630:	4770      	bx	lr
		bytes += buf->len;
   25632:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   25634:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   25636:	4410      	add	r0, r2
		buf = buf->frags;
   25638:	e7f9      	b.n	2562e <net_buf_frags_len+0x4>

0002563a <attr_read_type_cb>:
{
   2563a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2563c:	68d4      	ldr	r4, [r2, #12]
   2563e:	7823      	ldrb	r3, [r4, #0]
   25640:	3102      	adds	r1, #2
   25642:	b913      	cbnz	r3, 2564a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   25644:	7021      	strb	r1, [r4, #0]
	return true;
   25646:	2001      	movs	r0, #1
}
   25648:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2564a:	428b      	cmp	r3, r1
   2564c:	d0fb      	beq.n	25646 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2564e:	8a03      	ldrh	r3, [r0, #16]
   25650:	3b02      	subs	r3, #2
   25652:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   25654:	2000      	movs	r0, #0
   25656:	6110      	str	r0, [r2, #16]
		return false;
   25658:	e7f6      	b.n	25648 <attr_read_type_cb+0xe>

0002565a <att_prepare_write_req>:
}
   2565a:	2006      	movs	r0, #6
   2565c:	4770      	bx	lr

0002565e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2565e:	f3bf 8f5b 	dmb	ish
   25662:	6800      	ldr	r0, [r0, #0]
   25664:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25668:	4108      	asrs	r0, r1
}
   2566a:	f000 0001 	and.w	r0, r0, #1
   2566e:	4770      	bx	lr

00025670 <write_cb>:
{
   25670:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25672:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25674:	4601      	mov	r1, r0
{
   25676:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25678:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2567c:	6820      	ldr	r0, [r4, #0]
   2567e:	f000 fda3 	bl	261c8 <bt_gatt_check_perm>
   25682:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25684:	bb00      	cbnz	r0, 256c8 <write_cb+0x58>
	if (!data->req) {
   25686:	7a23      	ldrb	r3, [r4, #8]
   25688:	b1b3      	cbz	r3, 256b8 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2568a:	f1a3 0218 	sub.w	r2, r3, #24
   2568e:	4253      	negs	r3, r2
   25690:	4153      	adcs	r3, r2
   25692:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   25694:	9301      	str	r3, [sp, #4]
   25696:	8a63      	ldrh	r3, [r4, #18]
   25698:	9300      	str	r3, [sp, #0]
   2569a:	68ae      	ldr	r6, [r5, #8]
   2569c:	8a23      	ldrh	r3, [r4, #16]
   2569e:	68e2      	ldr	r2, [r4, #12]
   256a0:	6820      	ldr	r0, [r4, #0]
   256a2:	4629      	mov	r1, r5
   256a4:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   256a6:	2800      	cmp	r0, #0
   256a8:	db08      	blt.n	256bc <write_cb+0x4c>
   256aa:	8a23      	ldrh	r3, [r4, #16]
   256ac:	4298      	cmp	r0, r3
   256ae:	d10e      	bne.n	256ce <write_cb+0x5e>
	data->err = 0U;
   256b0:	2300      	movs	r3, #0
   256b2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   256b4:	2001      	movs	r0, #1
   256b6:	e008      	b.n	256ca <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   256b8:	2302      	movs	r3, #2
   256ba:	e7eb      	b.n	25694 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   256bc:	f110 0fff 	cmn.w	r0, #255	; 0xff
   256c0:	d305      	bcc.n	256ce <write_cb+0x5e>
		return -err;
   256c2:	4240      	negs	r0, r0
   256c4:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   256c6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   256c8:	2000      	movs	r0, #0
}
   256ca:	b002      	add	sp, #8
   256cc:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   256ce:	200e      	movs	r0, #14
   256d0:	e7f9      	b.n	256c6 <write_cb+0x56>

000256d2 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   256d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   256d4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   256d8:	2300      	movs	r3, #0
   256da:	9300      	str	r3, [sp, #0]
   256dc:	461a      	mov	r2, r3
   256de:	f7f5 fd39 	bl	1b154 <bt_gatt_foreach_attr_type>
				  user_data);
}
   256e2:	b005      	add	sp, #20
   256e4:	f85d fb04 	ldr.w	pc, [sp], #4

000256e8 <find_info_cb>:
{
   256e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   256ea:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   256ec:	6817      	ldr	r7, [r2, #0]
{
   256ee:	4605      	mov	r5, r0
   256f0:	460e      	mov	r6, r1
   256f2:	4614      	mov	r4, r2
	if (!data->rsp) {
   256f4:	b963      	cbnz	r3, 25710 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   256f6:	6850      	ldr	r0, [r2, #4]
   256f8:	2101      	movs	r1, #1
   256fa:	300c      	adds	r0, #12
   256fc:	f7f6 fdc6 	bl	1c28c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25700:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25702:	682b      	ldr	r3, [r5, #0]
   25704:	781b      	ldrb	r3, [r3, #0]
   25706:	2b00      	cmp	r3, #0
   25708:	bf14      	ite	ne
   2570a:	2302      	movne	r3, #2
   2570c:	2301      	moveq	r3, #1
   2570e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25710:	68a3      	ldr	r3, [r4, #8]
   25712:	781b      	ldrb	r3, [r3, #0]
   25714:	2b01      	cmp	r3, #1
   25716:	d003      	beq.n	25720 <find_info_cb+0x38>
   25718:	2b02      	cmp	r3, #2
   2571a:	d019      	beq.n	25750 <find_info_cb+0x68>
   2571c:	2000      	movs	r0, #0
   2571e:	e016      	b.n	2574e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25720:	682b      	ldr	r3, [r5, #0]
   25722:	781b      	ldrb	r3, [r3, #0]
   25724:	2b00      	cmp	r3, #0
   25726:	d1f9      	bne.n	2571c <find_info_cb+0x34>
   25728:	6860      	ldr	r0, [r4, #4]
   2572a:	2104      	movs	r1, #4
   2572c:	300c      	adds	r0, #12
   2572e:	f7f6 fdad 	bl	1c28c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25732:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   25734:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25736:	682a      	ldr	r2, [r5, #0]
   25738:	68e3      	ldr	r3, [r4, #12]
   2573a:	8852      	ldrh	r2, [r2, #2]
   2573c:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2573e:	6863      	ldr	r3, [r4, #4]
   25740:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   25742:	8a1b      	ldrh	r3, [r3, #16]
   25744:	1ac0      	subs	r0, r0, r3
   25746:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   25748:	bf94      	ite	ls
   2574a:	2000      	movls	r0, #0
   2574c:	2001      	movhi	r0, #1
}
   2574e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25750:	682b      	ldr	r3, [r5, #0]
   25752:	781b      	ldrb	r3, [r3, #0]
   25754:	2b02      	cmp	r3, #2
   25756:	d1e1      	bne.n	2571c <find_info_cb+0x34>
   25758:	6860      	ldr	r0, [r4, #4]
   2575a:	2112      	movs	r1, #18
   2575c:	300c      	adds	r0, #12
   2575e:	f7f6 fd95 	bl	1c28c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25762:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   25764:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25766:	6829      	ldr	r1, [r5, #0]
   25768:	68e0      	ldr	r0, [r4, #12]
   2576a:	2210      	movs	r2, #16
   2576c:	3101      	adds	r1, #1
   2576e:	3002      	adds	r0, #2
   25770:	f7ff fbc9 	bl	24f06 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   25774:	6863      	ldr	r3, [r4, #4]
   25776:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   25778:	8a1b      	ldrh	r3, [r3, #16]
   2577a:	1ac0      	subs	r0, r0, r3
   2577c:	2812      	cmp	r0, #18
   2577e:	e7e3      	b.n	25748 <find_info_cb+0x60>

00025780 <att_chan_mtu_updated>:
{
   25780:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   25782:	6805      	ldr	r5, [r0, #0]
	return list->head;
   25784:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25786:	b352      	cbz	r2, 257de <att_chan_mtu_updated+0x5e>
	return node->next;
   25788:	6813      	ldr	r3, [r2, #0]
   2578a:	b103      	cbz	r3, 2578e <att_chan_mtu_updated+0xe>
   2578c:	3b88      	subs	r3, #136	; 0x88
   2578e:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   25792:	2200      	movs	r2, #0
   25794:	4611      	mov	r1, r2
   25796:	e000      	b.n	2579a <att_chan_mtu_updated+0x1a>
   25798:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   2579a:	4284      	cmp	r4, r0
   2579c:	d007      	beq.n	257ae <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2579e:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   257a0:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   257a2:	42b1      	cmp	r1, r6
   257a4:	bf38      	it	cc
   257a6:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   257a8:	42a2      	cmp	r2, r4
   257aa:	bf38      	it	cc
   257ac:	4622      	movcc	r2, r4
   257ae:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   257b0:	b12b      	cbz	r3, 257be <att_chan_mtu_updated+0x3e>
   257b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   257b6:	2b00      	cmp	r3, #0
   257b8:	d1ee      	bne.n	25798 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   257ba:	4284      	cmp	r4, r0
   257bc:	d1ef      	bne.n	2579e <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   257be:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   257c0:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   257c2:	428b      	cmp	r3, r1
   257c4:	d801      	bhi.n	257ca <att_chan_mtu_updated+0x4a>
   257c6:	4290      	cmp	r0, r2
   257c8:	d90b      	bls.n	257e2 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   257ca:	4282      	cmp	r2, r0
   257cc:	bf38      	it	cc
   257ce:	4602      	movcc	r2, r0
   257d0:	4299      	cmp	r1, r3
   257d2:	6828      	ldr	r0, [r5, #0]
   257d4:	bf38      	it	cc
   257d6:	4619      	movcc	r1, r3
}
   257d8:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   257da:	f7f6 b9a1 	b.w	1bb20 <bt_gatt_att_max_mtu_changed>
   257de:	4611      	mov	r1, r2
   257e0:	e7ed      	b.n	257be <att_chan_mtu_updated+0x3e>
}
   257e2:	bc70      	pop	{r4, r5, r6}
   257e4:	4770      	bx	lr

000257e6 <attr_read_group_cb>:
	if (!data->rsp->len) {
   257e6:	68d0      	ldr	r0, [r2, #12]
   257e8:	7803      	ldrb	r3, [r0, #0]
   257ea:	3104      	adds	r1, #4
   257ec:	b913      	cbnz	r3, 257f4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   257ee:	7001      	strb	r1, [r0, #0]
	return true;
   257f0:	2001      	movs	r0, #1
   257f2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   257f4:	428b      	cmp	r3, r1
   257f6:	d0fb      	beq.n	257f0 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   257f8:	6891      	ldr	r1, [r2, #8]
   257fa:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   257fc:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   257fe:	3b04      	subs	r3, #4
   25800:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   25802:	6110      	str	r0, [r2, #16]
}
   25804:	4770      	bx	lr

00025806 <z_log_msg_static_create.constprop.0>:
   25806:	2300      	movs	r3, #0
   25808:	f7ee bc4e 	b.w	140a8 <z_impl_z_log_msg_static_create>

0002580c <chan_req_send>:
{
   2580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2580e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25810:	6888      	ldr	r0, [r1, #8]
   25812:	f7ff ff0a 	bl	2562a <net_buf_frags_len>
   25816:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   25818:	4283      	cmp	r3, r0
{
   2581a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2581c:	d30b      	bcc.n	25836 <chan_req_send+0x2a>
	chan->req = req;
   2581e:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   25820:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   25822:	2600      	movs	r6, #0
   25824:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   25826:	4628      	mov	r0, r5
   25828:	4639      	mov	r1, r7
   2582a:	f7f4 f98b 	bl	19b44 <chan_send>
	if (err) {
   2582e:	b108      	cbz	r0, 25834 <chan_req_send+0x28>
		req->buf = buf;
   25830:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   25832:	63ae      	str	r6, [r5, #56]	; 0x38
}
   25834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25836:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2583a:	e7fb      	b.n	25834 <chan_req_send+0x28>

0002583c <process_queue>:
{
   2583c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2583e:	2200      	movs	r2, #0
{
   25840:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   25842:	2300      	movs	r3, #0
   25844:	4608      	mov	r0, r1
{
   25846:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   25848:	f000 fd50 	bl	262ec <net_buf_get>
	if (buf) {
   2584c:	4605      	mov	r5, r0
   2584e:	b158      	cbz	r0, 25868 <process_queue+0x2c>
	return chan_send(chan, buf);
   25850:	4601      	mov	r1, r0
   25852:	4620      	mov	r0, r4
   25854:	f7f4 f976 	bl	19b44 <chan_send>
		if (err) {
   25858:	4604      	mov	r4, r0
   2585a:	b118      	cbz	r0, 25864 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2585c:	4629      	mov	r1, r5
   2585e:	4630      	mov	r0, r6
   25860:	f001 fa43 	bl	26cea <k_queue_prepend>
}
   25864:	4620      	mov	r0, r4
   25866:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   25868:	f06f 0401 	mvn.w	r4, #1
   2586c:	e7fa      	b.n	25864 <process_queue+0x28>

0002586e <bt_att_chan_send_rsp>:
{
   2586e:	b538      	push	{r3, r4, r5, lr}
   25870:	4604      	mov	r4, r0
   25872:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   25874:	f7f4 f966 	bl	19b44 <chan_send>
	if (err) {
   25878:	b130      	cbz	r0, 25888 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2587a:	4629      	mov	r1, r5
   2587c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   25880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   25884:	f7f6 bb98 	b.w	1bfb8 <net_buf_put>
}
   25888:	bd38      	pop	{r3, r4, r5, pc}

0002588a <att_chan_read>:
{
   2588a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2588e:	4680      	mov	r8, r0
   25890:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25892:	4610      	mov	r0, r2
{
   25894:	4699      	mov	r9, r3
   25896:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25898:	f7ff fec7 	bl	2562a <net_buf_frags_len>
   2589c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   258a0:	4283      	cmp	r3, r0
{
   258a2:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   258a4:	d97a      	bls.n	2599c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   258a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   258aa:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   258ac:	4630      	mov	r0, r6
   258ae:	f7f6 fc05 	bl	1c0bc <net_buf_frag_last>
	size_t len, total = 0;
   258b2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   258b6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   258b8:	4630      	mov	r0, r6
   258ba:	f7ff feb6 	bl	2562a <net_buf_frags_len>
   258be:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   258c2:	f105 070c 	add.w	r7, r5, #12
   258c6:	1a24      	subs	r4, r4, r0
   258c8:	4638      	mov	r0, r7
   258ca:	f000 fd1d 	bl	26308 <net_buf_simple_tailroom>
   258ce:	4284      	cmp	r4, r0
   258d0:	d211      	bcs.n	258f6 <att_chan_read+0x6c>
   258d2:	4630      	mov	r0, r6
   258d4:	f7ff fea9 	bl	2562a <net_buf_frags_len>
   258d8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   258dc:	1a24      	subs	r4, r4, r0
		if (!len) {
   258de:	bb34      	cbnz	r4, 2592e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   258e0:	7ab0      	ldrb	r0, [r6, #10]
   258e2:	f7f6 f97b 	bl	1bbdc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   258e6:	2200      	movs	r2, #0
   258e8:	2300      	movs	r3, #0
   258ea:	f000 fcfa 	bl	262e2 <net_buf_alloc_fixed>
			if (!frag) {
   258ee:	4605      	mov	r5, r0
   258f0:	b930      	cbnz	r0, 25900 <att_chan_read+0x76>
	return total;
   258f2:	4657      	mov	r7, sl
   258f4:	e02c      	b.n	25950 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   258f6:	4638      	mov	r0, r7
   258f8:	f000 fd06 	bl	26308 <net_buf_simple_tailroom>
   258fc:	4604      	mov	r4, r0
   258fe:	e7ee      	b.n	258de <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   25900:	4601      	mov	r1, r0
   25902:	4630      	mov	r0, r6
   25904:	f7f6 fc20 	bl	1c148 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25908:	4630      	mov	r0, r6
   2590a:	f7ff fe8e 	bl	2562a <net_buf_frags_len>
   2590e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25912:	f105 070c 	add.w	r7, r5, #12
   25916:	1a24      	subs	r4, r4, r0
   25918:	4638      	mov	r0, r7
   2591a:	f000 fcf5 	bl	26308 <net_buf_simple_tailroom>
   2591e:	4284      	cmp	r4, r0
   25920:	d21a      	bcs.n	25958 <att_chan_read+0xce>
   25922:	4630      	mov	r0, r6
   25924:	f7ff fe81 	bl	2562a <net_buf_frags_len>
   25928:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2592c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2592e:	68e9      	ldr	r1, [r5, #12]
   25930:	8a2a      	ldrh	r2, [r5, #16]
   25932:	f8cd 9000 	str.w	r9, [sp]
   25936:	f8db 7004 	ldr.w	r7, [fp, #4]
   2593a:	9803      	ldr	r0, [sp, #12]
   2593c:	440a      	add	r2, r1
   2593e:	b2a3      	uxth	r3, r4
   25940:	4659      	mov	r1, fp
   25942:	47b8      	blx	r7
		if (read < 0) {
   25944:	1e07      	subs	r7, r0, #0
   25946:	da0c      	bge.n	25962 <att_chan_read+0xd8>
				return total;
   25948:	f1ba 0f00 	cmp.w	sl, #0
   2594c:	bf18      	it	ne
   2594e:	4657      	movne	r7, sl
}
   25950:	4638      	mov	r0, r7
   25952:	b005      	add	sp, #20
   25954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25958:	4638      	mov	r0, r7
   2595a:	f000 fcd5 	bl	26308 <net_buf_simple_tailroom>
   2595e:	4604      	mov	r4, r0
   25960:	e7e5      	b.n	2592e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25964:	b993      	cbnz	r3, 2598c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25966:	4639      	mov	r1, r7
   25968:	f105 000c 	add.w	r0, r5, #12
   2596c:	f7f6 fc8e 	bl	1c28c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25970:	4630      	mov	r0, r6
   25972:	f7ff fe5a 	bl	2562a <net_buf_frags_len>
   25976:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2597a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2597c:	4283      	cmp	r3, r0
		total += read;
   2597e:	44ba      	add	sl, r7
		offset += read;
   25980:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25984:	d9b5      	bls.n	258f2 <att_chan_read+0x68>
   25986:	42a7      	cmp	r7, r4
   25988:	d096      	beq.n	258b8 <att_chan_read+0x2e>
   2598a:	e7b2      	b.n	258f2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2598c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2598e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25990:	4639      	mov	r1, r7
   25992:	4628      	mov	r0, r5
   25994:	4798      	blx	r3
   25996:	2800      	cmp	r0, #0
   25998:	d1e5      	bne.n	25966 <att_chan_read+0xdc>
   2599a:	e7aa      	b.n	258f2 <att_chan_read+0x68>
		return 0;
   2599c:	2700      	movs	r7, #0
   2599e:	e7d7      	b.n	25950 <att_chan_read+0xc6>

000259a0 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   259a0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   259a2:	2200      	movs	r2, #0
   259a4:	b903      	cbnz	r3, 259a8 <sys_slist_find_and_remove.isra.0+0x8>
   259a6:	4770      	bx	lr
   259a8:	428b      	cmp	r3, r1
   259aa:	d10f      	bne.n	259cc <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   259ac:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   259ae:	b93a      	cbnz	r2, 259c0 <sys_slist_find_and_remove.isra.0+0x20>
   259b0:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   259b2:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   259b4:	4291      	cmp	r1, r2
   259b6:	d100      	bne.n	259ba <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   259b8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   259ba:	2300      	movs	r3, #0
   259bc:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   259be:	4770      	bx	lr
	parent->next = child;
   259c0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   259c2:	6843      	ldr	r3, [r0, #4]
   259c4:	4299      	cmp	r1, r3
	list->tail = node;
   259c6:	bf08      	it	eq
   259c8:	6042      	streq	r2, [r0, #4]
}
   259ca:	e7f6      	b.n	259ba <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   259cc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   259ce:	681b      	ldr	r3, [r3, #0]
   259d0:	e7e8      	b.n	259a4 <sys_slist_find_and_remove.isra.0+0x4>

000259d2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   259d2:	2301      	movs	r3, #1
   259d4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   259d6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   259d8:	f3bf 8f5b 	dmb	ish
   259dc:	e850 2f00 	ldrex	r2, [r0]
   259e0:	401a      	ands	r2, r3
   259e2:	e840 2100 	strex	r1, r2, [r0]
   259e6:	2900      	cmp	r1, #0
   259e8:	d1f8      	bne.n	259dc <atomic_clear_bit+0xa>
   259ea:	f3bf 8f5b 	dmb	ish
}
   259ee:	4770      	bx	lr

000259f0 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   259f0:	2006      	movs	r0, #6
   259f2:	4770      	bx	lr

000259f4 <atomic_test_and_set_bit>:
{
   259f4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   259f6:	2301      	movs	r3, #1
   259f8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   259fc:	f3bf 8f5b 	dmb	ish
   25a00:	e850 3f00 	ldrex	r3, [r0]
   25a04:	ea43 0201 	orr.w	r2, r3, r1
   25a08:	e840 2400 	strex	r4, r2, [r0]
   25a0c:	2c00      	cmp	r4, #0
   25a0e:	d1f7      	bne.n	25a00 <atomic_test_and_set_bit+0xc>
   25a10:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   25a14:	4219      	tst	r1, r3
}
   25a16:	bf14      	ite	ne
   25a18:	2001      	movne	r0, #1
   25a1a:	2000      	moveq	r0, #0
   25a1c:	bd10      	pop	{r4, pc}

00025a1e <read_cb>:
{
   25a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   25a20:	6816      	ldr	r6, [r2, #0]
{
   25a22:	4605      	mov	r5, r0
	data->err = 0x00;
   25a24:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25a26:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   25a28:	7313      	strb	r3, [r2, #12]
{
   25a2a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25a2c:	4629      	mov	r1, r5
   25a2e:	2295      	movs	r2, #149	; 0x95
   25a30:	f000 fbca 	bl	261c8 <bt_gatt_check_perm>
   25a34:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25a36:	b980      	cbnz	r0, 25a5a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25a38:	e9cd 0000 	strd	r0, r0, [sp]
   25a3c:	4629      	mov	r1, r5
   25a3e:	88a3      	ldrh	r3, [r4, #4]
   25a40:	68a2      	ldr	r2, [r4, #8]
   25a42:	4630      	mov	r0, r6
   25a44:	f7ff ff21 	bl	2588a <att_chan_read>
	if (ret < 0) {
   25a48:	2800      	cmp	r0, #0
   25a4a:	da09      	bge.n	25a60 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   25a4c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   25a50:	bf26      	itte	cs
   25a52:	4240      	negcs	r0, r0
   25a54:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   25a56:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   25a58:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   25a5a:	2000      	movs	r0, #0
}
   25a5c:	b002      	add	sp, #8
   25a5e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   25a60:	2001      	movs	r0, #1
   25a62:	e7fb      	b.n	25a5c <read_cb+0x3e>

00025a64 <read_vl_cb>:
{
   25a64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25a68:	f8d2 8000 	ldr.w	r8, [r2]
{
   25a6c:	4606      	mov	r6, r0
	data->err = 0x00;
   25a6e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25a70:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   25a74:	7313      	strb	r3, [r2, #12]
{
   25a76:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25a78:	4631      	mov	r1, r6
   25a7a:	2295      	movs	r2, #149	; 0x95
   25a7c:	f000 fba4 	bl	261c8 <bt_gatt_check_perm>
   25a80:	4605      	mov	r5, r0
   25a82:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25a84:	b9e0      	cbnz	r0, 25ac0 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   25a86:	68a0      	ldr	r0, [r4, #8]
   25a88:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25a8c:	8a02      	ldrh	r2, [r0, #16]
   25a8e:	1a9b      	subs	r3, r3, r2
   25a90:	2b01      	cmp	r3, #1
   25a92:	dd15      	ble.n	25ac0 <read_vl_cb+0x5c>
   25a94:	2102      	movs	r1, #2
   25a96:	300c      	adds	r0, #12
   25a98:	f7f6 fbf8 	bl	1c28c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25a9c:	e9cd 5500 	strd	r5, r5, [sp]
   25aa0:	4607      	mov	r7, r0
   25aa2:	88a3      	ldrh	r3, [r4, #4]
   25aa4:	68a2      	ldr	r2, [r4, #8]
   25aa6:	4631      	mov	r1, r6
   25aa8:	4640      	mov	r0, r8
   25aaa:	f7ff feee 	bl	2588a <att_chan_read>
	if (read < 0) {
   25aae:	1e03      	subs	r3, r0, #0
   25ab0:	da0a      	bge.n	25ac8 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   25ab2:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   25ab6:	bf26      	itte	cs
   25ab8:	425b      	negcs	r3, r3
   25aba:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25abc:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   25abe:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   25ac0:	2000      	movs	r0, #0
}
   25ac2:	b002      	add	sp, #8
   25ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   25ac8:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   25aca:	2001      	movs	r0, #1
   25acc:	e7f9      	b.n	25ac2 <read_vl_cb+0x5e>

00025ace <bt_att_sent>:
{
   25ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   25ad0:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   25ad4:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25ad6:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   25ad8:	2104      	movs	r1, #4
   25ada:	3030      	adds	r0, #48	; 0x30
   25adc:	f7ff ff79 	bl	259d2 <atomic_clear_bit>
	if (!att) {
   25ae0:	b304      	cbz	r4, 25b24 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25ae2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25ae4:	b98b      	cbnz	r3, 25b0a <bt_att_sent+0x3c>
   25ae6:	6863      	ldr	r3, [r4, #4]
   25ae8:	b17b      	cbz	r3, 25b0a <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25aea:	1d20      	adds	r0, r4, #4
   25aec:	f7ff fd93 	bl	25616 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25af0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25af2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25af4:	4638      	mov	r0, r7
   25af6:	f7ff fe89 	bl	2580c <chan_req_send>
   25afa:	2800      	cmp	r0, #0
   25afc:	da12      	bge.n	25b24 <bt_att_sent+0x56>
	return list->head;
   25afe:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   25b00:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25b02:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25b04:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25b06:	b903      	cbnz	r3, 25b0a <bt_att_sent+0x3c>
	list->tail = node;
   25b08:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25b0a:	f105 0138 	add.w	r1, r5, #56	; 0x38
   25b0e:	4638      	mov	r0, r7
   25b10:	f7ff fe94 	bl	2583c <process_queue>
	if (!err) {
   25b14:	b130      	cbz	r0, 25b24 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   25b16:	f104 010c 	add.w	r1, r4, #12
   25b1a:	4638      	mov	r0, r7
}
   25b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   25b20:	f7ff be8c 	b.w	2583c <process_queue>
}
   25b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025b26 <att_req_send_process>:
{
   25b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   25b2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
   25b2c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25b2e:	2c00      	cmp	r4, #0
   25b30:	d03a      	beq.n	25ba8 <att_req_send_process+0x82>
	return node->next;
   25b32:	f854 6988 	ldr.w	r6, [r4], #-136
   25b36:	b106      	cbz	r6, 25b3a <att_req_send_process+0x14>
   25b38:	3e88      	subs	r6, #136	; 0x88
{
   25b3a:	2300      	movs	r3, #0
   25b3c:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   25b3e:	f108 0704 	add.w	r7, r8, #4
   25b42:	e013      	b.n	25b6c <att_req_send_process+0x46>
		if (!req && prev &&
   25b44:	b1bb      	cbz	r3, 25b76 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   25b46:	2103      	movs	r1, #3
   25b48:	f104 0034 	add.w	r0, r4, #52	; 0x34
   25b4c:	f7ff fd87 	bl	2565e <atomic_test_bit>
   25b50:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   25b52:	f103 0034 	add.w	r0, r3, #52	; 0x34
   25b56:	f7ff fd82 	bl	2565e <atomic_test_bit>
		if (!req && prev &&
   25b5a:	4282      	cmp	r2, r0
   25b5c:	d10b      	bne.n	25b76 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25b5e:	b31e      	cbz	r6, 25ba8 <att_req_send_process+0x82>
   25b60:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   25b64:	b102      	cbz	r2, 25b68 <att_req_send_process+0x42>
   25b66:	3a88      	subs	r2, #136	; 0x88
{
   25b68:	4634      	mov	r4, r6
   25b6a:	4616      	mov	r6, r2
		if (chan->req) {
   25b6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   25b6e:	2a00      	cmp	r2, #0
   25b70:	d1f5      	bne.n	25b5e <att_req_send_process+0x38>
		if (!req && prev &&
   25b72:	2d00      	cmp	r5, #0
   25b74:	d0e6      	beq.n	25b44 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   25b76:	4638      	mov	r0, r7
   25b78:	f7ff fd4d 	bl	25616 <sys_slist_get>
	if (node) {
   25b7c:	4605      	mov	r5, r0
   25b7e:	b908      	cbnz	r0, 25b84 <att_req_send_process+0x5e>
   25b80:	4623      	mov	r3, r4
   25b82:	e7ec      	b.n	25b5e <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   25b84:	4601      	mov	r1, r0
   25b86:	4620      	mov	r0, r4
   25b88:	f7f4 f868 	bl	19c5c <bt_att_chan_req_send>
   25b8c:	2800      	cmp	r0, #0
   25b8e:	da0b      	bge.n	25ba8 <att_req_send_process+0x82>
	return list->head;
   25b90:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   25b94:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25b96:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   25b9a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   25b9e:	2b00      	cmp	r3, #0
   25ba0:	d1ee      	bne.n	25b80 <att_req_send_process+0x5a>
	list->tail = node;
   25ba2:	f8c8 5008 	str.w	r5, [r8, #8]
}
   25ba6:	e7eb      	b.n	25b80 <att_req_send_process+0x5a>
}
   25ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025bac <bt_att_status>:
{
   25bac:	b538      	push	{r3, r4, r5, lr}
   25bae:	4605      	mov	r5, r0
   25bb0:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25bb2:	2100      	movs	r1, #0
   25bb4:	f7ff fd53 	bl	2565e <atomic_test_bit>
   25bb8:	b1b8      	cbz	r0, 25bea <bt_att_status+0x3e>
	if (!chan->att) {
   25bba:	f855 0c04 	ldr.w	r0, [r5, #-4]
   25bbe:	b1a0      	cbz	r0, 25bea <bt_att_status+0x3e>
	if (chan->req) {
   25bc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25bc2:	b993      	cbnz	r3, 25bea <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   25bc4:	3004      	adds	r0, #4
   25bc6:	f7ff fd26 	bl	25616 <sys_slist_get>
	if (!node) {
   25bca:	4604      	mov	r4, r0
   25bcc:	b168      	cbz	r0, 25bea <bt_att_status+0x3e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25bce:	4601      	mov	r1, r0
   25bd0:	1f28      	subs	r0, r5, #4
   25bd2:	f7f4 f843 	bl	19c5c <bt_att_chan_req_send>
   25bd6:	2800      	cmp	r0, #0
   25bd8:	da07      	bge.n	25bea <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   25bda:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   25bde:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25be0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25be2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25be4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25be6:	b902      	cbnz	r2, 25bea <bt_att_status+0x3e>
	list->tail = node;
   25be8:	609c      	str	r4, [r3, #8]
}
   25bea:	bd38      	pop	{r3, r4, r5, pc}

00025bec <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   25bec:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   25bee:	6883      	ldr	r3, [r0, #8]
   25bf0:	699b      	ldr	r3, [r3, #24]
   25bf2:	b10b      	cbz	r3, 25bf8 <att_sent+0xc>
		chan->ops->sent(chan);
   25bf4:	3004      	adds	r0, #4
   25bf6:	4718      	bx	r3
}
   25bf8:	4770      	bx	lr

00025bfa <att_tx_complete>:
{
   25bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25bfe:	4606      	mov	r6, r0
   25c00:	460d      	mov	r5, r1
	if (!err) {
   25c02:	4614      	mov	r4, r2
   25c04:	b122      	cbz	r2, 25c10 <att_tx_complete+0x16>
}
   25c06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   25c0a:	4608      	mov	r0, r1
   25c0c:	f7f3 beba 	b.w	19984 <tx_meta_data_free>
		att_sent(conn, user_data);
   25c10:	f7ff ffec 	bl	25bec <att_sent>
	bt_gatt_complete_func_t func = data->func;
   25c14:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   25c16:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   25c1a:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   25c1e:	4628      	mov	r0, r5
   25c20:	f7f3 feb0 	bl	19984 <tx_meta_data_free>
	if (!err && func) {
   25c24:	b92f      	cbnz	r7, 25c32 <att_tx_complete+0x38>
}
   25c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   25c2a:	4649      	mov	r1, r9
   25c2c:	4630      	mov	r0, r6
   25c2e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   25c30:	3401      	adds	r4, #1
   25c32:	b2a3      	uxth	r3, r4
   25c34:	4543      	cmp	r3, r8
   25c36:	d3f8      	bcc.n	25c2a <att_tx_complete+0x30>
   25c38:	e7f5      	b.n	25c26 <att_tx_complete+0x2c>

00025c3a <att_req_sent>:
{
   25c3a:	b510      	push	{r4, lr}
   25c3c:	460c      	mov	r4, r1
	if (!err) {
   25c3e:	b90a      	cbnz	r2, 25c44 <att_req_sent+0xa>
		att_sent(conn, user_data);
   25c40:	f7ff ffd4 	bl	25bec <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   25c44:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   25c46:	6b83      	ldr	r3, [r0, #56]	; 0x38
   25c48:	b12b      	cbz	r3, 25c56 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25c4a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25c4e:	2300      	movs	r3, #0
   25c50:	3058      	adds	r0, #88	; 0x58
   25c52:	f7fb fd03 	bl	2165c <k_work_reschedule>
	tx_meta_data_free(user_data);
   25c56:	4620      	mov	r0, r4
}
   25c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25c5c:	f7f3 be92 	b.w	19984 <tx_meta_data_free>

00025c60 <att_cfm_sent>:
{
   25c60:	b510      	push	{r4, lr}
   25c62:	460c      	mov	r4, r1
	if (!err) {
   25c64:	b90a      	cbnz	r2, 25c6a <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   25c66:	f7ff ffc1 	bl	25bec <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   25c6a:	6820      	ldr	r0, [r4, #0]
   25c6c:	2101      	movs	r1, #1
   25c6e:	3034      	adds	r0, #52	; 0x34
   25c70:	f7ff feaf 	bl	259d2 <atomic_clear_bit>
	tx_meta_data_free(data);
   25c74:	4620      	mov	r0, r4
}
   25c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25c7a:	f7f3 be83 	b.w	19984 <tx_meta_data_free>

00025c7e <att_rsp_sent>:
{
   25c7e:	b510      	push	{r4, lr}
   25c80:	460c      	mov	r4, r1
	if (!err) {
   25c82:	b90a      	cbnz	r2, 25c88 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   25c84:	f7ff ffb2 	bl	25bec <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   25c88:	6820      	ldr	r0, [r4, #0]
   25c8a:	2100      	movs	r1, #0
   25c8c:	3034      	adds	r0, #52	; 0x34
   25c8e:	f7ff fea0 	bl	259d2 <atomic_clear_bit>
	tx_meta_data_free(data);
   25c92:	4620      	mov	r0, r4
}
   25c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25c98:	f7f3 be74 	b.w	19984 <tx_meta_data_free>

00025c9c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ca0:	4688      	mov	r8, r1
   25ca2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25ca4:	2101      	movs	r1, #1
   25ca6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25ca8:	4605      	mov	r5, r0
   25caa:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25cac:	f7f4 f9a0 	bl	19ff0 <bt_att_chan_create_pdu>
	if (!buf) {
   25cb0:	4604      	mov	r4, r0
   25cb2:	b170      	cbz	r0, 25cd2 <send_err_rsp.part.0+0x36>
   25cb4:	2104      	movs	r1, #4
   25cb6:	300c      	adds	r0, #12
   25cb8:	f7f6 fae8 	bl	1c28c <net_buf_simple_add>
	rsp->request = req;
   25cbc:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   25cc0:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   25cc4:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   25cc6:	4621      	mov	r1, r4
   25cc8:	4628      	mov	r0, r5
}
   25cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   25cce:	f7ff bdce 	b.w	2586e <bt_att_chan_send_rsp>
}
   25cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025cd6 <att_write_req>:
{
   25cd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25cd8:	460c      	mov	r4, r1
   25cda:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25cdc:	f101 000c 	add.w	r0, r1, #12
   25ce0:	f000 fb06 	bl	262f0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25ce4:	8a22      	ldrh	r2, [r4, #16]
   25ce6:	9201      	str	r2, [sp, #4]
   25ce8:	68e2      	ldr	r2, [r4, #12]
   25cea:	9200      	str	r2, [sp, #0]
   25cec:	4603      	mov	r3, r0
   25cee:	2213      	movs	r2, #19
   25cf0:	2112      	movs	r1, #18
   25cf2:	4628      	mov	r0, r5
   25cf4:	f7f4 faa0 	bl	1a238 <att_write_rsp.constprop.0>
}
   25cf8:	b003      	add	sp, #12
   25cfa:	bd30      	pop	{r4, r5, pc}

00025cfc <att_write_cmd>:
{
   25cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25cfe:	460c      	mov	r4, r1
   25d00:	4605      	mov	r5, r0
   25d02:	f101 000c 	add.w	r0, r1, #12
   25d06:	f000 faf3 	bl	262f0 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25d0a:	8a22      	ldrh	r2, [r4, #16]
   25d0c:	9201      	str	r2, [sp, #4]
   25d0e:	68e2      	ldr	r2, [r4, #12]
   25d10:	9200      	str	r2, [sp, #0]
   25d12:	2200      	movs	r2, #0
   25d14:	4603      	mov	r3, r0
   25d16:	4611      	mov	r1, r2
   25d18:	4628      	mov	r0, r5
   25d1a:	f7f4 fa8d 	bl	1a238 <att_write_rsp.constprop.0>
}
   25d1e:	b003      	add	sp, #12
   25d20:	bd30      	pop	{r4, r5, pc}

00025d22 <att_read_blob_req>:
{
   25d22:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25d24:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25d26:	8813      	ldrh	r3, [r2, #0]
   25d28:	8852      	ldrh	r2, [r2, #2]
   25d2a:	9200      	str	r2, [sp, #0]
   25d2c:	210c      	movs	r1, #12
   25d2e:	220d      	movs	r2, #13
   25d30:	f7f4 fc48 	bl	1a5c4 <att_read_rsp>
}
   25d34:	b003      	add	sp, #12
   25d36:	f85d fb04 	ldr.w	pc, [sp], #4

00025d3a <att_read_req>:
{
   25d3a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25d3c:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25d3e:	2200      	movs	r2, #0
   25d40:	881b      	ldrh	r3, [r3, #0]
   25d42:	9200      	str	r2, [sp, #0]
   25d44:	210a      	movs	r1, #10
   25d46:	220b      	movs	r2, #11
   25d48:	f7f4 fc3c 	bl	1a5c4 <att_read_rsp>
}
   25d4c:	b003      	add	sp, #12
   25d4e:	f85d fb04 	ldr.w	pc, [sp], #4

00025d52 <att_mtu_req>:
{
   25d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d54:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   25d56:	f850 2b34 	ldr.w	r2, [r0], #52
{
   25d5a:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25d5c:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   25d5e:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25d60:	f7ff fc7d 	bl	2565e <atomic_test_bit>
   25d64:	4604      	mov	r4, r0
   25d66:	b9d8      	cbnz	r0, 25da0 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   25d68:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   25d6a:	881b      	ldrh	r3, [r3, #0]
   25d6c:	2b16      	cmp	r3, #22
   25d6e:	d919      	bls.n	25da4 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   25d70:	4630      	mov	r0, r6
   25d72:	2202      	movs	r2, #2
   25d74:	f7f4 fac4 	bl	1a300 <bt_att_create_pdu>
	if (!pdu) {
   25d78:	4606      	mov	r6, r0
   25d7a:	b1a8      	cbz	r0, 25da8 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   25d7c:	2102      	movs	r1, #2
   25d7e:	300c      	adds	r0, #12
   25d80:	f7f6 fa84 	bl	1c28c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   25d84:	2717      	movs	r7, #23
   25d86:	7007      	strb	r7, [r0, #0]
   25d88:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   25d8a:	4631      	mov	r1, r6
   25d8c:	4628      	mov	r0, r5
   25d8e:	f7ff fd6e 	bl	2586e <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   25d92:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25d94:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25d96:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   25d98:	f7ff fcf2 	bl	25780 <att_chan_mtu_updated>
	return 0;
   25d9c:	4620      	mov	r0, r4
}
   25d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   25da0:	2006      	movs	r0, #6
   25da2:	e7fc      	b.n	25d9e <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   25da4:	2004      	movs	r0, #4
   25da6:	e7fa      	b.n	25d9e <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   25da8:	200e      	movs	r0, #14
   25daa:	e7f8      	b.n	25d9e <att_mtu_req+0x4c>

00025dac <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25dac:	8a0a      	ldrh	r2, [r1, #16]
   25dae:	68c9      	ldr	r1, [r1, #12]
   25db0:	2300      	movs	r3, #0
   25db2:	f7f4 bdb3 	b.w	1a91c <att_handle_rsp>

00025db6 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   25db6:	2001      	movs	r0, #1
   25db8:	4770      	bx	lr

00025dba <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   25dba:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   25dbc:	f7f3 ff90 	bl	19ce0 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   25dc0:	b150      	cbz	r0, 25dd8 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   25dc2:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25dc4:	b144      	cbz	r4, 25dd8 <bt_att_clear_out_of_sync_sent+0x1e>
   25dc6:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   25dc8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   25dcc:	2105      	movs	r1, #5
   25dce:	f7ff fe00 	bl	259d2 <atomic_clear_bit>
	return node->next;
   25dd2:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   25dd6:	e7f5      	b.n	25dc4 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   25dd8:	bd10      	pop	{r4, pc}

00025dda <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   25dda:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   25ddc:	2104      	movs	r1, #4
   25dde:	f7ff fc0f 	bl	25600 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   25de2:	b128      	cbz	r0, 25df0 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   25de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   25de8:	2105      	movs	r1, #5
   25dea:	3030      	adds	r0, #48	; 0x30
   25dec:	f7ff bc37 	b.w	2565e <atomic_test_bit>
}
   25df0:	bd08      	pop	{r3, pc}

00025df2 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   25df2:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   25df4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   25df8:	2201      	movs	r2, #1
   25dfa:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   25dfc:	7403      	strb	r3, [r0, #16]
}
   25dfe:	4770      	bx	lr

00025e00 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   25e00:	6010      	str	r0, [r2, #0]
}
   25e02:	2000      	movs	r0, #0
   25e04:	4770      	bx	lr

00025e06 <gatt_ccc_changed>:
{
   25e06:	460b      	mov	r3, r1
   25e08:	8909      	ldrh	r1, [r1, #8]
   25e0a:	8a5a      	ldrh	r2, [r3, #18]
   25e0c:	4291      	cmp	r1, r2
   25e0e:	bf38      	it	cc
   25e10:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   25e12:	8a9a      	ldrh	r2, [r3, #20]
   25e14:	428a      	cmp	r2, r1
   25e16:	d003      	beq.n	25e20 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   25e18:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   25e1a:	699b      	ldr	r3, [r3, #24]
   25e1c:	b103      	cbz	r3, 25e20 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   25e1e:	4718      	bx	r3
}
   25e20:	4770      	bx	lr

00025e22 <gatt_indicate_rsp>:
{
   25e22:	b510      	push	{r4, lr}
   25e24:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25e26:	68a3      	ldr	r3, [r4, #8]
{
   25e28:	460a      	mov	r2, r1
	if (params->func) {
   25e2a:	b10b      	cbz	r3, 25e30 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25e2c:	4621      	mov	r1, r4
   25e2e:	4798      	blx	r3
	params->_ref--;
   25e30:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25e32:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25e34:	3b01      	subs	r3, #1
   25e36:	b2db      	uxtb	r3, r3
   25e38:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25e3a:	b122      	cbz	r2, 25e46 <gatt_indicate_rsp+0x24>
   25e3c:	b91b      	cbnz	r3, 25e46 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25e3e:	4620      	mov	r0, r4
}
   25e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25e44:	4710      	bx	r2
}
   25e46:	bd10      	pop	{r4, pc}

00025e48 <match_uuid>:
	data->attr = attr;
   25e48:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25e4a:	8091      	strh	r1, [r2, #4]
}
   25e4c:	2000      	movs	r0, #0
   25e4e:	4770      	bx	lr

00025e50 <gen_hash_m>:
{
   25e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25e52:	6807      	ldr	r7, [r0, #0]
   25e54:	783d      	ldrb	r5, [r7, #0]
{
   25e56:	b089      	sub	sp, #36	; 0x24
   25e58:	4606      	mov	r6, r0
   25e5a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25e5c:	b9dd      	cbnz	r5, 25e96 <gen_hash_m+0x46>
	switch (u16->val) {
   25e5e:	887b      	ldrh	r3, [r7, #2]
   25e60:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25e64:	d004      	beq.n	25e70 <gen_hash_m+0x20>
   25e66:	d810      	bhi.n	25e8a <gen_hash_m+0x3a>
   25e68:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25e6c:	2b03      	cmp	r3, #3
   25e6e:	d812      	bhi.n	25e96 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   25e70:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e74:	2202      	movs	r2, #2
   25e76:	f10d 010a 	add.w	r1, sp, #10
   25e7a:	4620      	mov	r0, r4
   25e7c:	f7fe ff68 	bl	24d50 <tc_cmac_update>
   25e80:	b968      	cbnz	r0, 25e9e <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   25e82:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   25e86:	65a2      	str	r2, [r4, #88]	; 0x58
   25e88:	e006      	b.n	25e98 <gen_hash_m+0x48>
	switch (u16->val) {
   25e8a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25e8e:	33ff      	adds	r3, #255	; 0xff
   25e90:	b29b      	uxth	r3, r3
   25e92:	2b04      	cmp	r3, #4
   25e94:	d91e      	bls.n	25ed4 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   25e96:	2501      	movs	r5, #1
}
   25e98:	4628      	mov	r0, r5
   25e9a:	b009      	add	sp, #36	; 0x24
   25e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   25e9e:	887b      	ldrh	r3, [r7, #2]
   25ea0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ea4:	2202      	movs	r2, #2
   25ea6:	f10d 010a 	add.w	r1, sp, #10
   25eaa:	4620      	mov	r0, r4
   25eac:	f7fe ff50 	bl	24d50 <tc_cmac_update>
   25eb0:	2800      	cmp	r0, #0
   25eb2:	d0e6      	beq.n	25e82 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25eb4:	2000      	movs	r0, #0
   25eb6:	9000      	str	r0, [sp, #0]
   25eb8:	aa03      	add	r2, sp, #12
   25eba:	6877      	ldr	r7, [r6, #4]
   25ebc:	2313      	movs	r3, #19
   25ebe:	4631      	mov	r1, r6
   25ec0:	47b8      	blx	r7
		if (len < 0) {
   25ec2:	1e02      	subs	r2, r0, #0
   25ec4:	dbdf      	blt.n	25e86 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   25ec6:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ec8:	4620      	mov	r0, r4
   25eca:	f7fe ff41 	bl	24d50 <tc_cmac_update>
   25ece:	2800      	cmp	r0, #0
   25ed0:	d1e1      	bne.n	25e96 <gen_hash_m+0x46>
   25ed2:	e7d6      	b.n	25e82 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   25ed4:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ed8:	2202      	movs	r2, #2
   25eda:	f10d 010a 	add.w	r1, sp, #10
   25ede:	4620      	mov	r0, r4
   25ee0:	f7fe ff36 	bl	24d50 <tc_cmac_update>
   25ee4:	2800      	cmp	r0, #0
   25ee6:	d0cc      	beq.n	25e82 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   25ee8:	887b      	ldrh	r3, [r7, #2]
   25eea:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25eee:	2202      	movs	r2, #2
   25ef0:	f10d 010a 	add.w	r1, sp, #10
   25ef4:	e7e8      	b.n	25ec8 <gen_hash_m+0x78>

00025ef6 <bt_addr_le_eq>:
{
   25ef6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   25ef8:	2207      	movs	r2, #7
   25efa:	f7fe fff4 	bl	24ee6 <memcmp>
}
   25efe:	fab0 f080 	clz	r0, r0
   25f02:	0940      	lsrs	r0, r0, #5
   25f04:	bd08      	pop	{r3, pc}

00025f06 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25f06:	f3bf 8f5b 	dmb	ish
   25f0a:	6800      	ldr	r0, [r0, #0]
   25f0c:	f3bf 8f5b 	dmb	ish
}
   25f10:	4770      	bx	lr

00025f12 <atomic_or>:
{
   25f12:	b510      	push	{r4, lr}
   25f14:	4603      	mov	r3, r0
}
   25f16:	f3bf 8f5b 	dmb	ish
   25f1a:	e853 0f00 	ldrex	r0, [r3]
   25f1e:	ea40 0201 	orr.w	r2, r0, r1
   25f22:	e843 2400 	strex	r4, r2, [r3]
   25f26:	2c00      	cmp	r4, #0
   25f28:	d1f7      	bne.n	25f1a <atomic_or+0x8>
   25f2a:	f3bf 8f5b 	dmb	ish
   25f2e:	bd10      	pop	{r4, pc}

00025f30 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25f30:	2207      	movs	r2, #7
   25f32:	f7fe bfe8 	b.w	24f06 <memcpy>

00025f36 <z_log_msg_static_create.constprop.0>:
   25f36:	2300      	movs	r3, #0
   25f38:	f7ee b8b6 	b.w	140a8 <z_impl_z_log_msg_static_create>

00025f3c <sc_clear>:
{
   25f3c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25f3e:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   25f42:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25f44:	4631      	mov	r1, r6
   25f46:	7a00      	ldrb	r0, [r0, #8]
   25f48:	f7ff f94c 	bl	251e4 <bt_addr_le_is_bonded>
   25f4c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   25f4e:	4631      	mov	r1, r6
   25f50:	f7f4 fe6c 	bl	1ac2c <find_sc_cfg>
	if (!cfg) {
   25f54:	b128      	cbz	r0, 25f62 <sc_clear+0x26>
}
   25f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   25f5a:	220c      	movs	r2, #12
   25f5c:	2100      	movs	r1, #0
   25f5e:	f7fe bfdd 	b.w	24f1c <memset>
}
   25f62:	bd70      	pop	{r4, r5, r6, pc}

00025f64 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25f64:	2a02      	cmp	r2, #2
{
   25f66:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25f68:	d108      	bne.n	25f7c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25f6a:	2300      	movs	r3, #0
   25f6c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25f70:	461a      	mov	r2, r3
   25f72:	7a00      	ldrb	r0, [r0, #8]
   25f74:	f7f4 ff20 	bl	1adb8 <sc_save>
}
   25f78:	2002      	movs	r0, #2
   25f7a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25f7c:	f7ff ffde 	bl	25f3c <sc_clear>
   25f80:	e7fa      	b.n	25f78 <sc_ccc_cfg_write+0x14>

00025f82 <read_appearance>:
{
   25f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f84:	4615      	mov	r5, r2
   25f86:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25f8a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25f8c:	f7ff f927 	bl	251de <bt_get_appearance>
	if (offset > value_len) {
   25f90:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25f92:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25f96:	d80e      	bhi.n	25fb6 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   25f98:	f1c6 0402 	rsb	r4, r6, #2
   25f9c:	42bc      	cmp	r4, r7
   25f9e:	bfa8      	it	ge
   25fa0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25fa2:	f10d 0306 	add.w	r3, sp, #6
   25fa6:	4622      	mov	r2, r4
   25fa8:	1999      	adds	r1, r3, r6
   25faa:	4628      	mov	r0, r5
   25fac:	f7fe ffab 	bl	24f06 <memcpy>
}
   25fb0:	4620      	mov	r0, r4
   25fb2:	b003      	add	sp, #12
   25fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25fb6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25fba:	e7f9      	b.n	25fb0 <read_appearance+0x2e>

00025fbc <read_name>:
{
   25fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25fc0:	4698      	mov	r8, r3
   25fc2:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25fc6:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25fc8:	f7f1 fd30 	bl	17a2c <bt_get_name>
   25fcc:	4607      	mov	r7, r0
				 strlen(name));
   25fce:	f7fe ff7a 	bl	24ec6 <strlen>
	if (offset > value_len) {
   25fd2:	b283      	uxth	r3, r0
   25fd4:	42b3      	cmp	r3, r6
   25fd6:	d30c      	bcc.n	25ff2 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25fd8:	1b9c      	subs	r4, r3, r6
   25fda:	4544      	cmp	r4, r8
   25fdc:	bfa8      	it	ge
   25fde:	4644      	movge	r4, r8
   25fe0:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25fe2:	4622      	mov	r2, r4
   25fe4:	19b9      	adds	r1, r7, r6
   25fe6:	4628      	mov	r0, r5
   25fe8:	f7fe ff8d 	bl	24f06 <memcpy>
}
   25fec:	4620      	mov	r0, r4
   25fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25ff2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25ff6:	e7f9      	b.n	25fec <read_name+0x30>

00025ff8 <cf_read>:
{
   25ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25ffa:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25ffc:	2300      	movs	r3, #0
{
   25ffe:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   26002:	f88d 3004 	strb.w	r3, [sp, #4]
{
   26006:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   26008:	f7f4 fde2 	bl	1abd0 <find_cf_cfg>
	if (cfg) {
   2600c:	b128      	cbz	r0, 2601a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2600e:	f100 0108 	add.w	r1, r0, #8
   26012:	2201      	movs	r2, #1
   26014:	a801      	add	r0, sp, #4
   26016:	f7fe ff76 	bl	24f06 <memcpy>
	if (offset > value_len) {
   2601a:	2e01      	cmp	r6, #1
   2601c:	d80d      	bhi.n	2603a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2601e:	f1c6 0401 	rsb	r4, r6, #1
   26022:	42bc      	cmp	r4, r7
   26024:	bfa8      	it	ge
   26026:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26028:	ab01      	add	r3, sp, #4
   2602a:	4622      	mov	r2, r4
   2602c:	1999      	adds	r1, r3, r6
   2602e:	4628      	mov	r0, r5
   26030:	f7fe ff69 	bl	24f06 <memcpy>
}
   26034:	4620      	mov	r0, r4
   26036:	b003      	add	sp, #12
   26038:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2603a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2603e:	e7f9      	b.n	26034 <cf_read+0x3c>

00026040 <bt_gatt_attr_read_service>:
{
   26040:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   26042:	68c9      	ldr	r1, [r1, #12]
{
   26044:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26046:	780a      	ldrb	r2, [r1, #0]
{
   26048:	461c      	mov	r4, r3
   2604a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2604e:	b992      	cbnz	r2, 26076 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26050:	884a      	ldrh	r2, [r1, #2]
   26052:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   26056:	2b02      	cmp	r3, #2
   26058:	d818      	bhi.n	2608c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2605a:	f1c3 0202 	rsb	r2, r3, #2
   2605e:	4294      	cmp	r4, r2
   26060:	bfa8      	it	ge
   26062:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   26064:	4622      	mov	r2, r4
   26066:	f10d 0106 	add.w	r1, sp, #6
   2606a:	4419      	add	r1, r3
   2606c:	f7fe ff4b 	bl	24f06 <memcpy>
}
   26070:	4620      	mov	r0, r4
   26072:	b002      	add	sp, #8
   26074:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   26076:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   26078:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2607c:	d806      	bhi.n	2608c <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2607e:	f1c3 0210 	rsb	r2, r3, #16
   26082:	4294      	cmp	r4, r2
   26084:	bfa8      	it	ge
   26086:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   26088:	4622      	mov	r2, r4
   2608a:	e7ee      	b.n	2606a <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2608c:	f06f 0406 	mvn.w	r4, #6
   26090:	e7ee      	b.n	26070 <bt_gatt_attr_read_service+0x30>

00026092 <bt_gatt_attr_read_ccc>:
{
   26092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   26094:	68c9      	ldr	r1, [r1, #12]
{
   26096:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2609a:	4615      	mov	r5, r2
   2609c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2609e:	f7f4 fde7 	bl	1ac70 <find_ccc_cfg>
	if (cfg) {
   260a2:	b100      	cbz	r0, 260a6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   260a4:	8900      	ldrh	r0, [r0, #8]
   260a6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   260aa:	2e02      	cmp	r6, #2
   260ac:	d80e      	bhi.n	260cc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   260ae:	f1c6 0402 	rsb	r4, r6, #2
   260b2:	42bc      	cmp	r4, r7
   260b4:	bfa8      	it	ge
   260b6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   260b8:	f10d 0306 	add.w	r3, sp, #6
   260bc:	4622      	mov	r2, r4
   260be:	1999      	adds	r1, r3, r6
   260c0:	4628      	mov	r0, r5
   260c2:	f7fe ff20 	bl	24f06 <memcpy>
}
   260c6:	4620      	mov	r0, r4
   260c8:	b003      	add	sp, #12
   260ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   260cc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   260d0:	e7f9      	b.n	260c6 <bt_gatt_attr_read_ccc+0x34>

000260d2 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   260d2:	2101      	movs	r1, #1
   260d4:	300c      	adds	r0, #12
   260d6:	f7ff bf1c 	b.w	25f12 <atomic_or>

000260da <sc_restore_rsp>:
{
   260da:	b538      	push	{r3, r4, r5, lr}
   260dc:	4604      	mov	r4, r0
   260de:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   260e0:	f7ff fe69 	bl	25db6 <bt_att_fixed_chan_only>
   260e4:	b140      	cbz	r0, 260f8 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   260e6:	4620      	mov	r0, r4
   260e8:	f7f4 fd72 	bl	1abd0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   260ec:	b120      	cbz	r0, 260f8 <sc_restore_rsp+0x1e>
   260ee:	7a03      	ldrb	r3, [r0, #8]
   260f0:	07db      	lsls	r3, r3, #31
   260f2:	d501      	bpl.n	260f8 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   260f4:	f7ff ffed 	bl	260d2 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   260f8:	b965      	cbnz	r5, 26114 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   260fa:	7a20      	ldrb	r0, [r4, #8]
   260fc:	f104 0190 	add.w	r1, r4, #144	; 0x90
   26100:	f7f4 fd94 	bl	1ac2c <find_sc_cfg>
		if (sc_cfg) {
   26104:	b130      	cbz	r0, 26114 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   26106:	4629      	mov	r1, r5
   26108:	2204      	movs	r2, #4
}
   2610a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   2610e:	3008      	adds	r0, #8
   26110:	f7fe bf04 	b.w	24f1c <memset>
}
   26114:	bd38      	pop	{r3, r4, r5, pc}

00026116 <bt_gatt_attr_value_handle>:
{
   26116:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26118:	4604      	mov	r4, r0
   2611a:	b910      	cbnz	r0, 26122 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2611c:	2000      	movs	r0, #0
}
   2611e:	b002      	add	sp, #8
   26120:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26122:	2300      	movs	r3, #0
   26124:	f88d 3004 	strb.w	r3, [sp, #4]
   26128:	6800      	ldr	r0, [r0, #0]
   2612a:	f642 0303 	movw	r3, #10243	; 0x2803
   2612e:	a901      	add	r1, sp, #4
   26130:	f8ad 3006 	strh.w	r3, [sp, #6]
   26134:	f7fe ff1d 	bl	24f72 <bt_uuid_cmp>
   26138:	2800      	cmp	r0, #0
   2613a:	d1ef      	bne.n	2611c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2613c:	68e3      	ldr	r3, [r4, #12]
   2613e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   26140:	2800      	cmp	r0, #0
   26142:	d1ec      	bne.n	2611e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   26144:	4620      	mov	r0, r4
   26146:	f7f4 ffbd 	bl	1b0c4 <bt_gatt_attr_get_handle>
   2614a:	3001      	adds	r0, #1
   2614c:	b280      	uxth	r0, r0
	return handle;
   2614e:	e7e6      	b.n	2611e <bt_gatt_attr_value_handle+0x8>

00026150 <bt_gatt_attr_read_chrc>:
{
   26150:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   26152:	68cc      	ldr	r4, [r1, #12]
{
   26154:	b087      	sub	sp, #28
   26156:	4608      	mov	r0, r1
   26158:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2615a:	79a3      	ldrb	r3, [r4, #6]
   2615c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   26160:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   26164:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26166:	f7ff ffd6 	bl	26116 <bt_gatt_attr_value_handle>
   2616a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2616e:	6821      	ldr	r1, [r4, #0]
   26170:	780b      	ldrb	r3, [r1, #0]
   26172:	b99b      	cbnz	r3, 2619c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   26174:	884b      	ldrh	r3, [r1, #2]
   26176:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2617a:	2405      	movs	r4, #5
	if (offset > value_len) {
   2617c:	42b4      	cmp	r4, r6
   2617e:	d315      	bcc.n	261ac <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   26180:	1ba4      	subs	r4, r4, r6
   26182:	42bc      	cmp	r4, r7
   26184:	bfa8      	it	ge
   26186:	463c      	movge	r4, r7
   26188:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2618a:	ab01      	add	r3, sp, #4
   2618c:	4622      	mov	r2, r4
   2618e:	1999      	adds	r1, r3, r6
   26190:	4628      	mov	r0, r5
   26192:	f7fe feb8 	bl	24f06 <memcpy>
}
   26196:	4620      	mov	r0, r4
   26198:	b007      	add	sp, #28
   2619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2619c:	2210      	movs	r2, #16
   2619e:	3101      	adds	r1, #1
   261a0:	f10d 0007 	add.w	r0, sp, #7
   261a4:	f7fe feaf 	bl	24f06 <memcpy>
		value_len += 16U;
   261a8:	2413      	movs	r4, #19
   261aa:	e7e7      	b.n	2617c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   261ac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   261b0:	e7f1      	b.n	26196 <bt_gatt_attr_read_chrc+0x46>

000261b2 <bt_gatt_foreach_attr>:
{
   261b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   261b4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   261b8:	2300      	movs	r3, #0
   261ba:	9300      	str	r3, [sp, #0]
   261bc:	461a      	mov	r2, r3
   261be:	f7f4 ffc9 	bl	1b154 <bt_gatt_foreach_attr_type>
}
   261c2:	b005      	add	sp, #20
   261c4:	f85d fb04 	ldr.w	pc, [sp], #4

000261c8 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   261c8:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   261cc:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   261ce:	d004      	beq.n	261da <bt_gatt_check_perm+0x12>
   261d0:	f013 0f95 	tst.w	r3, #149	; 0x95
   261d4:	d010      	beq.n	261f8 <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   261d6:	6848      	ldr	r0, [r1, #4]
   261d8:	b170      	cbz	r0, 261f8 <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   261da:	f012 0f02 	tst.w	r2, #2
   261de:	d004      	beq.n	261ea <bt_gatt_check_perm+0x22>
   261e0:	f413 7f95 	tst.w	r3, #298	; 0x12a
   261e4:	d00a      	beq.n	261fc <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   261e6:	6889      	ldr	r1, [r1, #8]
   261e8:	b141      	cbz	r1, 261fc <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   261ea:	401a      	ands	r2, r3
	return 0;
   261ec:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   261f0:	bf14      	ite	ne
   261f2:	2005      	movne	r0, #5
   261f4:	2000      	moveq	r0, #0
   261f6:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   261f8:	2002      	movs	r0, #2
   261fa:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   261fc:	2003      	movs	r0, #3
}
   261fe:	4770      	bx	lr

00026200 <bt_gatt_change_aware>:
{
   26200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26204:	4605      	mov	r5, r0
   26206:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   26208:	f7f4 fce2 	bl	1abd0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2620c:	4604      	mov	r4, r0
   2620e:	b308      	cbz	r0, 26254 <bt_gatt_change_aware+0x54>
   26210:	7a03      	ldrb	r3, [r0, #8]
   26212:	07da      	lsls	r2, r3, #31
   26214:	d51e      	bpl.n	26254 <bt_gatt_change_aware+0x54>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26216:	f100 060c 	add.w	r6, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2621a:	4630      	mov	r0, r6
   2621c:	f7ff fe73 	bl	25f06 <atomic_get>
   26220:	f010 0701 	ands.w	r7, r0, #1
   26224:	d116      	bne.n	26254 <bt_gatt_change_aware+0x54>
	if (!req) {
   26226:	f1b8 0f00 	cmp.w	r8, #0
   2622a:	d014      	beq.n	26256 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2622c:	f3bf 8f5b 	dmb	ish
   26230:	e856 3f00 	ldrex	r3, [r6]
   26234:	f023 0202 	bic.w	r2, r3, #2
   26238:	e846 2100 	strex	r1, r2, [r6]
   2623c:	2900      	cmp	r1, #0
   2623e:	d1f7      	bne.n	26230 <bt_gatt_change_aware+0x30>
   26240:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   26244:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   26246:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   26248:	d508      	bpl.n	2625c <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   2624a:	f7ff fdb6 	bl	25dba <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   2624e:	4620      	mov	r0, r4
   26250:	f7ff ff3f 	bl	260d2 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   26254:	2701      	movs	r7, #1
}
   26256:	4638      	mov	r0, r7
   26258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2625c:	f7ff fdab 	bl	25db6 <bt_att_fixed_chan_only>
   26260:	2800      	cmp	r0, #0
   26262:	d0f8      	beq.n	26256 <bt_gatt_change_aware+0x56>
   26264:	4628      	mov	r0, r5
   26266:	f7ff fdb8 	bl	25dda <bt_att_out_of_sync_sent_on_fixed>
   2626a:	2800      	cmp	r0, #0
   2626c:	d0f3      	beq.n	26256 <bt_gatt_change_aware+0x56>
   2626e:	f3bf 8f5b 	dmb	ish
   26272:	e856 3f00 	ldrex	r3, [r6]
   26276:	f023 0302 	bic.w	r3, r3, #2
   2627a:	e846 3200 	strex	r2, r3, [r6]
   2627e:	2a00      	cmp	r2, #0
   26280:	d1f7      	bne.n	26272 <bt_gatt_change_aware+0x72>
   26282:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   26286:	4628      	mov	r0, r5
   26288:	e7df      	b.n	2624a <bt_gatt_change_aware+0x4a>

0002628a <bt_smp_recv>:
{
   2628a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2628c:	2100      	movs	r1, #0
   2628e:	f04f 32ff 	mov.w	r2, #4294967295
   26292:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   26296:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   26298:	4608      	mov	r0, r1
   2629a:	f7ff f995 	bl	255c8 <bt_l2cap_create_pdu_timeout>
   2629e:	f100 060c 	add.w	r6, r0, #12
   262a2:	4604      	mov	r4, r0
   262a4:	2101      	movs	r1, #1
   262a6:	4630      	mov	r0, r6
   262a8:	f7f5 fff0 	bl	1c28c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   262ac:	2505      	movs	r5, #5
   262ae:	7005      	strb	r5, [r0, #0]
   262b0:	2101      	movs	r1, #1
   262b2:	4630      	mov	r0, r6
   262b4:	f7f5 ffea 	bl	1c28c <net_buf_simple_add>
   262b8:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   262ba:	7005      	strb	r5, [r0, #0]
   262bc:	4622      	mov	r2, r4
   262be:	9300      	str	r3, [sp, #0]
   262c0:	2106      	movs	r1, #6
   262c2:	4638      	mov	r0, r7
   262c4:	f7ff f983 	bl	255ce <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   262c8:	b110      	cbz	r0, 262d0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   262ca:	4620      	mov	r0, r4
   262cc:	f7f5 fe9a 	bl	1c004 <net_buf_unref>
}
   262d0:	2000      	movs	r0, #0
   262d2:	b003      	add	sp, #12
   262d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000262d6 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   262d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   262da:	4770      	bx	lr

000262dc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   262dc:	2000      	movs	r0, #0
   262de:	4770      	bx	lr

000262e0 <fixed_data_unref>:
}
   262e0:	4770      	bx	lr

000262e2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   262e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   262e4:	6849      	ldr	r1, [r1, #4]
   262e6:	6809      	ldr	r1, [r1, #0]
   262e8:	f7f5 bcaa 	b.w	1bc40 <net_buf_alloc_len>

000262ec <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   262ec:	f7fa bc3a 	b.w	20b64 <z_impl_k_queue_get>

000262f0 <net_buf_simple_pull_le16>:
{
   262f0:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   262f2:	6803      	ldr	r3, [r0, #0]
   262f4:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   262f6:	2102      	movs	r1, #2
   262f8:	f7f5 ff8c 	bl	1c214 <net_buf_simple_pull>
}
   262fc:	4620      	mov	r0, r4
   262fe:	bd10      	pop	{r4, pc}

00026300 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   26300:	6802      	ldr	r2, [r0, #0]
   26302:	6880      	ldr	r0, [r0, #8]
}
   26304:	1a10      	subs	r0, r2, r0
   26306:	4770      	bx	lr

00026308 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26308:	8883      	ldrh	r3, [r0, #4]
   2630a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2630c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2630e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26310:	6803      	ldr	r3, [r0, #0]
   26312:	1a5b      	subs	r3, r3, r1
}
   26314:	1ad0      	subs	r0, r2, r3
   26316:	4770      	bx	lr

00026318 <net_buf_simple_add_mem>:
{
   26318:	b538      	push	{r3, r4, r5, lr}
   2631a:	460d      	mov	r5, r1
   2631c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2631e:	4611      	mov	r1, r2
   26320:	f7f5 ffb4 	bl	1c28c <net_buf_simple_add>
   26324:	4622      	mov	r2, r4
   26326:	4629      	mov	r1, r5
}
   26328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2632c:	f7fe bdeb 	b.w	24f06 <memcpy>

00026330 <net_buf_simple_add_u8>:
{
   26330:	b510      	push	{r4, lr}
   26332:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   26334:	2101      	movs	r1, #1
   26336:	f7f5 ffa9 	bl	1c28c <net_buf_simple_add>
	*u8 = val;
   2633a:	7004      	strb	r4, [r0, #0]
}
   2633c:	bd10      	pop	{r4, pc}

0002633e <set_on_state>:
	__asm__ volatile(
   2633e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26342:	f3ef 8211 	mrs	r2, BASEPRI
   26346:	f383 8812 	msr	BASEPRI_MAX, r3
   2634a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2634e:	6803      	ldr	r3, [r0, #0]
   26350:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26354:	f043 0302 	orr.w	r3, r3, #2
   26358:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2635a:	f382 8811 	msr	BASEPRI, r2
   2635e:	f3bf 8f6f 	isb	sy
}
   26362:	4770      	bx	lr

00026364 <async_start>:
{
   26364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26366:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   26368:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2636a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2636c:	f04f 0540 	mov.w	r5, #64	; 0x40
   26370:	f3ef 8611 	mrs	r6, BASEPRI
   26374:	f385 8812 	msr	BASEPRI_MAX, r5
   26378:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2637c:	250c      	movs	r5, #12
   2637e:	4369      	muls	r1, r5
   26380:	440c      	add	r4, r1
   26382:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   26384:	f005 0c07 	and.w	ip, r5, #7
   26388:	f1bc 0f01 	cmp.w	ip, #1
   2638c:	d10b      	bne.n	263a6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2638e:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   26390:	f386 8811 	msr	BASEPRI, r6
   26394:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   26398:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2639c:	6843      	ldr	r3, [r0, #4]
   2639e:	585b      	ldr	r3, [r3, r1]
   263a0:	4798      	blx	r3
	return 0;
   263a2:	2000      	movs	r0, #0
}
   263a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   263a6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   263aa:	42af      	cmp	r7, r5
   263ac:	f386 8811 	msr	BASEPRI, r6
   263b0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   263b4:	bf0c      	ite	eq
   263b6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   263ba:	f04f 30ff 	movne.w	r0, #4294967295
   263be:	e7f1      	b.n	263a4 <async_start+0x40>

000263c0 <api_start>:
{
   263c0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   263c2:	2480      	movs	r4, #128	; 0x80
   263c4:	9400      	str	r4, [sp, #0]
   263c6:	f7ff ffcd 	bl	26364 <async_start>
}
   263ca:	b002      	add	sp, #8
   263cc:	bd10      	pop	{r4, pc}

000263ce <onoff_started_callback>:
	return &data->mgr[type];
   263ce:	6900      	ldr	r0, [r0, #16]
   263d0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   263d2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   263d6:	2100      	movs	r1, #0
   263d8:	4710      	bx	r2

000263da <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   263da:	2000      	movs	r0, #0
   263dc:	f7f8 be92 	b.w	1f104 <nrfx_clock_stop>

000263e0 <blocking_start_callback>:
{
   263e0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   263e2:	f7fa bc29 	b.w	20c38 <z_impl_k_sem_give>

000263e6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   263e6:	2280      	movs	r2, #128	; 0x80
   263e8:	f7f5 bfa8 	b.w	1c33c <stop>

000263ec <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   263ec:	2000      	movs	r0, #0
   263ee:	4770      	bx	lr

000263f0 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   263f0:	b538      	push	{r3, r4, r5, lr}
   263f2:	460c      	mov	r4, r1
   263f4:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   263f6:	f7f1 fb0d 	bl	17a14 <bt_is_ready>
   263fa:	b128      	cbz	r0, 26408 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   263fc:	4629      	mov	r1, r5
   263fe:	4620      	mov	r0, r4
}
   26400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   26404:	f7f0 bb5c 	b.w	16ac0 <bt_hci_le_rand>
}
   26408:	f06f 000a 	mvn.w	r0, #10
   2640c:	bd38      	pop	{r3, r4, r5, pc}

0002640e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2640e:	6843      	ldr	r3, [r0, #4]
   26410:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26412:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   26416:	600b      	str	r3, [r1, #0]
}
   26418:	2000      	movs	r0, #0
   2641a:	4770      	bx	lr

0002641c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2641c:	6843      	ldr	r3, [r0, #4]
   2641e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   26420:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   26424:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   26428:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2642c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   26430:	2000      	movs	r0, #0
   26432:	4770      	bx	lr

00026434 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26434:	6843      	ldr	r3, [r0, #4]
   26436:	685b      	ldr	r3, [r3, #4]
}
   26438:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2643a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2643e:	4770      	bx	lr

00026440 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26440:	6843      	ldr	r3, [r0, #4]
   26442:	685b      	ldr	r3, [r3, #4]
}
   26444:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26446:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2644a:	4770      	bx	lr

0002644c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2644c:	6843      	ldr	r3, [r0, #4]
   2644e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26450:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   26454:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   26458:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2645a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2645e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   26462:	2000      	movs	r0, #0
   26464:	4770      	bx	lr

00026466 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   26466:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   26468:	6843      	ldr	r3, [r0, #4]
   2646a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2646c:	7a05      	ldrb	r5, [r0, #8]
   2646e:	6844      	ldr	r4, [r0, #4]
   26470:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   26474:	42a3      	cmp	r3, r4
   26476:	d302      	bcc.n	2647e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   26478:	f06f 0001 	mvn.w	r0, #1
}
   2647c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2647e:	795c      	ldrb	r4, [r3, #5]
   26480:	428c      	cmp	r4, r1
   26482:	d001      	beq.n	26488 <pinctrl_lookup_state+0x22>
		(*state)++;
   26484:	3308      	adds	r3, #8
   26486:	e7f0      	b.n	2646a <pinctrl_lookup_state+0x4>
			return 0;
   26488:	2000      	movs	r0, #0
   2648a:	e7f7      	b.n	2647c <pinctrl_lookup_state+0x16>

0002648c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26490:	4615      	mov	r5, r2
   26492:	b085      	sub	sp, #20
   26494:	4681      	mov	r9, r0
   26496:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2649a:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2649e:	454f      	cmp	r7, r9
   264a0:	d103      	bne.n	264aa <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   264a2:	2000      	movs	r0, #0
}
   264a4:	b005      	add	sp, #20
   264a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   264aa:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   264ae:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   264b2:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   264b6:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   264b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   264bc:	bf08      	it	eq
   264be:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   264c2:	2b19      	cmp	r3, #25
   264c4:	d876      	bhi.n	265b4 <pinctrl_configure_pins+0x128>
   264c6:	e8df f003 	tbb	[pc, r3]
   264ca:	1a0d      	.short	0x1a0d
   264cc:	35262320 	.word	0x35262320
   264d0:	75757523 	.word	0x75757523
   264d4:	75603a75 	.word	0x75603a75
   264d8:	75757575 	.word	0x75757575
   264dc:	75757575 	.word	0x75757575
   264e0:	726f6c63 	.word	0x726f6c63
			NRF_PSEL_UART(reg, TXD) = pin;
   264e4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   264e8:	a803      	add	r0, sp, #12
   264ea:	9403      	str	r4, [sp, #12]
   264ec:	f7f6 fc9a 	bl	1ce24 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   264f0:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTSET = set_mask;
   264f4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   264f8:	f04f 0a01 	mov.w	sl, #1
   264fc:	e003      	b.n	26506 <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
   264fe:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   26502:	f04f 0a00 	mov.w	sl, #0
   26506:	46d3      	mov	fp, sl
   26508:	e021      	b.n	2654e <pinctrl_configure_pins+0xc2>
			NRF_PSEL_UART(reg, RTS) = pin;
   2650a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2650e:	e7eb      	b.n	264e8 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   26510:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   26514:	e7f5      	b.n	26502 <pinctrl_configure_pins+0x76>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   26516:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2651a:	f04f 0a00 	mov.w	sl, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2651e:	a803      	add	r0, sp, #12
   26520:	9403      	str	r4, [sp, #12]
   26522:	f7f6 fc7f 	bl	1ce24 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26526:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   2652a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   2652e:	f04f 0b01 	mov.w	fp, #1
   26532:	e00c      	b.n	2654e <pinctrl_configure_pins+0xc2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   26534:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   26538:	f04f 0a01 	mov.w	sl, #1
   2653c:	e7ef      	b.n	2651e <pinctrl_configure_pins+0x92>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2653e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   26542:	2e00      	cmp	r6, #0
   26544:	d1dd      	bne.n	26502 <pinctrl_configure_pins+0x76>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   26546:	f04f 0a00 	mov.w	sl, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2654a:	46d3      	mov	fp, sl
				drive = NRF_DRIVE_S0D1;
   2654c:	2606      	movs	r6, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2654e:	f859 3b04 	ldr.w	r3, [r9], #4
   26552:	9301      	str	r3, [sp, #4]
   26554:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   26558:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2655a:	a803      	add	r0, sp, #12
   2655c:	bf1c      	itt	ne
   2655e:	f04f 0a01 	movne.w	sl, #1
   26562:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   26566:	9403      	str	r4, [sp, #12]
   26568:	f7f6 fc5c 	bl	1ce24 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2656c:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2656e:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26570:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   26574:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   26578:	ea46 060b 	orr.w	r6, r6, fp
    reg->PIN_CNF[pin_number] = cnf;
   2657c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   26580:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   26584:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   26588:	e789      	b.n	2649e <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2658a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2658e:	e7d8      	b.n	26542 <pinctrl_configure_pins+0xb6>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   26590:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   26594:	f8d9 3000 	ldr.w	r3, [r9]
   26598:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2659c:	2b00      	cmp	r3, #0
   2659e:	d0cb      	beq.n	26538 <pinctrl_configure_pins+0xac>
   265a0:	e7a2      	b.n	264e8 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   265a2:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   265a6:	e7f5      	b.n	26594 <pinctrl_configure_pins+0x108>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   265a8:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   265ac:	e7f2      	b.n	26594 <pinctrl_configure_pins+0x108>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   265ae:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   265b2:	e7ef      	b.n	26594 <pinctrl_configure_pins+0x108>
		switch (NRF_GET_FUN(pins[i])) {
   265b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   265b8:	e774      	b.n	264a4 <pinctrl_configure_pins+0x18>

000265ba <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   265ba:	6902      	ldr	r2, [r0, #16]
{
   265bc:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   265be:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   265c2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   265c6:	2000      	movs	r0, #0
   265c8:	4770      	bx	lr

000265ca <uarte_nrfx_err_check>:
	return config->uarte_regs;
   265ca:	6843      	ldr	r3, [r0, #4]
   265cc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   265ce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   265d2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   265d6:	4770      	bx	lr

000265d8 <tx_start>:
{
   265d8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   265da:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   265dc:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   265de:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   265e2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   265e6:	2200      	movs	r2, #0
   265e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   265ec:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   265f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   265f4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   265f8:	6862      	ldr	r2, [r4, #4]
   265fa:	06d2      	lsls	r2, r2, #27
   265fc:	d511      	bpl.n	26622 <tx_start+0x4a>
	if (data->async) {
   265fe:	6902      	ldr	r2, [r0, #16]
   26600:	68d2      	ldr	r2, [r2, #12]
   26602:	b12a      	cbz	r2, 26610 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   26604:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   26608:	f041 0101 	orr.w	r1, r1, #1
   2660c:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   26610:	6842      	ldr	r2, [r0, #4]
   26612:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26614:	2108      	movs	r1, #8
   26616:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2661a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2661e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26622:	2201      	movs	r2, #1
   26624:	609a      	str	r2, [r3, #8]
}
   26626:	bd10      	pop	{r4, pc}

00026628 <user_callback>:
	if (data->async->user_callback) {
   26628:	6903      	ldr	r3, [r0, #16]
   2662a:	68da      	ldr	r2, [r3, #12]
   2662c:	6813      	ldr	r3, [r2, #0]
   2662e:	b10b      	cbz	r3, 26634 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   26630:	6852      	ldr	r2, [r2, #4]
   26632:	4718      	bx	r3
}
   26634:	4770      	bx	lr

00026636 <notify_uart_rx_rdy>:
{
   26636:	b570      	push	{r4, r5, r6, lr}
   26638:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2663a:	6906      	ldr	r6, [r0, #16]
{
   2663c:	4604      	mov	r4, r0
   2663e:	460d      	mov	r5, r1
	struct uart_event evt = {
   26640:	2214      	movs	r2, #20
   26642:	2100      	movs	r1, #0
   26644:	a801      	add	r0, sp, #4
   26646:	f7fe fc69 	bl	24f1c <memset>
   2664a:	2302      	movs	r3, #2
   2664c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   26650:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   26652:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   26654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   26656:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   26658:	a901      	add	r1, sp, #4
   2665a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2665c:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   26660:	f7ff ffe2 	bl	26628 <user_callback>
}
   26664:	b006      	add	sp, #24
   26666:	bd70      	pop	{r4, r5, r6, pc}

00026668 <rx_buf_release>:
{
   26668:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2666a:	680e      	ldr	r6, [r1, #0]
{
   2666c:	b086      	sub	sp, #24
   2666e:	4605      	mov	r5, r0
   26670:	460c      	mov	r4, r1
	if (*buf) {
   26672:	b17e      	cbz	r6, 26694 <rx_buf_release+0x2c>
		struct uart_event evt = {
   26674:	2214      	movs	r2, #20
   26676:	2100      	movs	r1, #0
   26678:	a801      	add	r0, sp, #4
   2667a:	f7fe fc4f 	bl	24f1c <memset>
   2667e:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   26680:	eb0d 0103 	add.w	r1, sp, r3
   26684:	4628      	mov	r0, r5
		struct uart_event evt = {
   26686:	f88d 3004 	strb.w	r3, [sp, #4]
   2668a:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2668c:	f7ff ffcc 	bl	26628 <user_callback>
		*buf = NULL;
   26690:	2300      	movs	r3, #0
   26692:	6023      	str	r3, [r4, #0]
}
   26694:	b006      	add	sp, #24
   26696:	bd70      	pop	{r4, r5, r6, pc}

00026698 <notify_rx_disable>:
{
   26698:	b510      	push	{r4, lr}
   2669a:	b086      	sub	sp, #24
   2669c:	4604      	mov	r4, r0
	struct uart_event evt = {
   2669e:	2214      	movs	r2, #20
   266a0:	2100      	movs	r1, #0
   266a2:	a801      	add	r0, sp, #4
   266a4:	f7fe fc3a 	bl	24f1c <memset>
   266a8:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   266aa:	a901      	add	r1, sp, #4
   266ac:	4620      	mov	r0, r4
	struct uart_event evt = {
   266ae:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   266b2:	f7ff ffb9 	bl	26628 <user_callback>
}
   266b6:	b006      	add	sp, #24
   266b8:	bd10      	pop	{r4, pc}

000266ba <uarte_nrfx_rx_buf_rsp>:
{
   266ba:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   266bc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   266be:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   266c0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   266c2:	f04f 0040 	mov.w	r0, #64	; 0x40
   266c6:	f3ef 8611 	mrs	r6, BASEPRI
   266ca:	f380 8812 	msr	BASEPRI_MAX, r0
   266ce:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   266d2:	68ec      	ldr	r4, [r5, #12]
   266d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   266d6:	b198      	cbz	r0, 26700 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   266d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
   266da:	b9a0      	cbnz	r0, 26706 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   266dc:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   266de:	68ec      	ldr	r4, [r5, #12]
   266e0:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   266e2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   266e6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   266ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   266ee:	f042 0220 	orr.w	r2, r2, #32
   266f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   266f6:	f386 8811 	msr	BASEPRI, r6
   266fa:	f3bf 8f6f 	isb	sy
}
   266fe:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   26700:	f06f 000c 	mvn.w	r0, #12
   26704:	e7f7      	b.n	266f6 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   26706:	f06f 000f 	mvn.w	r0, #15
   2670a:	e7f4      	b.n	266f6 <uarte_nrfx_rx_buf_rsp+0x3c>

0002670c <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2670c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2670e:	68d8      	ldr	r0, [r3, #12]
   26710:	b120      	cbz	r0, 2671c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   26712:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   26714:	68db      	ldr	r3, [r3, #12]
	return 0;
   26716:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   26718:	605a      	str	r2, [r3, #4]
	return 0;
   2671a:	4770      	bx	lr
		return -ENOTSUP;
   2671c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   26720:	4770      	bx	lr

00026722 <uarte_nrfx_poll_in>:
{
   26722:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   26724:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   26726:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   26728:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2672a:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2672c:	b960      	cbnz	r0, 26748 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2672e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26732:	b164      	cbz	r4, 2674e <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   26734:	6992      	ldr	r2, [r2, #24]
   26736:	7812      	ldrb	r2, [r2, #0]
   26738:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2673a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2673e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26742:	2201      	movs	r2, #1
   26744:	601a      	str	r2, [r3, #0]
}
   26746:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   26748:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2674c:	e7fb      	b.n	26746 <uarte_nrfx_poll_in+0x24>
		return -1;
   2674e:	f04f 30ff 	mov.w	r0, #4294967295
   26752:	e7f8      	b.n	26746 <uarte_nrfx_poll_in+0x24>

00026754 <uarte_nrfx_rx_disable>:
{
   26754:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   26756:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   26758:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2675a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2675c:	68eb      	ldr	r3, [r5, #12]
   2675e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   26760:	b1d2      	cbz	r2, 26798 <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   26762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   26764:	b153      	cbz	r3, 2677c <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   26766:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2676a:	f023 0320 	bic.w	r3, r3, #32
   2676e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26772:	2300      	movs	r3, #0
   26774:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   26778:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2677c:	68e8      	ldr	r0, [r5, #12]
   2677e:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   26780:	f000 fba3 	bl	26eca <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   26784:	68eb      	ldr	r3, [r5, #12]
   26786:	2000      	movs	r0, #0
   26788:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   2678c:	68ea      	ldr	r2, [r5, #12]
   2678e:	2301      	movs	r3, #1
   26790:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26794:	6063      	str	r3, [r4, #4]
}
   26796:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   26798:	f06f 000d 	mvn.w	r0, #13
   2679c:	e7fb      	b.n	26796 <uarte_nrfx_rx_disable+0x42>

0002679e <setup_tx_cache>:
{
   2679e:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   267a0:	68c3      	ldr	r3, [r0, #12]
   267a2:	68da      	ldr	r2, [r3, #12]
   267a4:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   267a6:	1a52      	subs	r2, r2, r1
   267a8:	d00f      	beq.n	267ca <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   267aa:	2a08      	cmp	r2, #8
   267ac:	bf28      	it	cs
   267ae:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   267b0:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   267b2:	68c3      	ldr	r3, [r0, #12]
   267b4:	6999      	ldr	r1, [r3, #24]
   267b6:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   267b8:	68c3      	ldr	r3, [r0, #12]
   267ba:	6898      	ldr	r0, [r3, #8]
   267bc:	69d9      	ldr	r1, [r3, #28]
   267be:	4401      	add	r1, r0
   267c0:	6998      	ldr	r0, [r3, #24]
   267c2:	f7fe fba0 	bl	24f06 <memcpy>
	return true;
   267c6:	2001      	movs	r0, #1
}
   267c8:	bd08      	pop	{r3, pc}
		return false;
   267ca:	4610      	mov	r0, r2
   267cc:	e7fc      	b.n	267c8 <setup_tx_cache+0x2a>

000267ce <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   267ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   267d0:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   267d2:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   267d4:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   267d8:	460c      	mov	r4, r1
   267da:	b1e9      	cbz	r1, 26818 <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   267dc:	2100      	movs	r1, #0
   267de:	4620      	mov	r0, r4
   267e0:	f7fe fb9c 	bl	24f1c <memset>
		flush_len = len;
   267e4:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   267e6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   267ea:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   267ec:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   267f0:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   267f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   267f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   267fa:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   267fc:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26800:	2900      	cmp	r1, #0
   26802:	d0fb      	beq.n	267fc <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26804:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   26808:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2680c:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   26810:	b92c      	cbnz	r4, 2681e <rx_flush.isra.0+0x50>
			return rx_amount;
   26812:	b2c0      	uxtb	r0, r0
}
   26814:	b003      	add	sp, #12
   26816:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   26818:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   2681a:	466b      	mov	r3, sp
   2681c:	e7e3      	b.n	267e6 <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   2681e:	4286      	cmp	r6, r0
   26820:	d1f7      	bne.n	26812 <rx_flush.isra.0+0x44>
   26822:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   26824:	42a2      	cmp	r2, r4
   26826:	d101      	bne.n	2682c <rx_flush.isra.0+0x5e>
	return 0;
   26828:	2000      	movs	r0, #0
   2682a:	e7f3      	b.n	26814 <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   2682c:	f814 3b01 	ldrb.w	r3, [r4], #1
   26830:	2b00      	cmp	r3, #0
   26832:	d0f7      	beq.n	26824 <rx_flush.isra.0+0x56>
   26834:	e7ed      	b.n	26812 <rx_flush.isra.0+0x44>

00026836 <async_uart_release>:
{
   26836:	b570      	push	{r4, r5, r6, lr}
   26838:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2683a:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2683c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26840:	f3ef 8611 	mrs	r6, BASEPRI
   26844:	f383 8812 	msr	BASEPRI_MAX, r3
   26848:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2684c:	68d0      	ldr	r0, [r2, #12]
   2684e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   26852:	ea23 0301 	bic.w	r3, r3, r1
   26856:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2685a:	68d5      	ldr	r5, [r2, #12]
   2685c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   26860:	b973      	cbnz	r3, 26880 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   26862:	2902      	cmp	r1, #2
   26864:	d107      	bne.n	26876 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   26866:	6860      	ldr	r0, [r4, #4]
   26868:	2205      	movs	r2, #5
   2686a:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2686e:	f7ff ffae 	bl	267ce <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   26872:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   26876:	6863      	ldr	r3, [r4, #4]
   26878:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2687a:	2200      	movs	r2, #0
   2687c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   26880:	f386 8811 	msr	BASEPRI, r6
   26884:	f3bf 8f6f 	isb	sy
}
   26888:	bd70      	pop	{r4, r5, r6, pc}

0002688a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2688a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2688c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2688e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26892:	b940      	cbnz	r0, 268a6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26894:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26896:	079b      	lsls	r3, r3, #30
   26898:	d406      	bmi.n	268a8 <is_tx_ready.isra.0+0x1e>
   2689a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2689e:	3800      	subs	r0, #0
   268a0:	bf18      	it	ne
   268a2:	2001      	movne	r0, #1
   268a4:	4770      	bx	lr
   268a6:	2001      	movs	r0, #1
}
   268a8:	4770      	bx	lr

000268aa <start_tx_locked>:
{
   268aa:	b510      	push	{r4, lr}
   268ac:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   268ae:	6840      	ldr	r0, [r0, #4]
   268b0:	f7ff ffeb 	bl	2688a <is_tx_ready.isra.0>
   268b4:	68cb      	ldr	r3, [r1, #12]
   268b6:	b918      	cbnz	r0, 268c0 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   268b8:	2201      	movs	r2, #1
   268ba:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   268be:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   268c0:	2200      	movs	r2, #0
   268c2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   268c6:	68cb      	ldr	r3, [r1, #12]
   268c8:	f04f 32ff 	mov.w	r2, #4294967295
   268cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   268d0:	68cb      	ldr	r3, [r1, #12]
   268d2:	4620      	mov	r0, r4
   268d4:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   268d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   268dc:	f7ff be7c 	b.w	265d8 <tx_start>

000268e0 <rx_timeout>:
{
   268e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   268e2:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   268e4:	68e3      	ldr	r3, [r4, #12]
   268e6:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   268ea:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   268ee:	bb13      	cbnz	r3, 26936 <rx_timeout+0x56>
	const struct device *dev = data->dev;
   268f0:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   268f2:	6873      	ldr	r3, [r6, #4]
   268f4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   268f6:	2210      	movs	r2, #16
   268f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   268fc:	68e3      	ldr	r3, [r4, #12]
   268fe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   26902:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   26904:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   26906:	bf1f      	itttt	ne
   26908:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2690a:	68e3      	ldrne	r3, [r4, #12]
   2690c:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2690e:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   26910:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   26912:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   26916:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   26918:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2691a:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2691c:	da0c      	bge.n	26938 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2691e:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   26922:	68e3      	ldr	r3, [r4, #12]
   26924:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   26928:	4281      	cmp	r1, r0
   2692a:	d80b      	bhi.n	26944 <rx_timeout+0x64>
	return config->uarte_regs;
   2692c:	6873      	ldr	r3, [r6, #4]
   2692e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   26930:	2210      	movs	r2, #16
   26932:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   26938:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2693c:	eb02 0c01 	add.w	ip, r2, r1
   26940:	4584      	cmp	ip, r0
   26942:	d904      	bls.n	2694e <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   26944:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   26946:	2d00      	cmp	r5, #0
   26948:	ddf0      	ble.n	2692c <rx_timeout+0x4c>
		clipped = true;
   2694a:	2701      	movs	r7, #1
   2694c:	e005      	b.n	2695a <rx_timeout+0x7a>
	if (len > 0) {
   2694e:	2a00      	cmp	r2, #0
   26950:	d0ec      	beq.n	2692c <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   26952:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   26956:	428a      	cmp	r2, r1
   26958:	da12      	bge.n	26980 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2695a:	4629      	mov	r1, r5
   2695c:	4630      	mov	r0, r6
   2695e:	f7ff fe6a 	bl	26636 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   26962:	68e2      	ldr	r2, [r4, #12]
   26964:	6e13      	ldr	r3, [r2, #96]	; 0x60
   26966:	442b      	add	r3, r5
   26968:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2696a:	68e2      	ldr	r2, [r4, #12]
   2696c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2696e:	442b      	add	r3, r5
   26970:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   26972:	2f00      	cmp	r7, #0
   26974:	d0da      	beq.n	2692c <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   26976:	68e0      	ldr	r0, [r4, #12]
   26978:	3080      	adds	r0, #128	; 0x80
   2697a:	f000 faa6 	bl	26eca <z_impl_k_timer_stop>
}
   2697e:	e7d5      	b.n	2692c <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   26980:	1a52      	subs	r2, r2, r1
   26982:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   26984:	e7d2      	b.n	2692c <rx_timeout+0x4c>

00026986 <uarte_nrfx_tx_abort>:
{
   26986:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   26988:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2698a:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2698c:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2698e:	68da      	ldr	r2, [r3, #12]
   26990:	6891      	ldr	r1, [r2, #8]
   26992:	b151      	cbz	r1, 269aa <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   26994:	2400      	movs	r4, #0
   26996:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   2699a:	68d8      	ldr	r0, [r3, #12]
   2699c:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2699e:	f000 fa94 	bl	26eca <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   269a2:	2301      	movs	r3, #1
   269a4:	60eb      	str	r3, [r5, #12]
	return 0;
   269a6:	4620      	mov	r0, r4
}
   269a8:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   269aa:	f06f 000d 	mvn.w	r0, #13
   269ae:	e7fb      	b.n	269a8 <uarte_nrfx_tx_abort+0x22>

000269b0 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   269b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   269b2:	6818      	ldr	r0, [r3, #0]
   269b4:	f7ff bfe7 	b.w	26986 <uarte_nrfx_tx_abort>

000269b8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   269b8:	4770      	bx	lr

000269ba <sys_clock_cycle_get_32>:
{
   269ba:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   269bc:	f7f6 ff10 	bl	1d7e0 <z_nrf_rtc_timer_read>
}
   269c0:	bd08      	pop	{r3, pc}

000269c2 <z_log_msg_static_create.constprop.0>:
   269c2:	2300      	movs	r3, #0
   269c4:	f7ed bb70 	b.w	140a8 <z_impl_z_log_msg_static_create>

000269c8 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   269c8:	ea40 0301 	orr.w	r3, r0, r1
   269cc:	2b0f      	cmp	r3, #15
   269ce:	d801      	bhi.n	269d4 <dk_set_leds_state+0xc>
   269d0:	f7f7 b98a 	b.w	1dce8 <dk_set_leds_state.part.0>
}
   269d4:	f06f 0015 	mvn.w	r0, #21
   269d8:	4770      	bx	lr

000269da <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   269da:	2101      	movs	r1, #1
   269dc:	f7f7 b9e4 	b.w	1dda8 <dk_set_led>

000269e0 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   269e0:	2100      	movs	r1, #0
   269e2:	f7f7 b9e1 	b.w	1dda8 <dk_set_led>

000269e6 <hci_driver_close>:
{
   269e6:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   269e8:	f7f8 fa76 	bl	1eed8 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   269ec:	f04f 30ff 	mov.w	r0, #4294967295
   269f0:	f04f 31ff 	mov.w	r1, #4294967295
   269f4:	f7f7 fa0a 	bl	1de0c <multithreading_lock_acquire>
	if (err) {
   269f8:	4604      	mov	r4, r0
   269fa:	b920      	cbnz	r0, 26a06 <hci_driver_close+0x20>
	err = sdc_disable();
   269fc:	f7da fb20 	bl	1040 <sdc_disable>
	if (err) {
   26a00:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   26a02:	f7f7 fa0b 	bl	1de1c <multithreading_lock_release>
}
   26a06:	4620      	mov	r0, r4
   26a08:	bd10      	pop	{r4, pc}

00026a0a <hci_driver_send>:
{
   26a0a:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   26a0c:	8a03      	ldrh	r3, [r0, #16]
{
   26a0e:	4605      	mov	r5, r0
	if (!buf->len) {
   26a10:	b373      	cbz	r3, 26a70 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   26a12:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   26a14:	b1a3      	cbz	r3, 26a40 <hci_driver_send+0x36>
   26a16:	2b02      	cmp	r3, #2
   26a18:	d12a      	bne.n	26a70 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26a1a:	f04f 30ff 	mov.w	r0, #4294967295
   26a1e:	f04f 31ff 	mov.w	r1, #4294967295
   26a22:	f7f7 f9f3 	bl	1de0c <multithreading_lock_acquire>
	if (!errcode) {
   26a26:	4604      	mov	r4, r0
   26a28:	b940      	cbnz	r0, 26a3c <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   26a2a:	68e8      	ldr	r0, [r5, #12]
   26a2c:	f7e6 fc57 	bl	d2de <sdc_hci_data_put>
   26a30:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   26a32:	f7f7 f9f3 	bl	1de1c <multithreading_lock_release>
		if (errcode) {
   26a36:	b1b4      	cbz	r4, 26a66 <hci_driver_send+0x5c>
			receive_signal_raise();
   26a38:	f7f7 fa8e 	bl	1df58 <receive_signal_raise>
}
   26a3c:	4620      	mov	r0, r4
   26a3e:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   26a40:	f04f 30ff 	mov.w	r0, #4294967295
   26a44:	f04f 31ff 	mov.w	r1, #4294967295
   26a48:	f7f7 f9e0 	bl	1de0c <multithreading_lock_acquire>
	if (!errcode) {
   26a4c:	4604      	mov	r4, r0
   26a4e:	2800      	cmp	r0, #0
   26a50:	d1f4      	bne.n	26a3c <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   26a52:	68e8      	ldr	r0, [r5, #12]
   26a54:	f7f7 fc28 	bl	1e2a8 <hci_internal_cmd_put>
   26a58:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   26a5a:	f7f7 f9df 	bl	1de1c <multithreading_lock_release>
	if (errcode) {
   26a5e:	2c00      	cmp	r4, #0
   26a60:	d1ec      	bne.n	26a3c <hci_driver_send+0x32>
	receive_signal_raise();
   26a62:	f7f7 fa79 	bl	1df58 <receive_signal_raise>
		net_buf_unref(buf);
   26a66:	4628      	mov	r0, r5
   26a68:	f7f5 facc 	bl	1c004 <net_buf_unref>
   26a6c:	2400      	movs	r4, #0
   26a6e:	e7e5      	b.n	26a3c <hci_driver_send+0x32>
	switch (type) {
   26a70:	f06f 0415 	mvn.w	r4, #21
   26a74:	e7e2      	b.n	26a3c <hci_driver_send+0x32>

00026a76 <receive_work_handler>:
	hci_driver_receive_process();
   26a76:	f7f7 bb9b 	b.w	1e1b0 <hci_driver_receive_process>

00026a7a <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   26a7a:	2100      	movs	r1, #0
   26a7c:	f7f8 ba4e 	b.w	1ef1c <cmd_le_generate_dhkey>

00026a80 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   26a80:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   26a84:	2901      	cmp	r1, #1
   26a86:	d801      	bhi.n	26a8c <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   26a88:	f7f8 ba48 	b.w	1ef1c <cmd_le_generate_dhkey>
}
   26a8c:	2012      	movs	r0, #18
   26a8e:	4770      	bx	lr

00026a90 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   26a90:	4668      	mov	r0, sp
   26a92:	f020 0107 	bic.w	r1, r0, #7
   26a96:	468d      	mov	sp, r1
   26a98:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   26a9a:	f7e4 fdd1 	bl	b640 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   26a9e:	f7ee fa4f 	bl	14f40 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   26aa2:	f7ee fbc7 	bl	15234 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   26aa6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26aaa:	4685      	mov	sp, r0
   26aac:	4770      	bx	lr

00026aae <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   26aae:	4668      	mov	r0, sp
   26ab0:	f020 0107 	bic.w	r1, r0, #7
   26ab4:	468d      	mov	sp, r1
   26ab6:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   26ab8:	f7e4 fd78 	bl	b5ac <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   26abc:	f7ee fa40 	bl	14f40 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   26ac0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26ac4:	4685      	mov	sp, r0
   26ac6:	4770      	bx	lr

00026ac8 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26ac8:	4668      	mov	r0, sp
   26aca:	f020 0107 	bic.w	r1, r0, #7
   26ace:	468d      	mov	sp, r1
   26ad0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   26ad2:	f7e2 fa15 	bl	8f00 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   26ad6:	f7ee fa33 	bl	14f40 <_arch_isr_direct_pm>
   26ada:	f7ee fbab 	bl	15234 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26ade:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26ae2:	4685      	mov	sp, r0
   26ae4:	4770      	bx	lr

00026ae6 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   26ae6:	b508      	push	{r3, lr}

	mpsl_fem_init();
   26ae8:	f7ea f9de 	bl	10ea8 <mpsl_fem_init>

	return 0;
}
   26aec:	2000      	movs	r0, #0
   26aee:	bd08      	pop	{r3, pc}

00026af0 <nrfx_clock_enable>:
}
   26af0:	4770      	bx	lr

00026af2 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   26af2:	f7e5 ba43 	b.w	bf7c <MPSL_IRQ_CLOCK_Handler>

00026af6 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   26af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26afa:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   26afe:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   26b00:	bf04      	itt	eq
   26b02:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   26b06:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   26b0a:	1f83      	subs	r3, r0, #6
   26b0c:	4258      	negs	r0, r3
   26b0e:	4158      	adcs	r0, r3
   26b10:	4770      	bx	lr

00026b12 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26b12:	4700      	bx	r0

00026b14 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26b14:	f000 b9a7 	b.w	26e66 <z_impl_k_busy_wait>

00026b18 <nrf_gpio_pin_present_check>:
    switch (port)
   26b18:	0943      	lsrs	r3, r0, #5
   26b1a:	bf0c      	ite	eq
   26b1c:	f04f 33ff 	moveq.w	r3, #4294967295
   26b20:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   26b22:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   26b26:	fa23 f000 	lsr.w	r0, r3, r0
}
   26b2a:	f000 0001 	and.w	r0, r0, #1
   26b2e:	4770      	bx	lr

00026b30 <pin_is_task_output>:
{
   26b30:	b508      	push	{r3, lr}
   26b32:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   26b34:	f7f8 fcc4 	bl	1f4c0 <pin_is_output>
   26b38:	b110      	cbz	r0, 26b40 <pin_is_task_output+0x10>
   26b3a:	4610      	mov	r0, r2
   26b3c:	f7f8 fcaa 	bl	1f494 <pin_in_use_by_te>
}
   26b40:	f000 0001 	and.w	r0, r0, #1
   26b44:	bd08      	pop	{r3, pc}

00026b46 <nrf_gpio_reconfigure>:
{
   26b46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26b4a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26b4c:	a801      	add	r0, sp, #4
{
   26b4e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   26b52:	460c      	mov	r4, r1
   26b54:	4617      	mov	r7, r2
   26b56:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26b58:	f7f8 fd34 	bl	1f5c4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26b5c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   26b5e:	1e39      	subs	r1, r7, #0
   26b60:	bf18      	it	ne
   26b62:	2101      	movne	r1, #1
   26b64:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   26b68:	1e23      	subs	r3, r4, #0
   26b6a:	bf18      	it	ne
   26b6c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   26b6e:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   26b70:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   26b74:	bf14      	ite	ne
   26b76:	210c      	movne	r1, #12
   26b78:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   26b7a:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   26b7c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   26b80:	bf14      	ite	ne
   26b82:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   26b86:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   26b88:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   26b8c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26b90:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   26b94:	bf14      	ite	ne
   26b96:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   26b9a:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   26b9c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   26b9e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   26ba2:	b104      	cbz	r4, 26ba6 <nrf_gpio_reconfigure+0x60>
   26ba4:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   26ba6:	b10f      	cbz	r7, 26bac <nrf_gpio_reconfigure+0x66>
   26ba8:	783f      	ldrb	r7, [r7, #0]
   26baa:	007f      	lsls	r7, r7, #1
   26bac:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   26bae:	b10e      	cbz	r6, 26bb4 <nrf_gpio_reconfigure+0x6e>
   26bb0:	7836      	ldrb	r6, [r6, #0]
   26bb2:	00b6      	lsls	r6, r6, #2
   26bb4:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   26bb6:	b18d      	cbz	r5, 26bdc <nrf_gpio_reconfigure+0x96>
   26bb8:	7829      	ldrb	r1, [r5, #0]
   26bba:	0209      	lsls	r1, r1, #8
   26bbc:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   26bbe:	f1b8 0f00 	cmp.w	r8, #0
   26bc2:	d003      	beq.n	26bcc <nrf_gpio_reconfigure+0x86>
   26bc4:	f898 8000 	ldrb.w	r8, [r8]
   26bc8:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   26bcc:	4321      	orrs	r1, r4
   26bce:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   26bd2:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   26bd6:	b002      	add	sp, #8
   26bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   26bdc:	4629      	mov	r1, r5
   26bde:	e7ed      	b.n	26bbc <nrf_gpio_reconfigure+0x76>

00026be0 <nrf_gpio_cfg_sense_set>:
{
   26be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   26be2:	f10d 030f 	add.w	r3, sp, #15
   26be6:	9301      	str	r3, [sp, #4]
   26be8:	2300      	movs	r3, #0
{
   26bea:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   26bee:	9300      	str	r3, [sp, #0]
   26bf0:	461a      	mov	r2, r3
   26bf2:	4619      	mov	r1, r3
   26bf4:	f7ff ffa7 	bl	26b46 <nrf_gpio_reconfigure>
}
   26bf8:	b005      	add	sp, #20
   26bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00026bfe <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   26bfe:	f7f9 b817 	b.w	1fc30 <_DoInit>

00026c02 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   26c02:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   26c04:	f7ff fffb 	bl	26bfe <SEGGER_RTT_Init>

	return 0;
}
   26c08:	2000      	movs	r0, #0
   26c0a:	bd08      	pop	{r3, pc}

00026c0c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   26c0c:	4770      	bx	lr

00026c0e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   26c0e:	b140      	cbz	r0, 26c22 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   26c10:	68c3      	ldr	r3, [r0, #12]
   26c12:	7858      	ldrb	r0, [r3, #1]
   26c14:	f010 0001 	ands.w	r0, r0, #1
   26c18:	bf1e      	ittt	ne
   26c1a:	7818      	ldrbne	r0, [r3, #0]
   26c1c:	fab0 f080 	clzne	r0, r0
   26c20:	0940      	lsrne	r0, r0, #5
}
   26c22:	4770      	bx	lr

00026c24 <z_early_memset>:
	(void) memset(dst, c, n);
   26c24:	f7fe b97a 	b.w	24f1c <memset>

00026c28 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   26c28:	f7fe b96d 	b.w	24f06 <memcpy>

00026c2c <k_heap_init>:
{
   26c2c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   26c2e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26c32:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26c36:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   26c3a:	f7ec b929 	b.w	12e90 <sys_heap_init>

00026c3e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26c3e:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   26c42:	4313      	orrs	r3, r2
   26c44:	f013 0303 	ands.w	r3, r3, #3
   26c48:	d10c      	bne.n	26c64 <create_free_list+0x26>
	slab->free_list = NULL;
   26c4a:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   26c4c:	68c1      	ldr	r1, [r0, #12]
   26c4e:	4299      	cmp	r1, r3
   26c50:	d801      	bhi.n	26c56 <create_free_list+0x18>
	return 0;
   26c52:	2000      	movs	r0, #0
   26c54:	4770      	bx	lr
		*(char **)p = slab->free_list;
   26c56:	6981      	ldr	r1, [r0, #24]
   26c58:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   26c5a:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   26c5c:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   26c5e:	3301      	adds	r3, #1
		p += slab->block_size;
   26c60:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   26c62:	e7f3      	b.n	26c4c <create_free_list+0xe>
		return -EINVAL;
   26c64:	f06f 0015 	mvn.w	r0, #21
}
   26c68:	4770      	bx	lr

00026c6a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26c6a:	f3ef 8005 	mrs	r0, IPSR
}
   26c6e:	3800      	subs	r0, #0
   26c70:	bf18      	it	ne
   26c72:	2001      	movne	r0, #1
   26c74:	4770      	bx	lr

00026c76 <z_impl_k_thread_name_set>:
}
   26c76:	f06f 0057 	mvn.w	r0, #87	; 0x57
   26c7a:	4770      	bx	lr

00026c7c <k_thread_name_get>:
}
   26c7c:	2000      	movs	r0, #0
   26c7e:	4770      	bx	lr

00026c80 <z_impl_k_thread_start>:
	z_sched_start(thread);
   26c80:	f7fa bfa0 	b.w	21bc4 <z_sched_start>

00026c84 <z_pm_save_idle_exit>:
{
   26c84:	b508      	push	{r3, lr}
	pm_system_resume();
   26c86:	f7ed fe69 	bl	1495c <pm_system_resume>
}
   26c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   26c8e:	f7ff be93 	b.w	269b8 <sys_clock_idle_exit>

00026c92 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26c92:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26c96:	428b      	cmp	r3, r1
   26c98:	d001      	beq.n	26c9e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26c9a:	f7fb ba83 	b.w	221a4 <z_set_prio>
}
   26c9e:	2000      	movs	r0, #0
   26ca0:	4770      	bx	lr

00026ca2 <z_queue_node_peek>:
{
   26ca2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26ca4:	4604      	mov	r4, r0
   26ca6:	b130      	cbz	r0, 26cb6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26ca8:	6802      	ldr	r2, [r0, #0]
   26caa:	0793      	lsls	r3, r2, #30
   26cac:	d003      	beq.n	26cb6 <z_queue_node_peek+0x14>
		ret = anode->data;
   26cae:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26cb0:	b109      	cbz	r1, 26cb6 <z_queue_node_peek+0x14>
			k_free(anode);
   26cb2:	f000 f9c8 	bl	27046 <k_free>
}
   26cb6:	4620      	mov	r0, r4
   26cb8:	bd10      	pop	{r4, pc}

00026cba <z_impl_k_queue_init>:
	list->head = NULL;
   26cba:	2300      	movs	r3, #0
	list->tail = NULL;
   26cbc:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   26cc0:	6083      	str	r3, [r0, #8]
   26cc2:	f100 030c 	add.w	r3, r0, #12
   26cc6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   26cca:	f100 0314 	add.w	r3, r0, #20
   26cce:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   26cd2:	4770      	bx	lr

00026cd4 <k_queue_append>:
{
   26cd4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26cd6:	2301      	movs	r3, #1
   26cd8:	9300      	str	r3, [sp, #0]
   26cda:	2300      	movs	r3, #0
{
   26cdc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26cde:	4619      	mov	r1, r3
   26ce0:	f7f9 fea6 	bl	20a30 <queue_insert>
}
   26ce4:	b003      	add	sp, #12
   26ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00026cea <k_queue_prepend>:
{
   26cea:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26cec:	2300      	movs	r3, #0
{
   26cee:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26cf0:	9300      	str	r3, [sp, #0]
   26cf2:	4619      	mov	r1, r3
   26cf4:	f7f9 fe9c 	bl	20a30 <queue_insert>
}
   26cf8:	b003      	add	sp, #12
   26cfa:	f85d fb04 	ldr.w	pc, [sp], #4

00026cfe <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   26cfe:	6800      	ldr	r0, [r0, #0]
   26d00:	2100      	movs	r1, #0
   26d02:	f7ff bfce 	b.w	26ca2 <z_queue_node_peek>

00026d06 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   26d06:	b15a      	cbz	r2, 26d20 <z_impl_k_sem_init+0x1a>
   26d08:	428a      	cmp	r2, r1
   26d0a:	d309      	bcc.n	26d20 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26d0c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26d10:	e9c0 1202 	strd	r1, r2, [r0, #8]
   26d14:	e9c0 0000 	strd	r0, r0, [r0]
   26d18:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26d1c:	2000      	movs	r0, #0
   26d1e:	4770      	bx	lr
		return -EINVAL;
   26d20:	f06f 0015 	mvn.w	r0, #21
}
   26d24:	4770      	bx	lr

00026d26 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   26d26:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   26d28:	2301      	movs	r3, #1
   26d2a:	408b      	lsls	r3, r1
   26d2c:	ea22 0303 	bic.w	r3, r2, r3
   26d30:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   26d32:	fa22 f001 	lsr.w	r0, r2, r1
}
   26d36:	f000 0001 	and.w	r0, r0, #1
   26d3a:	4770      	bx	lr

00026d3c <unschedule_locked>:
{
   26d3c:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26d3e:	2103      	movs	r1, #3
{
   26d40:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   26d42:	300c      	adds	r0, #12
   26d44:	f7ff ffef 	bl	26d26 <flag_test_and_clear>
   26d48:	b130      	cbz	r0, 26d58 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   26d4a:	f104 0010 	add.w	r0, r4, #16
   26d4e:	f7fc f857 	bl	22e00 <z_abort_timeout>
   26d52:	fab0 f080 	clz	r0, r0
   26d56:	0940      	lsrs	r0, r0, #5
}
   26d58:	bd10      	pop	{r4, pc}

00026d5a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   26d5a:	b120      	cbz	r0, 26d66 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   26d5c:	2200      	movs	r2, #0
   26d5e:	4611      	mov	r1, r2
   26d60:	30d0      	adds	r0, #208	; 0xd0
   26d62:	f7fb bebd 	b.w	22ae0 <z_sched_wake>
}
   26d66:	4770      	bx	lr

00026d68 <cancel_async_locked>:
{
   26d68:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26d6a:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26d6c:	f3c3 0640 	ubfx	r6, r3, #1, #1
   26d70:	079b      	lsls	r3, r3, #30
{
   26d72:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26d74:	d416      	bmi.n	26da4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   26d76:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   26d78:	2102      	movs	r1, #2
   26d7a:	300c      	adds	r0, #12
   26d7c:	f7ff ffd3 	bl	26d26 <flag_test_and_clear>
   26d80:	b180      	cbz	r0, 26da4 <cancel_async_locked+0x3c>
	return list->head;
   26d82:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26d86:	b16a      	cbz	r2, 26da4 <cancel_async_locked+0x3c>
   26d88:	4294      	cmp	r4, r2
   26d8a:	d11d      	bne.n	26dc8 <cancel_async_locked+0x60>
	return node->next;
   26d8c:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26d8e:	b99e      	cbnz	r6, 26db8 <cancel_async_locked+0x50>
   26d90:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	list->head = node;
   26d94:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   26d98:	429c      	cmp	r4, r3
   26d9a:	d101      	bne.n	26da0 <cancel_async_locked+0x38>
	list->tail = node;
   26d9c:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
	parent->next = child;
   26da0:	2300      	movs	r3, #0
   26da2:	6023      	str	r3, [r4, #0]
	return *flagp;
   26da4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   26da6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   26daa:	bf1e      	ittt	ne
   26dac:	f043 0302 	orrne.w	r3, r3, #2
   26db0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   26db2:	f040 0002 	orrne.w	r0, r0, #2
}
   26db6:	bd70      	pop	{r4, r5, r6, pc}
   26db8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   26dba:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
   26dbe:	4294      	cmp	r4, r2
	list->tail = node;
   26dc0:	bf08      	it	eq
   26dc2:	f8c5 60cc 	streq.w	r6, [r5, #204]	; 0xcc
}
   26dc6:	e7eb      	b.n	26da0 <cancel_async_locked+0x38>
	return node->next;
   26dc8:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26dca:	6812      	ldr	r2, [r2, #0]
   26dcc:	e7db      	b.n	26d86 <cancel_async_locked+0x1e>

00026dce <k_work_submit_to_queue>:
{
   26dce:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   26dd0:	f7fa fa46 	bl	21260 <z_work_submit_to_queue>
	if (ret > 0) {
   26dd4:	1e04      	subs	r4, r0, #0
   26dd6:	dd09      	ble.n	26dec <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   26dd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ddc:	f3ef 8011 	mrs	r0, BASEPRI
   26de0:	f383 8812 	msr	BASEPRI_MAX, r3
   26de4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26de8:	f000 f80d 	bl	26e06 <z_reschedule_irqlock>
}
   26dec:	4620      	mov	r0, r4
   26dee:	bd10      	pop	{r4, pc}

00026df0 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   26df0:	f7fa b9f0 	b.w	211d4 <k_work_busy_get>

00026df4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   26df4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   26df8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   26dfc:	4283      	cmp	r3, r0
		return b2 - b1;
   26dfe:	bf14      	ite	ne
   26e00:	1ac0      	subne	r0, r0, r3
	return 0;
   26e02:	2000      	moveq	r0, #0
}
   26e04:	4770      	bx	lr

00026e06 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26e06:	4603      	mov	r3, r0
   26e08:	b920      	cbnz	r0, 26e14 <z_reschedule_irqlock+0xe>
   26e0a:	f3ef 8205 	mrs	r2, IPSR
   26e0e:	b90a      	cbnz	r2, 26e14 <z_reschedule_irqlock+0xe>
   26e10:	f7ee b8d6 	b.w	14fc0 <arch_swap>
	__asm__ volatile(
   26e14:	f383 8811 	msr	BASEPRI, r3
   26e18:	f3bf 8f6f 	isb	sy
}
   26e1c:	4770      	bx	lr

00026e1e <z_reschedule_unlocked>:
	__asm__ volatile(
   26e1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e22:	f3ef 8011 	mrs	r0, BASEPRI
   26e26:	f383 8812 	msr	BASEPRI_MAX, r3
   26e2a:	f3bf 8f6f 	isb	sy
   26e2e:	f7ff bfea 	b.w	26e06 <z_reschedule_irqlock>

00026e32 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   26e32:	2101      	movs	r1, #1
   26e34:	3818      	subs	r0, #24
   26e36:	f7fb bb1b 	b.w	22470 <z_sched_wake_thread>

00026e3a <z_unpend_all>:
{
   26e3a:	b538      	push	{r3, r4, r5, lr}
   26e3c:	4605      	mov	r5, r0
	int need_sched = 0;
   26e3e:	2000      	movs	r0, #0
	return list->head == list;
   26e40:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26e42:	42a5      	cmp	r5, r4
   26e44:	d000      	beq.n	26e48 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26e46:	b904      	cbnz	r4, 26e4a <z_unpend_all+0x10>
}
   26e48:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   26e4a:	4620      	mov	r0, r4
   26e4c:	f7fb fac4 	bl	223d8 <z_unpend_thread>
		z_ready_thread(thread);
   26e50:	4620      	mov	r0, r4
   26e52:	f7fa fde7 	bl	21a24 <z_ready_thread>
		need_sched = 1;
   26e56:	2001      	movs	r0, #1
   26e58:	e7f2      	b.n	26e40 <z_unpend_all+0x6>

00026e5a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   26e5a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   26e5c:	f7fc f910 	bl	23080 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   26e60:	bd08      	pop	{r3, pc}

00026e62 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   26e62:	f7fc b90d 	b.w	23080 <sys_clock_tick_get>

00026e66 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   26e66:	b108      	cbz	r0, 26e6c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   26e68:	f7ee bf78 	b.w	15d5c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   26e6c:	4770      	bx	lr

00026e6e <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26e6e:	f1b1 3fff 	cmp.w	r1, #4294967295
   26e72:	bf08      	it	eq
   26e74:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26e78:	b538      	push	{r3, r4, r5, lr}
   26e7a:	460c      	mov	r4, r1
   26e7c:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26e7e:	d014      	beq.n	26eaa <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26e80:	4308      	orrs	r0, r1
   26e82:	d103      	bne.n	26e8c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   26e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   26e88:	f7fc b8fa 	b.w	23080 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   26e8c:	f06f 0001 	mvn.w	r0, #1
   26e90:	1b40      	subs	r0, r0, r5
   26e92:	f04f 33ff 	mov.w	r3, #4294967295
   26e96:	eb63 0101 	sbc.w	r1, r3, r1
   26e9a:	2900      	cmp	r1, #0
   26e9c:	da04      	bge.n	26ea8 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   26e9e:	f7fc f8ef 	bl	23080 <sys_clock_tick_get>
   26ea2:	1940      	adds	r0, r0, r5
   26ea4:	eb41 0104 	adc.w	r1, r1, r4
}
   26ea8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   26eaa:	f04f 30ff 	mov.w	r0, #4294967295
   26eae:	4601      	mov	r1, r0
   26eb0:	e7fa      	b.n	26ea8 <sys_clock_timeout_end_calc+0x3a>

00026eb2 <k_timer_init>:
	timer->status = 0U;
   26eb2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   26eb4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   26eb8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   26ebc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   26ec0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   26ec4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   26ec6:	6343      	str	r3, [r0, #52]	; 0x34
}
   26ec8:	4770      	bx	lr

00026eca <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   26eca:	b510      	push	{r4, lr}
   26ecc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   26ece:	f7fb ff97 	bl	22e00 <z_abort_timeout>

	if (inactive) {
   26ed2:	b9b0      	cbnz	r0, 26f02 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   26ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26ed6:	b10b      	cbz	r3, 26edc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26ed8:	4620      	mov	r0, r4
   26eda:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   26edc:	f104 0018 	add.w	r0, r4, #24
   26ee0:	f7fb fb1e 	bl	22520 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   26ee4:	b168      	cbz	r0, 26f02 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   26ee6:	f7fa fd9d 	bl	21a24 <z_ready_thread>
   26eea:	f04f 0340 	mov.w	r3, #64	; 0x40
   26eee:	f3ef 8011 	mrs	r0, BASEPRI
   26ef2:	f383 8812 	msr	BASEPRI_MAX, r3
   26ef6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   26efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26efe:	f7ff bf82 	b.w	26e06 <z_reschedule_irqlock>
   26f02:	bd10      	pop	{r4, pc}

00026f04 <add_event>:
{
   26f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f06:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26f08:	e9d0 1300 	ldrd	r1, r3, [r0]
   26f0c:	4288      	cmp	r0, r1
   26f0e:	4604      	mov	r4, r0
   26f10:	d105      	bne.n	26f1e <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   26f12:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   26f14:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   26f18:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26f1a:	6065      	str	r5, [r4, #4]
   26f1c:	e01d      	b.n	26f5a <add_event+0x56>
	if ((pending == NULL) ||
   26f1e:	2b00      	cmp	r3, #0
   26f20:	d0f7      	beq.n	26f12 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26f22:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26f24:	b100      	cbz	r0, 26f28 <add_event+0x24>
   26f26:	3860      	subs	r0, #96	; 0x60
   26f28:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26f2c:	4639      	mov	r1, r7
   26f2e:	f7ff ff61 	bl	26df4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   26f32:	2800      	cmp	r0, #0
   26f34:	dced      	bgt.n	26f12 <add_event+0xe>
	return list->head == list;
   26f36:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f38:	42b4      	cmp	r4, r6
   26f3a:	d0ea      	beq.n	26f12 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   26f3c:	2e00      	cmp	r6, #0
   26f3e:	d0e8      	beq.n	26f12 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   26f40:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26f42:	b101      	cbz	r1, 26f46 <add_event+0x42>
   26f44:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   26f46:	4638      	mov	r0, r7
   26f48:	f7ff ff54 	bl	26df4 <z_sched_prio_cmp>
   26f4c:	2800      	cmp	r0, #0
   26f4e:	dd05      	ble.n	26f5c <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   26f50:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26f52:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   26f56:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26f58:	6075      	str	r5, [r6, #4]
}
   26f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   26f5c:	6863      	ldr	r3, [r4, #4]
   26f5e:	429e      	cmp	r6, r3
   26f60:	d0d7      	beq.n	26f12 <add_event+0xe>
   26f62:	6836      	ldr	r6, [r6, #0]
   26f64:	e7ea      	b.n	26f3c <add_event+0x38>

00026f66 <signal_poll_event>:
{
   26f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   26f6a:	6884      	ldr	r4, [r0, #8]
{
   26f6c:	4605      	mov	r5, r0
   26f6e:	460e      	mov	r6, r1
	if (poller != NULL) {
   26f70:	b144      	cbz	r4, 26f84 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   26f72:	7863      	ldrb	r3, [r4, #1]
   26f74:	2b01      	cmp	r3, #1
   26f76:	d12e      	bne.n	26fd6 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   26f78:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26f7c:	f013 0302 	ands.w	r3, r3, #2
   26f80:	d10a      	bne.n	26f98 <signal_poll_event+0x32>
		poller->is_polling = false;
   26f82:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   26f84:	68eb      	ldr	r3, [r5, #12]
   26f86:	f3c3 3286 	ubfx	r2, r3, #14, #7
   26f8a:	4316      	orrs	r6, r2
	event->poller = NULL;
   26f8c:	2000      	movs	r0, #0
	event->state |= state;
   26f8e:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   26f92:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   26f94:	60eb      	str	r3, [r5, #12]
	return retcode;
   26f96:	e03e      	b.n	27016 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   26f98:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   26f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26fa0:	bf08      	it	eq
   26fa2:	f112 0f02 	cmneq.w	r2, #2
   26fa6:	d032      	beq.n	2700e <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26fa8:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   26fac:	4640      	mov	r0, r8
   26fae:	f7fb fa13 	bl	223d8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26fb2:	2e08      	cmp	r6, #8
   26fb4:	bf0c      	ite	eq
   26fb6:	f06f 0303 	mvneq.w	r3, #3
   26fba:	2300      	movne	r3, #0
   26fbc:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26fbe:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26fc2:	06db      	lsls	r3, r3, #27
   26fc4:	d109      	bne.n	26fda <signal_poll_event+0x74>
   26fc6:	f854 7c48 	ldr.w	r7, [r4, #-72]
   26fca:	b937      	cbnz	r7, 26fda <signal_poll_event+0x74>
	z_ready_thread(thread);
   26fcc:	4640      	mov	r0, r8
   26fce:	f7fa fd29 	bl	21a24 <z_ready_thread>
		poller->is_polling = false;
   26fd2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   26fd4:	e7d6      	b.n	26f84 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   26fd6:	2b02      	cmp	r3, #2
   26fd8:	d001      	beq.n	26fde <signal_poll_event+0x78>
		poller->is_polling = false;
   26fda:	2300      	movs	r3, #0
   26fdc:	e7d1      	b.n	26f82 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   26fde:	7823      	ldrb	r3, [r4, #0]
   26fe0:	2b00      	cmp	r3, #0
   26fe2:	d0cf      	beq.n	26f84 <signal_poll_event+0x1e>
   26fe4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   26fe8:	2f00      	cmp	r7, #0
   26fea:	d0f2      	beq.n	26fd2 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   26fec:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   26ff0:	f1a4 0914 	sub.w	r9, r4, #20
   26ff4:	f104 0014 	add.w	r0, r4, #20
   26ff8:	f7fb ff02 	bl	22e00 <z_abort_timeout>
		twork->poll_result = 0;
   26ffc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   27000:	4649      	mov	r1, r9
   27002:	4638      	mov	r0, r7
   27004:	f7fa f92c 	bl	21260 <z_work_submit_to_queue>
		poller->is_polling = false;
   27008:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2700c:	e7ba      	b.n	26f84 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2700e:	2300      	movs	r3, #0
   27010:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27012:	f06f 000a 	mvn.w	r0, #10
}
   27016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002701a <z_handle_obj_poll_events>:
{
   2701a:	4603      	mov	r3, r0
	return list->head == list;
   2701c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2701e:	4283      	cmp	r3, r0
   27020:	d008      	beq.n	27034 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   27022:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27026:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27028:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2702a:	2300      	movs	r3, #0
	node->prev = NULL;
   2702c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27030:	f7ff bf99 	b.w	26f66 <signal_poll_event>
}
   27034:	4770      	bx	lr

00027036 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   27036:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   27038:	e9c0 0000 	strd	r0, r0, [r0]
   2703c:	6083      	str	r3, [r0, #8]
}
   2703e:	4770      	bx	lr

00027040 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   27040:	2300      	movs	r3, #0
   27042:	6083      	str	r3, [r0, #8]
}
   27044:	4770      	bx	lr

00027046 <k_free>:
	if (ptr != NULL) {
   27046:	b120      	cbz	r0, 27052 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   27048:	1f01      	subs	r1, r0, #4
   2704a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2704e:	f7f9 b8d1 	b.w	201f4 <k_heap_free>
}
   27052:	4770      	bx	lr

00027054 <k_malloc>:
{
   27054:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   27056:	2004      	movs	r0, #4
   27058:	f7fc bcc4 	b.w	239e4 <k_aligned_alloc>

0002705c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2705c:	4770      	bx	lr
	...
