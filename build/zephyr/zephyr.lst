
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	c0 77 00 20 69 49 01 00 ad 3d 02 00 3d 49 01 00     .w. iI...=..=I..
	while (ad->len > 1) {
  10:	3d 49 01 00 3d 49 01 00 3d 49 01 00 00 00 00 00     =I..=I..=I......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	9d 41 01 00 3d 49 01 00 00 00 00 00 49 41 01 00     .A..=I......IA..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	3d 49 01 00                                         =I..

00000040 <_irq_vector_table>:
  40:	4d 42 01 00 d3 59 02 00 4d 42 01 00 4d 42 01 00     MB...Y..MB..MB..
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
		data.data_len = len - 1;
		data.data = ad->data;
  60:	9b 59 02 00 4d 42 01 00 4d 42 01 00 b9 59 02 00     .Y..MB..MB...Y..

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
    if (!p_config->skip_gpio_cfg)
    {
        if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
        {
            nrf_gpio_pin_set(p_config->pseltxd);
            nrf_gpio_cfg_output(p_config->pseltxd);
  80:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
  90:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
  a0:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
        }
    }
    if (!p_config->skip_psel_cfg)
    {
        nrf_uarte_txrx_pins_set(p_instance->p_reg,
                                p_config->pseltxd, p_config->pselrxd);
  b0:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
    }

    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
  c0:	4d 42 01 00 4d 42 01 00 4d 42 01 00 4d 42 01 00     MB..MB..MB..MB..
    {
        if (!p_config->skip_gpio_cfg)
        {
            if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
  d0:	4d 42 01 00 4d 42 01 00 4d 42 01 00                 MB..MB..MB..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
            {
                nrf_gpio_pin_set(p_config->pselrts);
                nrf_gpio_cfg_output(p_config->pselrts);
      e4:	2800      	cmpeq	r0, #0
    nrf_gpio_cfg(
      e6:	bf1c      	itt	ne
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
    reg->PIN_CNF[pin_number] = cnf;
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
            }
            if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f00c f8b8 	bl	c270 <__udivmoddi4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    reg->PIN_CNF[pin_number] = cnf;
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <ocrypto_bigint_add256>:
            {
                nrf_gpio_cfg_input(p_config->pselcts, NRF_GPIO_PIN_NOPULL);
            }
        }
        if (!p_config->skip_psel_cfg)
     110:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
        {
            nrf_uarte_hwfc_pins_set(p_instance->p_reg,
                                    p_config->pselrts, p_config->pselcts);
     114:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
            nrf_uarte_hwfc_pins_set(p_instance->p_reg,
     118:	e8b2 1002 	ldmia.w	r2!, {r1, ip}

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
     11c:	185b      	adds	r3, r3, r1
    p_reg->PSEL.CTS = pselcts;
     11e:	eb54 040c 	adcs.w	r4, r4, ip

    apply_config(p_instance, p_config);

    apply_workaround_for_enable_anomaly(p_instance);

    p_cb->handler   = event_handler;
     122:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     126:	414d      	adcs	r5, r1
     128:	eb56 060c 	adcs.w	r6, r6, ip
     12c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    p_cb->p_context = p_config->p_context;
     130:	414f      	adcs	r7, r1

    if (p_cb->handler)
     132:	eb58 080c 	adcs.w	r8, r8, ip
     136:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     13a:	eb59 0901 	adcs.w	r9, r9, r1
     13e:	eb5a 0a0c 	adcs.w	sl, sl, ip
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     142:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     146:	4180      	sbcs	r0, r0
     148:	3001      	adds	r0, #1
     14a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ERROR);
     14e:	4770      	bx	lr

00000150 <ocrypto_bigint_sub256>:
     150:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     154:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);
     158:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15c:	1a5b      	subs	r3, r3, r1
     15e:	eb74 040c 	sbcs.w	r4, r4, ip
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_TXSTOPPED);
     162:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     166:	418d      	sbcs	r5, r1
     168:	eb76 060c 	sbcs.w	r6, r6, ip
    nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ENDRX_MASK |
     16c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    p_reg->INTENSET = mask;
     170:	418f      	sbcs	r7, r1
     172:	eb78 080c 	sbcs.w	r8, r8, ip
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
     176:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     17a:	eb79 0901 	sbcs.w	r9, r9, r1
    {
        interrupts_enable(p_instance, p_config->interrupt_priority);
    }

    nrf_uarte_enable(p_instance->p_reg);
     17e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
     182:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     186:	4180      	sbcs	r0, r0
    p_cb->rx_buffer_length           = 0;
     188:	4240      	negs	r0, r0
     18a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     18e:	4770      	bx	lr

00000190 <ocrypto_bigint_cadd256>:
    p_cb->rx_secondary_buffer_length = 0;
     190:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    p_cb->tx_buffer_length           = 0;
     194:	4252      	negs	r2, r2
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
     196:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     19a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
     19e:	4017      	ands	r7, r2
     1a0:	19db      	adds	r3, r3, r7
        return err_code;
     1a2:	ea18 0802 	ands.w	r8, r8, r2
     1a6:	eb54 0408 	adcs.w	r4, r4, r8
     1aa:	ea19 0902 	ands.w	r9, r9, r2
     1ae:	eb55 0509 	adcs.w	r5, r5, r9
     1b2:	ea1a 0a02 	ands.w	sl, sl, r2
     1b6:	eb56 060a 	adcs.w	r6, r6, sl
     1ba:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1bc:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1c0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c4:	4017      	ands	r7, r2
     1c6:	417b      	adcs	r3, r7
     1c8:	ea18 0802 	ands.w	r8, r8, r2
     1cc:	eb54 0408 	adcs.w	r4, r4, r8
     1d0:	ea19 0902 	ands.w	r9, r9, r2
     1d4:	eb55 0509 	adcs.w	r5, r5, r9
     1d8:	ea1a 0a02 	ands.w	sl, sl, r2
     1dc:	eb56 060a 	adcs.w	r6, r6, sl
     1e0:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e2:	4180      	sbcs	r0, r0
     1e4:	3001      	adds	r0, #1
     1e6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1ea:	4770      	bx	lr

000001ec <ocrypto_bigint_csub256>:
     1ec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1f0:	4252      	negs	r2, r2
     1f2:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1f6:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1fa:	4017      	ands	r7, r2
     1fc:	1bdb      	subs	r3, r3, r7
     1fe:	ea18 0802 	ands.w	r8, r8, r2
     202:	eb74 0408 	sbcs.w	r4, r4, r8
     206:	ea19 0902 	ands.w	r9, r9, r2
     20a:	eb75 0509 	sbcs.w	r5, r5, r9
     20e:	ea1a 0a02 	ands.w	sl, sl, r2
     212:	eb76 060a 	sbcs.w	r6, r6, sl
     216:	c078      	stmia	r0!, {r3, r4, r5, r6}
     218:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     220:	4017      	ands	r7, r2
     222:	41bb      	sbcs	r3, r7
     224:	ea18 0802 	ands.w	r8, r8, r2
     228:	eb74 0408 	sbcs.w	r4, r4, r8
     22c:	ea19 0902 	ands.w	r9, r9, r2
     230:	eb75 0509 	sbcs.w	r5, r5, r9
     234:	ea1a 0a02 	ands.w	sl, sl, r2
     238:	eb76 060a 	sbcs.w	r6, r6, sl
     23c:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23e:	4180      	sbcs	r0, r0
     240:	4240      	negs	r0, r0
     242:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     246:	4770      	bx	lr

00000248 <ocrypto_bigint_cswap256>:
     248:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     24c:	4252      	negs	r2, r2
     24e:	f04f 0804 	mov.w	r8, #4

00000252 <cswap256_loop>:
     252:	e890 0030 	ldmia.w	r0, {r4, r5}
     256:	e891 00c0 	ldmia.w	r1, {r6, r7}
     25a:	1ba3      	subs	r3, r4, r6
     25c:	4013      	ands	r3, r2
     25e:	1ae4      	subs	r4, r4, r3
     260:	18f6      	adds	r6, r6, r3
     262:	1beb      	subs	r3, r5, r7
     264:	4013      	ands	r3, r2
     266:	1aed      	subs	r5, r5, r3
     268:	18ff      	adds	r7, r7, r3
     26a:	c030      	stmia	r0!, {r4, r5}
     26c:	c1c0      	stmia	r1!, {r6, r7}
     26e:	f1b8 0801 	subs.w	r8, r8, #1
     272:	d1ee      	bne.n	252 <cswap256_loop>
     274:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     278:	4770      	bx	lr
     27a:	bf00      	nop

0000027c <ocrypto_mul256_noframe>:
     27c:	b500      	push	{lr}
     27e:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     282:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     286:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     28a:	b402      	push	{r1}
     28c:	fba7 5102 	umull	r5, r1, r7, r2
     290:	950a      	str	r5, [sp, #40]	; 0x28
     292:	fba8 0b02 	umull	r0, fp, r8, r2
     296:	fbe7 1063 	umaal	r1, r0, r7, r3
     29a:	fbe9 b062 	umaal	fp, r0, r9, r2
     29e:	910b      	str	r1, [sp, #44]	; 0x2c
     2a0:	fba8 5103 	umull	r5, r1, r8, r3
     2a4:	fbea 0162 	umaal	r0, r1, sl, r2
     2a8:	fbe7 b564 	umaal	fp, r5, r7, r4
     2ac:	fbe7 0566 	umaal	r0, r5, r7, r6
     2b0:	fbe8 1566 	umaal	r1, r5, r8, r6
     2b4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2b8:	fba9 b603 	umull	fp, r6, r9, r3
     2bc:	fbea 1663 	umaal	r1, r6, sl, r3
     2c0:	fbec 5663 	umaal	r5, r6, ip, r3
     2c4:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2c8:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2cc:	fbea 5b64 	umaal	r5, fp, sl, r4
     2d0:	fbec 6b64 	umaal	r6, fp, ip, r4
     2d4:	900d      	str	r0, [sp, #52]	; 0x34
     2d6:	fbac 3002 	umull	r3, r0, ip, r2
     2da:	9c05      	ldr	r4, [sp, #20]
     2dc:	fbee 5062 	umaal	r5, r0, lr, r2
     2e0:	fbe9 6064 	umaal	r6, r0, r9, r4
     2e4:	fbea b064 	umaal	fp, r0, sl, r4
     2e8:	fbe7 3164 	umaal	r3, r1, r7, r4
     2ec:	fbe8 5164 	umaal	r5, r1, r8, r4
     2f0:	9c06      	ldr	r4, [sp, #24]
     2f2:	fbe8 6164 	umaal	r6, r1, r8, r4
     2f6:	fbe9 b164 	umaal	fp, r1, r9, r4
     2fa:	fbea 0164 	umaal	r0, r1, sl, r4
     2fe:	930e      	str	r3, [sp, #56]	; 0x38
     300:	fba7 3204 	umull	r3, r2, r7, r4
     304:	9c07      	ldr	r4, [sp, #28]
     306:	fbe7 6264 	umaal	r6, r2, r7, r4
     30a:	fbe8 b264 	umaal	fp, r2, r8, r4
     30e:	fbe9 0264 	umaal	r0, r2, r9, r4
     312:	fbea 1264 	umaal	r1, r2, sl, r4
     316:	9c04      	ldr	r4, [sp, #16]
     318:	fbe9 5364 	umaal	r5, r3, r9, r4
     31c:	fbea 6364 	umaal	r6, r3, sl, r4
     320:	9c08      	ldr	r4, [sp, #32]
     322:	fbe7 b364 	umaal	fp, r3, r7, r4
     326:	fbe8 0364 	umaal	r0, r3, r8, r4
     32a:	fbe9 1364 	umaal	r1, r3, r9, r4
     32e:	fbea 2364 	umaal	r2, r3, sl, r4
     332:	950f      	str	r5, [sp, #60]	; 0x3c
     334:	f85d 9b04 	ldr.w	r9, [sp], #4
     338:	e899 0600 	ldmia.w	r9, {r9, sl}
     33c:	f8dd 8000 	ldr.w	r8, [sp]
     340:	fba9 5408 	umull	r5, r4, r9, r8
     344:	fbea b468 	umaal	fp, r4, sl, r8
     348:	f8dd 8010 	ldr.w	r8, [sp, #16]
     34c:	fbec 0468 	umaal	r0, r4, ip, r8
     350:	fbee 1468 	umaal	r1, r4, lr, r8
     354:	fbe9 2468 	umaal	r2, r4, r9, r8
     358:	fbea 3468 	umaal	r3, r4, sl, r8
     35c:	f8dd 8004 	ldr.w	r8, [sp, #4]
     360:	fbee 6568 	umaal	r6, r5, lr, r8
     364:	fbe9 b568 	umaal	fp, r5, r9, r8
     368:	fbea 0568 	umaal	r0, r5, sl, r8
     36c:	f8dd 8014 	ldr.w	r8, [sp, #20]
     370:	fbec 1568 	umaal	r1, r5, ip, r8
     374:	fbee 2568 	umaal	r2, r5, lr, r8
     378:	fbe9 3568 	umaal	r3, r5, r9, r8
     37c:	fbea 4568 	umaal	r4, r5, sl, r8
     380:	960f      	str	r6, [sp, #60]	; 0x3c
     382:	f8dd 8008 	ldr.w	r8, [sp, #8]
     386:	fbae 7608 	umull	r7, r6, lr, r8
     38a:	fbe9 0668 	umaal	r0, r6, r9, r8
     38e:	fbea 1668 	umaal	r1, r6, sl, r8
     392:	f8dd 8018 	ldr.w	r8, [sp, #24]
     396:	fbec 2668 	umaal	r2, r6, ip, r8
     39a:	fbee 3668 	umaal	r3, r6, lr, r8
     39e:	fbe9 4668 	umaal	r4, r6, r9, r8
     3a2:	fbea 5668 	umaal	r5, r6, sl, r8
     3a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3aa:	fbec b768 	umaal	fp, r7, ip, r8
     3ae:	fbee 0768 	umaal	r0, r7, lr, r8
     3b2:	fbe9 1768 	umaal	r1, r7, r9, r8
     3b6:	fbea 2768 	umaal	r2, r7, sl, r8
     3ba:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3be:	fbec 3768 	umaal	r3, r7, ip, r8
     3c2:	fbee 4768 	umaal	r4, r7, lr, r8
     3c6:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ca:	fbea 6768 	umaal	r6, r7, sl, r8
     3ce:	b008      	add	sp, #32
     3d0:	bd00      	pop	{pc}
     3d2:	bf00      	nop

000003d4 <ocrypto_bigint_mul256>:
     3d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3d8:	b087      	sub	sp, #28
     3da:	f7ff ff4f 	bl	27c <ocrypto_mul256_noframe>
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	f108 0820 	add.w	r8, r8, #32
     3e6:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     3ea:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     3ec:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003f4 <ocrypto_sqr256_noframe>:
     3f4:	b500      	push	{lr}
     3f6:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     3fa:	fba3 5203 	umull	r5, r2, r3, r3
     3fe:	9501      	str	r5, [sp, #4]
     400:	fba3 0104 	umull	r0, r1, r3, r4
     404:	fbe3 2064 	umaal	r2, r0, r3, r4
     408:	fbe3 1067 	umaal	r1, r0, r3, r7
     40c:	9202      	str	r2, [sp, #8]
     40e:	fba3 5207 	umull	r5, r2, r3, r7
     412:	fbe3 0268 	umaal	r0, r2, r3, r8
     416:	fbe4 1564 	umaal	r1, r5, r4, r4
     41a:	fbe3 0568 	umaal	r0, r5, r3, r8
     41e:	fbe3 2569 	umaal	r2, r5, r3, r9
     422:	9103      	str	r1, [sp, #12]
     424:	fba4 b607 	umull	fp, r6, r4, r7
     428:	fbe3 2669 	umaal	r2, r6, r3, r9
     42c:	fbe3 566a 	umaal	r5, r6, r3, sl
     430:	fbe4 0b67 	umaal	r0, fp, r4, r7
     434:	fbe4 2b68 	umaal	r2, fp, r4, r8
     438:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     43c:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     440:	9004      	str	r0, [sp, #16]
     442:	fba4 1008 	umull	r1, r0, r4, r8
     446:	fbe4 5069 	umaal	r5, r0, r4, r9
     44a:	fbe3 606c 	umaal	r6, r0, r3, ip
     44e:	fbe3 b06e 	umaal	fp, r0, r3, lr
     452:	fbe7 2167 	umaal	r2, r1, r7, r7
     456:	fbe4 5169 	umaal	r5, r1, r4, r9
     45a:	fbe4 616a 	umaal	r6, r1, r4, sl
     45e:	fbe3 b16e 	umaal	fp, r1, r3, lr
     462:	fbe4 016e 	umaal	r0, r1, r4, lr
     466:	9205      	str	r2, [sp, #20]
     468:	fba7 3208 	umull	r3, r2, r7, r8
     46c:	fbe4 626a 	umaal	r6, r2, r4, sl
     470:	fbe4 b26c 	umaal	fp, r2, r4, ip
     474:	fbe4 026e 	umaal	r0, r2, r4, lr
     478:	fbe7 126e 	umaal	r1, r2, r7, lr
     47c:	fbe7 5368 	umaal	r5, r3, r7, r8
     480:	fbe7 6369 	umaal	r6, r3, r7, r9
     484:	fbe4 b36c 	umaal	fp, r3, r4, ip
     488:	fbe7 036c 	umaal	r0, r3, r7, ip
     48c:	fbe7 136e 	umaal	r1, r3, r7, lr
     490:	fbe8 236e 	umaal	r2, r3, r8, lr
     494:	9506      	str	r5, [sp, #24]
     496:	fba7 5409 	umull	r5, r4, r7, r9
     49a:	fbe7 b46a 	umaal	fp, r4, r7, sl
     49e:	fbe7 046c 	umaal	r0, r4, r7, ip
     4a2:	fbe8 146c 	umaal	r1, r4, r8, ip
     4a6:	fbe8 246e 	umaal	r2, r4, r8, lr
     4aa:	fbe9 346e 	umaal	r3, r4, r9, lr
     4ae:	fbe8 6568 	umaal	r6, r5, r8, r8
     4b2:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4b6:	fbe8 056a 	umaal	r0, r5, r8, sl
     4ba:	fbe8 156c 	umaal	r1, r5, r8, ip
     4be:	fbe9 256c 	umaal	r2, r5, r9, ip
     4c2:	fbe9 356e 	umaal	r3, r5, r9, lr
     4c6:	fbea 456e 	umaal	r4, r5, sl, lr
     4ca:	9607      	str	r6, [sp, #28]
     4cc:	fba8 7609 	umull	r7, r6, r8, r9
     4d0:	fbe8 066a 	umaal	r0, r6, r8, sl
     4d4:	fbe9 166a 	umaal	r1, r6, r9, sl
     4d8:	fbe9 266c 	umaal	r2, r6, r9, ip
     4dc:	fbea 366c 	umaal	r3, r6, sl, ip
     4e0:	fbea 466e 	umaal	r4, r6, sl, lr
     4e4:	fbec 566e 	umaal	r5, r6, ip, lr
     4e8:	fbe8 b769 	umaal	fp, r7, r8, r9
     4ec:	fbe9 0769 	umaal	r0, r7, r9, r9
     4f0:	fbe9 176a 	umaal	r1, r7, r9, sl
     4f4:	fbea 276a 	umaal	r2, r7, sl, sl
     4f8:	fbea 376c 	umaal	r3, r7, sl, ip
     4fc:	fbec 476c 	umaal	r4, r7, ip, ip
     500:	fbec 576e 	umaal	r5, r7, ip, lr
     504:	fbee 676e 	umaal	r6, r7, lr, lr
     508:	bd00      	pop	{pc}
     50a:	bf00      	nop

0000050c <ocrypto_bigint_sqr256>:
     50c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     510:	b087      	sub	sp, #28
     512:	f7ff ff6f 	bl	3f4 <ocrypto_sqr256_noframe>
     516:	f8dd 801c 	ldr.w	r8, [sp, #28]
     51a:	f108 0820 	add.w	r8, r8, #32
     51e:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     522:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     524:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000052c <ocrypto_constant_time_equal>:
     52c:	b430      	push	{r4, r5}
     52e:	f04f 0300 	mov.w	r3, #0

00000532 <constant_time_equal_loop>:
     532:	f810 4b01 	ldrb.w	r4, [r0], #1
     536:	f811 5b01 	ldrb.w	r5, [r1], #1
     53a:	3a01      	subs	r2, #1
     53c:	ea84 0405 	eor.w	r4, r4, r5
     540:	ea43 0304 	orr.w	r3, r3, r4
     544:	d1f5      	bne.n	532 <constant_time_equal_loop>
     546:	f1a3 0301 	sub.w	r3, r3, #1
     54a:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     54e:	bc30      	pop	{r4, r5}
     550:	4770      	bx	lr
     552:	bf00      	nop

00000554 <ocrypto_constant_time_is_zero>:
     554:	f04f 0300 	mov.w	r3, #0

00000558 <constant_time_is_zero_loop>:
     558:	f810 2b01 	ldrb.w	r2, [r0], #1
     55c:	3901      	subs	r1, #1
     55e:	ea43 0302 	orr.w	r3, r3, r2
     562:	d1f9      	bne.n	558 <constant_time_is_zero_loop>
     564:	f1a3 0301 	sub.w	r3, r3, #1
     568:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     56c:	4770      	bx	lr
     56e:	bf00      	nop

00000570 <ocrypto_constant_time_xor>:
     570:	b430      	push	{r4, r5}

00000572 <constant_time_xor_loop>:
     572:	f811 4b01 	ldrb.w	r4, [r1], #1
     576:	f812 5b01 	ldrb.w	r5, [r2], #1
     57a:	406c      	eors	r4, r5
     57c:	f800 4b01 	strb.w	r4, [r0], #1
     580:	3b01      	subs	r3, #1
     582:	d1f6      	bne.n	572 <constant_time_xor_loop>
     584:	bc30      	pop	{r4, r5}
     586:	4770      	bx	lr

00000588 <ocrypto_mod_p256_add>:
     588:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     58c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     590:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     594:	185b      	adds	r3, r3, r1
     596:	eb54 040c 	adcs.w	r4, r4, ip
     59a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     59e:	414d      	adcs	r5, r1
     5a0:	eb56 060c 	adcs.w	r6, r6, ip
     5a4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5a8:	414f      	adcs	r7, r1
     5aa:	eb58 080c 	adcs.w	r8, r8, ip
     5ae:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b2:	eb59 0901 	adcs.w	r9, r9, r1
     5b6:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5ba:	4189      	sbcs	r1, r1
     5bc:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5c0:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5c4:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5c8:	f176 0600 	sbcs.w	r6, r6, #0
     5cc:	f177 0700 	sbcs.w	r7, r7, #0
     5d0:	f178 0800 	sbcs.w	r8, r8, #0
     5d4:	f179 0901 	sbcs.w	r9, r9, #1
     5d8:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     5dc:	f151 0100 	adcs.w	r1, r1, #0
     5e0:	185b      	adds	r3, r3, r1
     5e2:	414c      	adcs	r4, r1
     5e4:	414d      	adcs	r5, r1
     5e6:	f156 0600 	adcs.w	r6, r6, #0
     5ea:	f157 0700 	adcs.w	r7, r7, #0
     5ee:	f158 0800 	adcs.w	r8, r8, #0
     5f2:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     5f6:	eb5a 0a01 	adcs.w	sl, sl, r1
     5fa:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     5fe:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     602:	4770      	bx	lr

00000604 <ocrypto_mod_p256_sub>:
     604:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     608:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     60c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     610:	1a5b      	subs	r3, r3, r1
     612:	eb74 040c 	sbcs.w	r4, r4, ip
     616:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     61a:	418d      	sbcs	r5, r1
     61c:	eb76 060c 	sbcs.w	r6, r6, ip
     620:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     624:	418f      	sbcs	r7, r1
     626:	eb78 080c 	sbcs.w	r8, r8, ip
     62a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     62e:	eb79 0901 	sbcs.w	r9, r9, r1
     632:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     636:	4189      	sbcs	r1, r1
     638:	185b      	adds	r3, r3, r1
     63a:	414c      	adcs	r4, r1
     63c:	414d      	adcs	r5, r1
     63e:	f156 0600 	adcs.w	r6, r6, #0
     642:	f157 0700 	adcs.w	r7, r7, #0
     646:	f158 0800 	adcs.w	r8, r8, #0
     64a:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     64e:	eb5a 0a01 	adcs.w	sl, sl, r1
     652:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     656:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     65a:	4770      	bx	lr

0000065c <mul_reduce>:
     65c:	eb18 0804 	adds.w	r8, r8, r4
     660:	eb59 0905 	adcs.w	r9, r9, r5
     664:	eb5a 0a06 	adcs.w	sl, sl, r6
     668:	eb5b 0b07 	adcs.w	fp, fp, r7
     66c:	f05f 0c00 	movs.w	ip, #0
     670:	f14c 0c00 	adc.w	ip, ip, #0
     674:	eb18 0805 	adds.w	r8, r8, r5
     678:	eb59 0906 	adcs.w	r9, r9, r6
     67c:	eb5a 0a07 	adcs.w	sl, sl, r7
     680:	eb5b 0b07 	adcs.w	fp, fp, r7
     684:	eb50 000c 	adcs.w	r0, r0, ip
     688:	f05f 0c00 	movs.w	ip, #0
     68c:	eb51 010c 	adcs.w	r1, r1, ip
     690:	eb52 020c 	adcs.w	r2, r2, ip
     694:	4163      	adcs	r3, r4
     696:	f14c 0c00 	adc.w	ip, ip, #0
     69a:	ebb8 0807 	subs.w	r8, r8, r7
     69e:	f179 0900 	sbcs.w	r9, r9, #0
     6a2:	f17a 0a00 	sbcs.w	sl, sl, #0
     6a6:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6aa:	41a8      	sbcs	r0, r5
     6ac:	41b1      	sbcs	r1, r6
     6ae:	41a2      	sbcs	r2, r4
     6b0:	41b3      	sbcs	r3, r6
     6b2:	f16c 0c00 	sbc.w	ip, ip, #0
     6b6:	ebbb 0b05 	subs.w	fp, fp, r5
     6ba:	41b0      	sbcs	r0, r6
     6bc:	41b9      	sbcs	r1, r7
     6be:	41aa      	sbcs	r2, r5
     6c0:	41bb      	sbcs	r3, r7
     6c2:	f16c 0c00 	sbc.w	ip, ip, #0
     6c6:	f04c 0601 	orr.w	r6, ip, #1
     6ca:	f08c 0702 	eor.w	r7, ip, #2
     6ce:	eb18 0806 	adds.w	r8, r8, r6
     6d2:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6d6:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6da:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     6de:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     6e2:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     6e6:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     6ea:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     6ee:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     6f2:	eb18 000c 	adds.w	r0, r8, ip
     6f6:	eb59 010c 	adcs.w	r1, r9, ip
     6fa:	eb5a 020c 	adcs.w	r2, sl, ip
     6fe:	f15b 0300 	adcs.w	r3, fp, #0
     702:	f154 0400 	adcs.w	r4, r4, #0
     706:	f155 0500 	adcs.w	r5, r5, #0
     70a:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     70e:	eb57 070c 	adcs.w	r7, r7, ip
     712:	4770      	bx	lr

00000714 <ocrypto_mod_p256_mul>:
     714:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     718:	b087      	sub	sp, #28
     71a:	f7ff fdaf 	bl	27c <ocrypto_mul256_noframe>
     71e:	f8dd 8010 	ldr.w	r8, [sp, #16]
     722:	f8dd 9014 	ldr.w	r9, [sp, #20]
     726:	f8dd a018 	ldr.w	sl, [sp, #24]
     72a:	f7ff ff97 	bl	65c <mul_reduce>
     72e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     732:	f7ff ff93 	bl	65c <mul_reduce>
     736:	b003      	add	sp, #12
     738:	f85d 8b04 	ldr.w	r8, [sp], #4
     73c:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000744 <ocrypto_mod_p256_sqr>:
     744:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     748:	b087      	sub	sp, #28
     74a:	f7ff fe53 	bl	3f4 <ocrypto_sqr256_noframe>
     74e:	f8dd 8010 	ldr.w	r8, [sp, #16]
     752:	f8dd 9014 	ldr.w	r9, [sp, #20]
     756:	f8dd a018 	ldr.w	sl, [sp, #24]
     75a:	f7ff ff7f 	bl	65c <mul_reduce>
     75e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     762:	f7ff ff7b 	bl	65c <mul_reduce>
     766:	b003      	add	sp, #12
     768:	f85d 8b04 	ldr.w	r8, [sp], #4
     76c:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     776:	4c14      	ldr	r4, [pc, #80]	; (7c8 <ocrypto_mod_p256_sqr+0x84>)
     778:	7a20      	ldrb	r0, [r4, #8]
     77a:	f88d 0001 	strb.w	r0, [sp, #1]
     77e:	79e0      	ldrb	r0, [r4, #7]
     780:	f88d 0000 	strb.w	r0, [sp]
     784:	79a0      	ldrb	r0, [r4, #6]
     786:	f8ad 0004 	strh.w	r0, [sp, #4]
     78a:	7960      	ldrb	r0, [r4, #5]
     78c:	f8ad 0002 	strh.w	r0, [sp, #2]
     790:	4668      	mov	r0, sp
     792:	f006 f9d5 	bl	6b40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     796:	b108      	cbz	r0, 79c <ocrypto_mod_p256_sqr+0x58>
     798:	21ad      	movs	r1, #173	; 0xad
     79a:	e010      	b.n	7be <ocrypto_mod_p256_sqr+0x7a>
     79c:	68e0      	ldr	r0, [r4, #12]
     79e:	9002      	str	r0, [sp, #8]
     7a0:	a802      	add	r0, sp, #8
     7a2:	f006 f9e3 	bl	6b6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7a6:	b108      	cbz	r0, 7ac <ocrypto_mod_p256_sqr+0x68>
     7a8:	21b1      	movs	r1, #177	; 0xb1
     7aa:	e008      	b.n	7be <ocrypto_mod_p256_sqr+0x7a>
     7ac:	4807      	ldr	r0, [pc, #28]	; (7cc <ocrypto_mod_p256_sqr+0x88>)
     7ae:	6800      	ldr	r0, [r0, #0]
     7b0:	9003      	str	r0, [sp, #12]
     7b2:	a803      	add	r0, sp, #12
     7b4:	f00f f861 	bl	f87a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7b8:	2800      	cmp	r0, #0
     7ba:	d003      	beq.n	7c4 <ocrypto_mod_p256_sqr+0x80>
     7bc:	21b5      	movs	r1, #181	; 0xb5
     7be:	2003      	movs	r0, #3
     7c0:	f000 f8e4 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7c4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7c6:	0000      	.short	0x0000
     7c8:	20001050 	.word	0x20001050
     7cc:	00000a94 	.word	0x00000a94

000007d0 <sdc_build_revision_get>:
     7d0:	b510      	push	{r4, lr}
     7d2:	b128      	cbz	r0, 7e0 <sdc_build_revision_get+0x10>
     7d4:	2214      	movs	r2, #20
     7d6:	4904      	ldr	r1, [pc, #16]	; (7e8 <sdc_build_revision_get+0x18>)
     7d8:	f00f fe8f 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     7dc:	2000      	movs	r0, #0
     7de:	bd10      	pop	{r4, pc}
     7e0:	f06f 0015 	mvn.w	r0, #21
     7e4:	bd10      	pop	{r4, pc}
     7e6:	0000      	.short	0x0000
     7e8:	00000abc 	.word	0x00000abc

000007ec <sdc_cfg_set>:
     7ec:	b570      	push	{r4, r5, r6, lr}
     7ee:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     7f2:	bb78      	cbnz	r0, 854 <__data_size+0xa>
     7f4:	4c22      	ldr	r4, [pc, #136]	; (880 <__data_size+0x36>)
     7f6:	7860      	ldrb	r0, [r4, #1]
     7f8:	b108      	cbz	r0, 7fe <sdc_cfg_set+0x12>
     7fa:	11a8      	asrs	r0, r5, #6
     7fc:	bd70      	pop	{r4, r5, r6, pc}
     7fe:	b1f9      	cbz	r1, 840 <__z_interrupt_stack_SIZEOF>
     800:	f06f 0015 	mvn.w	r0, #21
     804:	2a00      	cmp	r2, #0
     806:	d0f9      	beq.n	7fc <sdc_cfg_set+0x10>
     808:	4b1e      	ldr	r3, [pc, #120]	; (884 <__data_size+0x3a>)
     80a:	1e89      	subs	r1, r1, #2
     80c:	2907      	cmp	r1, #7
     80e:	d231      	bcs.n	874 <__data_size+0x2a>
     810:	e8df f001 	tbb	[pc, r1]
     814:	1a170704 	.word	0x1a170704
     818:	00211d30 	.word	0x00211d30
     81c:	7810      	ldrb	r0, [r2, #0]
     81e:	7058      	strb	r0, [r3, #1]
     820:	e01d      	b.n	85e <__data_size+0x14>
     822:	7891      	ldrb	r1, [r2, #2]
     824:	2900      	cmp	r1, #0
     826:	d0e9      	beq.n	7fc <sdc_cfg_set+0x10>
     828:	78d1      	ldrb	r1, [r2, #3]
     82a:	2900      	cmp	r1, #0
     82c:	d0e6      	beq.n	7fc <sdc_cfg_set+0x10>
     82e:	7811      	ldrb	r1, [r2, #0]
     830:	291b      	cmp	r1, #27
     832:	d3e3      	bcc.n	7fc <sdc_cfg_set+0x10>
     834:	7851      	ldrb	r1, [r2, #1]
     836:	291b      	cmp	r1, #27
     838:	d3e0      	bcc.n	7fc <sdc_cfg_set+0x10>
     83a:	6810      	ldr	r0, [r2, #0]
     83c:	f8c3 0005 	str.w	r0, [r3, #5]
     840:	e00d      	b.n	85e <__data_size+0x14>
     842:	6810      	ldr	r0, [r2, #0]
     844:	60d8      	str	r0, [r3, #12]
     846:	e00a      	b.n	85e <__data_size+0x14>
     848:	7810      	ldrb	r0, [r2, #0]
     84a:	7098      	strb	r0, [r3, #2]
     84c:	e007      	b.n	85e <__data_size+0x14>
     84e:	8810      	ldrh	r0, [r2, #0]
     850:	8258      	strh	r0, [r3, #18]
     852:	e004      	b.n	85e <__data_size+0x14>
     854:	e00e      	b.n	874 <__data_size+0x2a>
     856:	8811      	ldrh	r1, [r2, #0]
     858:	29ff      	cmp	r1, #255	; 0xff
     85a:	d8cf      	bhi.n	7fc <sdc_cfg_set+0x10>
     85c:	7519      	strb	r1, [r3, #20]
     85e:	2201      	movs	r2, #1
     860:	4908      	ldr	r1, [pc, #32]	; (884 <__data_size+0x3a>)
     862:	2000      	movs	r0, #0
     864:	f00b fe54 	bl	c510 <__udivmoddi4+0x2a0>
     868:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     86c:	db04      	blt.n	878 <__data_size+0x2e>
     86e:	f06f 000b 	mvn.w	r0, #11
     872:	bd70      	pop	{r4, r5, r6, pc}
     874:	4628      	mov	r0, r5
     876:	bd70      	pop	{r4, r5, r6, pc}
     878:	2101      	movs	r1, #1
     87a:	70a1      	strb	r1, [r4, #2]
     87c:	bd70      	pop	{r4, r5, r6, pc}
     87e:	0000      	.short	0x0000
     880:	20000040 	.word	0x20000040
     884:	20001050 	.word	0x20001050

00000888 <sdc_disable>:
     888:	b510      	push	{r4, lr}
     88a:	4c07      	ldr	r4, [pc, #28]	; (8a8 <sdc_disable+0x20>)
     88c:	7860      	ldrb	r0, [r4, #1]
     88e:	b120      	cbz	r0, 89a <sdc_disable+0x12>
     890:	f006 fc52 	bl	7138 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     894:	7820      	ldrb	r0, [r4, #0]
     896:	f00b fc0b 	bl	c0b0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     89a:	f000 fe4d 	bl	1538 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     89e:	f000 ff25 	bl	16ec <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     8a2:	2000      	movs	r0, #0
     8a4:	7060      	strb	r0, [r4, #1]
     8a6:	bd10      	pop	{r4, pc}
     8a8:	20000040 	.word	0x20000040

000008ac <sdc_enable>:
     8ac:	b570      	push	{r4, r5, r6, lr}
     8ae:	460c      	mov	r4, r1
     8b0:	0005      	movs	r5, r0
     8b2:	d002      	beq.n	8ba <sdc_enable+0xe>
     8b4:	b10c      	cbz	r4, 8ba <sdc_enable+0xe>
     8b6:	0760      	lsls	r0, r4, #29
     8b8:	d002      	beq.n	8c0 <sdc_enable+0x14>
     8ba:	f06f 0015 	mvn.w	r0, #21
     8be:	bd70      	pop	{r4, r5, r6, pc}
     8c0:	f000 f922 	bl	b08 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     8c4:	b1a8      	cbz	r0, 8f2 <sdc_enable+0x46>
     8c6:	4628      	mov	r0, r5
     8c8:	f00b fbb8 	bl	c03c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     8cc:	4d0a      	ldr	r5, [pc, #40]	; (8f8 <sdc_enable+0x4c>)
     8ce:	2200      	movs	r2, #0
     8d0:	490a      	ldr	r1, [pc, #40]	; (8fc <sdc_enable+0x50>)
     8d2:	7028      	strb	r0, [r5, #0]
     8d4:	4620      	mov	r0, r4
     8d6:	f00b fe1b 	bl	c510 <__udivmoddi4+0x2a0>
     8da:	f00f fbd6 	bl	1008a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     8de:	2100      	movs	r1, #0
     8e0:	7828      	ldrb	r0, [r5, #0]
     8e2:	f006 fc13 	bl	710c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     8e6:	f7ff ff45 	bl	774 <ocrypto_mod_p256_sqr+0x30>
     8ea:	2001      	movs	r0, #1
     8ec:	7068      	strb	r0, [r5, #1]
     8ee:	2000      	movs	r0, #0
     8f0:	bd70      	pop	{r4, r5, r6, pc}
     8f2:	f04f 30ff 	mov.w	r0, #4294967295
     8f6:	bd70      	pop	{r4, r5, r6, pc}
     8f8:	20000040 	.word	0x20000040
     8fc:	20001050 	.word	0x20001050

00000900 <sdc_init>:
     900:	b530      	push	{r4, r5, lr}
     902:	b089      	sub	sp, #36	; 0x24
     904:	0004      	movs	r4, r0
     906:	d00c      	beq.n	922 <sdc_init+0x22>
     908:	f00b fb40 	bl	bf8c <mpsl_is_initialized>
     90c:	f04f 35ff 	mov.w	r5, #4294967295
     910:	b120      	cbz	r0, 91c <sdc_init+0x1c>
     912:	f00b f9d3 	bl	bcbc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     916:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     91a:	d905      	bls.n	928 <sdc_init+0x28>
     91c:	4628      	mov	r0, r5
     91e:	b009      	add	sp, #36	; 0x24
     920:	bd30      	pop	{r4, r5, pc}
     922:	f06f 0015 	mvn.w	r0, #21
     926:	e7fa      	b.n	91e <sdc_init+0x1e>
     928:	4d13      	ldr	r5, [pc, #76]	; (978 <sdc_init+0x78>)
     92a:	4814      	ldr	r0, [pc, #80]	; (97c <sdc_init+0x7c>)
     92c:	606c      	str	r4, [r5, #4]
     92e:	f000 fa07 	bl	d40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     932:	2000      	movs	r0, #0
     934:	7068      	strb	r0, [r5, #1]
     936:	70a8      	strb	r0, [r5, #2]
     938:	4601      	mov	r1, r0
     93a:	2224      	movs	r2, #36	; 0x24
     93c:	4668      	mov	r0, sp
     93e:	f00f fe56 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     942:	2224      	movs	r2, #36	; 0x24
     944:	490e      	ldr	r1, [pc, #56]	; (980 <sdc_init+0x80>)
     946:	4668      	mov	r0, sp
     948:	f00f fdd7 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     94c:	2224      	movs	r2, #36	; 0x24
     94e:	4669      	mov	r1, sp
     950:	480c      	ldr	r0, [pc, #48]	; (984 <sdc_init+0x84>)
     952:	f00f fdd2 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     956:	f3ef 8410 	mrs	r4, PRIMASK
     95a:	b672      	cpsid	i
     95c:	f000 fdfa 	bl	1554 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     960:	4809      	ldr	r0, [pc, #36]	; (988 <sdc_init+0x88>)
     962:	f000 fecf 	bl	1704 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     966:	b118      	cbz	r0, 970 <sdc_init+0x70>
     968:	21cb      	movs	r1, #203	; 0xcb
     96a:	2003      	movs	r0, #3
     96c:	f000 f80e 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     970:	b904      	cbnz	r4, 974 <sdc_init+0x74>
     972:	b662      	cpsie	i
     974:	2000      	movs	r0, #0
     976:	e7d2      	b.n	91e <sdc_init+0x1e>
     978:	20000040 	.word	0x20000040
     97c:	00000775 	.word	0x00000775
     980:	00000a98 	.word	0x00000a98
     984:	20001050 	.word	0x20001050
     988:	00000b35 	.word	0x00000b35

0000098c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     98c:	b50e      	push	{r1, r2, r3, lr}
     98e:	b672      	cpsid	i
     990:	4a15      	ldr	r2, [pc, #84]	; (9e8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     992:	6855      	ldr	r5, [r2, #4]
     994:	b1dd      	cbz	r5, 9ce <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     996:	2200      	movs	r2, #0
     998:	4603      	mov	r3, r0
     99a:	466e      	mov	r6, sp
     99c:	240a      	movs	r4, #10
     99e:	e003      	b.n	9a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     9a0:	fbb0 f0f4 	udiv	r0, r0, r4
     9a4:	1c52      	adds	r2, r2, #1
     9a6:	b2d2      	uxtb	r2, r2
     9a8:	2800      	cmp	r0, #0
     9aa:	d1f9      	bne.n	9a0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     9ac:	54b0      	strb	r0, [r6, r2]
     9ae:	e00a      	b.n	9c6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     9b0:	b2d8      	uxtb	r0, r3
     9b2:	fbb0 f7f4 	udiv	r7, r0, r4
     9b6:	fbb3 f3f4 	udiv	r3, r3, r4
     9ba:	fb04 0017 	mls	r0, r4, r7, r0
     9be:	1e52      	subs	r2, r2, #1
     9c0:	b2d2      	uxtb	r2, r2
     9c2:	3030      	adds	r0, #48	; 0x30
     9c4:	54b0      	strb	r0, [r6, r2]
     9c6:	2a00      	cmp	r2, #0
     9c8:	d1f2      	bne.n	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     9ca:	4630      	mov	r0, r6
     9cc:	47a8      	blx	r5
     9ce:	f3bf 8f4f 	dsb	sy
     9d2:	4806      	ldr	r0, [pc, #24]	; (9ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     9d4:	6801      	ldr	r1, [r0, #0]
     9d6:	4a06      	ldr	r2, [pc, #24]	; (9f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     9d8:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     9dc:	4311      	orrs	r1, r2
     9de:	6001      	str	r1, [r0, #0]
     9e0:	f3bf 8f4f 	dsb	sy
     9e4:	bf00      	nop
     9e6:	e7fd      	b.n	9e4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     9e8:	20000040 	.word	0x20000040
     9ec:	e000ed0c 	.word	0xe000ed0c
     9f0:	05fa0004 	.word	0x05fa0004

000009f4 <sdc_support_adv>:
     9f4:	4806      	ldr	r0, [pc, #24]	; (a10 <sdc_support_adv+0x1c>)
     9f6:	b510      	push	{r4, lr}
     9f8:	7881      	ldrb	r1, [r0, #2]
     9fa:	7840      	ldrb	r0, [r0, #1]
     9fc:	4301      	orrs	r1, r0
     9fe:	d002      	beq.n	a06 <sdc_support_adv+0x12>
     a00:	f04f 30ff 	mov.w	r0, #4294967295
     a04:	bd10      	pop	{r4, pc}
     a06:	f006 fba7 	bl	7158 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     a0a:	2000      	movs	r0, #0
     a0c:	bd10      	pop	{r4, pc}
     a0e:	0000      	.short	0x0000
     a10:	20000040 	.word	0x20000040

00000a14 <sdc_support_dle_peripheral>:
     a14:	4806      	ldr	r0, [pc, #24]	; (a30 <sdc_support_dle_peripheral+0x1c>)
     a16:	b510      	push	{r4, lr}
     a18:	7881      	ldrb	r1, [r0, #2]
     a1a:	7840      	ldrb	r0, [r0, #1]
     a1c:	4301      	orrs	r1, r0
     a1e:	d002      	beq.n	a26 <sdc_support_dle_peripheral+0x12>
     a20:	f04f 30ff 	mov.w	r0, #4294967295
     a24:	bd10      	pop	{r4, pc}
     a26:	f006 f9bf 	bl	6da8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
     a2a:	2000      	movs	r0, #0
     a2c:	bd10      	pop	{r4, pc}
     a2e:	0000      	.short	0x0000
     a30:	20000040 	.word	0x20000040

00000a34 <sdc_support_le_2m_phy>:
     a34:	4806      	ldr	r0, [pc, #24]	; (a50 <sdc_support_le_2m_phy+0x1c>)
     a36:	b510      	push	{r4, lr}
     a38:	7881      	ldrb	r1, [r0, #2]
     a3a:	7840      	ldrb	r0, [r0, #1]
     a3c:	4301      	orrs	r1, r0
     a3e:	d002      	beq.n	a46 <sdc_support_le_2m_phy+0x12>
     a40:	f04f 30ff 	mov.w	r0, #4294967295
     a44:	bd10      	pop	{r4, pc}
     a46:	f00f f8bc 	bl	fbc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     a4a:	2000      	movs	r0, #0
     a4c:	bd10      	pop	{r4, pc}
     a4e:	0000      	.short	0x0000
     a50:	20000040 	.word	0x20000040

00000a54 <sdc_support_peripheral>:
     a54:	4806      	ldr	r0, [pc, #24]	; (a70 <sdc_support_peripheral+0x1c>)
     a56:	b510      	push	{r4, lr}
     a58:	7881      	ldrb	r1, [r0, #2]
     a5a:	7840      	ldrb	r0, [r0, #1]
     a5c:	4301      	orrs	r1, r0
     a5e:	d002      	beq.n	a66 <sdc_support_peripheral+0x12>
     a60:	f04f 30ff 	mov.w	r0, #4294967295
     a64:	bd10      	pop	{r4, pc}
     a66:	f006 fb89 	bl	717c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
     a6a:	2000      	movs	r0, #0
     a6c:	bd10      	pop	{r4, pc}
     a6e:	0000      	.short	0x0000
     a70:	20000040 	.word	0x20000040

00000a74 <sdc_support_phy_update_peripheral>:
     a74:	4806      	ldr	r0, [pc, #24]	; (a90 <sdc_support_phy_update_peripheral+0x1c>)
     a76:	b510      	push	{r4, lr}
     a78:	7881      	ldrb	r1, [r0, #2]
     a7a:	7840      	ldrb	r0, [r0, #1]
     a7c:	4301      	orrs	r1, r0
     a7e:	d002      	beq.n	a86 <sdc_support_phy_update_peripheral+0x12>
     a80:	f04f 30ff 	mov.w	r0, #4294967295
     a84:	bd10      	pop	{r4, pc}
     a86:	f00f f8b0 	bl	fbea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
     a8a:	2000      	movs	r0, #0
     a8c:	bd10      	pop	{r4, pc}
     a8e:	0000      	.short	0x0000
     a90:	20000040 	.word	0x20000040
     a94:	00000001 	.word	0x00000001
     a98:	00010100 	.word	0x00010100
     a9c:	031b1b00 	.word	0x031b1b00
     aa0:	00000002 	.word	0x00000002
     aa4:	00001d4c 	.word	0x00001d4c
     aa8:	001f0000 	.word	0x001f0000
     aac:	00000008 	.word	0x00000008
	...
     abc:	c12e7ee0 	.word	0xc12e7ee0
     ac0:	2385055e 	.word	0x2385055e
     ac4:	fadc1546 	.word	0xfadc1546
     ac8:	707d298e 	.word	0x707d298e
     acc:	fca59310 	.word	0xfca59310

00000ad0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     ad0:	4a05      	ldr	r2, [pc, #20]	; (ae8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     ad2:	b510      	push	{r4, lr}
     ad4:	6852      	ldr	r2, [r2, #4]
     ad6:	b112      	cbz	r2, ade <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     adc:	4710      	bx	r2
     ade:	2192      	movs	r1, #146	; 0x92
     ae0:	2004      	movs	r0, #4
     ae2:	f7ff ff53 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ae6:	0000      	.short	0x0000
     ae8:	20001074 	.word	0x20001074

00000aec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     aec:	4a05      	ldr	r2, [pc, #20]	; (b04 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     aee:	b510      	push	{r4, lr}
     af0:	6892      	ldr	r2, [r2, #8]
     af2:	b112      	cbz	r2, afa <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     af8:	4710      	bx	r2
     afa:	2198      	movs	r1, #152	; 0x98
     afc:	2004      	movs	r0, #4
     afe:	f7ff ff45 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b02:	0000      	.short	0x0000
     b04:	20001074 	.word	0x20001074

00000b08 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b08:	4805      	ldr	r0, [pc, #20]	; (b20 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b0a:	6801      	ldr	r1, [r0, #0]
     b0c:	b129      	cbz	r1, b1a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b0e:	6841      	ldr	r1, [r0, #4]
     b10:	b119      	cbz	r1, b1a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b12:	6880      	ldr	r0, [r0, #8]
     b14:	b108      	cbz	r0, b1a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b16:	2001      	movs	r0, #1
     b18:	4770      	bx	lr
     b1a:	2000      	movs	r0, #0
     b1c:	4770      	bx	lr
     b1e:	0000      	.short	0x0000
     b20:	20001074 	.word	0x20001074

00000b24 <sdc_rand_source_register>:
     b24:	4902      	ldr	r1, [pc, #8]	; (b30 <sdc_rand_source_register+0xc>)
     b26:	c80d      	ldmia	r0, {r0, r2, r3}
     b28:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     b2c:	2000      	movs	r0, #0
     b2e:	4770      	bx	lr
     b30:	20001074 	.word	0x20001074

00000b34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b36:	4c12      	ldr	r4, [pc, #72]	; (b80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     b38:	2600      	movs	r6, #0
     b3a:	6825      	ldr	r5, [r4, #0]
     b3c:	e011      	b.n	b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b3e:	9800      	ldr	r0, [sp, #0]
     b40:	2802      	cmp	r0, #2
     b42:	d002      	beq.n	b4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     b44:	2803      	cmp	r0, #3
     b46:	d10c      	bne.n	b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b48:	e006      	b.n	b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     b4a:	6820      	ldr	r0, [r4, #0]
     b4c:	b110      	cbz	r0, b54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     b4e:	2000      	movs	r0, #0
     b50:	6026      	str	r6, [r4, #0]
     b52:	e005      	b.n	b60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     b54:	2128      	movs	r1, #40	; 0x28
     b56:	e00c      	b.n	b72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b58:	6820      	ldr	r0, [r4, #0]
     b5a:	b168      	cbz	r0, b78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     b5c:	2001      	movs	r0, #1
     b5e:	6026      	str	r6, [r4, #0]
     b60:	47a8      	blx	r5
     b62:	4668      	mov	r0, sp
     b64:	f000 fd94 	bl	1690 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     b68:	2800      	cmp	r0, #0
     b6a:	d0e8      	beq.n	b3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     b6c:	2805      	cmp	r0, #5
     b6e:	d005      	beq.n	b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     b70:	2135      	movs	r1, #53	; 0x35
     b72:	2004      	movs	r0, #4
     b74:	f7ff ff0a 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b78:	212d      	movs	r1, #45	; 0x2d
     b7a:	e7fa      	b.n	b72 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b7e:	0000      	.short	0x0000
     b80:	20000048 	.word	0x20000048

00000b84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     b84:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     b88:	4e28      	ldr	r6, [pc, #160]	; (c2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     b8a:	4605      	mov	r5, r0
     b8c:	1d00      	adds	r0, r0, #4
     b8e:	f106 0744 	add.w	r7, r6, #68	; 0x44
     b92:	6030      	str	r0, [r6, #0]
     b94:	7838      	ldrb	r0, [r7, #0]
     b96:	b158      	cbz	r0, bb0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     b98:	78ba      	ldrb	r2, [r7, #2]
     b9a:	463c      	mov	r4, r7
     b9c:	1c79      	adds	r1, r7, #1
     b9e:	4628      	mov	r0, r5
     ba0:	1c92      	adds	r2, r2, #2
     ba2:	f00f fcaa 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     ba6:	2000      	movs	r0, #0
     ba8:	7020      	strb	r0, [r4, #0]
     baa:	2004      	movs	r0, #4
     bac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     bb0:	481e      	ldr	r0, [pc, #120]	; (c2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bb2:	f001 fe5f 	bl	2874 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     bb6:	4604      	mov	r4, r0
     bb8:	2802      	cmp	r0, #2
     bba:	d004      	beq.n	bc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     bbc:	2c04      	cmp	r4, #4
     bbe:	d007      	beq.n	bd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     bc0:	2c08      	cmp	r4, #8
     bc2:	d02c      	beq.n	c1e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
     bc4:	e02f      	b.n	c26 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bc6:	4919      	ldr	r1, [pc, #100]	; (c2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bc8:	4628      	mov	r0, r5
     bca:	f00b fd49 	bl	c660 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     bce:	e02a      	b.n	c26 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bd0:	7830      	ldrb	r0, [r6, #0]
     bd2:	2808      	cmp	r0, #8
     bd4:	d104      	bne.n	be0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     bd6:	2105      	movs	r1, #5
     bd8:	203e      	movs	r0, #62	; 0x3e
     bda:	f00b fd13 	bl	c604 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     bde:	b150      	cbz	r0, bf6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
     be0:	4912      	ldr	r1, [pc, #72]	; (c2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     be2:	4628      	mov	r0, r5
     be4:	f00b fda1 	bl	c72a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     be8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     bec:	d30e      	bcc.n	c0c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
     bee:	21c7      	movs	r1, #199	; 0xc7
     bf0:	2008      	movs	r0, #8
     bf2:	f7ff fecb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bf6:	88b0      	ldrh	r0, [r6, #4]
     bf8:	f8ad 0000 	strh.w	r0, [sp]
     bfc:	a901      	add	r1, sp, #4
     bfe:	4668      	mov	r0, sp
     c00:	f00b ffff 	bl	cc02 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     c04:	2800      	cmp	r0, #0
     c06:	d0c5      	beq.n	b94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c08:	21a8      	movs	r1, #168	; 0xa8
     c0a:	e7f1      	b.n	bf0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
     c0c:	2800      	cmp	r0, #0
     c0e:	d0c1      	beq.n	b94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c10:	78a9      	ldrb	r1, [r5, #2]
     c12:	7828      	ldrb	r0, [r5, #0]
     c14:	f00b fcf6 	bl	c604 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c18:	2800      	cmp	r0, #0
     c1a:	d0bb      	beq.n	b94 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c1c:	e003      	b.n	c26 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     c1e:	4903      	ldr	r1, [pc, #12]	; (c2c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c20:	4628      	mov	r0, r5
     c22:	f00b fd4b 	bl	c6bc <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c26:	4620      	mov	r0, r4
     c28:	e7c0      	b.n	bac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c2a:	0000      	.short	0x0000
     c2c:	20001080 	.word	0x20001080
     c30:	b570      	push	{r4, r5, r6, lr}
     c32:	780a      	ldrb	r2, [r1, #0]
     c34:	7082      	strb	r2, [r0, #2]
     c36:	b33a      	cbz	r2, c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c38:	2a01      	cmp	r2, #1
     c3a:	d825      	bhi.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c3c:	2313      	movs	r3, #19
     c3e:	7003      	strb	r3, [r0, #0]
     c40:	2300      	movs	r3, #0
     c42:	e00a      	b.n	c5a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
     c44:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     c48:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     c4c:	78a6      	ldrb	r6, [r4, #2]
     c4e:	70ee      	strb	r6, [r5, #3]
     c50:	8864      	ldrh	r4, [r4, #2]
     c52:	0a24      	lsrs	r4, r4, #8
     c54:	1c5b      	adds	r3, r3, #1
     c56:	712c      	strb	r4, [r5, #4]
     c58:	b2db      	uxtb	r3, r3
     c5a:	4293      	cmp	r3, r2
     c5c:	d3f2      	bcc.n	c44 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
     c5e:	2300      	movs	r3, #0
     c60:	e00b      	b.n	c7a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
     c62:	bf00      	nop
     c64:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     c68:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     c6c:	792e      	ldrb	r6, [r5, #4]
     c6e:	7166      	strb	r6, [r4, #5]
     c70:	88ad      	ldrh	r5, [r5, #4]
     c72:	0a2d      	lsrs	r5, r5, #8
     c74:	1c5b      	adds	r3, r3, #1
     c76:	71a5      	strb	r5, [r4, #6]
     c78:	b2db      	uxtb	r3, r3
     c7a:	4293      	cmp	r3, r2
     c7c:	d3f2      	bcc.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
     c7e:	2101      	movs	r1, #1
     c80:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     c84:	b2c0      	uxtb	r0, r0
     c86:	bd70      	pop	{r4, r5, r6, pc}
     c88:	2000      	movs	r0, #0
     c8a:	bd70      	pop	{r4, r5, r6, pc}

00000c8c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     c8c:	2840      	cmp	r0, #64	; 0x40
     c8e:	d203      	bcs.n	c98 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     c90:	1e40      	subs	r0, r0, #1
     c92:	b2c1      	uxtb	r1, r0
     c94:	4805      	ldr	r0, [pc, #20]	; (cac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     c96:	e005      	b.n	ca4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     c98:	28ff      	cmp	r0, #255	; 0xff
     c9a:	d005      	beq.n	ca8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     c9c:	3840      	subs	r0, #64	; 0x40
     c9e:	b2c1      	uxtb	r1, r0
     ca0:	4802      	ldr	r0, [pc, #8]	; (cac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     ca2:	3008      	adds	r0, #8
     ca4:	f00b bf40 	b.w	cb28 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     ca8:	2001      	movs	r0, #1
     caa:	4770      	bx	lr
     cac:	2000004c 	.word	0x2000004c

00000cb0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     cb0:	1e40      	subs	r0, r0, #1
     cb2:	b2c1      	uxtb	r1, r0
     cb4:	4801      	ldr	r0, [pc, #4]	; (cbc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     cb6:	f00b bf37 	b.w	cb28 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cba:	0000      	.short	0x0000
     cbc:	2000005c 	.word	0x2000005c

00000cc0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     cc0:	4902      	ldr	r1, [pc, #8]	; (ccc <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     cc2:	6802      	ldr	r2, [r0, #0]
     cc4:	610a      	str	r2, [r1, #16]
     cc6:	6840      	ldr	r0, [r0, #4]
     cc8:	6148      	str	r0, [r1, #20]
     cca:	4770      	bx	lr
     ccc:	2000004c 	.word	0x2000004c

00000cd0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     cd0:	4905      	ldr	r1, [pc, #20]	; (ce8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     cd2:	6802      	ldr	r2, [r0, #0]
     cd4:	600a      	str	r2, [r1, #0]
     cd6:	6840      	ldr	r0, [r0, #4]
     cd8:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     cdc:	600a      	str	r2, [r1, #0]
     cde:	4a03      	ldr	r2, [pc, #12]	; (cec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     ce0:	4310      	orrs	r0, r2
     ce2:	6048      	str	r0, [r1, #4]
     ce4:	4770      	bx	lr
     ce6:	0000      	.short	0x0000
     ce8:	2000004c 	.word	0x2000004c
     cec:	024007f8 	.word	0x024007f8

00000cf0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     cf0:	4902      	ldr	r1, [pc, #8]	; (cfc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     cf2:	6802      	ldr	r2, [r0, #0]
     cf4:	608a      	str	r2, [r1, #8]
     cf6:	6840      	ldr	r0, [r0, #4]
     cf8:	60c8      	str	r0, [r1, #12]
     cfa:	4770      	bx	lr
     cfc:	2000004c 	.word	0x2000004c

00000d00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d00:	4807      	ldr	r0, [pc, #28]	; (d20 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d02:	f04f 31ff 	mov.w	r1, #4294967295
     d06:	2200      	movs	r2, #0
     d08:	6001      	str	r1, [r0, #0]
     d0a:	0cc9      	lsrs	r1, r1, #19
     d0c:	6041      	str	r1, [r0, #4]
     d0e:	f100 0108 	add.w	r1, r0, #8
     d12:	201f      	movs	r0, #31
     d14:	600a      	str	r2, [r1, #0]
     d16:	604a      	str	r2, [r1, #4]
     d18:	3108      	adds	r1, #8
     d1a:	e9c1 0200 	strd	r0, r2, [r1]
     d1e:	4770      	bx	lr
     d20:	2000004c 	.word	0x2000004c

00000d24 <sdc_hci_cmd_cb_reset>:
     d24:	b510      	push	{r4, lr}
     d26:	f7ff ffeb 	bl	d00 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d2a:	f00e febe 	bl	faaa <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d2e:	4604      	mov	r4, r0
     d30:	4802      	ldr	r0, [pc, #8]	; (d3c <sdc_hci_cmd_cb_reset+0x18>)
     d32:	6800      	ldr	r0, [r0, #0]
     d34:	b100      	cbz	r0, d38 <sdc_hci_cmd_cb_reset+0x14>
     d36:	4780      	blx	r0
     d38:	4620      	mov	r0, r4
     d3a:	bd10      	pop	{r4, pc}
     d3c:	20000064 	.word	0x20000064

00000d40 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     d40:	4901      	ldr	r1, [pc, #4]	; (d48 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     d42:	6008      	str	r0, [r1, #0]
     d44:	4770      	bx	lr
     d46:	0000      	.short	0x0000
     d48:	20000064 	.word	0x20000064

00000d4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d50:	4604      	mov	r4, r0
     d52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     d56:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     d5a:	4d1f      	ldr	r5, [pc, #124]	; (dd8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d5c:	4e1e      	ldr	r6, [pc, #120]	; (dd8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d5e:	3d10      	subs	r5, #16
     d60:	2210      	movs	r2, #16
     d62:	2100      	movs	r1, #0
     d64:	4620      	mov	r0, r4
     d66:	f00f fc42 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d6a:	2210      	movs	r2, #16
     d6c:	2100      	movs	r1, #0
     d6e:	f104 0010 	add.w	r0, r4, #16
     d72:	f00f fc3c 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d76:	6828      	ldr	r0, [r5, #0]
     d78:	1c40      	adds	r0, r0, #1
     d7a:	d108      	bne.n	d8e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     d7c:	6868      	ldr	r0, [r5, #4]
     d7e:	1c40      	adds	r0, r0, #1
     d80:	d105      	bne.n	d8e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     d82:	68a8      	ldr	r0, [r5, #8]
     d84:	1c40      	adds	r0, r0, #1
     d86:	d102      	bne.n	d8e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     d88:	68e8      	ldr	r0, [r5, #12]
     d8a:	1c40      	adds	r0, r0, #1
     d8c:	d007      	beq.n	d9e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     d8e:	6828      	ldr	r0, [r5, #0]
     d90:	686a      	ldr	r2, [r5, #4]
     d92:	68a9      	ldr	r1, [r5, #8]
     d94:	68eb      	ldr	r3, [r5, #12]
     d96:	6120      	str	r0, [r4, #16]
     d98:	6162      	str	r2, [r4, #20]
     d9a:	61a1      	str	r1, [r4, #24]
     d9c:	61e3      	str	r3, [r4, #28]
     d9e:	2000      	movs	r0, #0
     da0:	f000 fd84 	bl	18ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     da4:	4387      	bics	r7, r0
     da6:	07f8      	lsls	r0, r7, #31
     da8:	d113      	bne.n	dd2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     daa:	6830      	ldr	r0, [r6, #0]
     dac:	1c40      	adds	r0, r0, #1
     dae:	d108      	bne.n	dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     db0:	6870      	ldr	r0, [r6, #4]
     db2:	1c40      	adds	r0, r0, #1
     db4:	d105      	bne.n	dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     db6:	68b0      	ldr	r0, [r6, #8]
     db8:	1c40      	adds	r0, r0, #1
     dba:	d102      	bne.n	dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dbc:	68f0      	ldr	r0, [r6, #12]
     dbe:	1c40      	adds	r0, r0, #1
     dc0:	d007      	beq.n	dd2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     dc2:	6832      	ldr	r2, [r6, #0]
     dc4:	6870      	ldr	r0, [r6, #4]
     dc6:	68b1      	ldr	r1, [r6, #8]
     dc8:	68f3      	ldr	r3, [r6, #12]
     dca:	6022      	str	r2, [r4, #0]
     dcc:	6060      	str	r0, [r4, #4]
     dce:	60a1      	str	r1, [r4, #8]
     dd0:	60e3      	str	r3, [r4, #12]
     dd2:	2000      	movs	r0, #0
     dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dd8:	10000090 	.word	0x10000090

00000ddc <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     ddc:	b538      	push	{r3, r4, r5, lr}
     dde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     de2:	4604      	mov	r4, r0
     de4:	4822      	ldr	r0, [pc, #136]	; (e70 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     de6:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     dea:	4d21      	ldr	r5, [pc, #132]	; (e70 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     dec:	6802      	ldr	r2, [r0, #0]
     dee:	3d14      	subs	r5, #20
     df0:	1c52      	adds	r2, r2, #1
     df2:	d104      	bne.n	dfe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     df4:	6842      	ldr	r2, [r0, #4]
     df6:	43d2      	mvns	r2, r2
     df8:	0412      	lsls	r2, r2, #16
     dfa:	0c12      	lsrs	r2, r2, #16
     dfc:	d035      	beq.n	e6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     dfe:	07c9      	lsls	r1, r1, #31
     e00:	d033      	beq.n	e6a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e02:	6801      	ldr	r1, [r0, #0]
     e04:	6840      	ldr	r0, [r0, #4]
     e06:	f8ad 0000 	strh.w	r0, [sp]
     e0a:	f8c4 1001 	str.w	r1, [r4, #1]
     e0e:	f8bd 0000 	ldrh.w	r0, [sp]
     e12:	f8a4 0005 	strh.w	r0, [r4, #5]
     e16:	79a0      	ldrb	r0, [r4, #6]
     e18:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e1c:	71a0      	strb	r0, [r4, #6]
     e1e:	6828      	ldr	r0, [r5, #0]
     e20:	1c40      	adds	r0, r0, #1
     e22:	d00c      	beq.n	e3e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e24:	6868      	ldr	r0, [r5, #4]
     e26:	1c40      	adds	r0, r0, #1
     e28:	d009      	beq.n	e3e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e2a:	68a8      	ldr	r0, [r5, #8]
     e2c:	1c40      	adds	r0, r0, #1
     e2e:	d006      	beq.n	e3e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e30:	68e8      	ldr	r0, [r5, #12]
     e32:	1c40      	adds	r0, r0, #1
     e34:	d003      	beq.n	e3e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e36:	2000      	movs	r0, #0
     e38:	f000 fd38 	bl	18ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e3c:	b140      	cbz	r0, e50 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     e3e:	2210      	movs	r2, #16
     e40:	2100      	movs	r1, #0
     e42:	1de0      	adds	r0, r4, #7
     e44:	f00f fbd3 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e48:	2001      	movs	r0, #1
     e4a:	7020      	strb	r0, [r4, #0]
     e4c:	2000      	movs	r0, #0
     e4e:	bd38      	pop	{r3, r4, r5, pc}
     e50:	682a      	ldr	r2, [r5, #0]
     e52:	6869      	ldr	r1, [r5, #4]
     e54:	68a8      	ldr	r0, [r5, #8]
     e56:	68eb      	ldr	r3, [r5, #12]
     e58:	f8c4 2007 	str.w	r2, [r4, #7]
     e5c:	f8c4 100b 	str.w	r1, [r4, #11]
     e60:	f8c4 000f 	str.w	r0, [r4, #15]
     e64:	f8c4 3013 	str.w	r3, [r4, #19]
     e68:	e7ee      	b.n	e48 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     e6a:	2000      	movs	r0, #0
     e6c:	e7ed      	b.n	e4a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     e6e:	0000      	.short	0x0000
     e70:	100000a4 	.word	0x100000a4

00000e74 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e74:	2102      	movs	r1, #2
     e76:	8001      	strh	r1, [r0, #0]
     e78:	8041      	strh	r1, [r0, #2]
     e7a:	2100      	movs	r1, #0
     e7c:	7101      	strb	r1, [r0, #4]
     e7e:	21e0      	movs	r1, #224	; 0xe0
     e80:	7141      	strb	r1, [r0, #5]
     e82:	f642 617e 	movw	r1, #11902	; 0x2e7e
     e86:	80c1      	strh	r1, [r0, #6]
     e88:	4901      	ldr	r1, [pc, #4]	; (e90 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e8a:	6081      	str	r1, [r0, #8]
     e8c:	2000      	movs	r0, #0
     e8e:	4770      	bx	lr
     e90:	85055ec1 	.word	0x85055ec1
     e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e98:	798c      	ldrb	r4, [r1, #6]
     e9a:	f8dd e018 	ldr.w	lr, [sp, #24]
     e9e:	2c08      	cmp	r4, #8
     ea0:	d901      	bls.n	ea6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     ea2:	21db      	movs	r1, #219	; 0xdb
     ea4:	e02c      	b.n	f00 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     ea6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; f4c <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     eaa:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     eae:	b10d      	cbz	r5, eb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     eb0:	21dc      	movs	r1, #220	; 0xdc
     eb2:	e025      	b.n	f00 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     eb4:	79cd      	ldrb	r5, [r1, #7]
     eb6:	2d00      	cmp	r5, #0
     eb8:	d045      	beq.n	f46 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     eba:	006f      	lsls	r7, r5, #1
     ebc:	370a      	adds	r7, #10
     ebe:	681d      	ldr	r5, [r3, #0]
     ec0:	2c02      	cmp	r4, #2
     ec2:	443d      	add	r5, r7
     ec4:	d901      	bls.n	eca <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     ec6:	4626      	mov	r6, r4
     ec8:	e001      	b.n	ece <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     eca:	f04f 0602 	mov.w	r6, #2
     ece:	442e      	add	r6, r5
     ed0:	f1a6 0601 	sub.w	r6, r6, #1
     ed4:	d901      	bls.n	eda <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     ed6:	4625      	mov	r5, r4
     ed8:	e001      	b.n	ede <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     eda:	f04f 0502 	mov.w	r5, #2
     ede:	f1a5 0501 	sub.w	r5, r5, #1
     ee2:	ea26 0605 	bic.w	r6, r6, r5
     ee6:	888d      	ldrh	r5, [r1, #4]
     ee8:	4425      	add	r5, r4
     eea:	f1a4 0401 	sub.w	r4, r4, #1
     eee:	f1a5 0501 	sub.w	r5, r5, #1
     ef2:	ea25 0504 	bic.w	r5, r5, r4
     ef6:	f64f 74ff 	movw	r4, #65535	; 0xffff
     efa:	42a5      	cmp	r5, r4
     efc:	d303      	bcc.n	f06 <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     efe:	21e7      	movs	r1, #231	; 0xe7
     f00:	2017      	movs	r0, #23
     f02:	f7ff fd43 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f06:	f1be 0f00 	cmp.w	lr, #0
     f0a:	d118      	bne.n	f3e <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f0c:	1bf4      	subs	r4, r6, r7
     f0e:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f12:	8025      	strh	r5, [r4, #0]
     f14:	79c8      	ldrb	r0, [r1, #7]
     f16:	70a0      	strb	r0, [r4, #2]
     f18:	2001      	movs	r0, #1
     f1a:	70e0      	strb	r0, [r4, #3]
     f1c:	7122      	strb	r2, [r4, #4]
     f1e:	6808      	ldr	r0, [r1, #0]
     f20:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f24:	0c00      	lsrs	r0, r0, #16
     f26:	80e0      	strh	r0, [r4, #6]
     f28:	8808      	ldrh	r0, [r1, #0]
     f2a:	8120      	strh	r0, [r4, #8]
     f2c:	2000      	movs	r0, #0
     f2e:	e003      	b.n	f38 <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f30:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f34:	1c40      	adds	r0, r0, #1
     f36:	817a      	strh	r2, [r7, #10]
     f38:	79cf      	ldrb	r7, [r1, #7]
     f3a:	4287      	cmp	r7, r0
     f3c:	d8f8      	bhi.n	f30 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     f3e:	79c8      	ldrb	r0, [r1, #7]
     f40:	fb00 6005 	mla	r0, r0, r5, r6
     f44:	6018      	str	r0, [r3, #0]
     f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f4a:	0000      	.short	0x0000
     f4c:	20000068 	.word	0x20000068
     f50:	b530      	push	{r4, r5, lr}
     f52:	4603      	mov	r3, r0
     f54:	ea4f 0002 	mov.w	r0, r2
     f58:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     f5c:	8964      	ldrh	r4, [r4, #10]
     f5e:	428c      	cmp	r4, r1
     f60:	d009      	beq.n	f76 <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     f62:	789c      	ldrb	r4, [r3, #2]
     f64:	1c40      	adds	r0, r0, #1
     f66:	fbb0 f5f4 	udiv	r5, r0, r4
     f6a:	fb04 0015 	mls	r0, r4, r5, r0
     f6e:	b2c0      	uxtb	r0, r0
     f70:	4290      	cmp	r0, r2
     f72:	d1f1      	bne.n	f58 <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     f74:	20ff      	movs	r0, #255	; 0xff
     f76:	bd30      	pop	{r4, r5, pc}

00000f78 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	4605      	mov	r5, r0
     f7c:	4819      	ldr	r0, [pc, #100]	; (fe4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
     f7e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     f82:	b364      	cbz	r4, fde <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     f84:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     f88:	d304      	bcc.n	f94 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     f8a:	f240 2125 	movw	r1, #549	; 0x225
     f8e:	2017      	movs	r0, #23
     f90:	f7ff fcfc 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	f00c f8d4 	bl	d144 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     f9c:	4601      	mov	r1, r0
     f9e:	28ff      	cmp	r0, #255	; 0xff
     fa0:	d004      	beq.n	fac <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     fa2:	4620      	mov	r0, r4
     fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fa8:	f00c b8e0 	b.w	d16c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     fac:	78a0      	ldrb	r0, [r4, #2]
     fae:	fbb5 f1f0 	udiv	r1, r5, r0
     fb2:	fb00 5011 	mls	r0, r0, r1, r5
     fb6:	b2c6      	uxtb	r6, r0
     fb8:	4632      	mov	r2, r6
     fba:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     fbe:	4620      	mov	r0, r4
     fc0:	f7ff ffc6 	bl	f50 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
     fc4:	4602      	mov	r2, r0
     fc6:	28ff      	cmp	r0, #255	; 0xff
     fc8:	d009      	beq.n	fde <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     fca:	42b2      	cmp	r2, r6
     fcc:	d001      	beq.n	fd2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     fce:	2000      	movs	r0, #0
     fd0:	70e0      	strb	r0, [r4, #3]
     fd2:	4629      	mov	r1, r5
     fd4:	4620      	mov	r0, r4
     fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fda:	f00c b8ad 	b.w	d138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     fde:	2000      	movs	r0, #0
     fe0:	bd70      	pop	{r4, r5, r6, pc}
     fe2:	0000      	.short	0x0000
     fe4:	20000068 	.word	0x20000068

00000fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     fe8:	4a08      	ldr	r2, [pc, #32]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fea:	b510      	push	{r4, lr}
     fec:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     ff0:	4601      	mov	r1, r0
     ff2:	4620      	mov	r0, r4
     ff4:	f00c f8a6 	bl	d144 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     ff8:	4601      	mov	r1, r0
     ffa:	28ff      	cmp	r0, #255	; 0xff
     ffc:	d004      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ffe:	4620      	mov	r0, r4
    1000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1004:	f00c b8b2 	b.w	d16c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1008:	2000      	movs	r0, #0
    100a:	bd10      	pop	{r4, pc}
    100c:	20000068 	.word	0x20000068

00001010 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1010:	b5f0      	push	{r4, r5, r6, r7, lr}
    1012:	b089      	sub	sp, #36	; 0x24
    1014:	0004      	movs	r4, r0
    1016:	460e      	mov	r6, r1
    1018:	9406      	str	r4, [sp, #24]
    101a:	d007      	beq.n	102c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    101c:	2500      	movs	r5, #0
    101e:	0760      	lsls	r0, r4, #29
    1020:	d006      	beq.n	1030 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    1022:	f240 1119 	movw	r1, #281	; 0x119
    1026:	2017      	movs	r0, #23
    1028:	f7ff fcb0 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    102c:	2501      	movs	r5, #1
    102e:	e7f6      	b.n	101e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1030:	4814      	ldr	r0, [pc, #80]	; (1084 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    1032:	2200      	movs	r2, #0
    1034:	4f14      	ldr	r7, [pc, #80]	; (1088 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    1036:	6002      	str	r2, [r0, #0]
    1038:	6042      	str	r2, [r0, #4]
    103a:	e9d7 1000 	ldrd	r1, r0, [r7]
    103e:	f896 c000 	ldrb.w	ip, [r6]
    1042:	68bb      	ldr	r3, [r7, #8]
    1044:	f36c 601f 	bfi	r0, ip, #24, #8
    1048:	e9cd 0302 	strd	r0, r3, [sp, #8]
    104c:	e9cd 5100 	strd	r5, r1, [sp]
    1050:	ab06      	add	r3, sp, #24
    1052:	a901      	add	r1, sp, #4
    1054:	4610      	mov	r0, r2
    1056:	f7ff ff1d 	bl	e94 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    105a:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    105e:	7873      	ldrb	r3, [r6, #1]
    1060:	697a      	ldr	r2, [r7, #20]
    1062:	f363 601f 	bfi	r0, r3, #24, #8
    1066:	e9cd 0202 	strd	r0, r2, [sp, #8]
    106a:	e9cd 5100 	strd	r5, r1, [sp]
    106e:	ab06      	add	r3, sp, #24
    1070:	2200      	movs	r2, #0
    1072:	a901      	add	r1, sp, #4
    1074:	2001      	movs	r0, #1
    1076:	f7ff ff0d 	bl	e94 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    107a:	9806      	ldr	r0, [sp, #24]
    107c:	b009      	add	sp, #36	; 0x24
    107e:	1b00      	subs	r0, r0, r4
    1080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1082:	0000      	.short	0x0000
    1084:	20000068 	.word	0x20000068
    1088:	00001178 	.word	0x00001178

0000108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    108c:	b510      	push	{r4, lr}
    108e:	4604      	mov	r4, r0
    1090:	7980      	ldrb	r0, [r0, #6]
    1092:	490e      	ldr	r1, [pc, #56]	; (10cc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    1094:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1098:	b1a8      	cbz	r0, 10c6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    109a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    109e:	79e1      	ldrb	r1, [r4, #7]
    10a0:	7882      	ldrb	r2, [r0, #2]
    10a2:	4291      	cmp	r1, r2
    10a4:	d20f      	bcs.n	10c6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10a6:	1c4a      	adds	r2, r1, #1
    10a8:	71e2      	strb	r2, [r4, #7]
    10aa:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10ae:	8952      	ldrh	r2, [r2, #10]
    10b0:	429a      	cmp	r2, r3
    10b2:	d0f4      	beq.n	109e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    10b4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10b8:	8952      	ldrh	r2, [r2, #10]
    10ba:	80a2      	strh	r2, [r4, #4]
    10bc:	f00c f856 	bl	d16c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10c0:	6020      	str	r0, [r4, #0]
    10c2:	2000      	movs	r0, #0
    10c4:	bd10      	pop	{r4, pc}
    10c6:	2005      	movs	r0, #5
    10c8:	bd10      	pop	{r4, pc}
    10ca:	0000      	.short	0x0000
    10cc:	20000068 	.word	0x20000068

000010d0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10d4:	4607      	mov	r7, r0
    10d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10da:	8038      	strh	r0, [r7, #0]
    10dc:	4812      	ldr	r0, [pc, #72]	; (1128 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    10de:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    10e2:	b1ec      	cbz	r4, 1120 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    10e4:	78a5      	ldrb	r5, [r4, #2]
    10e6:	7920      	ldrb	r0, [r4, #4]
    10e8:	fbb0 f1f5 	udiv	r1, r0, r5
    10ec:	fb05 0611 	mls	r6, r5, r1, r0
    10f0:	4632      	mov	r2, r6
    10f2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    10f6:	4620      	mov	r0, r4
    10f8:	f7ff ff2a 	bl	f50 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    10fc:	4602      	mov	r2, r0
    10fe:	28ff      	cmp	r0, #255	; 0xff
    1100:	d00e      	beq.n	1120 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1102:	1ba8      	subs	r0, r5, r6
    1104:	4410      	add	r0, r2
    1106:	fbb0 f1f5 	udiv	r1, r0, r5
    110a:	fb05 0011 	mls	r0, r5, r1, r0
    110e:	7921      	ldrb	r1, [r4, #4]
    1110:	4408      	add	r0, r1
    1112:	b281      	uxth	r1, r0
    1114:	8039      	strh	r1, [r7, #0]
    1116:	4620      	mov	r0, r4
    1118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    111c:	f00c b80c 	b.w	d138 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1120:	2000      	movs	r0, #0
    1122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1126:	0000      	.short	0x0000
    1128:	20000068 	.word	0x20000068

0000112c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1130:	4606      	mov	r6, r0
    1132:	4810      	ldr	r0, [pc, #64]	; (1174 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1134:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    1138:	4631      	mov	r1, r6
    113a:	4628      	mov	r0, r5
    113c:	f00c f802 	bl	d144 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1140:	4604      	mov	r4, r0
    1142:	28ff      	cmp	r0, #255	; 0xff
    1144:	d012      	beq.n	116c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    1146:	f8d5 0006 	ldr.w	r0, [r5, #6]
    114a:	4621      	mov	r1, r4
    114c:	ea4f 4730 	mov.w	r7, r0, ror #16
    1150:	4628      	mov	r0, r5
    1152:	f00c f80b 	bl	d16c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1156:	4601      	mov	r1, r0
    1158:	4630      	mov	r0, r6
    115a:	47b8      	blx	r7
    115c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1160:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1164:	8148      	strh	r0, [r1, #10]
    1166:	2000      	movs	r0, #0
    1168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    116c:	f243 0002 	movw	r0, #12290	; 0x3002
    1170:	e7fa      	b.n	1168 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1172:	0000      	.short	0x0000
    1174:	20000068 	.word	0x20000068
    1178:	0000ef5f 	.word	0x0000ef5f
    117c:	000802f8 	.word	0x000802f8
    1180:	00000000 	.word	0x00000000
    1184:	0000e535 	.word	0x0000e535
    1188:	00080118 	.word	0x00080118
    118c:	00000000 	.word	0x00000000

00001190 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1190:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1194:	4c24      	ldr	r4, [pc, #144]	; (1228 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1196:	4606      	mov	r6, r0
    1198:	b081      	sub	sp, #4
    119a:	6820      	ldr	r0, [r4, #0]
    119c:	469a      	mov	sl, r3
    119e:	4693      	mov	fp, r2
    11a0:	b158      	cbz	r0, 11ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    11a2:	7a01      	ldrb	r1, [r0, #8]
    11a4:	42b1      	cmp	r1, r6
    11a6:	d903      	bls.n	11b0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    11a8:	6840      	ldr	r0, [r0, #4]
    11aa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    11ae:	b140      	cbz	r0, 11c2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    11b0:	f243 0002 	movw	r0, #12290	; 0x3002
    11b4:	b005      	add	sp, #20
    11b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ba:	21a5      	movs	r1, #165	; 0xa5
    11bc:	2018      	movs	r0, #24
    11be:	f7ff fbe5 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11c2:	4619      	mov	r1, r3
    11c4:	9802      	ldr	r0, [sp, #8]
    11c6:	f00c f80c 	bl	d1e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    11ca:	4680      	mov	r8, r0
    11cc:	4658      	mov	r0, fp
    11ce:	990e      	ldr	r1, [sp, #56]	; 0x38
    11d0:	f00b fffd 	bl	d1ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11d4:	4605      	mov	r5, r0
    11d6:	eb08 0005 	add.w	r0, r8, r5
    11da:	1d00      	adds	r0, r0, #4
    11dc:	b287      	uxth	r7, r0
    11de:	6820      	ldr	r0, [r4, #0]
    11e0:	46a1      	mov	r9, r4
    11e2:	4639      	mov	r1, r7
    11e4:	6800      	ldr	r0, [r0, #0]
    11e6:	f00b ff42 	bl	d06e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    11ea:	0004      	movs	r4, r0
    11ec:	d01a      	beq.n	1224 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    11ee:	8067      	strh	r7, [r4, #2]
    11f0:	8025      	strh	r5, [r4, #0]
    11f2:	4629      	mov	r1, r5
    11f4:	1d20      	adds	r0, r4, #4
    11f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    11f8:	4607      	mov	r7, r0
    11fa:	465a      	mov	r2, fp
    11fc:	2309      	movs	r3, #9
    11fe:	9500      	str	r5, [sp, #0]
    1200:	f00b feaf 	bl	cf62 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1204:	8820      	ldrh	r0, [r4, #0]
    1206:	4641      	mov	r1, r8
    1208:	4438      	add	r0, r7
    120a:	230a      	movs	r3, #10
    120c:	9a02      	ldr	r2, [sp, #8]
    120e:	f8cd a000 	str.w	sl, [sp]
    1212:	f00b fea6 	bl	cf62 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1216:	f8d9 0000 	ldr.w	r0, [r9]
    121a:	6840      	ldr	r0, [r0, #4]
    121c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1220:	2000      	movs	r0, #0
    1222:	e7c7      	b.n	11b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1224:	2004      	movs	r0, #4
    1226:	e7c5      	b.n	11b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1228:	20000070 	.word	0x20000070

0000122c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    122c:	b570      	push	{r4, r5, r6, lr}
    122e:	4c14      	ldr	r4, [pc, #80]	; (1280 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1230:	6823      	ldr	r3, [r4, #0]
    1232:	b18b      	cbz	r3, 1258 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1234:	7a19      	ldrb	r1, [r3, #8]
    1236:	4281      	cmp	r1, r0
    1238:	d912      	bls.n	1260 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    123a:	685a      	ldr	r2, [r3, #4]
    123c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1240:	b171      	cbz	r1, 1260 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1242:	2500      	movs	r5, #0
    1244:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1248:	884a      	ldrh	r2, [r1, #2]
    124a:	6818      	ldr	r0, [r3, #0]
    124c:	f00b ff67 	bl	d11e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1250:	6821      	ldr	r1, [r4, #0]
    1252:	2000      	movs	r0, #0
    1254:	7a0a      	ldrb	r2, [r1, #8]
    1256:	e00c      	b.n	1272 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1258:	21c6      	movs	r1, #198	; 0xc6
    125a:	2018      	movs	r0, #24
    125c:	f7ff fb96 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1260:	f243 0002 	movw	r0, #12290	; 0x3002
    1264:	bd70      	pop	{r4, r5, r6, pc}
    1266:	684b      	ldr	r3, [r1, #4]
    1268:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    126c:	b933      	cbnz	r3, 127c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    126e:	1c40      	adds	r0, r0, #1
    1270:	b2c0      	uxtb	r0, r0
    1272:	4282      	cmp	r2, r0
    1274:	d8f7      	bhi.n	1266 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1276:	6808      	ldr	r0, [r1, #0]
    1278:	f00b ff46 	bl	d108 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    127c:	2000      	movs	r0, #0
    127e:	bd70      	pop	{r4, r5, r6, pc}
    1280:	20000070 	.word	0x20000070

00001284 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1288:	460d      	mov	r5, r1
    128a:	0004      	movs	r4, r0
    128c:	4690      	mov	r8, r2
    128e:	f04f 0600 	mov.w	r6, #0
    1292:	d006      	beq.n	12a2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1294:	2700      	movs	r7, #0
    1296:	07a0      	lsls	r0, r4, #30
    1298:	d005      	beq.n	12a6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    129a:	2186      	movs	r1, #134	; 0x86
    129c:	2018      	movs	r0, #24
    129e:	f7ff fb75 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12a2:	2701      	movs	r7, #1
    12a4:	e7f7      	b.n	1296 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    12a6:	b1cd      	cbz	r5, 12dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12a8:	4611      	mov	r1, r2
    12aa:	2000      	movs	r0, #0
    12ac:	f00b ff10 	bl	d0d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12b0:	300c      	adds	r0, #12
    12b2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    12b6:	b98f      	cbnz	r7, 12dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12b8:	4f0a      	ldr	r7, [pc, #40]	; (12e4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    12ba:	f104 000c 	add.w	r0, r4, #12
    12be:	00aa      	lsls	r2, r5, #2
    12c0:	603c      	str	r4, [r7, #0]
    12c2:	7225      	strb	r5, [r4, #8]
    12c4:	6060      	str	r0, [r4, #4]
    12c6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    12ca:	6020      	str	r0, [r4, #0]
    12cc:	2100      	movs	r1, #0
    12ce:	6860      	ldr	r0, [r4, #4]
    12d0:	f00f f98d 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12d4:	4641      	mov	r1, r8
    12d6:	6838      	ldr	r0, [r7, #0]
    12d8:	f00b fefa 	bl	d0d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12dc:	4630      	mov	r0, r6
    12de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12e2:	0000      	.short	0x0000
    12e4:	20000070 	.word	0x20000070

000012e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    12e8:	b570      	push	{r4, r5, r6, lr}
    12ea:	4d08      	ldr	r5, [pc, #32]	; (130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    12ec:	6828      	ldr	r0, [r5, #0]
    12ee:	2800      	cmp	r0, #0
    12f0:	d00a      	beq.n	1308 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    12f2:	2400      	movs	r4, #0
    12f4:	e004      	b.n	1300 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    12f6:	4620      	mov	r0, r4
    12f8:	f7ff ff98 	bl	122c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    12fc:	1c64      	adds	r4, r4, #1
    12fe:	b2e4      	uxtb	r4, r4
    1300:	6828      	ldr	r0, [r5, #0]
    1302:	7a00      	ldrb	r0, [r0, #8]
    1304:	42a0      	cmp	r0, r4
    1306:	d8f6      	bhi.n	12f6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1308:	bd70      	pop	{r4, r5, r6, pc}
    130a:	0000      	.short	0x0000
    130c:	20000070 	.word	0x20000070

00001310 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1310:	4909      	ldr	r1, [pc, #36]	; (1338 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1312:	b510      	push	{r4, lr}
    1314:	4602      	mov	r2, r0
    1316:	6809      	ldr	r1, [r1, #0]
    1318:	2000      	movs	r0, #0
    131a:	b149      	cbz	r1, 1330 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    131c:	7a0b      	ldrb	r3, [r1, #8]
    131e:	4293      	cmp	r3, r2
    1320:	d905      	bls.n	132e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1322:	6849      	ldr	r1, [r1, #4]
    1324:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1328:	2900      	cmp	r1, #0
    132a:	d000      	beq.n	132e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    132c:	1d08      	adds	r0, r1, #4
    132e:	bd10      	pop	{r4, pc}
    1330:	21ec      	movs	r1, #236	; 0xec
    1332:	2018      	movs	r0, #24
    1334:	f7ff fb2a 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1338:	20000070 	.word	0x20000070

0000133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    133c:	490a      	ldr	r1, [pc, #40]	; (1368 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    133e:	b510      	push	{r4, lr}
    1340:	4602      	mov	r2, r0
    1342:	6809      	ldr	r1, [r1, #0]
    1344:	2000      	movs	r0, #0
    1346:	b159      	cbz	r1, 1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1348:	7a0b      	ldrb	r3, [r1, #8]
    134a:	4293      	cmp	r3, r2
    134c:	d907      	bls.n	135e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    134e:	6849      	ldr	r1, [r1, #4]
    1350:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1354:	2900      	cmp	r1, #0
    1356:	d002      	beq.n	135e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1358:	f831 0b04 	ldrh.w	r0, [r1], #4
    135c:	4408      	add	r0, r1
    135e:	bd10      	pop	{r4, pc}
    1360:	21fa      	movs	r1, #250	; 0xfa
    1362:	2018      	movs	r0, #24
    1364:	f7ff fb12 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1368:	20000070 	.word	0x20000070
    136c:	b570      	push	{r4, r5, r6, lr}
    136e:	4b1e      	ldr	r3, [pc, #120]	; (13e8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x60>)
    1370:	6845      	ldr	r5, [r0, #4]
    1372:	4604      	mov	r4, r0
    1374:	2200      	movs	r2, #0
    1376:	b1a1      	cbz	r1, 13a2 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1a>
    1378:	2001      	movs	r0, #1
    137a:	7060      	strb	r0, [r4, #1]
    137c:	8858      	ldrh	r0, [r3, #2]
    137e:	0881      	lsrs	r1, r0, #2
    1380:	f05f 0000 	movs.w	r0, #0
    1384:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1388:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    138c:	831a      	strh	r2, [r3, #24]
    138e:	8419      	strh	r1, [r3, #32]
    1390:	fb00 5301 	mla	r3, r0, r1, r5
    1394:	6073      	str	r3, [r6, #4]
    1396:	1823      	adds	r3, r4, r0
    1398:	1c40      	adds	r0, r0, #1
    139a:	751a      	strb	r2, [r3, #20]
    139c:	2804      	cmp	r0, #4
    139e:	d3f1      	bcc.n	1384 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    13a0:	bd70      	pop	{r4, r5, r6, pc}
    13a2:	7062      	strb	r2, [r4, #1]
    13a4:	f05f 0000 	movs.w	r0, #0
    13a8:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    13ac:	830a      	strh	r2, [r1, #24]
    13ae:	840a      	strh	r2, [r1, #32]
    13b0:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    13b4:	604a      	str	r2, [r1, #4]
    13b6:	1821      	adds	r1, r4, r0
    13b8:	1c40      	adds	r0, r0, #1
    13ba:	750a      	strb	r2, [r1, #20]
    13bc:	2804      	cmp	r0, #4
    13be:	d3f3      	bcc.n	13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
    13c0:	8858      	ldrh	r0, [r3, #2]
    13c2:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    13c6:	d201      	bcs.n	13cc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x44>
    13c8:	0846      	lsrs	r6, r0, #1
    13ca:	e000      	b.n	13ce <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x46>
    13cc:	26ff      	movs	r6, #255	; 0xff
    13ce:	f00b ff7c 	bl	d2ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    13d2:	6065      	str	r5, [r4, #4]
    13d4:	8420      	strh	r0, [r4, #32]
    13d6:	1829      	adds	r1, r5, r0
    13d8:	60a1      	str	r1, [r4, #8]
    13da:	8466      	strh	r6, [r4, #34]	; 0x22
    13dc:	60e5      	str	r5, [r4, #12]
    13de:	84a0      	strh	r0, [r4, #36]	; 0x24
    13e0:	6121      	str	r1, [r4, #16]
    13e2:	84e6      	strh	r6, [r4, #38]	; 0x26
    13e4:	bd70      	pop	{r4, r5, r6, pc}
    13e6:	0000      	.short	0x0000
    13e8:	20000074 	.word	0x20000074

000013ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    13ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13f0:	b158      	cbz	r0, 140a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    13f2:	2500      	movs	r5, #0
    13f4:	4411      	add	r1, r2
    13f6:	4e24      	ldr	r6, [pc, #144]	; (1488 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    13f8:	b2cc      	uxtb	r4, r1
    13fa:	2700      	movs	r7, #0
    13fc:	7034      	strb	r4, [r6, #0]
    13fe:	0781      	lsls	r1, r0, #30
    1400:	d005      	beq.n	140e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1402:	214e      	movs	r1, #78	; 0x4e
    1404:	2009      	movs	r0, #9
    1406:	f7ff fac1 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    140a:	2501      	movs	r5, #1
    140c:	e7f2      	b.n	13f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    140e:	2b1f      	cmp	r3, #31
    1410:	d804      	bhi.n	141c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1412:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1416:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    141a:	e009      	b.n	1430 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    141c:	0059      	lsls	r1, r3, #1
    141e:	2bff      	cmp	r3, #255	; 0xff
    1420:	d90c      	bls.n	143c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1422:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1426:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    142a:	d200      	bcs.n	142e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    142c:	4611      	mov	r1, r2
    142e:	b289      	uxth	r1, r1
    1430:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1434:	1cc9      	adds	r1, r1, #3
    1436:	4011      	ands	r1, r2
    1438:	b135      	cbz	r5, 1448 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    143a:	e007      	b.n	144c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    143c:	227c      	movs	r2, #124	; 0x7c
    143e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1442:	d3f4      	bcc.n	142e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1444:	217c      	movs	r1, #124	; 0x7c
    1446:	e7f2      	b.n	142e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1448:	6070      	str	r0, [r6, #4]
    144a:	8071      	strh	r1, [r6, #2]
    144c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1450:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1454:	2200      	movs	r2, #0
    1456:	6876      	ldr	r6, [r6, #4]
    1458:	f04f 0c01 	mov.w	ip, #1
    145c:	e00d      	b.n	147a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    145e:	b94d      	cbnz	r5, 1474 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1460:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1464:	eb00 0e03 	add.w	lr, r0, r3
    1468:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    146c:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1470:	f8c7 e004 	str.w	lr, [r7, #4]
    1474:	1c52      	adds	r2, r2, #1
    1476:	440b      	add	r3, r1
    1478:	b2d2      	uxtb	r2, r2
    147a:	42a2      	cmp	r2, r4
    147c:	d3ef      	bcc.n	145e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    147e:	1ddb      	adds	r3, r3, #7
    1480:	f023 0007 	bic.w	r0, r3, #7
    1484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1488:	20000074 	.word	0x20000074

0000148c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    148c:	b570      	push	{r4, r5, r6, lr}
    148e:	4a10      	ldr	r2, [pc, #64]	; (14d0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1490:	2000      	movs	r0, #0
    1492:	6851      	ldr	r1, [r2, #4]
    1494:	7812      	ldrb	r2, [r2, #0]
    1496:	e014      	b.n	14c2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1498:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    149c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    14a0:	b16b      	cbz	r3, 14be <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    14a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    14a6:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    14aa:	d00c      	beq.n	14c6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    14ac:	2500      	movs	r5, #0
    14ae:	70a5      	strb	r5, [r4, #2]
    14b0:	2101      	movs	r1, #1
    14b2:	4620      	mov	r0, r4
    14b4:	f7ff ff5a 	bl	136c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    14b8:	7025      	strb	r5, [r4, #0]
    14ba:	4620      	mov	r0, r4
    14bc:	bd70      	pop	{r4, r5, r6, pc}
    14be:	1c40      	adds	r0, r0, #1
    14c0:	b2c0      	uxtb	r0, r0
    14c2:	4290      	cmp	r0, r2
    14c4:	d3e8      	bcc.n	1498 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    14c6:	21a9      	movs	r1, #169	; 0xa9
    14c8:	2009      	movs	r0, #9
    14ca:	f7ff fa5f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14ce:	0000      	.short	0x0000
    14d0:	20000074 	.word	0x20000074

000014d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    14d4:	4804      	ldr	r0, [pc, #16]	; (14e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    14d6:	b510      	push	{r4, lr}
    14d8:	8840      	ldrh	r0, [r0, #2]
    14da:	0884      	lsrs	r4, r0, #2
    14dc:	f00b fef5 	bl	d2ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    14e0:	4284      	cmp	r4, r0
    14e2:	d300      	bcc.n	14e6 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    14e4:	4620      	mov	r0, r4
    14e6:	bd10      	pop	{r4, pc}
    14e8:	20000074 	.word	0x20000074
    14ec:	b530      	push	{r4, r5, lr}
    14ee:	490d      	ldr	r1, [pc, #52]	; (1524 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    14f0:	2001      	movs	r0, #1
    14f2:	6048      	str	r0, [r1, #4]
    14f4:	1e82      	subs	r2, r0, #2
    14f6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    14fa:	490b      	ldr	r1, [pc, #44]	; (1528 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    14fc:	6088      	str	r0, [r1, #8]
    14fe:	2300      	movs	r3, #0
    1500:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1504:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1508:	4c08      	ldr	r4, [pc, #32]	; (152c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    150a:	6023      	str	r3, [r4, #0]
    150c:	1d25      	adds	r5, r4, #4
    150e:	6028      	str	r0, [r5, #0]
    1510:	6088      	str	r0, [r1, #8]
    1512:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1516:	6023      	str	r3, [r4, #0]
    1518:	6028      	str	r0, [r5, #0]
    151a:	4906      	ldr	r1, [pc, #24]	; (1534 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    151c:	4804      	ldr	r0, [pc, #16]	; (1530 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    151e:	6008      	str	r0, [r1, #0]
    1520:	bd30      	pop	{r4, r5, pc}
    1522:	0000      	.short	0x0000
    1524:	4000e000 	.word	0x4000e000
    1528:	4000f000 	.word	0x4000f000
    152c:	4000f500 	.word	0x4000f500
    1530:	3ff60000 	.word	0x3ff60000
    1534:	4001f508 	.word	0x4001f508

00001538 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1538:	b510      	push	{r4, lr}
    153a:	f7ff ffd7 	bl	14ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    153e:	f00b ff9b 	bl	d478 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1542:	4903      	ldr	r1, [pc, #12]	; (1550 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1544:	4801      	ldr	r0, [pc, #4]	; (154c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1546:	6008      	str	r0, [r1, #0]
    1548:	bd10      	pop	{r4, pc}
    154a:	0000      	.short	0x0000
    154c:	3ff60000 	.word	0x3ff60000
    1550:	4001f508 	.word	0x4001f508

00001554 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1554:	b510      	push	{r4, lr}
    1556:	f7ff ffc9 	bl	14ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    155a:	f00b ff8d 	bl	d478 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    155e:	f000 f887 	bl	1670 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1562:	4905      	ldr	r1, [pc, #20]	; (1578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1564:	4803      	ldr	r0, [pc, #12]	; (1574 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1566:	6008      	str	r0, [r1, #0]
    1568:	f000 f8b8 	bl	16dc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1570:	f000 b8dc 	b.w	172c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1574:	3ff60000 	.word	0x3ff60000
    1578:	4001f508 	.word	0x4001f508
    157c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1580:	4682      	mov	sl, r0
    1582:	4838      	ldr	r0, [pc, #224]	; (1664 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1584:	f00e fec8 	bl	10318 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1588:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1664 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    158c:	b128      	cbz	r0, 159a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    158e:	2601      	movs	r6, #1
    1590:	f10b 0001 	add.w	r0, fp, #1
    1594:	21ff      	movs	r1, #255	; 0xff
    1596:	7001      	strb	r1, [r0, #0]
    1598:	e000      	b.n	159c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    159a:	2600      	movs	r6, #0
    159c:	f44f 7580 	mov.w	r5, #256	; 0x100
    15a0:	4c31      	ldr	r4, [pc, #196]	; (1668 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    15a2:	f04f 0800 	mov.w	r8, #0
    15a6:	1d2f      	adds	r7, r5, #4
    15a8:	2101      	movs	r1, #1
    15aa:	6061      	str	r1, [r4, #4]
    15ac:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    15b0:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    15b4:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    15b8:	6021      	str	r1, [r4, #0]
    15ba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 166c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    15be:	e01c      	b.n	15fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15c0:	f8d9 0000 	ldr.w	r0, [r9]
    15c4:	06c0      	lsls	r0, r0, #27
    15c6:	d518      	bpl.n	15fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15c8:	200e      	movs	r0, #14
    15ca:	f00b ff64 	bl	d496 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    15ce:	f3ef 8010 	mrs	r0, PRIMASK
    15d2:	9000      	str	r0, [sp, #0]
    15d4:	b672      	cpsid	i
    15d6:	2103      	movs	r1, #3
    15d8:	4620      	mov	r0, r4
    15da:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    15de:	4629      	mov	r1, r5
    15e0:	f00b ff66 	bl	d4b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    15e4:	b930      	cbnz	r0, 15f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    15e6:	4639      	mov	r1, r7
    15e8:	4620      	mov	r0, r4
    15ea:	f00b ff61 	bl	d4b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    15ee:	b908      	cbnz	r0, 15f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    15f0:	f00e ff29 	bl	10446 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    15f4:	9800      	ldr	r0, [sp, #0]
    15f6:	b900      	cbnz	r0, 15fa <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15f8:	b662      	cpsie	i
    15fa:	4629      	mov	r1, r5
    15fc:	4620      	mov	r0, r4
    15fe:	f00b ff57 	bl	d4b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1602:	b928      	cbnz	r0, 1610 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1604:	4639      	mov	r1, r7
    1606:	4620      	mov	r0, r4
    1608:	f00b ff52 	bl	d4b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    160c:	2800      	cmp	r0, #0
    160e:	d0d7      	beq.n	15c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1610:	4639      	mov	r1, r7
    1612:	4620      	mov	r0, r4
    1614:	f00b ff4c 	bl	d4b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1618:	2800      	cmp	r0, #0
    161a:	d1c5      	bne.n	15a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    161c:	bb06      	cbnz	r6, 1660 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    161e:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1622:	f88d 1000 	strb.w	r1, [sp]
    1626:	9900      	ldr	r1, [sp, #0]
    1628:	9100      	str	r1, [sp, #0]
    162a:	f89d 1000 	ldrb.w	r1, [sp]
    162e:	b109      	cbz	r1, 1634 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1630:	2501      	movs	r5, #1
    1632:	e000      	b.n	1636 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1634:	2500      	movs	r5, #0
    1636:	f10b 0001 	add.w	r0, fp, #1
    163a:	f880 8000 	strb.w	r8, [r0]
    163e:	2003      	movs	r0, #3
    1640:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1644:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1648:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    164c:	200e      	movs	r0, #14
    164e:	f00b ff22 	bl	d496 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1652:	4804      	ldr	r0, [pc, #16]	; (1664 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1654:	f00e fe77 	bl	10346 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1658:	b115      	cbz	r5, 1660 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    165a:	2011      	movs	r0, #17
    165c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1660:	2000      	movs	r0, #0
    1662:	e7fb      	b.n	165c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1664:	20000360 	.word	0x20000360
    1668:	4000e000 	.word	0x4000e000
    166c:	e000ed10 	.word	0xe000ed10

00001670 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1670:	b510      	push	{r4, lr}
    1672:	4806      	ldr	r0, [pc, #24]	; (168c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1674:	f00e fe63 	bl	1033e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1678:	b118      	cbz	r0, 1682 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    167a:	2130      	movs	r1, #48	; 0x30
    167c:	201d      	movs	r0, #29
    167e:	f7ff f985 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1682:	4802      	ldr	r0, [pc, #8]	; (168c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1684:	2100      	movs	r1, #0
    1686:	7041      	strb	r1, [r0, #1]
    1688:	bd10      	pop	{r4, pc}
    168a:	0000      	.short	0x0000
    168c:	20000360 	.word	0x20000360

00001690 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	4911      	ldr	r1, [pc, #68]	; (16d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1694:	680a      	ldr	r2, [r1, #0]
    1696:	b1ea      	cbz	r2, 16d4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1698:	2300      	movs	r3, #0
    169a:	461d      	mov	r5, r3
    169c:	2401      	movs	r4, #1
    169e:	684a      	ldr	r2, [r1, #4]
    16a0:	1c52      	adds	r2, r2, #1
    16a2:	604a      	str	r2, [r1, #4]
    16a4:	2a09      	cmp	r2, #9
    16a6:	d300      	bcc.n	16aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    16a8:	604d      	str	r5, [r1, #4]
    16aa:	790e      	ldrb	r6, [r1, #4]
    16ac:	fa04 f206 	lsl.w	r2, r4, r6
    16b0:	680e      	ldr	r6, [r1, #0]
    16b2:	4216      	tst	r6, r2
    16b4:	d00b      	beq.n	16ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    16b6:	f3ef 8310 	mrs	r3, PRIMASK
    16ba:	b672      	cpsid	i
    16bc:	680c      	ldr	r4, [r1, #0]
    16be:	4394      	bics	r4, r2
    16c0:	600c      	str	r4, [r1, #0]
    16c2:	b903      	cbnz	r3, 16c6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    16c4:	b662      	cpsie	i
    16c6:	6849      	ldr	r1, [r1, #4]
    16c8:	6001      	str	r1, [r0, #0]
    16ca:	2000      	movs	r0, #0
    16cc:	bd70      	pop	{r4, r5, r6, pc}
    16ce:	1c5b      	adds	r3, r3, #1
    16d0:	2b09      	cmp	r3, #9
    16d2:	d3e4      	bcc.n	169e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    16d4:	2005      	movs	r0, #5
    16d6:	bd70      	pop	{r4, r5, r6, pc}
    16d8:	2000007c 	.word	0x2000007c

000016dc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    16dc:	4802      	ldr	r0, [pc, #8]	; (16e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    16de:	2100      	movs	r1, #0
    16e0:	6001      	str	r1, [r0, #0]
    16e2:	6041      	str	r1, [r0, #4]
    16e4:	4770      	bx	lr
    16e6:	0000      	.short	0x0000
    16e8:	2000007c 	.word	0x2000007c

000016ec <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    16ec:	b510      	push	{r4, lr}
    16ee:	4c04      	ldr	r4, [pc, #16]	; (1700 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    16f0:	7820      	ldrb	r0, [r4, #0]
    16f2:	28ff      	cmp	r0, #255	; 0xff
    16f4:	d003      	beq.n	16fe <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    16f6:	f00a fcdb 	bl	c0b0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    16fa:	20ff      	movs	r0, #255	; 0xff
    16fc:	7020      	strb	r0, [r4, #0]
    16fe:	bd10      	pop	{r4, pc}
    1700:	20000000 	.word	0x20000000

00001704 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1704:	b510      	push	{r4, lr}
    1706:	4c08      	ldr	r4, [pc, #32]	; (1728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1708:	7861      	ldrb	r1, [r4, #1]
    170a:	b109      	cbz	r1, 1710 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    170c:	200f      	movs	r0, #15
    170e:	bd10      	pop	{r4, pc}
    1710:	f00a fc94 	bl	c03c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1714:	7020      	strb	r0, [r4, #0]
    1716:	28ff      	cmp	r0, #255	; 0xff
    1718:	d001      	beq.n	171e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    171a:	2000      	movs	r0, #0
    171c:	bd10      	pop	{r4, pc}
    171e:	2173      	movs	r1, #115	; 0x73
    1720:	201f      	movs	r0, #31
    1722:	f7ff f933 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1726:	0000      	.short	0x0000
    1728:	20000000 	.word	0x20000000

0000172c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    172c:	4901      	ldr	r1, [pc, #4]	; (1734 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    172e:	2000      	movs	r0, #0
    1730:	7048      	strb	r0, [r1, #1]
    1732:	4770      	bx	lr
    1734:	20000000 	.word	0x20000000

00001738 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1738:	4806      	ldr	r0, [pc, #24]	; (1754 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    173a:	4a07      	ldr	r2, [pc, #28]	; (1758 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    173c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    173e:	8852      	ldrh	r2, [r2, #2]
    1740:	4291      	cmp	r1, r2
    1742:	d104      	bne.n	174e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1744:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1748:	b108      	cbz	r0, 174e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    174a:	2000      	movs	r0, #0
    174c:	4770      	bx	lr
    174e:	2001      	movs	r0, #1
    1750:	4770      	bx	lr
    1752:	0000      	.short	0x0000
    1754:	200012a0 	.word	0x200012a0
    1758:	20000354 	.word	0x20000354

0000175c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    175c:	4901      	ldr	r1, [pc, #4]	; (1764 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    175e:	8048      	strh	r0, [r1, #2]
    1760:	4770      	bx	lr
    1762:	0000      	.short	0x0000
    1764:	20000354 	.word	0x20000354

00001768 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1768:	4808      	ldr	r0, [pc, #32]	; (178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    176a:	4a09      	ldr	r2, [pc, #36]	; (1790 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    176c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    176e:	8852      	ldrh	r2, [r2, #2]
    1770:	4291      	cmp	r1, r2
    1772:	d109      	bne.n	1788 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1774:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1778:	8481      	strh	r1, [r0, #36]	; 0x24
    177a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    177e:	b119      	cbz	r1, 1788 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1780:	2100      	movs	r1, #0
    1782:	7001      	strb	r1, [r0, #0]
    1784:	2001      	movs	r0, #1
    1786:	4770      	bx	lr
    1788:	2000      	movs	r0, #0
    178a:	4770      	bx	lr
    178c:	200012a0 	.word	0x200012a0
    1790:	20000354 	.word	0x20000354

00001794 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1794:	4807      	ldr	r0, [pc, #28]	; (17b4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1796:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    179a:	2901      	cmp	r1, #1
    179c:	d007      	beq.n	17ae <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    179e:	2101      	movs	r1, #1
    17a0:	7001      	strb	r1, [r0, #0]
    17a2:	4805      	ldr	r0, [pc, #20]	; (17b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    17a4:	4903      	ldr	r1, [pc, #12]	; (17b4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17a6:	8800      	ldrh	r0, [r0, #0]
    17a8:	8488      	strh	r0, [r1, #36]	; 0x24
    17aa:	2001      	movs	r0, #1
    17ac:	4770      	bx	lr
    17ae:	2000      	movs	r0, #0
    17b0:	4770      	bx	lr
    17b2:	0000      	.short	0x0000
    17b4:	200012a0 	.word	0x200012a0
    17b8:	20000354 	.word	0x20000354

000017bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    17bc:	4906      	ldr	r1, [pc, #24]	; (17d8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    17be:	4b07      	ldr	r3, [pc, #28]	; (17dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    17c0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17c2:	885b      	ldrh	r3, [r3, #2]
    17c4:	429a      	cmp	r2, r3
    17c6:	d105      	bne.n	17d4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17c8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17cc:	b112      	cbz	r2, 17d4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17ce:	6001      	str	r1, [r0, #0]
    17d0:	2001      	movs	r0, #1
    17d2:	4770      	bx	lr
    17d4:	2000      	movs	r0, #0
    17d6:	4770      	bx	lr
    17d8:	200012a0 	.word	0x200012a0
    17dc:	20000354 	.word	0x20000354

000017e0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    17e0:	4909      	ldr	r1, [pc, #36]	; (1808 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    17e2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17e4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    17e8:	3bff      	subs	r3, #255	; 0xff
    17ea:	d002      	beq.n	17f2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    17ec:	2100      	movs	r1, #0
    17ee:	6001      	str	r1, [r0, #0]
    17f0:	e007      	b.n	1802 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    17f2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17f6:	4904      	ldr	r1, [pc, #16]	; (1808 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    17f8:	2a01      	cmp	r2, #1
    17fa:	d002      	beq.n	1802 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    17fc:	6001      	str	r1, [r0, #0]
    17fe:	2001      	movs	r0, #1
    1800:	4770      	bx	lr
    1802:	2000      	movs	r0, #0
    1804:	4770      	bx	lr
    1806:	0000      	.short	0x0000
    1808:	200012a0 	.word	0x200012a0

0000180c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    180c:	4901      	ldr	r1, [pc, #4]	; (1814 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    180e:	8008      	strh	r0, [r1, #0]
    1810:	4770      	bx	lr
    1812:	0000      	.short	0x0000
    1814:	20000354 	.word	0x20000354

00001818 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    1818:	4905      	ldr	r1, [pc, #20]	; (1830 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    181a:	2000      	movs	r0, #0
    181c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1820:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1824:	8488      	strh	r0, [r1, #36]	; 0x24
    1826:	4903      	ldr	r1, [pc, #12]	; (1834 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    1828:	8008      	strh	r0, [r1, #0]
    182a:	8048      	strh	r0, [r1, #2]
    182c:	4770      	bx	lr
    182e:	0000      	.short	0x0000
    1830:	200012a0 	.word	0x200012a0
    1834:	20000354 	.word	0x20000354
    1838:	4905      	ldr	r1, [pc, #20]	; (1850 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    183a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    183c:	4282      	cmp	r2, r0
    183e:	d105      	bne.n	184c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1840:	2000      	movs	r0, #0
    1842:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1846:	f64f 70ff 	movw	r0, #65535	; 0xffff
    184a:	8488      	strh	r0, [r1, #36]	; 0x24
    184c:	4770      	bx	lr
    184e:	0000      	.short	0x0000
    1850:	200012a0 	.word	0x200012a0

00001854 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1854:	4a0a      	ldr	r2, [pc, #40]	; (1880 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1856:	b110      	cbz	r0, 185e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1858:	2801      	cmp	r0, #1
    185a:	d007      	beq.n	186c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    185c:	e00e      	b.n	187c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    185e:	7850      	ldrb	r0, [r2, #1]
    1860:	b160      	cbz	r0, 187c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1862:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1866:	6008      	str	r0, [r1, #0]
    1868:	88d0      	ldrh	r0, [r2, #6]
    186a:	e004      	b.n	1876 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    186c:	7810      	ldrb	r0, [r2, #0]
    186e:	b128      	cbz	r0, 187c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1870:	6890      	ldr	r0, [r2, #8]
    1872:	6008      	str	r0, [r1, #0]
    1874:	8990      	ldrh	r0, [r2, #12]
    1876:	8088      	strh	r0, [r1, #4]
    1878:	2001      	movs	r0, #1
    187a:	4770      	bx	lr
    187c:	2000      	movs	r0, #0
    187e:	4770      	bx	lr
    1880:	20000362 	.word	0x20000362

00001884 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1884:	4a08      	ldr	r2, [pc, #32]	; (18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1886:	2301      	movs	r3, #1
    1888:	b138      	cbz	r0, 189a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    188a:	2801      	cmp	r0, #1
    188c:	d104      	bne.n	1898 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    188e:	7013      	strb	r3, [r2, #0]
    1890:	6808      	ldr	r0, [r1, #0]
    1892:	6090      	str	r0, [r2, #8]
    1894:	8888      	ldrh	r0, [r1, #4]
    1896:	8190      	strh	r0, [r2, #12]
    1898:	4770      	bx	lr
    189a:	7053      	strb	r3, [r2, #1]
    189c:	6808      	ldr	r0, [r1, #0]
    189e:	f8c2 0002 	str.w	r0, [r2, #2]
    18a2:	8888      	ldrh	r0, [r1, #4]
    18a4:	80d0      	strh	r0, [r2, #6]
    18a6:	4770      	bx	lr
    18a8:	20000362 	.word	0x20000362

000018ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    18ac:	4906      	ldr	r1, [pc, #24]	; (18c8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    18ae:	b110      	cbz	r0, 18b6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    18b0:	2801      	cmp	r0, #1
    18b2:	d002      	beq.n	18ba <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    18b4:	e005      	b.n	18c2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18b6:	7848      	ldrb	r0, [r1, #1]
    18b8:	e000      	b.n	18bc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    18ba:	7808      	ldrb	r0, [r1, #0]
    18bc:	b108      	cbz	r0, 18c2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18be:	2001      	movs	r0, #1
    18c0:	4770      	bx	lr
    18c2:	2000      	movs	r0, #0
    18c4:	4770      	bx	lr
    18c6:	0000      	.short	0x0000
    18c8:	20000362 	.word	0x20000362

000018cc <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    18cc:	4901      	ldr	r1, [pc, #4]	; (18d4 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    18ce:	7708      	strb	r0, [r1, #28]
    18d0:	4770      	bx	lr
    18d2:	0000      	.short	0x0000
    18d4:	20000b62 	.word	0x20000b62

000018d8 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    18d8:	4801      	ldr	r0, [pc, #4]	; (18e0 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    18da:	7880      	ldrb	r0, [r0, #2]
    18dc:	4770      	bx	lr
    18de:	0000      	.short	0x0000
    18e0:	20000084 	.word	0x20000084

000018e4 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    18e4:	4801      	ldr	r0, [pc, #4]	; (18ec <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    18e6:	78c0      	ldrb	r0, [r0, #3]
    18e8:	4770      	bx	lr
    18ea:	0000      	.short	0x0000
    18ec:	20000084 	.word	0x20000084

000018f0 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    18f0:	b570      	push	{r4, r5, r6, lr}
    18f2:	460c      	mov	r4, r1
    18f4:	4605      	mov	r5, r0
    18f6:	f000 f91f 	bl	1b38 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    18fa:	b118      	cbz	r0, 1904 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    18fc:	21d0      	movs	r1, #208	; 0xd0
    18fe:	2027      	movs	r0, #39	; 0x27
    1900:	f7ff f844 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1904:	4803      	ldr	r0, [pc, #12]	; (1914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    1906:	2101      	movs	r1, #1
    1908:	f00c f9e5 	bl	dcd6 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    190c:	4802      	ldr	r0, [pc, #8]	; (1918 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    190e:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    1912:	bd70      	pop	{r4, r5, r6, pc}
    1914:	20000b40 	.word	0x20000b40
    1918:	20000084 	.word	0x20000084

0000191c <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    191c:	4901      	ldr	r1, [pc, #4]	; (1924 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    191e:	2001      	movs	r0, #1
    1920:	7148      	strb	r0, [r1, #5]
    1922:	4770      	bx	lr
    1924:	20000084 	.word	0x20000084

00001928 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    1928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    192c:	4d5b      	ldr	r5, [pc, #364]	; (1a9c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    192e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1930:	782e      	ldrb	r6, [r5, #0]
    1932:	2e00      	cmp	r6, #0
    1934:	d16b      	bne.n	1a0e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1936:	2a00      	cmp	r2, #0
    1938:	d069      	beq.n	1a0e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    193a:	2b00      	cmp	r3, #0
    193c:	d067      	beq.n	1a0e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    193e:	2c00      	cmp	r4, #0
    1940:	d065      	beq.n	1a0e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1942:	f105 0614 	add.w	r6, r5, #20
    1946:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    194a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    194e:	2700      	movs	r7, #0
    1950:	716f      	strb	r7, [r5, #5]
    1952:	712f      	strb	r7, [r5, #4]
    1954:	70af      	strb	r7, [r5, #2]
    1956:	706f      	strb	r7, [r5, #1]
    1958:	70ef      	strb	r7, [r5, #3]
    195a:	81af      	strh	r7, [r5, #12]
    195c:	81ef      	strh	r7, [r5, #14]
    195e:	f000 f92f 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1962:	4606      	mov	r6, r0
    1964:	f000 f926 	bl	1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1968:	4604      	mov	r4, r0
    196a:	f006 f8c3 	bl	7af4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    196e:	f005 fe1b 	bl	75a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1972:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1976:	f006 f941 	bl	7bfc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    197a:	69e0      	ldr	r0, [r4, #28]
    197c:	f006 fa24 	bl	7dc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1980:	6960      	ldr	r0, [r4, #20]
    1982:	f006 fa17 	bl	7db4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1986:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    198a:	f006 fa4d 	bl	7e28 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    198e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1992:	6840      	ldr	r0, [r0, #4]
    1994:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    1998:	b108      	cbz	r0, 199e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    199a:	f006 f825 	bl	79e8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    199e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    19a2:	2001      	movs	r0, #1
    19a4:	f005 ff64 	bl	7870 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    19a8:	2800      	cmp	r0, #0
    19aa:	d070      	beq.n	1a8e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    19ac:	483c      	ldr	r0, [pc, #240]	; (1aa0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    19ae:	f005 ffcb 	bl	7948 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    19b2:	8820      	ldrh	r0, [r4, #0]
    19b4:	f7ff fcc2 	bl	133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    19b8:	6368      	str	r0, [r5, #52]	; 0x34
    19ba:	8820      	ldrh	r0, [r4, #0]
    19bc:	f7ff fca8 	bl	1310 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    19c0:	f106 0288 	add.w	r2, r6, #136	; 0x88
    19c4:	63a8      	str	r0, [r5, #56]	; 0x38
    19c6:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    19ca:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1aa4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    19ce:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    19d2:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    19d6:	f8c9 2019 	str.w	r2, [r9, #25]
    19da:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    19de:	f8c9 101d 	str.w	r1, [r9, #29]
    19e2:	f000 f925 	bl	1c30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    19e6:	4601      	mov	r1, r0
    19e8:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    19ea:	f00b fec9 	bl	d780 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    19ee:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    19f0:	4281      	cmp	r1, r0
    19f2:	d200      	bcs.n	19f6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    19f4:	4608      	mov	r0, r1
    19f6:	71a8      	strb	r0, [r5, #6]
    19f8:	46a8      	mov	r8, r5
    19fa:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    19fe:	46ba      	mov	sl, r7
    1a00:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    1a02:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    1a06:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    1a08:	2908      	cmp	r1, #8
    1a0a:	d104      	bne.n	1a16 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    1a0c:	e002      	b.n	1a14 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    1a0e:	f240 1145 	movw	r1, #325	; 0x145
    1a12:	e040      	b.n	1a96 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1a14:	2104      	movs	r1, #4
    1a16:	f00b feb3 	bl	d780 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a1a:	b90f      	cbnz	r7, 1a20 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    1a1c:	1d00      	adds	r0, r0, #4
    1a1e:	b280      	uxth	r0, r0
    1a20:	4285      	cmp	r5, r0
    1a22:	d200      	bcs.n	1a26 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    1a24:	4628      	mov	r0, r5
    1a26:	b2c5      	uxtb	r5, r0
    1a28:	f888 5007 	strb.w	r5, [r8, #7]
    1a2c:	f888 5008 	strb.w	r5, [r8, #8]
    1a30:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1a34:	46d0      	mov	r8, sl
    1a36:	b190      	cbz	r0, 1a5e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    1a38:	2701      	movs	r7, #1
    1a3a:	f889 7018 	strb.w	r7, [r9, #24]
    1a3e:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    1a42:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1a46:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    1a4a:	f00b fdbd 	bl	d5c8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1a4e:	4603      	mov	r3, r0
    1a50:	462a      	mov	r2, r5
    1a52:	4914      	ldr	r1, [pc, #80]	; (1aa4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a54:	4638      	mov	r0, r7
    1a56:	f8cd 8000 	str.w	r8, [sp]
    1a5a:	f005 fd11 	bl	7480 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1a5e:	2001      	movs	r0, #1
    1a60:	f000 fb46 	bl	20f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a4>
    1a64:	4810      	ldr	r0, [pc, #64]	; (1aa8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    1a66:	6800      	ldr	r0, [r0, #0]
    1a68:	2803      	cmp	r0, #3
    1a6a:	d012      	beq.n	1a92 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a6c:	280b      	cmp	r0, #11
    1a6e:	d010      	beq.n	1a92 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a70:	480c      	ldr	r0, [pc, #48]	; (1aa4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a72:	220e      	movs	r2, #14
    1a74:	2100      	movs	r1, #0
    1a76:	304a      	adds	r0, #74	; 0x4a
    1a78:	f00e fdb9 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1a7c:	4809      	ldr	r0, [pc, #36]	; (1aa4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a7e:	8ab1      	ldrh	r1, [r6, #20]
    1a80:	304a      	adds	r0, #74	; 0x4a
    1a82:	8041      	strh	r1, [r0, #2]
    1a84:	8821      	ldrh	r1, [r4, #0]
    1a86:	8001      	strh	r1, [r0, #0]
    1a88:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    1a8c:	7101      	strb	r1, [r0, #4]
    1a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a92:	f240 2102 	movw	r1, #514	; 0x202
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ff78 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	20000084 	.word	0x20000084
    1aa0:	000022f4 	.word	0x000022f4
    1aa4:	20000b18 	.word	0x20000b18
    1aa8:	40001550 	.word	0x40001550

00001aac <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1aac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1ab0:	4688      	mov	r8, r1
    1ab2:	4607      	mov	r7, r0
    1ab4:	f000 f884 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1ab8:	4c1a      	ldr	r4, [pc, #104]	; (1b24 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1aba:	4605      	mov	r5, r0
    1abc:	07b8      	lsls	r0, r7, #30
    1abe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ac0:	784e      	ldrb	r6, [r1, #1]
    1ac2:	d516      	bpl.n	1af2 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    1ac4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1ac6:	b330      	cbz	r0, 1b16 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1ac8:	8962      	ldrh	r2, [r4, #10]
    1aca:	1cd2      	adds	r2, r2, #3
    1acc:	f00e fd15 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ad0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1ad2:	6260      	str	r0, [r4, #36]	; 0x24
    1ad4:	4669      	mov	r1, sp
    1ad6:	aa01      	add	r2, sp, #4
    1ad8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1ada:	f00b f9bf 	bl	ce5c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    1ade:	9800      	ldr	r0, [sp, #0]
    1ae0:	f00b f972 	bl	cdc8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1ae4:	f8c8 0000 	str.w	r0, [r8]
    1ae8:	4631      	mov	r1, r6
    1aea:	2201      	movs	r2, #1
    1aec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aee:	f00b f922 	bl	cd36 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    1af2:	07f8      	lsls	r0, r7, #31
    1af4:	d00d      	beq.n	1b12 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    1af6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    1afa:	3518      	adds	r5, #24
    1afc:	1c40      	adds	r0, r0, #1
    1afe:	f141 0100 	adc.w	r1, r1, #0
    1b02:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    1b06:	f815 0918 	ldrb.w	r0, [r5], #-24
    1b0a:	2801      	cmp	r0, #1
    1b0c:	d008      	beq.n	1b20 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    1b0e:	2001      	movs	r0, #1
    1b10:	7628      	strb	r0, [r5, #24]
    1b12:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1b16:	f240 415c 	movw	r1, #1116	; 0x45c
    1b1a:	2027      	movs	r0, #39	; 0x27
    1b1c:	f7fe ff36 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b20:	2000      	movs	r0, #0
    1b22:	e7f5      	b.n	1b10 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    1b24:	20000084 	.word	0x20000084

00001b28 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    1b28:	4802      	ldr	r0, [pc, #8]	; (1b34 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    1b2a:	89c0      	ldrh	r0, [r0, #14]
    1b2c:	f3c0 2080 	ubfx	r0, r0, #10, #1
    1b30:	4770      	bx	lr
    1b32:	0000      	.short	0x0000
    1b34:	20000084 	.word	0x20000084

00001b38 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    1b38:	4804      	ldr	r0, [pc, #16]	; (1b4c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    1b3a:	7800      	ldrb	r0, [r0, #0]
    1b3c:	b108      	cbz	r0, 1b42 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    1b3e:	200c      	movs	r0, #12
    1b40:	4770      	bx	lr
    1b42:	4903      	ldr	r1, [pc, #12]	; (1b50 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    1b44:	2000      	movs	r0, #0
    1b46:	7708      	strb	r0, [r1, #28]
    1b48:	4770      	bx	lr
    1b4a:	0000      	.short	0x0000
    1b4c:	20000084 	.word	0x20000084
    1b50:	20000b62 	.word	0x20000b62

00001b54 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1b54:	480c      	ldr	r0, [pc, #48]	; (1b88 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    1b56:	b510      	push	{r4, lr}
    1b58:	7801      	ldrb	r1, [r0, #0]
    1b5a:	b149      	cbz	r1, 1b70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1b5c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    1b60:	7800      	ldrb	r0, [r0, #0]
    1b62:	2802      	cmp	r0, #2
    1b64:	d008      	beq.n	1b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    1b66:	f240 211e 	movw	r1, #542	; 0x21e
    1b6a:	2027      	movs	r0, #39	; 0x27
    1b6c:	f7fe ff0e 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b74:	f000 b9ca 	b.w	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1b78:	6848      	ldr	r0, [r1, #4]
    1b7a:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    1b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b82:	f005 bee9 	b.w	7958 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    1b86:	0000      	.short	0x0000
    1b88:	20000084 	.word	0x20000084
    1b8c:	4608      	mov	r0, r1
    1b8e:	2100      	movs	r1, #0
    1b90:	7041      	strb	r1, [r0, #1]
    1b92:	211d      	movs	r1, #29
    1b94:	f800 1b04 	strb.w	r1, [r0], #4
    1b98:	220e      	movs	r2, #14
    1b9a:	4901      	ldr	r1, [pc, #4]	; (1ba0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1b9c:	f00e bcad 	b.w	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ba0:	20000b70 	.word	0x20000b70
    1ba4:	4a02      	ldr	r2, [pc, #8]	; (1bb0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    1ba6:	8993      	ldrh	r3, [r2, #12]
    1ba8:	4303      	orrs	r3, r0
    1baa:	8193      	strh	r3, [r2, #12]
    1bac:	6952      	ldr	r2, [r2, #20]
    1bae:	4710      	bx	r2
    1bb0:	20000084 	.word	0x20000084
    1bb4:	4801      	ldr	r0, [pc, #4]	; (1bbc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    1bb6:	6840      	ldr	r0, [r0, #4]
    1bb8:	4770      	bx	lr
    1bba:	0000      	.short	0x0000
    1bbc:	200000c0 	.word	0x200000c0
    1bc0:	4801      	ldr	r0, [pc, #4]	; (1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1bc2:	6840      	ldr	r0, [r0, #4]
    1bc4:	3080      	adds	r0, #128	; 0x80
    1bc6:	4770      	bx	lr
    1bc8:	200000c0 	.word	0x200000c0
    1bcc:	4a01      	ldr	r2, [pc, #4]	; (1bd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1bce:	2100      	movs	r1, #0
    1bd0:	6952      	ldr	r2, [r2, #20]
    1bd2:	4710      	bx	r2
    1bd4:	20000084 	.word	0x20000084
    1bd8:	b570      	push	{r4, r5, r6, lr}
    1bda:	4605      	mov	r5, r0
    1bdc:	2901      	cmp	r1, #1
    1bde:	d818      	bhi.n	1c12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1be0:	4c12      	ldr	r4, [pc, #72]	; (1c2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    1be2:	69a1      	ldr	r1, [r4, #24]
    1be4:	4788      	blx	r1
    1be6:	b1a0      	cbz	r0, 1c12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1be8:	7920      	ldrb	r0, [r4, #4]
    1bea:	b990      	cbnz	r0, 1c12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1bec:	b9e5      	cbnz	r5, 1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1bee:	f104 0010 	add.w	r0, r4, #16
    1bf2:	7801      	ldrb	r1, [r0, #0]
    1bf4:	06c8      	lsls	r0, r1, #27
    1bf6:	d405      	bmi.n	1c04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1bf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1bfa:	7800      	ldrb	r0, [r0, #0]
    1bfc:	06c0      	lsls	r0, r0, #27
    1bfe:	d401      	bmi.n	1c04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c00:	2001      	movs	r0, #1
    1c02:	e000      	b.n	1c06 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    1c04:	2000      	movs	r0, #0
    1c06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c08:	b92a      	cbnz	r2, 1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c0a:	8962      	ldrh	r2, [r4, #10]
    1c0c:	b11a      	cbz	r2, 1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c0e:	06c9      	lsls	r1, r1, #27
    1c10:	d401      	bmi.n	1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c12:	2001      	movs	r0, #1
    1c14:	bd70      	pop	{r4, r5, r6, pc}
    1c16:	89a1      	ldrh	r1, [r4, #12]
    1c18:	078a      	lsls	r2, r1, #30
    1c1a:	d503      	bpl.n	1c24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    1c1c:	6a22      	ldr	r2, [r4, #32]
    1c1e:	78d2      	ldrb	r2, [r2, #3]
    1c20:	2a02      	cmp	r2, #2
    1c22:	d001      	beq.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c24:	4308      	orrs	r0, r1
    1c26:	d1f4      	bne.n	1c12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c28:	2000      	movs	r0, #0
    1c2a:	bd70      	pop	{r4, r5, r6, pc}
    1c2c:	20000084 	.word	0x20000084
    1c30:	b510      	push	{r4, lr}
    1c32:	f7ff ffbf 	bl	1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1c36:	4604      	mov	r4, r0
    1c38:	f7ff ffc2 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1c3c:	4602      	mov	r2, r0
    1c3e:	7f41      	ldrb	r1, [r0, #29]
    1c40:	4816      	ldr	r0, [pc, #88]	; (1c9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    1c42:	2925      	cmp	r1, #37	; 0x25
    1c44:	d010      	beq.n	1c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c46:	2926      	cmp	r1, #38	; 0x26
    1c48:	d00e      	beq.n	1c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c4a:	7f92      	ldrb	r2, [r2, #30]
    1c4c:	2a25      	cmp	r2, #37	; 0x25
    1c4e:	d00b      	beq.n	1c68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c50:	2920      	cmp	r1, #32
    1c52:	d00d      	beq.n	1c70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c54:	2921      	cmp	r1, #33	; 0x21
    1c56:	d00b      	beq.n	1c70 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c58:	2a23      	cmp	r2, #35	; 0x23
    1c5a:	d00f      	beq.n	1c7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c5c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c60:	2804      	cmp	r0, #4
    1c62:	d100      	bne.n	1c66 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    1c64:	2008      	movs	r0, #8
    1c66:	bd10      	pop	{r4, pc}
    1c68:	6840      	ldr	r0, [r0, #4]
    1c6a:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    1c6e:	e00e      	b.n	1c8e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    1c70:	2a23      	cmp	r2, #35	; 0x23
    1c72:	d003      	beq.n	1c7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c74:	6840      	ldr	r0, [r0, #4]
    1c76:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    1c7a:	e005      	b.n	1c88 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    1c7c:	6841      	ldr	r1, [r0, #4]
    1c7e:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    1c82:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    1c86:	4008      	ands	r0, r1
    1c88:	f00b fc94 	bl	d5b4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1c8c:	4601      	mov	r1, r0
    1c8e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1c96:	f00b bca5 	b.w	d5e4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    1c9a:	0000      	.short	0x0000
    1c9c:	200000c0 	.word	0x200000c0
    1ca0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1ca4:	468b      	mov	fp, r1
    1ca6:	4681      	mov	r9, r0
    1ca8:	f7ff ff8a 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1cac:	2600      	movs	r6, #0
    1cae:	4c66      	ldr	r4, [pc, #408]	; (1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>)
    1cb0:	4607      	mov	r7, r0
    1cb2:	f88d 6008 	strb.w	r6, [sp, #8]
    1cb6:	9603      	str	r6, [sp, #12]
    1cb8:	9601      	str	r6, [sp, #4]
    1cba:	7820      	ldrb	r0, [r4, #0]
    1cbc:	4635      	mov	r5, r6
    1cbe:	2802      	cmp	r0, #2
    1cc0:	d004      	beq.n	1ccc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    1cc2:	f240 41df 	movw	r1, #1247	; 0x4df
    1cc6:	2027      	movs	r0, #39	; 0x27
    1cc8:	f7fe fe60 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ccc:	7ba0      	ldrb	r0, [r4, #14]
    1cce:	0640      	lsls	r0, r0, #25
    1cd0:	d406      	bmi.n	1ce0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    1cd2:	2040      	movs	r0, #64	; 0x40
    1cd4:	f7ff ff7a 	bl	1bcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1cd8:	89e0      	ldrh	r0, [r4, #14]
    1cda:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1cde:	81e0      	strh	r0, [r4, #14]
    1ce0:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    1ce4:	f1b9 0f00 	cmp.w	r9, #0
    1ce8:	d03a      	beq.n	1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1cea:	b180      	cbz	r0, 1d0e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1cec:	f005 fc96 	bl	761c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1cf0:	f005 fc70 	bl	75d4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1cf4:	b958      	cbnz	r0, 1d0e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1cf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1cf8:	7841      	ldrb	r1, [r0, #1]
    1cfa:	b141      	cbz	r1, 1d0e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1cfc:	7800      	ldrb	r0, [r0, #0]
    1cfe:	7e39      	ldrb	r1, [r7, #24]
    1d00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d04:	4288      	cmp	r0, r1
    1d06:	d102      	bne.n	1d0e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d08:	2001      	movs	r0, #1
    1d0a:	7060      	strb	r0, [r4, #1]
    1d0c:	e097      	b.n	1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d10:	7841      	ldrb	r1, [r0, #1]
    1d12:	8161      	strh	r1, [r4, #10]
    1d14:	b121      	cbz	r1, 1d20 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    1d16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1d18:	f00b f976 	bl	d008 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1d1c:	62a0      	str	r0, [r4, #40]	; 0x28
    1d1e:	e000      	b.n	1d22 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    1d20:	62a5      	str	r5, [r4, #40]	; 0x28
    1d22:	89e0      	ldrh	r0, [r4, #14]
    1d24:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1d28:	81e0      	strh	r0, [r4, #14]
    1d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d2c:	7df9      	ldrb	r1, [r7, #23]
    1d2e:	7800      	ldrb	r0, [r0, #0]
    1d30:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1d34:	4288      	cmp	r0, r1
    1d36:	d007      	beq.n	1d48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    1d38:	a803      	add	r0, sp, #12
    1d3a:	f000 f98b 	bl	2054 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x308>
    1d3e:	89e0      	ldrh	r0, [r4, #14]
    1d40:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1d44:	81e0      	strh	r0, [r4, #14]
    1d46:	e000      	b.n	1d4a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f6>
    1d48:	2601      	movs	r6, #1
    1d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d4c:	7e39      	ldrb	r1, [r7, #24]
    1d4e:	7800      	ldrb	r0, [r0, #0]
    1d50:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d54:	4288      	cmp	r0, r1
    1d56:	d10d      	bne.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d58:	a802      	add	r0, sp, #8
    1d5a:	f000 f931 	bl	1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>
    1d5e:	e009      	b.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d60:	b108      	cbz	r0, 1d66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a>
    1d62:	f005 fc55 	bl	7610 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1d66:	78a0      	ldrb	r0, [r4, #2]
    1d68:	1c40      	adds	r0, r0, #1
    1d6a:	70a0      	strb	r0, [r4, #2]
    1d6c:	89e0      	ldrh	r0, [r4, #14]
    1d6e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1d72:	81e0      	strh	r0, [r4, #14]
    1d74:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1d78:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    1d7c:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1d80:	b190      	cbz	r0, 1da8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c>
    1d82:	f7ff ff17 	bl	1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1d86:	4931      	ldr	r1, [pc, #196]	; (1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1d88:	760d      	strb	r5, [r1, #24]
    1d8a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1d8e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1d92:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1d96:	f00b fc17 	bl	d5c8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1d9a:	4603      	mov	r3, r0
    1d9c:	22fb      	movs	r2, #251	; 0xfb
    1d9e:	492b      	ldr	r1, [pc, #172]	; (1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1da0:	4628      	mov	r0, r5
    1da2:	9500      	str	r5, [sp, #0]
    1da4:	f005 fb6c 	bl	7480 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1da8:	f04f 0800 	mov.w	r8, #0
    1dac:	f1bb 0f00 	cmp.w	fp, #0
    1db0:	d104      	bne.n	1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1db2:	78a1      	ldrb	r1, [r4, #2]
    1db4:	2001      	movs	r0, #1
    1db6:	f7ff ff0f 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1dba:	b120      	cbz	r0, 1dc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1dbc:	f005 ffe6 	bl	7d8c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1dc0:	f04f 0801 	mov.w	r8, #1
    1dc4:	e002      	b.n	1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1dc6:	2000      	movs	r0, #0
    1dc8:	f000 f9d0 	bl	216c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x420>
    1dcc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1dd0:	b118      	cbz	r0, 1dda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1dd2:	a901      	add	r1, sp, #4
    1dd4:	2002      	movs	r0, #2
    1dd6:	f7ff fe69 	bl	1aac <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1dda:	481c      	ldr	r0, [pc, #112]	; (1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1ddc:	8aba      	ldrh	r2, [r7, #20]
    1dde:	304a      	adds	r0, #74	; 0x4a
    1de0:	b13e      	cbz	r6, 1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1de2:	b91a      	cbnz	r2, 1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1de4:	88c2      	ldrh	r2, [r0, #6]
    1de6:	b90a      	cbnz	r2, 1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1de8:	8902      	ldrh	r2, [r0, #8]
    1dea:	b112      	cbz	r2, 1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1dec:	8942      	ldrh	r2, [r0, #10]
    1dee:	1c52      	adds	r2, r2, #1
    1df0:	8142      	strh	r2, [r0, #10]
    1df2:	f1b9 0f00 	cmp.w	r9, #0
    1df6:	d004      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df8:	88c1      	ldrh	r1, [r0, #6]
    1dfa:	1c49      	adds	r1, r1, #1
    1dfc:	80c1      	strh	r1, [r0, #6]
    1dfe:	70a5      	strb	r5, [r4, #2]
    1e00:	e002      	b.n	1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1e02:	8901      	ldrh	r1, [r0, #8]
    1e04:	1c49      	adds	r1, r1, #1
    1e06:	8101      	strh	r1, [r0, #8]
    1e08:	480f      	ldr	r0, [pc, #60]	; (1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>)
    1e0a:	303c      	adds	r0, #60	; 0x3c
    1e0c:	f001 f8e4 	bl	2fd8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1e10:	9803      	ldr	r0, [sp, #12]
    1e12:	b140      	cbz	r0, 1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e14:	f00a ffd8 	bl	cdc8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1e18:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e1c:	1c40      	adds	r0, r0, #1
    1e1e:	7205      	strb	r5, [r0, #8]
    1e20:	2208      	movs	r2, #8
    1e22:	f00b ffdf 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e26:	9801      	ldr	r0, [sp, #4]
    1e28:	b130      	cbz	r0, 1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e2a:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e2e:	7205      	strb	r5, [r0, #8]
    1e30:	2210      	movs	r2, #16
    1e32:	9801      	ldr	r0, [sp, #4]
    1e34:	f00b ffd6 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e38:	f1b8 0f00 	cmp.w	r8, #0
    1e3c:	d001      	beq.n	1e42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf6>
    1e3e:	f000 f865 	bl	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1e42:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e46:	0000      	.short	0x0000
    1e48:	20000084 	.word	0x20000084
    1e4c:	20000b18 	.word	0x20000b18
    1e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e54:	4688      	mov	r8, r1
    1e56:	4681      	mov	r9, r0
    1e58:	f7ff feb2 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1e5c:	4d29      	ldr	r5, [pc, #164]	; (1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>)
    1e5e:	4604      	mov	r4, r0
    1e60:	7828      	ldrb	r0, [r5, #0]
    1e62:	2801      	cmp	r0, #1
    1e64:	d004      	beq.n	1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>
    1e66:	f240 416b 	movw	r1, #1131	; 0x46b
    1e6a:	2027      	movs	r0, #39	; 0x27
    1e6c:	f7fe fd8e 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e70:	7c20      	ldrb	r0, [r4, #16]
    1e72:	2700      	movs	r7, #0
    1e74:	2601      	movs	r6, #1
    1e76:	b128      	cbz	r0, 1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e78:	7427      	strb	r7, [r4, #16]
    1e7a:	2100      	movs	r1, #0
    1e7c:	2004      	movs	r0, #4
    1e7e:	f7ff fe91 	bl	1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1e82:	74a6      	strb	r6, [r4, #18]
    1e84:	6a29      	ldr	r1, [r5, #32]
    1e86:	7808      	ldrb	r0, [r1, #0]
    1e88:	43c0      	mvns	r0, r0
    1e8a:	0780      	lsls	r0, r0, #30
    1e8c:	d109      	bne.n	1ea2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x156>
    1e8e:	7da0      	ldrb	r0, [r4, #22]
    1e90:	bb88      	cbnz	r0, 1ef6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1aa>
    1e92:	2002      	movs	r0, #2
    1e94:	f7ff fe86 	bl	1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1e98:	6a28      	ldr	r0, [r5, #32]
    1e9a:	7800      	ldrb	r0, [r0, #0]
    1e9c:	43c0      	mvns	r0, r0
    1e9e:	0780      	lsls	r0, r0, #30
    1ea0:	d029      	beq.n	1ef6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1aa>
    1ea2:	6a28      	ldr	r0, [r5, #32]
    1ea4:	7840      	ldrb	r0, [r0, #1]
    1ea6:	b110      	cbz	r0, 1eae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x162>
    1ea8:	2002      	movs	r0, #2
    1eaa:	75a0      	strb	r0, [r4, #22]
    1eac:	e000      	b.n	1eb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x164>
    1eae:	75a6      	strb	r6, [r4, #22]
    1eb0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1eb4:	b198      	cbz	r0, 1ede <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x192>
    1eb6:	f7ff fe7d 	bl	1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1eba:	4913      	ldr	r1, [pc, #76]	; (1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>)
    1ebc:	7a2d      	ldrb	r5, [r5, #8]
    1ebe:	760e      	strb	r6, [r1, #24]
    1ec0:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1ec4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1ec8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1ecc:	f00b fb7c 	bl	d5c8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1ed0:	4603      	mov	r3, r0
    1ed2:	462a      	mov	r2, r5
    1ed4:	490c      	ldr	r1, [pc, #48]	; (1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>)
    1ed6:	4630      	mov	r0, r6
    1ed8:	9700      	str	r7, [sp, #0]
    1eda:	f005 fad1 	bl	7480 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ede:	ea38 0009 	bics.w	r0, r8, r9
    1ee2:	d004      	beq.n	1eee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1ee4:	2100      	movs	r1, #0
    1ee6:	4608      	mov	r0, r1
    1ee8:	f7ff fe76 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1eec:	b128      	cbz	r0, 1efa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1eee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ef2:	f000 b80b 	b.w	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1ef6:	2003      	movs	r0, #3
    1ef8:	e7d7      	b.n	1eaa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1efa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1efe:	2000      	movs	r0, #0
    1f00:	f000 b8f6 	b.w	20f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a4>
    1f04:	20000084 	.word	0x20000084
    1f08:	20000b18 	.word	0x20000b18
    1f0c:	b510      	push	{r4, lr}
    1f0e:	f005 fc25 	bl	775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1f12:	f005 fb49 	bl	75a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1f16:	4c0d      	ldr	r4, [pc, #52]	; (1f4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x200>)
    1f18:	89e0      	ldrh	r0, [r4, #14]
    1f1a:	f7ff fe57 	bl	1bcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f1e:	480c      	ldr	r0, [pc, #48]	; (1f50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x204>)
    1f20:	7f00      	ldrb	r0, [r0, #28]
    1f22:	b158      	cbz	r0, 1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1f24:	490a      	ldr	r1, [pc, #40]	; (1f50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x204>)
    1f26:	220e      	movs	r2, #14
    1f28:	f101 000e 	add.w	r0, r1, #14
    1f2c:	f00e fae5 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f30:	4807      	ldr	r0, [pc, #28]	; (1f50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x204>)
    1f32:	2202      	movs	r2, #2
    1f34:	4907      	ldr	r1, [pc, #28]	; (1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>)
    1f36:	301d      	adds	r0, #29
    1f38:	f00b ff68 	bl	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1f3c:	69e2      	ldr	r2, [r4, #28]
    1f3e:	7921      	ldrb	r1, [r4, #4]
    1f40:	7860      	ldrb	r0, [r4, #1]
    1f42:	4790      	blx	r2
    1f44:	2000      	movs	r0, #0
    1f46:	7020      	strb	r0, [r4, #0]
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	0000      	.short	0x0000
    1f4c:	20000084 	.word	0x20000084
    1f50:	20000b62 	.word	0x20000b62
    1f54:	00001b8d 	.word	0x00001b8d
    1f58:	4808      	ldr	r0, [pc, #32]	; (1f7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1f5a:	b510      	push	{r4, lr}
    1f5c:	7800      	ldrb	r0, [r0, #0]
    1f5e:	2802      	cmp	r0, #2
    1f60:	d004      	beq.n	1f6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x220>
    1f62:	f240 2149 	movw	r1, #585	; 0x249
    1f66:	2027      	movs	r0, #39	; 0x27
    1f68:	f7fe fd10 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f6c:	4904      	ldr	r1, [pc, #16]	; (1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1f6e:	2001      	movs	r0, #1
    1f70:	7308      	strb	r0, [r1, #12]
    1f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f76:	f7ff bfc9 	b.w	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    1f7a:	0000      	.short	0x0000
    1f7c:	20000084 	.word	0x20000084
    1f80:	20000b62 	.word	0x20000b62
    1f84:	b430      	push	{r4, r5}
    1f86:	4604      	mov	r4, r0
    1f88:	480c      	ldr	r0, [pc, #48]	; (1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>)
    1f8a:	7a00      	ldrb	r0, [r0, #8]
    1f8c:	b10b      	cbz	r3, 1f92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x246>
    1f8e:	1d00      	adds	r0, r0, #4
    1f90:	b2c0      	uxtb	r0, r0
    1f92:	b93a      	cbnz	r2, 1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>
    1f94:	28ff      	cmp	r0, #255	; 0xff
    1f96:	d105      	bne.n	1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>
    1f98:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1f9c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1fa0:	429a      	cmp	r2, r3
    1fa2:	d009      	beq.n	1fb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26c>
    1fa4:	b121      	cbz	r1, 1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1fa6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1faa:	bc30      	pop	{r4, r5}
    1fac:	f005 bf12 	b.w	7dd4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1fb0:	20ff      	movs	r0, #255	; 0xff
    1fb2:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1fb6:	e7f8      	b.n	1faa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25e>
    1fb8:	bc30      	pop	{r4, r5}
    1fba:	4770      	bx	lr
    1fbc:	20000084 	.word	0x20000084
    1fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc4:	4607      	mov	r7, r0
    1fc6:	f7ff fdfb 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1fca:	4c21      	ldr	r4, [pc, #132]	; (2050 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x304>)
    1fcc:	4605      	mov	r5, r0
    1fce:	2601      	movs	r6, #1
    1fd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1fd2:	7808      	ldrb	r0, [r1, #0]
    1fd4:	f000 0003 	and.w	r0, r0, #3
    1fd8:	2801      	cmp	r0, #1
    1fda:	d00c      	beq.n	1ff6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2aa>
    1fdc:	2802      	cmp	r0, #2
    1fde:	d00a      	beq.n	1ff6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2aa>
    1fe0:	2803      	cmp	r0, #3
    1fe2:	d11b      	bne.n	201c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    1fe4:	742e      	strb	r6, [r5, #16]
    1fe6:	89e0      	ldrh	r0, [r4, #14]
    1fe8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1fec:	81e0      	strh	r0, [r4, #14]
    1fee:	2001      	movs	r0, #1
    1ff0:	f7ff fdd8 	bl	1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ff4:	e012      	b.n	201c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    1ff6:	7848      	ldrb	r0, [r1, #1]
    1ff8:	b180      	cbz	r0, 201c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d0>
    1ffa:	89e1      	ldrh	r1, [r4, #14]
    1ffc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2000:	81e1      	strh	r1, [r4, #14]
    2002:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2004:	2900      	cmp	r1, #0
    2006:	d018      	beq.n	203a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    2008:	28fb      	cmp	r0, #251	; 0xfb
    200a:	d818      	bhi.n	203e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f2>
    200c:	7960      	ldrb	r0, [r4, #5]
    200e:	b120      	cbz	r0, 201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2014:	2020      	movs	r0, #32
    2016:	f7ff bdd9 	b.w	1bcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    201a:	703e      	strb	r6, [r7, #0]
    201c:	7e28      	ldrb	r0, [r5, #24]
    201e:	2801      	cmp	r0, #1
    2020:	d012      	beq.n	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    2022:	762e      	strb	r6, [r5, #24]
    2024:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2026:	7840      	ldrb	r0, [r0, #1]
    2028:	2800      	cmp	r0, #0
    202a:	d006      	beq.n	203a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    202c:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2030:	1c40      	adds	r0, r0, #1
    2032:	f141 0100 	adc.w	r1, r1, #0
    2036:	e9c5 0100 	strd	r0, r1, [r5]
    203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    203e:	7920      	ldrb	r0, [r4, #4]
    2040:	f040 0010 	orr.w	r0, r0, #16
    2044:	7120      	strb	r0, [r4, #4]
    2046:	e7f8      	b.n	203a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ee>
    2048:	2000      	movs	r0, #0
    204a:	7628      	strb	r0, [r5, #24]
    204c:	e7ea      	b.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    204e:	0000      	.short	0x0000
    2050:	20000084 	.word	0x20000084
    2054:	b570      	push	{r4, r5, r6, lr}
    2056:	4605      	mov	r5, r0
    2058:	f7ff fdb2 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    205c:	4604      	mov	r4, r0
    205e:	7d80      	ldrb	r0, [r0, #22]
    2060:	2800      	cmp	r0, #0
    2062:	d02d      	beq.n	20c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x374>
    2064:	2802      	cmp	r0, #2
    2066:	d10c      	bne.n	2082 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x336>
    2068:	481b      	ldr	r0, [pc, #108]	; (20d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38c>)
    206a:	4629      	mov	r1, r5
    206c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    206e:	f00a fe3a 	bl	cce6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2072:	b330      	cbz	r0, 20c2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x376>
    2074:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2078:	1c40      	adds	r0, r0, #1
    207a:	f141 0100 	adc.w	r1, r1, #0
    207e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2082:	2500      	movs	r5, #0
    2084:	75a5      	strb	r5, [r4, #22]
    2086:	7ca0      	ldrb	r0, [r4, #18]
    2088:	b120      	cbz	r0, 2094 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x348>
    208a:	74a5      	strb	r5, [r4, #18]
    208c:	2100      	movs	r1, #0
    208e:	2010      	movs	r0, #16
    2090:	f7ff fd88 	bl	1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2094:	7c60      	ldrb	r0, [r4, #17]
    2096:	b170      	cbz	r0, 20b6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36a>
    2098:	7465      	strb	r5, [r4, #17]
    209a:	f7ff fb65 	bl	1768 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    209e:	b198      	cbz	r0, 20c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x37c>
    20a0:	2100      	movs	r1, #0
    20a2:	2008      	movs	r0, #8
    20a4:	f7ff fd7e 	bl	1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20a8:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    20ac:	1c40      	adds	r0, r0, #1
    20ae:	f141 0100 	adc.w	r1, r1, #0
    20b2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20b6:	7de0      	ldrb	r0, [r4, #23]
    20b8:	2801      	cmp	r0, #1
    20ba:	d00a      	beq.n	20d2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x386>
    20bc:	2001      	movs	r0, #1
    20be:	75e0      	strb	r0, [r4, #23]
    20c0:	bd70      	pop	{r4, r5, r6, pc}
    20c2:	f240 31da 	movw	r1, #986	; 0x3da
    20c6:	e001      	b.n	20cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x380>
    20c8:	f240 31f1 	movw	r1, #1009	; 0x3f1
    20cc:	2027      	movs	r0, #39	; 0x27
    20ce:	f7fe fc5d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20d2:	75e5      	strb	r5, [r4, #23]
    20d4:	bd70      	pop	{r4, r5, r6, pc}
    20d6:	0000      	.short	0x0000
    20d8:	20000084 	.word	0x20000084
    20dc:	4803      	ldr	r0, [pc, #12]	; (20ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a0>)
    20de:	7800      	ldrb	r0, [r0, #0]
    20e0:	2800      	cmp	r0, #0
    20e2:	d001      	beq.n	20e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39c>
    20e4:	f7ff bf12 	b.w	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    20e8:	4770      	bx	lr
    20ea:	0000      	.short	0x0000
    20ec:	20000084 	.word	0x20000084
    20f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f4:	4606      	mov	r6, r0
    20f6:	f7ff fd5d 	bl	1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    20fa:	4680      	mov	r8, r0
    20fc:	f7ff fd60 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2100:	4c18      	ldr	r4, [pc, #96]	; (2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>)
    2102:	4605      	mov	r5, r0
    2104:	4632      	mov	r2, r6
    2106:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2108:	6260      	str	r0, [r4, #36]	; 0x24
    210a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    210e:	2101      	movs	r1, #1
    2110:	4640      	mov	r0, r8
    2112:	f7ff ff37 	bl	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    2116:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    211a:	2700      	movs	r7, #0
    211c:	b170      	cbz	r0, 213c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f0>
    211e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2120:	f005 fd8e 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2124:	4810      	ldr	r0, [pc, #64]	; (2168 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41c>)
    2126:	2101      	movs	r1, #1
    2128:	7601      	strb	r1, [r0, #24]
    212a:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    212e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2132:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2134:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2136:	f005 f9f5 	bl	7524 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    213a:	e004      	b.n	2146 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fa>
    213c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    213e:	f005 fd7f 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2142:	f005 fa31 	bl	75a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2146:	b916      	cbnz	r6, 214e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x402>
    2148:	4638      	mov	r0, r7
    214a:	f005 fc29 	bl	79a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    214e:	2100      	movs	r1, #0
    2150:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2154:	4608      	mov	r0, r1
    2156:	f005 fdfb 	bl	7d50 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    215a:	2002      	movs	r0, #2
    215c:	7020      	strb	r0, [r4, #0]
    215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2162:	0000      	.short	0x0000
    2164:	20000084 	.word	0x20000084
    2168:	20000b18 	.word	0x20000b18
    216c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2170:	4604      	mov	r4, r0
    2172:	f7ff fd25 	bl	1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2176:	4605      	mov	r5, r0
    2178:	f7ff fd1c 	bl	1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    217c:	2700      	movs	r7, #0
    217e:	f88d 7000 	strb.w	r7, [sp]
    2182:	4606      	mov	r6, r0
    2184:	f8df 9164 	ldr.w	r9, [pc, #356]	; 22ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a0>
    2188:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    218c:	4622      	mov	r2, r4
    218e:	4639      	mov	r1, r7
    2190:	f7ff fef8 	bl	1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    2194:	7da8      	ldrb	r0, [r5, #22]
    2196:	f04f 0801 	mov.w	r8, #1
    219a:	f1a9 0420 	sub.w	r4, r9, #32
    219e:	b140      	cbz	r0, 21b2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x466>
    21a0:	2801      	cmp	r0, #1
    21a2:	d020      	beq.n	21e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x49a>
    21a4:	2802      	cmp	r0, #2
    21a6:	d02f      	beq.n	2208 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4bc>
    21a8:	2803      	cmp	r0, #3
    21aa:	d03b      	beq.n	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    21ac:	f240 21fb 	movw	r1, #763	; 0x2fb
    21b0:	e057      	b.n	2262 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x516>
    21b2:	79a0      	ldrb	r0, [r4, #6]
    21b4:	2150      	movs	r1, #80	; 0x50
    21b6:	f8ad 0004 	strh.w	r0, [sp, #4]
    21ba:	5388      	strh	r0, [r1, r6]
    21bc:	4648      	mov	r0, r9
    21be:	f7ff fafd 	bl	17bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    21c2:	b130      	cbz	r0, 21d2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x486>
    21c4:	2080      	movs	r0, #128	; 0x80
    21c6:	6a21      	ldr	r1, [r4, #32]
    21c8:	f7ff fcec 	bl	1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    21cc:	f885 8011 	strb.w	r8, [r5, #17]
    21d0:	e02c      	b.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    21d2:	466a      	mov	r2, sp
    21d4:	a901      	add	r1, sp, #4
    21d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    21d8:	f00b fa0e 	bl	d5f8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    21dc:	6220      	str	r0, [r4, #32]
    21de:	b110      	cbz	r0, 21e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x49a>
    21e0:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    21e4:	b111      	cbz	r1, 21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    21e6:	4842      	ldr	r0, [pc, #264]	; (22f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a4>)
    21e8:	6220      	str	r0, [r4, #32]
    21ea:	e01f      	b.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    21ec:	f89d 1000 	ldrb.w	r1, [sp]
    21f0:	b921      	cbnz	r1, 21fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b0>
    21f2:	8007      	strh	r7, [r0, #0]
    21f4:	7087      	strb	r7, [r0, #2]
    21f6:	2101      	movs	r1, #1
    21f8:	f00b fd6d 	bl	dcd6 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    21fc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2200:	6a20      	ldr	r0, [r4, #32]
    2202:	f00b fcf0 	bl	dbe6 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2206:	e011      	b.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    2208:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    220c:	f8ad 0004 	strh.w	r0, [sp, #4]
    2210:	466a      	mov	r2, sp
    2212:	a901      	add	r1, sp, #4
    2214:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2216:	f00b f9ef 	bl	d5f8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    221a:	6220      	str	r0, [r4, #32]
    221c:	b930      	cbnz	r0, 222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    221e:	f240 21e5 	movw	r1, #741	; 0x2e5
    2222:	e01e      	b.n	2262 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x516>
    2224:	4648      	mov	r0, r9
    2226:	f7ff fac9 	bl	17bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    222a:	b1c0      	cbz	r0, 225e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x512>
    222c:	6a20      	ldr	r0, [r4, #32]
    222e:	2308      	movs	r3, #8
    2230:	7801      	ldrb	r1, [r0, #0]
    2232:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2236:	7001      	strb	r1, [r0, #0]
    2238:	7dea      	ldrb	r2, [r5, #23]
    223a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    223e:	4311      	orrs	r1, r2
    2240:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2244:	7001      	strb	r1, [r0, #0]
    2246:	7e2a      	ldrb	r2, [r5, #24]
    2248:	2304      	movs	r3, #4
    224a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    224e:	4311      	orrs	r1, r2
    2250:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2254:	7001      	strb	r1, [r0, #0]
    2256:	43c9      	mvns	r1, r1
    2258:	0789      	lsls	r1, r1, #30
    225a:	d005      	beq.n	2268 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x51c>
    225c:	e007      	b.n	226e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x522>
    225e:	f240 21ee 	movw	r1, #750	; 0x2ee
    2262:	2027      	movs	r0, #39	; 0x27
    2264:	f7fe fb92 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2268:	78c0      	ldrb	r0, [r0, #3]
    226a:	2802      	cmp	r0, #2
    226c:	d00f      	beq.n	228e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x542>
    226e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2270:	f00a fe37 	bl	cee2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2274:	b108      	cbz	r0, 227a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52e>
    2276:	2101      	movs	r1, #1
    2278:	e00a      	b.n	2290 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x544>
    227a:	6a20      	ldr	r0, [r4, #32]
    227c:	7800      	ldrb	r0, [r0, #0]
    227e:	43c0      	mvns	r0, r0
    2280:	0780      	lsls	r0, r0, #30
    2282:	d004      	beq.n	228e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x542>
    2284:	f7ff fa58 	bl	1738 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2288:	f080 0101 	eor.w	r1, r0, #1
    228c:	e000      	b.n	2290 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x544>
    228e:	2100      	movs	r1, #0
    2290:	6a20      	ldr	r0, [r4, #32]
    2292:	7802      	ldrb	r2, [r0, #0]
    2294:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2298:	7001      	strb	r1, [r0, #0]
    229a:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    229e:	b181      	cbz	r1, 22c2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x576>
    22a0:	7841      	ldrb	r1, [r0, #1]
    22a2:	b171      	cbz	r1, 22c2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x576>
    22a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22a6:	f005 fccb 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22aa:	4811      	ldr	r0, [pc, #68]	; (22f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a4>)
    22ac:	3828      	subs	r0, #40	; 0x28
    22ae:	7607      	strb	r7, [r0, #24]
    22b0:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    22b4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    22b8:	6a21      	ldr	r1, [r4, #32]
    22ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22bc:	f005 f932 	bl	7524 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    22c0:	e003      	b.n	22ca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x57e>
    22c2:	f005 fcbd 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22c6:	f005 f96f 	bl	75a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    22ca:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    22ce:	2101      	movs	r1, #1
    22d0:	2000      	movs	r0, #0
    22d2:	f005 fd3d 	bl	7d50 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    22d6:	f884 8003 	strb.w	r8, [r4, #3]
    22da:	6a21      	ldr	r1, [r4, #32]
    22dc:	880a      	ldrh	r2, [r1, #0]
    22de:	8222      	strh	r2, [r4, #16]
    22e0:	7889      	ldrb	r1, [r1, #2]
    22e2:	74a1      	strb	r1, [r4, #18]
    22e4:	f884 8000 	strb.w	r8, [r4]
    22e8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    22ec:	200000a4 	.word	0x200000a4
    22f0:	20000b40 	.word	0x20000b40
    22f4:	00001f59 	.word	0x00001f59
    22f8:	00001ca1 	.word	0x00001ca1
    22fc:	00001e51 	.word	0x00001e51
    2300:	000020dd 	.word	0x000020dd

00002304 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2304:	4800      	ldr	r0, [pc, #0]	; (2308 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2306:	4770      	bx	lr
    2308:	20001450 	.word	0x20001450

0000230c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    230c:	4904      	ldr	r1, [pc, #16]	; (2320 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    230e:	784a      	ldrb	r2, [r1, #1]
    2310:	4282      	cmp	r2, r0
    2312:	d903      	bls.n	231c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2314:	4408      	add	r0, r1
    2316:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    231a:	4770      	bx	lr
    231c:	2000      	movs	r0, #0
    231e:	4770      	bx	lr
    2320:	200012c6 	.word	0x200012c6

00002324 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2324:	4904      	ldr	r1, [pc, #16]	; (2338 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2326:	784a      	ldrb	r2, [r1, #1]
    2328:	4282      	cmp	r2, r0
    232a:	d903      	bls.n	2334 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    232c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2330:	3082      	adds	r0, #130	; 0x82
    2332:	4770      	bx	lr
    2334:	2000      	movs	r0, #0
    2336:	4770      	bx	lr
    2338:	200012c6 	.word	0x200012c6

0000233c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    233c:	4a05      	ldr	r2, [pc, #20]	; (2354 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    233e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2342:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2346:	6802      	ldr	r2, [r0, #0]
    2348:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    234c:	8880      	ldrh	r0, [r0, #4]
    234e:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2352:	4770      	bx	lr
    2354:	200012c6 	.word	0x200012c6

00002358 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2358:	4904      	ldr	r1, [pc, #16]	; (236c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    235a:	784a      	ldrb	r2, [r1, #1]
    235c:	4282      	cmp	r2, r0
    235e:	d903      	bls.n	2368 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2360:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2364:	1c80      	adds	r0, r0, #2
    2366:	4770      	bx	lr
    2368:	2000      	movs	r0, #0
    236a:	4770      	bx	lr
    236c:	200012c6 	.word	0x200012c6

00002370 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2370:	b510      	push	{r4, lr}
    2372:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    2376:	2100      	movs	r1, #0
    2378:	4805      	ldr	r0, [pc, #20]	; (2390 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    237a:	f00e f938 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    237e:	4805      	ldr	r0, [pc, #20]	; (2394 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    2380:	2100      	movs	r1, #0
    2382:	7001      	strb	r1, [r0, #0]
    2384:	7041      	strb	r1, [r0, #1]
    2386:	f44f 7161 	mov.w	r1, #900	; 0x384
    238a:	8041      	strh	r1, [r0, #2]
    238c:	bd10      	pop	{r4, pc}
    238e:	0000      	.short	0x0000
    2390:	200012c6 	.word	0x200012c6
    2394:	20000358 	.word	0x20000358

00002398 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2398:	4b0b      	ldr	r3, [pc, #44]	; (23c8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    239a:	b510      	push	{r4, lr}
    239c:	785c      	ldrb	r4, [r3, #1]
    239e:	4284      	cmp	r4, r0
    23a0:	d910      	bls.n	23c4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    23a2:	4418      	add	r0, r3
    23a4:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    23a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    23ac:	4418      	add	r0, r3
    23ae:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    23b2:	700b      	strb	r3, [r1, #0]
    23b4:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    23b8:	6011      	str	r1, [r2, #0]
    23ba:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    23be:	8090      	strh	r0, [r2, #4]
    23c0:	2001      	movs	r0, #1
    23c2:	bd10      	pop	{r4, pc}
    23c4:	2000      	movs	r0, #0
    23c6:	bd10      	pop	{r4, pc}
    23c8:	200012c6 	.word	0x200012c6

000023cc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    23cc:	4801      	ldr	r0, [pc, #4]	; (23d4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    23ce:	8840      	ldrh	r0, [r0, #2]
    23d0:	4770      	bx	lr
    23d2:	0000      	.short	0x0000
    23d4:	20000358 	.word	0x20000358

000023d8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    23d8:	4905      	ldr	r1, [pc, #20]	; (23f0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    23da:	784a      	ldrb	r2, [r1, #1]
    23dc:	4282      	cmp	r2, r0
    23de:	d903      	bls.n	23e8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    23e0:	4408      	add	r0, r1
    23e2:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    23e6:	b108      	cbz	r0, 23ec <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    23e8:	2000      	movs	r0, #0
    23ea:	4770      	bx	lr
    23ec:	2001      	movs	r0, #1
    23ee:	4770      	bx	lr
    23f0:	200012c6 	.word	0x200012c6

000023f4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    23f4:	4901      	ldr	r1, [pc, #4]	; (23fc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    23f6:	7048      	strb	r0, [r1, #1]
    23f8:	4770      	bx	lr
    23fa:	0000      	.short	0x0000
    23fc:	20000358 	.word	0x20000358
    2400:	4602      	mov	r2, r0
    2402:	4809      	ldr	r0, [pc, #36]	; (2428 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2404:	b510      	push	{r4, lr}
    2406:	7800      	ldrb	r0, [r0, #0]
    2408:	460b      	mov	r3, r1
    240a:	b158      	cbz	r0, 2424 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    240c:	4807      	ldr	r0, [pc, #28]	; (242c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    240e:	7841      	ldrb	r1, [r0, #1]
    2410:	b141      	cbz	r1, 2424 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2412:	b10b      	cbz	r3, 2418 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2414:	1c80      	adds	r0, r0, #2
    2416:	e001      	b.n	241c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2418:	4804      	ldr	r0, [pc, #16]	; (242c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    241a:	3082      	adds	r0, #130	; 0x82
    241c:	f004 ff8a 	bl	7334 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2420:	2001      	movs	r0, #1
    2422:	bd10      	pop	{r4, pc}
    2424:	2000      	movs	r0, #0
    2426:	bd10      	pop	{r4, pc}
    2428:	20000358 	.word	0x20000358
    242c:	200012c6 	.word	0x200012c6
    2430:	4908      	ldr	r1, [pc, #32]	; (2454 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    2432:	b510      	push	{r4, lr}
    2434:	4603      	mov	r3, r0
    2436:	2000      	movs	r0, #0
    2438:	784a      	ldrb	r2, [r1, #1]
    243a:	e006      	b.n	244a <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    243c:	180c      	adds	r4, r1, r0
    243e:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    2442:	429c      	cmp	r4, r3
    2444:	d004      	beq.n	2450 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    2446:	1c40      	adds	r0, r0, #1
    2448:	b2c0      	uxtb	r0, r0
    244a:	4282      	cmp	r2, r0
    244c:	d8f6      	bhi.n	243c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    244e:	2008      	movs	r0, #8
    2450:	bd10      	pop	{r4, pc}
    2452:	0000      	.short	0x0000
    2454:	200012c6 	.word	0x200012c6
    2458:	b5f0      	push	{r4, r5, r6, r7, lr}
    245a:	4c1a      	ldr	r4, [pc, #104]	; (24c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    245c:	4603      	mov	r3, r0
    245e:	2000      	movs	r0, #0
    2460:	7825      	ldrb	r5, [r4, #0]
    2462:	e02b      	b.n	24bc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    2464:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2468:	4422      	add	r2, r4
    246a:	780f      	ldrb	r7, [r1, #0]
    246c:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    2470:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    2474:	ea87 070c 	eor.w	r7, r7, ip
    2478:	405e      	eors	r6, r3
    247a:	443e      	add	r6, r7
    247c:	784f      	ldrb	r7, [r1, #1]
    247e:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2482:	ea87 070c 	eor.w	r7, r7, ip
    2486:	443e      	add	r6, r7
    2488:	788f      	ldrb	r7, [r1, #2]
    248a:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    248e:	ea87 070c 	eor.w	r7, r7, ip
    2492:	443e      	add	r6, r7
    2494:	78cf      	ldrb	r7, [r1, #3]
    2496:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    249a:	ea87 070c 	eor.w	r7, r7, ip
    249e:	443e      	add	r6, r7
    24a0:	790f      	ldrb	r7, [r1, #4]
    24a2:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24a6:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    24aa:	ea87 070c 	eor.w	r7, r7, ip
    24ae:	443e      	add	r6, r7
    24b0:	794f      	ldrb	r7, [r1, #5]
    24b2:	4057      	eors	r7, r2
    24b4:	42f7      	cmn	r7, r6
    24b6:	d004      	beq.n	24c2 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    24b8:	1c40      	adds	r0, r0, #1
    24ba:	b2c0      	uxtb	r0, r0
    24bc:	4285      	cmp	r5, r0
    24be:	d8d1      	bhi.n	2464 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    24c0:	2008      	movs	r0, #8
    24c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24c4:	200012c6 	.word	0x200012c6

000024c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    24c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24cc:	4604      	mov	r4, r0
    24ce:	f100 0580 	add.w	r5, r0, #128	; 0x80
    24d2:	f04f 0901 	mov.w	r9, #1
    24d6:	b171      	cbz	r1, 24f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    24d8:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    24dc:	1e7e      	subs	r6, r7, #1
    24de:	2901      	cmp	r1, #1
    24e0:	d029      	beq.n	2536 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    24e2:	2902      	cmp	r1, #2
    24e4:	d04e      	beq.n	2584 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    24e6:	2903      	cmp	r1, #3
    24e8:	d123      	bne.n	2532 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    24ea:	4639      	mov	r1, r7
    24ec:	4630      	mov	r0, r6
    24ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24f2:	f00b ba9d 	b.w	da30 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    24f6:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    24fa:	2100      	movs	r1, #0
    24fc:	f00e f877 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2500:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2504:	4924      	ldr	r1, [pc, #144]	; (2598 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2506:	66e9      	str	r1, [r5, #108]	; 0x6c
    2508:	4620      	mov	r0, r4
    250a:	2107      	movs	r1, #7
    250c:	6729      	str	r1, [r5, #112]	; 0x70
    250e:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2512:	f021 0104 	bic.w	r1, r1, #4
    2516:	7001      	strb	r1, [r0, #0]
    2518:	20fe      	movs	r0, #254	; 0xfe
    251a:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    251e:	207f      	movs	r0, #127	; 0x7f
    2520:	7668      	strb	r0, [r5, #25]
    2522:	481e      	ldr	r0, [pc, #120]	; (259c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2524:	60a8      	str	r0, [r5, #8]
    2526:	2000      	movs	r0, #0
    2528:	e9c5 0000 	strd	r0, r0, [r5]
    252c:	2020      	movs	r0, #32
    252e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2536:	f04f 0800 	mov.w	r8, #0
    253a:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    253e:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2542:	6921      	ldr	r1, [r4, #16]
    2544:	4816      	ldr	r0, [pc, #88]	; (25a0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2546:	460a      	mov	r2, r1
    2548:	4408      	add	r0, r1
    254a:	fbb0 f0f1 	udiv	r0, r0, r1
    254e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2552:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2556:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    255a:	8b63      	ldrh	r3, [r4, #26]
    255c:	4628      	mov	r0, r5
    255e:	f000 f821 	bl	25a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2562:	4639      	mov	r1, r7
    2564:	4630      	mov	r0, r6
    2566:	f00b fa63 	bl	da30 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    256a:	f00d ff48 	bl	103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    256e:	b118      	cbz	r0, 2578 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    2570:	6960      	ldr	r0, [r4, #20]
    2572:	f000 fbbd 	bl	2cf0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2576:	b110      	cbz	r0, 257e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    2578:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    257c:	e7d9      	b.n	2532 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    257e:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2582:	e7d6      	b.n	2532 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2584:	6901      	ldr	r1, [r0, #16]
    2586:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    258a:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    258e:	4628      	mov	r0, r5
    2590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2594:	f000 b806 	b.w	25a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2598:	c404492f 	.word	0xc404492f
    259c:	fffce000 	.word	0xfffce000
    25a0:	01c9c37f 	.word	0x01c9c37f
    25a4:	b510      	push	{r4, lr}
    25a6:	2400      	movs	r4, #0
    25a8:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    25ac:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    25b0:	434c      	muls	r4, r1
    25b2:	fbb4 f4f2 	udiv	r4, r4, r2
    25b6:	f820 4910 	strh.w	r4, [r0], #-16
    25ba:	f240 2471 	movw	r4, #625	; 0x271
    25be:	4363      	muls	r3, r4
    25c0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25c4:	1e5b      	subs	r3, r3, #1
    25c6:	fbb3 f3f2 	udiv	r3, r3, r2
    25ca:	81c3      	strh	r3, [r0, #14]
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    25ce:	fbb3 f3f2 	udiv	r3, r3, r2
    25d2:	1c5b      	adds	r3, r3, #1
    25d4:	8283      	strh	r3, [r0, #20]
    25d6:	8903      	ldrh	r3, [r0, #8]
    25d8:	4363      	muls	r3, r4
    25da:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25de:	1e5b      	subs	r3, r3, #1
    25e0:	fbb3 f3f2 	udiv	r3, r3, r2
    25e4:	6043      	str	r3, [r0, #4]
    25e6:	6803      	ldr	r3, [r0, #0]
    25e8:	434b      	muls	r3, r1
    25ea:	fbb3 f1f2 	udiv	r1, r3, r2
    25ee:	6001      	str	r1, [r0, #0]
    25f0:	bd10      	pop	{r4, pc}
    25f2:	0000      	.short	0x0000
    25f4:	02625a00 	.word	0x02625a00

000025f8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    25f8:	4902      	ldr	r1, [pc, #8]	; (2604 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    25fa:	f991 1000 	ldrsb.w	r1, [r1]
    25fe:	f00b b9c8 	b.w	d992 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2602:	0000      	.short	0x0000
    2604:	20000370 	.word	0x20000370

00002608 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2608:	b508      	push	{r3, lr}
    260a:	207f      	movs	r0, #127	; 0x7f
    260c:	f88d 0000 	strb.w	r0, [sp]
    2610:	4668      	mov	r0, sp
    2612:	f005 fbc3 	bl	7d9c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2616:	b140      	cbz	r0, 262a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2618:	4805      	ldr	r0, [pc, #20]	; (2630 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    261a:	7840      	ldrb	r0, [r0, #1]
    261c:	4240      	negs	r0, r0
    261e:	b241      	sxtb	r1, r0
    2620:	f99d 0000 	ldrsb.w	r0, [sp]
    2624:	f00b f9b5 	bl	d992 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2628:	bd08      	pop	{r3, pc}
    262a:	f99d 0000 	ldrsb.w	r0, [sp]
    262e:	bd08      	pop	{r3, pc}
    2630:	20000370 	.word	0x20000370

00002634 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2634:	4a01      	ldr	r2, [pc, #4]	; (263c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2636:	7010      	strb	r0, [r2, #0]
    2638:	7051      	strb	r1, [r2, #1]
    263a:	4770      	bx	lr
    263c:	20000370 	.word	0x20000370
    2640:	b570      	push	{r4, r5, r6, lr}
    2642:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2646:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    264a:	2401      	movs	r4, #1
    264c:	fb03 2101 	mla	r1, r3, r1, r2
    2650:	2225      	movs	r2, #37	; 0x25
    2652:	fbb1 f3f2 	udiv	r3, r1, r2
    2656:	fb02 1113 	mls	r1, r2, r3, r1
    265a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    265e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2662:	f001 0307 	and.w	r3, r1, #7
    2666:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    266a:	fa04 f303 	lsl.w	r3, r4, r3
    266e:	421a      	tst	r2, r3
    2670:	d004      	beq.n	267c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    2672:	bf00      	nop
    2674:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2678:	2000      	movs	r0, #0
    267a:	bd70      	pop	{r4, r5, r6, pc}
    267c:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2680:	fbb1 f3f2 	udiv	r3, r1, r2
    2684:	fb02 1113 	mls	r1, r2, r3, r1
    2688:	1c49      	adds	r1, r1, #1
    268a:	b2c9      	uxtb	r1, r1
    268c:	2300      	movs	r3, #0
    268e:	18c5      	adds	r5, r0, r3
    2690:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2694:	428a      	cmp	r2, r1
    2696:	d312      	bcc.n	26be <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    2698:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    269c:	2200      	movs	r2, #0
    269e:	bf00      	nop
    26a0:	fa04 f602 	lsl.w	r6, r4, r2
    26a4:	4235      	tst	r5, r6
    26a6:	d001      	beq.n	26ac <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    26a8:	1e49      	subs	r1, r1, #1
    26aa:	b2c9      	uxtb	r1, r1
    26ac:	b121      	cbz	r1, 26b8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    26ae:	1c52      	adds	r2, r2, #1
    26b0:	b2d2      	uxtb	r2, r2
    26b2:	2a08      	cmp	r2, #8
    26b4:	d3f4      	bcc.n	26a0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    26b6:	e004      	b.n	26c2 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    26b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    26bc:	e7da      	b.n	2674 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    26be:	1a89      	subs	r1, r1, r2
    26c0:	b2c9      	uxtb	r1, r1
    26c2:	1c5b      	adds	r3, r3, #1
    26c4:	b2db      	uxtb	r3, r3
    26c6:	2b05      	cmp	r3, #5
    26c8:	d3e1      	bcc.n	268e <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    26ca:	201f      	movs	r0, #31
    26cc:	bd70      	pop	{r4, r5, r6, pc}
    26ce:	0000      	movs	r0, r0
    26d0:	b570      	push	{r4, r5, r6, lr}
    26d2:	1c49      	adds	r1, r1, #1
    26d4:	2300      	movs	r3, #0
    26d6:	b2c9      	uxtb	r1, r1
    26d8:	2401      	movs	r4, #1
    26da:	18c5      	adds	r5, r0, r3
    26dc:	79aa      	ldrb	r2, [r5, #6]
    26de:	428a      	cmp	r2, r1
    26e0:	d312      	bcc.n	2708 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    26e2:	f895 5001 	ldrb.w	r5, [r5, #1]
    26e6:	2200      	movs	r2, #0
    26e8:	fa04 f602 	lsl.w	r6, r4, r2
    26ec:	4235      	tst	r5, r6
    26ee:	d001      	beq.n	26f4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    26f0:	1e49      	subs	r1, r1, #1
    26f2:	b2c9      	uxtb	r1, r1
    26f4:	b121      	cbz	r1, 2700 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    26f6:	1c52      	adds	r2, r2, #1
    26f8:	b2d2      	uxtb	r2, r2
    26fa:	2a08      	cmp	r2, #8
    26fc:	d3f4      	bcc.n	26e8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    26fe:	e005      	b.n	270c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2700:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2704:	b2c0      	uxtb	r0, r0
    2706:	bd70      	pop	{r4, r5, r6, pc}
    2708:	1a89      	subs	r1, r1, r2
    270a:	b2c9      	uxtb	r1, r1
    270c:	1c5b      	adds	r3, r3, #1
    270e:	b2db      	uxtb	r3, r3
    2710:	2b05      	cmp	r3, #5
    2712:	d3e2      	bcc.n	26da <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2714:	219d      	movs	r1, #157	; 0x9d
    2716:	2046      	movs	r0, #70	; 0x46
    2718:	f7fe f938 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000271c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    271c:	7841      	ldrb	r1, [r0, #1]
    271e:	b141      	cbz	r1, 2732 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2720:	78c0      	ldrb	r0, [r0, #3]
    2722:	282b      	cmp	r0, #43	; 0x2b
    2724:	d203      	bcs.n	272e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2726:	4a04      	ldr	r2, [pc, #16]	; (2738 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2728:	5c10      	ldrb	r0, [r2, r0]
    272a:	4288      	cmp	r0, r1
    272c:	d101      	bne.n	2732 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    272e:	2001      	movs	r0, #1
    2730:	4770      	bx	lr
    2732:	2000      	movs	r0, #0
    2734:	4770      	bx	lr
    2736:	0000      	.short	0x0000
    2738:	00010738 	.word	0x00010738

0000273c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    273c:	b510      	push	{r4, lr}
    273e:	2201      	movs	r2, #1
    2740:	70c1      	strb	r1, [r0, #3]
    2742:	292b      	cmp	r1, #43	; 0x2b
    2744:	d202      	bcs.n	274c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2746:	4a06      	ldr	r2, [pc, #24]	; (2760 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2748:	5c52      	ldrb	r2, [r2, r1]
    274a:	e006      	b.n	275a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    274c:	29ff      	cmp	r1, #255	; 0xff
    274e:	d004      	beq.n	275a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2750:	f240 4174 	movw	r1, #1140	; 0x474
    2754:	202a      	movs	r0, #42	; 0x2a
    2756:	f7fe f919 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    275a:	7042      	strb	r2, [r0, #1]
    275c:	bd10      	pop	{r4, pc}
    275e:	0000      	.short	0x0000
    2760:	00010738 	.word	0x00010738

00002764 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2764:	4904      	ldr	r1, [pc, #16]	; (2778 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2766:	7c89      	ldrb	r1, [r1, #18]
    2768:	0749      	lsls	r1, r1, #29
    276a:	d400      	bmi.n	276e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    276c:	b108      	cbz	r0, 2772 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    276e:	2000      	movs	r0, #0
    2770:	4770      	bx	lr
    2772:	2001      	movs	r0, #1
    2774:	4770      	bx	lr
    2776:	0000      	.short	0x0000
    2778:	200011c8 	.word	0x200011c8

0000277c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    277c:	4803      	ldr	r0, [pc, #12]	; (278c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    277e:	7c80      	ldrb	r0, [r0, #18]
    2780:	0780      	lsls	r0, r0, #30
    2782:	d401      	bmi.n	2788 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2784:	2001      	movs	r0, #1
    2786:	4770      	bx	lr
    2788:	2000      	movs	r0, #0
    278a:	4770      	bx	lr
    278c:	200011c8 	.word	0x200011c8

00002790 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2790:	4803      	ldr	r0, [pc, #12]	; (27a0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    2792:	7c80      	ldrb	r0, [r0, #18]
    2794:	07c0      	lsls	r0, r0, #31
    2796:	d001      	beq.n	279c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2798:	2000      	movs	r0, #0
    279a:	4770      	bx	lr
    279c:	2001      	movs	r0, #1
    279e:	4770      	bx	lr
    27a0:	200011c8 	.word	0x200011c8
    27a4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    27a8:	4688      	mov	r8, r1
    27aa:	4699      	mov	r9, r3
    27ac:	4615      	mov	r5, r2
    27ae:	4604      	mov	r4, r0
    27b0:	4669      	mov	r1, sp
    27b2:	f00a ff58 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    27b6:	bbe0      	cbnz	r0, 2832 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    27b8:	9e01      	ldr	r6, [sp, #4]
    27ba:	2700      	movs	r7, #0
    27bc:	3680      	adds	r6, #128	; 0x80
    27be:	b17d      	cbz	r5, 27e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    27c0:	4620      	mov	r0, r4
    27c2:	f7fe fdbb 	bl	133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    27c6:	0004      	movs	r4, r0
    27c8:	d00e      	beq.n	27e8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    27ca:	4629      	mov	r1, r5
    27cc:	f00a fb5b 	bl	ce86 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    27d0:	b118      	cbz	r0, 27da <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    27d2:	491b      	ldr	r1, [pc, #108]	; (2840 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    27d4:	8849      	ldrh	r1, [r1, #2]
    27d6:	42a9      	cmp	r1, r5
    27d8:	d208      	bcs.n	27ec <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    27da:	2000      	movs	r0, #0
    27dc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    27e0:	2001      	movs	r0, #1
    27e2:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    27e6:	e024      	b.n	2832 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    27e8:	2167      	movs	r1, #103	; 0x67
    27ea:	e025      	b.n	2838 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    27ec:	4601      	mov	r1, r0
    27ee:	aa02      	add	r2, sp, #8
    27f0:	4620      	mov	r0, r4
    27f2:	f00a fb41 	bl	ce78 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    27f6:	9802      	ldr	r0, [sp, #8]
    27f8:	8007      	strh	r7, [r0, #0]
    27fa:	7087      	strb	r7, [r0, #2]
    27fc:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2800:	b109      	cbz	r1, 2806 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2802:	f04f 0802 	mov.w	r8, #2
    2806:	4641      	mov	r1, r8
    2808:	f00b fa65 	bl	dcd6 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    280c:	9802      	ldr	r0, [sp, #8]
    280e:	462a      	mov	r2, r5
    2810:	4649      	mov	r1, r9
    2812:	1cc0      	adds	r0, r0, #3
    2814:	f00d fe71 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2818:	4620      	mov	r0, r4
    281a:	4629      	mov	r1, r5
    281c:	f00a faea 	bl	cdf4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2820:	b148      	cbz	r0, 2836 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2822:	4668      	mov	r0, sp
    2824:	f00b fab2 	bl	dd8c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    2828:	9801      	ldr	r0, [sp, #4]
    282a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    282e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2832:	2001      	movs	r0, #1
    2834:	e7d2      	b.n	27dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2836:	217c      	movs	r1, #124	; 0x7c
    2838:	202b      	movs	r0, #43	; 0x2b
    283a:	f7fe f8a7 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    283e:	0000      	.short	0x0000
    2840:	200011c8 	.word	0x200011c8

00002844 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2844:	4809      	ldr	r0, [pc, #36]	; (286c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2846:	b082      	sub	sp, #8
    2848:	7a00      	ldrb	r0, [r0, #8]
    284a:	f88d 0000 	strb.w	r0, [sp]
    284e:	9800      	ldr	r0, [sp, #0]
    2850:	9000      	str	r0, [sp, #0]
    2852:	f89d 0000 	ldrb.w	r0, [sp]
    2856:	2800      	cmp	r0, #0
    2858:	d105      	bne.n	2866 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    285a:	2202      	movs	r2, #2
    285c:	4904      	ldr	r1, [pc, #16]	; (2870 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    285e:	4803      	ldr	r0, [pc, #12]	; (286c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2860:	b002      	add	sp, #8
    2862:	f00b babf 	b.w	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2866:	b002      	add	sp, #8
    2868:	4770      	bx	lr
    286a:	0000      	.short	0x0000
    286c:	200011e0 	.word	0x200011e0
    2870:	0000de2b 	.word	0x0000de2b

00002874 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2878:	f8df 9178 	ldr.w	r9, [pc, #376]	; 29f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    287c:	4f5e      	ldr	r7, [pc, #376]	; (29f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    287e:	4683      	mov	fp, r0
    2880:	f04f 0a01 	mov.w	sl, #1
    2884:	2600      	movs	r6, #0
    2886:	6878      	ldr	r0, [r7, #4]
    2888:	4635      	mov	r5, r6
    288a:	7a00      	ldrb	r0, [r0, #8]
    288c:	f88d 0000 	strb.w	r0, [sp]
    2890:	9800      	ldr	r0, [sp, #0]
    2892:	9000      	str	r0, [sp, #0]
    2894:	f89d 1000 	ldrb.w	r1, [sp]
    2898:	2910      	cmp	r1, #16
    289a:	d106      	bne.n	28aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    289c:	f899 1013 	ldrb.w	r1, [r9, #19]
    28a0:	b119      	cbz	r1, 28aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    28a2:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    28a6:	2800      	cmp	r0, #0
    28a8:	d073      	beq.n	2992 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    28aa:	f88d 6000 	strb.w	r6, [sp]
    28ae:	4668      	mov	r0, sp
    28b0:	f000 f906 	bl	2ac0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    28b4:	f89d 1000 	ldrb.w	r1, [sp]
    28b8:	2900      	cmp	r1, #0
    28ba:	d1f8      	bne.n	28ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    28bc:	2800      	cmp	r0, #0
    28be:	d068      	beq.n	2992 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    28c0:	4604      	mov	r4, r0
    28c2:	7a00      	ldrb	r0, [r0, #8]
    28c4:	f88d 0000 	strb.w	r0, [sp]
    28c8:	9800      	ldr	r0, [sp, #0]
    28ca:	9000      	str	r0, [sp, #0]
    28cc:	f89d 8000 	ldrb.w	r8, [sp]
    28d0:	f104 0008 	add.w	r0, r4, #8
    28d4:	2105      	movs	r1, #5
    28d6:	9000      	str	r0, [sp, #0]
    28d8:	7001      	strb	r1, [r0, #0]
    28da:	4640      	mov	r0, r8
    28dc:	f1b8 0f08 	cmp.w	r8, #8
    28e0:	d042      	beq.n	2968 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    28e2:	dc07      	bgt.n	28f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    28e4:	2802      	cmp	r0, #2
    28e6:	d00d      	beq.n	2904 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    28e8:	2803      	cmp	r0, #3
    28ea:	d017      	beq.n	291c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    28ec:	f1b8 0f04 	cmp.w	r8, #4
    28f0:	d105      	bne.n	28fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    28f2:	e01d      	b.n	2930 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    28f4:	280f      	cmp	r0, #15
    28f6:	d052      	beq.n	299e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    28f8:	f1b8 0f10 	cmp.w	r8, #16
    28fc:	d059      	beq.n	29b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    28fe:	f240 214a 	movw	r1, #586	; 0x24a
    2902:	e065      	b.n	29d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2904:	6862      	ldr	r2, [r4, #4]
    2906:	b132      	cbz	r2, 2916 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    2908:	4659      	mov	r1, fp
    290a:	4620      	mov	r0, r4
    290c:	4790      	blx	r2
    290e:	2004      	movs	r0, #4
    2910:	f360 0507 	bfi	r5, r0, #0, #8
    2914:	e010      	b.n	2938 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2916:	f240 11c3 	movw	r1, #451	; 0x1c3
    291a:	e059      	b.n	29d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    291c:	6862      	ldr	r2, [r4, #4]
    291e:	b122      	cbz	r2, 292a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    2920:	4659      	mov	r1, fp
    2922:	4620      	mov	r0, r4
    2924:	4790      	blx	r2
    2926:	4605      	mov	r5, r0
    2928:	e006      	b.n	2938 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    292a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    292e:	e04f      	b.n	29d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2930:	6861      	ldr	r1, [r4, #4]
    2932:	b1b1      	cbz	r1, 2962 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    2934:	4620      	mov	r0, r4
    2936:	4788      	blx	r1
    2938:	f3c5 2007 	ubfx	r0, r5, #8, #8
    293c:	2801      	cmp	r0, #1
    293e:	d04a      	beq.n	29d6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    2940:	f3ef 8110 	mrs	r1, PRIMASK
    2944:	b672      	cpsid	i
    2946:	7a20      	ldrb	r0, [r4, #8]
    2948:	f88d 0000 	strb.w	r0, [sp]
    294c:	9800      	ldr	r0, [sp, #0]
    294e:	9000      	str	r0, [sp, #0]
    2950:	f89d 0000 	ldrb.w	r0, [sp]
    2954:	2805      	cmp	r0, #5
    2956:	d042      	beq.n	29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2958:	b3b0      	cbz	r0, 29c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    295a:	f366 0507 	bfi	r5, r6, #0, #8
    295e:	b3a1      	cbz	r1, 29ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    2960:	e041      	b.n	29e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2962:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    2966:	e033      	b.n	29d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2968:	6860      	ldr	r0, [r4, #4]
    296a:	465d      	mov	r5, fp
    296c:	b198      	cbz	r0, 2996 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    296e:	8804      	ldrh	r4, [r0, #0]
    2970:	4620      	mov	r0, r4
    2972:	f7fe fce3 	bl	133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2976:	b180      	cbz	r0, 299a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2978:	706e      	strb	r6, [r5, #1]
    297a:	210d      	movs	r1, #13
    297c:	7029      	strb	r1, [r5, #0]
    297e:	80ec      	strh	r4, [r5, #6]
    2980:	f8a5 a008 	strh.w	sl, [r5, #8]
    2984:	f885 a004 	strb.w	sl, [r5, #4]
    2988:	4631      	mov	r1, r6
    298a:	f00a fb13 	bl	cfb4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    298e:	2004      	movs	r0, #4
    2990:	613e      	str	r6, [r7, #16]
    2992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2996:	21e5      	movs	r1, #229	; 0xe5
    2998:	e01a      	b.n	29d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    299a:	21c5      	movs	r1, #197	; 0xc5
    299c:	e018      	b.n	29d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    299e:	f88b 6001 	strb.w	r6, [fp, #1]
    29a2:	2116      	movs	r1, #22
    29a4:	f88b 1000 	strb.w	r1, [fp]
    29a8:	f8d4 1009 	ldr.w	r1, [r4, #9]
    29ac:	f8cb 1004 	str.w	r1, [fp, #4]
    29b0:	e7ad      	b.n	290e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    29b2:	4812      	ldr	r0, [pc, #72]	; (29fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    29b4:	6802      	ldr	r2, [r0, #0]
    29b6:	b122      	cbz	r2, 29c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29b8:	6860      	ldr	r0, [r4, #4]
    29ba:	b138      	cbz	r0, 29cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    29bc:	8800      	ldrh	r0, [r0, #0]
    29be:	4659      	mov	r1, fp
    29c0:	4790      	blx	r2
    29c2:	2002      	movs	r0, #2
    29c4:	613e      	str	r6, [r7, #16]
    29c6:	e7e4      	b.n	2992 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    29c8:	e009      	b.n	29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    29ca:	e00b      	b.n	29e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    29cc:	f44f 7110 	mov.w	r1, #576	; 0x240
    29d0:	2010      	movs	r0, #16
    29d2:	f7fd ffdb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29d6:	9800      	ldr	r0, [sp, #0]
    29d8:	4641      	mov	r1, r8
    29da:	7001      	strb	r1, [r0, #0]
    29dc:	e003      	b.n	29e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    29de:	7226      	strb	r6, [r4, #8]
    29e0:	613e      	str	r6, [r7, #16]
    29e2:	e7bc      	b.n	295e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    29e4:	b662      	cpsie	i
    29e6:	f015 0fff 	tst.w	r5, #255	; 0xff
    29ea:	f43f af4c 	beq.w	2886 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    29ee:	b2e8      	uxtb	r0, r5
    29f0:	e7cf      	b.n	2992 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    29f2:	0000      	.short	0x0000
    29f4:	200011c8 	.word	0x200011c8
    29f8:	200011f4 	.word	0x200011f4
    29fc:	200000c8 	.word	0x200000c8

00002a00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2a00:	4901      	ldr	r1, [pc, #4]	; (2a08 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2a02:	7008      	strb	r0, [r1, #0]
    2a04:	f000 b8be 	b.w	2b84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    2a08:	20000372 	.word	0x20000372

00002a0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    2a0c:	4902      	ldr	r1, [pc, #8]	; (2a18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    2a0e:	4801      	ldr	r0, [pc, #4]	; (2a14 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    2a10:	6008      	str	r0, [r1, #0]
    2a12:	4770      	bx	lr
    2a14:	00002a1d 	.word	0x00002a1d
    2a18:	200000c8 	.word	0x200000c8
    2a1c:	b538      	push	{r3, r4, r5, lr}
    2a1e:	000d      	movs	r5, r1
    2a20:	d014      	beq.n	2a4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    2a22:	80a8      	strh	r0, [r5, #4]
    2a24:	2100      	movs	r1, #0
    2a26:	7269      	strb	r1, [r5, #9]
    2a28:	f7fe fc72 	bl	1310 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2a2c:	4604      	mov	r4, r0
    2a2e:	f00a fa05 	bl	ce3c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2a32:	b170      	cbz	r0, 2a52 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    2a34:	4601      	mov	r1, r0
    2a36:	466a      	mov	r2, sp
    2a38:	4620      	mov	r0, r4
    2a3a:	f00a fa1d 	bl	ce78 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a3e:	80e8      	strh	r0, [r5, #6]
    2a40:	b150      	cbz	r0, 2a58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    2a42:	28fb      	cmp	r0, #251	; 0xfb
    2a44:	d90b      	bls.n	2a5e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    2a46:	f240 1123 	movw	r1, #291	; 0x123
    2a4a:	e033      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a4c:	f240 1113 	movw	r1, #275	; 0x113
    2a50:	e030      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a52:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2a56:	e02d      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a58:	f240 1121 	movw	r1, #289	; 0x121
    2a5c:	e02a      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a5e:	9800      	ldr	r0, [sp, #0]
    2a60:	f00b f8e5 	bl	dc2e <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2a64:	2801      	cmp	r0, #1
    2a66:	d004      	beq.n	2a72 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2a68:	2802      	cmp	r0, #2
    2a6a:	d002      	beq.n	2a72 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2a6c:	f240 1133 	movw	r1, #307	; 0x133
    2a70:	e020      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2a72:	7228      	strb	r0, [r5, #8]
    2a74:	6828      	ldr	r0, [r5, #0]
    2a76:	b1a8      	cbz	r0, 2aa4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    2a78:	9900      	ldr	r1, [sp, #0]
    2a7a:	88ea      	ldrh	r2, [r5, #6]
    2a7c:	1cc9      	adds	r1, r1, #3
    2a7e:	f00d fd3c 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a82:	4620      	mov	r0, r4
    2a84:	f00a f9a2 	bl	cdcc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2a88:	b178      	cbz	r0, 2aaa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    2a8a:	4620      	mov	r0, r4
    2a8c:	2100      	movs	r1, #0
    2a8e:	f00a fa91 	bl	cfb4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2a92:	b168      	cbz	r0, 2ab0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    2a94:	4809      	ldr	r0, [pc, #36]	; (2abc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    2a96:	7cc1      	ldrb	r1, [r0, #19]
    2a98:	2900      	cmp	r1, #0
    2a9a:	d002      	beq.n	2aa2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    2a9c:	8a81      	ldrh	r1, [r0, #20]
    2a9e:	1e49      	subs	r1, r1, #1
    2aa0:	8281      	strh	r1, [r0, #20]
    2aa2:	bd38      	pop	{r3, r4, r5, pc}
    2aa4:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2aa8:	e004      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2aaa:	f240 113f 	movw	r1, #319	; 0x13f
    2aae:	e001      	b.n	2ab4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2ab0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2ab4:	2010      	movs	r0, #16
    2ab6:	f7fd ff69 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aba:	0000      	.short	0x0000
    2abc:	200011c8 	.word	0x200011c8
    2ac0:	b538      	push	{r3, r4, r5, lr}
    2ac2:	4603      	mov	r3, r0
    2ac4:	4917      	ldr	r1, [pc, #92]	; (2b24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    2ac6:	2000      	movs	r0, #0
    2ac8:	7018      	strb	r0, [r3, #0]
    2aca:	6908      	ldr	r0, [r1, #16]
    2acc:	2401      	movs	r4, #1
    2ace:	b140      	cbz	r0, 2ae2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    2ad0:	7a02      	ldrb	r2, [r0, #8]
    2ad2:	f88d 2000 	strb.w	r2, [sp]
    2ad6:	9a00      	ldr	r2, [sp, #0]
    2ad8:	9200      	str	r2, [sp, #0]
    2ada:	f89d 5000 	ldrb.w	r5, [sp]
    2ade:	2d00      	cmp	r5, #0
    2ae0:	d111      	bne.n	2b06 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    2ae2:	6848      	ldr	r0, [r1, #4]
    2ae4:	7a02      	ldrb	r2, [r0, #8]
    2ae6:	f88d 2000 	strb.w	r2, [sp]
    2aea:	9a00      	ldr	r2, [sp, #0]
    2aec:	9200      	str	r2, [sp, #0]
    2aee:	f89d 5000 	ldrb.w	r5, [sp]
    2af2:	2d01      	cmp	r5, #1
    2af4:	d006      	beq.n	2b04 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    2af6:	f3ef 8210 	mrs	r2, PRIMASK
    2afa:	b672      	cpsid	i
    2afc:	6805      	ldr	r5, [r0, #0]
    2afe:	604d      	str	r5, [r1, #4]
    2b00:	b112      	cbz	r2, 2b08 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    2b02:	e002      	b.n	2b0a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    2b04:	2000      	movs	r0, #0
    2b06:	bd38      	pop	{r3, r4, r5, pc}
    2b08:	b662      	cpsie	i
    2b0a:	7a02      	ldrb	r2, [r0, #8]
    2b0c:	f88d 2000 	strb.w	r2, [sp]
    2b10:	9a00      	ldr	r2, [sp, #0]
    2b12:	9200      	str	r2, [sp, #0]
    2b14:	f89d 5000 	ldrb.w	r5, [sp]
    2b18:	b10d      	cbz	r5, 2b1e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    2b1a:	6108      	str	r0, [r1, #16]
    2b1c:	bd38      	pop	{r3, r4, r5, pc}
    2b1e:	701c      	strb	r4, [r3, #0]
    2b20:	bd38      	pop	{r3, r4, r5, pc}
    2b22:	0000      	.short	0x0000
    2b24:	200011f4 	.word	0x200011f4
    2b28:	b538      	push	{r3, r4, r5, lr}
    2b2a:	b1d0      	cbz	r0, 2b62 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    2b2c:	6041      	str	r1, [r0, #4]
    2b2e:	f100 0108 	add.w	r1, r0, #8
    2b32:	700a      	strb	r2, [r1, #0]
    2b34:	f3ef 8310 	mrs	r3, PRIMASK
    2b38:	b672      	cpsid	i
    2b3a:	4c10      	ldr	r4, [pc, #64]	; (2b7c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    2b3c:	6004      	str	r4, [r0, #0]
    2b3e:	1f21      	subs	r1, r4, #4
    2b40:	684a      	ldr	r2, [r1, #4]
    2b42:	b14a      	cbz	r2, 2b58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2b44:	7a12      	ldrb	r2, [r2, #8]
    2b46:	f88d 2000 	strb.w	r2, [sp]
    2b4a:	9a00      	ldr	r2, [sp, #0]
    2b4c:	9200      	str	r2, [sp, #0]
    2b4e:	f89d 5000 	ldrb.w	r5, [sp]
    2b52:	2d01      	cmp	r5, #1
    2b54:	d100      	bne.n	2b58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2b56:	600c      	str	r4, [r1, #0]
    2b58:	680a      	ldr	r2, [r1, #0]
    2b5a:	6010      	str	r0, [r2, #0]
    2b5c:	6008      	str	r0, [r1, #0]
    2b5e:	b12b      	cbz	r3, 2b6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    2b60:	e005      	b.n	2b6e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    2b62:	f240 2175 	movw	r1, #629	; 0x275
    2b66:	2010      	movs	r0, #16
    2b68:	f7fd ff10 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b6c:	b662      	cpsie	i
    2b6e:	4804      	ldr	r0, [pc, #16]	; (2b80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    2b70:	7800      	ldrb	r0, [r0, #0]
    2b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2b76:	f009 ba7f 	b.w	c078 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b7a:	0000      	.short	0x0000
    2b7c:	200011f8 	.word	0x200011f8
    2b80:	20000372 	.word	0x20000372
    2b84:	b510      	push	{r4, lr}
    2b86:	2214      	movs	r2, #20
    2b88:	2100      	movs	r1, #0
    2b8a:	4808      	ldr	r0, [pc, #32]	; (2bac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2b8c:	f00d fd2f 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2b90:	4806      	ldr	r0, [pc, #24]	; (2bac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2b92:	2212      	movs	r2, #18
    2b94:	2100      	movs	r1, #0
    2b96:	3814      	subs	r0, #20
    2b98:	f00d fd29 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2b9c:	4803      	ldr	r0, [pc, #12]	; (2bac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2b9e:	2101      	movs	r1, #1
    2ba0:	7301      	strb	r1, [r0, #12]
    2ba2:	1d01      	adds	r1, r0, #4
    2ba4:	6041      	str	r1, [r0, #4]
    2ba6:	6001      	str	r1, [r0, #0]
    2ba8:	bd10      	pop	{r4, pc}
    2baa:	0000      	.short	0x0000
    2bac:	200011f4 	.word	0x200011f4

00002bb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2bb0:	b4f0      	push	{r4, r5, r6, r7}
    2bb2:	8150      	strh	r0, [r2, #10]
    2bb4:	890c      	ldrh	r4, [r1, #8]
    2bb6:	8194      	strh	r4, [r2, #12]
    2bb8:	898b      	ldrh	r3, [r1, #12]
    2bba:	81d3      	strh	r3, [r2, #14]
    2bbc:	8948      	ldrh	r0, [r1, #10]
    2bbe:	8210      	strh	r0, [r2, #16]
    2bc0:	89cd      	ldrh	r5, [r1, #14]
    2bc2:	8255      	strh	r5, [r2, #18]
    2bc4:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2bc6:	42ae      	cmp	r6, r5
    2bc8:	d108      	bne.n	2bdc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2bca:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2bcc:	4285      	cmp	r5, r0
    2bce:	d105      	bne.n	2bdc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2bd0:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2bd2:	429d      	cmp	r5, r3
    2bd4:	d102      	bne.n	2bdc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2bd6:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2bd8:	42a3      	cmp	r3, r4
    2bda:	d001      	beq.n	2be0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2bdc:	2301      	movs	r3, #1
    2bde:	e000      	b.n	2be2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2be0:	2300      	movs	r3, #0
    2be2:	7513      	strb	r3, [r2, #20]
    2be4:	8548      	strh	r0, [r1, #42]	; 0x2a
    2be6:	8a50      	ldrh	r0, [r2, #18]
    2be8:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2bea:	8990      	ldrh	r0, [r2, #12]
    2bec:	8588      	strh	r0, [r1, #44]	; 0x2c
    2bee:	89d0      	ldrh	r0, [r2, #14]
    2bf0:	8608      	strh	r0, [r1, #48]	; 0x30
    2bf2:	bcf0      	pop	{r4, r5, r6, r7}
    2bf4:	4901      	ldr	r1, [pc, #4]	; (2bfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2bf6:	4610      	mov	r0, r2
    2bf8:	f00b b8ee 	b.w	ddd8 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2bfc:	00002c21 	.word	0x00002c21

00002c00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2c00:	8150      	strh	r0, [r2, #10]
    2c02:	8a88      	ldrh	r0, [r1, #20]
    2c04:	8190      	strh	r0, [r2, #12]
    2c06:	8ac8      	ldrh	r0, [r1, #22]
    2c08:	81d0      	strh	r0, [r2, #14]
    2c0a:	8b08      	ldrh	r0, [r1, #24]
    2c0c:	8210      	strh	r0, [r2, #16]
    2c0e:	8b48      	ldrh	r0, [r1, #26]
    2c10:	8250      	strh	r0, [r2, #18]
    2c12:	4902      	ldr	r1, [pc, #8]	; (2c1c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2c14:	4610      	mov	r0, r2
    2c16:	f00b b8dc 	b.w	ddd2 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2c1a:	0000      	.short	0x0000
    2c1c:	00002c61 	.word	0x00002c61
    2c20:	b538      	push	{r3, r4, r5, lr}
    2c22:	f1a0 0418 	sub.w	r4, r0, #24
    2c26:	7d00      	ldrb	r0, [r0, #20]
    2c28:	460d      	mov	r5, r1
    2c2a:	f000 0001 	and.w	r0, r0, #1
    2c2e:	f7ff fd99 	bl	2764 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2c32:	2100      	movs	r1, #0
    2c34:	b108      	cbz	r0, 2c3a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2c36:	9100      	str	r1, [sp, #0]
    2c38:	e00c      	b.n	2c54 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2c3a:	7069      	strb	r1, [r5, #1]
    2c3c:	2013      	movs	r0, #19
    2c3e:	7028      	strb	r0, [r5, #0]
    2c40:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2c44:	6068      	str	r0, [r5, #4]
    2c46:	6860      	ldr	r0, [r4, #4]
    2c48:	60a8      	str	r0, [r5, #8]
    2c4a:	68a0      	ldr	r0, [r4, #8]
    2c4c:	60e8      	str	r0, [r5, #12]
    2c4e:	4803      	ldr	r0, [pc, #12]	; (2c5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2c50:	6840      	ldr	r0, [r0, #4]
    2c52:	9000      	str	r0, [sp, #0]
    2c54:	f8bd 0000 	ldrh.w	r0, [sp]
    2c58:	bd38      	pop	{r3, r4, r5, pc}
    2c5a:	0000      	.short	0x0000
    2c5c:	00002ce8 	.word	0x00002ce8
    2c60:	b570      	push	{r4, r5, r6, lr}
    2c62:	b086      	sub	sp, #24
    2c64:	460e      	mov	r6, r1
    2c66:	4604      	mov	r4, r0
    2c68:	f7ff fd88 	bl	277c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2c6c:	2500      	movs	r5, #0
    2c6e:	b358      	cbz	r0, 2cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2c70:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    2c74:	7225      	strb	r5, [r4, #8]
    2c76:	8804      	ldrh	r4, [r0, #0]
    2c78:	a903      	add	r1, sp, #12
    2c7a:	4620      	mov	r0, r4
    2c7c:	f00c fdc9 	bl	f812 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2c80:	b108      	cbz	r0, 2c86 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2c82:	21fe      	movs	r1, #254	; 0xfe
    2c84:	e017      	b.n	2cb6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2c86:	f8ad 4000 	strh.w	r4, [sp]
    2c8a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2c8e:	f8ad 0002 	strh.w	r0, [sp, #2]
    2c92:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2c96:	f8ad 0004 	strh.w	r0, [sp, #4]
    2c9a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2c9e:	f8ad 0006 	strh.w	r0, [sp, #6]
    2ca2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2ca6:	f8ad 0008 	strh.w	r0, [sp, #8]
    2caa:	4668      	mov	r0, sp
    2cac:	f00c fded 	bl	f88a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2cb0:	b120      	cbz	r0, 2cbc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2cb2:	f240 1107 	movw	r1, #263	; 0x107
    2cb6:	202c      	movs	r0, #44	; 0x2c
    2cb8:	f7fd fe68 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cbc:	f8cd 5000 	str.w	r5, [sp]
    2cc0:	f8bd 0000 	ldrh.w	r0, [sp]
    2cc4:	b006      	add	sp, #24
    2cc6:	bd70      	pop	{r4, r5, r6, pc}
    2cc8:	201b      	movs	r0, #27
    2cca:	7030      	strb	r0, [r6, #0]
    2ccc:	7075      	strb	r5, [r6, #1]
    2cce:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2cd2:	6070      	str	r0, [r6, #4]
    2cd4:	6860      	ldr	r0, [r4, #4]
    2cd6:	60b0      	str	r0, [r6, #8]
    2cd8:	8920      	ldrh	r0, [r4, #8]
    2cda:	81b0      	strh	r0, [r6, #12]
    2cdc:	4801      	ldr	r0, [pc, #4]	; (2ce4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2cde:	6800      	ldr	r0, [r0, #0]
    2ce0:	9000      	str	r0, [sp, #0]
    2ce2:	e7ed      	b.n	2cc0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2ce4:	00002ce8 	.word	0x00002ce8
    2ce8:	00000004 	.word	0x00000004
    2cec:	00000004 	.word	0x00000004

00002cf0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf2:	f06f 021f 	mvn.w	r2, #31
    2cf6:	0c01      	lsrs	r1, r0, #16
    2cf8:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2cfc:	251f      	movs	r5, #31
    2cfe:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d02:	3854      	subs	r0, #84	; 0x54
    2d04:	d00d      	beq.n	2d22 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d06:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d0a:	3855      	subs	r0, #85	; 0x55
    2d0c:	d009      	beq.n	2d22 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d0e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d12:	38aa      	subs	r0, #170	; 0xaa
    2d14:	d005      	beq.n	2d22 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d16:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d1a:	38aa      	subs	r0, #170	; 0xaa
    2d1c:	d001      	beq.n	2d22 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d1e:	2001      	movs	r0, #1
    2d20:	e000      	b.n	2d24 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d22:	2000      	movs	r0, #0
    2d24:	2200      	movs	r2, #0
    2d26:	4613      	mov	r3, r2
    2d28:	ea4f 0402 	mov.w	r4, r2
    2d2c:	ea82 0701 	eor.w	r7, r2, r1
    2d30:	43ff      	mvns	r7, r7
    2d32:	431f      	orrs	r7, r3
    2d34:	1c7f      	adds	r7, r7, #1
    2d36:	d00f      	beq.n	2d58 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d38:	f006 0701 	and.w	r7, r6, #1
    2d3c:	0852      	lsrs	r2, r2, #1
    2d3e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d42:	f005 0701 	and.w	r7, r5, #1
    2d46:	085b      	lsrs	r3, r3, #1
    2d48:	0876      	lsrs	r6, r6, #1
    2d4a:	086d      	lsrs	r5, r5, #1
    2d4c:	1c64      	adds	r4, r4, #1
    2d4e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d52:	2c16      	cmp	r4, #22
    2d54:	d3ea      	bcc.n	2d2c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d58:	2000      	movs	r0, #0
    2d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2d5c:	b510      	push	{r4, lr}
    2d5e:	4804      	ldr	r0, [pc, #16]	; (2d70 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2d60:	f00b f95b 	bl	e01a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2d64:	4802      	ldr	r0, [pc, #8]	; (2d70 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d6a:	3008      	adds	r0, #8
    2d6c:	f00b b955 	b.w	e01a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2d70:	200000cc 	.word	0x200000cc

00002d74 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2d74:	4801      	ldr	r0, [pc, #4]	; (2d7c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    2d76:	f000 b809 	b.w	2d8c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2d7a:	0000      	.short	0x0000
    2d7c:	200000cc 	.word	0x200000cc

00002d80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2d80:	4801      	ldr	r0, [pc, #4]	; (2d88 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2d82:	f000 b803 	b.w	2d8c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2d86:	0000      	.short	0x0000
    2d88:	200000d4 	.word	0x200000d4
    2d8c:	b510      	push	{r4, lr}
    2d8e:	e9d0 2100 	ldrd	r2, r1, [r0]
    2d92:	4b09      	ldr	r3, [pc, #36]	; (2db8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2d94:	4c09      	ldr	r4, [pc, #36]	; (2dbc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2d96:	4353      	muls	r3, r2
    2d98:	4354      	muls	r4, r2
    2d9a:	4051      	eors	r1, r2
    2d9c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2da0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2da4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2da8:	e9c0 2100 	strd	r2, r1, [r0]
    2dac:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2db0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2db4:	4618      	mov	r0, r3
    2db6:	bd10      	pop	{r4, pc}
    2db8:	c6ef3760 	.word	0xc6ef3760
    2dbc:	9e3779bb 	.word	0x9e3779bb

00002dc0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2dc0:	b570      	push	{r4, r5, r6, lr}
    2dc2:	6844      	ldr	r4, [r0, #4]
    2dc4:	1d09      	adds	r1, r1, #4
    2dc6:	2500      	movs	r5, #0
    2dc8:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    2dcc:	3480      	adds	r4, #128	; 0x80
    2dce:	07c0      	lsls	r0, r0, #31
    2dd0:	d001      	beq.n	2dd6 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    2dd2:	2001      	movs	r0, #1
    2dd4:	bd70      	pop	{r4, r5, r6, pc}
    2dd6:	6848      	ldr	r0, [r1, #4]
    2dd8:	6809      	ldr	r1, [r1, #0]
    2dda:	4b0c      	ldr	r3, [pc, #48]	; (2e0c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    2ddc:	f641 0207 	movw	r2, #6151	; 0x1807
    2de0:	4019      	ands	r1, r3
    2de2:	66e1      	str	r1, [r4, #108]	; 0x6c
    2de4:	4010      	ands	r0, r2
    2de6:	6720      	str	r0, [r4, #112]	; 0x70
    2de8:	211b      	movs	r1, #27
    2dea:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2dee:	f00b fa3a 	bl	e266 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    2df2:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    2df6:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    2dfa:	1c40      	adds	r0, r0, #1
    2dfc:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    2e00:	68e0      	ldr	r0, [r4, #12]
    2e02:	f040 0001 	orr.w	r0, r0, #1
    2e06:	60e0      	str	r0, [r4, #12]
    2e08:	2000      	movs	r0, #0
    2e0a:	bd70      	pop	{r4, r5, r6, pc}
    2e0c:	f704492f 	.word	0xf704492f

00002e10 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e10:	b510      	push	{r4, lr}
    2e12:	1d04      	adds	r4, r0, #4
    2e14:	f004 fa04 	bl	7220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e18:	4b03      	ldr	r3, [pc, #12]	; (2e28 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e1a:	f641 0207 	movw	r2, #6151	; 0x1807
    2e1e:	4018      	ands	r0, r3
    2e20:	4011      	ands	r1, r2
    2e22:	6020      	str	r0, [r4, #0]
    2e24:	6061      	str	r1, [r4, #4]
    2e26:	bd10      	pop	{r4, pc}
    2e28:	f704492f 	.word	0xf704492f

00002e2c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e30:	7803      	ldrb	r3, [r0, #0]
    2e32:	6840      	ldr	r0, [r0, #4]
    2e34:	1d0f      	adds	r7, r1, #4
    2e36:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2e3a:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    2e3e:	4606      	mov	r6, r0
    2e40:	f04f 0800 	mov.w	r8, #0
    2e44:	7f6a      	ldrb	r2, [r5, #29]
    2e46:	2107      	movs	r1, #7
    2e48:	4628      	mov	r0, r5
    2e4a:	f00a fc23 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e4e:	b1e0      	cbz	r0, 2e8a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2e50:	6839      	ldr	r1, [r7, #0]
    2e52:	4b18      	ldr	r3, [pc, #96]	; (2eb4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2e54:	6878      	ldr	r0, [r7, #4]
    2e56:	4019      	ands	r1, r3
    2e58:	f641 0207 	movw	r2, #6151	; 0x1807
    2e5c:	66e9      	str	r1, [r5, #108]	; 0x6c
    2e5e:	4010      	ands	r0, r2
    2e60:	6728      	str	r0, [r5, #112]	; 0x70
    2e62:	211b      	movs	r1, #27
    2e64:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2e68:	f00b f9fd 	bl	e266 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    2e6c:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    2e70:	f885 801d 	strb.w	r8, [r5, #29]
    2e74:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2e78:	4640      	mov	r0, r8
    2e7a:	f88d 1000 	strb.w	r1, [sp]
    2e7e:	9900      	ldr	r1, [sp, #0]
    2e80:	9100      	str	r1, [sp, #0]
    2e82:	f89d 1000 	ldrb.w	r1, [sp]
    2e86:	b991      	cbnz	r1, 2eae <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    2e88:	e002      	b.n	2e90 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    2e8a:	2001      	movs	r0, #1
    2e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e90:	8831      	ldrh	r1, [r6, #0]
    2e92:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2e96:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2e9a:	6839      	ldr	r1, [r7, #0]
    2e9c:	66e1      	str	r1, [r4, #108]	; 0x6c
    2e9e:	6879      	ldr	r1, [r7, #4]
    2ea0:	6721      	str	r1, [r4, #112]	; 0x70
    2ea2:	2202      	movs	r2, #2
    2ea4:	4904      	ldr	r1, [pc, #16]	; (2eb8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    2ea6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2eaa:	f00a ff9b 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2eae:	2000      	movs	r0, #0
    2eb0:	e7ec      	b.n	2e8c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    2eb2:	0000      	.short	0x0000
    2eb4:	f704492f 	.word	0xf704492f
    2eb8:	0000e2d3 	.word	0x0000e2d3

00002ebc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2ebc:	b570      	push	{r4, r5, r6, lr}
    2ebe:	1d0d      	adds	r5, r1, #4
    2ec0:	6844      	ldr	r4, [r0, #4]
    2ec2:	f004 f9ad 	bl	7220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2ec6:	f641 0207 	movw	r2, #6151	; 0x1807
    2eca:	4b05      	ldr	r3, [pc, #20]	; (2ee0 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2ecc:	4011      	ands	r1, r2
    2ece:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    2ed2:	4018      	ands	r0, r3
    2ed4:	4002      	ands	r2, r0
    2ed6:	f362 0007 	bfi	r0, r2, #0, #8
    2eda:	6028      	str	r0, [r5, #0]
    2edc:	6069      	str	r1, [r5, #4]
    2ede:	bd70      	pop	{r4, r5, r6, pc}
    2ee0:	f704492f 	.word	0xf704492f

00002ee4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    2ee4:	6841      	ldr	r1, [r0, #4]
    2ee6:	b082      	sub	sp, #8
    2ee8:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    2eec:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    2ef0:	f88d 2000 	strb.w	r2, [sp]
    2ef4:	9a00      	ldr	r2, [sp, #0]
    2ef6:	9200      	str	r2, [sp, #0]
    2ef8:	f89d 2000 	ldrb.w	r2, [sp]
    2efc:	2a00      	cmp	r2, #0
    2efe:	d10b      	bne.n	2f18 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    2f00:	8809      	ldrh	r1, [r1, #0]
    2f02:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    2f06:	211a      	movs	r1, #26
    2f08:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    2f0c:	2202      	movs	r2, #2
    2f0e:	4903      	ldr	r1, [pc, #12]	; (2f1c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    2f10:	3060      	adds	r0, #96	; 0x60
    2f12:	b002      	add	sp, #8
    2f14:	f00a bf66 	b.w	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2f18:	b002      	add	sp, #8
    2f1a:	4770      	bx	lr
    2f1c:	0000e2d3 	.word	0x0000e2d3

00002f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f20:	b570      	push	{r4, r5, r6, lr}
    2f22:	6844      	ldr	r4, [r0, #4]
    2f24:	460d      	mov	r5, r1
    2f26:	7803      	ldrb	r3, [r0, #0]
    2f28:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    2f2c:	3480      	adds	r4, #128	; 0x80
    2f2e:	2600      	movs	r6, #0
    2f30:	2108      	movs	r1, #8
    2f32:	4620      	mov	r0, r4
    2f34:	f00a fbae 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f38:	b920      	cbnz	r0, 2f44 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    2f3a:	7b20      	ldrb	r0, [r4, #12]
    2f3c:	0780      	lsls	r0, r0, #30
    2f3e:	d501      	bpl.n	2f44 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    2f40:	2001      	movs	r0, #1
    2f42:	bd70      	pop	{r4, r5, r6, pc}
    2f44:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f48:	0780      	lsls	r0, r0, #30
    2f4a:	d419      	bmi.n	2f80 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    2f4c:	4628      	mov	r0, r5
    2f4e:	f00a fedc 	bl	dd0a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f52:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    2f56:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f5a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    2f5e:	8868      	ldrh	r0, [r5, #2]
    2f60:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f64:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f68:	f040 0002 	orr.w	r0, r0, #2
    2f6c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    2f70:	07c0      	lsls	r0, r0, #31
    2f72:	d009      	beq.n	2f88 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    2f74:	2202      	movs	r2, #2
    2f76:	4911      	ldr	r1, [pc, #68]	; (2fbc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    2f78:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    2f7c:	f00a ff46 	bl	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f80:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    2f84:	07c0      	lsls	r0, r0, #31
    2f86:	d110      	bne.n	2faa <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    2f88:	68e0      	ldr	r0, [r4, #12]
    2f8a:	0781      	lsls	r1, r0, #30
    2f8c:	d503      	bpl.n	2f96 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2f8e:	214f      	movs	r1, #79	; 0x4f
    2f90:	2040      	movs	r0, #64	; 0x40
    2f92:	f7fd fcfb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f96:	f040 0002 	orr.w	r0, r0, #2
    2f9a:	60e0      	str	r0, [r4, #12]
    2f9c:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    2fa0:	1c40      	adds	r0, r0, #1
    2fa2:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    2fa6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    2faa:	7f60      	ldrb	r0, [r4, #29]
    2fac:	2801      	cmp	r0, #1
    2fae:	d102      	bne.n	2fb6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    2fb0:	7766      	strb	r6, [r4, #29]
    2fb2:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    2fb6:	2000      	movs	r0, #0
    2fb8:	bd70      	pop	{r4, r5, r6, pc}
    2fba:	0000      	.short	0x0000
    2fbc:	0000e381 	.word	0x0000e381

00002fc0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2fc0:	4a04      	ldr	r2, [pc, #16]	; (2fd4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2fc2:	6892      	ldr	r2, [r2, #8]
    2fc4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2fc8:	434b      	muls	r3, r1
    2fca:	4342      	muls	r2, r0
    2fcc:	eb03 3022 	add.w	r0, r3, r2, asr #12
    2fd0:	4770      	bx	lr
    2fd2:	0000      	.short	0x0000
    2fd4:	200000dc 	.word	0x200000dc

00002fd8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    2fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fda:	6844      	ldr	r4, [r0, #4]
    2fdc:	4606      	mov	r6, r0
    2fde:	f104 0580 	add.w	r5, r4, #128	; 0x80
    2fe2:	f000 f87b 	bl	30dc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    2fe6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    2fea:	2901      	cmp	r1, #1
    2fec:	d11a      	bne.n	3024 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    2fee:	2800      	cmp	r0, #0
    2ff0:	d018      	beq.n	3024 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    2ff2:	6870      	ldr	r0, [r6, #4]
    2ff4:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    2ff8:	f88d 1000 	strb.w	r1, [sp]
    2ffc:	9900      	ldr	r1, [sp, #0]
    2ffe:	9100      	str	r1, [sp, #0]
    3000:	f89d 1000 	ldrb.w	r1, [sp]
    3004:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    3008:	2900      	cmp	r1, #0
    300a:	d10b      	bne.n	3024 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    300c:	8821      	ldrh	r1, [r4, #0]
    300e:	8141      	strh	r1, [r0, #10]
    3010:	7e69      	ldrb	r1, [r5, #25]
    3012:	7301      	strb	r1, [r0, #12]
    3014:	7ea9      	ldrb	r1, [r5, #26]
    3016:	7341      	strb	r1, [r0, #13]
    3018:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    301c:	2202      	movs	r2, #2
    301e:	4902      	ldr	r1, [pc, #8]	; (3028 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3020:	f00a bee0 	b.w	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3026:	0000      	.short	0x0000
    3028:	0000e409 	.word	0x0000e409
    302c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3030:	4a0d      	ldr	r2, [pc, #52]	; (3068 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3032:	b510      	push	{r4, lr}
    3034:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3038:	1309      	asrs	r1, r1, #12
    303a:	1300      	asrs	r0, r0, #12
    303c:	b24b      	sxtb	r3, r1
    303e:	f992 4000 	ldrsb.w	r4, [r2]
    3042:	4240      	negs	r0, r0
    3044:	2100      	movs	r1, #0
    3046:	b240      	sxtb	r0, r0
    3048:	42a3      	cmp	r3, r4
    304a:	da02      	bge.n	3052 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    304c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3050:	e005      	b.n	305e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3052:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3056:	42a3      	cmp	r3, r4
    3058:	dd04      	ble.n	3064 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    305a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    305e:	4408      	add	r0, r1
    3060:	f300 0107 	ssat	r1, #8, r0
    3064:	4608      	mov	r0, r1
    3066:	bd10      	pop	{r4, pc}
    3068:	200000dc 	.word	0x200000dc
    306c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3070:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3074:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3078:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    307c:	f00c f87c 	bl	f178 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3080:	4606      	mov	r6, r0
    3082:	68a0      	ldr	r0, [r4, #8]
    3084:	f7ff ffd2 	bl	302c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3088:	0007      	movs	r7, r0
    308a:	d021      	beq.n	30d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    308c:	4620      	mov	r0, r4
    308e:	f00b f9c3 	bl	e418 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3092:	2800      	cmp	r0, #0
    3094:	d01c      	beq.n	30d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3096:	8828      	ldrh	r0, [r5, #0]
    3098:	4669      	mov	r1, sp
    309a:	f00a fae4 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    309e:	b118      	cbz	r0, 30a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    30a0:	2185      	movs	r1, #133	; 0x85
    30a2:	207a      	movs	r0, #122	; 0x7a
    30a4:	f7fd fc72 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30a8:	1c76      	adds	r6, r6, #1
    30aa:	b2f1      	uxtb	r1, r6
    30ac:	2302      	movs	r3, #2
    30ae:	463a      	mov	r2, r7
    30b0:	4668      	mov	r0, sp
    30b2:	f00c f880 	bl	f1b6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    30b6:	2800      	cmp	r0, #0
    30b8:	d10a      	bne.n	30d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    30ba:	4806      	ldr	r0, [pc, #24]	; (30d4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    30bc:	4906      	ldr	r1, [pc, #24]	; (30d8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    30be:	7900      	ldrb	r0, [r0, #4]
    30c0:	fba0 6501 	umull	r6, r5, r0, r1
    30c4:	f00d f887 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    30c8:	1980      	adds	r0, r0, r6
    30ca:	4169      	adcs	r1, r5
    30cc:	e9c4 0100 	strd	r0, r1, [r4]
    30d0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    30d4:	200000dc 	.word	0x200000dc
    30d8:	000f4240 	.word	0x000f4240
    30dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30e0:	4607      	mov	r7, r0
    30e2:	f7ff fa91 	bl	2608 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    30e6:	687c      	ldr	r4, [r7, #4]
    30e8:	4605      	mov	r5, r0
    30ea:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    30ee:	3480      	adds	r4, #128	; 0x80
    30f0:	287f      	cmp	r0, #127	; 0x7f
    30f2:	d042      	beq.n	317a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    30f4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    30f8:	687e      	ldr	r6, [r7, #4]
    30fa:	76a0      	strb	r0, [r4, #26]
    30fc:	4629      	mov	r1, r5
    30fe:	68a0      	ldr	r0, [r4, #8]
    3100:	f7ff ff5e 	bl	2fc0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3104:	60a0      	str	r0, [r4, #8]
    3106:	481e      	ldr	r0, [pc, #120]	; (3180 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3108:	7940      	ldrb	r0, [r0, #5]
    310a:	b1c0      	cbz	r0, 313e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    310c:	6878      	ldr	r0, [r7, #4]
    310e:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3112:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3116:	f7ff ff89 	bl	302c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    311a:	b180      	cbz	r0, 313e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    311c:	4640      	mov	r0, r8
    311e:	f00b f97b 	bl	e418 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3122:	b160      	cbz	r0, 313e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3124:	6878      	ldr	r0, [r7, #4]
    3126:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    312a:	4607      	mov	r7, r0
    312c:	f004 fca2 	bl	7a74 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3130:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3134:	4913      	ldr	r1, [pc, #76]	; (3184 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    3136:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    313a:	f00a fe50 	bl	ddde <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    313e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3142:	2100      	movs	r1, #0
    3144:	1a28      	subs	r0, r5, r0
    3146:	d500      	bpl.n	314a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3148:	4240      	negs	r0, r0
    314a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    314e:	4282      	cmp	r2, r0
    3150:	dc10      	bgt.n	3174 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3152:	2aff      	cmp	r2, #255	; 0xff
    3154:	d00e      	beq.n	3174 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3156:	7f20      	ldrb	r0, [r4, #28]
    3158:	1c40      	adds	r0, r0, #1
    315a:	b2c0      	uxtb	r0, r0
    315c:	7720      	strb	r0, [r4, #28]
    315e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3162:	4290      	cmp	r0, r2
    3164:	d802      	bhi.n	316c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    3166:	7ee0      	ldrb	r0, [r4, #27]
    3168:	287f      	cmp	r0, #127	; 0x7f
    316a:	d103      	bne.n	3174 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    316c:	2000      	movs	r0, #0
    316e:	76e5      	strb	r5, [r4, #27]
    3170:	7720      	strb	r0, [r4, #28]
    3172:	2101      	movs	r1, #1
    3174:	4608      	mov	r0, r1
    3176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    317a:	2000      	movs	r0, #0
    317c:	e7fb      	b.n	3176 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    317e:	0000      	.short	0x0000
    3180:	200000dc 	.word	0x200000dc
    3184:	0000306d 	.word	0x0000306d

00003188 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    318a:	f00b f961 	bl	e450 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    318e:	4604      	mov	r4, r0
    3190:	460d      	mov	r5, r1
    3192:	466a      	mov	r2, sp
    3194:	f000 f862 	bl	325c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3198:	b108      	cbz	r0, 319e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    319a:	2001      	movs	r0, #1
    319c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    319e:	480f      	ldr	r0, [pc, #60]	; (31dc <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    31a0:	7803      	ldrb	r3, [r0, #0]
    31a2:	7841      	ldrb	r1, [r0, #1]
    31a4:	428b      	cmp	r3, r1
    31a6:	d101      	bne.n	31ac <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    31a8:	2000      	movs	r0, #0
    31aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ac:	461a      	mov	r2, r3
    31ae:	6841      	ldr	r1, [r0, #4]
    31b0:	e008      	b.n	31c4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    31b2:	bf00      	nop
    31b4:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    31b8:	1e52      	subs	r2, r2, #1
    31ba:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    31be:	e9c6 7c00 	strd	r7, ip, [r6]
    31c2:	b2d2      	uxtb	r2, r2
    31c4:	f89d 6000 	ldrb.w	r6, [sp]
    31c8:	42b2      	cmp	r2, r6
    31ca:	d8f3      	bhi.n	31b4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    31cc:	b2f2      	uxtb	r2, r6
    31ce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    31d2:	1c5b      	adds	r3, r3, #1
    31d4:	e9c1 4500 	strd	r4, r5, [r1]
    31d8:	7003      	strb	r3, [r0, #0]
    31da:	e7de      	b.n	319a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    31dc:	200000e8 	.word	0x200000e8

000031e0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    31e0:	b510      	push	{r4, lr}
    31e2:	0742      	lsls	r2, r0, #29
    31e4:	d003      	beq.n	31ee <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    31e6:	2163      	movs	r1, #99	; 0x63
    31e8:	2048      	movs	r0, #72	; 0x48
    31ea:	f7fd fbcf 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31ee:	b120      	cbz	r0, 31fa <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    31f0:	4a03      	ldr	r2, [pc, #12]	; (3200 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    31f2:	7051      	strb	r1, [r2, #1]
    31f4:	6050      	str	r0, [r2, #4]
    31f6:	2000      	movs	r0, #0
    31f8:	7010      	strb	r0, [r2, #0]
    31fa:	00c8      	lsls	r0, r1, #3
    31fc:	bd10      	pop	{r4, pc}
    31fe:	0000      	.short	0x0000
    3200:	200000e8 	.word	0x200000e8

00003204 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    3204:	b538      	push	{r3, r4, r5, lr}
    3206:	f00b f923 	bl	e450 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    320a:	466a      	mov	r2, sp
    320c:	f000 f826 	bl	325c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3210:	2800      	cmp	r0, #0
    3212:	d014      	beq.n	323e <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    3214:	4a0a      	ldr	r2, [pc, #40]	; (3240 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    3216:	7810      	ldrb	r0, [r2, #0]
    3218:	1e40      	subs	r0, r0, #1
    321a:	b2c1      	uxtb	r1, r0
    321c:	7011      	strb	r1, [r2, #0]
    321e:	f89d 0000 	ldrb.w	r0, [sp]
    3222:	6852      	ldr	r2, [r2, #4]
    3224:	e008      	b.n	3238 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    3226:	bf00      	nop
    3228:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    322c:	1c40      	adds	r0, r0, #1
    322e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3232:	e9c3 4500 	strd	r4, r5, [r3]
    3236:	b2c0      	uxtb	r0, r0
    3238:	4288      	cmp	r0, r1
    323a:	d3f5      	bcc.n	3228 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    323c:	2001      	movs	r0, #1
    323e:	bd38      	pop	{r3, r4, r5, pc}
    3240:	200000e8 	.word	0x200000e8

00003244 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3244:	4901      	ldr	r1, [pc, #4]	; (324c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3246:	2000      	movs	r0, #0
    3248:	7008      	strb	r0, [r1, #0]
    324a:	4770      	bx	lr
    324c:	200000e8 	.word	0x200000e8

00003250 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3250:	4801      	ldr	r0, [pc, #4]	; (3258 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3252:	7840      	ldrb	r0, [r0, #1]
    3254:	4770      	bx	lr
    3256:	0000      	.short	0x0000
    3258:	200000e8 	.word	0x200000e8
    325c:	b5f0      	push	{r4, r5, r6, r7, lr}
    325e:	4d20      	ldr	r5, [pc, #128]	; (32e0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3260:	2300      	movs	r3, #0
    3262:	7013      	strb	r3, [r2, #0]
    3264:	782b      	ldrb	r3, [r5, #0]
    3266:	b323      	cbz	r3, 32b2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3268:	2400      	movs	r4, #0
    326a:	1e5b      	subs	r3, r3, #1
    326c:	b2db      	uxtb	r3, r3
    326e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3272:	e00b      	b.n	328c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3274:	18e5      	adds	r5, r4, r3
    3276:	086d      	lsrs	r5, r5, #1
    3278:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    327c:	e9d6 7600 	ldrd	r7, r6, [r6]
    3280:	1a3f      	subs	r7, r7, r0
    3282:	418e      	sbcs	r6, r1
    3284:	d201      	bcs.n	328a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3286:	462c      	mov	r4, r5
    3288:	e000      	b.n	328c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    328a:	462b      	mov	r3, r5
    328c:	1b1d      	subs	r5, r3, r4
    328e:	2d01      	cmp	r5, #1
    3290:	dcf0      	bgt.n	3274 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3292:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3296:	e9d6 5600 	ldrd	r5, r6, [r6]
    329a:	ea80 0705 	eor.w	r7, r0, r5
    329e:	ea81 0e06 	eor.w	lr, r1, r6
    32a2:	ea57 070e 	orrs.w	r7, r7, lr
    32a6:	d005      	beq.n	32b4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    32a8:	1b45      	subs	r5, r0, r5
    32aa:	eb71 0506 	sbcs.w	r5, r1, r6
    32ae:	d203      	bcs.n	32b8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    32b0:	7014      	strb	r4, [r2, #0]
    32b2:	e010      	b.n	32d6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    32b4:	7014      	strb	r4, [r2, #0]
    32b6:	e011      	b.n	32dc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    32b8:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    32bc:	e9d5 4500 	ldrd	r4, r5, [r5]
    32c0:	ea80 0604 	eor.w	r6, r0, r4
    32c4:	ea81 0705 	eor.w	r7, r1, r5
    32c8:	433e      	orrs	r6, r7
    32ca:	d006      	beq.n	32da <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    32cc:	1b00      	subs	r0, r0, r4
    32ce:	41a9      	sbcs	r1, r5
    32d0:	d300      	bcc.n	32d4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    32d2:	1c5b      	adds	r3, r3, #1
    32d4:	7013      	strb	r3, [r2, #0]
    32d6:	2000      	movs	r0, #0
    32d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32da:	7013      	strb	r3, [r2, #0]
    32dc:	2001      	movs	r0, #1
    32de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32e0:	200000e8 	.word	0x200000e8

000032e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	4604      	mov	r4, r0
    32e8:	7c00      	ldrb	r0, [r0, #16]
    32ea:	b300      	cbz	r0, 332e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    32ec:	2802      	cmp	r0, #2
    32ee:	d01e      	beq.n	332e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    32f0:	f05f 0001 	movs.w	r0, #1
    32f4:	f104 0151 	add.w	r1, r4, #81	; 0x51
    32f8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    32fc:	460d      	mov	r5, r1
    32fe:	b1c0      	cbz	r0, 3332 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3300:	7de0      	ldrb	r0, [r4, #23]
    3302:	b1f0      	cbz	r0, 3342 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3304:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3308:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    330c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3310:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3314:	7c20      	ldrb	r0, [r4, #16]
    3316:	f00b f8cb 	bl	e4b0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    331a:	7620      	strb	r0, [r4, #24]
    331c:	2008      	movs	r0, #8
    331e:	7660      	strb	r0, [r4, #25]
    3320:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3324:	4629      	mov	r1, r5
    3326:	f00b f8af 	bl	e488 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    332a:	b9a8      	cbnz	r0, 3358 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    332c:	e00e      	b.n	334c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    332e:	2000      	movs	r0, #0
    3330:	e7e0      	b.n	32f4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3332:	2000      	movs	r0, #0
    3334:	f7fe fa8e 	bl	1854 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3338:	2800      	cmp	r0, #0
    333a:	d1eb      	bne.n	3314 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    333c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3340:	e001      	b.n	3346 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3342:	f240 41be 	movw	r1, #1214	; 0x4be
    3346:	202d      	movs	r0, #45	; 0x2d
    3348:	f7fd fb20 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    334c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3350:	4629      	mov	r1, r5
    3352:	f00b f8a2 	bl	e49a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3356:	b100      	cbz	r0, 335a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3358:	2001      	movs	r0, #1
    335a:	76a0      	strb	r0, [r4, #26]
    335c:	7e20      	ldrb	r0, [r4, #24]
    335e:	b130      	cbz	r0, 336e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3360:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3364:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3368:	f00a f955 	bl	d616 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    336c:	7660      	strb	r0, [r4, #25]
    336e:	f7ff f82d 	bl	23cc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3372:	490c      	ldr	r1, [pc, #48]	; (33a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3374:	fba0 2301 	umull	r2, r3, r0, r1
    3378:	f104 0048 	add.w	r0, r4, #72	; 0x48
    337c:	f00b fa0a 	bl	e794 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    3380:	2100      	movs	r1, #0
    3382:	4620      	mov	r0, r4
    3384:	f00b f9bf 	bl	e706 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3388:	2000      	movs	r0, #0
    338a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    338e:	78a0      	ldrb	r0, [r4, #2]
    3390:	0740      	lsls	r0, r0, #29
    3392:	d505      	bpl.n	33a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3394:	4620      	mov	r0, r4
    3396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    339a:	2100      	movs	r1, #0
    339c:	f000 bdf0 	b.w	3f80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e8>
    33a0:	bd70      	pop	{r4, r5, r6, pc}
    33a2:	0000      	.short	0x0000
    33a4:	000f4240 	.word	0x000f4240

000033a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    33a8:	b530      	push	{r4, r5, lr}
    33aa:	460c      	mov	r4, r1
    33ac:	b08d      	sub	sp, #52	; 0x34
    33ae:	4605      	mov	r5, r0
    33b0:	4601      	mov	r1, r0
    33b2:	2224      	movs	r2, #36	; 0x24
    33b4:	a802      	add	r0, sp, #8
    33b6:	f00d f8a0 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    33ba:	a80b      	add	r0, sp, #44	; 0x2c
    33bc:	f00b fa47 	bl	e84e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    33c0:	7aa0      	ldrb	r0, [r4, #10]
    33c2:	f88d 0018 	strb.w	r0, [sp, #24]
    33c6:	7820      	ldrb	r0, [r4, #0]
    33c8:	f88d 0008 	strb.w	r0, [sp, #8]
    33cc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    33d0:	f8ad 0000 	strh.w	r0, [sp]
    33d4:	f89d 0000 	ldrb.w	r0, [sp]
    33d8:	f000 0101 	and.w	r1, r0, #1
    33dc:	f3c0 0240 	ubfx	r2, r0, #1, #1
    33e0:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    33e4:	f3c0 0280 	ubfx	r2, r0, #2, #1
    33e8:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    33ec:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    33f0:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    33f4:	f3c0 1200 	ubfx	r2, r0, #4, #1
    33f8:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    33fc:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3400:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3404:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3408:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    340c:	f8ad 000a 	strh.w	r0, [sp, #10]
    3410:	7d20      	ldrb	r0, [r4, #20]
    3412:	2801      	cmp	r0, #1
    3414:	d006      	beq.n	3424 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3416:	2802      	cmp	r0, #2
    3418:	d004      	beq.n	3424 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    341a:	f240 21e9 	movw	r1, #745	; 0x2e9
    341e:	2006      	movs	r0, #6
    3420:	f7fd fab4 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3424:	f88d 000c 	strb.w	r0, [sp, #12]
    3428:	7a61      	ldrb	r1, [r4, #9]
    342a:	a80b      	add	r0, sp, #44	; 0x2c
    342c:	f00b f9f6 	bl	e81c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3430:	7d20      	ldrb	r0, [r4, #20]
    3432:	2101      	movs	r1, #1
    3434:	2802      	cmp	r0, #2
    3436:	d102      	bne.n	343e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3438:	7d60      	ldrb	r0, [r4, #21]
    343a:	1c40      	adds	r0, r0, #1
    343c:	b2c1      	uxtb	r1, r0
    343e:	7ea0      	ldrb	r0, [r4, #26]
    3440:	1c40      	adds	r0, r0, #1
    3442:	b2c2      	uxtb	r2, r0
    3444:	a80b      	add	r0, sp, #44	; 0x2c
    3446:	f00b f9b0 	bl	e7aa <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    344a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    344e:	0700      	lsls	r0, r0, #28
    3450:	d501      	bpl.n	3456 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3452:	2000      	movs	r0, #0
    3454:	e020      	b.n	3498 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3456:	a80b      	add	r0, sp, #44	; 0x2c
    3458:	f00b f9b9 	bl	e7ce <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    345c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3460:	2228      	movs	r2, #40	; 0x28
    3462:	f000 fe31 	bl	40c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3466:	f240 2171 	movw	r1, #625	; 0x271
    346a:	f200 20db 	addw	r0, r0, #731	; 0x2db
    346e:	fbb0 f0f1 	udiv	r0, r0, r1
    3472:	4348      	muls	r0, r1
    3474:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3478:	f240 2371 	movw	r3, #625	; 0x271
    347c:	0a0a      	lsrs	r2, r1, #8
    347e:	f240 2171 	movw	r1, #625	; 0x271
    3482:	434a      	muls	r2, r1
    3484:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3488:	0a09      	lsrs	r1, r1, #8
    348a:	4359      	muls	r1, r3
    348c:	4290      	cmp	r0, r2
    348e:	d801      	bhi.n	3494 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3490:	9204      	str	r2, [sp, #16]
    3492:	e004      	b.n	349e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3494:	4288      	cmp	r0, r1
    3496:	d801      	bhi.n	349c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3498:	9004      	str	r0, [sp, #16]
    349a:	e000      	b.n	349e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    349c:	9104      	str	r1, [sp, #16]
    349e:	7ca0      	ldrb	r0, [r4, #18]
    34a0:	f88d 0017 	strb.w	r0, [sp, #23]
    34a4:	7e20      	ldrb	r0, [r4, #24]
    34a6:	2801      	cmp	r0, #1
    34a8:	d000      	beq.n	34ac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    34aa:	2000      	movs	r0, #0
    34ac:	f88d 0014 	strb.w	r0, [sp, #20]
    34b0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    34b2:	f009 ff18 	bl	d2e6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    34b6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    34b8:	f009 ffbd 	bl	d436 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    34bc:	2224      	movs	r2, #36	; 0x24
    34be:	a902      	add	r1, sp, #8
    34c0:	4628      	mov	r0, r5
    34c2:	f00d f81a 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    34c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    34c8:	62a8      	str	r0, [r5, #40]	; 0x28
    34ca:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    34ce:	85a8      	strh	r0, [r5, #44]	; 0x2c
    34d0:	7ae0      	ldrb	r0, [r4, #11]
    34d2:	b168      	cbz	r0, 34f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    34d4:	2802      	cmp	r0, #2
    34d6:	d00b      	beq.n	34f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    34d8:	f05f 0001 	movs.w	r0, #1
    34dc:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    34e0:	68e0      	ldr	r0, [r4, #12]
    34e2:	65a8      	str	r0, [r5, #88]	; 0x58
    34e4:	8a20      	ldrh	r0, [r4, #16]
    34e6:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    34ea:	b00d      	add	sp, #52	; 0x34
    34ec:	2000      	movs	r0, #0
    34ee:	bd30      	pop	{r4, r5, pc}
    34f0:	2000      	movs	r0, #0
    34f2:	e7f3      	b.n	34dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000034f4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    34f4:	4a0a      	ldr	r2, [pc, #40]	; (3520 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    34f6:	b510      	push	{r4, lr}
    34f8:	2100      	movs	r1, #0
    34fa:	7011      	strb	r1, [r2, #0]
    34fc:	4c09      	ldr	r4, [pc, #36]	; (3524 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    34fe:	6060      	str	r0, [r4, #4]
    3500:	f000 f822 	bl	3548 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3504:	b110      	cbz	r0, 350c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3506:	f240 312e 	movw	r1, #814	; 0x32e
    350a:	e004      	b.n	3516 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    350c:	68a0      	ldr	r0, [r4, #8]
    350e:	2800      	cmp	r0, #0
    3510:	d104      	bne.n	351c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3512:	f240 3131 	movw	r1, #817	; 0x331
    3516:	202d      	movs	r0, #45	; 0x2d
    3518:	f7fd fa38 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    351c:	bd10      	pop	{r4, pc}
    351e:	0000      	.short	0x0000
    3520:	20001208 	.word	0x20001208
    3524:	200000f0 	.word	0x200000f0

00003528 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3528:	4902      	ldr	r1, [pc, #8]	; (3534 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    352a:	4801      	ldr	r0, [pc, #4]	; (3530 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    352c:	6088      	str	r0, [r1, #8]
    352e:	4770      	bx	lr
    3530:	000040b0 	.word	0x000040b0
    3534:	200000f0 	.word	0x200000f0

00003538 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3538:	4902      	ldr	r1, [pc, #8]	; (3544 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    353a:	6008      	str	r0, [r1, #0]
    353c:	6889      	ldr	r1, [r1, #8]
    353e:	6809      	ldr	r1, [r1, #0]
    3540:	4708      	bx	r1
    3542:	0000      	.short	0x0000
    3544:	200000f0 	.word	0x200000f0

00003548 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3548:	4808      	ldr	r0, [pc, #32]	; (356c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    354a:	b510      	push	{r4, lr}
    354c:	7800      	ldrb	r0, [r0, #0]
    354e:	b110      	cbz	r0, 3556 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3550:	240c      	movs	r4, #12
    3552:	4620      	mov	r0, r4
    3554:	bd10      	pop	{r4, pc}
    3556:	2400      	movs	r4, #0
    3558:	2218      	movs	r2, #24
    355a:	4621      	mov	r1, r4
    355c:	4803      	ldr	r0, [pc, #12]	; (356c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    355e:	f00d f846 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3562:	f004 f8d9 	bl	7718 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3566:	f003 fefd 	bl	7364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    356a:	e7f2      	b.n	3552 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    356c:	20001208 	.word	0x20001208

00003570 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3570:	4904      	ldr	r1, [pc, #16]	; (3584 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3572:	b510      	push	{r4, lr}
    3574:	7809      	ldrb	r1, [r1, #0]
    3576:	2901      	cmp	r1, #1
    3578:	d101      	bne.n	357e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    357a:	f000 fbd5 	bl	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>
    357e:	2000      	movs	r0, #0
    3580:	bd10      	pop	{r4, pc}
    3582:	0000      	.short	0x0000
    3584:	20001208 	.word	0x20001208

00003588 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3588:	4902      	ldr	r1, [pc, #8]	; (3594 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    358a:	4801      	ldr	r0, [pc, #4]	; (3590 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    358c:	6008      	str	r0, [r1, #0]
    358e:	4770      	bx	lr
    3590:	00003e55 	.word	0x00003e55
    3594:	200000fc 	.word	0x200000fc

00003598 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3598:	b510      	push	{r4, lr}
    359a:	4604      	mov	r4, r0
    359c:	7880      	ldrb	r0, [r0, #2]
    359e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    35a2:	b158      	cbz	r0, 35bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    35a4:	233c      	movs	r3, #60	; 0x3c
    35a6:	22ff      	movs	r2, #255	; 0xff
    35a8:	4620      	mov	r0, r4
    35aa:	69e1      	ldr	r1, [r4, #28]
    35ac:	f000 fbe2 	bl	3d74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2dc>
    35b0:	2202      	movs	r2, #2
    35b2:	4904      	ldr	r1, [pc, #16]	; (35c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    35b4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    35b8:	f00a fc14 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35bc:	2001      	movs	r0, #1
    35be:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    35c2:	bd10      	pop	{r4, pc}
    35c4:	0000e69f 	.word	0x0000e69f
    35c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35cc:	000f      	movs	r7, r1
    35ce:	4604      	mov	r4, r0
    35d0:	d023      	beq.n	361a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    35d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    35d6:	4605      	mov	r5, r0
    35d8:	f00b f922 	bl	e820 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    35dc:	b9b0      	cbnz	r0, 360c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    35de:	78a0      	ldrb	r0, [r4, #2]
    35e0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    35e4:	b350      	cbz	r0, 363c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    35e6:	4628      	mov	r0, r5
    35e8:	f00b f8f1 	bl	e7ce <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    35ec:	4606      	mov	r6, r0
    35ee:	4628      	mov	r0, r5
    35f0:	f00b f916 	bl	e820 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    35f4:	1a30      	subs	r0, r6, r0
    35f6:	b2c0      	uxtb	r0, r0
    35f8:	f00b f967 	bl	e8ca <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    35fc:	4601      	mov	r1, r0
    35fe:	4835      	ldr	r0, [pc, #212]	; (36d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3600:	6842      	ldr	r2, [r0, #4]
    3602:	4411      	add	r1, r2
    3604:	6041      	str	r1, [r0, #4]
    3606:	4628      	mov	r0, r5
    3608:	f00b f928 	bl	e85c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    360c:	4628      	mov	r0, r5
    360e:	f00b f8ea 	bl	e7e6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3612:	4601      	mov	r1, r0
    3614:	4620      	mov	r0, r4
    3616:	f00b f8b2 	bl	e77e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    361a:	4d2f      	ldr	r5, [pc, #188]	; (36d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    361c:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3620:	2100      	movs	r1, #0
    3622:	6868      	ldr	r0, [r5, #4]
    3624:	8001      	strh	r1, [r0, #0]
    3626:	f00b f823 	bl	e670 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    362a:	8860      	ldrh	r0, [r4, #2]
    362c:	2813      	cmp	r0, #19
    362e:	d013      	beq.n	3658 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3630:	dc09      	bgt.n	3646 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3632:	2810      	cmp	r0, #16
    3634:	d036      	beq.n	36a4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3636:	2812      	cmp	r0, #18
    3638:	d109      	bne.n	364e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    363a:	e031      	b.n	36a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    363c:	4620      	mov	r0, r4
    363e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3642:	f000 bb71 	b.w	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>
    3646:	2815      	cmp	r0, #21
    3648:	d00f      	beq.n	366a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    364a:	281d      	cmp	r0, #29
    364c:	d00d      	beq.n	366a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    364e:	f240 6173 	movw	r1, #1651	; 0x673
    3652:	202d      	movs	r0, #45	; 0x2d
    3654:	f7fd f99a 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3658:	2100      	movs	r1, #0
    365a:	6868      	ldr	r0, [r5, #4]
    365c:	f00a fa40 	bl	dae0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3660:	2101      	movs	r1, #1
    3662:	6868      	ldr	r0, [r5, #4]
    3664:	f00b f804 	bl	e670 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3668:	e020      	b.n	36ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    366a:	2101      	movs	r1, #1
    366c:	6868      	ldr	r0, [r5, #4]
    366e:	f00a fa37 	bl	dae0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3672:	2101      	movs	r1, #1
    3674:	6868      	ldr	r0, [r5, #4]
    3676:	f00a fffb 	bl	e670 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    367a:	b136      	cbz	r6, 368a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    367c:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3680:	6868      	ldr	r0, [r5, #4]
    3682:	f00a fa48 	bl	db16 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3686:	2101      	movs	r1, #1
    3688:	e006      	b.n	3698 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    368a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    368e:	6868      	ldr	r0, [r5, #4]
    3690:	f00a fa41 	bl	db16 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3694:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3698:	6868      	ldr	r0, [r5, #4]
    369a:	f00a fa42 	bl	db22 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    369e:	e005      	b.n	36ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    36a0:	2106      	movs	r1, #6
    36a2:	e000      	b.n	36a6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    36a4:	2102      	movs	r1, #2
    36a6:	6868      	ldr	r0, [r5, #4]
    36a8:	f00a fa1a 	bl	dae0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    36ac:	4620      	mov	r0, r4
    36ae:	f000 fcdd 	bl	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    36b2:	8860      	ldrh	r0, [r4, #2]
    36b4:	281d      	cmp	r0, #29
    36b6:	d007      	beq.n	36c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    36b8:	2815      	cmp	r0, #21
    36ba:	d005      	beq.n	36c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    36bc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    36c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    36c2:	6868      	ldr	r0, [r5, #4]
    36c4:	f00a f9fc 	bl	dac0 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    36c8:	4639      	mov	r1, r7
    36ca:	4620      	mov	r0, r4
    36cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    36d0:	f000 b9f4 	b.w	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    36d4:	20001208 	.word	0x20001208
    36d8:	200000f0 	.word	0x200000f0
    36dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36e0:	4d2f      	ldr	r5, [pc, #188]	; (37a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    36e2:	4680      	mov	r8, r0
    36e4:	7828      	ldrb	r0, [r5, #0]
    36e6:	2802      	cmp	r0, #2
    36e8:	d005      	beq.n	36f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    36ea:	7828      	ldrb	r0, [r5, #0]
    36ec:	2803      	cmp	r0, #3
    36ee:	d002      	beq.n	36f6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    36f0:	f640 512d 	movw	r1, #3373	; 0xd2d
    36f4:	e02b      	b.n	374e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    36f6:	4c2b      	ldr	r4, [pc, #172]	; (37a4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    36f8:	6826      	ldr	r6, [r4, #0]
    36fa:	7b30      	ldrb	r0, [r6, #12]
    36fc:	b118      	cbz	r0, 3706 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    36fe:	f7fe ff83 	bl	2608 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3702:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3706:	f8d4 c004 	ldr.w	ip, [r4, #4]
    370a:	2700      	movs	r7, #0
    370c:	f1b8 0f00 	cmp.w	r8, #0
    3710:	f89c 0000 	ldrb.w	r0, [ip]
    3714:	f000 060f 	and.w	r6, r0, #15
    3718:	d027      	beq.n	376a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    371a:	6821      	ldr	r1, [r4, #0]
    371c:	09c0      	lsrs	r0, r0, #7
    371e:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3722:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3726:	f10c 0109 	add.w	r1, ip, #9
    372a:	f009 fedc 	bl	d4e6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    372e:	b1e0      	cbz	r0, 376a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3730:	4639      	mov	r1, r7
    3732:	6860      	ldr	r0, [r4, #4]
    3734:	f00a f9b4 	bl	daa0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3738:	b1b8      	cbz	r0, 376a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    373a:	782a      	ldrb	r2, [r5, #0]
    373c:	6820      	ldr	r0, [r4, #0]
    373e:	4631      	mov	r1, r6
    3740:	2a02      	cmp	r2, #2
    3742:	d007      	beq.n	3754 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3744:	782a      	ldrb	r2, [r5, #0]
    3746:	2a03      	cmp	r2, #3
    3748:	d004      	beq.n	3754 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    374a:	f640 5106 	movw	r1, #3334	; 0xd06
    374e:	202d      	movs	r0, #45	; 0x2d
    3750:	f7fd f91c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3754:	68a2      	ldr	r2, [r4, #8]
    3756:	782b      	ldrb	r3, [r5, #0]
    3758:	6952      	ldr	r2, [r2, #20]
    375a:	f06f 0607 	mvn.w	r6, #7
    375e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3762:	58d2      	ldr	r2, [r2, r3]
    3764:	4790      	blx	r2
    3766:	4606      	mov	r6, r0
    3768:	e000      	b.n	376c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    376a:	2601      	movs	r6, #1
    376c:	7ba8      	ldrb	r0, [r5, #14]
    376e:	b118      	cbz	r0, 3778 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3770:	f003 ffd2 	bl	7718 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3774:	f003 fdf6 	bl	7364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3778:	2e00      	cmp	r6, #0
    377a:	d00f      	beq.n	379c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    377c:	6820      	ldr	r0, [r4, #0]
    377e:	f00b f8ba 	bl	e8f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3782:	b130      	cbz	r0, 3792 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3784:	f003 ffea 	bl	775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3788:	68a0      	ldr	r0, [r4, #8]
    378a:	6880      	ldr	r0, [r0, #8]
    378c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3790:	4700      	bx	r0
    3792:	6820      	ldr	r0, [r4, #0]
    3794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3798:	f000 bac6 	b.w	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>
    379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37a0:	20001208 	.word	0x20001208
    37a4:	200000f0 	.word	0x200000f0
    37a8:	b510      	push	{r4, lr}
    37aa:	2903      	cmp	r1, #3
    37ac:	d002      	beq.n	37b4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    37ae:	2905      	cmp	r1, #5
    37b0:	d10a      	bne.n	37c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    37b2:	e002      	b.n	37ba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    37b4:	f000 fbb2 	bl	3f1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x484>
    37b8:	e003      	b.n	37c2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    37ba:	4904      	ldr	r1, [pc, #16]	; (37cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    37bc:	6809      	ldr	r1, [r1, #0]
    37be:	b109      	cbz	r1, 37c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    37c0:	4788      	blx	r1
    37c2:	b108      	cbz	r0, 37c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    37c4:	2000      	movs	r0, #0
    37c6:	bd10      	pop	{r4, pc}
    37c8:	2001      	movs	r0, #1
    37ca:	bd10      	pop	{r4, pc}
    37cc:	200000fc 	.word	0x200000fc
    37d0:	4a09      	ldr	r2, [pc, #36]	; (37f8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    37d2:	0003      	movs	r3, r0
    37d4:	6810      	ldr	r0, [r2, #0]
    37d6:	d001      	beq.n	37dc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    37d8:	f000 baa6 	b.w	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>
    37dc:	2900      	cmp	r1, #0
    37de:	d009      	beq.n	37f4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    37e0:	6891      	ldr	r1, [r2, #8]
    37e2:	4a06      	ldr	r2, [pc, #24]	; (37fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    37e4:	6909      	ldr	r1, [r1, #16]
    37e6:	7812      	ldrb	r2, [r2, #0]
    37e8:	f06f 030f 	mvn.w	r3, #15
    37ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    37f0:	5889      	ldr	r1, [r1, r2]
    37f2:	4708      	bx	r1
    37f4:	4770      	bx	lr
    37f6:	0000      	.short	0x0000
    37f8:	200000f0 	.word	0x200000f0
    37fc:	20001208 	.word	0x20001208
    3800:	b570      	push	{r4, r5, r6, lr}
    3802:	4604      	mov	r4, r0
    3804:	8840      	ldrh	r0, [r0, #2]
    3806:	2810      	cmp	r0, #16
    3808:	d019      	beq.n	383e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    380a:	4d10      	ldr	r5, [pc, #64]	; (384c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    380c:	7ba8      	ldrb	r0, [r5, #14]
    380e:	b120      	cbz	r0, 381a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3810:	f003 fdc8 	bl	73a4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3814:	2040      	movs	r0, #64	; 0x40
    3816:	f003 ff8d 	bl	7734 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    381a:	480d      	ldr	r0, [pc, #52]	; (3850 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    381c:	6840      	ldr	r0, [r0, #4]
    381e:	f004 fa0f 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3822:	78a0      	ldrb	r0, [r4, #2]
    3824:	0740      	lsls	r0, r0, #29
    3826:	d404      	bmi.n	3832 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3828:	2100      	movs	r1, #0
    382a:	7922      	ldrb	r2, [r4, #4]
    382c:	4608      	mov	r0, r1
    382e:	f004 fa8f 	bl	7d50 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3832:	2000      	movs	r0, #0
    3834:	f004 f8b4 	bl	79a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3838:	2002      	movs	r0, #2
    383a:	7028      	strb	r0, [r5, #0]
    383c:	bd70      	pop	{r4, r5, r6, pc}
    383e:	4620      	mov	r0, r4
    3840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3844:	2101      	movs	r1, #1
    3846:	f7ff bebf 	b.w	35c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    384a:	0000      	.short	0x0000
    384c:	20001208 	.word	0x20001208
    3850:	200000f0 	.word	0x200000f0
    3854:	b510      	push	{r4, lr}
    3856:	4c12      	ldr	r4, [pc, #72]	; (38a0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
    3858:	6820      	ldr	r0, [r4, #0]
    385a:	f000 f825 	bl	38a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    385e:	6820      	ldr	r0, [r4, #0]
    3860:	f00b f849 	bl	e8f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3864:	2800      	cmp	r0, #0
    3866:	6820      	ldr	r0, [r4, #0]
    3868:	d00b      	beq.n	3882 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
    386a:	490e      	ldr	r1, [pc, #56]	; (38a4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
    386c:	780a      	ldrb	r2, [r1, #0]
    386e:	2a02      	cmp	r2, #2
    3870:	d00b      	beq.n	388a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    3872:	780a      	ldrb	r2, [r1, #0]
    3874:	2a03      	cmp	r2, #3
    3876:	d008      	beq.n	388a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    3878:	f640 4137 	movw	r1, #3127	; 0xc37
    387c:	202d      	movs	r0, #45	; 0x2d
    387e:	f7fd f885 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3886:	f000 ba4f 	b.w	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>
    388a:	68a2      	ldr	r2, [r4, #8]
    388c:	7809      	ldrb	r1, [r1, #0]
    388e:	68d2      	ldr	r2, [r2, #12]
    3890:	f06f 0307 	mvn.w	r3, #7
    3894:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3898:	5851      	ldr	r1, [r2, r1]
    389a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    389e:	4708      	bx	r1
    38a0:	200000f0 	.word	0x200000f0
    38a4:	20001208 	.word	0x20001208
    38a8:	b510      	push	{r4, lr}
    38aa:	7b01      	ldrb	r1, [r0, #12]
    38ac:	b121      	cbz	r1, 38b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
    38ae:	4604      	mov	r4, r0
    38b0:	f7fe feaa 	bl	2608 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    38b4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    38b8:	4805      	ldr	r0, [pc, #20]	; (38d0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
    38ba:	7b80      	ldrb	r0, [r0, #14]
    38bc:	2800      	cmp	r0, #0
    38be:	d005      	beq.n	38cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
    38c0:	f003 ff2a 	bl	7718 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    38c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38c8:	f003 bd4c 	b.w	7364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    38cc:	bd10      	pop	{r4, pc}
    38ce:	0000      	.short	0x0000
    38d0:	20001208 	.word	0x20001208

000038d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    38d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38d8:	4d5c      	ldr	r5, [pc, #368]	; (3a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    38da:	4604      	mov	r4, r0
    38dc:	b086      	sub	sp, #24
    38de:	7828      	ldrb	r0, [r5, #0]
    38e0:	bbe8      	cbnz	r0, 395e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    38e2:	7820      	ldrb	r0, [r4, #0]
    38e4:	28ff      	cmp	r0, #255	; 0xff
    38e6:	d04b      	beq.n	3980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    38e8:	f04f 0800 	mov.w	r8, #0
    38ec:	f8a5 800c 	strh.w	r8, [r5, #12]
    38f0:	f8c5 8004 	str.w	r8, [r5, #4]
    38f4:	f885 8001 	strb.w	r8, [r5, #1]
    38f8:	f885 8002 	strb.w	r8, [r5, #2]
    38fc:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3900:	4b53      	ldr	r3, [pc, #332]	; (3a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3902:	4e54      	ldr	r6, [pc, #336]	; (3a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3906:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    390a:	68b0      	ldr	r0, [r6, #8]
    390c:	6840      	ldr	r0, [r0, #4]
    390e:	9003      	str	r0, [sp, #12]
    3910:	4668      	mov	r0, sp
    3912:	f004 f819 	bl	7948 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3916:	f004 f8ed 	bl	7af4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    391a:	f003 fefd 	bl	7718 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    391e:	f003 fd21 	bl	7364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3922:	484d      	ldr	r0, [pc, #308]	; (3a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3924:	f004 fa46 	bl	7db4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    3928:	484c      	ldr	r0, [pc, #304]	; (3a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    392a:	f004 fa4d 	bl	7dc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    392e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3932:	4607      	mov	r7, r0
    3934:	f00a ff92 	bl	e85c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3938:	4638      	mov	r0, r7
    393a:	f00a ff54 	bl	e7e6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    393e:	4601      	mov	r1, r0
    3940:	4620      	mov	r0, r4
    3942:	f00a ff1c 	bl	e77e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    3946:	f994 000e 	ldrsb.w	r0, [r4, #14]
    394a:	f004 f957 	bl	7bfc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    394e:	7921      	ldrb	r1, [r4, #4]
    3950:	2000      	movs	r0, #0
    3952:	f003 ff8d 	bl	7870 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3956:	2101      	movs	r1, #1
    3958:	60a8      	str	r0, [r5, #8]
    395a:	b1a8      	cbz	r0, 3988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    395c:	e000      	b.n	3960 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    395e:	e00f      	b.n	3980 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3960:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3964:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3966:	f009 fd2d 	bl	d3c4 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    396a:	4607      	mov	r7, r0
    396c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3970:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3972:	f009 fd2a 	bl	d3ca <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    3976:	b14f      	cbz	r7, 398c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3978:	f894 1020 	ldrb.w	r1, [r4, #32]
    397c:	b951      	cbnz	r1, 3994 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    397e:	e005      	b.n	398c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3980:	200c      	movs	r0, #12
    3982:	b006      	add	sp, #24
    3984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3988:	7029      	strb	r1, [r5, #0]
    398a:	e05c      	b.n	3a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    398c:	b120      	cbz	r0, 3998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    398e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3992:	b108      	cbz	r0, 3998 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3994:	2701      	movs	r7, #1
    3996:	e000      	b.n	399a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    3998:	2700      	movs	r7, #0
    399a:	7ea0      	ldrb	r0, [r4, #26]
    399c:	b920      	cbnz	r0, 39a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    399e:	7e20      	ldrb	r0, [r4, #24]
    39a0:	b910      	cbnz	r0, 39a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    39a2:	78a0      	ldrb	r0, [r4, #2]
    39a4:	0740      	lsls	r0, r0, #29
    39a6:	d523      	bpl.n	39f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    39a8:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    39ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    39b0:	4050      	eors	r0, r2
    39b2:	ea70 0101 	orns	r1, r0, r1
    39b6:	d006      	beq.n	39c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    39b8:	f00c fc0d 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    39bc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    39c0:	1a80      	subs	r0, r0, r2
    39c2:	4199      	sbcs	r1, r3
    39c4:	d200      	bcs.n	39c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    39c6:	b19f      	cbz	r7, 39f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    39c8:	f7fe fd00 	bl	23cc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    39cc:	4924      	ldr	r1, [pc, #144]	; (3a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    39ce:	fba0 2301 	umull	r2, r3, r0, r1
    39d2:	f104 0048 	add.w	r0, r4, #72	; 0x48
    39d6:	f00a fedd 	bl	e794 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    39da:	2101      	movs	r1, #1
    39dc:	4620      	mov	r0, r4
    39de:	f00a fe92 	bl	e706 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    39e2:	78a0      	ldrb	r0, [r4, #2]
    39e4:	0740      	lsls	r0, r0, #29
    39e6:	d503      	bpl.n	39f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    39e8:	2101      	movs	r1, #1
    39ea:	4620      	mov	r0, r4
    39ec:	f000 fac8 	bl	3f80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e8>
    39f0:	6870      	ldr	r0, [r6, #4]
    39f2:	1cc0      	adds	r0, r0, #3
    39f4:	f009 fe02 	bl	d5fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    39f8:	73a8      	strb	r0, [r5, #14]
    39fa:	78a0      	ldrb	r0, [r4, #2]
    39fc:	07c0      	lsls	r0, r0, #31
    39fe:	d022      	beq.n	3a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3a00:	f8cd 8010 	str.w	r8, [sp, #16]
    3a04:	20ff      	movs	r0, #255	; 0xff
    3a06:	f8cd 8014 	str.w	r8, [sp, #20]
    3a0a:	73e8      	strb	r0, [r5, #15]
    3a0c:	69e6      	ldr	r6, [r4, #28]
    3a0e:	f106 070a 	add.w	r7, r6, #10
    3a12:	e013      	b.n	3a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3a14:	9c04      	ldr	r4, [sp, #16]
    3a16:	42b4      	cmp	r4, r6
    3a18:	d010      	beq.n	3a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3a1a:	7a72      	ldrb	r2, [r6, #9]
    3a1c:	7a60      	ldrb	r0, [r4, #9]
    3a1e:	463b      	mov	r3, r7
    3a20:	f104 010a 	add.w	r1, r4, #10
    3a24:	f009 fd5f 	bl	d4e6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3a28:	b140      	cbz	r0, 3a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3a2a:	78a0      	ldrb	r0, [r4, #2]
    3a2c:	73e8      	strb	r0, [r5, #15]
    3a2e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    3a32:	6128      	str	r0, [r5, #16]
    3a34:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    3a38:	82a8      	strh	r0, [r5, #20]
    3a3a:	e004      	b.n	3a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3a3c:	a804      	add	r0, sp, #16
    3a3e:	f7fd fb25 	bl	108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3a42:	2800      	cmp	r0, #0
    3a44:	d0e6      	beq.n	3a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    3a46:	2000      	movs	r0, #0
    3a48:	e79b      	b.n	3982 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3a4a:	0000      	.short	0x0000
    3a4c:	20001208 	.word	0x20001208
    3a50:	00004090 	.word	0x00004090
    3a54:	200000f0 	.word	0x200000f0
    3a58:	8e89bed6 	.word	0x8e89bed6
    3a5c:	00555555 	.word	0x00555555
    3a60:	000f4240 	.word	0x000f4240
    3a64:	b510      	push	{r4, lr}
    3a66:	4604      	mov	r4, r0
    3a68:	f7ff ff34 	bl	38d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3a6c:	2800      	cmp	r0, #0
    3a6e:	d108      	bne.n	3a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    3a70:	4804      	ldr	r0, [pc, #16]	; (3a84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    3a72:	7800      	ldrb	r0, [r0, #0]
    3a74:	2801      	cmp	r0, #1
    3a76:	d003      	beq.n	3a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    3a78:	2100      	movs	r1, #0
    3a7a:	4620      	mov	r0, r4
    3a7c:	f7ff fda4 	bl	35c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3a80:	2000      	movs	r0, #0
    3a82:	bd10      	pop	{r4, pc}
    3a84:	20001208 	.word	0x20001208
    3a88:	480a      	ldr	r0, [pc, #40]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a8a:	b510      	push	{r4, lr}
    3a8c:	490a      	ldr	r1, [pc, #40]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a8e:	6804      	ldr	r4, [r0, #0]
    3a90:	7808      	ldrb	r0, [r1, #0]
    3a92:	2800      	cmp	r0, #0
    3a94:	d00d      	beq.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3a96:	7808      	ldrb	r0, [r1, #0]
    3a98:	2802      	cmp	r0, #2
    3a9a:	d002      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a9c:	7808      	ldrb	r0, [r1, #0]
    3a9e:	2803      	cmp	r0, #3
    3aa0:	d102      	bne.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3aa2:	4620      	mov	r0, r4
    3aa4:	f7ff ff00 	bl	38a8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    3aa8:	4620      	mov	r0, r4
    3aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3aae:	f000 b93b 	b.w	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>
    3ab2:	bd10      	pop	{r4, pc}
    3ab4:	200000f0 	.word	0x200000f0
    3ab8:	20001208 	.word	0x20001208
    3abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ac0:	4604      	mov	r4, r0
    3ac2:	4829      	ldr	r0, [pc, #164]	; (3b68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd0>)
    3ac4:	460d      	mov	r5, r1
    3ac6:	6840      	ldr	r0, [r0, #4]
    3ac8:	f004 f8ba 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3acc:	4e27      	ldr	r6, [pc, #156]	; (3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>)
    3ace:	2004      	movs	r0, #4
    3ad0:	7030      	strb	r0, [r6, #0]
    3ad2:	b355      	cbz	r5, 3b2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x92>
    3ad4:	8860      	ldrh	r0, [r4, #2]
    3ad6:	2810      	cmp	r0, #16
    3ad8:	d023      	beq.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3ada:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3ade:	4680      	mov	r8, r0
    3ae0:	68b5      	ldr	r5, [r6, #8]
    3ae2:	f00a fe74 	bl	e7ce <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3ae6:	4607      	mov	r7, r0
    3ae8:	4640      	mov	r0, r8
    3aea:	f00a fe99 	bl	e820 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3aee:	1a38      	subs	r0, r7, r0
    3af0:	1e40      	subs	r0, r0, #1
    3af2:	b2c0      	uxtb	r0, r0
    3af4:	8861      	ldrh	r1, [r4, #2]
    3af6:	2228      	movs	r2, #40	; 0x28
    3af8:	f000 fb06 	bl	4108 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    3afc:	4405      	add	r5, r0
    3afe:	78a0      	ldrb	r0, [r4, #2]
    3b00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3b04:	b130      	cbz	r0, 3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3b06:	6870      	ldr	r0, [r6, #4]
    3b08:	4405      	add	r5, r0
    3b0a:	f00a fee2 	bl	e8d2 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    3b0e:	4428      	add	r0, r5
    3b10:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3b14:	7922      	ldrb	r2, [r4, #4]
    3b16:	4629      	mov	r1, r5
    3b18:	2000      	movs	r0, #0
    3b1a:	f004 f8a7 	bl	7c6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3b1e:	b920      	cbnz	r0, 3b2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x92>
    3b20:	e00c      	b.n	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
    3b22:	7921      	ldrb	r1, [r4, #4]
    3b24:	2000      	movs	r0, #0
    3b26:	f003 fe69 	bl	77fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3b2a:	8860      	ldrh	r0, [r4, #2]
    3b2c:	2813      	cmp	r0, #19
    3b2e:	d011      	beq.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b30:	dc07      	bgt.n	3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b32:	2810      	cmp	r0, #16
    3b34:	d015      	beq.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    3b36:	2812      	cmp	r0, #18
    3b38:	d107      	bne.n	3b4a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb2>
    3b3a:	e00b      	b.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b3c:	f640 51a8 	movw	r1, #3496	; 0xda8
    3b40:	e005      	b.n	3b4e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb6>
    3b42:	2815      	cmp	r0, #21
    3b44:	d006      	beq.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b46:	281d      	cmp	r0, #29
    3b48:	d004      	beq.n	3b54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbc>
    3b4a:	f640 51bc 	movw	r1, #3516	; 0xdbc
    3b4e:	202d      	movs	r0, #45	; 0x2d
    3b50:	f7fc ff1c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b54:	7922      	ldrb	r2, [r4, #4]
    3b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b5a:	2101      	movs	r1, #1
    3b5c:	2000      	movs	r0, #0
    3b5e:	f004 b8f7 	b.w	7d50 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b66:	0000      	.short	0x0000
    3b68:	200000f0 	.word	0x200000f0
    3b6c:	20001208 	.word	0x20001208
    3b70:	b538      	push	{r3, r4, r5, lr}
    3b72:	4604      	mov	r4, r0
    3b74:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    3b78:	460b      	mov	r3, r1
    3b7a:	f88d 0000 	strb.w	r0, [sp]
    3b7e:	9800      	ldr	r0, [sp, #0]
    3b80:	9000      	str	r0, [sp, #0]
    3b82:	f89d 0000 	ldrb.w	r0, [sp]
    3b86:	2800      	cmp	r0, #0
    3b88:	d13a      	bne.n	3c00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x168>
    3b8a:	7820      	ldrb	r0, [r4, #0]
    3b8c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3b90:	2bff      	cmp	r3, #255	; 0xff
    3b92:	d010      	beq.n	3bb6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11e>
    3b94:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3b98:	1e51      	subs	r1, r2, #1
    3b9a:	4618      	mov	r0, r3
    3b9c:	f7fe fbfc 	bl	2398 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3ba0:	b130      	cbz	r0, 3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>
    3ba2:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3ba6:	f040 0002 	orr.w	r0, r0, #2
    3baa:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3bae:	e011      	b.n	3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>
    3bb0:	f241 0118 	movw	r1, #4120	; 0x1018
    3bb4:	e021      	b.n	3bfa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x162>
    3bb6:	4813      	ldr	r0, [pc, #76]	; (3c04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16c>)
    3bb8:	6840      	ldr	r0, [r0, #4]
    3bba:	7801      	ldrb	r1, [r0, #0]
    3bbc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3bc0:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3bc4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3bc8:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3bcc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3bd0:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3bd4:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3bd8:	287f      	cmp	r0, #127	; 0x7f
    3bda:	d00c      	beq.n	3bf6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x15e>
    3bdc:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3be0:	207f      	movs	r0, #127	; 0x7f
    3be2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3be6:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3bee:	2202      	movs	r2, #2
    3bf0:	4905      	ldr	r1, [pc, #20]	; (3c08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x170>)
    3bf2:	f00a b8f7 	b.w	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3bf6:	f640 616c 	movw	r1, #3692	; 0xe6c
    3bfa:	202d      	movs	r0, #45	; 0x2d
    3bfc:	f7fc fec6 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c00:	bd38      	pop	{r3, r4, r5, pc}
    3c02:	0000      	.short	0x0000
    3c04:	200000f0 	.word	0x200000f0
    3c08:	0000e6ef 	.word	0x0000e6ef
    3c0c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3c10:	4616      	mov	r6, r2
    3c12:	4604      	mov	r4, r0
    3c14:	2903      	cmp	r1, #3
    3c16:	d004      	beq.n	3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c18:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3c1c:	b108      	cbz	r0, 3c22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18a>
    3c1e:	2001      	movs	r0, #1
    3c20:	e000      	b.n	3c24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18c>
    3c22:	2000      	movs	r0, #0
    3c24:	2500      	movs	r5, #0
    3c26:	2903      	cmp	r1, #3
    3c28:	d003      	beq.n	3c32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19a>
    3c2a:	2701      	movs	r7, #1
    3c2c:	2905      	cmp	r1, #5
    3c2e:	d005      	beq.n	3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    3c30:	e008      	b.n	3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>
    3c32:	78a1      	ldrb	r1, [r4, #2]
    3c34:	2702      	movs	r7, #2
    3c36:	f3c1 0140 	ubfx	r1, r1, #1, #1
    3c3a:	e001      	b.n	3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>
    3c3c:	78a1      	ldrb	r1, [r4, #2]
    3c3e:	07c9      	lsls	r1, r1, #31
    3c40:	2900      	cmp	r1, #0
    3c42:	d06b      	beq.n	3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
    3c44:	2800      	cmp	r0, #0
    3c46:	d169      	bne.n	3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
    3c48:	4835      	ldr	r0, [pc, #212]	; (3d20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x288>)
    3c4a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3d24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28c>
    3c4e:	7b80      	ldrb	r0, [r0, #14]
    3c50:	b180      	cbz	r0, 3c74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1dc>
    3c52:	f009 fcd6 	bl	d602 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3c56:	7030      	strb	r0, [r6, #0]
    3c58:	28ff      	cmp	r0, #255	; 0xff
    3c5a:	d014      	beq.n	3c86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ee>
    3c5c:	b2c0      	uxtb	r0, r0
    3c5e:	466a      	mov	r2, sp
    3c60:	a902      	add	r1, sp, #8
    3c62:	f7fe fb99 	bl	2398 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3c66:	b148      	cbz	r0, 3c7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e4>
    3c68:	4669      	mov	r1, sp
    3c6a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3c6e:	f00a fbe8 	bl	e442 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3c72:	4605      	mov	r5, r0
    3c74:	7830      	ldrb	r0, [r6, #0]
    3c76:	28ff      	cmp	r0, #255	; 0xff
    3c78:	d005      	beq.n	3c86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ee>
    3c7a:	e00d      	b.n	3c98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x200>
    3c7c:	f640 719b 	movw	r1, #3995	; 0xf9b
    3c80:	202d      	movs	r0, #45	; 0x2d
    3c82:	f7fc fe83 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c86:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3c8a:	f811 0b03 	ldrb.w	r0, [r1], #3
    3c8e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3c92:	f00a fbd6 	bl	e442 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3c96:	4605      	mov	r5, r0
    3c98:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3c9c:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3ca0:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3ca4:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ca8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3cac:	f009 fc1b 	bl	d4e6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3cb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3cb4:	4680      	mov	r8, r0
    3cb6:	f811 0b03 	ldrb.w	r0, [r1], #3
    3cba:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3cbe:	f009 fcaa 	bl	d616 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3cc2:	4681      	mov	r9, r0
    3cc4:	f7fe fb88 	bl	23d8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3cc8:	b138      	cbz	r0, 3cda <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x242>
    3cca:	4648      	mov	r0, r9
    3ccc:	f7fe fb44 	bl	2358 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3cd0:	b118      	cbz	r0, 3cda <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x242>
    3cd2:	2110      	movs	r1, #16
    3cd4:	f009 fe4a 	bl	d96c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3cd8:	b138      	cbz	r0, 3cea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x252>
    3cda:	2100      	movs	r1, #0
    3cdc:	7830      	ldrb	r0, [r6, #0]
    3cde:	28ff      	cmp	r0, #255	; 0xff
    3ce0:	d00c      	beq.n	3cfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x264>
    3ce2:	f1b8 0f00 	cmp.w	r8, #0
    3ce6:	d105      	bne.n	3cf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25c>
    3ce8:	e001      	b.n	3cee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x256>
    3cea:	2101      	movs	r1, #1
    3cec:	e7f6      	b.n	3cdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x244>
    3cee:	7e62      	ldrb	r2, [r4, #25]
    3cf0:	4282      	cmp	r2, r0
    3cf2:	d101      	bne.n	3cf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x260>
    3cf4:	2001      	movs	r0, #1
    3cf6:	e003      	b.n	3d00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x268>
    3cf8:	2000      	movs	r0, #0
    3cfa:	e001      	b.n	3d00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x268>
    3cfc:	ea28 0001 	bic.w	r0, r8, r1
    3d00:	78a2      	ldrb	r2, [r4, #2]
    3d02:	0752      	lsls	r2, r2, #29
    3d04:	d501      	bpl.n	3d0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x272>
    3d06:	b930      	cbnz	r0, 3d16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27e>
    3d08:	e008      	b.n	3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
    3d0a:	b939      	cbnz	r1, 3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
    3d0c:	b91d      	cbnz	r5, 3d16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27e>
    3d0e:	7be0      	ldrb	r0, [r4, #15]
    3d10:	b108      	cbz	r0, 3d16 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27e>
    3d12:	42b8      	cmp	r0, r7
    3d14:	d102      	bne.n	3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>
    3d16:	2001      	movs	r0, #1
    3d18:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3d1c:	2000      	movs	r0, #0
    3d1e:	e7fb      	b.n	3d18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x280>
    3d20:	20001208 	.word	0x20001208
    3d24:	200000f0 	.word	0x200000f0
    3d28:	b570      	push	{r4, r5, r6, lr}
    3d2a:	4604      	mov	r4, r0
    3d2c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3d2e:	4d10      	ldr	r5, [pc, #64]	; (3d70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2d8>)
    3d30:	1c40      	adds	r0, r0, #1
    3d32:	8620      	strh	r0, [r4, #48]	; 0x30
    3d34:	7ba8      	ldrb	r0, [r5, #14]
    3d36:	2600      	movs	r6, #0
    3d38:	b120      	cbz	r0, 3d44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ac>
    3d3a:	f003 fced 	bl	7718 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d3e:	f003 fb11 	bl	7364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d42:	73ae      	strb	r6, [r5, #14]
    3d44:	702e      	strb	r6, [r5, #0]
    3d46:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3d4a:	b108      	cbz	r0, 3d50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2b8>
    3d4c:	2101      	movs	r1, #1
    3d4e:	e00a      	b.n	3d66 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ce>
    3d50:	7b60      	ldrb	r0, [r4, #13]
    3d52:	b138      	cbz	r0, 3d64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2cc>
    3d54:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    3d56:	4288      	cmp	r0, r1
    3d58:	d804      	bhi.n	3d64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2cc>
    3d5a:	2101      	movs	r1, #1
    3d5c:	4620      	mov	r0, r4
    3d5e:	f00a fddc 	bl	e91a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3d62:	bd70      	pop	{r4, r5, r6, pc}
    3d64:	2100      	movs	r1, #0
    3d66:	4620      	mov	r0, r4
    3d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3d6c:	f00a bdd5 	b.w	e91a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3d70:	20001208 	.word	0x20001208
    3d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d78:	4604      	mov	r4, r0
    3d7a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    3d7e:	8808      	ldrh	r0, [r1, #0]
    3d80:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    3d84:	20ff      	movs	r0, #255	; 0xff
    3d86:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    3d8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3d8e:	4616      	mov	r6, r2
    3d90:	460d      	mov	r5, r1
    3d92:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    3d96:	2b00      	cmp	r3, #0
    3d98:	d14b      	bne.n	3e32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39a>
    3d9a:	6928      	ldr	r0, [r5, #16]
    3d9c:	f009 fc74 	bl	d688 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3da0:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    3da4:	8b28      	ldrh	r0, [r5, #24]
    3da6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    3daa:	8b68      	ldrh	r0, [r5, #26]
    3dac:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3db0:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    3db4:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    3db8:	7e20      	ldrb	r0, [r4, #24]
    3dba:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3dbe:	460f      	mov	r7, r1
    3dc0:	2500      	movs	r5, #0
    3dc2:	b120      	cbz	r0, 3dce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x336>
    3dc4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3dc8:	f00a fb67 	bl	e49a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3dcc:	b940      	cbnz	r0, 3de0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x348>
    3dce:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    3dd2:	b170      	cbz	r0, 3df2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35a>
    3dd4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3dd8:	4639      	mov	r1, r7
    3dda:	f00a fb55 	bl	e488 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3dde:	b140      	cbz	r0, 3df2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35a>
    3de0:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    3de4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    3de8:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    3dec:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    3df0:	e003      	b.n	3dfa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x362>
    3df2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    3df6:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    3dfa:	4815      	ldr	r0, [pc, #84]	; (3e50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3b8>)
    3dfc:	2eff      	cmp	r6, #255	; 0xff
    3dfe:	6840      	ldr	r0, [r0, #4]
    3e00:	7801      	ldrb	r1, [r0, #0]
    3e02:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3e06:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    3e0a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    3e0e:	d017      	beq.n	3e40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a8>
    3e10:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    3e14:	8880      	ldrh	r0, [r0, #4]
    3e16:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    3e1a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    3e1e:	1e51      	subs	r1, r2, #1
    3e20:	4630      	mov	r0, r6
    3e22:	f7fe fab9 	bl	2398 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3e26:	b130      	cbz	r0, 3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
    3e28:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    3e2c:	f040 0002 	orr.w	r0, r0, #2
    3e30:	7020      	strb	r0, [r4, #0]
    3e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e36:	f640 418b 	movw	r1, #3211	; 0xc8b
    3e3a:	202d      	movs	r0, #45	; 0x2d
    3e3c:	f7fc fda6 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e40:	f844 1f7a 	str.w	r1, [r4, #122]!
    3e44:	8880      	ldrh	r0, [r0, #4]
    3e46:	80a0      	strh	r0, [r4, #4]
    3e48:	60e5      	str	r5, [r4, #12]
    3e4a:	8225      	strh	r5, [r4, #16]
    3e4c:	e7f1      	b.n	3e32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39a>
    3e4e:	0000      	.short	0x0000
    3e50:	200000f0 	.word	0x200000f0
    3e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e56:	4604      	mov	r4, r0
    3e58:	20ff      	movs	r0, #255	; 0xff
    3e5a:	f88d 0000 	strb.w	r0, [sp]
    3e5e:	2601      	movs	r6, #1
    3e60:	466a      	mov	r2, sp
    3e62:	2105      	movs	r1, #5
    3e64:	4620      	mov	r0, r4
    3e66:	f7ff fed1 	bl	3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
    3e6a:	b160      	cbz	r0, 3e86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3ee>
    3e6c:	4d28      	ldr	r5, [pc, #160]	; (3f10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x478>)
    3e6e:	4f27      	ldr	r7, [pc, #156]	; (3f0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x474>)
    3e70:	6869      	ldr	r1, [r5, #4]
    3e72:	7bfa      	ldrb	r2, [r7, #15]
    3e74:	f107 0310 	add.w	r3, r7, #16
    3e78:	f811 0b03 	ldrb.w	r0, [r1], #3
    3e7c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3e80:	f009 fb31 	bl	d4e6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3e84:	b110      	cbz	r0, 3e8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f4>
    3e86:	2600      	movs	r6, #0
    3e88:	4630      	mov	r0, r6
    3e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e8c:	686a      	ldr	r2, [r5, #4]
    3e8e:	69e0      	ldr	r0, [r4, #28]
    3e90:	7812      	ldrb	r2, [r2, #0]
    3e92:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    3e96:	f3c2 1240 	ubfx	r2, r2, #5, #1
    3e9a:	4011      	ands	r1, r2
    3e9c:	7001      	strb	r1, [r0, #0]
    3e9e:	2201      	movs	r2, #1
    3ea0:	4620      	mov	r0, r4
    3ea2:	69e1      	ldr	r1, [r4, #28]
    3ea4:	f000 f89a 	bl	3fdc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x544>
    3ea8:	2300      	movs	r3, #0
    3eaa:	f89d 2000 	ldrb.w	r2, [sp]
    3eae:	4620      	mov	r0, r4
    3eb0:	69e1      	ldr	r1, [r4, #28]
    3eb2:	f7ff ff5f 	bl	3d74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2dc>
    3eb6:	2202      	movs	r2, #2
    3eb8:	4916      	ldr	r1, [pc, #88]	; (3f14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x47c>)
    3eba:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3ebe:	f009 ff91 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3ec2:	69e0      	ldr	r0, [r4, #28]
    3ec4:	2202      	movs	r2, #2
    3ec6:	8801      	ldrh	r1, [r0, #0]
    3ec8:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    3ecc:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    3ed0:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    3ed4:	4910      	ldr	r1, [pc, #64]	; (3f18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x480>)
    3ed6:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    3eda:	f009 ff83 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3ede:	2100      	movs	r1, #0
    3ee0:	69e0      	ldr	r0, [r4, #28]
    3ee2:	7039      	strb	r1, [r7, #0]
    3ee4:	460a      	mov	r2, r1
    3ee6:	4621      	mov	r1, r4
    3ee8:	f000 fa7a 	bl	43e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    3eec:	6868      	ldr	r0, [r5, #4]
    3eee:	69e1      	ldr	r1, [r4, #28]
    3ef0:	f8d0 2003 	ldr.w	r2, [r0, #3]
    3ef4:	f841 2f03 	str.w	r2, [r1, #3]!
    3ef8:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    3efc:	808a      	strh	r2, [r1, #4]
    3efe:	7800      	ldrb	r0, [r0, #0]
    3f00:	69e1      	ldr	r1, [r4, #28]
    3f02:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3f06:	7088      	strb	r0, [r1, #2]
    3f08:	e7be      	b.n	3e88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3f0>
    3f0a:	0000      	.short	0x0000
    3f0c:	20001208 	.word	0x20001208
    3f10:	200000f0 	.word	0x200000f0
    3f14:	0000e69f 	.word	0x0000e69f
    3f18:	0000e68f 	.word	0x0000e68f
    3f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f1e:	4604      	mov	r4, r0
    3f20:	20ff      	movs	r0, #255	; 0xff
    3f22:	f88d 0000 	strb.w	r0, [sp]
    3f26:	2501      	movs	r5, #1
    3f28:	466a      	mov	r2, sp
    3f2a:	2103      	movs	r1, #3
    3f2c:	4620      	mov	r0, r4
    3f2e:	f7ff fe6d 	bl	3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
    3f32:	b1e8      	cbz	r0, 3f70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d8>
    3f34:	7b20      	ldrb	r0, [r4, #12]
    3f36:	b120      	cbz	r0, 3f42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4aa>
    3f38:	f89d 1000 	ldrb.w	r1, [sp]
    3f3c:	4620      	mov	r0, r4
    3f3e:	f7ff fe17 	bl	3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>
    3f42:	4e0d      	ldr	r6, [pc, #52]	; (3f78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e0>)
    3f44:	2100      	movs	r1, #0
    3f46:	6870      	ldr	r0, [r6, #4]
    3f48:	8001      	strh	r1, [r0, #0]
    3f4a:	2104      	movs	r1, #4
    3f4c:	f009 fdc8 	bl	dae0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3f50:	4620      	mov	r0, r4
    3f52:	f000 f88b 	bl	406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>
    3f56:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    3f5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3f5c:	6870      	ldr	r0, [r6, #4]
    3f5e:	f009 fdf6 	bl	db4e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    3f62:	4906      	ldr	r1, [pc, #24]	; (3f7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e4>)
    3f64:	2005      	movs	r0, #5
    3f66:	7008      	strb	r0, [r1, #0]
    3f68:	6870      	ldr	r0, [r6, #4]
    3f6a:	f003 fe69 	bl	7c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3f6e:	e000      	b.n	3f72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4da>
    3f70:	2500      	movs	r5, #0
    3f72:	4628      	mov	r0, r5
    3f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f76:	0000      	.short	0x0000
    3f78:	200000f0 	.word	0x200000f0
    3f7c:	20001208 	.word	0x20001208
    3f80:	b570      	push	{r4, r5, r6, lr}
    3f82:	4604      	mov	r4, r0
    3f84:	460e      	mov	r6, r1
    3f86:	7e40      	ldrb	r0, [r0, #25]
    3f88:	f7fe f9e6 	bl	2358 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3f8c:	0005      	movs	r5, r0
    3f8e:	d019      	beq.n	3fc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52c>
    3f90:	2110      	movs	r1, #16
    3f92:	f009 fceb 	bl	d96c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3f96:	2800      	cmp	r0, #0
    3f98:	d114      	bne.n	3fc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52c>
    3f9a:	2001      	movs	r0, #1
    3f9c:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3fa0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3fa4:	4632      	mov	r2, r6
    3fa6:	460c      	mov	r4, r1
    3fa8:	4628      	mov	r0, r5
    3faa:	f009 facc 	bl	d546 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3fae:	4621      	mov	r1, r4
    3fb0:	4c05      	ldr	r4, [pc, #20]	; (3fc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x530>)
    3fb2:	6860      	ldr	r0, [r4, #4]
    3fb4:	f009 fdaf 	bl	db16 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3fb8:	6860      	ldr	r0, [r4, #4]
    3fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fbe:	2101      	movs	r1, #1
    3fc0:	f009 bdaf 	b.w	db22 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3fc4:	bd70      	pop	{r4, r5, r6, pc}
    3fc6:	0000      	.short	0x0000
    3fc8:	200000f0 	.word	0x200000f0
    3fcc:	4802      	ldr	r0, [pc, #8]	; (3fd8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x540>)
    3fce:	2101      	movs	r1, #1
    3fd0:	6800      	ldr	r0, [r0, #0]
    3fd2:	f7ff baf9 	b.w	35c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3fd6:	0000      	.short	0x0000
    3fd8:	200000f0 	.word	0x200000f0
    3fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fe0:	4e21      	ldr	r6, [pc, #132]	; (4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>)
    3fe2:	4680      	mov	r8, r0
    3fe4:	460c      	mov	r4, r1
    3fe6:	6870      	ldr	r0, [r6, #4]
    3fe8:	4615      	mov	r5, r2
    3fea:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    3fee:	6161      	str	r1, [r4, #20]
    3ff0:	6841      	ldr	r1, [r0, #4]
    3ff2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3ff6:	61e1      	str	r1, [r4, #28]
    3ff8:	8940      	ldrh	r0, [r0, #10]
    3ffa:	f009 fb41 	bl	d680 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    3ffe:	4607      	mov	r7, r0
    4000:	6120      	str	r0, [r4, #16]
    4002:	6870      	ldr	r0, [r6, #4]
    4004:	4639      	mov	r1, r7
    4006:	7d80      	ldrb	r0, [r0, #22]
    4008:	f009 fca7 	bl	d95a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    400c:	84a0      	strh	r0, [r4, #36]	; 0x24
    400e:	6870      	ldr	r0, [r6, #4]
    4010:	4639      	mov	r1, r7
    4012:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    4016:	f009 fc9c 	bl	d952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    401a:	6220      	str	r0, [r4, #32]
    401c:	6870      	ldr	r0, [r6, #4]
    401e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4022:	8321      	strh	r1, [r4, #24]
    4024:	8841      	ldrh	r1, [r0, #2]
    4026:	8361      	strh	r1, [r4, #26]
    4028:	6841      	ldr	r1, [r0, #4]
    402a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    402e:	7a01      	ldrb	r1, [r0, #8]
    4030:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4034:	7a41      	ldrb	r1, [r0, #9]
    4036:	f001 011f 	and.w	r1, r1, #31
    403a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    403e:	7a40      	ldrb	r0, [r0, #9]
    4040:	0940      	lsrs	r0, r0, #5
    4042:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    4046:	f104 0062 	add.w	r0, r4, #98	; 0x62
    404a:	7205      	strb	r5, [r0, #8]
    404c:	7245      	strb	r5, [r0, #9]
    404e:	21ff      	movs	r1, #255	; 0xff
    4050:	7281      	strb	r1, [r0, #10]
    4052:	2100      	movs	r1, #0
    4054:	3836      	subs	r0, #54	; 0x36
    4056:	f009 ff38 	bl	deca <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    405a:	f998 100e 	ldrsb.w	r1, [r8, #14]
    405e:	4620      	mov	r0, r4
    4060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4064:	f009 bbe0 	b.w	d828 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    4068:	200000f0 	.word	0x200000f0
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	4d07      	ldr	r5, [pc, #28]	; (408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>)
    4070:	4604      	mov	r4, r0
    4072:	f100 0151 	add.w	r1, r0, #81	; 0x51
    4076:	6868      	ldr	r0, [r5, #4]
    4078:	f009 fd5a 	bl	db30 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    407c:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    4080:	6868      	ldr	r0, [r5, #4]
    4082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4086:	f009 bd59 	b.w	db3c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    408a:	0000      	.short	0x0000
    408c:	200000f0 	.word	0x200000f0
    4090:	00003855 	.word	0x00003855
    4094:	000036dd 	.word	0x000036dd
    4098:	000037d1 	.word	0x000037d1
    409c:	00000000 	.word	0x00000000
    40a0:	000037a9 	.word	0x000037a9
    40a4:	00003801 	.word	0x00003801
    40a8:	0000e683 	.word	0x0000e683
    40ac:	0000e689 	.word	0x0000e689
    40b0:	00003a65 	.word	0x00003a65
    40b4:	00003a89 	.word	0x00003a89
    40b8:	00003fcd 	.word	0x00003fcd
    40bc:	000040ac 	.word	0x000040ac
    40c0:	000040a4 	.word	0x000040a4
    40c4:	000040a0 	.word	0x000040a0

000040c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    40c8:	b510      	push	{r4, lr}
    40ca:	1e42      	subs	r2, r0, #1
    40cc:	2a02      	cmp	r2, #2
    40ce:	d901      	bls.n	40d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    40d0:	21ca      	movs	r1, #202	; 0xca
    40d2:	e009      	b.n	40e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    40d4:	1e40      	subs	r0, r0, #1
    40d6:	2910      	cmp	r1, #16
    40d8:	d009      	beq.n	40ee <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    40da:	2912      	cmp	r1, #18
    40dc:	d00c      	beq.n	40f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    40de:	2913      	cmp	r1, #19
    40e0:	d00a      	beq.n	40f8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    40e2:	2915      	cmp	r1, #21
    40e4:	d005      	beq.n	40f2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    40e6:	21d8      	movs	r1, #216	; 0xd8
    40e8:	202f      	movs	r0, #47	; 0x2f
    40ea:	f7fc fc4f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ee:	4905      	ldr	r1, [pc, #20]	; (4104 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    40f0:	e004      	b.n	40fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    40f2:	4904      	ldr	r1, [pc, #16]	; (4104 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    40f4:	1d89      	adds	r1, r1, #6
    40f6:	e001      	b.n	40fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    40f8:	4902      	ldr	r1, [pc, #8]	; (4104 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    40fa:	1f89      	subs	r1, r1, #6
    40fc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4100:	bd10      	pop	{r4, pc}
    4102:	0000      	.short	0x0000
    4104:	0000e8ea 	.word	0x0000e8ea

00004108 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4108:	1e42      	subs	r2, r0, #1
    410a:	b510      	push	{r4, lr}
    410c:	b2d2      	uxtb	r2, r2
    410e:	2a01      	cmp	r2, #1
    4110:	d903      	bls.n	411a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4112:	291d      	cmp	r1, #29
    4114:	d001      	beq.n	411a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4116:	21ee      	movs	r1, #238	; 0xee
    4118:	e00d      	b.n	4136 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    411a:	2913      	cmp	r1, #19
    411c:	d013      	beq.n	4146 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    411e:	dc04      	bgt.n	412a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4120:	2910      	cmp	r1, #16
    4122:	d00b      	beq.n	413c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4124:	2912      	cmp	r1, #18
    4126:	d104      	bne.n	4132 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4128:	e00d      	b.n	4146 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    412a:	2915      	cmp	r1, #21
    412c:	d008      	beq.n	4140 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    412e:	291d      	cmp	r1, #29
    4130:	d00e      	beq.n	4150 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4132:	f44f 7181 	mov.w	r1, #258	; 0x102
    4136:	202f      	movs	r0, #47	; 0x2f
    4138:	f7fc fc28 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    413c:	4807      	ldr	r0, [pc, #28]	; (415c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    413e:	e004      	b.n	414a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4140:	4806      	ldr	r0, [pc, #24]	; (415c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4142:	3008      	adds	r0, #8
    4144:	e001      	b.n	414a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4146:	4805      	ldr	r0, [pc, #20]	; (415c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4148:	1d00      	adds	r0, r0, #4
    414a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    414e:	bd10      	pop	{r4, pc}
    4150:	f240 315a 	movw	r1, #858	; 0x35a
    4154:	fb10 f001 	smulbb	r0, r0, r1
    4158:	bd10      	pop	{r4, pc}
    415a:	0000      	.short	0x0000
    415c:	0000e8d8 	.word	0x0000e8d8

00004160 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4164:	4604      	mov	r4, r0
    4166:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    416a:	4616      	mov	r6, r2
    416c:	460f      	mov	r7, r1
    416e:	2800      	cmp	r0, #0
    4170:	d15e      	bne.n	4230 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4172:	4621      	mov	r1, r4
    4174:	484d      	ldr	r0, [pc, #308]	; (42ac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    4176:	f006 fb89 	bl	a88c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    417a:	4605      	mov	r5, r0
    417c:	2820      	cmp	r0, #32
    417e:	d057      	beq.n	4230 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4180:	2250      	movs	r2, #80	; 0x50
    4182:	2100      	movs	r1, #0
    4184:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    4188:	f00c fa31 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    418c:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    4190:	2501      	movs	r5, #1
    4192:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    4196:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    419a:	b137      	cbz	r7, 41aa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    419c:	f7fe fdf0 	bl	2d80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    41a0:	f000 0007 	and.w	r0, r0, #7
    41a4:	1c40      	adds	r0, r0, #1
    41a6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    41aa:	4620      	mov	r0, r4
    41ac:	f00a fd62 	bl	ec74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    41b0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    41b4:	2002      	movs	r0, #2
    41b6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    41ba:	46a8      	mov	r8, r5
    41bc:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    41c0:	2500      	movs	r5, #0
    41c2:	f804 5fe8 	strb.w	r5, [r4, #232]!
    41c6:	f007 fcc7 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    41ca:	4607      	mov	r7, r0
    41cc:	f00b fffa 	bl	101c4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    41d0:	8921      	ldrh	r1, [r4, #8]
    41d2:	3ce8      	subs	r4, #232	; 0xe8
    41d4:	4288      	cmp	r0, r1
    41d6:	d800      	bhi.n	41da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    41d8:	4608      	mov	r0, r1
    41da:	4438      	add	r0, r7
    41dc:	30ce      	adds	r0, #206	; 0xce
    41de:	b287      	uxth	r7, r0
    41e0:	4620      	mov	r0, r4
    41e2:	f00a fa0d 	bl	e600 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    41e6:	b330      	cbz	r0, 4236 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    41e8:	f00b ff0e 	bl	10008 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    41ec:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    41f0:	b281      	uxth	r1, r0
    41f2:	4630      	mov	r0, r6
    41f4:	f007 fdd0 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    41f8:	4430      	add	r0, r6
    41fa:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    41fe:	3490      	adds	r4, #144	; 0x90
    4200:	f00b ffe9 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4204:	19c0      	adds	r0, r0, r7
    4206:	4169      	adcs	r1, r5
    4208:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    420c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4210:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4214:	2001      	movs	r0, #1
    4216:	f00a fb58 	bl	e8ca <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    421a:	f200 1015 	addw	r0, r0, #277	; 0x115
    421e:	1a30      	subs	r0, r6, r0
    4220:	6460      	str	r0, [r4, #68]	; 0x44
    4222:	f04f 30ff 	mov.w	r0, #4294967295
    4226:	0841      	lsrs	r1, r0, #1
    4228:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    422c:	3c90      	subs	r4, #144	; 0x90
    422e:	e025      	b.n	427c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4230:	200c      	movs	r0, #12
    4232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4236:	2100      	movs	r1, #0
    4238:	4620      	mov	r0, r4
    423a:	f00a fc6f 	bl	eb1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    423e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 42b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4242:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4246:	2000      	movs	r0, #0
    4248:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    424c:	b149      	cbz	r1, 4262 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    424e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4250:	b139      	cbz	r1, 4262 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4252:	f7fe fd95 	bl	2d80 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4256:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    425a:	fbb0 f2f1 	udiv	r2, r0, r1
    425e:	fb01 0012 	mls	r0, r1, r2, r0
    4262:	4407      	add	r7, r0
    4264:	f00b ffb7 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4268:	19c0      	adds	r0, r0, r7
    426a:	4169      	adcs	r1, r5
    426c:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4270:	b19e      	cbz	r6, 429a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4272:	1980      	adds	r0, r0, r6
    4274:	eb51 0105 	adcs.w	r1, r1, r5
    4278:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    427c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4280:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    4284:	f00a fcf4 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4288:	b158      	cbz	r0, 42a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    428a:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    428e:	2100      	movs	r1, #0
    4290:	4620      	mov	r0, r4
    4292:	f00a f9e5 	bl	e660 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4296:	2000      	movs	r0, #0
    4298:	e7cb      	b.n	4232 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    429a:	f04f 30ff 	mov.w	r0, #4294967295
    429e:	0841      	lsrs	r1, r0, #1
    42a0:	e7ea      	b.n	4278 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    42a2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    42a6:	2030      	movs	r0, #48	; 0x30
    42a8:	f7fc fb70 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42ac:	0000ed55 	.word	0x0000ed55
    42b0:	20000100 	.word	0x20000100

000042b4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    42b4:	4901      	ldr	r1, [pc, #4]	; (42bc <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    42b6:	8088      	strh	r0, [r1, #4]
    42b8:	4770      	bx	lr
    42ba:	0000      	.short	0x0000
    42bc:	20000100 	.word	0x20000100

000042c0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    42c0:	4805      	ldr	r0, [pc, #20]	; (42d8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    42c2:	2100      	movs	r1, #0
    42c4:	7001      	strb	r1, [r0, #0]
    42c6:	2201      	movs	r2, #1
    42c8:	7082      	strb	r2, [r0, #2]
    42ca:	7041      	strb	r1, [r0, #1]
    42cc:	f242 7110 	movw	r1, #10000	; 0x2710
    42d0:	8081      	strh	r1, [r0, #4]
    42d2:	f000 b803 	b.w	42dc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    42d6:	0000      	.short	0x0000
    42d8:	20000100 	.word	0x20000100

000042dc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    42dc:	b51c      	push	{r2, r3, r4, lr}
    42de:	4909      	ldr	r1, [pc, #36]	; (4304 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    42e0:	e9d1 0100 	ldrd	r0, r1, [r1]
    42e4:	e9cd 0100 	strd	r0, r1, [sp]
    42e8:	e002      	b.n	42f0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    42ea:	9800      	ldr	r0, [sp, #0]
    42ec:	f00a fb29 	bl	e942 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    42f0:	4668      	mov	r0, sp
    42f2:	f7fc fecb 	bl	108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    42f6:	2800      	cmp	r0, #0
    42f8:	d0f7      	beq.n	42ea <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    42fa:	f000 f8c7 	bl	448c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    42fe:	2000      	movs	r0, #0
    4300:	bd1c      	pop	{r2, r3, r4, pc}
    4302:	0000      	.short	0x0000
    4304:	00004c24 	.word	0x00004c24

00004308 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4308:	4901      	ldr	r1, [pc, #4]	; (4310 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    430a:	7008      	strb	r0, [r1, #0]
    430c:	4770      	bx	lr
    430e:	0000      	.short	0x0000
    4310:	20000100 	.word	0x20000100

00004314 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4314:	4908      	ldr	r1, [pc, #32]	; (4338 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    431a:	fbb1 f1f2 	udiv	r1, r1, r2
    431e:	b510      	push	{r4, lr}
    4320:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4324:	f009 fdea 	bl	defc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4328:	f640 0148 	movw	r1, #2120	; 0x848
    432c:	4288      	cmp	r0, r1
    432e:	d300      	bcc.n	4332 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4330:	4608      	mov	r0, r1
    4332:	b280      	uxth	r0, r0
    4334:	bd10      	pop	{r4, pc}
    4336:	0000      	.short	0x0000
    4338:	0001527d 	.word	0x0001527d

0000433c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    433c:	b510      	push	{r4, lr}
    433e:	f003 fb93 	bl	7a68 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4342:	4905      	ldr	r1, [pc, #20]	; (4358 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4344:	688a      	ldr	r2, [r1, #8]
    4346:	4290      	cmp	r0, r2
    4348:	d801      	bhi.n	434e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    434a:	7848      	ldrb	r0, [r1, #1]
    434c:	b108      	cbz	r0, 4352 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    434e:	2000      	movs	r0, #0
    4350:	bd10      	pop	{r4, pc}
    4352:	2001      	movs	r0, #1
    4354:	bd10      	pop	{r4, pc}
    4356:	0000      	.short	0x0000
    4358:	20000100 	.word	0x20000100

0000435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    435c:	b510      	push	{r4, lr}
    435e:	4604      	mov	r4, r0
    4360:	2906      	cmp	r1, #6
    4362:	d238      	bcs.n	43d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    4364:	e8df f001 	tbb	[pc, r1]
    4368:	14031105 	.word	0x14031105
    436c:	3215      	.short	0x3215
    436e:	2100      	movs	r1, #0
    4370:	e006      	b.n	4380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4372:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4376:	b110      	cbz	r0, 437e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4378:	4620      	mov	r0, r4
    437a:	f00a fc0c 	bl	eb96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    437e:	2101      	movs	r1, #1
    4380:	4620      	mov	r0, r4
    4382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4386:	f000 b97f 	b.w	4688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    438a:	2003      	movs	r0, #3
    438c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4390:	bd10      	pop	{r4, pc}
    4392:	f003 fb75 	bl	7a80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4396:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    439a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    439e:	f003 fc33 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    43a2:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    43a6:	4288      	cmp	r0, r1
    43a8:	d904      	bls.n	43b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    43aa:	f240 31e3 	movw	r1, #995	; 0x3e3
    43ae:	2030      	movs	r0, #48	; 0x30
    43b0:	f7fc faec 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43b4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    43b8:	f003 fc26 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    43bc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    43c0:	1a08      	subs	r0, r1, r0
    43c2:	4906      	ldr	r1, [pc, #24]	; (43dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    43c4:	688a      	ldr	r2, [r1, #8]
    43c6:	4410      	add	r0, r2
    43c8:	6088      	str	r0, [r1, #8]
    43ca:	bd10      	pop	{r4, pc}
    43cc:	4620      	mov	r0, r4
    43ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    43d2:	f00a bbcd 	b.w	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    43d6:	f240 7199 	movw	r1, #1945	; 0x799
    43da:	e7e8      	b.n	43ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    43dc:	20000100 	.word	0x20000100

000043e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    43e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43e4:	460c      	mov	r4, r1
    43e6:	4680      	mov	r8, r0
    43e8:	b112      	cbz	r2, 43f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    43ea:	f240 71c3 	movw	r1, #1987	; 0x7c3
    43ee:	e037      	b.n	4460 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    43f0:	f003 fb3a 	bl	7a68 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    43f4:	4607      	mov	r7, r0
    43f6:	2000      	movs	r0, #0
    43f8:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    43fc:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4400:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4404:	2001      	movs	r0, #1
    4406:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    440a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    440e:	2101      	movs	r1, #1
    4410:	34c8      	adds	r4, #200	; 0xc8
    4412:	f7fe f859 	bl	24c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4416:	f854 0f04 	ldr.w	r0, [r4, #4]!
    441a:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    441e:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4422:	6821      	ldr	r1, [r4, #0]
    4424:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4428:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    442c:	6820      	ldr	r0, [r4, #0]
    442e:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4432:	6820      	ldr	r0, [r4, #0]
    4434:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4438:	f854 09cc 	ldr.w	r0, [r4], #-204
    443c:	f00a fd33 	bl	eea6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    4440:	b110      	cbz	r0, 4448 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4442:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    4446:	e00b      	b.n	4460 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4448:	f00a fb9e 	bl	eb88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    444c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4450:	4642      	mov	r2, r8
    4452:	4906      	ldr	r1, [pc, #24]	; (446c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4454:	f006 f8d2 	bl	a5fc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4458:	2800      	cmp	r0, #0
    445a:	d104      	bne.n	4466 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    445c:	f240 71ac 	movw	r1, #1964	; 0x7ac
    4460:	2030      	movs	r0, #48	; 0x30
    4462:	f7fc fa93 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    446a:	0000      	.short	0x0000
    446c:	0000edc1 	.word	0x0000edc1
    4470:	b510      	push	{r4, lr}
    4472:	280c      	cmp	r0, #12
    4474:	d304      	bcc.n	4480 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    4476:	f240 318a 	movw	r1, #906	; 0x38a
    447a:	2006      	movs	r0, #6
    447c:	f7fc fa86 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4480:	4901      	ldr	r1, [pc, #4]	; (4488 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    4482:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4486:	bd10      	pop	{r4, pc}
    4488:	00004c40 	.word	0x00004c40
    448c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4490:	4d16      	ldr	r5, [pc, #88]	; (44ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    4492:	2001      	movs	r0, #1
    4494:	7068      	strb	r0, [r5, #1]
    4496:	2400      	movs	r4, #0
    4498:	f64f 76ff 	movw	r6, #65535	; 0xffff
    449c:	e00b      	b.n	44b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    449e:	2100      	movs	r1, #0
    44a0:	f7fc fda2 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    44a4:	0007      	movs	r7, r0
    44a6:	d009      	beq.n	44bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    44a8:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    44ac:	f006 f8d6 	bl	a65c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    44b0:	4638      	mov	r0, r7
    44b2:	f00a fc42 	bl	ed3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    44b6:	9400      	str	r4, [sp, #0]
    44b8:	9401      	str	r4, [sp, #4]
    44ba:	e00e      	b.n	44da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    44bc:	f44f 7191 	mov.w	r1, #290	; 0x122
    44c0:	2030      	movs	r0, #48	; 0x30
    44c2:	f7fc fa63 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44c6:	9800      	ldr	r0, [sp, #0]
    44c8:	b138      	cbz	r0, 44da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    44ca:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    44ce:	2920      	cmp	r1, #32
    44d0:	d003      	beq.n	44da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    44d2:	8800      	ldrh	r0, [r0, #0]
    44d4:	42b0      	cmp	r0, r6
    44d6:	d1e2      	bne.n	449e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    44d8:	e004      	b.n	44e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    44da:	4668      	mov	r0, sp
    44dc:	f7fc fdd6 	bl	108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    44e0:	2800      	cmp	r0, #0
    44e2:	d0f0      	beq.n	44c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    44e4:	706c      	strb	r4, [r5, #1]
    44e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    44ea:	0000      	.short	0x0000
    44ec:	20000100 	.word	0x20000100
    44f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    44f4:	4604      	mov	r4, r0
    44f6:	4839      	ldr	r0, [pc, #228]	; (45dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    44f8:	461e      	mov	r6, r3
    44fa:	4690      	mov	r8, r2
    44fc:	7880      	ldrb	r0, [r0, #2]
    44fe:	4689      	mov	r9, r1
    4500:	2500      	movs	r5, #0
    4502:	2800      	cmp	r0, #0
    4504:	d063      	beq.n	45ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4506:	f007 fbfd 	bl	bd04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    450a:	b3e0      	cbz	r0, 4586 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    450c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4510:	2802      	cmp	r0, #2
    4512:	d35c      	bcc.n	45ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4514:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4518:	2802      	cmp	r0, #2
    451a:	d058      	beq.n	45ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    451c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4520:	bb88      	cbnz	r0, 4586 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4522:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4526:	f7ff ffa3 	bl	4470 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    452a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    452e:	b281      	uxth	r1, r0
    4530:	8031      	strh	r1, [r6, #0]
    4532:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4536:	2700      	movs	r7, #0
    4538:	2801      	cmp	r0, #1
    453a:	d00d      	beq.n	4558 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    453c:	6920      	ldr	r0, [r4, #16]
    453e:	f007 fc2b 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4542:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4546:	4442      	add	r2, r8
    4548:	eba2 0109 	sub.w	r1, r2, r9
    454c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4550:	1a82      	subs	r2, r0, r2
    4552:	fb01 7502 	mla	r5, r1, r2, r7
    4556:	e035      	b.n	45c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    4558:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    455c:	2803      	cmp	r0, #3
    455e:	d039      	beq.n	45d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    4560:	2101      	movs	r1, #1
    4562:	2000      	movs	r0, #0
    4564:	f009 f94e 	bl	d804 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4568:	6a21      	ldr	r1, [r4, #32]
    456a:	1847      	adds	r7, r0, r1
    456c:	8831      	ldrh	r1, [r6, #0]
    456e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4572:	f007 fc11 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4576:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    457a:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    457e:	1a82      	subs	r2, r0, r2
    4580:	fb01 5502 	mla	r5, r1, r2, r5
    4584:	e000      	b.n	4588 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4586:	e022      	b.n	45ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4588:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    458c:	8831      	ldrh	r1, [r6, #0]
    458e:	4638      	mov	r0, r7
    4590:	f007 fc02 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4594:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4598:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    459c:	1a41      	subs	r1, r0, r1
    459e:	440d      	add	r5, r1
    45a0:	8831      	ldrh	r1, [r6, #0]
    45a2:	6920      	ldr	r0, [r4, #16]
    45a4:	f007 fbf8 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    45a8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    45ac:	4442      	add	r2, r8
    45ae:	eba2 0109 	sub.w	r1, r2, r9
    45b2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    45b6:	1a89      	subs	r1, r1, r2
    45b8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    45bc:	1a82      	subs	r2, r0, r2
    45be:	1e49      	subs	r1, r1, #1
    45c0:	fb01 5502 	mla	r5, r1, r2, r5
    45c4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    45c8:	2001      	movs	r0, #1
    45ca:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    45ce:	4628      	mov	r0, r5
    45d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45d4:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    45d8:	e7c6      	b.n	4568 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    45da:	0000      	.short	0x0000
    45dc:	20000100 	.word	0x20000100
    45e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45e4:	4605      	mov	r5, r0
    45e6:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    45ea:	2128      	movs	r1, #40	; 0x28
    45ec:	f00a fa3c 	bl	ea68 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    45f0:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    45f4:	f00b fde6 	bl	101c4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    45f8:	2869      	cmp	r0, #105	; 0x69
    45fa:	d800      	bhi.n	45fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    45fc:	2069      	movs	r0, #105	; 0x69
    45fe:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4602:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    4606:	692a      	ldr	r2, [r5, #16]
    4608:	440b      	add	r3, r1
    460a:	429a      	cmp	r2, r3
    460c:	d903      	bls.n	4616 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    460e:	1a51      	subs	r1, r2, r1
    4610:	1a0c      	subs	r4, r1, r0
    4612:	3469      	adds	r4, #105	; 0x69
    4614:	e000      	b.n	4618 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    4616:	2400      	movs	r4, #0
    4618:	4f1a      	ldr	r7, [pc, #104]	; (4684 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    461a:	7838      	ldrb	r0, [r7, #0]
    461c:	b918      	cbnz	r0, 4626 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    461e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4620:	42a0      	cmp	r0, r4
    4622:	d800      	bhi.n	4626 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4624:	4604      	mov	r4, r0
    4626:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    462a:	f009 fc72 	bl	df12 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    462e:	4606      	mov	r6, r0
    4630:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4634:	f00a fc2a 	bl	ee8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4638:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    463c:	4430      	add	r0, r6
    463e:	1846      	adds	r6, r0, r1
    4640:	1ba4      	subs	r4, r4, r6
    4642:	2c00      	cmp	r4, #0
    4644:	dc00      	bgt.n	4648 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    4646:	2400      	movs	r4, #0
    4648:	2002      	movs	r0, #2
    464a:	f005 f8f1 	bl	9830 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    464e:	4284      	cmp	r4, r0
    4650:	d300      	bcc.n	4654 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4652:	4604      	mov	r4, r0
    4654:	2102      	movs	r1, #2
    4656:	4620      	mov	r0, r4
    4658:	f004 fffa 	bl	9650 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    465c:	b900      	cbnz	r0, 4660 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    465e:	4426      	add	r6, r4
    4660:	4642      	mov	r2, r8
    4662:	4631      	mov	r1, r6
    4664:	4628      	mov	r0, r5
    4666:	f009 fbf5 	bl	de54 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    466a:	60b8      	str	r0, [r7, #8]
    466c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4670:	f00a fc0c 	bl	ee8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4674:	1a30      	subs	r0, r6, r0
    4676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    467a:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    467e:	f006 ba05 	b.w	aa8c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4682:	0000      	.short	0x0000
    4684:	20000100 	.word	0x20000100
    4688:	b538      	push	{r3, r4, r5, lr}
    468a:	2500      	movs	r5, #0
    468c:	4604      	mov	r4, r0
    468e:	2901      	cmp	r1, #1
    4690:	d102      	bne.n	4698 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    4692:	4810      	ldr	r0, [pc, #64]	; (46d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    4694:	7840      	ldrb	r0, [r0, #1]
    4696:	b170      	cbz	r0, 46b6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    4698:	2004      	movs	r0, #4
    469a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    469e:	bf00      	nop
    46a0:	f00a fa72 	bl	eb88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    46a4:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    46a8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    46ac:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    46b0:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    46b4:	bd38      	pop	{r3, r4, r5, pc}
    46b6:	9500      	str	r5, [sp, #0]
    46b8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    46bc:	2301      	movs	r3, #1
    46be:	2200      	movs	r2, #0
    46c0:	4620      	mov	r0, r4
    46c2:	f000 f809 	bl	46d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    46c6:	2800      	cmp	r0, #0
    46c8:	d0ea      	beq.n	46a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    46ca:	f240 710e 	movw	r1, #1806	; 0x70e
    46ce:	2030      	movs	r0, #48	; 0x30
    46d0:	f7fc f95c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d4:	20000100 	.word	0x20000100
    46d8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46dc:	b08b      	sub	sp, #44	; 0x2c
    46de:	4604      	mov	r4, r0
    46e0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    46e4:	4699      	mov	r9, r3
    46e6:	460f      	mov	r7, r1
    46e8:	9307      	str	r3, [sp, #28]
    46ea:	9005      	str	r0, [sp, #20]
    46ec:	f00b fc8c 	bl	10008 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    46f0:	4605      	mov	r5, r0
    46f2:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    46f6:	f7ff febb 	bl	4470 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    46fa:	4428      	add	r0, r5
    46fc:	f8ad 0004 	strh.w	r0, [sp, #4]
    4700:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4704:	280d      	cmp	r0, #13
    4706:	d004      	beq.n	4712 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    4708:	2000      	movs	r0, #0
    470a:	9008      	str	r0, [sp, #32]
    470c:	980d      	ldr	r0, [sp, #52]	; 0x34
    470e:	b110      	cbz	r0, 4716 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4710:	e02e      	b.n	4770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4712:	2001      	movs	r0, #1
    4714:	e7f9      	b.n	470a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    4716:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    471a:	2803      	cmp	r0, #3
    471c:	d128      	bne.n	4770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    471e:	9808      	ldr	r0, [sp, #32]
    4720:	b330      	cbz	r0, 4770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4722:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4726:	42b8      	cmp	r0, r7
    4728:	d122      	bne.n	4770 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    472a:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    472e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4732:	6920      	ldr	r0, [r4, #16]
    4734:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4738:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    473c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4740:	4408      	add	r0, r1
    4742:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4746:	4620      	mov	r0, r4
    4748:	f000 fa86 	bl	4c58 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    474c:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4750:	6220      	str	r0, [r4, #32]
    4752:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4756:	84a0      	strh	r0, [r4, #36]	; 0x24
    4758:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    475c:	6120      	str	r0, [r4, #16]
    475e:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4762:	8320      	strh	r0, [r4, #24]
    4764:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4768:	8360      	strh	r0, [r4, #26]
    476a:	2002      	movs	r0, #2
    476c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4770:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4774:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4778:	1a38      	subs	r0, r7, r0
    477a:	fa0f fa80 	sxth.w	sl, r0
    477e:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4782:	1a38      	subs	r0, r7, r0
    4784:	fa0f f880 	sxth.w	r8, r0
    4788:	f1b8 0f00 	cmp.w	r8, #0
    478c:	da08      	bge.n	47a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    478e:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4792:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4796:	46d0      	mov	r8, sl
    4798:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    479c:	2001      	movs	r0, #1
    479e:	9007      	str	r0, [sp, #28]
    47a0:	ab01      	add	r3, sp, #4
    47a2:	4652      	mov	r2, sl
    47a4:	4641      	mov	r1, r8
    47a6:	4620      	mov	r0, r4
    47a8:	f7ff fea2 	bl	44f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    47ac:	9004      	str	r0, [sp, #16]
    47ae:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    47b2:	f8df b334 	ldr.w	fp, [pc, #820]	; 4ae8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    47b6:	b140      	cbz	r0, 47ca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    47b8:	2801      	cmp	r0, #1
    47ba:	d07d      	beq.n	48b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    47bc:	2802      	cmp	r0, #2
    47be:	d051      	beq.n	4864 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    47c0:	2803      	cmp	r0, #3
    47c2:	d07a      	beq.n	48ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    47c4:	f240 518e 	movw	r1, #1422	; 0x58e
    47c8:	e18a      	b.n	4ae0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    47ca:	2101      	movs	r1, #1
    47cc:	2000      	movs	r0, #0
    47ce:	f009 f819 	bl	d804 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    47d2:	4606      	mov	r6, r0
    47d4:	6a20      	ldr	r0, [r4, #32]
    47d6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    47da:	4430      	add	r0, r6
    47dc:	f007 fadc 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47e0:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    47e4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    47e8:	6920      	ldr	r0, [r4, #16]
    47ea:	f007 fad5 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47ee:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    47f2:	a907      	add	r1, sp, #28
    47f4:	a806      	add	r0, sp, #24
    47f6:	f003 f89f 	bl	7938 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    47fa:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    47fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4802:	f006 fa15 	bl	ac30 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4806:	4682      	mov	sl, r0
    4808:	4620      	mov	r0, r4
    480a:	f00a f9b1 	bl	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    480e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4812:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4816:	f003 fa23 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    481a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    481e:	4401      	add	r1, r0
    4820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4824:	fbb1 f0f0 	udiv	r0, r1, r0
    4828:	6a21      	ldr	r1, [r4, #32]
    482a:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    482e:	4431      	add	r1, r6
    4830:	1a08      	subs	r0, r1, r0
    4832:	1a81      	subs	r1, r0, r2
    4834:	4441      	add	r1, r8
    4836:	3920      	subs	r1, #32
    4838:	eba1 060a 	sub.w	r6, r1, sl
    483c:	0050      	lsls	r0, r2, #1
    483e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4840:	3060      	adds	r0, #96	; 0x60
    4842:	4401      	add	r1, r0
    4844:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4848:	f00a fa00 	bl	ec4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    484c:	3022      	adds	r0, #34	; 0x22
    484e:	f8cb 000c 	str.w	r0, [fp, #12]
    4852:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4856:	1a30      	subs	r0, r6, r0
    4858:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    485c:	d258      	bcs.n	4910 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    485e:	f240 5127 	movw	r1, #1319	; 0x527
    4862:	e13d      	b.n	4ae0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4864:	6a21      	ldr	r1, [r4, #32]
    4866:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    486a:	4408      	add	r0, r1
    486c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4870:	f007 fa92 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4874:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4878:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    487c:	6920      	ldr	r0, [r4, #16]
    487e:	f007 fa8b 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4882:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4886:	4620      	mov	r0, r4
    4888:	f00a f972 	bl	eb70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    488c:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4890:	bb10      	cbnz	r0, 48d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4892:	f1b9 0f00 	cmp.w	r9, #0
    4896:	d01f      	beq.n	48d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4898:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    489c:	4640      	mov	r0, r8
    489e:	f003 f9df 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    48a2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    48a6:	4401      	add	r1, r0
    48a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    48ac:	fbb1 f0f0 	udiv	r0, r1, r0
    48b0:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    48b4:	4408      	add	r0, r1
    48b6:	e001      	b.n	48bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    48b8:	e02b      	b.n	4912 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    48ba:	e047      	b.n	494c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    48bc:	6a22      	ldr	r2, [r4, #32]
    48be:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    48c2:	4411      	add	r1, r2
    48c4:	1a0e      	subs	r6, r1, r0
    48c6:	4640      	mov	r0, r8
    48c8:	f003 f99e 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    48cc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    48d0:	1a08      	subs	r0, r1, r0
    48d2:	4406      	add	r6, r0
    48d4:	3e20      	subs	r6, #32
    48d6:	e006      	b.n	48e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    48d8:	6a21      	ldr	r1, [r4, #32]
    48da:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    48de:	4408      	add	r0, r1
    48e0:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    48e4:	1a46      	subs	r6, r0, r1
    48e6:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    48ea:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    48ee:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    48f2:	fb01 0002 	mla	r0, r1, r2, r0
    48f6:	0040      	lsls	r0, r0, #1
    48f8:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    48fa:	3060      	adds	r0, #96	; 0x60
    48fc:	4401      	add	r1, r0
    48fe:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4902:	f00a f9a3 	bl	ec4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4906:	f8cb 000c 	str.w	r0, [fp, #12]
    490a:	2001      	movs	r0, #1
    490c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4910:	e061      	b.n	49d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    4912:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4916:	6920      	ldr	r0, [r4, #16]
    4918:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    491c:	1a86      	subs	r6, r0, r2
    491e:	eb01 000a 	add.w	r0, r1, sl
    4922:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4926:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    492a:	1a40      	subs	r0, r0, r1
    492c:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4930:	1e40      	subs	r0, r0, #1
    4932:	fb0c 3101 	mla	r1, ip, r1, r3
    4936:	fb00 1002 	mla	r0, r0, r2, r1
    493a:	0040      	lsls	r0, r0, #1
    493c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    493e:	3060      	adds	r0, #96	; 0x60
    4940:	4401      	add	r1, r0
    4942:	fb06 f608 	mul.w	r6, r6, r8
    4946:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    494a:	e040      	b.n	49ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    494c:	6920      	ldr	r0, [r4, #16]
    494e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4952:	fb00 f008 	mul.w	r0, r0, r8
    4956:	fb08 0611 	mls	r6, r8, r1, r0
    495a:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    495e:	2825      	cmp	r0, #37	; 0x25
    4960:	d003      	beq.n	496a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    4962:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4966:	2825      	cmp	r0, #37	; 0x25
    4968:	d109      	bne.n	497e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    496a:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    496e:	1a38      	subs	r0, r7, r0
    4970:	b200      	sxth	r0, r0
    4972:	2800      	cmp	r0, #0
    4974:	db03      	blt.n	497e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4976:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    497a:	b100      	cbz	r0, 497e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    497c:	9005      	str	r0, [sp, #20]
    497e:	9807      	ldr	r0, [sp, #28]
    4980:	b1d8      	cbz	r0, 49ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4982:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4986:	b9c0      	cbnz	r0, 49ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4988:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    498c:	2800      	cmp	r0, #0
    498e:	d07d      	beq.n	4a8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    4990:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4994:	f003 f964 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4998:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    499c:	4401      	add	r1, r0
    499e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    49a2:	fbb1 f0f0 	udiv	r0, r1, r0
    49a6:	1a36      	subs	r6, r6, r0
    49a8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    49ac:	f003 f92c 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    49b0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    49b4:	1a08      	subs	r0, r1, r0
    49b6:	4406      	add	r6, r0
    49b8:	3e20      	subs	r6, #32
    49ba:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    49be:	eb01 000a 	add.w	r0, r1, sl
    49c2:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    49c6:	4348      	muls	r0, r1
    49c8:	0041      	lsls	r1, r0, #1
    49ca:	3160      	adds	r1, #96	; 0x60
    49cc:	9805      	ldr	r0, [sp, #20]
    49ce:	f00a f93d 	bl	ec4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    49d2:	f8cb 000c 	str.w	r0, [fp, #12]
    49d6:	9804      	ldr	r0, [sp, #16]
    49d8:	f8db 200c 	ldr.w	r2, [fp, #12]
    49dc:	1a31      	subs	r1, r6, r0
    49de:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    49e2:	6920      	ldr	r0, [r4, #16]
    49e4:	1b80      	subs	r0, r0, r6
    49e6:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    49ea:	f8cb 0010 	str.w	r0, [fp, #16]
    49ee:	4282      	cmp	r2, r0
    49f0:	d800      	bhi.n	49f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    49f2:	4610      	mov	r0, r2
    49f4:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    49f8:	2600      	movs	r6, #0
    49fa:	702e      	strb	r6, [r5, #0]
    49fc:	2069      	movs	r0, #105	; 0x69
    49fe:	8128      	strh	r0, [r5, #8]
    4a00:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4a04:	1851      	adds	r1, r2, r1
    4a06:	4170      	adcs	r0, r6
    4a08:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4a0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4a10:	f009 fa7f 	bl	df12 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4a14:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    4a18:	4408      	add	r0, r1
    4a1a:	6068      	str	r0, [r5, #4]
    4a1c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4a20:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4a24:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    4a28:	72ae      	strb	r6, [r5, #10]
    4a2a:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4a2e:	1bc0      	subs	r0, r0, r7
    4a30:	b200      	sxth	r0, r0
    4a32:	2800      	cmp	r0, #0
    4a34:	dd01      	ble.n	4a3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    4a36:	2002      	movs	r0, #2
    4a38:	72a8      	strb	r0, [r5, #10]
    4a3a:	9808      	ldr	r0, [sp, #32]
    4a3c:	b338      	cbz	r0, 4a8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    4a3e:	f1b9 0f00 	cmp.w	r9, #0
    4a42:	d01c      	beq.n	4a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4a44:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    4a48:	b3f1      	cbz	r1, 4ac8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    4a4a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4a4e:	bf00      	nop
    4a50:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4a54:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    4a58:	1c40      	adds	r0, r0, #1
    4a5a:	4342      	muls	r2, r0
    4a5c:	428a      	cmp	r2, r1
    4a5e:	d20e      	bcs.n	4a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4a60:	7aa8      	ldrb	r0, [r5, #10]
    4a62:	b160      	cbz	r0, 4a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4a64:	72ae      	strb	r6, [r5, #10]
    4a66:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4a6a:	1c40      	adds	r0, r0, #1
    4a6c:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4a70:	f7fe f980 	bl	2d74 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    4a74:	f000 0007 	and.w	r0, r0, #7
    4a78:	1c40      	adds	r0, r0, #1
    4a7a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    4a7e:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    4a82:	4629      	mov	r1, r5
    4a84:	f00a f8f4 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4a88:	b340      	cbz	r0, 4adc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    4a8a:	e001      	b.n	4a90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    4a8c:	e009      	b.n	4aa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    4a8e:	e00b      	b.n	4aa8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    4a90:	980d      	ldr	r0, [sp, #52]	; 0x34
    4a92:	f080 0001 	eor.w	r0, r0, #1
    4a96:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    4a9a:	2000      	movs	r0, #0
    4a9c:	b00f      	add	sp, #60	; 0x3c
    4a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4aa2:	f240 5179 	movw	r1, #1401	; 0x579
    4aa6:	e01b      	b.n	4ae0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4aa8:	f1b9 0f00 	cmp.w	r9, #0
    4aac:	d1ca      	bne.n	4a44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    4aae:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ab2:	2800      	cmp	r0, #0
    4ab4:	d0e3      	beq.n	4a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ab6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4aba:	6920      	ldr	r0, [r4, #16]
    4abc:	1a41      	subs	r1, r0, r1
    4abe:	4628      	mov	r0, r5
    4ac0:	f008 feb6 	bl	d830 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4ac4:	0400      	lsls	r0, r0, #16
    4ac6:	e000      	b.n	4aca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    4ac8:	e006      	b.n	4ad8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    4aca:	0c00      	lsrs	r0, r0, #16
    4acc:	d0d7      	beq.n	4a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ace:	9918      	ldr	r1, [sp, #96]	; 0x60
    4ad0:	b101      	cbz	r1, 4ad4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    4ad2:	8008      	strh	r0, [r1, #0]
    4ad4:	2001      	movs	r0, #1
    4ad6:	e7e1      	b.n	4a9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    4ad8:	2000      	movs	r0, #0
    4ada:	e7b9      	b.n	4a50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    4adc:	f240 51d7 	movw	r1, #1495	; 0x5d7
    4ae0:	2030      	movs	r0, #48	; 0x30
    4ae2:	f7fb ff53 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ae6:	0000      	.short	0x0000
    4ae8:	20000100 	.word	0x20000100
    4aec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4aee:	4604      	mov	r4, r0
    4af0:	f00b fb71 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4af4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    4af8:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    4afc:	1ac0      	subs	r0, r0, r3
    4afe:	eb61 0102 	sbc.w	r1, r1, r2
    4b02:	2200      	movs	r2, #0
    4b04:	4613      	mov	r3, r2
    4b06:	1a12      	subs	r2, r2, r0
    4b08:	418b      	sbcs	r3, r1
    4b0a:	db02      	blt.n	4b12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    4b0c:	f240 6154 	movw	r1, #1620	; 0x654
    4b10:	e04d      	b.n	4bae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4b12:	1c42      	adds	r2, r0, #1
    4b14:	f171 0100 	sbcs.w	r1, r1, #0
    4b18:	db02      	blt.n	4b20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    4b1a:	f240 6155 	movw	r1, #1621	; 0x655
    4b1e:	e046      	b.n	4bae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4b20:	6922      	ldr	r2, [r4, #16]
    4b22:	2100      	movs	r1, #0
    4b24:	b10a      	cbz	r2, 4b2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    4b26:	fbb0 f1f2 	udiv	r1, r0, r2
    4b2a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4b2e:	280d      	cmp	r0, #13
    4b30:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4b34:	d01b      	beq.n	4b6e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    4b36:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    4b3a:	1853      	adds	r3, r2, r1
    4b3c:	1ac3      	subs	r3, r0, r3
    4b3e:	b21b      	sxth	r3, r3
    4b40:	2b00      	cmp	r3, #0
    4b42:	db01      	blt.n	4b48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    4b44:	1c40      	adds	r0, r0, #1
    4b46:	e001      	b.n	4b4c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    4b48:	1c49      	adds	r1, r1, #1
    4b4a:	1850      	adds	r0, r2, r1
    4b4c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4b50:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    4b54:	f88d 0000 	strb.w	r0, [sp]
    4b58:	9800      	ldr	r0, [sp, #0]
    4b5a:	9000      	str	r0, [sp, #0]
    4b5c:	f89d 0000 	ldrb.w	r0, [sp]
    4b60:	b940      	cbnz	r0, 4b74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4b62:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4b66:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4b6a:	4288      	cmp	r0, r1
    4b6c:	d102      	bne.n	4b74 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4b6e:	1c40      	adds	r0, r0, #1
    4b70:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4b74:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4b78:	1c40      	adds	r0, r0, #1
    4b7a:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    4b7e:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    4b82:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    4b86:	1a40      	subs	r0, r0, r1
    4b88:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    4b8c:	1e40      	subs	r0, r0, #1
    4b8e:	4408      	add	r0, r1
    4b90:	b285      	uxth	r5, r0
    4b92:	e026      	b.n	4be2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4b94:	a801      	add	r0, sp, #4
    4b96:	2300      	movs	r3, #0
    4b98:	9000      	str	r0, [sp, #0]
    4b9a:	461a      	mov	r2, r3
    4b9c:	4620      	mov	r0, r4
    4b9e:	f7ff fd9b 	bl	46d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4ba2:	2800      	cmp	r0, #0
    4ba4:	d03a      	beq.n	4c1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    4ba6:	2801      	cmp	r0, #1
    4ba8:	d004      	beq.n	4bb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    4baa:	f240 6194 	movw	r1, #1684	; 0x694
    4bae:	2030      	movs	r0, #48	; 0x30
    4bb0:	f7fb feec 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bb4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4bb8:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    4bbc:	1a42      	subs	r2, r0, r1
    4bbe:	b212      	sxth	r2, r2
    4bc0:	2a00      	cmp	r2, #0
    4bc2:	da09      	bge.n	4bd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4bc4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4bc8:	4402      	add	r2, r0
    4bca:	1aaa      	subs	r2, r5, r2
    4bcc:	b212      	sxth	r2, r2
    4bce:	2a00      	cmp	r2, #0
    4bd0:	da02      	bge.n	4bd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4bd2:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    4bd6:	e004      	b.n	4be2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4bd8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4bdc:	4408      	add	r0, r1
    4bde:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4be2:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    4be6:	1a68      	subs	r0, r5, r1
    4be8:	b200      	sxth	r0, r0
    4bea:	2800      	cmp	r0, #0
    4bec:	dad2      	bge.n	4b94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    4bee:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4bf2:	b188      	cbz	r0, 4c18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    4bf4:	f05f 0008 	movs.w	r0, #8
    4bf8:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4bfc:	2202      	movs	r2, #2
    4bfe:	4908      	ldr	r1, [pc, #32]	; (4c20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    4c00:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4c04:	f009 f8ee 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4c08:	4620      	mov	r0, r4
    4c0a:	f00a f9c2 	bl	ef92 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    4c0e:	4620      	mov	r0, r4
    4c10:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    4c14:	f00a b891 	b.w	ed3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    4c18:	203e      	movs	r0, #62	; 0x3e
    4c1a:	e7ed      	b.n	4bf8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    4c1c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4c1e:	0000      	.short	0x0000
    4c20:	0000e0a1 	.word	0x0000e0a1
    4c24:	00000000 	.word	0x00000000
    4c28:	00010000 	.word	0x00010000
    4c2c:	00000000 	.word	0x00000000
    4c30:	00010000 	.word	0x00010000
    4c34:	00000000 	.word	0x00000000
    4c38:	00001e14 	.word	0x00001e14
    4c3c:	00001130 	.word	0x00001130
    4c40:	00fa01f4 	.word	0x00fa01f4
    4c44:	00640096 	.word	0x00640096
    4c48:	0032004b 	.word	0x0032004b
    4c4c:	0014001e 	.word	0x0014001e
    4c50:	0005000a 	.word	0x0005000a
    4c54:	00010002 	.word	0x00010002

00004c58 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    4c58:	b510      	push	{r4, lr}
    4c5a:	4604      	mov	r4, r0
    4c5c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    4c60:	6921      	ldr	r1, [r4, #16]
    4c62:	4288      	cmp	r0, r1
    4c64:	d109      	bne.n	4c7a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4c66:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    4c6a:	8b22      	ldrh	r2, [r4, #24]
    4c6c:	4291      	cmp	r1, r2
    4c6e:	d104      	bne.n	4c7a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4c70:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    4c74:	8b62      	ldrh	r2, [r4, #26]
    4c76:	4291      	cmp	r1, r2
    4c78:	d014      	beq.n	4ca4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    4c7a:	8821      	ldrh	r1, [r4, #0]
    4c7c:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    4c80:	f008 fd02 	bl	d688 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4c84:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    4c88:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4c8c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    4c90:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4c94:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    4c98:	2202      	movs	r2, #2
    4c9a:	4907      	ldr	r1, [pc, #28]	; (4cb8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    4c9c:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    4ca0:	f009 f8b4 	bl	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    4ca4:	2102      	movs	r1, #2
    4ca6:	4620      	mov	r0, r4
    4ca8:	f7fd fc0e 	bl	24c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4cac:	2000      	movs	r0, #0
    4cae:	f804 0f9e 	strb.w	r0, [r4, #158]!
    4cb2:	2003      	movs	r0, #3
    4cb4:	70e0      	strb	r0, [r4, #3]
    4cb6:	bd10      	pop	{r4, pc}
    4cb8:	0000e12f 	.word	0x0000e12f

00004cbc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    4cbc:	4806      	ldr	r0, [pc, #24]	; (4cd8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    4cbe:	4905      	ldr	r1, [pc, #20]	; (4cd4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    4cc0:	6501      	str	r1, [r0, #80]	; 0x50
    4cc2:	4906      	ldr	r1, [pc, #24]	; (4cdc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    4cc4:	6541      	str	r1, [r0, #84]	; 0x54
    4cc6:	4807      	ldr	r0, [pc, #28]	; (4ce4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    4cc8:	4905      	ldr	r1, [pc, #20]	; (4ce0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    4cca:	6501      	str	r1, [r0, #80]	; 0x50
    4ccc:	4906      	ldr	r1, [pc, #24]	; (4ce8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    4cce:	6541      	str	r1, [r0, #84]	; 0x54
    4cd0:	4770      	bx	lr
    4cd2:	0000      	.short	0x0000
    4cd4:	00005fb5 	.word	0x00005fb5
    4cd8:	2000012c 	.word	0x2000012c
    4cdc:	0000609d 	.word	0x0000609d
    4ce0:	0000e151 	.word	0x0000e151
    4ce4:	200001d8 	.word	0x200001d8
    4ce8:	000064ed 	.word	0x000064ed

00004cec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    4cec:	481e      	ldr	r0, [pc, #120]	; (4d68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    4cee:	491d      	ldr	r1, [pc, #116]	; (4d64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    4cf0:	6081      	str	r1, [r0, #8]
    4cf2:	491e      	ldr	r1, [pc, #120]	; (4d6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    4cf4:	6041      	str	r1, [r0, #4]
    4cf6:	491e      	ldr	r1, [pc, #120]	; (4d70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    4cf8:	6001      	str	r1, [r0, #0]
    4cfa:	491e      	ldr	r1, [pc, #120]	; (4d74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    4cfc:	6281      	str	r1, [r0, #40]	; 0x28
    4cfe:	491e      	ldr	r1, [pc, #120]	; (4d78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    4d00:	62c1      	str	r1, [r0, #44]	; 0x2c
    4d02:	491e      	ldr	r1, [pc, #120]	; (4d7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    4d04:	60c1      	str	r1, [r0, #12]
    4d06:	491e      	ldr	r1, [pc, #120]	; (4d80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    4d08:	6181      	str	r1, [r0, #24]
    4d0a:	491e      	ldr	r1, [pc, #120]	; (4d84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    4d0c:	6301      	str	r1, [r0, #48]	; 0x30
    4d0e:	491e      	ldr	r1, [pc, #120]	; (4d88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    4d10:	6201      	str	r1, [r0, #32]
    4d12:	491e      	ldr	r1, [pc, #120]	; (4d8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    4d14:	64c1      	str	r1, [r0, #76]	; 0x4c
    4d16:	491e      	ldr	r1, [pc, #120]	; (4d90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    4d18:	6481      	str	r1, [r0, #72]	; 0x48
    4d1a:	491e      	ldr	r1, [pc, #120]	; (4d94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    4d1c:	6441      	str	r1, [r0, #68]	; 0x44
    4d1e:	491e      	ldr	r1, [pc, #120]	; (4d98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    4d20:	6341      	str	r1, [r0, #52]	; 0x34
    4d22:	491e      	ldr	r1, [pc, #120]	; (4d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    4d24:	61c1      	str	r1, [r0, #28]
    4d26:	491e      	ldr	r1, [pc, #120]	; (4da0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    4d28:	6241      	str	r1, [r0, #36]	; 0x24
    4d2a:	481f      	ldr	r0, [pc, #124]	; (4da8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    4d2c:	491d      	ldr	r1, [pc, #116]	; (4da4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    4d2e:	6081      	str	r1, [r0, #8]
    4d30:	491e      	ldr	r1, [pc, #120]	; (4dac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    4d32:	61c1      	str	r1, [r0, #28]
    4d34:	491e      	ldr	r1, [pc, #120]	; (4db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    4d36:	6241      	str	r1, [r0, #36]	; 0x24
    4d38:	491e      	ldr	r1, [pc, #120]	; (4db4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    4d3a:	62c1      	str	r1, [r0, #44]	; 0x2c
    4d3c:	491e      	ldr	r1, [pc, #120]	; (4db8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    4d3e:	6101      	str	r1, [r0, #16]
    4d40:	491e      	ldr	r1, [pc, #120]	; (4dbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    4d42:	6141      	str	r1, [r0, #20]
    4d44:	491e      	ldr	r1, [pc, #120]	; (4dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    4d46:	6441      	str	r1, [r0, #68]	; 0x44
    4d48:	491e      	ldr	r1, [pc, #120]	; (4dc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    4d4a:	6341      	str	r1, [r0, #52]	; 0x34
    4d4c:	491e      	ldr	r1, [pc, #120]	; (4dc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    4d4e:	6181      	str	r1, [r0, #24]
    4d50:	491e      	ldr	r1, [pc, #120]	; (4dcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    4d52:	6301      	str	r1, [r0, #48]	; 0x30
    4d54:	491e      	ldr	r1, [pc, #120]	; (4dd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    4d56:	6481      	str	r1, [r0, #72]	; 0x48
    4d58:	491e      	ldr	r1, [pc, #120]	; (4dd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    4d5a:	64c1      	str	r1, [r0, #76]	; 0x4c
    4d5c:	491e      	ldr	r1, [pc, #120]	; (4dd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    4d5e:	6381      	str	r1, [r0, #56]	; 0x38
    4d60:	4770      	bx	lr
    4d62:	0000      	.short	0x0000
    4d64:	00006401 	.word	0x00006401
    4d68:	2000012c 	.word	0x2000012c
    4d6c:	00005d9d 	.word	0x00005d9d
    4d70:	00005e09 	.word	0x00005e09
    4d74:	000060a9 	.word	0x000060a9
    4d78:	0000f00b 	.word	0x0000f00b
    4d7c:	00005ec9 	.word	0x00005ec9
    4d80:	000063d9 	.word	0x000063d9
    4d84:	00006499 	.word	0x00006499
    4d88:	00005f69 	.word	0x00005f69
    4d8c:	0000e349 	.word	0x0000e349
    4d90:	0000e301 	.word	0x0000e301
    4d94:	00006351 	.word	0x00006351
    4d98:	00006385 	.word	0x00006385
    4d9c:	0000640d 	.word	0x0000640d
    4da0:	00005f75 	.word	0x00005f75
    4da4:	0000e111 	.word	0x0000e111
    4da8:	200001d8 	.word	0x200001d8
    4dac:	000065d9 	.word	0x000065d9
    4db0:	0000f0d9 	.word	0x0000f0d9
    4db4:	0000f0dd 	.word	0x0000f0dd
    4db8:	0000f0b3 	.word	0x0000f0b3
    4dbc:	0000f145 	.word	0x0000f145
    4dc0:	0000652d 	.word	0x0000652d
    4dc4:	0000f123 	.word	0x0000f123
    4dc8:	00006565 	.word	0x00006565
    4dcc:	0000f163 	.word	0x0000f163
    4dd0:	0000e325 	.word	0x0000e325
    4dd4:	0000e36f 	.word	0x0000e36f
    4dd8:	0000f141 	.word	0x0000f141

00004ddc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    4ddc:	4806      	ldr	r0, [pc, #24]	; (4df8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    4dde:	4905      	ldr	r1, [pc, #20]	; (4df4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    4de0:	6581      	str	r1, [r0, #88]	; 0x58
    4de2:	4906      	ldr	r1, [pc, #24]	; (4dfc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    4de4:	6601      	str	r1, [r0, #96]	; 0x60
    4de6:	4807      	ldr	r0, [pc, #28]	; (4e04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    4de8:	4905      	ldr	r1, [pc, #20]	; (4e00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    4dea:	6581      	str	r1, [r0, #88]	; 0x58
    4dec:	4906      	ldr	r1, [pc, #24]	; (4e08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    4dee:	65c1      	str	r1, [r0, #92]	; 0x5c
    4df0:	4770      	bx	lr
    4df2:	0000      	.short	0x0000
    4df4:	000060f9 	.word	0x000060f9
    4df8:	2000012c 	.word	0x2000012c
    4dfc:	000061dd 	.word	0x000061dd
    4e00:	0001003d 	.word	0x0001003d
    4e04:	200001d8 	.word	0x200001d8
    4e08:	0000f103 	.word	0x0000f103

00004e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    4e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e0e:	4c7c      	ldr	r4, [pc, #496]	; (5000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    4e10:	2101      	movs	r1, #1
    4e12:	f1a4 0610 	sub.w	r6, r4, #16
    4e16:	7021      	strb	r1, [r4, #0]
    4e18:	2500      	movs	r5, #0
    4e1a:	6060      	str	r0, [r4, #4]
    4e1c:	8075      	strh	r5, [r6, #2]
    4e1e:	7075      	strb	r5, [r6, #1]
    4e20:	7035      	strb	r5, [r6, #0]
    4e22:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    4e26:	8800      	ldrh	r0, [r0, #0]
    4e28:	f7fc fa88 	bl	133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4e2c:	b180      	cbz	r0, 4e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    4e2e:	6860      	ldr	r0, [r4, #4]
    4e30:	8800      	ldrh	r0, [r0, #0]
    4e32:	f7fc fceb 	bl	180c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    4e36:	6860      	ldr	r0, [r4, #4]
    4e38:	8800      	ldrh	r0, [r0, #0]
    4e3a:	f7fc fc8f 	bl	175c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    4e3e:	6860      	ldr	r0, [r4, #4]
    4e40:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    4e44:	b1c9      	cbz	r1, 4e7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4e46:	3080      	adds	r0, #128	; 0x80
    4e48:	f00a f8b2 	bl	efb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    4e4c:	b118      	cbz	r0, 4e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    4e4e:	e014      	b.n	4e7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4e50:	f640 419f 	movw	r1, #3231	; 0xc9f
    4e54:	e06c      	b.n	4f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    4e56:	6860      	ldr	r0, [r4, #4]
    4e58:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    4e5c:	f88d 1000 	strb.w	r1, [sp]
    4e60:	9900      	ldr	r1, [sp, #0]
    4e62:	9100      	str	r1, [sp, #0]
    4e64:	f89d 1000 	ldrb.w	r1, [sp]
    4e68:	b139      	cbz	r1, 4e7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    4e6a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    4e6e:	2301      	movs	r3, #1
    4e70:	4619      	mov	r1, r3
    4e72:	3080      	adds	r0, #128	; 0x80
    4e74:	f008 fc0e 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    4e78:	b180      	cbz	r0, 4e9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    4e7a:	6860      	ldr	r0, [r4, #4]
    4e7c:	3080      	adds	r0, #128	; 0x80
    4e7e:	f00a f897 	bl	efb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    4e82:	b128      	cbz	r0, 4e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    4e84:	6860      	ldr	r0, [r4, #4]
    4e86:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    4e8a:	bf00      	nop
    4e8c:	f000 fb84 	bl	5598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    4e90:	6860      	ldr	r0, [r4, #4]
    4e92:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    4e96:	b189      	cbz	r1, 4ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    4e98:	80b5      	strh	r5, [r6, #4]
    4e9a:	e01e      	b.n	4eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    4e9c:	6860      	ldr	r0, [r4, #4]
    4e9e:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    4ea2:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    4ea6:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    4eaa:	2100      	movs	r1, #0
    4eac:	2002      	movs	r0, #2
    4eae:	f000 fe39 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    4eb2:	6860      	ldr	r0, [r4, #4]
    4eb4:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    4eb8:	2002      	movs	r0, #2
    4eba:	e7e7      	b.n	4e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    4ebc:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    4ec0:	f88d 1000 	strb.w	r1, [sp]
    4ec4:	9900      	ldr	r1, [sp, #0]
    4ec6:	9100      	str	r1, [sp, #0]
    4ec8:	f89d 1000 	ldrb.w	r1, [sp]
    4ecc:	b919      	cbnz	r1, 4ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    4ece:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    4ed0:	8b02      	ldrh	r2, [r0, #24]
    4ed2:	4291      	cmp	r1, r2
    4ed4:	d800      	bhi.n	4ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    4ed6:	8b01      	ldrh	r1, [r0, #24]
    4ed8:	80b1      	strh	r1, [r6, #4]
    4eda:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    4ede:	1e49      	subs	r1, r1, #1
    4ee0:	b28f      	uxth	r7, r1
    4ee2:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    4ee6:	4439      	add	r1, r7
    4ee8:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    4eec:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    4ef0:	4439      	add	r1, r7
    4ef2:	8001      	strh	r1, [r0, #0]
    4ef4:	f001 fba0 	bl	6638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    4ef8:	b120      	cbz	r0, 4f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    4efa:	6860      	ldr	r0, [r4, #4]
    4efc:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    4f00:	4439      	add	r1, r7
    4f02:	6001      	str	r1, [r0, #0]
    4f04:	6861      	ldr	r1, [r4, #4]
    4f06:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    4f0a:	2801      	cmp	r0, #1
    4f0c:	d802      	bhi.n	4f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    4f0e:	1c40      	adds	r0, r0, #1
    4f10:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    4f14:	b10f      	cbz	r7, 4f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    4f16:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    4f1a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    4f1e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    4f22:	f101 0080 	add.w	r0, r1, #128	; 0x80
    4f26:	f008 fd61 	bl	d9ec <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    4f2a:	b120      	cbz	r0, 4f36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    4f2c:	f640 41e6 	movw	r1, #3302	; 0xce6
    4f30:	2031      	movs	r0, #49	; 0x31
    4f32:	f7fb fd2b 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f36:	6860      	ldr	r0, [r4, #4]
    4f38:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    4f3c:	290a      	cmp	r1, #10
    4f3e:	d001      	beq.n	4f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    4f40:	290b      	cmp	r1, #11
    4f42:	d119      	bne.n	4f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    4f44:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    4f48:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    4f4c:	1ad2      	subs	r2, r2, r3
    4f4e:	b212      	sxth	r2, r2
    4f50:	2a00      	cmp	r2, #0
    4f52:	db11      	blt.n	4f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    4f54:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    4f58:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    4f5c:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    4f60:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    4f64:	2103      	movs	r1, #3
    4f66:	f7fd faaf 	bl	24c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4f6a:	6860      	ldr	r0, [r4, #4]
    4f6c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    4f70:	21ff      	movs	r1, #255	; 0xff
    4f72:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    4f76:	e026      	b.n	4fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4f78:	2925      	cmp	r1, #37	; 0x25
    4f7a:	d111      	bne.n	4fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    4f7c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    4f80:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    4f84:	1a89      	subs	r1, r1, r2
    4f86:	b209      	sxth	r1, r1
    4f88:	2900      	cmp	r1, #0
    4f8a:	db09      	blt.n	4fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    4f8c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    4f90:	f000 fe82 	bl	5c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    4f94:	2800      	cmp	r0, #0
    4f96:	6860      	ldr	r0, [r4, #4]
    4f98:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    4f9c:	d029      	beq.n	4ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    4f9e:	e012      	b.n	4fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4fa0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    4fa4:	2925      	cmp	r1, #37	; 0x25
    4fa6:	d001      	beq.n	4fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    4fa8:	2927      	cmp	r1, #39	; 0x27
    4faa:	d10c      	bne.n	4fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4fac:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    4fb0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    4fb4:	1a89      	subs	r1, r1, r2
    4fb6:	b209      	sxth	r1, r1
    4fb8:	2900      	cmp	r1, #0
    4fba:	db04      	blt.n	4fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    4fbc:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    4fc0:	f000 fe6a 	bl	5c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    4fc4:	b1a8      	cbz	r0, 4ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    4fc6:	480f      	ldr	r0, [pc, #60]	; (5004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    4fc8:	9000      	str	r0, [sp, #0]
    4fca:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    4fce:	4b0e      	ldr	r3, [pc, #56]	; (5008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    4fd0:	4a0e      	ldr	r2, [pc, #56]	; (500c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    4fd2:	f7fc fca9 	bl	1928 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    4fd6:	6860      	ldr	r0, [r4, #4]
    4fd8:	2301      	movs	r3, #1
    4fda:	2105      	movs	r1, #5
    4fdc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    4fe0:	3080      	adds	r0, #128	; 0x80
    4fe2:	f008 fb57 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    4fe6:	2800      	cmp	r0, #0
    4fe8:	d009      	beq.n	4ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    4fea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4fee:	f7fc bc95 	b.w	191c <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    4ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4ff6:	2100      	movs	r1, #0
    4ff8:	4608      	mov	r0, r1
    4ffa:	f000 bb9f 	b.w	573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    4ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5000:	20000124 	.word	0x20000124
    5004:	0000573d 	.word	0x0000573d
    5008:	0000528d 	.word	0x0000528d
    500c:	00005be5 	.word	0x00005be5
    5010:	491d      	ldr	r1, [pc, #116]	; (5088 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5012:	b508      	push	{r3, lr}
    5014:	6849      	ldr	r1, [r1, #4]
    5016:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    501a:	b1c0      	cbz	r0, 504e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    501c:	2a11      	cmp	r2, #17
    501e:	d006      	beq.n	502e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    5020:	2a15      	cmp	r2, #21
    5022:	d007      	beq.n	5034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    5024:	2a16      	cmp	r2, #22
    5026:	d009      	beq.n	503c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    5028:	2a1c      	cmp	r2, #28
    502a:	d128      	bne.n	507e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    502c:	e009      	b.n	5042 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    502e:	2101      	movs	r1, #1
    5030:	200b      	movs	r0, #11
    5032:	e008      	b.n	5046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5034:	4814      	ldr	r0, [pc, #80]	; (5088 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5036:	f009 fff4 	bl	f022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    503a:	e006      	b.n	504a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    503c:	f000 fd90 	bl	5b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5040:	e003      	b.n	504a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5042:	2101      	movs	r1, #1
    5044:	2006      	movs	r0, #6
    5046:	f000 fd6d 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    504a:	2001      	movs	r0, #1
    504c:	bd08      	pop	{r3, pc}
    504e:	2a22      	cmp	r2, #34	; 0x22
    5050:	d004      	beq.n	505c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    5052:	2a2f      	cmp	r2, #47	; 0x2f
    5054:	d113      	bne.n	507e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5056:	2101      	movs	r1, #1
    5058:	2011      	movs	r0, #17
    505a:	e7f4      	b.n	5046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    505c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5060:	2802      	cmp	r0, #2
    5062:	d00e      	beq.n	5082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5064:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5068:	2801      	cmp	r0, #1
    506a:	d108      	bne.n	507e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    506c:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5070:	f88d 0000 	strb.w	r0, [sp]
    5074:	9800      	ldr	r0, [sp, #0]
    5076:	9000      	str	r0, [sp, #0]
    5078:	f89d 0000 	ldrb.w	r0, [sp]
    507c:	b108      	cbz	r0, 5082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    507e:	2000      	movs	r0, #0
    5080:	bd08      	pop	{r3, pc}
    5082:	2101      	movs	r1, #1
    5084:	2017      	movs	r0, #23
    5086:	e7de      	b.n	5046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5088:	20000124 	.word	0x20000124
    508c:	b538      	push	{r3, r4, r5, lr}
    508e:	2800      	cmp	r0, #0
    5090:	d173      	bne.n	517a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5092:	4c3b      	ldr	r4, [pc, #236]	; (5180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5094:	6860      	ldr	r0, [r4, #4]
    5096:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    509a:	07ca      	lsls	r2, r1, #31
    509c:	d002      	beq.n	50a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    509e:	2101      	movs	r1, #1
    50a0:	2009      	movs	r0, #9
    50a2:	e066      	b.n	5172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    50a4:	078a      	lsls	r2, r1, #30
    50a6:	d50a      	bpl.n	50be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    50a8:	2101      	movs	r1, #1
    50aa:	200c      	movs	r0, #12
    50ac:	f000 fd3a 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    50b0:	6860      	ldr	r0, [r4, #4]
    50b2:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    50b6:	f041 0101 	orr.w	r1, r1, #1
    50ba:	7001      	strb	r1, [r0, #0]
    50bc:	e05b      	b.n	5176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    50be:	074a      	lsls	r2, r1, #29
    50c0:	d502      	bpl.n	50c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    50c2:	2101      	movs	r1, #1
    50c4:	2013      	movs	r0, #19
    50c6:	e054      	b.n	5172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    50c8:	070a      	lsls	r2, r1, #28
    50ca:	d506      	bpl.n	50da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    50cc:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    50d0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    50d4:	2101      	movs	r1, #1
    50d6:	2007      	movs	r0, #7
    50d8:	e04b      	b.n	5172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    50da:	f011 0f30 	tst.w	r1, #48	; 0x30
    50de:	d044      	beq.n	516a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    50e0:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    50e4:	f88d 1000 	strb.w	r1, [sp]
    50e8:	9900      	ldr	r1, [sp, #0]
    50ea:	9100      	str	r1, [sp, #0]
    50ec:	f89d 1000 	ldrb.w	r1, [sp]
    50f0:	bbc1      	cbnz	r1, 5164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    50f2:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    50f6:	2500      	movs	r5, #0
    50f8:	f88d 1000 	strb.w	r1, [sp]
    50fc:	9900      	ldr	r1, [sp, #0]
    50fe:	9100      	str	r1, [sp, #0]
    5100:	f89d 1000 	ldrb.w	r1, [sp]
    5104:	b1c1      	cbz	r1, 5138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    5106:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    510a:	2925      	cmp	r1, #37	; 0x25
    510c:	d02b      	beq.n	5166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    510e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5112:	2925      	cmp	r1, #37	; 0x25
    5114:	d027      	beq.n	5166 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    5116:	2300      	movs	r3, #0
    5118:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    511c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5120:	f008 fe8a 	bl	de38 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5124:	6860      	ldr	r0, [r4, #4]
    5126:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    512a:	f021 0120 	bic.w	r1, r1, #32
    512e:	f041 0110 	orr.w	r1, r1, #16
    5132:	6001      	str	r1, [r0, #0]
    5134:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5138:	6860      	ldr	r0, [r4, #4]
    513a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    513e:	06c9      	lsls	r1, r1, #27
    5140:	d51b      	bpl.n	517a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5142:	f008 fe94 	bl	de6e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5146:	480e      	ldr	r0, [pc, #56]	; (5180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5148:	f009 f852 	bl	e1f0 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    514c:	6861      	ldr	r1, [r4, #4]
    514e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5152:	8bc2      	ldrh	r2, [r0, #30]
    5154:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5158:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    515a:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    515e:	2101      	movs	r1, #1
    5160:	2015      	movs	r0, #21
    5162:	e006      	b.n	5172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5164:	e009      	b.n	517a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5166:	2301      	movs	r3, #1
    5168:	e7d6      	b.n	5118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    516a:	0648      	lsls	r0, r1, #25
    516c:	d505      	bpl.n	517a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    516e:	2101      	movs	r1, #1
    5170:	2024      	movs	r0, #36	; 0x24
    5172:	f000 fcd7 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5176:	2001      	movs	r0, #1
    5178:	bd38      	pop	{r3, r4, r5, pc}
    517a:	2000      	movs	r0, #0
    517c:	bd38      	pop	{r3, r4, r5, pc}
    517e:	0000      	.short	0x0000
    5180:	20000124 	.word	0x20000124
    5184:	b570      	push	{r4, r5, r6, lr}
    5186:	460d      	mov	r5, r1
    5188:	4606      	mov	r6, r0
    518a:	f008 fd8a 	bl	dca2 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    518e:	4604      	mov	r4, r0
    5190:	4630      	mov	r0, r6
    5192:	f008 fd88 	bl	dca6 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    5196:	4629      	mov	r1, r5
    5198:	f000 f81e 	bl	51d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    519c:	b1b8      	cbz	r0, 51ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    519e:	4620      	mov	r0, r4
    51a0:	f008 fb22 	bl	d7e8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    51a4:	0001      	movs	r1, r0
    51a6:	d00d      	beq.n	51c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    51a8:	480a      	ldr	r0, [pc, #40]	; (51d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    51aa:	6840      	ldr	r0, [r0, #4]
    51ac:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    51b0:	428a      	cmp	r2, r1
    51b2:	d007      	beq.n	51c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    51b4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    51b8:	2901      	cmp	r1, #1
    51ba:	d005      	beq.n	51c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    51bc:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    51c0:	4220      	tst	r0, r4
    51c2:	d004      	beq.n	51ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    51c4:	2001      	movs	r0, #1
    51c6:	bd70      	pop	{r4, r5, r6, pc}
    51c8:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    51cc:	e7f8      	b.n	51c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    51ce:	2000      	movs	r0, #0
    51d0:	bd70      	pop	{r4, r5, r6, pc}
    51d2:	0000      	.short	0x0000
    51d4:	20000124 	.word	0x20000124
    51d8:	b570      	push	{r4, r5, r6, lr}
    51da:	460d      	mov	r5, r1
    51dc:	4604      	mov	r4, r0
    51de:	f008 fb03 	bl	d7e8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    51e2:	b350      	cbz	r0, 523a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    51e4:	4916      	ldr	r1, [pc, #88]	; (5240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    51e6:	6849      	ldr	r1, [r1, #4]
    51e8:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    51ec:	4282      	cmp	r2, r0
    51ee:	d024      	beq.n	523a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    51f0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    51f4:	2b01      	cmp	r3, #1
    51f6:	d005      	beq.n	5204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    51f8:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    51fc:	4223      	tst	r3, r4
    51fe:	d013      	beq.n	5228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    5200:	b11d      	cbz	r5, 520a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    5202:	e01a      	b.n	523a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5204:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5208:	e7f8      	b.n	51fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    520a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    520e:	4221      	tst	r1, r4
    5210:	d113      	bne.n	523a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5212:	b15a      	cbz	r2, 522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    5214:	2a04      	cmp	r2, #4
    5216:	d00e      	beq.n	5236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5218:	2804      	cmp	r0, #4
    521a:	d00c      	beq.n	5236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    521c:	2a08      	cmp	r2, #8
    521e:	d00a      	beq.n	5236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5220:	2808      	cmp	r0, #8
    5222:	d008      	beq.n	5236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5224:	4282      	cmp	r2, r0
    5226:	d908      	bls.n	523a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5228:	2000      	movs	r0, #0
    522a:	bd70      	pop	{r4, r5, r6, pc}
    522c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5230:	2006      	movs	r0, #6
    5232:	f7fb fbab 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5236:	4282      	cmp	r2, r0
    5238:	d3f6      	bcc.n	5228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    523a:	2001      	movs	r0, #1
    523c:	bd70      	pop	{r4, r5, r6, pc}
    523e:	0000      	.short	0x0000
    5240:	20000124 	.word	0x20000124
    5244:	b510      	push	{r4, lr}
    5246:	4c10      	ldr	r4, [pc, #64]	; (5288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5248:	2301      	movs	r3, #1
    524a:	2100      	movs	r1, #0
    524c:	6860      	ldr	r0, [r4, #4]
    524e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5252:	3080      	adds	r0, #128	; 0x80
    5254:	f008 fa1e 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5258:	b140      	cbz	r0, 526c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    525a:	6860      	ldr	r0, [r4, #4]
    525c:	2301      	movs	r3, #1
    525e:	2104      	movs	r1, #4
    5260:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5264:	3080      	adds	r0, #128	; 0x80
    5266:	f008 fa15 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    526a:	b108      	cbz	r0, 5270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    526c:	2000      	movs	r0, #0
    526e:	bd10      	pop	{r4, pc}
    5270:	6860      	ldr	r0, [r4, #4]
    5272:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5276:	2800      	cmp	r0, #0
    5278:	d0f9      	beq.n	526e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    527a:	2100      	movs	r1, #0
    527c:	2012      	movs	r0, #18
    527e:	f000 fc51 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5282:	2001      	movs	r0, #1
    5284:	bd10      	pop	{r4, pc}
    5286:	0000      	.short	0x0000
    5288:	20000124 	.word	0x20000124
    528c:	490d      	ldr	r1, [pc, #52]	; (52c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    528e:	4602      	mov	r2, r0
    5290:	7848      	ldrb	r0, [r1, #1]
    5292:	b9a0      	cbnz	r0, 52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5294:	f101 0010 	add.w	r0, r1, #16
    5298:	6840      	ldr	r0, [r0, #4]
    529a:	b142      	cbz	r2, 52ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    529c:	7889      	ldrb	r1, [r1, #2]
    529e:	0709      	lsls	r1, r1, #28
    52a0:	d503      	bpl.n	52aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    52a2:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    52a6:	2807      	cmp	r0, #7
    52a8:	d009      	beq.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    52aa:	2001      	movs	r0, #1
    52ac:	4770      	bx	lr
    52ae:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    52b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    52b4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    52b6:	428a      	cmp	r2, r1
    52b8:	d801      	bhi.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    52ba:	f7ff b83f 	b.w	433c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    52be:	2000      	movs	r0, #0
    52c0:	4770      	bx	lr
    52c2:	0000      	.short	0x0000
    52c4:	20000114 	.word	0x20000114
    52c8:	b538      	push	{r3, r4, r5, lr}
    52ca:	4c32      	ldr	r4, [pc, #200]	; (5394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    52cc:	4605      	mov	r5, r0
    52ce:	6860      	ldr	r0, [r4, #4]
    52d0:	3080      	adds	r0, #128	; 0x80
    52d2:	f009 fe6d 	bl	efb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    52d6:	2800      	cmp	r0, #0
    52d8:	d15b      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    52da:	2d00      	cmp	r5, #0
    52dc:	d159      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    52de:	6860      	ldr	r0, [r4, #4]
    52e0:	2301      	movs	r3, #1
    52e2:	4619      	mov	r1, r3
    52e4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    52e8:	3080      	adds	r0, #128	; 0x80
    52ea:	f008 f9d3 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    52ee:	2800      	cmp	r0, #0
    52f0:	d14f      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    52f2:	6860      	ldr	r0, [r4, #4]
    52f4:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    52f8:	f88d 1000 	strb.w	r1, [sp]
    52fc:	9900      	ldr	r1, [sp, #0]
    52fe:	9100      	str	r1, [sp, #0]
    5300:	f89d 2000 	ldrb.w	r2, [sp]
    5304:	2100      	movs	r1, #0
    5306:	b142      	cbz	r2, 531a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5308:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    530c:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5310:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5314:	2100      	movs	r1, #0
    5316:	2002      	movs	r0, #2
    5318:	e030      	b.n	537c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    531a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    531e:	2301      	movs	r3, #1
    5320:	2104      	movs	r1, #4
    5322:	3080      	adds	r0, #128	; 0x80
    5324:	f008 f9b6 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5328:	4605      	mov	r5, r0
    532a:	f7ff feaf 	bl	508c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    532e:	2800      	cmp	r0, #0
    5330:	d12f      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5332:	4628      	mov	r0, r5
    5334:	f7ff fe6c 	bl	5010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5338:	2800      	cmp	r0, #0
    533a:	d12a      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    533c:	f7ff ff82 	bl	5244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5340:	2800      	cmp	r0, #0
    5342:	d126      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5344:	6860      	ldr	r0, [r4, #4]
    5346:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    534a:	2909      	cmp	r1, #9
    534c:	d01a      	beq.n	5384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    534e:	2d00      	cmp	r5, #0
    5350:	d11f      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5352:	f000 fb13 	bl	597c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5356:	2800      	cmp	r0, #0
    5358:	d11b      	bne.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    535a:	6860      	ldr	r0, [r4, #4]
    535c:	2301      	movs	r3, #1
    535e:	2100      	movs	r1, #0
    5360:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5364:	3080      	adds	r0, #128	; 0x80
    5366:	f008 f995 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    536a:	2800      	cmp	r0, #0
    536c:	d011      	beq.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    536e:	6860      	ldr	r0, [r4, #4]
    5370:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5374:	2800      	cmp	r0, #0
    5376:	d00c      	beq.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5378:	2100      	movs	r1, #0
    537a:	20ff      	movs	r0, #255	; 0xff
    537c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5380:	f000 bbd0 	b.w	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5384:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5388:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    538c:	2100      	movs	r1, #0
    538e:	2007      	movs	r0, #7
    5390:	e7f4      	b.n	537c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5392:	bd38      	pop	{r3, r4, r5, pc}
    5394:	20000124 	.word	0x20000124
    5398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    539a:	4d2b      	ldr	r5, [pc, #172]	; (5448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    539c:	0006      	movs	r6, r0
    539e:	f105 0410 	add.w	r4, r5, #16
    53a2:	d133      	bne.n	540c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    53a4:	f000 f8aa 	bl	54fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    53a8:	f000 f852 	bl	5450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    53ac:	0006      	movs	r6, r0
    53ae:	d12d      	bne.n	540c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    53b0:	8869      	ldrh	r1, [r5, #2]
    53b2:	0748      	lsls	r0, r1, #29
    53b4:	d506      	bpl.n	53c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    53b6:	6860      	ldr	r0, [r4, #4]
    53b8:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    53bc:	2806      	cmp	r0, #6
    53be:	d101      	bne.n	53c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    53c0:	2001      	movs	r0, #1
    53c2:	7028      	strb	r0, [r5, #0]
    53c4:	0788      	lsls	r0, r1, #30
    53c6:	d516      	bpl.n	53f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    53c8:	68a8      	ldr	r0, [r5, #8]
    53ca:	78c0      	ldrb	r0, [r0, #3]
    53cc:	282b      	cmp	r0, #43	; 0x2b
    53ce:	d207      	bcs.n	53e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    53d0:	491e      	ldr	r1, [pc, #120]	; (544c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    53d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    53d6:	b119      	cbz	r1, 53e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    53d8:	481b      	ldr	r0, [pc, #108]	; (5448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    53da:	3010      	adds	r0, #16
    53dc:	4788      	blx	r1
    53de:	e00a      	b.n	53f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    53e0:	28ff      	cmp	r0, #255	; 0xff
    53e2:	d004      	beq.n	53ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    53e4:	f640 0148 	movw	r1, #2120	; 0x848
    53e8:	2031      	movs	r0, #49	; 0x31
    53ea:	f7fb facf 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ee:	4816      	ldr	r0, [pc, #88]	; (5448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    53f0:	3010      	adds	r0, #16
    53f2:	f009 fe55 	bl	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    53f6:	78a8      	ldrb	r0, [r5, #2]
    53f8:	06c0      	lsls	r0, r0, #27
    53fa:	d507      	bpl.n	540c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    53fc:	6860      	ldr	r0, [r4, #4]
    53fe:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5402:	290a      	cmp	r1, #10
    5404:	d102      	bne.n	540c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5406:	210b      	movs	r1, #11
    5408:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    540c:	7868      	ldrb	r0, [r5, #1]
    540e:	0700      	lsls	r0, r0, #28
    5410:	d518      	bpl.n	5444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5412:	6860      	ldr	r0, [r4, #4]
    5414:	2301      	movs	r3, #1
    5416:	2105      	movs	r1, #5
    5418:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    541c:	3080      	adds	r0, #128	; 0x80
    541e:	f008 f939 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5422:	b108      	cbz	r0, 5428 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5424:	2608      	movs	r6, #8
    5426:	e00d      	b.n	5444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5428:	2500      	movs	r5, #0
    542a:	4669      	mov	r1, sp
    542c:	2003      	movs	r0, #3
    542e:	9500      	str	r5, [sp, #0]
    5430:	f7fc fb3c 	bl	1aac <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5434:	9800      	ldr	r0, [sp, #0]
    5436:	b128      	cbz	r0, 5444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5438:	7205      	strb	r5, [r0, #8]
    543a:	2210      	movs	r2, #16
    543c:	6861      	ldr	r1, [r4, #4]
    543e:	9800      	ldr	r0, [sp, #0]
    5440:	f008 fcd0 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5444:	4630      	mov	r0, r6
    5446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5448:	20000114 	.word	0x20000114
    544c:	200001d8 	.word	0x200001d8
    5450:	b570      	push	{r4, r5, r6, lr}
    5452:	4d28      	ldr	r5, [pc, #160]	; (54f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5454:	2000      	movs	r0, #0
    5456:	78a9      	ldrb	r1, [r5, #2]
    5458:	07c9      	lsls	r1, r1, #31
    545a:	d017      	beq.n	548c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    545c:	68e8      	ldr	r0, [r5, #12]
    545e:	f105 0410 	add.w	r4, r5, #16
    5462:	2301      	movs	r3, #1
    5464:	78c6      	ldrb	r6, [r0, #3]
    5466:	6860      	ldr	r0, [r4, #4]
    5468:	2105      	movs	r1, #5
    546a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    546e:	3080      	adds	r0, #128	; 0x80
    5470:	f008 f910 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5474:	b158      	cbz	r0, 548e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    5476:	1eb6      	subs	r6, r6, #2
    5478:	2e0a      	cmp	r6, #10
    547a:	d206      	bcs.n	548a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    547c:	e8df f006 	tbb	[pc, r6]
    5480:	05050707 	.word	0x05050707
    5484:	05050707 	.word	0x05050707
    5488:	0707      	.short	0x0707
    548a:	2008      	movs	r0, #8
    548c:	bd70      	pop	{r4, r5, r6, pc}
    548e:	68e8      	ldr	r0, [r5, #12]
    5490:	f7fd f944 	bl	271c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5494:	b338      	cbz	r0, 54e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5496:	68e8      	ldr	r0, [r5, #12]
    5498:	78c5      	ldrb	r5, [r0, #3]
    549a:	b11d      	cbz	r5, 54a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    549c:	2d01      	cmp	r5, #1
    549e:	d001      	beq.n	54a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    54a0:	2d16      	cmp	r5, #22
    54a2:	d113      	bne.n	54cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    54a4:	6860      	ldr	r0, [r4, #4]
    54a6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    54aa:	f008 f94b 	bl	d744 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    54ae:	b168      	cbz	r0, 54cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    54b0:	6861      	ldr	r1, [r4, #4]
    54b2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    54b6:	2820      	cmp	r0, #32
    54b8:	d008      	beq.n	54cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    54ba:	2821      	cmp	r0, #33	; 0x21
    54bc:	d003      	beq.n	54c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    54be:	2d16      	cmp	r5, #22
    54c0:	d00f      	beq.n	54e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    54c2:	2002      	movs	r0, #2
    54c4:	bd70      	pop	{r4, r5, r6, pc}
    54c6:	202e      	movs	r0, #46	; 0x2e
    54c8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    54cc:	2d2b      	cmp	r5, #43	; 0x2b
    54ce:	d20a      	bcs.n	54e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    54d0:	4809      	ldr	r0, [pc, #36]	; (54f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    54d2:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    54d6:	b131      	cbz	r1, 54e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    54d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    54dc:	4805      	ldr	r0, [pc, #20]	; (54f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    54de:	3010      	adds	r0, #16
    54e0:	4708      	bx	r1
    54e2:	2020      	movs	r0, #32
    54e4:	bd70      	pop	{r4, r5, r6, pc}
    54e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    54ea:	4802      	ldr	r0, [pc, #8]	; (54f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    54ec:	3010      	adds	r0, #16
    54ee:	f000 bd47 	b.w	5f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    54f2:	0000      	.short	0x0000
    54f4:	20000114 	.word	0x20000114
    54f8:	2000012c 	.word	0x2000012c
    54fc:	b570      	push	{r4, r5, r6, lr}
    54fe:	4e25      	ldr	r6, [pc, #148]	; (5594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5500:	78b0      	ldrb	r0, [r6, #2]
    5502:	0700      	lsls	r0, r0, #28
    5504:	d545      	bpl.n	5592 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5506:	f106 0410 	add.w	r4, r6, #16
    550a:	6860      	ldr	r0, [r4, #4]
    550c:	3080      	adds	r0, #128	; 0x80
    550e:	f009 fd4f 	bl	efb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5512:	b148      	cbz	r0, 5528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5514:	6860      	ldr	r0, [r4, #4]
    5516:	21fe      	movs	r1, #254	; 0xfe
    5518:	2500      	movs	r5, #0
    551a:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    551e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5522:	291a      	cmp	r1, #26
    5524:	d10e      	bne.n	5544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5526:	e004      	b.n	5532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5528:	f640 0154 	movw	r1, #2132	; 0x854
    552c:	2031      	movs	r0, #49	; 0x31
    552e:	f7fb fa2d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5532:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5536:	4817      	ldr	r0, [pc, #92]	; (5594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5538:	3010      	adds	r0, #16
    553a:	f008 fd94 	bl	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    553e:	6860      	ldr	r0, [r4, #4]
    5540:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5544:	6860      	ldr	r0, [r4, #4]
    5546:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    554a:	2920      	cmp	r1, #32
    554c:	d002      	beq.n	5554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    554e:	2931      	cmp	r1, #49	; 0x31
    5550:	d116      	bne.n	5580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5552:	e00e      	b.n	5572 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5554:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5558:	2301      	movs	r3, #1
    555a:	210b      	movs	r1, #11
    555c:	3080      	adds	r0, #128	; 0x80
    555e:	f008 f899 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5562:	b108      	cbz	r0, 5568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    5564:	202e      	movs	r0, #46	; 0x2e
    5566:	e000      	b.n	556a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    5568:	2021      	movs	r0, #33	; 0x21
    556a:	6861      	ldr	r1, [r4, #4]
    556c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5570:	e006      	b.n	5580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5572:	2101      	movs	r1, #1
    5574:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5578:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    557c:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5580:	6860      	ldr	r0, [r4, #4]
    5582:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5586:	2907      	cmp	r1, #7
    5588:	d103      	bne.n	5592 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    558a:	2102      	movs	r1, #2
    558c:	7031      	strb	r1, [r6, #0]
    558e:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5592:	bd70      	pop	{r4, r5, r6, pc}
    5594:	20000114 	.word	0x20000114
    5598:	b538      	push	{r3, r4, r5, lr}
    559a:	4605      	mov	r5, r0
    559c:	4668      	mov	r0, sp
    559e:	f7fc f91f 	bl	17e0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    55a2:	b308      	cbz	r0, 55e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    55a4:	2222      	movs	r2, #34	; 0x22
    55a6:	2100      	movs	r1, #0
    55a8:	9800      	ldr	r0, [sp, #0]
    55aa:	f00b f820 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    55ae:	2103      	movs	r1, #3
    55b0:	9800      	ldr	r0, [sp, #0]
    55b2:	f008 fb90 	bl	dcd6 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    55b6:	9800      	ldr	r0, [sp, #0]
    55b8:	7801      	ldrb	r1, [r0, #0]
    55ba:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    55be:	7001      	strb	r1, [r0, #0]
    55c0:	4629      	mov	r1, r5
    55c2:	f7fd f8bb 	bl	273c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    55c6:	4c5b      	ldr	r4, [pc, #364]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    55c8:	2d11      	cmp	r5, #17
    55ca:	d032      	beq.n	5632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    55cc:	dc0f      	bgt.n	55ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    55ce:	f1a5 0502 	sub.w	r5, r5, #2
    55d2:	2d0d      	cmp	r5, #13
    55d4:	d21f      	bcs.n	5616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    55d6:	e8df f005 	tbb	[pc, r5]
    55da:	1e21      	.short	0x1e21
    55dc:	26a3a355 	.word	0x26a3a355
    55e0:	a31e621e 	.word	0xa31e621e
    55e4:	0090393f 	.word	0x0090393f
    55e8:	f640 21fe 	movw	r1, #2814	; 0xafe
    55ec:	e09e      	b.n	572c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    55ee:	2d17      	cmp	r5, #23
    55f0:	d075      	beq.n	56de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    55f2:	dc08      	bgt.n	5606 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    55f4:	f1a5 0512 	sub.w	r5, r5, #18
    55f8:	2d05      	cmp	r5, #5
    55fa:	d20c      	bcs.n	5616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    55fc:	e8df f005 	tbb	[pc, r5]
    5600:	54549090 	.word	0x54549090
    5604:	0038      	.short	0x0038
    5606:	2d23      	cmp	r5, #35	; 0x23
    5608:	d07b      	beq.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    560a:	2d24      	cmp	r5, #36	; 0x24
    560c:	d079      	beq.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    560e:	2d25      	cmp	r5, #37	; 0x25
    5610:	d077      	beq.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5612:	2dff      	cmp	r5, #255	; 0xff
    5614:	d07c      	beq.n	5710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5616:	f640 31aa 	movw	r1, #2986	; 0xbaa
    561a:	e087      	b.n	572c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    561c:	6861      	ldr	r1, [r4, #4]
    561e:	9800      	ldr	r0, [sp, #0]
    5620:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5624:	e016      	b.n	5654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5626:	6860      	ldr	r0, [r4, #4]
    5628:	9900      	ldr	r1, [sp, #0]
    562a:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    562e:	7108      	strb	r0, [r1, #4]
    5630:	e076      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5632:	6860      	ldr	r0, [r4, #4]
    5634:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5638:	9800      	ldr	r0, [sp, #0]
    563a:	f008 fb38 	bl	dcae <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    563e:	6860      	ldr	r0, [r4, #4]
    5640:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5644:	9800      	ldr	r0, [sp, #0]
    5646:	f008 fb36 	bl	dcb6 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    564a:	e069      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    564c:	6861      	ldr	r1, [r4, #4]
    564e:	9800      	ldr	r0, [sp, #0]
    5650:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5654:	7101      	strb	r1, [r0, #4]
    5656:	e063      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5658:	9800      	ldr	r0, [sp, #0]
    565a:	210d      	movs	r1, #13
    565c:	7101      	strb	r1, [r0, #4]
    565e:	2159      	movs	r1, #89	; 0x59
    5660:	7141      	strb	r1, [r0, #5]
    5662:	2100      	movs	r1, #0
    5664:	7181      	strb	r1, [r0, #6]
    5666:	2177      	movs	r1, #119	; 0x77
    5668:	71c1      	strb	r1, [r0, #7]
    566a:	2110      	movs	r1, #16
    566c:	7201      	strb	r1, [r0, #8]
    566e:	e057      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5670:	9800      	ldr	r0, [sp, #0]
    5672:	6861      	ldr	r1, [r4, #4]
    5674:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5678:	7101      	strb	r1, [r0, #4]
    567a:	6861      	ldr	r1, [r4, #4]
    567c:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5680:	7141      	strb	r1, [r0, #5]
    5682:	e04d      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5684:	6861      	ldr	r1, [r4, #4]
    5686:	9800      	ldr	r0, [sp, #0]
    5688:	f501 7110 	add.w	r1, r1, #576	; 0x240
    568c:	f008 faca 	bl	dc24 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5690:	6861      	ldr	r1, [r4, #4]
    5692:	9800      	ldr	r0, [sp, #0]
    5694:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5698:	f008 fac1 	bl	dc1e <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    569c:	e040      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    569e:	4825      	ldr	r0, [pc, #148]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    56a0:	9900      	ldr	r1, [sp, #0]
    56a2:	f7fd fc0b 	bl	2ebc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    56a6:	e03b      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    56a8:	6860      	ldr	r0, [r4, #4]
    56aa:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    56ae:	9800      	ldr	r0, [sp, #0]
    56b0:	f008 fb19 	bl	dce6 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    56b4:	6860      	ldr	r0, [r4, #4]
    56b6:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    56ba:	9800      	ldr	r0, [sp, #0]
    56bc:	f008 fb17 	bl	dcee <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    56c0:	6860      	ldr	r0, [r4, #4]
    56c2:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    56c6:	9800      	ldr	r0, [sp, #0]
    56c8:	f008 fb15 	bl	dcf6 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    56cc:	6860      	ldr	r0, [r4, #4]
    56ce:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    56d2:	9800      	ldr	r0, [sp, #0]
    56d4:	f008 fb13 	bl	dcfe <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    56d8:	e022      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    56da:	e000      	b.n	56de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    56dc:	e011      	b.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    56de:	6861      	ldr	r1, [r4, #4]
    56e0:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    56e4:	2801      	cmp	r0, #1
    56e6:	9800      	ldr	r0, [sp, #0]
    56e8:	d0c4      	beq.n	5674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    56ea:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    56ee:	7101      	strb	r1, [r0, #4]
    56f0:	6861      	ldr	r1, [r4, #4]
    56f2:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    56f6:	e7c3      	b.n	5680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    56f8:	e00a      	b.n	5710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    56fa:	9800      	ldr	r0, [sp, #0]
    56fc:	f7fd fb88 	bl	2e10 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5700:	e00e      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5702:	4b0d      	ldr	r3, [pc, #52]	; (5738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5704:	4a0b      	ldr	r2, [pc, #44]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5706:	4628      	mov	r0, r5
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	9900      	ldr	r1, [sp, #0]
    570c:	4798      	blx	r3
    570e:	e007      	b.n	5720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5710:	6860      	ldr	r0, [r4, #4]
    5712:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5716:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    571a:	9800      	ldr	r0, [sp, #0]
    571c:	f008 facd 	bl	dcba <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5720:	f7fc f838 	bl	1794 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5724:	2800      	cmp	r0, #0
    5726:	d104      	bne.n	5732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5728:	f640 31ae 	movw	r1, #2990	; 0xbae
    572c:	2031      	movs	r0, #49	; 0x31
    572e:	f7fb f92d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5732:	bd38      	pop	{r3, r4, r5, pc}
    5734:	20000124 	.word	0x20000124
    5738:	20000284 	.word	0x20000284
    573c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5740:	4e8c      	ldr	r6, [pc, #560]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5742:	468a      	mov	sl, r1
    5744:	6870      	ldr	r0, [r6, #4]
    5746:	8800      	ldrh	r0, [r0, #0]
    5748:	f7fb fdf8 	bl	133c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    574c:	0007      	movs	r7, r0
    574e:	d00c      	beq.n	576a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5750:	f1a6 0510 	sub.w	r5, r6, #16
    5754:	f04f 0400 	mov.w	r4, #0
    5758:	8868      	ldrh	r0, [r5, #2]
    575a:	05c0      	lsls	r0, r0, #23
    575c:	d50a      	bpl.n	5774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    575e:	6870      	ldr	r0, [r6, #4]
    5760:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5764:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5768:	e009      	b.n	577e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    576a:	f640 6189 	movw	r1, #3721	; 0xe89
    576e:	2031      	movs	r0, #49	; 0x31
    5770:	f7fb f90c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5774:	6871      	ldr	r1, [r6, #4]
    5776:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    577a:	1c40      	adds	r0, r0, #1
    577c:	8008      	strh	r0, [r1, #0]
    577e:	f000 ff5b 	bl	6638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5782:	f04f 0901 	mov.w	r9, #1
    5786:	b340      	cbz	r0, 57da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5788:	8868      	ldrh	r0, [r5, #2]
    578a:	0500      	lsls	r0, r0, #20
    578c:	d506      	bpl.n	579c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    578e:	6870      	ldr	r0, [r6, #4]
    5790:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5794:	b111      	cbz	r1, 579c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5796:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    579a:	e01e      	b.n	57da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    579c:	6870      	ldr	r0, [r6, #4]
    579e:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    57a2:	1c49      	adds	r1, r1, #1
    57a4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    57a8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    57ac:	428a      	cmp	r2, r1
    57ae:	d301      	bcc.n	57b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    57b0:	1a53      	subs	r3, r2, r1
    57b2:	e000      	b.n	57b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    57b4:	2300      	movs	r3, #0
    57b6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    57ba:	f10c 0c05 	add.w	ip, ip, #5
    57be:	4563      	cmp	r3, ip
    57c0:	d801      	bhi.n	57c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    57c2:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    57c6:	4291      	cmp	r1, r2
    57c8:	d307      	bcc.n	57da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    57ca:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    57ce:	2202      	movs	r2, #2
    57d0:	4969      	ldr	r1, [pc, #420]	; (5978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    57d2:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    57d6:	f008 fb19 	bl	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    57da:	8868      	ldrh	r0, [r5, #2]
    57dc:	f04f 0b02 	mov.w	fp, #2
    57e0:	f410 7f40 	tst.w	r0, #768	; 0x300
    57e4:	d00e      	beq.n	5804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    57e6:	6870      	ldr	r0, [r6, #4]
    57e8:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    57ec:	b111      	cbz	r1, 57f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    57ee:	2903      	cmp	r1, #3
    57f0:	d108      	bne.n	5804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    57f2:	e002      	b.n	57fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    57f4:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    57f8:	e001      	b.n	57fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    57fa:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    57fe:	2101      	movs	r1, #1
    5800:	f7fe fdac 	bl	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5804:	6870      	ldr	r0, [r6, #4]
    5806:	46b0      	mov	r8, r6
    5808:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    580c:	2901      	cmp	r1, #1
    580e:	d104      	bne.n	581a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5810:	8869      	ldrh	r1, [r5, #2]
    5812:	0549      	lsls	r1, r1, #21
    5814:	d501      	bpl.n	581a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5816:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    581a:	9900      	ldr	r1, [sp, #0]
    581c:	2900      	cmp	r1, #0
    581e:	d179      	bne.n	5914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5820:	78a9      	ldrb	r1, [r5, #2]
    5822:	0649      	lsls	r1, r1, #25
    5824:	d502      	bpl.n	582c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5826:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    582a:	e004      	b.n	5836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    582c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5830:	1c49      	adds	r1, r1, #1
    5832:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5836:	4650      	mov	r0, sl
    5838:	f7ff fdae 	bl	5398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    583c:	ea40 000a 	orr.w	r0, r0, sl
    5840:	4682      	mov	sl, r0
    5842:	f7ff fd41 	bl	52c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    5846:	f8d8 6004 	ldr.w	r6, [r8, #4]
    584a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    584e:	1c40      	adds	r0, r0, #1
    5850:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5854:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    5858:	b128      	cbz	r0, 5866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    585a:	f7fc f965 	bl	1b28 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    585e:	b1b0      	cbz	r0, 588e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5860:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5864:	e013      	b.n	588e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5866:	f7fc f83d 	bl	18e4 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    586a:	b108      	cbz	r0, 5870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    586c:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5870:	f7fc f832 	bl	18d8 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    5874:	b158      	cbz	r0, 588e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5876:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    587a:	1c40      	adds	r0, r0, #1
    587c:	b2c0      	uxtb	r0, r0
    587e:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    5882:	2802      	cmp	r0, #2
    5884:	d903      	bls.n	588e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5886:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    588a:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    588e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5892:	4646      	mov	r6, r8
    5894:	2301      	movs	r3, #1
    5896:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    589a:	2100      	movs	r1, #0
    589c:	3080      	adds	r0, #128	; 0x80
    589e:	f007 fef9 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58a2:	b920      	cbnz	r0, 58ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    58a4:	6870      	ldr	r0, [r6, #4]
    58a6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    58aa:	280b      	cmp	r0, #11
    58ac:	d15f      	bne.n	596e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    58ae:	6870      	ldr	r0, [r6, #4]
    58b0:	2301      	movs	r3, #1
    58b2:	2100      	movs	r1, #0
    58b4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    58b8:	3080      	adds	r0, #128	; 0x80
    58ba:	f007 feeb 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58be:	b350      	cbz	r0, 5916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58c0:	6870      	ldr	r0, [r6, #4]
    58c2:	2301      	movs	r3, #1
    58c4:	2100      	movs	r1, #0
    58c6:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    58ca:	3080      	adds	r0, #128	; 0x80
    58cc:	f007 fee2 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    58d0:	b308      	cbz	r0, 5916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58d2:	6870      	ldr	r0, [r6, #4]
    58d4:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    58d8:	2902      	cmp	r1, #2
    58da:	d148      	bne.n	596e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    58dc:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    58e0:	b9c8      	cbnz	r0, 5916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58e2:	4638      	mov	r0, r7
    58e4:	f007 f9f7 	bl	ccd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    58e8:	b1a8      	cbz	r0, 5916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58ea:	6870      	ldr	r0, [r6, #4]
    58ec:	3080      	adds	r0, #128	; 0x80
    58ee:	f009 fb5f 	bl	efb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    58f2:	b980      	cbnz	r0, 5916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    58f4:	6871      	ldr	r1, [r6, #4]
    58f6:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    58fa:	2801      	cmp	r0, #1
    58fc:	d937      	bls.n	596e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    58fe:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    5902:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    5906:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    590a:	1e93      	subs	r3, r2, #2
    590c:	4298      	cmp	r0, r3
    590e:	db03      	blt.n	5918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    5910:	2001      	movs	r0, #1
    5912:	e004      	b.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    5914:	e01c      	b.n	5950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    5916:	e02a      	b.n	596e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5918:	1a10      	subs	r0, r2, r0
    591a:	1e40      	subs	r0, r0, #1
    591c:	b280      	uxth	r0, r0
    591e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    5922:	88aa      	ldrh	r2, [r5, #4]
    5924:	4293      	cmp	r3, r2
    5926:	d301      	bcc.n	592c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    5928:	2201      	movs	r2, #1
    592a:	e002      	b.n	5932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    592c:	1ad2      	subs	r2, r2, r3
    592e:	1c52      	adds	r2, r2, #1
    5930:	b292      	uxth	r2, r2
    5932:	4290      	cmp	r0, r2
    5934:	d900      	bls.n	5938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    5936:	4610      	mov	r0, r2
    5938:	2801      	cmp	r0, #1
    593a:	d101      	bne.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    593c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    5940:	6871      	ldr	r1, [r6, #4]
    5942:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5946:	4410      	add	r0, r2
    5948:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    594c:	f000 ff8e 	bl	686c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    5950:	78a8      	ldrb	r0, [r5, #2]
    5952:	4652      	mov	r2, sl
    5954:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5958:	9800      	ldr	r0, [sp, #0]
    595a:	f000 fe81 	bl	6660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    595e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5962:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    5966:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    596a:	f7fb befd 	b.w	1768 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    596e:	2001      	movs	r0, #1
    5970:	6871      	ldr	r1, [r6, #4]
    5972:	e7e3      	b.n	593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    5974:	20000124 	.word	0x20000124
    5978:	0000e2ef 	.word	0x0000e2ef
    597c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    597e:	4c68      	ldr	r4, [pc, #416]	; (5b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    5980:	2301      	movs	r3, #1
    5982:	2100      	movs	r1, #0
    5984:	6860      	ldr	r0, [r4, #4]
    5986:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    598a:	3080      	adds	r0, #128	; 0x80
    598c:	f007 fe82 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5990:	2800      	cmp	r0, #0
    5992:	d07a      	beq.n	5a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    5994:	6860      	ldr	r0, [r4, #4]
    5996:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    599a:	2500      	movs	r5, #0
    599c:	b139      	cbz	r1, 59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    599e:	2100      	movs	r1, #0
    59a0:	200e      	movs	r0, #14
    59a2:	f000 f8bf 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    59a6:	6860      	ldr	r0, [r4, #4]
    59a8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    59ac:	e0b5      	b.n	5b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    59ae:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    59b2:	b119      	cbz	r1, 59bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    59b4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    59b8:	0789      	lsls	r1, r1, #30
    59ba:	d016      	beq.n	59ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    59bc:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    59c0:	f88d 1004 	strb.w	r1, [sp, #4]
    59c4:	9901      	ldr	r1, [sp, #4]
    59c6:	9101      	str	r1, [sp, #4]
    59c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    59cc:	b141      	cbz	r1, 59e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    59ce:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    59d2:	f88d 1000 	strb.w	r1, [sp]
    59d6:	9900      	ldr	r1, [sp, #0]
    59d8:	9100      	str	r1, [sp, #0]
    59da:	f89d 1000 	ldrb.w	r1, [sp]
    59de:	b189      	cbz	r1, 5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    59e0:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    59e4:	2901      	cmp	r1, #1
    59e6:	d030      	beq.n	5a4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    59e8:	e040      	b.n	5a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    59ea:	2100      	movs	r1, #0
    59ec:	200c      	movs	r0, #12
    59ee:	f000 f899 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    59f2:	6860      	ldr	r0, [r4, #4]
    59f4:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    59f8:	f041 0101 	orr.w	r1, r1, #1
    59fc:	7001      	strb	r1, [r0, #0]
    59fe:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    5a02:	e08a      	b.n	5b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5a04:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a08:	2925      	cmp	r1, #37	; 0x25
    5a0a:	d01c      	beq.n	5a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5a0c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5a10:	2925      	cmp	r1, #37	; 0x25
    5a12:	d018      	beq.n	5a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5a14:	f05f 0300 	movs.w	r3, #0
    5a18:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5a1c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5a20:	f008 fa0a 	bl	de38 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a24:	6860      	ldr	r0, [r4, #4]
    5a26:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    5a2a:	2100      	movs	r1, #0
    5a2c:	2014      	movs	r0, #20
    5a2e:	f000 f879 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a32:	6861      	ldr	r1, [r4, #4]
    5a34:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a38:	8bc2      	ldrh	r2, [r0, #30]
    5a3a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5a3e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5a40:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5a44:	e069      	b.n	5b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5a46:	2301      	movs	r3, #1
    5a48:	e7e6      	b.n	5a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    5a4a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    5a4e:	f88d 1000 	strb.w	r1, [sp]
    5a52:	9900      	ldr	r1, [sp, #0]
    5a54:	9100      	str	r1, [sp, #0]
    5a56:	f89d 1000 	ldrb.w	r1, [sp]
    5a5a:	b939      	cbnz	r1, 5a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5a5c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a60:	2301      	movs	r3, #1
    5a62:	210b      	movs	r1, #11
    5a64:	3080      	adds	r0, #128	; 0x80
    5a66:	f007 fe15 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a6a:	b178      	cbz	r0, 5a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    5a6c:	6860      	ldr	r0, [r4, #4]
    5a6e:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    5a72:	f88d 1000 	strb.w	r1, [sp]
    5a76:	9900      	ldr	r1, [sp, #0]
    5a78:	9100      	str	r1, [sp, #0]
    5a7a:	f89d 1000 	ldrb.w	r1, [sp]
    5a7e:	b3b9      	cbz	r1, 5af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    5a80:	2100      	movs	r1, #0
    5a82:	2023      	movs	r0, #35	; 0x23
    5a84:	f000 f84e 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a88:	e047      	b.n	5b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5a8a:	e030      	b.n	5aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5a8c:	6860      	ldr	r0, [r4, #4]
    5a8e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5a92:	f009 fa95 	bl	efc0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5a96:	4605      	mov	r5, r0
    5a98:	6860      	ldr	r0, [r4, #4]
    5a9a:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5a9e:	f009 fa8f 	bl	efc0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5aa2:	4606      	mov	r6, r0
    5aa4:	6860      	ldr	r0, [r4, #4]
    5aa6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    5aaa:	4628      	mov	r0, r5
    5aac:	f009 fa93 	bl	efd6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5ab0:	b150      	cbz	r0, 5ac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5ab2:	6860      	ldr	r0, [r4, #4]
    5ab4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    5ab8:	4630      	mov	r0, r6
    5aba:	f009 fa8c 	bl	efd6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5abe:	b118      	cbz	r0, 5ac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5ac0:	2000      	movs	r0, #0
    5ac2:	f000 f943 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5ac6:	e011      	b.n	5aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5ac8:	6860      	ldr	r0, [r4, #4]
    5aca:	2301      	movs	r3, #1
    5acc:	2103      	movs	r1, #3
    5ace:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ad2:	3080      	adds	r0, #128	; 0x80
    5ad4:	f007 fdde 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ad8:	b940      	cbnz	r0, 5aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5ada:	6860      	ldr	r0, [r4, #4]
    5adc:	2301      	movs	r3, #1
    5ade:	2102      	movs	r1, #2
    5ae0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ae4:	3080      	adds	r0, #128	; 0x80
    5ae6:	f007 fdd5 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5aea:	b110      	cbz	r0, 5af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    5aec:	2000      	movs	r0, #0
    5aee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5af0:	e002      	b.n	5af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    5af2:	2100      	movs	r1, #0
    5af4:	2016      	movs	r0, #22
    5af6:	e7c5      	b.n	5a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    5af8:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5afc:	f88d 0000 	strb.w	r0, [sp]
    5b00:	9800      	ldr	r0, [sp, #0]
    5b02:	9000      	str	r0, [sp, #0]
    5b04:	f89d 0000 	ldrb.w	r0, [sp]
    5b08:	2800      	cmp	r0, #0
    5b0a:	d0f0      	beq.n	5aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5b0c:	2100      	movs	r1, #0
    5b0e:	2025      	movs	r0, #37	; 0x25
    5b10:	f000 f808 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5b14:	6860      	ldr	r0, [r4, #4]
    5b16:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    5b1a:	2001      	movs	r0, #1
    5b1c:	e7e7      	b.n	5aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5b1e:	0000      	.short	0x0000
    5b20:	20000124 	.word	0x20000124
    5b24:	b570      	push	{r4, r5, r6, lr}
    5b26:	4c0d      	ldr	r4, [pc, #52]	; (5b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    5b28:	4606      	mov	r6, r0
    5b2a:	460d      	mov	r5, r1
    5b2c:	6860      	ldr	r0, [r4, #4]
    5b2e:	3080      	adds	r0, #128	; 0x80
    5b30:	f009 fa3e 	bl	efb0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b34:	b120      	cbz	r0, 5b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    5b36:	f640 31b3 	movw	r1, #2995	; 0xbb3
    5b3a:	2031      	movs	r0, #49	; 0x31
    5b3c:	f7fa ff26 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b40:	6862      	ldr	r2, [r4, #4]
    5b42:	2000      	movs	r0, #0
    5b44:	2d01      	cmp	r5, #1
    5b46:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    5b4a:	d004      	beq.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    5b4c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    5b50:	2001      	movs	r0, #1
    5b52:	7110      	strb	r0, [r2, #4]
    5b54:	bd70      	pop	{r4, r5, r6, pc}
    5b56:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    5b5a:	bd70      	pop	{r4, r5, r6, pc}
    5b5c:	20000124 	.word	0x20000124
    5b60:	b538      	push	{r3, r4, r5, lr}
    5b62:	4c1f      	ldr	r4, [pc, #124]	; (5be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5b64:	2500      	movs	r5, #0
    5b66:	6860      	ldr	r0, [r4, #4]
    5b68:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    5b6c:	2901      	cmp	r1, #1
    5b6e:	d00a      	beq.n	5b86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    5b70:	2902      	cmp	r1, #2
    5b72:	d133      	bne.n	5bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5b74:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    5b78:	b1d9      	cbz	r1, 5bb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    5b7a:	2106      	movs	r1, #6
    5b7c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b80:	2101      	movs	r1, #1
    5b82:	2002      	movs	r0, #2
    5b84:	e025      	b.n	5bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5b86:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    5b8a:	f88d 1000 	strb.w	r1, [sp]
    5b8e:	9900      	ldr	r1, [sp, #0]
    5b90:	9100      	str	r1, [sp, #0]
    5b92:	f89d 1000 	ldrb.w	r1, [sp]
    5b96:	2900      	cmp	r1, #0
    5b98:	d120      	bne.n	5bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5b9a:	f500 7384 	add.w	r3, r0, #264	; 0x108
    5b9e:	f500 710e 	add.w	r1, r0, #568	; 0x238
    5ba2:	2200      	movs	r2, #0
    5ba4:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    5ba8:	f007 fd3f 	bl	d62a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    5bac:	2101      	movs	r1, #1
    5bae:	2005      	movs	r0, #5
    5bb0:	e00f      	b.n	5bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5bb2:	2103      	movs	r1, #3
    5bb4:	2206      	movs	r2, #6
    5bb6:	480a      	ldr	r0, [pc, #40]	; (5be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5bb8:	f008 fa63 	bl	e082 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    5bbc:	6860      	ldr	r0, [r4, #4]
    5bbe:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    5bc2:	0880      	lsrs	r0, r0, #2
    5bc4:	f010 0f01 	tst.w	r0, #1
    5bc8:	d001      	beq.n	5bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    5bca:	2011      	movs	r0, #17
    5bcc:	e000      	b.n	5bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    5bce:	200d      	movs	r0, #13
    5bd0:	2101      	movs	r1, #1
    5bd2:	f7ff ffa7 	bl	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5bd6:	6860      	ldr	r0, [r4, #4]
    5bd8:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    5bdc:	bd38      	pop	{r3, r4, r5, pc}
    5bde:	0000      	.short	0x0000
    5be0:	20000124 	.word	0x20000124
    5be4:	b570      	push	{r4, r5, r6, lr}
    5be6:	4b2b      	ldr	r3, [pc, #172]	; (5c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    5be8:	4602      	mov	r2, r0
    5bea:	8858      	ldrh	r0, [r3, #2]
    5bec:	4310      	orrs	r0, r2
    5bee:	8058      	strh	r0, [r3, #2]
    5bf0:	f103 0010 	add.w	r0, r3, #16
    5bf4:	2a40      	cmp	r2, #64	; 0x40
    5bf6:	6840      	ldr	r0, [r0, #4]
    5bf8:	d00d      	beq.n	5c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    5bfa:	0796      	lsls	r6, r2, #30
    5bfc:	f04f 0500 	mov.w	r5, #0
    5c00:	f04f 0401 	mov.w	r4, #1
    5c04:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    5c08:	d50c      	bpl.n	5c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    5c0a:	b14e      	cbz	r6, 5c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    5c0c:	f640 51f6 	movw	r1, #3574	; 0xdf6
    5c10:	2031      	movs	r0, #49	; 0x31
    5c12:	f7fa febb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c1a:	2104      	movs	r1, #4
    5c1c:	f7fe bb9e 	b.w	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5c20:	6099      	str	r1, [r3, #8]
    5c22:	e01c      	b.n	5c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    5c24:	b1c6      	cbz	r6, 5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c26:	60d9      	str	r1, [r3, #12]
    5c28:	78c9      	ldrb	r1, [r1, #3]
    5c2a:	2906      	cmp	r1, #6
    5c2c:	d002      	beq.n	5c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    5c2e:	290b      	cmp	r1, #11
    5c30:	d112      	bne.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c32:	e009      	b.n	5c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    5c34:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c38:	2918      	cmp	r1, #24
    5c3a:	d10d      	bne.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c3c:	2100      	movs	r1, #0
    5c3e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    5c42:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    5c46:	e007      	b.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c48:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c4c:	2912      	cmp	r1, #18
    5c4e:	d103      	bne.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5c50:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    5c54:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    5c58:	0791      	lsls	r1, r2, #30
    5c5a:	d516      	bpl.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c5c:	6899      	ldr	r1, [r3, #8]
    5c5e:	78c9      	ldrb	r1, [r1, #3]
    5c60:	2905      	cmp	r1, #5
    5c62:	d002      	beq.n	5c6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    5c64:	290b      	cmp	r1, #11
    5c66:	d110      	bne.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c68:	e009      	b.n	5c7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    5c6a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c6e:	2916      	cmp	r1, #22
    5c70:	d10b      	bne.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c72:	2100      	movs	r1, #0
    5c74:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    5c78:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    5c7c:	e005      	b.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c7e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c82:	2911      	cmp	r1, #17
    5c84:	d101      	bne.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5c86:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    5c8a:	0690      	lsls	r0, r2, #26
    5c8c:	d501      	bpl.n	5c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    5c8e:	2008      	movs	r0, #8
    5c90:	7058      	strb	r0, [r3, #1]
    5c92:	bd70      	pop	{r4, r5, r6, pc}
    5c94:	20000114 	.word	0x20000114
    5c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c9c:	4c29      	ldr	r4, [pc, #164]	; (5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    5c9e:	2501      	movs	r5, #1
    5ca0:	6862      	ldr	r2, [r4, #4]
    5ca2:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    5ca6:	b109      	cbz	r1, 5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5ca8:	2701      	movs	r7, #1
    5caa:	e000      	b.n	5cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    5cac:	2700      	movs	r7, #0
    5cae:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    5cb2:	b108      	cbz	r0, 5cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    5cb4:	2601      	movs	r6, #1
    5cb6:	e000      	b.n	5cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    5cb8:	2600      	movs	r6, #0
    5cba:	b90f      	cbnz	r7, 5cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    5cbc:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    5cc0:	b90e      	cbnz	r6, 5cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    5cc2:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    5cc6:	f102 0362 	add.w	r3, r2, #98	; 0x62
    5cca:	7219      	strb	r1, [r3, #8]
    5ccc:	7258      	strb	r0, [r3, #9]
    5cce:	20ff      	movs	r0, #255	; 0xff
    5cd0:	7298      	strb	r0, [r3, #10]
    5cd2:	481d      	ldr	r0, [pc, #116]	; (5d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    5cd4:	6803      	ldr	r3, [r0, #0]
    5cd6:	b10b      	cbz	r3, 5cdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    5cd8:	4610      	mov	r0, r2
    5cda:	4798      	blx	r3
    5cdc:	6860      	ldr	r0, [r4, #4]
    5cde:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    5ce2:	2801      	cmp	r0, #1
    5ce4:	d001      	beq.n	5cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5ce6:	b907      	cbnz	r7, 5cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5ce8:	b116      	cbz	r6, 5cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    5cea:	2000      	movs	r0, #0
    5cec:	f000 f82e 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5cf0:	6860      	ldr	r0, [r4, #4]
    5cf2:	302c      	adds	r0, #44	; 0x2c
    5cf4:	f008 f90d 	bl	df12 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5cf8:	4606      	mov	r6, r0
    5cfa:	6860      	ldr	r0, [r4, #4]
    5cfc:	f008 f8b7 	bl	de6e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5d00:	b130      	cbz	r0, 5d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    5d02:	6861      	ldr	r1, [r4, #4]
    5d04:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    5d08:	f831 0b2c 	ldrh.w	r0, [r1], #44
    5d0c:	f7fc ff50 	bl	2bb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5d10:	2105      	movs	r1, #5
    5d12:	6860      	ldr	r0, [r4, #4]
    5d14:	f7fe fb22 	bl	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5d18:	6860      	ldr	r0, [r4, #4]
    5d1a:	302c      	adds	r0, #44	; 0x2c
    5d1c:	f008 f8f9 	bl	df12 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5d20:	4604      	mov	r4, r0
    5d22:	42a6      	cmp	r6, r4
    5d24:	d20a      	bcs.n	5d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5d26:	f003 fdcd 	bl	98c4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    5d2a:	4601      	mov	r1, r0
    5d2c:	1ba0      	subs	r0, r4, r6
    5d2e:	2867      	cmp	r0, #103	; 0x67
    5d30:	d200      	bcs.n	5d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    5d32:	2067      	movs	r0, #103	; 0x67
    5d34:	f003 fc8c 	bl	9650 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5d38:	b100      	cbz	r0, 5d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5d3a:	2500      	movs	r5, #0
    5d3c:	4628      	mov	r0, r5
    5d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d42:	0000      	.short	0x0000
    5d44:	20000124 	.word	0x20000124
    5d48:	2000028c 	.word	0x2000028c
    5d4c:	4601      	mov	r1, r0
    5d4e:	4801      	ldr	r0, [pc, #4]	; (5d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    5d50:	f001 ba96 	b.w	7280 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    5d54:	20000124 	.word	0x20000124
    5d58:	b570      	push	{r4, r5, r6, lr}
    5d5a:	4d0f      	ldr	r5, [pc, #60]	; (5d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    5d5c:	686c      	ldr	r4, [r5, #4]
    5d5e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    5d62:	2921      	cmp	r1, #33	; 0x21
    5d64:	d002      	beq.n	5d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5d66:	292e      	cmp	r1, #46	; 0x2e
    5d68:	d003      	beq.n	5d72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    5d6a:	e011      	b.n	5d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5d6c:	f7ff ffee 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5d70:	e008      	b.n	5d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    5d72:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    5d76:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5d7a:	2301      	movs	r3, #1
    5d7c:	210b      	movs	r1, #11
    5d7e:	f007 fc89 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d82:	b138      	cbz	r0, 5d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    5d84:	6869      	ldr	r1, [r5, #4]
    5d86:	2000      	movs	r0, #0
    5d88:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d8c:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5d90:	2000      	movs	r0, #0
    5d92:	bd70      	pop	{r4, r5, r6, pc}
    5d94:	202a      	movs	r0, #42	; 0x2a
    5d96:	e7e9      	b.n	5d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5d98:	20000124 	.word	0x20000124
    5d9c:	b570      	push	{r4, r5, r6, lr}
    5d9e:	4604      	mov	r4, r0
    5da0:	6840      	ldr	r0, [r0, #4]
    5da2:	2301      	movs	r3, #1
    5da4:	2100      	movs	r1, #0
    5da6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5daa:	3080      	adds	r0, #128	; 0x80
    5dac:	f007 fc72 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5db0:	b1b8      	cbz	r0, 5de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    5db2:	4d13      	ldr	r5, [pc, #76]	; (5e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    5db4:	68e8      	ldr	r0, [r5, #12]
    5db6:	f007 fee0 	bl	db7a <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    5dba:	6861      	ldr	r1, [r4, #4]
    5dbc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5dc0:	6861      	ldr	r1, [r4, #4]
    5dc2:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5dc6:	f009 f914 	bl	eff2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5dca:	b160      	cbz	r0, 5de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    5dcc:	6861      	ldr	r1, [r4, #4]
    5dce:	2028      	movs	r0, #40	; 0x28
    5dd0:	2202      	movs	r2, #2
    5dd2:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5dd6:	6860      	ldr	r0, [r4, #4]
    5dd8:	490a      	ldr	r1, [pc, #40]	; (5e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    5dda:	30b4      	adds	r0, #180	; 0xb4
    5ddc:	f008 f802 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5de0:	e00b      	b.n	5dfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    5de2:	2001      	movs	r0, #1
    5de4:	bd70      	pop	{r4, r5, r6, pc}
    5de6:	6861      	ldr	r1, [r4, #4]
    5de8:	68e8      	ldr	r0, [r5, #12]
    5dea:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    5dee:	f007 febf 	bl	db70 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    5df2:	6861      	ldr	r1, [r4, #4]
    5df4:	200a      	movs	r0, #10
    5df6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5dfa:	2000      	movs	r0, #0
    5dfc:	bd70      	pop	{r4, r5, r6, pc}
    5dfe:	0000      	.short	0x0000
    5e00:	20000114 	.word	0x20000114
    5e04:	0000e0a1 	.word	0x0000e0a1
    5e08:	b570      	push	{r4, r5, r6, lr}
    5e0a:	4604      	mov	r4, r0
    5e0c:	6840      	ldr	r0, [r0, #4]
    5e0e:	2301      	movs	r3, #1
    5e10:	2100      	movs	r1, #0
    5e12:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5e16:	3080      	adds	r0, #128	; 0x80
    5e18:	f007 fc3c 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5e1c:	b1e0      	cbz	r0, 5e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    5e1e:	4d28      	ldr	r5, [pc, #160]	; (5ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    5e20:	2100      	movs	r1, #0
    5e22:	68e8      	ldr	r0, [r5, #12]
    5e24:	f007 feac 	bl	db80 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    5e28:	b1c0      	cbz	r0, 5e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    5e2a:	68e8      	ldr	r0, [r5, #12]
    5e2c:	6861      	ldr	r1, [r4, #4]
    5e2e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    5e32:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5e36:	6861      	ldr	r1, [r4, #4]
    5e38:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5e3c:	f009 f8d9 	bl	eff2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5e40:	b188      	cbz	r0, 5e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    5e42:	6861      	ldr	r1, [r4, #4]
    5e44:	2028      	movs	r0, #40	; 0x28
    5e46:	2202      	movs	r2, #2
    5e48:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5e4c:	6860      	ldr	r0, [r4, #4]
    5e4e:	491d      	ldr	r1, [pc, #116]	; (5ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    5e50:	30b4      	adds	r0, #180	; 0xb4
    5e52:	f007 ffc7 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5e56:	e030      	b.n	5eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    5e58:	2001      	movs	r0, #1
    5e5a:	bd70      	pop	{r4, r5, r6, pc}
    5e5c:	4620      	mov	r0, r4
    5e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e62:	f000 b88d 	b.w	5f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5e66:	68e8      	ldr	r0, [r5, #12]
    5e68:	f007 feb4 	bl	dbd4 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    5e6c:	f007 fc08 	bl	d680 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    5e70:	4606      	mov	r6, r0
    5e72:	6860      	ldr	r0, [r4, #4]
    5e74:	4631      	mov	r1, r6
    5e76:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    5e7a:	68e8      	ldr	r0, [r5, #12]
    5e7c:	7900      	ldrb	r0, [r0, #4]
    5e7e:	f007 fd6c 	bl	d95a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    5e82:	6861      	ldr	r1, [r4, #4]
    5e84:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    5e88:	68e8      	ldr	r0, [r5, #12]
    5e8a:	4631      	mov	r1, r6
    5e8c:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    5e90:	f007 fd5f 	bl	d952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    5e94:	6861      	ldr	r1, [r4, #4]
    5e96:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    5e9a:	68e8      	ldr	r0, [r5, #12]
    5e9c:	f007 fe9d 	bl	dbda <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    5ea0:	6861      	ldr	r1, [r4, #4]
    5ea2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    5ea6:	68e8      	ldr	r0, [r5, #12]
    5ea8:	f007 fe9a 	bl	dbe0 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    5eac:	6861      	ldr	r1, [r4, #4]
    5eae:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    5eb2:	6861      	ldr	r1, [r4, #4]
    5eb4:	200d      	movs	r0, #13
    5eb6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5eba:	2000      	movs	r0, #0
    5ebc:	bd70      	pop	{r4, r5, r6, pc}
    5ebe:	0000      	.short	0x0000
    5ec0:	20000114 	.word	0x20000114
    5ec4:	0000e0a1 	.word	0x0000e0a1
    5ec8:	b570      	push	{r4, r5, r6, lr}
    5eca:	4604      	mov	r4, r0
    5ecc:	6840      	ldr	r0, [r0, #4]
    5ece:	2301      	movs	r3, #1
    5ed0:	2100      	movs	r1, #0
    5ed2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ed6:	3080      	adds	r0, #128	; 0x80
    5ed8:	f007 fbdc 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5edc:	b970      	cbnz	r0, 5efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    5ede:	6860      	ldr	r0, [r4, #4]
    5ee0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ee4:	2a13      	cmp	r2, #19
    5ee6:	d009      	beq.n	5efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    5ee8:	2301      	movs	r3, #1
    5eea:	2105      	movs	r1, #5
    5eec:	3080      	adds	r0, #128	; 0x80
    5eee:	f007 fbd1 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ef2:	b108      	cbz	r0, 5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    5ef4:	2008      	movs	r0, #8
    5ef6:	bd70      	pop	{r4, r5, r6, pc}
    5ef8:	2001      	movs	r0, #1
    5efa:	bd70      	pop	{r4, r5, r6, pc}
    5efc:	6860      	ldr	r0, [r4, #4]
    5efe:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    5f02:	b910      	cbnz	r0, 5f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    5f04:	4816      	ldr	r0, [pc, #88]	; (5f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    5f06:	f008 f8a6 	bl	e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    5f0a:	4d15      	ldr	r5, [pc, #84]	; (5f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    5f0c:	6861      	ldr	r1, [r4, #4]
    5f0e:	3d10      	subs	r5, #16
    5f10:	f501 710e 	add.w	r1, r1, #568	; 0x238
    5f14:	68e8      	ldr	r0, [r5, #12]
    5f16:	f007 fe7c 	bl	dc12 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    5f1a:	6861      	ldr	r1, [r4, #4]
    5f1c:	68e8      	ldr	r0, [r5, #12]
    5f1e:	f501 718c 	add.w	r1, r1, #280	; 0x118
    5f22:	f007 fe6d 	bl	dc00 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    5f26:	6860      	ldr	r0, [r4, #4]
    5f28:	8801      	ldrh	r1, [r0, #0]
    5f2a:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    5f2e:	6861      	ldr	r1, [r4, #4]
    5f30:	68e8      	ldr	r0, [r5, #12]
    5f32:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    5f36:	f007 fe67 	bl	dc08 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    5f3a:	6861      	ldr	r1, [r4, #4]
    5f3c:	68e8      	ldr	r0, [r5, #12]
    5f3e:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    5f42:	f007 fe5a 	bl	dbfa <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    5f46:	6860      	ldr	r0, [r4, #4]
    5f48:	2202      	movs	r2, #2
    5f4a:	4906      	ldr	r1, [pc, #24]	; (5f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    5f4c:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    5f50:	f007 ff48 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5f54:	6861      	ldr	r1, [r4, #4]
    5f56:	2015      	movs	r0, #21
    5f58:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    5f5c:	2000      	movs	r0, #0
    5f5e:	bd70      	pop	{r4, r5, r6, pc}
    5f60:	20000124 	.word	0x20000124
    5f64:	0000e245 	.word	0x0000e245
    5f68:	4901      	ldr	r1, [pc, #4]	; (5f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    5f6a:	68c9      	ldr	r1, [r1, #12]
    5f6c:	f7fc bf28 	b.w	2dc0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    5f70:	20000114 	.word	0x20000114
    5f74:	4901      	ldr	r1, [pc, #4]	; (5f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    5f76:	68c9      	ldr	r1, [r1, #12]
    5f78:	f7fc bf58 	b.w	2e2c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    5f7c:	20000114 	.word	0x20000114
    5f80:	b510      	push	{r4, lr}
    5f82:	6842      	ldr	r2, [r0, #4]
    5f84:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    5f88:	070b      	lsls	r3, r1, #28
    5f8a:	d501      	bpl.n	5f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    5f8c:	2001      	movs	r0, #1
    5f8e:	bd10      	pop	{r4, pc}
    5f90:	f041 0108 	orr.w	r1, r1, #8
    5f94:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    5f98:	4905      	ldr	r1, [pc, #20]	; (5fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    5f9a:	6840      	ldr	r0, [r0, #4]
    5f9c:	68c9      	ldr	r1, [r1, #12]
    5f9e:	78c9      	ldrb	r1, [r1, #3]
    5fa0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    5fa4:	4802      	ldr	r0, [pc, #8]	; (5fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    5fa6:	3010      	adds	r0, #16
    5fa8:	f008 f855 	bl	e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    5fac:	2000      	movs	r0, #0
    5fae:	bd10      	pop	{r4, pc}
    5fb0:	20000114 	.word	0x20000114
    5fb4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    5fb8:	4605      	mov	r5, r0
    5fba:	6840      	ldr	r0, [r0, #4]
    5fbc:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    5fc0:	f010 0f30 	tst.w	r0, #48	; 0x30
    5fc4:	d002      	beq.n	5fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    5fc6:	2001      	movs	r0, #1
    5fc8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    5fcc:	4c32      	ldr	r4, [pc, #200]	; (6098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    5fce:	68e0      	ldr	r0, [r4, #12]
    5fd0:	f007 fe39 	bl	dc46 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    5fd4:	b330      	cbz	r0, 6024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    5fd6:	68e0      	ldr	r0, [r4, #12]
    5fd8:	f007 fe2f 	bl	dc3a <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    5fdc:	4680      	mov	r8, r0
    5fde:	68e0      	ldr	r0, [r4, #12]
    5fe0:	f007 fe2f 	bl	dc42 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    5fe4:	4607      	mov	r7, r0
    5fe6:	68e0      	ldr	r0, [r4, #12]
    5fe8:	f007 fe25 	bl	dc36 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    5fec:	4606      	mov	r6, r0
    5fee:	68e0      	ldr	r0, [r4, #12]
    5ff0:	f007 fe25 	bl	dc3e <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    5ff4:	4601      	mov	r1, r0
    5ff6:	f8cd 8000 	str.w	r8, [sp]
    5ffa:	6868      	ldr	r0, [r5, #4]
    5ffc:	463b      	mov	r3, r7
    5ffe:	4632      	mov	r2, r6
    6000:	302c      	adds	r0, #44	; 0x2c
    6002:	f007 ff90 	bl	df26 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6006:	78a0      	ldrb	r0, [r4, #2]
    6008:	0781      	lsls	r1, r0, #30
    600a:	f04f 0001 	mov.w	r0, #1
    600e:	d503      	bpl.n	6018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    6010:	68a1      	ldr	r1, [r4, #8]
    6012:	78c9      	ldrb	r1, [r1, #3]
    6014:	2914      	cmp	r1, #20
    6016:	d00a      	beq.n	602e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6018:	6869      	ldr	r1, [r5, #4]
    601a:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    601e:	291d      	cmp	r1, #29
    6020:	d005      	beq.n	602e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6022:	e007      	b.n	6034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    6024:	4628      	mov	r0, r5
    6026:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    602a:	f7ff bfa9 	b.w	5f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    602e:	6869      	ldr	r1, [r5, #4]
    6030:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    6034:	6868      	ldr	r0, [r5, #4]
    6036:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    603a:	2901      	cmp	r1, #1
    603c:	d011      	beq.n	6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    603e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6042:	f88d 1004 	strb.w	r1, [sp, #4]
    6046:	9901      	ldr	r1, [sp, #4]
    6048:	9101      	str	r1, [sp, #4]
    604a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    604e:	b941      	cbnz	r1, 6062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6050:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6054:	f88d 1000 	strb.w	r1, [sp]
    6058:	9900      	ldr	r1, [sp, #0]
    605a:	9100      	str	r1, [sp, #0]
    605c:	f89d 1000 	ldrb.w	r1, [sp]
    6060:	b151      	cbz	r1, 6078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    6062:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6066:	f041 0110 	orr.w	r1, r1, #16
    606a:	6001      	str	r1, [r0, #0]
    606c:	480a      	ldr	r0, [pc, #40]	; (6098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    606e:	3010      	adds	r0, #16
    6070:	f007 fff1 	bl	e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6074:	2000      	movs	r0, #0
    6076:	e7a7      	b.n	5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    6078:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    607c:	f041 0120 	orr.w	r1, r1, #32
    6080:	6001      	str	r1, [r0, #0]
    6082:	4805      	ldr	r0, [pc, #20]	; (6098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6084:	3010      	adds	r0, #16
    6086:	6843      	ldr	r3, [r0, #4]
    6088:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    608c:	8818      	ldrh	r0, [r3, #0]
    608e:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    6092:	f7fc fdb5 	bl	2c00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    6096:	e7e9      	b.n	606c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    6098:	20000114 	.word	0x20000114
    609c:	4901      	ldr	r1, [pc, #4]	; (60a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    609e:	68c9      	ldr	r1, [r1, #12]
    60a0:	f008 b868 	b.w	e174 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    60a4:	20000114 	.word	0x20000114
    60a8:	b510      	push	{r4, lr}
    60aa:	4604      	mov	r4, r0
    60ac:	6840      	ldr	r0, [r0, #4]
    60ae:	2301      	movs	r3, #1
    60b0:	2100      	movs	r1, #0
    60b2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    60b6:	3080      	adds	r0, #128	; 0x80
    60b8:	f007 faec 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60bc:	2800      	cmp	r0, #0
    60be:	6860      	ldr	r0, [r4, #4]
    60c0:	d00c      	beq.n	60dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    60c2:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    60c6:	2800      	cmp	r0, #0
    60c8:	d007      	beq.n	60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    60ca:	480a      	ldr	r0, [pc, #40]	; (60f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    60cc:	f007 ffc3 	bl	e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    60d0:	6861      	ldr	r1, [r4, #4]
    60d2:	2011      	movs	r0, #17
    60d4:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    60d8:	2000      	movs	r0, #0
    60da:	bd10      	pop	{r4, pc}
    60dc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    60e0:	2301      	movs	r3, #1
    60e2:	2105      	movs	r1, #5
    60e4:	3080      	adds	r0, #128	; 0x80
    60e6:	f007 fad5 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60ea:	b108      	cbz	r0, 60f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    60ec:	2008      	movs	r0, #8
    60ee:	bd10      	pop	{r4, pc}
    60f0:	2001      	movs	r0, #1
    60f2:	bd10      	pop	{r4, pc}
    60f4:	20000124 	.word	0x20000124
    60f8:	b538      	push	{r3, r4, r5, lr}
    60fa:	4604      	mov	r4, r0
    60fc:	6840      	ldr	r0, [r0, #4]
    60fe:	2301      	movs	r3, #1
    6100:	210b      	movs	r1, #11
    6102:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6106:	3080      	adds	r0, #128	; 0x80
    6108:	f007 fac4 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    610c:	bb60      	cbnz	r0, 6168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    610e:	6860      	ldr	r0, [r4, #4]
    6110:	2301      	movs	r3, #1
    6112:	2100      	movs	r1, #0
    6114:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6118:	3080      	adds	r0, #128	; 0x80
    611a:	f007 fabb 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    611e:	b308      	cbz	r0, 6164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    6120:	6860      	ldr	r0, [r4, #4]
    6122:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6126:	2825      	cmp	r0, #37	; 0x25
    6128:	d01e      	beq.n	6168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    612a:	4d2a      	ldr	r5, [pc, #168]	; (61d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    612c:	68e8      	ldr	r0, [r5, #12]
    612e:	f007 fd9c 	bl	dc6a <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6132:	b1d8      	cbz	r0, 616c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    6134:	68e8      	ldr	r0, [r5, #12]
    6136:	6862      	ldr	r2, [r4, #4]
    6138:	7941      	ldrb	r1, [r0, #5]
    613a:	f001 0107 	and.w	r1, r1, #7
    613e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    6142:	7900      	ldrb	r0, [r0, #4]
    6144:	f000 0207 	and.w	r2, r0, #7
    6148:	6860      	ldr	r0, [r4, #4]
    614a:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    614e:	6860      	ldr	r0, [r4, #4]
    6150:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6154:	f88d 1000 	strb.w	r1, [sp]
    6158:	9900      	ldr	r1, [sp, #0]
    615a:	9100      	str	r1, [sp, #0]
    615c:	f89d 1000 	ldrb.w	r1, [sp]
    6160:	bb71      	cbnz	r1, 61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6162:	e008      	b.n	6176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    6164:	2001      	movs	r0, #1
    6166:	bd38      	pop	{r3, r4, r5, pc}
    6168:	2020      	movs	r0, #32
    616a:	bd38      	pop	{r3, r4, r5, pc}
    616c:	4620      	mov	r0, r4
    616e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6172:	f7ff bf05 	b.w	5f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6176:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    617a:	2901      	cmp	r1, #1
    617c:	d020      	beq.n	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    617e:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    6182:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    6186:	784d      	ldrb	r5, [r1, #1]
    6188:	4295      	cmp	r5, r2
    618a:	d106      	bne.n	619a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    618c:	7809      	ldrb	r1, [r1, #0]
    618e:	4299      	cmp	r1, r3
    6190:	d103      	bne.n	619a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    6192:	2102      	movs	r1, #2
    6194:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    6198:	e012      	b.n	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    619a:	480e      	ldr	r0, [pc, #56]	; (61d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    619c:	3010      	adds	r0, #16
    619e:	6841      	ldr	r1, [r0, #4]
    61a0:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    61a4:	880a      	ldrh	r2, [r1, #0]
    61a6:	f820 2b02 	strh.w	r2, [r0], #2
    61aa:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    61ae:	f800 2b01 	strb.w	r2, [r0], #1
    61b2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    61b6:	f800 190d 	strb.w	r1, [r0], #-13
    61ba:	4907      	ldr	r1, [pc, #28]	; (61d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    61bc:	f007 fe09 	bl	ddd2 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    61c0:	6861      	ldr	r1, [r4, #4]
    61c2:	2022      	movs	r0, #34	; 0x22
    61c4:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    61c8:	4802      	ldr	r0, [pc, #8]	; (61d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    61ca:	3010      	adds	r0, #16
    61cc:	f007 ff43 	bl	e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    61d0:	2000      	movs	r0, #0
    61d2:	bd38      	pop	{r3, r4, r5, pc}
    61d4:	20000114 	.word	0x20000114
    61d8:	000072c1 	.word	0x000072c1
    61dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    61e0:	6845      	ldr	r5, [r0, #4]
    61e2:	4604      	mov	r4, r0
    61e4:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    61e8:	2821      	cmp	r0, #33	; 0x21
    61ea:	d008      	beq.n	61fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    61ec:	f05f 0600 	movs.w	r6, #0
    61f0:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    61f4:	2823      	cmp	r0, #35	; 0x23
    61f6:	d004      	beq.n	6202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    61f8:	b35e      	cbz	r6, 6252 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    61fa:	359d      	adds	r5, #157	; 0x9d
    61fc:	e002      	b.n	6204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    61fe:	2601      	movs	r6, #1
    6200:	e7f6      	b.n	61f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    6202:	359e      	adds	r5, #158	; 0x9e
    6204:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    6208:	f8d8 000c 	ldr.w	r0, [r8, #12]
    620c:	f007 fd39 	bl	dc82 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6210:	2700      	movs	r7, #0
    6212:	b308      	cbz	r0, 6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6214:	4631      	mov	r1, r6
    6216:	f8d8 000c 	ldr.w	r0, [r8, #12]
    621a:	f7fe ffb3 	bl	5184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    621e:	b1d8      	cbz	r0, 6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6220:	466a      	mov	r2, sp
    6222:	4646      	mov	r6, r8
    6224:	6860      	ldr	r0, [r4, #4]
    6226:	f8d8 100c 	ldr.w	r1, [r8, #12]
    622a:	f007 fb4c 	bl	d8c6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    622e:	b388      	cbz	r0, 6294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    6230:	68f0      	ldr	r0, [r6, #12]
    6232:	f007 fd24 	bl	dc7e <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6236:	6861      	ldr	r1, [r4, #4]
    6238:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    623c:	6861      	ldr	r1, [r4, #4]
    623e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6242:	f008 fed6 	bl	eff2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6246:	b3e8      	cbz	r0, 62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6248:	6861      	ldr	r1, [r4, #4]
    624a:	2028      	movs	r0, #40	; 0x28
    624c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6250:	e06e      	b.n	6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6252:	2002      	movs	r0, #2
    6254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6258:	6860      	ldr	r0, [r4, #4]
    625a:	f04f 0900 	mov.w	r9, #0
    625e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6262:	2901      	cmp	r1, #1
    6264:	d017      	beq.n	6296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    6266:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    626a:	b306      	cbz	r6, 62ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    626c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6270:	6861      	ldr	r1, [r4, #4]
    6272:	2201      	movs	r2, #1
    6274:	78c0      	ldrb	r0, [r0, #3]
    6276:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    627a:	4082      	lsls	r2, r0
    627c:	6861      	ldr	r1, [r4, #4]
    627e:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6282:	b160      	cbz	r0, 629e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    6284:	2009      	movs	r0, #9
    6286:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    628a:	6860      	ldr	r0, [r4, #4]
    628c:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6290:	b9b0      	cbnz	r0, 62c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    6292:	e007      	b.n	62a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    6294:	e017      	b.n	62c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    6296:	201e      	movs	r0, #30
    6298:	f7ff fd58 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    629c:	e7e5      	b.n	626a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    629e:	f240 414b 	movw	r1, #1099	; 0x44b
    62a2:	e001      	b.n	62a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    62a4:	f240 4153 	movw	r1, #1107	; 0x453
    62a8:	2031      	movs	r0, #49	; 0x31
    62aa:	f7fa fb6f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62ae:	4826      	ldr	r0, [pc, #152]	; (6348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    62b0:	702f      	strb	r7, [r5, #0]
    62b2:	3010      	adds	r0, #16
    62b4:	f007 fed7 	bl	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    62b8:	4620      	mov	r0, r4
    62ba:	f7ff fe61 	bl	5f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    62be:	4681      	mov	r9, r0
    62c0:	4648      	mov	r0, r9
    62c2:	e7c7      	b.n	6254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    62c4:	e013      	b.n	62ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    62c6:	6860      	ldr	r0, [r4, #4]
    62c8:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    62cc:	2901      	cmp	r1, #1
    62ce:	d009      	beq.n	62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    62d0:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    62d4:	6860      	ldr	r0, [r4, #4]
    62d6:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    62da:	42a9      	cmp	r1, r5
    62dc:	d11b      	bne.n	6316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    62de:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    62e2:	e018      	b.n	6316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    62e4:	2000      	movs	r0, #0
    62e6:	f7ff fd31 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    62ea:	702f      	strb	r7, [r5, #0]
    62ec:	e7f2      	b.n	62d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    62ee:	6860      	ldr	r0, [r4, #4]
    62f0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    62f4:	290d      	cmp	r1, #13
    62f6:	d018      	beq.n	632a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    62f8:	290b      	cmp	r1, #11
    62fa:	d016      	beq.n	632a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    62fc:	290a      	cmp	r1, #10
    62fe:	d014      	beq.n	632a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6300:	f89d 1000 	ldrb.w	r1, [sp]
    6304:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6308:	6861      	ldr	r1, [r4, #4]
    630a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    630e:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6312:	2025      	movs	r0, #37	; 0x25
    6314:	7028      	strb	r0, [r5, #0]
    6316:	6860      	ldr	r0, [r4, #4]
    6318:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    631c:	42a9      	cmp	r1, r5
    631e:	d10e      	bne.n	633e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6320:	4809      	ldr	r0, [pc, #36]	; (6348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6322:	3010      	adds	r0, #16
    6324:	f007 fe9f 	bl	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6328:	e00b      	b.n	6342 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    632a:	212a      	movs	r1, #42	; 0x2a
    632c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6330:	6860      	ldr	r0, [r4, #4]
    6332:	2202      	movs	r2, #2
    6334:	4905      	ldr	r1, [pc, #20]	; (634c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6336:	30b4      	adds	r0, #180	; 0xb4
    6338:	f007 fd54 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    633c:	e7eb      	b.n	6316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    633e:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6342:	2000      	movs	r0, #0
    6344:	e786      	b.n	6254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6346:	0000      	.short	0x0000
    6348:	20000114 	.word	0x20000114
    634c:	0000e0a1 	.word	0x0000e0a1
    6350:	b570      	push	{r4, r5, r6, lr}
    6352:	4604      	mov	r4, r0
    6354:	6840      	ldr	r0, [r0, #4]
    6356:	4d0a      	ldr	r5, [pc, #40]	; (6380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6358:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    635c:	f041 0104 	orr.w	r1, r1, #4
    6360:	7001      	strb	r1, [r0, #0]
    6362:	68e8      	ldr	r0, [r5, #12]
    6364:	f007 fca1 	bl	dcaa <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6368:	4606      	mov	r6, r0
    636a:	68e8      	ldr	r0, [r5, #12]
    636c:	f007 fca1 	bl	dcb2 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6370:	4601      	mov	r1, r0
    6372:	4622      	mov	r2, r4
    6374:	4630      	mov	r0, r6
    6376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    637a:	f000 b893 	b.w	64a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    637e:	0000      	.short	0x0000
    6380:	20000114 	.word	0x20000114
    6384:	4602      	mov	r2, r0
    6386:	4813      	ldr	r0, [pc, #76]	; (63d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6388:	68c0      	ldr	r0, [r0, #12]
    638a:	7901      	ldrb	r1, [r0, #4]
    638c:	4811      	ldr	r0, [pc, #68]	; (63d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    638e:	3010      	adds	r0, #16
    6390:	6843      	ldr	r3, [r0, #4]
    6392:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6396:	2821      	cmp	r0, #33	; 0x21
    6398:	d010      	beq.n	63bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    639a:	282e      	cmp	r0, #46	; 0x2e
    639c:	d00e      	beq.n	63bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    639e:	2828      	cmp	r0, #40	; 0x28
    63a0:	d00e      	beq.n	63c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    63a2:	2804      	cmp	r0, #4
    63a4:	d00e      	beq.n	63c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    63a6:	280f      	cmp	r0, #15
    63a8:	d00e      	beq.n	63c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    63aa:	281d      	cmp	r0, #29
    63ac:	d00e      	beq.n	63cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    63ae:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    63b2:	2823      	cmp	r0, #35	; 0x23
    63b4:	d00c      	beq.n	63d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    63b6:	20fe      	movs	r0, #254	; 0xfe
    63b8:	f000 b874 	b.w	64a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    63bc:	2016      	movs	r0, #22
    63be:	e7fb      	b.n	63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63c0:	2023      	movs	r0, #35	; 0x23
    63c2:	e7f9      	b.n	63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63c4:	200e      	movs	r0, #14
    63c6:	e7f7      	b.n	63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63c8:	2012      	movs	r0, #18
    63ca:	e7f5      	b.n	63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63cc:	2014      	movs	r0, #20
    63ce:	e7f3      	b.n	63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63d0:	2017      	movs	r0, #23
    63d2:	e7f1      	b.n	63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    63d4:	20000114 	.word	0x20000114
    63d8:	b510      	push	{r4, lr}
    63da:	4604      	mov	r4, r0
    63dc:	6840      	ldr	r0, [r0, #4]
    63de:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    63e2:	2818      	cmp	r0, #24
    63e4:	d001      	beq.n	63ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    63e6:	2002      	movs	r0, #2
    63e8:	bd10      	pop	{r4, pc}
    63ea:	4804      	ldr	r0, [pc, #16]	; (63fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    63ec:	f007 fe3b 	bl	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    63f0:	6861      	ldr	r1, [r4, #4]
    63f2:	201c      	movs	r0, #28
    63f4:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    63f8:	2000      	movs	r0, #0
    63fa:	bd10      	pop	{r4, pc}
    63fc:	20000124 	.word	0x20000124
    6400:	4901      	ldr	r1, [pc, #4]	; (6408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6402:	68c9      	ldr	r1, [r1, #12]
    6404:	f007 be6e 	b.w	e0e4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6408:	20000114 	.word	0x20000114
    640c:	b570      	push	{r4, r5, r6, lr}
    640e:	4604      	mov	r4, r0
    6410:	481f      	ldr	r0, [pc, #124]	; (6490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6412:	2500      	movs	r5, #0
    6414:	68c0      	ldr	r0, [r0, #12]
    6416:	7903      	ldrb	r3, [r0, #4]
    6418:	6860      	ldr	r0, [r4, #4]
    641a:	2b16      	cmp	r3, #22
    641c:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6420:	d013      	beq.n	644a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6422:	dc06      	bgt.n	6432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6424:	2b0e      	cmp	r3, #14
    6426:	d009      	beq.n	643c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6428:	2b12      	cmp	r3, #18
    642a:	d007      	beq.n	643c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    642c:	2b14      	cmp	r3, #20
    642e:	d12c      	bne.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6430:	e004      	b.n	643c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6432:	2b17      	cmp	r3, #23
    6434:	d002      	beq.n	643c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6436:	2b23      	cmp	r3, #35	; 0x23
    6438:	d127      	bne.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    643a:	e01f      	b.n	647c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    643c:	4622      	mov	r2, r4
    643e:	2101      	movs	r1, #1
    6440:	4618      	mov	r0, r3
    6442:	f000 f9c5 	bl	67d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6446:	4605      	mov	r5, r0
    6448:	e01f      	b.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    644a:	2821      	cmp	r0, #33	; 0x21
    644c:	d001      	beq.n	6452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    644e:	282e      	cmp	r0, #46	; 0x2e
    6450:	d11b      	bne.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6452:	4620      	mov	r0, r4
    6454:	f007 fe1b 	bl	e08e <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6458:	6860      	ldr	r0, [r4, #4]
    645a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    645e:	2922      	cmp	r1, #34	; 0x22
    6460:	d013      	beq.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6462:	2108      	movs	r1, #8
    6464:	30ec      	adds	r0, #236	; 0xec
    6466:	f008 fd70 	bl	ef4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    646a:	6860      	ldr	r0, [r4, #4]
    646c:	210b      	movs	r1, #11
    646e:	30ec      	adds	r0, #236	; 0xec
    6470:	f008 fd6b 	bl	ef4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6474:	201a      	movs	r0, #26
    6476:	f7ff fc69 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    647a:	e006      	b.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    647c:	2828      	cmp	r0, #40	; 0x28
    647e:	d104      	bne.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6480:	4804      	ldr	r0, [pc, #16]	; (6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6482:	6801      	ldr	r1, [r0, #0]
    6484:	b109      	cbz	r1, 648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6486:	4620      	mov	r0, r4
    6488:	4788      	blx	r1
    648a:	4628      	mov	r0, r5
    648c:	bd70      	pop	{r4, r5, r6, pc}
    648e:	0000      	.short	0x0000
    6490:	20000114 	.word	0x20000114
    6494:	20000290 	.word	0x20000290
    6498:	4901      	ldr	r1, [pc, #4]	; (64a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    649a:	68c9      	ldr	r1, [r1, #12]
    649c:	f7fc bd40 	b.w	2f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    64a0:	20000114 	.word	0x20000114
    64a4:	4603      	mov	r3, r0
    64a6:	2000      	movs	r0, #0
    64a8:	2b17      	cmp	r3, #23
    64aa:	d017      	beq.n	64dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64ac:	dc0a      	bgt.n	64c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    64ae:	2b0e      	cmp	r3, #14
    64b0:	d014      	beq.n	64dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64b2:	2b12      	cmp	r3, #18
    64b4:	d012      	beq.n	64dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64b6:	2b14      	cmp	r3, #20
    64b8:	d010      	beq.n	64dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    64ba:	2b16      	cmp	r3, #22
    64bc:	d112      	bne.n	64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    64be:	4608      	mov	r0, r1
    64c0:	f7ff bc4a 	b.w	5d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    64c4:	2b23      	cmp	r3, #35	; 0x23
    64c6:	d003      	beq.n	64d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    64c8:	2b24      	cmp	r3, #36	; 0x24
    64ca:	d001      	beq.n	64d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    64cc:	2b25      	cmp	r3, #37	; 0x25
    64ce:	d109      	bne.n	64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    64d0:	4a05      	ldr	r2, [pc, #20]	; (64e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    64d2:	6812      	ldr	r2, [r2, #0]
    64d4:	2a00      	cmp	r2, #0
    64d6:	d005      	beq.n	64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    64d8:	4618      	mov	r0, r3
    64da:	4710      	bx	r2
    64dc:	2100      	movs	r1, #0
    64de:	4618      	mov	r0, r3
    64e0:	f000 b976 	b.w	67d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    64e4:	4770      	bx	lr
    64e6:	0000      	.short	0x0000
    64e8:	20000288 	.word	0x20000288
    64ec:	b510      	push	{r4, lr}
    64ee:	6841      	ldr	r1, [r0, #4]
    64f0:	4604      	mov	r4, r0
    64f2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    64f6:	06c2      	lsls	r2, r0, #27
    64f8:	d402      	bmi.n	6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    64fa:	f240 71db 	movw	r1, #2011	; 0x7db
    64fe:	e003      	b.n	6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6500:	0682      	lsls	r2, r0, #26
    6502:	d504      	bpl.n	650e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6504:	f240 71dc 	movw	r1, #2012	; 0x7dc
    6508:	2031      	movs	r0, #49	; 0x31
    650a:	f7fa fa3f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    650e:	f020 0010 	bic.w	r0, r0, #16
    6512:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6516:	4804      	ldr	r0, [pc, #16]	; (6528 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6518:	f007 fda5 	bl	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    651c:	6860      	ldr	r0, [r4, #4]
    651e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6522:	2105      	movs	r1, #5
    6524:	f7fd bf1a 	b.w	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6528:	20000124 	.word	0x20000124
    652c:	b510      	push	{r4, lr}
    652e:	6840      	ldr	r0, [r0, #4]
    6530:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6534:	292f      	cmp	r1, #47	; 0x2f
    6536:	d006      	beq.n	6546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6538:	2916      	cmp	r1, #22
    653a:	d00c      	beq.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    653c:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6540:	2031      	movs	r0, #49	; 0x31
    6542:	f7fa fa23 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6546:	2100      	movs	r1, #0
    6548:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    654c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6550:	4803      	ldr	r0, [pc, #12]	; (6560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6552:	f007 bd88 	b.w	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6556:	211a      	movs	r1, #26
    6558:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    655c:	bd10      	pop	{r4, pc}
    655e:	0000      	.short	0x0000
    6560:	20000124 	.word	0x20000124
    6564:	b570      	push	{r4, r5, r6, lr}
    6566:	4604      	mov	r4, r0
    6568:	6840      	ldr	r0, [r0, #4]
    656a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    656e:	291c      	cmp	r1, #28
    6570:	d004      	beq.n	657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    6572:	f240 71b6 	movw	r1, #1974	; 0x7b6
    6576:	2031      	movs	r0, #49	; 0x31
    6578:	f7fa fa08 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    657c:	2500      	movs	r5, #0
    657e:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6582:	6860      	ldr	r0, [r4, #4]
    6584:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6588:	b161      	cbz	r1, 65a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    658a:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    658e:	6860      	ldr	r0, [r4, #4]
    6590:	2202      	movs	r2, #2
    6592:	8801      	ldrh	r1, [r0, #0]
    6594:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6598:	6860      	ldr	r0, [r4, #4]
    659a:	490d      	ldr	r1, [pc, #52]	; (65d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    659c:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    65a0:	6860      	ldr	r0, [r4, #4]
    65a2:	e00c      	b.n	65be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    65a4:	8801      	ldrh	r1, [r0, #0]
    65a6:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    65aa:	6860      	ldr	r0, [r4, #4]
    65ac:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    65b0:	6861      	ldr	r1, [r4, #4]
    65b2:	2001      	movs	r0, #1
    65b4:	2202      	movs	r2, #2
    65b6:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    65ba:	4906      	ldr	r1, [pc, #24]	; (65d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    65bc:	6860      	ldr	r0, [r4, #4]
    65be:	f200 200a 	addw	r0, r0, #522	; 0x20a
    65c2:	f007 fc0f 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65c6:	6860      	ldr	r0, [r4, #4]
    65c8:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    65cc:	bd70      	pop	{r4, r5, r6, pc}
    65ce:	0000      	.short	0x0000
    65d0:	0000e22f 	.word	0x0000e22f
    65d4:	0000e211 	.word	0x0000e211
    65d8:	4916      	ldr	r1, [pc, #88]	; (6634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    65da:	b510      	push	{r4, lr}
    65dc:	6889      	ldr	r1, [r1, #8]
    65de:	790a      	ldrb	r2, [r1, #4]
    65e0:	6841      	ldr	r1, [r0, #4]
    65e2:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    65e6:	2b09      	cmp	r3, #9
    65e8:	d10a      	bne.n	6600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    65ea:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    65ee:	4293      	cmp	r3, r2
    65f0:	d106      	bne.n	6600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    65f2:	2200      	movs	r2, #0
    65f4:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    65f8:	6840      	ldr	r0, [r0, #4]
    65fa:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    65fe:	bd10      	pop	{r4, pc}
    6600:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6604:	071c      	lsls	r4, r3, #28
    6606:	d509      	bpl.n	661c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6608:	f023 0008 	bic.w	r0, r3, #8
    660c:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6610:	4808      	ldr	r0, [pc, #32]	; (6634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6616:	3010      	adds	r0, #16
    6618:	f007 bd25 	b.w	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    661c:	2aff      	cmp	r2, #255	; 0xff
    661e:	d004      	beq.n	662a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6620:	f240 7151 	movw	r1, #1873	; 0x751
    6624:	2031      	movs	r0, #49	; 0x31
    6626:	f7fa f9b1 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    662a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    662e:	f008 bd37 	b.w	f0a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6632:	0000      	.short	0x0000
    6634:	20000114 	.word	0x20000114
    6638:	4808      	ldr	r0, [pc, #32]	; (665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    663a:	b510      	push	{r4, lr}
    663c:	6840      	ldr	r0, [r0, #4]
    663e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6642:	b941      	cbnz	r1, 6656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6644:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6648:	2301      	movs	r3, #1
    664a:	2106      	movs	r1, #6
    664c:	3080      	adds	r0, #128	; 0x80
    664e:	f007 f821 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6652:	2800      	cmp	r0, #0
    6654:	d000      	beq.n	6658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6656:	2001      	movs	r0, #1
    6658:	bd10      	pop	{r4, pc}
    665a:	0000      	.short	0x0000
    665c:	20000124 	.word	0x20000124
    6660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6662:	4c59      	ldr	r4, [pc, #356]	; (67c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6664:	4606      	mov	r6, r0
    6666:	4615      	mov	r5, r2
    6668:	6860      	ldr	r0, [r4, #4]
    666a:	2200      	movs	r2, #0
    666c:	b111      	cbz	r1, 6674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    666e:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6672:	e006      	b.n	6682 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    6674:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6678:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    667c:	4411      	add	r1, r2
    667e:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6682:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6686:	f88d 1000 	strb.w	r1, [sp]
    668a:	9900      	ldr	r1, [sp, #0]
    668c:	9100      	str	r1, [sp, #0]
    668e:	f89d 1000 	ldrb.w	r1, [sp]
    6692:	b939      	cbnz	r1, 66a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    6694:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6698:	2301      	movs	r3, #1
    669a:	4619      	mov	r1, r3
    669c:	3080      	adds	r0, #128	; 0x80
    669e:	f006 fff9 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66a2:	b130      	cbz	r0, 66b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    66a4:	6860      	ldr	r0, [r4, #4]
    66a6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    66aa:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    66ae:	4411      	add	r1, r2
    66b0:	8001      	strh	r1, [r0, #0]
    66b2:	6860      	ldr	r0, [r4, #4]
    66b4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    66b8:	b132      	cbz	r2, 66c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    66ba:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    66be:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    66c2:	4419      	add	r1, r3
    66c4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    66c8:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    66cc:	2b00      	cmp	r3, #0
    66ce:	dd06      	ble.n	66de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    66d0:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    66d4:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    66d8:	4439      	add	r1, r7
    66da:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    66de:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    66e2:	bb09      	cbnz	r1, 6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    66e4:	b9be      	cbnz	r6, 6716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    66e6:	4938      	ldr	r1, [pc, #224]	; (67c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    66e8:	3910      	subs	r1, #16
    66ea:	7809      	ldrb	r1, [r1, #0]
    66ec:	2902      	cmp	r1, #2
    66ee:	d006      	beq.n	66fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    66f0:	2901      	cmp	r1, #1
    66f2:	d00a      	beq.n	670a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    66f4:	b1f5      	cbz	r5, 6734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    66f6:	06e9      	lsls	r1, r5, #27
    66f8:	d50b      	bpl.n	6712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    66fa:	211e      	movs	r1, #30
    66fc:	e042      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    66fe:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6702:	2906      	cmp	r1, #6
    6704:	d03e      	beq.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6706:	2116      	movs	r1, #22
    6708:	e03c      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    670a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    670e:	b959      	cbnz	r1, 6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6710:	e054      	b.n	67bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6712:	0729      	lsls	r1, r5, #28
    6714:	d501      	bpl.n	671a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6716:	213d      	movs	r1, #61	; 0x3d
    6718:	e034      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    671a:	06a9      	lsls	r1, r5, #26
    671c:	d501      	bpl.n	6722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    671e:	2123      	movs	r1, #35	; 0x23
    6720:	e030      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6722:	07a9      	lsls	r1, r5, #30
    6724:	d001      	beq.n	672a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6726:	212a      	movs	r1, #42	; 0x2a
    6728:	e02c      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    672a:	f640 51a3 	movw	r1, #3491	; 0xda3
    672e:	2031      	movs	r0, #49	; 0x31
    6730:	f7fa f92c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6734:	b12a      	cbz	r2, 6742 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6736:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    673a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    673e:	4291      	cmp	r1, r2
    6740:	d216      	bcs.n	6770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6742:	2b00      	cmp	r3, #0
    6744:	dd05      	ble.n	6752 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6746:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    674a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    674e:	4291      	cmp	r1, r2
    6750:	d20e      	bcs.n	6770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6752:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6756:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    675a:	428a      	cmp	r2, r1
    675c:	d30a      	bcc.n	6774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    675e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6762:	f88d 2000 	strb.w	r2, [sp]
    6766:	9a00      	ldr	r2, [sp, #0]
    6768:	9200      	str	r2, [sp, #0]
    676a:	f89d 2000 	ldrb.w	r2, [sp]
    676e:	b10a      	cbz	r2, 6774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6770:	2122      	movs	r1, #34	; 0x22
    6772:	e007      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6774:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6778:	b172      	cbz	r2, 6798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    677a:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    677e:	428a      	cmp	r2, r1
    6780:	d31c      	bcc.n	67bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6782:	2108      	movs	r1, #8
    6784:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6788:	f88d 2000 	strb.w	r2, [sp]
    678c:	9a00      	ldr	r2, [sp, #0]
    678e:	9200      	str	r2, [sp, #0]
    6790:	f89d 2000 	ldrb.w	r2, [sp]
    6794:	b96a      	cbnz	r2, 67b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    6796:	e005      	b.n	67a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    6798:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    679c:	2906      	cmp	r1, #6
    679e:	d30d      	bcc.n	67bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    67a0:	213e      	movs	r1, #62	; 0x3e
    67a2:	e7ef      	b.n	6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    67a4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    67a8:	2202      	movs	r2, #2
    67aa:	4908      	ldr	r1, [pc, #32]	; (67cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    67ac:	30b4      	adds	r0, #180	; 0xb4
    67ae:	f007 fb19 	bl	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    67b2:	6860      	ldr	r0, [r4, #4]
    67b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    67b8:	f008 bbeb 	b.w	ef92 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    67bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    67c0:	2100      	movs	r1, #0
    67c2:	f7fd bdcb 	b.w	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    67c6:	0000      	.short	0x0000
    67c8:	20000124 	.word	0x20000124
    67cc:	0000e0a1 	.word	0x0000e0a1
    67d0:	b570      	push	{r4, r5, r6, lr}
    67d2:	4614      	mov	r4, r2
    67d4:	460e      	mov	r6, r1
    67d6:	6861      	ldr	r1, [r4, #4]
    67d8:	4602      	mov	r2, r0
    67da:	2500      	movs	r5, #0
    67dc:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    67e0:	2a0e      	cmp	r2, #14
    67e2:	d00a      	beq.n	67fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    67e4:	2a12      	cmp	r2, #18
    67e6:	d011      	beq.n	680c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    67e8:	2a14      	cmp	r2, #20
    67ea:	d016      	beq.n	681a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    67ec:	2a17      	cmp	r2, #23
    67ee:	d023      	beq.n	6838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    67f0:	f240 31dd 	movw	r1, #989	; 0x3dd
    67f4:	2031      	movs	r0, #49	; 0x31
    67f6:	f7fa f8c9 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67fa:	2804      	cmp	r0, #4
    67fc:	d131      	bne.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    67fe:	4620      	mov	r0, r4
    6800:	f007 fc45 	bl	e08e <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6804:	4620      	mov	r0, r4
    6806:	f7fc fb6d 	bl	2ee4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    680a:	e02a      	b.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    680c:	280f      	cmp	r0, #15
    680e:	d128      	bne.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6810:	4620      	mov	r0, r4
    6812:	f007 fd99 	bl	e348 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6816:	4605      	mov	r5, r0
    6818:	e023      	b.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    681a:	281d      	cmp	r0, #29
    681c:	d121      	bne.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    681e:	4620      	mov	r0, r4
    6820:	f007 fc35 	bl	e08e <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6824:	b126      	cbz	r6, 6830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6826:	6860      	ldr	r0, [r4, #4]
    6828:	2105      	movs	r1, #5
    682a:	30ec      	adds	r0, #236	; 0xec
    682c:	f008 fb8d 	bl	ef4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6830:	480d      	ldr	r0, [pc, #52]	; (6868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6832:	f007 fcdd 	bl	e1f0 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6836:	e014      	b.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6838:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    683c:	2823      	cmp	r0, #35	; 0x23
    683e:	d110      	bne.n	6862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6840:	2600      	movs	r6, #0
    6842:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    6846:	4808      	ldr	r0, [pc, #32]	; (6868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6848:	f007 fc0d 	bl	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    684c:	6860      	ldr	r0, [r4, #4]
    684e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6852:	2801      	cmp	r0, #1
    6854:	d102      	bne.n	685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    6856:	2000      	movs	r0, #0
    6858:	f7ff fa78 	bl	5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    685c:	6860      	ldr	r0, [r4, #4]
    685e:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    6862:	4628      	mov	r0, r5
    6864:	bd70      	pop	{r4, r5, r6, pc}
    6866:	0000      	.short	0x0000
    6868:	20000124 	.word	0x20000124
    686c:	b570      	push	{r4, r5, r6, lr}
    686e:	4d2e      	ldr	r5, [pc, #184]	; (6928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    6870:	6868      	ldr	r0, [r5, #4]
    6872:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6876:	b151      	cbz	r1, 688e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6878:	2901      	cmp	r1, #1
    687a:	d008      	beq.n	688e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    687c:	2902      	cmp	r1, #2
    687e:	d009      	beq.n	6894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6880:	2903      	cmp	r1, #3
    6882:	d007      	beq.n	6894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6884:	f640 4118 	movw	r1, #3096	; 0xc18
    6888:	2031      	movs	r0, #49	; 0x31
    688a:	f7fa f87f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    688e:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6892:	e037      	b.n	6904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    6894:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6898:	2907      	cmp	r1, #7
    689a:	d036      	beq.n	690a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    689c:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    68a0:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    68a4:	2400      	movs	r4, #0
    68a6:	1c93      	adds	r3, r2, #2
    68a8:	4299      	cmp	r1, r3
    68aa:	d306      	bcc.n	68ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    68ac:	1a89      	subs	r1, r1, r2
    68ae:	1e89      	subs	r1, r1, #2
    68b0:	040c      	lsls	r4, r1, #16
    68b2:	0c24      	lsrs	r4, r4, #16
    68b4:	d001      	beq.n	68ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    68b6:	1e64      	subs	r4, r4, #1
    68b8:	b2a4      	uxth	r4, r4
    68ba:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    68be:	b139      	cbz	r1, 68d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    68c0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    68c4:	2301      	movs	r3, #1
    68c6:	2109      	movs	r1, #9
    68c8:	3080      	adds	r0, #128	; 0x80
    68ca:	f006 fee3 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68ce:	b340      	cbz	r0, 6922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    68d0:	f7ff feb2 	bl	6638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    68d4:	b178      	cbz	r0, 68f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    68d6:	686a      	ldr	r2, [r5, #4]
    68d8:	2000      	movs	r0, #0
    68da:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    68de:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    68e2:	1c93      	adds	r3, r2, #2
    68e4:	4299      	cmp	r1, r3
    68e6:	d303      	bcc.n	68f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    68e8:	1a88      	subs	r0, r1, r2
    68ea:	1e80      	subs	r0, r0, #2
    68ec:	d000      	beq.n	68f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    68ee:	1e40      	subs	r0, r0, #1
    68f0:	42a0      	cmp	r0, r4
    68f2:	d200      	bcs.n	68f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    68f4:	b284      	uxth	r4, r0
    68f6:	b10c      	cbz	r4, 68fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    68f8:	1e64      	subs	r4, r4, #1
    68fa:	b2a4      	uxth	r4, r4
    68fc:	6868      	ldr	r0, [r5, #4]
    68fe:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6902:	4421      	add	r1, r4
    6904:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    6908:	bd70      	pop	{r4, r5, r6, pc}
    690a:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    690e:	2903      	cmp	r1, #3
    6910:	d3bd      	bcc.n	688e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6912:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    6916:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    6918:	4411      	add	r1, r2
    691a:	1c49      	adds	r1, r1, #1
    691c:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6920:	bd70      	pop	{r4, r5, r6, pc}
    6922:	2400      	movs	r4, #0
    6924:	e7ea      	b.n	68fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6926:	0000      	.short	0x0000
    6928:	20000124 	.word	0x20000124

0000692c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    692c:	b570      	push	{r4, r5, r6, lr}
    692e:	6844      	ldr	r4, [r0, #4]
    6930:	220d      	movs	r2, #13
    6932:	f504 7598 	add.w	r5, r4, #304	; 0x130
    6936:	2100      	movs	r1, #0
    6938:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    693c:	f009 fe57 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6940:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6944:	2100      	movs	r1, #0
    6946:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    694a:	5501      	strb	r1, [r0, r4]
    694c:	f8a5 1017 	strh.w	r1, [r5, #23]
    6950:	7669      	strb	r1, [r5, #25]
    6952:	4608      	mov	r0, r1
    6954:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6958:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    695c:	1c40      	adds	r0, r0, #1
    695e:	b2c0      	uxtb	r0, r0
    6960:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    6964:	2802      	cmp	r0, #2
    6966:	d3f7      	bcc.n	6958 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6968:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    696c:	4620      	mov	r0, r4
    696e:	f008 fc57 	bl	f220 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6972:	2000      	movs	r0, #0
    6974:	21ff      	movs	r1, #255	; 0xff
    6976:	1822      	adds	r2, r4, r0
    6978:	1c40      	adds	r0, r0, #1
    697a:	b2c0      	uxtb	r0, r0
    697c:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    6980:	2802      	cmp	r0, #2
    6982:	d3f8      	bcc.n	6976 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6984:	bd70      	pop	{r4, r5, r6, pc}
	...

00006988 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6988:	4903      	ldr	r1, [pc, #12]	; (6998 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    698a:	884a      	ldrh	r2, [r1, #2]
    698c:	8002      	strh	r2, [r0, #0]
    698e:	7809      	ldrb	r1, [r1, #0]
    6990:	7081      	strb	r1, [r0, #2]
    6992:	2000      	movs	r0, #0
    6994:	4770      	bx	lr
    6996:	0000      	.short	0x0000
    6998:	200011c8 	.word	0x200011c8

0000699c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    699c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    699e:	460c      	mov	r4, r1
    69a0:	4605      	mov	r5, r0
    69a2:	8800      	ldrh	r0, [r0, #0]
    69a4:	4669      	mov	r1, sp
    69a6:	f006 fe5e 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    69aa:	2200      	movs	r2, #0
    69ac:	b128      	cbz	r0, 69ba <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    69ae:	f8c4 2002 	str.w	r2, [r4, #2]
    69b2:	71a2      	strb	r2, [r4, #6]
    69b4:	8022      	strh	r2, [r4, #0]
    69b6:	2002      	movs	r0, #2
    69b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    69ba:	9901      	ldr	r1, [sp, #4]
    69bc:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    69c0:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    69c4:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    69c8:	f8c4 0002 	str.w	r0, [r4, #2]
    69cc:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    69d0:	71a0      	strb	r0, [r4, #6]
    69d2:	8828      	ldrh	r0, [r5, #0]
    69d4:	8020      	strh	r0, [r4, #0]
    69d6:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    69da:	f88d 0008 	strb.w	r0, [sp, #8]
    69de:	9802      	ldr	r0, [sp, #8]
    69e0:	9002      	str	r0, [sp, #8]
    69e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    69e6:	2800      	cmp	r0, #0
    69e8:	d1ea      	bne.n	69c0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    69ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000069ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    69ec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    69ee:	460d      	mov	r5, r1
    69f0:	4606      	mov	r6, r0
    69f2:	8800      	ldrh	r0, [r0, #0]
    69f4:	4669      	mov	r1, sp
    69f6:	f006 fe36 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    69fa:	2800      	cmp	r0, #0
    69fc:	d11a      	bne.n	6a34 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    69fe:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6a02:	2700      	movs	r7, #0
    6a04:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6a08:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    6a0c:	f009 f904 	bl	fc18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6a10:	70a8      	strb	r0, [r5, #2]
    6a12:	7860      	ldrb	r0, [r4, #1]
    6a14:	f009 f900 	bl	fc18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6a18:	70e8      	strb	r0, [r5, #3]
    6a1a:	78a0      	ldrb	r0, [r4, #2]
    6a1c:	f88d 0008 	strb.w	r0, [sp, #8]
    6a20:	9802      	ldr	r0, [sp, #8]
    6a22:	9002      	str	r0, [sp, #8]
    6a24:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6a28:	3c6a      	subs	r4, #106	; 0x6a
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d1ea      	bne.n	6a04 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    6a2e:	8830      	ldrh	r0, [r6, #0]
    6a30:	8028      	strh	r0, [r5, #0]
    6a32:	2000      	movs	r0, #0
    6a34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006a38 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6a38:	4903      	ldr	r1, [pc, #12]	; (6a48 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    6a3a:	888a      	ldrh	r2, [r1, #4]
    6a3c:	8002      	strh	r2, [r0, #0]
    6a3e:	88c9      	ldrh	r1, [r1, #6]
    6a40:	8041      	strh	r1, [r0, #2]
    6a42:	2000      	movs	r0, #0
    6a44:	4770      	bx	lr
    6a46:	0000      	.short	0x0000
    6a48:	2000029c 	.word	0x2000029c

00006a4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    6a4c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6a4e:	2400      	movs	r4, #0
    6a50:	a902      	add	r1, sp, #8
    6a52:	f88d 4004 	strb.w	r4, [sp, #4]
    6a56:	f88d 4008 	strb.w	r4, [sp, #8]
    6a5a:	9100      	str	r1, [sp, #0]
    6a5c:	7882      	ldrb	r2, [r0, #2]
    6a5e:	7841      	ldrb	r1, [r0, #1]
    6a60:	7800      	ldrb	r0, [r0, #0]
    6a62:	ab01      	add	r3, sp, #4
    6a64:	f009 fa4c 	bl	ff00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    6a68:	2800      	cmp	r0, #0
    6a6a:	d112      	bne.n	6a92 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    6a6c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6a70:	f009 f986 	bl	fd80 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6a74:	b170      	cbz	r0, 6a94 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6a76:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6a7a:	f009 f981 	bl	fd80 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6a7e:	b148      	cbz	r0, 6a94 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6a80:	4805      	ldr	r0, [pc, #20]	; (6a98 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    6a82:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6a86:	7381      	strb	r1, [r0, #14]
    6a88:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6a8c:	73c1      	strb	r1, [r0, #15]
    6a8e:	8204      	strh	r4, [r0, #16]
    6a90:	2000      	movs	r0, #0
    6a92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6a94:	2011      	movs	r0, #17
    6a96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6a98:	200011c8 	.word	0x200011c8

00006a9c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6a9c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6aa0:	460f      	mov	r7, r1
    6aa2:	4605      	mov	r5, r0
    6aa4:	7806      	ldrb	r6, [r0, #0]
    6aa6:	f009 f91e 	bl	fce6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    6aaa:	2800      	cmp	r0, #0
    6aac:	d10e      	bne.n	6acc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6aae:	4628      	mov	r0, r5
    6ab0:	f009 f8f3 	bl	fc9a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d109      	bne.n	6acc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6ab8:	2101      	movs	r1, #1
    6aba:	4630      	mov	r0, r6
    6abc:	f7fa fa94 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6ac0:	0004      	movs	r4, r0
    6ac2:	d005      	beq.n	6ad0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    6ac4:	f007 ff66 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6ac8:	b170      	cbz	r0, 6ae8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    6aca:	200c      	movs	r0, #12
    6acc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6ad0:	2101      	movs	r1, #1
    6ad2:	4630      	mov	r0, r6
    6ad4:	f7fa fa50 	bl	f78 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6ad8:	0004      	movs	r4, r0
    6ada:	d013      	beq.n	6b04 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    6adc:	4817      	ldr	r0, [pc, #92]	; (6b3c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    6ade:	f990 1000 	ldrsb.w	r1, [r0]
    6ae2:	4620      	mov	r0, r4
    6ae4:	f007 fd2b 	bl	e53e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6ae8:	4620      	mov	r0, r4
    6aea:	f007 fd93 	bl	e614 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6aee:	7038      	strb	r0, [r7, #0]
    6af0:	74e8      	strb	r0, [r5, #19]
    6af2:	4629      	mov	r1, r5
    6af4:	4620      	mov	r0, r4
    6af6:	f7fc fc57 	bl	33a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6afa:	4606      	mov	r6, r0
    6afc:	7e68      	ldrb	r0, [r5, #25]
    6afe:	b1d0      	cbz	r0, 6b36 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6b00:	b12e      	cbz	r6, 6b0e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    6b02:	e018      	b.n	6b36 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6b04:	f241 512e 	movw	r1, #5422	; 0x152e
    6b08:	2039      	movs	r0, #57	; 0x39
    6b0a:	f7f9 ff3f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b0e:	2200      	movs	r2, #0
    6b10:	4668      	mov	r0, sp
    6b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6b14:	f006 fbea 	bl	d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6b18:	2200      	movs	r2, #0
    6b1a:	2101      	movs	r1, #1
    6b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6b1e:	f006 fc5f 	bl	d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6b22:	2204      	movs	r2, #4
    6b24:	4668      	mov	r0, sp
    6b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6b28:	f006 fbe0 	bl	d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6b2c:	2200      	movs	r2, #0
    6b2e:	4611      	mov	r1, r2
    6b30:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6b32:	f006 fc55 	bl	d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6b36:	4630      	mov	r0, r6
    6b38:	e7c8      	b.n	6acc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6b3a:	0000      	.short	0x0000
    6b3c:	20000294 	.word	0x20000294

00006b40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6b40:	7801      	ldrb	r1, [r0, #0]
    6b42:	b171      	cbz	r1, 6b62 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b44:	7841      	ldrb	r1, [r0, #1]
    6b46:	b161      	cbz	r1, 6b62 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b48:	8841      	ldrh	r1, [r0, #2]
    6b4a:	291b      	cmp	r1, #27
    6b4c:	d309      	bcc.n	6b62 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b4e:	8881      	ldrh	r1, [r0, #4]
    6b50:	291b      	cmp	r1, #27
    6b52:	d306      	bcc.n	6b62 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6b54:	4904      	ldr	r1, [pc, #16]	; (6b68 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6b56:	6802      	ldr	r2, [r0, #0]
    6b58:	600a      	str	r2, [r1, #0]
    6b5a:	8880      	ldrh	r0, [r0, #4]
    6b5c:	8088      	strh	r0, [r1, #4]
    6b5e:	2000      	movs	r0, #0
    6b60:	4770      	bx	lr
    6b62:	2012      	movs	r0, #18
    6b64:	4770      	bx	lr
    6b66:	0000      	.short	0x0000
    6b68:	200011c8 	.word	0x200011c8

00006b6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6b6c:	6800      	ldr	r0, [r0, #0]
    6b6e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6b72:	4288      	cmp	r0, r1
    6b74:	d303      	bcc.n	6b7e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6b76:	4903      	ldr	r1, [pc, #12]	; (6b84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6b78:	6088      	str	r0, [r1, #8]
    6b7a:	2000      	movs	r0, #0
    6b7c:	4770      	bx	lr
    6b7e:	2012      	movs	r0, #18
    6b80:	4770      	bx	lr
    6b82:	0000      	.short	0x0000
    6b84:	200011c8 	.word	0x200011c8

00006b88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6b88:	4a03      	ldr	r2, [pc, #12]	; (6b98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6b8a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6b8e:	6001      	str	r1, [r0, #0]
    6b90:	6042      	str	r2, [r0, #4]
    6b92:	2000      	movs	r0, #0
    6b94:	4770      	bx	lr
    6b96:	0000      	.short	0x0000
    6b98:	000070e4 	.word	0x000070e4

00006b9c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    6b9c:	b50e      	push	{r1, r2, r3, lr}
    6b9e:	8800      	ldrh	r0, [r0, #0]
    6ba0:	4669      	mov	r1, sp
    6ba2:	f006 fd60 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6ba6:	b960      	cbnz	r0, 6bc2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6ba8:	9801      	ldr	r0, [sp, #4]
    6baa:	f009 f965 	bl	fe78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    6bae:	b140      	cbz	r0, 6bc2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6bb0:	9801      	ldr	r0, [sp, #4]
    6bb2:	4601      	mov	r1, r0
    6bb4:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    6bb8:	3080      	adds	r0, #128	; 0x80
    6bba:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    6bbe:	b962      	cbnz	r2, 6bda <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    6bc0:	e001      	b.n	6bc6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    6bc2:	2002      	movs	r0, #2
    6bc4:	bd0e      	pop	{r1, r2, r3, pc}
    6bc6:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    6bca:	f88d 2008 	strb.w	r2, [sp, #8]
    6bce:	9a02      	ldr	r2, [sp, #8]
    6bd0:	9202      	str	r2, [sp, #8]
    6bd2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6bd6:	2201      	movs	r2, #1
    6bd8:	b10b      	cbz	r3, 6bde <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    6bda:	203a      	movs	r0, #58	; 0x3a
    6bdc:	bd0e      	pop	{r1, r2, r3, pc}
    6bde:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    6be2:	079b      	lsls	r3, r3, #30
    6be4:	d006      	beq.n	6bf4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    6be6:	2202      	movs	r2, #2
    6be8:	4905      	ldr	r1, [pc, #20]	; (6c00 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    6bea:	305e      	adds	r0, #94	; 0x5e
    6bec:	f007 f90e 	bl	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6bf0:	2000      	movs	r0, #0
    6bf2:	bd0e      	pop	{r1, r2, r3, pc}
    6bf4:	700a      	strb	r2, [r1, #0]
    6bf6:	4668      	mov	r0, sp
    6bf8:	f007 f8c8 	bl	dd8c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6bfc:	e7f8      	b.n	6bf0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    6bfe:	0000      	.short	0x0000
    6c00:	0000e381 	.word	0x0000e381

00006c04 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    6c04:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6c08:	4613      	mov	r3, r2
    6c0a:	4a33      	ldr	r2, [pc, #204]	; (6cd8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    6c0c:	460f      	mov	r7, r1
    6c0e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    6c12:	8814      	ldrh	r4, [r2, #0]
    6c14:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    6c18:	428c      	cmp	r4, r1
    6c1a:	d200      	bcs.n	6c1e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    6c1c:	4621      	mov	r1, r4
    6c1e:	4688      	mov	r8, r1
    6c20:	8891      	ldrh	r1, [r2, #4]
    6c22:	42b1      	cmp	r1, r6
    6c24:	d200      	bcs.n	6c28 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    6c26:	460e      	mov	r6, r1
    6c28:	8851      	ldrh	r1, [r2, #2]
    6c2a:	f640 0448 	movw	r4, #2120	; 0x848
    6c2e:	42a1      	cmp	r1, r4
    6c30:	d300      	bcc.n	6c34 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    6c32:	4621      	mov	r1, r4
    6c34:	88d5      	ldrh	r5, [r2, #6]
    6c36:	42a5      	cmp	r5, r4
    6c38:	d300      	bcc.n	6c3c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    6c3a:	4625      	mov	r5, r4
    6c3c:	42a1      	cmp	r1, r4
    6c3e:	d200      	bcs.n	6c42 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    6c40:	460c      	mov	r4, r1
    6c42:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6c46:	2e1b      	cmp	r6, #27
    6c48:	d001      	beq.n	6c4e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    6c4a:	4295      	cmp	r5, r2
    6c4c:	d104      	bne.n	6c58 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    6c4e:	f1b8 0f1b 	cmp.w	r8, #27
    6c52:	d03e      	beq.n	6cd2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6c54:	4294      	cmp	r4, r2
    6c56:	d03c      	beq.n	6cd2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6c58:	466a      	mov	r2, sp
    6c5a:	4619      	mov	r1, r3
    6c5c:	f009 f8b3 	bl	fdc6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    6c60:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    6c64:	4641      	mov	r1, r8
    6c66:	4540      	cmp	r0, r8
    6c68:	d900      	bls.n	6c6c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    6c6a:	4608      	mov	r0, r1
    6c6c:	80f8      	strh	r0, [r7, #6]
    6c6e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6c72:	42a1      	cmp	r1, r4
    6c74:	d800      	bhi.n	6c78 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    6c76:	460c      	mov	r4, r1
    6c78:	813c      	strh	r4, [r7, #8]
    6c7a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6c7e:	42b1      	cmp	r1, r6
    6c80:	d800      	bhi.n	6c84 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    6c82:	460e      	mov	r6, r1
    6c84:	807e      	strh	r6, [r7, #2]
    6c86:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6c8a:	42a9      	cmp	r1, r5
    6c8c:	d800      	bhi.n	6c90 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    6c8e:	460d      	mov	r5, r1
    6c90:	80bd      	strh	r5, [r7, #4]
    6c92:	21ff      	movs	r1, #255	; 0xff
    6c94:	7039      	strb	r1, [r7, #0]
    6c96:	381b      	subs	r0, #27
    6c98:	28e0      	cmp	r0, #224	; 0xe0
    6c9a:	d902      	bls.n	6ca2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    6c9c:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    6ca0:	e014      	b.n	6ccc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ca2:	3e1b      	subs	r6, #27
    6ca4:	2ee0      	cmp	r6, #224	; 0xe0
    6ca6:	d902      	bls.n	6cae <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    6ca8:	f240 51b2 	movw	r1, #1458	; 0x5b2
    6cac:	e00e      	b.n	6ccc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6cae:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    6cb2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    6cb6:	4284      	cmp	r4, r0
    6cb8:	d902      	bls.n	6cc0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    6cba:	f240 51b4 	movw	r1, #1460	; 0x5b4
    6cbe:	e005      	b.n	6ccc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6cc0:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    6cc4:	4285      	cmp	r5, r0
    6cc6:	d904      	bls.n	6cd2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6cc8:	f240 51b6 	movw	r1, #1462	; 0x5b6
    6ccc:	2039      	movs	r0, #57	; 0x39
    6cce:	f7f9 fe5d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6cd6:	0000      	.short	0x0000
    6cd8:	2000029c 	.word	0x2000029c

00006cdc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    6cdc:	b570      	push	{r4, r5, r6, lr}
    6cde:	b086      	sub	sp, #24
    6ce0:	4604      	mov	r4, r0
    6ce2:	f000 fa9d 	bl	7220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6ce6:	0940      	lsrs	r0, r0, #5
    6ce8:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6cec:	4e2d      	ldr	r6, [pc, #180]	; (6da4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    6cee:	07c0      	lsls	r0, r0, #31
    6cf0:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6cf4:	d002      	beq.n	6cfc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    6cf6:	8871      	ldrh	r1, [r6, #2]
    6cf8:	88b0      	ldrh	r0, [r6, #4]
    6cfa:	e001      	b.n	6d00 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    6cfc:	211b      	movs	r1, #27
    6cfe:	4608      	mov	r0, r1
    6d00:	84e9      	strh	r1, [r5, #38]	; 0x26
    6d02:	8528      	strh	r0, [r5, #40]	; 0x28
    6d04:	f000 fa8c 	bl	7220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6d08:	0788      	lsls	r0, r1, #30
    6d0a:	f04f 0501 	mov.w	r5, #1
    6d0e:	d505      	bpl.n	6d1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    6d10:	f88d 5000 	strb.w	r5, [sp]
    6d14:	4668      	mov	r0, sp
    6d16:	9401      	str	r4, [sp, #4]
    6d18:	f7ff fe08 	bl	692c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6d1c:	68b0      	ldr	r0, [r6, #8]
    6d1e:	62e0      	str	r0, [r4, #44]	; 0x2c
    6d20:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6d24:	6121      	str	r1, [r4, #16]
    6d26:	8821      	ldrh	r1, [r4, #0]
    6d28:	f8ad 1004 	strh.w	r1, [sp, #4]
    6d2c:	7bb1      	ldrb	r1, [r6, #14]
    6d2e:	f88d 1006 	strb.w	r1, [sp, #6]
    6d32:	7bf1      	ldrb	r1, [r6, #15]
    6d34:	f88d 1007 	strb.w	r1, [sp, #7]
    6d38:	8a31      	ldrh	r1, [r6, #16]
    6d3a:	f8ad 1008 	strh.w	r1, [sp, #8]
    6d3e:	a904      	add	r1, sp, #16
    6d40:	9100      	str	r1, [sp, #0]
    6d42:	4628      	mov	r0, r5
    6d44:	ab03      	add	r3, sp, #12
    6d46:	aa01      	add	r2, sp, #4
    6d48:	4621      	mov	r1, r4
    6d4a:	f009 f872 	bl	fe32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    6d4e:	b138      	cbz	r0, 6d60 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    6d50:	8820      	ldrh	r0, [r4, #0]
    6d52:	2100      	movs	r1, #0
    6d54:	f7fa f9ea 	bl	112c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6d58:	b308      	cbz	r0, 6d9e <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    6d5a:	f240 517d 	movw	r1, #1405	; 0x57d
    6d5e:	e01b      	b.n	6d98 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    6d60:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6d64:	f88d 0014 	strb.w	r0, [sp, #20]
    6d68:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6d6c:	f88d 0015 	strb.w	r0, [sp, #21]
    6d70:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6d74:	f8ad 0016 	strh.w	r0, [sp, #22]
    6d78:	a905      	add	r1, sp, #20
    6d7a:	4620      	mov	r0, r4
    6d7c:	f006 fd30 	bl	d7e0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6d80:	7870      	ldrb	r0, [r6, #1]
    6d82:	9000      	str	r0, [sp, #0]
    6d84:	7833      	ldrb	r3, [r6, #0]
    6d86:	88b2      	ldrh	r2, [r6, #4]
    6d88:	8871      	ldrh	r1, [r6, #2]
    6d8a:	8820      	ldrh	r0, [r4, #0]
    6d8c:	f7fa fa00 	bl	1190 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6d90:	2800      	cmp	r0, #0
    6d92:	d005      	beq.n	6da0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    6d94:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    6d98:	2039      	movs	r0, #57	; 0x39
    6d9a:	f7f9 fdf7 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d9e:	2009      	movs	r0, #9
    6da0:	b006      	add	sp, #24
    6da2:	bd70      	pop	{r4, r5, r6, pc}
    6da4:	200011c8 	.word	0x200011c8

00006da8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    6da8:	b510      	push	{r4, lr}
    6daa:	2005      	movs	r0, #5
    6dac:	f000 fa2c 	bl	7208 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    6db0:	f7fd ff84 	bl	4cbc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    6db4:	4902      	ldr	r1, [pc, #8]	; (6dc0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    6db6:	4801      	ldr	r0, [pc, #4]	; (6dbc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    6db8:	6048      	str	r0, [r1, #4]
    6dba:	bd10      	pop	{r4, pc}
    6dbc:	00006c05 	.word	0x00006c05
    6dc0:	20000294 	.word	0x20000294
    6dc4:	b51c      	push	{r2, r3, r4, lr}
    6dc6:	4909      	ldr	r1, [pc, #36]	; (6dec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    6dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
    6dcc:	e9cd 0100 	strd	r0, r1, [sp]
    6dd0:	e005      	b.n	6dde <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6dd2:	9800      	ldr	r0, [sp, #0]
    6dd4:	f007 fdde 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6dd8:	b108      	cbz	r0, 6dde <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6dda:	2001      	movs	r0, #1
    6ddc:	bd1c      	pop	{r2, r3, r4, pc}
    6dde:	4668      	mov	r0, sp
    6de0:	f7fa f954 	bl	108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6de4:	2800      	cmp	r0, #0
    6de6:	d0f4      	beq.n	6dd2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    6de8:	2000      	movs	r0, #0
    6dea:	bd1c      	pop	{r2, r3, r4, pc}
    6dec:	000070e4 	.word	0x000070e4
    6df0:	b510      	push	{r4, lr}
    6df2:	480d      	ldr	r0, [pc, #52]	; (6e28 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
    6df4:	2100      	movs	r1, #0
    6df6:	4b0d      	ldr	r3, [pc, #52]	; (6e2c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
    6df8:	74c1      	strb	r1, [r0, #19]
    6dfa:	8281      	strh	r1, [r0, #20]
    6dfc:	221b      	movs	r2, #27
    6dfe:	801a      	strh	r2, [r3, #0]
    6e00:	f44f 74a4 	mov.w	r4, #328	; 0x148
    6e04:	805c      	strh	r4, [r3, #2]
    6e06:	809a      	strh	r2, [r3, #4]
    6e08:	80dc      	strh	r4, [r3, #6]
    6e0a:	7381      	strb	r1, [r0, #14]
    6e0c:	73c1      	strb	r1, [r0, #15]
    6e0e:	2303      	movs	r3, #3
    6e10:	7003      	strb	r3, [r0, #0]
    6e12:	2302      	movs	r3, #2
    6e14:	7043      	strb	r3, [r0, #1]
    6e16:	8042      	strh	r2, [r0, #2]
    6e18:	8082      	strh	r2, [r0, #4]
    6e1a:	f640 62a6 	movw	r2, #3750	; 0xea6
    6e1e:	6082      	str	r2, [r0, #8]
    6e20:	7481      	strb	r1, [r0, #18]
    6e22:	7301      	strb	r1, [r0, #12]
    6e24:	bd10      	pop	{r4, pc}
    6e26:	0000      	.short	0x0000
    6e28:	200011c8 	.word	0x200011c8
    6e2c:	2000029c 	.word	0x2000029c
    6e30:	b510      	push	{r4, lr}
    6e32:	2101      	movs	r1, #1
    6e34:	2000      	movs	r0, #0
    6e36:	f7fa f8d7 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e3a:	0004      	movs	r4, r0
    6e3c:	d10a      	bne.n	6e54 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
    6e3e:	2101      	movs	r1, #1
    6e40:	f7fa f89a 	bl	f78 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6e44:	0004      	movs	r4, r0
    6e46:	d007      	beq.n	6e58 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    6e48:	4806      	ldr	r0, [pc, #24]	; (6e64 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
    6e4a:	f990 1000 	ldrsb.w	r1, [r0]
    6e4e:	4620      	mov	r0, r4
    6e50:	f007 fb75 	bl	e53e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6e54:	4620      	mov	r0, r4
    6e56:	bd10      	pop	{r4, pc}
    6e58:	f240 3113 	movw	r1, #787	; 0x313
    6e5c:	2039      	movs	r0, #57	; 0x39
    6e5e:	f7f9 fd95 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e62:	0000      	.short	0x0000
    6e64:	20000294 	.word	0x20000294

00006e68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    6e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e6a:	460c      	mov	r4, r1
    6e6c:	4605      	mov	r5, r0
    6e6e:	f007 fbd4 	bl	e61a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    6e72:	b158      	cbz	r0, 6e8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    6e74:	4628      	mov	r0, r5
    6e76:	f007 fbc3 	bl	e600 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6e7a:	b148      	cbz	r0, 6e90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6e7c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6e80:	2112      	movs	r1, #18
    6e82:	b108      	cbz	r0, 6e88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    6e84:	2880      	cmp	r0, #128	; 0x80
    6e86:	d903      	bls.n	6e90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    6e88:	4608      	mov	r0, r1
    6e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e8c:	2142      	movs	r1, #66	; 0x42
    6e8e:	e7fb      	b.n	6e88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    6e90:	4628      	mov	r0, r5
    6e92:	f007 fba6 	bl	e5e2 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    6e96:	b120      	cbz	r0, 6ea2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    6e98:	4628      	mov	r0, r5
    6e9a:	f007 fb11 	bl	e4c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    6e9e:	b110      	cbz	r0, 6ea6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    6ea0:	e005      	b.n	6eae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    6ea2:	210c      	movs	r1, #12
    6ea4:	e7f0      	b.n	6e88 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    6ea6:	4628      	mov	r0, r5
    6ea8:	f007 fba4 	bl	e5f4 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    6eac:	b120      	cbz	r0, 6eb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    6eae:	4628      	mov	r0, r5
    6eb0:	f007 fd70 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6eb4:	b930      	cbnz	r0, 6ec4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    6eb6:	e001      	b.n	6ebc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    6eb8:	2012      	movs	r0, #18
    6eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ebc:	4628      	mov	r0, r5
    6ebe:	f007 fb1a 	bl	e4f6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    6ec2:	b108      	cbz	r0, 6ec8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    6ec4:	200c      	movs	r0, #12
    6ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ec8:	4628      	mov	r0, r5
    6eca:	f7fc fa0b 	bl	32e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    6ece:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    6ed2:	f242 7010 	movw	r0, #10000	; 0x2710
    6ed6:	4346      	muls	r6, r0
    6ed8:	78e1      	ldrb	r1, [r4, #3]
    6eda:	4628      	mov	r0, r5
    6edc:	f007 fb78 	bl	e5d0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    6ee0:	4628      	mov	r0, r5
    6ee2:	f007 fb89 	bl	e5f8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    6ee6:	b1a8      	cbz	r0, 6f14 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    6ee8:	2100      	movs	r1, #0
    6eea:	4668      	mov	r0, sp
    6eec:	f7fa f8f0 	bl	10d0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    6ef0:	0004      	movs	r4, r0
    6ef2:	d019      	beq.n	6f28 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    6ef4:	2100      	movs	r1, #0
    6ef6:	f7fb fae7 	bl	24c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    6efa:	f8bd 0000 	ldrh.w	r0, [sp]
    6efe:	8020      	strh	r0, [r4, #0]
    6f00:	4621      	mov	r1, r4
    6f02:	4628      	mov	r0, r5
    6f04:	f007 fba0 	bl	e648 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    6f08:	4628      	mov	r0, r5
    6f0a:	f007 fb7d 	bl	e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    6f0e:	b168      	cbz	r0, 6f2c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    6f10:	2001      	movs	r0, #1
    6f12:	e00e      	b.n	6f32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    6f14:	4632      	mov	r2, r6
    6f16:	2100      	movs	r1, #0
    6f18:	4628      	mov	r0, r5
    6f1a:	f7fd f921 	bl	4160 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6f1e:	2800      	cmp	r0, #0
    6f20:	d0d1      	beq.n	6ec6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    6f22:	f241 7168 	movw	r1, #5992	; 0x1768
    6f26:	e012      	b.n	6f4e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    6f28:	200d      	movs	r0, #13
    6f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f2c:	4628      	mov	r0, r5
    6f2e:	f007 fb89 	bl	e644 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    6f32:	4601      	mov	r1, r0
    6f34:	4620      	mov	r0, r4
    6f36:	f7ff fed1 	bl	6cdc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    6f3a:	2800      	cmp	r0, #0
    6f3c:	d1f5      	bne.n	6f2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    6f3e:	4632      	mov	r2, r6
    6f40:	4621      	mov	r1, r4
    6f42:	4628      	mov	r0, r5
    6f44:	f7fd f90c 	bl	4160 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    6f48:	b120      	cbz	r0, 6f54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    6f4a:	f241 718b 	movw	r1, #6027	; 0x178b
    6f4e:	2039      	movs	r0, #57	; 0x39
    6f50:	f7f9 fd1c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f54:	4804      	ldr	r0, [pc, #16]	; (6f68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    6f56:	6843      	ldr	r3, [r0, #4]
    6f58:	b123      	cbz	r3, 6f64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    6f5a:	2200      	movs	r2, #0
    6f5c:	f504 7199 	add.w	r1, r4, #306	; 0x132
    6f60:	4620      	mov	r0, r4
    6f62:	4798      	blx	r3
    6f64:	2000      	movs	r0, #0
    6f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f68:	20000294 	.word	0x20000294
    6f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f70:	b088      	sub	sp, #32
    6f72:	4604      	mov	r4, r0
    6f74:	8800      	ldrh	r0, [r0, #0]
    6f76:	a906      	add	r1, sp, #24
    6f78:	f006 fb75 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6f7c:	2800      	cmp	r0, #0
    6f7e:	d147      	bne.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6f80:	9807      	ldr	r0, [sp, #28]
    6f82:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    6f86:	f88d 1008 	strb.w	r1, [sp, #8]
    6f8a:	9902      	ldr	r1, [sp, #8]
    6f8c:	9102      	str	r1, [sp, #8]
    6f8e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6f92:	3080      	adds	r0, #128	; 0x80
    6f94:	b101      	cbz	r1, 6f98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    6f96:	2101      	movs	r1, #1
    6f98:	f88d 100c 	strb.w	r1, [sp, #12]
    6f9c:	7b01      	ldrb	r1, [r0, #12]
    6f9e:	f04f 0800 	mov.w	r8, #0
    6fa2:	0689      	lsls	r1, r1, #26
    6fa4:	d502      	bpl.n	6fac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    6fa6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6faa:	b149      	cbz	r1, 6fc0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    6fac:	f05f 0100 	movs.w	r1, #0
    6fb0:	f88d 1004 	strb.w	r1, [sp, #4]
    6fb4:	2105      	movs	r1, #5
    6fb6:	306c      	adds	r0, #108	; 0x6c
    6fb8:	f008 f983 	bl	f2c2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    6fbc:	b110      	cbz	r0, 6fc4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    6fbe:	e004      	b.n	6fca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    6fc0:	2101      	movs	r1, #1
    6fc2:	e7f5      	b.n	6fb0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    6fc4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6fc8:	b308      	cbz	r0, 700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    6fca:	8921      	ldrh	r1, [r4, #8]
    6fcc:	88e0      	ldrh	r0, [r4, #6]
    6fce:	f008 feec 	bl	fdaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d11c      	bne.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6fd6:	88a1      	ldrh	r1, [r4, #4]
    6fd8:	8860      	ldrh	r0, [r4, #2]
    6fda:	f008 fee6 	bl	fdaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    6fde:	2800      	cmp	r0, #0
    6fe0:	d116      	bne.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6fe2:	8921      	ldrh	r1, [r4, #8]
    6fe4:	88e0      	ldrh	r0, [r4, #6]
    6fe6:	f008 fed6 	bl	fd96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    6fea:	2800      	cmp	r0, #0
    6fec:	d110      	bne.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6fee:	88a1      	ldrh	r1, [r4, #4]
    6ff0:	8860      	ldrh	r0, [r4, #2]
    6ff2:	f008 fed0 	bl	fd96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    6ff6:	0006      	movs	r6, r0
    6ff8:	d10a      	bne.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    6ffa:	9807      	ldr	r0, [sp, #28]
    6ffc:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7000:	27ff      	movs	r7, #255	; 0xff
    7002:	706f      	strb	r7, [r5, #1]
    7004:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7008:	b129      	cbz	r1, 7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    700a:	263a      	movs	r6, #58	; 0x3a
    700c:	e02e      	b.n	706c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    700e:	201a      	movs	r0, #26
    7010:	b008      	add	sp, #32
    7012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7016:	4641      	mov	r1, r8
    7018:	aa03      	add	r2, sp, #12
    701a:	f008 fed4 	bl	fdc6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    701e:	8861      	ldrh	r1, [r4, #2]
    7020:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7024:	4281      	cmp	r1, r0
    7026:	d200      	bcs.n	702a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    7028:	4608      	mov	r0, r1
    702a:	80e8      	strh	r0, [r5, #6]
    702c:	88a1      	ldrh	r1, [r4, #4]
    702e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7032:	4281      	cmp	r1, r0
    7034:	d200      	bcs.n	7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    7036:	4608      	mov	r0, r1
    7038:	8128      	strh	r0, [r5, #8]
    703a:	88e2      	ldrh	r2, [r4, #6]
    703c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7040:	428a      	cmp	r2, r1
    7042:	d200      	bcs.n	7046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    7044:	4611      	mov	r1, r2
    7046:	8069      	strh	r1, [r5, #2]
    7048:	8922      	ldrh	r2, [r4, #8]
    704a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    704e:	428a      	cmp	r2, r1
    7050:	d200      	bcs.n	7054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    7052:	4611      	mov	r1, r2
    7054:	f640 0248 	movw	r2, #2120	; 0x848
    7058:	80a9      	strh	r1, [r5, #4]
    705a:	4291      	cmp	r1, r2
    705c:	d300      	bcc.n	7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    705e:	4611      	mov	r1, r2
    7060:	80a9      	strh	r1, [r5, #4]
    7062:	4290      	cmp	r0, r2
    7064:	d200      	bcs.n	7068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    7066:	4602      	mov	r2, r0
    7068:	812a      	strh	r2, [r5, #8]
    706a:	702f      	strb	r7, [r5, #0]
    706c:	f885 8001 	strb.w	r8, [r5, #1]
    7070:	4630      	mov	r0, r6
    7072:	e7cd      	b.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    7074:	b51c      	push	{r2, r3, r4, lr}
    7076:	490c      	ldr	r1, [pc, #48]	; (70a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    7078:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    707c:	e9cd 0100 	strd	r0, r1, [sp]
    7080:	e00a      	b.n	7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    7082:	9c00      	ldr	r4, [sp, #0]
    7084:	4620      	mov	r0, r4
    7086:	f007 fc85 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    708a:	b128      	cbz	r0, 7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    708c:	4620      	mov	r0, r4
    708e:	f007 faea 	bl	e666 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    7092:	b108      	cbz	r0, 7098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>
    7094:	2001      	movs	r0, #1
    7096:	bd1c      	pop	{r2, r3, r4, pc}
    7098:	4668      	mov	r0, sp
    709a:	f7f9 fff7 	bl	108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    709e:	2800      	cmp	r0, #0
    70a0:	d0ef      	beq.n	7082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
    70a2:	2000      	movs	r0, #0
    70a4:	bd1c      	pop	{r2, r3, r4, pc}
    70a6:	0000      	.short	0x0000
    70a8:	000070e4 	.word	0x000070e4
    70ac:	b510      	push	{r4, lr}
    70ae:	4604      	mov	r4, r0
    70b0:	88c1      	ldrh	r1, [r0, #6]
    70b2:	8880      	ldrh	r0, [r0, #4]
    70b4:	f008 fe79 	bl	fdaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    70b8:	2800      	cmp	r0, #0
    70ba:	d10f      	bne.n	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    70bc:	8861      	ldrh	r1, [r4, #2]
    70be:	8820      	ldrh	r0, [r4, #0]
    70c0:	f008 fe73 	bl	fdaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    70c4:	2800      	cmp	r0, #0
    70c6:	d109      	bne.n	70dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    70c8:	4805      	ldr	r0, [pc, #20]	; (70e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>)
    70ca:	88a1      	ldrh	r1, [r4, #4]
    70cc:	8081      	strh	r1, [r0, #4]
    70ce:	8821      	ldrh	r1, [r4, #0]
    70d0:	8001      	strh	r1, [r0, #0]
    70d2:	88e1      	ldrh	r1, [r4, #6]
    70d4:	80c1      	strh	r1, [r0, #6]
    70d6:	8861      	ldrh	r1, [r4, #2]
    70d8:	8041      	strh	r1, [r0, #2]
    70da:	2000      	movs	r0, #0
    70dc:	bd10      	pop	{r4, pc}
    70de:	0000      	.short	0x0000
    70e0:	2000029c 	.word	0x2000029c
    70e4:	00000000 	.word	0x00000000
    70e8:	00010000 	.word	0x00010000
    70ec:	00000000 	.word	0x00000000
    70f0:	00010000 	.word	0x00010000
    70f4:	0d10770d 	.word	0x0d10770d
    70f8:	10770059 	.word	0x10770059
    70fc:	00000000 	.word	0x00000000
    7100:	00010000 	.word	0x00010000
    7104:	00000000 	.word	0x00000000
    7108:	00010000 	.word	0x00010000

0000710c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    710c:	b510      	push	{r4, lr}
    710e:	f7fb fc77 	bl	2a00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7112:	4c05      	ldr	r4, [pc, #20]	; (7128 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7114:	6860      	ldr	r0, [r4, #4]
    7116:	f008 ff50 	bl	ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    711a:	f008 fceb 	bl	faf4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    711e:	f7fb fe1d 	bl	2d5c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7122:	2001      	movs	r0, #1
    7124:	7020      	strb	r0, [r4, #0]
    7126:	bd10      	pop	{r4, pc}
    7128:	200002a4 	.word	0x200002a4

0000712c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    712c:	4801      	ldr	r0, [pc, #4]	; (7134 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    712e:	7800      	ldrb	r0, [r0, #0]
    7130:	4770      	bx	lr
    7132:	0000      	.short	0x0000
    7134:	200002a4 	.word	0x200002a4

00007138 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7138:	b510      	push	{r4, lr}
    713a:	4c06      	ldr	r4, [pc, #24]	; (7154 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    713c:	68a0      	ldr	r0, [r4, #8]
    713e:	f008 ff3c 	bl	ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    7142:	68e0      	ldr	r0, [r4, #12]
    7144:	f008 ff39 	bl	ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    7148:	f008 fd3e 	bl	fbc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    714c:	2000      	movs	r0, #0
    714e:	7020      	strb	r0, [r4, #0]
    7150:	bd10      	pop	{r4, pc}
    7152:	0000      	.short	0x0000
    7154:	200002a4 	.word	0x200002a4

00007158 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7158:	b510      	push	{r4, lr}
    715a:	4905      	ldr	r1, [pc, #20]	; (7170 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    715c:	4805      	ldr	r0, [pc, #20]	; (7174 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    715e:	f008 ff1f 	bl	ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7162:	4804      	ldr	r0, [pc, #16]	; (7174 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7168:	4903      	ldr	r1, [pc, #12]	; (7178 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    716a:	1d00      	adds	r0, r0, #4
    716c:	f008 bf18 	b.w	ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7170:	200002b4 	.word	0x200002b4
    7174:	200002a8 	.word	0x200002a8
    7178:	200002bc 	.word	0x200002bc

0000717c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    717c:	b510      	push	{r4, lr}
    717e:	4908      	ldr	r1, [pc, #32]	; (71a0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    7180:	4808      	ldr	r0, [pc, #32]	; (71a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7182:	f008 ff0d 	bl	ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7186:	4807      	ldr	r0, [pc, #28]	; (71a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7188:	4907      	ldr	r1, [pc, #28]	; (71a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    718a:	1d00      	adds	r0, r0, #4
    718c:	f008 ff08 	bl	ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7190:	4804      	ldr	r0, [pc, #16]	; (71a4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7196:	4905      	ldr	r1, [pc, #20]	; (71ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    7198:	3008      	adds	r0, #8
    719a:	f008 bf01 	b.w	ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    719e:	0000      	.short	0x0000
    71a0:	200002cc 	.word	0x200002cc
    71a4:	200002a8 	.word	0x200002a8
    71a8:	200002d4 	.word	0x200002d4
    71ac:	200002c4 	.word	0x200002c4

000071b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    71b0:	4801      	ldr	r0, [pc, #4]	; (71b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    71b2:	7840      	ldrb	r0, [r0, #1]
    71b4:	4770      	bx	lr
    71b6:	0000      	.short	0x0000
    71b8:	200002a4 	.word	0x200002a4
    71bc:	b510      	push	{r4, lr}
    71be:	f7fc f9b3 	bl	3528 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    71c2:	f7fd f87d 	bl	42c0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    71c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71ca:	4801      	ldr	r0, [pc, #4]	; (71d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    71cc:	f7fc b992 	b.w	34f4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    71d0:	20001460 	.word	0x20001460
    71d4:	490a      	ldr	r1, [pc, #40]	; (7200 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    71d6:	b510      	push	{r4, lr}
    71d8:	2001      	movs	r0, #1
    71da:	7048      	strb	r0, [r1, #1]
    71dc:	f7fc f9d4 	bl	3588 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    71e0:	f7fd fd84 	bl	4cec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    71e4:	f006 f97d 	bl	d4e2 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    71e8:	4906      	ldr	r1, [pc, #24]	; (7204 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    71ea:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    71ee:	f7fa fb7f 	bl	18f0 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    71f2:	2000      	movs	r0, #0
    71f4:	f005 ffc3 	bl	d17e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    71f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71fc:	f7fb bc06 	b.w	2a0c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7200:	200002a4 	.word	0x200002a4
    7204:	20001562 	.word	0x20001562

00007208 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7208:	4a04      	ldr	r2, [pc, #16]	; (721c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    720a:	08c1      	lsrs	r1, r0, #3
    720c:	f000 0307 	and.w	r3, r0, #7
    7210:	2001      	movs	r0, #1
    7212:	4098      	lsls	r0, r3
    7214:	5c53      	ldrb	r3, [r2, r1]
    7216:	4303      	orrs	r3, r0
    7218:	5453      	strb	r3, [r2, r1]
    721a:	4770      	bx	lr
    721c:	20000020 	.word	0x20000020

00007220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7220:	4901      	ldr	r1, [pc, #4]	; (7228 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7222:	e9d1 0100 	ldrd	r0, r1, [r1]
    7226:	4770      	bx	lr
    7228:	20000020 	.word	0x20000020

0000722c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    722c:	4806      	ldr	r0, [pc, #24]	; (7248 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    722e:	8801      	ldrh	r1, [r0, #0]
    7230:	7900      	ldrb	r0, [r0, #4]
    7232:	0602      	lsls	r2, r0, #24
    7234:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7238:	f000 0001 	and.w	r0, r0, #1
    723c:	1800      	adds	r0, r0, r0
    723e:	b2c0      	uxtb	r0, r0
    7240:	f040 0001 	orr.w	r0, r0, #1
    7244:	4770      	bx	lr
    7246:	0000      	.short	0x0000
    7248:	20000020 	.word	0x20000020

0000724c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    724c:	b510      	push	{r4, lr}
    724e:	f004 fd35 	bl	bcbc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7252:	2200      	movs	r2, #0
    7254:	4b08      	ldr	r3, [pc, #32]	; (7278 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7256:	4611      	mov	r1, r2
    7258:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    725c:	4284      	cmp	r4, r0
    725e:	d303      	bcc.n	7268 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7260:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7264:	7882      	ldrb	r2, [r0, #2]
    7266:	e003      	b.n	7270 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7268:	1c49      	adds	r1, r1, #1
    726a:	b2c9      	uxtb	r1, r1
    726c:	290c      	cmp	r1, #12
    726e:	d3f3      	bcc.n	7258 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7270:	4802      	ldr	r0, [pc, #8]	; (727c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7272:	7002      	strb	r2, [r0, #0]
    7274:	bd10      	pop	{r4, pc}
    7276:	0000      	.short	0x0000
    7278:	0001000c 	.word	0x0001000c
    727c:	20000373 	.word	0x20000373

00007280 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    7280:	b570      	push	{r4, r5, r6, lr}
    7282:	6845      	ldr	r5, [r0, #4]
    7284:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    7288:	8828      	ldrh	r0, [r5, #0]
    728a:	f826 0902 	strh.w	r0, [r6], #-2
    728e:	f505 7498 	add.w	r4, r5, #304	; 0x130
    7292:	7031      	strb	r1, [r6, #0]
    7294:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    7298:	f008 feec 	bl	10074 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    729c:	7130      	strb	r0, [r6, #4]
    729e:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    72a2:	f008 fee7 	bl	10074 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    72a6:	f806 0f05 	strb.w	r0, [r6, #5]!
    72aa:	2202      	movs	r2, #2
    72ac:	4903      	ldr	r1, [pc, #12]	; (72bc <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    72ae:	f1a6 000f 	sub.w	r0, r6, #15
    72b2:	f006 fdab 	bl	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    72b6:	2000      	movs	r0, #0
    72b8:	7320      	strb	r0, [r4, #12]
    72ba:	bd70      	pop	{r4, r5, r6, pc}
    72bc:	00010061 	.word	0x00010061

000072c0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    72c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    72c2:	460e      	mov	r6, r1
    72c4:	4604      	mov	r4, r0
    72c6:	f7fb fa63 	bl	2790 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    72ca:	2500      	movs	r5, #0
    72cc:	b320      	cbz	r0, 7318 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    72ce:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    72d2:	a902      	add	r1, sp, #8
    72d4:	8820      	ldrh	r0, [r4, #0]
    72d6:	f8ad 0000 	strh.w	r0, [sp]
    72da:	f006 f9c4 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    72de:	b108      	cbz	r0, 72e4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    72e0:	2126      	movs	r1, #38	; 0x26
    72e2:	e010      	b.n	7306 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    72e4:	9803      	ldr	r0, [sp, #12]
    72e6:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    72ea:	f88d 1002 	strb.w	r1, [sp, #2]
    72ee:	7841      	ldrb	r1, [r0, #1]
    72f0:	f88d 1003 	strb.w	r1, [sp, #3]
    72f4:	8840      	ldrh	r0, [r0, #2]
    72f6:	f8ad 0004 	strh.w	r0, [sp, #4]
    72fa:	2102      	movs	r1, #2
    72fc:	4668      	mov	r0, sp
    72fe:	f008 fbfb 	bl	faf8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7302:	b118      	cbz	r0, 730c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7304:	213c      	movs	r1, #60	; 0x3c
    7306:	207e      	movs	r0, #126	; 0x7e
    7308:	f7f9 fb40 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    730c:	f8cd 5000 	str.w	r5, [sp]
    7310:	f8bd 0000 	ldrh.w	r0, [sp]
    7314:	b004      	add	sp, #16
    7316:	bd70      	pop	{r4, r5, r6, pc}
    7318:	201c      	movs	r0, #28
    731a:	7030      	strb	r0, [r6, #0]
    731c:	7075      	strb	r5, [r6, #1]
    731e:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7322:	6070      	str	r0, [r6, #4]
    7324:	4801      	ldr	r0, [pc, #4]	; (732c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7326:	6800      	ldr	r0, [r0, #0]
    7328:	9000      	str	r0, [sp, #0]
    732a:	e7f1      	b.n	7310 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    732c:	00007330 	.word	0x00007330
    7330:	00000004 	.word	0x00000004

00007334 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7334:	b570      	push	{r4, r5, r6, lr}
    7336:	4605      	mov	r5, r0
    7338:	4616      	mov	r6, r2
    733a:	460c      	mov	r4, r1
    733c:	2002      	movs	r0, #2
    733e:	f000 f9b7 	bl	76b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7342:	4906      	ldr	r1, [pc, #24]	; (735c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7344:	2001      	movs	r0, #1
    7346:	1ef6      	subs	r6, r6, #3
    7348:	7008      	strb	r0, [r1, #0]
    734a:	4805      	ldr	r0, [pc, #20]	; (7360 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    734c:	6006      	str	r6, [r0, #0]
    734e:	4804      	ldr	r0, [pc, #16]	; (7360 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7350:	3808      	subs	r0, #8
    7352:	6005      	str	r5, [r0, #0]
    7354:	1f00      	subs	r0, r0, #4
    7356:	6004      	str	r4, [r0, #0]
    7358:	bd70      	pop	{r4, r5, r6, pc}
    735a:	0000      	.short	0x0000
    735c:	20000374 	.word	0x20000374
    7360:	4000f510 	.word	0x4000f510

00007364 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7364:	b510      	push	{r4, lr}
    7366:	4c0c      	ldr	r4, [pc, #48]	; (7398 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7368:	7820      	ldrb	r0, [r4, #0]
    736a:	b180      	cbz	r0, 738e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    736c:	490b      	ldr	r1, [pc, #44]	; (739c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    736e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7372:	6008      	str	r0, [r1, #0]
    7374:	f000 f86a 	bl	744c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7378:	2100      	movs	r1, #0
    737a:	b120      	cbz	r0, 7386 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    737c:	2001      	movs	r0, #1
    737e:	7060      	strb	r0, [r4, #1]
    7380:	4807      	ldr	r0, [pc, #28]	; (73a0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7382:	6800      	ldr	r0, [r0, #0]
    7384:	e001      	b.n	738a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7386:	7061      	strb	r1, [r4, #1]
    7388:	2010      	movs	r0, #16
    738a:	70a0      	strb	r0, [r4, #2]
    738c:	7021      	strb	r1, [r4, #0]
    738e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7392:	2000      	movs	r0, #0
    7394:	f000 b98c 	b.w	76b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7398:	20000374 	.word	0x20000374
    739c:	4001f508 	.word	0x4001f508
    73a0:	4000f400 	.word	0x4000f400

000073a4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    73a4:	b510      	push	{r4, lr}
    73a6:	2002      	movs	r0, #2
    73a8:	f000 f982 	bl	76b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    73ac:	4904      	ldr	r1, [pc, #16]	; (73c0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    73ae:	2001      	movs	r0, #1
    73b0:	7008      	strb	r0, [r1, #0]
    73b2:	f000 f859 	bl	7468 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    73b6:	4903      	ldr	r1, [pc, #12]	; (73c4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    73b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    73bc:	6008      	str	r0, [r1, #0]
    73be:	bd10      	pop	{r4, pc}
    73c0:	20000374 	.word	0x20000374
    73c4:	4001f504 	.word	0x4001f504

000073c8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    73c8:	4803      	ldr	r0, [pc, #12]	; (73d8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    73ca:	2100      	movs	r1, #0
    73cc:	7001      	strb	r1, [r0, #0]
    73ce:	7041      	strb	r1, [r0, #1]
    73d0:	2110      	movs	r1, #16
    73d2:	7081      	strb	r1, [r0, #2]
    73d4:	4770      	bx	lr
    73d6:	0000      	.short	0x0000
    73d8:	20000374 	.word	0x20000374

000073dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    73dc:	4807      	ldr	r0, [pc, #28]	; (73fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    73de:	b510      	push	{r4, lr}
    73e0:	7801      	ldrb	r1, [r0, #0]
    73e2:	b141      	cbz	r1, 73f6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    73e4:	f000 f832 	bl	744c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    73e8:	b118      	cbz	r0, 73f2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    73ea:	4805      	ldr	r0, [pc, #20]	; (7400 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    73ec:	6800      	ldr	r0, [r0, #0]
    73ee:	b2c0      	uxtb	r0, r0
    73f0:	bd10      	pop	{r4, pc}
    73f2:	2010      	movs	r0, #16
    73f4:	bd10      	pop	{r4, pc}
    73f6:	7880      	ldrb	r0, [r0, #2]
    73f8:	bd10      	pop	{r4, pc}
    73fa:	0000      	.short	0x0000
    73fc:	20000374 	.word	0x20000374
    7400:	4000f400 	.word	0x4000f400

00007404 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7404:	4808      	ldr	r0, [pc, #32]	; (7428 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7406:	b510      	push	{r4, lr}
    7408:	7801      	ldrb	r1, [r0, #0]
    740a:	b159      	cbz	r1, 7424 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    740c:	4807      	ldr	r0, [pc, #28]	; (742c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    740e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7412:	b128      	cbz	r0, 7420 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7414:	f000 f80c 	bl	7430 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7418:	2800      	cmp	r0, #0
    741a:	d000      	beq.n	741e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    741c:	2001      	movs	r0, #1
    741e:	bd10      	pop	{r4, pc}
    7420:	2002      	movs	r0, #2
    7422:	bd10      	pop	{r4, pc}
    7424:	7840      	ldrb	r0, [r0, #1]
    7426:	bd10      	pop	{r4, pc}
    7428:	20000374 	.word	0x20000374
    742c:	4000f000 	.word	0x4000f000
    7430:	4805      	ldr	r0, [pc, #20]	; (7448 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7432:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7436:	b111      	cbz	r1, 743e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7438:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    743c:	b108      	cbz	r0, 7442 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    743e:	2000      	movs	r0, #0
    7440:	4770      	bx	lr
    7442:	2001      	movs	r0, #1
    7444:	4770      	bx	lr
    7446:	0000      	.short	0x0000
    7448:	4000f000 	.word	0x4000f000
    744c:	4805      	ldr	r0, [pc, #20]	; (7464 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    744e:	b510      	push	{r4, lr}
    7450:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7454:	b120      	cbz	r0, 7460 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7456:	f7ff ffeb 	bl	7430 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    745a:	b108      	cbz	r0, 7460 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    745c:	2001      	movs	r0, #1
    745e:	bd10      	pop	{r4, pc}
    7460:	2000      	movs	r0, #0
    7462:	bd10      	pop	{r4, pc}
    7464:	4000f000 	.word	0x4000f000
    7468:	4804      	ldr	r0, [pc, #16]	; (747c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    746a:	2100      	movs	r1, #0
    746c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7470:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7474:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7478:	4770      	bx	lr
    747a:	0000      	.short	0x0000
    747c:	4000f000 	.word	0x4000f000

00007480 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7484:	4604      	mov	r4, r0
    7486:	461e      	mov	r6, r3
    7488:	4690      	mov	r8, r2
    748a:	460f      	mov	r7, r1
    748c:	2001      	movs	r0, #1
    748e:	f000 f90f 	bl	76b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7492:	4d1e      	ldr	r5, [pc, #120]	; (750c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7494:	481e      	ldr	r0, [pc, #120]	; (7510 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7496:	f004 0103 	and.w	r1, r4, #3
    749a:	712e      	strb	r6, [r5, #4]
    749c:	6800      	ldr	r0, [r0, #0]
    749e:	0432      	lsls	r2, r6, #16
    74a0:	f361 0007 	bfi	r0, r1, #0, #8
    74a4:	f366 200f 	bfi	r0, r6, #8, #8
    74a8:	0c00      	lsrs	r0, r0, #16
    74aa:	4e1a      	ldr	r6, [pc, #104]	; (7514 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    74ac:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    74b0:	4308      	orrs	r0, r1
    74b2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    74b6:	4818      	ldr	r0, [pc, #96]	; (7518 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    74b8:	6007      	str	r7, [r0, #0]
    74ba:	f008 ff84 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    74be:	b938      	cbnz	r0, 74d0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    74c0:	4815      	ldr	r0, [pc, #84]	; (7518 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    74c2:	3010      	adds	r0, #16
    74c4:	6801      	ldr	r1, [r0, #0]
    74c6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    74ca:	ea41 0108 	orr.w	r1, r1, r8
    74ce:	6001      	str	r1, [r0, #0]
    74d0:	f000 f8e4 	bl	769c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    74d4:	b10c      	cbz	r4, 74da <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    74d6:	2c04      	cmp	r4, #4
    74d8:	d107      	bne.n	74ea <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    74da:	4811      	ldr	r0, [pc, #68]	; (7520 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    74dc:	490d      	ldr	r1, [pc, #52]	; (7514 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    74de:	4a0f      	ldr	r2, [pc, #60]	; (751c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    74e0:	1d09      	adds	r1, r1, #4
    74e2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    74e6:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    74ea:	2001      	movs	r0, #1
    74ec:	7068      	strb	r0, [r5, #1]
    74ee:	70ec      	strb	r4, [r5, #3]
    74f0:	b11c      	cbz	r4, 74fa <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    74f2:	2c01      	cmp	r4, #1
    74f4:	d001      	beq.n	74fa <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    74f6:	2c02      	cmp	r4, #2
    74f8:	d106      	bne.n	7508 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    74fa:	7028      	strb	r0, [r5, #0]
    74fc:	2100      	movs	r1, #0
    74fe:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7502:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7506:	6030      	str	r0, [r6, #0]
    7508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    750c:	20000377 	.word	0x20000377
    7510:	000076ac 	.word	0x000076ac
    7514:	4000f000 	.word	0x4000f000
    7518:	4000f508 	.word	0x4000f508
    751c:	4000f100 	.word	0x4000f100
    7520:	4001f088 	.word	0x4001f088

00007524 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7524:	b570      	push	{r4, r5, r6, lr}
    7526:	4a1c      	ldr	r2, [pc, #112]	; (7598 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7528:	7853      	ldrb	r3, [r2, #1]
    752a:	b1a3      	cbz	r3, 7556 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    752c:	4b1b      	ldr	r3, [pc, #108]	; (759c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    752e:	6019      	str	r1, [r3, #0]
    7530:	1d19      	adds	r1, r3, #4
    7532:	6008      	str	r0, [r1, #0]
    7534:	2501      	movs	r5, #1
    7536:	7095      	strb	r5, [r2, #2]
    7538:	4610      	mov	r0, r2
    753a:	78d6      	ldrb	r6, [r2, #3]
    753c:	4b18      	ldr	r3, [pc, #96]	; (75a0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    753e:	7800      	ldrb	r0, [r0, #0]
    7540:	4c18      	ldr	r4, [pc, #96]	; (75a4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7542:	2100      	movs	r1, #0
    7544:	b156      	cbz	r6, 755c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7546:	2e04      	cmp	r6, #4
    7548:	d01b      	beq.n	7582 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    754a:	b308      	cbz	r0, 7590 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    754c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7550:	0668      	lsls	r0, r5, #25
    7552:	6018      	str	r0, [r3, #0]
    7554:	bd70      	pop	{r4, r5, r6, pc}
    7556:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    755a:	e01a      	b.n	7592 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    755c:	b178      	cbz	r0, 757e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    755e:	4620      	mov	r0, r4
    7560:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7564:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7568:	601e      	str	r6, [r3, #0]
    756a:	1271      	asrs	r1, r6, #9
    756c:	f008 fdaa 	bl	100c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7570:	2800      	cmp	r0, #0
    7572:	d0ef      	beq.n	7554 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7574:	6065      	str	r5, [r4, #4]
    7576:	480a      	ldr	r0, [pc, #40]	; (75a0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7578:	1d00      	adds	r0, r0, #4
    757a:	6006      	str	r6, [r0, #0]
    757c:	bd70      	pop	{r4, r5, r6, pc}
    757e:	21d5      	movs	r1, #213	; 0xd5
    7580:	e007      	b.n	7592 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7582:	7015      	strb	r5, [r2, #0]
    7584:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7588:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    758c:	6025      	str	r5, [r4, #0]
    758e:	bd70      	pop	{r4, r5, r6, pc}
    7590:	21e8      	movs	r1, #232	; 0xe8
    7592:	203c      	movs	r0, #60	; 0x3c
    7594:	f7f9 f9fa 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7598:	20000377 	.word	0x20000377
    759c:	4000f50c 	.word	0x4000f50c
    75a0:	4001f504 	.word	0x4001f504
    75a4:	4000f000 	.word	0x4000f000

000075a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    75a8:	b570      	push	{r4, r5, r6, lr}
    75aa:	4d05      	ldr	r5, [pc, #20]	; (75c0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    75ac:	2400      	movs	r4, #0
    75ae:	7828      	ldrb	r0, [r5, #0]
    75b0:	b110      	cbz	r0, 75b8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    75b2:	f000 f873 	bl	769c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    75b6:	702c      	strb	r4, [r5, #0]
    75b8:	706c      	strb	r4, [r5, #1]
    75ba:	70ac      	strb	r4, [r5, #2]
    75bc:	bd70      	pop	{r4, r5, r6, pc}
    75be:	0000      	.short	0x0000
    75c0:	20000377 	.word	0x20000377

000075c4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    75c4:	4802      	ldr	r0, [pc, #8]	; (75d0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    75c6:	2100      	movs	r1, #0
    75c8:	7001      	strb	r1, [r0, #0]
    75ca:	7041      	strb	r1, [r0, #1]
    75cc:	7081      	strb	r1, [r0, #2]
    75ce:	4770      	bx	lr
    75d0:	20000377 	.word	0x20000377

000075d4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    75d4:	480b      	ldr	r0, [pc, #44]	; (7604 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    75d6:	b510      	push	{r4, lr}
    75d8:	7800      	ldrb	r0, [r0, #0]
    75da:	b158      	cbz	r0, 75f4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    75dc:	f44f 7182 	mov.w	r1, #260	; 0x104
    75e0:	4809      	ldr	r0, [pc, #36]	; (7608 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    75e2:	f008 fd6f 	bl	100c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    75e6:	b140      	cbz	r0, 75fa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    75e8:	4808      	ldr	r0, [pc, #32]	; (760c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    75ea:	6800      	ldr	r0, [r0, #0]
    75ec:	2800      	cmp	r0, #0
    75ee:	d000      	beq.n	75f2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    75f0:	2001      	movs	r0, #1
    75f2:	bd10      	pop	{r4, pc}
    75f4:	f240 215e 	movw	r1, #606	; 0x25e
    75f8:	e001      	b.n	75fe <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    75fa:	f240 215f 	movw	r1, #607	; 0x25f
    75fe:	203c      	movs	r0, #60	; 0x3c
    7600:	f7f9 f9c4 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7604:	20000377 	.word	0x20000377
    7608:	4000f000 	.word	0x4000f000
    760c:	4000f400 	.word	0x4000f400

00007610 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7610:	4801      	ldr	r0, [pc, #4]	; (7618 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7612:	2101      	movs	r1, #1
    7614:	6081      	str	r1, [r0, #8]
    7616:	4770      	bx	lr
    7618:	4000f000 	.word	0x4000f000

0000761c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7620:	481b      	ldr	r0, [pc, #108]	; (7690 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7622:	7800      	ldrb	r0, [r0, #0]
    7624:	b1d8      	cbz	r0, 765e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7626:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7694 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    762a:	f44f 7682 	mov.w	r6, #260	; 0x104
    762e:	4631      	mov	r1, r6
    7630:	4640      	mov	r0, r8
    7632:	f008 fd47 	bl	100c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7636:	2800      	cmp	r0, #0
    7638:	d128      	bne.n	768c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    763a:	2002      	movs	r0, #2
    763c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7640:	4c15      	ldr	r4, [pc, #84]	; (7698 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7642:	6820      	ldr	r0, [r4, #0]
    7644:	43c0      	mvns	r0, r0
    7646:	f340 1500 	sbfx	r5, r0, #4, #1
    764a:	6820      	ldr	r0, [r4, #0]
    764c:	f040 0010 	orr.w	r0, r0, #16
    7650:	6020      	str	r0, [r4, #0]
    7652:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7656:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    765a:	1c6d      	adds	r5, r5, #1
    765c:	e008      	b.n	7670 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    765e:	f240 216a 	movw	r1, #618	; 0x26a
    7662:	203c      	movs	r0, #60	; 0x3c
    7664:	f7f9 f992 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7668:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    766c:	f008 feeb 	bl	10446 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7670:	4631      	mov	r1, r6
    7672:	4640      	mov	r0, r8
    7674:	f008 fd26 	bl	100c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7678:	2800      	cmp	r0, #0
    767a:	d0f5      	beq.n	7668 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    767c:	b91d      	cbnz	r5, 7686 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    767e:	6820      	ldr	r0, [r4, #0]
    7680:	f020 0010 	bic.w	r0, r0, #16
    7684:	6020      	str	r0, [r4, #0]
    7686:	2002      	movs	r0, #2
    7688:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7690:	20000377 	.word	0x20000377
    7694:	4000f000 	.word	0x4000f000
    7698:	e000ed10 	.word	0xe000ed10
    769c:	4902      	ldr	r1, [pc, #8]	; (76a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    769e:	4801      	ldr	r0, [pc, #4]	; (76a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    76a0:	6008      	str	r0, [r1, #0]
    76a2:	4770      	bx	lr
    76a4:	02020000 	.word	0x02020000
    76a8:	4001f508 	.word	0x4001f508
    76ac:	00010000 	.word	0x00010000

000076b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    76b0:	b510      	push	{r4, lr}
    76b2:	4604      	mov	r4, r0
    76b4:	f000 f820 	bl	76f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    76b8:	2c00      	cmp	r4, #0
    76ba:	d00e      	beq.n	76da <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    76bc:	4a0b      	ldr	r2, [pc, #44]	; (76ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    76be:	480b      	ldr	r0, [pc, #44]	; (76ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    76c0:	490b      	ldr	r1, [pc, #44]	; (76f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    76c2:	3214      	adds	r2, #20
    76c4:	2c01      	cmp	r4, #1
    76c6:	d005      	beq.n	76d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    76c8:	2c02      	cmp	r4, #2
    76ca:	d007      	beq.n	76dc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    76cc:	2182      	movs	r1, #130	; 0x82
    76ce:	203d      	movs	r0, #61	; 0x3d
    76d0:	f7f9 f95c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76d4:	2302      	movs	r3, #2
    76d6:	6003      	str	r3, [r0, #0]
    76d8:	6011      	str	r1, [r2, #0]
    76da:	bd10      	pop	{r4, pc}
    76dc:	2303      	movs	r3, #3
    76de:	6003      	str	r3, [r0, #0]
    76e0:	6011      	str	r1, [r2, #0]
    76e2:	4904      	ldr	r1, [pc, #16]	; (76f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    76e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    76e8:	6008      	str	r0, [r1, #0]
    76ea:	bd10      	pop	{r4, pc}
    76ec:	4000f500 	.word	0x4000f500
    76f0:	20001664 	.word	0x20001664
    76f4:	4001f504 	.word	0x4001f504
    76f8:	4805      	ldr	r0, [pc, #20]	; (7710 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    76fa:	b510      	push	{r4, lr}
    76fc:	2100      	movs	r1, #0
    76fe:	6001      	str	r1, [r0, #0]
    7700:	6001      	str	r1, [r0, #0]
    7702:	f7ff ff51 	bl	75a8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7706:	4903      	ldr	r1, [pc, #12]	; (7714 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7708:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    770c:	6008      	str	r0, [r1, #0]
    770e:	bd10      	pop	{r4, pc}
    7710:	4000f500 	.word	0x4000f500
    7714:	4001f508 	.word	0x4001f508

00007718 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7718:	4805      	ldr	r0, [pc, #20]	; (7730 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    771a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    771e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7722:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7726:	2100      	movs	r1, #0
    7728:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    772c:	4770      	bx	lr
    772e:	0000      	.short	0x0000
    7730:	40001000 	.word	0x40001000

00007734 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7734:	4904      	ldr	r1, [pc, #16]	; (7748 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7736:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    773a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    773e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7742:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7746:	4770      	bx	lr
    7748:	40001000 	.word	0x40001000

0000774c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    774c:	4902      	ldr	r1, [pc, #8]	; (7758 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    774e:	5c08      	ldrb	r0, [r1, r0]
    7750:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7754:	4770      	bx	lr
    7756:	0000      	.short	0x0000
    7758:	000083ee 	.word	0x000083ee

0000775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    775e:	4c24      	ldr	r4, [pc, #144]	; (77f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7760:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7764:	f010 0f10 	tst.w	r0, #16
    7768:	d001      	beq.n	776e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    776a:	2701      	movs	r7, #1
    776c:	e000      	b.n	7770 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    776e:	2700      	movs	r7, #0
    7770:	2010      	movs	r0, #16
    7772:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7776:	2002      	movs	r0, #2
    7778:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    777c:	481d      	ldr	r0, [pc, #116]	; (77f4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    777e:	2500      	movs	r5, #0
    7780:	491d      	ldr	r1, [pc, #116]	; (77f8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7782:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    7786:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    778a:	6008      	str	r0, [r1, #0]
    778c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7790:	f44f 7688 	mov.w	r6, #272	; 0x110
    7794:	f010 0fff 	tst.w	r0, #255	; 0xff
    7798:	d019      	beq.n	77ce <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    779a:	20ff      	movs	r0, #255	; 0xff
    779c:	f88d 0000 	strb.w	r0, [sp]
    77a0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    77a4:	2001      	movs	r0, #1
    77a6:	6120      	str	r0, [r4, #16]
    77a8:	e005      	b.n	77b6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    77aa:	bf00      	nop
    77ac:	f89d 0000 	ldrb.w	r0, [sp]
    77b0:	1e40      	subs	r0, r0, #1
    77b2:	f88d 0000 	strb.w	r0, [sp]
    77b6:	f89d 0000 	ldrb.w	r0, [sp]
    77ba:	b128      	cbz	r0, 77c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    77bc:	4631      	mov	r1, r6
    77be:	4620      	mov	r0, r4
    77c0:	f008 fcaf 	bl	10122 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    77c4:	2800      	cmp	r0, #0
    77c6:	d0f1      	beq.n	77ac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    77c8:	f89d 0000 	ldrb.w	r0, [sp]
    77cc:	b158      	cbz	r0, 77e6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    77ce:	f000 fc23 	bl	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
    77d2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    77d6:	f000 fd8b 	bl	82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>
    77da:	2f00      	cmp	r7, #0
    77dc:	d002      	beq.n	77e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    77de:	2010      	movs	r0, #16
    77e0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    77e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77e6:	f640 0194 	movw	r1, #2196	; 0x894
    77ea:	203e      	movs	r0, #62	; 0x3e
    77ec:	f7f9 f8ce 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77f0:	40001000 	.word	0x40001000
    77f4:	20001230 	.word	0x20001230
    77f8:	4001f508 	.word	0x4001f508

000077fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    77fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7800:	4d18      	ldr	r5, [pc, #96]	; (7864 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7802:	4607      	mov	r7, r0
    7804:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7808:	07c2      	lsls	r2, r0, #31
    780a:	d00f      	beq.n	782c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    780c:	4c16      	ldr	r4, [pc, #88]	; (7868 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    780e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7812:	f042 0201 	orr.w	r2, r2, #1
    7816:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    781a:	f040 0002 	orr.w	r0, r0, #2
    781e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7822:	2601      	movs	r6, #1
    7824:	b13f      	cbz	r7, 7836 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7826:	2f01      	cmp	r7, #1
    7828:	d00b      	beq.n	7842 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    782a:	e010      	b.n	784e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    782c:	f240 716f 	movw	r1, #1903	; 0x76f
    7830:	203e      	movs	r0, #62	; 0x3e
    7832:	f7f9 f8ab 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7836:	4608      	mov	r0, r1
    7838:	f000 fdb4 	bl	83a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a4>
    783c:	726e      	strb	r6, [r5, #9]
    783e:	6026      	str	r6, [r4, #0]
    7840:	e005      	b.n	784e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7842:	4608      	mov	r0, r1
    7844:	f000 fd94 	bl	8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>
    7848:	2002      	movs	r0, #2
    784a:	7268      	strb	r0, [r5, #9]
    784c:	6066      	str	r6, [r4, #4]
    784e:	4807      	ldr	r0, [pc, #28]	; (786c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7850:	64c6      	str	r6, [r0, #76]	; 0x4c
    7852:	4806      	ldr	r0, [pc, #24]	; (786c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7854:	300c      	adds	r0, #12
    7856:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    785a:	4638      	mov	r0, r7
    785c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7860:	f000 bd18 	b.w	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
    7864:	20001230 	.word	0x20001230
    7868:	40001000 	.word	0x40001000
    786c:	40008000 	.word	0x40008000

00007870 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7874:	4c2c      	ldr	r4, [pc, #176]	; (7928 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7876:	0006      	movs	r6, r0
    7878:	4d2c      	ldr	r5, [pc, #176]	; (792c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    787a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    787e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7930 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7882:	f040 0002 	orr.w	r0, r0, #2
    7886:	4689      	mov	r9, r1
    7888:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    788c:	f04f 0700 	mov.w	r7, #0
    7890:	d002      	beq.n	7898 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7892:	2e01      	cmp	r6, #1
    7894:	d020      	beq.n	78d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7896:	e036      	b.n	7906 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7898:	4608      	mov	r0, r1
    789a:	f000 fd83 	bl	83a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a4>
    789e:	2001      	movs	r0, #1
    78a0:	7260      	strb	r0, [r4, #9]
    78a2:	79e0      	ldrb	r0, [r4, #7]
    78a4:	2801      	cmp	r0, #1
    78a6:	d105      	bne.n	78b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    78a8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    78ac:	f040 0008 	orr.w	r0, r0, #8
    78b0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    78b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    78b6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    78ba:	6260      	str	r0, [r4, #36]	; 0x24
    78bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    78c0:	f8c8 0000 	str.w	r0, [r8]
    78c4:	491b      	ldr	r1, [pc, #108]	; (7934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    78c6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    78ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    78ce:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    78d2:	fbb0 f7f1 	udiv	r7, r0, r1
    78d6:	e016      	b.n	7906 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    78d8:	4608      	mov	r0, r1
    78da:	f000 fd49 	bl	8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>
    78de:	2002      	movs	r0, #2
    78e0:	7260      	strb	r0, [r4, #9]
    78e2:	79e0      	ldrb	r0, [r4, #7]
    78e4:	2801      	cmp	r0, #1
    78e6:	d105      	bne.n	78f4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    78e8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    78ec:	f040 0004 	orr.w	r0, r0, #4
    78f0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    78f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    78f6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    78fa:	6260      	str	r0, [r4, #36]	; 0x24
    78fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7900:	f8c8 0000 	str.w	r0, [r8]
    7904:	2729      	movs	r7, #41	; 0x29
    7906:	f000 fbf3 	bl	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
    790a:	f008 fc52 	bl	101b2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    790e:	b120      	cbz	r0, 791a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7910:	f7ff ff24 	bl	775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7914:	2000      	movs	r0, #0
    7916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    791a:	2100      	movs	r1, #0
    791c:	4630      	mov	r0, r6
    791e:	f000 fcb9 	bl	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
    7922:	4638      	mov	r0, r7
    7924:	e7f7      	b.n	7916 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7926:	0000      	.short	0x0000
    7928:	20001230 	.word	0x20001230
    792c:	40001000 	.word	0x40001000
    7930:	4001f504 	.word	0x4001f504
    7934:	000083e8 	.word	0x000083e8

00007938 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7938:	4a02      	ldr	r2, [pc, #8]	; (7944 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    793a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    793c:	6003      	str	r3, [r0, #0]
    793e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7940:	6008      	str	r0, [r1, #0]
    7942:	4770      	bx	lr
    7944:	20001230 	.word	0x20001230

00007948 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7948:	b510      	push	{r4, lr}
    794a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    794c:	4901      	ldr	r1, [pc, #4]	; (7954 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    794e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7952:	bd10      	pop	{r4, pc}
    7954:	20001220 	.word	0x20001220

00007958 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7958:	490f      	ldr	r1, [pc, #60]	; (7998 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    795a:	b510      	push	{r4, lr}
    795c:	69ca      	ldr	r2, [r1, #28]
    795e:	4282      	cmp	r2, r0
    7960:	d302      	bcc.n	7968 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7962:	f640 1124 	movw	r1, #2340	; 0x924
    7966:	e00b      	b.n	7980 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7968:	2201      	movs	r2, #1
    796a:	730a      	strb	r2, [r1, #12]
    796c:	6108      	str	r0, [r1, #16]
    796e:	490b      	ldr	r1, [pc, #44]	; (799c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7970:	644a      	str	r2, [r1, #68]	; 0x44
    7972:	1d0a      	adds	r2, r1, #4
    7974:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7978:	4283      	cmp	r3, r0
    797a:	d304      	bcc.n	7986 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    797c:	f640 112d 	movw	r1, #2349	; 0x92d
    7980:	203e      	movs	r0, #62	; 0x3e
    7982:	f7f9 f803 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7986:	2300      	movs	r3, #0
    7988:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    798c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7994:	f000 bc52 	b.w	823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    7998:	20001230 	.word	0x20001230
    799c:	40008000 	.word	0x40008000

000079a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    79a0:	b570      	push	{r4, r5, r6, lr}
    79a2:	4c0f      	ldr	r4, [pc, #60]	; (79e0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    79a4:	4603      	mov	r3, r0
    79a6:	2002      	movs	r0, #2
    79a8:	7320      	strb	r0, [r4, #12]
    79aa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    79ae:	2096      	movs	r0, #150	; 0x96
    79b0:	f894 1020 	ldrb.w	r1, [r4, #32]
    79b4:	7d22      	ldrb	r2, [r4, #20]
    79b6:	2d01      	cmp	r5, #1
    79b8:	d00e      	beq.n	79d8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    79ba:	f000 fd51 	bl	8460 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    79be:	6120      	str	r0, [r4, #16]
    79c0:	4808      	ldr	r0, [pc, #32]	; (79e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    79c2:	2100      	movs	r1, #0
    79c4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    79c8:	6921      	ldr	r1, [r4, #16]
    79ca:	69e0      	ldr	r0, [r4, #28]
    79cc:	4408      	add	r0, r1
    79ce:	4905      	ldr	r1, [pc, #20]	; (79e4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    79d0:	1d09      	adds	r1, r1, #4
    79d2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    79d6:	bd70      	pop	{r4, r5, r6, pc}
    79d8:	f000 fd60 	bl	849c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    79dc:	e7ef      	b.n	79be <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    79de:	0000      	.short	0x0000
    79e0:	20001230 	.word	0x20001230
    79e4:	40008000 	.word	0x40008000

000079e8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    79e8:	b510      	push	{r4, lr}
    79ea:	f008 fd08 	bl	103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    79ee:	2800      	cmp	r0, #0
    79f0:	d006      	beq.n	7a00 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    79f2:	4804      	ldr	r0, [pc, #16]	; (7a04 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    79f4:	6801      	ldr	r1, [r0, #0]
    79f6:	f021 0101 	bic.w	r1, r1, #1
    79fa:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    79fe:	6001      	str	r1, [r0, #0]
    7a00:	bd10      	pop	{r4, pc}
    7a02:	0000      	.short	0x0000
    7a04:	40001774 	.word	0x40001774

00007a08 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a0c:	2234      	movs	r2, #52	; 0x34
    7a0e:	2100      	movs	r1, #0
    7a10:	4813      	ldr	r0, [pc, #76]	; (7a60 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7a12:	f008 fdec 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7a16:	f000 fc6b 	bl	82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>
    7a1a:	f008 fca9 	bl	10370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7a1e:	4d11      	ldr	r5, [pc, #68]	; (7a64 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7a20:	4e10      	ldr	r6, [pc, #64]	; (7a64 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7a22:	2400      	movs	r4, #0
    7a24:	4f0f      	ldr	r7, [pc, #60]	; (7a64 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7a26:	3508      	adds	r5, #8
    7a28:	3610      	adds	r6, #16
    7a2a:	b928      	cbnz	r0, 7a38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7a2c:	f008 fcb7 	bl	1039e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7a30:	b910      	cbnz	r0, 7a38 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7a32:	f008 fcbe 	bl	103b2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7a36:	b108      	cbz	r0, 7a3c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7a38:	2224      	movs	r2, #36	; 0x24
    7a3a:	e006      	b.n	7a4a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7a3c:	f008 fcf9 	bl	10432 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7a40:	b910      	cbnz	r0, 7a48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7a42:	f008 fcec 	bl	1041e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7a46:	b140      	cbz	r0, 7a5a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7a48:	2240      	movs	r2, #64	; 0x40
    7a4a:	21ff      	movs	r1, #255	; 0xff
    7a4c:	4638      	mov	r0, r7
    7a4e:	f008 fdce 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7a52:	602c      	str	r4, [r5, #0]
    7a54:	6034      	str	r4, [r6, #0]
    7a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a5a:	2238      	movs	r2, #56	; 0x38
    7a5c:	e7f5      	b.n	7a4a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7a5e:	0000      	.short	0x0000
    7a60:	20001230 	.word	0x20001230
    7a64:	40000e00 	.word	0x40000e00

00007a68 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7a68:	4801      	ldr	r0, [pc, #4]	; (7a70 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7a6a:	69c0      	ldr	r0, [r0, #28]
    7a6c:	4770      	bx	lr
    7a6e:	0000      	.short	0x0000
    7a70:	20001230 	.word	0x20001230

00007a74 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    7a74:	4801      	ldr	r0, [pc, #4]	; (7a7c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    7a76:	f890 0020 	ldrb.w	r0, [r0, #32]
    7a7a:	4770      	bx	lr
    7a7c:	20001230 	.word	0x20001230

00007a80 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7a80:	4801      	ldr	r0, [pc, #4]	; (7a88 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    7a82:	6980      	ldr	r0, [r0, #24]
    7a84:	4770      	bx	lr
    7a86:	0000      	.short	0x0000
    7a88:	20001230 	.word	0x20001230

00007a8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7a8c:	b510      	push	{r4, lr}
    7a8e:	f000 fbe3 	bl	8258 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x258>
    7a92:	f7ff fe63 	bl	775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7a96:	f004 fbab 	bl	c1f0 <mpsl_fem_disable>
    7a9a:	b130      	cbz	r0, 7aaa <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7a9c:	1c40      	adds	r0, r0, #1
    7a9e:	d004      	beq.n	7aaa <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7aa0:	f240 5165 	movw	r1, #1381	; 0x565
    7aa4:	203e      	movs	r0, #62	; 0x3e
    7aa6:	f7f8 ff71 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aaa:	480f      	ldr	r0, [pc, #60]	; (7ae8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7aac:	4a0f      	ldr	r2, [pc, #60]	; (7aec <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7aae:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7ab0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7ab4:	6011      	str	r1, [r2, #0]
    7ab6:	2400      	movs	r4, #0
    7ab8:	6244      	str	r4, [r0, #36]	; 0x24
    7aba:	7304      	strb	r4, [r0, #12]
    7abc:	61c4      	str	r4, [r0, #28]
    7abe:	6184      	str	r4, [r0, #24]
    7ac0:	f000 fbca 	bl	8258 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x258>
    7ac4:	480a      	ldr	r0, [pc, #40]	; (7af0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7ac6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7aca:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7ace:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7ad2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7ad6:	2001      	movs	r0, #1
    7ad8:	f008 fb12 	bl	10100 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ae0:	2001      	movs	r0, #1
    7ae2:	f008 bb00 	b.w	100e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7ae6:	0000      	.short	0x0000
    7ae8:	20001230 	.word	0x20001230
    7aec:	4001f508 	.word	0x4001f508
    7af0:	40008000 	.word	0x40008000

00007af4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7af4:	b570      	push	{r4, r5, r6, lr}
    7af6:	2001      	movs	r0, #1
    7af8:	f008 fb02 	bl	10100 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7afc:	4c37      	ldr	r4, [pc, #220]	; (7bdc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7afe:	2000      	movs	r0, #0
    7b00:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7b04:	2001      	movs	r0, #1
    7b06:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7b0a:	f008 fc68 	bl	103de <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7b0e:	4d34      	ldr	r5, [pc, #208]	; (7be0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b10:	b118      	cbz	r0, 7b1a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7b12:	6828      	ldr	r0, [r5, #0]
    7b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7b18:	6028      	str	r0, [r5, #0]
    7b1a:	f008 fc54 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7b1e:	b128      	cbz	r0, 7b2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7b20:	6828      	ldr	r0, [r5, #0]
    7b22:	4930      	ldr	r1, [pc, #192]	; (7be4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    7b24:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7b28:	4308      	orrs	r0, r1
    7b2a:	6028      	str	r0, [r5, #0]
    7b2c:	f008 fc67 	bl	103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7b30:	b138      	cbz	r0, 7b42 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    7b32:	482b      	ldr	r0, [pc, #172]	; (7be0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b34:	1d00      	adds	r0, r0, #4
    7b36:	6801      	ldr	r1, [r0, #0]
    7b38:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7b3c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7b40:	6001      	str	r1, [r0, #0]
    7b42:	4927      	ldr	r1, [pc, #156]	; (7be0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b44:	4828      	ldr	r0, [pc, #160]	; (7be8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    7b46:	313c      	adds	r1, #60	; 0x3c
    7b48:	6008      	str	r0, [r1, #0]
    7b4a:	f004 fb8b 	bl	c264 <mpsl_fem_device_config_254_apply_get>
    7b4e:	b140      	cbz	r0, 7b62 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7b50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7b54:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7b58:	1c41      	adds	r1, r0, #1
    7b5a:	d002      	beq.n	7b62 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7b5c:	4920      	ldr	r1, [pc, #128]	; (7be0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7b5e:	3110      	adds	r1, #16
    7b60:	6008      	str	r0, [r1, #0]
    7b62:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7b66:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7b68:	1c41      	adds	r1, r0, #1
    7b6a:	d004      	beq.n	7b76 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    7b6c:	491f      	ldr	r1, [pc, #124]	; (7bec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    7b6e:	680a      	ldr	r2, [r1, #0]
    7b70:	f360 4217 	bfi	r2, r0, #16, #8
    7b74:	600a      	str	r2, [r1, #0]
    7b76:	f240 1103 	movw	r1, #259	; 0x103
    7b7a:	f240 605b 	movw	r0, #1627	; 0x65b
    7b7e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7b82:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7b86:	2001      	movs	r0, #1
    7b88:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7b8c:	f000 f842 	bl	7c14 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7b90:	f240 2001 	movw	r0, #513	; 0x201
    7b94:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7b98:	2002      	movs	r0, #2
    7b9a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7b9e:	4914      	ldr	r1, [pc, #80]	; (7bf0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7ba0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    7ba4:	6008      	str	r0, [r1, #0]
    7ba6:	4913      	ldr	r1, [pc, #76]	; (7bf4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7ba8:	2000      	movs	r0, #0
    7baa:	8608      	strh	r0, [r1, #48]	; 0x30
    7bac:	3110      	adds	r1, #16
    7bae:	61c8      	str	r0, [r1, #28]
    7bb0:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    7bb4:	2001      	movs	r0, #1
    7bb6:	f008 fa96 	bl	100e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7bba:	2010      	movs	r0, #16
    7bbc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7bc0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7bc4:	2002      	movs	r0, #2
    7bc6:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7bca:	480b      	ldr	r0, [pc, #44]	; (7bf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7bcc:	6800      	ldr	r0, [r0, #0]
    7bce:	2800      	cmp	r0, #0
    7bd0:	d002      	beq.n	7bd8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    7bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bd6:	4700      	bx	r0
    7bd8:	bd70      	pop	{r4, r5, r6, pc}
    7bda:	0000      	.short	0x0000
    7bdc:	40001000 	.word	0x40001000
    7be0:	4000173c 	.word	0x4000173c
    7be4:	80000096 	.word	0x80000096
    7be8:	8900002c 	.word	0x8900002c
    7bec:	4000158c 	.word	0x4000158c
    7bf0:	4001f504 	.word	0x4001f504
    7bf4:	20001220 	.word	0x20001220
    7bf8:	200002dc 	.word	0x200002dc

00007bfc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7bfc:	4901      	ldr	r1, [pc, #4]	; (7c04 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7bfe:	7548      	strb	r0, [r1, #21]
    7c00:	4770      	bx	lr
    7c02:	0000      	.short	0x0000
    7c04:	20001230 	.word	0x20001230

00007c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7c08:	4901      	ldr	r1, [pc, #4]	; (7c10 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7c0a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7c0e:	4770      	bx	lr
    7c10:	0000843c 	.word	0x0000843c

00007c14 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    7c14:	4908      	ldr	r1, [pc, #32]	; (7c38 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    7c16:	b510      	push	{r4, lr}
    7c18:	7508      	strb	r0, [r1, #20]
    7c1a:	4908      	ldr	r1, [pc, #32]	; (7c3c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    7c1c:	2801      	cmp	r0, #1
    7c1e:	d006      	beq.n	7c2e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    7c20:	2802      	cmp	r0, #2
    7c22:	d006      	beq.n	7c32 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    7c24:	f640 516c 	movw	r1, #3436	; 0xd6c
    7c28:	203e      	movs	r0, #62	; 0x3e
    7c2a:	f7f8 feaf 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c2e:	2003      	movs	r0, #3
    7c30:	e000      	b.n	7c34 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    7c32:	2004      	movs	r0, #4
    7c34:	6008      	str	r0, [r1, #0]
    7c36:	bd10      	pop	{r4, pc}
    7c38:	20001230 	.word	0x20001230
    7c3c:	40001510 	.word	0x40001510

00007c40 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7c40:	4905      	ldr	r1, [pc, #20]	; (7c58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    7c42:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7c46:	4805      	ldr	r0, [pc, #20]	; (7c5c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    7c48:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    7c4c:	f041 0101 	orr.w	r1, r1, #1
    7c50:	7001      	strb	r1, [r0, #0]
    7c52:	f000 ba13 	b.w	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    7c56:	0000      	.short	0x0000
    7c58:	40001000 	.word	0x40001000
    7c5c:	20001230 	.word	0x20001230

00007c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7c60:	4901      	ldr	r1, [pc, #4]	; (7c68 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7c62:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7c66:	4770      	bx	lr
    7c68:	00008448 	.word	0x00008448

00007c6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c70:	4e30      	ldr	r6, [pc, #192]	; (7d34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7c72:	4c31      	ldr	r4, [pc, #196]	; (7d38 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    7c74:	4688      	mov	r8, r1
    7c76:	0007      	movs	r7, r0
    7c78:	4615      	mov	r5, r2
    7c7a:	f04f 0901 	mov.w	r9, #1
    7c7e:	d006      	beq.n	7c8e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    7c80:	2f01      	cmp	r7, #1
    7c82:	d012      	beq.n	7caa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    7c84:	f640 0117 	movw	r1, #2071	; 0x817
    7c88:	203e      	movs	r0, #62	; 0x3e
    7c8a:	f7f8 fe7f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c8e:	4610      	mov	r0, r2
    7c90:	f000 fb88 	bl	83a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a4>
    7c94:	4829      	ldr	r0, [pc, #164]	; (7d3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    7c96:	f884 9009 	strb.w	r9, [r4, #9]
    7c9a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    7c9e:	4640      	mov	r0, r8
    7ca0:	f000 fb2e 	bl	8300 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x300>
    7ca4:	4605      	mov	r5, r0
    7ca6:	4630      	mov	r0, r6
    7ca8:	e00c      	b.n	7cc4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    7caa:	4610      	mov	r0, r2
    7cac:	f000 fb60 	bl	8370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x370>
    7cb0:	2002      	movs	r0, #2
    7cb2:	7260      	strb	r0, [r4, #9]
    7cb4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7cb8:	4640      	mov	r0, r8
    7cba:	f000 fb21 	bl	8300 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x300>
    7cbe:	4605      	mov	r5, r0
    7cc0:	481c      	ldr	r0, [pc, #112]	; (7d34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7cc2:	1d00      	adds	r0, r0, #4
    7cc4:	f000 fada 	bl	827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>
    7cc8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7d40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    7ccc:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    7cd0:	f8df a074 	ldr.w	sl, [pc, #116]	; 7d48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    7cd4:	481b      	ldr	r0, [pc, #108]	; (7d44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    7cd6:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    7cda:	2010      	movs	r0, #16
    7cdc:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    7ce0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ce2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    7ce6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    7cea:	6260      	str	r0, [r4, #36]	; 0x24
    7cec:	4817      	ldr	r0, [pc, #92]	; (7d4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7cee:	6006      	str	r6, [r0, #0]
    7cf0:	f000 f9fe 	bl	80f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf0>
    7cf4:	4641      	mov	r1, r8
    7cf6:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    7cfa:	4811      	ldr	r0, [pc, #68]	; (7d40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    7cfc:	300c      	adds	r0, #12
    7cfe:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7d02:	42a8      	cmp	r0, r5
    7d04:	d310      	bcc.n	7d28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    7d06:	2000      	movs	r0, #0
    7d08:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7d0c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    7d10:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7d12:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    7d16:	6260      	str	r0, [r4, #36]	; 0x24
    7d18:	480c      	ldr	r0, [pc, #48]	; (7d4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7d1a:	1d00      	adds	r0, r0, #4
    7d1c:	6006      	str	r6, [r0, #0]
    7d1e:	f7ff fd1d 	bl	775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7d22:	2000      	movs	r0, #0
    7d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d28:	4629      	mov	r1, r5
    7d2a:	4638      	mov	r0, r7
    7d2c:	f000 fab2 	bl	8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
    7d30:	2001      	movs	r0, #1
    7d32:	e7f7      	b.n	7d24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    7d34:	40001000 	.word	0x40001000
    7d38:	20001230 	.word	0x20001230
    7d3c:	000083e8 	.word	0x000083e8
    7d40:	40008000 	.word	0x40008000
    7d44:	40008140 	.word	0x40008140
    7d48:	4001f098 	.word	0x4001f098
    7d4c:	4001f504 	.word	0x4001f504

00007d50 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    7d50:	4b0d      	ldr	r3, [pc, #52]	; (7d88 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    7d52:	b510      	push	{r4, lr}
    7d54:	71d8      	strb	r0, [r3, #7]
    7d56:	729a      	strb	r2, [r3, #10]
    7d58:	b151      	cbz	r1, 7d70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    7d5a:	2002      	movs	r0, #2
    7d5c:	7218      	strb	r0, [r3, #8]
    7d5e:	2801      	cmp	r0, #1
    7d60:	d008      	beq.n	7d74 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    7d62:	2802      	cmp	r0, #2
    7d64:	d00f      	beq.n	7d86 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7d66:	f640 2144 	movw	r1, #2628	; 0xa44
    7d6a:	203e      	movs	r0, #62	; 0x3e
    7d6c:	f7f8 fe0e 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d70:	2001      	movs	r0, #1
    7d72:	e7f3      	b.n	7d5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    7d74:	7a58      	ldrb	r0, [r3, #9]
    7d76:	2802      	cmp	r0, #2
    7d78:	d105      	bne.n	7d86 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7d7a:	f000 f943 	bl	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    7d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d82:	f000 ba51 	b.w	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
    7d86:	bd10      	pop	{r4, pc}
    7d88:	20001230 	.word	0x20001230

00007d8c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    7d8c:	4902      	ldr	r1, [pc, #8]	; (7d98 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    7d8e:	2000      	movs	r0, #0
    7d90:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7d94:	4770      	bx	lr
    7d96:	0000      	.short	0x0000
    7d98:	40008000 	.word	0x40008000

00007d9c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7d9c:	4904      	ldr	r1, [pc, #16]	; (7db0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7d9e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7da2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7da6:	4249      	negs	r1, r1
    7da8:	7001      	strb	r1, [r0, #0]
    7daa:	2001      	movs	r0, #1
    7dac:	4770      	bx	lr
    7dae:	0000      	.short	0x0000
    7db0:	40001000 	.word	0x40001000

00007db4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7db4:	4903      	ldr	r1, [pc, #12]	; (7dc4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    7db6:	0e02      	lsrs	r2, r0, #24
    7db8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7dbc:	0200      	lsls	r0, r0, #8
    7dbe:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    7dc2:	4770      	bx	lr
    7dc4:	40001000 	.word	0x40001000

00007dc8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    7dc8:	4901      	ldr	r1, [pc, #4]	; (7dd0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    7dca:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    7dce:	4770      	bx	lr
    7dd0:	40001000 	.word	0x40001000

00007dd4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    7dd4:	b510      	push	{r4, lr}
    7dd6:	2200      	movs	r2, #0
    7dd8:	2901      	cmp	r1, #1
    7dda:	d006      	beq.n	7dea <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    7ddc:	2902      	cmp	r1, #2
    7dde:	d002      	beq.n	7de6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    7de0:	f240 21d2 	movw	r1, #722	; 0x2d2
    7de4:	e014      	b.n	7e10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    7de6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7dea:	490b      	ldr	r1, [pc, #44]	; (7e18 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    7dec:	430a      	orrs	r2, r1
    7dee:	490b      	ldr	r1, [pc, #44]	; (7e1c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7df0:	600a      	str	r2, [r1, #0]
    7df2:	490b      	ldr	r1, [pc, #44]	; (7e20 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    7df4:	4308      	orrs	r0, r1
    7df6:	4909      	ldr	r1, [pc, #36]	; (7e1c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    7df8:	1d09      	adds	r1, r1, #4
    7dfa:	6008      	str	r0, [r1, #0]
    7dfc:	4809      	ldr	r0, [pc, #36]	; (7e24 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    7dfe:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    7e02:	b2c0      	uxtb	r0, r0
    7e04:	2803      	cmp	r0, #3
    7e06:	d001      	beq.n	7e0c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    7e08:	280b      	cmp	r0, #11
    7e0a:	d104      	bne.n	7e16 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    7e0c:	f240 21ea 	movw	r1, #746	; 0x2ea
    7e10:	203e      	movs	r0, #62	; 0x3e
    7e12:	f7f8 fdbb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e16:	bd10      	pop	{r4, pc}
    7e18:	00100108 	.word	0x00100108
    7e1c:	40001514 	.word	0x40001514
    7e20:	02030000 	.word	0x02030000
    7e24:	40001000 	.word	0x40001000

00007e28 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    7e28:	4901      	ldr	r1, [pc, #4]	; (7e30 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    7e2a:	7588      	strb	r0, [r1, #22]
    7e2c:	4770      	bx	lr
    7e2e:	0000      	.short	0x0000
    7e30:	20001230 	.word	0x20001230

00007e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    7e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e38:	4851      	ldr	r0, [pc, #324]	; (7f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7e3a:	f04f 0a01 	mov.w	sl, #1
    7e3e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    7e42:	484f      	ldr	r0, [pc, #316]	; (7f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7e44:	300c      	adds	r0, #12
    7e46:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    7e4a:	f008 f9b0 	bl	101ae <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    7e4e:	4c4d      	ldr	r4, [pc, #308]	; (7f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    7e50:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    7e54:	f000 f8e0 	bl	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
    7e58:	494b      	ldr	r1, [pc, #300]	; (7f88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    7e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7e5c:	6008      	str	r0, [r1, #0]
    7e5e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 7f8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    7e62:	2000      	movs	r0, #0
    7e64:	6260      	str	r0, [r4, #36]	; 0x24
    7e66:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    7e6a:	f240 131d 	movw	r3, #285	; 0x11d
    7e6e:	439a      	bics	r2, r3
    7e70:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    7e74:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    7e78:	f000 f94e 	bl	8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>
    7e7c:	4605      	mov	r5, r0
    7e7e:	4840      	ldr	r0, [pc, #256]	; (7f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7e80:	3008      	adds	r0, #8
    7e82:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7e86:	4e3e      	ldr	r6, [pc, #248]	; (7f80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    7e88:	61e0      	str	r0, [r4, #28]
    7e8a:	1d36      	adds	r6, r6, #4
    7e8c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    7e90:	61a0      	str	r0, [r4, #24]
    7e92:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    7e96:	7d21      	ldrb	r1, [r4, #20]
    7e98:	f884 1020 	strb.w	r1, [r4, #32]
    7e9c:	7a61      	ldrb	r1, [r4, #9]
    7e9e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    7ea2:	46a1      	mov	r9, r4
    7ea4:	2400      	movs	r4, #0
    7ea6:	4639      	mov	r1, r7
    7ea8:	4628      	mov	r0, r5
    7eaa:	f000 f983 	bl	81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>
    7eae:	b910      	cbnz	r0, 7eb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    7eb0:	f8c8 a010 	str.w	sl, [r8, #16]
    7eb4:	2401      	movs	r4, #1
    7eb6:	4f33      	ldr	r7, [pc, #204]	; (7f84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    7eb8:	07e8      	lsls	r0, r5, #31
    7eba:	f1a7 0710 	sub.w	r7, r7, #16
    7ebe:	d120      	bne.n	7f02 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    7ec0:	07a8      	lsls	r0, r5, #30
    7ec2:	d527      	bpl.n	7f14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    7ec4:	f008 fa9b 	bl	103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ec8:	b9f0      	cbnz	r0, 7f08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7eca:	f008 fa88 	bl	103de <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7ece:	b9d8      	cbnz	r0, 7f08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7ed0:	482f      	ldr	r0, [pc, #188]	; (7f90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    7ed2:	6800      	ldr	r0, [r0, #0]
    7ed4:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    7ed8:	f3c0 6300 	ubfx	r3, r0, #24, #1
    7edc:	f000 020f 	and.w	r2, r0, #15
    7ee0:	f3c0 1103 	ubfx	r1, r0, #4, #4
    7ee4:	f3c0 2803 	ubfx	r8, r0, #8, #4
    7ee8:	b173      	cbz	r3, 7f08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7eea:	b11a      	cbz	r2, 7ef4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    7eec:	b111      	cbz	r1, 7ef4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    7eee:	f1b8 0f00 	cmp.w	r8, #0
    7ef2:	d109      	bne.n	7f08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7ef4:	f3c0 4004 	ubfx	r0, r0, #16, #5
    7ef8:	2801      	cmp	r0, #1
    7efa:	d105      	bne.n	7f08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7efc:	f1bc 0f03 	cmp.w	ip, #3
    7f00:	d202      	bcs.n	7f08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    7f02:	6838      	ldr	r0, [r7, #0]
    7f04:	4780      	blx	r0
    7f06:	e00e      	b.n	7f26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    7f08:	f345 0080 	sbfx	r0, r5, #2, #1
    7f0c:	4621      	mov	r1, r4
    7f0e:	1c40      	adds	r0, r0, #1
    7f10:	687a      	ldr	r2, [r7, #4]
    7f12:	e007      	b.n	7f24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    7f14:	f015 0f28 	tst.w	r5, #40	; 0x28
    7f18:	d005      	beq.n	7f26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    7f1a:	f345 1140 	sbfx	r1, r5, #5, #1
    7f1e:	68ba      	ldr	r2, [r7, #8]
    7f20:	4620      	mov	r0, r4
    7f22:	1c49      	adds	r1, r1, #1
    7f24:	4790      	blx	r2
    7f26:	06e8      	lsls	r0, r5, #27
    7f28:	d501      	bpl.n	7f2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    7f2a:	68f8      	ldr	r0, [r7, #12]
    7f2c:	4780      	blx	r0
    7f2e:	f899 1009 	ldrb.w	r1, [r9, #9]
    7f32:	4648      	mov	r0, r9
    7f34:	2902      	cmp	r1, #2
    7f36:	d120      	bne.n	7f7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    7f38:	7b01      	ldrb	r1, [r0, #12]
    7f3a:	2900      	cmp	r1, #0
    7f3c:	d01d      	beq.n	7f7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    7f3e:	2902      	cmp	r1, #2
    7f40:	d004      	beq.n	7f4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    7f42:	2901      	cmp	r1, #1
    7f44:	d009      	beq.n	7f5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    7f46:	f640 4156 	movw	r1, #3158	; 0xc56
    7f4a:	e00d      	b.n	7f68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    7f4c:	69c1      	ldr	r1, [r0, #28]
    7f4e:	f8d9 0010 	ldr.w	r0, [r9, #16]
    7f52:	4408      	add	r0, r1
    7f54:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    7f58:	e00b      	b.n	7f72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    7f5a:	6901      	ldr	r1, [r0, #16]
    7f5c:	f8d9 001c 	ldr.w	r0, [r9, #28]
    7f60:	4281      	cmp	r1, r0
    7f62:	d804      	bhi.n	7f6e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    7f64:	f640 4157 	movw	r1, #3159	; 0xc57
    7f68:	203e      	movs	r0, #62	; 0x3e
    7f6a:	f7f8 fd0f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6e:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    7f72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f76:	f000 b961 	b.w	823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>
    7f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f7e:	0000      	.short	0x0000
    7f80:	40008000 	.word	0x40008000
    7f84:	20001230 	.word	0x20001230
    7f88:	4001f508 	.word	0x4001f508
    7f8c:	40001000 	.word	0x40001000
    7f90:	40001450 	.word	0x40001450
    7f94:	480b      	ldr	r0, [pc, #44]	; (7fc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    7f96:	7d81      	ldrb	r1, [r0, #22]
    7f98:	480b      	ldr	r0, [pc, #44]	; (7fc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    7f9a:	5c40      	ldrb	r0, [r0, r1]
    7f9c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7fa0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    7fa4:	d204      	bcs.n	7fb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    7fa6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    7faa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7fae:	e001      	b.n	7fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    7fb0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    7fb4:	4a05      	ldr	r2, [pc, #20]	; (7fcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    7fb6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    7fba:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    7fbe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    7fc2:	4770      	bx	lr
    7fc4:	20001230 	.word	0x20001230
    7fc8:	000083ee 	.word	0x000083ee
    7fcc:	40001000 	.word	0x40001000
    7fd0:	b508      	push	{r3, lr}
    7fd2:	490b      	ldr	r1, [pc, #44]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fd4:	466b      	mov	r3, sp
    7fd6:	f991 2015 	ldrsb.w	r2, [r1, #21]
    7fda:	7d89      	ldrb	r1, [r1, #22]
    7fdc:	f000 faaa 	bl	8534 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    7fe0:	f99d 0000 	ldrsb.w	r0, [sp]
    7fe4:	f000 fa7a 	bl	84dc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    7fe8:	f10d 0001 	add.w	r0, sp, #1
    7fec:	f004 f924 	bl	c238 <mpsl_fem_pa_gain_set>
    7ff0:	2800      	cmp	r0, #0
    7ff2:	d004      	beq.n	7ffe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    7ff4:	f240 51e6 	movw	r1, #1510	; 0x5e6
    7ff8:	203e      	movs	r0, #62	; 0x3e
    7ffa:	f7f8 fcc7 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ffe:	bd08      	pop	{r3, pc}
    8000:	20001230 	.word	0x20001230
    8004:	4803      	ldr	r0, [pc, #12]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    8006:	7a01      	ldrb	r1, [r0, #8]
    8008:	2901      	cmp	r1, #1
    800a:	d102      	bne.n	8012 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12>
    800c:	7a80      	ldrb	r0, [r0, #10]
    800e:	f7ff bfdf 	b.w	7fd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8012:	4770      	bx	lr
    8014:	20001230 	.word	0x20001230
    8018:	480d      	ldr	r0, [pc, #52]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
    801a:	b510      	push	{r4, lr}
    801c:	7a40      	ldrb	r0, [r0, #9]
    801e:	2801      	cmp	r0, #1
    8020:	d00c      	beq.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
    8022:	2802      	cmp	r0, #2
    8024:	d113      	bne.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    8026:	f004 f8e9 	bl	c1fc <mpsl_fem_lna_configuration_clear>
    802a:	2800      	cmp	r0, #0
    802c:	d00f      	beq.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    802e:	1c40      	adds	r0, r0, #1
    8030:	d00d      	beq.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    8032:	f640 01ab 	movw	r1, #2219	; 0x8ab
    8036:	203e      	movs	r0, #62	; 0x3e
    8038:	f7f8 fca8 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    803c:	f004 f8f0 	bl	c220 <mpsl_fem_pa_configuration_clear>
    8040:	2800      	cmp	r0, #0
    8042:	d004      	beq.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    8044:	1c40      	adds	r0, r0, #1
    8046:	d002      	beq.n	804e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e>
    8048:	f640 01a5 	movw	r1, #2213	; 0x8a5
    804c:	e7f3      	b.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
    804e:	bd10      	pop	{r4, pc}
    8050:	20001230 	.word	0x20001230
    8054:	4808      	ldr	r0, [pc, #32]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    8056:	2100      	movs	r1, #0
    8058:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    805c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8060:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8064:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8068:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    806c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8070:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8074:	4770      	bx	lr
    8076:	0000      	.short	0x0000
    8078:	40001000 	.word	0x40001000
    807c:	4818      	ldr	r0, [pc, #96]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    807e:	b510      	push	{r4, lr}
    8080:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    8084:	07c1      	lsls	r1, r0, #31
    8086:	d029      	beq.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    8088:	0781      	lsls	r1, r0, #30
    808a:	d514      	bpl.n	80b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6>
    808c:	4815      	ldr	r0, [pc, #84]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    808e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8092:	f041 0101 	orr.w	r1, r1, #1
    8096:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    809a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    809e:	b2c0      	uxtb	r0, r0
    80a0:	280b      	cmp	r0, #11
    80a2:	d005      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80a4:	280a      	cmp	r0, #10
    80a6:	d003      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80a8:	2803      	cmp	r0, #3
    80aa:	d001      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    80ac:	2802      	cmp	r0, #2
    80ae:	d115      	bne.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80b0:	f240 610f 	movw	r1, #1551	; 0x60f
    80b4:	e00f      	b.n	80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
    80b6:	0740      	lsls	r0, r0, #29
    80b8:	d510      	bpl.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80ba:	480a      	ldr	r0, [pc, #40]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    80bc:	490a      	ldr	r1, [pc, #40]	; (80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>)
    80be:	3008      	adds	r0, #8
    80c0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    80c4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    80c8:	4808      	ldr	r0, [pc, #32]	; (80ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec>)
    80ca:	f008 f82f 	bl	1012c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    80ce:	2800      	cmp	r0, #0
    80d0:	d004      	beq.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80d2:	f240 6117 	movw	r1, #1559	; 0x617
    80d6:	203e      	movs	r0, #62	; 0x3e
    80d8:	f7f8 fc58 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80dc:	bd10      	pop	{r4, pc}
    80de:	0000      	.short	0x0000
    80e0:	20001230 	.word	0x20001230
    80e4:	40001000 	.word	0x40001000
    80e8:	4001f098 	.word	0x4001f098
    80ec:	40008000 	.word	0x40008000
    80f0:	4808      	ldr	r0, [pc, #32]	; (8114 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x114>)
    80f2:	4601      	mov	r1, r0
    80f4:	79c2      	ldrb	r2, [r0, #7]
    80f6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    80fa:	b112      	cbz	r2, 8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
    80fc:	2a01      	cmp	r2, #1
    80fe:	d003      	beq.n	8108 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108>
    8100:	e006      	b.n	8110 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x110>
    8102:	f041 0102 	orr.w	r1, r1, #2
    8106:	e001      	b.n	810c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10c>
    8108:	f041 0104 	orr.w	r1, r1, #4
    810c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    8110:	f7ff bfb4 	b.w	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
    8114:	20001230 	.word	0x20001230
    8118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    811c:	4d22      	ldr	r5, [pc, #136]	; (81a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8>)
    811e:	2400      	movs	r4, #0
    8120:	7b28      	ldrb	r0, [r5, #12]
    8122:	b138      	cbz	r0, 8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>
    8124:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8128:	4820      	ldr	r0, [pc, #128]	; (81ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ac>)
    812a:	f007 ffff 	bl	1012c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    812e:	b108      	cbz	r0, 8134 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134>
    8130:	2701      	movs	r7, #1
    8132:	e000      	b.n	8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
    8134:	2700      	movs	r7, #0
    8136:	7a68      	ldrb	r0, [r5, #9]
    8138:	4e1d      	ldr	r6, [pc, #116]	; (81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>)
    813a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    813e:	2801      	cmp	r0, #1
    8140:	d002      	beq.n	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
    8142:	2802      	cmp	r0, #2
    8144:	d006      	beq.n	8154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154>
    8146:	e016      	b.n	8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8148:	4630      	mov	r0, r6
    814a:	f007 ffea 	bl	10122 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    814e:	b190      	cbz	r0, 8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8150:	2408      	movs	r4, #8
    8152:	e010      	b.n	8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8154:	4630      	mov	r0, r6
    8156:	f007 ffe4 	bl	10122 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    815a:	b100      	cbz	r0, 815e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15e>
    815c:	2402      	movs	r4, #2
    815e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    8162:	43c0      	mvns	r0, r0
    8164:	f340 0000 	sbfx	r0, r0, #0, #1
    8168:	1c40      	adds	r0, r0, #1
    816a:	d101      	bne.n	8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>
    816c:	f044 0404 	orr.w	r4, r4, #4
    8170:	b10f      	cbz	r7, 8176 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176>
    8172:	f044 0401 	orr.w	r4, r4, #1
    8176:	f014 0f0b 	tst.w	r4, #11
    817a:	d107      	bne.n	818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>
    817c:	f44f 7188 	mov.w	r1, #272	; 0x110
    8180:	4630      	mov	r0, r6
    8182:	f007 ffce 	bl	10122 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8186:	b108      	cbz	r0, 818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>
    8188:	f044 0410 	orr.w	r4, r4, #16
    818c:	f7ff ff62 	bl	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
    8190:	06e0      	lsls	r0, r4, #27
    8192:	d506      	bpl.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    8194:	0720      	lsls	r0, r4, #28
    8196:	d404      	bmi.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    8198:	7a68      	ldrb	r0, [r5, #9]
    819a:	2801      	cmp	r0, #1
    819c:	d101      	bne.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
    819e:	f044 0420 	orr.w	r4, r4, #32
    81a2:	4620      	mov	r0, r4
    81a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81a8:	20001230 	.word	0x20001230
    81ac:	40008000 	.word	0x40008000
    81b0:	40001000 	.word	0x40001000
    81b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81b8:	4c1a      	ldr	r4, [pc, #104]	; (8224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x224>)
    81ba:	460d      	mov	r5, r1
    81bc:	7a21      	ldrb	r1, [r4, #8]
    81be:	b129      	cbz	r1, 81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    81c0:	f010 0f11 	tst.w	r0, #17
    81c4:	d007      	beq.n	81d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d6>
    81c6:	f7ff fac9 	bl	775c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81ca:	e024      	b.n	8216 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x216>
    81cc:	f000 f890 	bl	82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>
    81d0:	2000      	movs	r0, #0
    81d2:	7320      	strb	r0, [r4, #12]
    81d4:	e01f      	b.n	8216 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x216>
    81d6:	2901      	cmp	r1, #1
    81d8:	d001      	beq.n	81de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1de>
    81da:	2601      	movs	r6, #1
    81dc:	e000      	b.n	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
    81de:	2600      	movs	r6, #0
    81e0:	79e0      	ldrb	r0, [r4, #7]
    81e2:	2801      	cmp	r0, #1
    81e4:	d00e      	beq.n	8204 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x204>
    81e6:	2700      	movs	r7, #0
    81e8:	f000 f882 	bl	82f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2f0>
    81ec:	2196      	movs	r1, #150	; 0x96
    81ee:	4630      	mov	r0, r6
    81f0:	f000 f894 	bl	831c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31c>
    81f4:	4601      	mov	r1, r0
    81f6:	b14f      	cbz	r7, 820c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20c>
    81f8:	353b      	adds	r5, #59	; 0x3b
    81fa:	428d      	cmp	r5, r1
    81fc:	d904      	bls.n	8208 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x208>
    81fe:	2000      	movs	r0, #0
    8200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8204:	2701      	movs	r7, #1
    8206:	e7ef      	b.n	81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>
    8208:	2001      	movs	r0, #1
    820a:	71e0      	strb	r0, [r4, #7]
    820c:	7aa2      	ldrb	r2, [r4, #10]
    820e:	4630      	mov	r0, r6
    8210:	f7ff fd2c 	bl	7c6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8214:	b108      	cbz	r0, 821a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21a>
    8216:	2001      	movs	r0, #1
    8218:	e7f2      	b.n	8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
    821a:	f640 21a5 	movw	r1, #2725	; 0xaa5
    821e:	203e      	movs	r0, #62	; 0x3e
    8220:	f7f8 fbb4 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8224:	20001230 	.word	0x20001230
    8228:	4803      	ldr	r0, [pc, #12]	; (8238 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x238>)
    822a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    822e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8232:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8236:	4770      	bx	lr
    8238:	40001000 	.word	0x40001000
    823c:	4804      	ldr	r0, [pc, #16]	; (8250 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x250>)
    823e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8240:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8244:	6241      	str	r1, [r0, #36]	; 0x24
    8246:	4903      	ldr	r1, [pc, #12]	; (8254 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x254>)
    8248:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    824c:	6008      	str	r0, [r1, #0]
    824e:	4770      	bx	lr
    8250:	20001230 	.word	0x20001230
    8254:	4001f504 	.word	0x4001f504
    8258:	4a07      	ldr	r2, [pc, #28]	; (8278 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x278>)
    825a:	2000      	movs	r0, #0
    825c:	3208      	adds	r2, #8
    825e:	4906      	ldr	r1, [pc, #24]	; (8278 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x278>)
    8260:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8264:	1d0a      	adds	r2, r1, #4
    8266:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    826a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    826e:	4902      	ldr	r1, [pc, #8]	; (8278 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x278>)
    8270:	310c      	adds	r1, #12
    8272:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8276:	4770      	bx	lr
    8278:	40008000 	.word	0x40008000
    827c:	4903      	ldr	r1, [pc, #12]	; (828c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28c>)
    827e:	79c9      	ldrb	r1, [r1, #7]
    8280:	2900      	cmp	r1, #0
    8282:	d102      	bne.n	828a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28a>
    8284:	4902      	ldr	r1, [pc, #8]	; (8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>)
    8286:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    828a:	4770      	bx	lr
    828c:	20001230 	.word	0x20001230
    8290:	4001f098 	.word	0x4001f098
    8294:	b510      	push	{r4, lr}
    8296:	4a14      	ldr	r2, [pc, #80]	; (82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>)
    8298:	b120      	cbz	r0, 82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
    829a:	2801      	cmp	r0, #1
    829c:	d011      	beq.n	82c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c2>
    829e:	f240 7153 	movw	r1, #1875	; 0x753
    82a2:	e01c      	b.n	82de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2de>
    82a4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    82a8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    82ac:	490f      	ldr	r1, [pc, #60]	; (82ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ec>)
    82ae:	480e      	ldr	r0, [pc, #56]	; (82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>)
    82b0:	f003 ffbc 	bl	c22c <mpsl_fem_pa_configuration_set>
    82b4:	2800      	cmp	r0, #0
    82b6:	d015      	beq.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    82b8:	1c40      	adds	r0, r0, #1
    82ba:	d013      	beq.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    82bc:	f240 7142 	movw	r1, #1858	; 0x742
    82c0:	e00d      	b.n	82de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2de>
    82c2:	f101 0029 	add.w	r0, r1, #41	; 0x29
    82c6:	e9c2 1002 	strd	r1, r0, [r2, #8]
    82ca:	4908      	ldr	r1, [pc, #32]	; (82ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ec>)
    82cc:	4806      	ldr	r0, [pc, #24]	; (82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>)
    82ce:	f003 ff9b 	bl	c208 <mpsl_fem_lna_configuration_set>
    82d2:	2800      	cmp	r0, #0
    82d4:	d006      	beq.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    82d6:	1c40      	adds	r0, r0, #1
    82d8:	d004      	beq.n	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    82da:	f240 714f 	movw	r1, #1871	; 0x74f
    82de:	203e      	movs	r0, #62	; 0x3e
    82e0:	f7f8 fb54 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82e4:	bd10      	pop	{r4, pc}
    82e6:	0000      	.short	0x0000
    82e8:	200002e0 	.word	0x200002e0
    82ec:	00008418 	.word	0x00008418
    82f0:	4802      	ldr	r0, [pc, #8]	; (82fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fc>)
    82f2:	2100      	movs	r1, #0
    82f4:	71c1      	strb	r1, [r0, #7]
    82f6:	7201      	strb	r1, [r0, #8]
    82f8:	7241      	strb	r1, [r0, #9]
    82fa:	4770      	bx	lr
    82fc:	20001230 	.word	0x20001230
    8300:	4a05      	ldr	r2, [pc, #20]	; (8318 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x318>)
    8302:	79d2      	ldrb	r2, [r2, #7]
    8304:	2a01      	cmp	r2, #1
    8306:	d006      	beq.n	8316 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x316>
    8308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    830c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8310:	fbb1 f1f2 	udiv	r1, r1, r2
    8314:	1a40      	subs	r0, r0, r1
    8316:	4770      	bx	lr
    8318:	20001230 	.word	0x20001230
    831c:	b570      	push	{r4, r5, r6, lr}
    831e:	4c13      	ldr	r4, [pc, #76]	; (836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>)
    8320:	4603      	mov	r3, r0
    8322:	460d      	mov	r5, r1
    8324:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8328:	2000      	movs	r0, #0
    832a:	b15a      	cbz	r2, 8344 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x344>
    832c:	4621      	mov	r1, r4
    832e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8332:	b163      	cbz	r3, 834e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34e>
    8334:	2b01      	cmp	r3, #1
    8336:	d111      	bne.n	835c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35c>
    8338:	2a01      	cmp	r2, #1
    833a:	4628      	mov	r0, r5
    833c:	d012      	beq.n	8364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x364>
    833e:	f007 fefa 	bl	10136 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8342:	e009      	b.n	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
    8344:	f640 0158 	movw	r1, #2136	; 0x858
    8348:	203e      	movs	r0, #62	; 0x3e
    834a:	f7f8 fb1f 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    834e:	2a01      	cmp	r2, #1
    8350:	4628      	mov	r0, r5
    8352:	d004      	beq.n	835e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x35e>
    8354:	f007 fefd 	bl	10152 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8358:	69e1      	ldr	r1, [r4, #28]
    835a:	4408      	add	r0, r1
    835c:	bd70      	pop	{r4, r5, r6, pc}
    835e:	f000 f8d1 	bl	8504 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8362:	e7f9      	b.n	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
    8364:	f000 f8c0 	bl	84e8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8368:	e7f6      	b.n	8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
    836a:	0000      	.short	0x0000
    836c:	20001230 	.word	0x20001230
    8370:	b510      	push	{r4, lr}
    8372:	f7ff fc4f 	bl	7c14 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8376:	f7ff fe0d 	bl	7f94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    837a:	f7ff fe43 	bl	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    837e:	f7ff ff53 	bl	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
    8382:	f008 f83c 	bl	103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8386:	2800      	cmp	r0, #0
    8388:	d108      	bne.n	839c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39c>
    838a:	f008 f828 	bl	103de <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    838e:	2800      	cmp	r0, #0
    8390:	d104      	bne.n	839c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39c>
    8392:	4803      	ldr	r0, [pc, #12]	; (83a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a0>)
    8394:	6801      	ldr	r1, [r0, #0]
    8396:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    839a:	6001      	str	r1, [r0, #0]
    839c:	bd10      	pop	{r4, pc}
    839e:	0000      	.short	0x0000
    83a0:	40001568 	.word	0x40001568
    83a4:	b510      	push	{r4, lr}
    83a6:	4604      	mov	r4, r0
    83a8:	f7ff fc34 	bl	7c14 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    83ac:	f7ff fdf2 	bl	7f94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    83b0:	4620      	mov	r0, r4
    83b2:	f7ff fe0d 	bl	7fd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    83b6:	f008 f822 	bl	103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    83ba:	2800      	cmp	r0, #0
    83bc:	d00d      	beq.n	83da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3da>
    83be:	4a09      	ldr	r2, [pc, #36]	; (83e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e4>)
    83c0:	6811      	ldr	r1, [r2, #0]
    83c2:	0650      	lsls	r0, r2, #25
    83c4:	2c02      	cmp	r4, #2
    83c6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    83ca:	d007      	beq.n	83dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3dc>
    83cc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    83d0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    83d4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    83d8:	6010      	str	r0, [r2, #0]
    83da:	bd10      	pop	{r4, pc}
    83dc:	f3c0 6006 	ubfx	r0, r0, #24, #7
    83e0:	e7f6      	b.n	83d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d0>
    83e2:	0000      	.short	0x0000
    83e4:	40001588 	.word	0x40001588
    83e8:	a62c0000 	.word	0xa62c0000
    83ec:	0604a1e0 	.word	0x0604a1e0
    83f0:	0e0c0a08 	.word	0x0e0c0a08
    83f4:	16141210 	.word	0x16141210
    83f8:	201e1c18 	.word	0x201e1c18
    83fc:	28262422 	.word	0x28262422
    8400:	302e2c2a 	.word	0x302e2c2a
    8404:	38363432 	.word	0x38363432
    8408:	403e3c3a 	.word	0x403e3c3a
    840c:	48464442 	.word	0x48464442
    8410:	024e4c4a 	.word	0x024e4c4a
    8414:	0000501a 	.word	0x0000501a
    8418:	00000001 	.word	0x00000001
    841c:	40001110 	.word	0x40001110
	...
    8434:	00001e14 	.word	0x00001e14
    8438:	00001130 	.word	0x00001130
    843c:	00000000 	.word	0x00000000
    8440:	00000028 	.word	0x00000028
    8444:	00000018 	.word	0x00000018
    8448:	00000000 	.word	0x00000000
    844c:	00001e14 	.word	0x00001e14
    8450:	00001130 	.word	0x00001130
    8454:	00000000 	.word	0x00000000
    8458:	00001770 	.word	0x00001770
    845c:	00000fa0 	.word	0x00000fa0

00008460 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8460:	b570      	push	{r4, r5, r6, lr}
    8462:	4605      	mov	r5, r0
    8464:	4614      	mov	r4, r2
    8466:	4608      	mov	r0, r1
    8468:	f7ff fbfa 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    846c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8470:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8474:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8478:	4807      	ldr	r0, [pc, #28]	; (8498 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    847a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    847e:	4408      	add	r0, r1
    8480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8484:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8488:	fbb0 f5f1 	udiv	r5, r0, r1
    848c:	4620      	mov	r0, r4
    848e:	f7ff fbbb 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8492:	4428      	add	r0, r5
    8494:	1d40      	adds	r0, r0, #5
    8496:	bd70      	pop	{r4, r5, r6, pc}
    8498:	00008528 	.word	0x00008528

0000849c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    849c:	b570      	push	{r4, r5, r6, lr}
    849e:	4d0e      	ldr	r5, [pc, #56]	; (84d8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    84a0:	461c      	mov	r4, r3
    84a2:	3d08      	subs	r5, #8
    84a4:	4b0c      	ldr	r3, [pc, #48]	; (84d8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    84a6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    84aa:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    84ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84b2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    84b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    84ba:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    84be:	4418      	add	r0, r3
    84c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    84c4:	fbb0 f5f1 	udiv	r5, r0, r1
    84c8:	4610      	mov	r0, r2
    84ca:	f7ff fb9d 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    84ce:	4428      	add	r0, r5
    84d0:	4420      	add	r0, r4
    84d2:	1d40      	adds	r0, r0, #5
    84d4:	bd70      	pop	{r4, r5, r6, pc}
    84d6:	0000      	.short	0x0000
    84d8:	00008528 	.word	0x00008528

000084dc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    84dc:	4901      	ldr	r1, [pc, #4]	; (84e4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    84de:	b2c0      	uxtb	r0, r0
    84e0:	6008      	str	r0, [r1, #0]
    84e2:	4770      	bx	lr
    84e4:	4000150c 	.word	0x4000150c

000084e8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    84e8:	4a05      	ldr	r2, [pc, #20]	; (8500 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    84ea:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    84ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    84f2:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    84f6:	fbb1 f1f2 	udiv	r1, r1, r2
    84fa:	4408      	add	r0, r1
    84fc:	1e80      	subs	r0, r0, #2
    84fe:	4770      	bx	lr
    8500:	00008520 	.word	0x00008520

00008504 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8504:	4a05      	ldr	r2, [pc, #20]	; (851c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8506:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    850a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    850e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8512:	fbb1 f1f2 	udiv	r1, r1, r2
    8516:	4408      	add	r0, r1
    8518:	4770      	bx	lr
    851a:	0000      	.short	0x0000
    851c:	00008520 	.word	0x00008520
    8520:	05dc0000 	.word	0x05dc0000
    8524:	000003e8 	.word	0x000003e8
    8528:	00000000 	.word	0x00000000
    852c:	00001e14 	.word	0x00001e14
    8530:	00001130 	.word	0x00001130

00008534 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8538:	461e      	mov	r6, r3
    853a:	4617      	mov	r7, r2
    853c:	460c      	mov	r4, r1
    853e:	4605      	mov	r5, r0
    8540:	f000 f856 	bl	85f0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8544:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 85ec <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8548:	4680      	mov	r8, r0
    854a:	f899 0000 	ldrb.w	r0, [r9]
    854e:	42a8      	cmp	r0, r5
    8550:	d110      	bne.n	8574 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8552:	f899 1001 	ldrb.w	r1, [r9, #1]
    8556:	4648      	mov	r0, r9
    8558:	42a1      	cmp	r1, r4
    855a:	d10b      	bne.n	8574 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    855c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8560:	42b9      	cmp	r1, r7
    8562:	d107      	bne.n	8574 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8564:	78c2      	ldrb	r2, [r0, #3]
    8566:	4542      	cmp	r2, r8
    8568:	d104      	bne.n	8574 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    856a:	8881      	ldrh	r1, [r0, #4]
    856c:	8031      	strh	r1, [r6, #0]
    856e:	7980      	ldrb	r0, [r0, #6]
    8570:	70b0      	strb	r0, [r6, #2]
    8572:	e037      	b.n	85e4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8574:	463a      	mov	r2, r7
    8576:	4621      	mov	r1, r4
    8578:	2d01      	cmp	r5, #1
    857a:	d009      	beq.n	8590 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    857c:	2d02      	cmp	r5, #2
    857e:	d009      	beq.n	8594 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8580:	2d04      	cmp	r5, #4
    8582:	d009      	beq.n	8598 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8584:	2d08      	cmp	r5, #8
    8586:	d009      	beq.n	859c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8588:	f240 4161 	movw	r1, #1121	; 0x461
    858c:	2006      	movs	r0, #6
    858e:	e00c      	b.n	85aa <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8590:	2000      	movs	r0, #0
    8592:	e004      	b.n	859e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8594:	2001      	movs	r0, #1
    8596:	e002      	b.n	859e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8598:	2003      	movs	r0, #3
    859a:	e000      	b.n	859e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    859c:	2002      	movs	r0, #2
    859e:	466b      	mov	r3, sp
    85a0:	f000 f89e 	bl	86e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    85a4:	b118      	cbz	r0, 85ae <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    85a6:	213d      	movs	r1, #61	; 0x3d
    85a8:	2075      	movs	r0, #117	; 0x75
    85aa:	f7f8 f9ef 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ae:	4620      	mov	r0, r4
    85b0:	f7ff f8cc 	bl	774c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    85b4:	4602      	mov	r2, r0
    85b6:	2300      	movs	r3, #0
    85b8:	4631      	mov	r1, r6
    85ba:	f99d 0000 	ldrsb.w	r0, [sp]
    85be:	f003 fe47 	bl	c250 <mpsl_fem_tx_power_split>
    85c2:	4601      	mov	r1, r0
    85c4:	f889 1007 	strb.w	r1, [r9, #7]
    85c8:	8831      	ldrh	r1, [r6, #0]
    85ca:	f8a9 1004 	strh.w	r1, [r9, #4]
    85ce:	78b1      	ldrb	r1, [r6, #2]
    85d0:	f889 1006 	strb.w	r1, [r9, #6]
    85d4:	f889 5000 	strb.w	r5, [r9]
    85d8:	f889 4001 	strb.w	r4, [r9, #1]
    85dc:	f889 7002 	strb.w	r7, [r9, #2]
    85e0:	f889 8003 	strb.w	r8, [r9, #3]
    85e4:	f999 0007 	ldrsb.w	r0, [r9, #7]
    85e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    85ec:	2000037c 	.word	0x2000037c

000085f0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    85f0:	4801      	ldr	r0, [pc, #4]	; (85f8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    85f2:	7800      	ldrb	r0, [r0, #0]
    85f4:	4770      	bx	lr
    85f6:	0000      	.short	0x0000
    85f8:	200002f8 	.word	0x200002f8

000085fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    85fc:	b570      	push	{r4, r5, r6, lr}
    85fe:	4c17      	ldr	r4, [pc, #92]	; (865c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8600:	7860      	ldrb	r0, [r4, #1]
    8602:	2800      	cmp	r0, #0
    8604:	d123      	bne.n	864e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8606:	2001      	movs	r0, #1
    8608:	7060      	strb	r0, [r4, #1]
    860a:	f007 fed2 	bl	103b2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    860e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8612:	b928      	cbnz	r0, 8620 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8614:	f007 ff03 	bl	1041e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8618:	b910      	cbnz	r0, 8620 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    861a:	f007 ff0a 	bl	10432 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    861e:	b120      	cbz	r0, 862a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8620:	480f      	ldr	r0, [pc, #60]	; (8660 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8622:	6060      	str	r0, [r4, #4]
    8624:	70a5      	strb	r5, [r4, #2]
    8626:	2008      	movs	r0, #8
    8628:	e010      	b.n	864c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    862a:	f007 fe97 	bl	1035c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    862e:	b940      	cbnz	r0, 8642 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8630:	f007 fe9e 	bl	10370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8634:	b928      	cbnz	r0, 8642 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8636:	f007 feb2 	bl	1039e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    863a:	b910      	cbnz	r0, 8642 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    863c:	f007 fec3 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8640:	b130      	cbz	r0, 8650 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8642:	4807      	ldr	r0, [pc, #28]	; (8660 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8644:	3031      	adds	r0, #49	; 0x31
    8646:	6060      	str	r0, [r4, #4]
    8648:	70a5      	strb	r5, [r4, #2]
    864a:	2004      	movs	r0, #4
    864c:	70e0      	strb	r0, [r4, #3]
    864e:	bd70      	pop	{r4, r5, r6, pc}
    8650:	f240 113f 	movw	r1, #319	; 0x13f
    8654:	2074      	movs	r0, #116	; 0x74
    8656:	f003 fc3d 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    865a:	0000      	.short	0x0000
    865c:	200002f8 	.word	0x200002f8
    8660:	00010771 	.word	0x00010771

00008664 <mpsl_tx_power_radio_supported_power_adjust>:
    8664:	4a06      	ldr	r2, [pc, #24]	; (8680 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8666:	b500      	push	{lr}
    8668:	f992 2003 	ldrsb.w	r2, [r2, #3]
    866c:	4290      	cmp	r0, r2
    866e:	db01      	blt.n	8674 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8670:	4610      	mov	r0, r2
    8672:	bd00      	pop	{pc}
    8674:	f000 f808 	bl	8688 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8678:	4902      	ldr	r1, [pc, #8]	; (8684 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    867a:	5608      	ldrsb	r0, [r1, r0]
    867c:	bd00      	pop	{pc}
    867e:	0000      	.short	0x0000
    8680:	200002f8 	.word	0x200002f8
    8684:	00010763 	.word	0x00010763

00008688 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8688:	4602      	mov	r2, r0
    868a:	4813      	ldr	r0, [pc, #76]	; (86d8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    868c:	b510      	push	{r4, lr}
    868e:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8692:	429a      	cmp	r2, r3
    8694:	db01      	blt.n	869a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8696:	200d      	movs	r0, #13
    8698:	bd10      	pop	{r4, pc}
    869a:	f990 3002 	ldrsb.w	r3, [r0, #2]
    869e:	429a      	cmp	r2, r3
    86a0:	dc01      	bgt.n	86a6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    86a2:	2000      	movs	r0, #0
    86a4:	bd10      	pop	{r4, pc}
    86a6:	b101      	cbz	r1, 86aa <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    86a8:	2101      	movs	r1, #1
    86aa:	1ad4      	subs	r4, r2, r3
    86ac:	6843      	ldr	r3, [r0, #4]
    86ae:	5d18      	ldrb	r0, [r3, r4]
    86b0:	4c0a      	ldr	r4, [pc, #40]	; (86dc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    86b2:	5624      	ldrsb	r4, [r4, r0]
    86b4:	4294      	cmp	r4, r2
    86b6:	d0f5      	beq.n	86a4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86b8:	4c08      	ldr	r4, [pc, #32]	; (86dc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    86ba:	4408      	add	r0, r1
    86bc:	343f      	adds	r4, #63	; 0x3f
    86be:	b2c0      	uxtb	r0, r0
    86c0:	b2d2      	uxtb	r2, r2
    86c2:	42a3      	cmp	r3, r4
    86c4:	d1ee      	bne.n	86a4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86c6:	2900      	cmp	r1, #0
    86c8:	d0ec      	beq.n	86a4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86ca:	2a01      	cmp	r2, #1
    86cc:	d001      	beq.n	86d2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    86ce:	2a02      	cmp	r2, #2
    86d0:	d1e8      	bne.n	86a4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    86d2:	1c40      	adds	r0, r0, #1
    86d4:	b2c0      	uxtb	r0, r0
    86d6:	bd10      	pop	{r4, pc}
    86d8:	200002f8 	.word	0x200002f8
    86dc:	00010763 	.word	0x00010763

000086e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    86e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86e4:	461c      	mov	r4, r3
    86e6:	4690      	mov	r8, r2
    86e8:	460d      	mov	r5, r1
    86ea:	4606      	mov	r6, r0
    86ec:	f06f 0715 	mvn.w	r7, #21
    86f0:	2804      	cmp	r0, #4
    86f2:	d804      	bhi.n	86fe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    86f4:	b11c      	cbz	r4, 86fe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    86f6:	f007 fd37 	bl	10168 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    86fa:	42a8      	cmp	r0, r5
    86fc:	d802      	bhi.n	8704 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    86fe:	4638      	mov	r0, r7
    8700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8704:	4805      	ldr	r0, [pc, #20]	; (871c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8706:	4642      	mov	r2, r8
    8708:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    870c:	b118      	cbz	r0, 8716 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    870e:	5740      	ldrsb	r0, [r0, r5]
    8710:	4282      	cmp	r2, r0
    8712:	dd00      	ble.n	8716 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8714:	4602      	mov	r2, r0
    8716:	7022      	strb	r2, [r4, #0]
    8718:	2000      	movs	r0, #0
    871a:	e7f1      	b.n	8700 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    871c:	20001264 	.word	0x20001264

00008720 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8720:	4801      	ldr	r0, [pc, #4]	; (8728 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8722:	7800      	ldrb	r0, [r0, #0]
    8724:	4770      	bx	lr
    8726:	0000      	.short	0x0000
    8728:	20000300 	.word	0x20000300

0000872c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    872c:	4905      	ldr	r1, [pc, #20]	; (8744 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    872e:	780a      	ldrb	r2, [r1, #0]
    8730:	4290      	cmp	r0, r2
    8732:	d301      	bcc.n	8738 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8734:	2000      	movs	r0, #0
    8736:	4770      	bx	lr
    8738:	6849      	ldr	r1, [r1, #4]
    873a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    873e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8742:	4770      	bx	lr
    8744:	20000300 	.word	0x20000300

00008748 <MPSL_IRQ_RADIO_Handler>:
    8748:	490d      	ldr	r1, [pc, #52]	; (8780 <MPSL_IRQ_RADIO_Handler+0x38>)
    874a:	b510      	push	{r4, lr}
    874c:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8750:	2820      	cmp	r0, #32
    8752:	d00f      	beq.n	8774 <MPSL_IRQ_RADIO_Handler+0x2c>
    8754:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8758:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    875c:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8760:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8764:	6840      	ldr	r0, [r0, #4]
    8766:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    876a:	680a      	ldr	r2, [r1, #0]
    876c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8770:	2104      	movs	r1, #4
    8772:	4710      	bx	r2
    8774:	f640 017f 	movw	r1, #2175	; 0x87f
    8778:	2070      	movs	r0, #112	; 0x70
    877a:	f003 fbab 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    877e:	0000      	.short	0x0000
    8780:	20001008 	.word	0x20001008
    8784:	b570      	push	{r4, r5, r6, lr}
    8786:	4605      	mov	r5, r0
    8788:	2a20      	cmp	r2, #32
    878a:	d028      	beq.n	87de <MPSL_IRQ_RADIO_Handler+0x96>
    878c:	4819      	ldr	r0, [pc, #100]	; (87f4 <MPSL_IRQ_RADIO_Handler+0xac>)
    878e:	4c1a      	ldr	r4, [pc, #104]	; (87f8 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8790:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8798:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    879c:	4423      	add	r3, r4
    879e:	2920      	cmp	r1, #32
    87a0:	d022      	beq.n	87e8 <MPSL_IRQ_RADIO_Handler+0xa0>
    87a2:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    87a6:	7840      	ldrb	r0, [r0, #1]
    87a8:	784c      	ldrb	r4, [r1, #1]
    87aa:	7048      	strb	r0, [r1, #1]
    87ac:	4620      	mov	r0, r4
    87ae:	4601      	mov	r1, r0
    87b0:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    87b4:	4291      	cmp	r1, r2
    87b6:	7005      	strb	r5, [r0, #0]
    87b8:	7840      	ldrb	r0, [r0, #1]
    87ba:	d1f8      	bne.n	87ae <MPSL_IRQ_RADIO_Handler+0x66>
    87bc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    87c0:	2a20      	cmp	r2, #32
    87c2:	bf1a      	itte	ne
    87c4:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    87c8:	7054      	strbne	r4, [r2, #1]
    87ca:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    87ce:	2220      	movs	r2, #32
    87d0:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    87d4:	f88c 2001 	strb.w	r2, [ip, #1]
    87d8:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    87dc:	bd70      	pop	{r4, r5, r6, pc}
    87de:	f240 2186 	movw	r1, #646	; 0x286
    87e2:	2070      	movs	r0, #112	; 0x70
    87e4:	f003 fb76 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    87e8:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    87ec:	7840      	ldrb	r0, [r0, #1]
    87ee:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    87f2:	e7db      	b.n	87ac <MPSL_IRQ_RADIO_Handler+0x64>
    87f4:	20000f88 	.word	0x20000f88
    87f8:	20001008 	.word	0x20001008
    87fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8800:	b08f      	sub	sp, #60	; 0x3c
    8802:	4615      	mov	r5, r2
    8804:	461e      	mov	r6, r3
    8806:	460c      	mov	r4, r1
    8808:	f002 fab4 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    880c:	1828      	adds	r0, r5, r0
    880e:	f146 0100 	adc.w	r1, r6, #0
    8812:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8816:	e9d4 2300 	ldrd	r2, r3, [r4]
    881a:	1a80      	subs	r0, r0, r2
    881c:	eb71 0003 	sbcs.w	r0, r1, r3
    8820:	f0c0 80e5 	bcc.w	89ee <MPSL_IRQ_RADIO_Handler+0x2a6>
    8824:	a808      	add	r0, sp, #32
    8826:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    882a:	900a      	str	r0, [sp, #40]	; 0x28
    882c:	48bc      	ldr	r0, [pc, #752]	; (8b20 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    882e:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8832:	4408      	add	r0, r1
    8834:	9009      	str	r0, [sp, #36]	; 0x24
    8836:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    883a:	2020      	movs	r0, #32
    883c:	f10d 091c 	add.w	r9, sp, #28
    8840:	f88d 001c 	strb.w	r0, [sp, #28]
    8844:	2d20      	cmp	r5, #32
    8846:	d036      	beq.n	88b6 <MPSL_IRQ_RADIO_Handler+0x16e>
    8848:	48b6      	ldr	r0, [pc, #728]	; (8b24 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    884a:	2600      	movs	r6, #0
    884c:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    8850:	48b5      	ldr	r0, [pc, #724]	; (8b28 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8852:	e9d4 7300 	ldrd	r7, r3, [r4]
    8856:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    885a:	f850 8f08 	ldr.w	r8, [r0, #8]!
    885e:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    8862:	eb18 0101 	adds.w	r1, r8, r1
    8866:	4172      	adcs	r2, r6
    8868:	1a79      	subs	r1, r7, r1
    886a:	eb73 0102 	sbcs.w	r1, r3, r2
    886e:	d322      	bcc.n	88b6 <MPSL_IRQ_RADIO_Handler+0x16e>
    8870:	89e1      	ldrh	r1, [r4, #14]
    8872:	b1c9      	cbz	r1, 88a8 <MPSL_IRQ_RADIO_Handler+0x160>
    8874:	89c0      	ldrh	r0, [r0, #14]
    8876:	b9b8      	cbnz	r0, 88a8 <MPSL_IRQ_RADIO_Handler+0x160>
    8878:	f003 f96e 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    887c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8880:	bf08      	it	eq
    8882:	200d      	moveq	r0, #13
    8884:	d00b      	beq.n	889e <MPSL_IRQ_RADIO_Handler+0x156>
    8886:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    888a:	3856      	subs	r0, #86	; 0x56
    888c:	bf08      	it	eq
    888e:	201c      	moveq	r0, #28
    8890:	d005      	beq.n	889e <MPSL_IRQ_RADIO_Handler+0x156>
    8892:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8896:	389f      	subs	r0, #159	; 0x9f
    8898:	bf14      	ite	ne
    889a:	4630      	movne	r0, r6
    889c:	2032      	moveq	r0, #50	; 0x32
    889e:	1c40      	adds	r0, r0, #1
    88a0:	ebb7 0108 	subs.w	r1, r7, r8
    88a4:	4281      	cmp	r1, r0
    88a6:	db06      	blt.n	88b6 <MPSL_IRQ_RADIO_Handler+0x16e>
    88a8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    88ac:	f889 5000 	strb.w	r5, [r9]
    88b0:	7845      	ldrb	r5, [r0, #1]
    88b2:	2d20      	cmp	r5, #32
    88b4:	d1cc      	bne.n	8850 <MPSL_IRQ_RADIO_Handler+0x108>
    88b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    88b8:	f899 1000 	ldrb.w	r1, [r9]
    88bc:	2d20      	cmp	r5, #32
    88be:	7001      	strb	r1, [r0, #0]
    88c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    88c4:	f000 8128 	beq.w	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    88c8:	4896      	ldr	r0, [pc, #600]	; (8b24 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    88ca:	4f97      	ldr	r7, [pc, #604]	; (8b28 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    88cc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    88d0:	2600      	movs	r6, #0
    88d2:	9004      	str	r0, [sp, #16]
    88d4:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    88d8:	f10a 0008 	add.w	r0, sl, #8
    88dc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    88e0:	f8d4 b000 	ldr.w	fp, [r4]
    88e4:	e9d0 8300 	ldrd	r8, r3, [r0]
    88e8:	eb1b 0202 	adds.w	r2, fp, r2
    88ec:	4171      	adcs	r1, r6
    88ee:	ebb8 0202 	subs.w	r2, r8, r2
    88f2:	eb73 0101 	sbcs.w	r1, r3, r1
    88f6:	d320      	bcc.n	893a <MPSL_IRQ_RADIO_Handler+0x1f2>
    88f8:	89c0      	ldrh	r0, [r0, #14]
    88fa:	2800      	cmp	r0, #0
    88fc:	f000 810c 	beq.w	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8900:	89e0      	ldrh	r0, [r4, #14]
    8902:	2800      	cmp	r0, #0
    8904:	f040 8108 	bne.w	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8908:	f003 f926 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    890c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8910:	bf08      	it	eq
    8912:	200d      	moveq	r0, #13
    8914:	d00b      	beq.n	892e <MPSL_IRQ_RADIO_Handler+0x1e6>
    8916:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    891a:	3856      	subs	r0, #86	; 0x56
    891c:	bf08      	it	eq
    891e:	201c      	moveq	r0, #28
    8920:	d005      	beq.n	892e <MPSL_IRQ_RADIO_Handler+0x1e6>
    8922:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8926:	389f      	subs	r0, #159	; 0x9f
    8928:	bf14      	ite	ne
    892a:	4630      	movne	r0, r6
    892c:	2032      	moveq	r0, #50	; 0x32
    892e:	1c41      	adds	r1, r0, #1
    8930:	ebb8 000b 	subs.w	r0, r8, fp
    8934:	4288      	cmp	r0, r1
    8936:	f280 80ef 	bge.w	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    893a:	f889 5000 	strb.w	r5, [r9]
    893e:	f89a 0018 	ldrb.w	r0, [sl, #24]
    8942:	7c21      	ldrb	r1, [r4, #16]
    8944:	4281      	cmp	r1, r0
    8946:	d207      	bcs.n	8958 <MPSL_IRQ_RADIO_Handler+0x210>
    8948:	9804      	ldr	r0, [sp, #16]
    894a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    894e:	7845      	ldrb	r5, [r0, #1]
    8950:	2d20      	cmp	r5, #32
    8952:	d1bf      	bne.n	88d4 <MPSL_IRQ_RADIO_Handler+0x18c>
    8954:	f000 b8e0 	b.w	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8958:	f89d 0020 	ldrb.w	r0, [sp, #32]
    895c:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    8960:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    8964:	f8d0 9008 	ldr.w	r9, [r0, #8]
    8968:	8ac0      	ldrh	r0, [r0, #22]
    896a:	eb19 0502 	adds.w	r5, r9, r2
    896e:	eb41 0806 	adc.w	r8, r1, r6
    8972:	bbb0      	cbnz	r0, 89e2 <MPSL_IRQ_RADIO_Handler+0x29a>
    8974:	89e0      	ldrh	r0, [r4, #14]
    8976:	b3a0      	cbz	r0, 89e2 <MPSL_IRQ_RADIO_Handler+0x29a>
    8978:	f003 f8ee 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    897c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8980:	bf08      	it	eq
    8982:	200d      	moveq	r0, #13
    8984:	d00b      	beq.n	899e <MPSL_IRQ_RADIO_Handler+0x256>
    8986:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    898a:	3856      	subs	r0, #86	; 0x56
    898c:	bf08      	it	eq
    898e:	201c      	moveq	r0, #28
    8990:	d005      	beq.n	899e <MPSL_IRQ_RADIO_Handler+0x256>
    8992:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8996:	389f      	subs	r0, #159	; 0x9f
    8998:	bf14      	ite	ne
    899a:	4630      	movne	r0, r6
    899c:	2032      	moveq	r0, #50	; 0x32
    899e:	1c41      	adds	r1, r0, #1
    89a0:	ebb5 0009 	subs.w	r0, r5, r9
    89a4:	4288      	cmp	r0, r1
    89a6:	da1c      	bge.n	89e2 <MPSL_IRQ_RADIO_Handler+0x29a>
    89a8:	f003 f8d6 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    89ac:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    89b0:	bf08      	it	eq
    89b2:	200d      	moveq	r0, #13
    89b4:	d00b      	beq.n	89ce <MPSL_IRQ_RADIO_Handler+0x286>
    89b6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    89ba:	3856      	subs	r0, #86	; 0x56
    89bc:	bf08      	it	eq
    89be:	201c      	moveq	r0, #28
    89c0:	d005      	beq.n	89ce <MPSL_IRQ_RADIO_Handler+0x286>
    89c2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    89c6:	389f      	subs	r0, #159	; 0x9f
    89c8:	bf14      	ite	ne
    89ca:	4630      	movne	r0, r6
    89cc:	2032      	moveq	r0, #50	; 0x32
    89ce:	f89d 1020 	ldrb.w	r1, [sp, #32]
    89d2:	1c40      	adds	r0, r0, #1
    89d4:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    89d8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    89dc:	1815      	adds	r5, r2, r0
    89de:	eb43 0806 	adc.w	r8, r3, r6
    89e2:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    89e6:	1b49      	subs	r1, r1, r5
    89e8:	eb70 0008 	sbcs.w	r0, r0, r8
    89ec:	d203      	bcs.n	89f6 <MPSL_IRQ_RADIO_Handler+0x2ae>
    89ee:	b00f      	add	sp, #60	; 0x3c
    89f0:	2000      	movs	r0, #0
    89f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89f6:	e9c4 5800 	strd	r5, r8, [r4]
    89fa:	9818      	ldr	r0, [sp, #96]	; 0x60
    89fc:	900b      	str	r0, [sp, #44]	; 0x2c
    89fe:	a808      	add	r0, sp, #32
    8a00:	900a      	str	r0, [sp, #40]	; 0x28
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f10d 0a1c 	add.w	sl, sp, #28
    8a08:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8a0c:	2020      	movs	r0, #32
    8a0e:	f88d 001c 	strb.w	r0, [sp, #28]
    8a12:	2d20      	cmp	r5, #32
    8a14:	d037      	beq.n	8a86 <MPSL_IRQ_RADIO_Handler+0x33e>
    8a16:	4843      	ldr	r0, [pc, #268]	; (8b24 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8a1a:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8a1e:	bf00      	nop
    8a20:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    8a24:	e9d4 8300 	ldrd	r8, r3, [r4]
    8a28:	f850 9f08 	ldr.w	r9, [r0, #8]!
    8a2c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8a30:	eb19 0202 	adds.w	r2, r9, r2
    8a34:	4171      	adcs	r1, r6
    8a36:	ebb8 0202 	subs.w	r2, r8, r2
    8a3a:	eb73 0101 	sbcs.w	r1, r3, r1
    8a3e:	d322      	bcc.n	8a86 <MPSL_IRQ_RADIO_Handler+0x33e>
    8a40:	89e1      	ldrh	r1, [r4, #14]
    8a42:	b1c9      	cbz	r1, 8a78 <MPSL_IRQ_RADIO_Handler+0x330>
    8a44:	89c0      	ldrh	r0, [r0, #14]
    8a46:	b9b8      	cbnz	r0, 8a78 <MPSL_IRQ_RADIO_Handler+0x330>
    8a48:	f003 f886 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8a4c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8a50:	bf08      	it	eq
    8a52:	200d      	moveq	r0, #13
    8a54:	d00b      	beq.n	8a6e <MPSL_IRQ_RADIO_Handler+0x326>
    8a56:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8a5a:	3856      	subs	r0, #86	; 0x56
    8a5c:	bf08      	it	eq
    8a5e:	201c      	moveq	r0, #28
    8a60:	d005      	beq.n	8a6e <MPSL_IRQ_RADIO_Handler+0x326>
    8a62:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8a66:	389f      	subs	r0, #159	; 0x9f
    8a68:	bf14      	ite	ne
    8a6a:	4630      	movne	r0, r6
    8a6c:	2032      	moveq	r0, #50	; 0x32
    8a6e:	1c41      	adds	r1, r0, #1
    8a70:	ebb8 0009 	subs.w	r0, r8, r9
    8a74:	4288      	cmp	r0, r1
    8a76:	db06      	blt.n	8a86 <MPSL_IRQ_RADIO_Handler+0x33e>
    8a78:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8a7c:	f88a 5000 	strb.w	r5, [sl]
    8a80:	7845      	ldrb	r5, [r0, #1]
    8a82:	2d20      	cmp	r5, #32
    8a84:	d1cc      	bne.n	8a20 <MPSL_IRQ_RADIO_Handler+0x2d8>
    8a86:	980a      	ldr	r0, [sp, #40]	; 0x28
    8a88:	f89a 1000 	ldrb.w	r1, [sl]
    8a8c:	2d20      	cmp	r5, #32
    8a8e:	7001      	strb	r1, [r0, #0]
    8a90:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    8a94:	d040      	beq.n	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8a96:	4923      	ldr	r1, [pc, #140]	; (8b24 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8a98:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8a9c:	f8cd 000c 	str.w	r0, [sp, #12]
    8aa0:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    8aa4:	f109 0008 	add.w	r0, r9, #8
    8aa8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8aac:	f8d4 b000 	ldr.w	fp, [r4]
    8ab0:	e9d0 a300 	ldrd	sl, r3, [r0]
    8ab4:	eb1b 0202 	adds.w	r2, fp, r2
    8ab8:	4171      	adcs	r1, r6
    8aba:	ebba 0202 	subs.w	r2, sl, r2
    8abe:	eb73 0101 	sbcs.w	r1, r3, r1
    8ac2:	d31b      	bcc.n	8afc <MPSL_IRQ_RADIO_Handler+0x3b4>
    8ac4:	89c0      	ldrh	r0, [r0, #14]
    8ac6:	b338      	cbz	r0, 8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8ac8:	89e0      	ldrh	r0, [r4, #14]
    8aca:	bb28      	cbnz	r0, 8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8acc:	f003 f844 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ad0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ad4:	bf08      	it	eq
    8ad6:	200d      	moveq	r0, #13
    8ad8:	d00b      	beq.n	8af2 <MPSL_IRQ_RADIO_Handler+0x3aa>
    8ada:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ade:	3856      	subs	r0, #86	; 0x56
    8ae0:	bf08      	it	eq
    8ae2:	201c      	moveq	r0, #28
    8ae4:	d005      	beq.n	8af2 <MPSL_IRQ_RADIO_Handler+0x3aa>
    8ae6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8aea:	389f      	subs	r0, #159	; 0x9f
    8aec:	bf14      	ite	ne
    8aee:	4630      	movne	r0, r6
    8af0:	2032      	moveq	r0, #50	; 0x32
    8af2:	1c41      	adds	r1, r0, #1
    8af4:	ebba 000b 	subs.w	r0, sl, fp
    8af8:	4288      	cmp	r0, r1
    8afa:	da0d      	bge.n	8b18 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8afc:	f888 5000 	strb.w	r5, [r8]
    8b00:	f899 1018 	ldrb.w	r1, [r9, #24]
    8b04:	7c20      	ldrb	r0, [r4, #16]
    8b06:	4288      	cmp	r0, r1
    8b08:	f4bf af26 	bcs.w	8958 <MPSL_IRQ_RADIO_Handler+0x210>
    8b0c:	9803      	ldr	r0, [sp, #12]
    8b0e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8b12:	7845      	ldrb	r5, [r0, #1]
    8b14:	2d20      	cmp	r5, #32
    8b16:	d1c3      	bne.n	8aa0 <MPSL_IRQ_RADIO_Handler+0x358>
    8b18:	b00f      	add	sp, #60	; 0x3c
    8b1a:	2001      	movs	r0, #1
    8b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b20:	20001008 	.word	0x20001008
    8b24:	20000f88 	.word	0x20000f88
    8b28:	20000b88 	.word	0x20000b88
    8b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b30:	b083      	sub	sp, #12
    8b32:	4691      	mov	r9, r2
    8b34:	4604      	mov	r4, r0
    8b36:	460d      	mov	r5, r1
    8b38:	4698      	mov	r8, r3
    8b3a:	aa01      	add	r2, sp, #4
    8b3c:	4669      	mov	r1, sp
    8b3e:	4618      	mov	r0, r3
    8b40:	f002 f934 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    8b44:	f002 fe30 	bl	b7a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8b48:	f002 f914 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8b4c:	4607      	mov	r7, r0
    8b4e:	481e      	ldr	r0, [pc, #120]	; (8bc8 <MPSL_IRQ_RADIO_Handler+0x480>)
    8b50:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    8b54:	2600      	movs	r6, #0
    8b56:	2920      	cmp	r1, #32
    8b58:	d009      	beq.n	8b6e <MPSL_IRQ_RADIO_Handler+0x426>
    8b5a:	6882      	ldr	r2, [r0, #8]
    8b5c:	68c1      	ldr	r1, [r0, #12]
    8b5e:	6900      	ldr	r0, [r0, #16]
    8b60:	1d83      	adds	r3, r0, #6
    8b62:	f146 0000 	adc.w	r0, r6, #0
    8b66:	18d4      	adds	r4, r2, r3
    8b68:	eb41 0500 	adc.w	r5, r1, r0
    8b6c:	e026      	b.n	8bbc <MPSL_IRQ_RADIO_Handler+0x474>
    8b6e:	340a      	adds	r4, #10
    8b70:	f145 0500 	adc.w	r5, r5, #0
    8b74:	f1b8 0f00 	cmp.w	r8, #0
    8b78:	d017      	beq.n	8baa <MPSL_IRQ_RADIO_Handler+0x462>
    8b7a:	f003 f933 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8b7e:	b9a0      	cbnz	r0, 8baa <MPSL_IRQ_RADIO_Handler+0x462>
    8b80:	f002 ffea 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8b84:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8b88:	bf08      	it	eq
    8b8a:	200d      	moveq	r0, #13
    8b8c:	d00b      	beq.n	8ba6 <MPSL_IRQ_RADIO_Handler+0x45e>
    8b8e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8b92:	3856      	subs	r0, #86	; 0x56
    8b94:	bf08      	it	eq
    8b96:	201c      	moveq	r0, #28
    8b98:	d005      	beq.n	8ba6 <MPSL_IRQ_RADIO_Handler+0x45e>
    8b9a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8b9e:	389f      	subs	r0, #159	; 0x9f
    8ba0:	bf14      	ite	ne
    8ba2:	4630      	movne	r0, r6
    8ba4:	2032      	moveq	r0, #50	; 0x32
    8ba6:	1904      	adds	r4, r0, r4
    8ba8:	4175      	adcs	r5, r6
    8baa:	f1b9 0f00 	cmp.w	r9, #0
    8bae:	d105      	bne.n	8bbc <MPSL_IRQ_RADIO_Handler+0x474>
    8bb0:	9800      	ldr	r0, [sp, #0]
    8bb2:	4287      	cmp	r7, r0
    8bb4:	d902      	bls.n	8bbc <MPSL_IRQ_RADIO_Handler+0x474>
    8bb6:	1a38      	subs	r0, r7, r0
    8bb8:	1904      	adds	r4, r0, r4
    8bba:	4175      	adcs	r5, r6
    8bbc:	b003      	add	sp, #12
    8bbe:	4620      	mov	r0, r4
    8bc0:	4629      	mov	r1, r5
    8bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8bc6:	0000      	.short	0x0000
    8bc8:	20001008 	.word	0x20001008
    8bcc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bd0:	b081      	sub	sp, #4
    8bd2:	4605      	mov	r5, r0
    8bd4:	9802      	ldr	r0, [sp, #8]
    8bd6:	494a      	ldr	r1, [pc, #296]	; (8d00 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    8bd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8bdc:	4408      	add	r0, r1
    8bde:	2600      	movs	r6, #0
    8be0:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    8be4:	2020      	movs	r0, #32
    8be6:	4692      	mov	sl, r2
    8be8:	7010      	strb	r0, [r2, #0]
    8bea:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    8bee:	2c20      	cmp	r4, #32
    8bf0:	d036      	beq.n	8c60 <MPSL_IRQ_RADIO_Handler+0x518>
    8bf2:	9902      	ldr	r1, [sp, #8]
    8bf4:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    8bf8:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8bfc:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    8c00:	e9d5 7300 	ldrd	r7, r3, [r5]
    8c04:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8c08:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8c0c:	eb18 0202 	adds.w	r2, r8, r2
    8c10:	4171      	adcs	r1, r6
    8c12:	1aba      	subs	r2, r7, r2
    8c14:	eb73 0101 	sbcs.w	r1, r3, r1
    8c18:	d322      	bcc.n	8c60 <MPSL_IRQ_RADIO_Handler+0x518>
    8c1a:	89e9      	ldrh	r1, [r5, #14]
    8c1c:	b1c9      	cbz	r1, 8c52 <MPSL_IRQ_RADIO_Handler+0x50a>
    8c1e:	89c0      	ldrh	r0, [r0, #14]
    8c20:	b9b8      	cbnz	r0, 8c52 <MPSL_IRQ_RADIO_Handler+0x50a>
    8c22:	f002 ff99 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8c26:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8c2a:	bf08      	it	eq
    8c2c:	200d      	moveq	r0, #13
    8c2e:	d00b      	beq.n	8c48 <MPSL_IRQ_RADIO_Handler+0x500>
    8c30:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8c34:	3856      	subs	r0, #86	; 0x56
    8c36:	bf08      	it	eq
    8c38:	201c      	moveq	r0, #28
    8c3a:	d005      	beq.n	8c48 <MPSL_IRQ_RADIO_Handler+0x500>
    8c3c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8c40:	389f      	subs	r0, #159	; 0x9f
    8c42:	bf14      	ite	ne
    8c44:	4630      	movne	r0, r6
    8c46:	2032      	moveq	r0, #50	; 0x32
    8c48:	1c41      	adds	r1, r0, #1
    8c4a:	ebb7 0008 	subs.w	r0, r7, r8
    8c4e:	4288      	cmp	r0, r1
    8c50:	db06      	blt.n	8c60 <MPSL_IRQ_RADIO_Handler+0x518>
    8c52:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    8c56:	f88a 4000 	strb.w	r4, [sl]
    8c5a:	7844      	ldrb	r4, [r0, #1]
    8c5c:	2c20      	cmp	r4, #32
    8c5e:	d1cd      	bne.n	8bfc <MPSL_IRQ_RADIO_Handler+0x4b4>
    8c60:	9804      	ldr	r0, [sp, #16]
    8c62:	f89a 1000 	ldrb.w	r1, [sl]
    8c66:	2c20      	cmp	r4, #32
    8c68:	7001      	strb	r1, [r0, #0]
    8c6a:	9f04      	ldr	r7, [sp, #16]
    8c6c:	9802      	ldr	r0, [sp, #8]
    8c6e:	d042      	beq.n	8cf6 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8c70:	4924      	ldr	r1, [pc, #144]	; (8d04 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    8c72:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8c76:	9000      	str	r0, [sp, #0]
    8c78:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    8c7c:	f8d5 b000 	ldr.w	fp, [r5]
    8c80:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    8c84:	f108 0008 	add.w	r0, r8, #8
    8c88:	eb1b 0201 	adds.w	r2, fp, r1
    8c8c:	eb43 0106 	adc.w	r1, r3, r6
    8c90:	e9d0 a300 	ldrd	sl, r3, [r0]
    8c94:	ebba 0202 	subs.w	r2, sl, r2
    8c98:	eb73 0101 	sbcs.w	r1, r3, r1
    8c9c:	d31b      	bcc.n	8cd6 <MPSL_IRQ_RADIO_Handler+0x58e>
    8c9e:	89c0      	ldrh	r0, [r0, #14]
    8ca0:	b348      	cbz	r0, 8cf6 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8ca2:	89e8      	ldrh	r0, [r5, #14]
    8ca4:	bb38      	cbnz	r0, 8cf6 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8ca6:	f002 ff57 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8caa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8cae:	bf08      	it	eq
    8cb0:	200d      	moveq	r0, #13
    8cb2:	d00b      	beq.n	8ccc <MPSL_IRQ_RADIO_Handler+0x584>
    8cb4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8cb8:	3856      	subs	r0, #86	; 0x56
    8cba:	bf08      	it	eq
    8cbc:	201c      	moveq	r0, #28
    8cbe:	d005      	beq.n	8ccc <MPSL_IRQ_RADIO_Handler+0x584>
    8cc0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8cc4:	389f      	subs	r0, #159	; 0x9f
    8cc6:	bf14      	ite	ne
    8cc8:	4630      	movne	r0, r6
    8cca:	2032      	moveq	r0, #50	; 0x32
    8ccc:	1c41      	adds	r1, r0, #1
    8cce:	ebba 000b 	subs.w	r0, sl, fp
    8cd2:	4288      	cmp	r0, r1
    8cd4:	da0f      	bge.n	8cf6 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8cd6:	703c      	strb	r4, [r7, #0]
    8cd8:	f898 1018 	ldrb.w	r1, [r8, #24]
    8cdc:	7c28      	ldrb	r0, [r5, #16]
    8cde:	4288      	cmp	r0, r1
    8ce0:	d303      	bcc.n	8cea <MPSL_IRQ_RADIO_Handler+0x5a2>
    8ce2:	b005      	add	sp, #20
    8ce4:	2000      	movs	r0, #0
    8ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cea:	9800      	ldr	r0, [sp, #0]
    8cec:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    8cf0:	7844      	ldrb	r4, [r0, #1]
    8cf2:	2c20      	cmp	r4, #32
    8cf4:	d1c0      	bne.n	8c78 <MPSL_IRQ_RADIO_Handler+0x530>
    8cf6:	b005      	add	sp, #20
    8cf8:	2001      	movs	r0, #1
    8cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cfe:	0000      	.short	0x0000
    8d00:	20001008 	.word	0x20001008
    8d04:	20000f88 	.word	0x20000f88
    8d08:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8d0c:	b09c      	sub	sp, #112	; 0x70
    8d0e:	461f      	mov	r7, r3
    8d10:	f002 fa9c 	bl	b24c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    8d14:	4604      	mov	r4, r0
    8d16:	460d      	mov	r5, r1
    8d18:	f002 fd46 	bl	b7a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8d1c:	4606      	mov	r6, r0
    8d1e:	981e      	ldr	r0, [sp, #120]	; 0x78
    8d20:	2801      	cmp	r0, #1
    8d22:	bf18      	it	ne
    8d24:	2802      	cmpne	r0, #2
    8d26:	d005      	beq.n	8d34 <MPSL_IRQ_RADIO_Handler+0x5ec>
    8d28:	f640 1156 	movw	r1, #2390	; 0x956
    8d2c:	f04f 0070 	mov.w	r0, #112	; 0x70
    8d30:	f003 f8d0 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d34:	49fe      	ldr	r1, [pc, #1016]	; (9130 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    8d36:	2001      	movs	r0, #1
    8d38:	6008      	str	r0, [r1, #0]
    8d3a:	49fe      	ldr	r1, [pc, #1016]	; (9134 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    8d3c:	6889      	ldr	r1, [r1, #8]
    8d3e:	6008      	str	r0, [r1, #0]
    8d40:	2000      	movs	r0, #0
    8d42:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    8d46:	900c      	str	r0, [sp, #48]	; 0x30
    8d48:	1e40      	subs	r0, r0, #1
    8d4a:	900d      	str	r0, [sp, #52]	; 0x34
    8d4c:	48fa      	ldr	r0, [pc, #1000]	; (9138 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    8d4e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    8d52:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    8d56:	f100 0108 	add.w	r1, r0, #8
    8d5a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    8d5e:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    8d62:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    8d66:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    8d6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8d6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d70:	f007 fa33 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8d74:	4602      	mov	r2, r0
    8d76:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    8d7a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8d7e:	4bef      	ldr	r3, [pc, #956]	; (913c <MPSL_IRQ_RADIO_Handler+0x9f4>)
    8d80:	4440      	add	r0, r8
    8d82:	1c41      	adds	r1, r0, #1
    8d84:	1850      	adds	r0, r2, r1
    8d86:	429a      	cmp	r2, r3
    8d88:	d856      	bhi.n	8e38 <MPSL_IRQ_RADIO_Handler+0x6f0>
    8d8a:	4aed      	ldr	r2, [pc, #948]	; (9140 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    8d8c:	4291      	cmp	r1, r2
    8d8e:	dc5b      	bgt.n	8e48 <MPSL_IRQ_RADIO_Handler+0x700>
    8d90:	4252      	negs	r2, r2
    8d92:	4291      	cmp	r1, r2
    8d94:	db60      	blt.n	8e58 <MPSL_IRQ_RADIO_Handler+0x710>
    8d96:	1c59      	adds	r1, r3, #1
    8d98:	4281      	cmp	r1, r0
    8d9a:	bfdc      	itt	le
    8d9c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8da0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8da4:	dd05      	ble.n	8db2 <MPSL_IRQ_RADIO_Handler+0x66a>
    8da6:	2800      	cmp	r0, #0
    8da8:	bfbc      	itt	lt
    8daa:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8dae:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8db2:	9017      	str	r0, [sp, #92]	; 0x5c
    8db4:	48e3      	ldr	r0, [pc, #908]	; (9144 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    8db6:	f1b8 0f00 	cmp.w	r8, #0
    8dba:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    8dbe:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    8dc2:	bf14      	ite	ne
    8dc4:	f04f 0a01 	movne.w	sl, #1
    8dc8:	f04f 0a00 	moveq.w	sl, #0
    8dcc:	f003 f80a 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8dd0:	9019      	str	r0, [sp, #100]	; 0x64
    8dd2:	f1ba 0f00 	cmp.w	sl, #0
    8dd6:	d00b      	beq.n	8df0 <MPSL_IRQ_RADIO_Handler+0x6a8>
    8dd8:	49db      	ldr	r1, [pc, #876]	; (9148 <MPSL_IRQ_RADIO_Handler+0xa00>)
    8dda:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    8dde:	ea6f 0200 	mvn.w	r2, r0
    8de2:	ea72 0001 	orns	r0, r2, r1
    8de6:	bf02      	ittt	eq
    8de8:	9819      	ldreq	r0, [sp, #100]	; 0x64
    8dea:	2800      	cmpeq	r0, #0
    8dec:	2701      	moveq	r7, #1
    8dee:	d001      	beq.n	8df4 <MPSL_IRQ_RADIO_Handler+0x6ac>
    8df0:	f04f 0700 	mov.w	r7, #0
    8df4:	f002 feb0 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8df8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8dfc:	bf08      	it	eq
    8dfe:	200d      	moveq	r0, #13
    8e00:	d00b      	beq.n	8e1a <MPSL_IRQ_RADIO_Handler+0x6d2>
    8e02:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e06:	3856      	subs	r0, #86	; 0x56
    8e08:	bf08      	it	eq
    8e0a:	201c      	moveq	r0, #28
    8e0c:	d005      	beq.n	8e1a <MPSL_IRQ_RADIO_Handler+0x6d2>
    8e0e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e12:	389f      	subs	r0, #159	; 0x9f
    8e14:	bf14      	ite	ne
    8e16:	2000      	movne	r0, #0
    8e18:	2032      	moveq	r0, #50	; 0x32
    8e1a:	f04f 0900 	mov.w	r9, #0
    8e1e:	46cb      	mov	fp, r9
    8e20:	9016      	str	r0, [sp, #88]	; 0x58
    8e22:	4546      	cmp	r6, r8
    8e24:	d936      	bls.n	8e94 <MPSL_IRQ_RADIO_Handler+0x74c>
    8e26:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8e28:	43f3      	mvns	r3, r6
    8e2a:	f8df c310 	ldr.w	ip, [pc, #784]	; 913c <MPSL_IRQ_RADIO_Handler+0x9f4>
    8e2e:	18c8      	adds	r0, r1, r3
    8e30:	46e9      	mov	r9, sp
    8e32:	aa1a      	add	r2, sp, #104	; 0x68
    8e34:	4561      	cmp	r1, ip
    8e36:	d904      	bls.n	8e42 <MPSL_IRQ_RADIO_Handler+0x6fa>
    8e38:	f240 517f 	movw	r1, #1407	; 0x57f
    8e3c:	2070      	movs	r0, #112	; 0x70
    8e3e:	f003 f849 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e42:	49bf      	ldr	r1, [pc, #764]	; (9140 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    8e44:	428b      	cmp	r3, r1
    8e46:	dd04      	ble.n	8e52 <MPSL_IRQ_RADIO_Handler+0x70a>
    8e48:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    8e4c:	2070      	movs	r0, #112	; 0x70
    8e4e:	f003 f841 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e52:	49be      	ldr	r1, [pc, #760]	; (914c <MPSL_IRQ_RADIO_Handler+0xa04>)
    8e54:	428b      	cmp	r3, r1
    8e56:	da04      	bge.n	8e62 <MPSL_IRQ_RADIO_Handler+0x71a>
    8e58:	f240 5181 	movw	r1, #1409	; 0x581
    8e5c:	2070      	movs	r0, #112	; 0x70
    8e5e:	f003 f839 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e62:	49bb      	ldr	r1, [pc, #748]	; (9150 <MPSL_IRQ_RADIO_Handler+0xa08>)
    8e64:	4281      	cmp	r1, r0
    8e66:	bfdc      	itt	le
    8e68:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8e6c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8e70:	dd05      	ble.n	8e7e <MPSL_IRQ_RADIO_Handler+0x736>
    8e72:	2800      	cmp	r0, #0
    8e74:	bfbc      	itt	lt
    8e76:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8e7a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8e7e:	4649      	mov	r1, r9
    8e80:	f001 ff94 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    8e84:	9800      	ldr	r0, [sp, #0]
    8e86:	990e      	ldr	r1, [sp, #56]	; 0x38
    8e88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8e8c:	9000      	str	r0, [sp, #0]
    8e8e:	1a08      	subs	r0, r1, r0
    8e90:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    8e94:	2f00      	cmp	r7, #0
    8e96:	bf18      	it	ne
    8e98:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    8e9c:	d105      	bne.n	8eaa <MPSL_IRQ_RADIO_Handler+0x762>
    8e9e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8ea2:	2800      	cmp	r0, #0
    8ea4:	bf18      	it	ne
    8ea6:	f04f 0b02 	movne.w	fp, #2
    8eaa:	43e0      	mvns	r0, r4
    8eac:	ea70 0005 	orns	r0, r0, r5
    8eb0:	d022      	beq.n	8ef8 <MPSL_IRQ_RADIO_Handler+0x7b0>
    8eb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    8eb6:	1a22      	subs	r2, r4, r0
    8eb8:	eb75 0201 	sbcs.w	r2, r5, r1
    8ebc:	d20c      	bcs.n	8ed8 <MPSL_IRQ_RADIO_Handler+0x790>
    8ebe:	1b02      	subs	r2, r0, r4
    8ec0:	eb61 0105 	sbc.w	r1, r1, r5
    8ec4:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    8ec8:	f171 0100 	sbcs.w	r1, r1, #0
    8ecc:	d311      	bcc.n	8ef2 <MPSL_IRQ_RADIO_Handler+0x7aa>
    8ece:	f640 1195 	movw	r1, #2453	; 0x995
    8ed2:	2070      	movs	r0, #112	; 0x70
    8ed4:	f002 fffe 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8ed8:	1a22      	subs	r2, r4, r0
    8eda:	eb65 0101 	sbc.w	r1, r5, r1
    8ede:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    8ee2:	f171 0100 	sbcs.w	r1, r1, #0
    8ee6:	d304      	bcc.n	8ef2 <MPSL_IRQ_RADIO_Handler+0x7aa>
    8ee8:	f640 1199 	movw	r1, #2457	; 0x999
    8eec:	2070      	movs	r0, #112	; 0x70
    8eee:	f002 fff1 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8ef2:	1b00      	subs	r0, r0, r4
    8ef4:	2801      	cmp	r0, #1
    8ef6:	da03      	bge.n	8f00 <MPSL_IRQ_RADIO_Handler+0x7b8>
    8ef8:	981c      	ldr	r0, [sp, #112]	; 0x70
    8efa:	901a      	str	r0, [sp, #104]	; 0x68
    8efc:	2003      	movs	r0, #3
    8efe:	e00d      	b.n	8f1c <MPSL_IRQ_RADIO_Handler+0x7d4>
    8f00:	b157      	cbz	r7, 8f18 <MPSL_IRQ_RADIO_Handler+0x7d0>
    8f02:	4891      	ldr	r0, [pc, #580]	; (9148 <MPSL_IRQ_RADIO_Handler+0xa00>)
    8f04:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8f08:	b130      	cbz	r0, 8f18 <MPSL_IRQ_RADIO_Handler+0x7d0>
    8f0a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8f0e:	f110 0b00 	adds.w	fp, r0, #0
    8f12:	bf18      	it	ne
    8f14:	f04f 0b02 	movne.w	fp, #2
    8f18:	2000      	movs	r0, #0
    8f1a:	941a      	str	r4, [sp, #104]	; 0x68
    8f1c:	4483      	add	fp, r0
    8f1e:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    8f22:	ebb0 0009 	subs.w	r0, r0, r9
    8f26:	f162 0100 	sbc.w	r1, r2, #0
    8f2a:	1e42      	subs	r2, r0, #1
    8f2c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f2e:	f141 3eff 	adc.w	lr, r1, #4294967295
    8f32:	1ad3      	subs	r3, r2, r3
    8f34:	455b      	cmp	r3, fp
    8f36:	db08      	blt.n	8f4a <MPSL_IRQ_RADIO_Handler+0x802>
    8f38:	f1b9 0f00 	cmp.w	r9, #0
    8f3c:	d032      	beq.n	8fa4 <MPSL_IRQ_RADIO_Handler+0x85c>
    8f3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f40:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    8f44:	444b      	add	r3, r9
    8f46:	9310      	str	r3, [sp, #64]	; 0x40
    8f48:	e02c      	b.n	8fa4 <MPSL_IRQ_RADIO_Handler+0x85c>
    8f4a:	f1b9 0f00 	cmp.w	r9, #0
    8f4e:	d005      	beq.n	8f5c <MPSL_IRQ_RADIO_Handler+0x814>
    8f50:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    8f54:	b920      	cbnz	r0, 8f60 <MPSL_IRQ_RADIO_Handler+0x818>
    8f56:	f002 fc1d 	bl	b794 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    8f5a:	b108      	cbz	r0, 8f60 <MPSL_IRQ_RADIO_Handler+0x818>
    8f5c:	b9af      	cbnz	r7, 8f8a <MPSL_IRQ_RADIO_Handler+0x842>
    8f5e:	e00c      	b.n	8f7a <MPSL_IRQ_RADIO_Handler+0x832>
    8f60:	b92f      	cbnz	r7, 8f6e <MPSL_IRQ_RADIO_Handler+0x826>
    8f62:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8f66:	2800      	cmp	r0, #0
    8f68:	bf18      	it	ne
    8f6a:	f1ab 0b02 	subne.w	fp, fp, #2
    8f6e:	f04f 0900 	mov.w	r9, #0
    8f72:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    8f76:	464e      	mov	r6, r9
    8f78:	e007      	b.n	8f8a <MPSL_IRQ_RADIO_Handler+0x842>
    8f7a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    8f7e:	b120      	cbz	r0, 8f8a <MPSL_IRQ_RADIO_Handler+0x842>
    8f80:	2000      	movs	r0, #0
    8f82:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    8f86:	f1ab 0b02 	sub.w	fp, fp, #2
    8f8a:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    8f8e:	ebb0 0009 	subs.w	r0, r0, r9
    8f92:	f162 0100 	sbc.w	r1, r2, #0
    8f96:	1e42      	subs	r2, r0, #1
    8f98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f9a:	f141 3eff 	adc.w	lr, r1, #4294967295
    8f9e:	1ad3      	subs	r3, r2, r3
    8fa0:	455b      	cmp	r3, fp
    8fa2:	db7d      	blt.n	90a0 <MPSL_IRQ_RADIO_Handler+0x958>
    8fa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8fa6:	b99b      	cbnz	r3, 8fd0 <MPSL_IRQ_RADIO_Handler+0x888>
    8fa8:	4b67      	ldr	r3, [pc, #412]	; (9148 <MPSL_IRQ_RADIO_Handler+0xa00>)
    8faa:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    8fae:	ea6f 090c 	mvn.w	r9, ip
    8fb2:	ea79 0903 	orns	r9, r9, r3
    8fb6:	d00b      	beq.n	8fd0 <MPSL_IRQ_RADIO_Handler+0x888>
    8fb8:	ebb0 0c0c 	subs.w	ip, r0, ip
    8fbc:	9816      	ldr	r0, [sp, #88]	; 0x58
    8fbe:	eb61 0303 	sbc.w	r3, r1, r3
    8fc2:	ebbc 0000 	subs.w	r0, ip, r0
    8fc6:	f173 0000 	sbcs.w	r0, r3, #0
    8fca:	bf38      	it	cc
    8fcc:	2000      	movcc	r0, #0
    8fce:	d300      	bcc.n	8fd2 <MPSL_IRQ_RADIO_Handler+0x88a>
    8fd0:	2001      	movs	r0, #1
    8fd2:	ea3a 0000 	bics.w	r0, sl, r0
    8fd6:	d163      	bne.n	90a0 <MPSL_IRQ_RADIO_Handler+0x958>
    8fd8:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    8fdc:	e9cd 0107 	strd	r0, r1, [sp, #28]
    8fe0:	981e      	ldr	r0, [sp, #120]	; 0x78
    8fe2:	4691      	mov	r9, r2
    8fe4:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    8fe8:	46f3      	mov	fp, lr
    8fea:	2700      	movs	r7, #0
    8fec:	f002 fdb4 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ff0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ff4:	bf08      	it	eq
    8ff6:	200d      	moveq	r0, #13
    8ff8:	d00b      	beq.n	9012 <MPSL_IRQ_RADIO_Handler+0x8ca>
    8ffa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ffe:	3856      	subs	r0, #86	; 0x56
    9000:	bf08      	it	eq
    9002:	201c      	moveq	r0, #28
    9004:	d005      	beq.n	9012 <MPSL_IRQ_RADIO_Handler+0x8ca>
    9006:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    900a:	389f      	subs	r0, #159	; 0x9f
    900c:	bf14      	ite	ne
    900e:	4638      	movne	r0, r7
    9010:	2032      	moveq	r0, #50	; 0x32
    9012:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    9016:	300b      	adds	r0, #11
    9018:	ebb9 0202 	subs.w	r2, r9, r2
    901c:	eb6b 0303 	sbc.w	r3, fp, r3
    9020:	1a10      	subs	r0, r2, r0
    9022:	f173 0000 	sbcs.w	r0, r3, #0
    9026:	d22a      	bcs.n	907e <MPSL_IRQ_RADIO_Handler+0x936>
    9028:	9819      	ldr	r0, [sp, #100]	; 0x64
    902a:	2801      	cmp	r0, #1
    902c:	d002      	beq.n	9034 <MPSL_IRQ_RADIO_Handler+0x8ec>
    902e:	9818      	ldr	r0, [sp, #96]	; 0x60
    9030:	b148      	cbz	r0, 9046 <MPSL_IRQ_RADIO_Handler+0x8fe>
    9032:	e017      	b.n	9064 <MPSL_IRQ_RADIO_Handler+0x91c>
    9034:	43e0      	mvns	r0, r4
    9036:	ea70 0005 	orns	r0, r0, r5
    903a:	d127      	bne.n	908c <MPSL_IRQ_RADIO_Handler+0x944>
    903c:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9040:	2070      	movs	r0, #112	; 0x70
    9042:	f002 ff47 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9046:	43e0      	mvns	r0, r4
    9048:	ea70 0005 	orns	r0, r0, r5
    904c:	d00a      	beq.n	9064 <MPSL_IRQ_RADIO_Handler+0x91c>
    904e:	d01d      	beq.n	908c <MPSL_IRQ_RADIO_Handler+0x944>
    9050:	ebb4 0009 	subs.w	r0, r4, r9
    9054:	eb65 010b 	sbc.w	r1, r5, fp
    9058:	2300      	movs	r3, #0
    905a:	f1d0 0204 	rsbs	r2, r0, #4
    905e:	eb73 0201 	sbcs.w	r2, r3, r1
    9062:	da06      	bge.n	9072 <MPSL_IRQ_RADIO_Handler+0x92a>
    9064:	464c      	mov	r4, r9
    9066:	465d      	mov	r5, fp
    9068:	4620      	mov	r0, r4
    906a:	4629      	mov	r1, r5
    906c:	f001 ffce 	bl	b00c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9070:	e00c      	b.n	908c <MPSL_IRQ_RADIO_Handler+0x944>
    9072:	2200      	movs	r2, #0
    9074:	1a10      	subs	r0, r2, r0
    9076:	eb72 0001 	sbcs.w	r0, r2, r1
    907a:	db11      	blt.n	90a0 <MPSL_IRQ_RADIO_Handler+0x958>
    907c:	e006      	b.n	908c <MPSL_IRQ_RADIO_Handler+0x944>
    907e:	464c      	mov	r4, r9
    9080:	465d      	mov	r5, fp
    9082:	4620      	mov	r0, r4
    9084:	4629      	mov	r1, r5
    9086:	f001 ffc1 	bl	b00c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    908a:	4657      	mov	r7, sl
    908c:	43e1      	mvns	r1, r4
    908e:	ea71 0005 	orns	r0, r1, r5
    9092:	d071      	beq.n	9178 <MPSL_IRQ_RADIO_Handler+0xa30>
    9094:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    9098:	f04f 0b00 	mov.w	fp, #0
    909c:	990e      	ldr	r1, [sp, #56]	; 0x38
    909e:	e000      	b.n	90a2 <MPSL_IRQ_RADIO_Handler+0x95a>
    90a0:	e06f      	b.n	9182 <MPSL_IRQ_RADIO_Handler+0xa3a>
    90a2:	1a0b      	subs	r3, r1, r0
    90a4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    90a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    90ac:	eb11 010c 	adds.w	r1, r1, ip
    90b0:	1a08      	subs	r0, r1, r0
    90b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    90b6:	2b01      	cmp	r3, #1
    90b8:	d363      	bcc.n	9182 <MPSL_IRQ_RADIO_Handler+0xa3a>
    90ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    90be:	bf98      	it	ls
    90c0:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    90c4:	d85d      	bhi.n	9182 <MPSL_IRQ_RADIO_Handler+0xa3a>
    90c6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    90ca:	f007 f886 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    90ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
    90d0:	4a1b      	ldr	r2, [pc, #108]	; (9140 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    90d2:	1a0d      	subs	r5, r1, r0
    90d4:	1aaa      	subs	r2, r5, r2
    90d6:	f17b 0200 	sbcs.w	r2, fp, #0
    90da:	d316      	bcc.n	910a <MPSL_IRQ_RADIO_Handler+0x9c2>
    90dc:	4b18      	ldr	r3, [pc, #96]	; (9140 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    90de:	1a42      	subs	r2, r0, r1
    90e0:	1ad3      	subs	r3, r2, r3
    90e2:	f17b 0300 	sbcs.w	r3, fp, #0
    90e6:	d310      	bcc.n	910a <MPSL_IRQ_RADIO_Handler+0x9c2>
    90e8:	4b14      	ldr	r3, [pc, #80]	; (913c <MPSL_IRQ_RADIO_Handler+0x9f4>)
    90ea:	42ab      	cmp	r3, r5
    90ec:	bf3e      	ittt	cc
    90ee:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    90f2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    90f6:	1845      	addcc	r5, r0, r1
    90f8:	d307      	bcc.n	910a <MPSL_IRQ_RADIO_Handler+0x9c2>
    90fa:	4293      	cmp	r3, r2
    90fc:	d245      	bcs.n	918a <MPSL_IRQ_RADIO_Handler+0xa42>
    90fe:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9102:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9106:	4408      	add	r0, r1
    9108:	4245      	negs	r5, r0
    910a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 9148 <MPSL_IRQ_RADIO_Handler+0xa00>
    910e:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    9112:	b378      	cbz	r0, 9174 <MPSL_IRQ_RADIO_Handler+0xa2c>
    9114:	981e      	ldr	r0, [sp, #120]	; 0x78
    9116:	2801      	cmp	r0, #1
    9118:	d005      	beq.n	9126 <MPSL_IRQ_RADIO_Handler+0x9de>
    911a:	2002      	movs	r0, #2
    911c:	f002 fa02 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9120:	2001      	movs	r0, #1
    9122:	f002 f9ff 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9126:	45b0      	cmp	r8, r6
    9128:	d240      	bcs.n	91ac <MPSL_IRQ_RADIO_Handler+0xa64>
    912a:	eba5 0106 	sub.w	r1, r5, r6
    912e:	e011      	b.n	9154 <MPSL_IRQ_RADIO_Handler+0xa0c>
    9130:	40000508 	.word	0x40000508
    9134:	20000308 	.word	0x20000308
    9138:	20000b88 	.word	0x20000b88
    913c:	1e847fff 	.word	0x1e847fff
    9140:	0f424000 	.word	0x0f424000
    9144:	20000f88 	.word	0x20000f88
    9148:	20001008 	.word	0x20001008
    914c:	f0bdc000 	.word	0xf0bdc000
    9150:	1e848000 	.word	0x1e848000
    9154:	f04f 0002 	mov.w	r0, #2
    9158:	f002 f92a 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    915c:	b398      	cbz	r0, 91c6 <MPSL_IRQ_RADIO_Handler+0xa7e>
    915e:	f1b8 0f00 	cmp.w	r8, #0
    9162:	bf1c      	itt	ne
    9164:	eba5 0108 	subne.w	r1, r5, r8
    9168:	2001      	movne	r0, #1
    916a:	d035      	beq.n	91d8 <MPSL_IRQ_RADIO_Handler+0xa90>
    916c:	f002 f920 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9170:	b348      	cbz	r0, 91c6 <MPSL_IRQ_RADIO_Handler+0xa7e>
    9172:	e031      	b.n	91d8 <MPSL_IRQ_RADIO_Handler+0xa90>
    9174:	e00e      	b.n	9194 <MPSL_IRQ_RADIO_Handler+0xa4c>
    9176:	e7ff      	b.n	9178 <MPSL_IRQ_RADIO_Handler+0xa30>
    9178:	f640 2103 	movw	r1, #2563	; 0xa03
    917c:	2070      	movs	r0, #112	; 0x70
    917e:	f002 fea9 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9182:	b020      	add	sp, #128	; 0x80
    9184:	2000      	movs	r0, #0
    9186:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    918a:	f640 21d7 	movw	r1, #2775	; 0xad7
    918e:	2070      	movs	r0, #112	; 0x70
    9190:	f002 fea0 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9194:	45b0      	cmp	r8, r6
    9196:	bf34      	ite	cc
    9198:	4630      	movcc	r0, r6
    919a:	4640      	movcs	r0, r8
    919c:	301e      	adds	r0, #30
    919e:	42a8      	cmp	r0, r5
    91a0:	dbb8      	blt.n	9114 <MPSL_IRQ_RADIO_Handler+0x9cc>
    91a2:	f640 2117 	movw	r1, #2583	; 0xa17
    91a6:	2070      	movs	r0, #112	; 0x70
    91a8:	f002 fe94 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91ac:	d90c      	bls.n	91c8 <MPSL_IRQ_RADIO_Handler+0xa80>
    91ae:	eba5 0108 	sub.w	r1, r5, r8
    91b2:	2001      	movs	r0, #1
    91b4:	f002 f8fc 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    91b8:	b128      	cbz	r0, 91c6 <MPSL_IRQ_RADIO_Handler+0xa7e>
    91ba:	2e00      	cmp	r6, #0
    91bc:	bf1c      	itt	ne
    91be:	1ba9      	subne	r1, r5, r6
    91c0:	2002      	movne	r0, #2
    91c2:	d009      	beq.n	91d8 <MPSL_IRQ_RADIO_Handler+0xa90>
    91c4:	e7d2      	b.n	916c <MPSL_IRQ_RADIO_Handler+0xa24>
    91c6:	e034      	b.n	9232 <MPSL_IRQ_RADIO_Handler+0xaea>
    91c8:	ea56 0008 	orrs.w	r0, r6, r8
    91cc:	d004      	beq.n	91d8 <MPSL_IRQ_RADIO_Handler+0xa90>
    91ce:	f640 113a 	movw	r1, #2362	; 0x93a
    91d2:	2070      	movs	r0, #112	; 0x70
    91d4:	f002 fe7e 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91d8:	4629      	mov	r1, r5
    91da:	2000      	movs	r0, #0
    91dc:	f002 f8e8 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    91e0:	b338      	cbz	r0, 9232 <MPSL_IRQ_RADIO_Handler+0xaea>
    91e2:	2601      	movs	r6, #1
    91e4:	f1ba 0f00 	cmp.w	sl, #0
    91e8:	bf04      	itt	eq
    91ea:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    91ee:	2800      	cmpeq	r0, #0
    91f0:	d000      	beq.n	91f4 <MPSL_IRQ_RADIO_Handler+0xaac>
    91f2:	b347      	cbz	r7, 9246 <MPSL_IRQ_RADIO_Handler+0xafe>
    91f4:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    91f8:	ea6f 0101 	mvn.w	r1, r1
    91fc:	ea71 0000 	orns	r0, r1, r0
    9200:	d006      	beq.n	9210 <MPSL_IRQ_RADIO_Handler+0xac8>
    9202:	f002 fcaf 	bl	bb64 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9206:	f04f 30ff 	mov.w	r0, #4294967295
    920a:	4601      	mov	r1, r0
    920c:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    9210:	b1ff      	cbz	r7, 9252 <MPSL_IRQ_RADIO_Handler+0xb0a>
    9212:	9816      	ldr	r0, [sp, #88]	; 0x58
    9214:	1a20      	subs	r0, r4, r0
    9216:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    921a:	f04f 0005 	mov.w	r0, #5
    921e:	f002 f8c7 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9222:	b370      	cbz	r0, 9282 <MPSL_IRQ_RADIO_Handler+0xb3a>
    9224:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    9228:	2800      	cmp	r0, #0
    922a:	bf08      	it	eq
    922c:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    9230:	e017      	b.n	9262 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9232:	2002      	movs	r0, #2
    9234:	f002 f976 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9238:	2001      	movs	r0, #1
    923a:	f002 f973 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    923e:	b020      	add	sp, #128	; 0x80
    9240:	2000      	movs	r0, #0
    9242:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9246:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    924a:	43c0      	mvns	r0, r0
    924c:	ea70 0001 	orns	r0, r0, r1
    9250:	d012      	beq.n	9278 <MPSL_IRQ_RADIO_Handler+0xb30>
    9252:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    9256:	b120      	cbz	r0, 9262 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9258:	2005      	movs	r0, #5
    925a:	f002 f963 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    925e:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    9262:	eba5 0008 	sub.w	r0, r5, r8
    9266:	f1a0 0119 	sub.w	r1, r0, #25
    926a:	2900      	cmp	r1, #0
    926c:	dc0f      	bgt.n	928e <MPSL_IRQ_RADIO_Handler+0xb46>
    926e:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    9272:	2070      	movs	r0, #112	; 0x70
    9274:	f002 fe2e 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9278:	f002 fc90 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    927c:	f002 f876 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9280:	e7c4      	b.n	920c <MPSL_IRQ_RADIO_Handler+0xac4>
    9282:	e7ff      	b.n	9284 <MPSL_IRQ_RADIO_Handler+0xb3c>
    9284:	f240 21e6 	movw	r1, #742	; 0x2e6
    9288:	2070      	movs	r0, #112	; 0x70
    928a:	f002 fe23 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    928e:	2003      	movs	r0, #3
    9290:	f002 f88e 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9294:	b338      	cbz	r0, 92e6 <MPSL_IRQ_RADIO_Handler+0xb9e>
    9296:	4816      	ldr	r0, [pc, #88]	; (92f0 <MPSL_IRQ_RADIO_Handler+0xba8>)
    9298:	6880      	ldr	r0, [r0, #8]
    929a:	f8c0 b000 	str.w	fp, [r0]
    929e:	4815      	ldr	r0, [pc, #84]	; (92f4 <MPSL_IRQ_RADIO_Handler+0xbac>)
    92a0:	f8c0 b000 	str.w	fp, [r0]
    92a4:	ac0c      	add	r4, sp, #48	; 0x30
    92a6:	4814      	ldr	r0, [pc, #80]	; (92f8 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    92a8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    92ac:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    92b0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    92b4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    92b8:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    92bc:	ac10      	add	r4, sp, #64	; 0x40
    92be:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    92c2:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    92c6:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    92ca:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    92ce:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    92d2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    92d6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    92da:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    92de:	b020      	add	sp, #128	; 0x80
    92e0:	2001      	movs	r0, #1
    92e2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    92e6:	f640 2148 	movw	r1, #2632	; 0xa48
    92ea:	2070      	movs	r0, #112	; 0x70
    92ec:	f002 fdf2 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    92f0:	20000308 	.word	0x20000308
    92f4:	40000508 	.word	0x40000508
    92f8:	20000f88 	.word	0x20000f88
    92fc:	b570      	push	{r4, r5, r6, lr}
    92fe:	4d1d      	ldr	r5, [pc, #116]	; (9374 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    9300:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9304:	2820      	cmp	r0, #32
    9306:	bf18      	it	ne
    9308:	bd70      	popne	{r4, r5, r6, pc}
    930a:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    930e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9312:	4428      	add	r0, r5
    9314:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9318:	2c20      	cmp	r4, #32
    931a:	d026      	beq.n	936a <MPSL_IRQ_RADIO_Handler+0xc22>
    931c:	4b16      	ldr	r3, [pc, #88]	; (9378 <MPSL_IRQ_RADIO_Handler+0xc30>)
    931e:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9322:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9326:	7849      	ldrb	r1, [r1, #1]
    9328:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    932c:	20ff      	movs	r0, #255	; 0xff
    932e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9332:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    9336:	4621      	mov	r1, r4
    9338:	2002      	movs	r0, #2
    933a:	f000 f88b 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    933e:	2000      	movs	r0, #0
    9340:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9344:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    9348:	480c      	ldr	r0, [pc, #48]	; (937c <MPSL_IRQ_RADIO_Handler+0xc34>)
    934a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    934e:	7e00      	ldrb	r0, [r0, #24]
    9350:	2800      	cmp	r0, #0
    9352:	bf08      	it	eq
    9354:	f002 ff26 	bleq	c1a4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9358:	2000      	movs	r0, #0
    935a:	4909      	ldr	r1, [pc, #36]	; (9380 <MPSL_IRQ_RADIO_Handler+0xc38>)
    935c:	6849      	ldr	r1, [r1, #4]
    935e:	2900      	cmp	r1, #0
    9360:	bf08      	it	eq
    9362:	bd70      	popeq	{r4, r5, r6, pc}
    9364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9368:	4708      	bx	r1
    936a:	f240 311d 	movw	r1, #797	; 0x31d
    936e:	2070      	movs	r0, #112	; 0x70
    9370:	f002 fdb0 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9374:	20001008 	.word	0x20001008
    9378:	20000f88 	.word	0x20000f88
    937c:	20000b88 	.word	0x20000b88
    9380:	20000308 	.word	0x20000308
    9384:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9388:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9444 <MPSL_IRQ_RADIO_Handler+0xcfc>
    938c:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9390:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9394:	4440      	add	r0, r8
    9396:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    939a:	2c20      	cmp	r4, #32
    939c:	bf08      	it	eq
    939e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    93a2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9448 <MPSL_IRQ_RADIO_Handler+0xd00>
    93a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 944c <MPSL_IRQ_RADIO_Handler+0xd04>
    93aa:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    93ae:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    93b2:	2607      	movs	r6, #7
    93b4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    93b8:	2801      	cmp	r0, #1
    93ba:	d00e      	beq.n	93da <MPSL_IRQ_RADIO_Handler+0xc92>
    93bc:	2804      	cmp	r0, #4
    93be:	bf08      	it	eq
    93c0:	2602      	moveq	r6, #2
    93c2:	d00a      	beq.n	93da <MPSL_IRQ_RADIO_Handler+0xc92>
    93c4:	2805      	cmp	r0, #5
    93c6:	bf0c      	ite	eq
    93c8:	2603      	moveq	r6, #3
    93ca:	2806      	cmpne	r0, #6
    93cc:	d005      	beq.n	93da <MPSL_IRQ_RADIO_Handler+0xc92>
    93ce:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    93d2:	f04f 0070 	mov.w	r0, #112	; 0x70
    93d6:	f002 fd7d 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93da:	f1bb 0f00 	cmp.w	fp, #0
    93de:	bf18      	it	ne
    93e0:	f3af 8000 	nopne.w
    93e4:	f3ef 8010 	mrs	r0, PRIMASK
    93e8:	b672      	cpsid	i
    93ea:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    93ee:	784a      	ldrb	r2, [r1, #1]
    93f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    93f4:	4441      	add	r1, r8
    93f6:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    93fa:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    93fe:	42a2      	cmp	r2, r4
    9400:	bf04      	itt	eq
    9402:	2220      	moveq	r2, #32
    9404:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    9408:	b1a8      	cbz	r0, 9436 <MPSL_IRQ_RADIO_Handler+0xcee>
    940a:	462a      	mov	r2, r5
    940c:	4621      	mov	r1, r4
    940e:	2001      	movs	r0, #1
    9410:	f000 f820 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9414:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9418:	e9d1 2000 	ldrd	r2, r0, [r1]
    941c:	4631      	mov	r1, r6
    941e:	4790      	blx	r2
    9420:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9424:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9428:	4440      	add	r0, r8
    942a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    942e:	2c20      	cmp	r4, #32
    9430:	d1bd      	bne.n	93ae <MPSL_IRQ_RADIO_Handler+0xc66>
    9432:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9436:	4806      	ldr	r0, [pc, #24]	; (9450 <MPSL_IRQ_RADIO_Handler+0xd08>)
    9438:	2800      	cmp	r0, #0
    943a:	bf18      	it	ne
    943c:	f3af 8000 	nopne.w
    9440:	b662      	cpsie	i
    9442:	e7e2      	b.n	940a <MPSL_IRQ_RADIO_Handler+0xcc2>
    9444:	20001008 	.word	0x20001008
    9448:	00000000 	.word	0x00000000
    944c:	20000f88 	.word	0x20000f88
    9450:	00000000 	.word	0x00000000
    9454:	f8df c058 	ldr.w	ip, [pc, #88]	; 94b0 <MPSL_IRQ_RADIO_Handler+0xd68>
    9458:	b510      	push	{r4, lr}
    945a:	2300      	movs	r3, #0
    945c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9460:	2807      	cmp	r0, #7
    9462:	d21f      	bcs.n	94a4 <MPSL_IRQ_RADIO_Handler+0xd5c>
    9464:	e8df f000 	tbb	[pc, r0]
    9468:	05050505 	.word	0x05050505
    946c:	00040404 	.word	0x00040404
    9470:	2301      	movs	r3, #1
    9472:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9476:	2b00      	cmp	r3, #0
    9478:	bf08      	it	eq
    947a:	bd10      	popeq	{r4, pc}
    947c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9480:	480c      	ldr	r0, [pc, #48]	; (94b4 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    9482:	4402      	add	r2, r0
    9484:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    9488:	2820      	cmp	r0, #32
    948a:	bf0e      	itee	eq
    948c:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    9490:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9494:	7041      	strbne	r1, [r0, #1]
    9496:	2020      	movs	r0, #32
    9498:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    949c:	7058      	strb	r0, [r3, #1]
    949e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    94a2:	bd10      	pop	{r4, pc}
    94a4:	f44f 7117 	mov.w	r1, #604	; 0x25c
    94a8:	2070      	movs	r0, #112	; 0x70
    94aa:	f002 fd13 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94ae:	0000      	.short	0x0000
    94b0:	20000f88 	.word	0x20000f88
    94b4:	20001008 	.word	0x20001008
    94b8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94bc:	460f      	mov	r7, r1
    94be:	4680      	mov	r8, r0
    94c0:	f8df b154 	ldr.w	fp, [pc, #340]	; 9618 <MPSL_IRQ_RADIO_Handler+0xed0>
    94c4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    94c8:	4458      	add	r0, fp
    94ca:	f1b8 0f01 	cmp.w	r8, #1
    94ce:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    94d2:	4625      	mov	r5, r4
    94d4:	bf18      	it	ne
    94d6:	f1b8 0f02 	cmpne.w	r8, #2
    94da:	d005      	beq.n	94e8 <MPSL_IRQ_RADIO_Handler+0xda0>
    94dc:	f640 217e 	movw	r1, #2686	; 0xa7e
    94e0:	f04f 0070 	mov.w	r0, #112	; 0x70
    94e4:	f002 fcf6 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94e8:	2d20      	cmp	r5, #32
    94ea:	d041      	beq.n	9570 <MPSL_IRQ_RADIO_Handler+0xe28>
    94ec:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    94f0:	2600      	movs	r6, #0
    94f2:	2800      	cmp	r0, #0
    94f4:	bf08      	it	eq
    94f6:	2602      	moveq	r6, #2
    94f8:	f001 fd82 	bl	b000 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    94fc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 961c <MPSL_IRQ_RADIO_Handler+0xed4>
    9500:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9504:	6899      	ldr	r1, [r3, #8]
    9506:	691b      	ldr	r3, [r3, #16]
    9508:	1a0a      	subs	r2, r1, r0
    950a:	18c9      	adds	r1, r1, r3
    950c:	1a09      	subs	r1, r1, r0
    950e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9512:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9516:	4296      	cmp	r6, r2
    9518:	bf99      	ittee	ls
    951a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    951e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9522:	4a3f      	ldrhi	r2, [pc, #252]	; (9620 <MPSL_IRQ_RADIO_Handler+0xed8>)
    9524:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9528:	d920      	bls.n	956c <MPSL_IRQ_RADIO_Handler+0xe24>
    952a:	4622      	mov	r2, r4
    952c:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9530:	784c      	ldrb	r4, [r1, #1]
    9532:	2c20      	cmp	r4, #32
    9534:	d012      	beq.n	955c <MPSL_IRQ_RADIO_Handler+0xe14>
    9536:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    953a:	6899      	ldr	r1, [r3, #8]
    953c:	691b      	ldr	r3, [r3, #16]
    953e:	ebb1 0c00 	subs.w	ip, r1, r0
    9542:	18c9      	adds	r1, r1, r3
    9544:	1a09      	subs	r1, r1, r0
    9546:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    954a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    954e:	4566      	cmp	r6, ip
    9550:	bf9c      	itt	ls
    9552:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9556:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    955a:	d8e6      	bhi.n	952a <MPSL_IRQ_RADIO_Handler+0xde2>
    955c:	2a20      	cmp	r2, #32
    955e:	d005      	beq.n	956c <MPSL_IRQ_RADIO_Handler+0xe24>
    9560:	463b      	mov	r3, r7
    9562:	2120      	movs	r1, #32
    9564:	2004      	movs	r0, #4
    9566:	f7ff f90d 	bl	8784 <MPSL_IRQ_RADIO_Handler+0x3c>
    956a:	4604      	mov	r4, r0
    956c:	42ac      	cmp	r4, r5
    956e:	d113      	bne.n	9598 <MPSL_IRQ_RADIO_Handler+0xe50>
    9570:	482c      	ldr	r0, [pc, #176]	; (9624 <MPSL_IRQ_RADIO_Handler+0xedc>)
    9572:	2800      	cmp	r0, #0
    9574:	bf18      	it	ne
    9576:	f3af 8000 	nopne.w
    957a:	f001 fef7 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    957e:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9582:	2a20      	cmp	r2, #32
    9584:	d00b      	beq.n	959e <MPSL_IRQ_RADIO_Handler+0xe56>
    9586:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    958a:	1c84      	adds	r4, r0, #2
    958c:	f141 0c00 	adc.w	ip, r1, #0
    9590:	1b1b      	subs	r3, r3, r4
    9592:	eb72 020c 	sbcs.w	r2, r2, ip
    9596:	d202      	bcs.n	959e <MPSL_IRQ_RADIO_Handler+0xe56>
    9598:	2000      	movs	r0, #0
    959a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    959e:	2d20      	cmp	r5, #32
    95a0:	d013      	beq.n	95ca <MPSL_IRQ_RADIO_Handler+0xe82>
    95a2:	462b      	mov	r3, r5
    95a4:	4642      	mov	r2, r8
    95a6:	f7ff fbaf 	bl	8d08 <MPSL_IRQ_RADIO_Handler+0x5c0>
    95aa:	2800      	cmp	r0, #0
    95ac:	bf1e      	ittt	ne
    95ae:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    95b2:	2002      	movne	r0, #2
    95b4:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    95b8:	463b      	mov	r3, r7
    95ba:	462a      	mov	r2, r5
    95bc:	2120      	movs	r1, #32
    95be:	2004      	movs	r0, #4
    95c0:	f7ff f8e0 	bl	8784 <MPSL_IRQ_RADIO_Handler+0x3c>
    95c4:	2000      	movs	r0, #0
    95c6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    95ca:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    95ce:	43c0      	mvns	r0, r0
    95d0:	ea70 0001 	orns	r0, r0, r1
    95d4:	d005      	beq.n	95e2 <MPSL_IRQ_RADIO_Handler+0xe9a>
    95d6:	f002 fac5 	bl	bb64 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    95da:	f04f 30ff 	mov.w	r0, #4294967295
    95de:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    95e2:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    95e6:	b128      	cbz	r0, 95f4 <MPSL_IRQ_RADIO_Handler+0xeac>
    95e8:	2005      	movs	r0, #5
    95ea:	f001 ff9b 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95ee:	2000      	movs	r0, #0
    95f0:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    95f4:	2004      	movs	r0, #4
    95f6:	f001 ff95 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95fa:	f001 fffb 	bl	b5f4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    95fe:	490a      	ldr	r1, [pc, #40]	; (9628 <MPSL_IRQ_RADIO_Handler+0xee0>)
    9600:	2020      	movs	r0, #32
    9602:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9606:	6889      	ldr	r1, [r1, #8]
    9608:	2000      	movs	r0, #0
    960a:	6008      	str	r0, [r1, #0]
    960c:	4907      	ldr	r1, [pc, #28]	; (962c <MPSL_IRQ_RADIO_Handler+0xee4>)
    960e:	6008      	str	r0, [r1, #0]
    9610:	2001      	movs	r0, #1
    9612:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9616:	0000      	.short	0x0000
    9618:	20001008 	.word	0x20001008
    961c:	20000b88 	.word	0x20000b88
    9620:	20000f88 	.word	0x20000f88
    9624:	00000000 	.word	0x00000000
    9628:	20000308 	.word	0x20000308
    962c:	40000508 	.word	0x40000508

00009630 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9630:	4906      	ldr	r1, [pc, #24]	; (964c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9632:	b510      	push	{r4, lr}
    9634:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9638:	2a20      	cmp	r2, #32
    963a:	bf1c      	itt	ne
    963c:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9640:	bd10      	popne	{r4, pc}
    9642:	f240 3177 	movw	r1, #887	; 0x377
    9646:	2070      	movs	r0, #112	; 0x70
    9648:	f002 fc44 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    964c:	20001008 	.word	0x20001008

00009650 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9654:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 981c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9658:	4606      	mov	r6, r0
    965a:	b08f      	sub	sp, #60	; 0x3c
    965c:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9660:	468a      	mov	sl, r1
    9662:	2820      	cmp	r0, #32
    9664:	d061      	beq.n	972a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    9666:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    966a:	f10b 0408 	add.w	r4, fp, #8
    966e:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9672:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9676:	2120      	movs	r1, #32
    9678:	f88d 1018 	strb.w	r1, [sp, #24]
    967c:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    9680:	f8db 2008 	ldr.w	r2, [fp, #8]
    9684:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9688:	4459      	add	r1, fp
    968a:	2700      	movs	r7, #0
    968c:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    9690:	f8db 1010 	ldr.w	r1, [fp, #16]
    9694:	1851      	adds	r1, r2, r1
    9696:	910a      	str	r1, [sp, #40]	; 0x28
    9698:	f8db 0000 	ldr.w	r0, [fp]
    969c:	aa09      	add	r2, sp, #36	; 0x24
    969e:	4430      	add	r0, r6
    96a0:	a907      	add	r1, sp, #28
    96a2:	f001 fb83 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    96a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    96aa:	9907      	ldr	r1, [sp, #28]
    96ac:	f8d9 2008 	ldr.w	r2, [r9, #8]
    96b0:	1840      	adds	r0, r0, r1
    96b2:	1810      	adds	r0, r2, r0
    96b4:	2e67      	cmp	r6, #103	; 0x67
    96b6:	d33d      	bcc.n	9734 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    96b8:	4959      	ldr	r1, [pc, #356]	; (9820 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    96ba:	2200      	movs	r2, #0
    96bc:	1b89      	subs	r1, r1, r6
    96be:	eb72 0107 	sbcs.w	r1, r2, r7
    96c2:	d337      	bcc.n	9734 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    96c4:	6821      	ldr	r1, [r4, #0]
    96c6:	4694      	mov	ip, r2
    96c8:	1a40      	subs	r0, r0, r1
    96ca:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96ce:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    96d2:	eb7c 010c 	sbcs.w	r1, ip, ip
    96d6:	d32d      	bcc.n	9734 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    96d8:	60a0      	str	r0, [r4, #8]
    96da:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    96de:	f884 a010 	strb.w	sl, [r4, #16]
    96e2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    96e6:	f10d 0b18 	add.w	fp, sp, #24
    96ea:	2d20      	cmp	r5, #32
    96ec:	d055      	beq.n	979a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    96ee:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    96f2:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    96f6:	9001      	str	r0, [sp, #4]
    96f8:	484a      	ldr	r0, [pc, #296]	; (9824 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    96fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    96fe:	f8d4 a000 	ldr.w	sl, [r4]
    9702:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9706:	f108 0008 	add.w	r0, r8, #8
    970a:	eb1a 0201 	adds.w	r2, sl, r1
    970e:	eb43 0107 	adc.w	r1, r3, r7
    9712:	e9d0 9300 	ldrd	r9, r3, [r0]
    9716:	ebb9 0202 	subs.w	r2, r9, r2
    971a:	eb73 0101 	sbcs.w	r1, r3, r1
    971e:	d325      	bcc.n	976c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9720:	89c0      	ldrh	r0, [r0, #14]
    9722:	b398      	cbz	r0, 978c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9724:	89e0      	ldrh	r0, [r4, #14]
    9726:	b148      	cbz	r0, 973c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9728:	e037      	b.n	979a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    972a:	f640 3135 	movw	r1, #2869	; 0xb35
    972e:	2070      	movs	r0, #112	; 0x70
    9730:	f002 fbd0 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9734:	b00f      	add	sp, #60	; 0x3c
    9736:	2001      	movs	r0, #1
    9738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    973c:	f002 fa0c 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9740:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9744:	bf08      	it	eq
    9746:	200d      	moveq	r0, #13
    9748:	d00b      	beq.n	9762 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    974a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    974e:	3856      	subs	r0, #86	; 0x56
    9750:	bf08      	it	eq
    9752:	201c      	moveq	r0, #28
    9754:	d005      	beq.n	9762 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9756:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    975a:	389f      	subs	r0, #159	; 0x9f
    975c:	bf14      	ite	ne
    975e:	4638      	movne	r0, r7
    9760:	2032      	moveq	r0, #50	; 0x32
    9762:	1c41      	adds	r1, r0, #1
    9764:	ebb9 000a 	subs.w	r0, r9, sl
    9768:	4288      	cmp	r0, r1
    976a:	da16      	bge.n	979a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    976c:	f88b 5000 	strb.w	r5, [fp]
    9770:	f898 0018 	ldrb.w	r0, [r8, #24]
    9774:	7c21      	ldrb	r1, [r4, #16]
    9776:	4281      	cmp	r1, r0
    9778:	d309      	bcc.n	978e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    977a:	6821      	ldr	r1, [r4, #0]
    977c:	980a      	ldr	r0, [sp, #40]	; 0x28
    977e:	1a40      	subs	r0, r0, r1
    9780:	60a0      	str	r0, [r4, #8]
    9782:	b00f      	add	sp, #60	; 0x3c
    9784:	f04f 0002 	mov.w	r0, #2
    9788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    978c:	e005      	b.n	979a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    978e:	9801      	ldr	r0, [sp, #4]
    9790:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9794:	7845      	ldrb	r5, [r0, #1]
    9796:	2d20      	cmp	r5, #32
    9798:	d1ae      	bne.n	96f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    979a:	2005      	movs	r0, #5
    979c:	f001 fec2 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97a0:	4d1e      	ldr	r5, [pc, #120]	; (981c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    97a2:	f04f 30ff 	mov.w	r0, #4294967295
    97a6:	6068      	str	r0, [r5, #4]
    97a8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    97ac:	f89d 2018 	ldrb.w	r2, [sp, #24]
    97b0:	2120      	movs	r1, #32
    97b2:	2a20      	cmp	r2, #32
    97b4:	d003      	beq.n	97be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    97b6:	2005      	movs	r0, #5
    97b8:	f7fe ffe4 	bl	8784 <MPSL_IRQ_RADIO_Handler+0x3c>
    97bc:	e004      	b.n	97c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    97be:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    97c2:	4428      	add	r0, r5
    97c4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    97c8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    97cc:	4916      	ldr	r1, [pc, #88]	; (9828 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    97ce:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    97d2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    97d6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    97da:	7048      	strb	r0, [r1, #1]
    97dc:	6828      	ldr	r0, [r5, #0]
    97de:	4430      	add	r0, r6
    97e0:	6028      	str	r0, [r5, #0]
    97e2:	20ff      	movs	r0, #255	; 0xff
    97e4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    97e8:	7e68      	ldrb	r0, [r5, #25]
    97ea:	2801      	cmp	r0, #1
    97ec:	d10a      	bne.n	9804 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    97ee:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    97f2:	6823      	ldr	r3, [r4, #0]
    97f4:	1818      	adds	r0, r3, r0
    97f6:	f142 0100 	adc.w	r1, r2, #0
    97fa:	1e40      	subs	r0, r0, #1
    97fc:	f141 31ff 	adc.w	r1, r1, #4294967295
    9800:	f001 fcb2 	bl	b168 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9804:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9808:	2820      	cmp	r0, #32
    980a:	d003      	beq.n	9814 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    980c:	4807      	ldr	r0, [pc, #28]	; (982c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    980e:	7840      	ldrb	r0, [r0, #1]
    9810:	f002 fc32 	bl	c078 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9814:	b00f      	add	sp, #60	; 0x3c
    9816:	2000      	movs	r0, #0
    9818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    981c:	20001008 	.word	0x20001008
    9820:	0f424000 	.word	0x0f424000
    9824:	20000b88 	.word	0x20000b88
    9828:	20000f88 	.word	0x20000f88
    982c:	20000308 	.word	0x20000308

00009830 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9830:	b570      	push	{r4, r5, r6, lr}
    9832:	4a23      	ldr	r2, [pc, #140]	; (98c0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9834:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9838:	2920      	cmp	r1, #32
    983a:	d039      	beq.n	98b0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    983c:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9840:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    9844:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    9848:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    984c:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    9850:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9854:	4411      	add	r1, r2
    9856:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    985a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    985e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9862:	2920      	cmp	r1, #32
    9864:	d029      	beq.n	98ba <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    9866:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    986a:	7e2d      	ldrb	r5, [r5, #24]
    986c:	42a8      	cmp	r0, r5
    986e:	bf3c      	itt	cc
    9870:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    9874:	7849      	ldrbcc	r1, [r1, #1]
    9876:	d3f4      	bcc.n	9862 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    9878:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    987c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9880:	f8dc 5008 	ldr.w	r5, [ip, #8]
    9884:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    9888:	6814      	ldr	r4, [r2, #0]
    988a:	1828      	adds	r0, r5, r0
    988c:	f146 0200 	adc.w	r2, r6, #0
    9890:	ebb1 0c00 	subs.w	ip, r1, r0
    9894:	eb73 0202 	sbcs.w	r2, r3, r2
    9898:	d308      	bcc.n	98ac <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    989a:	1a08      	subs	r0, r1, r0
    989c:	f006 fc9d 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    98a0:	f104 0167 	add.w	r1, r4, #103	; 0x67
    98a4:	4281      	cmp	r1, r0
    98a6:	bf9c      	itt	ls
    98a8:	1b00      	subls	r0, r0, r4
    98aa:	bd70      	popls	{r4, r5, r6, pc}
    98ac:	2000      	movs	r0, #0
    98ae:	bd70      	pop	{r4, r5, r6, pc}
    98b0:	f640 3108 	movw	r1, #2824	; 0xb08
    98b4:	2070      	movs	r0, #112	; 0x70
    98b6:	f002 fb0d 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98ba:	f04f 30ff 	mov.w	r0, #4294967295
    98be:	bd70      	pop	{r4, r5, r6, pc}
    98c0:	20001008 	.word	0x20001008

000098c4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    98c4:	4806      	ldr	r0, [pc, #24]	; (98e0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    98c6:	b510      	push	{r4, lr}
    98c8:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    98cc:	2920      	cmp	r1, #32
    98ce:	bf1c      	itt	ne
    98d0:	7e00      	ldrbne	r0, [r0, #24]
    98d2:	bd10      	popne	{r4, pc}
    98d4:	f640 312f 	movw	r1, #2863	; 0xb2f
    98d8:	2070      	movs	r0, #112	; 0x70
    98da:	f002 fafb 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98de:	0000      	.short	0x0000
    98e0:	20001008 	.word	0x20001008

000098e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    98e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98e6:	4d6f      	ldr	r5, [pc, #444]	; (9aa4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    98e8:	2600      	movs	r6, #0
    98ea:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    98ee:	2701      	movs	r7, #1
    98f0:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    98f4:	4b6c      	ldr	r3, [pc, #432]	; (9aa8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    98f6:	2808      	cmp	r0, #8
    98f8:	d273      	bcs.n	99e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    98fa:	e8df f000 	tbb	[pc, r0]
    98fe:	7804      	.short	0x7804
    9900:	47ceb3a0 	.word	0x47ceb3a0
    9904:	bdb8      	.short	0xbdb8
    9906:	43c8      	mvns	r0, r1
    9908:	ea70 0002 	orns	r0, r0, r2
    990c:	d105      	bne.n	991a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    990e:	f002 f945 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9912:	f001 fd2b 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9916:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    991a:	8ae0      	ldrh	r0, [r4, #22]
    991c:	b110      	cbz	r0, 9924 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    991e:	f002 fa61 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9922:	b180      	cbz	r0, 9946 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    9924:	f7ff fcea 	bl	92fc <MPSL_IRQ_RADIO_Handler+0xbb4>
    9928:	20ff      	movs	r0, #255	; 0xff
    992a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    992e:	6861      	ldr	r1, [r4, #4]
    9930:	f1b1 3fff 	cmp.w	r1, #4294967295
    9934:	d003      	beq.n	993e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    9936:	2005      	movs	r0, #5
    9938:	f001 fd3a 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    993c:	b140      	cbz	r0, 9950 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    993e:	7e60      	ldrb	r0, [r4, #25]
    9940:	2801      	cmp	r0, #1
    9942:	d114      	bne.n	996e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    9944:	e009      	b.n	995a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    9946:	f640 012c 	movw	r1, #2092	; 0x82c
    994a:	2070      	movs	r0, #112	; 0x70
    994c:	f002 fac2 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9950:	f640 0131 	movw	r1, #2097	; 0x831
    9954:	2070      	movs	r0, #112	; 0x70
    9956:	f002 fabd 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995a:	68a2      	ldr	r2, [r4, #8]
    995c:	6920      	ldr	r0, [r4, #16]
    995e:	68e1      	ldr	r1, [r4, #12]
    9960:	1810      	adds	r0, r2, r0
    9962:	4171      	adcs	r1, r6
    9964:	1e40      	subs	r0, r0, #1
    9966:	f141 31ff 	adc.w	r1, r1, #4294967295
    996a:	f001 fbfd 	bl	b168 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    996e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9972:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9976:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    997a:	6840      	ldr	r0, [r0, #4]
    997c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9980:	680a      	ldr	r2, [r1, #0]
    9982:	b001      	add	sp, #4
    9984:	2101      	movs	r1, #1
    9986:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    998a:	4710      	bx	r2
    998c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9990:	b160      	cbz	r0, 99ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    9992:	43c8      	mvns	r0, r1
    9994:	ea70 0002 	orns	r0, r0, r2
    9998:	d105      	bne.n	99a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    999a:	f002 f8ff 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    999e:	f001 fce5 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    99a2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    99a6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    99aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99ac:	f7ff fca6 	bl	92fc <MPSL_IRQ_RADIO_Handler+0xbb4>
    99b0:	f04f 30ff 	mov.w	r0, #4294967295
    99b4:	6060      	str	r0, [r4, #4]
    99b6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    99ba:	f88d 0000 	strb.w	r0, [sp]
    99be:	f89d 0000 	ldrb.w	r0, [sp]
    99c2:	b178      	cbz	r0, 99e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    99c4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    99c8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    99cc:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    99d0:	6840      	ldr	r0, [r0, #4]
    99d2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    99d6:	680a      	ldr	r2, [r1, #0]
    99d8:	b001      	add	sp, #4
    99da:	2106      	movs	r1, #6
    99dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    99e0:	4710      	bx	r2
    99e2:	e05a      	b.n	9a9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    99e4:	f640 0148 	movw	r1, #2120	; 0x848
    99e8:	2070      	movs	r0, #112	; 0x70
    99ea:	f002 fa73 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    99ee:	f7ff fc85 	bl	92fc <MPSL_IRQ_RADIO_Handler+0xbb4>
    99f2:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    99f6:	f002 f9f5 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    99fa:	b130      	cbz	r0, 9a0a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    99fc:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    9a00:	43c9      	mvns	r1, r1
    9a02:	ea71 0000 	orns	r0, r1, r0
    9a06:	d005      	beq.n	9a14 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    9a08:	e00a      	b.n	9a20 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    9a0a:	f640 0156 	movw	r1, #2134	; 0x856
    9a0e:	2070      	movs	r0, #112	; 0x70
    9a10:	f002 fa60 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a14:	f002 f8c2 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9a18:	f001 fca8 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9a1c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9a20:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9a24:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9a28:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9a2c:	6840      	ldr	r0, [r0, #4]
    9a2e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9a32:	680a      	ldr	r2, [r1, #0]
    9a34:	b001      	add	sp, #4
    9a36:	2100      	movs	r1, #0
    9a38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9a3c:	4710      	bx	r2
    9a3e:	f001 fe95 	bl	b76c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    9a42:	8ae0      	ldrh	r0, [r4, #22]
    9a44:	b110      	cbz	r0, 9a4c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    9a46:	f002 f9cd 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9a4a:	b130      	cbz	r0, 9a5a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    9a4c:	f001 fea2 	bl	b794 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9a50:	2800      	cmp	r0, #0
    9a52:	bf18      	it	ne
    9a54:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    9a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a5a:	f44f 6106 	mov.w	r1, #2144	; 0x860
    9a5e:	2070      	movs	r0, #112	; 0x70
    9a60:	f002 fa38 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a64:	4811      	ldr	r0, [pc, #68]	; (9aac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    9a66:	6007      	str	r7, [r0, #0]
    9a68:	6898      	ldr	r0, [r3, #8]
    9a6a:	6007      	str	r7, [r0, #0]
    9a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a6e:	7818      	ldrb	r0, [r3, #0]
    9a70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9a74:	f002 bb00 	b.w	c078 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a78:	f7ff fc40 	bl	92fc <MPSL_IRQ_RADIO_Handler+0xbb4>
    9a7c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9a80:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9a84:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9a88:	6840      	ldr	r0, [r0, #4]
    9a8a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9a8e:	680a      	ldr	r2, [r1, #0]
    9a90:	b001      	add	sp, #4
    9a92:	2105      	movs	r1, #5
    9a94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9a98:	4710      	bx	r2
    9a9a:	f640 0173 	movw	r1, #2163	; 0x873
    9a9e:	2070      	movs	r0, #112	; 0x70
    9aa0:	f002 fa18 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9aa4:	20000b88 	.word	0x20000b88
    9aa8:	20000308 	.word	0x20000308
    9aac:	40000508 	.word	0x40000508

00009ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    9ab0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ab4:	48f7      	ldr	r0, [pc, #988]	; (9e94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    9ab6:	b097      	sub	sp, #92	; 0x5c
    9ab8:	460c      	mov	r4, r1
    9aba:	6800      	ldr	r0, [r0, #0]
    9abc:	4ff6      	ldr	r7, [pc, #984]	; (9e98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    9abe:	05c0      	lsls	r0, r0, #23
    9ac0:	0dc0      	lsrs	r0, r0, #23
    9ac2:	d00e      	beq.n	9ae2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    9ac4:	3810      	subs	r0, #16
    9ac6:	b240      	sxtb	r0, r0
    9ac8:	2800      	cmp	r0, #0
    9aca:	bfb8      	it	lt
    9acc:	f000 000f 	andlt.w	r0, r0, #15
    9ad0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9ad4:	bfac      	ite	ge
    9ad6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    9ada:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    9ade:	0940      	lsrs	r0, r0, #5
    9ae0:	d00c      	beq.n	9afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    9ae2:	7820      	ldrb	r0, [r4, #0]
    9ae4:	f04f 0a00 	mov.w	sl, #0
    9ae8:	2800      	cmp	r0, #0
    9aea:	bf18      	it	ne
    9aec:	2801      	cmpne	r0, #1
    9aee:	d017      	beq.n	9b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    9af0:	f240 61f9 	movw	r1, #1785	; 0x6f9
    9af4:	f04f 0070 	mov.w	r0, #112	; 0x70
    9af8:	f002 f9ec 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9afc:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    9b00:	f04f 0a01 	mov.w	sl, #1
    9b04:	2820      	cmp	r0, #32
    9b06:	d006      	beq.n	9b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    9b08:	7820      	ldrb	r0, [r4, #0]
    9b0a:	b148      	cbz	r0, 9b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    9b0c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    9b10:	2070      	movs	r0, #112	; 0x70
    9b12:	f002 f9df 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b16:	f240 61f2 	movw	r1, #1778	; 0x6f2
    9b1a:	2070      	movs	r0, #112	; 0x70
    9b1c:	f002 f9da 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b20:	f8df b378 	ldr.w	fp, [pc, #888]	; 9e9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    9b24:	f1bb 0f00 	cmp.w	fp, #0
    9b28:	d004      	beq.n	9b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    9b2a:	2100      	movs	r1, #0
    9b2c:	f240 60fc 	movw	r0, #1788	; 0x6fc
    9b30:	f3af 8000 	nop.w
    9b34:	2000      	movs	r0, #0
    9b36:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    9b3a:	a905      	add	r1, sp, #20
    9b3c:	9112      	str	r1, [sp, #72]	; 0x48
    9b3e:	49d8      	ldr	r1, [pc, #864]	; (9ea0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    9b40:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9b42:	f04f 0801 	mov.w	r8, #1
    9b46:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    9b4a:	9001      	str	r0, [sp, #4]
    9b4c:	f1bb 0f00 	cmp.w	fp, #0
    9b50:	d004      	beq.n	9b5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    9b52:	2100      	movs	r1, #0
    9b54:	f240 7007 	movw	r0, #1799	; 0x707
    9b58:	f3af 8000 	nop.w
    9b5c:	f1b8 0f00 	cmp.w	r8, #0
    9b60:	d009      	beq.n	9b76 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    9b62:	bf00      	nop
    9b64:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    9b68:	2500      	movs	r5, #0
    9b6a:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    9b6e:	f1ba 0f00 	cmp.w	sl, #0
    9b72:	d007      	beq.n	9b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    9b74:	e03e      	b.n	9bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    9b76:	48cb      	ldr	r0, [pc, #812]	; (9ea4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    9b78:	2800      	cmp	r0, #0
    9b7a:	bf18      	it	ne
    9b7c:	f3af 8000 	nopne.w
    9b80:	b662      	cpsie	i
    9b82:	e7ef      	b.n	9b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    9b84:	46b1      	mov	r9, r6
    9b86:	2001      	movs	r0, #1
    9b88:	ea20 0609 	bic.w	r6, r0, r9
    9b8c:	48c6      	ldr	r0, [pc, #792]	; (9ea8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    9b8e:	2240      	movs	r2, #64	; 0x40
    9b90:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    9b94:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    9b98:	f006 fcaf 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9b9c:	f1bb 0f00 	cmp.w	fp, #0
    9ba0:	d004      	beq.n	9bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    9ba2:	2100      	movs	r1, #0
    9ba4:	f240 503c 	movw	r0, #1340	; 0x53c
    9ba8:	f3af 8000 	nop.w
    9bac:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    9bb0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    9bb4:	4439      	add	r1, r7
    9bb6:	4438      	add	r0, r7
    9bb8:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    9bba:	8502      	strh	r2, [r0, #40]	; 0x28
    9bbc:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    9bc0:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    9bc4:	f1bb 0f00 	cmp.w	fp, #0
    9bc8:	d004      	beq.n	9bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    9bca:	2100      	movs	r1, #0
    9bcc:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    9bd0:	f3af 8000 	nop.w
    9bd4:	f1bb 0f00 	cmp.w	fp, #0
    9bd8:	d004      	beq.n	9be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    9bda:	2100      	movs	r1, #0
    9bdc:	f240 7011 	movw	r0, #1809	; 0x711
    9be0:	f3af 8000 	nop.w
    9be4:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    9be8:	f88d 0020 	strb.w	r0, [sp, #32]
    9bec:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9bf0:	2800      	cmp	r0, #0
    9bf2:	d1ab      	bne.n	9b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9bf4:	f1bb 0f00 	cmp.w	fp, #0
    9bf8:	d004      	beq.n	9c04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    9bfa:	2100      	movs	r1, #0
    9bfc:	f240 701b 	movw	r0, #1819	; 0x71b
    9c00:	f3af 8000 	nop.w
    9c04:	f001 fbb2 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9c08:	4681      	mov	r9, r0
    9c0a:	a802      	add	r0, sp, #8
    9c0c:	900a      	str	r0, [sp, #40]	; 0x28
    9c0e:	4688      	mov	r8, r1
    9c10:	8921      	ldrh	r1, [r4, #8]
    9c12:	4628      	mov	r0, r5
    9c14:	f361 401f 	bfi	r0, r1, #16, #16
    9c18:	4601      	mov	r1, r0
    9c1a:	7aa2      	ldrb	r2, [r4, #10]
    9c1c:	4628      	mov	r0, r5
    9c1e:	f362 0007 	bfi	r0, r2, #0, #8
    9c22:	7ae2      	ldrb	r2, [r4, #11]
    9c24:	f362 200f 	bfi	r0, r2, #8, #8
    9c28:	7822      	ldrb	r2, [r4, #0]
    9c2a:	9502      	str	r5, [sp, #8]
    9c2c:	f362 4017 	bfi	r0, r2, #16, #8
    9c30:	e9cd 5104 	strd	r5, r1, [sp, #16]
    9c34:	e9cd 0506 	strd	r0, r5, [sp, #24]
    9c38:	9503      	str	r5, [sp, #12]
    9c3a:	7820      	ldrb	r0, [r4, #0]
    9c3c:	b380      	cbz	r0, 9ca0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    9c3e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    9c42:	499a      	ldr	r1, [pc, #616]	; (9eac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    9c44:	1a08      	subs	r0, r1, r0
    9c46:	990a      	ldr	r1, [sp, #40]	; 0x28
    9c48:	f101 020c 	add.w	r2, r1, #12
    9c4c:	a914      	add	r1, sp, #80	; 0x50
    9c4e:	f001 f8ad 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9c52:	2200      	movs	r2, #0
    9c54:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9c58:	4648      	mov	r0, r9
    9c5a:	4641      	mov	r1, r8
    9c5c:	f7fe ff66 	bl	8b2c <MPSL_IRQ_RADIO_Handler+0x3e4>
    9c60:	468c      	mov	ip, r1
    9c62:	7ae1      	ldrb	r1, [r4, #11]
    9c64:	2900      	cmp	r1, #0
    9c66:	bf0c      	ite	eq
    9c68:	217a      	moveq	r1, #122	; 0x7a
    9c6a:	214a      	movne	r1, #74	; 0x4a
    9c6c:	6862      	ldr	r2, [r4, #4]
    9c6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9c72:	4411      	add	r1, r2
    9c74:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9c78:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    9c7c:	441a      	add	r2, r3
    9c7e:	4411      	add	r1, r2
    9c80:	1c88      	adds	r0, r1, #2
    9c82:	f001 f877 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9c86:	9600      	str	r6, [sp, #0]
    9c88:	9004      	str	r0, [sp, #16]
    9c8a:	464a      	mov	r2, r9
    9c8c:	4643      	mov	r3, r8
    9c8e:	6920      	ldr	r0, [r4, #16]
    9c90:	990a      	ldr	r1, [sp, #40]	; 0x28
    9c92:	f7fe fdb3 	bl	87fc <MPSL_IRQ_RADIO_Handler+0xb4>
    9c96:	2800      	cmp	r0, #0
    9c98:	bf08      	it	eq
    9c9a:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    9c9e:	e046      	b.n	9d2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    9ca0:	e7ff      	b.n	9ca2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    9ca2:	4648      	mov	r0, r9
    9ca4:	4641      	mov	r1, r8
    9ca6:	f001 f803 	bl	acb0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    9caa:	f8df c204 	ldr.w	ip, [pc, #516]	; 9eb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    9cae:	4602      	mov	r2, r0
    9cb0:	eb10 0c0c 	adds.w	ip, r0, ip
    9cb4:	460b      	mov	r3, r1
    9cb6:	f141 0e00 	adc.w	lr, r1, #0
    9cba:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    9cbe:	ebb0 0c0c 	subs.w	ip, r0, ip
    9cc2:	eb71 0c0e 	sbcs.w	ip, r1, lr
    9cc6:	d229      	bcs.n	9d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    9cc8:	3229      	adds	r2, #41	; 0x29
    9cca:	f143 0300 	adc.w	r3, r3, #0
    9cce:	1a82      	subs	r2, r0, r2
    9cd0:	eb71 0203 	sbcs.w	r2, r1, r3
    9cd4:	d322      	bcc.n	9d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    9cd6:	8922      	ldrh	r2, [r4, #8]
    9cd8:	ab0a      	add	r3, sp, #40	; 0x28
    9cda:	1a80      	subs	r0, r0, r2
    9cdc:	eb61 0105 	sbc.w	r1, r1, r5
    9ce0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9ce2:	1e40      	subs	r0, r0, #1
    9ce4:	9200      	str	r2, [sp, #0]
    9ce6:	f141 31ff 	adc.w	r1, r1, #4294967295
    9cea:	aa0d      	add	r2, sp, #52	; 0x34
    9cec:	f001 f804 	bl	acf8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    9cf0:	7ae0      	ldrb	r0, [r4, #11]
    9cf2:	2800      	cmp	r0, #0
    9cf4:	bf0c      	ite	eq
    9cf6:	207a      	moveq	r0, #122	; 0x7a
    9cf8:	204a      	movne	r0, #74	; 0x4a
    9cfa:	990d      	ldr	r1, [sp, #52]	; 0x34
    9cfc:	8922      	ldrh	r2, [r4, #8]
    9cfe:	4408      	add	r0, r1
    9d00:	6861      	ldr	r1, [r4, #4]
    9d02:	4411      	add	r1, r2
    9d04:	4408      	add	r0, r1
    9d06:	1c80      	adds	r0, r0, #2
    9d08:	f001 f834 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9d0c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    9d10:	e9cd 1202 	strd	r1, r2, [sp, #8]
    9d14:	1a40      	subs	r0, r0, r1
    9d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9d1a:	e007      	b.n	9d2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    9d1c:	f1b9 0101 	subs.w	r1, r9, #1
    9d20:	f148 30ff 	adc.w	r0, r8, #4294967295
    9d24:	e9cd 1002 	strd	r1, r0, [sp, #8]
    9d28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9d2c:	9004      	str	r0, [sp, #16]
    9d2e:	f1bb 0f00 	cmp.w	fp, #0
    9d32:	d004      	beq.n	9d3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    9d34:	2100      	movs	r1, #0
    9d36:	f240 7022 	movw	r0, #1826	; 0x722
    9d3a:	f3af 8000 	nop.w
    9d3e:	495a      	ldr	r1, [pc, #360]	; (9ea8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    9d40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    9d44:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    9d48:	9108      	str	r1, [sp, #32]
    9d4a:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    9d4e:	a802      	add	r0, sp, #8
    9d50:	2901      	cmp	r1, #1
    9d52:	bf18      	it	ne
    9d54:	2902      	cmpne	r1, #2
    9d56:	d141      	bne.n	9ddc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    9d58:	9511      	str	r5, [sp, #68]	; 0x44
    9d5a:	9a02      	ldr	r2, [sp, #8]
    9d5c:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    9d60:	1a53      	subs	r3, r2, r1
    9d62:	f8dd c010 	ldr.w	ip, [sp, #16]
    9d66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9d6a:	eb12 020c 	adds.w	r2, r2, ip
    9d6e:	1a51      	subs	r1, r2, r1
    9d70:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9d74:	2b02      	cmp	r3, #2
    9d76:	d374      	bcc.n	9e62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9d7c:	bf98      	it	ls
    9d7e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9d82:	d86e      	bhi.n	9e62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9d84:	2501      	movs	r5, #1
    9d86:	ab14      	add	r3, sp, #80	; 0x50
    9d88:	aa0e      	add	r2, sp, #56	; 0x38
    9d8a:	4631      	mov	r1, r6
    9d8c:	f7fe ff1e 	bl	8bcc <MPSL_IRQ_RADIO_Handler+0x484>
    9d90:	2800      	cmp	r0, #0
    9d92:	d06d      	beq.n	9e70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    9d94:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    9d98:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    9d9c:	4633      	mov	r3, r6
    9d9e:	428a      	cmp	r2, r1
    9da0:	d06a      	beq.n	9e78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    9da2:	2005      	movs	r0, #5
    9da4:	f7fe fcee 	bl	8784 <MPSL_IRQ_RADIO_Handler+0x3c>
    9da8:	9908      	ldr	r1, [sp, #32]
    9daa:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    9dae:	7048      	strb	r0, [r1, #1]
    9db0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    9db4:	2820      	cmp	r0, #32
    9db6:	bf01      	itttt	eq
    9db8:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    9dbc:	4438      	addeq	r0, r7
    9dbe:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    9dc2:	9511      	streq	r5, [sp, #68]	; 0x44
    9dc4:	bf1e      	ittt	ne
    9dc6:	9908      	ldrne	r1, [sp, #32]
    9dc8:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    9dcc:	f880 8001 	strbne.w	r8, [r0, #1]
    9dd0:	4632      	mov	r2, r6
    9dd2:	4641      	mov	r1, r8
    9dd4:	f05f 0003 	movs.w	r0, #3
    9dd8:	f7ff fb3c 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9ddc:	f1bb 0f00 	cmp.w	fp, #0
    9de0:	d004      	beq.n	9dec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    9de2:	2100      	movs	r1, #0
    9de4:	f240 7027 	movw	r0, #1831	; 0x727
    9de8:	f3af 8000 	nop.w
    9dec:	4831      	ldr	r0, [pc, #196]	; (9eb4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    9dee:	2800      	cmp	r0, #0
    9df0:	bf18      	it	ne
    9df2:	f3af 8000 	nopne.w
    9df6:	f3ef 8810 	mrs	r8, PRIMASK
    9dfa:	b672      	cpsid	i
    9dfc:	f1bb 0f00 	cmp.w	fp, #0
    9e00:	d004      	beq.n	9e0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    9e02:	2100      	movs	r1, #0
    9e04:	f240 702d 	movw	r0, #1837	; 0x72d
    9e08:	f3af 8000 	nop.w
    9e0c:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    9e10:	f88d 0020 	strb.w	r0, [sp, #32]
    9e14:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9e18:	2800      	cmp	r0, #0
    9e1a:	f47f ae97 	bne.w	9b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9e1e:	f1bb 0f00 	cmp.w	fp, #0
    9e22:	d004      	beq.n	9e2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    9e24:	2100      	movs	r1, #0
    9e26:	f240 7035 	movw	r0, #1845	; 0x735
    9e2a:	f3af 8000 	nop.w
    9e2e:	f10d 0e04 	add.w	lr, sp, #4
    9e32:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    9e36:	f100 0e08 	add.w	lr, r0, #8
    9e3a:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    9e3e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    9e42:	e9c0 1206 	strd	r1, r2, [r0, #24]
    9e46:	b325      	cbz	r5, 9e92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    9e48:	f1bb 0f00 	cmp.w	fp, #0
    9e4c:	d004      	beq.n	9e58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    9e4e:	2100      	movs	r1, #0
    9e50:	f240 7042 	movw	r0, #1858	; 0x742
    9e54:	f3af 8000 	nop.w
    9e58:	f1ba 0f00 	cmp.w	sl, #0
    9e5c:	d146      	bne.n	9eec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9e5e:	e02b      	b.n	9eb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    9e60:	e7ff      	b.n	9e62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9e62:	4632      	mov	r2, r6
    9e64:	4641      	mov	r1, r8
    9e66:	2004      	movs	r0, #4
    9e68:	f7ff faf4 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9e6c:	2501      	movs	r5, #1
    9e6e:	e7b5      	b.n	9ddc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    9e70:	4632      	mov	r2, r6
    9e72:	4641      	mov	r1, r8
    9e74:	2004      	movs	r0, #4
    9e76:	e7af      	b.n	9dd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    9e78:	2920      	cmp	r1, #32
    9e7a:	bf1d      	ittte	ne
    9e7c:	9808      	ldrne	r0, [sp, #32]
    9e7e:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    9e82:	7840      	ldrbne	r0, [r0, #1]
    9e84:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    9e88:	bf04      	itt	eq
    9e8a:	4438      	addeq	r0, r7
    9e8c:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    9e90:	e78a      	b.n	9da8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    9e92:	e03b      	b.n	9f0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    9e94:	e000ed04 	.word	0xe000ed04
    9e98:	20001008 	.word	0x20001008
    9e9c:	00000000 	.word	0x00000000
    9ea0:	20000b88 	.word	0x20000b88
    9ea4:	00000000 	.word	0x00000000
    9ea8:	20000f88 	.word	0x20000f88
    9eac:	1e847fff 	.word	0x1e847fff
    9eb0:	0f424000 	.word	0x0f424000
    9eb4:	00000000 	.word	0x00000000
    9eb8:	9811      	ldr	r0, [sp, #68]	; 0x44
    9eba:	f010 0fff 	tst.w	r0, #255	; 0xff
    9ebe:	d015      	beq.n	9eec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9ec0:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    9ec4:	2820      	cmp	r0, #32
    9ec6:	d111      	bne.n	9eec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9ec8:	f1bb 0f00 	cmp.w	fp, #0
    9ecc:	d004      	beq.n	9ed8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    9ece:	2100      	movs	r1, #0
    9ed0:	f240 7047 	movw	r0, #1863	; 0x747
    9ed4:	f3af 8000 	nop.w
    9ed8:	4631      	mov	r1, r6
    9eda:	2002      	movs	r0, #2
    9edc:	f7ff faec 	bl	94b8 <MPSL_IRQ_RADIO_Handler+0xd70>
    9ee0:	9010      	str	r0, [sp, #64]	; 0x40
    9ee2:	b918      	cbnz	r0, 9eec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    9ee4:	7820      	ldrb	r0, [r4, #0]
    9ee6:	b300      	cbz	r0, 9f2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    9ee8:	2801      	cmp	r0, #1
    9eea:	d02e      	beq.n	9f4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    9eec:	f1bb 0f00 	cmp.w	fp, #0
    9ef0:	d004      	beq.n	9efc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    9ef2:	2100      	movs	r1, #0
    9ef4:	f240 7064 	movw	r0, #1892	; 0x764
    9ef8:	f3af 8000 	nop.w
    9efc:	20ff      	movs	r0, #255	; 0xff
    9efe:	f1ba 0f00 	cmp.w	sl, #0
    9f02:	bf18      	it	ne
    9f04:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    9f08:	d029      	beq.n	9f5e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    9f0a:	2501      	movs	r5, #1
    9f0c:	f1bb 0f00 	cmp.w	fp, #0
    9f10:	d004      	beq.n	9f1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    9f12:	2100      	movs	r1, #0
    9f14:	f240 7075 	movw	r0, #1909	; 0x775
    9f18:	f3af 8000 	nop.w
    9f1c:	9810      	ldr	r0, [sp, #64]	; 0x40
    9f1e:	4c34      	ldr	r4, [pc, #208]	; (9ff0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    9f20:	2802      	cmp	r0, #2
    9f22:	d025      	beq.n	9f70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    9f24:	2801      	cmp	r0, #1
    9f26:	d02b      	beq.n	9f80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    9f28:	e02f      	b.n	9f8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    9f2a:	f1bb 0f00 	cmp.w	fp, #0
    9f2e:	d004      	beq.n	9f3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    9f30:	2100      	movs	r1, #0
    9f32:	f240 704f 	movw	r0, #1871	; 0x74f
    9f36:	f3af 8000 	nop.w
    9f3a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    9f3e:	2004      	movs	r0, #4
    9f40:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9f42:	f7ff fa87 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9f46:	2501      	movs	r5, #1
    9f48:	e7e0      	b.n	9f0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    9f4a:	f1bb 0f00 	cmp.w	fp, #0
    9f4e:	f43f adfd 	beq.w	9b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9f52:	2100      	movs	r1, #0
    9f54:	f240 705a 	movw	r0, #1882	; 0x75a
    9f58:	f3af 8000 	nop.w
    9f5c:	e5f6      	b.n	9b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9f5e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    9f62:	2101      	movs	r1, #1
    9f64:	4391      	bics	r1, r2
    9f66:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    9f6a:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    9f6e:	e7cc      	b.n	9f0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    9f70:	68b8      	ldr	r0, [r7, #8]
    9f72:	ebb0 0009 	subs.w	r0, r0, r9
    9f76:	f006 f930 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9f7a:	6861      	ldr	r1, [r4, #4]
    9f7c:	b921      	cbnz	r1, 9f88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    9f7e:	e004      	b.n	9f8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    9f80:	6861      	ldr	r1, [r4, #4]
    9f82:	f04f 30ff 	mov.w	r0, #4294967295
    9f86:	b101      	cbz	r1, 9f8a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    9f88:	4788      	blx	r1
    9f8a:	f1b8 0f00 	cmp.w	r8, #0
    9f8e:	d028      	beq.n	9fe2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    9f90:	f1bb 0f00 	cmp.w	fp, #0
    9f94:	d004      	beq.n	9fa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    9f96:	2100      	movs	r1, #0
    9f98:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    9f9c:	f3af 8000 	nop.w
    9fa0:	b19d      	cbz	r5, 9fca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    9fa2:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    9fa6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9faa:	4438      	add	r0, r7
    9fac:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    9fb0:	2820      	cmp	r0, #32
    9fb2:	d00a      	beq.n	9fca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    9fb4:	f1bb 0f00 	cmp.w	fp, #0
    9fb8:	d004      	beq.n	9fc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    9fba:	2100      	movs	r1, #0
    9fbc:	f240 708f 	movw	r0, #1935	; 0x78f
    9fc0:	f3af 8000 	nop.w
    9fc4:	7860      	ldrb	r0, [r4, #1]
    9fc6:	f002 f857 	bl	c078 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9fca:	f1bb 0f00 	cmp.w	fp, #0
    9fce:	d004      	beq.n	9fda <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    9fd0:	2100      	movs	r1, #0
    9fd2:	f240 7094 	movw	r0, #1940	; 0x794
    9fd6:	f3af 8000 	nop.w
    9fda:	b019      	add	sp, #100	; 0x64
    9fdc:	4628      	mov	r0, r5
    9fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fe2:	4804      	ldr	r0, [pc, #16]	; (9ff4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    9fe4:	2800      	cmp	r0, #0
    9fe6:	bf18      	it	ne
    9fe8:	f3af 8000 	nopne.w
    9fec:	b662      	cpsie	i
    9fee:	e7cf      	b.n	9f90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    9ff0:	20000308 	.word	0x20000308
    9ff4:	00000000 	.word	0x00000000

00009ff8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    9ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ffc:	4604      	mov	r4, r0
    9ffe:	7800      	ldrb	r0, [r0, #0]
    a000:	b095      	sub	sp, #84	; 0x54
    a002:	b118      	cbz	r0, a00c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a004:	b015      	add	sp, #84	; 0x54
    a006:	2000      	movs	r0, #0
    a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a00c:	48d1      	ldr	r0, [pc, #836]	; (a354 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    a00e:	6800      	ldr	r0, [r0, #0]
    a010:	05c0      	lsls	r0, r0, #23
    a012:	0dc0      	lsrs	r0, r0, #23
    a014:	d00e      	beq.n	a034 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a016:	3810      	subs	r0, #16
    a018:	b240      	sxtb	r0, r0
    a01a:	2800      	cmp	r0, #0
    a01c:	bfb8      	it	lt
    a01e:	f000 000f 	andlt.w	r0, r0, #15
    a022:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a026:	bfac      	ite	ge
    a028:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a02c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a030:	0940      	lsrs	r0, r0, #5
    a032:	d0e7      	beq.n	a004 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a034:	a80d      	add	r0, sp, #52	; 0x34
    a036:	f8df 9320 	ldr.w	r9, [pc, #800]	; a358 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a03a:	9009      	str	r0, [sp, #36]	; 0x24
    a03c:	f1b9 0f00 	cmp.w	r9, #0
    a040:	d004      	beq.n	a04c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a042:	2100      	movs	r1, #0
    a044:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a048:	f3af 8000 	nop.w
    a04c:	f8df 830c 	ldr.w	r8, [pc, #780]	; a35c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    a050:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a054:	2500      	movs	r5, #0
    a056:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a05a:	9503      	str	r5, [sp, #12]
    a05c:	f1b9 0f00 	cmp.w	r9, #0
    a060:	d004      	beq.n	a06c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a062:	2100      	movs	r1, #0
    a064:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a068:	f3af 8000 	nop.w
    a06c:	2001      	movs	r0, #1
    a06e:	ea20 0a06 	bic.w	sl, r0, r6
    a072:	48bb      	ldr	r0, [pc, #748]	; (a360 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a074:	2240      	movs	r2, #64	; 0x40
    a076:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a07a:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    a07e:	f006 fa3c 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a082:	f1b9 0f00 	cmp.w	r9, #0
    a086:	d004      	beq.n	a092 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a088:	2100      	movs	r1, #0
    a08a:	f240 503c 	movw	r0, #1340	; 0x53c
    a08e:	f3af 8000 	nop.w
    a092:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a096:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    a09a:	eb01 0208 	add.w	r2, r1, r8
    a09e:	4440      	add	r0, r8
    a0a0:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    a0a2:	8501      	strh	r1, [r0, #40]	; 0x28
    a0a4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    a0a8:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a0ac:	f1b9 0f00 	cmp.w	r9, #0
    a0b0:	d004      	beq.n	a0bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a0b2:	2100      	movs	r1, #0
    a0b4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a0b8:	f3af 8000 	nop.w
    a0bc:	f1b9 0f00 	cmp.w	r9, #0
    a0c0:	d004      	beq.n	a0cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a0c2:	2100      	movs	r1, #0
    a0c4:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a0c8:	f3af 8000 	nop.w
    a0cc:	f001 f94e 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a0d0:	460f      	mov	r7, r1
    a0d2:	4606      	mov	r6, r0
    a0d4:	8921      	ldrh	r1, [r4, #8]
    a0d6:	4628      	mov	r0, r5
    a0d8:	f361 401f 	bfi	r0, r1, #16, #16
    a0dc:	4601      	mov	r1, r0
    a0de:	7aa2      	ldrb	r2, [r4, #10]
    a0e0:	4628      	mov	r0, r5
    a0e2:	f362 0007 	bfi	r0, r2, #0, #8
    a0e6:	7ae2      	ldrb	r2, [r4, #11]
    a0e8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    a0ec:	f362 200f 	bfi	r0, r2, #8, #8
    a0f0:	7822      	ldrb	r2, [r4, #0]
    a0f2:	950a      	str	r5, [sp, #40]	; 0x28
    a0f4:	f362 4017 	bfi	r0, r2, #16, #8
    a0f8:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    a0fc:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    a100:	950b      	str	r5, [sp, #44]	; 0x2c
    a102:	7820      	ldrb	r0, [r4, #0]
    a104:	b388      	cbz	r0, a16a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a106:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a10a:	4896      	ldr	r0, [pc, #600]	; (a364 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a10c:	f10b 020c 	add.w	r2, fp, #12
    a110:	1a40      	subs	r0, r0, r1
    a112:	a911      	add	r1, sp, #68	; 0x44
    a114:	f000 fe4a 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a118:	2200      	movs	r2, #0
    a11a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    a11e:	4630      	mov	r0, r6
    a120:	4639      	mov	r1, r7
    a122:	f7fe fd03 	bl	8b2c <MPSL_IRQ_RADIO_Handler+0x3e4>
    a126:	4684      	mov	ip, r0
    a128:	7ae0      	ldrb	r0, [r4, #11]
    a12a:	460b      	mov	r3, r1
    a12c:	2800      	cmp	r0, #0
    a12e:	bf0c      	ite	eq
    a130:	207a      	moveq	r0, #122	; 0x7a
    a132:	204a      	movne	r0, #74	; 0x4a
    a134:	6861      	ldr	r1, [r4, #4]
    a136:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a13a:	4408      	add	r0, r1
    a13c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a140:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    a144:	4411      	add	r1, r2
    a146:	4408      	add	r0, r1
    a148:	1c80      	adds	r0, r0, #2
    a14a:	f000 fe13 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a14e:	f8cd a000 	str.w	sl, [sp]
    a152:	900c      	str	r0, [sp, #48]	; 0x30
    a154:	4632      	mov	r2, r6
    a156:	463b      	mov	r3, r7
    a158:	4659      	mov	r1, fp
    a15a:	6920      	ldr	r0, [r4, #16]
    a15c:	f7fe fb4e 	bl	87fc <MPSL_IRQ_RADIO_Handler+0xb4>
    a160:	2800      	cmp	r0, #0
    a162:	bf08      	it	eq
    a164:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    a168:	e045      	b.n	a1f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    a16a:	e7ff      	b.n	a16c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    a16c:	4630      	mov	r0, r6
    a16e:	4639      	mov	r1, r7
    a170:	f000 fd9e 	bl	acb0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a174:	4b7c      	ldr	r3, [pc, #496]	; (a368 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a176:	4602      	mov	r2, r0
    a178:	eb10 0c03 	adds.w	ip, r0, r3
    a17c:	468b      	mov	fp, r1
    a17e:	f141 0300 	adc.w	r3, r1, #0
    a182:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a186:	ebb0 0c0c 	subs.w	ip, r0, ip
    a18a:	eb71 0303 	sbcs.w	r3, r1, r3
    a18e:	d22a      	bcs.n	a1e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a190:	3229      	adds	r2, #41	; 0x29
    a192:	f14b 0300 	adc.w	r3, fp, #0
    a196:	1a82      	subs	r2, r0, r2
    a198:	eb71 0203 	sbcs.w	r2, r1, r3
    a19c:	d323      	bcc.n	a1e6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a19e:	8922      	ldrh	r2, [r4, #8]
    a1a0:	ab12      	add	r3, sp, #72	; 0x48
    a1a2:	1a80      	subs	r0, r0, r2
    a1a4:	eb61 0105 	sbc.w	r1, r1, r5
    a1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a1aa:	1e40      	subs	r0, r0, #1
    a1ac:	9200      	str	r2, [sp, #0]
    a1ae:	f141 31ff 	adc.w	r1, r1, #4294967295
    a1b2:	aa07      	add	r2, sp, #28
    a1b4:	f000 fda0 	bl	acf8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a1b8:	7ae0      	ldrb	r0, [r4, #11]
    a1ba:	2800      	cmp	r0, #0
    a1bc:	bf0c      	ite	eq
    a1be:	207a      	moveq	r0, #122	; 0x7a
    a1c0:	204a      	movne	r0, #74	; 0x4a
    a1c2:	9907      	ldr	r1, [sp, #28]
    a1c4:	8922      	ldrh	r2, [r4, #8]
    a1c6:	4408      	add	r0, r1
    a1c8:	6861      	ldr	r1, [r4, #4]
    a1ca:	4411      	add	r1, r2
    a1cc:	4408      	add	r0, r1
    a1ce:	1c80      	adds	r0, r0, #2
    a1d0:	f000 fdd0 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a1d4:	4601      	mov	r1, r0
    a1d6:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    a1da:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    a1de:	1a08      	subs	r0, r1, r0
    a1e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a1e4:	e006      	b.n	a1f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a1e6:	1e70      	subs	r0, r6, #1
    a1e8:	f147 31ff 	adc.w	r1, r7, #4294967295
    a1ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a1f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a1f4:	900c      	str	r0, [sp, #48]	; 0x30
    a1f6:	f1b9 0f00 	cmp.w	r9, #0
    a1fa:	d004      	beq.n	a206 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    a1fc:	2100      	movs	r1, #0
    a1fe:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a202:	f3af 8000 	nop.w
    a206:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a20a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a20e:	1808      	adds	r0, r1, r0
    a210:	eb42 0105 	adc.w	r1, r2, r5
    a214:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a218:	2a20      	cmp	r2, #32
    a21a:	d009      	beq.n	a230 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a21c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a220:	1a12      	subs	r2, r2, r0
    a222:	eb73 0201 	sbcs.w	r2, r3, r1
    a226:	d203      	bcs.n	a230 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a228:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a22c:	2001      	movs	r0, #1
    a22e:	9003      	str	r0, [sp, #12]
    a230:	f1b9 0f00 	cmp.w	r9, #0
    a234:	d004      	beq.n	a240 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    a236:	2100      	movs	r1, #0
    a238:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a23c:	f3af 8000 	nop.w
    a240:	990a      	ldr	r1, [sp, #40]	; 0x28
    a242:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a246:	1a0a      	subs	r2, r1, r0
    a248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a24a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a24e:	18c9      	adds	r1, r1, r3
    a250:	1a08      	subs	r0, r1, r0
    a252:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a256:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a25a:	bf98      	it	ls
    a25c:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a260:	d80b      	bhi.n	a27a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    a262:	4632      	mov	r2, r6
    a264:	463b      	mov	r3, r7
    a266:	a90a      	add	r1, sp, #40	; 0x28
    a268:	483f      	ldr	r0, [pc, #252]	; (a368 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a26a:	f8cd a000 	str.w	sl, [sp]
    a26e:	f7fe fac5 	bl	87fc <MPSL_IRQ_RADIO_Handler+0xb4>
    a272:	9903      	ldr	r1, [sp, #12]
    a274:	4308      	orrs	r0, r1
    a276:	d145      	bne.n	a304 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    a278:	e05f      	b.n	a33a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a27a:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    a27e:	aa05      	add	r2, sp, #20
    a280:	a903      	add	r1, sp, #12
    a282:	4658      	mov	r0, fp
    a284:	f000 fd92 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a288:	f001 fa8e 	bl	b7a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a28c:	f000 fd72 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a290:	4682      	mov	sl, r0
    a292:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    a296:	2820      	cmp	r0, #32
    a298:	d00a      	beq.n	a2b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    a29a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a29e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a2a2:	1d80      	adds	r0, r0, #6
    a2a4:	f145 0100 	adc.w	r1, r5, #0
    a2a8:	181e      	adds	r6, r3, r0
    a2aa:	eb42 0701 	adc.w	r7, r2, r1
    a2ae:	e024      	b.n	a2fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a2b0:	360a      	adds	r6, #10
    a2b2:	f147 0700 	adc.w	r7, r7, #0
    a2b6:	f1bb 0f00 	cmp.w	fp, #0
    a2ba:	d017      	beq.n	a2ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a2bc:	f001 fd92 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a2c0:	b9a0      	cbnz	r0, a2ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a2c2:	f001 fc49 	bl	bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a2c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a2ca:	bf08      	it	eq
    a2cc:	200d      	moveq	r0, #13
    a2ce:	d00b      	beq.n	a2e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a2d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a2d4:	3856      	subs	r0, #86	; 0x56
    a2d6:	bf08      	it	eq
    a2d8:	201c      	moveq	r0, #28
    a2da:	d005      	beq.n	a2e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a2dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a2e0:	389f      	subs	r0, #159	; 0x9f
    a2e2:	bf14      	ite	ne
    a2e4:	4628      	movne	r0, r5
    a2e6:	2032      	moveq	r0, #50	; 0x32
    a2e8:	1986      	adds	r6, r0, r6
    a2ea:	416f      	adcs	r7, r5
    a2ec:	9803      	ldr	r0, [sp, #12]
    a2ee:	4582      	cmp	sl, r0
    a2f0:	d903      	bls.n	a2fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a2f2:	ebaa 0000 	sub.w	r0, sl, r0
    a2f6:	1986      	adds	r6, r0, r6
    a2f8:	416f      	adcs	r7, r5
    a2fa:	201f      	movs	r0, #31
    a2fc:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    a300:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    a304:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a308:	f000 fcd2 	bl	acb0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a30c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    a310:	1880      	adds	r0, r0, r2
    a312:	eb41 0205 	adc.w	r2, r1, r5
    a316:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    a31a:	1840      	adds	r0, r0, r1
    a31c:	eb42 0105 	adc.w	r1, r2, r5
    a320:	1c40      	adds	r0, r0, #1
    a322:	f141 0100 	adc.w	r1, r1, #0
    a326:	f1b9 0f00 	cmp.w	r9, #0
    a32a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    a32e:	d004      	beq.n	a33a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a330:	2100      	movs	r1, #0
    a332:	f240 50fa 	movw	r0, #1530	; 0x5fa
    a336:	f3af 8000 	nop.w
    a33a:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    a33e:	f88d 0000 	strb.w	r0, [sp]
    a342:	f89d 0000 	ldrb.w	r0, [sp]
    a346:	2800      	cmp	r0, #0
    a348:	f47f ae78 	bne.w	a03c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    a34c:	b015      	add	sp, #84	; 0x54
    a34e:	2001      	movs	r0, #1
    a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a354:	e000ed04 	.word	0xe000ed04
    a358:	00000000 	.word	0x00000000
    a35c:	20001008 	.word	0x20001008
    a360:	20000f88 	.word	0x20000f88
    a364:	1e847fff 	.word	0x1e847fff
    a368:	0f424000 	.word	0x0f424000

0000a36c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a36c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a370:	4d9d      	ldr	r5, [pc, #628]	; (a5e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    a372:	b08c      	sub	sp, #48	; 0x30
    a374:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a378:	2000      	movs	r0, #0
    a37a:	9007      	str	r0, [sp, #28]
    a37c:	9008      	str	r0, [sp, #32]
    a37e:	2001      	movs	r0, #1
    a380:	4c9a      	ldr	r4, [pc, #616]	; (a5ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    a382:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a386:	f04f 0800 	mov.w	r8, #0
    a38a:	4607      	mov	r7, r0
    a38c:	9006      	str	r0, [sp, #24]
    a38e:	b124      	cbz	r4, a39a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a390:	2100      	movs	r1, #0
    a392:	f240 70a5 	movw	r0, #1957	; 0x7a5
    a396:	f3af 8000 	nop.w
    a39a:	9806      	ldr	r0, [sp, #24]
    a39c:	2800      	cmp	r0, #0
    a39e:	d03c      	beq.n	a41a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a3a0:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    a3a4:	b124      	cbz	r4, a3b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a3a6:	2100      	movs	r1, #0
    a3a8:	f240 70aa 	movw	r0, #1962	; 0x7aa
    a3ac:	f3af 8000 	nop.w
    a3b0:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    a3b4:	2240      	movs	r2, #64	; 0x40
    a3b6:	ea27 060a 	bic.w	r6, r7, sl
    a3ba:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a3be:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a3c2:	4683      	mov	fp, r0
    a3c4:	f006 f899 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a3c8:	b124      	cbz	r4, a3d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a3ca:	2100      	movs	r1, #0
    a3cc:	f240 503c 	movw	r0, #1340	; 0x53c
    a3d0:	f3af 8000 	nop.w
    a3d4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a3d8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a3dc:	4428      	add	r0, r5
    a3de:	4429      	add	r1, r5
    a3e0:	9000      	str	r0, [sp, #0]
    a3e2:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a3e4:	8502      	strh	r2, [r0, #40]	; 0x28
    a3e6:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a3ea:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a3ee:	b124      	cbz	r4, a3fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a3f0:	2100      	movs	r1, #0
    a3f2:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a3f6:	f3af 8000 	nop.w
    a3fa:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a3fe:	f88d 0008 	strb.w	r0, [sp, #8]
    a402:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a406:	b178      	cbz	r0, a428 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a408:	2c00      	cmp	r4, #0
    a40a:	bf1c      	itt	ne
    a40c:	2100      	movne	r1, #0
    a40e:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    a412:	d0bc      	beq.n	a38e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a414:	f3af 8000 	nop.w
    a418:	e7b9      	b.n	a38e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a41a:	4875      	ldr	r0, [pc, #468]	; (a5f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a41c:	2800      	cmp	r0, #0
    a41e:	bf18      	it	ne
    a420:	f3af 8000 	nopne.w
    a424:	b662      	cpsie	i
    a426:	e7bb      	b.n	a3a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a428:	b124      	cbz	r4, a434 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a42a:	2100      	movs	r1, #0
    a42c:	f240 70b4 	movw	r0, #1972	; 0x7b4
    a430:	f3af 8000 	nop.w
    a434:	980c      	ldr	r0, [sp, #48]	; 0x30
    a436:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a43a:	2803      	cmp	r0, #3
    a43c:	d17e      	bne.n	a53c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a43e:	9a00      	ldr	r2, [sp, #0]
    a440:	990c      	ldr	r1, [sp, #48]	; 0x30
    a442:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    a446:	4288      	cmp	r0, r1
    a448:	bf14      	ite	ne
    a44a:	f04f 0a00 	movne.w	sl, #0
    a44e:	f04f 0a01 	moveq.w	sl, #1
    a452:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    a456:	4683      	mov	fp, r0
    a458:	2220      	movs	r2, #32
    a45a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a45e:	e003      	b.n	a468 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a460:	4602      	mov	r2, r0
    a462:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a466:	7840      	ldrb	r0, [r0, #1]
    a468:	4288      	cmp	r0, r1
    a46a:	d002      	beq.n	a472 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a46c:	2820      	cmp	r0, #32
    a46e:	d00a      	beq.n	a486 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a470:	e7f6      	b.n	a460 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a472:	2820      	cmp	r0, #32
    a474:	d007      	beq.n	a486 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a476:	4583      	cmp	fp, r0
    a478:	d107      	bne.n	a48a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a47a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a47e:	7840      	ldrb	r0, [r0, #1]
    a480:	f88c 0000 	strb.w	r0, [ip]
    a484:	e007      	b.n	a496 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a486:	4640      	mov	r0, r8
    a488:	e00c      	b.n	a4a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a48a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a48e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a492:	7840      	ldrb	r0, [r0, #1]
    a494:	7048      	strb	r0, [r1, #1]
    a496:	b124      	cbz	r4, a4a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a498:	2100      	movs	r1, #0
    a49a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    a49e:	f3af 8000 	nop.w
    a4a2:	4638      	mov	r0, r7
    a4a4:	46c3      	mov	fp, r8
    a4a6:	ea10 0f0a 	tst.w	r0, sl
    a4aa:	bf18      	it	ne
    a4ac:	46bb      	movne	fp, r7
    a4ae:	2800      	cmp	r0, #0
    a4b0:	d04e      	beq.n	a550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a4b2:	b124      	cbz	r4, a4be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a4b4:	2100      	movs	r1, #0
    a4b6:	f240 70b9 	movw	r0, #1977	; 0x7b9
    a4ba:	f3af 8000 	nop.w
    a4be:	4632      	mov	r2, r6
    a4c0:	2001      	movs	r0, #1
    a4c2:	990c      	ldr	r1, [sp, #48]	; 0x30
    a4c4:	f7fe ffc6 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a4c8:	b124      	cbz	r4, a4d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a4ca:	2100      	movs	r1, #0
    a4cc:	f240 70c2 	movw	r0, #1986	; 0x7c2
    a4d0:	f3af 8000 	nop.w
    a4d4:	4847      	ldr	r0, [pc, #284]	; (a5f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    a4d6:	2800      	cmp	r0, #0
    a4d8:	bf18      	it	ne
    a4da:	f3af 8000 	nopne.w
    a4de:	f3ef 8010 	mrs	r0, PRIMASK
    a4e2:	b672      	cpsid	i
    a4e4:	9006      	str	r0, [sp, #24]
    a4e6:	b124      	cbz	r4, a4f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a4e8:	2100      	movs	r1, #0
    a4ea:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a4ee:	f3af 8000 	nop.w
    a4f2:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a4f6:	f88d 0008 	strb.w	r0, [sp, #8]
    a4fa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a4fe:	b138      	cbz	r0, a510 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a500:	2c00      	cmp	r4, #0
    a502:	bf1c      	itt	ne
    a504:	2100      	movne	r1, #0
    a506:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    a50a:	f43f af40 	beq.w	a38e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a50e:	e781      	b.n	a414 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    a510:	f1bb 0f00 	cmp.w	fp, #0
    a514:	d009      	beq.n	a52a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a516:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    a51a:	2820      	cmp	r0, #32
    a51c:	d105      	bne.n	a52a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a51e:	4631      	mov	r1, r6
    a520:	2002      	movs	r0, #2
    a522:	f7fe ffc9 	bl	94b8 <MPSL_IRQ_RADIO_Handler+0xd70>
    a526:	9008      	str	r0, [sp, #32]
    a528:	b1f8      	cbz	r0, a56a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    a52a:	b124      	cbz	r4, a536 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    a52c:	2100      	movs	r1, #0
    a52e:	f240 70df 	movw	r0, #2015	; 0x7df
    a532:	f3af 8000 	nop.w
    a536:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a53a:	e000      	b.n	a53e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    a53c:	e008      	b.n	a550 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a53e:	ea27 0000 	bic.w	r0, r7, r0
    a542:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    a546:	20ff      	movs	r0, #255	; 0xff
    a548:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a54c:	2001      	movs	r0, #1
    a54e:	9007      	str	r0, [sp, #28]
    a550:	b124      	cbz	r4, a55c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    a552:	2100      	movs	r1, #0
    a554:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    a558:	f3af 8000 	nop.w
    a55c:	9808      	ldr	r0, [sp, #32]
    a55e:	4e26      	ldr	r6, [pc, #152]	; (a5f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    a560:	2802      	cmp	r0, #2
    a562:	d009      	beq.n	a578 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    a564:	2801      	cmp	r0, #1
    a566:	d027      	beq.n	a5b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    a568:	e02b      	b.n	a5c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a56a:	b354      	cbz	r4, a5c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a56c:	2100      	movs	r1, #0
    a56e:	f240 70da 	movw	r0, #2010	; 0x7da
    a572:	f3af 8000 	nop.w
    a576:	e7ec      	b.n	a552 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    a578:	f000 fef8 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a57c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    a580:	ebb3 0c00 	subs.w	ip, r3, r0
    a584:	eb72 0c01 	sbcs.w	ip, r2, r1
    a588:	d204      	bcs.n	a594 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a58a:	f240 71ee 	movw	r1, #2030	; 0x7ee
    a58e:	2070      	movs	r0, #112	; 0x70
    a590:	f001 fca0 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a594:	1a18      	subs	r0, r3, r0
    a596:	eb62 0101 	sbc.w	r1, r2, r1
    a59a:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    a59e:	f171 0100 	sbcs.w	r1, r1, #0
    a5a2:	d304      	bcc.n	a5ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    a5a4:	f240 71ef 	movw	r1, #2031	; 0x7ef
    a5a8:	2070      	movs	r0, #112	; 0x70
    a5aa:	f001 fc93 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5ae:	f005 fe14 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a5b2:	6871      	ldr	r1, [r6, #4]
    a5b4:	b129      	cbz	r1, a5c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a5b6:	e003      	b.n	a5c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    a5b8:	6871      	ldr	r1, [r6, #4]
    a5ba:	f04f 30ff 	mov.w	r0, #4294967295
    a5be:	b101      	cbz	r1, a5c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a5c0:	4788      	blx	r1
    a5c2:	9806      	ldr	r0, [sp, #24]
    a5c4:	b148      	cbz	r0, a5da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    a5c6:	b124      	cbz	r4, a5d2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    a5c8:	2100      	movs	r1, #0
    a5ca:	f240 70ff 	movw	r0, #2047	; 0x7ff
    a5ce:	f3af 8000 	nop.w
    a5d2:	9807      	ldr	r0, [sp, #28]
    a5d4:	b00d      	add	sp, #52	; 0x34
    a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5da:	4805      	ldr	r0, [pc, #20]	; (a5f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a5dc:	2800      	cmp	r0, #0
    a5de:	bf18      	it	ne
    a5e0:	f3af 8000 	nopne.w
    a5e4:	b662      	cpsie	i
    a5e6:	e7ee      	b.n	a5c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    a5e8:	20001008 	.word	0x20001008
	...
    a5f8:	20000308 	.word	0x20000308

0000a5fc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    a5fc:	2820      	cmp	r0, #32
    a5fe:	bf24      	itt	cs
    a600:	2000      	movcs	r0, #0
    a602:	4770      	bxcs	lr
    a604:	4b03      	ldr	r3, [pc, #12]	; (a614 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    a606:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    a60a:	e9c0 1200 	strd	r1, r2, [r0]
    a60e:	2001      	movs	r0, #1
    a610:	4770      	bx	lr
    a612:	0000      	.short	0x0000
    a614:	20000b88 	.word	0x20000b88

0000a618 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    a618:	b510      	push	{r4, lr}
    a61a:	2820      	cmp	r0, #32
    a61c:	d211      	bcs.n	a642 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a61e:	490e      	ldr	r1, [pc, #56]	; (a658 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    a620:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    a624:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    a628:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    a62c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    a630:	b13b      	cbz	r3, a642 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a632:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    a636:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    a63a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    a63e:	2a01      	cmp	r2, #1
    a640:	d001      	beq.n	a646 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    a642:	2000      	movs	r0, #0
    a644:	bd10      	pop	{r4, pc}
    a646:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    a64a:	4601      	mov	r1, r0
    a64c:	2000      	movs	r0, #0
    a64e:	f7fe ff01 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a652:	2001      	movs	r0, #1
    a654:	bd10      	pop	{r4, pc}
    a656:	0000      	.short	0x0000
    a658:	20001008 	.word	0x20001008

0000a65c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    a65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a660:	4e86      	ldr	r6, [pc, #536]	; (a87c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    a662:	4680      	mov	r8, r0
    a664:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    a668:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    a66c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    a670:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    a674:	2800      	cmp	r0, #0
    a676:	d071      	beq.n	a75c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a678:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    a67c:	4d80      	ldr	r5, [pc, #512]	; (a880 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    a67e:	b125      	cbz	r5, a68a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    a680:	2100      	movs	r1, #0
    a682:	f640 307b 	movw	r0, #2939	; 0xb7b
    a686:	f3af 8000 	nop.w
    a68a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    a68e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a692:	2801      	cmp	r0, #1
    a694:	d018      	beq.n	a6c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    a696:	b2c0      	uxtb	r0, r0
    a698:	2804      	cmp	r0, #4
    a69a:	bf1c      	itt	ne
    a69c:	2805      	cmpne	r0, #5
    a69e:	2806      	cmpne	r0, #6
    a6a0:	d061      	beq.n	a766 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    a6a2:	b12d      	cbz	r5, a6b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    a6a4:	f04f 0100 	mov.w	r1, #0
    a6a8:	f640 3087 	movw	r0, #2951	; 0xb87
    a6ac:	f3af 8000 	nop.w
    a6b0:	f005 fec9 	bl	10446 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a6b4:	b125      	cbz	r5, a6c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    a6b6:	2100      	movs	r1, #0
    a6b8:	f640 308b 	movw	r0, #2955	; 0xb8b
    a6bc:	f3af 8000 	nop.w
    a6c0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a6c4:	2801      	cmp	r0, #1
    a6c6:	d1e6      	bne.n	a696 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    a6c8:	2401      	movs	r4, #1
    a6ca:	b125      	cbz	r5, a6d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    a6cc:	2100      	movs	r1, #0
    a6ce:	f640 3092 	movw	r0, #2962	; 0xb92
    a6d2:	f3af 8000 	nop.w
    a6d6:	2c00      	cmp	r4, #0
    a6d8:	d04b      	beq.n	a772 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    a6da:	2000      	movs	r0, #0
    a6dc:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    a6e0:	b125      	cbz	r5, a6ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    a6e2:	2100      	movs	r1, #0
    a6e4:	f640 3097 	movw	r0, #2967	; 0xb97
    a6e8:	f3af 8000 	nop.w
    a6ec:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    a6f0:	2001      	movs	r0, #1
    a6f2:	ea20 090b 	bic.w	r9, r0, fp
    a6f6:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    a6fa:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    a6fe:	2240      	movs	r2, #64	; 0x40
    a700:	f005 fefb 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a704:	b125      	cbz	r5, a710 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    a706:	2100      	movs	r1, #0
    a708:	f240 503c 	movw	r0, #1340	; 0x53c
    a70c:	f3af 8000 	nop.w
    a710:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a714:	eb00 0a06 	add.w	sl, r0, r6
    a718:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    a71c:	4430      	add	r0, r6
    a71e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    a720:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    a724:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a728:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    a72c:	b125      	cbz	r5, a738 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    a72e:	2100      	movs	r1, #0
    a730:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a734:	f3af 8000 	nop.w
    a738:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a73c:	f88d 0000 	strb.w	r0, [sp]
    a740:	f89d 0000 	ldrb.w	r0, [sp]
    a744:	b1e0      	cbz	r0, a780 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    a746:	2d00      	cmp	r5, #0
    a748:	bf1c      	itt	ne
    a74a:	2100      	movne	r1, #0
    a74c:	f640 309d 	movwne	r0, #2973	; 0xb9d
    a750:	d0bb      	beq.n	a6ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a752:	bf00      	nop
    a754:	f3af 8000 	nop.w
    a758:	e7b7      	b.n	a6ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a75a:	e7ff      	b.n	a75c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a75c:	f640 3172 	movw	r1, #2930	; 0xb72
    a760:	2070      	movs	r0, #112	; 0x70
    a762:	f001 fbb7 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a766:	464a      	mov	r2, r9
    a768:	4641      	mov	r1, r8
    a76a:	2001      	movs	r0, #1
    a76c:	f7fe fe72 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a770:	e7a0      	b.n	a6b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    a772:	4844      	ldr	r0, [pc, #272]	; (a884 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a774:	2800      	cmp	r0, #0
    a776:	bf18      	it	ne
    a778:	f3af 8000 	nopne.w
    a77c:	b662      	cpsie	i
    a77e:	e7ac      	b.n	a6da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    a780:	b125      	cbz	r5, a78c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    a782:	2100      	movs	r1, #0
    a784:	f640 30a1 	movw	r0, #2977	; 0xba1
    a788:	f3af 8000 	nop.w
    a78c:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    a790:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    a794:	4640      	mov	r0, r8
    a796:	461c      	mov	r4, r3
    a798:	f04f 0b20 	mov.w	fp, #32
    a79c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    a7a0:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    a7a4:	e004      	b.n	a7b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    a7a6:	46a3      	mov	fp, r4
    a7a8:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    a7ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a7b0:	4284      	cmp	r4, r0
    a7b2:	d002      	beq.n	a7ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    a7b4:	2c20      	cmp	r4, #32
    a7b6:	d02b      	beq.n	a810 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a7b8:	e7f5      	b.n	a7a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    a7ba:	2c20      	cmp	r4, #32
    a7bc:	d028      	beq.n	a810 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a7be:	42a3      	cmp	r3, r4
    a7c0:	d104      	bne.n	a7cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    a7c2:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    a7c6:	7840      	ldrb	r0, [r0, #1]
    a7c8:	7008      	strb	r0, [r1, #0]
    a7ca:	e005      	b.n	a7d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    a7cc:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    a7d0:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    a7d4:	7840      	ldrb	r0, [r0, #1]
    a7d6:	7048      	strb	r0, [r1, #1]
    a7d8:	f1ba 0f00 	cmp.w	sl, #0
    a7dc:	d011      	beq.n	a802 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    a7de:	b125      	cbz	r5, a7ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    a7e0:	2100      	movs	r1, #0
    a7e2:	f240 409c 	movw	r0, #1180	; 0x49c
    a7e6:	f3af 8000 	nop.w
    a7ea:	f89a 0000 	ldrb.w	r0, [sl]
    a7ee:	42a0      	cmp	r0, r4
    a7f0:	d107      	bne.n	a802 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    a7f2:	b125      	cbz	r5, a7fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    a7f4:	2100      	movs	r1, #0
    a7f6:	f240 409f 	movw	r0, #1183	; 0x49f
    a7fa:	f3af 8000 	nop.w
    a7fe:	f88a b000 	strb.w	fp, [sl]
    a802:	b15d      	cbz	r5, a81c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    a804:	2100      	movs	r1, #0
    a806:	f240 40a4 	movw	r0, #1188	; 0x4a4
    a80a:	f3af 8000 	nop.w
    a80e:	e000      	b.n	a812 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    a810:	b125      	cbz	r5, a81c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    a812:	2100      	movs	r1, #0
    a814:	f640 30a5 	movw	r0, #2981	; 0xba5
    a818:	f3af 8000 	nop.w
    a81c:	481a      	ldr	r0, [pc, #104]	; (a888 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    a81e:	2800      	cmp	r0, #0
    a820:	bf18      	it	ne
    a822:	f3af 8000 	nopne.w
    a826:	f3ef 8410 	mrs	r4, PRIMASK
    a82a:	b672      	cpsid	i
    a82c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a830:	f88d 0000 	strb.w	r0, [sp]
    a834:	f89d 0000 	ldrb.w	r0, [sp]
    a838:	b138      	cbz	r0, a84a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    a83a:	2d00      	cmp	r5, #0
    a83c:	bf1c      	itt	ne
    a83e:	2100      	movne	r1, #0
    a840:	f640 30ab 	movwne	r0, #2987	; 0xbab
    a844:	f43f af41 	beq.w	a6ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a848:	e784      	b.n	a754 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    a84a:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    a84e:	20ff      	movs	r0, #255	; 0xff
    a850:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    a854:	b154      	cbz	r4, a86c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    a856:	2d00      	cmp	r5, #0
    a858:	bf08      	it	eq
    a85a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a85e:	2100      	movs	r1, #0
    a860:	f640 30b8 	movw	r0, #3000	; 0xbb8
    a864:	f3af 8000 	nop.w
    a868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a86c:	4805      	ldr	r0, [pc, #20]	; (a884 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a86e:	2800      	cmp	r0, #0
    a870:	bf18      	it	ne
    a872:	f3af 8000 	nopne.w
    a876:	b662      	cpsie	i
    a878:	e7ed      	b.n	a856 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    a87a:	0000      	.short	0x0000
    a87c:	20001008 	.word	0x20001008
	...

0000a88c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    a88c:	b570      	push	{r4, r5, r6, lr}
    a88e:	460d      	mov	r5, r1
    a890:	4606      	mov	r6, r0
    a892:	f001 fa95 	bl	bdc0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    a896:	480d      	ldr	r0, [pc, #52]	; (a8cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    a898:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    a89c:	2400      	movs	r4, #0
    a89e:	3880      	subs	r0, #128	; 0x80
    a8a0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    a8a4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    a8a8:	b129      	cbz	r1, a8b6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    a8aa:	1c61      	adds	r1, r4, #1
    a8ac:	b2cc      	uxtb	r4, r1
    a8ae:	2c20      	cmp	r4, #32
    a8b0:	d3f8      	bcc.n	a8a4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    a8b2:	2020      	movs	r0, #32
    a8b4:	bd70      	pop	{r4, r5, r6, pc}
    a8b6:	4806      	ldr	r0, [pc, #24]	; (a8d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    a8b8:	4621      	mov	r1, r4
    a8ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    a8be:	e9c0 6500 	strd	r6, r5, [r0]
    a8c2:	2001      	movs	r0, #1
    a8c4:	f7fe fdc6 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a8c8:	4620      	mov	r0, r4
    a8ca:	bd70      	pop	{r4, r5, r6, pc}
    a8cc:	20001008 	.word	0x20001008
    a8d0:	20000b88 	.word	0x20000b88

0000a8d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    a8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8d8:	f000 fd48 	bl	b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a8dc:	4606      	mov	r6, r0
    a8de:	460f      	mov	r7, r1
    a8e0:	f000 fe88 	bl	b5f4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    a8e4:	4c65      	ldr	r4, [pc, #404]	; (aa7c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    a8e6:	6860      	ldr	r0, [r4, #4]
    a8e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    a8ec:	bf1c      	itt	ne
    a8ee:	f04f 30ff 	movne.w	r0, #4294967295
    a8f2:	6060      	strne	r0, [r4, #4]
    a8f4:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    a8f8:	f8df b184 	ldr.w	fp, [pc, #388]	; aa80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    a8fc:	2500      	movs	r5, #0
    a8fe:	bb10      	cbnz	r0, a946 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    a900:	f44f 710c 	mov.w	r1, #560	; 0x230
    a904:	6920      	ldr	r0, [r4, #16]
    a906:	f001 fa47 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    a90a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    a90e:	68a1      	ldr	r1, [r4, #8]
    a910:	1818      	adds	r0, r3, r0
    a912:	eb45 0305 	adc.w	r3, r5, r5
    a916:	1809      	adds	r1, r1, r0
    a918:	eb42 0003 	adc.w	r0, r2, r3
    a91c:	1a71      	subs	r1, r6, r1
    a91e:	eb77 0000 	sbcs.w	r0, r7, r0
    a922:	d310      	bcc.n	a946 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    a924:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a928:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a92c:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    a930:	6840      	ldr	r0, [r0, #4]
    a932:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    a936:	680a      	ldr	r2, [r1, #0]
    a938:	2108      	movs	r1, #8
    a93a:	4790      	blx	r2
    a93c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    a940:	2070      	movs	r0, #112	; 0x70
    a942:	f001 fac7 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a946:	7e60      	ldrb	r0, [r4, #25]
    a948:	b180      	cbz	r0, a96c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    a94a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    a94e:	f88d 0000 	strb.w	r0, [sp]
    a952:	f89d 0000 	ldrb.w	r0, [sp]
    a956:	b148      	cbz	r0, a96c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    a958:	f000 fc7e 	bl	b258 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    a95c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a960:	b150      	cbz	r0, a978 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    a962:	f240 31cd 	movw	r1, #973	; 0x3cd
    a966:	2070      	movs	r0, #112	; 0x70
    a968:	f001 fab4 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a96c:	1cf0      	adds	r0, r6, #3
    a96e:	f147 0100 	adc.w	r1, r7, #0
    a972:	f000 fb4b 	bl	b00c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    a976:	e7f1      	b.n	a95c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    a978:	2001      	movs	r0, #1
    a97a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a97e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a982:	2820      	cmp	r0, #32
    a984:	d020      	beq.n	a9c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    a986:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    a98a:	2020      	movs	r0, #32
    a98c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    a990:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    a994:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    a998:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    a99c:	6025      	str	r5, [r4, #0]
    a99e:	f000 ff09 	bl	b7b4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    a9a2:	f884 0020 	strb.w	r0, [r4, #32]
    a9a6:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    a9aa:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a9ae:	eb00 0a04 	add.w	sl, r0, r4
    a9b2:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    a9b6:	2820      	cmp	r0, #32
    a9b8:	d01c      	beq.n	a9f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    a9ba:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    a9be:	f89b 001a 	ldrb.w	r0, [fp, #26]
    a9c2:	2801      	cmp	r0, #1
    a9c4:	d005      	beq.n	a9d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    a9c6:	e015      	b.n	a9f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    a9c8:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    a9cc:	2070      	movs	r0, #112	; 0x70
    a9ce:	f001 fa81 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a9d2:	2201      	movs	r2, #1
    a9d4:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    a9d8:	4630      	mov	r0, r6
    a9da:	4639      	mov	r1, r7
    a9dc:	f7fe f8a6 	bl	8b2c <MPSL_IRQ_RADIO_Handler+0x3e4>
    a9e0:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    a9e4:	1a12      	subs	r2, r2, r0
    a9e6:	eb73 0201 	sbcs.w	r2, r3, r1
    a9ea:	bf24      	itt	cs
    a9ec:	f10b 0208 	addcs.w	r2, fp, #8
    a9f0:	e9c2 0100 	strdcs	r0, r1, [r2]
    a9f4:	4641      	mov	r1, r8
    a9f6:	2001      	movs	r0, #1
    a9f8:	f7fe fd5e 	bl	94b8 <MPSL_IRQ_RADIO_Handler+0xd70>
    a9fc:	0007      	movs	r7, r0
    a9fe:	d0f9      	beq.n	a9f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    aa00:	4820      	ldr	r0, [pc, #128]	; (aa84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    aa02:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    aa06:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    aa0a:	2802      	cmp	r0, #2
    aa0c:	d104      	bne.n	aa18 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    aa0e:	4642      	mov	r2, r8
    aa10:	4649      	mov	r1, r9
    aa12:	2006      	movs	r0, #6
    aa14:	f7fe fd1e 	bl	9454 <MPSL_IRQ_RADIO_Handler+0xd0c>
    aa18:	20ff      	movs	r0, #255	; 0xff
    aa1a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    aa1e:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    aa22:	f8df 8064 	ldr.w	r8, [pc, #100]	; aa88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    aa26:	2820      	cmp	r0, #32
    aa28:	bf1c      	itt	ne
    aa2a:	f898 0001 	ldrbne.w	r0, [r8, #1]
    aa2e:	f001 fb23 	blne	c078 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aa32:	f894 0020 	ldrb.w	r0, [r4, #32]
    aa36:	b128      	cbz	r0, aa44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    aa38:	f000 fe98 	bl	b76c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    aa3c:	f884 5020 	strb.w	r5, [r4, #32]
    aa40:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    aa44:	2f02      	cmp	r7, #2
    aa46:	d00f      	beq.n	aa68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    aa48:	2f01      	cmp	r7, #1
    aa4a:	bf18      	it	ne
    aa4c:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa50:	f04f 30ff 	mov.w	r0, #4294967295
    aa54:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa58:	2900      	cmp	r1, #0
    aa5a:	bf08      	it	eq
    aa5c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa60:	b001      	add	sp, #4
    aa62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa66:	4708      	bx	r1
    aa68:	68a0      	ldr	r0, [r4, #8]
    aa6a:	1b80      	subs	r0, r0, r6
    aa6c:	f005 fbb5 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa70:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aa74:	2900      	cmp	r1, #0
    aa76:	d1f3      	bne.n	aa60 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    aa78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa7c:	20001008 	.word	0x20001008
    aa80:	20000b88 	.word	0x20000b88
    aa84:	20000f88 	.word	0x20000f88
    aa88:	20000308 	.word	0x20000308

0000aa8c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    aa8c:	b570      	push	{r4, r5, r6, lr}
    aa8e:	4c42      	ldr	r4, [pc, #264]	; (ab98 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    aa90:	4605      	mov	r5, r0
    aa92:	b082      	sub	sp, #8
    aa94:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    aa98:	2820      	cmp	r0, #32
    aa9a:	d008      	beq.n	aaae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    aa9c:	6860      	ldr	r0, [r4, #4]
    aa9e:	f1b0 3fff 	cmp.w	r0, #4294967295
    aaa2:	d009      	beq.n	aab8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    aaa4:	f640 21b6 	movw	r1, #2742	; 0xab6
    aaa8:	2070      	movs	r0, #112	; 0x70
    aaaa:	f001 fa13 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aaae:	f640 21b5 	movw	r1, #2741	; 0xab5
    aab2:	2070      	movs	r0, #112	; 0x70
    aab4:	f001 fa0e 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aab8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    aabc:	4937      	ldr	r1, [pc, #220]	; (ab9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    aabe:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    aac2:	68b0      	ldr	r0, [r6, #8]
    aac4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aac8:	f005 fb87 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aacc:	4602      	mov	r2, r0
    aace:	8af0      	ldrh	r0, [r6, #22]
    aad0:	7d31      	ldrb	r1, [r6, #20]
    aad2:	4b33      	ldr	r3, [pc, #204]	; (aba0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    aad4:	4408      	add	r0, r1
    aad6:	1c40      	adds	r0, r0, #1
    aad8:	1811      	adds	r1, r2, r0
    aada:	429a      	cmp	r2, r3
    aadc:	d817      	bhi.n	ab0e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    aade:	4a31      	ldr	r2, [pc, #196]	; (aba4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    aae0:	4290      	cmp	r0, r2
    aae2:	dc1b      	bgt.n	ab1c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    aae4:	f1c2 0c00 	rsb	ip, r2, #0
    aae8:	4560      	cmp	r0, ip
    aaea:	db1e      	blt.n	ab2a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    aaec:	0056      	lsls	r6, r2, #1
    aaee:	428e      	cmp	r6, r1
    aaf0:	bfdc      	itt	le
    aaf2:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    aaf6:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    aafa:	dd05      	ble.n	ab08 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    aafc:	2900      	cmp	r1, #0
    aafe:	bfbc      	itt	lt
    ab00:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    ab04:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    ab08:	1948      	adds	r0, r1, r5
    ab0a:	4299      	cmp	r1, r3
    ab0c:	d904      	bls.n	ab18 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    ab0e:	f240 517f 	movw	r1, #1407	; 0x57f
    ab12:	2070      	movs	r0, #112	; 0x70
    ab14:	f001 f9de 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab18:	4295      	cmp	r5, r2
    ab1a:	dd04      	ble.n	ab26 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    ab1c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    ab20:	2070      	movs	r0, #112	; 0x70
    ab22:	f001 f9d7 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab26:	4565      	cmp	r5, ip
    ab28:	da04      	bge.n	ab34 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    ab2a:	f240 5181 	movw	r1, #1409	; 0x581
    ab2e:	2070      	movs	r0, #112	; 0x70
    ab30:	f001 f9d0 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab34:	4286      	cmp	r6, r0
    ab36:	bfdc      	itt	le
    ab38:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    ab3c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    ab40:	dd05      	ble.n	ab4e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    ab42:	2800      	cmp	r0, #0
    ab44:	bfbc      	itt	lt
    ab46:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    ab4a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    ab4e:	aa01      	add	r2, sp, #4
    ab50:	4669      	mov	r1, sp
    ab52:	f000 f92b 	bl	adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ab56:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ab5a:	280f      	cmp	r0, #15
    ab5c:	bf8c      	ite	hi
    ab5e:	2001      	movhi	r0, #1
    ab60:	2000      	movls	r0, #0
    ab62:	9900      	ldr	r1, [sp, #0]
    ab64:	4408      	add	r0, r1
    ab66:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    ab6a:	6061      	str	r1, [r4, #4]
    ab6c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    ab70:	f88d 0000 	strb.w	r0, [sp]
    ab74:	f89d 0000 	ldrb.w	r0, [sp]
    ab78:	2800      	cmp	r0, #0
    ab7a:	bf04      	itt	eq
    ab7c:	b002      	addeq	sp, #8
    ab7e:	bd70      	popeq	{r4, r5, r6, pc}
    ab80:	2005      	movs	r0, #5
    ab82:	f000 fc15 	bl	b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    ab86:	2800      	cmp	r0, #0
    ab88:	bf1c      	itt	ne
    ab8a:	b002      	addne	sp, #8
    ab8c:	bd70      	popne	{r4, r5, r6, pc}
    ab8e:	f640 21bd 	movw	r1, #2749	; 0xabd
    ab92:	2070      	movs	r0, #112	; 0x70
    ab94:	f001 f99e 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab98:	20001008 	.word	0x20001008
    ab9c:	20000b88 	.word	0x20000b88
    aba0:	1e847fff 	.word	0x1e847fff
    aba4:	0f424000 	.word	0x0f424000

0000aba8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    aba8:	b570      	push	{r4, r5, r6, lr}
    abaa:	4c1e      	ldr	r4, [pc, #120]	; (ac24 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    abac:	2120      	movs	r1, #32
    abae:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    abb2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    abb6:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    abba:	2000      	movs	r0, #0
    abbc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    abc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    abc4:	1e42      	subs	r2, r0, #1
    abc6:	e9c4 0200 	strd	r0, r2, [r4]
    abca:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    abce:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    abd2:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    abd6:	f884 0020 	strb.w	r0, [r4, #32]
    abda:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    abde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    abe2:	1e41      	subs	r1, r0, #1
    abe4:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    abe8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    abec:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    abf0:	2210      	movs	r2, #16
    abf2:	7088      	strb	r0, [r1, #2]
    abf4:	f801 0f04 	strb.w	r0, [r1, #4]!
    abf8:	1e52      	subs	r2, r2, #1
    abfa:	d1fa      	bne.n	abf2 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    abfc:	f000 fde4 	bl	b7c8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    ac00:	4d09      	ldr	r5, [pc, #36]	; (ac28 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    ac02:	2601      	movs	r6, #1
    ac04:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    ac08:	20ff      	movs	r0, #255	; 0xff
    ac0a:	7028      	strb	r0, [r5, #0]
    ac0c:	4807      	ldr	r0, [pc, #28]	; (ac2c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    ac0e:	f001 fa15 	bl	c03c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    ac12:	7068      	strb	r0, [r5, #1]
    ac14:	f001 fa80 	bl	c118 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    ac18:	60a8      	str	r0, [r5, #8]
    ac1a:	f000 fd67 	bl	b6ec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    ac1e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    ac22:	bd70      	pop	{r4, r5, r6, pc}
    ac24:	20001008 	.word	0x20001008
    ac28:	20000308 	.word	0x20000308
    ac2c:	00009385 	.word	0x00009385

0000ac30 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac32:	4607      	mov	r7, r0
    ac34:	b087      	sub	sp, #28
    ac36:	461d      	mov	r5, r3
    ac38:	460e      	mov	r6, r1
    ac3a:	4610      	mov	r0, r2
    ac3c:	f005 facd 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ac40:	4604      	mov	r4, r0
    ac42:	a803      	add	r0, sp, #12
    ac44:	9000      	str	r0, [sp, #0]
    ac46:	ab04      	add	r3, sp, #16
    ac48:	aa02      	add	r2, sp, #8
    ac4a:	4638      	mov	r0, r7
    ac4c:	4631      	mov	r1, r6
    ac4e:	f000 f853 	bl	acf8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    ac52:	9902      	ldr	r1, [sp, #8]
    ac54:	4a14      	ldr	r2, [pc, #80]	; (aca8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    ac56:	1a60      	subs	r0, r4, r1
    ac58:	2300      	movs	r3, #0
    ac5a:	1a82      	subs	r2, r0, r2
    ac5c:	f173 0200 	sbcs.w	r2, r3, #0
    ac60:	d318      	bcc.n	ac94 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    ac62:	f8df c044 	ldr.w	ip, [pc, #68]	; aca8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    ac66:	1b0a      	subs	r2, r1, r4
    ac68:	ebb2 0c0c 	subs.w	ip, r2, ip
    ac6c:	f173 0300 	sbcs.w	r3, r3, #0
    ac70:	d310      	bcc.n	ac94 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    ac72:	4b0e      	ldr	r3, [pc, #56]	; (acac <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    ac74:	4283      	cmp	r3, r0
    ac76:	bf3e      	ittt	cc
    ac78:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    ac7c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    ac80:	4420      	addcc	r0, r4
    ac82:	d307      	bcc.n	ac94 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    ac84:	4293      	cmp	r3, r2
    ac86:	d209      	bcs.n	ac9c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    ac88:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    ac8c:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    ac90:	4408      	add	r0, r1
    ac92:	4240      	negs	r0, r0
    ac94:	300f      	adds	r0, #15
    ac96:	b007      	add	sp, #28
    ac98:	1a28      	subs	r0, r5, r0
    ac9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac9c:	f640 21d7 	movw	r1, #2775	; 0xad7
    aca0:	2070      	movs	r0, #112	; 0x70
    aca2:	f001 f917 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aca6:	0000      	.short	0x0000
    aca8:	0f424000 	.word	0x0f424000
    acac:	1e847fff 	.word	0x1e847fff

0000acb0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    acb0:	0e03      	lsrs	r3, r0, #24
    acb2:	b430      	push	{r4, r5}
    acb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    acb8:	f8df c038 	ldr.w	ip, [pc, #56]	; acf4 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    acbc:	0e09      	lsrs	r1, r1, #24
    acbe:	fba3 250c 	umull	r2, r5, r3, ip
    acc2:	fb01 510c 	mla	r1, r1, ip, r5
    acc6:	2400      	movs	r4, #0
    acc8:	fb03 1104 	mla	r1, r3, r4, r1
    accc:	f647 73ff 	movw	r3, #32767	; 0x7fff
    acd0:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    acd4:	f643 5c09 	movw	ip, #15625	; 0x3d09
    acd8:	fb13 f30c 	smulbb	r3, r3, ip
    acdc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ace0:	fb10 f00c 	smulbb	r0, r0, ip
    ace4:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ace8:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    acec:	1880      	adds	r0, r0, r2
    acee:	4161      	adcs	r1, r4
    acf0:	bc30      	pop	{r4, r5}
    acf2:	4770      	bx	lr
    acf4:	1e848000 	.word	0x1e848000

0000acf8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    acf8:	b570      	push	{r4, r5, r6, lr}
    acfa:	b084      	sub	sp, #16
    acfc:	4615      	mov	r5, r2
    acfe:	aa01      	add	r2, sp, #4
    ad00:	461c      	mov	r4, r3
    ad02:	9200      	str	r2, [sp, #0]
    ad04:	9e08      	ldr	r6, [sp, #32]
    ad06:	ab02      	add	r3, sp, #8
    ad08:	4a17      	ldr	r2, [pc, #92]	; (ad68 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    ad0a:	f005 fbe7 	bl	104dc <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    ad0e:	9801      	ldr	r0, [sp, #4]
    ad10:	f248 6237 	movw	r2, #34359	; 0x8637
    ad14:	0b41      	lsrs	r1, r0, #13
    ad16:	4351      	muls	r1, r2
    ad18:	0c09      	lsrs	r1, r1, #16
    ad1a:	4a14      	ldr	r2, [pc, #80]	; (ad6c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    ad1c:	024b      	lsls	r3, r1, #9
    ad1e:	fb01 0102 	mla	r1, r1, r2, r0
    ad22:	4813      	ldr	r0, [pc, #76]	; (ad70 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    ad24:	4348      	muls	r0, r1
    ad26:	0d42      	lsrs	r2, r0, #21
    ad28:	1898      	adds	r0, r3, r2
    ad2a:	f643 5309 	movw	r3, #15625	; 0x3d09
    ad2e:	fb12 f303 	smulbb	r3, r2, r3
    ad32:	f503 7280 	add.w	r2, r3, #256	; 0x100
    ad36:	f643 5c08 	movw	ip, #15624	; 0x3d08
    ad3a:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    ad3e:	4463      	add	r3, ip
    ad40:	b2d2      	uxtb	r2, r2
    ad42:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    ad46:	bf84      	itt	hi
    ad48:	2200      	movhi	r2, #0
    ad4a:	1c40      	addhi	r0, r0, #1
    ad4c:	7032      	strb	r2, [r6, #0]
    ad4e:	9b02      	ldr	r3, [sp, #8]
    ad50:	0a19      	lsrs	r1, r3, #8
    ad52:	061b      	lsls	r3, r3, #24
    ad54:	1818      	adds	r0, r3, r0
    ad56:	f141 0100 	adc.w	r1, r1, #0
    ad5a:	e9c4 0100 	strd	r0, r1, [r4]
    ad5e:	9801      	ldr	r0, [sp, #4]
    ad60:	6028      	str	r0, [r5, #0]
    ad62:	b004      	add	sp, #16
    ad64:	bd70      	pop	{r4, r5, r6, pc}
    ad66:	0000      	.short	0x0000
    ad68:	1e848000 	.word	0x1e848000
    ad6c:	ffffc2f7 	.word	0xffffc2f7
    ad70:	00010c6f 	.word	0x00010c6f

0000ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    ad74:	0b41      	lsrs	r1, r0, #13
    ad76:	f248 6237 	movw	r2, #34359	; 0x8637
    ad7a:	4351      	muls	r1, r2
    ad7c:	0c0a      	lsrs	r2, r1, #16
    ad7e:	4b09      	ldr	r3, [pc, #36]	; (ada4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    ad80:	0251      	lsls	r1, r2, #9
    ad82:	fb02 0203 	mla	r2, r2, r3, r0
    ad86:	4808      	ldr	r0, [pc, #32]	; (ada8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    ad88:	4350      	muls	r0, r2
    ad8a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    ad8e:	306e      	adds	r0, #110	; 0x6e
    ad90:	0d40      	lsrs	r0, r0, #21
    ad92:	425b      	negs	r3, r3
    ad94:	fb10 f303 	smulbb	r3, r0, r3
    ad98:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    ad9c:	bf88      	it	hi
    ad9e:	1c49      	addhi	r1, r1, #1
    ada0:	4408      	add	r0, r1
    ada2:	4770      	bx	lr
    ada4:	ffffc2f7 	.word	0xffffc2f7
    ada8:	00010c6f 	.word	0x00010c6f

0000adac <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    adac:	0b43      	lsrs	r3, r0, #13
    adae:	f248 6c37 	movw	ip, #34359	; 0x8637
    adb2:	fb03 f30c 	mul.w	r3, r3, ip
    adb6:	b430      	push	{r4, r5}
    adb8:	0c1b      	lsrs	r3, r3, #16
    adba:	f8df c044 	ldr.w	ip, [pc, #68]	; ae00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    adbe:	025c      	lsls	r4, r3, #9
    adc0:	fb03 030c 	mla	r3, r3, ip, r0
    adc4:	480f      	ldr	r0, [pc, #60]	; (ae04 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    adc6:	4358      	muls	r0, r3
    adc8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    adcc:	eb04 000c 	add.w	r0, r4, ip
    add0:	f643 5409 	movw	r4, #15625	; 0x3d09
    add4:	fb1c f404 	smulbb	r4, ip, r4
    add8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    addc:	f643 5508 	movw	r5, #15624	; 0x3d08
    ade0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    ade4:	442c      	add	r4, r5
    ade6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    adea:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    adee:	bf84      	itt	hi
    adf0:	f04f 0c00 	movhi.w	ip, #0
    adf4:	1c40      	addhi	r0, r0, #1
    adf6:	6008      	str	r0, [r1, #0]
    adf8:	f882 c000 	strb.w	ip, [r2]
    adfc:	bc30      	pop	{r4, r5}
    adfe:	4770      	bx	lr
    ae00:	ffffc2f7 	.word	0xffffc2f7
    ae04:	00010c6f 	.word	0x00010c6f

0000ae08 <MPSL_IRQ_RTC0_Handler>:
    ae08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae0c:	2400      	movs	r4, #0
    ae0e:	f8df 9080 	ldr.w	r9, [pc, #128]	; ae90 <MPSL_IRQ_RTC0_Handler+0x88>
    ae12:	4d20      	ldr	r5, [pc, #128]	; (ae94 <MPSL_IRQ_RTC0_Handler+0x8c>)
    ae14:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    ae18:	f44f 78a0 	mov.w	r8, #320	; 0x140
    ae1c:	ea4f 0604 	mov.w	r6, r4
    ae20:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    ae24:	fa07 f004 	lsl.w	r0, r7, r4
    ae28:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    ae2c:	4202      	tst	r2, r0
    ae2e:	d01a      	beq.n	ae66 <MPSL_IRQ_RTC0_Handler+0x5e>
    ae30:	4a18      	ldr	r2, [pc, #96]	; (ae94 <MPSL_IRQ_RTC0_Handler+0x8c>)
    ae32:	5852      	ldr	r2, [r2, r1]
    ae34:	b1ba      	cbz	r2, ae66 <MPSL_IRQ_RTC0_Handler+0x5e>
    ae36:	506e      	str	r6, [r5, r1]
    ae38:	00a1      	lsls	r1, r4, #2
    ae3a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    ae3e:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    ae42:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    ae46:	f8d9 2000 	ldr.w	r2, [r9]
    ae4a:	1a89      	subs	r1, r1, r2
    ae4c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ae50:	2902      	cmp	r1, #2
    ae52:	d302      	bcc.n	ae5a <MPSL_IRQ_RTC0_Handler+0x52>
    ae54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ae58:	d905      	bls.n	ae66 <MPSL_IRQ_RTC0_Handler+0x5e>
    ae5a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ae5e:	1d20      	adds	r0, r4, #4
    ae60:	b2c0      	uxtb	r0, r0
    ae62:	f7fe fd3f 	bl	98e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    ae66:	1c60      	adds	r0, r4, #1
    ae68:	b2c4      	uxtb	r4, r0
    ae6a:	2c03      	cmp	r4, #3
    ae6c:	d3d8      	bcc.n	ae20 <MPSL_IRQ_RTC0_Handler+0x18>
    ae6e:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    ae72:	b128      	cbz	r0, ae80 <MPSL_IRQ_RTC0_Handler+0x78>
    ae74:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    ae78:	4807      	ldr	r0, [pc, #28]	; (ae98 <MPSL_IRQ_RTC0_Handler+0x90>)
    ae7a:	6881      	ldr	r1, [r0, #8]
    ae7c:	1c49      	adds	r1, r1, #1
    ae7e:	6081      	str	r1, [r0, #8]
    ae80:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ae84:	f44f 6000 	mov.w	r0, #2048	; 0x800
    ae88:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    ae8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ae90:	4000b504 	.word	0x4000b504
    ae94:	4000b000 	.word	0x4000b000
    ae98:	20000028 	.word	0x20000028

0000ae9c <MPSL_IRQ_TIMER0_Handler>:
    ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aea0:	4d38      	ldr	r5, [pc, #224]	; (af84 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    aea2:	7828      	ldrb	r0, [r5, #0]
    aea4:	2804      	cmp	r0, #4
    aea6:	d068      	beq.n	af7a <MPSL_IRQ_TIMER0_Handler+0xde>
    aea8:	1ca8      	adds	r0, r5, #2
    aeaa:	2201      	movs	r2, #1
    aeac:	7801      	ldrb	r1, [r0, #0]
    aeae:	b159      	cbz	r1, aec8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    aeb0:	2901      	cmp	r1, #1
    aeb2:	bf08      	it	eq
    aeb4:	706a      	strbeq	r2, [r5, #1]
    aeb6:	d002      	beq.n	aebe <MPSL_IRQ_TIMER0_Handler+0x22>
    aeb8:	7869      	ldrb	r1, [r5, #1]
    aeba:	2900      	cmp	r1, #0
    aebc:	d058      	beq.n	af70 <MPSL_IRQ_TIMER0_Handler+0xd4>
    aebe:	2102      	movs	r1, #2
    aec0:	7001      	strb	r1, [r0, #0]
    aec2:	7840      	ldrb	r0, [r0, #1]
    aec4:	f000 fb2e 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    aec8:	4c2f      	ldr	r4, [pc, #188]	; (af88 <MPSL_IRQ_TIMER0_Handler+0xec>)
    aeca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    aece:	f04f 0800 	mov.w	r8, #0
    aed2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    aed6:	f44f 7780 	mov.w	r7, #256	; 0x100
    aeda:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    aede:	d00a      	beq.n	aef6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    aee0:	482a      	ldr	r0, [pc, #168]	; (af8c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    aee2:	6800      	ldr	r0, [r0, #0]
    aee4:	b138      	cbz	r0, aef6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    aee6:	2003      	movs	r0, #3
    aee8:	f000 fb1c 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    aeec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    aef0:	2003      	movs	r0, #3
    aef2:	f7fe fcf7 	bl	98e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    aef6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    aefa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    aefe:	d00a      	beq.n	af16 <MPSL_IRQ_TIMER0_Handler+0x7a>
    af00:	4823      	ldr	r0, [pc, #140]	; (af90 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    af02:	6800      	ldr	r0, [r0, #0]
    af04:	b138      	cbz	r0, af16 <MPSL_IRQ_TIMER0_Handler+0x7a>
    af06:	2002      	movs	r0, #2
    af08:	f000 fb0c 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af0c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af10:	2002      	movs	r0, #2
    af12:	f7fe fce7 	bl	98e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af16:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    af1a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    af1e:	d00a      	beq.n	af36 <MPSL_IRQ_TIMER0_Handler+0x9a>
    af20:	481c      	ldr	r0, [pc, #112]	; (af94 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    af22:	6800      	ldr	r0, [r0, #0]
    af24:	b138      	cbz	r0, af36 <MPSL_IRQ_TIMER0_Handler+0x9a>
    af26:	2001      	movs	r0, #1
    af28:	f000 fafc 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af2c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af30:	2001      	movs	r0, #1
    af32:	f7fe fcd7 	bl	98e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af36:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    af3a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    af3e:	bf08      	it	eq
    af40:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    af44:	4814      	ldr	r0, [pc, #80]	; (af98 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    af46:	6800      	ldr	r0, [r0, #0]
    af48:	2800      	cmp	r0, #0
    af4a:	bf08      	it	eq
    af4c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    af50:	2000      	movs	r0, #0
    af52:	f000 fae7 	bl	b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    af56:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    af5a:	2004      	movs	r0, #4
    af5c:	7028      	strb	r0, [r5, #0]
    af5e:	f8c5 8004 	str.w	r8, [r5, #4]
    af62:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    af66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af6a:	2000      	movs	r0, #0
    af6c:	f7fe bcba 	b.w	98e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af70:	f240 5169 	movw	r1, #1385	; 0x569
    af74:	206c      	movs	r0, #108	; 0x6c
    af76:	f000 ffad 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af7e:	2007      	movs	r0, #7
    af80:	f7fe bcb0 	b.w	98e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    af84:	20000028 	.word	0x20000028
    af88:	40008000 	.word	0x40008000
    af8c:	4000814c 	.word	0x4000814c
    af90:	40008148 	.word	0x40008148
    af94:	40008144 	.word	0x40008144
    af98:	40008140 	.word	0x40008140
    af9c:	2201      	movs	r2, #1
    af9e:	0211      	lsls	r1, r2, #8
    afa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    afa4:	2000      	movs	r0, #0
    afa6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    afaa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    afae:	f3bf 8f4f 	dsb	sy
    afb2:	f3bf 8f6f 	isb	sy
    afb6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    afba:	490e      	ldr	r1, [pc, #56]	; (aff4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    afbc:	f841 2f04 	str.w	r2, [r1, #4]!
    afc0:	1e43      	subs	r3, r0, #1
    afc2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    afc6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    afca:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    afce:	4b0a      	ldr	r3, [pc, #40]	; (aff8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    afd0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    afd4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    afd8:	1d1b      	adds	r3, r3, #4
    afda:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    afde:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    afe2:	1d1b      	adds	r3, r3, #4
    afe4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    afe8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    afec:	60ca      	str	r2, [r1, #12]
    afee:	4903      	ldr	r1, [pc, #12]	; (affc <MPSL_IRQ_TIMER0_Handler+0x160>)
    aff0:	7048      	strb	r0, [r1, #1]
    aff2:	4770      	bx	lr
    aff4:	40008000 	.word	0x40008000
    aff8:	40008004 	.word	0x40008004
    affc:	20000028 	.word	0x20000028

0000b000 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b000:	4801      	ldr	r0, [pc, #4]	; (b008 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b002:	6800      	ldr	r0, [r0, #0]
    b004:	4770      	bx	lr
    b006:	0000      	.short	0x0000
    b008:	4000b504 	.word	0x4000b504

0000b00c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b00c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b010:	f8df 8130 	ldr.w	r8, [pc, #304]	; b144 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b014:	4604      	mov	r4, r0
    b016:	f1a8 0702 	sub.w	r7, r8, #2
    b01a:	460e      	mov	r6, r1
    b01c:	f898 c000 	ldrb.w	ip, [r8]
    b020:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b024:	f1bc 0f01 	cmp.w	ip, #1
    b028:	d106      	bne.n	b038 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b02a:	ea81 0204 	eor.w	r2, r1, r4
    b02e:	4070      	eors	r0, r6
    b030:	4310      	orrs	r0, r2
    b032:	bf08      	it	eq
    b034:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b038:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b03c:	4a42      	ldr	r2, [pc, #264]	; (b148 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b03e:	6010      	str	r0, [r2, #0]
    b040:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b044:	f1bc 0f00 	cmp.w	ip, #0
    b048:	bf07      	ittee	eq
    b04a:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b04e:	2200      	moveq	r2, #0
    b050:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b054:	2201      	movne	r2, #1
    b056:	483d      	ldr	r0, [pc, #244]	; (b14c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b058:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b05c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b060:	2500      	movs	r5, #0
    b062:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b066:	2a02      	cmp	r2, #2
    b068:	d207      	bcs.n	b07a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b06a:	bf00      	nop
    b06c:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b070:	50c5      	str	r5, [r0, r3]
    b072:	1c52      	adds	r2, r2, #1
    b074:	b2d2      	uxtb	r2, r2
    b076:	2a02      	cmp	r2, #2
    b078:	d3f8      	bcc.n	b06c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b07a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b07e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b082:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b086:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b08a:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b08e:	4a30      	ldr	r2, [pc, #192]	; (b150 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b090:	f8d2 9000 	ldr.w	r9, [r2]
    b094:	eba3 0909 	sub.w	r9, r3, r9
    b098:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b09c:	f04f 0901 	mov.w	r9, #1
    b0a0:	f1ba 0f02 	cmp.w	sl, #2
    b0a4:	d32e      	bcc.n	b104 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b0a6:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b0aa:	d82b      	bhi.n	b104 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b0ac:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b0b0:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b0b4:	f1bc 0f00 	cmp.w	ip, #0
    b0b8:	d005      	beq.n	b0c6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b0ba:	6810      	ldr	r0, [r2, #0]
    b0bc:	1a08      	subs	r0, r1, r0
    b0be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b0c2:	2802      	cmp	r0, #2
    b0c4:	d3f9      	bcc.n	b0ba <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b0c6:	f8c7 9004 	str.w	r9, [r7, #4]
    b0ca:	703d      	strb	r5, [r7, #0]
    b0cc:	f7ff ff66 	bl	af9c <MPSL_IRQ_TIMER0_Handler+0x100>
    b0d0:	4820      	ldr	r0, [pc, #128]	; (b154 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b0d2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b0d6:	f365 0101 	bfi	r1, r5, #0, #2
    b0da:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b0de:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b0e2:	2102      	movs	r1, #2
    b0e4:	f361 0201 	bfi	r2, r1, #0, #2
    b0e8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b0ec:	2110      	movs	r1, #16
    b0ee:	fa91 f1a1 	rbit	r1, r1
    b0f2:	fab1 f181 	clz	r1, r1
    b0f6:	2909      	cmp	r1, #9
    b0f8:	d909      	bls.n	b10e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b0fa:	f240 3155 	movw	r1, #853	; 0x355
    b0fe:	a016      	add	r0, pc, #88	; (adr r0, b158 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b100:	f000 febc 	bl	be7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b104:	f240 31b2 	movw	r1, #946	; 0x3b2
    b108:	206c      	movs	r0, #108	; 0x6c
    b10a:	f000 fee3 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b10e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b112:	f8c0 900c 	str.w	r9, [r0, #12]
    b116:	6879      	ldr	r1, [r7, #4]
    b118:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b11c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b120:	f44f 7180 	mov.w	r1, #256	; 0x100
    b124:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b128:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b12c:	490d      	ldr	r1, [pc, #52]	; (b164 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b12e:	0480      	lsls	r0, r0, #18
    b130:	6008      	str	r0, [r1, #0]
    b132:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b136:	2004      	movs	r0, #4
    b138:	f888 0001 	strb.w	r0, [r8, #1]
    b13c:	f888 9000 	strb.w	r9, [r8]
    b140:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b144:	2000002a 	.word	0x2000002a
    b148:	4001f508 	.word	0x4001f508
    b14c:	4000b000 	.word	0x4000b000
    b150:	4000b504 	.word	0x4000b504
    b154:	40008000 	.word	0x40008000
    b158:	5f66726e 	.word	0x5f66726e
    b15c:	656d6974 	.word	0x656d6974
    b160:	00682e72 	.word	0x00682e72
    b164:	4001f504 	.word	0x4001f504

0000b168 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b16c:	4c31      	ldr	r4, [pc, #196]	; (b234 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b16e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b172:	ea82 0c00 	eor.w	ip, r2, r0
    b176:	404b      	eors	r3, r1
    b178:	ea5c 0303 	orrs.w	r3, ip, r3
    b17c:	bf14      	ite	ne
    b17e:	2301      	movne	r3, #1
    b180:	2300      	moveq	r3, #0
    b182:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b238 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b186:	f89c 8000 	ldrb.w	r8, [ip]
    b18a:	f1b8 0f02 	cmp.w	r8, #2
    b18e:	d002      	beq.n	b196 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b190:	2b00      	cmp	r3, #0
    b192:	d03f      	beq.n	b214 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b194:	e003      	b.n	b19e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b196:	2b00      	cmp	r3, #0
    b198:	bf08      	it	eq
    b19a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b19e:	7863      	ldrb	r3, [r4, #1]
    b1a0:	b3bb      	cbz	r3, b212 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b1a2:	4d26      	ldr	r5, [pc, #152]	; (b23c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b1a4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b1a8:	602b      	str	r3, [r5, #0]
    b1aa:	4e25      	ldr	r6, [pc, #148]	; (b240 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b1ac:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b1b0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b1b4:	462f      	mov	r7, r5
    b1b6:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b1ba:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b1be:	2500      	movs	r5, #0
    b1c0:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b1c4:	4d1f      	ldr	r5, [pc, #124]	; (b244 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b1c6:	f8d5 9000 	ldr.w	r9, [r5]
    b1ca:	eba3 0909 	sub.w	r9, r3, r9
    b1ce:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b1d2:	f1b9 0f02 	cmp.w	r9, #2
    b1d6:	d327      	bcc.n	b228 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b1d8:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b1dc:	d824      	bhi.n	b228 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b1de:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b1e2:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b1e6:	f1b8 0f00 	cmp.w	r8, #0
    b1ea:	d005      	beq.n	b1f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b1ec:	682b      	ldr	r3, [r5, #0]
    b1ee:	1ad3      	subs	r3, r2, r3
    b1f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b1f4:	2b02      	cmp	r3, #2
    b1f6:	d3f9      	bcc.n	b1ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b1f8:	4d13      	ldr	r5, [pc, #76]	; (b248 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b1fa:	2202      	movs	r2, #2
    b1fc:	0753      	lsls	r3, r2, #29
    b1fe:	602b      	str	r3, [r5, #0]
    b200:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b204:	2004      	movs	r0, #4
    b206:	f88c 0001 	strb.w	r0, [ip, #1]
    b20a:	f88c 2000 	strb.w	r2, [ip]
    b20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b212:	e004      	b.n	b21e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b214:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b218:	206c      	movs	r0, #108	; 0x6c
    b21a:	f000 fe5b 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b21e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b222:	206c      	movs	r0, #108	; 0x6c
    b224:	f000 fe56 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b228:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b22c:	206c      	movs	r0, #108	; 0x6c
    b22e:	f000 fe51 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b232:	0000      	.short	0x0000
    b234:	20000028 	.word	0x20000028
    b238:	2000002a 	.word	0x2000002a
    b23c:	4001f508 	.word	0x4001f508
    b240:	4000b000 	.word	0x4000b000
    b244:	4000b504 	.word	0x4000b504
    b248:	4001f504 	.word	0x4001f504

0000b24c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b24c:	4901      	ldr	r1, [pc, #4]	; (b254 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b24e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b252:	4770      	bx	lr
    b254:	20000028 	.word	0x20000028

0000b258 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b25c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; b354 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    b260:	f89c 4000 	ldrb.w	r4, [ip]
    b264:	2c00      	cmp	r4, #0
    b266:	bf07      	ittee	eq
    b268:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    b26c:	2100      	moveq	r1, #0
    b26e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    b272:	2101      	movne	r1, #1
    b274:	4838      	ldr	r0, [pc, #224]	; (b358 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    b276:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b27a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b27e:	2300      	movs	r3, #0
    b280:	2902      	cmp	r1, #2
    b282:	bf38      	it	cc
    b284:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    b288:	d207      	bcs.n	b29a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    b28a:	bf00      	nop
    b28c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    b290:	5083      	str	r3, [r0, r2]
    b292:	1c49      	adds	r1, r1, #1
    b294:	b2c9      	uxtb	r1, r1
    b296:	2902      	cmp	r1, #2
    b298:	d3f8      	bcc.n	b28c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    b29a:	2c02      	cmp	r4, #2
    b29c:	d004      	beq.n	b2a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    b29e:	f240 31db 	movw	r1, #987	; 0x3db
    b2a2:	206c      	movs	r0, #108	; 0x6c
    b2a4:	f000 fe16 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2a8:	f3ef 8210 	mrs	r2, PRIMASK
    b2ac:	b672      	cpsid	i
    b2ae:	4c2b      	ldr	r4, [pc, #172]	; (b35c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    b2b0:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b2b4:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    b2b8:	b12d      	cbz	r5, b2c6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    b2ba:	68a1      	ldr	r1, [r4, #8]
    b2bc:	1c49      	adds	r1, r1, #1
    b2be:	60a1      	str	r1, [r4, #8]
    b2c0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b2c4:	e7f4      	b.n	b2b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    b2c6:	68a0      	ldr	r0, [r4, #8]
    b2c8:	b902      	cbnz	r2, b2cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    b2ca:	b662      	cpsie	i
    b2cc:	0a02      	lsrs	r2, r0, #8
    b2ce:	0600      	lsls	r0, r0, #24
    b2d0:	1840      	adds	r0, r0, r1
    b2d2:	eb42 0103 	adc.w	r1, r2, r3
    b2d6:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    b2da:	1cc0      	adds	r0, r0, #3
    b2dc:	f141 0100 	adc.w	r1, r1, #0
    b2e0:	4f1f      	ldr	r7, [pc, #124]	; (b360 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    b2e2:	2601      	movs	r6, #1
    b2e4:	4d1f      	ldr	r5, [pc, #124]	; (b364 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    b2e6:	ea80 0902 	eor.w	r9, r0, r2
    b2ea:	ea81 0808 	eor.w	r8, r1, r8
    b2ee:	ea59 0808 	orrs.w	r8, r9, r8
    b2f2:	d00e      	beq.n	b312 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b2f4:	f8d7 8000 	ldr.w	r8, [r7]
    b2f8:	eba2 0808 	sub.w	r8, r2, r8
    b2fc:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    b300:	f1b8 0f04 	cmp.w	r8, #4
    b304:	d305      	bcc.n	b312 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b306:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    b30a:	d802      	bhi.n	b312 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b30c:	f7ff fe7e 	bl	b00c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b310:	e01b      	b.n	b34a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b312:	6838      	ldr	r0, [r7, #0]
    b314:	1a10      	subs	r0, r2, r0
    b316:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b31a:	2802      	cmp	r0, #2
    b31c:	d313      	bcc.n	b346 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b31e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b322:	d810      	bhi.n	b346 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b324:	4910      	ldr	r1, [pc, #64]	; (b368 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    b326:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b32a:	6008      	str	r0, [r1, #0]
    b32c:	6066      	str	r6, [r4, #4]
    b32e:	7023      	strb	r3, [r4, #0]
    b330:	606e      	str	r6, [r5, #4]
    b332:	60ee      	str	r6, [r5, #12]
    b334:	0040      	lsls	r0, r0, #1
    b336:	1f09      	subs	r1, r1, #4
    b338:	6008      	str	r0, [r1, #0]
    b33a:	2004      	movs	r0, #4
    b33c:	f88c 0001 	strb.w	r0, [ip, #1]
    b340:	f88c 6000 	strb.w	r6, [ip]
    b344:	e001      	b.n	b34a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b346:	6066      	str	r6, [r4, #4]
    b348:	7023      	strb	r3, [r4, #0]
    b34a:	6860      	ldr	r0, [r4, #4]
    b34c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b354:	2000002a 	.word	0x2000002a
    b358:	4000b000 	.word	0x4000b000
    b35c:	20000028 	.word	0x20000028
    b360:	4000b504 	.word	0x4000b504
    b364:	40008000 	.word	0x40008000
    b368:	4001f508 	.word	0x4001f508

0000b36c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    b36c:	b410      	push	{r4}
    b36e:	f3ef 8410 	mrs	r4, PRIMASK
    b372:	b672      	cpsid	i
    b374:	4a0c      	ldr	r2, [pc, #48]	; (b3a8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    b376:	490d      	ldr	r1, [pc, #52]	; (b3ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    b378:	f04f 0c00 	mov.w	ip, #0
    b37c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    b380:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    b384:	b12b      	cbz	r3, b392 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    b386:	6888      	ldr	r0, [r1, #8]
    b388:	1c40      	adds	r0, r0, #1
    b38a:	6088      	str	r0, [r1, #8]
    b38c:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    b390:	e7f4      	b.n	b37c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    b392:	6889      	ldr	r1, [r1, #8]
    b394:	b904      	cbnz	r4, b398 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    b396:	b662      	cpsie	i
    b398:	0a0a      	lsrs	r2, r1, #8
    b39a:	0609      	lsls	r1, r1, #24
    b39c:	1808      	adds	r0, r1, r0
    b39e:	bc10      	pop	{r4}
    b3a0:	eb42 010c 	adc.w	r1, r2, ip
    b3a4:	4770      	bx	lr
    b3a6:	0000      	.short	0x0000
    b3a8:	4000b000 	.word	0x4000b000
    b3ac:	20000028 	.word	0x20000028

0000b3b0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3b4:	4a56      	ldr	r2, [pc, #344]	; (b510 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    b3b6:	2501      	movs	r5, #1
    b3b8:	2400      	movs	r4, #0
    b3ba:	f892 c000 	ldrb.w	ip, [r2]
    b3be:	7852      	ldrb	r2, [r2, #1]
    b3c0:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b3c4:	2807      	cmp	r0, #7
    b3c6:	d27d      	bcs.n	b4c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b3c8:	e8df f000 	tbb	[pc, r0]
    b3cc:	04040404 	.word	0x04040404
    b3d0:	00606060 	.word	0x00606060
    b3d4:	4b4f      	ldr	r3, [pc, #316]	; (b514 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    b3d6:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    b3da:	43ff      	mvns	r7, r7
    b3dc:	ea77 0708 	orns	r7, r7, r8
    b3e0:	bf04      	itt	eq
    b3e2:	785b      	ldrbeq	r3, [r3, #1]
    b3e4:	2b00      	cmpeq	r3, #0
    b3e6:	d003      	beq.n	b3f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    b3e8:	f1bc 0f02 	cmp.w	ip, #2
    b3ec:	d005      	beq.n	b3fa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    b3ee:	e026      	b.n	b43e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    b3f0:	f44f 6186 	mov.w	r1, #1072	; 0x430
    b3f4:	206c      	movs	r0, #108	; 0x6c
    b3f6:	f000 fd6d 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b3fa:	1f13      	subs	r3, r2, #4
    b3fc:	b2db      	uxtb	r3, r3
    b3fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b402:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    b406:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b40a:	2300      	movs	r3, #0
    b40c:	f1bc 0f01 	cmp.w	ip, #1
    b410:	d003      	beq.n	b41a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    b412:	f1bc 0f02 	cmp.w	ip, #2
    b416:	d008      	beq.n	b42a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    b418:	e00e      	b.n	b438 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b41a:	2a04      	cmp	r2, #4
    b41c:	bf24      	itt	cs
    b41e:	6837      	ldrcs	r7, [r6, #0]
    b420:	2f00      	cmpcs	r7, #0
    b422:	bf08      	it	eq
    b424:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    b428:	e006      	b.n	b438 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b42a:	2a04      	cmp	r2, #4
    b42c:	bf24      	itt	cs
    b42e:	6837      	ldrcs	r7, [r6, #0]
    b430:	2f00      	cmpcs	r7, #0
    b432:	bf08      	it	eq
    b434:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    b438:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b43c:	d1e5      	bne.n	b40a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    b43e:	4b36      	ldr	r3, [pc, #216]	; (b518 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b440:	f100 0210 	add.w	r2, r0, #16
    b444:	fa05 f202 	lsl.w	r2, r5, r2
    b448:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b44c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    b450:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    b454:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b458:	449c      	add	ip, r3
    b45a:	f8cc 5000 	str.w	r5, [ip]
    b45e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b462:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    b466:	eba1 0c0c 	sub.w	ip, r1, ip
    b46a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b46e:	f1bc 0f03 	cmp.w	ip, #3
    b472:	bf3e      	ittt	cc
    b474:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    b478:	2000      	movcc	r0, #0
    b47a:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    b47e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b482:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    b486:	2001      	movs	r0, #1
    b488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b48c:	f1bc 0f00 	cmp.w	ip, #0
    b490:	d006      	beq.n	b4a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    b492:	4282      	cmp	r2, r0
    b494:	d104      	bne.n	b4a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    b496:	f44f 618a 	mov.w	r1, #1104	; 0x450
    b49a:	206c      	movs	r0, #108	; 0x6c
    b49c:	f000 fd1a 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4a0:	1f00      	subs	r0, r0, #4
    b4a2:	b2c2      	uxtb	r2, r0
    b4a4:	2a03      	cmp	r2, #3
    b4a6:	d304      	bcc.n	b4b2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    b4a8:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b4ac:	206c      	movs	r0, #108	; 0x6c
    b4ae:	f000 fd11 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4b2:	4b1a      	ldr	r3, [pc, #104]	; (b51c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    b4b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b4b8:	4090      	lsls	r0, r2
    b4ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    b4be:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    b4c2:	e000      	b.n	b4c6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b4c4:	e01f      	b.n	b506 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    b4c6:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    b4ca:	f843 400c 	str.w	r4, [r3, ip]
    b4ce:	f8df c050 	ldr.w	ip, [pc, #80]	; b520 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    b4d2:	f8dc c000 	ldr.w	ip, [ip]
    b4d6:	eba1 0c0c 	sub.w	ip, r1, ip
    b4da:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b4de:	f1bc 0f02 	cmp.w	ip, #2
    b4e2:	d30d      	bcc.n	b500 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    b4e4:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b4e8:	d80a      	bhi.n	b500 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    b4ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    b4ee:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    b4f2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    b4f6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    b4fa:	4628      	mov	r0, r5
    b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b500:	4620      	mov	r0, r4
    b502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b506:	f240 4154 	movw	r1, #1108	; 0x454
    b50a:	206c      	movs	r0, #108	; 0x6c
    b50c:	f000 fce2 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b510:	2000002a 	.word	0x2000002a
    b514:	20000028 	.word	0x20000028
    b518:	40008000 	.word	0x40008000
    b51c:	4000b000 	.word	0x4000b000
    b520:	4000b504 	.word	0x4000b504

0000b524 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b526:	2101      	movs	r1, #1
    b528:	2600      	movs	r6, #0
    b52a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    b52e:	2807      	cmp	r0, #7
    b530:	d24a      	bcs.n	b5c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    b532:	e8df f000 	tbb	[pc, r0]
    b536:	0404      	.short	0x0404
    b538:	18180404 	.word	0x18180404
    b53c:	0018      	.short	0x0018
    b53e:	f100 0210 	add.w	r2, r0, #16
    b542:	fa01 f202 	lsl.w	r2, r1, r2
    b546:	4923      	ldr	r1, [pc, #140]	; (b5d4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    b548:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b54c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b550:	2200      	movs	r2, #0
    b552:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b556:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    b55a:	508e      	str	r6, [r1, r2]
    b55c:	491e      	ldr	r1, [pc, #120]	; (b5d8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    b55e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b562:	9000      	str	r0, [sp, #0]
    b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b566:	4d1d      	ldr	r5, [pc, #116]	; (b5dc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    b568:	1f01      	subs	r1, r0, #4
    b56a:	b2cc      	uxtb	r4, r1
    b56c:	7829      	ldrb	r1, [r5, #0]
    b56e:	b181      	cbz	r1, b592 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    b570:	786a      	ldrb	r2, [r5, #1]
    b572:	4282      	cmp	r2, r0
    b574:	d10d      	bne.n	b592 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    b576:	4a1a      	ldr	r2, [pc, #104]	; (b5e0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    b578:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b57c:	6010      	str	r0, [r2, #0]
    b57e:	2901      	cmp	r1, #1
    b580:	bf08      	it	eq
    b582:	f7ff fd0b 	bleq	af9c <MPSL_IRQ_TIMER0_Handler+0x100>
    b586:	702e      	strb	r6, [r5, #0]
    b588:	4a16      	ldr	r2, [pc, #88]	; (b5e4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b58a:	f04f 30ff 	mov.w	r0, #4294967295
    b58e:	e9c2 0004 	strd	r0, r0, [r2, #16]
    b592:	4915      	ldr	r1, [pc, #84]	; (b5e8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b594:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b598:	40a0      	lsls	r0, r4
    b59a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    b59e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    b5a2:	00a0      	lsls	r0, r4, #2
    b5a4:	4408      	add	r0, r1
    b5a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b5aa:	4a10      	ldr	r2, [pc, #64]	; (b5ec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b5ac:	6812      	ldr	r2, [r2, #0]
    b5ae:	1a80      	subs	r0, r0, r2
    b5b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b5b4:	2802      	cmp	r0, #2
    b5b6:	bf24      	itt	cs
    b5b8:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    b5bc:	500e      	strcs	r6, [r1, r0]
    b5be:	480c      	ldr	r0, [pc, #48]	; (b5f0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    b5c0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b5c4:	9000      	str	r0, [sp, #0]
    b5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5c8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b5cc:	206c      	movs	r0, #108	; 0x6c
    b5ce:	f000 fc81 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5d2:	0000      	.short	0x0000
    b5d4:	40008000 	.word	0x40008000
    b5d8:	40008140 	.word	0x40008140
    b5dc:	2000002a 	.word	0x2000002a
    b5e0:	4001f508 	.word	0x4001f508
    b5e4:	20000028 	.word	0x20000028
    b5e8:	4000b000 	.word	0x4000b000
    b5ec:	4000b504 	.word	0x4000b504
    b5f0:	4000b140 	.word	0x4000b140

0000b5f4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    b5f4:	481a      	ldr	r0, [pc, #104]	; (b660 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    b5f6:	7800      	ldrb	r0, [r0, #0]
    b5f8:	2800      	cmp	r0, #0
    b5fa:	bf07      	ittee	eq
    b5fc:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    b600:	2100      	moveq	r1, #0
    b602:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    b606:	2101      	movne	r1, #1
    b608:	4a16      	ldr	r2, [pc, #88]	; (b664 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    b60a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    b60e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    b612:	2000      	movs	r0, #0
    b614:	2902      	cmp	r1, #2
    b616:	bf38      	it	cc
    b618:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    b61c:	d207      	bcs.n	b62e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    b61e:	bf00      	nop
    b620:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    b624:	50d0      	str	r0, [r2, r3]
    b626:	1c49      	adds	r1, r1, #1
    b628:	b2c9      	uxtb	r1, r1
    b62a:	2902      	cmp	r1, #2
    b62c:	d3f8      	bcc.n	b620 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    b62e:	490e      	ldr	r1, [pc, #56]	; (b668 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    b630:	f04f 32ff 	mov.w	r2, #4294967295
    b634:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b638:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b63c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b640:	1d0a      	adds	r2, r1, #4
    b642:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b646:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b64a:	1d12      	adds	r2, r2, #4
    b64c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b650:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b654:	1d12      	adds	r2, r2, #4
    b656:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b65a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    b65e:	4770      	bx	lr
    b660:	2000002a 	.word	0x2000002a
    b664:	4000b000 	.word	0x4000b000
    b668:	40008000 	.word	0x40008000

0000b66c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    b66c:	b570      	push	{r4, r5, r6, lr}
    b66e:	f3ef 8110 	mrs	r1, PRIMASK
    b672:	b672      	cpsid	i
    b674:	2400      	movs	r4, #0
    b676:	4b0d      	ldr	r3, [pc, #52]	; (b6ac <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    b678:	4a0d      	ldr	r2, [pc, #52]	; (b6b0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    b67a:	bf00      	nop
    b67c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    b680:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    b684:	f1bc 0f00 	cmp.w	ip, #0
    b688:	d005      	beq.n	b696 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    b68a:	6890      	ldr	r0, [r2, #8]
    b68c:	1c40      	adds	r0, r0, #1
    b68e:	6090      	str	r0, [r2, #8]
    b690:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    b694:	e7f2      	b.n	b67c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    b696:	6895      	ldr	r5, [r2, #8]
    b698:	b901      	cbnz	r1, b69c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    b69a:	b662      	cpsie	i
    b69c:	f004 fd9d 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b6a0:	4a04      	ldr	r2, [pc, #16]	; (b6b4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    b6a2:	4621      	mov	r1, r4
    b6a4:	fbe5 0102 	umlal	r0, r1, r5, r2
    b6a8:	bd70      	pop	{r4, r5, r6, pc}
    b6aa:	0000      	.short	0x0000
    b6ac:	4000b000 	.word	0x4000b000
    b6b0:	20000028 	.word	0x20000028
    b6b4:	1e848000 	.word	0x1e848000

0000b6b8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    b6b8:	b510      	push	{r4, lr}
    b6ba:	2807      	cmp	r0, #7
    b6bc:	d20d      	bcs.n	b6da <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    b6be:	e8df f000 	tbb	[pc, r0]
    b6c2:	0404      	.short	0x0404
    b6c4:	06060404 	.word	0x06060404
    b6c8:	0006      	.short	0x0006
    b6ca:	4906      	ldr	r1, [pc, #24]	; (b6e4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    b6cc:	e002      	b.n	b6d4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    b6ce:	1f00      	subs	r0, r0, #4
    b6d0:	4905      	ldr	r1, [pc, #20]	; (b6e8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    b6d2:	b2c0      	uxtb	r0, r0
    b6d4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    b6d8:	bd10      	pop	{r4, pc}
    b6da:	f240 417b 	movw	r1, #1147	; 0x47b
    b6de:	206c      	movs	r0, #108	; 0x6c
    b6e0:	f000 fbf8 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6e4:	40008140 	.word	0x40008140
    b6e8:	4000b140 	.word	0x4000b140

0000b6ec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    b6ec:	b570      	push	{r4, r5, r6, lr}
    b6ee:	481b      	ldr	r0, [pc, #108]	; (b75c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    b6f0:	2400      	movs	r4, #0
    b6f2:	2104      	movs	r1, #4
    b6f4:	7004      	strb	r4, [r0, #0]
    b6f6:	1e80      	subs	r0, r0, #2
    b6f8:	7001      	strb	r1, [r0, #0]
    b6fa:	1f49      	subs	r1, r1, #5
    b6fc:	e9c0 1104 	strd	r1, r1, [r0, #16]
    b700:	6084      	str	r4, [r0, #8]
    b702:	f7ff fc4b 	bl	af9c <MPSL_IRQ_TIMER0_Handler+0x100>
    b706:	2501      	movs	r5, #1
    b708:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    b70c:	02eb      	lsls	r3, r5, #11
    b70e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    b712:	f3bf 8f4f 	dsb	sy
    b716:	f3bf 8f6f 	isb	sy
    b71a:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    b71e:	4a10      	ldr	r2, [pc, #64]	; (b760 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    b720:	6055      	str	r5, [r2, #4]
    b722:	6095      	str	r5, [r2, #8]
    b724:	480f      	ldr	r0, [pc, #60]	; (b764 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    b726:	6801      	ldr	r1, [r0, #0]
    b728:	2900      	cmp	r1, #0
    b72a:	d1fc      	bne.n	b726 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    b72c:	480e      	ldr	r0, [pc, #56]	; (b768 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    b72e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    b732:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    b736:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    b73a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    b73e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    b742:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    b746:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    b74a:	6015      	str	r5, [r2, #0]
    b74c:	f44f 7082 	mov.w	r0, #260	; 0x104
    b750:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    b754:	2002      	movs	r0, #2
    b756:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    b75a:	bd70      	pop	{r4, r5, r6, pc}
    b75c:	2000002a 	.word	0x2000002a
    b760:	4000b000 	.word	0x4000b000
    b764:	4000b504 	.word	0x4000b504
    b768:	00070002 	.word	0x00070002

0000b76c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    b76c:	4808      	ldr	r0, [pc, #32]	; (b790 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    b76e:	f990 0000 	ldrsb.w	r0, [r0]
    b772:	2800      	cmp	r0, #0
    b774:	bfb8      	it	lt
    b776:	4770      	bxlt	lr
    b778:	f000 011f 	and.w	r1, r0, #31
    b77c:	2201      	movs	r2, #1
    b77e:	fa02 f101 	lsl.w	r1, r2, r1
    b782:	0940      	lsrs	r0, r0, #5
    b784:	0080      	lsls	r0, r0, #2
    b786:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b78a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b78e:	4770      	bx	lr
    b790:	20000384 	.word	0x20000384

0000b794 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    b794:	4803      	ldr	r0, [pc, #12]	; (b7a4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    b796:	7800      	ldrb	r0, [r0, #0]
    b798:	2803      	cmp	r0, #3
    b79a:	bf0c      	ite	eq
    b79c:	2001      	moveq	r0, #1
    b79e:	2000      	movne	r0, #0
    b7a0:	4770      	bx	lr
    b7a2:	0000      	.short	0x0000
    b7a4:	2000035c 	.word	0x2000035c

0000b7a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    b7a8:	4801      	ldr	r0, [pc, #4]	; (b7b0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    b7aa:	8840      	ldrh	r0, [r0, #2]
    b7ac:	4770      	bx	lr
    b7ae:	0000      	.short	0x0000
    b7b0:	2000035c 	.word	0x2000035c

0000b7b4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    b7b4:	4803      	ldr	r0, [pc, #12]	; (b7c4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    b7b6:	7800      	ldrb	r0, [r0, #0]
    b7b8:	2802      	cmp	r0, #2
    b7ba:	bf16      	itet	ne
    b7bc:	2803      	cmpne	r0, #3
    b7be:	2001      	moveq	r0, #1
    b7c0:	2000      	movne	r0, #0
    b7c2:	4770      	bx	lr
    b7c4:	2000035c 	.word	0x2000035c

0000b7c8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    b7c8:	4802      	ldr	r0, [pc, #8]	; (b7d4 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    b7ca:	2100      	movs	r1, #0
    b7cc:	7001      	strb	r1, [r0, #0]
    b7ce:	8041      	strh	r1, [r0, #2]
    b7d0:	4770      	bx	lr
    b7d2:	0000      	.short	0x0000
    b7d4:	2000035c 	.word	0x2000035c

0000b7d8 <MPSL_IRQ_CLOCK_Handler>:
    b7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7dc:	4c16      	ldr	r4, [pc, #88]	; (b838 <MPSL_IRQ_CLOCK_Handler+0x60>)
    b7de:	7a60      	ldrb	r0, [r4, #9]
    b7e0:	2800      	cmp	r0, #0
    b7e2:	d027      	beq.n	b834 <MPSL_IRQ_CLOCK_Handler+0x5c>
    b7e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b7e8:	058d      	lsls	r5, r1, #22
    b7ea:	4628      	mov	r0, r5
    b7ec:	f004 fd20 	bl	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b7f0:	4680      	mov	r8, r0
    b7f2:	f44f 7182 	mov.w	r1, #260	; 0x104
    b7f6:	4628      	mov	r0, r5
    b7f8:	f004 fd1a 	bl	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b7fc:	2600      	movs	r6, #0
    b7fe:	4607      	mov	r7, r0
    b800:	f1b8 0f00 	cmp.w	r8, #0
    b804:	d009      	beq.n	b81a <MPSL_IRQ_CLOCK_Handler+0x42>
    b806:	2001      	movs	r0, #1
    b808:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b80c:	7920      	ldrb	r0, [r4, #4]
    b80e:	b120      	cbz	r0, b81a <MPSL_IRQ_CLOCK_Handler+0x42>
    b810:	7126      	strb	r6, [r4, #4]
    b812:	69e0      	ldr	r0, [r4, #28]
    b814:	b108      	cbz	r0, b81a <MPSL_IRQ_CLOCK_Handler+0x42>
    b816:	4780      	blx	r0
    b818:	61e6      	str	r6, [r4, #28]
    b81a:	b137      	cbz	r7, b82a <MPSL_IRQ_CLOCK_Handler+0x52>
    b81c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b820:	2002      	movs	r0, #2
    b822:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b826:	f000 fa75 	bl	bd14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    b82a:	4640      	mov	r0, r8
    b82c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b830:	f000 b858 	b.w	b8e4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b838:	20000314 	.word	0x20000314
    b83c:	b510      	push	{r4, lr}
    b83e:	f004 fda1 	bl	10384 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b842:	b930      	cbnz	r0, b852 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b844:	f004 fdbf 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b848:	b918      	cbnz	r0, b852 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b84a:	f004 fdf2 	bl	10432 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b84e:	2800      	cmp	r0, #0
    b850:	d002      	beq.n	b858 <MPSL_IRQ_CLOCK_Handler+0x80>
    b852:	4902      	ldr	r1, [pc, #8]	; (b85c <MPSL_IRQ_CLOCK_Handler+0x84>)
    b854:	2002      	movs	r0, #2
    b856:	6008      	str	r0, [r1, #0]
    b858:	bd10      	pop	{r4, pc}
    b85a:	0000      	.short	0x0000
    b85c:	40000c34 	.word	0x40000c34
    b860:	b570      	push	{r4, r5, r6, lr}
    b862:	f000 f99b 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b866:	f000 fabd 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b86a:	4c09      	ldr	r4, [pc, #36]	; (b890 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    b86c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b870:	b130      	cbz	r0, b880 <MPSL_IRQ_CLOCK_Handler+0xa8>
    b872:	f7ff ffe3 	bl	b83c <MPSL_IRQ_CLOCK_Handler+0x64>
    b876:	2001      	movs	r0, #1
    b878:	6128      	str	r0, [r5, #16]
    b87a:	2004      	movs	r0, #4
    b87c:	72a0      	strb	r0, [r4, #10]
    b87e:	e004      	b.n	b88a <MPSL_IRQ_CLOCK_Handler+0xb2>
    b880:	2003      	movs	r0, #3
    b882:	72a0      	strb	r0, [r4, #10]
    b884:	2001      	movs	r0, #1
    b886:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b88a:	2000      	movs	r0, #0
    b88c:	71e0      	strb	r0, [r4, #7]
    b88e:	bd70      	pop	{r4, r5, r6, pc}
    b890:	20000314 	.word	0x20000314
    b894:	b570      	push	{r4, r5, r6, lr}
    b896:	4c12      	ldr	r4, [pc, #72]	; (b8e0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    b898:	79a0      	ldrb	r0, [r4, #6]
    b89a:	b1e0      	cbz	r0, b8d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    b89c:	79e1      	ldrb	r1, [r4, #7]
    b89e:	1e40      	subs	r0, r0, #1
    b8a0:	4281      	cmp	r1, r0
    b8a2:	da18      	bge.n	b8d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    b8a4:	f000 fa9e 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b8a8:	4605      	mov	r5, r0
    b8aa:	f000 fb87 	bl	bfbc <mpsl_temperature_get>
    b8ae:	79a1      	ldrb	r1, [r4, #6]
    b8b0:	2901      	cmp	r1, #1
    b8b2:	d902      	bls.n	b8ba <MPSL_IRQ_CLOCK_Handler+0xe2>
    b8b4:	79e1      	ldrb	r1, [r4, #7]
    b8b6:	1c49      	adds	r1, r1, #1
    b8b8:	71e1      	strb	r1, [r4, #7]
    b8ba:	b10d      	cbz	r5, b8c0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    b8bc:	6961      	ldr	r1, [r4, #20]
    b8be:	e000      	b.n	b8c2 <MPSL_IRQ_CLOCK_Handler+0xea>
    b8c0:	6921      	ldr	r1, [r4, #16]
    b8c2:	1a41      	subs	r1, r0, r1
    b8c4:	2902      	cmp	r1, #2
    b8c6:	da02      	bge.n	b8ce <MPSL_IRQ_CLOCK_Handler+0xf6>
    b8c8:	f111 0f02 	cmn.w	r1, #2
    b8cc:	dc07      	bgt.n	b8de <MPSL_IRQ_CLOCK_Handler+0x106>
    b8ce:	b10d      	cbz	r5, b8d4 <MPSL_IRQ_CLOCK_Handler+0xfc>
    b8d0:	6160      	str	r0, [r4, #20]
    b8d2:	e000      	b.n	b8d6 <MPSL_IRQ_CLOCK_Handler+0xfe>
    b8d4:	6120      	str	r0, [r4, #16]
    b8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b8da:	f7ff bfc1 	b.w	b860 <MPSL_IRQ_CLOCK_Handler+0x88>
    b8de:	bd70      	pop	{r4, r5, r6, pc}
    b8e0:	20000314 	.word	0x20000314
    b8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8e8:	4606      	mov	r6, r0
    b8ea:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b8ee:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b8f2:	4628      	mov	r0, r5
    b8f4:	f004 fc9c 	bl	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b8f8:	4680      	mov	r8, r0
    b8fa:	f44f 7188 	mov.w	r1, #272	; 0x110
    b8fe:	4628      	mov	r0, r5
    b900:	f004 fc96 	bl	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b904:	4c27      	ldr	r4, [pc, #156]	; (b9a4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    b906:	4682      	mov	sl, r0
    b908:	7827      	ldrb	r7, [r4, #0]
    b90a:	f104 0008 	add.w	r0, r4, #8
    b90e:	f004 fd03 	bl	10318 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    b912:	b110      	cbz	r0, b91a <MPSL_IRQ_CLOCK_Handler+0x142>
    b914:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    b918:	e016      	b.n	b948 <MPSL_IRQ_CLOCK_Handler+0x170>
    b91a:	f04f 0901 	mov.w	r9, #1
    b91e:	b146      	cbz	r6, b932 <MPSL_IRQ_CLOCK_Handler+0x15a>
    b920:	7aa0      	ldrb	r0, [r4, #10]
    b922:	2803      	cmp	r0, #3
    b924:	d105      	bne.n	b932 <MPSL_IRQ_CLOCK_Handler+0x15a>
    b926:	2004      	movs	r0, #4
    b928:	72a0      	strb	r0, [r4, #10]
    b92a:	f7ff ff87 	bl	b83c <MPSL_IRQ_CLOCK_Handler+0x64>
    b92e:	f8c5 9010 	str.w	r9, [r5, #16]
    b932:	2600      	movs	r6, #0
    b934:	f1b8 0f00 	cmp.w	r8, #0
    b938:	d018      	beq.n	b96c <MPSL_IRQ_CLOCK_Handler+0x194>
    b93a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    b93e:	7aa0      	ldrb	r0, [r4, #10]
    b940:	2804      	cmp	r0, #4
    b942:	d004      	beq.n	b94e <MPSL_IRQ_CLOCK_Handler+0x176>
    b944:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    b948:	206d      	movs	r0, #109	; 0x6d
    b94a:	f000 fac3 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b94e:	f004 fd19 	bl	10384 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b952:	b928      	cbnz	r0, b960 <MPSL_IRQ_CLOCK_Handler+0x188>
    b954:	f004 fd37 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b958:	b910      	cbnz	r0, b960 <MPSL_IRQ_CLOCK_Handler+0x188>
    b95a:	f004 fd6a 	bl	10432 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b95e:	b108      	cbz	r0, b964 <MPSL_IRQ_CLOCK_Handler+0x18c>
    b960:	4811      	ldr	r0, [pc, #68]	; (b9a8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    b962:	6006      	str	r6, [r0, #0]
    b964:	2002      	movs	r0, #2
    b966:	72a0      	strb	r0, [r4, #10]
    b968:	f000 f8fc 	bl	bb64 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b96c:	f1ba 0f00 	cmp.w	sl, #0
    b970:	d008      	beq.n	b984 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    b972:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    b976:	7aa0      	ldrb	r0, [r4, #10]
    b978:	2802      	cmp	r0, #2
    b97a:	d101      	bne.n	b980 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    b97c:	f7ff ff8a 	bl	b894 <MPSL_IRQ_CLOCK_Handler+0xbc>
    b980:	f8c5 9014 	str.w	r9, [r5, #20]
    b984:	b13f      	cbz	r7, b996 <MPSL_IRQ_CLOCK_Handler+0x1be>
    b986:	7026      	strb	r6, [r4, #0]
    b988:	7aa0      	ldrb	r0, [r4, #10]
    b98a:	2802      	cmp	r0, #2
    b98c:	d101      	bne.n	b992 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    b98e:	f7ff ff67 	bl	b860 <MPSL_IRQ_CLOCK_Handler+0x88>
    b992:	f000 f8e7 	bl	bb64 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b996:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b99a:	4802      	ldr	r0, [pc, #8]	; (b9a4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    b99c:	3008      	adds	r0, #8
    b99e:	f004 bcd2 	b.w	10346 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    b9a2:	0000      	.short	0x0000
    b9a4:	20000314 	.word	0x20000314
    b9a8:	40000c34 	.word	0x40000c34
    b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9b0:	4c49      	ldr	r4, [pc, #292]	; (bad8 <MPSL_IRQ_CLOCK_Handler+0x300>)
    b9b2:	2700      	movs	r7, #0
    b9b4:	4606      	mov	r6, r0
    b9b6:	61a7      	str	r7, [r4, #24]
    b9b8:	7842      	ldrb	r2, [r0, #1]
    b9ba:	7881      	ldrb	r1, [r0, #2]
    b9bc:	7800      	ldrb	r0, [r0, #0]
    b9be:	72e0      	strb	r0, [r4, #11]
    b9c0:	7162      	strb	r2, [r4, #5]
    b9c2:	71a1      	strb	r1, [r4, #6]
    b9c4:	71e7      	strb	r7, [r4, #7]
    b9c6:	f04f 0801 	mov.w	r8, #1
    b9ca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b9ce:	2805      	cmp	r0, #5
    b9d0:	d225      	bcs.n	ba1e <MPSL_IRQ_CLOCK_Handler+0x246>
    b9d2:	e8df f000 	tbb	[pc, r0]
    b9d6:	0310      	.short	0x0310
    b9d8:	00222006 	.word	0x00222006
    b9dc:	f8c4 8018 	str.w	r8, [r4, #24]
    b9e0:	e009      	b.n	b9f6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    b9e2:	f000 f8db 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b9e6:	2101      	movs	r1, #1
    b9e8:	4628      	mov	r0, r5
    b9ea:	f004 fc26 	bl	1023a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    b9ee:	2800      	cmp	r0, #0
    b9f0:	d0f9      	beq.n	b9e6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    b9f2:	2002      	movs	r0, #2
    b9f4:	61a0      	str	r0, [r4, #24]
    b9f6:	f004 fc4c 	bl	10292 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    b9fa:	b1c0      	cbz	r0, ba2e <MPSL_IRQ_CLOCK_Handler+0x256>
    b9fc:	f000 fa0c 	bl	be18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    ba00:	7e21      	ldrb	r1, [r4, #24]
    ba02:	f001 0103 	and.w	r1, r1, #3
    ba06:	4288      	cmp	r0, r1
    ba08:	d111      	bne.n	ba2e <MPSL_IRQ_CLOCK_Handler+0x256>
    ba0a:	79b0      	ldrb	r0, [r6, #6]
    ba0c:	b160      	cbz	r0, ba28 <MPSL_IRQ_CLOCK_Handler+0x250>
    ba0e:	2002      	movs	r0, #2
    ba10:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ba14:	e044      	b.n	baa0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    ba16:	4831      	ldr	r0, [pc, #196]	; (badc <MPSL_IRQ_CLOCK_Handler+0x304>)
    ba18:	e7ec      	b.n	b9f4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    ba1a:	4831      	ldr	r0, [pc, #196]	; (bae0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    ba1c:	e7ea      	b.n	b9f4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    ba1e:	f240 313d 	movw	r1, #829	; 0x33d
    ba22:	206d      	movs	r0, #109	; 0x6d
    ba24:	f000 fa56 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba28:	f000 f9ca 	bl	bdc0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ba2c:	e038      	b.n	baa0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    ba2e:	f8c5 800c 	str.w	r8, [r5, #12]
    ba32:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    ba36:	69a0      	ldr	r0, [r4, #24]
    ba38:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    ba3c:	f004 fc8e 	bl	1035c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ba40:	b940      	cbnz	r0, ba54 <MPSL_IRQ_CLOCK_Handler+0x27c>
    ba42:	f004 fc95 	bl	10370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ba46:	b928      	cbnz	r0, ba54 <MPSL_IRQ_CLOCK_Handler+0x27c>
    ba48:	f004 fca9 	bl	1039e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ba4c:	b910      	cbnz	r0, ba54 <MPSL_IRQ_CLOCK_Handler+0x27c>
    ba4e:	f004 fcba 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba52:	b138      	cbz	r0, ba64 <MPSL_IRQ_CLOCK_Handler+0x28c>
    ba54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba58:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    ba5c:	4921      	ldr	r1, [pc, #132]	; (bae4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    ba5e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    ba62:	6008      	str	r0, [r1, #0]
    ba64:	f004 fc7a 	bl	1035c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ba68:	b940      	cbnz	r0, ba7c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    ba6a:	f004 fc81 	bl	10370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ba6e:	b928      	cbnz	r0, ba7c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    ba70:	f004 fc95 	bl	1039e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ba74:	b910      	cbnz	r0, ba7c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    ba76:	f004 fca6 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba7a:	b118      	cbz	r0, ba84 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    ba7c:	4919      	ldr	r1, [pc, #100]	; (bae4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    ba7e:	3110      	adds	r1, #16
    ba80:	f8c1 8000 	str.w	r8, [r1]
    ba84:	f8c5 8008 	str.w	r8, [r5, #8]
    ba88:	2002      	movs	r0, #2
    ba8a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    ba8e:	79b0      	ldrb	r0, [r6, #6]
    ba90:	b930      	cbnz	r0, baa0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    ba92:	f000 f829 	bl	bae8 <MPSL_IRQ_CLOCK_Handler+0x310>
    ba96:	2002      	movs	r0, #2
    ba98:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ba9c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    baa0:	79a0      	ldrb	r0, [r4, #6]
    baa2:	b170      	cbz	r0, bac2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    baa4:	7830      	ldrb	r0, [r6, #0]
    baa6:	b960      	cbnz	r0, bac2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    baa8:	f000 f99c 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    baac:	4606      	mov	r6, r0
    baae:	f000 fa85 	bl	bfbc <mpsl_temperature_get>
    bab2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bab6:	b116      	cbz	r6, babe <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bab8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    babc:	e001      	b.n	bac2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    babe:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bac2:	2101      	movs	r1, #1
    bac4:	4628      	mov	r0, r5
    bac6:	f004 fbb8 	bl	1023a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    baca:	b108      	cbz	r0, bad0 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bacc:	f000 f984 	bl	bdd8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bad0:	72a7      	strb	r7, [r4, #10]
    bad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bad6:	0000      	.short	0x0000
    bad8:	20000314 	.word	0x20000314
    badc:	00020001 	.word	0x00020001
    bae0:	00030001 	.word	0x00030001
    bae4:	4000053c 	.word	0x4000053c
    bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    baf0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    baf4:	f010 0f02 	tst.w	r0, #2
    baf8:	d011      	beq.n	bb1e <MPSL_IRQ_CLOCK_Handler+0x346>
    bafa:	4c16      	ldr	r4, [pc, #88]	; (bb54 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bafc:	6820      	ldr	r0, [r4, #0]
    bafe:	43c0      	mvns	r0, r0
    bb00:	f340 1600 	sbfx	r6, r0, #4, #1
    bb04:	6820      	ldr	r0, [r4, #0]
    bb06:	f040 0010 	orr.w	r0, r0, #16
    bb0a:	6020      	str	r0, [r4, #0]
    bb0c:	f44f 7782 	mov.w	r7, #260	; 0x104
    bb10:	4639      	mov	r1, r7
    bb12:	4628      	mov	r0, r5
    bb14:	1c76      	adds	r6, r6, #1
    bb16:	f004 fb8b 	bl	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bb1a:	b128      	cbz	r0, bb28 <MPSL_IRQ_CLOCK_Handler+0x350>
    bb1c:	e00a      	b.n	bb34 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bb1e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bb22:	206d      	movs	r0, #109	; 0x6d
    bb24:	f000 f9d6 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb28:	f004 fc8f 	bl	1044a <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bb2c:	e002      	b.n	bb34 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bb2e:	bf00      	nop
    bb30:	f004 fc89 	bl	10446 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bb34:	4639      	mov	r1, r7
    bb36:	4628      	mov	r0, r5
    bb38:	f004 fb7a 	bl	10230 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bb3c:	2800      	cmp	r0, #0
    bb3e:	d0f7      	beq.n	bb30 <MPSL_IRQ_CLOCK_Handler+0x358>
    bb40:	f000 f93e 	bl	bdc0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bb44:	2e00      	cmp	r6, #0
    bb46:	d103      	bne.n	bb50 <MPSL_IRQ_CLOCK_Handler+0x378>
    bb48:	6820      	ldr	r0, [r4, #0]
    bb4a:	f020 0010 	bic.w	r0, r0, #16
    bb4e:	6020      	str	r0, [r4, #0]
    bb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb54:	e000ed10 	.word	0xe000ed10

0000bb58 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    bb58:	4801      	ldr	r0, [pc, #4]	; (bb60 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    bb5a:	89c0      	ldrh	r0, [r0, #14]
    bb5c:	4770      	bx	lr
    bb5e:	0000      	.short	0x0000
    bb60:	20000314 	.word	0x20000314

0000bb64 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    bb64:	b510      	push	{r4, lr}
    bb66:	f3ef 8410 	mrs	r4, PRIMASK
    bb6a:	b672      	cpsid	i
    bb6c:	480a      	ldr	r0, [pc, #40]	; (bb98 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    bb6e:	7841      	ldrb	r1, [r0, #1]
    bb70:	b129      	cbz	r1, bb7e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    bb72:	7841      	ldrb	r1, [r0, #1]
    bb74:	1e49      	subs	r1, r1, #1
    bb76:	7041      	strb	r1, [r0, #1]
    bb78:	7841      	ldrb	r1, [r0, #1]
    bb7a:	b129      	cbz	r1, bb88 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    bb7c:	e008      	b.n	bb90 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bb7e:	f240 1119 	movw	r1, #281	; 0x119
    bb82:	206d      	movs	r0, #109	; 0x6d
    bb84:	f000 f9a6 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb88:	7880      	ldrb	r0, [r0, #2]
    bb8a:	b908      	cbnz	r0, bb90 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bb8c:	f000 f938 	bl	be00 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    bb90:	2c00      	cmp	r4, #0
    bb92:	d100      	bne.n	bb96 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    bb94:	b662      	cpsie	i
    bb96:	bd10      	pop	{r4, pc}
    bb98:	20000314 	.word	0x20000314

0000bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    bb9c:	b510      	push	{r4, lr}
    bb9e:	f3ef 8410 	mrs	r4, PRIMASK
    bba2:	b672      	cpsid	i
    bba4:	4806      	ldr	r0, [pc, #24]	; (bbc0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    bba6:	7841      	ldrb	r1, [r0, #1]
    bba8:	1c49      	adds	r1, r1, #1
    bbaa:	7041      	strb	r1, [r0, #1]
    bbac:	7840      	ldrb	r0, [r0, #1]
    bbae:	2801      	cmp	r0, #1
    bbb0:	d101      	bne.n	bbb6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    bbb2:	f004 fb59 	bl	10268 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    bbb6:	2c00      	cmp	r4, #0
    bbb8:	d100      	bne.n	bbbc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    bbba:	b662      	cpsie	i
    bbbc:	bd10      	pop	{r4, pc}
    bbbe:	0000      	.short	0x0000
    bbc0:	20000314 	.word	0x20000314

0000bbc4 <mpsl_clock_hfclk_release>:
    bbc4:	4805      	ldr	r0, [pc, #20]	; (bbdc <mpsl_clock_hfclk_release+0x18>)
    bbc6:	b510      	push	{r4, lr}
    bbc8:	78c1      	ldrb	r1, [r0, #3]
    bbca:	b121      	cbz	r1, bbd6 <mpsl_clock_hfclk_release+0x12>
    bbcc:	2100      	movs	r1, #0
    bbce:	7101      	strb	r1, [r0, #4]
    bbd0:	70c1      	strb	r1, [r0, #3]
    bbd2:	f7ff ffc7 	bl	bb64 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bbd6:	2000      	movs	r0, #0
    bbd8:	bd10      	pop	{r4, pc}
    bbda:	0000      	.short	0x0000
    bbdc:	20000314 	.word	0x20000314

0000bbe0 <mpsl_clock_hfclk_request>:
    bbe0:	b570      	push	{r4, r5, r6, lr}
    bbe2:	4c0c      	ldr	r4, [pc, #48]	; (bc14 <mpsl_clock_hfclk_request+0x34>)
    bbe4:	78e1      	ldrb	r1, [r4, #3]
    bbe6:	b961      	cbnz	r1, bc02 <mpsl_clock_hfclk_request+0x22>
    bbe8:	2501      	movs	r5, #1
    bbea:	70e5      	strb	r5, [r4, #3]
    bbec:	61e0      	str	r0, [r4, #28]
    bbee:	f7ff ffd5 	bl	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bbf2:	f000 f8f7 	bl	bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bbf6:	b130      	cbz	r0, bc06 <mpsl_clock_hfclk_request+0x26>
    bbf8:	69e0      	ldr	r0, [r4, #28]
    bbfa:	b110      	cbz	r0, bc02 <mpsl_clock_hfclk_request+0x22>
    bbfc:	4780      	blx	r0
    bbfe:	2000      	movs	r0, #0
    bc00:	61e0      	str	r0, [r4, #28]
    bc02:	2000      	movs	r0, #0
    bc04:	bd70      	pop	{r4, r5, r6, pc}
    bc06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bc0a:	7125      	strb	r5, [r4, #4]
    bc0c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    bc10:	e7f7      	b.n	bc02 <mpsl_clock_hfclk_request+0x22>
    bc12:	0000      	.short	0x0000
    bc14:	20000314 	.word	0x20000314

0000bc18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    bc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc1c:	0005      	movs	r5, r0
    bc1e:	f06f 0015 	mvn.w	r0, #21
    bc22:	d03f      	beq.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc24:	7829      	ldrb	r1, [r5, #0]
    bc26:	2904      	cmp	r1, #4
    bc28:	d83c      	bhi.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc2a:	2900      	cmp	r1, #0
    bc2c:	7869      	ldrb	r1, [r5, #1]
    bc2e:	d03b      	beq.n	bca8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    bc30:	2900      	cmp	r1, #0
    bc32:	d137      	bne.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc34:	78a9      	ldrb	r1, [r5, #2]
    bc36:	2900      	cmp	r1, #0
    bc38:	d134      	bne.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bc3a:	2000      	movs	r0, #0
    bc3c:	f004 fae7 	bl	1020e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    bc40:	2000      	movs	r0, #0
    bc42:	f004 fad7 	bl	101f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    bc46:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    bc4a:	f04f 31ff 	mov.w	r1, #4294967295
    bc4e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    bc52:	2600      	movs	r6, #0
    bc54:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    bc58:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    bc5c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    bc60:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    bc64:	4c14      	ldr	r4, [pc, #80]	; (bcb8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    bc66:	7066      	strb	r6, [r4, #1]
    bc68:	88a8      	ldrh	r0, [r5, #4]
    bc6a:	81a0      	strh	r0, [r4, #12]
    bc6c:	f004 faf3 	bl	10256 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    bc70:	2701      	movs	r7, #1
    bc72:	b108      	cbz	r0, bc78 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    bc74:	70e7      	strb	r7, [r4, #3]
    bc76:	7067      	strb	r7, [r4, #1]
    bc78:	2101      	movs	r1, #1
    bc7a:	4640      	mov	r0, r8
    bc7c:	f004 fadd 	bl	1023a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bc80:	b108      	cbz	r0, bc86 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    bc82:	f000 f8a9 	bl	bdd8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bc86:	f240 50f5 	movw	r0, #1525	; 0x5f5
    bc8a:	81e0      	strh	r0, [r4, #14]
    bc8c:	4628      	mov	r0, r5
    bc8e:	f7ff fe8d 	bl	b9ac <MPSL_IRQ_CLOCK_Handler+0x1d4>
    bc92:	7267      	strb	r7, [r4, #9]
    bc94:	2000      	movs	r0, #0
    bc96:	f004 faad 	bl	101f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    bc9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bc9e:	4630      	mov	r0, r6
    bca0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bca8:	2900      	cmp	r1, #0
    bcaa:	d0fb      	beq.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bcac:	2920      	cmp	r1, #32
    bcae:	d8f9      	bhi.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bcb0:	78a9      	ldrb	r1, [r5, #2]
    bcb2:	2921      	cmp	r1, #33	; 0x21
    bcb4:	d9c1      	bls.n	bc3a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    bcb6:	e7f5      	b.n	bca4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bcb8:	20000314 	.word	0x20000314

0000bcbc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    bcbc:	4801      	ldr	r0, [pc, #4]	; (bcc4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    bcbe:	8980      	ldrh	r0, [r0, #12]
    bcc0:	4770      	bx	lr
    bcc2:	0000      	.short	0x0000
    bcc4:	20000314 	.word	0x20000314

0000bcc8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    bcc8:	b510      	push	{r4, lr}
    bcca:	480d      	ldr	r0, [pc, #52]	; (bd00 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bccc:	f004 fb24 	bl	10318 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bcd0:	490b      	ldr	r1, [pc, #44]	; (bd00 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bcd2:	3908      	subs	r1, #8
    bcd4:	b148      	cbz	r0, bcea <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    bcd6:	2001      	movs	r0, #1
    bcd8:	7008      	strb	r0, [r1, #0]
    bcda:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bcde:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bce6:	f7ff bf59 	b.w	bb9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bcea:	7a88      	ldrb	r0, [r1, #10]
    bcec:	2802      	cmp	r0, #2
    bcee:	d101      	bne.n	bcf4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    bcf0:	f7ff fdb6 	bl	b860 <MPSL_IRQ_CLOCK_Handler+0x88>
    bcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcf8:	4801      	ldr	r0, [pc, #4]	; (bd00 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bcfa:	f004 bb24 	b.w	10346 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bcfe:	0000      	.short	0x0000
    bd00:	2000031c 	.word	0x2000031c

0000bd04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    bd04:	4802      	ldr	r0, [pc, #8]	; (bd10 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    bd06:	7a80      	ldrb	r0, [r0, #10]
    bd08:	2800      	cmp	r0, #0
    bd0a:	d000      	beq.n	bd0e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    bd0c:	2001      	movs	r0, #1
    bd0e:	4770      	bx	lr
    bd10:	20000314 	.word	0x20000314

0000bd14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd16:	4d1f      	ldr	r5, [pc, #124]	; (bd94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    bd18:	7ae8      	ldrb	r0, [r5, #11]
    bd1a:	2800      	cmp	r0, #0
    bd1c:	d10f      	bne.n	bd3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bd1e:	7e28      	ldrb	r0, [r5, #24]
    bd20:	f000 0003 	and.w	r0, r0, #3
    bd24:	f004 faa5 	bl	10272 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bd28:	2800      	cmp	r0, #0
    bd2a:	d008      	beq.n	bd3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bd2c:	f3ef 8110 	mrs	r1, PRIMASK
    bd30:	b672      	cpsid	i
    bd32:	f7ff ffe7 	bl	bd04 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    bd36:	b118      	cbz	r0, bd40 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    bd38:	2900      	cmp	r1, #0
    bd3a:	d100      	bne.n	bd3e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bd3c:	b662      	cpsie	i
    bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd40:	2601      	movs	r6, #1
    bd42:	72ae      	strb	r6, [r5, #10]
    bd44:	b901      	cbnz	r1, bd48 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    bd46:	b662      	cpsie	i
    bd48:	2018      	movs	r0, #24
    bd4a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    bd4e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bd52:	61a6      	str	r6, [r4, #24]
    bd54:	f44f 7020 	mov.w	r0, #640	; 0x280
    bd58:	f8ad 0000 	strh.w	r0, [sp]
    bd5c:	f8bd 0000 	ldrh.w	r0, [sp]
    bd60:	1e41      	subs	r1, r0, #1
    bd62:	f8ad 1000 	strh.w	r1, [sp]
    bd66:	d2f9      	bcs.n	bd5c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    bd68:	2700      	movs	r7, #0
    bd6a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    bd6e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    bd72:	4808      	ldr	r0, [pc, #32]	; (bd94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    bd74:	3008      	adds	r0, #8
    bd76:	f004 fae2 	bl	1033e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    bd7a:	702f      	strb	r7, [r5, #0]
    bd7c:	f7ff fd70 	bl	b860 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd80:	6166      	str	r6, [r4, #20]
    bd82:	7968      	ldrb	r0, [r5, #5]
    bd84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bd88:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bd8c:	2018      	movs	r0, #24
    bd8e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd94:	20000314 	.word	0x20000314

0000bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bd98:	4602      	mov	r2, r0
    bd9a:	b510      	push	{r4, lr}
    bd9c:	2000      	movs	r0, #0
    bd9e:	2900      	cmp	r1, #0
    bda0:	d00a      	beq.n	bdb8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    bda2:	2a00      	cmp	r2, #0
    bda4:	d008      	beq.n	bdb8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    bda6:	fba2 0101 	umull	r0, r1, r2, r1
    bdaa:	1e40      	subs	r0, r0, #1
    bdac:	4a03      	ldr	r2, [pc, #12]	; (bdbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    bdae:	f141 31ff 	adc.w	r1, r1, #4294967295
    bdb2:	f004 fb4c 	bl	1044e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    bdb6:	1c40      	adds	r0, r0, #1
    bdb8:	bd10      	pop	{r4, pc}
    bdba:	0000      	.short	0x0000
    bdbc:	000f4240 	.word	0x000f4240

0000bdc0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    bdc0:	b510      	push	{r4, lr}
    bdc2:	4c04      	ldr	r4, [pc, #16]	; (bdd4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    bdc4:	7e20      	ldrb	r0, [r4, #24]
    bdc6:	f000 0003 	and.w	r0, r0, #3
    bdca:	f004 fa52 	bl	10272 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bdce:	2800      	cmp	r0, #0
    bdd0:	d0f8      	beq.n	bdc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    bdd2:	bd10      	pop	{r4, pc}
    bdd4:	20000314 	.word	0x20000314

0000bdd8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    bdd8:	4901      	ldr	r1, [pc, #4]	; (bde0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    bdda:	2001      	movs	r0, #1
    bddc:	7008      	strb	r0, [r1, #0]
    bdde:	4770      	bx	lr
    bde0:	20000385 	.word	0x20000385

0000bde4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    bde4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bde8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bdec:	b918      	cbnz	r0, bdf6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    bdee:	4803      	ldr	r0, [pc, #12]	; (bdfc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    bdf0:	7800      	ldrb	r0, [r0, #0]
    bdf2:	2800      	cmp	r0, #0
    bdf4:	d000      	beq.n	bdf8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    bdf6:	2001      	movs	r0, #1
    bdf8:	4770      	bx	lr
    bdfa:	0000      	.short	0x0000
    bdfc:	20000385 	.word	0x20000385

0000be00 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    be00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    be04:	2101      	movs	r1, #1
    be06:	6041      	str	r1, [r0, #4]
    be08:	2100      	movs	r1, #0
    be0a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    be0e:	4801      	ldr	r0, [pc, #4]	; (be14 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    be10:	7001      	strb	r1, [r0, #0]
    be12:	4770      	bx	lr
    be14:	20000385 	.word	0x20000385

0000be18 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    be18:	4802      	ldr	r0, [pc, #8]	; (be24 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    be1a:	6800      	ldr	r0, [r0, #0]
    be1c:	f000 0003 	and.w	r0, r0, #3
    be20:	4770      	bx	lr
    be22:	0000      	.short	0x0000
    be24:	4000041c 	.word	0x4000041c
    be28:	b510      	push	{r4, lr}
    be2a:	b131      	cbz	r1, be3a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    be2c:	2901      	cmp	r1, #1
    be2e:	d007      	beq.n	be40 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    be30:	f240 3102 	movw	r1, #770	; 0x302
    be34:	a005      	add	r0, pc, #20	; (adr r0, be4c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    be36:	f000 f821 	bl	be7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    be3a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    be3e:	e001      	b.n	be44 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    be40:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    be44:	f000 0001 	and.w	r0, r0, #1
    be48:	bd10      	pop	{r4, pc}
    be4a:	0000      	.short	0x0000
    be4c:	5f66726e 	.word	0x5f66726e
    be50:	636f6c63 	.word	0x636f6c63
    be54:	00682e6b 	.word	0x00682e6b
    be58:	f3bf 8f4f 	dsb	sy
    be5c:	4805      	ldr	r0, [pc, #20]	; (be74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    be5e:	6801      	ldr	r1, [r0, #0]
    be60:	4a05      	ldr	r2, [pc, #20]	; (be78 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    be62:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    be66:	4311      	orrs	r1, r2
    be68:	6001      	str	r1, [r0, #0]
    be6a:	f3bf 8f4f 	dsb	sy
    be6e:	bf00      	nop
    be70:	e7fd      	b.n	be6e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    be72:	0000      	.short	0x0000
    be74:	e000ed0c 	.word	0xe000ed0c
    be78:	05fa0004 	.word	0x05fa0004

0000be7c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    be7c:	b672      	cpsid	i
    be7e:	4a03      	ldr	r2, [pc, #12]	; (be8c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    be80:	6852      	ldr	r2, [r2, #4]
    be82:	b102      	cbz	r2, be86 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    be84:	4790      	blx	r2
    be86:	f7ff ffe7 	bl	be58 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    be8a:	0000      	.short	0x0000
    be8c:	20000334 	.word	0x20000334
    be90:	4806      	ldr	r0, [pc, #24]	; (beac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    be92:	b510      	push	{r4, lr}
    be94:	2100      	movs	r1, #0
    be96:	6001      	str	r1, [r0, #0]
    be98:	2101      	movs	r1, #1
    be9a:	6001      	str	r1, [r0, #0]
    be9c:	4608      	mov	r0, r1
    be9e:	f004 fa0f 	bl	102c0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    bea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bea6:	2001      	movs	r0, #1
    bea8:	f004 b9fd 	b.w	102a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    beac:	40001ffc 	.word	0x40001ffc
    beb0:	4807      	ldr	r0, [pc, #28]	; (bed0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    beb2:	b510      	push	{r4, lr}
    beb4:	2101      	movs	r1, #1
    beb6:	6041      	str	r1, [r0, #4]
    beb8:	1e89      	subs	r1, r1, #2
    beba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bebe:	200c      	movs	r0, #12
    bec0:	f004 f9fe 	bl	102c0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    bec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bec8:	200c      	movs	r0, #12
    beca:	f004 b9ec 	b.w	102a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bece:	0000      	.short	0x0000
    bed0:	4000c000 	.word	0x4000c000

0000bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    bed4:	b50e      	push	{r1, r2, r3, lr}
    bed6:	b672      	cpsid	i
    bed8:	4a0f      	ldr	r2, [pc, #60]	; (bf18 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    beda:	6855      	ldr	r5, [r2, #4]
    bedc:	b1d5      	cbz	r5, bf14 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    bede:	2200      	movs	r2, #0
    bee0:	4603      	mov	r3, r0
    bee2:	466e      	mov	r6, sp
    bee4:	240a      	movs	r4, #10
    bee6:	e003      	b.n	bef0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    bee8:	fbb0 f0f4 	udiv	r0, r0, r4
    beec:	1c52      	adds	r2, r2, #1
    beee:	b2d2      	uxtb	r2, r2
    bef0:	2800      	cmp	r0, #0
    bef2:	d1f9      	bne.n	bee8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    bef4:	54b0      	strb	r0, [r6, r2]
    bef6:	e009      	b.n	bf0c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    bef8:	fbb3 f0f4 	udiv	r0, r3, r4
    befc:	fb04 3010 	mls	r0, r4, r0, r3
    bf00:	fbb3 f3f4 	udiv	r3, r3, r4
    bf04:	1e52      	subs	r2, r2, #1
    bf06:	b2d2      	uxtb	r2, r2
    bf08:	3030      	adds	r0, #48	; 0x30
    bf0a:	54b0      	strb	r0, [r6, r2]
    bf0c:	2a00      	cmp	r2, #0
    bf0e:	d1f3      	bne.n	bef8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    bf10:	4630      	mov	r0, r6
    bf12:	47a8      	blx	r5
    bf14:	f7ff ffa0 	bl	be58 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    bf18:	20000334 	.word	0x20000334

0000bf1c <mpsl_init>:
    bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf20:	4c18      	ldr	r4, [pc, #96]	; (bf84 <mpsl_init+0x68>)
    bf22:	4606      	mov	r6, r0
    bf24:	4617      	mov	r7, r2
    bf26:	7860      	ldrb	r0, [r4, #1]
    bf28:	460d      	mov	r5, r1
    bf2a:	b118      	cbz	r0, bf34 <mpsl_init+0x18>
    bf2c:	f04f 30ff 	mov.w	r0, #4294967295
    bf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf34:	f7fc fb62 	bl	85fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    bf38:	b906      	cbnz	r6, bf3c <mpsl_init+0x20>
    bf3a:	4e13      	ldr	r6, [pc, #76]	; (bf88 <mpsl_init+0x6c>)
    bf3c:	6067      	str	r7, [r4, #4]
    bf3e:	7025      	strb	r5, [r4, #0]
    bf40:	f7ff ffa6 	bl	be90 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    bf44:	f7ff ffb4 	bl	beb0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    bf48:	4630      	mov	r0, r6
    bf4a:	f7ff fe65 	bl	bc18 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    bf4e:	0006      	movs	r6, r0
    bf50:	d1ee      	bne.n	bf30 <mpsl_init+0x14>
    bf52:	f7fe fe29 	bl	aba8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    bf56:	f7ff fedd 	bl	bd14 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bf5a:	f004 f918 	bl	1018e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    bf5e:	4628      	mov	r0, r5
    bf60:	f004 f9a1 	bl	102a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    bf64:	2001      	movs	r0, #1
    bf66:	2d00      	cmp	r5, #0
    bf68:	db09      	blt.n	bf7e <mpsl_init+0x62>
    bf6a:	f005 011f 	and.w	r1, r5, #31
    bf6e:	fa00 f101 	lsl.w	r1, r0, r1
    bf72:	096a      	lsrs	r2, r5, #5
    bf74:	0092      	lsls	r2, r2, #2
    bf76:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    bf7a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    bf7e:	7060      	strb	r0, [r4, #1]
    bf80:	4630      	mov	r0, r6
    bf82:	e7d5      	b.n	bf30 <mpsl_init+0x14>
    bf84:	20000334 	.word	0x20000334
    bf88:	000102e2 	.word	0x000102e2

0000bf8c <mpsl_is_initialized>:
    bf8c:	4801      	ldr	r0, [pc, #4]	; (bf94 <mpsl_is_initialized+0x8>)
    bf8e:	7840      	ldrb	r0, [r0, #1]
    bf90:	4770      	bx	lr
    bf92:	0000      	.short	0x0000
    bf94:	20000334 	.word	0x20000334

0000bf98 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    bf98:	4807      	ldr	r0, [pc, #28]	; (bfb8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    bf9a:	f990 0000 	ldrsb.w	r0, [r0]
    bf9e:	2800      	cmp	r0, #0
    bfa0:	db09      	blt.n	bfb6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    bfa2:	f000 021f 	and.w	r2, r0, #31
    bfa6:	2101      	movs	r1, #1
    bfa8:	4091      	lsls	r1, r2
    bfaa:	0940      	lsrs	r0, r0, #5
    bfac:	0080      	lsls	r0, r0, #2
    bfae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bfb2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bfb6:	4770      	bx	lr
    bfb8:	20000334 	.word	0x20000334

0000bfbc <mpsl_temperature_get>:
    bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfc0:	2501      	movs	r5, #1
    bfc2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bfc6:	0329      	lsls	r1, r5, #12
    bfc8:	f04f 0800 	mov.w	r8, #0
    bfcc:	4640      	mov	r0, r8
    bfce:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    bfd2:	f3bf 8f4f 	dsb	sy
    bfd6:	f3bf 8f6f 	isb	sy
    bfda:	4c16      	ldr	r4, [pc, #88]	; (c034 <mpsl_temperature_get+0x78>)
    bfdc:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    bfe0:	200c      	movs	r0, #12
    bfe2:	f004 f98c 	bl	102fe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    bfe6:	4e14      	ldr	r6, [pc, #80]	; (c038 <mpsl_temperature_get+0x7c>)
    bfe8:	6830      	ldr	r0, [r6, #0]
    bfea:	43c0      	mvns	r0, r0
    bfec:	f340 1700 	sbfx	r7, r0, #4, #1
    bff0:	6830      	ldr	r0, [r6, #0]
    bff2:	f040 0010 	orr.w	r0, r0, #16
    bff6:	6030      	str	r0, [r6, #0]
    bff8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    bffc:	6025      	str	r5, [r4, #0]
    bffe:	1c7f      	adds	r7, r7, #1
    c000:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c004:	b108      	cbz	r0, c00a <mpsl_temperature_get+0x4e>
    c006:	b11f      	cbz	r7, c010 <mpsl_temperature_get+0x54>
    c008:	e006      	b.n	c018 <mpsl_temperature_get+0x5c>
    c00a:	f004 fa1c 	bl	10446 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c00e:	e7f7      	b.n	c000 <mpsl_temperature_get+0x44>
    c010:	6830      	ldr	r0, [r6, #0]
    c012:	f020 0010 	bic.w	r0, r0, #16
    c016:	6030      	str	r0, [r6, #0]
    c018:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c01c:	6065      	str	r5, [r4, #4]
    c01e:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c022:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c026:	200c      	movs	r0, #12
    c028:	f004 f969 	bl	102fe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c02c:	4630      	mov	r0, r6
    c02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c032:	0000      	.short	0x0000
    c034:	4000c000 	.word	0x4000c000
    c038:	e000ed10 	.word	0xe000ed10

0000c03c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c03c:	b510      	push	{r4, lr}
    c03e:	4602      	mov	r2, r0
    c040:	2005      	movs	r0, #5
    c042:	490c      	ldr	r1, [pc, #48]	; (c074 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c044:	e004      	b.n	c050 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c046:	bf00      	nop
    c048:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c04c:	791b      	ldrb	r3, [r3, #4]
    c04e:	b133      	cbz	r3, c05e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c050:	1e40      	subs	r0, r0, #1
    c052:	b2c0      	uxtb	r0, r0
    c054:	d2f8      	bcs.n	c048 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c056:	2148      	movs	r1, #72	; 0x48
    c058:	2069      	movs	r0, #105	; 0x69
    c05a:	f7ff ff3b 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c05e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c062:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c066:	2200      	movs	r2, #0
    c068:	714a      	strb	r2, [r1, #5]
    c06a:	718a      	strb	r2, [r1, #6]
    c06c:	2201      	movs	r2, #1
    c06e:	710a      	strb	r2, [r1, #4]
    c070:	bd10      	pop	{r4, pc}
    c072:	0000      	.short	0x0000
    c074:	20001278 	.word	0x20001278

0000c078 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c078:	b510      	push	{r4, lr}
    c07a:	2805      	cmp	r0, #5
    c07c:	d301      	bcc.n	c082 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c07e:	2158      	movs	r1, #88	; 0x58
    c080:	e006      	b.n	c090 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c082:	490a      	ldr	r1, [pc, #40]	; (c0ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c084:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c088:	7901      	ldrb	r1, [r0, #4]
    c08a:	2901      	cmp	r1, #1
    c08c:	d003      	beq.n	c096 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c08e:	2159      	movs	r1, #89	; 0x59
    c090:	2069      	movs	r0, #105	; 0x69
    c092:	f7ff ff1f 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c096:	7941      	ldrb	r1, [r0, #5]
    c098:	7982      	ldrb	r2, [r0, #6]
    c09a:	1c49      	adds	r1, r1, #1
    c09c:	b2c9      	uxtb	r1, r1
    c09e:	428a      	cmp	r2, r1
    c0a0:	d000      	beq.n	c0a4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c0a2:	7141      	strb	r1, [r0, #5]
    c0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0a8:	f7ff bf76 	b.w	bf98 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c0ac:	20001278 	.word	0x20001278

0000c0b0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c0b0:	b510      	push	{r4, lr}
    c0b2:	2805      	cmp	r0, #5
    c0b4:	d303      	bcc.n	c0be <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c0b6:	214f      	movs	r1, #79	; 0x4f
    c0b8:	2069      	movs	r0, #105	; 0x69
    c0ba:	f7ff ff0b 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0be:	4a03      	ldr	r2, [pc, #12]	; (c0cc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c0c0:	2100      	movs	r1, #0
    c0c2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c0c6:	7101      	strb	r1, [r0, #4]
    c0c8:	bd10      	pop	{r4, pc}
    c0ca:	0000      	.short	0x0000
    c0cc:	20001278 	.word	0x20001278

0000c0d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c0d0:	b570      	push	{r4, r5, r6, lr}
    c0d2:	2505      	movs	r5, #5
    c0d4:	4e0e      	ldr	r6, [pc, #56]	; (c110 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c0d6:	4c0f      	ldr	r4, [pc, #60]	; (c114 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c0d8:	e016      	b.n	c108 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c0da:	7821      	ldrb	r1, [r4, #0]
    c0dc:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c0e0:	7902      	ldrb	r2, [r0, #4]
    c0e2:	2a01      	cmp	r2, #1
    c0e4:	d108      	bne.n	c0f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c0e6:	7942      	ldrb	r2, [r0, #5]
    c0e8:	7983      	ldrb	r3, [r0, #6]
    c0ea:	429a      	cmp	r2, r3
    c0ec:	d004      	beq.n	c0f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c0ee:	7942      	ldrb	r2, [r0, #5]
    c0f0:	7182      	strb	r2, [r0, #6]
    c0f2:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c0f6:	4780      	blx	r0
    c0f8:	7820      	ldrb	r0, [r4, #0]
    c0fa:	1c40      	adds	r0, r0, #1
    c0fc:	b2c0      	uxtb	r0, r0
    c0fe:	7020      	strb	r0, [r4, #0]
    c100:	2805      	cmp	r0, #5
    c102:	d301      	bcc.n	c108 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c104:	2000      	movs	r0, #0
    c106:	7020      	strb	r0, [r4, #0]
    c108:	1e6d      	subs	r5, r5, #1
    c10a:	b2ed      	uxtb	r5, r5
    c10c:	d2e5      	bcs.n	c0da <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c10e:	bd70      	pop	{r4, r5, r6, pc}
    c110:	20001278 	.word	0x20001278
    c114:	20000386 	.word	0x20000386

0000c118 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c118:	b500      	push	{lr}
    c11a:	f004 f91f 	bl	1035c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c11e:	b940      	cbnz	r0, c132 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c120:	f004 f926 	bl	10370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c124:	b928      	cbnz	r0, c132 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c126:	f004 f93a 	bl	1039e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c12a:	b910      	cbnz	r0, c132 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c12c:	f004 f94b 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c130:	b108      	cbz	r0, c136 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c132:	4802      	ldr	r0, [pc, #8]	; (c13c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c134:	bd00      	pop	{pc}
    c136:	4802      	ldr	r0, [pc, #8]	; (c140 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c138:	bd00      	pop	{pc}
    c13a:	0000      	.short	0x0000
    c13c:	4000050c 	.word	0x4000050c
    c140:	4001e700 	.word	0x4001e700
    c144:	b510      	push	{r4, lr}
    c146:	f004 f93e 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c14a:	b330      	cbz	r0, c19a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c14c:	f3ef 8010 	mrs	r0, PRIMASK
    c150:	b1c8      	cbz	r0, c186 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c152:	2100      	movs	r1, #0
    c154:	b672      	cpsid	i
    c156:	4812      	ldr	r0, [pc, #72]	; (c1a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c158:	6802      	ldr	r2, [r0, #0]
    c15a:	6803      	ldr	r3, [r0, #0]
    c15c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c160:	f043 0310 	orr.w	r3, r3, #16
    c164:	6003      	str	r3, [r0, #0]
    c166:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c16a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c16e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c172:	431c      	orrs	r4, r3
    c174:	d000      	beq.n	c178 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c176:	bf40      	sev
    c178:	bf20      	wfe
    c17a:	bf00      	nop
    c17c:	bf00      	nop
    c17e:	bf00      	nop
    c180:	bf00      	nop
    c182:	b112      	cbz	r2, c18a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c184:	e005      	b.n	c192 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c186:	2101      	movs	r1, #1
    c188:	e7e4      	b.n	c154 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c18a:	6802      	ldr	r2, [r0, #0]
    c18c:	f022 0210 	bic.w	r2, r2, #16
    c190:	6002      	str	r2, [r0, #0]
    c192:	2900      	cmp	r1, #0
    c194:	d000      	beq.n	c198 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c196:	b662      	cpsie	i
    c198:	bd10      	pop	{r4, pc}
    c19a:	bf20      	wfe
    c19c:	bd10      	pop	{r4, pc}
    c19e:	0000      	.short	0x0000
    c1a0:	e000ed10 	.word	0xe000ed10

0000c1a4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c1a4:	4901      	ldr	r1, [pc, #4]	; (c1ac <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c1a6:	2001      	movs	r0, #1
    c1a8:	7088      	strb	r0, [r1, #2]
    c1aa:	4770      	bx	lr
    c1ac:	2000033c 	.word	0x2000033c

0000c1b0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c1b0:	000106c7 000106ff 000106e9 000106d7     ................
    c1c0:	000106e3 000106d1 000106c5 000106c3     ................
    c1d0:	000106fb 000106ef 000106dd 000106cb     ................
    c1e0:	000106bd 000106b5 000106b9 000106af     ................

0000c1f0 <mpsl_fem_disable>:
    c1f0:	4801      	ldr	r0, [pc, #4]	; (c1f8 <mpsl_fem_disable+0x8>)
    c1f2:	6800      	ldr	r0, [r0, #0]
    c1f4:	6800      	ldr	r0, [r0, #0]
    c1f6:	4700      	bx	r0
    c1f8:	20000350 	.word	0x20000350

0000c1fc <mpsl_fem_lna_configuration_clear>:
    c1fc:	4801      	ldr	r0, [pc, #4]	; (c204 <mpsl_fem_lna_configuration_clear+0x8>)
    c1fe:	6800      	ldr	r0, [r0, #0]
    c200:	6940      	ldr	r0, [r0, #20]
    c202:	4700      	bx	r0
    c204:	20000350 	.word	0x20000350

0000c208 <mpsl_fem_lna_configuration_set>:
    c208:	4a01      	ldr	r2, [pc, #4]	; (c210 <mpsl_fem_lna_configuration_set+0x8>)
    c20a:	6812      	ldr	r2, [r2, #0]
    c20c:	68d2      	ldr	r2, [r2, #12]
    c20e:	4710      	bx	r2
    c210:	20000350 	.word	0x20000350

0000c214 <mpsl_fem_lna_is_configured>:
    c214:	4901      	ldr	r1, [pc, #4]	; (c21c <mpsl_fem_lna_is_configured+0x8>)
    c216:	6809      	ldr	r1, [r1, #0]
    c218:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c21a:	4708      	bx	r1
    c21c:	20000350 	.word	0x20000350

0000c220 <mpsl_fem_pa_configuration_clear>:
    c220:	4801      	ldr	r0, [pc, #4]	; (c228 <mpsl_fem_pa_configuration_clear+0x8>)
    c222:	6800      	ldr	r0, [r0, #0]
    c224:	6900      	ldr	r0, [r0, #16]
    c226:	4700      	bx	r0
    c228:	20000350 	.word	0x20000350

0000c22c <mpsl_fem_pa_configuration_set>:
    c22c:	4a01      	ldr	r2, [pc, #4]	; (c234 <mpsl_fem_pa_configuration_set+0x8>)
    c22e:	6812      	ldr	r2, [r2, #0]
    c230:	6892      	ldr	r2, [r2, #8]
    c232:	4710      	bx	r2
    c234:	20000350 	.word	0x20000350

0000c238 <mpsl_fem_pa_gain_set>:
    c238:	4901      	ldr	r1, [pc, #4]	; (c240 <mpsl_fem_pa_gain_set+0x8>)
    c23a:	6809      	ldr	r1, [r1, #0]
    c23c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c23e:	4708      	bx	r1
    c240:	20000350 	.word	0x20000350

0000c244 <mpsl_fem_pa_is_configured>:
    c244:	4901      	ldr	r1, [pc, #4]	; (c24c <mpsl_fem_pa_is_configured+0x8>)
    c246:	6809      	ldr	r1, [r1, #0]
    c248:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c24a:	4708      	bx	r1
    c24c:	20000350 	.word	0x20000350

0000c250 <mpsl_fem_tx_power_split>:
    c250:	b430      	push	{r4, r5}
    c252:	4c03      	ldr	r4, [pc, #12]	; (c260 <mpsl_fem_tx_power_split+0x10>)
    c254:	6824      	ldr	r4, [r4, #0]
    c256:	6864      	ldr	r4, [r4, #4]
    c258:	46a4      	mov	ip, r4
    c25a:	bc30      	pop	{r4, r5}
    c25c:	4760      	bx	ip
    c25e:	0000      	.short	0x0000
    c260:	20000350 	.word	0x20000350

0000c264 <mpsl_fem_device_config_254_apply_get>:
    c264:	4801      	ldr	r0, [pc, #4]	; (c26c <mpsl_fem_device_config_254_apply_get+0x8>)
    c266:	7800      	ldrb	r0, [r0, #0]
    c268:	4770      	bx	lr
    c26a:	0000      	.short	0x0000
    c26c:	20000387 	.word	0x20000387

0000c270 <__udivmoddi4>:
    c270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c274:	4686      	mov	lr, r0
    c276:	468c      	mov	ip, r1
    c278:	4608      	mov	r0, r1
    c27a:	9e08      	ldr	r6, [sp, #32]
    c27c:	4615      	mov	r5, r2
    c27e:	4674      	mov	r4, lr
    c280:	4619      	mov	r1, r3
    c282:	2b00      	cmp	r3, #0
    c284:	f040 80c2 	bne.w	c40c <__udivmoddi4+0x19c>
    c288:	4285      	cmp	r5, r0
    c28a:	fab2 f282 	clz	r2, r2
    c28e:	d945      	bls.n	c31c <__udivmoddi4+0xac>
    c290:	b14a      	cbz	r2, c2a6 <__udivmoddi4+0x36>
    c292:	f1c2 0320 	rsb	r3, r2, #32
    c296:	fa00 fc02 	lsl.w	ip, r0, r2
    c29a:	fa2e f303 	lsr.w	r3, lr, r3
    c29e:	4095      	lsls	r5, r2
    c2a0:	ea43 0c0c 	orr.w	ip, r3, ip
    c2a4:	4094      	lsls	r4, r2
    c2a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2aa:	b2a8      	uxth	r0, r5
    c2ac:	fbbc f8fe 	udiv	r8, ip, lr
    c2b0:	0c23      	lsrs	r3, r4, #16
    c2b2:	fb0e cc18 	mls	ip, lr, r8, ip
    c2b6:	fb08 f900 	mul.w	r9, r8, r0
    c2ba:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c2be:	4599      	cmp	r9, r3
    c2c0:	d928      	bls.n	c314 <__udivmoddi4+0xa4>
    c2c2:	18eb      	adds	r3, r5, r3
    c2c4:	f108 37ff 	add.w	r7, r8, #4294967295
    c2c8:	d204      	bcs.n	c2d4 <__udivmoddi4+0x64>
    c2ca:	4599      	cmp	r9, r3
    c2cc:	d902      	bls.n	c2d4 <__udivmoddi4+0x64>
    c2ce:	f1a8 0702 	sub.w	r7, r8, #2
    c2d2:	442b      	add	r3, r5
    c2d4:	eba3 0309 	sub.w	r3, r3, r9
    c2d8:	b2a4      	uxth	r4, r4
    c2da:	fbb3 fcfe 	udiv	ip, r3, lr
    c2de:	fb0e 331c 	mls	r3, lr, ip, r3
    c2e2:	fb0c f000 	mul.w	r0, ip, r0
    c2e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c2ea:	42a0      	cmp	r0, r4
    c2ec:	d914      	bls.n	c318 <__udivmoddi4+0xa8>
    c2ee:	192c      	adds	r4, r5, r4
    c2f0:	f10c 33ff 	add.w	r3, ip, #4294967295
    c2f4:	d204      	bcs.n	c300 <__udivmoddi4+0x90>
    c2f6:	42a0      	cmp	r0, r4
    c2f8:	d902      	bls.n	c300 <__udivmoddi4+0x90>
    c2fa:	f1ac 0302 	sub.w	r3, ip, #2
    c2fe:	442c      	add	r4, r5
    c300:	1a24      	subs	r4, r4, r0
    c302:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c306:	b11e      	cbz	r6, c310 <__udivmoddi4+0xa0>
    c308:	40d4      	lsrs	r4, r2
    c30a:	2300      	movs	r3, #0
    c30c:	6034      	str	r4, [r6, #0]
    c30e:	6073      	str	r3, [r6, #4]
    c310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c314:	4647      	mov	r7, r8
    c316:	e7dd      	b.n	c2d4 <__udivmoddi4+0x64>
    c318:	4663      	mov	r3, ip
    c31a:	e7f1      	b.n	c300 <__udivmoddi4+0x90>
    c31c:	bb92      	cbnz	r2, c384 <__udivmoddi4+0x114>
    c31e:	1b43      	subs	r3, r0, r5
    c320:	2101      	movs	r1, #1
    c322:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c326:	b2af      	uxth	r7, r5
    c328:	fbb3 fcfe 	udiv	ip, r3, lr
    c32c:	0c20      	lsrs	r0, r4, #16
    c32e:	fb0e 331c 	mls	r3, lr, ip, r3
    c332:	fb0c f807 	mul.w	r8, ip, r7
    c336:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c33a:	4598      	cmp	r8, r3
    c33c:	d962      	bls.n	c404 <__udivmoddi4+0x194>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	f10c 30ff 	add.w	r0, ip, #4294967295
    c344:	d204      	bcs.n	c350 <__udivmoddi4+0xe0>
    c346:	4598      	cmp	r8, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe0>
    c34a:	f1ac 0002 	sub.w	r0, ip, #2
    c34e:	442b      	add	r3, r5
    c350:	eba3 0308 	sub.w	r3, r3, r8
    c354:	b2a4      	uxth	r4, r4
    c356:	fbb3 fcfe 	udiv	ip, r3, lr
    c35a:	fb0e 331c 	mls	r3, lr, ip, r3
    c35e:	fb0c f707 	mul.w	r7, ip, r7
    c362:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c366:	42a7      	cmp	r7, r4
    c368:	d94e      	bls.n	c408 <__udivmoddi4+0x198>
    c36a:	192c      	adds	r4, r5, r4
    c36c:	f10c 33ff 	add.w	r3, ip, #4294967295
    c370:	d204      	bcs.n	c37c <__udivmoddi4+0x10c>
    c372:	42a7      	cmp	r7, r4
    c374:	d902      	bls.n	c37c <__udivmoddi4+0x10c>
    c376:	f1ac 0302 	sub.w	r3, ip, #2
    c37a:	442c      	add	r4, r5
    c37c:	1be4      	subs	r4, r4, r7
    c37e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c382:	e7c0      	b.n	c306 <__udivmoddi4+0x96>
    c384:	f1c2 0320 	rsb	r3, r2, #32
    c388:	fa20 f103 	lsr.w	r1, r0, r3
    c38c:	4095      	lsls	r5, r2
    c38e:	4090      	lsls	r0, r2
    c390:	fa2e f303 	lsr.w	r3, lr, r3
    c394:	4303      	orrs	r3, r0
    c396:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c39a:	b2af      	uxth	r7, r5
    c39c:	fbb1 fcfe 	udiv	ip, r1, lr
    c3a0:	fb0e 101c 	mls	r0, lr, ip, r1
    c3a4:	0c19      	lsrs	r1, r3, #16
    c3a6:	fb0c f807 	mul.w	r8, ip, r7
    c3aa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c3ae:	4588      	cmp	r8, r1
    c3b0:	fa04 f402 	lsl.w	r4, r4, r2
    c3b4:	d922      	bls.n	c3fc <__udivmoddi4+0x18c>
    c3b6:	1869      	adds	r1, r5, r1
    c3b8:	f10c 30ff 	add.w	r0, ip, #4294967295
    c3bc:	d204      	bcs.n	c3c8 <__udivmoddi4+0x158>
    c3be:	4588      	cmp	r8, r1
    c3c0:	d902      	bls.n	c3c8 <__udivmoddi4+0x158>
    c3c2:	f1ac 0002 	sub.w	r0, ip, #2
    c3c6:	4429      	add	r1, r5
    c3c8:	eba1 0108 	sub.w	r1, r1, r8
    c3cc:	b29b      	uxth	r3, r3
    c3ce:	fbb1 fcfe 	udiv	ip, r1, lr
    c3d2:	fb0e 111c 	mls	r1, lr, ip, r1
    c3d6:	fb0c f707 	mul.w	r7, ip, r7
    c3da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c3de:	429f      	cmp	r7, r3
    c3e0:	d90e      	bls.n	c400 <__udivmoddi4+0x190>
    c3e2:	18eb      	adds	r3, r5, r3
    c3e4:	f10c 31ff 	add.w	r1, ip, #4294967295
    c3e8:	d204      	bcs.n	c3f4 <__udivmoddi4+0x184>
    c3ea:	429f      	cmp	r7, r3
    c3ec:	d902      	bls.n	c3f4 <__udivmoddi4+0x184>
    c3ee:	f1ac 0102 	sub.w	r1, ip, #2
    c3f2:	442b      	add	r3, r5
    c3f4:	1bdb      	subs	r3, r3, r7
    c3f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c3fa:	e792      	b.n	c322 <__udivmoddi4+0xb2>
    c3fc:	4660      	mov	r0, ip
    c3fe:	e7e3      	b.n	c3c8 <__udivmoddi4+0x158>
    c400:	4661      	mov	r1, ip
    c402:	e7f7      	b.n	c3f4 <__udivmoddi4+0x184>
    c404:	4660      	mov	r0, ip
    c406:	e7a3      	b.n	c350 <__udivmoddi4+0xe0>
    c408:	4663      	mov	r3, ip
    c40a:	e7b7      	b.n	c37c <__udivmoddi4+0x10c>
    c40c:	4283      	cmp	r3, r0
    c40e:	d906      	bls.n	c41e <__udivmoddi4+0x1ae>
    c410:	b916      	cbnz	r6, c418 <__udivmoddi4+0x1a8>
    c412:	2100      	movs	r1, #0
    c414:	4608      	mov	r0, r1
    c416:	e77b      	b.n	c310 <__udivmoddi4+0xa0>
    c418:	e9c6 e000 	strd	lr, r0, [r6]
    c41c:	e7f9      	b.n	c412 <__udivmoddi4+0x1a2>
    c41e:	fab3 f783 	clz	r7, r3
    c422:	b98f      	cbnz	r7, c448 <__udivmoddi4+0x1d8>
    c424:	4283      	cmp	r3, r0
    c426:	d301      	bcc.n	c42c <__udivmoddi4+0x1bc>
    c428:	4572      	cmp	r2, lr
    c42a:	d808      	bhi.n	c43e <__udivmoddi4+0x1ce>
    c42c:	ebbe 0402 	subs.w	r4, lr, r2
    c430:	eb60 0303 	sbc.w	r3, r0, r3
    c434:	2001      	movs	r0, #1
    c436:	469c      	mov	ip, r3
    c438:	b91e      	cbnz	r6, c442 <__udivmoddi4+0x1d2>
    c43a:	2100      	movs	r1, #0
    c43c:	e768      	b.n	c310 <__udivmoddi4+0xa0>
    c43e:	4638      	mov	r0, r7
    c440:	e7fa      	b.n	c438 <__udivmoddi4+0x1c8>
    c442:	e9c6 4c00 	strd	r4, ip, [r6]
    c446:	e7f8      	b.n	c43a <__udivmoddi4+0x1ca>
    c448:	f1c7 0c20 	rsb	ip, r7, #32
    c44c:	40bb      	lsls	r3, r7
    c44e:	fa22 f40c 	lsr.w	r4, r2, ip
    c452:	431c      	orrs	r4, r3
    c454:	fa2e f10c 	lsr.w	r1, lr, ip
    c458:	fa20 f30c 	lsr.w	r3, r0, ip
    c45c:	40b8      	lsls	r0, r7
    c45e:	4301      	orrs	r1, r0
    c460:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c464:	fa0e f507 	lsl.w	r5, lr, r7
    c468:	fbb3 f8f9 	udiv	r8, r3, r9
    c46c:	fa1f fe84 	uxth.w	lr, r4
    c470:	fb09 3018 	mls	r0, r9, r8, r3
    c474:	0c0b      	lsrs	r3, r1, #16
    c476:	fb08 fa0e 	mul.w	sl, r8, lr
    c47a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c47e:	459a      	cmp	sl, r3
    c480:	fa02 f207 	lsl.w	r2, r2, r7
    c484:	d940      	bls.n	c508 <__udivmoddi4+0x298>
    c486:	18e3      	adds	r3, r4, r3
    c488:	f108 30ff 	add.w	r0, r8, #4294967295
    c48c:	d204      	bcs.n	c498 <__udivmoddi4+0x228>
    c48e:	459a      	cmp	sl, r3
    c490:	d902      	bls.n	c498 <__udivmoddi4+0x228>
    c492:	f1a8 0002 	sub.w	r0, r8, #2
    c496:	4423      	add	r3, r4
    c498:	eba3 030a 	sub.w	r3, r3, sl
    c49c:	b289      	uxth	r1, r1
    c49e:	fbb3 f8f9 	udiv	r8, r3, r9
    c4a2:	fb09 3318 	mls	r3, r9, r8, r3
    c4a6:	fb08 fe0e 	mul.w	lr, r8, lr
    c4aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4ae:	458e      	cmp	lr, r1
    c4b0:	d92c      	bls.n	c50c <__udivmoddi4+0x29c>
    c4b2:	1861      	adds	r1, r4, r1
    c4b4:	f108 33ff 	add.w	r3, r8, #4294967295
    c4b8:	d204      	bcs.n	c4c4 <__udivmoddi4+0x254>
    c4ba:	458e      	cmp	lr, r1
    c4bc:	d902      	bls.n	c4c4 <__udivmoddi4+0x254>
    c4be:	f1a8 0302 	sub.w	r3, r8, #2
    c4c2:	4421      	add	r1, r4
    c4c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c4c8:	fba0 9802 	umull	r9, r8, r0, r2
    c4cc:	eba1 010e 	sub.w	r1, r1, lr
    c4d0:	4541      	cmp	r1, r8
    c4d2:	46ce      	mov	lr, r9
    c4d4:	4643      	mov	r3, r8
    c4d6:	d302      	bcc.n	c4de <__udivmoddi4+0x26e>
    c4d8:	d106      	bne.n	c4e8 <__udivmoddi4+0x278>
    c4da:	454d      	cmp	r5, r9
    c4dc:	d204      	bcs.n	c4e8 <__udivmoddi4+0x278>
    c4de:	ebb9 0e02 	subs.w	lr, r9, r2
    c4e2:	eb68 0304 	sbc.w	r3, r8, r4
    c4e6:	3801      	subs	r0, #1
    c4e8:	2e00      	cmp	r6, #0
    c4ea:	d0a6      	beq.n	c43a <__udivmoddi4+0x1ca>
    c4ec:	ebb5 020e 	subs.w	r2, r5, lr
    c4f0:	eb61 0103 	sbc.w	r1, r1, r3
    c4f4:	fa01 fc0c 	lsl.w	ip, r1, ip
    c4f8:	fa22 f307 	lsr.w	r3, r2, r7
    c4fc:	ea4c 0303 	orr.w	r3, ip, r3
    c500:	40f9      	lsrs	r1, r7
    c502:	e9c6 3100 	strd	r3, r1, [r6]
    c506:	e798      	b.n	c43a <__udivmoddi4+0x1ca>
    c508:	4640      	mov	r0, r8
    c50a:	e7c5      	b.n	c498 <__udivmoddi4+0x228>
    c50c:	4643      	mov	r3, r8
    c50e:	e7d9      	b.n	c4c4 <__udivmoddi4+0x254>
    c510:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c514:	4681      	mov	r9, r0
    c516:	f100 0007 	add.w	r0, r0, #7
    c51a:	f020 0007 	bic.w	r0, r0, #7
    c51e:	ea5f 0802 	movs.w	r8, r2
    c522:	9000      	str	r0, [sp, #0]
    c524:	784a      	ldrb	r2, [r1, #1]
    c526:	f88d 2004 	strb.w	r2, [sp, #4]
    c52a:	788a      	ldrb	r2, [r1, #2]
    c52c:	460c      	mov	r4, r1
    c52e:	f88d 2005 	strb.w	r2, [sp, #5]
    c532:	d000      	beq.n	c536 <__udivmoddi4+0x2c6>
    c534:	2000      	movs	r0, #0
    c536:	a901      	add	r1, sp, #4
    c538:	f7f4 fd6a 	bl	1010 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c53c:	9900      	ldr	r1, [sp, #0]
    c53e:	2600      	movs	r6, #0
    c540:	4408      	add	r0, r1
    c542:	9000      	str	r0, [sp, #0]
    c544:	7820      	ldrb	r0, [r4, #0]
    c546:	7861      	ldrb	r1, [r4, #1]
    c548:	4635      	mov	r5, r6
    c54a:	4408      	add	r0, r1
    c54c:	b2c7      	uxtb	r7, r0
    c54e:	e008      	b.n	c562 <__udivmoddi4+0x2f2>
    c550:	7a23      	ldrb	r3, [r4, #8]
    c552:	79e2      	ldrb	r2, [r4, #7]
    c554:	79a1      	ldrb	r1, [r4, #6]
    c556:	7960      	ldrb	r0, [r4, #5]
    c558:	f000 fe2a 	bl	d1b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c55c:	1c6d      	adds	r5, r5, #1
    c55e:	4406      	add	r6, r0
    c560:	b2ed      	uxtb	r5, r5
    c562:	42bd      	cmp	r5, r7
    c564:	d3f4      	bcc.n	c550 <__udivmoddi4+0x2e0>
    c566:	9800      	ldr	r0, [sp, #0]
    c568:	1cc0      	adds	r0, r0, #3
    c56a:	f020 0003 	bic.w	r0, r0, #3
    c56e:	9000      	str	r0, [sp, #0]
    c570:	f1b8 0f00 	cmp.w	r8, #0
    c574:	d000      	beq.n	c578 <__udivmoddi4+0x308>
    c576:	2000      	movs	r0, #0
    c578:	4632      	mov	r2, r6
    c57a:	4639      	mov	r1, r7
    c57c:	f7f4 fe82 	bl	1284 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c580:	9900      	ldr	r1, [sp, #0]
    c582:	4642      	mov	r2, r8
    c584:	4408      	add	r0, r1
    c586:	9000      	str	r0, [sp, #0]
    c588:	4621      	mov	r1, r4
    c58a:	4668      	mov	r0, sp
    c58c:	f000 f805 	bl	c59a <__udivmoddi4+0x32a>
    c590:	9900      	ldr	r1, [sp, #0]
    c592:	eba1 0009 	sub.w	r0, r1, r9
    c596:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    c59a:	b570      	push	{r4, r5, r6, lr}
    c59c:	4605      	mov	r5, r0
    c59e:	7888      	ldrb	r0, [r1, #2]
    c5a0:	4616      	mov	r6, r2
    c5a2:	460c      	mov	r4, r1
    c5a4:	b188      	cbz	r0, c5ca <__udivmoddi4+0x35a>
    c5a6:	6828      	ldr	r0, [r5, #0]
    c5a8:	1cc0      	adds	r0, r0, #3
    c5aa:	f020 0003 	bic.w	r0, r0, #3
    c5ae:	6028      	str	r0, [r5, #0]
    c5b0:	7de1      	ldrb	r1, [r4, #23]
    c5b2:	78e2      	ldrb	r2, [r4, #3]
    c5b4:	8a63      	ldrh	r3, [r4, #18]
    c5b6:	4411      	add	r1, r2
    c5b8:	b2ca      	uxtb	r2, r1
    c5ba:	78a1      	ldrb	r1, [r4, #2]
    c5bc:	b106      	cbz	r6, c5c0 <__udivmoddi4+0x350>
    c5be:	2000      	movs	r0, #0
    c5c0:	f7f4 ff14 	bl	13ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c5c4:	6829      	ldr	r1, [r5, #0]
    c5c6:	4408      	add	r0, r1
    c5c8:	6028      	str	r0, [r5, #0]
    c5ca:	7d20      	ldrb	r0, [r4, #20]
    c5cc:	2800      	cmp	r0, #0
    c5ce:	d00f      	beq.n	c5f0 <__udivmoddi4+0x380>
    c5d0:	78a0      	ldrb	r0, [r4, #2]
    c5d2:	2800      	cmp	r0, #0
    c5d4:	d00c      	beq.n	c5f0 <__udivmoddi4+0x380>
    c5d6:	6828      	ldr	r0, [r5, #0]
    c5d8:	1dc0      	adds	r0, r0, #7
    c5da:	f020 0007 	bic.w	r0, r0, #7
    c5de:	6028      	str	r0, [r5, #0]
    c5e0:	7d21      	ldrb	r1, [r4, #20]
    c5e2:	b106      	cbz	r6, c5e6 <__udivmoddi4+0x376>
    c5e4:	2000      	movs	r0, #0
    c5e6:	f7f6 fdfb 	bl	31e0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    c5ea:	6829      	ldr	r1, [r5, #0]
    c5ec:	4408      	add	r0, r1
    c5ee:	6028      	str	r0, [r5, #0]
    c5f0:	bd70      	pop	{r4, r5, r6, pc}

0000c5f2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c5f2:	b50e      	push	{r1, r2, r3, lr}
    c5f4:	4601      	mov	r1, r0
    c5f6:	4668      	mov	r0, sp
    c5f8:	f000 f818 	bl	c62c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c5fc:	4668      	mov	r0, sp
    c5fe:	f001 fbd1 	bl	dda4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c602:	bd0e      	pop	{r1, r2, r3, pc}
    c604:	b570      	push	{r4, r5, r6, lr}
    c606:	460c      	mov	r4, r1
    c608:	4605      	mov	r5, r0
    c60a:	f7f4 fb3f 	bl	c8c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c60e:	2800      	cmp	r0, #0
    c610:	d002      	beq.n	c618 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c612:	2d3e      	cmp	r5, #62	; 0x3e
    c614:	d001      	beq.n	c61a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c616:	2001      	movs	r0, #1
    c618:	bd70      	pop	{r4, r5, r6, pc}
    c61a:	2c12      	cmp	r4, #18
    c61c:	d004      	beq.n	c628 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c61e:	4620      	mov	r0, r4
    c620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c624:	f7f4 bb44 	b.w	cb0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c628:	2000      	movs	r0, #0
    c62a:	bd70      	pop	{r4, r5, r6, pc}

0000c62c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c62c:	880a      	ldrh	r2, [r1, #0]
    c62e:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c632:	8082      	strh	r2, [r0, #4]
    c634:	884a      	ldrh	r2, [r1, #2]
    c636:	80c2      	strh	r2, [r0, #6]
    c638:	784a      	ldrb	r2, [r1, #1]
    c63a:	0993      	lsrs	r3, r2, #6
    c63c:	2200      	movs	r2, #0
    c63e:	7242      	strb	r2, [r0, #9]
    c640:	784b      	ldrb	r3, [r1, #1]
    c642:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c646:	b11b      	cbz	r3, c650 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c648:	2b01      	cmp	r3, #1
    c64a:	d005      	beq.n	c658 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c64c:	2b02      	cmp	r3, #2
    c64e:	d005      	beq.n	c65c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c650:	7202      	strb	r2, [r0, #8]
    c652:	1d09      	adds	r1, r1, #4
    c654:	6001      	str	r1, [r0, #0]
    c656:	4770      	bx	lr
    c658:	2201      	movs	r2, #1
    c65a:	e7f9      	b.n	c650 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c65c:	2202      	movs	r2, #2
    c65e:	e7f7      	b.n	c650 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c660 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c660:	b510      	push	{r4, lr}
    c662:	460c      	mov	r4, r1
    c664:	7909      	ldrb	r1, [r1, #4]
    c666:	7001      	strb	r1, [r0, #0]
    c668:	7841      	ldrb	r1, [r0, #1]
    c66a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c66e:	7041      	strb	r1, [r0, #1]
    c670:	88a2      	ldrh	r2, [r4, #4]
    c672:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c676:	4311      	orrs	r1, r2
    c678:	7041      	strb	r1, [r0, #1]
    c67a:	79a2      	ldrb	r2, [r4, #6]
    c67c:	7082      	strb	r2, [r0, #2]
    c67e:	88e2      	ldrh	r2, [r4, #6]
    c680:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c684:	0a12      	lsrs	r2, r2, #8
    c686:	70c2      	strb	r2, [r0, #3]
    c688:	7041      	strb	r1, [r0, #1]
    c68a:	7a22      	ldrb	r2, [r4, #8]
    c68c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c690:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c694:	7041      	strb	r1, [r0, #1]
    c696:	7a62      	ldrb	r2, [r4, #9]
    c698:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c69c:	7041      	strb	r1, [r0, #1]
    c69e:	6821      	ldr	r1, [r4, #0]
    c6a0:	1d02      	adds	r2, r0, #4
    c6a2:	4291      	cmp	r1, r2
    c6a4:	d006      	beq.n	c6b4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c6a6:	88e2      	ldrh	r2, [r4, #6]
    c6a8:	2afb      	cmp	r2, #251	; 0xfb
    c6aa:	d300      	bcc.n	c6ae <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c6ac:	22fb      	movs	r2, #251	; 0xfb
    c6ae:	1d00      	adds	r0, r0, #4
    c6b0:	f003 ff23 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c6b4:	79a0      	ldrb	r0, [r4, #6]
    c6b6:	1d00      	adds	r0, r0, #4
    c6b8:	b2c0      	uxtb	r0, r0
    c6ba:	bd10      	pop	{r4, pc}

0000c6bc <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    c6bc:	b430      	push	{r4, r5}
    c6be:	790a      	ldrb	r2, [r1, #4]
    c6c0:	7002      	strb	r2, [r0, #0]
    c6c2:	7842      	ldrb	r2, [r0, #1]
    c6c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    c6c8:	7042      	strb	r2, [r0, #1]
    c6ca:	888b      	ldrh	r3, [r1, #4]
    c6cc:	f3c3 2303 	ubfx	r3, r3, #8, #4
    c6d0:	431a      	orrs	r2, r3
    c6d2:	7042      	strb	r2, [r0, #1]
    c6d4:	798b      	ldrb	r3, [r1, #6]
    c6d6:	7083      	strb	r3, [r0, #2]
    c6d8:	78c3      	ldrb	r3, [r0, #3]
    c6da:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    c6de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c6e2:	70c3      	strb	r3, [r0, #3]
    c6e4:	88cc      	ldrh	r4, [r1, #6]
    c6e6:	f3c4 2405 	ubfx	r4, r4, #8, #6
    c6ea:	4323      	orrs	r3, r4
    c6ec:	70c3      	strb	r3, [r0, #3]
    c6ee:	7042      	strb	r2, [r0, #1]
    c6f0:	7a0c      	ldrb	r4, [r1, #8]
    c6f2:	f004 0403 	and.w	r4, r4, #3
    c6f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    c6fa:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    c6fe:	7042      	strb	r2, [r0, #1]
    c700:	7a4c      	ldrb	r4, [r1, #9]
    c702:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    c706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c70a:	7042      	strb	r2, [r0, #1]
    c70c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    c710:	70c2      	strb	r2, [r0, #3]
    c712:	680b      	ldr	r3, [r1, #0]
    c714:	1d02      	adds	r2, r0, #4
    c716:	4293      	cmp	r3, r2
    c718:	d005      	beq.n	c726 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    c71a:	88ca      	ldrh	r2, [r1, #6]
    c71c:	bc30      	pop	{r4, r5}
    c71e:	4619      	mov	r1, r3
    c720:	1d00      	adds	r0, r0, #4
    c722:	f003 beea 	b.w	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c726:	bc30      	pop	{r4, r5}
    c728:	4770      	bx	lr

0000c72a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c72e:	460d      	mov	r5, r1
    c730:	4604      	mov	r4, r0
    c732:	f891 c000 	ldrb.w	ip, [r1]
    c736:	2000      	movs	r0, #0
    c738:	230c      	movs	r3, #12
    c73a:	2705      	movs	r7, #5
    c73c:	2203      	movs	r2, #3
    c73e:	263e      	movs	r6, #62	; 0x3e
    c740:	21ff      	movs	r1, #255	; 0xff
    c742:	f1bc 0f1e 	cmp.w	ip, #30
    c746:	d27e      	bcs.n	c846 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    c748:	e8df f00c 	tbb	[pc, ip]
    c74c:	424029e7 	.word	0x424029e7
    c750:	806d63e7 	.word	0x806d63e7
    c754:	b9aeac99 	.word	0xb9aeac99
    c758:	0ff3dfc4 	.word	0x0ff3dfc4
    c75c:	cf48e7e7 	.word	0xcf48e7e7
    c760:	eff0fcd2 	.word	0xeff0fcd2
    c764:	ebecedee 	.word	0xebecedee
    c768:	e9ea      	.short	0xe9ea
    c76a:	200e      	movs	r0, #14
    c76c:	7020      	strb	r0, [r4, #0]
    c76e:	7968      	ldrb	r0, [r5, #5]
    c770:	70e0      	strb	r0, [r4, #3]
    c772:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c776:	0a00      	lsrs	r0, r0, #8
    c778:	7120      	strb	r0, [r4, #4]
    c77a:	7928      	ldrb	r0, [r5, #4]
    c77c:	70a0      	strb	r0, [r4, #2]
    c77e:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c782:	3883      	subs	r0, #131	; 0x83
    c784:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    c788:	d003      	beq.n	c792 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    c78a:	2136      	movs	r1, #54	; 0x36
    c78c:	20c7      	movs	r0, #199	; 0xc7
    c78e:	f7f4 f8fd 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c792:	1de9      	adds	r1, r5, #7
    c794:	1d60      	adds	r0, r4, #5
    c796:	f003 feb0 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c79a:	2007      	movs	r0, #7
    c79c:	e0bb      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c79e:	7023      	strb	r3, [r4, #0]
    c7a0:	7928      	ldrb	r0, [r5, #4]
    c7a2:	70a0      	strb	r0, [r4, #2]
    c7a4:	7968      	ldrb	r0, [r5, #5]
    c7a6:	70e0      	strb	r0, [r4, #3]
    c7a8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c7ac:	0a00      	lsrs	r0, r0, #8
    c7ae:	7120      	strb	r0, [r4, #4]
    c7b0:	79e8      	ldrb	r0, [r5, #7]
    c7b2:	7160      	strb	r0, [r4, #5]
    c7b4:	7a28      	ldrb	r0, [r5, #8]
    c7b6:	71a0      	strb	r0, [r4, #6]
    c7b8:	8928      	ldrh	r0, [r5, #8]
    c7ba:	0a00      	lsrs	r0, r0, #8
    c7bc:	71e0      	strb	r0, [r4, #7]
    c7be:	7aa8      	ldrb	r0, [r5, #10]
    c7c0:	7220      	strb	r0, [r4, #8]
    c7c2:	8968      	ldrh	r0, [r5, #10]
    c7c4:	0a00      	lsrs	r0, r0, #8
    c7c6:	7260      	strb	r0, [r4, #9]
    c7c8:	2008      	movs	r0, #8
    c7ca:	e0a4      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c7cc:	2010      	movs	r0, #16
    c7ce:	e000      	b.n	c7d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    c7d0:	201a      	movs	r0, #26
    c7d2:	7020      	strb	r0, [r4, #0]
    c7d4:	7928      	ldrb	r0, [r5, #4]
    c7d6:	70a0      	strb	r0, [r4, #2]
    c7d8:	2001      	movs	r0, #1
    c7da:	e09c      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c7dc:	2029      	movs	r0, #41	; 0x29
    c7de:	f7f4 fa67 	bl	cb0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7e2:	b148      	cbz	r0, c7f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    c7e4:	7026      	strb	r6, [r4, #0]
    c7e6:	2029      	movs	r0, #41	; 0x29
    c7e8:	70a0      	strb	r0, [r4, #2]
    c7ea:	2221      	movs	r2, #33	; 0x21
    c7ec:	1d29      	adds	r1, r5, #4
    c7ee:	1ce0      	adds	r0, r4, #3
    c7f0:	f003 fe83 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c7f4:	2022      	movs	r0, #34	; 0x22
    c7f6:	e08e      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c7f8:	200a      	movs	r0, #10
    c7fa:	f7f4 fa59 	bl	cb0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c7fe:	2800      	cmp	r0, #0
    c800:	4629      	mov	r1, r5
    c802:	4620      	mov	r0, r4
    c804:	d002      	beq.n	c80c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    c806:	f000 f95b 	bl	cac0 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    c80a:	e082      	b.n	c912 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    c80c:	f000 f92f 	bl	ca6e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    c810:	e07f      	b.n	c912 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    c812:	7026      	strb	r6, [r4, #0]
    c814:	2014      	movs	r0, #20
    c816:	70a0      	strb	r0, [r4, #2]
    c818:	7928      	ldrb	r0, [r5, #4]
    c81a:	70e0      	strb	r0, [r4, #3]
    c81c:	88a8      	ldrh	r0, [r5, #4]
    c81e:	0a00      	lsrs	r0, r0, #8
    c820:	7120      	strb	r0, [r4, #4]
    c822:	79a8      	ldrb	r0, [r5, #6]
    c824:	e0c0      	b.n	c9a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    c826:	223e      	movs	r2, #62	; 0x3e
    c828:	7022      	strb	r2, [r4, #0]
    c82a:	2204      	movs	r2, #4
    c82c:	70a2      	strb	r2, [r4, #2]
    c82e:	6868      	ldr	r0, [r5, #4]
    c830:	f8c4 0003 	str.w	r0, [r4, #3]
    c834:	68a8      	ldr	r0, [r5, #8]
    c836:	f8c4 0007 	str.w	r0, [r4, #7]
    c83a:	89a8      	ldrh	r0, [r5, #12]
    c83c:	f8a4 000b 	strh.w	r0, [r4, #11]
    c840:	7ba8      	ldrb	r0, [r5, #14]
    c842:	7360      	strb	r0, [r4, #13]
    c844:	e000      	b.n	c848 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    c846:	e068      	b.n	c91a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c848:	200c      	movs	r0, #12
    c84a:	e064      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c84c:	7026      	strb	r6, [r4, #0]
    c84e:	70a2      	strb	r2, [r4, #2]
    c850:	7928      	ldrb	r0, [r5, #4]
    c852:	70e0      	strb	r0, [r4, #3]
    c854:	79a8      	ldrb	r0, [r5, #6]
    c856:	7120      	strb	r0, [r4, #4]
    c858:	88e8      	ldrh	r0, [r5, #6]
    c85a:	0a00      	lsrs	r0, r0, #8
    c85c:	7160      	strb	r0, [r4, #5]
    c85e:	7a28      	ldrb	r0, [r5, #8]
    c860:	71a0      	strb	r0, [r4, #6]
    c862:	8928      	ldrh	r0, [r5, #8]
    c864:	0a00      	lsrs	r0, r0, #8
    c866:	71e0      	strb	r0, [r4, #7]
    c868:	7aa8      	ldrb	r0, [r5, #10]
    c86a:	7220      	strb	r0, [r4, #8]
    c86c:	8968      	ldrh	r0, [r5, #10]
    c86e:	0a00      	lsrs	r0, r0, #8
    c870:	7260      	strb	r0, [r4, #9]
    c872:	7b28      	ldrb	r0, [r5, #12]
    c874:	72a0      	strb	r0, [r4, #10]
    c876:	89a8      	ldrh	r0, [r5, #12]
    c878:	0a00      	lsrs	r0, r0, #8
    c87a:	72e0      	strb	r0, [r4, #11]
    c87c:	e0d1      	b.n	ca22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    c87e:	7026      	strb	r6, [r4, #0]
    c880:	70a7      	strb	r7, [r4, #2]
    c882:	7928      	ldrb	r0, [r5, #4]
    c884:	70e0      	strb	r0, [r4, #3]
    c886:	88a8      	ldrh	r0, [r5, #4]
    c888:	0a00      	lsrs	r0, r0, #8
    c88a:	7120      	strb	r0, [r4, #4]
    c88c:	f8d5 0006 	ldr.w	r0, [r5, #6]
    c890:	f8c4 0005 	str.w	r0, [r4, #5]
    c894:	f8d5 000a 	ldr.w	r0, [r5, #10]
    c898:	f8c4 0009 	str.w	r0, [r4, #9]
    c89c:	89e8      	ldrh	r0, [r5, #14]
    c89e:	f8a4 000d 	strh.w	r0, [r4, #13]
    c8a2:	e0e2      	b.n	ca6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    c8a4:	2011      	movs	r0, #17
    c8a6:	e045      	b.n	c934 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    c8a8:	7027      	strb	r7, [r4, #0]
    c8aa:	7928      	ldrb	r0, [r5, #4]
    c8ac:	70a0      	strb	r0, [r4, #2]
    c8ae:	7968      	ldrb	r0, [r5, #5]
    c8b0:	70e0      	strb	r0, [r4, #3]
    c8b2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c8b6:	0a00      	lsrs	r0, r0, #8
    c8b8:	7120      	strb	r0, [r4, #4]
    c8ba:	79e8      	ldrb	r0, [r5, #7]
    c8bc:	e074      	b.n	c9a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    c8be:	2008      	movs	r0, #8
    c8c0:	7020      	strb	r0, [r4, #0]
    c8c2:	7928      	ldrb	r0, [r5, #4]
    c8c4:	70a0      	strb	r0, [r4, #2]
    c8c6:	79a8      	ldrb	r0, [r5, #6]
    c8c8:	70e0      	strb	r0, [r4, #3]
    c8ca:	88e8      	ldrh	r0, [r5, #6]
    c8cc:	0a00      	lsrs	r0, r0, #8
    c8ce:	7120      	strb	r0, [r4, #4]
    c8d0:	7a28      	ldrb	r0, [r5, #8]
    c8d2:	e069      	b.n	c9a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    c8d4:	2030      	movs	r0, #48	; 0x30
    c8d6:	7020      	strb	r0, [r4, #0]
    c8d8:	7928      	ldrb	r0, [r5, #4]
    c8da:	70a0      	strb	r0, [r4, #2]
    c8dc:	79a8      	ldrb	r0, [r5, #6]
    c8de:	70e0      	strb	r0, [r4, #3]
    c8e0:	88e8      	ldrh	r0, [r5, #6]
    c8e2:	0a00      	lsrs	r0, r0, #8
    c8e4:	7120      	strb	r0, [r4, #4]
    c8e6:	2003      	movs	r0, #3
    c8e8:	e015      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c8ea:	7026      	strb	r6, [r4, #0]
    c8ec:	2007      	movs	r0, #7
    c8ee:	e060      	b.n	c9b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    c8f0:	7026      	strb	r6, [r4, #0]
    c8f2:	70a3      	strb	r3, [r4, #2]
    c8f4:	7928      	ldrb	r0, [r5, #4]
    c8f6:	70e0      	strb	r0, [r4, #3]
    c8f8:	79a8      	ldrb	r0, [r5, #6]
    c8fa:	7120      	strb	r0, [r4, #4]
    c8fc:	88e8      	ldrh	r0, [r5, #6]
    c8fe:	0a00      	lsrs	r0, r0, #8
    c900:	7160      	strb	r0, [r4, #5]
    c902:	7a28      	ldrb	r0, [r5, #8]
    c904:	71a0      	strb	r0, [r4, #6]
    c906:	7a68      	ldrb	r0, [r5, #9]
    c908:	e029      	b.n	c95e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    c90a:	1d29      	adds	r1, r5, #4
    c90c:	4620      	mov	r0, r4
    c90e:	f7f4 f98f 	bl	c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    c912:	2800      	cmp	r0, #0
    c914:	d001      	beq.n	c91a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    c916:	7060      	strb	r0, [r4, #1]
    c918:	1c80      	adds	r0, r0, #2
    c91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c91e:	e08f      	b.n	ca40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    c920:	e063      	b.n	c9ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c922:	e044      	b.n	c9ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    c924:	e06f      	b.n	ca06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c926:	e07e      	b.n	ca26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    c928:	e036      	b.n	c998 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    c92a:	e01e      	b.n	c96a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    c92c:	e01a      	b.n	c964 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    c92e:	e009      	b.n	c944 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    c930:	e7ff      	b.n	c932 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    c932:	2057      	movs	r0, #87	; 0x57
    c934:	7020      	strb	r0, [r4, #0]
    c936:	7928      	ldrb	r0, [r5, #4]
    c938:	70a0      	strb	r0, [r4, #2]
    c93a:	88a8      	ldrh	r0, [r5, #4]
    c93c:	0a00      	lsrs	r0, r0, #8
    c93e:	70e0      	strb	r0, [r4, #3]
    c940:	2002      	movs	r0, #2
    c942:	e7e8      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c944:	7026      	strb	r6, [r4, #0]
    c946:	2012      	movs	r0, #18
    c948:	70a0      	strb	r0, [r4, #2]
    c94a:	7928      	ldrb	r0, [r5, #4]
    c94c:	70e0      	strb	r0, [r4, #3]
    c94e:	7968      	ldrb	r0, [r5, #5]
    c950:	7120      	strb	r0, [r4, #4]
    c952:	79a8      	ldrb	r0, [r5, #6]
    c954:	7160      	strb	r0, [r4, #5]
    c956:	88e8      	ldrh	r0, [r5, #6]
    c958:	0a00      	lsrs	r0, r0, #8
    c95a:	71a0      	strb	r0, [r4, #6]
    c95c:	7a28      	ldrb	r0, [r5, #8]
    c95e:	71e0      	strb	r0, [r4, #7]
    c960:	2006      	movs	r0, #6
    c962:	e7d8      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c964:	7026      	strb	r6, [r4, #0]
    c966:	2020      	movs	r0, #32
    c968:	e041      	b.n	c9ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    c96a:	7026      	strb	r6, [r4, #0]
    c96c:	2021      	movs	r0, #33	; 0x21
    c96e:	70a0      	strb	r0, [r4, #2]
    c970:	7928      	ldrb	r0, [r5, #4]
    c972:	70e0      	strb	r0, [r4, #3]
    c974:	7968      	ldrb	r0, [r5, #5]
    c976:	7120      	strb	r0, [r4, #4]
    c978:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c97c:	0a00      	lsrs	r0, r0, #8
    c97e:	7160      	strb	r0, [r4, #5]
    c980:	79e8      	ldrb	r0, [r5, #7]
    c982:	71a0      	strb	r0, [r4, #6]
    c984:	7a28      	ldrb	r0, [r5, #8]
    c986:	71e0      	strb	r0, [r4, #7]
    c988:	7a68      	ldrb	r0, [r5, #9]
    c98a:	7220      	strb	r0, [r4, #8]
    c98c:	7aa8      	ldrb	r0, [r5, #10]
    c98e:	7260      	strb	r0, [r4, #9]
    c990:	7ae8      	ldrb	r0, [r5, #11]
    c992:	72a0      	strb	r0, [r4, #10]
    c994:	2009      	movs	r0, #9
    c996:	e7be      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c998:	7021      	strb	r1, [r4, #0]
    c99a:	20a1      	movs	r0, #161	; 0xa1
    c99c:	70a0      	strb	r0, [r4, #2]
    c99e:	7928      	ldrb	r0, [r5, #4]
    c9a0:	70e0      	strb	r0, [r4, #3]
    c9a2:	7968      	ldrb	r0, [r5, #5]
    c9a4:	7120      	strb	r0, [r4, #4]
    c9a6:	2000      	movs	r0, #0
    c9a8:	7160      	strb	r0, [r4, #5]
    c9aa:	2004      	movs	r0, #4
    c9ac:	e7b3      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c9ae:	7021      	strb	r1, [r4, #0]
    c9b0:	20a2      	movs	r0, #162	; 0xa2
    c9b2:	70a0      	strb	r0, [r4, #2]
    c9b4:	7928      	ldrb	r0, [r5, #4]
    c9b6:	70e0      	strb	r0, [r4, #3]
    c9b8:	88a8      	ldrh	r0, [r5, #4]
    c9ba:	0a00      	lsrs	r0, r0, #8
    c9bc:	7120      	strb	r0, [r4, #4]
    c9be:	79a8      	ldrb	r0, [r5, #6]
    c9c0:	7160      	strb	r0, [r4, #5]
    c9c2:	88e8      	ldrh	r0, [r5, #6]
    c9c4:	0a00      	lsrs	r0, r0, #8
    c9c6:	71a0      	strb	r0, [r4, #6]
    c9c8:	7a28      	ldrb	r0, [r5, #8]
    c9ca:	71e0      	strb	r0, [r4, #7]
    c9cc:	8928      	ldrh	r0, [r5, #8]
    c9ce:	0a00      	lsrs	r0, r0, #8
    c9d0:	7220      	strb	r0, [r4, #8]
    c9d2:	7aa8      	ldrb	r0, [r5, #10]
    c9d4:	7260      	strb	r0, [r4, #9]
    c9d6:	8968      	ldrh	r0, [r5, #10]
    c9d8:	0a00      	lsrs	r0, r0, #8
    c9da:	72a0      	strb	r0, [r4, #10]
    c9dc:	7b28      	ldrb	r0, [r5, #12]
    c9de:	72e0      	strb	r0, [r4, #11]
    c9e0:	89a8      	ldrh	r0, [r5, #12]
    c9e2:	0a00      	lsrs	r0, r0, #8
    c9e4:	7320      	strb	r0, [r4, #12]
    c9e6:	200b      	movs	r0, #11
    c9e8:	e795      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    c9ea:	7021      	strb	r1, [r4, #0]
    c9ec:	20a3      	movs	r0, #163	; 0xa3
    c9ee:	70a0      	strb	r0, [r4, #2]
    c9f0:	7928      	ldrb	r0, [r5, #4]
    c9f2:	70e0      	strb	r0, [r4, #3]
    c9f4:	88a8      	ldrh	r0, [r5, #4]
    c9f6:	0a00      	lsrs	r0, r0, #8
    c9f8:	7120      	strb	r0, [r4, #4]
    c9fa:	79a8      	ldrb	r0, [r5, #6]
    c9fc:	7160      	strb	r0, [r4, #5]
    c9fe:	79e8      	ldrb	r0, [r5, #7]
    ca00:	71a0      	strb	r0, [r4, #6]
    ca02:	2005      	movs	r0, #5
    ca04:	e787      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca06:	7026      	strb	r6, [r4, #0]
    ca08:	2013      	movs	r0, #19
    ca0a:	70a0      	strb	r0, [r4, #2]
    ca0c:	7928      	ldrb	r0, [r5, #4]
    ca0e:	70e0      	strb	r0, [r4, #3]
    ca10:	7968      	ldrb	r0, [r5, #5]
    ca12:	7120      	strb	r0, [r4, #4]
    ca14:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ca18:	f8c4 0005 	str.w	r0, [r4, #5]
    ca1c:	8968      	ldrh	r0, [r5, #10]
    ca1e:	f8a4 0009 	strh.w	r0, [r4, #9]
    ca22:	200a      	movs	r0, #10
    ca24:	e777      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca26:	7021      	strb	r1, [r4, #0]
    ca28:	20a4      	movs	r0, #164	; 0xa4
    ca2a:	70a0      	strb	r0, [r4, #2]
    ca2c:	7928      	ldrb	r0, [r5, #4]
    ca2e:	70e0      	strb	r0, [r4, #3]
    ca30:	88a8      	ldrh	r0, [r5, #4]
    ca32:	0a00      	lsrs	r0, r0, #8
    ca34:	7120      	strb	r0, [r4, #4]
    ca36:	79a8      	ldrb	r0, [r5, #6]
    ca38:	7160      	strb	r0, [r4, #5]
    ca3a:	79e8      	ldrb	r0, [r5, #7]
    ca3c:	71a0      	strb	r0, [r4, #6]
    ca3e:	e6ac      	b.n	c79a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    ca40:	7021      	strb	r1, [r4, #0]
    ca42:	2080      	movs	r0, #128	; 0x80
    ca44:	70a0      	strb	r0, [r4, #2]
    ca46:	88a9      	ldrh	r1, [r5, #4]
    ca48:	f8a4 1003 	strh.w	r1, [r4, #3]
    ca4c:	88e9      	ldrh	r1, [r5, #6]
    ca4e:	f8a4 1005 	strh.w	r1, [r4, #5]
    ca52:	7a29      	ldrb	r1, [r5, #8]
    ca54:	71e1      	strb	r1, [r4, #7]
    ca56:	8969      	ldrh	r1, [r5, #10]
    ca58:	8121      	strh	r1, [r4, #8]
    ca5a:	89a9      	ldrh	r1, [r5, #12]
    ca5c:	8161      	strh	r1, [r4, #10]
    ca5e:	89e9      	ldrh	r1, [r5, #14]
    ca60:	81a1      	strh	r1, [r4, #12]
    ca62:	7c29      	ldrb	r1, [r5, #16]
    ca64:	f001 0101 	and.w	r1, r1, #1
    ca68:	73a1      	strb	r1, [r4, #14]
    ca6a:	200d      	movs	r0, #13
    ca6c:	e753      	b.n	c916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000ca6e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ca6e:	223e      	movs	r2, #62	; 0x3e
    ca70:	7002      	strb	r2, [r0, #0]
    ca72:	2201      	movs	r2, #1
    ca74:	7082      	strb	r2, [r0, #2]
    ca76:	790a      	ldrb	r2, [r1, #4]
    ca78:	70c2      	strb	r2, [r0, #3]
    ca7a:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ca7e:	7102      	strb	r2, [r0, #4]
    ca80:	880a      	ldrh	r2, [r1, #0]
    ca82:	0a12      	lsrs	r2, r2, #8
    ca84:	7142      	strb	r2, [r0, #5]
    ca86:	788a      	ldrb	r2, [r1, #2]
    ca88:	7182      	strb	r2, [r0, #6]
    ca8a:	78ca      	ldrb	r2, [r1, #3]
    ca8c:	71c2      	strb	r2, [r0, #7]
    ca8e:	684a      	ldr	r2, [r1, #4]
    ca90:	6082      	str	r2, [r0, #8]
    ca92:	890a      	ldrh	r2, [r1, #8]
    ca94:	8182      	strh	r2, [r0, #12]
    ca96:	7d8a      	ldrb	r2, [r1, #22]
    ca98:	7382      	strb	r2, [r0, #14]
    ca9a:	8aca      	ldrh	r2, [r1, #22]
    ca9c:	0a12      	lsrs	r2, r2, #8
    ca9e:	73c2      	strb	r2, [r0, #15]
    caa0:	7e0a      	ldrb	r2, [r1, #24]
    caa2:	7402      	strb	r2, [r0, #16]
    caa4:	8b0a      	ldrh	r2, [r1, #24]
    caa6:	0a12      	lsrs	r2, r2, #8
    caa8:	7442      	strb	r2, [r0, #17]
    caaa:	7e8a      	ldrb	r2, [r1, #26]
    caac:	7482      	strb	r2, [r0, #18]
    caae:	8b4a      	ldrh	r2, [r1, #26]
    cab0:	0a12      	lsrs	r2, r2, #8
    cab2:	74c2      	strb	r2, [r0, #19]
    cab4:	7f09      	ldrb	r1, [r1, #28]
    cab6:	7501      	strb	r1, [r0, #20]
    cab8:	2113      	movs	r1, #19
    caba:	7041      	strb	r1, [r0, #1]
    cabc:	4608      	mov	r0, r1
    cabe:	4770      	bx	lr
    cac0:	223e      	movs	r2, #62	; 0x3e
    cac2:	7002      	strb	r2, [r0, #0]
    cac4:	220a      	movs	r2, #10
    cac6:	7082      	strb	r2, [r0, #2]
    cac8:	790a      	ldrb	r2, [r1, #4]
    caca:	70c2      	strb	r2, [r0, #3]
    cacc:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cad0:	7102      	strb	r2, [r0, #4]
    cad2:	880a      	ldrh	r2, [r1, #0]
    cad4:	0a12      	lsrs	r2, r2, #8
    cad6:	7142      	strb	r2, [r0, #5]
    cad8:	788a      	ldrb	r2, [r1, #2]
    cada:	7182      	strb	r2, [r0, #6]
    cadc:	78ca      	ldrb	r2, [r1, #3]
    cade:	71c2      	strb	r2, [r0, #7]
    cae0:	684a      	ldr	r2, [r1, #4]
    cae2:	6082      	str	r2, [r0, #8]
    cae4:	890a      	ldrh	r2, [r1, #8]
    cae6:	8182      	strh	r2, [r0, #12]
    cae8:	f8d1 200a 	ldr.w	r2, [r1, #10]
    caec:	f8c0 200e 	str.w	r2, [r0, #14]
    caf0:	89ca      	ldrh	r2, [r1, #14]
    caf2:	8242      	strh	r2, [r0, #18]
    caf4:	690a      	ldr	r2, [r1, #16]
    caf6:	6142      	str	r2, [r0, #20]
    caf8:	8a8a      	ldrh	r2, [r1, #20]
    cafa:	8302      	strh	r2, [r0, #24]
    cafc:	7d8a      	ldrb	r2, [r1, #22]
    cafe:	7682      	strb	r2, [r0, #26]
    cb00:	8aca      	ldrh	r2, [r1, #22]
    cb02:	0a12      	lsrs	r2, r2, #8
    cb04:	76c2      	strb	r2, [r0, #27]
    cb06:	7e0a      	ldrb	r2, [r1, #24]
    cb08:	7702      	strb	r2, [r0, #28]
    cb0a:	8b0a      	ldrh	r2, [r1, #24]
    cb0c:	0a12      	lsrs	r2, r2, #8
    cb0e:	7742      	strb	r2, [r0, #29]
    cb10:	7e8a      	ldrb	r2, [r1, #26]
    cb12:	7782      	strb	r2, [r0, #30]
    cb14:	8b4a      	ldrh	r2, [r1, #26]
    cb16:	0a12      	lsrs	r2, r2, #8
    cb18:	77c2      	strb	r2, [r0, #31]
    cb1a:	7f09      	ldrb	r1, [r1, #28]
    cb1c:	f880 1020 	strb.w	r1, [r0, #32]
    cb20:	211f      	movs	r1, #31
    cb22:	7041      	strb	r1, [r0, #1]
    cb24:	4608      	mov	r0, r1
    cb26:	4770      	bx	lr
    cb28:	094a      	lsrs	r2, r1, #5
    cb2a:	f001 011f 	and.w	r1, r1, #31
    cb2e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cb32:	40c8      	lsrs	r0, r1
    cb34:	f000 0001 	and.w	r0, r0, #1
    cb38:	4770      	bx	lr

0000cb3a <sdc_hci_data_put>:
    cb3a:	b510      	push	{r4, lr}
    cb3c:	f06f 0415 	mvn.w	r4, #21
    cb40:	b120      	cbz	r0, cb4c <sdc_hci_data_put+0x12>
    cb42:	f7ff fd56 	bl	c5f2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cb46:	b108      	cbz	r0, cb4c <sdc_hci_data_put+0x12>
    cb48:	2000      	movs	r0, #0
    cb4a:	bd10      	pop	{r4, pc}
    cb4c:	4620      	mov	r0, r4
    cb4e:	bd10      	pop	{r4, pc}

0000cb50 <sdc_hci_get>:
    cb50:	b510      	push	{r4, lr}
    cb52:	460c      	mov	r4, r1
    cb54:	b130      	cbz	r0, cb64 <sdc_hci_get+0x14>
    cb56:	b12c      	cbz	r4, cb64 <sdc_hci_get+0x14>
    cb58:	f7f4 f814 	bl	b84 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cb5c:	b128      	cbz	r0, cb6a <sdc_hci_get+0x1a>
    cb5e:	7020      	strb	r0, [r4, #0]
    cb60:	2000      	movs	r0, #0
    cb62:	bd10      	pop	{r4, pc}
    cb64:	f06f 0015 	mvn.w	r0, #21
    cb68:	bd10      	pop	{r4, pc}
    cb6a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cb6e:	bd10      	pop	{r4, pc}

0000cb70 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cb70:	f002 bf62 	b.w	fa38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cb74 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cb74:	f002 bf7d 	b.w	fa72 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cb78 <sdc_hci_cmd_cb_set_event_mask>:
    cb78:	b510      	push	{r4, lr}
    cb7a:	f7f4 f8a9 	bl	cd0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cb7e:	2000      	movs	r0, #0
    cb80:	bd10      	pop	{r4, pc}

0000cb82 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cb82:	b510      	push	{r4, lr}
    cb84:	f7f4 f8b4 	bl	cf0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cb88:	2000      	movs	r0, #0
    cb8a:	bd10      	pop	{r4, pc}

0000cb8c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cb8c:	f002 bf92 	b.w	fab4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cb90 <sdc_hci_cmd_vs_conn_event_extend>:
    cb90:	b508      	push	{r3, lr}
    cb92:	7800      	ldrb	r0, [r0, #0]
    cb94:	f88d 0000 	strb.w	r0, [sp]
    cb98:	4668      	mov	r0, sp
    cb9a:	f002 fe6e 	bl	f87a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cb9e:	bd08      	pop	{r3, pc}

0000cba0 <sdc_hci_cmd_vs_conn_update>:
    cba0:	2001      	movs	r0, #1
    cba2:	4770      	bx	lr

0000cba4 <sdc_hci_cmd_vs_event_length_set>:
    cba4:	f7f9 bfe2 	b.w	6b6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cba8 <sdc_hci_cmd_vs_llpm_mode_set>:
    cba8:	2001      	movs	r0, #1
    cbaa:	4770      	bx	lr

0000cbac <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    cbac:	7881      	ldrb	r1, [r0, #2]
    cbae:	8800      	ldrh	r0, [r0, #0]
    cbb0:	f002 be13 	b.w	f7da <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000cbb4 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cbb4:	7800      	ldrb	r0, [r0, #0]
    cbb6:	b100      	cbz	r0, cbba <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cbb8:	2001      	movs	r0, #1
    cbba:	f002 be09 	b.w	f7d0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cbbe <sdc_hci_cmd_vs_set_adv_randomness>:
    cbbe:	f002 be36 	b.w	f82e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000cbc2 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    cbc2:	b510      	push	{r4, lr}
    cbc4:	4604      	mov	r4, r0
    cbc6:	f7ff f9f9 	bl	bfbc <mpsl_temperature_get>
    cbca:	17c1      	asrs	r1, r0, #31
    cbcc:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cbd0:	1080      	asrs	r0, r0, #2
    cbd2:	287f      	cmp	r0, #127	; 0x7f
    cbd4:	dd01      	ble.n	cbda <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cbd6:	207f      	movs	r0, #127	; 0x7f
    cbd8:	e004      	b.n	cbe4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cbda:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cbde:	4288      	cmp	r0, r1
    cbe0:	da00      	bge.n	cbe4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cbe2:	4608      	mov	r0, r1
    cbe4:	7020      	strb	r0, [r4, #0]
    cbe6:	2000      	movs	r0, #0
    cbe8:	bd10      	pop	{r4, pc}

0000cbea <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    cbea:	f002 be35 	b.w	f858 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000cbee <sdc_hci_cmd_ip_read_bd_addr>:
    cbee:	f002 bf34 	b.w	fa5a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000cbf2 <sdc_hci_cmd_ip_read_local_version_information>:
    cbf2:	f7f9 bfc9 	b.w	6b88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000cbf6 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    cbf6:	f002 bbc2 	b.w	f37e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000cbfa <sdc_hci_cmd_le_clear_filter_accept_list>:
    cbfa:	f002 bbd7 	b.w	f3ac <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000cbfe <sdc_hci_cmd_le_encrypt>:
    cbfe:	f002 bbe2 	b.w	f3c6 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000cc02 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    cc02:	8802      	ldrh	r2, [r0, #0]
    cc04:	800a      	strh	r2, [r1, #0]
    cc06:	f002 bbe7 	b.w	f3d8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000cc0a <sdc_hci_cmd_le_long_term_key_request_reply>:
    cc0a:	8802      	ldrh	r2, [r0, #0]
    cc0c:	800a      	strh	r2, [r1, #0]
    cc0e:	f002 bbfc 	b.w	f40a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000cc12 <sdc_hci_cmd_le_rand>:
    cc12:	f002 bc24 	b.w	f45e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000cc16 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    cc16:	f002 bc28 	b.w	f46a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000cc1a <sdc_hci_cmd_le_read_buffer_size>:
    cc1a:	f7f9 beb5 	b.w	6988 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cc1e <sdc_hci_cmd_le_read_channel_map>:
    cc1e:	f7f9 bebd 	b.w	699c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cc22 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    cc22:	f002 bc62 	b.w	f4ea <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cc26 <sdc_hci_cmd_le_read_max_data_length>:
    cc26:	f002 bc2b 	b.w	f480 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000cc2a <sdc_hci_cmd_le_read_phy>:
    cc2a:	f7f9 bedf 	b.w	69ec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000cc2e <sdc_hci_cmd_le_read_remote_features>:
    cc2e:	f002 bc30 	b.w	f492 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000cc32 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    cc32:	f7f9 bf01 	b.w	6a38 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cc36 <sdc_hci_cmd_le_read_transmit_power>:
    cc36:	f002 bc48 	b.w	f4ca <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cc3a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    cc3a:	f002 bc5d 	b.w	f4f8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cc3e <sdc_hci_cmd_le_set_adv_data>:
    cc3e:	f002 bc70 	b.w	f522 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000cc42 <sdc_hci_cmd_le_set_adv_enable>:
    cc42:	f002 bc83 	b.w	f54c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000cc46 <sdc_hci_cmd_le_set_adv_params>:
    cc46:	f002 bcb4 	b.w	f5b2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000cc4a <sdc_hci_cmd_le_set_data_length>:
    cc4a:	f002 bd47 	b.w	f6dc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cc4e <sdc_hci_cmd_le_set_data_related_address_changes>:
    cc4e:	f002 bd65 	b.w	f71c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000cc52 <sdc_hci_cmd_le_set_default_phy>:
    cc52:	f7f9 befb 	b.w	6a4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cc56 <sdc_hci_cmd_le_set_event_mask>:
    cc56:	b510      	push	{r4, lr}
    cc58:	f7f4 f832 	bl	cc0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    cc5c:	2000      	movs	r0, #0
    cc5e:	bd10      	pop	{r4, pc}

0000cc60 <sdc_hci_cmd_le_set_phy>:
    cc60:	f002 bd69 	b.w	f736 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cc64 <sdc_hci_cmd_le_set_random_address>:
    cc64:	f002 bd80 	b.w	f768 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cc68 <sdc_hci_cmd_le_set_scan_response_data>:
    cc68:	f002 bd8c 	b.w	f784 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cc6c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cc6c:	f002 bd9f 	b.w	f7ae <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cc70 <sdc_hci_cmd_lc_disconnect>:
    cc70:	f002 bb37 	b.w	f2e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cc74 <sdc_hci_cmd_lc_read_remote_version_information>:
    cc74:	f7f9 bf92 	b.w	6b9c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cc78:	b570      	push	{r4, r5, r6, lr}
    cc7a:	880b      	ldrh	r3, [r1, #0]
    cc7c:	7cc4      	ldrb	r4, [r0, #19]
    cc7e:	f100 0518 	add.w	r5, r0, #24
    cc82:	f3c3 060e 	ubfx	r6, r3, #0, #15
    cc86:	8802      	ldrh	r2, [r0, #0]
    cc88:	4435      	add	r5, r6
    cc8a:	1d64      	adds	r4, r4, #5
    cc8c:	882d      	ldrh	r5, [r5, #0]
    cc8e:	4422      	add	r2, r4
    cc90:	b292      	uxth	r2, r2
    cc92:	4425      	add	r5, r4
    cc94:	1e54      	subs	r4, r2, #1
    cc96:	442c      	add	r4, r5
    cc98:	fb94 f4f2 	sdiv	r4, r4, r2
    cc9c:	fb02 6204 	mla	r2, r2, r4, r6
    cca0:	8840      	ldrh	r0, [r0, #2]
    cca2:	b292      	uxth	r2, r2
    cca4:	4290      	cmp	r0, r2
    cca6:	d903      	bls.n	ccb0 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cca8:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    ccac:	4310      	orrs	r0, r2
    ccae:	e002      	b.n	ccb6 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    ccb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ccb4:	4398      	bics	r0, r3
    ccb6:	8008      	strh	r0, [r1, #0]
    ccb8:	bd70      	pop	{r4, r5, r6, pc}
    ccba:	0442      	lsls	r2, r0, #17
    ccbc:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    ccc0:	d107      	bne.n	ccd2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    ccc2:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    ccc6:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    ccca:	4288      	cmp	r0, r1
    cccc:	d001      	beq.n	ccd2 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    ccce:	2001      	movs	r0, #1
    ccd0:	4770      	bx	lr
    ccd2:	2000      	movs	r0, #0
    ccd4:	4770      	bx	lr

0000ccd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    ccd6:	8881      	ldrh	r1, [r0, #4]
    ccd8:	88c0      	ldrh	r0, [r0, #6]
    ccda:	4288      	cmp	r0, r1
    ccdc:	d101      	bne.n	cce2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    ccde:	2001      	movs	r0, #1
    cce0:	4770      	bx	lr
    cce2:	2000      	movs	r0, #0
    cce4:	4770      	bx	lr

0000cce6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccea:	460f      	mov	r7, r1
    ccec:	4604      	mov	r4, r0
    ccee:	f100 0118 	add.w	r1, r0, #24
    ccf2:	8880      	ldrh	r0, [r0, #4]
    ccf4:	2600      	movs	r6, #0
    ccf6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    ccfa:	1845      	adds	r5, r0, r1
    ccfc:	603e      	str	r6, [r7, #0]
    ccfe:	89e0      	ldrh	r0, [r4, #14]
    cd00:	2800      	cmp	r0, #0
    cd02:	d016      	beq.n	cd32 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cd04:	8961      	ldrh	r1, [r4, #10]
    cd06:	4408      	add	r0, r1
    cd08:	b280      	uxth	r0, r0
    cd0a:	8160      	strh	r0, [r4, #10]
    cd0c:	8829      	ldrh	r1, [r5, #0]
    cd0e:	4288      	cmp	r0, r1
    cd10:	d905      	bls.n	cd1e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cd12:	f240 1151 	movw	r1, #337	; 0x151
    cd16:	f04f 0014 	mov.w	r0, #20
    cd1a:	f7f3 fe37 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd1e:	d106      	bne.n	cd2e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cd20:	f104 0104 	add.w	r1, r4, #4
    cd24:	4620      	mov	r0, r4
    cd26:	f7ff ffa7 	bl	cc78 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cd2a:	8166      	strh	r6, [r4, #10]
    cd2c:	603d      	str	r5, [r7, #0]
    cd2e:	81e6      	strh	r6, [r4, #14]
    cd30:	2001      	movs	r0, #1
    cd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cd36 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd3a:	4604      	mov	r4, r0
    cd3c:	f100 0318 	add.w	r3, r0, #24
    cd40:	88c0      	ldrh	r0, [r0, #6]
    cd42:	460e      	mov	r6, r1
    cd44:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cd48:	8a20      	ldrh	r0, [r4, #16]
    cd4a:	19d9      	adds	r1, r3, r7
    cd4c:	b108      	cbz	r0, cd52 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cd4e:	42b0      	cmp	r0, r6
    cd50:	d202      	bcs.n	cd58 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cd52:	2000      	movs	r0, #0
    cd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd58:	89a0      	ldrh	r0, [r4, #12]
    cd5a:	2500      	movs	r5, #0
    cd5c:	b140      	cbz	r0, cd70 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cd5e:	f8b1 c000 	ldrh.w	ip, [r1]
    cd62:	4560      	cmp	r0, ip
    cd64:	d006      	beq.n	cd74 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cd66:	f44f 7101 	mov.w	r1, #516	; 0x204
    cd6a:	2014      	movs	r0, #20
    cd6c:	f7f3 fe0e 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd70:	800d      	strh	r5, [r1, #0]
    cd72:	e00e      	b.n	cd92 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    cd74:	f894 c013 	ldrb.w	ip, [r4, #19]
    cd78:	4418      	add	r0, r3
    cd7a:	f10c 0c05 	add.w	ip, ip, #5
    cd7e:	44bc      	add	ip, r7
    cd80:	4460      	add	r0, ip
    cd82:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    cd86:	f820 cc03 	strh.w	ip, [r0, #-3]
    cd8a:	f894 c016 	ldrb.w	ip, [r4, #22]
    cd8e:	f800 cc01 	strb.w	ip, [r0, #-1]
    cd92:	89a0      	ldrh	r0, [r4, #12]
    cd94:	4430      	add	r0, r6
    cd96:	81a0      	strh	r0, [r4, #12]
    cd98:	8808      	ldrh	r0, [r1, #0]
    cd9a:	4430      	add	r0, r6
    cd9c:	8008      	strh	r0, [r1, #0]
    cd9e:	b12a      	cbz	r2, cdac <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    cda0:	1da1      	adds	r1, r4, #6
    cda2:	4620      	mov	r0, r4
    cda4:	f7ff ff68 	bl	cc78 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cda8:	81a5      	strh	r5, [r4, #12]
    cdaa:	e00a      	b.n	cdc2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    cdac:	7ce0      	ldrb	r0, [r4, #19]
    cdae:	89a1      	ldrh	r1, [r4, #12]
    cdb0:	1d40      	adds	r0, r0, #5
    cdb2:	4438      	add	r0, r7
    cdb4:	4419      	add	r1, r3
    cdb6:	4408      	add	r0, r1
    cdb8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cdbc:	82a1      	strh	r1, [r4, #20]
    cdbe:	7880      	ldrb	r0, [r0, #2]
    cdc0:	75a0      	strb	r0, [r4, #22]
    cdc2:	8225      	strh	r5, [r4, #16]
    cdc4:	2001      	movs	r0, #1
    cdc6:	e7c5      	b.n	cd54 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000cdc8 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    cdc8:	1c80      	adds	r0, r0, #2
    cdca:	4770      	bx	lr

0000cdcc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cdcc:	b510      	push	{r4, lr}
    cdce:	4604      	mov	r4, r0
    cdd0:	88c0      	ldrh	r0, [r0, #6]
    cdd2:	88a1      	ldrh	r1, [r4, #4]
    cdd4:	4281      	cmp	r1, r0
    cdd6:	d003      	beq.n	cde0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    cdd8:	8960      	ldrh	r0, [r4, #10]
    cdda:	b908      	cbnz	r0, cde0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    cddc:	89e0      	ldrh	r0, [r4, #14]
    cdde:	b108      	cbz	r0, cde4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    cde0:	2000      	movs	r0, #0
    cde2:	bd10      	pop	{r4, pc}
    cde4:	1d21      	adds	r1, r4, #4
    cde6:	4620      	mov	r0, r4
    cde8:	f7ff ff46 	bl	cc78 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdec:	2000      	movs	r0, #0
    cdee:	81e0      	strh	r0, [r4, #14]
    cdf0:	2001      	movs	r0, #1
    cdf2:	bd10      	pop	{r4, pc}

0000cdf4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cdf4:	b510      	push	{r4, lr}
    cdf6:	4604      	mov	r4, r0
    cdf8:	f100 0218 	add.w	r2, r0, #24
    cdfc:	88c0      	ldrh	r0, [r0, #6]
    cdfe:	f3c0 000e 	ubfx	r0, r0, #0, #15
    ce02:	4402      	add	r2, r0
    ce04:	8820      	ldrh	r0, [r4, #0]
    ce06:	2845      	cmp	r0, #69	; 0x45
    ce08:	d200      	bcs.n	ce0c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    ce0a:	2045      	movs	r0, #69	; 0x45
    ce0c:	4288      	cmp	r0, r1
    ce0e:	d204      	bcs.n	ce1a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    ce10:	f44f 7182 	mov.w	r1, #260	; 0x104
    ce14:	2014      	movs	r0, #20
    ce16:	f7f3 fdb9 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce1a:	7ca0      	ldrb	r0, [r4, #18]
    ce1c:	2800      	cmp	r0, #0
    ce1e:	d003      	beq.n	ce28 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    ce20:	8810      	ldrh	r0, [r2, #0]
    ce22:	4288      	cmp	r0, r1
    ce24:	d201      	bcs.n	ce2a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    ce26:	2000      	movs	r0, #0
    ce28:	bd10      	pop	{r4, pc}
    ce2a:	8011      	strh	r1, [r2, #0]
    ce2c:	1da1      	adds	r1, r4, #6
    ce2e:	4620      	mov	r0, r4
    ce30:	f7ff ff22 	bl	cc78 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ce34:	2000      	movs	r0, #0
    ce36:	74a0      	strb	r0, [r4, #18]
    ce38:	2001      	movs	r0, #1
    ce3a:	bd10      	pop	{r4, pc}

0000ce3c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    ce3c:	b510      	push	{r4, lr}
    ce3e:	88c4      	ldrh	r4, [r0, #6]
    ce40:	8883      	ldrh	r3, [r0, #4]
    ce42:	4601      	mov	r1, r0
    ce44:	f100 0218 	add.w	r2, r0, #24
    ce48:	f3c3 000e 	ubfx	r0, r3, #0, #15
    ce4c:	4410      	add	r0, r2
    ce4e:	42a3      	cmp	r3, r4
    ce50:	d002      	beq.n	ce58 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    ce52:	8949      	ldrh	r1, [r1, #10]
    ce54:	2900      	cmp	r1, #0
    ce56:	d000      	beq.n	ce5a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    ce58:	2000      	movs	r0, #0
    ce5a:	bd10      	pop	{r4, pc}

0000ce5c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    ce5c:	8803      	ldrh	r3, [r0, #0]
    ce5e:	2b45      	cmp	r3, #69	; 0x45
    ce60:	d200      	bcs.n	ce64 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    ce62:	2345      	movs	r3, #69	; 0x45
    ce64:	8013      	strh	r3, [r2, #0]
    ce66:	88c2      	ldrh	r2, [r0, #6]
    ce68:	f3c2 030e 	ubfx	r3, r2, #0, #15
    ce6c:	f100 0218 	add.w	r2, r0, #24
    ce70:	441a      	add	r2, r3
    ce72:	600a      	str	r2, [r1, #0]
    ce74:	8980      	ldrh	r0, [r0, #12]
    ce76:	4770      	bx	lr

0000ce78 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    ce78:	7cc0      	ldrb	r0, [r0, #19]
    ce7a:	1d40      	adds	r0, r0, #5
    ce7c:	4408      	add	r0, r1
    ce7e:	1ec0      	subs	r0, r0, #3
    ce80:	6010      	str	r0, [r2, #0]
    ce82:	8808      	ldrh	r0, [r1, #0]
    ce84:	4770      	bx	lr

0000ce86 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    ce86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce8a:	460e      	mov	r6, r1
    ce8c:	88c1      	ldrh	r1, [r0, #6]
    ce8e:	8902      	ldrh	r2, [r0, #8]
    ce90:	4604      	mov	r4, r0
    ce92:	f100 0818 	add.w	r8, r0, #24
    ce96:	8800      	ldrh	r0, [r0, #0]
    ce98:	f3c1 050e 	ubfx	r5, r1, #0, #15
    ce9c:	f3c2 070e 	ubfx	r7, r2, #0, #15
    cea0:	2845      	cmp	r0, #69	; 0x45
    cea2:	d200      	bcs.n	cea6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cea4:	2045      	movs	r0, #69	; 0x45
    cea6:	42b0      	cmp	r0, r6
    cea8:	d203      	bcs.n	ceb2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    ceaa:	21c6      	movs	r1, #198	; 0xc6
    ceac:	2014      	movs	r0, #20
    ceae:	f7f3 fd6d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ceb2:	4610      	mov	r0, r2
    ceb4:	f7ff ff01 	bl	ccba <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ceb8:	b110      	cbz	r0, cec0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    ceba:	2000      	movs	r0, #0
    cebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cec0:	42af      	cmp	r7, r5
    cec2:	d908      	bls.n	ced6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cec4:	7ce1      	ldrb	r1, [r4, #19]
    cec6:	1b78      	subs	r0, r7, r5
    cec8:	1a40      	subs	r0, r0, r1
    ceca:	1f40      	subs	r0, r0, #5
    cecc:	4286      	cmp	r6, r0
    cece:	dd02      	ble.n	ced6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    ced0:	2000      	movs	r0, #0
    ced2:	74a0      	strb	r0, [r4, #18]
    ced4:	e7f1      	b.n	ceba <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    ced6:	eb08 0005 	add.w	r0, r8, r5
    ceda:	2101      	movs	r1, #1
    cedc:	8006      	strh	r6, [r0, #0]
    cede:	74a1      	strb	r1, [r4, #18]
    cee0:	e7ec      	b.n	cebc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cee2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cee2:	b538      	push	{r3, r4, r5, lr}
    cee4:	88c4      	ldrh	r4, [r0, #6]
    cee6:	8881      	ldrh	r1, [r0, #4]
    cee8:	f100 0218 	add.w	r2, r0, #24
    ceec:	f3c1 030e 	ubfx	r3, r1, #0, #15
    cef0:	441a      	add	r2, r3
    cef2:	42a1      	cmp	r1, r4
    cef4:	d010      	beq.n	cf18 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cef6:	8943      	ldrh	r3, [r0, #10]
    cef8:	89c5      	ldrh	r5, [r0, #14]
    cefa:	8812      	ldrh	r2, [r2, #0]
    cefc:	442b      	add	r3, r5
    cefe:	4293      	cmp	r3, r2
    cf00:	d308      	bcc.n	cf14 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cf02:	f8ad 1000 	strh.w	r1, [sp]
    cf06:	4669      	mov	r1, sp
    cf08:	f7ff feb6 	bl	cc78 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cf0c:	f8bd 0000 	ldrh.w	r0, [sp]
    cf10:	42a0      	cmp	r0, r4
    cf12:	d001      	beq.n	cf18 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cf14:	2001      	movs	r0, #1
    cf16:	bd38      	pop	{r3, r4, r5, pc}
    cf18:	2000      	movs	r0, #0
    cf1a:	bd38      	pop	{r3, r4, r5, pc}

0000cf1c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cf1c:	b570      	push	{r4, r5, r6, lr}
    cf1e:	88c6      	ldrh	r6, [r0, #6]
    cf20:	8885      	ldrh	r5, [r0, #4]
    cf22:	4603      	mov	r3, r0
    cf24:	f100 0418 	add.w	r4, r0, #24
    cf28:	f3c5 000e 	ubfx	r0, r5, #0, #15
    cf2c:	4420      	add	r0, r4
    cf2e:	42b5      	cmp	r5, r6
    cf30:	d102      	bne.n	cf38 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    cf32:	2000      	movs	r0, #0
    cf34:	81d8      	strh	r0, [r3, #14]
    cf36:	bd70      	pop	{r4, r5, r6, pc}
    cf38:	8804      	ldrh	r4, [r0, #0]
    cf3a:	895d      	ldrh	r5, [r3, #10]
    cf3c:	7cde      	ldrb	r6, [r3, #19]
    cf3e:	1b64      	subs	r4, r4, r5
    cf40:	4435      	add	r5, r6
    cf42:	4428      	add	r0, r5
    cf44:	880d      	ldrh	r5, [r1, #0]
    cf46:	b2a4      	uxth	r4, r4
    cf48:	1c80      	adds	r0, r0, #2
    cf4a:	42a5      	cmp	r5, r4
    cf4c:	d900      	bls.n	cf50 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    cf4e:	800c      	strh	r4, [r1, #0]
    cf50:	895c      	ldrh	r4, [r3, #10]
    cf52:	b124      	cbz	r4, cf5e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    cf54:	2400      	movs	r4, #0
    cf56:	7014      	strb	r4, [r2, #0]
    cf58:	8809      	ldrh	r1, [r1, #0]
    cf5a:	81d9      	strh	r1, [r3, #14]
    cf5c:	bd70      	pop	{r4, r5, r6, pc}
    cf5e:	2401      	movs	r4, #1
    cf60:	e7f9      	b.n	cf56 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cf62 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf66:	461d      	mov	r5, r3
    cf68:	4616      	mov	r6, r2
    cf6a:	9f06      	ldr	r7, [sp, #24]
    cf6c:	460b      	mov	r3, r1
    cf6e:	4604      	mov	r4, r0
    cf70:	463a      	mov	r2, r7
    cf72:	4629      	mov	r1, r5
    cf74:	4630      	mov	r0, r6
    cf76:	f000 f839 	bl	cfec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cf7a:	4283      	cmp	r3, r0
    cf7c:	d201      	bcs.n	cf82 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cf7e:	219e      	movs	r1, #158	; 0x9e
    cf80:	e012      	b.n	cfa8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cf82:	07a0      	lsls	r0, r4, #30
    cf84:	d001      	beq.n	cf8a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    cf86:	219f      	movs	r1, #159	; 0x9f
    cf88:	e00e      	b.n	cfa8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    cf8a:	2218      	movs	r2, #24
    cf8c:	2100      	movs	r1, #0
    cf8e:	4620      	mov	r0, r4
    cf90:	f003 fb2d 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf94:	19a8      	adds	r0, r5, r6
    cf96:	1d40      	adds	r0, r0, #5
    cf98:	4378      	muls	r0, r7
    cf9a:	b280      	uxth	r0, r0
    cf9c:	74e5      	strb	r5, [r4, #19]
    cf9e:	8060      	strh	r0, [r4, #2]
    cfa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cfa4:	d903      	bls.n	cfae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    cfa6:	21a4      	movs	r1, #164	; 0xa4
    cfa8:	2014      	movs	r0, #20
    cfaa:	f7f3 fcef 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfae:	8026      	strh	r6, [r4, #0]
    cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cfb4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cfb4:	b570      	push	{r4, r5, r6, lr}
    cfb6:	460b      	mov	r3, r1
    cfb8:	4604      	mov	r4, r0
    cfba:	f100 0118 	add.w	r1, r0, #24
    cfbe:	8902      	ldrh	r2, [r0, #8]
    cfc0:	8880      	ldrh	r0, [r0, #4]
    cfc2:	f3c2 050e 	ubfx	r5, r2, #0, #15
    cfc6:	440d      	add	r5, r1
    cfc8:	4282      	cmp	r2, r0
    cfca:	d101      	bne.n	cfd0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    cfcc:	2000      	movs	r0, #0
    cfce:	bd70      	pop	{r4, r5, r6, pc}
    cfd0:	b123      	cbz	r3, cfdc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    cfd2:	7ce2      	ldrb	r2, [r4, #19]
    cfd4:	1ca9      	adds	r1, r5, #2
    cfd6:	4618      	mov	r0, r3
    cfd8:	f003 fa8f 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfdc:	882d      	ldrh	r5, [r5, #0]
    cfde:	f104 0108 	add.w	r1, r4, #8
    cfe2:	4620      	mov	r0, r4
    cfe4:	f7ff fe48 	bl	cc78 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cfe8:	4628      	mov	r0, r5
    cfea:	bd70      	pop	{r4, r5, r6, pc}

0000cfec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    cfec:	4401      	add	r1, r0
    cfee:	1d49      	adds	r1, r1, #5
    cff0:	4351      	muls	r1, r2
    cff2:	b28a      	uxth	r2, r1
    cff4:	2100      	movs	r1, #0
    cff6:	2845      	cmp	r0, #69	; 0x45
    cff8:	d202      	bcs.n	d000 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    cffa:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    cffe:	b281      	uxth	r1, r0
    d000:	3218      	adds	r2, #24
    d002:	1850      	adds	r0, r2, r1
    d004:	b280      	uxth	r0, r0
    d006:	4770      	bx	lr

0000d008 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d00c:	4688      	mov	r8, r1
    d00e:	88c1      	ldrh	r1, [r0, #6]
    d010:	4604      	mov	r4, r0
    d012:	8900      	ldrh	r0, [r0, #8]
    d014:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d018:	f104 0518 	add.w	r5, r4, #24
    d01c:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d020:	eb05 0906 	add.w	r9, r5, r6
    d024:	f7ff fe49 	bl	ccba <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d028:	2200      	movs	r2, #0
    d02a:	b998      	cbnz	r0, d054 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d02c:	8820      	ldrh	r0, [r4, #0]
    d02e:	2845      	cmp	r0, #69	; 0x45
    d030:	d200      	bcs.n	d034 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d032:	2045      	movs	r0, #69	; 0x45
    d034:	42b7      	cmp	r7, r6
    d036:	d906      	bls.n	d046 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d038:	7ce3      	ldrb	r3, [r4, #19]
    d03a:	1bb9      	subs	r1, r7, r6
    d03c:	1ac9      	subs	r1, r1, r3
    d03e:	1f49      	subs	r1, r1, #5
    d040:	4281      	cmp	r1, r0
    d042:	da00      	bge.n	d046 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d044:	4608      	mov	r0, r1
    d046:	89a1      	ldrh	r1, [r4, #12]
    d048:	b111      	cbz	r1, d050 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d04a:	f8b9 3000 	ldrh.w	r3, [r9]
    d04e:	1ac0      	subs	r0, r0, r3
    d050:	4540      	cmp	r0, r8
    d052:	da03      	bge.n	d05c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d054:	8222      	strh	r2, [r4, #16]
    d056:	2000      	movs	r0, #0
    d058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d05c:	7ce0      	ldrb	r0, [r4, #19]
    d05e:	4429      	add	r1, r5
    d060:	1d40      	adds	r0, r0, #5
    d062:	4430      	add	r0, r6
    d064:	4408      	add	r0, r1
    d066:	f8a4 8010 	strh.w	r8, [r4, #16]
    d06a:	1ec0      	subs	r0, r0, #3
    d06c:	e7f4      	b.n	d058 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d06e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d06e:	b570      	push	{r4, r5, r6, lr}
    d070:	2300      	movs	r3, #0
    d072:	f1a1 0208 	sub.w	r2, r1, #8
    d076:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d07a:	42a2      	cmp	r2, r4
    d07c:	d304      	bcc.n	d088 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d07e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d082:	2015      	movs	r0, #21
    d084:	f7f3 fc82 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d088:	6802      	ldr	r2, [r0, #0]
    d08a:	b90a      	cbnz	r2, d090 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d08c:	e01e      	b.n	d0cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d08e:	4610      	mov	r0, r2
    d090:	6802      	ldr	r2, [r0, #0]
    d092:	8893      	ldrh	r3, [r2, #4]
    d094:	428b      	cmp	r3, r1
    d096:	d002      	beq.n	d09e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d098:	6813      	ldr	r3, [r2, #0]
    d09a:	2b00      	cmp	r3, #0
    d09c:	d1f7      	bne.n	d08e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d09e:	8894      	ldrh	r4, [r2, #4]
    d0a0:	4613      	mov	r3, r2
    d0a2:	428c      	cmp	r4, r1
    d0a4:	d101      	bne.n	d0aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d0a6:	6811      	ldr	r1, [r2, #0]
    d0a8:	e00d      	b.n	d0c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d0aa:	f101 0508 	add.w	r5, r1, #8
    d0ae:	b2ae      	uxth	r6, r5
    d0b0:	2500      	movs	r5, #0
    d0b2:	42b4      	cmp	r4, r6
    d0b4:	d309      	bcc.n	d0ca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d0b6:	1a64      	subs	r4, r4, r1
    d0b8:	4411      	add	r1, r2
    d0ba:	600d      	str	r5, [r1, #0]
    d0bc:	808c      	strh	r4, [r1, #4]
    d0be:	6802      	ldr	r2, [r0, #0]
    d0c0:	6812      	ldr	r2, [r2, #0]
    d0c2:	6002      	str	r2, [r0, #0]
    d0c4:	600a      	str	r2, [r1, #0]
    d0c6:	6001      	str	r1, [r0, #0]
    d0c8:	e000      	b.n	d0cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d0ca:	2300      	movs	r3, #0
    d0cc:	4618      	mov	r0, r3
    d0ce:	bd70      	pop	{r4, r5, r6, pc}

0000d0d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d0d0:	b510      	push	{r4, lr}
    d0d2:	000c      	movs	r4, r1
    d0d4:	d004      	beq.n	d0e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d0d6:	2c08      	cmp	r4, #8
    d0d8:	d207      	bcs.n	d0ea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d0da:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d0de:	e00a      	b.n	d0f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d0e0:	b108      	cbz	r0, d0e6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d0e2:	2100      	movs	r1, #0
    d0e4:	6001      	str	r1, [r0, #0]
    d0e6:	2000      	movs	r0, #0
    d0e8:	bd10      	pop	{r4, pc}
    d0ea:	b158      	cbz	r0, d104 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d0ec:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d0f0:	d304      	bcc.n	d0fc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d0f2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d0f6:	2015      	movs	r0, #21
    d0f8:	f7f3 fc48 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0fc:	b2a1      	uxth	r1, r4
    d0fe:	6800      	ldr	r0, [r0, #0]
    d100:	f000 f814 	bl	d12c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d104:	1d20      	adds	r0, r4, #4
    d106:	bd10      	pop	{r4, pc}

0000d108 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d108:	2100      	movs	r1, #0
    d10a:	6802      	ldr	r2, [r0, #0]
    d10c:	e003      	b.n	d116 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d10e:	8893      	ldrh	r3, [r2, #4]
    d110:	6812      	ldr	r2, [r2, #0]
    d112:	4419      	add	r1, r3
    d114:	b289      	uxth	r1, r1
    d116:	2a00      	cmp	r2, #0
    d118:	d1f9      	bne.n	d10e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d11a:	f000 b807 	b.w	d12c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d11e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d11e:	2300      	movs	r3, #0
    d120:	600b      	str	r3, [r1, #0]
    d122:	808a      	strh	r2, [r1, #4]
    d124:	6802      	ldr	r2, [r0, #0]
    d126:	600a      	str	r2, [r1, #0]
    d128:	6001      	str	r1, [r0, #0]
    d12a:	4770      	bx	lr
    d12c:	2300      	movs	r3, #0
    d12e:	6043      	str	r3, [r0, #4]
    d130:	1d02      	adds	r2, r0, #4
    d132:	8101      	strh	r1, [r0, #8]
    d134:	6002      	str	r2, [r0, #0]
    d136:	4770      	bx	lr
    d138:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d13c:	8159      	strh	r1, [r3, #10]
    d13e:	4611      	mov	r1, r2
    d140:	f000 b814 	b.w	d16c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d144:	b170      	cbz	r0, d164 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d146:	7882      	ldrb	r2, [r0, #2]
    d148:	fbb1 f3f2 	udiv	r3, r1, r2
    d14c:	fb02 1213 	mls	r2, r2, r3, r1
    d150:	b2d2      	uxtb	r2, r2
    d152:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d156:	895b      	ldrh	r3, [r3, #10]
    d158:	428b      	cmp	r3, r1
    d15a:	d101      	bne.n	d160 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d15c:	4610      	mov	r0, r2
    d15e:	4770      	bx	lr
    d160:	78c3      	ldrb	r3, [r0, #3]
    d162:	b10b      	cbz	r3, d168 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d164:	20ff      	movs	r0, #255	; 0xff
    d166:	4770      	bx	lr
    d168:	f7f3 bef2 	b.w	f50 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d16c:	8802      	ldrh	r2, [r0, #0]
    d16e:	fb01 0102 	mla	r1, r1, r2, r0
    d172:	7880      	ldrb	r0, [r0, #2]
    d174:	220a      	movs	r2, #10
    d176:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d17a:	4408      	add	r0, r1
    d17c:	4770      	bx	lr

0000d17e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d17e:	b51c      	push	{r2, r3, r4, lr}
    d180:	4604      	mov	r4, r0
    d182:	2000      	movs	r0, #0
    d184:	9001      	str	r0, [sp, #4]
    d186:	9000      	str	r0, [sp, #0]
    d188:	f88d 4006 	strb.w	r4, [sp, #6]
    d18c:	e00a      	b.n	d1a4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d18e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d192:	4621      	mov	r1, r4
    d194:	f7f3 ffca 	bl	112c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d198:	b120      	cbz	r0, d1a4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d19a:	f240 217e 	movw	r1, #638	; 0x27e
    d19e:	2017      	movs	r0, #23
    d1a0:	f7f3 fbf4 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1a4:	4668      	mov	r0, sp
    d1a6:	f7f3 ff71 	bl	108c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d1aa:	2800      	cmp	r0, #0
    d1ac:	d0ef      	beq.n	d18e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d1ae:	bd1c      	pop	{r2, r3, r4, pc}

0000d1b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d1b0:	b570      	push	{r4, r5, r6, lr}
    d1b2:	460e      	mov	r6, r1
    d1b4:	461d      	mov	r5, r3
    d1b6:	4611      	mov	r1, r2
    d1b8:	f000 f813 	bl	d1e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d1bc:	4604      	mov	r4, r0
    d1be:	4629      	mov	r1, r5
    d1c0:	4630      	mov	r0, r6
    d1c2:	f000 f804 	bl	d1ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d1c6:	4420      	add	r0, r4
    d1c8:	1d00      	adds	r0, r0, #4
    d1ca:	b280      	uxth	r0, r0
    d1cc:	bd70      	pop	{r4, r5, r6, pc}
    d1ce:	b510      	push	{r4, lr}
    d1d0:	460a      	mov	r2, r1
    d1d2:	2109      	movs	r1, #9
    d1d4:	f7ff ff0a 	bl	cfec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1d8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d1dc:	1cc0      	adds	r0, r0, #3
    d1de:	4008      	ands	r0, r1
    d1e0:	bd10      	pop	{r4, pc}
    d1e2:	b510      	push	{r4, lr}
    d1e4:	460a      	mov	r2, r1
    d1e6:	210a      	movs	r1, #10
    d1e8:	f7ff ff00 	bl	cfec <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d1ec:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d1f0:	1cc0      	adds	r0, r0, #3
    d1f2:	4008      	ands	r0, r1
    d1f4:	bd10      	pop	{r4, pc}
    d1f6:	b109      	cbz	r1, d1fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d1f8:	2100      	movs	r1, #0
    d1fa:	e000      	b.n	d1fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d1fc:	2102      	movs	r1, #2
    d1fe:	1843      	adds	r3, r0, r1
    d200:	7d1a      	ldrb	r2, [r3, #20]
    d202:	2a02      	cmp	r2, #2
    d204:	d008      	beq.n	d218 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d206:	7d5b      	ldrb	r3, [r3, #21]
    d208:	2b02      	cmp	r3, #2
    d20a:	d009      	beq.n	d220 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d20c:	2a03      	cmp	r2, #3
    d20e:	d003      	beq.n	d218 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d210:	2b03      	cmp	r3, #3
    d212:	d005      	beq.n	d220 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d214:	2000      	movs	r0, #0
    d216:	4770      	bx	lr
    d218:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d21c:	8b00      	ldrh	r0, [r0, #24]
    d21e:	4770      	bx	lr
    d220:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d224:	8b40      	ldrh	r0, [r0, #26]
    d226:	4770      	bx	lr
    d228:	b109      	cbz	r1, d22e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d22a:	2100      	movs	r1, #0
    d22c:	e000      	b.n	d230 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d22e:	2102      	movs	r1, #2
    d230:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d234:	8b01      	ldrh	r1, [r0, #24]
    d236:	b911      	cbnz	r1, d23e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d238:	8b40      	ldrh	r0, [r0, #26]
    d23a:	2800      	cmp	r0, #0
    d23c:	d000      	beq.n	d240 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d23e:	2001      	movs	r0, #1
    d240:	4770      	bx	lr
    d242:	b538      	push	{r3, r4, r5, lr}
    d244:	7883      	ldrb	r3, [r0, #2]
    d246:	f88d 3000 	strb.w	r3, [sp]
    d24a:	9b00      	ldr	r3, [sp, #0]
    d24c:	9300      	str	r3, [sp, #0]
    d24e:	f89d 3000 	ldrb.w	r3, [sp]
    d252:	b95b      	cbnz	r3, d26c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d254:	2400      	movs	r4, #0
    d256:	b10a      	cbz	r2, d25c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d258:	2300      	movs	r3, #0
    d25a:	e000      	b.n	d25e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d25c:	2302      	movs	r3, #2
    d25e:	18c2      	adds	r2, r0, r3
    d260:	7d15      	ldrb	r5, [r2, #20]
    d262:	2d02      	cmp	r5, #2
    d264:	d004      	beq.n	d270 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d266:	7d52      	ldrb	r2, [r2, #21]
    d268:	2a02      	cmp	r2, #2
    d26a:	d004      	beq.n	d276 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d26c:	2000      	movs	r0, #0
    d26e:	bd38      	pop	{r3, r4, r5, pc}
    d270:	461a      	mov	r2, r3
    d272:	1c5b      	adds	r3, r3, #1
    d274:	e000      	b.n	d278 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d276:	1c5a      	adds	r2, r3, #1
    d278:	b179      	cbz	r1, d29a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d27a:	18c5      	adds	r5, r0, r3
    d27c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d280:	752c      	strb	r4, [r5, #20]
    d282:	831c      	strh	r4, [r3, #24]
    d284:	2303      	movs	r3, #3
    d286:	1884      	adds	r4, r0, r2
    d288:	7523      	strb	r3, [r4, #20]
    d28a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d28e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d292:	685b      	ldr	r3, [r3, #4]
    d294:	600b      	str	r3, [r1, #0]
    d296:	8b00      	ldrh	r0, [r0, #24]
    d298:	8088      	strh	r0, [r1, #4]
    d29a:	2001      	movs	r0, #1
    d29c:	bd38      	pop	{r3, r4, r5, pc}
    d29e:	b510      	push	{r4, lr}
    d2a0:	b109      	cbz	r1, d2a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d2a2:	2100      	movs	r1, #0
    d2a4:	e000      	b.n	d2a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d2a6:	2102      	movs	r1, #2
    d2a8:	1843      	adds	r3, r0, r1
    d2aa:	7d1c      	ldrb	r4, [r3, #20]
    d2ac:	4294      	cmp	r4, r2
    d2ae:	d103      	bne.n	d2b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d2b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d2b4:	8b00      	ldrh	r0, [r0, #24]
    d2b6:	bd10      	pop	{r4, pc}
    d2b8:	7d5b      	ldrb	r3, [r3, #21]
    d2ba:	4293      	cmp	r3, r2
    d2bc:	d103      	bne.n	d2c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d2be:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d2c2:	8b40      	ldrh	r0, [r0, #26]
    d2c4:	bd10      	pop	{r4, pc}
    d2c6:	2000      	movs	r0, #0
    d2c8:	bd10      	pop	{r4, pc}
    d2ca:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d2ce:	d201      	bcs.n	d2d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d2d0:	0841      	lsrs	r1, r0, #1
    d2d2:	e000      	b.n	d2d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d2d4:	21ff      	movs	r1, #255	; 0xff
    d2d6:	1a40      	subs	r0, r0, r1
    d2d8:	f240 6172 	movw	r1, #1650	; 0x672
    d2dc:	4288      	cmp	r0, r1
    d2de:	db00      	blt.n	d2e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d2e0:	4608      	mov	r0, r1
    d2e2:	b280      	uxth	r0, r0
    d2e4:	4770      	bx	lr

0000d2e6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d2e6:	2101      	movs	r1, #1
    d2e8:	f7ff bf85 	b.w	d1f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2f0:	4606      	mov	r6, r0
    d2f2:	f342 0780 	sbfx	r7, r2, #2, #1
    d2f6:	7848      	ldrb	r0, [r1, #1]
    d2f8:	460c      	mov	r4, r1
    d2fa:	f022 0504 	bic.w	r5, r2, #4
    d2fe:	1c7f      	adds	r7, r7, #1
    d300:	b100      	cbz	r0, d304 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d302:	b90d      	cbnz	r5, d308 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d304:	4328      	orrs	r0, r5
    d306:	d104      	bne.n	d312 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d308:	b145      	cbz	r5, d31c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d30a:	2100      	movs	r1, #0
    d30c:	4620      	mov	r0, r4
    d30e:	f7f4 f82d 	bl	136c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d312:	20ff      	movs	r0, #255	; 0xff
    d314:	70a0      	strb	r0, [r4, #2]
    d316:	b11f      	cbz	r7, d320 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d318:	2000      	movs	r0, #0
    d31a:	e002      	b.n	d322 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d31c:	2101      	movs	r1, #1
    d31e:	e7f5      	b.n	d30c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d320:	2002      	movs	r0, #2
    d322:	1821      	adds	r1, r4, r0
    d324:	7d09      	ldrb	r1, [r1, #20]
    d326:	2903      	cmp	r1, #3
    d328:	d102      	bne.n	d330 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d32a:	2d02      	cmp	r5, #2
    d32c:	d000      	beq.n	d330 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d32e:	1c40      	adds	r0, r0, #1
    d330:	1822      	adds	r2, r4, r0
    d332:	2101      	movs	r1, #1
    d334:	7511      	strb	r1, [r2, #20]
    d336:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d33a:	2200      	movs	r2, #0
    d33c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d340:	830a      	strh	r2, [r1, #24]
    d342:	6840      	ldr	r0, [r0, #4]
    d344:	70a2      	strb	r2, [r4, #2]
    d346:	4631      	mov	r1, r6
    d348:	f362 010f 	bfi	r1, r2, #0, #16
    d34c:	e9c6 0100 	strd	r0, r1, [r6]
    d350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d354 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d358:	461e      	mov	r6, r3
    d35a:	4613      	mov	r3, r2
    d35c:	4604      	mov	r4, r0
    d35e:	b109      	cbz	r1, d364 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d360:	2000      	movs	r0, #0
    d362:	e000      	b.n	d366 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d364:	2002      	movs	r0, #2
    d366:	21ff      	movs	r1, #255	; 0xff
    d368:	70a1      	strb	r1, [r4, #2]
    d36a:	1821      	adds	r1, r4, r0
    d36c:	7d0a      	ldrb	r2, [r1, #20]
    d36e:	2a01      	cmp	r2, #1
    d370:	d003      	beq.n	d37a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d372:	7d49      	ldrb	r1, [r1, #21]
    d374:	2901      	cmp	r1, #1
    d376:	d10c      	bne.n	d392 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d378:	1c40      	adds	r0, r0, #1
    d37a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d37e:	2700      	movs	r7, #0
    d380:	8b29      	ldrh	r1, [r5, #24]
    d382:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d386:	198a      	adds	r2, r1, r6
    d388:	4562      	cmp	r2, ip
    d38a:	d905      	bls.n	d398 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d38c:	4420      	add	r0, r4
    d38e:	832f      	strh	r7, [r5, #24]
    d390:	7507      	strb	r7, [r0, #20]
    d392:	2000      	movs	r0, #0
    d394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d398:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d39c:	4632      	mov	r2, r6
    d39e:	6840      	ldr	r0, [r0, #4]
    d3a0:	4408      	add	r0, r1
    d3a2:	4619      	mov	r1, r3
    d3a4:	f003 f8a9 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3a8:	8b28      	ldrh	r0, [r5, #24]
    d3aa:	4430      	add	r0, r6
    d3ac:	8328      	strh	r0, [r5, #24]
    d3ae:	70a7      	strb	r7, [r4, #2]
    d3b0:	2001      	movs	r0, #1
    d3b2:	e7ef      	b.n	d394 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d3b4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d3b4:	b510      	push	{r4, lr}
    d3b6:	2101      	movs	r1, #1
    d3b8:	f7ff ff36 	bl	d228 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d3bc:	2800      	cmp	r0, #0
    d3be:	d000      	beq.n	d3c2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d3c0:	2001      	movs	r0, #1
    d3c2:	bd10      	pop	{r4, pc}

0000d3c4 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d3c4:	2201      	movs	r2, #1
    d3c6:	f7ff bf3c 	b.w	d242 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d3ca <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d3ca:	2200      	movs	r2, #0
    d3cc:	f7ff bf39 	b.w	d242 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d3d0 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d3d0:	b510      	push	{r4, lr}
    d3d2:	2100      	movs	r1, #0
    d3d4:	f7ff ff28 	bl	d228 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d3d8:	2800      	cmp	r0, #0
    d3da:	d000      	beq.n	d3de <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d3dc:	2001      	movs	r0, #1
    d3de:	bd10      	pop	{r4, pc}

0000d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d3e0:	b570      	push	{r4, r5, r6, lr}
    d3e2:	b109      	cbz	r1, d3e8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d3e4:	2300      	movs	r3, #0
    d3e6:	e000      	b.n	d3ea <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d3e8:	2302      	movs	r3, #2
    d3ea:	21ff      	movs	r1, #255	; 0xff
    d3ec:	7081      	strb	r1, [r0, #2]
    d3ee:	18c1      	adds	r1, r0, r3
    d3f0:	2402      	movs	r4, #2
    d3f2:	7d0d      	ldrb	r5, [r1, #20]
    d3f4:	2d01      	cmp	r5, #1
    d3f6:	d007      	beq.n	d408 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d3f8:	7d4d      	ldrb	r5, [r1, #21]
    d3fa:	2d01      	cmp	r5, #1
    d3fc:	d009      	beq.n	d412 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d3fe:	f44f 718b 	mov.w	r1, #278	; 0x116
    d402:	2009      	movs	r0, #9
    d404:	f7f3 fac2 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d408:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d40c:	831a      	strh	r2, [r3, #24]
    d40e:	750c      	strb	r4, [r1, #20]
    d410:	e003      	b.n	d41a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d412:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d416:	835a      	strh	r2, [r3, #26]
    d418:	754c      	strb	r4, [r1, #21]
    d41a:	2100      	movs	r1, #0
    d41c:	7081      	strb	r1, [r0, #2]
    d41e:	bd70      	pop	{r4, r5, r6, pc}

0000d420 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d420:	2101      	movs	r1, #1
    d422:	7001      	strb	r1, [r0, #0]
    d424:	4770      	bx	lr

0000d426 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d426:	2201      	movs	r2, #1
    d428:	4611      	mov	r1, r2
    d42a:	f7ff bf38 	b.w	d29e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d42e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d42e:	2201      	movs	r2, #1
    d430:	2100      	movs	r1, #0
    d432:	f7ff bf34 	b.w	d29e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d436 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d436:	2100      	movs	r1, #0
    d438:	f7ff bedd 	b.w	d1f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d43c:	2800      	cmp	r0, #0
    d43e:	db09      	blt.n	d454 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d440:	f000 021f 	and.w	r2, r0, #31
    d444:	2101      	movs	r1, #1
    d446:	4091      	lsls	r1, r2
    d448:	0940      	lsrs	r0, r0, #5
    d44a:	0080      	lsls	r0, r0, #2
    d44c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d450:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d454:	4770      	bx	lr
    d456:	2800      	cmp	r0, #0
    d458:	db0d      	blt.n	d476 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d45a:	f000 021f 	and.w	r2, r0, #31
    d45e:	2101      	movs	r1, #1
    d460:	4091      	lsls	r1, r2
    d462:	0940      	lsrs	r0, r0, #5
    d464:	0080      	lsls	r0, r0, #2
    d466:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d46a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d46e:	f3bf 8f4f 	dsb	sy
    d472:	f3bf 8f6f 	isb	sy
    d476:	4770      	bx	lr
    d478:	b510      	push	{r4, lr}
    d47a:	200e      	movs	r0, #14
    d47c:	f7ff ffeb 	bl	d456 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d480:	200e      	movs	r0, #14
    d482:	f7ff ffdb 	bl	d43c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d486:	200f      	movs	r0, #15
    d488:	f7ff ffe5 	bl	d456 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d490:	200f      	movs	r0, #15
    d492:	f7ff bfd3 	b.w	d43c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d496:	2800      	cmp	r0, #0
    d498:	db09      	blt.n	d4ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d49a:	f000 021f 	and.w	r2, r0, #31
    d49e:	2101      	movs	r1, #1
    d4a0:	4091      	lsls	r1, r2
    d4a2:	0940      	lsrs	r0, r0, #5
    d4a4:	0080      	lsls	r0, r0, #2
    d4a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d4aa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d4ae:	4770      	bx	lr
    d4b0:	5840      	ldr	r0, [r0, r1]
    d4b2:	2800      	cmp	r0, #0
    d4b4:	d000      	beq.n	d4b8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d4b6:	2001      	movs	r0, #1
    d4b8:	4770      	bx	lr

0000d4ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d4ba:	b510      	push	{r4, lr}
    d4bc:	4604      	mov	r4, r0
    d4be:	4620      	mov	r0, r4
    d4c0:	f7f4 f85c 	bl	157c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d4c4:	2811      	cmp	r0, #17
    d4c6:	d0fa      	beq.n	d4be <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d4c8:	bd10      	pop	{r4, pc}

0000d4ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d4ca:	b510      	push	{r4, lr}
    d4cc:	f7ff fff5 	bl	d4ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d4d0:	2800      	cmp	r0, #0
    d4d2:	d003      	beq.n	d4dc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d4d4:	21a9      	movs	r1, #169	; 0xa9
    d4d6:	201d      	movs	r0, #29
    d4d8:	f7f3 fa58 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4dc:	bd10      	pop	{r4, pc}

0000d4de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d4de:	f7f4 b9ab 	b.w	1838 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d4e2 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d4e2:	f7f4 b999 	b.w	1818 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d4e6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d4e6:	b510      	push	{r4, lr}
    d4e8:	4050      	eors	r0, r2
    d4ea:	780a      	ldrb	r2, [r1, #0]
    d4ec:	781c      	ldrb	r4, [r3, #0]
    d4ee:	4062      	eors	r2, r4
    d4f0:	4410      	add	r0, r2
    d4f2:	784a      	ldrb	r2, [r1, #1]
    d4f4:	785c      	ldrb	r4, [r3, #1]
    d4f6:	4062      	eors	r2, r4
    d4f8:	4410      	add	r0, r2
    d4fa:	788a      	ldrb	r2, [r1, #2]
    d4fc:	789c      	ldrb	r4, [r3, #2]
    d4fe:	4062      	eors	r2, r4
    d500:	4410      	add	r0, r2
    d502:	78ca      	ldrb	r2, [r1, #3]
    d504:	78dc      	ldrb	r4, [r3, #3]
    d506:	4062      	eors	r2, r4
    d508:	4410      	add	r0, r2
    d50a:	790a      	ldrb	r2, [r1, #4]
    d50c:	791c      	ldrb	r4, [r3, #4]
    d50e:	7949      	ldrb	r1, [r1, #5]
    d510:	4062      	eors	r2, r4
    d512:	4410      	add	r0, r2
    d514:	795a      	ldrb	r2, [r3, #5]
    d516:	4051      	eors	r1, r2
    d518:	42c1      	cmn	r1, r0
    d51a:	d101      	bne.n	d520 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d51c:	2001      	movs	r0, #1
    d51e:	bd10      	pop	{r4, pc}
    d520:	2000      	movs	r0, #0
    d522:	bd10      	pop	{r4, pc}

0000d524 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d524:	b510      	push	{r4, lr}
    d526:	2900      	cmp	r1, #0
    d528:	4604      	mov	r4, r0
    d52a:	f04f 0106 	mov.w	r1, #6
    d52e:	d002      	beq.n	d536 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d530:	f7f3 face 	bl	ad0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d534:	e001      	b.n	d53a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d536:	f7f3 fad9 	bl	aec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d53a:	7960      	ldrb	r0, [r4, #5]
    d53c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d540:	7160      	strb	r0, [r4, #5]
    d542:	bd10      	pop	{r4, pc}

0000d544 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d544:	4770      	bx	lr

0000d546 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d546:	b530      	push	{r4, r5, lr}
    d548:	460c      	mov	r4, r1
    d54a:	4605      	mov	r5, r0
    d54c:	b08d      	sub	sp, #52	; 0x34
    d54e:	f04f 0103 	mov.w	r1, #3
    d552:	f104 0003 	add.w	r0, r4, #3
    d556:	b112      	cbz	r2, d55e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d558:	f7f3 faba 	bl	ad0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d55c:	e001      	b.n	d562 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d55e:	f7f3 fac5 	bl	aec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d562:	7960      	ldrb	r0, [r4, #5]
    d564:	220d      	movs	r2, #13
    d566:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d56a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d56e:	7160      	strb	r0, [r4, #5]
    d570:	2100      	movs	r1, #0
    d572:	a804      	add	r0, sp, #16
    d574:	f003 f83b 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d578:	78e0      	ldrb	r0, [r4, #3]
    d57a:	f88d 001f 	strb.w	r0, [sp, #31]
    d57e:	7920      	ldrb	r0, [r4, #4]
    d580:	f88d 001e 	strb.w	r0, [sp, #30]
    d584:	7960      	ldrb	r0, [r4, #5]
    d586:	f88d 001d 	strb.w	r0, [sp, #29]
    d58a:	2210      	movs	r2, #16
    d58c:	4629      	mov	r1, r5
    d58e:	4668      	mov	r0, sp
    d590:	f002 ffb3 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d594:	4668      	mov	r0, sp
    d596:	f7ff ff98 	bl	d4ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d59a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d59e:	7020      	strb	r0, [r4, #0]
    d5a0:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d5a4:	7060      	strb	r0, [r4, #1]
    d5a6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d5aa:	70a0      	strb	r0, [r4, #2]
    d5ac:	b00d      	add	sp, #52	; 0x34
    d5ae:	bd30      	pop	{r4, r5, pc}

0000d5b0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    d5b0:	f7f4 bcac 	b.w	1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>
    d5b4:	07c1      	lsls	r1, r0, #31
    d5b6:	d001      	beq.n	d5bc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    d5b8:	2001      	movs	r0, #1
    d5ba:	4770      	bx	lr
    d5bc:	0780      	lsls	r0, r0, #30
    d5be:	d501      	bpl.n	d5c4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    d5c0:	2002      	movs	r0, #2
    d5c2:	4770      	bx	lr
    d5c4:	2000      	movs	r0, #0
    d5c6:	4770      	bx	lr
    d5c8:	b510      	push	{r4, lr}
    d5ca:	2801      	cmp	r0, #1
    d5cc:	d008      	beq.n	d5e0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    d5ce:	2802      	cmp	r0, #2
    d5d0:	d004      	beq.n	d5dc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    d5d2:	f240 4121 	movw	r1, #1057	; 0x421
    d5d6:	2006      	movs	r0, #6
    d5d8:	f7f3 f9d8 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5dc:	2001      	movs	r0, #1
    d5de:	bd10      	pop	{r4, pc}
    d5e0:	2000      	movs	r0, #0
    d5e2:	bd10      	pop	{r4, pc}
    d5e4:	2900      	cmp	r1, #0
    d5e6:	d004      	beq.n	d5f2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    d5e8:	2801      	cmp	r0, #1
    d5ea:	d003      	beq.n	d5f4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    d5ec:	2901      	cmp	r1, #1
    d5ee:	d001      	beq.n	d5f4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    d5f0:	2002      	movs	r0, #2
    d5f2:	4770      	bx	lr
    d5f4:	2001      	movs	r0, #1
    d5f6:	4770      	bx	lr
    d5f8:	f7ff bc90 	b.w	cf1c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d5fc <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d5fc:	2101      	movs	r1, #1
    d5fe:	f7f4 beff 	b.w	2400 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000d602 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d602:	b510      	push	{r4, lr}
    d604:	f002 fd4c 	bl	100a0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d608:	b118      	cbz	r0, d612 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d60e:	f7f9 bee5 	b.w	73dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d612:	20ff      	movs	r0, #255	; 0xff
    d614:	bd10      	pop	{r4, pc}

0000d616 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d616:	b510      	push	{r4, lr}
    d618:	f7f4 ff1e 	bl	2458 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    d61c:	2808      	cmp	r0, #8
    d61e:	d003      	beq.n	d628 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d624:	f7f4 bf04 	b.w	2430 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    d628:	bd10      	pop	{r4, pc}

0000d62a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d62a:	b570      	push	{r4, r5, r6, lr}
    d62c:	460e      	mov	r6, r1
    d62e:	b08c      	sub	sp, #48	; 0x30
    d630:	4614      	mov	r4, r2
    d632:	4601      	mov	r1, r0
    d634:	461d      	mov	r5, r3
    d636:	2210      	movs	r2, #16
    d638:	4668      	mov	r0, sp
    d63a:	f000 f929 	bl	d890 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d63e:	2210      	movs	r2, #16
    d640:	4631      	mov	r1, r6
    d642:	a804      	add	r0, sp, #16
    d644:	f000 f924 	bl	d890 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d648:	4668      	mov	r0, sp
    d64a:	f7ff ff3e 	bl	d4ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d64e:	a908      	add	r1, sp, #32
    d650:	f04f 0210 	mov.w	r2, #16
    d654:	4628      	mov	r0, r5
    d656:	b11c      	cbz	r4, d660 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d658:	f000 f91a 	bl	d890 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d65c:	b00c      	add	sp, #48	; 0x30
    d65e:	bd70      	pop	{r4, r5, r6, pc}
    d660:	f002 ff4b 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d664:	e7fa      	b.n	d65c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d666:	b510      	push	{r4, lr}
    d668:	460c      	mov	r4, r1
    d66a:	2100      	movs	r1, #0
    d66c:	f7f3 fcbc 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d670:	6060      	str	r0, [r4, #4]
    d672:	b118      	cbz	r0, d67c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d674:	2001      	movs	r0, #1
    d676:	7020      	strb	r0, [r4, #0]
    d678:	2000      	movs	r0, #0
    d67a:	bd10      	pop	{r4, pc}
    d67c:	2002      	movs	r0, #2
    d67e:	bd10      	pop	{r4, pc}

0000d680 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d680:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d684:	4348      	muls	r0, r1
    d686:	4770      	bx	lr

0000d688 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d688:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d68c:	fbb0 f0f1 	udiv	r0, r0, r1
    d690:	b280      	uxth	r0, r0
    d692:	4770      	bx	lr

0000d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d694:	b510      	push	{r4, lr}
    d696:	f1a2 0310 	sub.w	r3, r2, #16
    d69a:	290d      	cmp	r1, #13
    d69c:	d24d      	bcs.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d69e:	e8df f001 	tbb	[pc, r1]
    d6a2:	0907      	.short	0x0907
    d6a4:	1d1a150e 	.word	0x1d1a150e
    d6a8:	4e2c2921 	.word	0x4e2c2921
    d6ac:	0048362f 	.word	0x0048362f
    d6b0:	b3f2      	cbz	r2, d730 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d6b2:	e042      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6b4:	2a06      	cmp	r2, #6
    d6b6:	d03e      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6b8:	2a07      	cmp	r2, #7
    d6ba:	d03c      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6bc:	e03d      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6be:	2a0b      	cmp	r2, #11
    d6c0:	d039      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6c2:	2a0c      	cmp	r2, #12
    d6c4:	d037      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6c6:	2a0a      	cmp	r2, #10
    d6c8:	d035      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6ca:	e036      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6cc:	2a0d      	cmp	r2, #13
    d6ce:	d032      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6d0:	2a0e      	cmp	r2, #14
    d6d2:	d030      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6d4:	e031      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6d6:	2b0c      	cmp	r3, #12
    d6d8:	d92d      	bls.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6da:	e02e      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6dc:	3a11      	subs	r2, #17
    d6de:	2a0b      	cmp	r2, #11
    d6e0:	d929      	bls.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6e2:	e02a      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6e4:	2b03      	cmp	r3, #3
    d6e6:	d926      	bls.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6e8:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    d6ec:	b1f8      	cbz	r0, d72e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d6ee:	2a1c      	cmp	r2, #28
    d6f0:	d921      	bls.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6f2:	e022      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6f4:	2a04      	cmp	r2, #4
    d6f6:	d01e      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6f8:	e01f      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d6fa:	2a01      	cmp	r2, #1
    d6fc:	d01b      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d6fe:	e01c      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d700:	2a1d      	cmp	r2, #29
    d702:	d018      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d704:	2a1e      	cmp	r2, #30
    d706:	d016      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d708:	2a1f      	cmp	r2, #31
    d70a:	d014      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d70c:	e015      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d70e:	2a20      	cmp	r2, #32
    d710:	d011      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d712:	2a21      	cmp	r2, #33	; 0x21
    d714:	d00f      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d716:	2a22      	cmp	r2, #34	; 0x22
    d718:	d00d      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d71a:	2a23      	cmp	r2, #35	; 0x23
    d71c:	d00b      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d71e:	2a24      	cmp	r2, #36	; 0x24
    d720:	d009      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d722:	2a25      	cmp	r2, #37	; 0x25
    d724:	d007      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d726:	2a26      	cmp	r2, #38	; 0x26
    d728:	d005      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d72a:	2a2e      	cmp	r2, #46	; 0x2e
    d72c:	d003      	beq.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d72e:	e004      	b.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d730:	e001      	b.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d732:	2a28      	cmp	r2, #40	; 0x28
    d734:	d101      	bne.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d736:	2001      	movs	r0, #1
    d738:	bd10      	pop	{r4, pc}
    d73a:	2000      	movs	r0, #0
    d73c:	bd10      	pop	{r4, pc}
    d73e:	2a0f      	cmp	r2, #15
    d740:	d1fb      	bne.n	d73a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d742:	e7f8      	b.n	d736 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d744 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d744:	280b      	cmp	r0, #11
    d746:	d019      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d748:	280c      	cmp	r0, #12
    d74a:	d017      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d74c:	280a      	cmp	r0, #10
    d74e:	d015      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d750:	280d      	cmp	r0, #13
    d752:	d013      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d754:	280e      	cmp	r0, #14
    d756:	d011      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d758:	2820      	cmp	r0, #32
    d75a:	d00f      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d75c:	2821      	cmp	r0, #33	; 0x21
    d75e:	d00d      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d760:	2822      	cmp	r0, #34	; 0x22
    d762:	d00b      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d764:	2823      	cmp	r0, #35	; 0x23
    d766:	d009      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d768:	2824      	cmp	r0, #36	; 0x24
    d76a:	d007      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d76c:	2825      	cmp	r0, #37	; 0x25
    d76e:	d005      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d770:	2826      	cmp	r0, #38	; 0x26
    d772:	d003      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d774:	282e      	cmp	r0, #46	; 0x2e
    d776:	d001      	beq.n	d77c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d778:	2000      	movs	r0, #0
    d77a:	4770      	bx	lr
    d77c:	2001      	movs	r0, #1
    d77e:	4770      	bx	lr

0000d780 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d780:	f011 0f0c 	tst.w	r1, #12
    d784:	d018      	beq.n	d7b8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    d786:	074a      	lsls	r2, r1, #29
    d788:	f44f 7116 	mov.w	r1, #600	; 0x258
    d78c:	2a00      	cmp	r2, #0
    d78e:	da02      	bge.n	d796 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d790:	f04f 0210 	mov.w	r2, #16
    d794:	e001      	b.n	d79a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d796:	f04f 0240 	mov.w	r2, #64	; 0x40
    d79a:	da01      	bge.n	d7a0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d79c:	f04f 0196 	mov.w	r1, #150	; 0x96
    d7a0:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d7a4:	eba0 0301 	sub.w	r3, r0, r1
    d7a8:	4288      	cmp	r0, r1
    d7aa:	d903      	bls.n	d7b4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d7ac:	fb93 f0f2 	sdiv	r0, r3, r2
    d7b0:	b280      	uxth	r0, r0
    d7b2:	4770      	bx	lr
    d7b4:	2000      	movs	r0, #0
    d7b6:	4770      	bx	lr
    d7b8:	2902      	cmp	r1, #2
    d7ba:	d008      	beq.n	d7ce <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d7bc:	2870      	cmp	r0, #112	; 0x70
    d7be:	d9f9      	bls.n	d7b4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d7c0:	3870      	subs	r0, #112	; 0x70
    d7c2:	17c1      	asrs	r1, r0, #31
    d7c4:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d7c8:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    d7cc:	4770      	bx	lr
    d7ce:	283c      	cmp	r0, #60	; 0x3c
    d7d0:	d9f0      	bls.n	d7b4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d7d2:	383c      	subs	r0, #60	; 0x3c
    d7d4:	17c1      	asrs	r1, r0, #31
    d7d6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d7da:	f3c0 008f 	ubfx	r0, r0, #2, #16
    d7de:	4770      	bx	lr

0000d7e0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d7e0:	6809      	ldr	r1, [r1, #0]
    d7e2:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d7e6:	4770      	bx	lr

0000d7e8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d7e8:	07c1      	lsls	r1, r0, #31
    d7ea:	d001      	beq.n	d7f0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d7ec:	2001      	movs	r0, #1
    d7ee:	4770      	bx	lr
    d7f0:	0781      	lsls	r1, r0, #30
    d7f2:	d501      	bpl.n	d7f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d7f4:	2002      	movs	r0, #2
    d7f6:	4770      	bx	lr
    d7f8:	0740      	lsls	r0, r0, #29
    d7fa:	d501      	bpl.n	d800 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d7fc:	2008      	movs	r0, #8
    d7fe:	4770      	bx	lr
    d800:	2000      	movs	r0, #0
    d802:	4770      	bx	lr

0000d804 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d804:	b510      	push	{r4, lr}
    d806:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d80a:	2901      	cmp	r1, #1
    d80c:	d006      	beq.n	d81c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d80e:	2902      	cmp	r1, #2
    d810:	d005      	beq.n	d81e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d812:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    d816:	2029      	movs	r0, #41	; 0x29
    d818:	f7f3 f8b8 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d81c:	b108      	cbz	r0, d822 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d81e:	4610      	mov	r0, r2
    d820:	bd10      	pop	{r4, pc}
    d822:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d826:	bd10      	pop	{r4, pc}

0000d828 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    d828:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    d82c:	f001 bcf8 	b.w	f220 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000d830 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d834:	4607      	mov	r7, r0
    d836:	460e      	mov	r6, r1
    d838:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    d83c:	f7fc fbdc 	bl	9ff8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d840:	b198      	cbz	r0, d86a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    d842:	b31e      	cbz	r6, d88c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d844:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    d848:	1b40      	subs	r0, r0, r5
    d84a:	2300      	movs	r3, #0
    d84c:	eb61 0104 	sbc.w	r1, r1, r4
    d850:	461a      	mov	r2, r3
    d852:	1a1b      	subs	r3, r3, r0
    d854:	418a      	sbcs	r2, r1
    d856:	da19      	bge.n	d88c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    d858:	1c42      	adds	r2, r0, #1
    d85a:	f171 0100 	sbcs.w	r1, r1, #0
    d85e:	db07      	blt.n	d870 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    d860:	f240 211a 	movw	r1, #538	; 0x21a
    d864:	2029      	movs	r0, #41	; 0x29
    d866:	f7f3 f891 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d86a:	f44f 7104 	mov.w	r1, #528	; 0x210
    d86e:	e7f9      	b.n	d864 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    d870:	4430      	add	r0, r6
    d872:	1e40      	subs	r0, r0, #1
    d874:	fbb0 f1f6 	udiv	r1, r0, r6
    d878:	fb01 f006 	mul.w	r0, r1, r6
    d87c:	1828      	adds	r0, r5, r0
    d87e:	f144 0400 	adc.w	r4, r4, #0
    d882:	e9c7 0404 	strd	r0, r4, [r7, #16]
    d886:	4608      	mov	r0, r1
    d888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d88c:	2000      	movs	r0, #0
    d88e:	e7fb      	b.n	d888 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000d890 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d890:	b530      	push	{r4, r5, lr}
    d892:	4613      	mov	r3, r2
    d894:	e006      	b.n	d8a4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d896:	18cc      	adds	r4, r1, r3
    d898:	1ad5      	subs	r5, r2, r3
    d89a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d89e:	1e5b      	subs	r3, r3, #1
    d8a0:	5544      	strb	r4, [r0, r5]
    d8a2:	b2db      	uxtb	r3, r3
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d1f6      	bne.n	d896 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d8a8:	bd30      	pop	{r4, r5, pc}

0000d8aa <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d8aa:	2300      	movs	r3, #0
    d8ac:	6403      	str	r3, [r0, #64]	; 0x40
    d8ae:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    d8b2:	f240 2371 	movw	r3, #625	; 0x271
    d8b6:	435a      	muls	r2, r3
    d8b8:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d8bc:	1e52      	subs	r2, r2, #1
    d8be:	fbb2 f1f1 	udiv	r1, r2, r1
    d8c2:	6441      	str	r1, [r0, #68]	; 0x44
    d8c4:	4770      	bx	lr

0000d8c6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d8c6:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d8ca:	4607      	mov	r7, r0
    d8cc:	4690      	mov	r8, r2
    d8ce:	468b      	mov	fp, r1
    d8d0:	2601      	movs	r6, #1
    d8d2:	4608      	mov	r0, r1
    d8d4:	f000 f9e5 	bl	dca2 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    d8d8:	4682      	mov	sl, r0
    d8da:	4658      	mov	r0, fp
    d8dc:	f000 f9e3 	bl	dca6 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    d8e0:	4681      	mov	r9, r0
    d8e2:	f7ff ff81 	bl	d7e8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d8e6:	4604      	mov	r4, r0
    d8e8:	4650      	mov	r0, sl
    d8ea:	f7ff ff7d 	bl	d7e8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d8ee:	4605      	mov	r5, r0
    d8f0:	ea54 0005 	orrs.w	r0, r4, r5
    d8f4:	d100      	bne.n	d8f8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d8f6:	2600      	movs	r6, #0
    d8f8:	f7f9 fc98 	bl	722c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d8fc:	ea10 0f09 	tst.w	r0, r9
    d900:	d100      	bne.n	d904 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d902:	2400      	movs	r4, #0
    d904:	f7f9 fc92 	bl	722c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d908:	ea10 0f0a 	tst.w	r0, sl
    d90c:	d100      	bne.n	d910 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d90e:	2500      	movs	r5, #0
    d910:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d914:	42a0      	cmp	r0, r4
    d916:	d100      	bne.n	d91a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d918:	2400      	movs	r4, #0
    d91a:	f888 4000 	strb.w	r4, [r8]
    d91e:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d922:	42a8      	cmp	r0, r5
    d924:	d100      	bne.n	d928 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d926:	2500      	movs	r5, #0
    d928:	f888 5001 	strb.w	r5, [r8, #1]
    d92c:	b974      	cbnz	r4, d94c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d92e:	b96d      	cbnz	r5, d94c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d930:	4658      	mov	r0, fp
    d932:	f000 f9a4 	bl	dc7e <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    d936:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    d93a:	1a40      	subs	r0, r0, r1
    d93c:	b200      	sxth	r0, r0
    d93e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d942:	4288      	cmp	r0, r1
    d944:	dc01      	bgt.n	d94a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d946:	2800      	cmp	r0, #0
    d948:	dc00      	bgt.n	d94c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d94a:	2600      	movs	r6, #0
    d94c:	4630      	mov	r0, r6
    d94e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d952 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d952:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d956:	4348      	muls	r0, r1
    d958:	4770      	bx	lr

0000d95a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d95a:	f240 2171 	movw	r1, #625	; 0x271
    d95e:	fb10 f001 	smulbb	r0, r0, r1
    d962:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d966:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    d96a:	4770      	bx	lr

0000d96c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d96c:	b510      	push	{r4, lr}
    d96e:	2300      	movs	r3, #0
    d970:	461a      	mov	r2, r3
    d972:	e003      	b.n	d97c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d974:	5c84      	ldrb	r4, [r0, r2]
    d976:	4323      	orrs	r3, r4
    d978:	1c52      	adds	r2, r2, #1
    d97a:	b2d2      	uxtb	r2, r2
    d97c:	428a      	cmp	r2, r1
    d97e:	d3f9      	bcc.n	d974 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d980:	b10b      	cbz	r3, d986 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d982:	2000      	movs	r0, #0
    d984:	bd10      	pop	{r4, pc}
    d986:	2001      	movs	r0, #1
    d988:	bd10      	pop	{r4, pc}

0000d98a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    d98a:	2100      	movs	r1, #0
    d98c:	4608      	mov	r0, r1
    d98e:	f7f4 be51 	b.w	2634 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    d992:	4401      	add	r1, r0
    d994:	2914      	cmp	r1, #20
    d996:	dd01      	ble.n	d99c <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    d998:	2014      	movs	r0, #20
    d99a:	4770      	bx	lr
    d99c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    d9a0:	4281      	cmp	r1, r0
    d9a2:	dbfa      	blt.n	d99a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    d9a4:	b248      	sxtb	r0, r1
    d9a6:	4770      	bx	lr

0000d9a8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    d9a8:	b570      	push	{r4, r5, r6, lr}
    d9aa:	4605      	mov	r5, r0
    d9ac:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    d9b0:	b286      	uxth	r6, r0
    d9b2:	4610      	mov	r0, r2
    d9b4:	7aec      	ldrb	r4, [r5, #11]
    d9b6:	4631      	mov	r1, r6
    d9b8:	f000 f863 	bl	da82 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    d9bc:	4070      	eors	r0, r6
    d9be:	2125      	movs	r1, #37	; 0x25
    d9c0:	fbb0 f2f1 	udiv	r2, r0, r1
    d9c4:	fb01 0112 	mls	r1, r1, r2, r0
    d9c8:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    d9cc:	f001 0307 	and.w	r3, r1, #7
    d9d0:	7852      	ldrb	r2, [r2, #1]
    d9d2:	2601      	movs	r6, #1
    d9d4:	409e      	lsls	r6, r3
    d9d6:	4232      	tst	r2, r6
    d9d8:	d001      	beq.n	d9de <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    d9da:	4608      	mov	r0, r1
    d9dc:	bd70      	pop	{r4, r5, r6, pc}
    d9de:	4344      	muls	r4, r0
    d9e0:	0c21      	lsrs	r1, r4, #16
    d9e2:	4628      	mov	r0, r5
    d9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d9e8:	f7f4 be72 	b.w	26d0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000d9ec <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d9ec:	b510      	push	{r4, lr}
    d9ee:	4604      	mov	r4, r0
    d9f0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    d9f4:	b108      	cbz	r0, d9fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d9f6:	2825      	cmp	r0, #37	; 0x25
    d9f8:	d901      	bls.n	d9fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d9fa:	2012      	movs	r0, #18
    d9fc:	bd10      	pop	{r4, pc}
    d9fe:	b132      	cbz	r2, da0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    da00:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    da04:	b128      	cbz	r0, da12 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    da06:	2801      	cmp	r0, #1
    da08:	d009      	beq.n	da1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    da0a:	201f      	movs	r0, #31
    da0c:	bd10      	pop	{r4, pc}
    da0e:	2000      	movs	r0, #0
    da10:	bd10      	pop	{r4, pc}
    da12:	4620      	mov	r0, r4
    da14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da18:	4611      	mov	r1, r2
    da1a:	f7f4 be11 	b.w	2640 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    da1e:	8aa2      	ldrh	r2, [r4, #20]
    da20:	6949      	ldr	r1, [r1, #20]
    da22:	f104 0025 	add.w	r0, r4, #37	; 0x25
    da26:	f7ff ffbf 	bl	d9a8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    da2a:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    da2e:	e7ee      	b.n	da0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000da30 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    da30:	b570      	push	{r4, r5, r6, lr}
    da32:	4604      	mov	r4, r0
    da34:	1c40      	adds	r0, r0, #1
    da36:	4288      	cmp	r0, r1
    da38:	d004      	beq.n	da44 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    da3a:	6808      	ldr	r0, [r1, #0]
    da3c:	f8c4 0001 	str.w	r0, [r4, #1]
    da40:	7908      	ldrb	r0, [r1, #4]
    da42:	7160      	strb	r0, [r4, #5]
    da44:	7960      	ldrb	r0, [r4, #5]
    da46:	f000 001f 	and.w	r0, r0, #31
    da4a:	7160      	strb	r0, [r4, #5]
    da4c:	2000      	movs	r0, #0
    da4e:	72e0      	strb	r0, [r4, #11]
    da50:	4605      	mov	r5, r0
    da52:	1966      	adds	r6, r4, r5
    da54:	7870      	ldrb	r0, [r6, #1]
    da56:	f000 faed 	bl	e034 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    da5a:	71b0      	strb	r0, [r6, #6]
    da5c:	7ae1      	ldrb	r1, [r4, #11]
    da5e:	1c6d      	adds	r5, r5, #1
    da60:	4408      	add	r0, r1
    da62:	b2ed      	uxtb	r5, r5
    da64:	72e0      	strb	r0, [r4, #11]
    da66:	2d05      	cmp	r5, #5
    da68:	d3f3      	bcc.n	da52 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    da6a:	bd70      	pop	{r4, r5, r6, pc}
    da6c:	b2c1      	uxtb	r1, r0
    da6e:	fa91 f1a1 	rbit	r1, r1
    da72:	0a00      	lsrs	r0, r0, #8
    da74:	0e09      	lsrs	r1, r1, #24
    da76:	fa90 f0a0 	rbit	r0, r0
    da7a:	0e00      	lsrs	r0, r0, #24
    da7c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    da80:	4770      	bx	lr
    da82:	b570      	push	{r4, r5, r6, lr}
    da84:	460d      	mov	r5, r1
    da86:	4048      	eors	r0, r1
    da88:	2400      	movs	r4, #0
    da8a:	f7ff ffef 	bl	da6c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    da8e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    da92:	1c64      	adds	r4, r4, #1
    da94:	4428      	add	r0, r5
    da96:	b2e4      	uxtb	r4, r4
    da98:	b280      	uxth	r0, r0
    da9a:	2c03      	cmp	r4, #3
    da9c:	d3f5      	bcc.n	da8a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    da9e:	bd70      	pop	{r4, r5, r6, pc}

0000daa0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    daa0:	7802      	ldrb	r2, [r0, #0]
    daa2:	f002 020f 	and.w	r2, r2, #15
    daa6:	2a03      	cmp	r2, #3
    daa8:	d003      	beq.n	dab2 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    daaa:	2a05      	cmp	r2, #5
    daac:	d104      	bne.n	dab8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    daae:	f000 b92e 	b.w	dd0e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dab2:	7840      	ldrb	r0, [r0, #1]
    dab4:	280c      	cmp	r0, #12
    dab6:	d001      	beq.n	dabc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dab8:	2000      	movs	r0, #0
    daba:	4770      	bx	lr
    dabc:	2001      	movs	r0, #1
    dabe:	4770      	bx	lr

0000dac0 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dac0:	b570      	push	{r4, r5, r6, lr}
    dac2:	4614      	mov	r4, r2
    dac4:	4605      	mov	r5, r0
    dac6:	2a1f      	cmp	r2, #31
    dac8:	d903      	bls.n	dad2 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    daca:	21ee      	movs	r1, #238	; 0xee
    dacc:	202a      	movs	r0, #42	; 0x2a
    dace:	f7f2 ff5d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad2:	f105 0009 	add.w	r0, r5, #9
    dad6:	f002 fd10 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dada:	1da4      	adds	r4, r4, #6
    dadc:	706c      	strb	r4, [r5, #1]
    dade:	bd70      	pop	{r4, r5, r6, pc}

0000dae0 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dae0:	b510      	push	{r4, lr}
    dae2:	7802      	ldrb	r2, [r0, #0]
    dae4:	f001 030f 	and.w	r3, r1, #15
    dae8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    daec:	431a      	orrs	r2, r3
    daee:	7002      	strb	r2, [r0, #0]
    daf0:	2907      	cmp	r1, #7
    daf2:	d20c      	bcs.n	db0e <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    daf4:	e8df f001 	tbb	[pc, r1]
    daf8:	06040604 	.word	0x06040604
    dafc:	00040804 	.word	0x00040804
    db00:	2106      	movs	r1, #6
    db02:	e002      	b.n	db0a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    db04:	210c      	movs	r1, #12
    db06:	e000      	b.n	db0a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    db08:	2122      	movs	r1, #34	; 0x22
    db0a:	7041      	strb	r1, [r0, #1]
    db0c:	bd10      	pop	{r4, pc}
    db0e:	21a8      	movs	r1, #168	; 0xa8
    db10:	202a      	movs	r0, #42	; 0x2a
    db12:	f7f2 ff3b 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000db16 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    db16:	680a      	ldr	r2, [r1, #0]
    db18:	f840 2f09 	str.w	r2, [r0, #9]!
    db1c:	8889      	ldrh	r1, [r1, #4]
    db1e:	8081      	strh	r1, [r0, #4]
    db20:	4770      	bx	lr

0000db22 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    db22:	7802      	ldrb	r2, [r0, #0]
    db24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    db28:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    db2c:	7002      	strb	r2, [r0, #0]
    db2e:	4770      	bx	lr

0000db30 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    db30:	680a      	ldr	r2, [r1, #0]
    db32:	f840 2f03 	str.w	r2, [r0, #3]!
    db36:	8889      	ldrh	r1, [r1, #4]
    db38:	8081      	strh	r1, [r0, #4]
    db3a:	4770      	bx	lr

0000db3c <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    db3c:	7802      	ldrb	r2, [r0, #0]
    db3e:	2340      	movs	r3, #64	; 0x40
    db40:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    db44:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    db48:	430a      	orrs	r2, r1
    db4a:	7002      	strb	r2, [r0, #0]
    db4c:	4770      	bx	lr

0000db4e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    db4e:	b570      	push	{r4, r5, r6, lr}
    db50:	4614      	mov	r4, r2
    db52:	4605      	mov	r5, r0
    db54:	2a1f      	cmp	r2, #31
    db56:	d904      	bls.n	db62 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    db58:	f44f 7188 	mov.w	r1, #272	; 0x110
    db5c:	202a      	movs	r0, #42	; 0x2a
    db5e:	f7f2 ff15 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db62:	f105 0009 	add.w	r0, r5, #9
    db66:	f002 fcc8 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db6a:	1da4      	adds	r4, r4, #6
    db6c:	706c      	strb	r4, [r5, #1]
    db6e:	bd70      	pop	{r4, r5, r6, pc}

0000db70 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    db70:	6842      	ldr	r2, [r0, #4]
    db72:	600a      	str	r2, [r1, #0]
    db74:	7a00      	ldrb	r0, [r0, #8]
    db76:	7108      	strb	r0, [r1, #4]
    db78:	4770      	bx	lr

0000db7a <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    db7a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    db7e:	4770      	bx	lr

0000db80 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    db80:	b570      	push	{r4, r5, r6, lr}
    db82:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    db86:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    db8a:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    db8e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    db92:	88c0      	ldrh	r0, [r0, #6]
    db94:	b131      	cbz	r1, dba4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    db96:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    db9a:	d903      	bls.n	dba4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    db9c:	f640 5107 	movw	r1, #3335	; 0xd07
    dba0:	428a      	cmp	r2, r1
    dba2:	d90b      	bls.n	dbbc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    dba4:	1f91      	subs	r1, r2, #6
    dba6:	f640 467a 	movw	r6, #3194	; 0xc7a
    dbaa:	42b1      	cmp	r1, r6
    dbac:	d810      	bhi.n	dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbae:	b17b      	cbz	r3, dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbb0:	2b08      	cmp	r3, #8
    dbb2:	d80d      	bhi.n	dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbb4:	4293      	cmp	r3, r2
    dbb6:	d20b      	bcs.n	dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbb8:	4295      	cmp	r5, r2
    dbba:	d809      	bhi.n	dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbbc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dbc0:	d206      	bcs.n	dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbc2:	f640 4176 	movw	r1, #3190	; 0xc76
    dbc6:	380a      	subs	r0, #10
    dbc8:	4288      	cmp	r0, r1
    dbca:	d801      	bhi.n	dbd0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    dbcc:	2001      	movs	r0, #1
    dbce:	bd70      	pop	{r4, r5, r6, pc}
    dbd0:	2000      	movs	r0, #0
    dbd2:	bd70      	pop	{r4, r5, r6, pc}

0000dbd4 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    dbd4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    dbd8:	4770      	bx	lr

0000dbda <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    dbda:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    dbde:	4770      	bx	lr

0000dbe0 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    dbe0:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    dbe4:	4770      	bx	lr

0000dbe6 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dbe6:	b510      	push	{r4, lr}
    dbe8:	29fb      	cmp	r1, #251	; 0xfb
    dbea:	d904      	bls.n	dbf6 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dbec:	f240 61a1 	movw	r1, #1697	; 0x6a1
    dbf0:	202a      	movs	r0, #42	; 0x2a
    dbf2:	f7f2 fecb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbf6:	7041      	strb	r1, [r0, #1]
    dbf8:	bd10      	pop	{r4, pc}

0000dbfa <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    dbfa:	8980      	ldrh	r0, [r0, #12]
    dbfc:	8008      	strh	r0, [r1, #0]
    dbfe:	4770      	bx	lr

0000dc00 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    dc00:	f8d0 0016 	ldr.w	r0, [r0, #22]
    dc04:	6008      	str	r0, [r1, #0]
    dc06:	4770      	bx	lr

0000dc08 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    dc08:	6842      	ldr	r2, [r0, #4]
    dc0a:	600a      	str	r2, [r1, #0]
    dc0c:	6880      	ldr	r0, [r0, #8]
    dc0e:	6048      	str	r0, [r1, #4]
    dc10:	4770      	bx	lr

0000dc12 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    dc12:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    dc16:	600a      	str	r2, [r1, #0]
    dc18:	6840      	ldr	r0, [r0, #4]
    dc1a:	6048      	str	r0, [r1, #4]
    dc1c:	4770      	bx	lr

0000dc1e <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    dc1e:	6809      	ldr	r1, [r1, #0]
    dc20:	60c1      	str	r1, [r0, #12]
    dc22:	4770      	bx	lr

0000dc24 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    dc24:	680a      	ldr	r2, [r1, #0]
    dc26:	6042      	str	r2, [r0, #4]
    dc28:	6849      	ldr	r1, [r1, #4]
    dc2a:	6081      	str	r1, [r0, #8]
    dc2c:	4770      	bx	lr

0000dc2e <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    dc2e:	7800      	ldrb	r0, [r0, #0]
    dc30:	f000 0003 	and.w	r0, r0, #3
    dc34:	4770      	bx	lr

0000dc36 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    dc36:	8880      	ldrh	r0, [r0, #4]
    dc38:	4770      	bx	lr

0000dc3a <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    dc3a:	88c0      	ldrh	r0, [r0, #6]
    dc3c:	4770      	bx	lr

0000dc3e <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    dc3e:	8900      	ldrh	r0, [r0, #8]
    dc40:	4770      	bx	lr

0000dc42 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    dc42:	8940      	ldrh	r0, [r0, #10]
    dc44:	4770      	bx	lr

0000dc46 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    dc46:	8901      	ldrh	r1, [r0, #8]
    dc48:	291b      	cmp	r1, #27
    dc4a:	d30c      	bcc.n	dc66 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc4c:	8941      	ldrh	r1, [r0, #10]
    dc4e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dc52:	4291      	cmp	r1, r2
    dc54:	d307      	bcc.n	dc66 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc56:	8881      	ldrh	r1, [r0, #4]
    dc58:	291b      	cmp	r1, #27
    dc5a:	d304      	bcc.n	dc66 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc5c:	88c0      	ldrh	r0, [r0, #6]
    dc5e:	4290      	cmp	r0, r2
    dc60:	d301      	bcc.n	dc66 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    dc62:	2001      	movs	r0, #1
    dc64:	4770      	bx	lr
    dc66:	2000      	movs	r0, #0
    dc68:	4770      	bx	lr

0000dc6a <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    dc6a:	7901      	ldrb	r1, [r0, #4]
    dc6c:	0749      	lsls	r1, r1, #29
    dc6e:	d004      	beq.n	dc7a <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    dc70:	7940      	ldrb	r0, [r0, #5]
    dc72:	0740      	lsls	r0, r0, #29
    dc74:	d001      	beq.n	dc7a <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    dc76:	2001      	movs	r0, #1
    dc78:	4770      	bx	lr
    dc7a:	2000      	movs	r0, #0
    dc7c:	4770      	bx	lr

0000dc7e <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    dc7e:	88c0      	ldrh	r0, [r0, #6]
    dc80:	4770      	bx	lr

0000dc82 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    dc82:	7901      	ldrb	r1, [r0, #4]
    dc84:	7940      	ldrb	r0, [r0, #5]
    dc86:	f001 0107 	and.w	r1, r1, #7
    dc8a:	1e4a      	subs	r2, r1, #1
    dc8c:	f000 0007 	and.w	r0, r0, #7
    dc90:	4011      	ands	r1, r2
    dc92:	1e42      	subs	r2, r0, #1
    dc94:	4010      	ands	r0, r2
    dc96:	4301      	orrs	r1, r0
    dc98:	d001      	beq.n	dc9e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    dc9a:	2000      	movs	r0, #0
    dc9c:	4770      	bx	lr
    dc9e:	2001      	movs	r0, #1
    dca0:	4770      	bx	lr

0000dca2 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    dca2:	7900      	ldrb	r0, [r0, #4]
    dca4:	4770      	bx	lr

0000dca6 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    dca6:	7940      	ldrb	r0, [r0, #5]
    dca8:	4770      	bx	lr

0000dcaa <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    dcaa:	7900      	ldrb	r0, [r0, #4]
    dcac:	4770      	bx	lr

0000dcae <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    dcae:	7101      	strb	r1, [r0, #4]
    dcb0:	4770      	bx	lr

0000dcb2 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    dcb2:	7940      	ldrb	r0, [r0, #5]
    dcb4:	4770      	bx	lr

0000dcb6 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    dcb6:	7141      	strb	r1, [r0, #5]
    dcb8:	4770      	bx	lr

0000dcba <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    dcba:	b510      	push	{r4, lr}
    dcbc:	2a1b      	cmp	r2, #27
    dcbe:	d904      	bls.n	dcca <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    dcc0:	f240 417e 	movw	r1, #1150	; 0x47e
    dcc4:	202a      	movs	r0, #42	; 0x2a
    dcc6:	f7f2 fe61 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcca:	7042      	strb	r2, [r0, #1]
    dccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcd0:	1cc0      	adds	r0, r0, #3
    dcd2:	f002 bc12 	b.w	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000dcd6 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    dcd6:	7802      	ldrb	r2, [r0, #0]
    dcd8:	f001 0103 	and.w	r1, r1, #3
    dcdc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    dce0:	430a      	orrs	r2, r1
    dce2:	7002      	strb	r2, [r0, #0]
    dce4:	4770      	bx	lr

0000dce6 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    dce6:	7101      	strb	r1, [r0, #4]
    dce8:	0a09      	lsrs	r1, r1, #8
    dcea:	7141      	strb	r1, [r0, #5]
    dcec:	4770      	bx	lr

0000dcee <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    dcee:	7181      	strb	r1, [r0, #6]
    dcf0:	0a09      	lsrs	r1, r1, #8
    dcf2:	71c1      	strb	r1, [r0, #7]
    dcf4:	4770      	bx	lr

0000dcf6 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    dcf6:	7201      	strb	r1, [r0, #8]
    dcf8:	0a09      	lsrs	r1, r1, #8
    dcfa:	7241      	strb	r1, [r0, #9]
    dcfc:	4770      	bx	lr

0000dcfe <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    dcfe:	7281      	strb	r1, [r0, #10]
    dd00:	0a09      	lsrs	r1, r1, #8
    dd02:	72c1      	strb	r1, [r0, #11]
    dd04:	4770      	bx	lr

0000dd06 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    dd06:	7900      	ldrb	r0, [r0, #4]
    dd08:	4770      	bx	lr

0000dd0a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    dd0a:	7900      	ldrb	r0, [r0, #4]
    dd0c:	4770      	bx	lr
    dd0e:	b570      	push	{r4, r5, r6, lr}
    dd10:	f8d0 201f 	ldr.w	r2, [r0, #31]
    dd14:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    dd18:	f012 0fff 	tst.w	r2, #255	; 0xff
    dd1c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    dd20:	d108      	bne.n	dd34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd22:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dd26:	b92c      	cbnz	r4, dd34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd28:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dd2c:	b914      	cbnz	r4, dd34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd2e:	0e12      	lsrs	r2, r2, #24
    dd30:	d100      	bne.n	dd34 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dd32:	b34b      	cbz	r3, dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd34:	7846      	ldrb	r6, [r0, #1]
    dd36:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dd3a:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    dd3e:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    dd42:	7d83      	ldrb	r3, [r0, #22]
    dd44:	2e22      	cmp	r6, #34	; 0x22
    dd46:	d11f      	bne.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd48:	b131      	cbz	r1, dd58 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dd4a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dd4e:	d903      	bls.n	dd58 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dd50:	f640 5107 	movw	r1, #3335	; 0xd07
    dd54:	428a      	cmp	r2, r1
    dd56:	d90b      	bls.n	dd70 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    dd58:	1f91      	subs	r1, r2, #6
    dd5a:	f640 467a 	movw	r6, #3194	; 0xc7a
    dd5e:	42b1      	cmp	r1, r6
    dd60:	d812      	bhi.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd62:	b18b      	cbz	r3, dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd64:	2b08      	cmp	r3, #8
    dd66:	d80f      	bhi.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd68:	4293      	cmp	r3, r2
    dd6a:	d20d      	bcs.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd6c:	4295      	cmp	r5, r2
    dd6e:	d80b      	bhi.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd70:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    dd74:	d208      	bcs.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd76:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    dd7a:	f640 4176 	movw	r1, #3190	; 0xc76
    dd7e:	380a      	subs	r0, #10
    dd80:	4288      	cmp	r0, r1
    dd82:	d801      	bhi.n	dd88 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dd84:	2001      	movs	r0, #1
    dd86:	bd70      	pop	{r4, r5, r6, pc}
    dd88:	2000      	movs	r0, #0
    dd8a:	bd70      	pop	{r4, r5, r6, pc}

0000dd8c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    dd8c:	6841      	ldr	r1, [r0, #4]
    dd8e:	2200      	movs	r2, #0
    dd90:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    dd94:	2b00      	cmp	r3, #0
    dd96:	d004      	beq.n	dda2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    dd98:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    dd9c:	6840      	ldr	r0, [r0, #4]
    dd9e:	f000 bdfc 	b.w	e99a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    dda2:	4770      	bx	lr

0000dda4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    dda4:	b510      	push	{r4, lr}
    dda6:	7a01      	ldrb	r1, [r0, #8]
    dda8:	b119      	cbz	r1, ddb2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ddaa:	2901      	cmp	r1, #1
    ddac:	d006      	beq.n	ddbc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ddae:	2000      	movs	r0, #0
    ddb0:	bd10      	pop	{r4, pc}
    ddb2:	88c2      	ldrh	r2, [r0, #6]
    ddb4:	6803      	ldr	r3, [r0, #0]
    ddb6:	8880      	ldrh	r0, [r0, #4]
    ddb8:	2102      	movs	r1, #2
    ddba:	e003      	b.n	ddc4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    ddbc:	88c2      	ldrh	r2, [r0, #6]
    ddbe:	6803      	ldr	r3, [r0, #0]
    ddc0:	8880      	ldrh	r0, [r0, #4]
    ddc2:	2101      	movs	r1, #1
    ddc4:	f7f4 fcee 	bl	27a4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    ddc8:	b908      	cbnz	r0, ddce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ddca:	f7f4 fd3b 	bl	2844 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ddce:	2001      	movs	r0, #1
    ddd0:	bd10      	pop	{r4, pc}

0000ddd2 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    ddd2:	2203      	movs	r2, #3
    ddd4:	f000 b806 	b.w	dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000ddd8 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    ddd8:	2203      	movs	r2, #3
    ddda:	f000 b817 	b.w	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000ddde <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    ddde:	2204      	movs	r2, #4
    dde0:	f000 b814 	b.w	de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000dde4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    dde4:	b508      	push	{r3, lr}
    dde6:	7a03      	ldrb	r3, [r0, #8]
    dde8:	f88d 3000 	strb.w	r3, [sp]
    ddec:	9b00      	ldr	r3, [sp, #0]
    ddee:	9300      	str	r3, [sp, #0]
    ddf0:	f89d 3000 	ldrb.w	r3, [sp]
    ddf4:	b123      	cbz	r3, de00 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    ddf6:	f240 21c2 	movw	r1, #706	; 0x2c2
    ddfa:	2010      	movs	r0, #16
    ddfc:	f7f2 fdc6 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    de04:	f7f4 be90 	b.w	2b28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000de08 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    de08:	f7f4 bebc 	b.w	2b84 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000de0c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    de0c:	7a03      	ldrb	r3, [r0, #8]
    de0e:	b082      	sub	sp, #8
    de10:	f88d 3000 	strb.w	r3, [sp]
    de14:	9b00      	ldr	r3, [sp, #0]
    de16:	9300      	str	r3, [sp, #0]
    de18:	f89d 3000 	ldrb.w	r3, [sp]
    de1c:	b113      	cbz	r3, de24 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    de1e:	7202      	strb	r2, [r0, #8]
    de20:	b002      	add	sp, #8
    de22:	4770      	bx	lr
    de24:	b002      	add	sp, #8
    de26:	f7f4 be7f 	b.w	2b28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    de2a:	2000      	movs	r0, #0
    de2c:	7048      	strb	r0, [r1, #1]
    de2e:	2003      	movs	r0, #3
    de30:	7008      	strb	r0, [r1, #0]
    de32:	2001      	movs	r0, #1
    de34:	7108      	strb	r0, [r1, #4]
    de36:	4770      	bx	lr

0000de38 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    de38:	b510      	push	{r4, lr}
    de3a:	888c      	ldrh	r4, [r1, #4]
    de3c:	890a      	ldrh	r2, [r1, #8]
    de3e:	884b      	ldrh	r3, [r1, #2]
    de40:	88c9      	ldrh	r1, [r1, #6]
    de42:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    de46:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    de4a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    de4e:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    de52:	bd10      	pop	{r4, pc}

0000de54 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    de54:	b570      	push	{r4, r5, r6, lr}
    de56:	4615      	mov	r5, r2
    de58:	460c      	mov	r4, r1
    de5a:	f000 f8b8 	bl	dfce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    de5e:	3096      	adds	r0, #150	; 0x96
    de60:	4428      	add	r0, r5
    de62:	42a0      	cmp	r0, r4
    de64:	d801      	bhi.n	de6a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    de66:	1a20      	subs	r0, r4, r0
    de68:	bd70      	pop	{r4, r5, r6, pc}
    de6a:	2000      	movs	r0, #0
    de6c:	bd70      	pop	{r4, r5, r6, pc}

0000de6e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    de6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de72:	4604      	mov	r4, r0
    de74:	f000 f87f 	bl	df76 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    de78:	4680      	mov	r8, r0
    de7a:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    de7e:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    de82:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    de84:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    de86:	4285      	cmp	r5, r0
    de88:	d300      	bcc.n	de8c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    de8a:	4605      	mov	r5, r0
    de8c:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    de90:	4620      	mov	r0, r4
    de92:	f000 f868 	bl	df66 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    de96:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    de9a:	2902      	cmp	r1, #2
    de9c:	d108      	bne.n	deb0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    de9e:	42af      	cmp	r7, r5
    dea0:	d200      	bcs.n	dea4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    dea2:	463d      	mov	r5, r7
    dea4:	4286      	cmp	r6, r0
    dea6:	d200      	bcs.n	deaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    dea8:	4630      	mov	r0, r6
    deaa:	2100      	movs	r1, #0
    deac:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    deb0:	86a5      	strh	r5, [r4, #52]	; 0x34
    deb2:	8720      	strh	r0, [r4, #56]	; 0x38
    deb4:	42bd      	cmp	r5, r7
    deb6:	d101      	bne.n	debc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    deb8:	42b0      	cmp	r0, r6
    deba:	d001      	beq.n	dec0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    debc:	2001      	movs	r0, #1
    debe:	e000      	b.n	dec2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    dec0:	2000      	movs	r0, #0
    dec2:	ea40 0008 	orr.w	r0, r0, r8
    dec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000deca <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    deca:	221b      	movs	r2, #27
    decc:	8402      	strh	r2, [r0, #32]
    dece:	8382      	strh	r2, [r0, #28]
    ded0:	82c2      	strh	r2, [r0, #22]
    ded2:	8282      	strh	r2, [r0, #20]
    ded4:	8142      	strh	r2, [r0, #10]
    ded6:	8202      	strh	r2, [r0, #16]
    ded8:	8102      	strh	r2, [r0, #8]
    deda:	8542      	strh	r2, [r0, #42]	; 0x2a
    dedc:	8582      	strh	r2, [r0, #44]	; 0x2c
    dede:	8482      	strh	r2, [r0, #36]	; 0x24
    dee0:	2900      	cmp	r1, #0
    dee2:	d10a      	bne.n	defa <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    dee4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    dee8:	8441      	strh	r1, [r0, #34]	; 0x22
    deea:	83c1      	strh	r1, [r0, #30]
    deec:	8341      	strh	r1, [r0, #26]
    deee:	8301      	strh	r1, [r0, #24]
    def0:	81c1      	strh	r1, [r0, #14]
    def2:	8241      	strh	r1, [r0, #18]
    def4:	8181      	strh	r1, [r0, #12]
    def6:	85c1      	strh	r1, [r0, #46]	; 0x2e
    def8:	8601      	strh	r1, [r0, #48]	; 0x30
    defa:	4770      	bx	lr

0000defc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    defc:	6800      	ldr	r0, [r0, #0]
    defe:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    df02:	4290      	cmp	r0, r2
    df04:	d903      	bls.n	df0e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    df06:	1a40      	subs	r0, r0, r1
    df08:	389c      	subs	r0, #156	; 0x9c
    df0a:	0840      	lsrs	r0, r0, #1
    df0c:	4770      	bx	lr
    df0e:	2000      	movs	r0, #0
    df10:	4770      	bx	lr

0000df12 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    df12:	6840      	ldr	r0, [r0, #4]
    df14:	4770      	bx	lr

0000df16 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    df16:	b570      	push	{r4, r5, r6, lr}
    df18:	460c      	mov	r4, r1
    df1a:	4605      	mov	r5, r0
    df1c:	f000 f857 	bl	dfce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    df20:	4420      	add	r0, r4
    df22:	6328      	str	r0, [r5, #48]	; 0x30
    df24:	bd70      	pop	{r4, r5, r6, pc}

0000df26 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    df26:	b510      	push	{r4, lr}
    df28:	9c02      	ldr	r4, [sp, #8]
    df2a:	8281      	strh	r1, [r0, #20]
    df2c:	82c2      	strh	r2, [r0, #22]
    df2e:	8303      	strh	r3, [r0, #24]
    df30:	8344      	strh	r4, [r0, #26]
    df32:	bd10      	pop	{r4, pc}
    df34:	1d00      	adds	r0, r0, #4
    df36:	b510      	push	{r4, lr}
    df38:	b280      	uxth	r0, r0
    df3a:	2901      	cmp	r1, #1
    df3c:	d006      	beq.n	df4c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    df3e:	2902      	cmp	r1, #2
    df40:	d007      	beq.n	df52 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    df42:	f240 2123 	movw	r1, #547	; 0x223
    df46:	2006      	movs	r0, #6
    df48:	f7f2 fd20 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df4c:	00c0      	lsls	r0, r0, #3
    df4e:	3050      	adds	r0, #80	; 0x50
    df50:	e001      	b.n	df56 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    df52:	0080      	lsls	r0, r0, #2
    df54:	302c      	adds	r0, #44	; 0x2c
    df56:	b280      	uxth	r0, r0
    df58:	bd10      	pop	{r4, pc}
    df5a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    df5c:	8b00      	ldrh	r0, [r0, #24]
    df5e:	4281      	cmp	r1, r0
    df60:	d200      	bcs.n	df64 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    df62:	4608      	mov	r0, r1
    df64:	4770      	bx	lr
    df66:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    df6a:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    df6e:	4281      	cmp	r1, r0
    df70:	d200      	bcs.n	df74 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    df72:	4608      	mov	r0, r1
    df74:	4770      	bx	lr
    df76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df7a:	4606      	mov	r6, r0
    df7c:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    df80:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    df84:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    df88:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    df8c:	42a0      	cmp	r0, r4
    df8e:	d200      	bcs.n	df92 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    df90:	4604      	mov	r4, r0
    df92:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    df96:	4605      	mov	r5, r0
    df98:	f7ff ffdf 	bl	df5a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    df9c:	4607      	mov	r7, r0
    df9e:	4628      	mov	r0, r5
    dfa0:	f7ff ffdb 	bl	df5a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    dfa4:	816c      	strh	r4, [r5, #10]
    dfa6:	81ef      	strh	r7, [r5, #14]
    dfa8:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    dfaa:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    dfac:	42a1      	cmp	r1, r4
    dfae:	d200      	bcs.n	dfb2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    dfb0:	4621      	mov	r1, r4
    dfb2:	4282      	cmp	r2, r0
    dfb4:	d300      	bcc.n	dfb8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    dfb6:	4610      	mov	r0, r2
    dfb8:	8229      	strh	r1, [r5, #16]
    dfba:	8268      	strh	r0, [r5, #18]
    dfbc:	454c      	cmp	r4, r9
    dfbe:	d101      	bne.n	dfc4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    dfc0:	4547      	cmp	r7, r8
    dfc2:	d002      	beq.n	dfca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    dfc4:	2001      	movs	r0, #1
    dfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dfca:	2000      	movs	r0, #0
    dfcc:	e7fb      	b.n	dfc6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    dfce:	2196      	movs	r1, #150	; 0x96
    dfd0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    dfd4:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    dfd8:	f000 b800 	b.w	dfdc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfe0:	460d      	mov	r5, r1
    dfe2:	4606      	mov	r6, r0
    dfe4:	4698      	mov	r8, r3
    dfe6:	4617      	mov	r7, r2
    dfe8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    dfea:	4611      	mov	r1, r2
    dfec:	f7ff ffa2 	bl	df34 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    dff0:	4604      	mov	r4, r0
    dff2:	4639      	mov	r1, r7
    dff4:	4630      	mov	r0, r6
    dff6:	f7ff ffb6 	bl	df66 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    dffa:	42a0      	cmp	r0, r4
    dffc:	d200      	bcs.n	e000 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    dffe:	4604      	mov	r4, r0
    e000:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e002:	4641      	mov	r1, r8
    e004:	f7ff ff96 	bl	df34 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e008:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e00a:	4281      	cmp	r1, r0
    e00c:	d200      	bcs.n	e010 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e00e:	4608      	mov	r0, r1
    e010:	4420      	add	r0, r4
    e012:	4428      	add	r0, r5
    e014:	1d80      	adds	r0, r0, #6
    e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e01a:	b510      	push	{r4, lr}
    e01c:	4604      	mov	r4, r0
    e01e:	2108      	movs	r1, #8
    e020:	4620      	mov	r0, r4
    e022:	f7f2 fd63 	bl	aec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e026:	6820      	ldr	r0, [r4, #0]
    e028:	2800      	cmp	r0, #0
    e02a:	d102      	bne.n	e032 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e02c:	6860      	ldr	r0, [r4, #4]
    e02e:	2800      	cmp	r0, #0
    e030:	d0f5      	beq.n	e01e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e032:	bd10      	pop	{r4, pc}

0000e034 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e034:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e038:	2255      	movs	r2, #85	; 0x55
    e03a:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e03e:	4408      	add	r0, r1
    e040:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e044:	2233      	movs	r2, #51	; 0x33
    e046:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e04a:	4408      	add	r0, r1
    e04c:	f000 010f 	and.w	r1, r0, #15
    e050:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e054:	4770      	bx	lr

0000e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e056:	6840      	ldr	r0, [r0, #4]
    e058:	2100      	movs	r1, #0
    e05a:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e05e:	7881      	ldrb	r1, [r0, #2]
    e060:	1c49      	adds	r1, r1, #1
    e062:	7081      	strb	r1, [r0, #2]
    e064:	4770      	bx	lr

0000e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e066:	b510      	push	{r4, lr}
    e068:	6840      	ldr	r0, [r0, #4]
    e06a:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e06e:	1e49      	subs	r1, r1, #1
    e070:	b249      	sxtb	r1, r1
    e072:	7001      	strb	r1, [r0, #0]
    e074:	2900      	cmp	r1, #0
    e076:	da03      	bge.n	e080 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e078:	2135      	movs	r1, #53	; 0x35
    e07a:	204a      	movs	r0, #74	; 0x4a
    e07c:	f7f2 fc86 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e080:	bd10      	pop	{r4, pc}

0000e082 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e082:	6840      	ldr	r0, [r0, #4]
    e084:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e088:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e08c:	4770      	bx	lr

0000e08e <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e08e:	6840      	ldr	r0, [r0, #4]
    e090:	2100      	movs	r1, #0
    e092:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e096:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e09a:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e09e:	4770      	bx	lr

0000e0a0 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e0a0:	b510      	push	{r4, lr}
    e0a2:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e0a6:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e0aa:	2000      	movs	r0, #0
    e0ac:	7048      	strb	r0, [r1, #1]
    e0ae:	230a      	movs	r3, #10
    e0b0:	700b      	strb	r3, [r1, #0]
    e0b2:	7108      	strb	r0, [r1, #4]
    e0b4:	f8a1 4005 	strh.w	r4, [r1, #5]
    e0b8:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e0bc:	71c8      	strb	r0, [r1, #7]
    e0be:	4620      	mov	r0, r4
    e0c0:	f7f3 f926 	bl	1310 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e0c4:	f7fe fe07 	bl	ccd6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e0c8:	b140      	cbz	r0, e0dc <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e0ca:	4620      	mov	r0, r4
    e0cc:	f7ff fa07 	bl	d4de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e0d0:	4620      	mov	r0, r4
    e0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0d6:	2100      	movs	r1, #0
    e0d8:	f7f3 b828 	b.w	112c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e0dc:	2173      	movs	r1, #115	; 0x73
    e0de:	2063      	movs	r0, #99	; 0x63
    e0e0:	f7f2 fc54 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e0e4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e0e4:	b570      	push	{r4, r5, r6, lr}
    e0e6:	6844      	ldr	r4, [r0, #4]
    e0e8:	460d      	mov	r5, r1
    e0ea:	7803      	ldrb	r3, [r0, #0]
    e0ec:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e0f0:	3480      	adds	r4, #128	; 0x80
    e0f2:	2101      	movs	r1, #1
    e0f4:	4620      	mov	r0, r4
    e0f6:	f7ff facd 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e0fa:	b108      	cbz	r0, e100 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e0fc:	2000      	movs	r0, #0
    e0fe:	bd70      	pop	{r4, r5, r6, pc}
    e100:	4628      	mov	r0, r5
    e102:	f7ff fe00 	bl	dd06 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e106:	f884 0020 	strb.w	r0, [r4, #32]
    e10a:	2006      	movs	r0, #6
    e10c:	77e0      	strb	r0, [r4, #31]
    e10e:	e7f5      	b.n	e0fc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e110 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e110:	b510      	push	{r4, lr}
    e112:	6844      	ldr	r4, [r0, #4]
    e114:	7803      	ldrb	r3, [r0, #0]
    e116:	2101      	movs	r1, #1
    e118:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e11c:	3480      	adds	r4, #128	; 0x80
    e11e:	4620      	mov	r0, r4
    e120:	f7ff fab8 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e124:	2800      	cmp	r0, #0
    e126:	d101      	bne.n	e12c <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e128:	2007      	movs	r0, #7
    e12a:	77e0      	strb	r0, [r4, #31]
    e12c:	bd10      	pop	{r4, pc}

0000e12e <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e12e:	2200      	movs	r2, #0
    e130:	704a      	strb	r2, [r1, #1]
    e132:	2307      	movs	r3, #7
    e134:	700b      	strb	r3, [r1, #0]
    e136:	f100 030a 	add.w	r3, r0, #10
    e13a:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e13e:	84c2      	strh	r2, [r0, #38]	; 0x26
    e140:	6818      	ldr	r0, [r3, #0]
    e142:	6048      	str	r0, [r1, #4]
    e144:	6858      	ldr	r0, [r3, #4]
    e146:	6088      	str	r0, [r1, #8]
    e148:	8918      	ldrh	r0, [r3, #8]
    e14a:	8188      	strh	r0, [r1, #12]
    e14c:	710a      	strb	r2, [r1, #4]
    e14e:	4770      	bx	lr

0000e150 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e150:	b510      	push	{r4, lr}
    e152:	6844      	ldr	r4, [r0, #4]
    e154:	7803      	ldrb	r3, [r0, #0]
    e156:	2100      	movs	r1, #0
    e158:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e15c:	3480      	adds	r4, #128	; 0x80
    e15e:	4620      	mov	r0, r4
    e160:	f7ff fa98 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e164:	b110      	cbz	r0, e16c <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e166:	201d      	movs	r0, #29
    e168:	7760      	strb	r0, [r4, #29]
    e16a:	bd10      	pop	{r4, pc}
    e16c:	2122      	movs	r1, #34	; 0x22
    e16e:	2045      	movs	r0, #69	; 0x45
    e170:	f7f2 fc0c 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e174 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e178:	4606      	mov	r6, r0
    e17a:	7803      	ldrb	r3, [r0, #0]
    e17c:	6840      	ldr	r0, [r0, #4]
    e17e:	468b      	mov	fp, r1
    e180:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e184:	4605      	mov	r5, r0
    e186:	2700      	movs	r7, #0
    e188:	7f62      	ldrb	r2, [r4, #29]
    e18a:	210a      	movs	r1, #10
    e18c:	4620      	mov	r0, r4
    e18e:	f7ff fa81 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e192:	b358      	cbz	r0, e1ec <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e194:	4658      	mov	r0, fp
    e196:	f7ff fd56 	bl	dc46 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e19a:	b1f0      	cbz	r0, e1da <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e19c:	4658      	mov	r0, fp
    e19e:	f7ff fd4c 	bl	dc3a <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e1a2:	4682      	mov	sl, r0
    e1a4:	4658      	mov	r0, fp
    e1a6:	f7ff fd4c 	bl	dc42 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e1aa:	4681      	mov	r9, r0
    e1ac:	4658      	mov	r0, fp
    e1ae:	f7ff fd42 	bl	dc36 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e1b2:	4680      	mov	r8, r0
    e1b4:	4658      	mov	r0, fp
    e1b6:	f7ff fd42 	bl	dc3e <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e1ba:	4601      	mov	r1, r0
    e1bc:	464b      	mov	r3, r9
    e1be:	4642      	mov	r2, r8
    e1c0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e1c4:	f8cd a000 	str.w	sl, [sp]
    e1c8:	f7ff fead 	bl	df26 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e1cc:	4628      	mov	r0, r5
    e1ce:	f7ff fe4e 	bl	de6e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e1d2:	2105      	movs	r1, #5
    e1d4:	6870      	ldr	r0, [r6, #4]
    e1d6:	f7f6 f8c1 	bl	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e1da:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e1de:	7767      	strb	r7, [r4, #29]
    e1e0:	4630      	mov	r0, r6
    e1e2:	f000 f805 	bl	e1f0 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e1e6:	2000      	movs	r0, #0
    e1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1ec:	2001      	movs	r0, #1
    e1ee:	e7fb      	b.n	e1e8 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e1f0 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e1f0:	6841      	ldr	r1, [r0, #4]
    e1f2:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e1f6:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e1fa:	2801      	cmp	r0, #1
    e1fc:	d004      	beq.n	e208 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e1fe:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e202:	3218      	adds	r2, #24
    e204:	f7f4 bcd4 	b.w	2bb0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e208:	2002      	movs	r0, #2
    e20a:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e20e:	4770      	bx	lr

0000e210 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e210:	2200      	movs	r2, #0
    e212:	704a      	strb	r2, [r1, #1]
    e214:	220b      	movs	r2, #11
    e216:	700a      	strb	r2, [r1, #0]
    e218:	f100 020a 	add.w	r2, r0, #10
    e21c:	7a83      	ldrb	r3, [r0, #10]
    e21e:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e222:	710b      	strb	r3, [r1, #4]
    e224:	8800      	ldrh	r0, [r0, #0]
    e226:	80c8      	strh	r0, [r1, #6]
    e228:	7910      	ldrb	r0, [r2, #4]
    e22a:	7208      	strb	r0, [r1, #8]
    e22c:	4770      	bx	lr

0000e22e <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e22e:	2200      	movs	r2, #0
    e230:	704a      	strb	r2, [r1, #1]
    e232:	220c      	movs	r2, #12
    e234:	700a      	strb	r2, [r1, #0]
    e236:	7a82      	ldrb	r2, [r0, #10]
    e238:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e23c:	710a      	strb	r2, [r1, #4]
    e23e:	8800      	ldrh	r0, [r0, #0]
    e240:	80c8      	strh	r0, [r1, #6]
    e242:	4770      	bx	lr

0000e244 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e244:	2200      	movs	r2, #0
    e246:	704a      	strb	r2, [r1, #1]
    e248:	2208      	movs	r2, #8
    e24a:	700a      	strb	r2, [r1, #0]
    e24c:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e250:	8812      	ldrh	r2, [r2, #0]
    e252:	808a      	strh	r2, [r1, #4]
    e254:	68c2      	ldr	r2, [r0, #12]
    e256:	f8c1 2006 	str.w	r2, [r1, #6]
    e25a:	6902      	ldr	r2, [r0, #16]
    e25c:	f8c1 200a 	str.w	r2, [r1, #10]
    e260:	8a80      	ldrh	r0, [r0, #20]
    e262:	81c8      	strh	r0, [r1, #14]
    e264:	4770      	bx	lr
    e266:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e26a:	f001 0307 	and.w	r3, r1, #7
    e26e:	7802      	ldrb	r2, [r0, #0]
    e270:	2101      	movs	r1, #1
    e272:	4099      	lsls	r1, r3
    e274:	430a      	orrs	r2, r1
    e276:	7002      	strb	r2, [r0, #0]
    e278:	4770      	bx	lr

0000e27a <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e27a:	b510      	push	{r4, lr}
    e27c:	6844      	ldr	r4, [r0, #4]
    e27e:	7803      	ldrb	r3, [r0, #0]
    e280:	2100      	movs	r1, #0
    e282:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e286:	3480      	adds	r4, #128	; 0x80
    e288:	4620      	mov	r0, r4
    e28a:	f7ff fa03 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e28e:	b110      	cbz	r0, e296 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e290:	2004      	movs	r0, #4
    e292:	7760      	strb	r0, [r4, #29]
    e294:	bd10      	pop	{r4, pc}
    e296:	21ab      	movs	r1, #171	; 0xab
    e298:	201c      	movs	r0, #28
    e29a:	f7f2 fb77 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e29e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e29e:	b510      	push	{r4, lr}
    e2a0:	6841      	ldr	r1, [r0, #4]
    e2a2:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e2a6:	07d2      	lsls	r2, r2, #31
    e2a8:	d00b      	beq.n	e2c2 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e2aa:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e2ae:	1e52      	subs	r2, r2, #1
    e2b0:	b252      	sxtb	r2, r2
    e2b2:	700a      	strb	r2, [r1, #0]
    e2b4:	6840      	ldr	r0, [r0, #4]
    e2b6:	2a00      	cmp	r2, #0
    e2b8:	da05      	bge.n	e2c6 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e2ba:	21ba      	movs	r1, #186	; 0xba
    e2bc:	201c      	movs	r0, #28
    e2be:	f7f2 fb65 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2c2:	21b8      	movs	r1, #184	; 0xb8
    e2c4:	e7fa      	b.n	e2bc <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e2c6:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e2ca:	f021 0101 	bic.w	r1, r1, #1
    e2ce:	6001      	str	r1, [r0, #0]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	2200      	movs	r2, #0
    e2d4:	704a      	strb	r2, [r1, #1]
    e2d6:	2206      	movs	r2, #6
    e2d8:	700a      	strb	r2, [r1, #0]
    e2da:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e2de:	604a      	str	r2, [r1, #4]
    e2e0:	6842      	ldr	r2, [r0, #4]
    e2e2:	608a      	str	r2, [r1, #8]
    e2e4:	8902      	ldrh	r2, [r0, #8]
    e2e6:	818a      	strh	r2, [r1, #12]
    e2e8:	7a80      	ldrb	r0, [r0, #10]
    e2ea:	7388      	strb	r0, [r1, #14]
    e2ec:	4770      	bx	lr

0000e2ee <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e2ee:	2200      	movs	r2, #0
    e2f0:	704a      	strb	r2, [r1, #1]
    e2f2:	220e      	movs	r2, #14
    e2f4:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e2f8:	700a      	strb	r2, [r1, #0]
    e2fa:	8800      	ldrh	r0, [r0, #0]
    e2fc:	8088      	strh	r0, [r1, #4]
    e2fe:	4770      	bx	lr

0000e300 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e300:	b510      	push	{r4, lr}
    e302:	6844      	ldr	r4, [r0, #4]
    e304:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    e308:	3480      	adds	r4, #128	; 0x80
    e30a:	f011 0f04 	tst.w	r1, #4
    e30e:	d001      	beq.n	e314 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    e310:	2001      	movs	r0, #1
    e312:	bd10      	pop	{r4, pc}
    e314:	f7ff fe9f 	bl	e056 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    e318:	68e0      	ldr	r0, [r4, #12]
    e31a:	f040 0004 	orr.w	r0, r0, #4
    e31e:	60e0      	str	r0, [r4, #12]
    e320:	2000      	movs	r0, #0
    e322:	bd10      	pop	{r4, pc}

0000e324 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e324:	b510      	push	{r4, lr}
    e326:	6844      	ldr	r4, [r0, #4]
    e328:	7803      	ldrb	r3, [r0, #0]
    e32a:	2100      	movs	r1, #0
    e32c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e330:	3480      	adds	r4, #128	; 0x80
    e332:	4620      	mov	r0, r4
    e334:	f7ff f9ae 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e338:	b110      	cbz	r0, e340 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e33a:	200f      	movs	r0, #15
    e33c:	7760      	strb	r0, [r4, #29]
    e33e:	bd10      	pop	{r4, pc}
    e340:	216e      	movs	r1, #110	; 0x6e
    e342:	204b      	movs	r0, #75	; 0x4b
    e344:	f7f2 fb22 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e348 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e348:	b510      	push	{r4, lr}
    e34a:	6844      	ldr	r4, [r0, #4]
    e34c:	7803      	ldrb	r3, [r0, #0]
    e34e:	2109      	movs	r1, #9
    e350:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e354:	3480      	adds	r4, #128	; 0x80
    e356:	4620      	mov	r0, r4
    e358:	f7ff f99c 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e35c:	2800      	cmp	r0, #0
    e35e:	d005      	beq.n	e36c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e360:	2000      	movs	r0, #0
    e362:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    e366:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e36a:	7760      	strb	r0, [r4, #29]
    e36c:	bd10      	pop	{r4, pc}

0000e36e <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e36e:	6841      	ldr	r1, [r0, #4]
    e370:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    e374:	f022 0204 	bic.w	r2, r2, #4
    e378:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    e37c:	f7ff be73 	b.w	e066 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000e380 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e380:	b510      	push	{r4, lr}
    e382:	2300      	movs	r3, #0
    e384:	704b      	strb	r3, [r1, #1]
    e386:	2401      	movs	r4, #1
    e388:	700c      	strb	r4, [r1, #0]
    e38a:	f100 0209 	add.w	r2, r0, #9
    e38e:	710b      	strb	r3, [r1, #4]
    e390:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    e394:	f8a1 0005 	strh.w	r0, [r1, #5]
    e398:	f812 0b01 	ldrb.w	r0, [r2], #1
    e39c:	71c8      	strb	r0, [r1, #7]
    e39e:	8810      	ldrh	r0, [r2, #0]
    e3a0:	8108      	strh	r0, [r1, #8]
    e3a2:	8850      	ldrh	r0, [r2, #2]
    e3a4:	8148      	strh	r0, [r1, #10]
    e3a6:	bd10      	pop	{r4, pc}

0000e3a8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e3a8:	b570      	push	{r4, r5, r6, lr}
    e3aa:	7803      	ldrb	r3, [r0, #0]
    e3ac:	6840      	ldr	r0, [r0, #4]
    e3ae:	2500      	movs	r5, #0
    e3b0:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e3b4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e3b8:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e3bc:	0789      	lsls	r1, r1, #30
    e3be:	d40e      	bmi.n	e3de <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e3c0:	7f62      	ldrb	r2, [r4, #29]
    e3c2:	2100      	movs	r1, #0
    e3c4:	4620      	mov	r0, r4
    e3c6:	f7ff f965 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e3ca:	b130      	cbz	r0, e3da <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e3cc:	2001      	movs	r0, #1
    e3ce:	7760      	strb	r0, [r4, #29]
    e3d0:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e3d4:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e3d8:	bd70      	pop	{r4, r5, r6, pc}
    e3da:	216e      	movs	r1, #110	; 0x6e
    e3dc:	e00b      	b.n	e3f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e3de:	7b21      	ldrb	r1, [r4, #12]
    e3e0:	0789      	lsls	r1, r1, #30
    e3e2:	d50f      	bpl.n	e404 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e3e4:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e3e8:	1e49      	subs	r1, r1, #1
    e3ea:	b249      	sxtb	r1, r1
    e3ec:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e3f0:	2900      	cmp	r1, #0
    e3f2:	da03      	bge.n	e3fc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e3f4:	2180      	movs	r1, #128	; 0x80
    e3f6:	2040      	movs	r0, #64	; 0x40
    e3f8:	f7f2 fac8 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3fc:	68e1      	ldr	r1, [r4, #12]
    e3fe:	f021 0102 	bic.w	r1, r1, #2
    e402:	60e1      	str	r1, [r4, #12]
    e404:	7485      	strb	r5, [r0, #18]
    e406:	bd70      	pop	{r4, r5, r6, pc}
    e408:	2200      	movs	r2, #0
    e40a:	704a      	strb	r2, [r1, #1]
    e40c:	2219      	movs	r2, #25
    e40e:	700a      	strb	r2, [r1, #0]
    e410:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e414:	6048      	str	r0, [r1, #4]
    e416:	4770      	bx	lr
    e418:	b510      	push	{r4, lr}
    e41a:	4604      	mov	r4, r0
    e41c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e420:	e9d4 1000 	ldrd	r1, r0, [r4]
    e424:	4050      	eors	r0, r2
    e426:	ea70 0101 	orns	r1, r0, r1
    e42a:	d008      	beq.n	e43e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e42c:	f001 fed3 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e430:	e9d4 2300 	ldrd	r2, r3, [r4]
    e434:	1a80      	subs	r0, r0, r2
    e436:	4199      	sbcs	r1, r3
    e438:	d301      	bcc.n	e43e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e43a:	2001      	movs	r0, #1
    e43c:	bd10      	pop	{r4, pc}
    e43e:	2000      	movs	r0, #0
    e440:	bd10      	pop	{r4, pc}

0000e442 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    e442:	b508      	push	{r3, lr}
    e444:	f000 f804 	bl	e450 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    e448:	466a      	mov	r2, sp
    e44a:	f7f4 ff07 	bl	325c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    e44e:	bd08      	pop	{r3, pc}
    e450:	b530      	push	{r4, r5, lr}
    e452:	784c      	ldrb	r4, [r1, #1]
    e454:	4603      	mov	r3, r0
    e456:	7808      	ldrb	r0, [r1, #0]
    e458:	788d      	ldrb	r5, [r1, #2]
    e45a:	0e22      	lsrs	r2, r4, #24
    e45c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    e460:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    e464:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    e468:	78cd      	ldrb	r5, [r1, #3]
    e46a:	790c      	ldrb	r4, [r1, #4]
    e46c:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    e470:	4322      	orrs	r2, r4
    e472:	7949      	ldrb	r1, [r1, #5]
    e474:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    e478:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e47c:	4611      	mov	r1, r2
    e47e:	2b01      	cmp	r3, #1
    e480:	d101      	bne.n	e486 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    e482:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    e486:	bd30      	pop	{r4, r5, pc}
    e488:	2801      	cmp	r0, #1
    e48a:	d102      	bne.n	e492 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    e48c:	7948      	ldrb	r0, [r1, #5]
    e48e:	0980      	lsrs	r0, r0, #6
    e490:	d001      	beq.n	e496 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    e492:	2000      	movs	r0, #0
    e494:	4770      	bx	lr
    e496:	2001      	movs	r0, #1
    e498:	4770      	bx	lr
    e49a:	2801      	cmp	r0, #1
    e49c:	d106      	bne.n	e4ac <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    e49e:	7948      	ldrb	r0, [r1, #5]
    e4a0:	2101      	movs	r1, #1
    e4a2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e4a6:	d101      	bne.n	e4ac <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    e4a8:	2001      	movs	r0, #1
    e4aa:	4770      	bx	lr
    e4ac:	2000      	movs	r0, #0
    e4ae:	4770      	bx	lr
    e4b0:	2802      	cmp	r0, #2
    e4b2:	d003      	beq.n	e4bc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    e4b4:	2803      	cmp	r0, #3
    e4b6:	d001      	beq.n	e4bc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    e4b8:	2000      	movs	r0, #0
    e4ba:	4770      	bx	lr
    e4bc:	2001      	movs	r0, #1
    e4be:	4770      	bx	lr

0000e4c0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e4c0:	b510      	push	{r4, lr}
    e4c2:	4604      	mov	r4, r0
    e4c4:	7c00      	ldrb	r0, [r0, #16]
    e4c6:	f7ff fff3 	bl	e4b0 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    e4ca:	b148      	cbz	r0, e4e0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e4cc:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e4d0:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e4d4:	f7ff f89f 	bl	d616 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e4d8:	2808      	cmp	r0, #8
    e4da:	d001      	beq.n	e4e0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e4dc:	2001      	movs	r0, #1
    e4de:	bd10      	pop	{r4, pc}
    e4e0:	7c20      	ldrb	r0, [r4, #16]
    e4e2:	b118      	cbz	r0, e4ec <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e4e4:	2802      	cmp	r0, #2
    e4e6:	d001      	beq.n	e4ec <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e4e8:	7de0      	ldrb	r0, [r4, #23]
    e4ea:	bd10      	pop	{r4, pc}
    e4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e4f0:	2000      	movs	r0, #0
    e4f2:	f7f3 b9db 	b.w	18ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e4f6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e4f6:	b508      	push	{r3, lr}
    e4f8:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e4fc:	f88d 1000 	strb.w	r1, [sp]
    e500:	9900      	ldr	r1, [sp, #0]
    e502:	9100      	str	r1, [sp, #0]
    e504:	f89d 1000 	ldrb.w	r1, [sp]
    e508:	b941      	cbnz	r1, e51c <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    e50a:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    e50e:	f88d 1000 	strb.w	r1, [sp]
    e512:	9900      	ldr	r1, [sp, #0]
    e514:	9100      	str	r1, [sp, #0]
    e516:	f89d 1000 	ldrb.w	r1, [sp]
    e51a:	b109      	cbz	r1, e520 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    e51c:	2001      	movs	r0, #1
    e51e:	bd08      	pop	{r3, pc}
    e520:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e524:	f88d 0000 	strb.w	r0, [sp]
    e528:	9800      	ldr	r0, [sp, #0]
    e52a:	9000      	str	r0, [sp, #0]
    e52c:	f89d 0000 	ldrb.w	r0, [sp]
    e530:	2000      	movs	r0, #0
    e532:	bd08      	pop	{r3, pc}

0000e534 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e534:	20ff      	movs	r0, #255	; 0xff
    e536:	7008      	strb	r0, [r1, #0]
    e538:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e53a:	f7fe bf71 	b.w	d420 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e53e <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e53e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e540:	460d      	mov	r5, r1
    e542:	4604      	mov	r4, r0
    e544:	f44f 728c 	mov.w	r2, #280	; 0x118
    e548:	2100      	movs	r1, #0
    e54a:	f002 f850 	bl	105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e54e:	20ff      	movs	r0, #255	; 0xff
    e550:	7020      	strb	r0, [r4, #0]
    e552:	207f      	movs	r0, #127	; 0x7f
    e554:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e558:	2013      	movs	r0, #19
    e55a:	8060      	strh	r0, [r4, #2]
    e55c:	f242 7010 	movw	r0, #10000	; 0x2710
    e560:	8460      	strh	r0, [r4, #34]	; 0x22
    e562:	f7f2 ff93 	bl	148c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e566:	4601      	mov	r1, r0
    e568:	6360      	str	r0, [r4, #52]	; 0x34
    e56a:	2200      	movs	r2, #0
    e56c:	4668      	mov	r0, sp
    e56e:	f7fe febd 	bl	d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e572:	2200      	movs	r2, #0
    e574:	2101      	movs	r1, #1
    e576:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e578:	f7fe ff32 	bl	d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e57c:	2204      	movs	r2, #4
    e57e:	4668      	mov	r0, sp
    e580:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e582:	f7fe feb3 	bl	d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e586:	2200      	movs	r2, #0
    e588:	4611      	mov	r1, r2
    e58a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e58c:	f7fe ff28 	bl	d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e590:	73a5      	strb	r5, [r4, #14]
    e592:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e596:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e59a:	f000 b958 	b.w	e84e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e59e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e59e:	7880      	ldrb	r0, [r0, #2]
    e5a0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e5a4:	b108      	cbz	r0, e5aa <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e5a6:	2000      	movs	r0, #0
    e5a8:	4770      	bx	lr
    e5aa:	201f      	movs	r0, #31
    e5ac:	4770      	bx	lr

0000e5ae <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e5ae:	f7f5 bbbb 	b.w	3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>

0000e5b2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e5b2:	6880      	ldr	r0, [r0, #8]
    e5b4:	4770      	bx	lr

0000e5b6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e5b6:	2001      	movs	r0, #1
    e5b8:	4770      	bx	lr

0000e5ba <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e5ba:	b510      	push	{r4, lr}
    e5bc:	4604      	mov	r4, r0
    e5be:	3028      	adds	r0, #40	; 0x28
    e5c0:	f000 f905 	bl	e7ce <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e5c4:	8861      	ldrh	r1, [r4, #2]
    e5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5ca:	2228      	movs	r2, #40	; 0x28
    e5cc:	f7f5 bd7c 	b.w	40c8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e5d0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e5d0:	2200      	movs	r2, #0
    e5d2:	8602      	strh	r2, [r0, #48]	; 0x30
    e5d4:	8843      	ldrh	r3, [r0, #2]
    e5d6:	2b1d      	cmp	r3, #29
    e5d8:	d001      	beq.n	e5de <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e5da:	7341      	strb	r1, [r0, #13]
    e5dc:	4770      	bx	lr
    e5de:	7342      	strb	r2, [r0, #13]
    e5e0:	4770      	bx	lr

0000e5e2 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    e5e2:	b510      	push	{r4, lr}
    e5e4:	2400      	movs	r4, #0
    e5e6:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e5e8:	f7fe fef2 	bl	d3d0 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    e5ec:	4384      	bics	r4, r0
    e5ee:	f084 0001 	eor.w	r0, r4, #1
    e5f2:	bd10      	pop	{r4, pc}

0000e5f4 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e5f4:	2000      	movs	r0, #0
    e5f6:	4770      	bx	lr

0000e5f8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e5f8:	7880      	ldrb	r0, [r0, #2]
    e5fa:	f000 0001 	and.w	r0, r0, #1
    e5fe:	4770      	bx	lr

0000e600 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e600:	7880      	ldrb	r0, [r0, #2]
    e602:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e606:	4770      	bx	lr

0000e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e608:	2001      	movs	r0, #1
    e60a:	4770      	bx	lr

0000e60c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e60c:	7880      	ldrb	r0, [r0, #2]
    e60e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e612:	4770      	bx	lr

0000e614 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e614:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e618:	4770      	bx	lr

0000e61a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e61a:	7800      	ldrb	r0, [r0, #0]
    e61c:	28ff      	cmp	r0, #255	; 0xff
    e61e:	d001      	beq.n	e624 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e620:	2001      	movs	r0, #1
    e622:	4770      	bx	lr
    e624:	2000      	movs	r0, #0
    e626:	4770      	bx	lr

0000e628 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e628:	f800 1f20 	strb.w	r1, [r0, #32]!
    e62c:	7042      	strb	r2, [r0, #1]
    e62e:	4770      	bx	lr

0000e630 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e630:	680a      	ldr	r2, [r1, #0]
    e632:	f840 2f11 	str.w	r2, [r0, #17]!
    e636:	8889      	ldrh	r1, [r1, #4]
    e638:	8081      	strh	r1, [r0, #4]
    e63a:	2101      	movs	r1, #1
    e63c:	7181      	strb	r1, [r0, #6]
    e63e:	4770      	bx	lr

0000e640 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e640:	7b00      	ldrb	r0, [r0, #12]
    e642:	4770      	bx	lr

0000e644 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e644:	2001      	movs	r0, #1
    e646:	4770      	bx	lr

0000e648 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e648:	61c1      	str	r1, [r0, #28]
    e64a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e64e:	724a      	strb	r2, [r1, #9]
    e650:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e654:	f8c1 200a 	str.w	r2, [r1, #10]
    e658:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e65c:	81c8      	strh	r0, [r1, #14]
    e65e:	4770      	bx	lr

0000e660 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e660:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e664:	4770      	bx	lr

0000e666 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e666:	7bc0      	ldrb	r0, [r0, #15]
    e668:	2800      	cmp	r0, #0
    e66a:	d000      	beq.n	e66e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e66c:	2001      	movs	r0, #1
    e66e:	4770      	bx	lr
    e670:	7802      	ldrb	r2, [r0, #0]
    e672:	2320      	movs	r3, #32
    e674:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e678:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e67c:	430a      	orrs	r2, r1
    e67e:	7002      	strb	r2, [r0, #0]
    e680:	4770      	bx	lr
    e682:	2101      	movs	r1, #1
    e684:	f7f4 bfa0 	b.w	35c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e688:	2101      	movs	r1, #1
    e68a:	f7f4 bf9d 	b.w	35c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e68e:	2200      	movs	r2, #0
    e690:	704a      	strb	r2, [r1, #1]
    e692:	2205      	movs	r2, #5
    e694:	700a      	strb	r2, [r1, #0]
    e696:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e69a:	6048      	str	r0, [r1, #4]
    e69c:	4770      	bx	lr
    e69e:	b510      	push	{r4, lr}
    e6a0:	460c      	mov	r4, r1
    e6a2:	2100      	movs	r1, #0
    e6a4:	7061      	strb	r1, [r4, #1]
    e6a6:	2112      	movs	r1, #18
    e6a8:	7021      	strb	r1, [r4, #0]
    e6aa:	f100 0109 	add.w	r1, r0, #9
    e6ae:	2221      	movs	r2, #33	; 0x21
    e6b0:	1d20      	adds	r0, r4, #4
    e6b2:	f001 ff22 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e6b6:	2001      	movs	r0, #1
    e6b8:	71e0      	strb	r0, [r4, #7]
    e6ba:	7920      	ldrb	r0, [r4, #4]
    e6bc:	2800      	cmp	r0, #0
    e6be:	d015      	beq.n	e6ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e6c0:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    e6c4:	2100      	movs	r1, #0
    e6c6:	4620      	mov	r0, r4
    e6c8:	f7f2 fc8e 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e6cc:	2800      	cmp	r0, #0
    e6ce:	d00d      	beq.n	e6ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e6d0:	8800      	ldrh	r0, [r0, #0]
    e6d2:	f7fe ff04 	bl	d4de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6d6:	2100      	movs	r1, #0
    e6d8:	4620      	mov	r0, r4
    e6da:	f7f2 fd27 	bl	112c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6de:	2800      	cmp	r0, #0
    e6e0:	d004      	beq.n	e6ec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e6e2:	f240 2151 	movw	r1, #593	; 0x251
    e6e6:	202d      	movs	r0, #45	; 0x2d
    e6e8:	f7f2 f950 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6ec:	bd10      	pop	{r4, pc}
    e6ee:	2200      	movs	r2, #0
    e6f0:	704a      	strb	r2, [r1, #1]
    e6f2:	221a      	movs	r2, #26
    e6f4:	700a      	strb	r2, [r1, #0]
    e6f6:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e6fa:	604a      	str	r2, [r1, #4]
    e6fc:	6842      	ldr	r2, [r0, #4]
    e6fe:	608a      	str	r2, [r1, #8]
    e700:	7a00      	ldrb	r0, [r0, #8]
    e702:	7308      	strb	r0, [r1, #12]
    e704:	4770      	bx	lr
    e706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e70a:	4604      	mov	r4, r0
    e70c:	460f      	mov	r7, r1
    e70e:	7e40      	ldrb	r0, [r0, #25]
    e710:	f7f3 fe08 	bl	2324 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e714:	4606      	mov	r6, r0
    e716:	7e20      	ldrb	r0, [r4, #24]
    e718:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e71c:	b120      	cbz	r0, e728 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e71e:	b11e      	cbz	r6, e728 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e720:	7e60      	ldrb	r0, [r4, #25]
    e722:	f7f3 fdf3 	bl	230c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e726:	b1a0      	cbz	r0, e752 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    e728:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e72c:	2800      	cmp	r0, #0
    e72e:	d024      	beq.n	e77a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    e730:	7ea0      	ldrb	r0, [r4, #26]
    e732:	2800      	cmp	r0, #0
    e734:	d021      	beq.n	e77a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    e736:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e73a:	4629      	mov	r1, r5
    e73c:	f7ff fead 	bl	e49a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    e740:	b1a8      	cbz	r0, e76e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    e742:	f7f3 fddf 	bl	2304 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e746:	463a      	mov	r2, r7
    e748:	4629      	mov	r1, r5
    e74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e74e:	f7fe befa 	b.w	d546 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e752:	2001      	movs	r0, #1
    e754:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    e758:	463a      	mov	r2, r7
    e75a:	4629      	mov	r1, r5
    e75c:	4630      	mov	r0, r6
    e75e:	f7fe fef2 	bl	d546 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e762:	7e61      	ldrb	r1, [r4, #25]
    e764:	4628      	mov	r0, r5
    e766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e76a:	f7f3 bde7 	b.w	233c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e76e:	4639      	mov	r1, r7
    e770:	4628      	mov	r0, r5
    e772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e776:	f7fe bed5 	b.w	d524 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e77e:	b510      	push	{r4, lr}
    e780:	4604      	mov	r4, r0
    e782:	4608      	mov	r0, r1
    e784:	f7f9 fb50 	bl	7e28 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e788:	7921      	ldrb	r1, [r4, #4]
    e78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e78e:	2025      	movs	r0, #37	; 0x25
    e790:	f7f9 bb20 	b.w	7dd4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    e794:	b570      	push	{r4, r5, r6, lr}
    e796:	4614      	mov	r4, r2
    e798:	461d      	mov	r5, r3
    e79a:	4606      	mov	r6, r0
    e79c:	f001 fd1b 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e7a0:	1900      	adds	r0, r0, r4
    e7a2:	4169      	adcs	r1, r5
    e7a4:	e9c6 0100 	strd	r0, r1, [r6]
    e7a8:	bd70      	pop	{r4, r5, r6, pc}

0000e7aa <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e7aa:	b570      	push	{r4, r5, r6, lr}
    e7ac:	7001      	strb	r1, [r0, #0]
    e7ae:	7042      	strb	r2, [r0, #1]
    e7b0:	4614      	mov	r4, r2
    e7b2:	460d      	mov	r5, r1
    e7b4:	7880      	ldrb	r0, [r0, #2]
    e7b6:	f000 f87f 	bl	e8b8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e7ba:	fb10 f005 	smulbb	r0, r0, r5
    e7be:	4360      	muls	r0, r4
    e7c0:	28ff      	cmp	r0, #255	; 0xff
    e7c2:	d303      	bcc.n	e7cc <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e7c4:	215c      	movs	r1, #92	; 0x5c
    e7c6:	202e      	movs	r0, #46	; 0x2e
    e7c8:	f7f2 f8e0 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7cc:	bd70      	pop	{r4, r5, r6, pc}

0000e7ce <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e7ce:	b510      	push	{r4, lr}
    e7d0:	4604      	mov	r4, r0
    e7d2:	7880      	ldrb	r0, [r0, #2]
    e7d4:	f000 f870 	bl	e8b8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e7d8:	7861      	ldrb	r1, [r4, #1]
    e7da:	7822      	ldrb	r2, [r4, #0]
    e7dc:	fb11 f102 	smulbb	r1, r1, r2
    e7e0:	4348      	muls	r0, r1
    e7e2:	b2c0      	uxtb	r0, r0
    e7e4:	bd10      	pop	{r4, pc}

0000e7e6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e7e6:	b510      	push	{r4, lr}
    e7e8:	4604      	mov	r4, r0
    e7ea:	f000 f84d 	bl	e888 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e7ee:	7961      	ldrb	r1, [r4, #5]
    e7f0:	1c49      	adds	r1, r1, #1
    e7f2:	b2c9      	uxtb	r1, r1
    e7f4:	7161      	strb	r1, [r4, #5]
    e7f6:	7862      	ldrb	r2, [r4, #1]
    e7f8:	4291      	cmp	r1, r2
    e7fa:	d10b      	bne.n	e814 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e7fc:	2200      	movs	r2, #0
    e7fe:	7162      	strb	r2, [r4, #5]
    e800:	78e1      	ldrb	r1, [r4, #3]
    e802:	4301      	orrs	r1, r0
    e804:	70e1      	strb	r1, [r4, #3]
    e806:	78a3      	ldrb	r3, [r4, #2]
    e808:	4299      	cmp	r1, r3
    e80a:	d103      	bne.n	e814 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e80c:	70e2      	strb	r2, [r4, #3]
    e80e:	7921      	ldrb	r1, [r4, #4]
    e810:	1c49      	adds	r1, r1, #1
    e812:	7121      	strb	r1, [r4, #4]
    e814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e818:	f000 b825 	b.w	e866 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e81c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e81c:	7081      	strb	r1, [r0, #2]
    e81e:	4770      	bx	lr

0000e820 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e820:	b570      	push	{r4, r5, r6, lr}
    e822:	4604      	mov	r4, r0
    e824:	7880      	ldrb	r0, [r0, #2]
    e826:	f000 f847 	bl	e8b8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e82a:	7861      	ldrb	r1, [r4, #1]
    e82c:	fb11 f500 	smulbb	r5, r1, r0
    e830:	78e0      	ldrb	r0, [r4, #3]
    e832:	f000 f841 	bl	e8b8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e836:	7861      	ldrb	r1, [r4, #1]
    e838:	7962      	ldrb	r2, [r4, #5]
    e83a:	fb10 2001 	smlabb	r0, r0, r1, r2
    e83e:	7821      	ldrb	r1, [r4, #0]
    e840:	7922      	ldrb	r2, [r4, #4]
    e842:	1a89      	subs	r1, r1, r2
    e844:	fb11 f105 	smulbb	r1, r1, r5
    e848:	1a08      	subs	r0, r1, r0
    e84a:	b2c0      	uxtb	r0, r0
    e84c:	bd70      	pop	{r4, r5, r6, pc}

0000e84e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e84e:	2100      	movs	r1, #0
    e850:	6001      	str	r1, [r0, #0]
    e852:	8081      	strh	r1, [r0, #4]
    e854:	2101      	movs	r1, #1
    e856:	7041      	strb	r1, [r0, #1]
    e858:	7001      	strb	r1, [r0, #0]
    e85a:	4770      	bx	lr

0000e85c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e85c:	2100      	movs	r1, #0
    e85e:	70c1      	strb	r1, [r0, #3]
    e860:	7141      	strb	r1, [r0, #5]
    e862:	7101      	strb	r1, [r0, #4]
    e864:	4770      	bx	lr
    e866:	b510      	push	{r4, lr}
    e868:	2801      	cmp	r0, #1
    e86a:	d007      	beq.n	e87c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e86c:	2802      	cmp	r0, #2
    e86e:	d007      	beq.n	e880 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e870:	2804      	cmp	r0, #4
    e872:	d007      	beq.n	e884 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e874:	2139      	movs	r1, #57	; 0x39
    e876:	202e      	movs	r0, #46	; 0x2e
    e878:	f7f2 f888 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e87c:	2025      	movs	r0, #37	; 0x25
    e87e:	bd10      	pop	{r4, pc}
    e880:	2026      	movs	r0, #38	; 0x26
    e882:	bd10      	pop	{r4, pc}
    e884:	2027      	movs	r0, #39	; 0x27
    e886:	bd10      	pop	{r4, pc}
    e888:	4601      	mov	r1, r0
    e88a:	2000      	movs	r0, #0
    e88c:	788a      	ldrb	r2, [r1, #2]
    e88e:	07d3      	lsls	r3, r2, #31
    e890:	d002      	beq.n	e898 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e892:	78cb      	ldrb	r3, [r1, #3]
    e894:	07db      	lsls	r3, r3, #31
    e896:	d006      	beq.n	e8a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e898:	0793      	lsls	r3, r2, #30
    e89a:	d506      	bpl.n	e8aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e89c:	78cb      	ldrb	r3, [r1, #3]
    e89e:	079b      	lsls	r3, r3, #30
    e8a0:	d403      	bmi.n	e8aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e8a2:	2002      	movs	r0, #2
    e8a4:	4770      	bx	lr
    e8a6:	2001      	movs	r0, #1
    e8a8:	4770      	bx	lr
    e8aa:	0752      	lsls	r2, r2, #29
    e8ac:	d5fc      	bpl.n	e8a8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e8ae:	78c9      	ldrb	r1, [r1, #3]
    e8b0:	0749      	lsls	r1, r1, #29
    e8b2:	d4f9      	bmi.n	e8a8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e8b4:	2004      	movs	r0, #4
    e8b6:	4770      	bx	lr
    e8b8:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e8bc:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e8c0:	4411      	add	r1, r2
    e8c2:	f000 0001 	and.w	r0, r0, #1
    e8c6:	4408      	add	r0, r1
    e8c8:	4770      	bx	lr

0000e8ca <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e8ca:	f240 315a 	movw	r1, #858	; 0x35a
    e8ce:	4348      	muls	r0, r1
    e8d0:	4770      	bx	lr

0000e8d2 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e8d2:	f240 20ef 	movw	r0, #751	; 0x2ef
    e8d6:	4770      	bx	lr
    e8d8:	041c020e 	.word	0x041c020e
    e8dc:	0c600630 	.word	0x0c600630
    e8e0:	06b4035a 	.word	0x06b4035a
    e8e4:	0bf505c5 	.word	0x0bf505c5
    e8e8:	01a31225 	.word	0x01a31225
    e8ec:	05bf03b1 	.word	0x05bf03b1
    e8f0:	064902ef 	.word	0x064902ef
    e8f4:	09a3      	.short	0x09a3

0000e8f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e8f6:	b510      	push	{r4, lr}
    e8f8:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    e8fc:	b109      	cbz	r1, e902 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e8fe:	2000      	movs	r0, #0
    e900:	bd10      	pop	{r4, pc}
    e902:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e906:	b131      	cbz	r1, e916 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e908:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    e90c:	428a      	cmp	r2, r1
    e90e:	d902      	bls.n	e916 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    e910:	f7f4 fe42 	bl	3598 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e914:	e7f3      	b.n	e8fe <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e916:	2001      	movs	r0, #1
    e918:	bd10      	pop	{r4, pc}

0000e91a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e91a:	b510      	push	{r4, lr}
    e91c:	b131      	cbz	r1, e92c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e91e:	2901      	cmp	r1, #1
    e920:	d008      	beq.n	e934 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e922:	f240 71d3 	movw	r1, #2003	; 0x7d3
    e926:	2030      	movs	r0, #48	; 0x30
    e928:	f7f2 f830 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e930:	f000 b9c7 	b.w	ecc2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    e934:	2100      	movs	r1, #0
    e936:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    e93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e93e:	f000 b923 	b.w	eb88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000e942 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e942:	b510      	push	{r4, lr}
    e944:	4604      	mov	r4, r0
    e946:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e94a:	2800      	cmp	r0, #0
    e94c:	d019      	beq.n	e982 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e94e:	2001      	movs	r0, #1
    e950:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    e954:	4601      	mov	r1, r0
    e956:	4620      	mov	r0, r4
    e958:	f7ff fe82 	bl	e660 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e95c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    e960:	b170      	cbz	r0, e980 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e962:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    e966:	f7fb fd01 	bl	a36c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e96a:	7820      	ldrb	r0, [r4, #0]
    e96c:	f7fb fe76 	bl	a65c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e970:	f814 09c8 	ldrb.w	r0, [r4], #-200
    e974:	f7fb fe50 	bl	a618 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e978:	b120      	cbz	r0, e984 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e97a:	2000      	movs	r0, #0
    e97c:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    e980:	2000      	movs	r0, #0
    e982:	bd10      	pop	{r4, pc}
    e984:	f240 210b 	movw	r1, #523	; 0x20b
    e988:	2030      	movs	r0, #48	; 0x30
    e98a:	f7f1 ffff 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e98e <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e98e:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    e992:	4770      	bx	lr

0000e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e994:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    e998:	4770      	bx	lr

0000e99a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e99a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e99c:	4604      	mov	r4, r0
    e99e:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    e9a2:	2800      	cmp	r0, #0
    e9a4:	d15f      	bne.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e9a6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    e9aa:	2803      	cmp	r0, #3
    e9ac:	d15b      	bne.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e9ae:	f001 fc12 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e9b2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    e9b6:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    e9ba:	1ac0      	subs	r0, r0, r3
    e9bc:	eb61 0102 	sbc.w	r1, r1, r2
    e9c0:	2300      	movs	r3, #0
    e9c2:	461a      	mov	r2, r3
    e9c4:	1a1b      	subs	r3, r3, r0
    e9c6:	418a      	sbcs	r2, r1
    e9c8:	da4d      	bge.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    e9ca:	1c42      	adds	r2, r0, #1
    e9cc:	f171 0100 	sbcs.w	r1, r1, #0
    e9d0:	db02      	blt.n	e9d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    e9d2:	f240 610b 	movw	r1, #1547	; 0x60b
    e9d6:	e036      	b.n	ea46 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    e9d8:	6921      	ldr	r1, [r4, #16]
    e9da:	b111      	cbz	r1, e9e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    e9dc:	fbb0 f0f1 	udiv	r0, r0, r1
    e9e0:	e000      	b.n	e9e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    e9e2:	2000      	movs	r0, #0
    e9e4:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    e9e8:	1c40      	adds	r0, r0, #1
    e9ea:	4408      	add	r0, r1
    e9ec:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    e9f0:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    e9f4:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    e9f8:	1a08      	subs	r0, r1, r0
    e9fa:	b200      	sxth	r0, r0
    e9fc:	2800      	cmp	r0, #0
    e9fe:	dd32      	ble.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ea00:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ea04:	f7fb fcb2 	bl	a36c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ea08:	2800      	cmp	r0, #0
    ea0a:	d02c      	beq.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ea0c:	20ff      	movs	r0, #255	; 0xff
    ea0e:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    ea12:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    ea16:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    ea1a:	ae01      	add	r6, sp, #4
    ea1c:	1a40      	subs	r0, r0, r1
    ea1e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ea22:	1e40      	subs	r0, r0, #1
    ea24:	4408      	add	r0, r1
    ea26:	b285      	uxth	r5, r0
    ea28:	e017      	b.n	ea5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ea2a:	9600      	str	r6, [sp, #0]
    ea2c:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    ea30:	2300      	movs	r3, #0
    ea32:	2201      	movs	r2, #1
    ea34:	4620      	mov	r0, r4
    ea36:	f7f5 fe4f 	bl	46d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    ea3a:	2800      	cmp	r0, #0
    ea3c:	d013      	beq.n	ea66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ea3e:	2801      	cmp	r0, #1
    ea40:	d004      	beq.n	ea4c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ea42:	f240 6144 	movw	r1, #1604	; 0x644
    ea46:	2030      	movs	r0, #48	; 0x30
    ea48:	f7f1 ffa0 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea4c:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ea50:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ea54:	4408      	add	r0, r1
    ea56:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ea5a:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ea5e:	1a28      	subs	r0, r5, r0
    ea60:	b200      	sxth	r0, r0
    ea62:	2800      	cmp	r0, #0
    ea64:	dae1      	bge.n	ea2a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ea66:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ea68:	2000      	movs	r0, #0
    ea6a:	4770      	bx	lr
    ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea70:	4604      	mov	r4, r0
    ea72:	f000 f8ff 	bl	ec74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    ea76:	2700      	movs	r7, #0
    ea78:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ea7c:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    ea80:	2601      	movs	r6, #1
    ea82:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    ea86:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    ea88:	463d      	mov	r5, r7
    ea8a:	b130      	cbz	r0, ea9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    ea8c:	f001 fba3 	bl	101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea90:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ea92:	fbb0 f2f1 	udiv	r2, r0, r1
    ea96:	fb01 0512 	mls	r5, r1, r2, r0
    ea9a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    ea9e:	2100      	movs	r1, #0
    eaa0:	4680      	mov	r8, r0
    eaa2:	f7fe fec5 	bl	d830 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    eaa6:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    eaaa:	1949      	adds	r1, r1, r5
    eaac:	4178      	adcs	r0, r7
    eaae:	e9c4 1000 	strd	r1, r0, [r4]
    eab2:	8920      	ldrh	r0, [r4, #8]
    eab4:	3cf8      	subs	r4, #248	; 0xf8
    eab6:	1c40      	adds	r0, r0, #1
    eab8:	280a      	cmp	r0, #10
    eaba:	d201      	bcs.n	eac0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    eabc:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    eac0:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    eac4:	b138      	cbz	r0, ead6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    eac6:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    eaca:	1c40      	adds	r0, r0, #1
    eacc:	280a      	cmp	r0, #10
    eace:	d302      	bcc.n	ead6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ead0:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    ead4:	e002      	b.n	eadc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    ead6:	2002      	movs	r0, #2
    ead8:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    eadc:	4620      	mov	r0, r4
    eade:	f000 f823 	bl	eb28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    eae2:	b120      	cbz	r0, eaee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    eae4:	4620      	mov	r0, r4
    eae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eaea:	f000 b80e 	b.w	eb0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    eaee:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    eaf2:	4641      	mov	r1, r8
    eaf4:	f000 f8bc 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    eaf8:	2800      	cmp	r0, #0
    eafa:	d104      	bne.n	eb06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    eafc:	f240 61e7 	movw	r1, #1767	; 0x6e7
    eb00:	2030      	movs	r0, #48	; 0x30
    eb02:	f7f1 ff43 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb0a:	b510      	push	{r4, lr}
    eb0c:	4604      	mov	r4, r0
    eb0e:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    eb12:	f7fb fd81 	bl	a618 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eb16:	2000      	movs	r0, #0
    eb18:	7620      	strb	r0, [r4, #24]
    eb1a:	bd10      	pop	{r4, pc}
    eb1c:	b510      	push	{r4, lr}
    eb1e:	f7ff fd4c 	bl	e5ba <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eb22:	f200 1015 	addw	r0, r0, #277	; 0x115
    eb26:	bd10      	pop	{r4, pc}
    eb28:	b570      	push	{r4, r5, r6, lr}
    eb2a:	4605      	mov	r5, r0
    eb2c:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    eb30:	b108      	cbz	r0, eb36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    eb32:	2001      	movs	r0, #1
    eb34:	bd70      	pop	{r4, r5, r6, pc}
    eb36:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    eb3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    eb3e:	4050      	eors	r0, r2
    eb40:	ea70 0101 	orns	r1, r0, r1
    eb44:	d012      	beq.n	eb6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    eb46:	2400      	movs	r4, #0
    eb48:	4621      	mov	r1, r4
    eb4a:	4628      	mov	r0, r5
    eb4c:	f7ff ffe6 	bl	eb1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    eb50:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    eb54:	1840      	adds	r0, r0, r1
    eb56:	4154      	adcs	r4, r2
    eb58:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    eb5c:	3df8      	subs	r5, #248	; 0xf8
    eb5e:	1a10      	subs	r0, r2, r0
    eb60:	41a1      	sbcs	r1, r4
    eb62:	d503      	bpl.n	eb6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    eb64:	4628      	mov	r0, r5
    eb66:	f7f4 fd17 	bl	3598 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eb6a:	e7e2      	b.n	eb32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    eb6c:	2000      	movs	r0, #0
    eb6e:	bd70      	pop	{r4, r5, r6, pc}
    eb70:	b510      	push	{r4, lr}
    eb72:	4604      	mov	r4, r0
    eb74:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    eb78:	f000 f988 	bl	ee8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    eb7c:	4601      	mov	r1, r0
    eb7e:	4620      	mov	r0, r4
    eb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb84:	f7ff b9c7 	b.w	df16 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    eb88:	b510      	push	{r4, lr}
    eb8a:	f7f8 ff7f 	bl	7a8c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    eb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb92:	f7fb be9f 	b.w	a8d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    eb96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb9a:	4604      	mov	r4, r0
    eb9c:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    eba0:	2800      	cmp	r0, #0
    eba2:	d051      	beq.n	ec48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    eba4:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    eba8:	2803      	cmp	r0, #3
    ebaa:	d14d      	bne.n	ec48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    ebac:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ebb0:	f001 fa2a 	bl	10008 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ebb4:	4605      	mov	r5, r0
    ebb6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ebba:	f7f5 fc59 	bl	4470 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    ebbe:	4428      	add	r0, r5
    ebc0:	b286      	uxth	r6, r0
    ebc2:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ebc6:	f7f5 fc53 	bl	4470 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    ebca:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ebce:	fa1f f880 	uxth.w	r8, r0
    ebd2:	4648      	mov	r0, r9
    ebd4:	f7f9 f818 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ebd8:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    ebdc:	1a0d      	subs	r5, r1, r0
    ebde:	4648      	mov	r0, r9
    ebe0:	f7f9 f83e 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ebe4:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ebe8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    ebec:	fbb0 f0fa 	udiv	r0, r0, sl
    ebf0:	1a2d      	subs	r5, r5, r0
    ebf2:	4648      	mov	r0, r9
    ebf4:	f7f9 f808 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ebf8:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    ebfc:	1a0f      	subs	r7, r1, r0
    ebfe:	4648      	mov	r0, r9
    ec00:	f7f9 f82e 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ec04:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ec08:	4401      	add	r1, r0
    ec0a:	fbb1 f0fa 	udiv	r0, r1, sl
    ec0e:	1a39      	subs	r1, r7, r0
    ec10:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    ec14:	4370      	muls	r0, r6
    ec16:	fbb0 f2f8 	udiv	r2, r0, r8
    ec1a:	2029      	movs	r0, #41	; 0x29
    ec1c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    ec20:	3260      	adds	r2, #96	; 0x60
    ec22:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    ec26:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    ec2a:	42a9      	cmp	r1, r5
    ec2c:	d801      	bhi.n	ec32 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    ec2e:	4285      	cmp	r5, r0
    ec30:	d901      	bls.n	ec36 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    ec32:	f7fd f849 	bl	bcc8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    ec36:	4631      	mov	r1, r6
    ec38:	6920      	ldr	r0, [r4, #16]
    ec3a:	f7fd f8ad 	bl	bd98 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ec3e:	2100      	movs	r1, #0
    ec40:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    ec44:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    ec48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ec4c:	b570      	push	{r4, r5, r6, lr}
    ec4e:	460c      	mov	r4, r1
    ec50:	4605      	mov	r5, r0
    ec52:	f7f9 f805 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ec56:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ec5a:	4408      	add	r0, r1
    ec5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ec60:	fbb0 f6f1 	udiv	r6, r0, r1
    ec64:	4628      	mov	r0, r5
    ec66:	f7f8 ffcf 	bl	7c08 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ec6a:	4430      	add	r0, r6
    ec6c:	4420      	add	r0, r4
    ec6e:	bd70      	pop	{r4, r5, r6, pc}
    ec70:	f7fa bf1e 	b.w	9ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ec74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ec76:	4604      	mov	r4, r0
    ec78:	f7ff fcc6 	bl	e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ec7c:	b1f8      	cbz	r0, ecbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    ec7e:	4620      	mov	r0, r4
    ec80:	f7ff fcba 	bl	e5f8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ec84:	b918      	cbnz	r0, ec8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    ec86:	4620      	mov	r0, r4
    ec88:	f7ff fcc0 	bl	e60c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ec8c:	b140      	cbz	r0, eca0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    ec8e:	245a      	movs	r4, #90	; 0x5a
    ec90:	4668      	mov	r0, sp
    ec92:	f7fd fad7 	bl	c244 <mpsl_fem_pa_is_configured>
    ec96:	f89d 0000 	ldrb.w	r0, [sp]
    ec9a:	b118      	cbz	r0, eca4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    ec9c:	2501      	movs	r5, #1
    ec9e:	e002      	b.n	eca6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    eca0:	2450      	movs	r4, #80	; 0x50
    eca2:	e7f5      	b.n	ec90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    eca4:	2500      	movs	r5, #0
    eca6:	a801      	add	r0, sp, #4
    eca8:	f7fd fab4 	bl	c214 <mpsl_fem_lna_is_configured>
    ecac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ecb0:	b100      	cbz	r0, ecb4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    ecb2:	2001      	movs	r0, #1
    ecb4:	4305      	orrs	r5, r0
    ecb6:	d000      	beq.n	ecba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    ecb8:	340a      	adds	r4, #10
    ecba:	4620      	mov	r0, r4
    ecbc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ecbe:	2061      	movs	r0, #97	; 0x61
    ecc0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ecc2:	b570      	push	{r4, r5, r6, lr}
    ecc4:	4604      	mov	r4, r0
    ecc6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    ecc8:	2500      	movs	r5, #0
    ecca:	b130      	cbz	r0, ecda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    eccc:	f7f4 f852 	bl	2d74 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    ecd0:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ecd2:	fbb0 f2f1 	udiv	r2, r0, r1
    ecd6:	fb01 0512 	mls	r5, r1, r2, r0
    ecda:	4620      	mov	r0, r4
    ecdc:	f7ff fc69 	bl	e5b2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ece0:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    ece4:	4428      	add	r0, r5
    ece6:	34e8      	adds	r4, #232	; 0xe8
    ece8:	2500      	movs	r5, #0
    ecea:	1882      	adds	r2, r0, r2
    ecec:	eb45 0001 	adc.w	r0, r5, r1
    ecf0:	e9c4 2004 	strd	r2, r0, [r4, #16]
    ecf4:	f804 5b0b 	strb.w	r5, [r4], #11
    ecf8:	2001      	movs	r0, #1
    ecfa:	f804 0901 	strb.w	r0, [r4], #-1
    ecfe:	2002      	movs	r0, #2
    ed00:	f804 09f2 	strb.w	r0, [r4], #-242
    ed04:	4620      	mov	r0, r4
    ed06:	f7ff ffb5 	bl	ec74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    ed0a:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ed0e:	4620      	mov	r0, r4
    ed10:	f7ff ff0a 	bl	eb28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ed14:	b930      	cbnz	r0, ed24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
    ed16:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    ed1a:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    ed1e:	f7ff ffa7 	bl	ec70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    ed22:	b128      	cbz	r0, ed30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
    ed24:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    ed28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed2c:	f7ff bf2c 	b.w	eb88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    ed30:	f240 712d 	movw	r1, #1837	; 0x72d
    ed34:	2030      	movs	r0, #48	; 0x30
    ed36:	f7f1 fe29 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed3a:	b510      	push	{r4, lr}
    ed3c:	4604      	mov	r4, r0
    ed3e:	2000      	movs	r0, #0
    ed40:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    ed44:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ed48:	f7fb fc66 	bl	a618 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed4c:	2020      	movs	r0, #32
    ed4e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    ed52:	bd10      	pop	{r4, pc}
    ed54:	b510      	push	{r4, lr}
    ed56:	b140      	cbz	r0, ed6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
    ed58:	2909      	cmp	r1, #9
    ed5a:	d22f      	bcs.n	edbc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
    ed5c:	e8df f001 	tbb	[pc, r1]
    ed60:	1e1e1607 	.word	0x1e1e1607
    ed64:	26222e1a 	.word	0x26222e1a
    ed68:	002a      	.short	0x002a
    ed6a:	21cd      	movs	r1, #205	; 0xcd
    ed6c:	e023      	b.n	edb6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    ed6e:	4604      	mov	r4, r0
    ed70:	f7f4 fbe2 	bl	3538 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    ed74:	b110      	cbz	r0, ed7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
    ed76:	f240 2187 	movw	r1, #647	; 0x287
    ed7a:	e01c      	b.n	edb6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    ed7c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    ed80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    ed88:	f7fb be80 	b.w	aa8c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ed8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed90:	f000 b8b1 	b.w	eef6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
    ed94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed98:	f7f9 b84c 	b.w	7e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ed9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eda0:	f7ff be64 	b.w	ea6c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    eda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eda8:	f7ff bc01 	b.w	e5ae <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    edac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edb0:	f7ff beab 	b.w	eb0a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    edb4:	21ed      	movs	r1, #237	; 0xed
    edb6:	2030      	movs	r0, #48	; 0x30
    edb8:	f7f1 fde8 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edbc:	21f1      	movs	r1, #241	; 0xf1
    edbe:	e7fa      	b.n	edb6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    edc0:	b510      	push	{r4, lr}
    edc2:	0004      	movs	r4, r0
    edc4:	d009      	beq.n	edda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    edc6:	2200      	movs	r2, #0
    edc8:	2909      	cmp	r1, #9
    edca:	d25d      	bcs.n	ee88 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    edcc:	e8df f001 	tbb	[pc, r1]
    edd0:	43433b07 	.word	0x43433b07
    edd4:	4f485c3f 	.word	0x4f485c3f
    edd8:	0058      	.short	0x0058
    edda:	2196      	movs	r1, #150	; 0x96
    eddc:	e051      	b.n	ee82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    edde:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    ede2:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    ede6:	4620      	mov	r0, r4
    ede8:	b189      	cbz	r1, ee0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
    edea:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    edee:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    edf2:	428a      	cmp	r2, r1
    edf4:	d106      	bne.n	ee04 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    edf6:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    edfa:	1a51      	subs	r1, r2, r1
    edfc:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ee00:	4611      	mov	r1, r2
    ee02:	e00d      	b.n	ee20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    ee04:	1a51      	subs	r1, r2, r1
    ee06:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ee0a:	b291      	uxth	r1, r2
    ee0c:	e008      	b.n	ee20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    ee0e:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    ee12:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    ee16:	1a89      	subs	r1, r1, r2
    ee18:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    ee1c:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    ee20:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    ee24:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    ee28:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    ee2c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    ee30:	f7f5 ffec 	bl	4e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    ee34:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    ee38:	2800      	cmp	r0, #0
    ee3a:	d020      	beq.n	ee7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
    ee3c:	4620      	mov	r0, r4
    ee3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee42:	f7f5 bbcd 	b.w	45e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    ee46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee4a:	f000 b8a0 	b.w	ef8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    ee4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee52:	f7f8 bfef 	b.w	7e34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    ee56:	4620      	mov	r0, r4
    ee58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee5c:	f7f5 be46 	b.w	4aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    ee60:	2001      	movs	r0, #1
    ee62:	f7fa fbe5 	bl	9630 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    ee66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee6a:	f7fe bba1 	b.w	d5b0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    ee6e:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ee72:	2804      	cmp	r0, #4
    ee74:	d001      	beq.n	ee7a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
    ee76:	21bb      	movs	r1, #187	; 0xbb
    ee78:	e003      	b.n	ee82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ee7a:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    ee7e:	bd10      	pop	{r4, pc}
    ee80:	21c1      	movs	r1, #193	; 0xc1
    ee82:	2030      	movs	r0, #48	; 0x30
    ee84:	f7f1 fd82 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee88:	21c5      	movs	r1, #197	; 0xc5
    ee8a:	e7fa      	b.n	ee82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    ee8c:	b510      	push	{r4, lr}
    ee8e:	f7f8 fee7 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ee92:	f64d 7141 	movw	r1, #57153	; 0xdf41
    ee96:	4408      	add	r0, r1
    ee98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ee9c:	fbb0 f0f1 	udiv	r0, r0, r1
    eea0:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    eea4:	bd10      	pop	{r4, pc}
    eea6:	b538      	push	{r3, r4, r5, lr}
    eea8:	2500      	movs	r5, #0
    eeaa:	4604      	mov	r4, r0
    eeac:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    eeb0:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    eeb4:	462b      	mov	r3, r5
    eeb6:	462a      	mov	r2, r5
    eeb8:	4629      	mov	r1, r5
    eeba:	9500      	str	r5, [sp, #0]
    eebc:	f7f5 fc0c 	bl	46d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    eec0:	b120      	cbz	r0, eecc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
    eec2:	f240 211f 	movw	r1, #543	; 0x21f
    eec6:	2030      	movs	r0, #48	; 0x30
    eec8:	f7f1 fd60 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eecc:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    eed0:	2001      	movs	r0, #1
    eed2:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    eed6:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    eeda:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    eede:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    eee2:	3494      	adds	r4, #148	; 0x94
    eee4:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    eee8:	8820      	ldrh	r0, [r4, #0]
    eeea:	1e40      	subs	r0, r0, #1
    eeec:	8020      	strh	r0, [r4, #0]
    eeee:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    eef2:	2000      	movs	r0, #0
    eef4:	bd38      	pop	{r3, r4, r5, pc}
    eef6:	b570      	push	{r4, r5, r6, lr}
    eef8:	4605      	mov	r5, r0
    eefa:	f7ff fb81 	bl	e600 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    eefe:	b9c8      	cbnz	r0, ef34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
    ef00:	2100      	movs	r1, #0
    ef02:	4628      	mov	r0, r5
    ef04:	f7ff fe0a 	bl	eb1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ef08:	4604      	mov	r4, r0
    ef0a:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    ef0e:	42a0      	cmp	r0, r4
    ef10:	d20e      	bcs.n	ef30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    ef12:	1a20      	subs	r0, r4, r0
    ef14:	2867      	cmp	r0, #103	; 0x67
    ef16:	d200      	bcs.n	ef1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
    ef18:	2067      	movs	r0, #103	; 0x67
    ef1a:	2103      	movs	r1, #3
    ef1c:	f7fa fb98 	bl	9650 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ef20:	b130      	cbz	r0, ef30 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    ef22:	4628      	mov	r0, r5
    ef24:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef2c:	f7ff bb3f 	b.w	e5ae <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    ef30:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    ef34:	4628      	mov	r0, r5
    ef36:	f7f4 fb1b 	bl	3570 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    ef3a:	2800      	cmp	r0, #0
    ef3c:	d004      	beq.n	ef48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
    ef3e:	f240 21bd 	movw	r1, #701	; 0x2bd
    ef42:	2030      	movs	r0, #48	; 0x30
    ef44:	f7f1 fd22 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef48:	bd70      	pop	{r4, r5, r6, pc}
    ef4a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ef4e:	f001 0307 	and.w	r3, r1, #7
    ef52:	7802      	ldrb	r2, [r0, #0]
    ef54:	2101      	movs	r1, #1
    ef56:	4099      	lsls	r1, r3
    ef58:	438a      	bics	r2, r1
    ef5a:	7002      	strb	r2, [r0, #0]
    ef5c:	4770      	bx	lr

0000ef5e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    ef5e:	b510      	push	{r4, lr}
    ef60:	460c      	mov	r4, r1
    ef62:	f7f2 f963 	bl	122c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    ef66:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ef6a:	2820      	cmp	r0, #32
    ef6c:	d00c      	beq.n	ef88 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    ef6e:	f7fb fb75 	bl	a65c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ef72:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ef76:	f7fb fb4f 	bl	a618 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef7a:	2800      	cmp	r0, #0
    ef7c:	d104      	bne.n	ef88 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    ef7e:	f640 4129 	movw	r1, #3113	; 0xc29
    ef82:	2031      	movs	r0, #49	; 0x31
    ef84:	f7f1 fd02 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef88:	bd10      	pop	{r4, pc}

0000ef8a <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    ef8a:	2000      	movs	r0, #0
    ef8c:	4770      	bx	lr

0000ef8e <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    ef8e:	f7f2 bde1 	b.w	1b54 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000ef92 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    ef92:	2100      	movs	r1, #0
    ef94:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    ef98:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    ef9c:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    efa0:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    efa4:	b109      	cbz	r1, efaa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    efa6:	2102      	movs	r1, #2
    efa8:	e000      	b.n	efac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    efaa:	2103      	movs	r1, #3
    efac:	f7f5 b9d6 	b.w	435c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    efb0:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    efb4:	28fe      	cmp	r0, #254	; 0xfe
    efb6:	d001      	beq.n	efbc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    efb8:	2001      	movs	r0, #1
    efba:	4770      	bx	lr
    efbc:	2000      	movs	r0, #0
    efbe:	4770      	bx	lr
    efc0:	b510      	push	{r4, lr}
    efc2:	2801      	cmp	r0, #1
    efc4:	d006      	beq.n	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    efc6:	2802      	cmp	r0, #2
    efc8:	d004      	beq.n	efd4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    efca:	f240 21d7 	movw	r1, #727	; 0x2d7
    efce:	2006      	movs	r0, #6
    efd0:	f7f1 fcdc 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efd4:	bd10      	pop	{r4, pc}
    efd6:	2801      	cmp	r0, #1
    efd8:	d002      	beq.n	efe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    efda:	2802      	cmp	r0, #2
    efdc:	d105      	bne.n	efea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    efde:	e002      	b.n	efe6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    efe0:	2901      	cmp	r1, #1
    efe2:	d004      	beq.n	efee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    efe4:	e001      	b.n	efea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    efe6:	2902      	cmp	r1, #2
    efe8:	d001      	beq.n	efee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    efea:	2000      	movs	r0, #0
    efec:	4770      	bx	lr
    efee:	2001      	movs	r0, #1
    eff0:	4770      	bx	lr
    eff2:	1a40      	subs	r0, r0, r1
    eff4:	b200      	sxth	r0, r0
    eff6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    effa:	4288      	cmp	r0, r1
    effc:	dc01      	bgt.n	f002 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    effe:	2800      	cmp	r0, #0
    f000:	dc01      	bgt.n	f006 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f002:	2001      	movs	r0, #1
    f004:	4770      	bx	lr
    f006:	2000      	movs	r0, #0
    f008:	4770      	bx	lr
    f00a:	6840      	ldr	r0, [r0, #4]
    f00c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f010:	2912      	cmp	r1, #18
    f012:	d001      	beq.n	f018 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f014:	2002      	movs	r0, #2
    f016:	4770      	bx	lr
    f018:	2113      	movs	r1, #19
    f01a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f01e:	2000      	movs	r0, #0
    f020:	4770      	bx	lr
    f022:	b510      	push	{r4, lr}
    f024:	6843      	ldr	r3, [r0, #4]
    f026:	4604      	mov	r4, r0
    f028:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f02c:	2808      	cmp	r0, #8
    f02e:	d20d      	bcs.n	f04c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f030:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f034:	f1c0 0008 	rsb	r0, r0, #8
    f038:	b2c1      	uxtb	r1, r0
    f03a:	1898      	adds	r0, r3, r2
    f03c:	f7f1 fd48 	bl	ad0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f040:	6861      	ldr	r1, [r4, #4]
    f042:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f046:	4410      	add	r0, r2
    f048:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f04c:	6862      	ldr	r2, [r4, #4]
    f04e:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f052:	3908      	subs	r1, #8
    f054:	2904      	cmp	r1, #4
    f056:	d20d      	bcs.n	f074 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f058:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f05c:	f1c1 0104 	rsb	r1, r1, #4
    f060:	b2c9      	uxtb	r1, r1
    f062:	4410      	add	r0, r2
    f064:	f7f1 fd34 	bl	ad0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f068:	6861      	ldr	r1, [r4, #4]
    f06a:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f06e:	4410      	add	r0, r2
    f070:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f074:	6860      	ldr	r0, [r4, #4]
    f076:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f07a:	290c      	cmp	r1, #12
    f07c:	d30f      	bcc.n	f09e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f07e:	d005      	beq.n	f08c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f080:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f084:	f04f 0031 	mov.w	r0, #49	; 0x31
    f088:	f7f1 fc80 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f08c:	2100      	movs	r1, #0
    f08e:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f092:	2101      	movs	r1, #1
    f094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f098:	2004      	movs	r0, #4
    f09a:	f7f6 bd43 	b.w	5b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f09e:	bd10      	pop	{r4, pc}
    f0a0:	6842      	ldr	r2, [r0, #4]
    f0a2:	2131      	movs	r1, #49	; 0x31
    f0a4:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f0a8:	6840      	ldr	r0, [r0, #4]
    f0aa:	2100      	movs	r1, #0
    f0ac:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f0b0:	4770      	bx	lr
    f0b2:	b510      	push	{r4, lr}
    f0b4:	6841      	ldr	r1, [r0, #4]
    f0b6:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f0ba:	2a15      	cmp	r2, #21
    f0bc:	d004      	beq.n	f0c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f0be:	f240 7183 	movw	r1, #1923	; 0x783
    f0c2:	2031      	movs	r0, #49	; 0x31
    f0c4:	f7f1 fc62 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0c8:	2201      	movs	r2, #1
    f0ca:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f0ce:	6840      	ldr	r0, [r0, #4]
    f0d0:	2116      	movs	r1, #22
    f0d2:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f0d6:	bd10      	pop	{r4, pc}
    f0d8:	f7ff b8e1 	b.w	e29e <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f0dc:	b510      	push	{r4, lr}
    f0de:	6841      	ldr	r1, [r0, #4]
    f0e0:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f0e4:	2a11      	cmp	r2, #17
    f0e6:	d004      	beq.n	f0f2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f0e8:	f240 717b 	movw	r1, #1915	; 0x77b
    f0ec:	2031      	movs	r0, #49	; 0x31
    f0ee:	f7f1 fc4d 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0f2:	2201      	movs	r2, #1
    f0f4:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f0f8:	6840      	ldr	r0, [r0, #4]
    f0fa:	2112      	movs	r1, #18
    f0fc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f100:	bd10      	pop	{r4, pc}
    f102:	b510      	push	{r4, lr}
    f104:	6841      	ldr	r1, [r0, #4]
    f106:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f10a:	2822      	cmp	r0, #34	; 0x22
    f10c:	d005      	beq.n	f11a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f10e:	b120      	cbz	r0, f11a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f110:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f114:	2031      	movs	r0, #49	; 0x31
    f116:	f7f1 fc39 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f11a:	2023      	movs	r0, #35	; 0x23
    f11c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f120:	bd10      	pop	{r4, pc}
    f122:	b510      	push	{r4, lr}
    f124:	6840      	ldr	r0, [r0, #4]
    f126:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f12a:	2916      	cmp	r1, #22
    f12c:	d004      	beq.n	f138 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f12e:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f132:	2031      	movs	r0, #49	; 0x31
    f134:	f7f1 fc2a 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f138:	211a      	movs	r1, #26
    f13a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f13e:	bd10      	pop	{r4, pc}
    f140:	f7ff b89b 	b.w	e27a <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f144:	b510      	push	{r4, lr}
    f146:	6840      	ldr	r0, [r0, #4]
    f148:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f14c:	2916      	cmp	r1, #22
    f14e:	d004      	beq.n	f15a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f150:	f240 718a 	movw	r1, #1930	; 0x78a
    f154:	2031      	movs	r0, #49	; 0x31
    f156:	f7f1 fc19 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f15a:	2118      	movs	r1, #24
    f15c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f160:	bd10      	pop	{r4, pc}
    f162:	f7ff b921 	b.w	e3a8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f166:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f16a:	f001 0107 	and.w	r1, r1, #7
    f16e:	7800      	ldrb	r0, [r0, #0]
    f170:	40c8      	lsrs	r0, r1
    f172:	f000 0001 	and.w	r0, r0, #1
    f176:	4770      	bx	lr

0000f178 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f178:	b510      	push	{r4, lr}
    f17a:	2801      	cmp	r0, #1
    f17c:	d006      	beq.n	f18c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f17e:	2802      	cmp	r0, #2
    f180:	d006      	beq.n	f190 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f182:	f240 2175 	movw	r1, #629	; 0x275
    f186:	2078      	movs	r0, #120	; 0x78
    f188:	f7f1 fc00 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f18c:	2000      	movs	r0, #0
    f18e:	bd10      	pop	{r4, pc}
    f190:	2001      	movs	r0, #1
    f192:	bd10      	pop	{r4, pc}

0000f194 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f194:	207f      	movs	r0, #127	; 0x7f
    f196:	f000 b88c 	b.w	f2b2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f19a <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f19a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f19e:	f000 b888 	b.w	f2b2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f1a2 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f1a2:	b510      	push	{r4, lr}
    f1a4:	4604      	mov	r4, r0
    f1a6:	f7f8 f83b 	bl	7220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f1aa:	1e64      	subs	r4, r4, #1
    f1ac:	b2e2      	uxtb	r2, r4
    f1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1b2:	f000 b85b 	b.w	f26c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f1b6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f1b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f1ba:	4607      	mov	r7, r0
    f1bc:	461e      	mov	r6, r3
    f1be:	4690      	mov	r8, r2
    f1c0:	460c      	mov	r4, r1
    f1c2:	4608      	mov	r0, r1
    f1c4:	f7ff ffed 	bl	f1a2 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f1c8:	b1e8      	cbz	r0, f206 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f1ca:	687d      	ldr	r5, [r7, #4]
    f1cc:	2121      	movs	r1, #33	; 0x21
    f1ce:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f1d2:	3580      	adds	r5, #128	; 0x80
    f1d4:	f7ff ffc7 	bl	f166 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f1d8:	b1b8      	cbz	r0, f20a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f1da:	1e64      	subs	r4, r4, #1
    f1dc:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f1de:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f1e0:	b2e2      	uxtb	r2, r4
    f1e2:	f000 f843 	bl	f26c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f1e6:	b180      	cbz	r0, f20a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f1e8:	6878      	ldr	r0, [r7, #4]
    f1ea:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f1ee:	f88d 1000 	strb.w	r1, [sp]
    f1f2:	9900      	ldr	r1, [sp, #0]
    f1f4:	9100      	str	r1, [sp, #0]
    f1f6:	f89d 1000 	ldrb.w	r1, [sp]
    f1fa:	f200 1047 	addw	r0, r0, #327	; 0x147
    f1fe:	b131      	cbz	r1, f20e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f200:	203a      	movs	r0, #58	; 0x3a
    f202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f206:	2011      	movs	r0, #17
    f208:	e7fb      	b.n	f202 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f20a:	201a      	movs	r0, #26
    f20c:	e7f9      	b.n	f202 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f20e:	1c81      	adds	r1, r0, #2
    f210:	700e      	strb	r6, [r1, #0]
    f212:	2101      	movs	r1, #1
    f214:	40a1      	lsls	r1, r4
    f216:	7001      	strb	r1, [r0, #0]
    f218:	f880 8001 	strb.w	r8, [r0, #1]
    f21c:	2000      	movs	r0, #0
    f21e:	e7f0      	b.n	f202 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f220 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f224:	460d      	mov	r5, r1
    f226:	4606      	mov	r6, r0
    f228:	f7ff ffb4 	bl	f194 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f22c:	4607      	mov	r7, r0
    f22e:	f7ff ffb4 	bl	f19a <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f232:	2400      	movs	r4, #0
    f234:	4285      	cmp	r5, r0
    f236:	d100      	bne.n	f23a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f238:	2401      	movs	r4, #1
    f23a:	42bd      	cmp	r5, r7
    f23c:	d101      	bne.n	f242 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f23e:	f044 0402 	orr.w	r4, r4, #2
    f242:	f000 f826 	bl	f292 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f246:	2200      	movs	r2, #0
    f248:	4601      	mov	r1, r0
    f24a:	2301      	movs	r3, #1
    f24c:	fa03 f002 	lsl.w	r0, r3, r2
    f250:	4208      	tst	r0, r1
    f252:	d005      	beq.n	f260 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f254:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f258:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f25c:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f260:	1c52      	adds	r2, r2, #1
    f262:	b2d2      	uxtb	r2, r2
    f264:	2a02      	cmp	r2, #2
    f266:	d3f1      	bcc.n	f24c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f26c:	b510      	push	{r4, lr}
    f26e:	4614      	mov	r4, r2
    f270:	4602      	mov	r2, r0
    f272:	2000      	movs	r0, #0
    f274:	4603      	mov	r3, r0
    f276:	2c02      	cmp	r4, #2
    f278:	d205      	bcs.n	f286 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f27a:	4610      	mov	r0, r2
    f27c:	f000 f810 	bl	f2a0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f280:	2101      	movs	r1, #1
    f282:	40a1      	lsls	r1, r4
    f284:	b2cb      	uxtb	r3, r1
    f286:	4203      	tst	r3, r0
    f288:	d001      	beq.n	f28e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f28a:	2001      	movs	r0, #1
    f28c:	bd10      	pop	{r4, pc}
    f28e:	2000      	movs	r0, #0
    f290:	bd10      	pop	{r4, pc}
    f292:	b510      	push	{r4, lr}
    f294:	f7f7 ffc4 	bl	7220 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f29c:	f000 b800 	b.w	f2a0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f2a0:	0a00      	lsrs	r0, r0, #8
    f2a2:	2201      	movs	r2, #1
    f2a4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f2a8:	07c0      	lsls	r0, r0, #31
    f2aa:	d000      	beq.n	f2ae <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f2ac:	2203      	movs	r2, #3
    f2ae:	4610      	mov	r0, r2
    f2b0:	4770      	bx	lr
    f2b2:	b508      	push	{r3, lr}
    f2b4:	2301      	movs	r3, #1
    f2b6:	f640 1288 	movw	r2, #2440	; 0x988
    f2ba:	4669      	mov	r1, sp
    f2bc:	f7fc ffc8 	bl	c250 <mpsl_fem_tx_power_split>
    f2c0:	bd08      	pop	{r3, pc}
    f2c2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f2c6:	f001 0107 	and.w	r1, r1, #7
    f2ca:	7800      	ldrb	r0, [r0, #0]
    f2cc:	40c8      	lsrs	r0, r1
    f2ce:	f000 0001 	and.w	r0, r0, #1
    f2d2:	4770      	bx	lr
    f2d4:	b118      	cbz	r0, f2de <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f2d6:	2802      	cmp	r0, #2
    f2d8:	d001      	beq.n	f2de <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f2da:	2001      	movs	r0, #1
    f2dc:	4770      	bx	lr
    f2de:	2000      	movs	r0, #0
    f2e0:	4770      	bx	lr

0000f2e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f2e2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f2e4:	7881      	ldrb	r1, [r0, #2]
    f2e6:	2500      	movs	r5, #0
    f2e8:	4604      	mov	r4, r0
    f2ea:	291a      	cmp	r1, #26
    f2ec:	d024      	beq.n	f338 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f2ee:	dc0e      	bgt.n	f30e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f2f0:	2916      	cmp	r1, #22
    f2f2:	d22b      	bcs.n	f34c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f2f4:	e8df f001 	tbb	[pc, r1]
    f2f8:	2a2a2a2a 	.word	0x2a2a2a2a
    f2fc:	2a2a202a 	.word	0x2a2a202a
    f300:	2a2a2a2a 	.word	0x2a2a2a2a
    f304:	2a2a2a2a 	.word	0x2a2a2a2a
    f308:	202a2a2a 	.word	0x202a2a2a
    f30c:	2020      	.short	0x2020
    f30e:	292a      	cmp	r1, #42	; 0x2a
    f310:	d01c      	beq.n	f34c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f312:	dc0b      	bgt.n	f32c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f314:	f1a1 011e 	sub.w	r1, r1, #30
    f318:	290c      	cmp	r1, #12
    f31a:	d217      	bcs.n	f34c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f31c:	e8df f001 	tbb	[pc, r1]
    f320:	16161616 	.word	0x16161616
    f324:	16161616 	.word	0x16161616
    f328:	0c161616 	.word	0x0c161616
    f32c:	393a      	subs	r1, #58	; 0x3a
    f32e:	2902      	cmp	r1, #2
    f330:	d20c      	bcs.n	f34c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f332:	e8df f001 	tbb	[pc, r1]
    f336:	010b      	.short	0x010b
    f338:	8820      	ldrh	r0, [r4, #0]
    f33a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f33e:	d205      	bcs.n	f34c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f340:	4669      	mov	r1, sp
    f342:	f7fe f990 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f346:	b118      	cbz	r0, f350 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f348:	2002      	movs	r0, #2
    f34a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f34c:	2012      	movs	r0, #18
    f34e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f350:	9901      	ldr	r1, [sp, #4]
    f352:	4668      	mov	r0, sp
    f354:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f358:	f88d 2008 	strb.w	r2, [sp, #8]
    f35c:	9a02      	ldr	r2, [sp, #8]
    f35e:	9202      	str	r2, [sp, #8]
    f360:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f364:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f368:	b10a      	cbz	r2, f36e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f36a:	200c      	movs	r0, #12
    f36c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f36e:	78a2      	ldrb	r2, [r4, #2]
    f370:	704a      	strb	r2, [r1, #1]
    f372:	22ff      	movs	r2, #255	; 0xff
    f374:	700a      	strb	r2, [r1, #0]
    f376:	f7fe fd09 	bl	dd8c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f37a:	4628      	mov	r0, r5
    f37c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f37e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f37e:	b510      	push	{r4, lr}
    f380:	4604      	mov	r4, r0
    f382:	f7f7 fe77 	bl	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    f386:	b108      	cbz	r0, f38c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f388:	200c      	movs	r0, #12
    f38a:	bd10      	pop	{r4, pc}
    f38c:	7820      	ldrb	r0, [r4, #0]
    f38e:	b118      	cbz	r0, f398 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f390:	2801      	cmp	r0, #1
    f392:	d001      	beq.n	f398 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f394:	2012      	movs	r0, #18
    f396:	bd10      	pop	{r4, pc}
    f398:	f7ff ff9c 	bl	f2d4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f39c:	1c61      	adds	r1, r4, #1
    f39e:	f7f3 fef3 	bl	3188 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    f3a2:	b108      	cbz	r0, f3a8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f3a4:	2000      	movs	r0, #0
    f3a6:	bd10      	pop	{r4, pc}
    f3a8:	2007      	movs	r0, #7
    f3aa:	bd10      	pop	{r4, pc}

0000f3ac <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f3ac:	b510      	push	{r4, lr}
    f3ae:	f7f7 fe61 	bl	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    f3b2:	b108      	cbz	r0, f3b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f3b4:	200c      	movs	r0, #12
    f3b6:	bd10      	pop	{r4, pc}
    f3b8:	f7f3 ff44 	bl	3244 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    f3bc:	2000      	movs	r0, #0
    f3be:	f7f3 f819 	bl	23f4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f3c2:	2000      	movs	r0, #0
    f3c4:	bd10      	pop	{r4, pc}

0000f3c6 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f3c6:	b510      	push	{r4, lr}
    f3c8:	460b      	mov	r3, r1
    f3ca:	2201      	movs	r2, #1
    f3cc:	f100 0110 	add.w	r1, r0, #16
    f3d0:	f7fe f92b 	bl	d62a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f3d4:	2000      	movs	r0, #0
    f3d6:	bd10      	pop	{r4, pc}

0000f3d8 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f3d8:	b510      	push	{r4, lr}
    f3da:	8800      	ldrh	r0, [r0, #0]
    f3dc:	2100      	movs	r1, #0
    f3de:	f7f1 fe03 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f3e2:	b118      	cbz	r0, f3ec <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f3e4:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    f3e8:	b111      	cbz	r1, f3f0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f3ea:	e007      	b.n	f3fc <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f3ec:	2002      	movs	r0, #2
    f3ee:	bd10      	pop	{r4, pc}
    f3f0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f3f4:	2915      	cmp	r1, #21
    f3f6:	d003      	beq.n	f400 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f3f8:	2916      	cmp	r1, #22
    f3fa:	d001      	beq.n	f400 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f3fc:	200c      	movs	r0, #12
    f3fe:	bd10      	pop	{r4, pc}
    f400:	2102      	movs	r1, #2
    f402:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    f406:	2000      	movs	r0, #0
    f408:	bd10      	pop	{r4, pc}

0000f40a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f40c:	4605      	mov	r5, r0
    f40e:	8800      	ldrh	r0, [r0, #0]
    f410:	2100      	movs	r1, #0
    f412:	f7f1 fde9 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f416:	0004      	movs	r4, r0
    f418:	d003      	beq.n	f422 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f41a:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    f41e:	b110      	cbz	r0, f426 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f420:	e011      	b.n	f446 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f422:	2002      	movs	r0, #2
    f424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f426:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    f42a:	2815      	cmp	r0, #21
    f42c:	d001      	beq.n	f432 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f42e:	2816      	cmp	r0, #22
    f430:	d109      	bne.n	f446 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f432:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    f436:	f88d 0000 	strb.w	r0, [sp]
    f43a:	9800      	ldr	r0, [sp, #0]
    f43c:	9000      	str	r0, [sp, #0]
    f43e:	f89d 0000 	ldrb.w	r0, [sp]
    f442:	2601      	movs	r6, #1
    f444:	b108      	cbz	r0, f44a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    f446:	200c      	movs	r0, #12
    f448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f44a:	2210      	movs	r2, #16
    f44c:	1ca9      	adds	r1, r5, #2
    f44e:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    f452:	f001 f852 	bl	104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f456:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    f45a:	2000      	movs	r0, #0
    f45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f45e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f45e:	b510      	push	{r4, lr}
    f460:	2108      	movs	r1, #8
    f462:	f7f1 fb43 	bl	aec <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f466:	2000      	movs	r0, #0
    f468:	bd10      	pop	{r4, pc}

0000f46a <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f46a:	b510      	push	{r4, lr}
    f46c:	4604      	mov	r4, r0
    f46e:	f7f7 fcdf 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f472:	f7ff f8cf 	bl	e614 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f476:	f7f3 f8bf 	bl	25f8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f47a:	7020      	strb	r0, [r4, #0]
    f47c:	2000      	movs	r0, #0
    f47e:	bd10      	pop	{r4, pc}

0000f480 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f480:	21fb      	movs	r1, #251	; 0xfb
    f482:	8001      	strh	r1, [r0, #0]
    f484:	f640 0248 	movw	r2, #2120	; 0x848
    f488:	8042      	strh	r2, [r0, #2]
    f48a:	8081      	strh	r1, [r0, #4]
    f48c:	80c2      	strh	r2, [r0, #6]
    f48e:	2000      	movs	r0, #0
    f490:	4770      	bx	lr

0000f492 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f492:	b51c      	push	{r2, r3, r4, lr}
    f494:	8800      	ldrh	r0, [r0, #0]
    f496:	4669      	mov	r1, sp
    f498:	f7fe f8e5 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f49c:	2800      	cmp	r0, #0
    f49e:	d10d      	bne.n	f4bc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f4a0:	f89d 0000 	ldrb.w	r0, [sp]
    f4a4:	9c01      	ldr	r4, [sp, #4]
    f4a6:	2801      	cmp	r0, #1
    f4a8:	f504 7498 	add.w	r4, r4, #304	; 0x130
    f4ac:	d103      	bne.n	f4b6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    f4ae:	9801      	ldr	r0, [sp, #4]
    f4b0:	f000 fce2 	bl	fe78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    f4b4:	b118      	cbz	r0, f4be <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    f4b6:	7ce0      	ldrb	r0, [r4, #19]
    f4b8:	b118      	cbz	r0, f4c2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    f4ba:	203a      	movs	r0, #58	; 0x3a
    f4bc:	bd1c      	pop	{r2, r3, r4, pc}
    f4be:	2002      	movs	r0, #2
    f4c0:	bd1c      	pop	{r2, r3, r4, pc}
    f4c2:	2001      	movs	r0, #1
    f4c4:	74e0      	strb	r0, [r4, #19]
    f4c6:	2000      	movs	r0, #0
    f4c8:	bd1c      	pop	{r2, r3, r4, pc}

0000f4ca <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f4ca:	b510      	push	{r4, lr}
    f4cc:	4604      	mov	r4, r0
    f4ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f4d2:	f000 fd0d 	bl	fef0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    f4d6:	f7f3 f88f 	bl	25f8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f4da:	7020      	strb	r0, [r4, #0]
    f4dc:	f000 fcc9 	bl	fe72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f4e0:	f7f3 f88a 	bl	25f8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f4e4:	7060      	strb	r0, [r4, #1]
    f4e6:	2000      	movs	r0, #0
    f4e8:	bd10      	pop	{r4, pc}

0000f4ea <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f4ea:	b510      	push	{r4, lr}
    f4ec:	4604      	mov	r4, r0
    f4ee:	f7f3 feaf 	bl	3250 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    f4f2:	7020      	strb	r0, [r4, #0]
    f4f4:	2000      	movs	r0, #0
    f4f6:	bd10      	pop	{r4, pc}

0000f4f8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f4f8:	b510      	push	{r4, lr}
    f4fa:	4604      	mov	r4, r0
    f4fc:	f7f7 fdba 	bl	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    f500:	b108      	cbz	r0, f506 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f502:	200c      	movs	r0, #12
    f504:	bd10      	pop	{r4, pc}
    f506:	7820      	ldrb	r0, [r4, #0]
    f508:	b108      	cbz	r0, f50e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f50a:	2801      	cmp	r0, #1
    f50c:	d107      	bne.n	f51e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f50e:	f7ff fee1 	bl	f2d4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f512:	1c61      	adds	r1, r4, #1
    f514:	f7f3 fe76 	bl	3204 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    f518:	b108      	cbz	r0, f51e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f51a:	2000      	movs	r0, #0
    f51c:	bd10      	pop	{r4, pc}
    f51e:	2012      	movs	r0, #18
    f520:	bd10      	pop	{r4, pc}

0000f522 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f522:	b51c      	push	{r2, r3, r4, lr}
    f524:	4604      	mov	r4, r0
    f526:	f7f7 fc83 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f52a:	2000      	movs	r0, #0
    f52c:	f88d 0002 	strb.w	r0, [sp, #2]
    f530:	2103      	movs	r1, #3
    f532:	f88d 1001 	strb.w	r1, [sp, #1]
    f536:	f814 1b01 	ldrb.w	r1, [r4], #1
    f53a:	f88d 1003 	strb.w	r1, [sp, #3]
    f53e:	f88d 0000 	strb.w	r0, [sp]
    f542:	4668      	mov	r0, sp
    f544:	9401      	str	r4, [sp, #4]
    f546:	f000 f9a2 	bl	f88e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f54a:	bd1c      	pop	{r2, r3, r4, pc}

0000f54c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f54c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f54e:	4605      	mov	r5, r0
    f550:	f7f7 fc6e 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f554:	4606      	mov	r6, r0
    f556:	7828      	ldrb	r0, [r5, #0]
    f558:	2400      	movs	r4, #0
    f55a:	b160      	cbz	r0, f576 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f55c:	f88d 4000 	strb.w	r4, [sp]
    f560:	2001      	movs	r0, #1
    f562:	f10d 0101 	add.w	r1, sp, #1
    f566:	f7f2 f975 	bl	1854 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f56a:	b120      	cbz	r0, f576 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f56c:	4668      	mov	r0, sp
    f56e:	f000 f897 	bl	f6a0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f572:	2800      	cmp	r0, #0
    f574:	d112      	bne.n	f59c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f576:	f88d 400c 	strb.w	r4, [sp, #12]
    f57a:	4630      	mov	r0, r6
    f57c:	f7ff f840 	bl	e600 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f580:	b118      	cbz	r0, f58a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f582:	2080      	movs	r0, #128	; 0x80
    f584:	f8ad 000d 	strh.w	r0, [sp, #13]
    f588:	e001      	b.n	f58e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f58a:	f8ad 400d 	strh.w	r4, [sp, #13]
    f58e:	f88d 400f 	strb.w	r4, [sp, #15]
    f592:	7828      	ldrb	r0, [r5, #0]
    f594:	2801      	cmp	r0, #1
    f596:	d003      	beq.n	f5a0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f598:	b138      	cbz	r0, f5aa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f59a:	2012      	movs	r0, #18
    f59c:	b004      	add	sp, #16
    f59e:	bd70      	pop	{r4, r5, r6, pc}
    f5a0:	a903      	add	r1, sp, #12
    f5a2:	4630      	mov	r0, r6
    f5a4:	f7f7 fc60 	bl	6e68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f5a8:	e7f8      	b.n	f59c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f5aa:	4630      	mov	r0, r6
    f5ac:	f000 fc7a 	bl	fea4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f5b0:	e7f4      	b.n	f59c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f5b2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f5b2:	b530      	push	{r4, r5, lr}
    f5b4:	b08b      	sub	sp, #44	; 0x2c
    f5b6:	4604      	mov	r4, r0
    f5b8:	f7f7 fc3a 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f5bc:	4602      	mov	r2, r0
    f5be:	7920      	ldrb	r0, [r4, #4]
    f5c0:	2804      	cmp	r0, #4
    f5c2:	d803      	bhi.n	f5cc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f5c4:	8860      	ldrh	r0, [r4, #2]
    f5c6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f5ca:	d902      	bls.n	f5d2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f5cc:	2012      	movs	r0, #18
    f5ce:	b00b      	add	sp, #44	; 0x2c
    f5d0:	bd30      	pop	{r4, r5, pc}
    f5d2:	2500      	movs	r5, #0
    f5d4:	f88d 5004 	strb.w	r5, [sp, #4]
    f5d8:	7921      	ldrb	r1, [r4, #4]
    f5da:	9500      	str	r5, [sp, #0]
    f5dc:	f89d 0000 	ldrb.w	r0, [sp]
    f5e0:	2905      	cmp	r1, #5
    f5e2:	f040 0010 	orr.w	r0, r0, #16
    f5e6:	f88d 0000 	strb.w	r0, [sp]
    f5ea:	d254      	bcs.n	f696 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f5ec:	e8df f001 	tbb	[pc, r1]
    f5f0:	11050803 	.word	0x11050803
    f5f4:	000b      	.short	0x000b
    f5f6:	f040 0001 	orr.w	r0, r0, #1
    f5fa:	f040 0002 	orr.w	r0, r0, #2
    f5fe:	e006      	b.n	f60e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f600:	f040 0009 	orr.w	r0, r0, #9
    f604:	e001      	b.n	f60a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f606:	f040 0001 	orr.w	r0, r0, #1
    f60a:	f040 0004 	orr.w	r0, r0, #4
    f60e:	f88d 0000 	strb.w	r0, [sp]
    f612:	f8bd 0000 	ldrh.w	r0, [sp]
    f616:	9000      	str	r0, [sp, #0]
    f618:	f8bd 0000 	ldrh.w	r0, [sp]
    f61c:	f8ad 0005 	strh.w	r0, [sp, #5]
    f620:	8821      	ldrh	r1, [r4, #0]
    f622:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f626:	f361 201f 	bfi	r0, r1, #8, #24
    f62a:	f8cd 0006 	str.w	r0, [sp, #6]
    f62e:	8861      	ldrh	r1, [r4, #2]
    f630:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f634:	f361 201f 	bfi	r0, r1, #8, #24
    f638:	f8cd 0009 	str.w	r0, [sp, #9]
    f63c:	7b60      	ldrb	r0, [r4, #13]
    f63e:	f88d 000d 	strb.w	r0, [sp, #13]
    f642:	7960      	ldrb	r0, [r4, #5]
    f644:	f88d 000e 	strb.w	r0, [sp, #14]
    f648:	79a0      	ldrb	r0, [r4, #6]
    f64a:	f88d 000f 	strb.w	r0, [sp, #15]
    f64e:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f652:	9004      	str	r0, [sp, #16]
    f654:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f658:	f8ad 0014 	strh.w	r0, [sp, #20]
    f65c:	7ba0      	ldrb	r0, [r4, #14]
    f65e:	f88d 0016 	strb.w	r0, [sp, #22]
    f662:	207f      	movs	r0, #127	; 0x7f
    f664:	f88d 0017 	strb.w	r0, [sp, #23]
    f668:	2001      	movs	r0, #1
    f66a:	f88d 0018 	strb.w	r0, [sp, #24]
    f66e:	f88d 5019 	strb.w	r5, [sp, #25]
    f672:	f88d 001a 	strb.w	r0, [sp, #26]
    f676:	f88d 501b 	strb.w	r5, [sp, #27]
    f67a:	4610      	mov	r0, r2
    f67c:	f7fe ffe0 	bl	e640 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f680:	f88d 001c 	strb.w	r0, [sp, #28]
    f684:	f88d 501d 	strb.w	r5, [sp, #29]
    f688:	f88d 501e 	strb.w	r5, [sp, #30]
    f68c:	a909      	add	r1, sp, #36	; 0x24
    f68e:	a801      	add	r0, sp, #4
    f690:	f7f7 fa04 	bl	6a9c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f694:	e79b      	b.n	f5ce <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f696:	f241 31a9 	movw	r1, #5033	; 0x13a9
    f69a:	2039      	movs	r0, #57	; 0x39
    f69c:	f7f1 f976 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f6a0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f6a0:	b570      	push	{r4, r5, r6, lr}
    f6a2:	4604      	mov	r4, r0
    f6a4:	7800      	ldrb	r0, [r0, #0]
    f6a6:	2101      	movs	r1, #1
    f6a8:	f7f1 fc9e 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f6ac:	0005      	movs	r5, r0
    f6ae:	d007      	beq.n	f6c0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f6b0:	f7ff f970 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f6b4:	b160      	cbz	r0, f6d0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f6b6:	4628      	mov	r0, r5
    f6b8:	f7fe ffa8 	bl	e60c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f6bc:	b110      	cbz	r0, f6c4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f6be:	e005      	b.n	f6cc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f6c0:	2042      	movs	r0, #66	; 0x42
    f6c2:	bd70      	pop	{r4, r5, r6, pc}
    f6c4:	4628      	mov	r0, r5
    f6c6:	f7fe ff97 	bl	e5f8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f6ca:	b108      	cbz	r0, f6d0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f6cc:	200c      	movs	r0, #12
    f6ce:	bd70      	pop	{r4, r5, r6, pc}
    f6d0:	1c61      	adds	r1, r4, #1
    f6d2:	4628      	mov	r0, r5
    f6d4:	f7fe ffac 	bl	e630 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f6d8:	2000      	movs	r0, #0
    f6da:	bd70      	pop	{r4, r5, r6, pc}

0000f6dc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f6dc:	b50e      	push	{r1, r2, r3, lr}
    f6de:	8882      	ldrh	r2, [r0, #4]
    f6e0:	f244 2390 	movw	r3, #17040	; 0x4290
    f6e4:	429a      	cmp	r2, r3
    f6e6:	d901      	bls.n	f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f6e8:	2012      	movs	r0, #18
    f6ea:	bd0e      	pop	{r1, r2, r3, pc}
    f6ec:	f640 0348 	movw	r3, #2120	; 0x848
    f6f0:	429a      	cmp	r2, r3
    f6f2:	d300      	bcc.n	f6f6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f6f4:	461a      	mov	r2, r3
    f6f6:	8803      	ldrh	r3, [r0, #0]
    f6f8:	f8ad 3000 	strh.w	r3, [sp]
    f6fc:	8843      	ldrh	r3, [r0, #2]
    f6fe:	f8ad 3002 	strh.w	r3, [sp, #2]
    f702:	f8ad 2004 	strh.w	r2, [sp, #4]
    f706:	8843      	ldrh	r3, [r0, #2]
    f708:	f8ad 3006 	strh.w	r3, [sp, #6]
    f70c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f710:	8800      	ldrh	r0, [r0, #0]
    f712:	8008      	strh	r0, [r1, #0]
    f714:	4668      	mov	r0, sp
    f716:	f7f7 fc29 	bl	6f6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    f71a:	bd0e      	pop	{r1, r2, r3, pc}

0000f71c <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    f71c:	b510      	push	{r4, lr}
    f71e:	4604      	mov	r4, r0
    f720:	f7f7 fb86 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f724:	7861      	ldrb	r1, [r4, #1]
    f726:	f3c1 0240 	ubfx	r2, r1, #1, #1
    f72a:	f001 0101 	and.w	r1, r1, #1
    f72e:	f7fe ff7b 	bl	e628 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    f732:	2000      	movs	r0, #0
    f734:	bd10      	pop	{r4, pc}

0000f736 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f736:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f738:	4604      	mov	r4, r0
    f73a:	f10d 0007 	add.w	r0, sp, #7
    f73e:	9000      	str	r0, [sp, #0]
    f740:	7922      	ldrb	r2, [r4, #4]
    f742:	78e1      	ldrb	r1, [r4, #3]
    f744:	78a0      	ldrb	r0, [r4, #2]
    f746:	f10d 0306 	add.w	r3, sp, #6
    f74a:	f000 fbd9 	bl	ff00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    f74e:	2800      	cmp	r0, #0
    f750:	d109      	bne.n	f766 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f752:	8820      	ldrh	r0, [r4, #0]
    f754:	f8ad 0004 	strh.w	r0, [sp, #4]
    f758:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f75c:	f8ad 0008 	strh.w	r0, [sp, #8]
    f760:	a801      	add	r0, sp, #4
    f762:	f000 f94f 	bl	fa04 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f766:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f768 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f768:	b510      	push	{r4, lr}
    f76a:	4604      	mov	r4, r0
    f76c:	2001      	movs	r0, #1
    f76e:	f000 fa5e 	bl	fc2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f772:	b128      	cbz	r0, f780 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f774:	4621      	mov	r1, r4
    f776:	2001      	movs	r0, #1
    f778:	f7f2 f884 	bl	1884 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f77c:	2000      	movs	r0, #0
    f77e:	bd10      	pop	{r4, pc}
    f780:	200c      	movs	r0, #12
    f782:	bd10      	pop	{r4, pc}

0000f784 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f784:	b51c      	push	{r2, r3, r4, lr}
    f786:	4604      	mov	r4, r0
    f788:	f7f7 fb52 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f78c:	2000      	movs	r0, #0
    f78e:	f88d 0000 	strb.w	r0, [sp]
    f792:	f88d 0002 	strb.w	r0, [sp, #2]
    f796:	2003      	movs	r0, #3
    f798:	f88d 0001 	strb.w	r0, [sp, #1]
    f79c:	f814 0b01 	ldrb.w	r0, [r4], #1
    f7a0:	f88d 0003 	strb.w	r0, [sp, #3]
    f7a4:	4668      	mov	r0, sp
    f7a6:	9401      	str	r4, [sp, #4]
    f7a8:	f000 f8da 	bl	f960 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f7ac:	bd1c      	pop	{r2, r3, r4, pc}

0000f7ae <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f7ae:	b51c      	push	{r2, r3, r4, lr}
    f7b0:	8801      	ldrh	r1, [r0, #0]
    f7b2:	f8ad 1000 	strh.w	r1, [sp]
    f7b6:	8841      	ldrh	r1, [r0, #2]
    f7b8:	f8ad 1002 	strh.w	r1, [sp, #2]
    f7bc:	8801      	ldrh	r1, [r0, #0]
    f7be:	f8ad 1004 	strh.w	r1, [sp, #4]
    f7c2:	8840      	ldrh	r0, [r0, #2]
    f7c4:	f8ad 0006 	strh.w	r0, [sp, #6]
    f7c8:	4668      	mov	r0, sp
    f7ca:	f7f7 fc6f 	bl	70ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    f7ce:	bd1c      	pop	{r2, r3, r4, pc}

0000f7d0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f7d0:	b510      	push	{r4, lr}
    f7d2:	f7f2 f87b 	bl	18cc <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    f7d6:	2000      	movs	r0, #0
    f7d8:	bd10      	pop	{r4, pc}

0000f7da <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    f7da:	b510      	push	{r4, lr}
    f7dc:	460c      	mov	r4, r1
    f7de:	2100      	movs	r1, #0
    f7e0:	f7f1 fc02 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f7e4:	b118      	cbz	r0, f7ee <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    f7e6:	2c02      	cmp	r4, #2
    f7e8:	d903      	bls.n	f7f2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    f7ea:	2012      	movs	r0, #18
    f7ec:	bd10      	pop	{r4, pc}
    f7ee:	2002      	movs	r0, #2
    f7f0:	bd10      	pop	{r4, pc}
    f7f2:	f014 0101 	ands.w	r1, r4, #1
    f7f6:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    f7fa:	f3c4 0240 	ubfx	r2, r4, #1, #1
    f7fe:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    f802:	d004      	beq.n	f80e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f804:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    f808:	b109      	cbz	r1, f80e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    f80a:	f7ff f8c6 	bl	e99a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    f80e:	2000      	movs	r0, #0
    f810:	bd10      	pop	{r4, pc}

0000f812 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f812:	b51c      	push	{r2, r3, r4, lr}
    f814:	460c      	mov	r4, r1
    f816:	4669      	mov	r1, sp
    f818:	f7fd ff25 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f81c:	2800      	cmp	r0, #0
    f81e:	d105      	bne.n	f82c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f820:	2100      	movs	r1, #0
    f822:	4622      	mov	r2, r4
    f824:	9801      	ldr	r0, [sp, #4]
    f826:	f000 face 	bl	fdc6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    f82a:	2000      	movs	r0, #0
    f82c:	bd1c      	pop	{r2, r3, r4, pc}

0000f82e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    f82e:	b510      	push	{r4, lr}
    f830:	4604      	mov	r4, r0
    f832:	7800      	ldrb	r0, [r0, #0]
    f834:	28ff      	cmp	r0, #255	; 0xff
    f836:	d009      	beq.n	f84c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    f838:	2101      	movs	r1, #1
    f83a:	f7f1 fbd5 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f83e:	b118      	cbz	r0, f848 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    f840:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    f844:	8441      	strh	r1, [r0, #34]	; 0x22
    f846:	e005      	b.n	f854 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    f848:	2042      	movs	r0, #66	; 0x42
    f84a:	bd10      	pop	{r4, pc}
    f84c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f850:	f7f4 fd30 	bl	42b4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    f854:	2000      	movs	r0, #0
    f856:	bd10      	pop	{r4, pc}

0000f858 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f858:	b510      	push	{r4, lr}
    f85a:	4604      	mov	r4, r0
    f85c:	f7f7 fc66 	bl	712c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    f860:	b118      	cbz	r0, f86a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    f862:	2000      	movs	r0, #0
    f864:	f000 f9e3 	bl	fc2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    f868:	b128      	cbz	r0, f876 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    f86a:	4621      	mov	r1, r4
    f86c:	2000      	movs	r0, #0
    f86e:	f7f2 f809 	bl	1884 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f872:	2000      	movs	r0, #0
    f874:	bd10      	pop	{r4, pc}
    f876:	200c      	movs	r0, #12
    f878:	bd10      	pop	{r4, pc}

0000f87a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f87a:	b510      	push	{r4, lr}
    f87c:	7800      	ldrb	r0, [r0, #0]
    f87e:	b100      	cbz	r0, f882 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    f880:	2001      	movs	r0, #1
    f882:	f7f4 fd41 	bl	4308 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f886:	2000      	movs	r0, #0
    f888:	bd10      	pop	{r4, pc}

0000f88a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f88a:	f7f7 bb6f 	b.w	6f6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

0000f88e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f88e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f892:	4606      	mov	r6, r0
    f894:	7845      	ldrb	r5, [r0, #1]
    f896:	7800      	ldrb	r0, [r0, #0]
    f898:	2101      	movs	r1, #1
    f89a:	f7f1 fba5 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f89e:	0004      	movs	r4, r0
    f8a0:	d01e      	beq.n	f8e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f8a2:	f7fe fe7c 	bl	e59e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f8a6:	78f1      	ldrb	r1, [r6, #3]
    f8a8:	4281      	cmp	r1, r0
    f8aa:	d800      	bhi.n	f8ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f8ac:	4608      	mov	r0, r1
    f8ae:	4607      	mov	r7, r0
    f8b0:	2d04      	cmp	r5, #4
    f8b2:	d018      	beq.n	f8e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f8b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8b6:	f7fd fdb6 	bl	d426 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f8ba:	4438      	add	r0, r7
    f8bc:	b281      	uxth	r1, r0
    f8be:	4620      	mov	r0, r4
    f8c0:	2201      	movs	r2, #1
    f8c2:	f000 f9c6 	bl	fc52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f8c6:	2800      	cmp	r0, #0
    f8c8:	d10b      	bne.n	f8e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f8ca:	2d03      	cmp	r5, #3
    f8cc:	d000      	beq.n	f8d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f8ce:	b1df      	cbz	r7, f908 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f8d0:	4620      	mov	r0, r4
    f8d2:	f7fe fe99 	bl	e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f8d6:	7871      	ldrb	r1, [r6, #1]
    f8d8:	2903      	cmp	r1, #3
    f8da:	d010      	beq.n	f8fe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f8dc:	b9a0      	cbnz	r0, f908 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f8de:	e004      	b.n	f8ea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f8e0:	2042      	movs	r0, #66	; 0x42
    f8e2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f8e6:	b97f      	cbnz	r7, f908 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f8e8:	e7f2      	b.n	f8d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f8ea:	2904      	cmp	r1, #4
    f8ec:	d107      	bne.n	f8fe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f8ee:	4620      	mov	r0, r4
    f8f0:	f7ff f850 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f8f4:	b140      	cbz	r0, f908 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f8f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f8f8:	f7fd fd5c 	bl	d3b4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f8fc:	b120      	cbz	r0, f908 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f8fe:	2d01      	cmp	r5, #1
    f900:	d004      	beq.n	f90c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f902:	2d03      	cmp	r5, #3
    f904:	d002      	beq.n	f90c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f906:	e00e      	b.n	f926 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f908:	2012      	movs	r0, #18
    f90a:	e7ea      	b.n	f8e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f90c:	4620      	mov	r0, r4
    f90e:	f7fe fe7b 	bl	e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f912:	b108      	cbz	r0, f918 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f914:	2200      	movs	r2, #0
    f916:	e002      	b.n	f91e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f918:	2d01      	cmp	r5, #1
    f91a:	d013      	beq.n	f944 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f91c:	2201      	movs	r2, #1
    f91e:	4668      	mov	r0, sp
    f920:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f922:	f7fd fce3 	bl	d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f926:	2d04      	cmp	r5, #4
    f928:	d018      	beq.n	f95c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f92a:	6872      	ldr	r2, [r6, #4]
    f92c:	463b      	mov	r3, r7
    f92e:	2101      	movs	r1, #1
    f930:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f932:	f7fd fd0f 	bl	d354 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f936:	b138      	cbz	r0, f948 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f938:	7870      	ldrb	r0, [r6, #1]
    f93a:	2802      	cmp	r0, #2
    f93c:	d006      	beq.n	f94c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f93e:	2803      	cmp	r0, #3
    f940:	d004      	beq.n	f94c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f942:	e00b      	b.n	f95c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f944:	2202      	movs	r2, #2
    f946:	e7ea      	b.n	f91e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f948:	2007      	movs	r0, #7
    f94a:	e7ca      	b.n	f8e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f94c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f94e:	f7fd fd6a 	bl	d426 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f952:	4602      	mov	r2, r0
    f954:	2101      	movs	r1, #1
    f956:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f958:	f7fd fd42 	bl	d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f95c:	2000      	movs	r0, #0
    f95e:	e7c0      	b.n	f8e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f960 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f960:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f964:	4607      	mov	r7, r0
    f966:	7845      	ldrb	r5, [r0, #1]
    f968:	78c6      	ldrb	r6, [r0, #3]
    f96a:	7800      	ldrb	r0, [r0, #0]
    f96c:	2101      	movs	r1, #1
    f96e:	f7f1 fb3b 	bl	fe8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f972:	0004      	movs	r4, r0
    f974:	d003      	beq.n	f97e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f976:	f7fe fe49 	bl	e60c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f97a:	b118      	cbz	r0, f984 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f97c:	e003      	b.n	f986 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f97e:	2042      	movs	r0, #66	; 0x42
    f980:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f984:	2600      	movs	r6, #0
    f986:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f988:	f7fd fd51 	bl	d42e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f98c:	4430      	add	r0, r6
    f98e:	b281      	uxth	r1, r0
    f990:	4688      	mov	r8, r1
    f992:	4620      	mov	r0, r4
    f994:	2201      	movs	r2, #1
    f996:	f000 f95c 	bl	fc52 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    f99a:	2800      	cmp	r0, #0
    f99c:	d1f0      	bne.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f99e:	2d04      	cmp	r5, #4
    f9a0:	d008      	beq.n	f9b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f9a2:	2d03      	cmp	r5, #3
    f9a4:	d00a      	beq.n	f9bc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f9a6:	b12e      	cbz	r6, f9b4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f9a8:	4620      	mov	r0, r4
    f9aa:	f7fe fff3 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f9ae:	b118      	cbz	r0, f9b8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f9b0:	200c      	movs	r0, #12
    f9b2:	e7e5      	b.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f9b4:	2012      	movs	r0, #18
    f9b6:	e7e3      	b.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f9b8:	2d01      	cmp	r5, #1
    f9ba:	d10c      	bne.n	f9d6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f9bc:	4620      	mov	r0, r4
    f9be:	f7fe fe23 	bl	e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f9c2:	b108      	cbz	r0, f9c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f9c4:	2204      	movs	r2, #4
    f9c6:	e002      	b.n	f9ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f9c8:	2d01      	cmp	r5, #1
    f9ca:	d010      	beq.n	f9ee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f9cc:	2205      	movs	r2, #5
    f9ce:	4668      	mov	r0, sp
    f9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    f9d2:	f7fd fc8b 	bl	d2ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f9d6:	687a      	ldr	r2, [r7, #4]
    f9d8:	4633      	mov	r3, r6
    f9da:	2100      	movs	r1, #0
    f9dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f9de:	f7fd fcb9 	bl	d354 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f9e2:	b130      	cbz	r0, f9f2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f9e4:	2d02      	cmp	r5, #2
    f9e6:	d006      	beq.n	f9f6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f9e8:	2d03      	cmp	r5, #3
    f9ea:	d004      	beq.n	f9f6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f9ec:	e008      	b.n	fa00 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f9ee:	2206      	movs	r2, #6
    f9f0:	e7ed      	b.n	f9ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f9f2:	2007      	movs	r0, #7
    f9f4:	e7c4      	b.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f9f6:	4642      	mov	r2, r8
    f9f8:	2100      	movs	r1, #0
    f9fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    f9fc:	f7fd fcf0 	bl	d3e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa00:	2000      	movs	r0, #0
    fa02:	e7bd      	b.n	f980 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000fa04 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa04:	b510      	push	{r4, lr}
    fa06:	4604      	mov	r4, r0
    fa08:	8880      	ldrh	r0, [r0, #4]
    fa0a:	b128      	cbz	r0, fa18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa0c:	2801      	cmp	r0, #1
    fa0e:	d003      	beq.n	fa18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa10:	2802      	cmp	r0, #2
    fa12:	d001      	beq.n	fa18 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa14:	2012      	movs	r0, #18
    fa16:	bd10      	pop	{r4, pc}
    fa18:	78e0      	ldrb	r0, [r4, #3]
    fa1a:	f000 f9b1 	bl	fd80 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    fa1e:	b148      	cbz	r0, fa34 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa20:	78a0      	ldrb	r0, [r4, #2]
    fa22:	f000 f9ad 	bl	fd80 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    fa26:	b128      	cbz	r0, fa34 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa28:	4620      	mov	r0, r4
    fa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa2e:	2101      	movs	r1, #1
    fa30:	f000 b862 	b.w	faf8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fa34:	2011      	movs	r0, #17
    fa36:	bd10      	pop	{r4, pc}

0000fa38 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fa38:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa3a:	460c      	mov	r4, r1
    fa3c:	4605      	mov	r5, r0
    fa3e:	8800      	ldrh	r0, [r0, #0]
    fa40:	4669      	mov	r1, sp
    fa42:	f7fd fe10 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa46:	2800      	cmp	r0, #0
    fa48:	d106      	bne.n	fa58 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fa4a:	9801      	ldr	r0, [sp, #4]
    fa4c:	8829      	ldrh	r1, [r5, #0]
    fa4e:	8021      	strh	r1, [r4, #0]
    fa50:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
    fa54:	8060      	strh	r0, [r4, #2]
    fa56:	2000      	movs	r0, #0
    fa58:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fa5a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa5a:	b510      	push	{r4, lr}
    fa5c:	4604      	mov	r4, r0
    fa5e:	4601      	mov	r1, r0
    fa60:	2000      	movs	r0, #0
    fa62:	f7f1 fef7 	bl	1854 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa66:	b910      	cbnz	r0, fa6e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fa68:	2000      	movs	r0, #0
    fa6a:	6020      	str	r0, [r4, #0]
    fa6c:	80a0      	strh	r0, [r4, #4]
    fa6e:	2000      	movs	r0, #0
    fa70:	bd10      	pop	{r4, pc}

0000fa72 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fa72:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa74:	460c      	mov	r4, r1
    fa76:	4605      	mov	r5, r0
    fa78:	8800      	ldrh	r0, [r0, #0]
    fa7a:	4669      	mov	r1, sp
    fa7c:	f7fd fdf3 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa80:	b108      	cbz	r0, fa86 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fa82:	2002      	movs	r0, #2
    fa84:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fa86:	78a8      	ldrb	r0, [r5, #2]
    fa88:	b158      	cbz	r0, faa2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fa8a:	f000 f9f2 	bl	fe72 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fa8e:	70a0      	strb	r0, [r4, #2]
    fa90:	8828      	ldrh	r0, [r5, #0]
    fa92:	8020      	strh	r0, [r4, #0]
    fa94:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fa98:	f7f2 fdae 	bl	25f8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fa9c:	70a0      	strb	r0, [r4, #2]
    fa9e:	2000      	movs	r0, #0
    faa0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    faa2:	9801      	ldr	r0, [sp, #4]
    faa4:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    faa8:	e7f1      	b.n	fa8e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000faaa <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    faaa:	b510      	push	{r4, lr}
    faac:	f7f7 fb44 	bl	7138 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fab0:	2000      	movs	r0, #0
    fab2:	bd10      	pop	{r4, pc}

0000fab4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fab4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fab8:	4604      	mov	r4, r0
    faba:	8840      	ldrh	r0, [r0, #2]
    fabc:	460d      	mov	r5, r1
    fabe:	b1b8      	cbz	r0, faf0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fac0:	8820      	ldrh	r0, [r4, #0]
    fac2:	4669      	mov	r1, sp
    fac4:	f7fd fdcf 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fac8:	2800      	cmp	r0, #0
    faca:	d10f      	bne.n	faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    facc:	8820      	ldrh	r0, [r4, #0]
    face:	8028      	strh	r0, [r5, #0]
    fad0:	9e01      	ldr	r6, [sp, #4]
    fad2:	f106 0510 	add.w	r5, r6, #16
    fad6:	3680      	adds	r6, #128	; 0x80
    fad8:	682f      	ldr	r7, [r5, #0]
    fada:	8862      	ldrh	r2, [r4, #2]
    fadc:	4639      	mov	r1, r7
    fade:	4630      	mov	r0, r6
    fae0:	f7fd fee3 	bl	d8aa <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fae4:	6828      	ldr	r0, [r5, #0]
    fae6:	42b8      	cmp	r0, r7
    fae8:	d1f6      	bne.n	fad8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    faea:	2000      	movs	r0, #0
    faec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    faf0:	2012      	movs	r0, #18
    faf2:	e7fb      	b.n	faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000faf4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    faf4:	f000 b868 	b.w	fbc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000faf8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fafc:	b085      	sub	sp, #20
    fafe:	4688      	mov	r8, r1
    fb00:	4606      	mov	r6, r0
    fb02:	8800      	ldrh	r0, [r0, #0]
    fb04:	a901      	add	r1, sp, #4
    fb06:	f7fd fdae 	bl	d666 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb0a:	2800      	cmp	r0, #0
    fb0c:	d13b      	bne.n	fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fb0e:	9802      	ldr	r0, [sp, #8]
    fb10:	4601      	mov	r1, r0
    fb12:	468a      	mov	sl, r1
    fb14:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
    fb18:	f500 7498 	add.w	r4, r0, #304	; 0x130
    fb1c:	f88d 1000 	strb.w	r1, [sp]
    fb20:	9900      	ldr	r1, [sp, #0]
    fb22:	9100      	str	r1, [sp, #0]
    fb24:	f89d 1000 	ldrb.w	r1, [sp]
    fb28:	f04f 0900 	mov.w	r9, #0
    fb2c:	3080      	adds	r0, #128	; 0x80
    fb2e:	b121      	cbz	r1, fb3a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb30:	f1b8 0f02 	cmp.w	r8, #2
    fb34:	d001      	beq.n	fb3a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb36:	2701      	movs	r7, #1
    fb38:	e000      	b.n	fb3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb3a:	2700      	movs	r7, #0
    fb3c:	7f81      	ldrb	r1, [r0, #30]
    fb3e:	2922      	cmp	r1, #34	; 0x22
    fb40:	d100      	bne.n	fb44 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fb42:	b13f      	cbz	r7, fb54 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fb44:	2500      	movs	r5, #0
    fb46:	306c      	adds	r0, #108	; 0x6c
    fb48:	2108      	movs	r1, #8
    fb4a:	4683      	mov	fp, r0
    fb4c:	f7ff fbb9 	bl	f2c2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fb50:	b110      	cbz	r0, fb58 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
    fb52:	e007      	b.n	fb64 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    fb54:	2501      	movs	r5, #1
    fb56:	e7f6      	b.n	fb46 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
    fb58:	210b      	movs	r1, #11
    fb5a:	4658      	mov	r0, fp
    fb5c:	f7ff fbb1 	bl	f2c2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    fb60:	b900      	cbnz	r0, fb64 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    fb62:	b17d      	cbz	r5, fb84 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
    fb64:	a804      	add	r0, sp, #16
    fb66:	9000      	str	r0, [sp, #0]
    fb68:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb6c:	ab03      	add	r3, sp, #12
    fb6e:	4632      	mov	r2, r6
    fb70:	4651      	mov	r1, sl
    fb72:	f000 f95e 	bl	fe32 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    fb76:	0005      	movs	r5, r0
    fb78:	d105      	bne.n	fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fb7a:	340c      	adds	r4, #12
    fb7c:	20ff      	movs	r0, #255	; 0xff
    fb7e:	7060      	strb	r0, [r4, #1]
    fb80:	b937      	cbnz	r7, fb90 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    fb82:	e003      	b.n	fb8c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    fb84:	201a      	movs	r0, #26
    fb86:	b005      	add	sp, #20
    fb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb8c:	7820      	ldrb	r0, [r4, #0]
    fb8e:	b108      	cbz	r0, fb94 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    fb90:	253a      	movs	r5, #58	; 0x3a
    fb92:	e012      	b.n	fbba <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    fb94:	f884 8000 	strb.w	r8, [r4]
    fb98:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fb9c:	70a0      	strb	r0, [r4, #2]
    fb9e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fba2:	70e1      	strb	r1, [r4, #3]
    fba4:	f88d 0000 	strb.w	r0, [sp]
    fba8:	f88d 1001 	strb.w	r1, [sp, #1]
    fbac:	88b0      	ldrh	r0, [r6, #4]
    fbae:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbb2:	4669      	mov	r1, sp
    fbb4:	4650      	mov	r0, sl
    fbb6:	f7fd fe13 	bl	d7e0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fbba:	f884 9001 	strb.w	r9, [r4, #1]
    fbbe:	4628      	mov	r0, r5
    fbc0:	e7e1      	b.n	fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

0000fbc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fbc2:	2008      	movs	r0, #8
    fbc4:	f7f7 bb20 	b.w	7208 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fbc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fbc8:	b510      	push	{r4, lr}
    fbca:	f7fd fcbb 	bl	d544 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fbce:	f7f2 fbcf 	bl	2370 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fbd2:	f7f7 fb3b 	bl	724c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fbd6:	f7fe f917 	bl	de08 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fbda:	f7fd fed6 	bl	d98a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    fbde:	f7f3 fb31 	bl	3244 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbe6:	f7f7 b903 	b.w	6df0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

0000fbea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
    fbea:	f7f5 b8f7 	b.w	4ddc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    fbee:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fbf2:	4288      	cmp	r0, r1
    fbf4:	d303      	bcc.n	fbfe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
    fbf6:	f640 0148 	movw	r1, #2120	; 0x848
    fbfa:	4288      	cmp	r0, r1
    fbfc:	d300      	bcc.n	fc00 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
    fbfe:	4608      	mov	r0, r1
    fc00:	b280      	uxth	r0, r0
    fc02:	4770      	bx	lr
    fc04:	07c1      	lsls	r1, r0, #31
    fc06:	d001      	beq.n	fc0c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
    fc08:	2001      	movs	r0, #1
    fc0a:	4770      	bx	lr
    fc0c:	0780      	lsls	r0, r0, #30
    fc0e:	d501      	bpl.n	fc14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
    fc10:	2002      	movs	r0, #2
    fc12:	4770      	bx	lr
    fc14:	2000      	movs	r0, #0
    fc16:	4770      	bx	lr
    fc18:	b510      	push	{r4, lr}
    fc1a:	2801      	cmp	r0, #1
    fc1c:	d006      	beq.n	fc2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fc1e:	2802      	cmp	r0, #2
    fc20:	d004      	beq.n	fc2c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    fc22:	f240 21d7 	movw	r1, #727	; 0x2d7
    fc26:	2006      	movs	r0, #6
    fc28:	f7f0 feb0 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc2c:	bd10      	pop	{r4, pc}
    fc2e:	b510      	push	{r4, lr}
    fc30:	f7f7 f8c8 	bl	6dc4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
    fc34:	b158      	cbz	r0, fc4e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fc36:	f7f7 f8fb 	bl	6e30 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc3a:	4604      	mov	r4, r0
    fc3c:	f7fe fce6 	bl	e60c <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fc40:	b918      	cbnz	r0, fc4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
    fc42:	4620      	mov	r0, r4
    fc44:	f7fe fcd8 	bl	e5f8 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fc48:	b108      	cbz	r0, fc4e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    fc4a:	2000      	movs	r0, #0
    fc4c:	bd10      	pop	{r4, pc}
    fc4e:	2001      	movs	r0, #1
    fc50:	bd10      	pop	{r4, pc}
    fc52:	b570      	push	{r4, r5, r6, lr}
    fc54:	460c      	mov	r4, r1
    fc56:	4605      	mov	r5, r0
    fc58:	b112      	cbz	r2, fc60 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
    fc5a:	291f      	cmp	r1, #31
    fc5c:	d80c      	bhi.n	fc78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
    fc5e:	e016      	b.n	fc8e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
    fc60:	f7f1 fc38 	bl	14d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fc64:	42a0      	cmp	r0, r4
    fc66:	d201      	bcs.n	fc6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
    fc68:	2007      	movs	r0, #7
    fc6a:	bd70      	pop	{r4, r5, r6, pc}
    fc6c:	4628      	mov	r0, r5
    fc6e:	f7fe fccb 	bl	e608 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc72:	b118      	cbz	r0, fc7c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fc74:	2c1f      	cmp	r4, #31
    fc76:	d901      	bls.n	fc7c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
    fc78:	2012      	movs	r0, #18
    fc7a:	bd70      	pop	{r4, r5, r6, pc}
    fc7c:	4628      	mov	r0, r5
    fc7e:	f7fe fccc 	bl	e61a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fc82:	b130      	cbz	r0, fc92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
    fc84:	4621      	mov	r1, r4
    fc86:	4628      	mov	r0, r5
    fc88:	f7fe fc95 	bl	e5b6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    fc8c:	b118      	cbz	r0, fc96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
    fc8e:	2000      	movs	r0, #0
    fc90:	bd70      	pop	{r4, r5, r6, pc}
    fc92:	2042      	movs	r0, #66	; 0x42
    fc94:	bd70      	pop	{r4, r5, r6, pc}
    fc96:	2045      	movs	r0, #69	; 0x45
    fc98:	bd70      	pop	{r4, r5, r6, pc}
    fc9a:	b510      	push	{r4, lr}
    fc9c:	4604      	mov	r4, r0
    fc9e:	7840      	ldrb	r0, [r0, #1]
    fca0:	06c1      	lsls	r1, r0, #27
    fca2:	d51c      	bpl.n	fcde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fca4:	07c0      	lsls	r0, r0, #31
    fca6:	d00b      	beq.n	fcc0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fca8:	f7f7 fa82 	bl	71b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    fcac:	b1b8      	cbz	r0, fcde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fcae:	7860      	ldrb	r0, [r4, #1]
    fcb0:	06c1      	lsls	r1, r0, #27
    fcb2:	d405      	bmi.n	fcc0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fcb4:	0700      	lsls	r0, r0, #28
    fcb6:	d503      	bpl.n	fcc0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
    fcb8:	7d20      	ldrb	r0, [r4, #20]
    fcba:	2802      	cmp	r0, #2
    fcbc:	d10f      	bne.n	fcde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fcbe:	e010      	b.n	fce2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fcc0:	7d20      	ldrb	r0, [r4, #20]
    fcc2:	2802      	cmp	r0, #2
    fcc4:	d001      	beq.n	fcca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
    fcc6:	7ea0      	ldrb	r0, [r4, #26]
    fcc8:	b948      	cbnz	r0, fcde <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
    fcca:	7860      	ldrb	r0, [r4, #1]
    fccc:	0700      	lsls	r0, r0, #28
    fcce:	d408      	bmi.n	fce2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fcd0:	f8d4 0005 	ldr.w	r0, [r4, #5]
    fcd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    fcd8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    fcdc:	d201      	bcs.n	fce2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
    fcde:	2011      	movs	r0, #17
    fce0:	bd10      	pop	{r4, pc}
    fce2:	2000      	movs	r0, #0
    fce4:	bd10      	pop	{r4, pc}
    fce6:	b538      	push	{r3, r4, r5, lr}
    fce8:	4604      	mov	r4, r0
    fcea:	7800      	ldrb	r0, [r0, #0]
    fcec:	28ef      	cmp	r0, #239	; 0xef
    fcee:	d843      	bhi.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fcf0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fcf4:	f8ad 0000 	strh.w	r0, [sp]
    fcf8:	9800      	ldr	r0, [sp, #0]
    fcfa:	f000 f918 	bl	ff2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
    fcfe:	b3a0      	cbz	r0, fd6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fd00:	7861      	ldrb	r1, [r4, #1]
    fd02:	0708      	lsls	r0, r1, #28
    fd04:	d40b      	bmi.n	fd1e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
    fd06:	f8d4 0002 	ldr.w	r0, [r4, #2]
    fd0a:	f8d4 3005 	ldr.w	r3, [r4, #5]
    fd0e:	0a02      	lsrs	r2, r0, #8
    fd10:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    fd14:	d830      	bhi.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd16:	2220      	movs	r2, #32
    fd18:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    fd1c:	d82c      	bhi.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd1e:	7a60      	ldrb	r0, [r4, #9]
    fd20:	b318      	cbz	r0, fd6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
    fd22:	2807      	cmp	r0, #7
    fd24:	d828      	bhi.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd26:	7aa0      	ldrb	r0, [r4, #10]
    fd28:	b128      	cbz	r0, fd36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd2a:	2801      	cmp	r0, #1
    fd2c:	d003      	beq.n	fd36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd2e:	2802      	cmp	r0, #2
    fd30:	d001      	beq.n	fd36 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
    fd32:	2803      	cmp	r0, #3
    fd34:	d120      	bne.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd36:	074a      	lsls	r2, r1, #29
    fd38:	d403      	bmi.n	fd42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fd3a:	2802      	cmp	r0, #2
    fd3c:	d001      	beq.n	fd42 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
    fd3e:	2803      	cmp	r0, #3
    fd40:	d105      	bne.n	fd4e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
    fd42:	7ae0      	ldrb	r0, [r4, #11]
    fd44:	b108      	cbz	r0, fd4a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
    fd46:	2801      	cmp	r0, #1
    fd48:	d116      	bne.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd4a:	0748      	lsls	r0, r1, #29
    fd4c:	d407      	bmi.n	fd5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd4e:	7ca0      	ldrb	r0, [r4, #18]
    fd50:	b128      	cbz	r0, fd5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd52:	2801      	cmp	r0, #1
    fd54:	d003      	beq.n	fd5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd56:	2802      	cmp	r0, #2
    fd58:	d001      	beq.n	fd5e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
    fd5a:	2803      	cmp	r0, #3
    fd5c:	d10c      	bne.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd5e:	06c8      	lsls	r0, r1, #27
    fd60:	7d20      	ldrb	r0, [r4, #20]
    fd62:	d503      	bpl.n	fd6c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
    fd64:	2801      	cmp	r0, #1
    fd66:	d107      	bne.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd68:	e002      	b.n	fd70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
    fd6a:	e005      	b.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd6c:	2802      	cmp	r0, #2
    fd6e:	d003      	beq.n	fd78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
    fd70:	7e20      	ldrb	r0, [r4, #24]
    fd72:	b118      	cbz	r0, fd7c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fd74:	2801      	cmp	r0, #1
    fd76:	d001      	beq.n	fd7c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
    fd78:	2012      	movs	r0, #18
    fd7a:	bd38      	pop	{r3, r4, r5, pc}
    fd7c:	2000      	movs	r0, #0
    fd7e:	bd38      	pop	{r3, r4, r5, pc}
    fd80:	b510      	push	{r4, lr}
    fd82:	0004      	movs	r4, r0
    fd84:	d005      	beq.n	fd92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fd86:	f7f7 fa51 	bl	722c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd8a:	4384      	bics	r4, r0
    fd8c:	d001      	beq.n	fd92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
    fd8e:	2000      	movs	r0, #0
    fd90:	bd10      	pop	{r4, pc}
    fd92:	2001      	movs	r0, #1
    fd94:	bd10      	pop	{r4, pc}
    fd96:	28fb      	cmp	r0, #251	; 0xfb
    fd98:	d803      	bhi.n	fda2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
    fd9a:	f640 0048 	movw	r0, #2120	; 0x848
    fd9e:	4281      	cmp	r1, r0
    fda0:	d901      	bls.n	fda6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
    fda2:	2011      	movs	r0, #17
    fda4:	4770      	bx	lr
    fda6:	2000      	movs	r0, #0
    fda8:	4770      	bx	lr
    fdaa:	381b      	subs	r0, #27
    fdac:	28e1      	cmp	r0, #225	; 0xe1
    fdae:	d206      	bcs.n	fdbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fdb0:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fdb4:	d303      	bcc.n	fdbe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
    fdb6:	f244 2090 	movw	r0, #17040	; 0x4290
    fdba:	4281      	cmp	r1, r0
    fdbc:	d901      	bls.n	fdc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
    fdbe:	2012      	movs	r0, #18
    fdc0:	4770      	bx	lr
    fdc2:	2000      	movs	r0, #0
    fdc4:	4770      	bx	lr
    fdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdca:	4606      	mov	r6, r0
    fdcc:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    fdd0:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    fdd4:	4615      	mov	r5, r2
    fdd6:	302c      	adds	r0, #44	; 0x2c
    fdd8:	f7f4 fa9c 	bl	4314 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    fddc:	4680      	mov	r8, r0
    fdde:	2102      	movs	r1, #2
    fde0:	f7fd fcce 	bl	d780 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fde4:	4287      	cmp	r7, r0
    fde6:	d200      	bcs.n	fdea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
    fde8:	4638      	mov	r0, r7
    fdea:	4607      	mov	r7, r0
    fdec:	2102      	movs	r1, #2
    fdee:	4640      	mov	r0, r8
    fdf0:	f7fd fcc6 	bl	d780 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    fdf4:	4284      	cmp	r4, r0
    fdf6:	d200      	bcs.n	fdfa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
    fdf8:	4620      	mov	r0, r4
    fdfa:	8831      	ldrh	r1, [r6, #0]
    fdfc:	8029      	strh	r1, [r5, #0]
    fdfe:	2f1b      	cmp	r7, #27
    fe00:	d913      	bls.n	fe2a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
    fe02:	2ffb      	cmp	r7, #251	; 0xfb
    fe04:	d300      	bcc.n	fe08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fe06:	27fb      	movs	r7, #251	; 0xfb
    fe08:	806f      	strh	r7, [r5, #2]
    fe0a:	281b      	cmp	r0, #27
    fe0c:	d90f      	bls.n	fe2e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
    fe0e:	28fb      	cmp	r0, #251	; 0xfb
    fe10:	d300      	bcc.n	fe14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fe12:	20fb      	movs	r0, #251	; 0xfb
    fe14:	80e8      	strh	r0, [r5, #6]
    fe16:	4640      	mov	r0, r8
    fe18:	f7ff fee9 	bl	fbee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fe1c:	80a8      	strh	r0, [r5, #4]
    fe1e:	4640      	mov	r0, r8
    fe20:	f7ff fee5 	bl	fbee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
    fe24:	8128      	strh	r0, [r5, #8]
    fe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe2a:	271b      	movs	r7, #27
    fe2c:	e7ec      	b.n	fe08 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
    fe2e:	201b      	movs	r0, #27
    fe30:	e7f0      	b.n	fe14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
    fe32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe36:	7890      	ldrb	r0, [r2, #2]
    fe38:	9e06      	ldr	r6, [sp, #24]
    fe3a:	461d      	mov	r5, r3
    fe3c:	4614      	mov	r4, r2
    fe3e:	b908      	cbnz	r0, fe44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
    fe40:	f7f7 f9f4 	bl	722c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe44:	78e4      	ldrb	r4, [r4, #3]
    fe46:	4607      	mov	r7, r0
    fe48:	b914      	cbnz	r4, fe50 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
    fe4a:	f7f7 f9ef 	bl	722c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe4e:	4604      	mov	r4, r0
    fe50:	b16f      	cbz	r7, fe6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe52:	b164      	cbz	r4, fe6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe54:	4638      	mov	r0, r7
    fe56:	f7ff fed5 	bl	fc04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fe5a:	4620      	mov	r0, r4
    fe5c:	f7ff fed2 	bl	fc04 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
    fe60:	b12f      	cbz	r7, fe6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe62:	b124      	cbz	r4, fe6e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
    fe64:	702f      	strb	r7, [r5, #0]
    fe66:	7034      	strb	r4, [r6, #0]
    fe68:	2000      	movs	r0, #0
    fe6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe6e:	2009      	movs	r0, #9
    fe70:	e7fb      	b.n	fe6a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
    fe72:	207f      	movs	r0, #127	; 0x7f
    fe74:	f000 b83c 	b.w	fef0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fe78:	b508      	push	{r3, lr}
    fe7a:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    fe7e:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    fe82:	f88d 0000 	strb.w	r0, [sp]
    fe86:	9800      	ldr	r0, [sp, #0]
    fe88:	9000      	str	r0, [sp, #0]
    fe8a:	f89d 0000 	ldrb.w	r0, [sp]
    fe8e:	b100      	cbz	r0, fe92 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
    fe90:	2001      	movs	r0, #1
    fe92:	1e40      	subs	r0, r0, #1
    fe94:	4208      	tst	r0, r1
    fe96:	d003      	beq.n	fea0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fe98:	2904      	cmp	r1, #4
    fe9a:	d001      	beq.n	fea0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
    fe9c:	2001      	movs	r0, #1
    fe9e:	bd08      	pop	{r3, pc}
    fea0:	2000      	movs	r0, #0
    fea2:	bd08      	pop	{r3, pc}
    fea4:	b570      	push	{r4, r5, r6, lr}
    fea6:	4605      	mov	r5, r0
    fea8:	f7fe fbb7 	bl	e61a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    feac:	b170      	cbz	r0, fecc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
    feae:	4628      	mov	r0, r5
    feb0:	f7fe fd70 	bl	e994 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    feb4:	2800      	cmp	r0, #0
    feb6:	d008      	beq.n	feca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
    feb8:	4628      	mov	r0, r5
    feba:	f7fe fd68 	bl	e98e <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    febe:	4604      	mov	r4, r0
    fec0:	4628      	mov	r0, r5
    fec2:	f7fe fd3e 	bl	e942 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fec6:	b118      	cbz	r0, fed0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
    fec8:	200c      	movs	r0, #12
    feca:	bd70      	pop	{r4, r5, r6, pc}
    fecc:	2042      	movs	r0, #66	; 0x42
    fece:	bd70      	pop	{r4, r5, r6, pc}
    fed0:	b164      	cbz	r4, feec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    fed2:	8820      	ldrh	r0, [r4, #0]
    fed4:	f7fd fb03 	bl	d4de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fed8:	8820      	ldrh	r0, [r4, #0]
    feda:	2100      	movs	r1, #0
    fedc:	f7f1 f926 	bl	112c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fee0:	b120      	cbz	r0, feec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
    fee2:	f241 71ae 	movw	r1, #6062	; 0x17ae
    fee6:	2039      	movs	r0, #57	; 0x39
    fee8:	f7f0 fd50 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    feec:	2000      	movs	r0, #0
    feee:	bd70      	pop	{r4, r5, r6, pc}
    fef0:	b508      	push	{r3, lr}
    fef2:	f640 1288 	movw	r2, #2440	; 0x988
    fef6:	2300      	movs	r3, #0
    fef8:	4669      	mov	r1, sp
    fefa:	f7fc f9a9 	bl	c250 <mpsl_fem_tx_power_split>
    fefe:	bd08      	pop	{r3, pc}
    ff00:	b530      	push	{r4, r5, lr}
    ff02:	f340 0400 	sbfx	r4, r0, #0, #1
    ff06:	f340 0040 	sbfx	r0, r0, #1, #1
    ff0a:	1c40      	adds	r0, r0, #1
    ff0c:	9d03      	ldr	r5, [sp, #12]
    ff0e:	1c64      	adds	r4, r4, #1
    ff10:	d000      	beq.n	ff14 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
    ff12:	b119      	cbz	r1, ff1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
    ff14:	b100      	cbz	r0, ff18 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
    ff16:	b10a      	cbz	r2, ff1c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
    ff18:	b91c      	cbnz	r4, ff22 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
    ff1a:	e001      	b.n	ff20 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
    ff1c:	2011      	movs	r0, #17
    ff1e:	bd30      	pop	{r4, r5, pc}
    ff20:	2100      	movs	r1, #0
    ff22:	7019      	strb	r1, [r3, #0]
    ff24:	b900      	cbnz	r0, ff28 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
    ff26:	2200      	movs	r2, #0
    ff28:	702a      	strb	r2, [r5, #0]
    ff2a:	2000      	movs	r0, #0
    ff2c:	bd30      	pop	{r4, r5, pc}
    ff2e:	b2c0      	uxtb	r0, r0
    ff30:	06c1      	lsls	r1, r0, #27
    ff32:	d40c      	bmi.n	ff4e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
    ff34:	0681      	lsls	r1, r0, #26
    ff36:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    ff3a:	d503      	bpl.n	ff44 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
    ff3c:	b9d1      	cbnz	r1, ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff3e:	0781      	lsls	r1, r0, #30
    ff40:	d418      	bmi.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff42:	e001      	b.n	ff48 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
    ff44:	2900      	cmp	r1, #0
    ff46:	d1fa      	bne.n	ff3e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
    ff48:	0700      	lsls	r0, r0, #28
    ff4a:	d413      	bmi.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff4c:	e010      	b.n	ff70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
    ff4e:	0641      	lsls	r1, r0, #25
    ff50:	d410      	bmi.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff52:	0681      	lsls	r1, r0, #26
    ff54:	d40e      	bmi.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff56:	07c1      	lsls	r1, r0, #31
    ff58:	ea4f 7180 	mov.w	r1, r0, lsl #30
    ff5c:	d004      	beq.n	ff68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    ff5e:	2900      	cmp	r1, #0
    ff60:	db02      	blt.n	ff68 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
    ff62:	0740      	lsls	r0, r0, #29
    ff64:	d404      	bmi.n	ff70 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
    ff66:	e005      	b.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff68:	0701      	lsls	r1, r0, #28
    ff6a:	d403      	bmi.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff6c:	0740      	lsls	r0, r0, #29
    ff6e:	d401      	bmi.n	ff74 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
    ff70:	2001      	movs	r0, #1
    ff72:	4770      	bx	lr
    ff74:	2000      	movs	r0, #0
    ff76:	4770      	bx	lr
    ff78:	b510      	push	{r4, lr}
    ff7a:	f7f4 f9af 	bl	42dc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    ff7e:	b110      	cbz	r0, ff86 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
    ff80:	f44f 7188 	mov.w	r1, #272	; 0x110
    ff84:	e004      	b.n	ff90 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
    ff86:	f7f3 fadf 	bl	3548 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ff8a:	b120      	cbz	r0, ff96 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
    ff8c:	f240 1115 	movw	r1, #277	; 0x115
    ff90:	2001      	movs	r0, #1
    ff92:	f7f0 fcfb 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ff96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff9a:	2001      	movs	r0, #1
    ff9c:	f7fd b8ef 	b.w	d17e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ffa0:	6802      	ldr	r2, [r0, #0]
    ffa2:	b912      	cbnz	r2, ffaa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
    ffa4:	6001      	str	r1, [r0, #0]
    ffa6:	4770      	bx	lr
    ffa8:	4602      	mov	r2, r0
    ffaa:	6850      	ldr	r0, [r2, #4]
    ffac:	b108      	cbz	r0, ffb2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c8>
    ffae:	428a      	cmp	r2, r1
    ffb0:	d1fa      	bne.n	ffa8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
    ffb2:	428a      	cmp	r2, r1
    ffb4:	d0f7      	beq.n	ffa6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
    ffb6:	6051      	str	r1, [r2, #4]
    ffb8:	4770      	bx	lr
    ffba:	b510      	push	{r4, lr}
    ffbc:	4604      	mov	r4, r0
    ffbe:	e002      	b.n	ffc6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3dc>
    ffc0:	6820      	ldr	r0, [r4, #0]
    ffc2:	4780      	blx	r0
    ffc4:	6864      	ldr	r4, [r4, #4]
    ffc6:	2c00      	cmp	r4, #0
    ffc8:	d1fa      	bne.n	ffc0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
    ffca:	bd10      	pop	{r4, pc}
    ffcc:	b510      	push	{r4, lr}
    ffce:	2000      	movs	r0, #0
    ffd0:	f7fd f8d5 	bl	d17e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ffd4:	f7f1 f988 	bl	12e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    ffd8:	f7f1 fc1e 	bl	1818 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    ffdc:	f7f1 fdac 	bl	1b38 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    ffe0:	2800      	cmp	r0, #0
    ffe2:	d003      	beq.n	ffec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
    ffe4:	21f2      	movs	r1, #242	; 0xf2
    ffe6:	2001      	movs	r0, #1
    ffe8:	f7f0 fcd0 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffec:	bd10      	pop	{r4, pc}
    ffee:	b510      	push	{r4, lr}
    fff0:	f7ff ffc2 	bl	ff78 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
    fff4:	f7fe ffc9 	bl	ef8a <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fff8:	2800      	cmp	r0, #0
    fffa:	d004      	beq.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
    fffc:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10000:	2001      	movs	r0, #1
   10002:	f7f0 fcc3 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10006:	bd10      	pop	{r4, pc}

00010008 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10008:	f7fb be58 	b.w	bcbc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   1000c:	000b0001 	.word	0x000b0001
   10010:	000a0002 	.word	0x000a0002
   10014:	00090005 	.word	0x00090005
   10018:	0008000a 	.word	0x0008000a
   1001c:	00070014 	.word	0x00070014
   10020:	0006001e 	.word	0x0006001e
   10024:	00050032 	.word	0x00050032
   10028:	0004004b 	.word	0x0004004b
   1002c:	00030064 	.word	0x00030064
   10030:	00020096 	.word	0x00020096
   10034:	000100fa 	.word	0x000100fa
   10038:	000001f4 	.word	0x000001f4

0001003c <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   1003c:	b510      	push	{r4, lr}
   1003e:	6844      	ldr	r4, [r0, #4]
   10040:	7803      	ldrb	r3, [r0, #0]
   10042:	2100      	movs	r1, #0
   10044:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   10048:	3480      	adds	r4, #128	; 0x80
   1004a:	4620      	mov	r0, r4
   1004c:	f7fd fb22 	bl	d694 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10050:	b110      	cbz	r0, 10058 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   10052:	2020      	movs	r0, #32
   10054:	7760      	strb	r0, [r4, #29]
   10056:	bd10      	pop	{r4, pc}
   10058:	2180      	movs	r1, #128	; 0x80
   1005a:	207e      	movs	r0, #126	; 0x7e
   1005c:	f7f0 fc96 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010060 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10060:	2200      	movs	r2, #0
   10062:	704a      	strb	r2, [r1, #1]
   10064:	2214      	movs	r2, #20
   10066:	700a      	strb	r2, [r1, #0]
   10068:	f8d0 200a 	ldr.w	r2, [r0, #10]
   1006c:	604a      	str	r2, [r1, #4]
   1006e:	89c0      	ldrh	r0, [r0, #14]
   10070:	8108      	strh	r0, [r1, #8]
   10072:	4770      	bx	lr
   10074:	b510      	push	{r4, lr}
   10076:	2801      	cmp	r0, #1
   10078:	d006      	beq.n	10088 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1007a:	2802      	cmp	r0, #2
   1007c:	d004      	beq.n	10088 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1007e:	f240 21d7 	movw	r1, #727	; 0x2d7
   10082:	2006      	movs	r0, #6
   10084:	f7f0 fc82 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10088:	bd10      	pop	{r4, pc}

0001008a <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1008a:	b510      	push	{r4, lr}
   1008c:	f7f7 fcbc 	bl	7a08 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10090:	f000 f81d 	bl	100ce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10094:	f7f7 f998 	bl	73c8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1009c:	f7f7 ba92 	b.w	75c4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000100a0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   100a0:	b510      	push	{r4, lr}
   100a2:	24c8      	movs	r4, #200	; 0xc8
   100a4:	1e64      	subs	r4, r4, #1
   100a6:	b2e4      	uxtb	r4, r4
   100a8:	f7f7 f9ac 	bl	7404 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   100ac:	2802      	cmp	r0, #2
   100ae:	d003      	beq.n	100b8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   100b0:	2801      	cmp	r0, #1
   100b2:	d000      	beq.n	100b6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   100b4:	2000      	movs	r0, #0
   100b6:	bd10      	pop	{r4, pc}
   100b8:	2c00      	cmp	r4, #0
   100ba:	d1f3      	bne.n	100a4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   100bc:	21ed      	movs	r1, #237	; 0xed
   100be:	203b      	movs	r0, #59	; 0x3b
   100c0:	f7f0 fc64 	bl	98c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100c4:	5840      	ldr	r0, [r0, r1]
   100c6:	2800      	cmp	r0, #0
   100c8:	d000      	beq.n	100cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   100ca:	2001      	movs	r0, #1
   100cc:	4770      	bx	lr

000100ce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   100ce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   100d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   100d6:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   100da:	f3bf 8f4f 	dsb	sy
   100de:	f3bf 8f6f 	isb	sy
   100e2:	f7f7 bb09 	b.w	76f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   100e6:	2800      	cmp	r0, #0
   100e8:	db09      	blt.n	100fe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   100ea:	f000 021f 	and.w	r2, r0, #31
   100ee:	2101      	movs	r1, #1
   100f0:	4091      	lsls	r1, r2
   100f2:	0940      	lsrs	r0, r0, #5
   100f4:	0080      	lsls	r0, r0, #2
   100f6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   100fa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   100fe:	4770      	bx	lr
   10100:	2800      	cmp	r0, #0
   10102:	db0d      	blt.n	10120 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10104:	f000 021f 	and.w	r2, r0, #31
   10108:	2101      	movs	r1, #1
   1010a:	4091      	lsls	r1, r2
   1010c:	0940      	lsrs	r0, r0, #5
   1010e:	0080      	lsls	r0, r0, #2
   10110:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10114:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10118:	f3bf 8f4f 	dsb	sy
   1011c:	f3bf 8f6f 	isb	sy
   10120:	4770      	bx	lr
   10122:	5840      	ldr	r0, [r0, r1]
   10124:	2800      	cmp	r0, #0
   10126:	d000      	beq.n	1012a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10128:	2001      	movs	r0, #1
   1012a:	4770      	bx	lr
   1012c:	5840      	ldr	r0, [r0, r1]
   1012e:	2800      	cmp	r0, #0
   10130:	d000      	beq.n	10134 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10132:	2001      	movs	r0, #1
   10134:	4770      	bx	lr

00010136 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10136:	b510      	push	{r4, lr}
   10138:	4604      	mov	r4, r0
   1013a:	4608      	mov	r0, r1
   1013c:	f7f7 fd90 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10140:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10144:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10148:	fbb0 f0f1 	udiv	r0, r0, r1
   1014c:	1a20      	subs	r0, r4, r0
   1014e:	1e80      	subs	r0, r0, #2
   10150:	bd10      	pop	{r4, pc}

00010152 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10152:	b510      	push	{r4, lr}
   10154:	4604      	mov	r4, r0
   10156:	4608      	mov	r0, r1
   10158:	f7f7 fd82 	bl	7c60 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1015c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10160:	fbb0 f0f1 	udiv	r0, r0, r1
   10164:	1a20      	subs	r0, r4, r0
   10166:	bd10      	pop	{r4, pc}
   10168:	2804      	cmp	r0, #4
   1016a:	d202      	bcs.n	10172 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   1016c:	f04f 0028 	mov.w	r0, #40	; 0x28
   10170:	4770      	bx	lr
   10172:	d102      	bne.n	1017a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10174:	f04f 0010 	mov.w	r0, #16
   10178:	4770      	bx	lr
   1017a:	f04f 0000 	mov.w	r0, #0
   1017e:	4770      	bx	lr
   10180:	2100      	movs	r1, #0
   10182:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10186:	f800 1f24 	strb.w	r1, [r0, #36]!
   1018a:	7041      	strb	r1, [r0, #1]
   1018c:	4770      	bx	lr

0001018e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   1018e:	b570      	push	{r4, r5, r6, lr}
   10190:	f7f8 fac6 	bl	8720 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10194:	4605      	mov	r5, r0
   10196:	2400      	movs	r4, #0
   10198:	e006      	b.n	101a8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1019a:	4620      	mov	r0, r4
   1019c:	f7f8 fac6 	bl	872c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   101a0:	f7ff ffee 	bl	10180 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   101a4:	1c64      	adds	r4, r4, #1
   101a6:	b2e4      	uxtb	r4, r4
   101a8:	42ac      	cmp	r4, r5
   101aa:	d3f6      	bcc.n	1019a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   101ac:	bd70      	pop	{r4, r5, r6, pc}

000101ae <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   101ae:	f7fa bf27 	b.w	b000 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

000101b2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   101b2:	b510      	push	{r4, lr}
   101b4:	2000      	movs	r0, #0
   101b6:	f7fb fa7f 	bl	b6b8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   101ba:	6800      	ldr	r0, [r0, #0]
   101bc:	2800      	cmp	r0, #0
   101be:	bf18      	it	ne
   101c0:	2001      	movne	r0, #1
   101c2:	bd10      	pop	{r4, pc}

000101c4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   101c4:	b510      	push	{r4, lr}
   101c6:	f7fb faef 	bl	b7a8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   101ca:	f7fa fdd3 	bl	ad74 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   101ce:	f000 f804 	bl	101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   101d2:	b280      	uxth	r0, r0
   101d4:	bd10      	pop	{r4, pc}

000101d6 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   101d6:	f7fb ba49 	b.w	b66c <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

000101da <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   101da:	0a41      	lsrs	r1, r0, #9
   101dc:	f643 5209 	movw	r2, #15625	; 0x3d09
   101e0:	4351      	muls	r1, r2
   101e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   101e6:	fb10 f002 	smulbb	r0, r0, r2
   101ea:	f500 7080 	add.w	r0, r0, #256	; 0x100
   101ee:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   101f2:	4770      	bx	lr
   101f4:	2800      	cmp	r0, #0
   101f6:	db09      	blt.n	1020c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   101f8:	f000 021f 	and.w	r2, r0, #31
   101fc:	2101      	movs	r1, #1
   101fe:	4091      	lsls	r1, r2
   10200:	0940      	lsrs	r0, r0, #5
   10202:	0080      	lsls	r0, r0, #2
   10204:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10208:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1020c:	4770      	bx	lr
   1020e:	2800      	cmp	r0, #0
   10210:	db0d      	blt.n	1022e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10212:	f000 021f 	and.w	r2, r0, #31
   10216:	2101      	movs	r1, #1
   10218:	4091      	lsls	r1, r2
   1021a:	0940      	lsrs	r0, r0, #5
   1021c:	0080      	lsls	r0, r0, #2
   1021e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10222:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10226:	f3bf 8f4f 	dsb	sy
   1022a:	f3bf 8f6f 	isb	sy
   1022e:	4770      	bx	lr
   10230:	5840      	ldr	r0, [r0, r1]
   10232:	2800      	cmp	r0, #0
   10234:	d000      	beq.n	10238 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10236:	2001      	movs	r0, #1
   10238:	4770      	bx	lr
   1023a:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   1023e:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10242:	f002 0201 	and.w	r2, r2, #1
   10246:	03c0      	lsls	r0, r0, #15
   10248:	d503      	bpl.n	10252 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   1024a:	428a      	cmp	r2, r1
   1024c:	d101      	bne.n	10252 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   1024e:	2001      	movs	r0, #1
   10250:	4770      	bx	lr
   10252:	2000      	movs	r0, #0
   10254:	4770      	bx	lr

00010256 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10256:	b510      	push	{r4, lr}
   10258:	2101      	movs	r1, #1
   1025a:	0788      	lsls	r0, r1, #30
   1025c:	f7fb fde4 	bl	be28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10260:	2800      	cmp	r0, #0
   10262:	d000      	beq.n	10266 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10264:	2001      	movs	r0, #1
   10266:	bd10      	pop	{r4, pc}

00010268 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1026c:	2101      	movs	r1, #1
   1026e:	6001      	str	r1, [r0, #0]
   10270:	4770      	bx	lr

00010272 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10272:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10276:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   1027a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   1027e:	f002 0203 	and.w	r2, r2, #3
   10282:	03c9      	lsls	r1, r1, #15
   10284:	d503      	bpl.n	1028e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10286:	4282      	cmp	r2, r0
   10288:	d101      	bne.n	1028e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   1028a:	2001      	movs	r0, #1
   1028c:	4770      	bx	lr
   1028e:	2000      	movs	r0, #0
   10290:	4770      	bx	lr

00010292 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10292:	b510      	push	{r4, lr}
   10294:	2100      	movs	r1, #0
   10296:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1029a:	f7fb fdc5 	bl	be28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1029e:	2800      	cmp	r0, #0
   102a0:	d000      	beq.n	102a4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   102a2:	2001      	movs	r0, #1
   102a4:	bd10      	pop	{r4, pc}
   102a6:	2800      	cmp	r0, #0
   102a8:	db09      	blt.n	102be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   102aa:	f000 021f 	and.w	r2, r0, #31
   102ae:	2101      	movs	r1, #1
   102b0:	4091      	lsls	r1, r2
   102b2:	0940      	lsrs	r0, r0, #5
   102b4:	0080      	lsls	r0, r0, #2
   102b6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102ba:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   102be:	4770      	bx	lr
   102c0:	2800      	cmp	r0, #0
   102c2:	db0d      	blt.n	102e0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   102c4:	f000 021f 	and.w	r2, r0, #31
   102c8:	2101      	movs	r1, #1
   102ca:	4091      	lsls	r1, r2
   102cc:	0940      	lsrs	r0, r0, #5
   102ce:	0080      	lsls	r0, r0, #2
   102d0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   102d4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   102d8:	f3bf 8f4f 	dsb	sy
   102dc:	f3bf 8f6f 	isb	sy
   102e0:	4770      	bx	lr
   102e2:	1000      	.short	0x1000
   102e4:	00fa0002 	.word	0x00fa0002
   102e8:	e8ff0000 	.word	0xe8ff0000
   102ec:	95775fae 	.word	0x95775fae
   102f0:	6227c87c 	.word	0x6227c87c
   102f4:	eae61814 	.word	0xeae61814
   102f8:	3992c65d 	.word	0x3992c65d
   102fc:	3a72      	.short	0x3a72
   102fe:	2800      	cmp	r0, #0
   10300:	db09      	blt.n	10316 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10302:	f000 021f 	and.w	r2, r0, #31
   10306:	2101      	movs	r1, #1
   10308:	4091      	lsls	r1, r2
   1030a:	0940      	lsrs	r0, r0, #5
   1030c:	0080      	lsls	r0, r0, #2
   1030e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10312:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10316:	4770      	bx	lr

00010318 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10318:	f3ef 8110 	mrs	r1, PRIMASK
   1031c:	b672      	cpsid	i
   1031e:	7802      	ldrb	r2, [r0, #0]
   10320:	2a01      	cmp	r2, #1
   10322:	d001      	beq.n	10328 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10324:	2201      	movs	r2, #1
   10326:	e000      	b.n	1032a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10328:	2200      	movs	r2, #0
   1032a:	2301      	movs	r3, #1
   1032c:	7003      	strb	r3, [r0, #0]
   1032e:	b901      	cbnz	r1, 10332 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10330:	b662      	cpsie	i
   10332:	b10a      	cbz	r2, 10338 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10334:	2000      	movs	r0, #0
   10336:	4770      	bx	lr
   10338:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1033c:	4770      	bx	lr

0001033e <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   1033e:	2100      	movs	r1, #0
   10340:	7001      	strb	r1, [r0, #0]
   10342:	4608      	mov	r0, r1
   10344:	4770      	bx	lr

00010346 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10346:	f3ef 8110 	mrs	r1, PRIMASK
   1034a:	b672      	cpsid	i
   1034c:	2200      	movs	r2, #0
   1034e:	7002      	strb	r2, [r0, #0]
   10350:	b901      	cbnz	r1, 10354 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10352:	b662      	cpsie	i
   10354:	2000      	movs	r0, #0
   10356:	4770      	bx	lr

00010358 <mpsl_low_priority_process>:
   10358:	f7fb beba 	b.w	c0d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0001035c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   1035c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10360:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10364:	280f      	cmp	r0, #15
   10366:	d001      	beq.n	1036c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10368:	2000      	movs	r0, #0
   1036a:	4770      	bx	lr
   1036c:	2001      	movs	r0, #1
   1036e:	4770      	bx	lr

00010370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10370:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10374:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10378:	280a      	cmp	r0, #10
   1037a:	d001      	beq.n	10380 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   1037c:	2000      	movs	r0, #0
   1037e:	4770      	bx	lr
   10380:	2001      	movs	r0, #1
   10382:	4770      	bx	lr

00010384 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10384:	b500      	push	{lr}
   10386:	f7ff fff3 	bl	10370 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1038a:	b120      	cbz	r0, 10396 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   1038c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10390:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10394:	b108      	cbz	r0, 1039a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10396:	2000      	movs	r0, #0
   10398:	bd00      	pop	{pc}
   1039a:	2001      	movs	r0, #1
   1039c:	bd00      	pop	{pc}

0001039e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1039e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103a2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103a6:	280e      	cmp	r0, #14
   103a8:	d001      	beq.n	103ae <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   103aa:	2000      	movs	r0, #0
   103ac:	4770      	bx	lr
   103ae:	2001      	movs	r0, #1
   103b0:	4770      	bx	lr

000103b2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   103b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103b6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103ba:	2810      	cmp	r0, #16
   103bc:	d001      	beq.n	103c2 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   103be:	2000      	movs	r0, #0
   103c0:	4770      	bx	lr
   103c2:	2001      	movs	r0, #1
   103c4:	4770      	bx	lr

000103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   103c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103ca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   103ce:	2806      	cmp	r0, #6
   103d0:	d003      	beq.n	103da <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   103d2:	1c40      	adds	r0, r0, #1
   103d4:	d001      	beq.n	103da <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   103d6:	2000      	movs	r0, #0
   103d8:	4770      	bx	lr
   103da:	2001      	movs	r0, #1
   103dc:	4770      	bx	lr

000103de <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   103de:	b500      	push	{lr}
   103e0:	f7ff fff1 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   103e4:	b148      	cbz	r0, 103fa <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   103e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   103ea:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   103ee:	2806      	cmp	r0, #6
   103f0:	d303      	bcc.n	103fa <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   103f2:	1c40      	adds	r0, r0, #1
   103f4:	d001      	beq.n	103fa <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   103f6:	2001      	movs	r0, #1
   103f8:	bd00      	pop	{pc}
   103fa:	2000      	movs	r0, #0
   103fc:	bd00      	pop	{pc}

000103fe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   103fe:	b500      	push	{lr}
   10400:	f7ff ffe1 	bl	103c6 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10404:	b138      	cbz	r0, 10416 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10406:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1040a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1040e:	2806      	cmp	r0, #6
   10410:	d303      	bcc.n	1041a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10412:	1c40      	adds	r0, r0, #1
   10414:	d001      	beq.n	1041a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10416:	2000      	movs	r0, #0
   10418:	bd00      	pop	{pc}
   1041a:	2001      	movs	r0, #1
   1041c:	bd00      	pop	{pc}

0001041e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1041e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10422:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10426:	280d      	cmp	r0, #13
   10428:	d001      	beq.n	1042e <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   1042a:	2000      	movs	r0, #0
   1042c:	4770      	bx	lr
   1042e:	2001      	movs	r0, #1
   10430:	4770      	bx	lr

00010432 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10432:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10436:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1043a:	2808      	cmp	r0, #8
   1043c:	d001      	beq.n	10442 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   1043e:	2000      	movs	r0, #0
   10440:	4770      	bx	lr
   10442:	2001      	movs	r0, #1
   10444:	4770      	bx	lr

00010446 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10446:	f7fb be7d 	b.w	c144 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0001044a <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   1044a:	f7fb be7b 	b.w	c144 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0001044e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   1044e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10452:	428a      	cmp	r2, r1
   10454:	d803      	bhi.n	1045e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10456:	2179      	movs	r1, #121	; 0x79
   10458:	2096      	movs	r0, #150	; 0x96
   1045a:	f7fb fd3b 	bl	bed4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   1045e:	fab2 f382 	clz	r3, r2
   10462:	b143      	cbz	r3, 10476 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10464:	4099      	lsls	r1, r3
   10466:	f1c3 0c20 	rsb	ip, r3, #32
   1046a:	fa20 fc0c 	lsr.w	ip, r0, ip
   1046e:	4098      	lsls	r0, r3
   10470:	ea41 010c 	orr.w	r1, r1, ip
   10474:	409a      	lsls	r2, r3
   10476:	0c13      	lsrs	r3, r2, #16
   10478:	fbb1 f5f3 	udiv	r5, r1, r3
   1047c:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10480:	b287      	uxth	r7, r0
   10482:	fbb1 f0f3 	udiv	r0, r1, r3
   10486:	fb03 1615 	mls	r6, r3, r5, r1
   1048a:	b294      	uxth	r4, r2
   1048c:	fb00 f504 	mul.w	r5, r0, r4
   10490:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10494:	42b5      	cmp	r5, r6
   10496:	d905      	bls.n	104a4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10498:	1bad      	subs	r5, r5, r6
   1049a:	4295      	cmp	r5, r2
   1049c:	bf94      	ite	ls
   1049e:	2501      	movls	r5, #1
   104a0:	2502      	movhi	r5, #2
   104a2:	1b40      	subs	r0, r0, r5
   104a4:	0409      	lsls	r1, r1, #16
   104a6:	0405      	lsls	r5, r0, #16
   104a8:	eb11 010c 	adds.w	r1, r1, ip
   104ac:	fba0 0c02 	umull	r0, ip, r0, r2
   104b0:	1a09      	subs	r1, r1, r0
   104b2:	fbb1 f0f3 	udiv	r0, r1, r3
   104b6:	fbb1 fcf3 	udiv	ip, r1, r3
   104ba:	fb03 131c 	mls	r3, r3, ip, r1
   104be:	fb00 f104 	mul.w	r1, r0, r4
   104c2:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   104c6:	4299      	cmp	r1, r3
   104c8:	d905      	bls.n	104d6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   104ca:	1ac9      	subs	r1, r1, r3
   104cc:	4291      	cmp	r1, r2
   104ce:	bf94      	ite	ls
   104d0:	2101      	movls	r1, #1
   104d2:	2102      	movhi	r1, #2
   104d4:	1a40      	subs	r0, r0, r1
   104d6:	4328      	orrs	r0, r5
   104d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000104dc <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104e0:	461e      	mov	r6, r3
   104e2:	4615      	mov	r5, r2
   104e4:	4604      	mov	r4, r0
   104e6:	9f06      	ldr	r7, [sp, #24]
   104e8:	f7ff ffb1 	bl	1044e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   104ec:	6030      	str	r0, [r6, #0]
   104ee:	fba0 0105 	umull	r0, r1, r0, r5
   104f2:	1a20      	subs	r0, r4, r0
   104f4:	6038      	str	r0, [r7, #0]
   104f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000104fa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   104fa:	b4f0      	push	{r4, r5, r6, r7}
   104fc:	ea80 0c01 	eor.w	ip, r0, r1
   10500:	4603      	mov	r3, r0
   10502:	f01c 0f03 	tst.w	ip, #3
   10506:	d13c      	bne.n	10582 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10508:	f013 0f03 	tst.w	r3, #3
   1050c:	d00b      	beq.n	10526 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   1050e:	2a00      	cmp	r2, #0
   10510:	bf04      	itt	eq
   10512:	bcf0      	popeq	{r4, r5, r6, r7}
   10514:	4770      	bxeq	lr
   10516:	f811 cb01 	ldrb.w	ip, [r1], #1
   1051a:	f803 cb01 	strb.w	ip, [r3], #1
   1051e:	1e52      	subs	r2, r2, #1
   10520:	f013 0f03 	tst.w	r3, #3
   10524:	d1f3      	bne.n	1050e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10526:	2a03      	cmp	r2, #3
   10528:	d94f      	bls.n	105ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1052a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1052e:	d24c      	bcs.n	105ca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10530:	f1c2 0c00 	rsb	ip, r2, #0
   10534:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10538:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   1053c:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10540:	f1cc 0c00 	rsb	ip, ip, #0
   10544:	f1bc 0f00 	cmp.w	ip, #0
   10548:	dd1b      	ble.n	10582 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1054a:	1f0d      	subs	r5, r1, #4
   1054c:	1f1c      	subs	r4, r3, #4
   1054e:	f01c 0f01 	tst.w	ip, #1
   10552:	d003      	beq.n	1055c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10554:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10558:	f844 6f04 	str.w	r6, [r4, #4]!
   1055c:	ea5f 066c 	movs.w	r6, ip, asr #1
   10560:	d007      	beq.n	10572 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10562:	686f      	ldr	r7, [r5, #4]
   10564:	6067      	str	r7, [r4, #4]
   10566:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1056a:	f844 7f08 	str.w	r7, [r4, #8]!
   1056e:	1e76      	subs	r6, r6, #1
   10570:	d1f7      	bne.n	10562 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10572:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10576:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1057a:	f1cc 0c00 	rsb	ip, ip, #0
   1057e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10582:	2a00      	cmp	r2, #0
   10584:	bf04      	itt	eq
   10586:	bcf0      	popeq	{r4, r5, r6, r7}
   10588:	4770      	bxeq	lr
   1058a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1058e:	d226      	bcs.n	105de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10590:	2a00      	cmp	r2, #0
   10592:	bfdc      	itt	le
   10594:	bcf0      	pople	{r4, r5, r6, r7}
   10596:	4770      	bxle	lr
   10598:	1e49      	subs	r1, r1, #1
   1059a:	1e5b      	subs	r3, r3, #1
   1059c:	f012 0f01 	tst.w	r2, #1
   105a0:	d003      	beq.n	105aa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   105a2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   105a6:	f803 cf01 	strb.w	ip, [r3, #1]!
   105aa:	1052      	asrs	r2, r2, #1
   105ac:	bf04      	itt	eq
   105ae:	bcf0      	popeq	{r4, r5, r6, r7}
   105b0:	4770      	bxeq	lr
   105b2:	f891 c001 	ldrb.w	ip, [r1, #1]
   105b6:	f883 c001 	strb.w	ip, [r3, #1]
   105ba:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   105be:	f803 cf02 	strb.w	ip, [r3, #2]!
   105c2:	1e52      	subs	r2, r2, #1
   105c4:	d1f5      	bne.n	105b2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   105c6:	bcf0      	pop	{r4, r5, r6, r7}
   105c8:	4770      	bx	lr
   105ca:	2a04      	cmp	r2, #4
   105cc:	d3d9      	bcc.n	10582 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   105ce:	f851 cb04 	ldr.w	ip, [r1], #4
   105d2:	1f12      	subs	r2, r2, #4
   105d4:	f843 cb04 	str.w	ip, [r3], #4
   105d8:	2a04      	cmp	r2, #4
   105da:	d2f8      	bcs.n	105ce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   105dc:	e7d1      	b.n	10582 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   105de:	f811 cb01 	ldrb.w	ip, [r1], #1
   105e2:	f803 cb01 	strb.w	ip, [r3], #1
   105e6:	1e52      	subs	r2, r2, #1
   105e8:	d1f9      	bne.n	105de <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   105ea:	bcf0      	pop	{r4, r5, r6, r7}
   105ec:	4770      	bx	lr

000105ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   105ee:	b470      	push	{r4, r5, r6}
   105f0:	4603      	mov	r3, r0
   105f2:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   105f6:	f010 0f03 	tst.w	r0, #3
   105fa:	d009      	beq.n	10610 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   105fc:	2a00      	cmp	r2, #0
   105fe:	bf04      	itt	eq
   10600:	bc70      	popeq	{r4, r5, r6}
   10602:	4770      	bxeq	lr
   10604:	f803 cb01 	strb.w	ip, [r3], #1
   10608:	1e52      	subs	r2, r2, #1
   1060a:	f013 0f03 	tst.w	r3, #3
   1060e:	d1f5      	bne.n	105fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10610:	b2c9      	uxtb	r1, r1
   10612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10616:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1061a:	2a03      	cmp	r2, #3
   1061c:	d939      	bls.n	10692 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   1061e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10622:	d236      	bcs.n	10692 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10624:	4251      	negs	r1, r2
   10626:	17cc      	asrs	r4, r1, #31
   10628:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   1062c:	1089      	asrs	r1, r1, #2
   1062e:	424e      	negs	r6, r1
   10630:	2e00      	cmp	r6, #0
   10632:	dd11      	ble.n	10658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10634:	1f19      	subs	r1, r3, #4
   10636:	f016 0f01 	tst.w	r6, #1
   1063a:	bf18      	it	ne
   1063c:	f841 5f04 	strne.w	r5, [r1, #4]!
   10640:	1074      	asrs	r4, r6, #1
   10642:	d004      	beq.n	1064e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10644:	604d      	str	r5, [r1, #4]
   10646:	f841 5f08 	str.w	r5, [r1, #8]!
   1064a:	1e64      	subs	r4, r4, #1
   1064c:	d1fa      	bne.n	10644 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   1064e:	4271      	negs	r1, r6
   10650:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10654:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10658:	2a00      	cmp	r2, #0
   1065a:	bf04      	itt	eq
   1065c:	bc70      	popeq	{r4, r5, r6}
   1065e:	4770      	bxeq	lr
   10660:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10664:	d21d      	bcs.n	106a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10666:	2a00      	cmp	r2, #0
   10668:	bfdc      	itt	le
   1066a:	bc70      	pople	{r4, r5, r6}
   1066c:	4770      	bxle	lr
   1066e:	1e59      	subs	r1, r3, #1
   10670:	f012 0f01 	tst.w	r2, #1
   10674:	bf18      	it	ne
   10676:	f801 cf01 	strbne.w	ip, [r1, #1]!
   1067a:	1052      	asrs	r2, r2, #1
   1067c:	bf04      	itt	eq
   1067e:	bc70      	popeq	{r4, r5, r6}
   10680:	4770      	bxeq	lr
   10682:	f881 c001 	strb.w	ip, [r1, #1]
   10686:	f801 cf02 	strb.w	ip, [r1, #2]!
   1068a:	1e52      	subs	r2, r2, #1
   1068c:	d1f9      	bne.n	10682 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   1068e:	bc70      	pop	{r4, r5, r6}
   10690:	4770      	bx	lr
   10692:	2a04      	cmp	r2, #4
   10694:	d3e0      	bcc.n	10658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10696:	1f12      	subs	r2, r2, #4
   10698:	f843 5b04 	str.w	r5, [r3], #4
   1069c:	2a04      	cmp	r2, #4
   1069e:	d2fa      	bcs.n	10696 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   106a0:	e7da      	b.n	10658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   106a2:	f803 cb01 	strb.w	ip, [r3], #1
   106a6:	1e52      	subs	r2, r2, #1
   106a8:	d1fb      	bne.n	106a2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   106aa:	bc70      	pop	{r4, r5, r6}
   106ac:	4770      	bx	lr
   106ae:	f04f 30ff 	mov.w	r0, #4294967295
   106b2:	4770      	bx	lr
   106b4:	2000      	movs	r0, #0
   106b6:	4770      	bx	lr
   106b8:	2000      	movs	r0, #0
   106ba:	4770      	bx	lr
   106bc:	f04f 30ff 	mov.w	r0, #4294967295
   106c0:	4770      	bx	lr
   106c2:	4770      	bx	lr
   106c4:	4770      	bx	lr
   106c6:	2000      	movs	r0, #0
   106c8:	4770      	bx	lr
   106ca:	2100      	movs	r1, #0
   106cc:	7001      	strb	r1, [r0, #0]
   106ce:	4770      	bx	lr
   106d0:	f04f 30ff 	mov.w	r0, #4294967295
   106d4:	4770      	bx	lr
   106d6:	f04f 30ff 	mov.w	r0, #4294967295
   106da:	4770      	bx	lr
   106dc:	2100      	movs	r1, #0
   106de:	7001      	strb	r1, [r0, #0]
   106e0:	4770      	bx	lr
   106e2:	f04f 30ff 	mov.w	r0, #4294967295
   106e6:	4770      	bx	lr
   106e8:	f04f 30ff 	mov.w	r0, #4294967295
   106ec:	4770      	bx	lr
   106ee:	7800      	ldrb	r0, [r0, #0]
   106f0:	2800      	cmp	r0, #0
   106f2:	d001      	beq.n	106f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   106f4:	f06f 0015 	mvn.w	r0, #21
   106f8:	4770      	bx	lr
   106fa:	2000      	movs	r0, #0
   106fc:	4770      	bx	lr
   106fe:	2200      	movs	r2, #0
   10700:	f000 b802 	b.w	10708 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010704 <mpsl_fem_init>:
   10704:	f7f7 bf7a 	b.w	85fc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010708 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10708:	b570      	push	{r4, r5, r6, lr}
   1070a:	4614      	mov	r4, r2
   1070c:	460d      	mov	r5, r1
   1070e:	1b00      	subs	r0, r0, r4
   10710:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10714:	4288      	cmp	r0, r1
   10716:	da01      	bge.n	1071c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10718:	4608      	mov	r0, r1
   1071a:	e002      	b.n	10722 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1071c:	287f      	cmp	r0, #127	; 0x7f
   1071e:	dd00      	ble.n	10722 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10720:	207f      	movs	r0, #127	; 0x7f
   10722:	4619      	mov	r1, r3
   10724:	b240      	sxtb	r0, r0
   10726:	f7f7 ff9d 	bl	8664 <mpsl_tx_power_radio_supported_power_adjust>
   1072a:	7028      	strb	r0, [r5, #0]
   1072c:	706c      	strb	r4, [r5, #1]
   1072e:	2100      	movs	r1, #0
   10730:	4420      	add	r0, r4
   10732:	70a9      	strb	r1, [r5, #2]
   10734:	b240      	sxtb	r0, r0
   10736:	bd70      	pop	{r4, r5, r6, pc}
   10738:	1702080c 	.word	0x1702080c
   1073c:	0201010d 	.word	0x0201010d
   10740:	01010909 	.word	0x01010909
   10744:	18090206 	.word	0x18090206
   10748:	01010318 	.word	0x01010318
   1074c:	03030909 	.word	0x03030909
   10750:	01020305 	.word	0x01020305
   10754:	24020223 	.word	0x24020223
   10758:	04041009 	.word	0x04041009
   1075c:	0b0b0505 	.word	0x0b0b0505
   10760:	0b04      	.short	0x0b04
   10762:	2b          	.byte	0x2b
   10763:	d8          	.byte	0xd8
   10764:	f8f4f0ec 	.word	0xf8f4f0ec
   10768:	030200fc 	.word	0x030200fc
   1076c:	07060504 	.word	0x07060504
   10770:	00000008 	.word	0x00000008
	...
   10784:	01010100 	.word	0x01010100
   10788:	02020201 	.word	0x02020201
   1078c:	03030302 	.word	0x03030302
   10790:	04040403 	.word	0x04040403
   10794:	05050504 	.word	0x05050504
   10798:	07060605 	.word	0x07060605
   1079c:	0b0a0908 	.word	0x0b0a0908
   107a0:	00000d0c 	.word	0x00000d0c
	...
   107b4:	01010000 	.word	0x01010000
   107b8:	02020101 	.word	0x02020101
   107bc:	03030202 	.word	0x03030202
   107c0:	04040303 	.word	0x04040303
   107c4:	05050404 	.word	0x05050404
   107c8:	06060505 	.word	0x06060505
   107cc:	00090806 	.word	0x00090806

000107d0 <uart_work_handler.part.0>:
	default:
		break;
	}
}

static void uart_work_handler(struct k_work *item)
   107d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	buf = k_malloc(sizeof(*buf));
	if (buf) {
		buf->len = 0;
	} else {
		LOG_WRN("UART_WORK_HANDLER\nNot able to allocate UART receive buffer");
   107d2:	4b09      	ldr	r3, [pc, #36]	; (107f8 <uart_work_handler.part.0+0x28>)
   107d4:	9305      	str	r3, [sp, #20]
   107d6:	aa04      	add	r2, sp, #16
   107d8:	2302      	movs	r3, #2
   107da:	4808      	ldr	r0, [pc, #32]	; (107fc <uart_work_handler.part.0+0x2c>)
   107dc:	9304      	str	r3, [sp, #16]
   107de:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   107e2:	f012 fc77 	bl	230d4 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   107e6:	4806      	ldr	r0, [pc, #24]	; (10800 <uart_work_handler.part.0+0x30>)
   107e8:	f240 6267 	movw	r2, #1639	; 0x667
   107ec:	2300      	movs	r3, #0
		return;
	}

	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
}
   107ee:	b007      	add	sp, #28
   107f0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   107f4:	f00f bee8 	b.w	205c8 <k_work_reschedule>
   107f8:	00026b10 	.word	0x00026b10
   107fc:	00026254 	.word	0x00026254
   10800:	200017f0 	.word	0x200017f0

00010804 <uart_work_handler>:
{
   10804:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
   10806:	201c      	movs	r0, #28
   10808:	f015 fba8 	bl	25f5c <k_malloc>
	if (buf) {
   1080c:	b138      	cbz	r0, 1081e <uart_work_handler+0x1a>
		buf->len = 0;
   1080e:	2300      	movs	r3, #0
   10810:	8303      	strh	r3, [r0, #24]
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   10812:	1d01      	adds	r1, r0, #4
}
   10814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   10818:	4803      	ldr	r0, [pc, #12]	; (10828 <uart_work_handler+0x24>)
   1081a:	f012 bc5e 	b.w	230da <uart_rx_enable.constprop.0>
}
   1081e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10822:	f7ff bfd5 	b.w	107d0 <uart_work_handler.part.0>
   10826:	bf00      	nop
   10828:	00026068 	.word	0x00026068

0001082c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1082c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1082e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10830:	b08a      	sub	sp, #40	; 0x28
   10832:	4604      	mov	r4, r0
   10834:	460e      	mov	r6, r1
   10836:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   10838:	2b03      	cmp	r3, #3
   1083a:	d820      	bhi.n	1087e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   1083c:	e8df f003 	tbb	[pc, r3]
   10840:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10844:	4911      	ldr	r1, [pc, #68]	; (1088c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10846:	4628      	mov	r0, r5
   10848:	f013 faba 	bl	23dc0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1084c:	9505      	str	r5, [sp, #20]
   1084e:	7863      	ldrb	r3, [r4, #1]
   10850:	9304      	str	r3, [sp, #16]
   10852:	78a3      	ldrb	r3, [r4, #2]
   10854:	9303      	str	r3, [sp, #12]
   10856:	78e3      	ldrb	r3, [r4, #3]
   10858:	9302      	str	r3, [sp, #8]
   1085a:	7923      	ldrb	r3, [r4, #4]
   1085c:	9301      	str	r3, [sp, #4]
   1085e:	7963      	ldrb	r3, [r4, #5]
   10860:	9300      	str	r3, [sp, #0]
   10862:	79a3      	ldrb	r3, [r4, #6]
   10864:	4a0a      	ldr	r2, [pc, #40]	; (10890 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   10866:	211e      	movs	r1, #30
   10868:	4630      	mov	r0, r6
   1086a:	f012 fccb 	bl	23204 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1086e:	b00a      	add	sp, #40	; 0x28
   10870:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10872:	4908      	ldr	r1, [pc, #32]	; (10894 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   10874:	e7e7      	b.n	10846 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   10876:	4908      	ldr	r1, [pc, #32]	; (10898 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   10878:	e7e5      	b.n	10846 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   1087a:	4908      	ldr	r1, [pc, #32]	; (1089c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   1087c:	e7e3      	b.n	10846 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1087e:	4a08      	ldr	r2, [pc, #32]	; (108a0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   10880:	210a      	movs	r1, #10
   10882:	4628      	mov	r0, r5
   10884:	f012 fcbe 	bl	23204 <snprintk>
		break;
   10888:	e7e0      	b.n	1084c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   1088a:	bf00      	nop
   1088c:	00026b4b 	.word	0x00026b4b
   10890:	00026b6d 	.word	0x00026b6d
   10894:	00026b52 	.word	0x00026b52
   10898:	00026b59 	.word	0x00026b59
   1089c:	00026b63 	.word	0x00026b63
   108a0:	000290d8 	.word	0x000290d8

000108a4 <disconnected>:

	dk_set_led_on(CON_STATUS_LED);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   108a4:	b5b0      	push	{r4, r5, r7, lr}
   108a6:	b088      	sub	sp, #32
   108a8:	af00      	add	r7, sp, #0
   108aa:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   108ac:	f013 fd9a 	bl	243e4 <bt_conn_get_dst>
   108b0:	4639      	mov	r1, r7
   108b2:	f7ff ffbb 	bl	1082c <bt_addr_le_to_str.constprop.0.isra.0>

	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   108b6:	466d      	mov	r5, sp
   108b8:	b08a      	sub	sp, #40	; 0x28
   108ba:	466a      	mov	r2, sp
   108bc:	4b11      	ldr	r3, [pc, #68]	; (10904 <disconnected+0x60>)
   108be:	61d4      	str	r4, [r2, #28]
   108c0:	e9c2 3705 	strd	r3, r7, [r2, #20]
   108c4:	f44f 7300 	mov.w	r3, #512	; 0x200
   108c8:	8413      	strh	r3, [r2, #32]

	if (auth_conn) {
   108ca:	4c0f      	ldr	r4, [pc, #60]	; (10908 <disconnected+0x64>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   108cc:	4b0f      	ldr	r3, [pc, #60]	; (1090c <disconnected+0x68>)
   108ce:	4810      	ldr	r0, [pc, #64]	; (10910 <disconnected+0x6c>)
   108d0:	f842 3f10 	str.w	r3, [r2, #16]!
   108d4:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   108d8:	f012 fbfc 	bl	230d4 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
   108dc:	6820      	ldr	r0, [r4, #0]
   108de:	46ad      	mov	sp, r5
   108e0:	b118      	cbz	r0, 108ea <disconnected+0x46>
		bt_conn_unref(auth_conn);
   108e2:	f007 f9c1 	bl	17c68 <bt_conn_unref>
		auth_conn = NULL;
   108e6:	2300      	movs	r3, #0
   108e8:	6023      	str	r3, [r4, #0]
	}

	if (current_conn) {
   108ea:	4c0a      	ldr	r4, [pc, #40]	; (10914 <disconnected+0x70>)
   108ec:	6820      	ldr	r0, [r4, #0]
   108ee:	b130      	cbz	r0, 108fe <disconnected+0x5a>
		bt_conn_unref(current_conn);
   108f0:	f007 f9ba 	bl	17c68 <bt_conn_unref>
		current_conn = NULL;
   108f4:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
   108f6:	2001      	movs	r0, #1
		current_conn = NULL;
   108f8:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
   108fa:	f014 fff6 	bl	258ea <dk_set_led_off>
	}
}
   108fe:	3720      	adds	r7, #32
   10900:	46bd      	mov	sp, r7
   10902:	bdb0      	pop	{r4, r5, r7, pc}
   10904:	00026b90 	.word	0x00026b90
   10908:	20002b30 	.word	0x20002b30
   1090c:	01000004 	.word	0x01000004
   10910:	00026254 	.word	0x00026254
   10914:	20002b34 	.word	0x20002b34

00010918 <connected>:
{
   10918:	b5b0      	push	{r4, r5, r7, lr}
   1091a:	b088      	sub	sp, #32
   1091c:	4604      	mov	r4, r0
   1091e:	af00      	add	r7, sp, #0
	if (err) {
   10920:	b189      	cbz	r1, 10946 <connected+0x2e>
		LOG_ERR("Connection failed (err %u)\n", err);
   10922:	466c      	mov	r4, sp
   10924:	b088      	sub	sp, #32
   10926:	466a      	mov	r2, sp
   10928:	4b1a      	ldr	r3, [pc, #104]	; (10994 <connected+0x7c>)
   1092a:	481b      	ldr	r0, [pc, #108]	; (10998 <connected+0x80>)
   1092c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   10930:	2303      	movs	r3, #3
   10932:	f842 3f10 	str.w	r3, [r2, #16]!
   10936:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1093a:	f012 fbcb 	bl	230d4 <z_log_msg_static_create.constprop.0>
   1093e:	46a5      	mov	sp, r4
}
   10940:	3720      	adds	r7, #32
   10942:	46bd      	mov	sp, r7
   10944:	bdb0      	pop	{r4, r5, r7, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10946:	f013 fd4d 	bl	243e4 <bt_conn_get_dst>
   1094a:	4639      	mov	r1, r7
   1094c:	f7ff ff6e 	bl	1082c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
   10950:	466d      	mov	r5, sp
   10952:	b088      	sub	sp, #32
   10954:	466a      	mov	r2, sp
   10956:	4b11      	ldr	r3, [pc, #68]	; (1099c <connected+0x84>)
   10958:	480f      	ldr	r0, [pc, #60]	; (10998 <connected+0x80>)
   1095a:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1095e:	f44f 7300 	mov.w	r3, #512	; 0x200
   10962:	8393      	strh	r3, [r2, #28]
   10964:	4b0e      	ldr	r3, [pc, #56]	; (109a0 <connected+0x88>)
   10966:	f842 3f10 	str.w	r3, [r2, #16]!
   1096a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1096e:	f012 fbb1 	bl	230d4 <z_log_msg_static_create.constprop.0>
	printk("--------------------\nbuffer size %i\n", CONFIG_BT_NUS_UART_BUFFER_SIZE);
   10972:	2114      	movs	r1, #20
   10974:	46ad      	mov	sp, r5
   10976:	480b      	ldr	r0, [pc, #44]	; (109a4 <connected+0x8c>)
   10978:	f012 fc37 	bl	231ea <printk>
	printk(menu);
   1097c:	480a      	ldr	r0, [pc, #40]	; (109a8 <connected+0x90>)
   1097e:	f012 fc34 	bl	231ea <printk>
	current_conn = bt_conn_ref(conn);
   10982:	4620      	mov	r0, r4
   10984:	f007 f940 	bl	17c08 <bt_conn_ref>
   10988:	4b08      	ldr	r3, [pc, #32]	; (109ac <connected+0x94>)
   1098a:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   1098c:	2001      	movs	r0, #1
   1098e:	f014 ffa9 	bl	258e4 <dk_set_led_on>
   10992:	e7d5      	b.n	10940 <connected+0x28>
   10994:	00026bad 	.word	0x00026bad
   10998:	00026254 	.word	0x00026254
   1099c:	00026bc9 	.word	0x00026bc9
   109a0:	01000003 	.word	0x01000003
   109a4:	00026bd6 	.word	0x00026bd6
   109a8:	00026bfb 	.word	0x00026bfb
   109ac:	20002b34 	.word	0x20002b34

000109b0 <bt_receive_cb>:
static struct bt_conn_auth_info_cb conn_auth_info_callbacks;
#endif

static void bt_receive_cb(struct bt_conn *conn, const uint8_t *const data,
			  uint16_t len) // change priority 
{
   109b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109b4:	b095      	sub	sp, #84	; 0x54
	int err;
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   109b6:	2400      	movs	r4, #0
{
   109b8:	af00      	add	r7, sp, #0
   109ba:	4605      	mov	r5, r0
   109bc:	4689      	mov	r9, r1
   109be:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   109c0:	4621      	mov	r1, r4
   109c2:	221a      	movs	r2, #26
   109c4:	f107 0034 	add.w	r0, r7, #52	; 0x34
	uint8_t out[CONFIG_BT_NUS_UART_BUFFER_SIZE];
	int length;
	// unsigned char *out = k_malloc(64 * sizeof(char));
	printk("variable out at address 0x_%p\n", out);
   109c8:	f107 0804 	add.w	r8, r7, #4
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   109cc:	633c      	str	r4, [r7, #48]	; 0x30
   109ce:	f013 fa2c 	bl	23e2a <memset>
	printk("variable out at address 0x_%p\n", out);
   109d2:	4641      	mov	r1, r8
   109d4:	483d      	ldr	r0, [pc, #244]	; (10acc <bt_receive_cb+0x11c>)
   109d6:	f012 fc08 	bl	231ea <printk>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   109da:	f107 0a30 	add.w	sl, r7, #48	; 0x30
   109de:	4628      	mov	r0, r5
   109e0:	f013 fd00 	bl	243e4 <bt_conn_get_dst>
   109e4:	4651      	mov	r1, sl
   109e6:	f7ff ff21 	bl	1082c <bt_addr_le_to_str.constprop.0.isra.0>

	LOG_INF("Received data from: %s", addr);
   109ea:	466d      	mov	r5, sp
   109ec:	b088      	sub	sp, #32
   109ee:	466a      	mov	r2, sp
   109f0:	4b37      	ldr	r3, [pc, #220]	; (10ad0 <bt_receive_cb+0x120>)
   109f2:	4838      	ldr	r0, [pc, #224]	; (10ad4 <bt_receive_cb+0x124>)
   109f4:	e9c2 3a05 	strd	r3, sl, [r2, #20]
   109f8:	f44f 7300 	mov.w	r3, #512	; 0x200
   109fc:	8393      	strh	r3, [r2, #28]
   109fe:	4b36      	ldr	r3, [pc, #216]	; (10ad8 <bt_receive_cb+0x128>)
   10a00:	f842 3f10 	str.w	r3, [r2, #16]!
   10a04:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   10a08:	f012 fb64 	bl	230d4 <z_log_msg_static_create.constprop.0>
   10a0c:	46ad      	mov	sp, r5

	for (uint16_t pos = 0; pos != len;) {
   10a0e:	42b4      	cmp	r4, r6
   10a10:	d00f      	beq.n	10a32 <bt_receive_cb+0x82>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   10a12:	201c      	movs	r0, #28
   10a14:	f015 faa2 	bl	25f5c <k_malloc>

		if (!tx) {
   10a18:	4605      	mov	r5, r0
   10a1a:	b970      	cbnz	r0, 10a3a <bt_receive_cb+0x8a>
			LOG_WRN("Not able to allocate UART send data buffer");
   10a1c:	4b2f      	ldr	r3, [pc, #188]	; (10adc <bt_receive_cb+0x12c>)
   10a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   10a20:	482c      	ldr	r0, [pc, #176]	; (10ad4 <bt_receive_cb+0x124>)
   10a22:	2302      	movs	r3, #2
   10a24:	f107 0228 	add.w	r2, r7, #40	; 0x28
   10a28:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   10a2e:	f012 fb51 	bl	230d4 <z_log_msg_static_create.constprop.0>
static struct bt_nus_cb nus_cb = {
	.received = bt_receive_cb,
};

void error(void)
{
   10a32:	3754      	adds	r7, #84	; 0x54
   10a34:	46bd      	mov	sp, r7
   10a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((len - pos) > tx_data_size) {
   10a3a:	1b32      	subs	r2, r6, r4
   10a3c:	2a13      	cmp	r2, #19
			tx->len = (len - pos);
   10a3e:	bf94      	ite	ls
   10a40:	b292      	uxthls	r2, r2
			tx->len = tx_data_size;
   10a42:	2213      	movhi	r2, #19
		memcpy(tx->data, &data[pos], tx->len);
   10a44:	f100 0b04 	add.w	fp, r0, #4
   10a48:	8302      	strh	r2, [r0, #24]
   10a4a:	eb09 0104 	add.w	r1, r9, r4
   10a4e:	4658      	mov	r0, fp
   10a50:	f013 f9e0 	bl	23e14 <memcpy>
		pos += tx->len;
   10a54:	8b2b      	ldrh	r3, [r5, #24]
   10a56:	441c      	add	r4, r3
   10a58:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   10a5a:	42a6      	cmp	r6, r4
   10a5c:	d10a      	bne.n	10a74 <bt_receive_cb+0xc4>
   10a5e:	eb09 0206 	add.w	r2, r9, r6
   10a62:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   10a66:	2a0d      	cmp	r2, #13
   10a68:	d104      	bne.n	10a74 <bt_receive_cb+0xc4>
			tx->data[tx->len] = '\n';
   10a6a:	18ea      	adds	r2, r5, r3
   10a6c:	210a      	movs	r1, #10
			tx->len++;
   10a6e:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   10a70:	7111      	strb	r1, [r2, #4]
			tx->len++;
   10a72:	832b      	strh	r3, [r5, #24]
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10a74:	8b2a      	ldrh	r2, [r5, #24]
   10a76:	481a      	ldr	r0, [pc, #104]	; (10ae0 <bt_receive_cb+0x130>)
   10a78:	4659      	mov	r1, fp
   10a7a:	f012 fb36 	bl	230ea <uart_tx.constprop.0>
		memcpy(out, &(tx->data), sizeof(tx->data));
   10a7e:	4659      	mov	r1, fp
   10a80:	2214      	movs	r2, #20
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10a82:	4682      	mov	sl, r0
		memcpy(out, &(tx->data), sizeof(tx->data));
   10a84:	4640      	mov	r0, r8
   10a86:	f013 f9c5 	bl	23e14 <memcpy>
		length = tx->len;
   10a8a:	8b2b      	ldrh	r3, [r5, #24]
		printk("----------\nprinting message\n");
   10a8c:	4815      	ldr	r0, [pc, #84]	; (10ae4 <bt_receive_cb+0x134>)
		out[length] = NULL;
   10a8e:	3350      	adds	r3, #80	; 0x50
   10a90:	443b      	add	r3, r7
   10a92:	2200      	movs	r2, #0
   10a94:	f803 2c4c 	strb.w	r2, [r3, #-76]
		printk("----------\nprinting message\n");
   10a98:	f012 fba7 	bl	231ea <printk>
		printk("out is %i, c is %i\n", out, c);
   10a9c:	4a12      	ldr	r2, [pc, #72]	; (10ae8 <bt_receive_cb+0x138>)
   10a9e:	4813      	ldr	r0, [pc, #76]	; (10aec <bt_receive_cb+0x13c>)
   10aa0:	4641      	mov	r1, r8
   10aa2:	f012 fba2 	bl	231ea <printk>
		if(out == c){
   10aa6:	4b10      	ldr	r3, [pc, #64]	; (10ae8 <bt_receive_cb+0x138>)
   10aa8:	4598      	cmp	r8, r3
   10aaa:	d102      	bne.n	10ab2 <bt_receive_cb+0x102>
			printk("please enter the parameter\n");
   10aac:	4810      	ldr	r0, [pc, #64]	; (10af0 <bt_receive_cb+0x140>)
   10aae:	f012 fb9c 	bl	231ea <printk>
		printk("%s", out);
   10ab2:	4810      	ldr	r0, [pc, #64]	; (10af4 <bt_receive_cb+0x144>)
   10ab4:	4641      	mov	r1, r8
   10ab6:	f012 fb98 	bl	231ea <printk>
		if (err) {
   10aba:	f1ba 0f00 	cmp.w	sl, #0
   10abe:	d0a6      	beq.n	10a0e <bt_receive_cb+0x5e>
			k_fifo_put(&fifo_uart_tx_data, tx);
   10ac0:	480d      	ldr	r0, [pc, #52]	; (10af8 <bt_receive_cb+0x148>)
   10ac2:	4629      	mov	r1, r5
   10ac4:	f015 f88a 	bl	25bdc <k_queue_append>
   10ac8:	e7a1      	b.n	10a0e <bt_receive_cb+0x5e>
   10aca:	bf00      	nop
   10acc:	00026c3e 	.word	0x00026c3e
   10ad0:	00026c5d 	.word	0x00026c5d
   10ad4:	00026254 	.word	0x00026254
   10ad8:	01000003 	.word	0x01000003
   10adc:	00026c74 	.word	0x00026c74
   10ae0:	00026068 	.word	0x00026068
   10ae4:	00026c9f 	.word	0x00026c9f
   10ae8:	200053ac 	.word	0x200053ac
   10aec:	00026cbc 	.word	0x00026cbc
   10af0:	00026cd0 	.word	0x00026cd0
   10af4:	000284e0 	.word	0x000284e0
   10af8:	20000988 	.word	0x20000988

00010afc <uart_cb>:
{
   10afc:	b510      	push	{r4, lr}
	switch (evt->type) {
   10afe:	780b      	ldrb	r3, [r1, #0]
{
   10b00:	b086      	sub	sp, #24
	switch (evt->type) {
   10b02:	2b05      	cmp	r3, #5
   10b04:	d828      	bhi.n	10b58 <uart_cb+0x5c>
   10b06:	e8df f003 	tbb	[pc, r3]
   10b0a:	9503      	.short	0x9503
   10b0c:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
   10b10:	688b      	ldr	r3, [r1, #8]
   10b12:	b30b      	cbz	r3, 10b58 <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
   10b14:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   10b16:	b1f8      	cbz	r0, 10b58 <uart_cb+0x5c>
		if (aborted_buf) {
   10b18:	4a50      	ldr	r2, [pc, #320]	; (10c5c <uart_cb+0x160>)
   10b1a:	6813      	ldr	r3, [r2, #0]
   10b1c:	b1f3      	cbz	r3, 10b5c <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   10b1e:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   10b20:	2300      	movs	r3, #0
   10b22:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   10b24:	4a4e      	ldr	r2, [pc, #312]	; (10c60 <uart_cb+0x164>)
   10b26:	6013      	str	r3, [r2, #0]
		k_free(buf);
   10b28:	f015 fa11 	bl	25f4e <k_free>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
   10b2c:	484d      	ldr	r0, [pc, #308]	; (10c64 <uart_cb+0x168>)
   10b2e:	2200      	movs	r2, #0
   10b30:	2300      	movs	r3, #0
   10b32:	f00e ffcd 	bl	1fad0 <z_impl_k_queue_get>
		if (!buf) {
   10b36:	b178      	cbz	r0, 10b58 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   10b38:	8b02      	ldrh	r2, [r0, #24]
   10b3a:	1d01      	adds	r1, r0, #4
   10b3c:	484a      	ldr	r0, [pc, #296]	; (10c68 <uart_cb+0x16c>)
   10b3e:	f012 fad4 	bl	230ea <uart_tx.constprop.0>
   10b42:	b148      	cbz	r0, 10b58 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
   10b44:	4b49      	ldr	r3, [pc, #292]	; (10c6c <uart_cb+0x170>)
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   10b46:	9305      	str	r3, [sp, #20]
   10b48:	4849      	ldr	r0, [pc, #292]	; (10c70 <uart_cb+0x174>)
   10b4a:	2302      	movs	r3, #2
   10b4c:	aa04      	add	r2, sp, #16
   10b4e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10b52:	9304      	str	r3, [sp, #16]
   10b54:	f012 fabe 	bl	230d4 <z_log_msg_static_create.constprop.0>
}
   10b58:	b006      	add	sp, #24
   10b5a:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
   10b5c:	3804      	subs	r0, #4
   10b5e:	e7e3      	b.n	10b28 <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   10b60:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
   10b62:	68cb      	ldr	r3, [r1, #12]
   10b64:	8a90      	ldrh	r0, [r2, #20]
   10b66:	4403      	add	r3, r0
		if (disable_req) {
   10b68:	4842      	ldr	r0, [pc, #264]	; (10c74 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
   10b6a:	b29b      	uxth	r3, r3
   10b6c:	8293      	strh	r3, [r2, #20]
		if (disable_req) {
   10b6e:	7802      	ldrb	r2, [r0, #0]
   10b70:	2a00      	cmp	r2, #0
   10b72:	d1f1      	bne.n	10b58 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   10b74:	684a      	ldr	r2, [r1, #4]
   10b76:	4413      	add	r3, r2
   10b78:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   10b7c:	2b0a      	cmp	r3, #10
   10b7e:	d001      	beq.n	10b84 <uart_cb+0x88>
   10b80:	2b0d      	cmp	r3, #13
   10b82:	d1e9      	bne.n	10b58 <uart_cb+0x5c>
			disable_req = true;
   10b84:	2301      	movs	r3, #1
   10b86:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   10b88:	4837      	ldr	r0, [pc, #220]	; (10c68 <uart_cb+0x16c>)
   10b8a:	6883      	ldr	r3, [r0, #8]
   10b8c:	695b      	ldr	r3, [r3, #20]
}
   10b8e:	b006      	add	sp, #24
   10b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b94:	4718      	bx	r3
		disable_req = false;
   10b96:	4b37      	ldr	r3, [pc, #220]	; (10c74 <uart_cb+0x178>)
   10b98:	2400      	movs	r4, #0
		buf = k_malloc(sizeof(*buf));
   10b9a:	201c      	movs	r0, #28
		disable_req = false;
   10b9c:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
   10b9e:	f015 f9dd 	bl	25f5c <k_malloc>
		if (buf) {
   10ba2:	b138      	cbz	r0, 10bb4 <uart_cb+0xb8>
			buf->len = 0;
   10ba4:	8304      	strh	r4, [r0, #24]
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   10ba6:	1d01      	adds	r1, r0, #4
   10ba8:	482f      	ldr	r0, [pc, #188]	; (10c68 <uart_cb+0x16c>)
}
   10baa:	b006      	add	sp, #24
   10bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   10bb0:	f012 ba93 	b.w	230da <uart_rx_enable.constprop.0>
			LOG_WRN("UART_RX_DISABLED\nNot able to allocate UART receive buffer");
   10bb4:	4b30      	ldr	r3, [pc, #192]	; (10c78 <uart_cb+0x17c>)
   10bb6:	9305      	str	r3, [sp, #20]
   10bb8:	aa04      	add	r2, sp, #16
   10bba:	2302      	movs	r3, #2
   10bbc:	482c      	ldr	r0, [pc, #176]	; (10c70 <uart_cb+0x174>)
   10bbe:	9304      	str	r3, [sp, #16]
   10bc0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10bc4:	f012 fa86 	bl	230d4 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   10bc8:	482c      	ldr	r0, [pc, #176]	; (10c7c <uart_cb+0x180>)
   10bca:	f240 6267 	movw	r2, #1639	; 0x667
   10bce:	2300      	movs	r3, #0
}
   10bd0:	b006      	add	sp, #24
   10bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   10bd6:	f00f bcf7 	b.w	205c8 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   10bda:	201c      	movs	r0, #28
   10bdc:	f015 f9be 	bl	25f5c <k_malloc>
		if (buf) {
   10be0:	4601      	mov	r1, r0
   10be2:	b150      	cbz	r0, 10bfa <uart_cb+0xfe>
			buf->len = 0;
   10be4:	2300      	movs	r3, #0
   10be6:	8303      	strh	r3, [r0, #24]
	return api->rx_buf_rsp(dev, buf, len);
   10be8:	481f      	ldr	r0, [pc, #124]	; (10c68 <uart_cb+0x16c>)
   10bea:	6883      	ldr	r3, [r0, #8]
   10bec:	691b      	ldr	r3, [r3, #16]
   10bee:	2214      	movs	r2, #20
   10bf0:	3104      	adds	r1, #4
}
   10bf2:	b006      	add	sp, #24
   10bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10bf8:	4718      	bx	r3
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   10bfa:	4b21      	ldr	r3, [pc, #132]	; (10c80 <uart_cb+0x184>)
   10bfc:	e7a3      	b.n	10b46 <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
   10bfe:	684b      	ldr	r3, [r1, #4]
   10c00:	1f1c      	subs	r4, r3, #4
		if (buf->len > 0) {
   10c02:	8a9b      	ldrh	r3, [r3, #20]
   10c04:	b183      	cbz	r3, 10c28 <uart_cb+0x12c>
			LOG_INF("---------------\npushing to fifo\n");
   10c06:	4b1f      	ldr	r3, [pc, #124]	; (10c84 <uart_cb+0x188>)
   10c08:	9305      	str	r3, [sp, #20]
   10c0a:	4819      	ldr	r0, [pc, #100]	; (10c70 <uart_cb+0x174>)
   10c0c:	2302      	movs	r3, #2
   10c0e:	aa04      	add	r2, sp, #16
   10c10:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   10c14:	9304      	str	r3, [sp, #16]
   10c16:	f012 fa5d 	bl	230d4 <z_log_msg_static_create.constprop.0>
			k_fifo_put(&fifo_uart_rx_data, buf);
   10c1a:	481b      	ldr	r0, [pc, #108]	; (10c88 <uart_cb+0x18c>)
   10c1c:	4621      	mov	r1, r4
}
   10c1e:	b006      	add	sp, #24
   10c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
   10c24:	f014 bfda 	b.w	25bdc <k_queue_append>
			k_free(buf);
   10c28:	4620      	mov	r0, r4
}
   10c2a:	b006      	add	sp, #24
   10c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
   10c30:	f015 b98d 	b.w	25f4e <k_free>
		if (!aborted_buf) {
   10c34:	4a09      	ldr	r2, [pc, #36]	; (10c5c <uart_cb+0x160>)
   10c36:	6813      	ldr	r3, [r2, #0]
   10c38:	b90b      	cbnz	r3, 10c3e <uart_cb+0x142>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
   10c3a:	684b      	ldr	r3, [r1, #4]
   10c3c:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
   10c3e:	4808      	ldr	r0, [pc, #32]	; (10c60 <uart_cb+0x164>)
   10c40:	688b      	ldr	r3, [r1, #8]
   10c42:	6801      	ldr	r1, [r0, #0]
   10c44:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   10c46:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
   10c48:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
   10c4a:	8a8a      	ldrh	r2, [r1, #20]
		uart_tx(uart, &buf->data[aborted_len],
   10c4c:	4806      	ldr	r0, [pc, #24]	; (10c68 <uart_cb+0x16c>)
   10c4e:	1ad2      	subs	r2, r2, r3
   10c50:	4419      	add	r1, r3
}
   10c52:	b006      	add	sp, #24
   10c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
   10c58:	f012 ba47 	b.w	230ea <uart_tx.constprop.0>
   10c5c:	20002b2c 	.word	0x20002b2c
   10c60:	20002b28 	.word	0x20002b28
   10c64:	20000988 	.word	0x20000988
   10c68:	00026068 	.word	0x00026068
   10c6c:	00026cec 	.word	0x00026cec
   10c70:	00026254 	.word	0x00026254
   10c74:	20002f48 	.word	0x20002f48
   10c78:	00026d0a 	.word	0x00026d0a
   10c7c:	200017f0 	.word	0x200017f0
   10c80:	00026d44 	.word	0x00026d44
   10c84:	00026d81 	.word	0x00026d81
   10c88:	2000096c 	.word	0x2000096c

00010c8c <ble_write_thread>:
	k_sem_take(&ble_init_ok, K_FOREVER);
	printk("----------\nble_write_thread\n");

	
	for (;;) {
		/* Wait indefinitely for data from the UART peripheral */
   10c8c:	b570      	push	{r4, r5, r6, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10c8e:	f04f 32ff 	mov.w	r2, #4294967295
   10c92:	f04f 33ff 	mov.w	r3, #4294967295
   10c96:	480b      	ldr	r0, [pc, #44]	; (10cc4 <ble_write_thread+0x38>)
	return z_impl_k_queue_get(queue, timeout);
   10c98:	4e0b      	ldr	r6, [pc, #44]	; (10cc8 <ble_write_thread+0x3c>)

        /* Send data over Bluetooth LE to remote device(s) */
		
		/*
		if (bt_nus_send(NULL, buf->data, buf->len)) {
			LOG_WRN("Failed to send data over BLE connection");
   10c9a:	4d0c      	ldr	r5, [pc, #48]	; (10ccc <ble_write_thread+0x40>)
	return z_impl_k_sem_take(sem, timeout);
   10c9c:	f00e ffc6 	bl	1fc2c <z_impl_k_sem_take>

   10ca0:	480b      	ldr	r0, [pc, #44]	; (10cd0 <ble_write_thread+0x44>)
   10ca2:	f012 faa2 	bl	231ea <printk>
	return z_impl_k_queue_get(queue, timeout);
   10ca6:	f04f 32ff 	mov.w	r2, #4294967295
   10caa:	f04f 33ff 	mov.w	r3, #4294967295
   10cae:	4630      	mov	r0, r6
   10cb0:	f00e ff0e 	bl	1fad0 <z_impl_k_queue_get>
   10cb4:	4604      	mov	r4, r0
			LOG_WRN("Failed to send data over BLE connection");
   10cb6:	4628      	mov	r0, r5
   10cb8:	f012 fa97 	bl	231ea <printk>


	
}
/* Create a dedicated thread for sending the data over Bluetooth LE. */
K_THREAD_DEFINE(ble_write_thread_id, STACKSIZE, ble_write_thread, NULL, NULL, NULL, PRIORITY, 0, 0);
   10cbc:	4620      	mov	r0, r4
   10cbe:	f015 f946 	bl	25f4e <k_free>
		printk("incoming message:\n");
   10cc2:	e7f0      	b.n	10ca6 <ble_write_thread+0x1a>
   10cc4:	2000093c 	.word	0x2000093c
   10cc8:	2000096c 	.word	0x2000096c
   10ccc:	00026dbf 	.word	0x00026dbf
   10cd0:	00026da2 	.word	0x00026da2

00010cd4 <main>:
	err = uart_init();
   10cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10cd8:	b089      	sub	sp, #36	; 0x24
	}
   10cda:	2001      	movs	r0, #1
	err = uart_init();
   10cdc:	af02      	add	r7, sp, #8
	}
   10cde:	f015 f93d 	bl	25f5c <k_malloc>
{
   10ce2:	f00b fff5 	bl	1ccd0 <dk_leds_init>
	int blink_status = 0;
   10ce6:	b170      	cbz	r0, 10d06 <main+0x32>
	int err = 0;
   10ce8:	466c      	mov	r4, sp
   10cea:	b088      	sub	sp, #32
   10cec:	aa02      	add	r2, sp, #8
   10cee:	4b64      	ldr	r3, [pc, #400]	; (10e80 <main+0x1ac>)
   10cf0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10cf4:	2303      	movs	r3, #3
   10cf6:	f842 3f10 	str.w	r3, [r2, #16]!
   10cfa:	4862      	ldr	r0, [pc, #392]	; (10e84 <main+0x1b0>)
   10cfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10d00:	f012 f9e8 	bl	230d4 <z_log_msg_static_create.constprop.0>
   10d04:	46a5      	mov	sp, r4
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10d06:	4e60      	ldr	r6, [pc, #384]	; (10e88 <main+0x1b4>)
   10d08:	4630      	mov	r0, r6
   10d0a:	f014 ff05 	bl	25b18 <z_device_is_ready>
	if (!device_is_ready(uart)) {
   10d0e:	b1c0      	cbz	r0, 10d42 <main+0x6e>
	rx = k_malloc(sizeof(*rx));
   10d10:	201c      	movs	r0, #28
   10d12:	f015 f923 	bl	25f5c <k_malloc>
	if (rx) {
   10d16:	4680      	mov	r8, r0
   10d18:	b198      	cbz	r0, 10d42 <main+0x6e>
		rx->len = 0;
   10d1a:	2400      	movs	r4, #0
   10d1c:	8304      	strh	r4, [r0, #24]
	k_work_init_delayable(&uart_work, uart_work_handler);
   10d1e:	495b      	ldr	r1, [pc, #364]	; (10e8c <main+0x1b8>)
   10d20:	485b      	ldr	r0, [pc, #364]	; (10e90 <main+0x1bc>)
   10d22:	f00f fb35 	bl	20390 <k_work_init_delayable>
	if (api->callback_set == NULL) {
   10d26:	68b3      	ldr	r3, [r6, #8]
   10d28:	681b      	ldr	r3, [r3, #0]
   10d2a:	b963      	cbnz	r3, 10d46 <main+0x72>
		LOG_ERR("Cannot initialize UART callback");
   10d2c:	4b59      	ldr	r3, [pc, #356]	; (10e94 <main+0x1c0>)
   10d2e:	617b      	str	r3, [r7, #20]
   10d30:	2302      	movs	r3, #2
   10d32:	4854      	ldr	r0, [pc, #336]	; (10e84 <main+0x1b0>)
   10d34:	613b      	str	r3, [r7, #16]
   10d36:	f107 0210 	add.w	r2, r7, #16
   10d3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d3e:	f012 f9c9 	bl	230d4 <z_log_msg_static_create.constprop.0>
			return;
   10d42:	f012 f9da 	bl	230fa <error>
	return api->callback_set(dev, callback, user_data);
   10d46:	4954      	ldr	r1, [pc, #336]	; (10e98 <main+0x1c4>)
   10d48:	4622      	mov	r2, r4
   10d4a:	4630      	mov	r0, r6
   10d4c:	4798      	blx	r3
	if (err) {
   10d4e:	2800      	cmp	r0, #0
   10d50:	d1ec      	bne.n	10d2c <main+0x58>
	tx = k_malloc(sizeof(*tx));
   10d52:	201c      	movs	r0, #28
   10d54:	f015 f902 	bl	25f5c <k_malloc>
	if (tx) {
   10d58:	4605      	mov	r5, r0
   10d5a:	2800      	cmp	r0, #0
   10d5c:	d0f1      	beq.n	10d42 <main+0x6e>
		pos = snprintf(tx->data, sizeof(tx->data),
   10d5e:	f100 0904 	add.w	r9, r0, #4
   10d62:	4a4e      	ldr	r2, [pc, #312]	; (10e9c <main+0x1c8>)
   10d64:	2114      	movs	r1, #20
   10d66:	4648      	mov	r0, r9
   10d68:	f003 ffd6 	bl	14d18 <snprintf>
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   10d6c:	2813      	cmp	r0, #19
		pos = snprintf(tx->data, sizeof(tx->data),
   10d6e:	4604      	mov	r4, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   10d70:	d913      	bls.n	10d9a <main+0xc6>
			k_free(tx);
   10d72:	4628      	mov	r0, r5
   10d74:	f015 f8eb 	bl	25f4e <k_free>
			LOG_ERR("snprintf returned %d", pos);
   10d78:	466d      	mov	r5, sp
   10d7a:	b088      	sub	sp, #32
   10d7c:	ab02      	add	r3, sp, #8
   10d7e:	4a48      	ldr	r2, [pc, #288]	; (10ea0 <main+0x1cc>)
   10d80:	4840      	ldr	r0, [pc, #256]	; (10e84 <main+0x1b0>)
   10d82:	e9c3 2405 	strd	r2, r4, [r3, #20]
   10d86:	461a      	mov	r2, r3
   10d88:	2303      	movs	r3, #3
   10d8a:	f842 3f10 	str.w	r3, [r2, #16]!
   10d8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10d92:	f012 f99f 	bl	230d4 <z_log_msg_static_create.constprop.0>
   10d96:	46ad      	mov	sp, r5
			LOG_ERR("Failed to register authorization callbacks.\n");
   10d98:	e7d3      	b.n	10d42 <main+0x6e>
		tx->len = pos;
   10d9a:	8328      	strh	r0, [r5, #24]
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10d9c:	4602      	mov	r2, r0
   10d9e:	4649      	mov	r1, r9
   10da0:	4630      	mov	r0, r6
   10da2:	f012 f9a2 	bl	230ea <uart_tx.constprop.0>
	if (err) {
   10da6:	b178      	cbz	r0, 10dc8 <main+0xf4>
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   10da8:	466c      	mov	r4, sp
   10daa:	b088      	sub	sp, #32
   10dac:	aa02      	add	r2, sp, #8
   10dae:	4b3d      	ldr	r3, [pc, #244]	; (10ea4 <main+0x1d0>)
   10db0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10db4:	2303      	movs	r3, #3
   10db6:	f842 3f10 	str.w	r3, [r2, #16]!
   10dba:	4832      	ldr	r0, [pc, #200]	; (10e84 <main+0x1b0>)
   10dbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10dc0:	f012 f988 	bl	230d4 <z_log_msg_static_create.constprop.0>
   10dc4:	46a5      	mov	sp, r4
			LOG_ERR("Failed to register authorization callbacks.\n");
   10dc6:	e7bc      	b.n	10d42 <main+0x6e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
   10dc8:	f108 0104 	add.w	r1, r8, #4
   10dcc:	4630      	mov	r0, r6
   10dce:	f012 f984 	bl	230da <uart_rx_enable.constprop.0>
			LOG_ERR("Failed to register authorization callbacks.\n");
   10dd2:	2800      	cmp	r0, #0
   10dd4:	d1b5      	bne.n	10d42 <main+0x6e>
	k_sem_give(&ble_init_ok);
   10dd6:	f005 fdb1 	bl	1693c <bt_enable>

   10dda:	2800      	cmp	r0, #0
   10ddc:	d1b1      	bne.n	10d42 <main+0x6e>
/* Pass your application callback function to the NUS service */
   10dde:	4b32      	ldr	r3, [pc, #200]	; (10ea8 <main+0x1d4>)
   10de0:	617b      	str	r3, [r7, #20]
   10de2:	2302      	movs	r3, #2
   10de4:	4827      	ldr	r0, [pc, #156]	; (10e84 <main+0x1b0>)
   10de6:	613b      	str	r3, [r7, #16]
   10de8:	f107 0210 	add.w	r2, r7, #16
   10dec:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   10df0:	f012 f970 	bl	230d4 <z_log_msg_static_create.constprop.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10df4:	482d      	ldr	r0, [pc, #180]	; (10eac <main+0x1d8>)
   10df6:	f00e fed5 	bl	1fba4 <z_impl_k_sem_give>
			      ARRAY_SIZE(sd));
   10dfa:	482d      	ldr	r0, [pc, #180]	; (10eb0 <main+0x1dc>)
   10dfc:	f003 f806 	bl	13e0c <bt_nus_init>
	if (err) {
   10e00:	b190      	cbz	r0, 10e28 <main+0x154>
		LOG_ERR("Advertising failed to start (err %d)", err);
   10e02:	466c      	mov	r4, sp
   10e04:	b088      	sub	sp, #32
   10e06:	aa02      	add	r2, sp, #8
   10e08:	4b2a      	ldr	r3, [pc, #168]	; (10eb4 <main+0x1e0>)
   10e0a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10e0e:	2303      	movs	r3, #3
   10e10:	f842 3f10 	str.w	r3, [r2, #16]!
   10e14:	481b      	ldr	r0, [pc, #108]	; (10e84 <main+0x1b0>)
   10e16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10e1a:	f012 f95b 	bl	230d4 <z_log_msg_static_create.constprop.0>
   10e1e:	46a5      	mov	sp, r4

   10e20:	371c      	adds	r7, #28
   10e22:	46bd      	mov	sp, r7
   10e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (;;) {
   10e28:	4d23      	ldr	r5, [pc, #140]	; (10eb8 <main+0x1e4>)
   10e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10e2c:	463c      	mov	r4, r7
   10e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e30:	682b      	ldr	r3, [r5, #0]
   10e32:	6023      	str	r3, [r4, #0]
   10e34:	2301      	movs	r3, #1
   10e36:	9300      	str	r3, [sp, #0]
   10e38:	4920      	ldr	r1, [pc, #128]	; (10ebc <main+0x1e8>)
   10e3a:	4b21      	ldr	r3, [pc, #132]	; (10ec0 <main+0x1ec>)
   10e3c:	2202      	movs	r2, #2
   10e3e:	4638      	mov	r0, r7
   10e40:	f006 fa74 	bl	1732c <bt_le_adv_start>
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
   10e44:	4604      	mov	r4, r0
   10e46:	b178      	cbz	r0, 10e68 <main+0x194>
	}
   10e48:	466d      	mov	r5, sp
   10e4a:	b088      	sub	sp, #32
   10e4c:	aa02      	add	r2, sp, #8
   10e4e:	4b1d      	ldr	r3, [pc, #116]	; (10ec4 <main+0x1f0>)
   10e50:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10e54:	2303      	movs	r3, #3
   10e56:	f842 3f10 	str.w	r3, [r2, #16]!
   10e5a:	480a      	ldr	r0, [pc, #40]	; (10e84 <main+0x1b0>)
   10e5c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10e60:	f012 f938 	bl	230d4 <z_log_msg_static_create.constprop.0>
   10e64:	46ad      	mov	sp, r5
}
   10e66:	e7db      	b.n	10e20 <main+0x14c>
	/* Don't go any further until BLE is initialized */
   10e68:	3401      	adds	r4, #1
   10e6a:	f004 0101 	and.w	r1, r4, #1
   10e6e:	2000      	movs	r0, #0
   10e70:	f00b ff5a 	bl	1cd28 <dk_set_led>
	return z_impl_k_sleep(timeout);
   10e74:	2100      	movs	r1, #0
   10e76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e7a:	f010 fce5 	bl	21848 <z_impl_k_sleep>
{
   10e7e:	e7f3      	b.n	10e68 <main+0x194>
   10e80:	00026dd2 	.word	0x00026dd2
   10e84:	00026254 	.word	0x00026254
   10e88:	00026068 	.word	0x00026068
   10e8c:	00010805 	.word	0x00010805
   10e90:	200017f0 	.word	0x200017f0
   10e94:	00026ded 	.word	0x00026ded
   10e98:	00010afd 	.word	0x00010afd
   10e9c:	00026e0d 	.word	0x00026e0d
   10ea0:	00026e1b 	.word	0x00026e1b
   10ea4:	00026e30 	.word	0x00026e30
   10ea8:	00026e59 	.word	0x00026e59
   10eac:	2000093c 	.word	0x2000093c
   10eb0:	200005c0 	.word	0x200005c0
   10eb4:	00026e6f 	.word	0x00026e6f
   10eb8:	00026380 	.word	0x00026380
   10ebc:	00026420 	.word	0x00026420
   10ec0:	00026418 	.word	0x00026418
   10ec4:	00026e9b 	.word	0x00026e9b

00010ec8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   10ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ecc:	b091      	sub	sp, #68	; 0x44
   10ece:	4605      	mov	r5, r0
   10ed0:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   10ed2:	f002 0304 	and.w	r3, r2, #4
   10ed6:	9301      	str	r3, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   10ed8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   10edc:	3301      	adds	r3, #1
   10ede:	9304      	str	r3, [sp, #16]
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   10ee0:	0783      	lsls	r3, r0, #30
   10ee2:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
{
   10ee6:	9202      	str	r2, [sp, #8]
   10ee8:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
   10eea:	f040 81fe 	bne.w	112ea <cbvprintf_package+0x422>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   10eee:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   10ef0:	b130      	cbz	r0, 10f00 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   10ef2:	2907      	cmp	r1, #7
   10ef4:	d809      	bhi.n	10f0a <cbvprintf_package+0x42>
		return -ENOSPC;
   10ef6:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   10efa:	b011      	add	sp, #68	; 0x44
   10efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   10f00:	f001 0607 	and.w	r6, r1, #7
   10f04:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   10f06:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   10f0a:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   10f0c:	f04f 0800 	mov.w	r8, #0
	align = VA_STACK_ALIGN(char *);
   10f10:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
   10f14:	1e59      	subs	r1, r3, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   10f16:	f8cd 800c 	str.w	r8, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   10f1a:	4647      	mov	r7, r8
	bool parsing = false;
   10f1c:	4643      	mov	r3, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   10f1e:	f04f 32ff 	mov.w	r2, #4294967295
	size = sizeof(char *);
   10f22:	46da      	mov	sl, fp
			if (buf0 != NULL) {
   10f24:	b10d      	cbz	r5, 10f2a <cbvprintf_package+0x62>
				*(const char **)buf = s;
   10f26:	9800      	ldr	r0, [sp, #0]
   10f28:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   10f2a:	9804      	ldr	r0, [sp, #16]
   10f2c:	2800      	cmp	r0, #0
   10f2e:	f300 80e1 	bgt.w	110f4 <cbvprintf_package+0x22c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   10f32:	489c      	ldr	r0, [pc, #624]	; (111a4 <cbvprintf_package+0x2dc>)
   10f34:	f8dd c000 	ldr.w	ip, [sp]
   10f38:	4584      	cmp	ip, r0
   10f3a:	d303      	bcc.n	10f44 <cbvprintf_package+0x7c>
   10f3c:	489a      	ldr	r0, [pc, #616]	; (111a8 <cbvprintf_package+0x2e0>)
   10f3e:	4584      	cmp	ip, r0
   10f40:	f0c0 80d8 	bcc.w	110f4 <cbvprintf_package+0x22c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10f44:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   10f48:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10f4c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   10f50:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10f54:	f000 80e9 	beq.w	1112a <cbvprintf_package+0x262>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   10f58:	f04f 0c00 	mov.w	ip, #0
   10f5c:	e0d3      	b.n	11106 <cbvprintf_package+0x23e>
			switch (*fmt) {
   10f5e:	287a      	cmp	r0, #122	; 0x7a
   10f60:	d864      	bhi.n	1102c <cbvprintf_package+0x164>
   10f62:	284b      	cmp	r0, #75	; 0x4b
   10f64:	d80f      	bhi.n	10f86 <cbvprintf_package+0xbe>
   10f66:	2847      	cmp	r0, #71	; 0x47
   10f68:	d860      	bhi.n	1102c <cbvprintf_package+0x164>
   10f6a:	2829      	cmp	r0, #41	; 0x29
   10f6c:	d82f      	bhi.n	10fce <cbvprintf_package+0x106>
   10f6e:	2825      	cmp	r0, #37	; 0x25
   10f70:	d05b      	beq.n	1102a <cbvprintf_package+0x162>
   10f72:	d85b      	bhi.n	1102c <cbvprintf_package+0x164>
   10f74:	2820      	cmp	r0, #32
   10f76:	d07f      	beq.n	11078 <cbvprintf_package+0x1b0>
   10f78:	f1a0 0923 	sub.w	r9, r0, #35	; 0x23
   10f7c:	f1d9 0300 	rsbs	r3, r9, #0
   10f80:	eb43 0309 	adc.w	r3, r3, r9
   10f84:	e078      	b.n	11078 <cbvprintf_package+0x1b0>
   10f86:	f1a0 0e4c 	sub.w	lr, r0, #76	; 0x4c
   10f8a:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
   10f8e:	d84d      	bhi.n	1102c <cbvprintf_package+0x164>
   10f90:	e8df f00e 	tbb	[pc, lr]
   10f94:	4c4c4c72 	.word	0x4c4c4c72
   10f98:	4c4c4c4c 	.word	0x4c4c4c4c
   10f9c:	4c4c4c4c 	.word	0x4c4c4c4c
   10fa0:	4c4c4c4e 	.word	0x4c4c4c4e
   10fa4:	4c4c4c4c 	.word	0x4c4c4c4c
   10fa8:	4e4c5c4c 	.word	0x4e4c5c4c
   10fac:	5c5c5c4e 	.word	0x5c5c5c4e
   10fb0:	4c6f4e72 	.word	0x4c6f4e72
   10fb4:	4e184c72 	.word	0x4e184c72
   10fb8:	814c4c18 	.word	0x814c4c18
   10fbc:	4c4c4e7e 	.word	0x4c4c4e7e
   10fc0:	4c4e      	.short	0x4c4e
   10fc2:	7e          	.byte	0x7e
   10fc3:	00          	.byte	0x00
   10fc4:	2000      	movs	r0, #0
   10fc6:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
   10fc8:	f04f 0b04 	mov.w	fp, #4
   10fcc:	e03c      	b.n	11048 <cbvprintf_package+0x180>
			switch (*fmt) {
   10fce:	f1a0 0e2a 	sub.w	lr, r0, #42	; 0x2a
   10fd2:	fa5f fe8e 	uxtb.w	lr, lr
   10fd6:	2001      	movs	r0, #1
   10fd8:	fa00 fe0e 	lsl.w	lr, r0, lr
   10fdc:	f64f 70da 	movw	r0, #65498	; 0xffda
   10fe0:	ea1e 0f00 	tst.w	lr, r0
   10fe4:	d148      	bne.n	11078 <cbvprintf_package+0x1b0>
   10fe6:	f01e 5062 	ands.w	r0, lr, #947912704	; 0x38800000
   10fea:	d12f      	bne.n	1104c <cbvprintf_package+0x184>
   10fec:	f01e 0301 	ands.w	r3, lr, #1
   10ff0:	d042      	beq.n	11078 <cbvprintf_package+0x1b0>
		buf = (void *) ROUND_UP(buf, align);
   10ff2:	3c01      	subs	r4, #1
   10ff4:	445c      	add	r4, fp
   10ff6:	f1cb 0e00 	rsb	lr, fp, #0
   10ffa:	ea04 040e 	and.w	r4, r4, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   10ffe:	2d00      	cmp	r5, #0
   11000:	d05e      	beq.n	110c0 <cbvprintf_package+0x1f8>
   11002:	ebaa 0e05 	sub.w	lr, sl, r5
   11006:	44a6      	add	lr, r4
   11008:	45b6      	cmp	lr, r6
   1100a:	f63f af74 	bhi.w	10ef6 <cbvprintf_package+0x2e>
		if (is_str_arg) {
   1100e:	2800      	cmp	r0, #0
   11010:	d168      	bne.n	110e4 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
   11012:	f1ba 0f04 	cmp.w	sl, #4
   11016:	d143      	bne.n	110a0 <cbvprintf_package+0x1d8>
			int v = va_arg(ap, int);
   11018:	46e1      	mov	r9, ip
   1101a:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
   1101e:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
   11020:	3404      	adds	r4, #4
   11022:	46cc      	mov	ip, r9
   11024:	f04f 0a04 	mov.w	sl, #4
   11028:	e026      	b.n	11078 <cbvprintf_package+0x1b0>
				arg_idx--;
   1102a:	3a01      	subs	r2, #1
				parsing = false;
   1102c:	2300      	movs	r3, #0
				continue;
   1102e:	e023      	b.n	11078 <cbvprintf_package+0x1b0>
				if (fmt[-1] == 'l') {
   11030:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   11034:	2b6c      	cmp	r3, #108	; 0x6c
   11036:	d130      	bne.n	1109a <cbvprintf_package+0x1d2>
					if (fmt[-2] == 'l') {
   11038:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   1103c:	2000      	movs	r0, #0
   1103e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   11040:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
   11042:	d1c1      	bne.n	10fc8 <cbvprintf_package+0x100>
						align = VA_STACK_ALIGN(long long);
   11044:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
   11048:	46da      	mov	sl, fp
   1104a:	e7d2      	b.n	10ff2 <cbvprintf_package+0x12a>
					v.ld = va_arg(ap, long double);
   1104c:	f10c 0907 	add.w	r9, ip, #7
   11050:	f029 0c07 	bic.w	ip, r9, #7
				buf = (void *) ROUND_UP(buf, align);
   11054:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   11056:	e8fc ab02 	ldrd	sl, fp, [ip], #8
				buf = (void *) ROUND_UP(buf, align);
   1105a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1105e:	b135      	cbz	r5, 1106e <cbvprintf_package+0x1a6>
					if (BUF_OFFSET + size > len) {
   11060:	9805      	ldr	r0, [sp, #20]
   11062:	4420      	add	r0, r4
   11064:	42b0      	cmp	r0, r6
   11066:	f63f af46 	bhi.w	10ef6 <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
   1106a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1106e:	3408      	adds	r4, #8
				parsing = false;
   11070:	2300      	movs	r3, #0
			switch (*fmt) {
   11072:	f04f 0b08 	mov.w	fp, #8
   11076:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
   11078:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1107c:	2800      	cmp	r0, #0
   1107e:	f000 80bc 	beq.w	111fa <cbvprintf_package+0x332>
			if (!parsing) {
   11082:	2b00      	cmp	r3, #0
   11084:	f47f af6b 	bne.w	10f5e <cbvprintf_package+0x96>
				if (*fmt == '%') {
   11088:	2825      	cmp	r0, #37	; 0x25
   1108a:	d1f5      	bne.n	11078 <cbvprintf_package+0x1b0>
					arg_idx++;
   1108c:	3201      	adds	r2, #1
					parsing = true;
   1108e:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
   11090:	f04f 0b04 	mov.w	fp, #4
   11094:	e7ef      	b.n	11076 <cbvprintf_package+0x1ae>
			switch (*fmt) {
   11096:	4618      	mov	r0, r3
   11098:	e795      	b.n	10fc6 <cbvprintf_package+0xfe>
   1109a:	2000      	movs	r0, #0
				parsing = false;
   1109c:	4603      	mov	r3, r0
   1109e:	e7a8      	b.n	10ff2 <cbvprintf_package+0x12a>
		} else if (size == sizeof(long long)) {
   110a0:	f1ba 0f08 	cmp.w	sl, #8
   110a4:	f040 809b 	bne.w	111de <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
   110a8:	f10c 0907 	add.w	r9, ip, #7
   110ac:	f029 0c07 	bic.w	ip, r9, #7
   110b0:	e8fc 9a02 	ldrd	r9, sl, [ip], #8
					*(long long *)buf = v;
   110b4:	e9c4 9a00 	strd	r9, sl, [r4]
			buf += sizeof(long long);
   110b8:	3408      	adds	r4, #8
   110ba:	f04f 0a08 	mov.w	sl, #8
   110be:	e7db      	b.n	11078 <cbvprintf_package+0x1b0>
		if (is_str_arg) {
   110c0:	b980      	cbnz	r0, 110e4 <cbvprintf_package+0x21c>
		} else if (size == sizeof(int)) {
   110c2:	f1ba 0f04 	cmp.w	sl, #4
   110c6:	d102      	bne.n	110ce <cbvprintf_package+0x206>
			int v = va_arg(ap, int);
   110c8:	f10c 0904 	add.w	r9, ip, #4
			if (buf0 != NULL) {
   110cc:	e7a8      	b.n	11020 <cbvprintf_package+0x158>
		} else if (size == sizeof(long long)) {
   110ce:	f1ba 0f08 	cmp.w	sl, #8
   110d2:	f040 8084 	bne.w	111de <cbvprintf_package+0x316>
			long long v = va_arg(ap, long long);
   110d6:	f10c 0907 	add.w	r9, ip, #7
   110da:	f029 0907 	bic.w	r9, r9, #7
   110de:	f109 0c08 	add.w	ip, r9, #8
			if (buf0 != NULL) {
   110e2:	e7e9      	b.n	110b8 <cbvprintf_package+0x1f0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   110e4:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
   110e6:	46e1      	mov	r9, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   110e8:	3801      	subs	r0, #1
   110ea:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
   110ec:	f859 0b04 	ldr.w	r0, [r9], #4
   110f0:	9000      	str	r0, [sp, #0]
   110f2:	e717      	b.n	10f24 <cbvprintf_package+0x5c>
			if (is_ro && !do_ro) {
   110f4:	9802      	ldr	r0, [sp, #8]
   110f6:	0780      	lsls	r0, r0, #30
   110f8:	d548      	bpl.n	1118c <cbvprintf_package+0x2c4>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   110fa:	eba4 0e05 	sub.w	lr, r4, r5
   110fe:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11102:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11106:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1110a:	d31d      	bcc.n	11148 <cbvprintf_package+0x280>
					__ASSERT(false, "String with too many arguments");
   1110c:	4927      	ldr	r1, [pc, #156]	; (111ac <cbvprintf_package+0x2e4>)
   1110e:	4a28      	ldr	r2, [pc, #160]	; (111b0 <cbvprintf_package+0x2e8>)
   11110:	4828      	ldr	r0, [pc, #160]	; (111b4 <cbvprintf_package+0x2ec>)
   11112:	f240 237b 	movw	r3, #635	; 0x27b
   11116:	f012 fa70 	bl	235fa <assert_print>
   1111a:	4827      	ldr	r0, [pc, #156]	; (111b8 <cbvprintf_package+0x2f0>)
   1111c:	f012 fa6d 	bl	235fa <assert_print>
   11120:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
   11124:	4822      	ldr	r0, [pc, #136]	; (111b0 <cbvprintf_package+0x2e8>)
   11126:	f012 fa61 	bl	235ec <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1112a:	2f0f      	cmp	r7, #15
   1112c:	d80e      	bhi.n	1114c <cbvprintf_package+0x284>
				if (buf0 != NULL) {
   1112e:	2d00      	cmp	r5, #0
   11130:	d046      	beq.n	111c0 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11132:	f107 0c40 	add.w	ip, r7, #64	; 0x40
   11136:	44ec      	add	ip, sp
   11138:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   1113c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   11140:	9803      	ldr	r0, [sp, #12]
   11142:	3001      	adds	r0, #1
   11144:	9003      	str	r0, [sp, #12]
   11146:	e020      	b.n	1118a <cbvprintf_package+0x2c2>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11148:	2f0f      	cmp	r7, #15
   1114a:	d90c      	bls.n	11166 <cbvprintf_package+0x29e>
					__ASSERT(false, "str_ptr_pos[] too small");
   1114c:	4917      	ldr	r1, [pc, #92]	; (111ac <cbvprintf_package+0x2e4>)
   1114e:	4a18      	ldr	r2, [pc, #96]	; (111b0 <cbvprintf_package+0x2e8>)
   11150:	4818      	ldr	r0, [pc, #96]	; (111b4 <cbvprintf_package+0x2ec>)
   11152:	f44f 7320 	mov.w	r3, #640	; 0x280
   11156:	f012 fa50 	bl	235fa <assert_print>
   1115a:	4818      	ldr	r0, [pc, #96]	; (111bc <cbvprintf_package+0x2f4>)
   1115c:	f012 fa4d 	bl	235fa <assert_print>
   11160:	f44f 7120 	mov.w	r1, #640	; 0x280
   11164:	e7de      	b.n	11124 <cbvprintf_package+0x25c>
				if (buf0 != NULL) {
   11166:	b1bd      	cbz	r5, 11198 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11168:	f107 0e40 	add.w	lr, r7, #64	; 0x40
   1116c:	44ee      	add	lr, sp
   1116e:	b2c0      	uxtb	r0, r0
   11170:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11174:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   11178:	f1bc 0f00 	cmp.w	ip, #0
   1117c:	d0e0      	beq.n	11140 <cbvprintf_package+0x278>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   1117e:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11182:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   11186:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
   1118a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   1118c:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
   11190:	3404      	adds	r4, #4
			is_str_arg = false;
   11192:	46cc      	mov	ip, r9
					if (BUF_OFFSET + size > len) {
   11194:	9005      	str	r0, [sp, #20]
   11196:	e76f      	b.n	11078 <cbvprintf_package+0x1b0>
				} else if (is_ro) {
   11198:	f1bc 0f00 	cmp.w	ip, #0
   1119c:	d010      	beq.n	111c0 <cbvprintf_package+0x2f8>
					len += 1;
   1119e:	3601      	adds	r6, #1
   111a0:	e7f3      	b.n	1118a <cbvprintf_package+0x2c2>
   111a2:	bf00      	nop
   111a4:	00025f70 	.word	0x00025f70
   111a8:	0002ace8 	.word	0x0002ace8
   111ac:	00029a2c 	.word	0x00029a2c
   111b0:	00026eec 	.word	0x00026eec
   111b4:	00026f1a 	.word	0x00026f1a
   111b8:	00026f37 	.word	0x00026f37
   111bc:	00026f58 	.word	0x00026f58
				} else if (rws_pos_en) {
   111c0:	9801      	ldr	r0, [sp, #4]
					len += 2;
   111c2:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   111c4:	2800      	cmp	r0, #0
   111c6:	d1e0      	bne.n	1118a <cbvprintf_package+0x2c2>
					len += strlen(s) + 1 + 1;
   111c8:	9800      	ldr	r0, [sp, #0]
   111ca:	9205      	str	r2, [sp, #20]
   111cc:	e9cd 3106 	strd	r3, r1, [sp, #24]
   111d0:	f012 fe00 	bl	23dd4 <strlen>
   111d4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   111d8:	9a05      	ldr	r2, [sp, #20]
   111da:	4406      	add	r6, r0
   111dc:	e7d5      	b.n	1118a <cbvprintf_package+0x2c2>
			__ASSERT(false, "unexpected size %u", size);
   111de:	4a44      	ldr	r2, [pc, #272]	; (112f0 <cbvprintf_package+0x428>)
   111e0:	4944      	ldr	r1, [pc, #272]	; (112f4 <cbvprintf_package+0x42c>)
   111e2:	4845      	ldr	r0, [pc, #276]	; (112f8 <cbvprintf_package+0x430>)
   111e4:	f240 23c5 	movw	r3, #709	; 0x2c5
   111e8:	f012 fa07 	bl	235fa <assert_print>
   111ec:	4651      	mov	r1, sl
   111ee:	4843      	ldr	r0, [pc, #268]	; (112fc <cbvprintf_package+0x434>)
   111f0:	f012 fa03 	bl	235fa <assert_print>
   111f4:	f240 21c5 	movw	r1, #709	; 0x2c5
   111f8:	e794      	b.n	11124 <cbvprintf_package+0x25c>
	if (BUF_OFFSET / sizeof(int) > 255) {
   111fa:	1b63      	subs	r3, r4, r5
   111fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11200:	d30c      	bcc.n	1121c <cbvprintf_package+0x354>
		__ASSERT(false, "too many format args");
   11202:	493c      	ldr	r1, [pc, #240]	; (112f4 <cbvprintf_package+0x42c>)
   11204:	4a3a      	ldr	r2, [pc, #232]	; (112f0 <cbvprintf_package+0x428>)
   11206:	483c      	ldr	r0, [pc, #240]	; (112f8 <cbvprintf_package+0x430>)
   11208:	f240 23d1 	movw	r3, #721	; 0x2d1
   1120c:	f012 f9f5 	bl	235fa <assert_print>
   11210:	483b      	ldr	r0, [pc, #236]	; (11300 <cbvprintf_package+0x438>)
   11212:	f012 f9f2 	bl	235fa <assert_print>
   11216:	f240 21d1 	movw	r1, #721	; 0x2d1
   1121a:	e783      	b.n	11124 <cbvprintf_package+0x25c>
	if (buf0 == NULL) {
   1121c:	b91d      	cbnz	r5, 11226 <cbvprintf_package+0x35e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1121e:	f1a6 0408 	sub.w	r4, r6, #8
   11222:	18e0      	adds	r0, r4, r3
   11224:	e669      	b.n	10efa <cbvprintf_package+0x32>
	if (rws_pos_en) {
   11226:	9a01      	ldr	r2, [sp, #4]
	*(char **)buf0 = NULL;
   11228:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   1122a:	089b      	lsrs	r3, r3, #2
   1122c:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1122e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (rws_pos_en) {
   11232:	b1c2      	cbz	r2, 11266 <cbvprintf_package+0x39e>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11234:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   11236:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
   1123a:	f1b8 0f00 	cmp.w	r8, #0
   1123e:	d005      	beq.n	1124c <cbvprintf_package+0x384>
   11240:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   11242:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   11244:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   11248:	4297      	cmp	r7, r2
   1124a:	d10e      	bne.n	1126a <cbvprintf_package+0x3a2>
		if (BUF_OFFSET + 1 + size > len) {
   1124c:	f1c5 0301 	rsb	r3, r5, #1
   11250:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
   11254:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   11258:	9302      	str	r3, [sp, #8]
			*buf++ = str_ptr_arg[i];
   1125a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   1125e:	4557      	cmp	r7, sl
   11260:	d112      	bne.n	11288 <cbvprintf_package+0x3c0>
	return BUF_OFFSET;
   11262:	1b60      	subs	r0, r4, r5
   11264:	e649      	b.n	10efa <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   11266:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   11268:	e7e5      	b.n	11236 <cbvprintf_package+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1126a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1126e:	0619      	lsls	r1, r3, #24
   11270:	d508      	bpl.n	11284 <cbvprintf_package+0x3bc>
			if (BUF_OFFSET + 1 > len) {
   11272:	eb04 0e0c 	add.w	lr, r4, ip
   11276:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   11278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1127c:	f63f ae3b 	bhi.w	10ef6 <cbvprintf_package+0x2e>
			*buf++ = pos;
   11280:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   11284:	3201      	adds	r2, #1
   11286:	e7df      	b.n	11248 <cbvprintf_package+0x380>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   11288:	f1b8 0f00 	cmp.w	r8, #0
   1128c:	d003      	beq.n	11296 <cbvprintf_package+0x3ce>
   1128e:	f999 2000 	ldrsb.w	r2, [r9]
   11292:	2a00      	cmp	r2, #0
   11294:	db17      	blt.n	112c6 <cbvprintf_package+0x3fe>
		if (rws_pos_en) {
   11296:	9b01      	ldr	r3, [sp, #4]
   11298:	b1d3      	cbz	r3, 112d0 <cbvprintf_package+0x408>
			*buf++ = str_ptr_arg[i];
   1129a:	f81a 200b 	ldrb.w	r2, [sl, fp]
   1129e:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   112a2:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   112a4:	9b02      	ldr	r3, [sp, #8]
   112a6:	1898      	adds	r0, r3, r2
   112a8:	4420      	add	r0, r4
   112aa:	42b0      	cmp	r0, r6
   112ac:	f63f ae23 	bhi.w	10ef6 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
   112b0:	f899 0000 	ldrb.w	r0, [r9]
   112b4:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   112b8:	9900      	ldr	r1, [sp, #0]
   112ba:	9203      	str	r2, [sp, #12]
   112bc:	4620      	mov	r0, r4
   112be:	f012 fda9 	bl	23e14 <memcpy>
		buf += size;
   112c2:	9a03      	ldr	r2, [sp, #12]
   112c4:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   112c6:	f10a 0a01 	add.w	sl, sl, #1
   112ca:	f109 0901 	add.w	r9, r9, #1
   112ce:	e7c6      	b.n	1125e <cbvprintf_package+0x396>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   112d0:	f899 2000 	ldrb.w	r2, [r9]
   112d4:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   112d8:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   112da:	9b01      	ldr	r3, [sp, #4]
   112dc:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   112e0:	9800      	ldr	r0, [sp, #0]
   112e2:	f012 fd77 	bl	23dd4 <strlen>
   112e6:	1c42      	adds	r2, r0, #1
   112e8:	e7dc      	b.n	112a4 <cbvprintf_package+0x3dc>
		return -EFAULT;
   112ea:	f06f 000d 	mvn.w	r0, #13
   112ee:	e604      	b.n	10efa <cbvprintf_package+0x32>
   112f0:	00026eec 	.word	0x00026eec
   112f4:	00029a2c 	.word	0x00029a2c
   112f8:	00026f1a 	.word	0x00026f1a
   112fc:	00026f72 	.word	0x00026f72
   11300:	00026f87 	.word	0x00026f87

00011304 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   11304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11308:	b095      	sub	sp, #84	; 0x54
   1130a:	af00      	add	r7, sp, #0
   1130c:	e9c7 1208 	strd	r1, r2, [r7, #32]
   11310:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   11314:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
   11316:	4604      	mov	r4, r0
   11318:	b958      	cbnz	r0, 11332 <cbprintf_package_convert+0x2e>
   1131a:	49a8      	ldr	r1, [pc, #672]	; (115bc <cbprintf_package_convert+0x2b8>)
   1131c:	4aa8      	ldr	r2, [pc, #672]	; (115c0 <cbprintf_package_convert+0x2bc>)
   1131e:	48a9      	ldr	r0, [pc, #676]	; (115c4 <cbprintf_package_convert+0x2c0>)
   11320:	f44f 7365 	mov.w	r3, #916	; 0x394
   11324:	f012 f969 	bl	235fa <assert_print>
   11328:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   1132c:	48a4      	ldr	r0, [pc, #656]	; (115c0 <cbprintf_package_convert+0x2bc>)
   1132e:	f012 f95d 	bl	235ec <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   11332:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   11336:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   11338:	6a3b      	ldr	r3, [r7, #32]
   1133a:	b953      	cbnz	r3, 11352 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
   1133c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   1133e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   11340:	7880      	ldrb	r0, [r0, #2]
   11342:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11346:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   11348:	6a3b      	ldr	r3, [r7, #32]
   1134a:	429e      	cmp	r6, r3
   1134c:	d81a      	bhi.n	11384 <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
   1134e:	1b03      	subs	r3, r0, r4
   11350:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
   11352:	f894 a002 	ldrb.w	sl, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   11356:	78e3      	ldrb	r3, [r4, #3]
   11358:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   1135a:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   1135c:	f1ba 0f00 	cmp.w	sl, #0
   11360:	d002      	beq.n	11368 <cbprintf_package_convert+0x64>
   11362:	f01b 0f01 	tst.w	fp, #1
   11366:	d117      	bne.n	11398 <cbprintf_package_convert+0x94>
	rw_cpy = rws_nbr > 0 &&
   11368:	697b      	ldr	r3, [r7, #20]
   1136a:	bb5b      	cbnz	r3, 113c4 <cbprintf_package_convert+0xc0>
		if (cb) {
   1136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1136e:	b11b      	cbz	r3, 11378 <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
   11370:	69ba      	ldr	r2, [r7, #24]
   11372:	6a39      	ldr	r1, [r7, #32]
   11374:	4620      	mov	r0, r4
   11376:	4798      	blx	r3
		return in_len;
   11378:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   1137a:	4628      	mov	r0, r5
   1137c:	3754      	adds	r7, #84	; 0x54
   1137e:	46bd      	mov	sp, r7
   11380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   11384:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   11386:	4628      	mov	r0, r5
   11388:	f012 fd24 	bl	23dd4 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   1138c:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   1138e:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   11390:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   11392:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   11394:	623b      	str	r3, [r7, #32]
   11396:	e7d7      	b.n	11348 <cbprintf_package_convert+0x44>
	rw_cpy = rws_nbr > 0 &&
   11398:	f894 8000 	ldrb.w	r8, [r4]
   1139c:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   1139e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   113a2:	ea4f 0288 	mov.w	r2, r8, lsl #2
   113a6:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   113a8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   113ac:	2b00      	cmp	r3, #0
   113ae:	f040 8115 	bne.w	115dc <cbprintf_package_convert+0x2d8>
		out_len = (int)in_len;
   113b2:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   113b4:	46c1      	mov	r9, r8
   113b6:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   113ba:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   113bc:	4599      	cmp	r9, r3
   113be:	d14e      	bne.n	1145e <cbprintf_package_convert+0x15a>
   113c0:	44d0      	add	r8, sl
   113c2:	e013      	b.n	113ec <cbprintf_package_convert+0xe8>
	rw_cpy = rws_nbr > 0 &&
   113c4:	f01b 0f02 	tst.w	fp, #2
   113c8:	d0d0      	beq.n	1136c <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
   113ca:	f894 8000 	ldrb.w	r8, [r4]
   113ce:	ea4f 0388 	mov.w	r3, r8, lsl #2
   113d2:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   113d4:	6863      	ldr	r3, [r4, #4]
   113d6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   113da:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   113de:	2b00      	cmp	r3, #0
   113e0:	d178      	bne.n	114d4 <cbprintf_package_convert+0x1d0>
		out_len = (int)in_len;
   113e2:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   113e4:	f1ba 0f00 	cmp.w	sl, #0
   113e8:	d14e      	bne.n	11488 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
   113ea:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   113ec:	f01b 0f05 	tst.w	fp, #5
   113f0:	bf0c      	ite	eq
   113f2:	2302      	moveq	r3, #2
   113f4:	2301      	movne	r3, #1
   113f6:	627b      	str	r3, [r7, #36]	; 0x24
   113f8:	697b      	ldr	r3, [r7, #20]
   113fa:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   113fe:	f00b 0302 	and.w	r3, fp, #2
   11402:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   11404:	45d0      	cmp	r8, sl
   11406:	d0b8      	beq.n	1137a <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
   11408:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   1140c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   11410:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   11414:	4b6c      	ldr	r3, [pc, #432]	; (115c8 <cbprintf_package_convert+0x2c4>)
   11416:	4599      	cmp	r9, r3
   11418:	d302      	bcc.n	11420 <cbprintf_package_convert+0x11c>
   1141a:	4b6c      	ldr	r3, [pc, #432]	; (115cc <cbprintf_package_convert+0x2c8>)
   1141c:	4599      	cmp	r9, r3
   1141e:	d339      	bcc.n	11494 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11420:	693b      	ldr	r3, [r7, #16]
   11422:	2b00      	cmp	r3, #0
   11424:	d043      	beq.n	114ae <cbprintf_package_convert+0x1aa>
   11426:	69f8      	ldr	r0, [r7, #28]
   11428:	f011 fea3 	bl	23172 <is_ptr>
   1142c:	2800      	cmp	r0, #0
   1142e:	d03e      	beq.n	114ae <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   11430:	46e9      	mov	r9, sp
   11432:	b08a      	sub	sp, #40	; 0x28
   11434:	466a      	mov	r2, sp
   11436:	4b66      	ldr	r3, [pc, #408]	; (115d0 <cbprintf_package_convert+0x2cc>)
   11438:	6153      	str	r3, [r2, #20]
   1143a:	69fb      	ldr	r3, [r7, #28]
   1143c:	e9c2 3106 	strd	r3, r1, [r2, #24]
   11440:	f44f 7300 	mov.w	r3, #512	; 0x200
   11444:	8413      	strh	r3, [r2, #32]
   11446:	4b63      	ldr	r3, [pc, #396]	; (115d4 <cbprintf_package_convert+0x2d0>)
   11448:	f842 3f10 	str.w	r3, [r2, #16]!
   1144c:	4862      	ldr	r0, [pc, #392]	; (115d8 <cbprintf_package_convert+0x2d4>)
   1144e:	2300      	movs	r3, #0
   11450:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   11454:	f001 ff2e 	bl	132b4 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   11458:	3d02      	subs	r5, #2
   1145a:	46cd      	mov	sp, r9
				continue;
   1145c:	e7d2      	b.n	11404 <cbprintf_package_convert+0x100>
				const char *str = *(const char **)&buf32[*str_pos];
   1145e:	f819 2b01 	ldrb.w	r2, [r9], #1
   11462:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11464:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   11468:	f012 fcb4 	bl	23dd4 <strlen>
				if (strl && strl_cnt < strl_len) {
   1146c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11470:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   11472:	b13a      	cbz	r2, 11484 <cbprintf_package_convert+0x180>
   11474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   11478:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   1147a:	bf3e      	ittt	cc
   1147c:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   1147e:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   11482:	3601      	addcc	r6, #1
				out_len += len;
   11484:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   11486:	e799      	b.n	113bc <cbprintf_package_convert+0xb8>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11488:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   1148c:	bf1c      	itt	ne
   1148e:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   11490:	44d0      	addne	r8, sl
   11492:	e7ab      	b.n	113ec <cbprintf_package_convert+0xe8>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11494:	693b      	ldr	r3, [r7, #16]
   11496:	b123      	cbz	r3, 114a2 <cbprintf_package_convert+0x19e>
   11498:	69f8      	ldr	r0, [r7, #28]
   1149a:	f011 fe6a 	bl	23172 <is_ptr>
   1149e:	2800      	cmp	r0, #0
   114a0:	d1c6      	bne.n	11430 <cbprintf_package_convert+0x12c>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   114a2:	f01b 0f01 	tst.w	fp, #1
   114a6:	d105      	bne.n	114b4 <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
   114a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   114aa:	1aed      	subs	r5, r5, r3
   114ac:	e7aa      	b.n	11404 <cbprintf_package_convert+0x100>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   114ae:	6a3b      	ldr	r3, [r7, #32]
   114b0:	2b00      	cmp	r3, #0
   114b2:	d0a7      	beq.n	11404 <cbprintf_package_convert+0x100>
		return 1 + strlen(str);
   114b4:	4648      	mov	r0, r9
   114b6:	f012 fc8d 	bl	23dd4 <strlen>
				if (strl && strl_cnt < strl_len) {
   114ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   114bc:	b143      	cbz	r3, 114d0 <cbprintf_package_convert+0x1cc>
   114be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   114c2:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   114c4:	bf3f      	itttt	cc
   114c6:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   114c8:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   114ca:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   114ce:	3601      	addcc	r6, #1
				out_len += (len - 1);
   114d0:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   114d2:	e797      	b.n	11404 <cbprintf_package_convert+0x100>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   114d4:	f1ba 0f00 	cmp.w	sl, #0
   114d8:	f000 8085 	beq.w	115e6 <cbprintf_package_convert+0x2e2>
   114dc:	f01b 0604 	ands.w	r6, fp, #4
   114e0:	f000 8084 	beq.w	115ec <cbprintf_package_convert+0x2e8>
		keep_cnt = ros_nbr;
   114e4:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   114e6:	2600      	movs	r6, #0
		dst = keep_str_pos;
   114e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   114ec:	4652      	mov	r2, sl
   114ee:	4641      	mov	r1, r8
   114f0:	f012 fc90 	bl	23e14 <memcpy>
	str_pos += ros_nbr;
   114f4:	697b      	ldr	r3, [r7, #20]
   114f6:	005b      	lsls	r3, r3, #1
   114f8:	60bb      	str	r3, [r7, #8]
   114fa:	697b      	ldr	r3, [r7, #20]
   114fc:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   114fe:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   11502:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11504:	f00b 0302 	and.w	r3, fp, #2
   11508:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   1150a:	697b      	ldr	r3, [r7, #20]
   1150c:	4598      	cmp	r8, r3
   1150e:	d16f      	bne.n	115f0 <cbprintf_package_convert+0x2ec>
	out_desc.len = in_desc->len;
   11510:	7823      	ldrb	r3, [r4, #0]
   11512:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11514:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   11516:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1151a:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1151e:	bf0c      	ite	eq
   11520:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   11524:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11526:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1152a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1152c:	f040 80e3 	bne.w	116f6 <cbprintf_package_convert+0x3f2>
   11530:	f01b 0f04 	tst.w	fp, #4
   11534:	bf14      	ite	ne
   11536:	4648      	movne	r0, r9
   11538:	2000      	moveq	r0, #0
   1153a:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   1153c:	78a3      	ldrb	r3, [r4, #2]
   1153e:	f894 b003 	ldrb.w	fp, [r4, #3]
   11542:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   11544:	7062      	strb	r2, [r4, #1]
   11546:	70a0      	strb	r0, [r4, #2]
   11548:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   1154a:	69ba      	ldr	r2, [r7, #24]
   1154c:	68f9      	ldr	r1, [r7, #12]
   1154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11550:	4620      	mov	r0, r4
   11552:	4798      	blx	r3
	if (rv < 0) {
   11554:	1e05      	subs	r5, r0, #0
   11556:	f6ff af10 	blt.w	1137a <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
   1155a:	697b      	ldr	r3, [r7, #20]
   1155c:	7023      	strb	r3, [r4, #0]
   1155e:	693b      	ldr	r3, [r7, #16]
   11560:	7063      	strb	r3, [r4, #1]
   11562:	69fb      	ldr	r3, [r7, #28]
   11564:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11566:	4649      	mov	r1, r9
   11568:	69ba      	ldr	r2, [r7, #24]
   1156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   1156c:	f884 b003 	strb.w	fp, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11570:	f107 0040 	add.w	r0, r7, #64	; 0x40
   11574:	4798      	blx	r3
	if (rv < 0) {
   11576:	f1b0 0900 	subs.w	r9, r0, #0
   1157a:	f2c0 80e9 	blt.w	11750 <cbprintf_package_convert+0x44c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   1157e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   11580:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   11582:	eba3 010a 	sub.w	r1, r3, sl
   11586:	68fb      	ldr	r3, [r7, #12]
   11588:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   1158a:	68bb      	ldr	r3, [r7, #8]
   1158c:	4640      	mov	r0, r8
   1158e:	1ac9      	subs	r1, r1, r3
   11590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11592:	4798      	blx	r3
	if (rv < 0) {
   11594:	2800      	cmp	r0, #0
   11596:	f2c0 80dd 	blt.w	11754 <cbprintf_package_convert+0x450>
	out_len += rv;
   1159a:	eb05 0809 	add.w	r8, r5, r9
	out_len += rv;
   1159e:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   115a2:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   115a6:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   115aa:	45b3      	cmp	fp, r6
   115ac:	f0c0 80a5 	bcc.w	116fa <cbprintf_package_convert+0x3f6>
	(void)cb(NULL, 0, ctx);
   115b0:	2100      	movs	r1, #0
   115b2:	69ba      	ldr	r2, [r7, #24]
   115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   115b6:	4608      	mov	r0, r1
   115b8:	4798      	blx	r3
	return out_len;
   115ba:	e6de      	b.n	1137a <cbprintf_package_convert+0x76>
   115bc:	00026f9e 	.word	0x00026f9e
   115c0:	00026eec 	.word	0x00026eec
   115c4:	00026f1a 	.word	0x00026f1a
   115c8:	00025f70 	.word	0x00025f70
   115cc:	0002ace8 	.word	0x0002ace8
   115d0:	00026fb9 	.word	0x00026fb9
   115d4:	01000004 	.word	0x01000004
   115d8:	000262dc 	.word	0x000262dc
	if (cb == NULL) {
   115dc:	f04f 0900 	mov.w	r9, #0
   115e0:	f107 0030 	add.w	r0, r7, #48	; 0x30
   115e4:	e782      	b.n	114ec <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
   115e6:	4656      	mov	r6, sl
		keep_cnt = 0;
   115e8:	46d1      	mov	r9, sl
   115ea:	e783      	b.n	114f4 <cbprintf_package_convert+0x1f0>
   115ec:	46b1      	mov	r9, r6
   115ee:	e781      	b.n	114f4 <cbprintf_package_convert+0x1f0>
		uint8_t arg_idx = *str_pos++;
   115f0:	f818 1b02 	ldrb.w	r1, [r8], #2
   115f4:	4b58      	ldr	r3, [pc, #352]	; (11758 <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
   115f6:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   115fa:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   115fe:	429a      	cmp	r2, r3
   11600:	d302      	bcc.n	11608 <cbprintf_package_convert+0x304>
   11602:	4b56      	ldr	r3, [pc, #344]	; (1175c <cbprintf_package_convert+0x458>)
   11604:	429a      	cmp	r2, r3
   11606:	d316      	bcc.n	11636 <cbprintf_package_convert+0x332>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11608:	693b      	ldr	r3, [r7, #16]
   1160a:	b12b      	cbz	r3, 11618 <cbprintf_package_convert+0x314>
   1160c:	69f8      	ldr	r0, [r7, #28]
   1160e:	f011 fdb0 	bl	23172 <is_ptr>
   11612:	2800      	cmp	r0, #0
   11614:	f47f af79 	bne.w	1150a <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11618:	687b      	ldr	r3, [r7, #4]
   1161a:	2b00      	cmp	r3, #0
   1161c:	d04a      	beq.n	116b4 <cbprintf_package_convert+0x3b0>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   1161e:	2e0f      	cmp	r6, #15
   11620:	d93e      	bls.n	116a0 <cbprintf_package_convert+0x39c>
   11622:	494f      	ldr	r1, [pc, #316]	; (11760 <cbprintf_package_convert+0x45c>)
   11624:	4a4f      	ldr	r2, [pc, #316]	; (11764 <cbprintf_package_convert+0x460>)
   11626:	4850      	ldr	r0, [pc, #320]	; (11768 <cbprintf_package_convert+0x464>)
   11628:	f44f 6389 	mov.w	r3, #1096	; 0x448
   1162c:	f011 ffe5 	bl	235fa <assert_print>
   11630:	f44f 6189 	mov.w	r1, #1096	; 0x448
   11634:	e67a      	b.n	1132c <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11636:	693b      	ldr	r3, [r7, #16]
   11638:	b12b      	cbz	r3, 11646 <cbprintf_package_convert+0x342>
   1163a:	69f8      	ldr	r0, [r7, #28]
   1163c:	f011 fd99 	bl	23172 <is_ptr>
   11640:	2800      	cmp	r0, #0
   11642:	f47f af62 	bne.w	1150a <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11646:	f01b 0f01 	tst.w	fp, #1
   1164a:	d00b      	beq.n	11664 <cbprintf_package_convert+0x360>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   1164c:	2e0f      	cmp	r6, #15
   1164e:	d927      	bls.n	116a0 <cbprintf_package_convert+0x39c>
   11650:	4943      	ldr	r1, [pc, #268]	; (11760 <cbprintf_package_convert+0x45c>)
   11652:	4a44      	ldr	r2, [pc, #272]	; (11764 <cbprintf_package_convert+0x460>)
   11654:	4844      	ldr	r0, [pc, #272]	; (11768 <cbprintf_package_convert+0x464>)
   11656:	f240 433e 	movw	r3, #1086	; 0x43e
   1165a:	f011 ffce 	bl	235fa <assert_print>
   1165e:	f240 413e 	movw	r1, #1086	; 0x43e
   11662:	e663      	b.n	1132c <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11664:	f01b 0f04 	tst.w	fp, #4
   11668:	f43f af4f 	beq.w	1150a <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   1166c:	f1b9 0f0f 	cmp.w	r9, #15
   11670:	d909      	bls.n	11686 <cbprintf_package_convert+0x382>
   11672:	493e      	ldr	r1, [pc, #248]	; (1176c <cbprintf_package_convert+0x468>)
   11674:	4a3b      	ldr	r2, [pc, #236]	; (11764 <cbprintf_package_convert+0x460>)
   11676:	483c      	ldr	r0, [pc, #240]	; (11768 <cbprintf_package_convert+0x464>)
   11678:	f240 4341 	movw	r3, #1089	; 0x441
   1167c:	f011 ffbd 	bl	235fa <assert_print>
   11680:	f240 4141 	movw	r1, #1089	; 0x441
   11684:	e652      	b.n	1132c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
   11686:	f109 0328 	add.w	r3, r9, #40	; 0x28
   1168a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1168e:	f109 0201 	add.w	r2, r9, #1
   11692:	eb03 0901 	add.w	r9, r3, r1
   11696:	f809 5c10 	strb.w	r5, [r9, #-16]
   1169a:	fa5f f982 	uxtb.w	r9, r2
   1169e:	e734      	b.n	1150a <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   116a0:	f106 0328 	add.w	r3, r6, #40	; 0x28
   116a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
   116a8:	1c72      	adds	r2, r6, #1
   116aa:	185e      	adds	r6, r3, r1
   116ac:	f806 5c20 	strb.w	r5, [r6, #-32]
   116b0:	b2d6      	uxtb	r6, r2
   116b2:	e72a      	b.n	1150a <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   116b4:	f1b9 0f0f 	cmp.w	r9, #15
   116b8:	d909      	bls.n	116ce <cbprintf_package_convert+0x3ca>
   116ba:	492c      	ldr	r1, [pc, #176]	; (1176c <cbprintf_package_convert+0x468>)
   116bc:	4a29      	ldr	r2, [pc, #164]	; (11764 <cbprintf_package_convert+0x460>)
   116be:	482a      	ldr	r0, [pc, #168]	; (11768 <cbprintf_package_convert+0x464>)
   116c0:	f240 434b 	movw	r3, #1099	; 0x44b
   116c4:	f011 ff99 	bl	235fa <assert_print>
   116c8:	f240 414b 	movw	r1, #1099	; 0x44b
   116cc:	e62e      	b.n	1132c <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
   116ce:	f109 0328 	add.w	r3, r9, #40	; 0x28
   116d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   116d6:	f109 0201 	add.w	r2, r9, #1
   116da:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
   116dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
   116e0:	fa53 f282 	uxtab	r2, r3, r2
   116e4:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   116e8:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   116ec:	fa5f f989 	uxtb.w	r9, r9
   116f0:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   116f4:	e709      	b.n	1150a <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   116f6:	2000      	movs	r0, #0
   116f8:	e71f      	b.n	1153a <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
   116fa:	f81b 300a 	ldrb.w	r3, [fp, sl]
   116fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   11702:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   11706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11708:	b1fb      	cbz	r3, 1174a <cbprintf_package_convert+0x446>
   1170a:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   1170e:	69ba      	ldr	r2, [r7, #24]
   11710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11712:	2101      	movs	r1, #1
   11714:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   11718:	4798      	blx	r3
		if (rv < 0) {
   1171a:	2800      	cmp	r0, #0
   1171c:	db1a      	blt.n	11754 <cbprintf_package_convert+0x450>
		out_len += rv;
   1171e:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   11720:	f1b8 0f00 	cmp.w	r8, #0
   11724:	d106      	bne.n	11734 <cbprintf_package_convert+0x430>
   11726:	4648      	mov	r0, r9
   11728:	f012 fb54 	bl	23dd4 <strlen>
   1172c:	f100 0801 	add.w	r8, r0, #1
   11730:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   11734:	69ba      	ldr	r2, [r7, #24]
   11736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11738:	4641      	mov	r1, r8
   1173a:	4648      	mov	r0, r9
   1173c:	4798      	blx	r3
		if (rv < 0) {
   1173e:	2800      	cmp	r0, #0
   11740:	db08      	blt.n	11754 <cbprintf_package_convert+0x450>
		out_len += rv;
   11742:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   11744:	f10b 0b01 	add.w	fp, fp, #1
   11748:	e72f      	b.n	115aa <cbprintf_package_convert+0x2a6>
		uint16_t str_len = strl ? strl[i] : 0;
   1174a:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   1174e:	e7de      	b.n	1170e <cbprintf_package_convert+0x40a>
   11750:	464d      	mov	r5, r9
   11752:	e612      	b.n	1137a <cbprintf_package_convert+0x76>
   11754:	4605      	mov	r5, r0
   11756:	e610      	b.n	1137a <cbprintf_package_convert+0x76>
   11758:	00025f70 	.word	0x00025f70
   1175c:	0002ace8 	.word	0x0002ace8
   11760:	0002705c 	.word	0x0002705c
   11764:	00026eec 	.word	0x00026eec
   11768:	00026f1a 	.word	0x00026f1a
   1176c:	0002707b 	.word	0x0002707b

00011770 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   11770:	4b01      	ldr	r3, [pc, #4]	; (11778 <__printk_hook_install+0x8>)
   11772:	6018      	str	r0, [r3, #0]
}
   11774:	4770      	bx	lr
   11776:	bf00      	nop
   11778:	200005cc 	.word	0x200005cc

0001177c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1177c:	b530      	push	{r4, r5, lr}
   1177e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   11780:	2500      	movs	r5, #0
   11782:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   11786:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11788:	9500      	str	r5, [sp, #0]
   1178a:	a903      	add	r1, sp, #12
   1178c:	4805      	ldr	r0, [pc, #20]	; (117a4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1178e:	9505      	str	r5, [sp, #20]
   11790:	f000 fc28 	bl	11fe4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   11794:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   11798:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1179a:	bfb8      	it	lt
   1179c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1179e:	b007      	add	sp, #28
   117a0:	bd30      	pop	{r4, r5, pc}
   117a2:	bf00      	nop
   117a4:	000231c1 	.word	0x000231c1

000117a8 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   117a8:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   117aa:	460c      	mov	r4, r1
   117ac:	2900      	cmp	r1, #0
   117ae:	d034      	beq.n	1181a <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   117b0:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   117b2:	1f0b      	subs	r3, r1, #4
   117b4:	1a9b      	subs	r3, r3, r2
   117b6:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   117b8:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   117bc:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   117be:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   117c0:	07e8      	lsls	r0, r5, #31
   117c2:	d40d      	bmi.n	117e0 <sys_heap_free+0x38>
   117c4:	4a15      	ldr	r2, [pc, #84]	; (1181c <sys_heap_free+0x74>)
   117c6:	4916      	ldr	r1, [pc, #88]	; (11820 <sys_heap_free+0x78>)
   117c8:	4816      	ldr	r0, [pc, #88]	; (11824 <sys_heap_free+0x7c>)
   117ca:	23af      	movs	r3, #175	; 0xaf
   117cc:	f011 ff15 	bl	235fa <assert_print>
   117d0:	4621      	mov	r1, r4
   117d2:	4815      	ldr	r0, [pc, #84]	; (11828 <sys_heap_free+0x80>)
   117d4:	f011 ff11 	bl	235fa <assert_print>
   117d8:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   117da:	4810      	ldr	r0, [pc, #64]	; (1181c <sys_heap_free+0x74>)
   117dc:	f011 ff06 	bl	235ec <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   117e0:	4610      	mov	r0, r2
   117e2:	f011 fd26 	bl	23232 <chunk_size>
   117e6:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   117e8:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   117ec:	1b80      	subs	r0, r0, r6
   117ee:	4281      	cmp	r1, r0
   117f0:	d00b      	beq.n	1180a <sys_heap_free+0x62>
   117f2:	4a0a      	ldr	r2, [pc, #40]	; (1181c <sys_heap_free+0x74>)
   117f4:	490d      	ldr	r1, [pc, #52]	; (1182c <sys_heap_free+0x84>)
   117f6:	480b      	ldr	r0, [pc, #44]	; (11824 <sys_heap_free+0x7c>)
   117f8:	23b7      	movs	r3, #183	; 0xb7
   117fa:	f011 fefe 	bl	235fa <assert_print>
   117fe:	4621      	mov	r1, r4
   11800:	480b      	ldr	r0, [pc, #44]	; (11830 <sys_heap_free+0x88>)
   11802:	f011 fefa 	bl	235fa <assert_print>
   11806:	21b7      	movs	r1, #183	; 0xb7
   11808:	e7e7      	b.n	117da <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1180a:	f025 0501 	bic.w	r5, r5, #1
   1180e:	805d      	strh	r5, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   11810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   11814:	4610      	mov	r0, r2
   11816:	f011 bdc9 	b.w	233ac <free_chunk>
}
   1181a:	bd70      	pop	{r4, r5, r6, pc}
   1181c:	000270ac 	.word	0x000270ac
   11820:	000270cd 	.word	0x000270cd
   11824:	00026f1a 	.word	0x00026f1a
   11828:	000270de 	.word	0x000270de
   1182c:	00027116 	.word	0x00027116
   11830:	0002713c 	.word	0x0002713c

00011834 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11838:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1183a:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   1183c:	6806      	ldr	r6, [r0, #0]
{
   1183e:	460f      	mov	r7, r1
   11840:	4614      	mov	r4, r2
	if (align != rew) {
   11842:	d011      	beq.n	11868 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   11844:	f1c1 0900 	rsb	r9, r1, #0
   11848:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1184c:	464a      	mov	r2, r9
   1184e:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11850:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   11854:	bf28      	it	cs
   11856:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11858:	4219      	tst	r1, r3
   1185a:	d10c      	bne.n	11876 <sys_heap_aligned_alloc+0x42>
   1185c:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   1185e:	b9e4      	cbnz	r4, 1189a <sys_heap_aligned_alloc+0x66>
		return NULL;
   11860:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   11862:	4628      	mov	r0, r5
   11864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   11868:	2904      	cmp	r1, #4
   1186a:	d813      	bhi.n	11894 <sys_heap_aligned_alloc+0x60>
}
   1186c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   11870:	4611      	mov	r1, r2
   11872:	f011 bdcc 	b.w	2340e <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11876:	492c      	ldr	r1, [pc, #176]	; (11928 <sys_heap_aligned_alloc+0xf4>)
   11878:	4a2c      	ldr	r2, [pc, #176]	; (1192c <sys_heap_aligned_alloc+0xf8>)
   1187a:	482d      	ldr	r0, [pc, #180]	; (11930 <sys_heap_aligned_alloc+0xfc>)
   1187c:	f44f 73a2 	mov.w	r3, #324	; 0x144
   11880:	f011 febb 	bl	235fa <assert_print>
   11884:	482b      	ldr	r0, [pc, #172]	; (11934 <sys_heap_aligned_alloc+0x100>)
   11886:	f011 feb8 	bl	235fa <assert_print>
   1188a:	4828      	ldr	r0, [pc, #160]	; (1192c <sys_heap_aligned_alloc+0xf8>)
   1188c:	f44f 71a2 	mov.w	r1, #324	; 0x144
   11890:	f011 feac 	bl	235ec <assert_post_action>
		rew = 0;
   11894:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   11896:	2204      	movs	r2, #4
   11898:	e7e1      	b.n	1185e <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1189a:	68b3      	ldr	r3, [r6, #8]
   1189c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   118a0:	d9de      	bls.n	11860 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   118a2:	f104 010b 	add.w	r1, r4, #11
   118a6:	4439      	add	r1, r7
   118a8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   118aa:	08c9      	lsrs	r1, r1, #3
   118ac:	4630      	mov	r0, r6
   118ae:	f011 fd16 	bl	232de <alloc_chunk>
	if (c0 == 0) {
   118b2:	4680      	mov	r8, r0
   118b4:	2800      	cmp	r0, #0
   118b6:	d0d3      	beq.n	11860 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   118b8:	f109 0504 	add.w	r5, r9, #4
   118bc:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   118c0:	1e7b      	subs	r3, r7, #1
   118c2:	4435      	add	r5, r6
   118c4:	441d      	add	r5, r3
   118c6:	427f      	negs	r7, r7
   118c8:	403d      	ands	r5, r7
   118ca:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   118ce:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   118d0:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   118d2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   118d4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   118d6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   118da:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   118dc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   118e0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   118e4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   118e8:	d208      	bcs.n	118fc <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
   118ea:	4601      	mov	r1, r0
   118ec:	463a      	mov	r2, r7
   118ee:	4630      	mov	r0, r6
   118f0:	f011 fd42 	bl	23378 <split_chunks>
		free_list_add(h, c0);
   118f4:	4641      	mov	r1, r8
   118f6:	4630      	mov	r0, r6
   118f8:	f011 fca0 	bl	2323c <free_list_add>
	return c + chunk_size(h, c);
   118fc:	4639      	mov	r1, r7
   118fe:	4630      	mov	r0, r6
   11900:	f011 fc97 	bl	23232 <chunk_size>
   11904:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11906:	4284      	cmp	r4, r0
   11908:	d207      	bcs.n	1191a <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
   1190a:	4630      	mov	r0, r6
   1190c:	4622      	mov	r2, r4
   1190e:	f011 fd33 	bl	23378 <split_chunks>
		free_list_add(h, c_end);
   11912:	4621      	mov	r1, r4
   11914:	4630      	mov	r0, r6
   11916:	f011 fc91 	bl	2323c <free_list_add>
	void *cmem = &buf[c];
   1191a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1191e:	8873      	ldrh	r3, [r6, #2]
   11920:	f043 0301 	orr.w	r3, r3, #1
   11924:	8073      	strh	r3, [r6, #2]
   11926:	e79c      	b.n	11862 <sys_heap_aligned_alloc+0x2e>
   11928:	00027178 	.word	0x00027178
   1192c:	000270ac 	.word	0x000270ac
   11930:	00026f1a 	.word	0x00026f1a
   11934:	00027193 	.word	0x00027193

00011938 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11938:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   1193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1193e:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11940:	d30e      	bcc.n	11960 <sys_heap_init+0x28>
   11942:	493b      	ldr	r1, [pc, #236]	; (11a30 <sys_heap_init+0xf8>)
   11944:	4a3b      	ldr	r2, [pc, #236]	; (11a34 <sys_heap_init+0xfc>)
   11946:	483c      	ldr	r0, [pc, #240]	; (11a38 <sys_heap_init+0x100>)
   11948:	f240 13eb 	movw	r3, #491	; 0x1eb
   1194c:	f011 fe55 	bl	235fa <assert_print>
   11950:	483a      	ldr	r0, [pc, #232]	; (11a3c <sys_heap_init+0x104>)
   11952:	f011 fe52 	bl	235fa <assert_print>
   11956:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1195a:	4836      	ldr	r0, [pc, #216]	; (11a34 <sys_heap_init+0xfc>)
   1195c:	f011 fe46 	bl	235ec <assert_post_action>
   11960:	2a04      	cmp	r2, #4
   11962:	d80c      	bhi.n	1197e <sys_heap_init+0x46>
   11964:	4936      	ldr	r1, [pc, #216]	; (11a40 <sys_heap_init+0x108>)
   11966:	4a33      	ldr	r2, [pc, #204]	; (11a34 <sys_heap_init+0xfc>)
   11968:	4833      	ldr	r0, [pc, #204]	; (11a38 <sys_heap_init+0x100>)
   1196a:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   1196e:	f011 fe44 	bl	235fa <assert_print>
   11972:	4834      	ldr	r0, [pc, #208]	; (11a44 <sys_heap_init+0x10c>)
   11974:	f011 fe41 	bl	235fa <assert_print>
   11978:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   1197c:	e7ed      	b.n	1195a <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
   1197e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11980:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11982:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11984:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11988:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1198c:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1198e:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11990:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11994:	d80c      	bhi.n	119b0 <sys_heap_init+0x78>
   11996:	492c      	ldr	r1, [pc, #176]	; (11a48 <sys_heap_init+0x110>)
   11998:	4a26      	ldr	r2, [pc, #152]	; (11a34 <sys_heap_init+0xfc>)
   1199a:	4827      	ldr	r0, [pc, #156]	; (11a38 <sys_heap_init+0x100>)
   1199c:	f240 13fb 	movw	r3, #507	; 0x1fb
   119a0:	f011 fe2b 	bl	235fa <assert_print>
   119a4:	4827      	ldr	r0, [pc, #156]	; (11a44 <sys_heap_init+0x10c>)
   119a6:	f011 fe28 	bl	235fa <assert_print>
   119aa:	f240 11fb 	movw	r1, #507	; 0x1fb
   119ae:	e7d4      	b.n	1195a <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   119b0:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   119b4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   119b8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   119bc:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   119be:	3107      	adds	r1, #7
   119c0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   119c2:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   119c4:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   119c6:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   119c8:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   119cc:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   119ce:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   119d0:	d90c      	bls.n	119ec <sys_heap_init+0xb4>
   119d2:	491e      	ldr	r1, [pc, #120]	; (11a4c <sys_heap_init+0x114>)
   119d4:	4a17      	ldr	r2, [pc, #92]	; (11a34 <sys_heap_init+0xfc>)
   119d6:	4818      	ldr	r0, [pc, #96]	; (11a38 <sys_heap_init+0x100>)
   119d8:	f44f 7303 	mov.w	r3, #524	; 0x20c
   119dc:	f011 fe0d 	bl	235fa <assert_print>
   119e0:	4818      	ldr	r0, [pc, #96]	; (11a44 <sys_heap_init+0x10c>)
   119e2:	f011 fe0a 	bl	235fa <assert_print>
   119e6:	f44f 7103 	mov.w	r1, #524	; 0x20c
   119ea:	e7b6      	b.n	1195a <sys_heap_init+0x22>
   119ec:	f100 050c 	add.w	r5, r0, #12
   119f0:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   119f4:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   119f8:	42b5      	cmp	r5, r6
   119fa:	d1fb      	bne.n	119f4 <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   119fc:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   119fe:	f045 0501 	orr.w	r5, r5, #1
   11a02:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   11a04:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11a08:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11a0a:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   11a0c:	8004      	strh	r4, [r0, #0]
   11a0e:	8077      	strh	r7, [r6, #2]
   11a10:	1886      	adds	r6, r0, r2
   11a12:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   11a16:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   11a1a:	8074      	strh	r4, [r6, #2]
   11a1c:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11a1e:	885a      	ldrh	r2, [r3, #2]
   11a20:	f042 0201 	orr.w	r2, r2, #1
   11a24:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   11a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   11a2a:	f011 bc07 	b.w	2323c <free_list_add>
   11a2e:	bf00      	nop
   11a30:	000271b0 	.word	0x000271b0
   11a34:	000270ac 	.word	0x000270ac
   11a38:	00026f1a 	.word	0x00026f1a
   11a3c:	000271c6 	.word	0x000271c6
   11a40:	000271dd 	.word	0x000271dd
   11a44:	000271fe 	.word	0x000271fe
   11a48:	00027217 	.word	0x00027217
   11a4c:	00027240 	.word	0x00027240

00011a50 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a54:	4604      	mov	r4, r0
   11a56:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11a58:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11a5a:	0719      	lsls	r1, r3, #28
{
   11a5c:	4615      	mov	r5, r2
	if (processing) {
   11a5e:	d412      	bmi.n	11a86 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   11a60:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11a62:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   11a66:	d164      	bne.n	11b32 <process_event+0xe2>
			evt = process_recheck(mgr);
   11a68:	4620      	mov	r0, r4
   11a6a:	f011 fcf9 	bl	23460 <process_recheck>
		}

		if (evt == EVT_NOP) {
   11a6e:	b188      	cbz	r0, 11a94 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   11a70:	3801      	subs	r0, #1
   11a72:	2804      	cmp	r0, #4
   11a74:	f200 8134 	bhi.w	11ce0 <process_event+0x290>
   11a78:	e8df f010 	tbh	[pc, r0, lsl #1]
   11a7c:	0132005b 	.word	0x0132005b
   11a80:	00d10081 	.word	0x00d10081
   11a84:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
   11a86:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11a88:	bf0c      	ite	eq
   11a8a:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11a8e:	f043 0120 	orrne.w	r1, r3, #32
   11a92:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   11a94:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11a96:	4620      	mov	r0, r4
   11a98:	f00d fdd8 	bl	1f64c <z_spin_unlock_valid>
   11a9c:	2800      	cmp	r0, #0
   11a9e:	f040 819b 	bne.w	11dd8 <process_event+0x388>
   11aa2:	4998      	ldr	r1, [pc, #608]	; (11d04 <process_event+0x2b4>)
   11aa4:	4a98      	ldr	r2, [pc, #608]	; (11d08 <process_event+0x2b8>)
   11aa6:	4899      	ldr	r0, [pc, #612]	; (11d0c <process_event+0x2bc>)
   11aa8:	23c2      	movs	r3, #194	; 0xc2
   11aaa:	f011 fda6 	bl	235fa <assert_print>
   11aae:	4621      	mov	r1, r4
   11ab0:	e0b0      	b.n	11c14 <process_event+0x1c4>
   11ab2:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11ab6:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11ab8:	2801      	cmp	r0, #1
   11aba:	d81e      	bhi.n	11afa <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11abc:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   11abe:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   11ac0:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   11ac2:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11ac6:	d114      	bne.n	11af2 <process_event+0xa2>
		*clients = mgr->clients;
   11ac8:	463a      	mov	r2, r7
   11aca:	e003      	b.n	11ad4 <process_event+0x84>
				mgr->refs += 1U;
   11acc:	8be0      	ldrh	r0, [r4, #30]
   11ace:	3001      	adds	r0, #1
   11ad0:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   11ad2:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11ad4:	2a00      	cmp	r2, #0
   11ad6:	d1f9      	bne.n	11acc <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ad8:	f023 0307 	bic.w	r3, r3, #7
   11adc:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11ae0:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11ae2:	4620      	mov	r0, r4
   11ae4:	f011 fcbc 	bl	23460 <process_recheck>
   11ae8:	b390      	cbz	r0, 11b50 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11aea:	f042 0220 	orr.w	r2, r2, #32
   11aee:	83a2      	strh	r2, [r4, #28]
   11af0:	e02e      	b.n	11b50 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11af2:	f023 0307 	bic.w	r3, r3, #7
   11af6:	b29a      	uxth	r2, r3
}
   11af8:	e7f2      	b.n	11ae0 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11afa:	2a04      	cmp	r2, #4
   11afc:	d133      	bne.n	11b66 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11afe:	f023 0307 	bic.w	r3, r3, #7
   11b02:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11b04:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11b06:	4620      	mov	r0, r4
   11b08:	f011 fcaa 	bl	23460 <process_recheck>
   11b0c:	b110      	cbz	r0, 11b14 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11b0e:	f042 0220 	orr.w	r2, r2, #32
   11b12:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11b14:	8ba3      	ldrh	r3, [r4, #28]
   11b16:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11b1a:	4589      	cmp	r9, r1
   11b1c:	f040 80ea 	bne.w	11cf4 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11b20:	8ba1      	ldrh	r1, [r4, #28]
   11b22:	06ca      	lsls	r2, r1, #27
   11b24:	f140 814f 	bpl.w	11dc6 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11b28:	f021 0310 	bic.w	r3, r1, #16
   11b2c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   11b2e:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   11b32:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11b36:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   11b38:	f1b8 0f00 	cmp.w	r8, #0
   11b3c:	dab9      	bge.n	11ab2 <process_event+0x62>
	list->head = NULL;
   11b3e:	2200      	movs	r2, #0
		*clients = mgr->clients;
   11b40:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b42:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   11b46:	e9c4 2200 	strd	r2, r2, [r4]
   11b4a:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11b4e:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11b50:	8ba3      	ldrh	r3, [r4, #28]
   11b52:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11b56:	4589      	cmp	r9, r1
   11b58:	f040 80cd 	bne.w	11cf6 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
   11b5c:	2f00      	cmp	r7, #0
   11b5e:	d0df      	beq.n	11b20 <process_event+0xd0>
   11b60:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11b62:	46b2      	mov	sl, r6
   11b64:	e044      	b.n	11bf0 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
   11b66:	496a      	ldr	r1, [pc, #424]	; (11d10 <process_event+0x2c0>)
   11b68:	4a6a      	ldr	r2, [pc, #424]	; (11d14 <process_event+0x2c4>)
   11b6a:	4868      	ldr	r0, [pc, #416]	; (11d0c <process_event+0x2bc>)
   11b6c:	f240 131b 	movw	r3, #283	; 0x11b
   11b70:	f011 fd43 	bl	235fa <assert_print>
   11b74:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11b78:	4866      	ldr	r0, [pc, #408]	; (11d14 <process_event+0x2c4>)
   11b7a:	f011 fd37 	bl	235ec <assert_post_action>
   11b7e:	b149      	cbz	r1, 11b94 <process_event+0x144>
   11b80:	4965      	ldr	r1, [pc, #404]	; (11d18 <process_event+0x2c8>)
   11b82:	4a64      	ldr	r2, [pc, #400]	; (11d14 <process_event+0x2c4>)
   11b84:	4861      	ldr	r0, [pc, #388]	; (11d0c <process_event+0x2bc>)
   11b86:	f44f 73ab 	mov.w	r3, #342	; 0x156
   11b8a:	f011 fd36 	bl	235fa <assert_print>
   11b8e:	f44f 71ab 	mov.w	r1, #342	; 0x156
   11b92:	e7f1      	b.n	11b78 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11b94:	6823      	ldr	r3, [r4, #0]
   11b96:	b94b      	cbnz	r3, 11bac <process_event+0x15c>
   11b98:	4960      	ldr	r1, [pc, #384]	; (11d1c <process_event+0x2cc>)
   11b9a:	4a5e      	ldr	r2, [pc, #376]	; (11d14 <process_event+0x2c4>)
   11b9c:	485b      	ldr	r0, [pc, #364]	; (11d0c <process_event+0x2bc>)
   11b9e:	f240 1357 	movw	r3, #343	; 0x157
   11ba2:	f011 fd2a 	bl	235fa <assert_print>
   11ba6:	f240 1157 	movw	r1, #343	; 0x157
   11baa:	e7e5      	b.n	11b78 <process_event+0x128>
			transit = mgr->transitions->start;
   11bac:	6923      	ldr	r3, [r4, #16]
   11bae:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   11bb0:	b94e      	cbnz	r6, 11bc6 <process_event+0x176>
   11bb2:	495b      	ldr	r1, [pc, #364]	; (11d20 <process_event+0x2d0>)
   11bb4:	4a57      	ldr	r2, [pc, #348]	; (11d14 <process_event+0x2c4>)
   11bb6:	4855      	ldr	r0, [pc, #340]	; (11d0c <process_event+0x2bc>)
   11bb8:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   11bbc:	f011 fd1d 	bl	235fa <assert_print>
   11bc0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   11bc4:	e7d8      	b.n	11b78 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11bc6:	8ba3      	ldrh	r3, [r4, #28]
   11bc8:	f023 0307 	bic.w	r3, r3, #7
   11bcc:	f043 0306 	orr.w	r3, r3, #6
   11bd0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11bd2:	83a3      	strh	r3, [r4, #28]
   11bd4:	460f      	mov	r7, r1
		res = 0;
   11bd6:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11bd8:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   11bdc:	68a2      	ldr	r2, [r4, #8]
   11bde:	2a00      	cmp	r2, #0
   11be0:	f040 808b 	bne.w	11cfa <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
   11be4:	2f00      	cmp	r7, #0
   11be6:	f040 808b 	bne.w	11d00 <process_event+0x2b0>
		    || (transit != NULL)) {
   11bea:	2e00      	cmp	r6, #0
   11bec:	d098      	beq.n	11b20 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11bee:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11bf0:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   11bf4:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   11bf8:	83a3      	strh	r3, [r4, #28]
   11bfa:	4658      	mov	r0, fp
   11bfc:	f00d fd26 	bl	1f64c <z_spin_unlock_valid>
   11c00:	2800      	cmp	r0, #0
   11c02:	f040 8097 	bne.w	11d34 <process_event+0x2e4>
   11c06:	493f      	ldr	r1, [pc, #252]	; (11d04 <process_event+0x2b4>)
   11c08:	4a3f      	ldr	r2, [pc, #252]	; (11d08 <process_event+0x2b8>)
   11c0a:	4840      	ldr	r0, [pc, #256]	; (11d0c <process_event+0x2bc>)
   11c0c:	23c2      	movs	r3, #194	; 0xc2
   11c0e:	f011 fcf4 	bl	235fa <assert_print>
   11c12:	4659      	mov	r1, fp
   11c14:	4843      	ldr	r0, [pc, #268]	; (11d24 <process_event+0x2d4>)
   11c16:	f011 fcf0 	bl	235fa <assert_print>
   11c1a:	21c2      	movs	r1, #194	; 0xc2
   11c1c:	e0ae      	b.n	11d7c <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   11c1e:	2902      	cmp	r1, #2
   11c20:	d009      	beq.n	11c36 <process_event+0x1e6>
   11c22:	4941      	ldr	r1, [pc, #260]	; (11d28 <process_event+0x2d8>)
   11c24:	4a3b      	ldr	r2, [pc, #236]	; (11d14 <process_event+0x2c4>)
   11c26:	4839      	ldr	r0, [pc, #228]	; (11d0c <process_event+0x2bc>)
   11c28:	f240 135d 	movw	r3, #349	; 0x15d
   11c2c:	f011 fce5 	bl	235fa <assert_print>
   11c30:	f240 115d 	movw	r1, #349	; 0x15d
   11c34:	e7a0      	b.n	11b78 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
   11c36:	8be7      	ldrh	r7, [r4, #30]
   11c38:	b14f      	cbz	r7, 11c4e <process_event+0x1fe>
   11c3a:	493c      	ldr	r1, [pc, #240]	; (11d2c <process_event+0x2dc>)
   11c3c:	4a35      	ldr	r2, [pc, #212]	; (11d14 <process_event+0x2c4>)
   11c3e:	4833      	ldr	r0, [pc, #204]	; (11d0c <process_event+0x2bc>)
   11c40:	f44f 73af 	mov.w	r3, #350	; 0x15e
   11c44:	f011 fcd9 	bl	235fa <assert_print>
   11c48:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11c4c:	e794      	b.n	11b78 <process_event+0x128>
			transit = mgr->transitions->stop;
   11c4e:	6923      	ldr	r3, [r4, #16]
   11c50:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11c52:	b94e      	cbnz	r6, 11c68 <process_event+0x218>
   11c54:	4932      	ldr	r1, [pc, #200]	; (11d20 <process_event+0x2d0>)
   11c56:	4a2f      	ldr	r2, [pc, #188]	; (11d14 <process_event+0x2c4>)
   11c58:	482c      	ldr	r0, [pc, #176]	; (11d0c <process_event+0x2bc>)
   11c5a:	f240 1361 	movw	r3, #353	; 0x161
   11c5e:	f011 fccc 	bl	235fa <assert_print>
   11c62:	f240 1161 	movw	r1, #353	; 0x161
   11c66:	e787      	b.n	11b78 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c68:	8ba3      	ldrh	r3, [r4, #28]
   11c6a:	f023 0307 	bic.w	r3, r3, #7
   11c6e:	f043 0304 	orr.w	r3, r3, #4
   11c72:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11c74:	83a3      	strh	r3, [r4, #28]
		res = 0;
   11c76:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11c78:	f04f 0904 	mov.w	r9, #4
   11c7c:	e7ae      	b.n	11bdc <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11c7e:	2901      	cmp	r1, #1
   11c80:	d009      	beq.n	11c96 <process_event+0x246>
   11c82:	492b      	ldr	r1, [pc, #172]	; (11d30 <process_event+0x2e0>)
   11c84:	4a23      	ldr	r2, [pc, #140]	; (11d14 <process_event+0x2c4>)
   11c86:	4821      	ldr	r0, [pc, #132]	; (11d0c <process_event+0x2bc>)
   11c88:	f44f 73b2 	mov.w	r3, #356	; 0x164
   11c8c:	f011 fcb5 	bl	235fa <assert_print>
   11c90:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11c94:	e770      	b.n	11b78 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11c96:	6823      	ldr	r3, [r4, #0]
   11c98:	b94b      	cbnz	r3, 11cae <process_event+0x25e>
   11c9a:	4920      	ldr	r1, [pc, #128]	; (11d1c <process_event+0x2cc>)
   11c9c:	4a1d      	ldr	r2, [pc, #116]	; (11d14 <process_event+0x2c4>)
   11c9e:	481b      	ldr	r0, [pc, #108]	; (11d0c <process_event+0x2bc>)
   11ca0:	f240 1365 	movw	r3, #357	; 0x165
   11ca4:	f011 fca9 	bl	235fa <assert_print>
   11ca8:	f240 1165 	movw	r1, #357	; 0x165
   11cac:	e764      	b.n	11b78 <process_event+0x128>
			transit = mgr->transitions->reset;
   11cae:	6923      	ldr	r3, [r4, #16]
   11cb0:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   11cb2:	b94e      	cbnz	r6, 11cc8 <process_event+0x278>
   11cb4:	491a      	ldr	r1, [pc, #104]	; (11d20 <process_event+0x2d0>)
   11cb6:	4a17      	ldr	r2, [pc, #92]	; (11d14 <process_event+0x2c4>)
   11cb8:	4814      	ldr	r0, [pc, #80]	; (11d0c <process_event+0x2bc>)
   11cba:	f44f 73b4 	mov.w	r3, #360	; 0x168
   11cbe:	f011 fc9c 	bl	235fa <assert_print>
   11cc2:	f44f 71b4 	mov.w	r1, #360	; 0x168
   11cc6:	e757      	b.n	11b78 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11cc8:	8ba3      	ldrh	r3, [r4, #28]
   11cca:	f023 0307 	bic.w	r3, r3, #7
   11cce:	f043 0305 	orr.w	r3, r3, #5
   11cd2:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11cd4:	2700      	movs	r7, #0
   11cd6:	83a3      	strh	r3, [r4, #28]
		res = 0;
   11cd8:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11cda:	f04f 0905 	mov.w	r9, #5
   11cde:	e77d      	b.n	11bdc <process_event+0x18c>
			__ASSERT_NO_MSG(false);
   11ce0:	490b      	ldr	r1, [pc, #44]	; (11d10 <process_event+0x2c0>)
   11ce2:	4a0c      	ldr	r2, [pc, #48]	; (11d14 <process_event+0x2c4>)
   11ce4:	4809      	ldr	r0, [pc, #36]	; (11d0c <process_event+0x2bc>)
   11ce6:	f240 136b 	movw	r3, #363	; 0x16b
   11cea:	f011 fc86 	bl	235fa <assert_print>
   11cee:	f240 116b 	movw	r1, #363	; 0x16b
   11cf2:	e741      	b.n	11b78 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
   11cf4:	2700      	movs	r7, #0
   11cf6:	2600      	movs	r6, #0
   11cf8:	e770      	b.n	11bdc <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11cfa:	f04f 0a01 	mov.w	sl, #1
   11cfe:	e777      	b.n	11bf0 <process_event+0x1a0>
   11d00:	4692      	mov	sl, r2
   11d02:	e775      	b.n	11bf0 <process_event+0x1a0>
   11d04:	0002733b 	.word	0x0002733b
   11d08:	0002730e 	.word	0x0002730e
   11d0c:	00026f1a 	.word	0x00026f1a
   11d10:	00029a2c 	.word	0x00029a2c
   11d14:	0002726b 	.word	0x0002726b
   11d18:	0002728d 	.word	0x0002728d
   11d1c:	00027299 	.word	0x00027299
   11d20:	000272bc 	.word	0x000272bc
   11d24:	00027352 	.word	0x00027352
   11d28:	000272d3 	.word	0x000272d3
   11d2c:	000272e9 	.word	0x000272e9
   11d30:	000272f8 	.word	0x000272f8
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11d34:	f385 8811 	msr	BASEPRI, r5
   11d38:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11d3c:	f1ba 0f00 	cmp.w	sl, #0
   11d40:	d11e      	bne.n	11d80 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
   11d42:	2f00      	cmp	r7, #0
   11d44:	d12f      	bne.n	11da6 <process_event+0x356>
			if (transit != NULL) {
   11d46:	b116      	cbz	r6, 11d4e <process_event+0x2fe>
				transit(mgr, transition_complete);
   11d48:	4926      	ldr	r1, [pc, #152]	; (11de4 <process_event+0x394>)
   11d4a:	4620      	mov	r0, r4
   11d4c:	47b0      	blx	r6
	__asm__ volatile(
   11d4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d52:	f3ef 8511 	mrs	r5, BASEPRI
   11d56:	f383 8812 	msr	BASEPRI_MAX, r3
   11d5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11d5e:	4658      	mov	r0, fp
   11d60:	f00d fc66 	bl	1f630 <z_spin_lock_valid>
   11d64:	bb38      	cbnz	r0, 11db6 <process_event+0x366>
   11d66:	4a20      	ldr	r2, [pc, #128]	; (11de8 <process_event+0x398>)
   11d68:	4920      	ldr	r1, [pc, #128]	; (11dec <process_event+0x39c>)
   11d6a:	4821      	ldr	r0, [pc, #132]	; (11df0 <process_event+0x3a0>)
   11d6c:	2394      	movs	r3, #148	; 0x94
   11d6e:	f011 fc44 	bl	235fa <assert_print>
   11d72:	4659      	mov	r1, fp
   11d74:	481f      	ldr	r0, [pc, #124]	; (11df4 <process_event+0x3a4>)
   11d76:	f011 fc40 	bl	235fa <assert_print>
   11d7a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d7c:	481a      	ldr	r0, [pc, #104]	; (11de8 <process_event+0x398>)
   11d7e:	e6fc      	b.n	11b7a <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11d80:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11d82:	2900      	cmp	r1, #0
   11d84:	d0dd      	beq.n	11d42 <process_event+0x2f2>
	return node->next;
   11d86:	680d      	ldr	r5, [r1, #0]
   11d88:	2900      	cmp	r1, #0
   11d8a:	d0da      	beq.n	11d42 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
   11d8c:	f8d1 a004 	ldr.w	sl, [r1, #4]
   11d90:	4643      	mov	r3, r8
   11d92:	464a      	mov	r2, r9
   11d94:	4620      	mov	r0, r4
   11d96:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11d98:	b11d      	cbz	r5, 11da2 <process_event+0x352>
   11d9a:	682b      	ldr	r3, [r5, #0]
   11d9c:	4629      	mov	r1, r5
   11d9e:	461d      	mov	r5, r3
   11da0:	e7f2      	b.n	11d88 <process_event+0x338>
   11da2:	462b      	mov	r3, r5
   11da4:	e7fa      	b.n	11d9c <process_event+0x34c>
   11da6:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   11da8:	4643      	mov	r3, r8
   11daa:	464a      	mov	r2, r9
   11dac:	4620      	mov	r0, r4
   11dae:	683f      	ldr	r7, [r7, #0]
   11db0:	f011 fb82 	bl	234b8 <notify_one>
   11db4:	e7c5      	b.n	11d42 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
   11db6:	4658      	mov	r0, fp
   11db8:	f00d fc58 	bl	1f66c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11dbc:	8ba3      	ldrh	r3, [r4, #28]
   11dbe:	f023 0308 	bic.w	r3, r3, #8
   11dc2:	83a3      	strh	r3, [r4, #28]
   11dc4:	e6ac      	b.n	11b20 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11dc6:	068b      	lsls	r3, r1, #26
   11dc8:	f57f ae64 	bpl.w	11a94 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11dcc:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11dd0:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   11dd2:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   11dd6:	e647      	b.n	11a68 <process_event+0x18>
	__asm__ volatile(
   11dd8:	f385 8811 	msr	BASEPRI, r5
   11ddc:	f3bf 8f6f 	isb	sy
}
   11de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11de4:	00011df9 	.word	0x00011df9
   11de8:	0002730e 	.word	0x0002730e
   11dec:	00027367 	.word	0x00027367
   11df0:	00026f1a 	.word	0x00026f1a
   11df4:	0002737c 	.word	0x0002737c

00011df8 <transition_complete>:
{
   11df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dfa:	4604      	mov	r4, r0
   11dfc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11dfe:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   11e02:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e06:	f3ef 8711 	mrs	r7, BASEPRI
   11e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   11e0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e12:	4630      	mov	r0, r6
   11e14:	f00d fc0c 	bl	1f630 <z_spin_lock_valid>
   11e18:	b968      	cbnz	r0, 11e36 <transition_complete+0x3e>
   11e1a:	4a0c      	ldr	r2, [pc, #48]	; (11e4c <transition_complete+0x54>)
   11e1c:	490c      	ldr	r1, [pc, #48]	; (11e50 <transition_complete+0x58>)
   11e1e:	480d      	ldr	r0, [pc, #52]	; (11e54 <transition_complete+0x5c>)
   11e20:	2394      	movs	r3, #148	; 0x94
   11e22:	f011 fbea 	bl	235fa <assert_print>
   11e26:	480c      	ldr	r0, [pc, #48]	; (11e58 <transition_complete+0x60>)
   11e28:	4631      	mov	r1, r6
   11e2a:	f011 fbe6 	bl	235fa <assert_print>
   11e2e:	4807      	ldr	r0, [pc, #28]	; (11e4c <transition_complete+0x54>)
   11e30:	2194      	movs	r1, #148	; 0x94
   11e32:	f011 fbdb 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   11e36:	4630      	mov	r0, r6
   11e38:	f00d fc18 	bl	1f66c <z_spin_lock_set_owner>
	mgr->last_res = res;
   11e3c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11e3e:	463a      	mov	r2, r7
   11e40:	4620      	mov	r0, r4
   11e42:	2101      	movs	r1, #1
}
   11e44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   11e48:	f7ff be02 	b.w	11a50 <process_event>
   11e4c:	0002730e 	.word	0x0002730e
   11e50:	00027367 	.word	0x00027367
   11e54:	00026f1a 	.word	0x00026f1a
   11e58:	0002737c 	.word	0x0002737c

00011e5c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e60:	4604      	mov	r4, r0
   11e62:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11e64:	f011 fb18 	bl	23498 <validate_args>

	if (rv < 0) {
   11e68:	1e05      	subs	r5, r0, #0
   11e6a:	db67      	blt.n	11f3c <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11e6c:	f104 0914 	add.w	r9, r4, #20
   11e70:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e74:	f3ef 8a11 	mrs	sl, BASEPRI
   11e78:	f383 8812 	msr	BASEPRI_MAX, r3
   11e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11e80:	4648      	mov	r0, r9
   11e82:	f00d fbd5 	bl	1f630 <z_spin_lock_valid>
   11e86:	4680      	mov	r8, r0
   11e88:	b960      	cbnz	r0, 11ea4 <onoff_request+0x48>
   11e8a:	4a38      	ldr	r2, [pc, #224]	; (11f6c <onoff_request+0x110>)
   11e8c:	4938      	ldr	r1, [pc, #224]	; (11f70 <onoff_request+0x114>)
   11e8e:	4839      	ldr	r0, [pc, #228]	; (11f74 <onoff_request+0x118>)
   11e90:	2394      	movs	r3, #148	; 0x94
   11e92:	f011 fbb2 	bl	235fa <assert_print>
   11e96:	4649      	mov	r1, r9
   11e98:	4837      	ldr	r0, [pc, #220]	; (11f78 <onoff_request+0x11c>)
   11e9a:	f011 fbae 	bl	235fa <assert_print>
   11e9e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ea0:	4832      	ldr	r0, [pc, #200]	; (11f6c <onoff_request+0x110>)
   11ea2:	e040      	b.n	11f26 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
   11ea4:	4648      	mov	r0, r9
   11ea6:	f00d fbe1 	bl	1f66c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11eaa:	8be3      	ldrh	r3, [r4, #30]
   11eac:	8ba6      	ldrh	r6, [r4, #28]
   11eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11eb2:	4293      	cmp	r3, r2
   11eb4:	f006 0607 	and.w	r6, r6, #7
   11eb8:	d043      	beq.n	11f42 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   11eba:	2e02      	cmp	r6, #2
   11ebc:	d113      	bne.n	11ee6 <onoff_request+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   11ebe:	3301      	adds	r3, #1
   11ec0:	83e3      	strh	r3, [r4, #30]
	rv = state;
   11ec2:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ec4:	4648      	mov	r0, r9
   11ec6:	f00d fbc1 	bl	1f64c <z_spin_unlock_valid>
   11eca:	2800      	cmp	r0, #0
   11ecc:	d13f      	bne.n	11f4e <onoff_request+0xf2>
   11ece:	4a27      	ldr	r2, [pc, #156]	; (11f6c <onoff_request+0x110>)
   11ed0:	492a      	ldr	r1, [pc, #168]	; (11f7c <onoff_request+0x120>)
   11ed2:	4828      	ldr	r0, [pc, #160]	; (11f74 <onoff_request+0x118>)
   11ed4:	23c2      	movs	r3, #194	; 0xc2
   11ed6:	f011 fb90 	bl	235fa <assert_print>
   11eda:	4649      	mov	r1, r9
   11edc:	4828      	ldr	r0, [pc, #160]	; (11f80 <onoff_request+0x124>)
   11ede:	f011 fb8c 	bl	235fa <assert_print>
   11ee2:	21c2      	movs	r1, #194	; 0xc2
   11ee4:	e7dc      	b.n	11ea0 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
   11ee6:	2e06      	cmp	r6, #6
   11ee8:	d813      	bhi.n	11f12 <onoff_request+0xb6>
   11eea:	e8df f006 	tbb	[pc, r6]
   11eee:	2d09      	.short	0x2d09
   11ef0:	04091212 	.word	0x04091212
   11ef4:	09          	.byte	0x09
   11ef5:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   11ef6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11efa:	f04f 0800 	mov.w	r8, #0
   11efe:	e7e1      	b.n	11ec4 <onoff_request+0x68>
	parent->next = child;
   11f00:	2300      	movs	r3, #0
   11f02:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   11f04:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   11f06:	b983      	cbnz	r3, 11f2a <onoff_request+0xce>
	list->head = node;
   11f08:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   11f0c:	b186      	cbz	r6, 11f30 <onoff_request+0xd4>
	rv = state;
   11f0e:	4635      	mov	r5, r6
   11f10:	e7f3      	b.n	11efa <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11f12:	491c      	ldr	r1, [pc, #112]	; (11f84 <onoff_request+0x128>)
   11f14:	4817      	ldr	r0, [pc, #92]	; (11f74 <onoff_request+0x118>)
   11f16:	4a1c      	ldr	r2, [pc, #112]	; (11f88 <onoff_request+0x12c>)
   11f18:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   11f1c:	f011 fb6d 	bl	235fa <assert_print>
   11f20:	4819      	ldr	r0, [pc, #100]	; (11f88 <onoff_request+0x12c>)
   11f22:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   11f26:	f011 fb61 	bl	235ec <assert_post_action>
	parent->next = child;
   11f2a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11f2c:	6067      	str	r7, [r4, #4]
}
   11f2e:	e7ed      	b.n	11f0c <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
   11f30:	4652      	mov	r2, sl
   11f32:	2102      	movs	r1, #2
   11f34:	4620      	mov	r0, r4
   11f36:	f7ff fd8b 	bl	11a50 <process_event>
   11f3a:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   11f3c:	4628      	mov	r0, r5
   11f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   11f42:	f06f 050a 	mvn.w	r5, #10
   11f46:	e7d8      	b.n	11efa <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
   11f48:	f06f 0504 	mvn.w	r5, #4
   11f4c:	e7d5      	b.n	11efa <onoff_request+0x9e>
	__asm__ volatile(
   11f4e:	f38a 8811 	msr	BASEPRI, sl
   11f52:	f3bf 8f6f 	isb	sy
		if (notify) {
   11f56:	f1b8 0f00 	cmp.w	r8, #0
   11f5a:	d0ef      	beq.n	11f3c <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
   11f5c:	2300      	movs	r3, #0
   11f5e:	4632      	mov	r2, r6
   11f60:	4639      	mov	r1, r7
   11f62:	4620      	mov	r0, r4
   11f64:	f011 faa8 	bl	234b8 <notify_one>
   11f68:	e7e8      	b.n	11f3c <onoff_request+0xe0>
   11f6a:	bf00      	nop
   11f6c:	0002730e 	.word	0x0002730e
   11f70:	00027367 	.word	0x00027367
   11f74:	00026f1a 	.word	0x00026f1a
   11f78:	0002737c 	.word	0x0002737c
   11f7c:	0002733b 	.word	0x0002733b
   11f80:	00027352 	.word	0x00027352
   11f84:	000272f8 	.word	0x000272f8
   11f88:	0002726b 	.word	0x0002726b

00011f8c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   11f8c:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11f8e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   11f90:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   11f92:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   11f96:	2a02      	cmp	r2, #2
{
   11f98:	4603      	mov	r3, r0
	switch (method) {
   11f9a:	d00a      	beq.n	11fb2 <sys_notify_finalize+0x26>
   11f9c:	2a03      	cmp	r2, #3
   11f9e:	f04f 0100 	mov.w	r1, #0
   11fa2:	d003      	beq.n	11fac <sys_notify_finalize+0x20>
   11fa4:	2a01      	cmp	r2, #1
   11fa6:	d10a      	bne.n	11fbe <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11fa8:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11faa:	e006      	b.n	11fba <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   11fac:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11fae:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11fb0:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   11fb2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   11fb4:	2200      	movs	r2, #0
   11fb6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11fb8:	b958      	cbnz	r0, 11fd2 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
   11fba:	2000      	movs	r0, #0
   11fbc:	e7f8      	b.n	11fb0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   11fbe:	4906      	ldr	r1, [pc, #24]	; (11fd8 <sys_notify_finalize+0x4c>)
   11fc0:	4806      	ldr	r0, [pc, #24]	; (11fdc <sys_notify_finalize+0x50>)
   11fc2:	4a07      	ldr	r2, [pc, #28]	; (11fe0 <sys_notify_finalize+0x54>)
   11fc4:	2345      	movs	r3, #69	; 0x45
   11fc6:	f011 fb18 	bl	235fa <assert_print>
   11fca:	4805      	ldr	r0, [pc, #20]	; (11fe0 <sys_notify_finalize+0x54>)
   11fcc:	2145      	movs	r1, #69	; 0x45
   11fce:	f011 fb0d 	bl	235ec <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11fd2:	f010 fc31 	bl	22838 <z_impl_k_poll_signal_raise>
   11fd6:	e7f0      	b.n	11fba <sys_notify_finalize+0x2e>
   11fd8:	00029a2c 	.word	0x00029a2c
   11fdc:	00026f1a 	.word	0x00026f1a
   11fe0:	00027394 	.word	0x00027394

00011fe4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe8:	4681      	mov	r9, r0
   11fea:	b095      	sub	sp, #84	; 0x54
   11fec:	468b      	mov	fp, r1
   11fee:	4617      	mov	r7, r2
   11ff0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11ff2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11ff4:	7838      	ldrb	r0, [r7, #0]
   11ff6:	b908      	cbnz	r0, 11ffc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11ff8:	4628      	mov	r0, r5
   11ffa:	e358      	b.n	126ae <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   11ffc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   11ffe:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12000:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   12002:	d006      	beq.n	12012 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   12004:	4659      	mov	r1, fp
   12006:	47c8      	blx	r9
   12008:	2800      	cmp	r0, #0
   1200a:	f2c0 8350 	blt.w	126ae <z_cbvprintf_impl+0x6ca>
   1200e:	3501      	adds	r5, #1
		if (bps == NULL) {
   12010:	e1fb      	b.n	1240a <z_cbvprintf_impl+0x426>
		} state = {
   12012:	2218      	movs	r2, #24
   12014:	2100      	movs	r1, #0
   12016:	a80e      	add	r0, sp, #56	; 0x38
   12018:	f011 ff07 	bl	23e2a <memset>
	if (*sp == '%') {
   1201c:	787b      	ldrb	r3, [r7, #1]
   1201e:	2b25      	cmp	r3, #37	; 0x25
   12020:	d07d      	beq.n	1211e <z_cbvprintf_impl+0x13a>
   12022:	2300      	movs	r3, #0
   12024:	1c78      	adds	r0, r7, #1
   12026:	4698      	mov	r8, r3
   12028:	469e      	mov	lr, r3
   1202a:	469c      	mov	ip, r3
   1202c:	461e      	mov	r6, r3
   1202e:	4601      	mov	r1, r0
		switch (*sp) {
   12030:	f810 2b01 	ldrb.w	r2, [r0], #1
   12034:	2a2b      	cmp	r2, #43	; 0x2b
   12036:	f000 80a1 	beq.w	1217c <z_cbvprintf_impl+0x198>
   1203a:	f200 8098 	bhi.w	1216e <z_cbvprintf_impl+0x18a>
   1203e:	2a20      	cmp	r2, #32
   12040:	f000 809f 	beq.w	12182 <z_cbvprintf_impl+0x19e>
   12044:	2a23      	cmp	r2, #35	; 0x23
   12046:	f000 809f 	beq.w	12188 <z_cbvprintf_impl+0x1a4>
   1204a:	b12b      	cbz	r3, 12058 <z_cbvprintf_impl+0x74>
   1204c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12054:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12058:	f1b8 0f00 	cmp.w	r8, #0
   1205c:	d005      	beq.n	1206a <z_cbvprintf_impl+0x86>
   1205e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12062:	f043 0320 	orr.w	r3, r3, #32
   12066:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1206a:	f1be 0f00 	cmp.w	lr, #0
   1206e:	d005      	beq.n	1207c <z_cbvprintf_impl+0x98>
   12070:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12074:	f043 0310 	orr.w	r3, r3, #16
   12078:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1207c:	f1bc 0f00 	cmp.w	ip, #0
   12080:	d005      	beq.n	1208e <z_cbvprintf_impl+0xaa>
   12082:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12086:	f043 0308 	orr.w	r3, r3, #8
   1208a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1208e:	b12e      	cbz	r6, 1209c <z_cbvprintf_impl+0xb8>
   12090:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12094:	f043 0304 	orr.w	r3, r3, #4
   12098:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   1209c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   120a0:	f003 0044 	and.w	r0, r3, #68	; 0x44
   120a4:	2844      	cmp	r0, #68	; 0x44
   120a6:	d103      	bne.n	120b0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   120a8:	f36f 1386 	bfc	r3, #6, #1
   120ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   120b0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   120b4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   120b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   120ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   120be:	d17f      	bne.n	121c0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   120c0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   120c4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   120c8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   120ca:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   120ce:	781a      	ldrb	r2, [r3, #0]
   120d0:	2a2e      	cmp	r2, #46	; 0x2e
   120d2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   120d6:	bf0c      	ite	eq
   120d8:	2101      	moveq	r1, #1
   120da:	2100      	movne	r1, #0
   120dc:	f361 0241 	bfi	r2, r1, #1, #1
   120e0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   120e4:	d178      	bne.n	121d8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   120e6:	785a      	ldrb	r2, [r3, #1]
   120e8:	2a2a      	cmp	r2, #42	; 0x2a
   120ea:	d06e      	beq.n	121ca <z_cbvprintf_impl+0x1e6>
	++sp;
   120ec:	3301      	adds	r3, #1
	size_t val = 0;
   120ee:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   120f0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   120f4:	4619      	mov	r1, r3
   120f6:	f811 0b01 	ldrb.w	r0, [r1], #1
   120fa:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   120fe:	2e09      	cmp	r6, #9
   12100:	f240 8095 	bls.w	1222e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12104:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12108:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1210a:	f3c1 0040 	ubfx	r0, r1, #1, #1
   1210e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   12112:	460a      	mov	r2, r1
   12114:	f360 0241 	bfi	r2, r0, #1, #1
   12118:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   1211c:	e05c      	b.n	121d8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   1211e:	1cba      	adds	r2, r7, #2
   12120:	9203      	str	r2, [sp, #12]
   12122:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   12126:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1212a:	07da      	lsls	r2, r3, #31
   1212c:	f140 812e 	bpl.w	1238c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   12130:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12134:	f1b8 0f00 	cmp.w	r8, #0
   12138:	da07      	bge.n	1214a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   1213a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1213e:	f042 0204 	orr.w	r2, r2, #4
   12142:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   12146:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   1214a:	075e      	lsls	r6, r3, #29
   1214c:	f140 8127 	bpl.w	1239e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   12150:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   12154:	f1ba 0f00 	cmp.w	sl, #0
   12158:	f280 8126 	bge.w	123a8 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   1215c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12160:	f36f 0341 	bfc	r3, #1, #1
   12164:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   12168:	f04f 3aff 	mov.w	sl, #4294967295
   1216c:	e11c      	b.n	123a8 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   1216e:	2a2d      	cmp	r2, #45	; 0x2d
   12170:	d00d      	beq.n	1218e <z_cbvprintf_impl+0x1aa>
   12172:	2a30      	cmp	r2, #48	; 0x30
   12174:	f47f af69 	bne.w	1204a <z_cbvprintf_impl+0x66>
   12178:	2301      	movs	r3, #1
	} while (loop);
   1217a:	e758      	b.n	1202e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   1217c:	f04f 0c01 	mov.w	ip, #1
   12180:	e755      	b.n	1202e <z_cbvprintf_impl+0x4a>
   12182:	f04f 0e01 	mov.w	lr, #1
   12186:	e752      	b.n	1202e <z_cbvprintf_impl+0x4a>
   12188:	f04f 0801 	mov.w	r8, #1
   1218c:	e74f      	b.n	1202e <z_cbvprintf_impl+0x4a>
   1218e:	2601      	movs	r6, #1
   12190:	e74d      	b.n	1202e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   12192:	fb0e 6202 	mla	r2, lr, r2, r6
   12196:	3a30      	subs	r2, #48	; 0x30
   12198:	4603      	mov	r3, r0
   1219a:	4618      	mov	r0, r3
   1219c:	f810 6b01 	ldrb.w	r6, [r0], #1
   121a0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   121a4:	f1bc 0f09 	cmp.w	ip, #9
   121a8:	d9f3      	bls.n	12192 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   121aa:	4299      	cmp	r1, r3
   121ac:	d08f      	beq.n	120ce <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   121ae:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   121b2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   121b4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   121b6:	f362 0141 	bfi	r1, r2, #1, #1
   121ba:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   121be:	e786      	b.n	120ce <z_cbvprintf_impl+0xea>
   121c0:	460b      	mov	r3, r1
	size_t val = 0;
   121c2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   121c4:	f04f 0e0a 	mov.w	lr, #10
   121c8:	e7e7      	b.n	1219a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   121ca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   121ce:	f042 0204 	orr.w	r2, r2, #4
   121d2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   121d6:	3302      	adds	r3, #2
	switch (*sp) {
   121d8:	781a      	ldrb	r2, [r3, #0]
   121da:	2a6c      	cmp	r2, #108	; 0x6c
   121dc:	d047      	beq.n	1226e <z_cbvprintf_impl+0x28a>
   121de:	d82b      	bhi.n	12238 <z_cbvprintf_impl+0x254>
   121e0:	2a68      	cmp	r2, #104	; 0x68
   121e2:	d031      	beq.n	12248 <z_cbvprintf_impl+0x264>
   121e4:	2a6a      	cmp	r2, #106	; 0x6a
   121e6:	d04b      	beq.n	12280 <z_cbvprintf_impl+0x29c>
   121e8:	2a4c      	cmp	r2, #76	; 0x4c
   121ea:	d051      	beq.n	12290 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   121ec:	461a      	mov	r2, r3
   121ee:	f812 3b01 	ldrb.w	r3, [r2], #1
   121f2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   121f4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   121f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   121fa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   121fe:	f200 80be 	bhi.w	1237e <z_cbvprintf_impl+0x39a>
   12202:	2b6d      	cmp	r3, #109	; 0x6d
   12204:	d851      	bhi.n	122aa <z_cbvprintf_impl+0x2c6>
   12206:	2b69      	cmp	r3, #105	; 0x69
   12208:	f200 80b9 	bhi.w	1237e <z_cbvprintf_impl+0x39a>
   1220c:	2b57      	cmp	r3, #87	; 0x57
   1220e:	d867      	bhi.n	122e0 <z_cbvprintf_impl+0x2fc>
   12210:	2b41      	cmp	r3, #65	; 0x41
   12212:	d003      	beq.n	1221c <z_cbvprintf_impl+0x238>
   12214:	3b45      	subs	r3, #69	; 0x45
   12216:	2b02      	cmp	r3, #2
   12218:	f200 80b1 	bhi.w	1237e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   1221c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12220:	2204      	movs	r2, #4
   12222:	f362 0302 	bfi	r3, r2, #0, #3
   12226:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   1222a:	2301      	movs	r3, #1
			break;
   1222c:	e073      	b.n	12316 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   1222e:	fb0c 0202 	mla	r2, ip, r2, r0
   12232:	3a30      	subs	r2, #48	; 0x30
   12234:	460b      	mov	r3, r1
   12236:	e75d      	b.n	120f4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   12238:	2a74      	cmp	r2, #116	; 0x74
   1223a:	d025      	beq.n	12288 <z_cbvprintf_impl+0x2a4>
   1223c:	2a7a      	cmp	r2, #122	; 0x7a
   1223e:	d1d5      	bne.n	121ec <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   12240:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12244:	2106      	movs	r1, #6
   12246:	e00c      	b.n	12262 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   12248:	785a      	ldrb	r2, [r3, #1]
   1224a:	2a68      	cmp	r2, #104	; 0x68
   1224c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12250:	d106      	bne.n	12260 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   12252:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12254:	f361 02c6 	bfi	r2, r1, #3, #4
   12258:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   1225c:	3302      	adds	r3, #2
   1225e:	e7c5      	b.n	121ec <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   12260:	2102      	movs	r1, #2
   12262:	f361 02c6 	bfi	r2, r1, #3, #4
   12266:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   1226a:	3301      	adds	r3, #1
   1226c:	e7be      	b.n	121ec <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   1226e:	785a      	ldrb	r2, [r3, #1]
   12270:	2a6c      	cmp	r2, #108	; 0x6c
   12272:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12276:	d101      	bne.n	1227c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12278:	2104      	movs	r1, #4
   1227a:	e7eb      	b.n	12254 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   1227c:	2103      	movs	r1, #3
   1227e:	e7f0      	b.n	12262 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   12280:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12284:	2105      	movs	r1, #5
   12286:	e7ec      	b.n	12262 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12288:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1228c:	2107      	movs	r1, #7
   1228e:	e7e8      	b.n	12262 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   12290:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12294:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12298:	f022 0202 	bic.w	r2, r2, #2
   1229c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   122a0:	f042 0202 	orr.w	r2, r2, #2
   122a4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   122a8:	e7df      	b.n	1226a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   122aa:	3b6e      	subs	r3, #110	; 0x6e
   122ac:	b2d9      	uxtb	r1, r3
   122ae:	2301      	movs	r3, #1
   122b0:	408b      	lsls	r3, r1
   122b2:	f240 4182 	movw	r1, #1154	; 0x482
   122b6:	420b      	tst	r3, r1
   122b8:	d137      	bne.n	1232a <z_cbvprintf_impl+0x346>
   122ba:	f013 0f24 	tst.w	r3, #36	; 0x24
   122be:	d151      	bne.n	12364 <z_cbvprintf_impl+0x380>
   122c0:	07d8      	lsls	r0, r3, #31
   122c2:	d55c      	bpl.n	1237e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   122c4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   122c8:	2103      	movs	r1, #3
   122ca:	f361 0302 	bfi	r3, r1, #0, #3
   122ce:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   122d2:	f002 0378 	and.w	r3, r2, #120	; 0x78
   122d6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   122da:	424b      	negs	r3, r1
   122dc:	414b      	adcs	r3, r1
   122de:	e01a      	b.n	12316 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   122e0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   122e4:	b2c9      	uxtb	r1, r1
   122e6:	2001      	movs	r0, #1
   122e8:	fa00 f101 	lsl.w	r1, r0, r1
   122ec:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   122f0:	d194      	bne.n	1221c <z_cbvprintf_impl+0x238>
   122f2:	f640 0601 	movw	r6, #2049	; 0x801
   122f6:	4231      	tst	r1, r6
   122f8:	d11d      	bne.n	12336 <z_cbvprintf_impl+0x352>
   122fa:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   122fe:	d03e      	beq.n	1237e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12300:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12304:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12308:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1230c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1230e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12312:	d034      	beq.n	1237e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   12314:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   12316:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1231a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1231e:	430b      	orrs	r3, r1
   12320:	f363 0241 	bfi	r2, r3, #1, #1
   12324:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12328:	e6fd      	b.n	12126 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   1232a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1232e:	2102      	movs	r1, #2
   12330:	f361 0302 	bfi	r3, r1, #0, #3
   12334:	e7e8      	b.n	12308 <z_cbvprintf_impl+0x324>
   12336:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   1233a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   1233c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12340:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12344:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12346:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   1234a:	bf02      	ittt	eq
   1234c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   12350:	f041 0101 	orreq.w	r1, r1, #1
   12354:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   12358:	2b63      	cmp	r3, #99	; 0x63
   1235a:	d1db      	bne.n	12314 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1235c:	1e13      	subs	r3, r2, #0
   1235e:	bf18      	it	ne
   12360:	2301      	movne	r3, #1
   12362:	e7d8      	b.n	12316 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   12364:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12368:	2103      	movs	r1, #3
   1236a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1236e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12372:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12376:	bf14      	ite	ne
   12378:	2301      	movne	r3, #1
   1237a:	2300      	moveq	r3, #0
   1237c:	e7cb      	b.n	12316 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   1237e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12382:	f043 0301 	orr.w	r3, r3, #1
   12386:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   1238a:	e7c3      	b.n	12314 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   1238c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   12390:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12392:	bfb4      	ite	lt
   12394:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12398:	f04f 38ff 	movge.w	r8, #4294967295
   1239c:	e6d5      	b.n	1214a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   1239e:	0798      	lsls	r0, r3, #30
   123a0:	f57f aee2 	bpl.w	12168 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   123a4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   123a8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   123ac:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   123ae:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   123b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   123b6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   123ba:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   123bc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   123c0:	d133      	bne.n	1242a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   123c2:	1ecb      	subs	r3, r1, #3
   123c4:	2b04      	cmp	r3, #4
   123c6:	d804      	bhi.n	123d2 <z_cbvprintf_impl+0x3ee>
   123c8:	e8df f003 	tbb	[pc, r3]
   123cc:	21464621 	.word	0x21464621
   123d0:	21          	.byte	0x21
   123d1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   123d2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   123d4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   123d6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   123da:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   123de:	d11c      	bne.n	1241a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   123e0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   123e4:	17da      	asrs	r2, r3, #31
   123e6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   123ea:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   123ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   123f0:	f013 0603 	ands.w	r6, r3, #3
   123f4:	d050      	beq.n	12498 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   123f6:	9b03      	ldr	r3, [sp, #12]
   123f8:	463a      	mov	r2, r7
   123fa:	4659      	mov	r1, fp
   123fc:	4648      	mov	r0, r9
   123fe:	f011 f8de 	bl	235be <outs>
   12402:	2800      	cmp	r0, #0
   12404:	f2c0 8153 	blt.w	126ae <z_cbvprintf_impl+0x6ca>
   12408:	4405      	add	r5, r0
			continue;
   1240a:	9f03      	ldr	r7, [sp, #12]
   1240c:	e5f2      	b.n	11ff4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1240e:	f854 3b04 	ldr.w	r3, [r4], #4
   12412:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   12414:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   12418:	e7e8      	b.n	123ec <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   1241a:	2902      	cmp	r1, #2
   1241c:	d1e5      	bne.n	123ea <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   1241e:	b21a      	sxth	r2, r3
   12420:	f343 33c0 	sbfx	r3, r3, #15, #1
   12424:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12428:	e7df      	b.n	123ea <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1242a:	2b02      	cmp	r3, #2
   1242c:	d124      	bne.n	12478 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   1242e:	1ecb      	subs	r3, r1, #3
   12430:	2b04      	cmp	r3, #4
   12432:	d804      	bhi.n	1243e <z_cbvprintf_impl+0x45a>
   12434:	e8df f003 	tbb	[pc, r3]
   12438:	18101018 	.word	0x18101018
   1243c:	18          	.byte	0x18
   1243d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1243e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   12440:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12444:	f04f 0200 	mov.w	r2, #0
   12448:	d014      	beq.n	12474 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   1244a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1244c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   12450:	d1cc      	bne.n	123ec <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   12452:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12454:	930e      	str	r3, [sp, #56]	; 0x38
   12456:	e7c9      	b.n	123ec <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   12458:	3407      	adds	r4, #7
   1245a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1245e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12462:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12466:	e7c1      	b.n	123ec <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   12468:	f854 3b04 	ldr.w	r3, [r4], #4
   1246c:	930e      	str	r3, [sp, #56]	; 0x38
   1246e:	2300      	movs	r3, #0
   12470:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   12472:	e7bb      	b.n	123ec <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   12474:	b2db      	uxtb	r3, r3
   12476:	e7cd      	b.n	12414 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   12478:	2b04      	cmp	r3, #4
   1247a:	d108      	bne.n	1248e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   1247c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1247e:	f024 0407 	bic.w	r4, r4, #7
   12482:	e9d4 2300 	ldrd	r2, r3, [r4]
   12486:	3408      	adds	r4, #8
   12488:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1248c:	e7ae      	b.n	123ec <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1248e:	2b03      	cmp	r3, #3
   12490:	d1ac      	bne.n	123ec <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   12492:	f854 3b04 	ldr.w	r3, [r4], #4
   12496:	e7dd      	b.n	12454 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12498:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1249c:	2878      	cmp	r0, #120	; 0x78
   1249e:	d8b4      	bhi.n	1240a <z_cbvprintf_impl+0x426>
   124a0:	2862      	cmp	r0, #98	; 0x62
   124a2:	d81c      	bhi.n	124de <z_cbvprintf_impl+0x4fa>
   124a4:	2825      	cmp	r0, #37	; 0x25
   124a6:	f43f adad 	beq.w	12004 <z_cbvprintf_impl+0x20>
   124aa:	2858      	cmp	r0, #88	; 0x58
   124ac:	d1ad      	bne.n	1240a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   124ae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   124b2:	9300      	str	r3, [sp, #0]
   124b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   124b8:	ab08      	add	r3, sp, #32
   124ba:	aa10      	add	r2, sp, #64	; 0x40
   124bc:	f011 f839 	bl	23532 <encode_uint>
			if (precision >= 0) {
   124c0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   124c4:	4607      	mov	r7, r0
			if (precision >= 0) {
   124c6:	f280 809a 	bge.w	125fe <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   124ca:	2f00      	cmp	r7, #0
   124cc:	d09d      	beq.n	1240a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   124ce:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   124d2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   124d4:	2e00      	cmp	r6, #0
   124d6:	f000 80c1 	beq.w	1265c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   124da:	3001      	adds	r0, #1
   124dc:	e0be      	b.n	1265c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   124de:	3863      	subs	r0, #99	; 0x63
   124e0:	2815      	cmp	r0, #21
   124e2:	d892      	bhi.n	1240a <z_cbvprintf_impl+0x426>
   124e4:	a201      	add	r2, pc, #4	; (adr r2, 124ec <z_cbvprintf_impl+0x508>)
   124e6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   124ea:	bf00      	nop
   124ec:	000125c1 	.word	0x000125c1
   124f0:	000125d3 	.word	0x000125d3
   124f4:	0001240b 	.word	0x0001240b
   124f8:	0001240b 	.word	0x0001240b
   124fc:	0001240b 	.word	0x0001240b
   12500:	0001240b 	.word	0x0001240b
   12504:	000125d3 	.word	0x000125d3
   12508:	0001240b 	.word	0x0001240b
   1250c:	0001240b 	.word	0x0001240b
   12510:	0001240b 	.word	0x0001240b
   12514:	0001240b 	.word	0x0001240b
   12518:	00012661 	.word	0x00012661
   1251c:	000125f9 	.word	0x000125f9
   12520:	0001261f 	.word	0x0001261f
   12524:	0001240b 	.word	0x0001240b
   12528:	0001240b 	.word	0x0001240b
   1252c:	00012545 	.word	0x00012545
   12530:	0001240b 	.word	0x0001240b
   12534:	000125f9 	.word	0x000125f9
   12538:	0001240b 	.word	0x0001240b
   1253c:	0001240b 	.word	0x0001240b
   12540:	000125f9 	.word	0x000125f9
			if (precision >= 0) {
   12544:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   12548:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   1254a:	db35      	blt.n	125b8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   1254c:	4651      	mov	r1, sl
   1254e:	4638      	mov	r0, r7
   12550:	f011 fc47 	bl	23de2 <strnlen>
			bpe = bps + len;
   12554:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   12558:	2f00      	cmp	r7, #0
   1255a:	f43f af56 	beq.w	1240a <z_cbvprintf_impl+0x426>
		char sign = 0;
   1255e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   12560:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12564:	f013 0210 	ands.w	r2, r3, #16
   12568:	9205      	str	r2, [sp, #20]
   1256a:	f000 8093 	beq.w	12694 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   1256e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12570:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   12572:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   12574:	bf48      	it	mi
   12576:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   12578:	9204      	str	r2, [sp, #16]
   1257a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   1257c:	bf48      	it	mi
   1257e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   12580:	f1b8 0f00 	cmp.w	r8, #0
   12584:	f340 80a0 	ble.w	126c8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   12588:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   1258c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   12590:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12594:	0750      	lsls	r0, r2, #29
   12596:	9306      	str	r3, [sp, #24]
   12598:	f100 8096 	bmi.w	126c8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   1259c:	0651      	lsls	r1, r2, #25
   1259e:	f140 8089 	bpl.w	126b4 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   125a2:	b13e      	cbz	r6, 125b4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   125a4:	4659      	mov	r1, fp
   125a6:	4630      	mov	r0, r6
   125a8:	47c8      	blx	r9
   125aa:	2800      	cmp	r0, #0
   125ac:	db7f      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   125ae:	9b06      	ldr	r3, [sp, #24]
   125b0:	3501      	adds	r5, #1
   125b2:	461e      	mov	r6, r3
					pad = '0';
   125b4:	2230      	movs	r2, #48	; 0x30
   125b6:	e07e      	b.n	126b6 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   125b8:	4638      	mov	r0, r7
   125ba:	f011 fc0b 	bl	23dd4 <strlen>
   125be:	e7c9      	b.n	12554 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   125c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   125c2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   125c6:	2600      	movs	r6, #0
			bps = buf;
   125c8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   125ca:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   125ce:	2001      	movs	r0, #1
   125d0:	e7c6      	b.n	12560 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   125d2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   125d4:	bf5c      	itt	pl
   125d6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   125da:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   125dc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   125e0:	bf48      	it	mi
   125e2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   125e4:	2b00      	cmp	r3, #0
   125e6:	f6bf af62 	bge.w	124ae <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   125ea:	4252      	negs	r2, r2
   125ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   125f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   125f4:	262d      	movs	r6, #45	; 0x2d
   125f6:	e75a      	b.n	124ae <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   125f8:	2600      	movs	r6, #0
   125fa:	e758      	b.n	124ae <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   125fc:	2600      	movs	r6, #0
				conv->flag_zero = false;
   125fe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   12602:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12606:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12608:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1260c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   1260e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   12612:	f67f af5a 	bls.w	124ca <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   12616:	ebaa 0303 	sub.w	r3, sl, r3
   1261a:	9311      	str	r3, [sp, #68]	; 0x44
   1261c:	e755      	b.n	124ca <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   1261e:	980e      	ldr	r0, [sp, #56]	; 0x38
   12620:	b390      	cbz	r0, 12688 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12622:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12626:	9300      	str	r3, [sp, #0]
   12628:	aa10      	add	r2, sp, #64	; 0x40
   1262a:	ab08      	add	r3, sp, #32
   1262c:	2100      	movs	r1, #0
   1262e:	f010 ff80 	bl	23532 <encode_uint>
				conv->altform_0c = true;
   12632:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   12636:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1263a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1263e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   12642:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12646:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12648:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   1264c:	dad6      	bge.n	125fc <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   1264e:	2800      	cmp	r0, #0
   12650:	f43f aedb 	beq.w	1240a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12654:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12658:	1a18      	subs	r0, r3, r0
		char sign = 0;
   1265a:	2600      	movs	r6, #0
   1265c:	469a      	mov	sl, r3
   1265e:	e77f      	b.n	12560 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   12660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   12662:	2907      	cmp	r1, #7
   12664:	f63f aed1 	bhi.w	1240a <z_cbvprintf_impl+0x426>
   12668:	e8df f001 	tbb	[pc, r1]
   1266c:	0c06040c 	.word	0x0c06040c
   12670:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12674:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   12676:	e6c8      	b.n	1240a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   12678:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1267a:	e6c6      	b.n	1240a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   1267c:	17ea      	asrs	r2, r5, #31
   1267e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   12682:	e6c2      	b.n	1240a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12684:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   12686:	e6c0      	b.n	1240a <z_cbvprintf_impl+0x426>
   12688:	4f2e      	ldr	r7, [pc, #184]	; (12744 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   1268a:	4606      	mov	r6, r0
			bpe = bps + 5;
   1268c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   12690:	2005      	movs	r0, #5
   12692:	e765      	b.n	12560 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   12694:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   12696:	bf48      	it	mi
   12698:	3001      	addmi	r0, #1
   1269a:	e769      	b.n	12570 <z_cbvprintf_impl+0x58c>
   1269c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   1269e:	4610      	mov	r0, r2
   126a0:	9206      	str	r2, [sp, #24]
   126a2:	4659      	mov	r1, fp
   126a4:	47c8      	blx	r9
   126a6:	2800      	cmp	r0, #0
   126a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   126ac:	da04      	bge.n	126b8 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   126ae:	b015      	add	sp, #84	; 0x54
   126b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   126b4:	2220      	movs	r2, #32
					pad = '0';
   126b6:	4643      	mov	r3, r8
				while (width-- > 0) {
   126b8:	4619      	mov	r1, r3
   126ba:	2900      	cmp	r1, #0
   126bc:	f103 33ff 	add.w	r3, r3, #4294967295
   126c0:	dcec      	bgt.n	1269c <z_cbvprintf_impl+0x6b8>
   126c2:	4445      	add	r5, r8
   126c4:	1a6d      	subs	r5, r5, r1
   126c6:	4698      	mov	r8, r3
		if (sign != 0) {
   126c8:	b12e      	cbz	r6, 126d6 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   126ca:	4659      	mov	r1, fp
   126cc:	4630      	mov	r0, r6
   126ce:	47c8      	blx	r9
   126d0:	2800      	cmp	r0, #0
   126d2:	dbec      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   126d4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   126d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   126da:	06da      	lsls	r2, r3, #27
   126dc:	d401      	bmi.n	126e2 <z_cbvprintf_impl+0x6fe>
   126de:	071b      	lsls	r3, r3, #28
   126e0:	d505      	bpl.n	126ee <z_cbvprintf_impl+0x70a>
				OUTC('0');
   126e2:	4659      	mov	r1, fp
   126e4:	2030      	movs	r0, #48	; 0x30
   126e6:	47c8      	blx	r9
   126e8:	2800      	cmp	r0, #0
   126ea:	dbe0      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   126ec:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   126ee:	9b05      	ldr	r3, [sp, #20]
   126f0:	b133      	cbz	r3, 12700 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   126f2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   126f6:	4659      	mov	r1, fp
   126f8:	47c8      	blx	r9
   126fa:	2800      	cmp	r0, #0
   126fc:	dbd7      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   126fe:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12700:	9e04      	ldr	r6, [sp, #16]
   12702:	442e      	add	r6, r5
   12704:	e005      	b.n	12712 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   12706:	4659      	mov	r1, fp
   12708:	2030      	movs	r0, #48	; 0x30
   1270a:	47c8      	blx	r9
   1270c:	2800      	cmp	r0, #0
   1270e:	dbce      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   12710:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12712:	1b73      	subs	r3, r6, r5
   12714:	2b00      	cmp	r3, #0
   12716:	dcf6      	bgt.n	12706 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   12718:	4653      	mov	r3, sl
   1271a:	463a      	mov	r2, r7
   1271c:	4659      	mov	r1, fp
   1271e:	4648      	mov	r0, r9
   12720:	f010 ff4d 	bl	235be <outs>
   12724:	2800      	cmp	r0, #0
   12726:	dbc2      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   12728:	4405      	add	r5, r0
		while (width > 0) {
   1272a:	44a8      	add	r8, r5
   1272c:	eba8 0305 	sub.w	r3, r8, r5
   12730:	2b00      	cmp	r3, #0
   12732:	f77f ae6a 	ble.w	1240a <z_cbvprintf_impl+0x426>
			OUTC(' ');
   12736:	4659      	mov	r1, fp
   12738:	2020      	movs	r0, #32
   1273a:	47c8      	blx	r9
   1273c:	2800      	cmp	r0, #0
   1273e:	dbb6      	blt.n	126ae <z_cbvprintf_impl+0x6ca>
   12740:	3501      	adds	r5, #1
			--width;
   12742:	e7f3      	b.n	1272c <z_cbvprintf_impl+0x748>
   12744:	000273b7 	.word	0x000273b7

00012748 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   12748:	b538      	push	{r3, r4, r5, lr}
   1274a:	460d      	mov	r5, r1
   1274c:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   1274e:	2220      	movs	r2, #32
   12750:	2100      	movs	r1, #0
   12752:	f011 fb6a 	bl	23e2a <memset>
	buffer->get_wlen = cfg->get_wlen;
   12756:	68eb      	ldr	r3, [r5, #12]
   12758:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   1275a:	68ab      	ldr	r3, [r5, #8]
   1275c:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   1275e:	682b      	ldr	r3, [r5, #0]
   12760:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   12762:	686b      	ldr	r3, [r5, #4]
   12764:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   12766:	2200      	movs	r2, #0
   12768:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   1276a:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   1276c:	b123      	cbz	r3, 12778 <mpsc_pbuf_init+0x30>
   1276e:	1e59      	subs	r1, r3, #1
   12770:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   12772:	bf08      	it	eq
   12774:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   12778:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1277a:	2201      	movs	r2, #1
   1277c:	2100      	movs	r1, #0
   1277e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   12782:	f013 fa44 	bl	25c0e <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
   12786:	b148      	cbz	r0, 1279c <mpsc_pbuf_init+0x54>
   12788:	4905      	ldr	r1, [pc, #20]	; (127a0 <mpsc_pbuf_init+0x58>)
   1278a:	4806      	ldr	r0, [pc, #24]	; (127a4 <mpsc_pbuf_init+0x5c>)
   1278c:	4a06      	ldr	r2, [pc, #24]	; (127a8 <mpsc_pbuf_init+0x60>)
   1278e:	232e      	movs	r3, #46	; 0x2e
   12790:	f010 ff33 	bl	235fa <assert_print>
   12794:	4804      	ldr	r0, [pc, #16]	; (127a8 <mpsc_pbuf_init+0x60>)
   12796:	212e      	movs	r1, #46	; 0x2e
   12798:	f010 ff28 	bl	235ec <assert_post_action>
	ARG_UNUSED(err);
}
   1279c:	bd38      	pop	{r3, r4, r5, pc}
   1279e:	bf00      	nop
   127a0:	000273e3 	.word	0x000273e3
   127a4:	00026f1a 	.word	0x00026f1a
   127a8:	000273bd 	.word	0x000273bd

000127ac <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   127ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127b0:	b089      	sub	sp, #36	; 0x24
   127b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   127b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	union mpsc_pbuf_generic *dropped_item = NULL;
   127b8:	2700      	movs	r7, #0
	if (wlen > (buffer->size)) {
   127ba:	428b      	cmp	r3, r1
{
   127bc:	4604      	mov	r4, r0
   127be:	4688      	mov	r8, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   127c0:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
   127c2:	9707      	str	r7, [sp, #28]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   127c4:	46ba      	mov	sl, r7
	if (wlen > (buffer->size)) {
   127c6:	d353      	bcc.n	12870 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
   127c8:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   127cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   127d0:	f3ef 8b11 	mrs	fp, BASEPRI
   127d4:	f383 8812 	msr	BASEPRI_MAX, r3
   127d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127dc:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
   127de:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127e0:	f00c ff26 	bl	1f630 <z_spin_lock_valid>
   127e4:	b958      	cbnz	r0, 127fe <mpsc_pbuf_alloc+0x52>
   127e6:	4a4b      	ldr	r2, [pc, #300]	; (12914 <mpsc_pbuf_alloc+0x168>)
   127e8:	494b      	ldr	r1, [pc, #300]	; (12918 <mpsc_pbuf_alloc+0x16c>)
   127ea:	484c      	ldr	r0, [pc, #304]	; (1291c <mpsc_pbuf_alloc+0x170>)
   127ec:	2394      	movs	r3, #148	; 0x94
   127ee:	f010 ff04 	bl	235fa <assert_print>
   127f2:	4631      	mov	r1, r6
   127f4:	484a      	ldr	r0, [pc, #296]	; (12920 <mpsc_pbuf_alloc+0x174>)
   127f6:	f010 ff00 	bl	235fa <assert_print>
   127fa:	2194      	movs	r1, #148	; 0x94
   127fc:	e05e      	b.n	128bc <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
   127fe:	4630      	mov	r0, r6
   12800:	f00c ff34 	bl	1f66c <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
   12804:	9a07      	ldr	r2, [sp, #28]
   12806:	b12a      	cbz	r2, 12814 <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   12808:	4639      	mov	r1, r7
   1280a:	4620      	mov	r0, r4
   1280c:	f010 ffd4 	bl	237b8 <post_drop_action>
			tmp_wr_idx_shift = 0;
   12810:	2300      	movs	r3, #0
   12812:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
   12814:	a906      	add	r1, sp, #24
   12816:	4620      	mov	r0, r4
   12818:	f010 fefc 	bl	23614 <free_space>

		if (free_wlen >= wlen) {
   1281c:	9906      	ldr	r1, [sp, #24]
   1281e:	4541      	cmp	r1, r8
		wrap = free_space(buffer, &free_wlen);
   12820:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
   12822:	d32e      	bcc.n	12882 <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   12824:	6822      	ldr	r2, [r4, #0]
			item =
   12826:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
   12828:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   1282c:	f021 0103 	bic.w	r1, r1, #3
   12830:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   12834:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   12838:	6821      	ldr	r1, [r4, #0]
   1283a:	4642      	mov	r2, r8
   1283c:	4620      	mov	r0, r4
   1283e:	f010 ff0d 	bl	2365c <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   12842:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   12844:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   12846:	4298      	cmp	r0, r3
   12848:	d016      	beq.n	12878 <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   1284a:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1284c:	4630      	mov	r0, r6
   1284e:	f00c fefd 	bl	1f64c <z_spin_unlock_valid>
   12852:	b340      	cbz	r0, 128a6 <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
   12854:	f389 8811 	msr	BASEPRI, r9
   12858:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   1285c:	9905      	ldr	r1, [sp, #20]
   1285e:	b129      	cbz	r1, 1286c <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   12860:	69a2      	ldr	r2, [r4, #24]
   12862:	b10a      	cbz	r2, 12868 <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
   12864:	4620      	mov	r0, r4
   12866:	4790      	blx	r2
			}
			dropped_item = NULL;
   12868:	2300      	movs	r3, #0
   1286a:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   1286c:	2d00      	cmp	r5, #0
   1286e:	d1ad      	bne.n	127cc <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   12870:	4650      	mov	r0, sl
   12872:	b009      	add	sp, #36	; 0x24
   12874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   12878:	6923      	ldr	r3, [r4, #16]
   1287a:	f043 0308 	orr.w	r3, r3, #8
   1287e:	6123      	str	r3, [r4, #16]
   12880:	e7e3      	b.n	1284a <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
   12882:	b118      	cbz	r0, 1288c <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
   12884:	4620      	mov	r0, r4
   12886:	f010 ff03 	bl	23690 <add_skip_item>
			cont = true;
   1288a:	e7df      	b.n	1284c <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   1288c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   12890:	4313      	orrs	r3, r2
   12892:	d036      	beq.n	12902 <mpsc_pbuf_alloc+0x156>
   12894:	9103      	str	r1, [sp, #12]
   12896:	f013 f96c 	bl	25b72 <k_is_in_isr>
   1289a:	9903      	ldr	r1, [sp, #12]
   1289c:	bb88      	cbnz	r0, 12902 <mpsc_pbuf_alloc+0x156>
   1289e:	4630      	mov	r0, r6
   128a0:	f00c fed4 	bl	1f64c <z_spin_unlock_valid>
   128a4:	b968      	cbnz	r0, 128c2 <mpsc_pbuf_alloc+0x116>
   128a6:	4a1b      	ldr	r2, [pc, #108]	; (12914 <mpsc_pbuf_alloc+0x168>)
   128a8:	491e      	ldr	r1, [pc, #120]	; (12924 <mpsc_pbuf_alloc+0x178>)
   128aa:	481c      	ldr	r0, [pc, #112]	; (1291c <mpsc_pbuf_alloc+0x170>)
   128ac:	23c2      	movs	r3, #194	; 0xc2
   128ae:	f010 fea4 	bl	235fa <assert_print>
   128b2:	4631      	mov	r1, r6
   128b4:	481c      	ldr	r0, [pc, #112]	; (12928 <mpsc_pbuf_alloc+0x17c>)
   128b6:	f010 fea0 	bl	235fa <assert_print>
   128ba:	21c2      	movs	r1, #194	; 0xc2
   128bc:	4815      	ldr	r0, [pc, #84]	; (12914 <mpsc_pbuf_alloc+0x168>)
   128be:	f010 fe95 	bl	235ec <assert_post_action>
   128c2:	f38b 8811 	msr	BASEPRI, fp
   128c6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   128ca:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   128ce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   128d2:	f00d f9ab 	bl	1fc2c <z_impl_k_sem_take>
   128d6:	4605      	mov	r5, r0
	__asm__ volatile(
   128d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   128dc:	f3ef 8911 	mrs	r9, BASEPRI
   128e0:	f383 8812 	msr	BASEPRI_MAX, r3
   128e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   128e8:	4630      	mov	r0, r6
   128ea:	f00c fea1 	bl	1f630 <z_spin_lock_valid>
   128ee:	2800      	cmp	r0, #0
   128f0:	f43f af79 	beq.w	127e6 <mpsc_pbuf_alloc+0x3a>
	z_spin_lock_set_owner(l);
   128f4:	4630      	mov	r0, r6
			cont = (err == 0) ? true : false;
   128f6:	fab5 f585 	clz	r5, r5
   128fa:	f00c feb7 	bl	1f66c <z_spin_lock_set_owner>
   128fe:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   12900:	e7a4      	b.n	1284c <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
   12902:	ab07      	add	r3, sp, #28
   12904:	aa05      	add	r2, sp, #20
   12906:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   12908:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   1290a:	f010 fede 	bl	236ca <drop_item_locked>
   1290e:	4605      	mov	r5, r0
   12910:	e79c      	b.n	1284c <mpsc_pbuf_alloc+0xa0>
   12912:	bf00      	nop
   12914:	0002730e 	.word	0x0002730e
   12918:	00027367 	.word	0x00027367
   1291c:	00026f1a 	.word	0x00026f1a
   12920:	0002737c 	.word	0x0002737c
   12924:	0002733b 	.word	0x0002733b
   12928:	00027352 	.word	0x00027352

0001292c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1292c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12930:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   12932:	69c3      	ldr	r3, [r0, #28]
   12934:	4608      	mov	r0, r1
{
   12936:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
   12938:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   1293a:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   1293e:	4607      	mov	r7, r0
   12940:	f04f 0340 	mov.w	r3, #64	; 0x40
   12944:	f3ef 8811 	mrs	r8, BASEPRI
   12948:	f383 8812 	msr	BASEPRI_MAX, r3
   1294c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12950:	4628      	mov	r0, r5
   12952:	f00c fe6d 	bl	1f630 <z_spin_lock_valid>
   12956:	b968      	cbnz	r0, 12974 <mpsc_pbuf_commit+0x48>
   12958:	4a19      	ldr	r2, [pc, #100]	; (129c0 <mpsc_pbuf_commit+0x94>)
   1295a:	491a      	ldr	r1, [pc, #104]	; (129c4 <mpsc_pbuf_commit+0x98>)
   1295c:	481a      	ldr	r0, [pc, #104]	; (129c8 <mpsc_pbuf_commit+0x9c>)
   1295e:	2394      	movs	r3, #148	; 0x94
   12960:	f010 fe4b 	bl	235fa <assert_print>
   12964:	4629      	mov	r1, r5
   12966:	4819      	ldr	r0, [pc, #100]	; (129cc <mpsc_pbuf_commit+0xa0>)
   12968:	f010 fe47 	bl	235fa <assert_print>
   1296c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1296e:	4814      	ldr	r0, [pc, #80]	; (129c0 <mpsc_pbuf_commit+0x94>)
   12970:	f010 fe3c 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   12974:	4628      	mov	r0, r5
   12976:	f00c fe79 	bl	1f66c <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   1297a:	7833      	ldrb	r3, [r6, #0]
   1297c:	f043 0301 	orr.w	r3, r3, #1
   12980:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   12982:	6861      	ldr	r1, [r4, #4]
   12984:	463a      	mov	r2, r7
   12986:	4620      	mov	r0, r4
   12988:	f010 fe68 	bl	2365c <idx_inc>
   1298c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1298e:	4620      	mov	r0, r4
   12990:	f010 ff2d 	bl	237ee <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12994:	4628      	mov	r0, r5
   12996:	f00c fe59 	bl	1f64c <z_spin_unlock_valid>
   1299a:	b958      	cbnz	r0, 129b4 <mpsc_pbuf_commit+0x88>
   1299c:	4a08      	ldr	r2, [pc, #32]	; (129c0 <mpsc_pbuf_commit+0x94>)
   1299e:	490c      	ldr	r1, [pc, #48]	; (129d0 <mpsc_pbuf_commit+0xa4>)
   129a0:	4809      	ldr	r0, [pc, #36]	; (129c8 <mpsc_pbuf_commit+0x9c>)
   129a2:	23c2      	movs	r3, #194	; 0xc2
   129a4:	f010 fe29 	bl	235fa <assert_print>
   129a8:	4629      	mov	r1, r5
   129aa:	480a      	ldr	r0, [pc, #40]	; (129d4 <mpsc_pbuf_commit+0xa8>)
   129ac:	f010 fe25 	bl	235fa <assert_print>
   129b0:	21c2      	movs	r1, #194	; 0xc2
   129b2:	e7dc      	b.n	1296e <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
   129b4:	f388 8811 	msr	BASEPRI, r8
   129b8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   129bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129c0:	0002730e 	.word	0x0002730e
   129c4:	00027367 	.word	0x00027367
   129c8:	00026f1a 	.word	0x00026f1a
   129cc:	0002737c 	.word	0x0002737c
   129d0:	0002733b 	.word	0x0002733b
   129d4:	00027352 	.word	0x00027352

000129d8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   129d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   129dc:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
   129de:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   129e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   129e6:	f3ef 8811 	mrs	r8, BASEPRI
   129ea:	f383 8812 	msr	BASEPRI_MAX, r3
   129ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   129f2:	4638      	mov	r0, r7
   129f4:	f00c fe1c 	bl	1f630 <z_spin_lock_valid>
   129f8:	4605      	mov	r5, r0
   129fa:	b968      	cbnz	r0, 12a18 <mpsc_pbuf_claim+0x40>
   129fc:	4a34      	ldr	r2, [pc, #208]	; (12ad0 <mpsc_pbuf_claim+0xf8>)
   129fe:	4935      	ldr	r1, [pc, #212]	; (12ad4 <mpsc_pbuf_claim+0xfc>)
   12a00:	4835      	ldr	r0, [pc, #212]	; (12ad8 <mpsc_pbuf_claim+0x100>)
   12a02:	2394      	movs	r3, #148	; 0x94
   12a04:	f010 fdf9 	bl	235fa <assert_print>
   12a08:	4639      	mov	r1, r7
   12a0a:	4834      	ldr	r0, [pc, #208]	; (12adc <mpsc_pbuf_claim+0x104>)
   12a0c:	f010 fdf5 	bl	235fa <assert_print>
   12a10:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12a12:	482f      	ldr	r0, [pc, #188]	; (12ad0 <mpsc_pbuf_claim+0xf8>)
   12a14:	f010 fdea 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   12a18:	4638      	mov	r0, r7
   12a1a:	f00c fe27 	bl	1f66c <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   12a1e:	6923      	ldr	r3, [r4, #16]
   12a20:	68a2      	ldr	r2, [r4, #8]
   12a22:	f013 0f08 	tst.w	r3, #8
   12a26:	d102      	bne.n	12a2e <mpsc_pbuf_claim+0x56>
   12a28:	6863      	ldr	r3, [r4, #4]
   12a2a:	429a      	cmp	r2, r3
   12a2c:	d900      	bls.n	12a30 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
   12a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   12a30:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   12a32:	2b00      	cmp	r3, #0
   12a34:	d03d      	beq.n	12ab2 <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
   12a36:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
   12a38:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   12a3c:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
   12a40:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   12a44:	d038      	beq.n	12ab8 <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
   12a46:	2802      	cmp	r0, #2
   12a48:	d103      	bne.n	12a52 <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
   12a4a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   12a4e:	08b6      	lsrs	r6, r6, #2
   12a50:	d105      	bne.n	12a5e <mpsc_pbuf_claim+0x86>
   12a52:	07d8      	lsls	r0, r3, #31
   12a54:	d41d      	bmi.n	12a92 <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
   12a56:	69e3      	ldr	r3, [r4, #28]
   12a58:	4648      	mov	r0, r9
   12a5a:	4798      	blx	r3
   12a5c:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   12a5e:	68a1      	ldr	r1, [r4, #8]
   12a60:	4632      	mov	r2, r6
   12a62:	4620      	mov	r0, r4
   12a64:	f010 fdfa 	bl	2365c <idx_inc>
				rd_idx_inc(buffer, inc);
   12a68:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
   12a6a:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   12a6c:	4620      	mov	r0, r4
   12a6e:	f010 fe03 	bl	23678 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12a72:	4638      	mov	r0, r7
   12a74:	f00c fdea 	bl	1f64c <z_spin_unlock_valid>
   12a78:	bb00      	cbnz	r0, 12abc <mpsc_pbuf_claim+0xe4>
   12a7a:	4a15      	ldr	r2, [pc, #84]	; (12ad0 <mpsc_pbuf_claim+0xf8>)
   12a7c:	4918      	ldr	r1, [pc, #96]	; (12ae0 <mpsc_pbuf_claim+0x108>)
   12a7e:	4816      	ldr	r0, [pc, #88]	; (12ad8 <mpsc_pbuf_claim+0x100>)
   12a80:	23c2      	movs	r3, #194	; 0xc2
   12a82:	f010 fdba 	bl	235fa <assert_print>
   12a86:	4639      	mov	r1, r7
   12a88:	4816      	ldr	r0, [pc, #88]	; (12ae4 <mpsc_pbuf_claim+0x10c>)
   12a8a:	f010 fdb6 	bl	235fa <assert_print>
   12a8e:	21c2      	movs	r1, #194	; 0xc2
   12a90:	e7bf      	b.n	12a12 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
   12a92:	f043 0302 	orr.w	r3, r3, #2
   12a96:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   12a9a:	4648      	mov	r0, r9
   12a9c:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
   12a9e:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   12aa0:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   12aa2:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   12aa4:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   12aa6:	4620      	mov	r0, r4
   12aa8:	f010 fdd8 	bl	2365c <idx_inc>
		cont = false;
   12aac:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
   12aae:	60a0      	str	r0, [r4, #8]
   12ab0:	e7df      	b.n	12a72 <mpsc_pbuf_claim+0x9a>
		cont = false;
   12ab2:	461d      	mov	r5, r3
			item = NULL;
   12ab4:	46a9      	mov	r9, r5
   12ab6:	e7dc      	b.n	12a72 <mpsc_pbuf_claim+0x9a>
		cont = false;
   12ab8:	4605      	mov	r5, r0
   12aba:	e7fb      	b.n	12ab4 <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
   12abc:	f388 8811 	msr	BASEPRI, r8
   12ac0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   12ac4:	2d00      	cmp	r5, #0
   12ac6:	d18c      	bne.n	129e2 <mpsc_pbuf_claim+0xa>

	return item;
}
   12ac8:	4648      	mov	r0, r9
   12aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12ace:	bf00      	nop
   12ad0:	0002730e 	.word	0x0002730e
   12ad4:	00027367 	.word	0x00027367
   12ad8:	00026f1a 	.word	0x00026f1a
   12adc:	0002737c 	.word	0x0002737c
   12ae0:	0002733b 	.word	0x0002733b
   12ae4:	00027352 	.word	0x00027352

00012ae8 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   12ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12aec:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   12aee:	69c3      	ldr	r3, [r0, #28]
   12af0:	4608      	mov	r0, r1
{
   12af2:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   12af4:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   12af6:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   12afa:	4607      	mov	r7, r0
	__asm__ volatile(
   12afc:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b00:	f3ef 8811 	mrs	r8, BASEPRI
   12b04:	f383 8812 	msr	BASEPRI_MAX, r3
   12b08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12b0c:	4630      	mov	r0, r6
   12b0e:	f00c fd8f 	bl	1f630 <z_spin_lock_valid>
   12b12:	b968      	cbnz	r0, 12b30 <mpsc_pbuf_free+0x48>
   12b14:	4a26      	ldr	r2, [pc, #152]	; (12bb0 <mpsc_pbuf_free+0xc8>)
   12b16:	4927      	ldr	r1, [pc, #156]	; (12bb4 <mpsc_pbuf_free+0xcc>)
   12b18:	4827      	ldr	r0, [pc, #156]	; (12bb8 <mpsc_pbuf_free+0xd0>)
   12b1a:	2394      	movs	r3, #148	; 0x94
   12b1c:	f010 fd6d 	bl	235fa <assert_print>
   12b20:	4631      	mov	r1, r6
   12b22:	4826      	ldr	r0, [pc, #152]	; (12bbc <mpsc_pbuf_free+0xd4>)
   12b24:	f010 fd69 	bl	235fa <assert_print>
   12b28:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b2a:	4821      	ldr	r0, [pc, #132]	; (12bb0 <mpsc_pbuf_free+0xc8>)
   12b2c:	f010 fd5e 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   12b30:	4630      	mov	r0, r6
   12b32:	f00c fd9b 	bl	1f66c <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   12b36:	782b      	ldrb	r3, [r5, #0]
   12b38:	f36f 0300 	bfc	r3, #0, #1
   12b3c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12b3e:	6923      	ldr	r3, [r4, #16]
   12b40:	079b      	lsls	r3, r3, #30
   12b42:	d505      	bpl.n	12b50 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   12b44:	68e2      	ldr	r2, [r4, #12]
   12b46:	6a23      	ldr	r3, [r4, #32]
   12b48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   12b4c:	429d      	cmp	r5, r3
   12b4e:	d120      	bne.n	12b92 <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
   12b50:	782b      	ldrb	r3, [r5, #0]
   12b52:	f36f 0341 	bfc	r3, #1, #1
   12b56:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   12b58:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   12b5c:	4299      	cmp	r1, r3
   12b5e:	d104      	bne.n	12b6a <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   12b60:	463a      	mov	r2, r7
   12b62:	4620      	mov	r0, r4
   12b64:	f010 fd7a 	bl	2365c <idx_inc>
   12b68:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   12b6a:	4639      	mov	r1, r7
   12b6c:	4620      	mov	r0, r4
   12b6e:	f010 fd83 	bl	23678 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12b72:	4630      	mov	r0, r6
   12b74:	f00c fd6a 	bl	1f64c <z_spin_unlock_valid>
   12b78:	b980      	cbnz	r0, 12b9c <mpsc_pbuf_free+0xb4>
   12b7a:	4a0d      	ldr	r2, [pc, #52]	; (12bb0 <mpsc_pbuf_free+0xc8>)
   12b7c:	4910      	ldr	r1, [pc, #64]	; (12bc0 <mpsc_pbuf_free+0xd8>)
   12b7e:	480e      	ldr	r0, [pc, #56]	; (12bb8 <mpsc_pbuf_free+0xd0>)
   12b80:	23c2      	movs	r3, #194	; 0xc2
   12b82:	f010 fd3a 	bl	235fa <assert_print>
   12b86:	4631      	mov	r1, r6
   12b88:	480e      	ldr	r0, [pc, #56]	; (12bc4 <mpsc_pbuf_free+0xdc>)
   12b8a:	f010 fd36 	bl	235fa <assert_print>
   12b8e:	21c2      	movs	r1, #194	; 0xc2
   12b90:	e7cb      	b.n	12b2a <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   12b92:	682b      	ldr	r3, [r5, #0]
   12b94:	f367 039f 	bfi	r3, r7, #2, #30
   12b98:	602b      	str	r3, [r5, #0]
   12b9a:	e7ea      	b.n	12b72 <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
   12b9c:	f388 8811 	msr	BASEPRI, r8
   12ba0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   12ba4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   12ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12bac:	f00c bffa 	b.w	1fba4 <z_impl_k_sem_give>
   12bb0:	0002730e 	.word	0x0002730e
   12bb4:	00027367 	.word	0x00027367
   12bb8:	00026f1a 	.word	0x00026f1a
   12bbc:	0002737c 	.word	0x0002737c
   12bc0:	0002733b 	.word	0x0002733b
   12bc4:	00027352 	.word	0x00027352

00012bc8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12bc8:	f00b ba9e 	b.w	1e108 <SystemInit>

00012bcc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   12bcc:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12bce:	4910      	ldr	r1, [pc, #64]	; (12c10 <enable_logger+0x44>)
   12bd0:	4810      	ldr	r0, [pc, #64]	; (12c14 <enable_logger+0x48>)
{
   12bd2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12bd4:	2200      	movs	r2, #0
   12bd6:	f013 f8f0 	bl	25dba <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12bda:	4d0f      	ldr	r5, [pc, #60]	; (12c18 <enable_logger+0x4c>)
   12bdc:	490f      	ldr	r1, [pc, #60]	; (12c1c <enable_logger+0x50>)
   12bde:	2200      	movs	r2, #0
   12be0:	2300      	movs	r3, #0
   12be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12be6:	2400      	movs	r4, #0
   12be8:	230e      	movs	r3, #14
   12bea:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12bee:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12bf2:	4b0b      	ldr	r3, [pc, #44]	; (12c20 <enable_logger+0x54>)
   12bf4:	9400      	str	r4, [sp, #0]
   12bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12bfa:	4628      	mov	r0, r5
   12bfc:	f00c fc4e 	bl	1f49c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12c00:	4908      	ldr	r1, [pc, #32]	; (12c24 <enable_logger+0x58>)
   12c02:	4628      	mov	r0, r5
   12c04:	f012 ffbb 	bl	25b7e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   12c08:	4620      	mov	r0, r4
   12c0a:	b009      	add	sp, #36	; 0x24
   12c0c:	bd30      	pop	{r4, r5, pc}
   12c0e:	bf00      	nop
   12c10:	00012d6d 	.word	0x00012d6d
   12c14:	20001ca8 	.word	0x20001ca8
   12c18:	20001820 	.word	0x20001820
   12c1c:	20003980 	.word	0x20003980
   12c20:	0001305d 	.word	0x0001305d
   12c24:	000273ec 	.word	0x000273ec

00012c28 <activate_foreach_backend>:
{
   12c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c2c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12c88 <activate_foreach_backend+0x60>
{
   12c30:	4604      	mov	r4, r0
	while (mask_cpy) {
   12c32:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   12c34:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   12c38:	b914      	cbnz	r4, 12c40 <activate_foreach_backend+0x18>
}
   12c3a:	4638      	mov	r0, r7
   12c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   12c40:	fa94 f5a4 	rbit	r5, r4
   12c44:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   12c48:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c4c:	012e      	lsls	r6, r5, #4
   12c4e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   12c52:	ea6f 0a03 	mvn.w	sl, r3
   12c56:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c5a:	7b2b      	ldrb	r3, [r5, #12]
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d0eb      	beq.n	12c38 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   12c60:	f858 3006 	ldr.w	r3, [r8, r6]
   12c64:	691b      	ldr	r3, [r3, #16]
   12c66:	b94b      	cbnz	r3, 12c7c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   12c68:	4446      	add	r6, r8
			log_backend_enable(backend,
   12c6a:	2204      	movs	r2, #4
   12c6c:	6873      	ldr	r3, [r6, #4]
   12c6e:	4628      	mov	r0, r5
   12c70:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   12c72:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   12c76:	f000 faf7 	bl	13268 <log_backend_enable>
   12c7a:	e7dd      	b.n	12c38 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   12c7c:	4628      	mov	r0, r5
   12c7e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12c80:	2800      	cmp	r0, #0
   12c82:	d1d9      	bne.n	12c38 <activate_foreach_backend+0x10>
   12c84:	e7f0      	b.n	12c68 <activate_foreach_backend+0x40>
   12c86:	bf00      	nop
   12c88:	00026354 	.word	0x00026354

00012c8c <z_log_init>:
{
   12c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
   12c90:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 12d4c <z_log_init+0xc0>
   12c94:	4c2e      	ldr	r4, [pc, #184]	; (12d50 <z_log_init+0xc4>)
   12c96:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12c9a:	2b9f      	cmp	r3, #159	; 0x9f
{
   12c9c:	4680      	mov	r8, r0
   12c9e:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12ca0:	d90b      	bls.n	12cba <z_log_init+0x2e>
   12ca2:	492c      	ldr	r1, [pc, #176]	; (12d54 <z_log_init+0xc8>)
   12ca4:	4a2c      	ldr	r2, [pc, #176]	; (12d58 <z_log_init+0xcc>)
   12ca6:	482d      	ldr	r0, [pc, #180]	; (12d5c <z_log_init+0xd0>)
   12ca8:	f44f 738c 	mov.w	r3, #280	; 0x118
   12cac:	f010 fca5 	bl	235fa <assert_print>
   12cb0:	f44f 718c 	mov.w	r1, #280	; 0x118
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12cb4:	4828      	ldr	r0, [pc, #160]	; (12d58 <z_log_init+0xcc>)
   12cb6:	f010 fc99 	bl	235ec <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
   12cba:	4829      	ldr	r0, [pc, #164]	; (12d60 <z_log_init+0xd4>)
   12cbc:	f010 fdc6 	bl	2384c <atomic_inc>
   12cc0:	4606      	mov	r6, r0
   12cc2:	b360      	cbz	r0, 12d1e <z_log_init+0x92>
	uint32_t mask = 0;
   12cc4:	2500      	movs	r5, #0
}
   12cc6:	4628      	mov	r0, r5
   12cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   12ccc:	7b23      	ldrb	r3, [r4, #12]
   12cce:	b173      	cbz	r3, 12cee <z_log_init+0x62>
	if (backend->api->init) {
   12cd0:	6823      	ldr	r3, [r4, #0]
   12cd2:	68db      	ldr	r3, [r3, #12]
   12cd4:	b10b      	cbz	r3, 12cda <z_log_init+0x4e>
		backend->api->init(backend);
   12cd6:	4620      	mov	r0, r4
   12cd8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   12cda:	6823      	ldr	r3, [r4, #0]
   12cdc:	691b      	ldr	r3, [r3, #16]
   12cde:	b9b3      	cbnz	r3, 12d0e <z_log_init+0x82>
				log_backend_enable(backend,
   12ce0:	6863      	ldr	r3, [r4, #4]
   12ce2:	2204      	movs	r2, #4
   12ce4:	6819      	ldr	r1, [r3, #0]
   12ce6:	4620      	mov	r0, r4
   12ce8:	f000 fabe 	bl	13268 <log_backend_enable>
			i++;
   12cec:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12cee:	3410      	adds	r4, #16
   12cf0:	454c      	cmp	r4, r9
   12cf2:	d918      	bls.n	12d26 <z_log_init+0x9a>
   12cf4:	491b      	ldr	r1, [pc, #108]	; (12d64 <z_log_init+0xd8>)
   12cf6:	4a18      	ldr	r2, [pc, #96]	; (12d58 <z_log_init+0xcc>)
   12cf8:	4818      	ldr	r0, [pc, #96]	; (12d5c <z_log_init+0xd0>)
   12cfa:	f240 1325 	movw	r3, #293	; 0x125
   12cfe:	f010 fc7c 	bl	235fa <assert_print>
   12d02:	4819      	ldr	r0, [pc, #100]	; (12d68 <z_log_init+0xdc>)
   12d04:	f010 fc79 	bl	235fa <assert_print>
   12d08:	f240 1125 	movw	r1, #293	; 0x125
   12d0c:	e7d2      	b.n	12cb4 <z_log_init+0x28>
		return backend->api->is_ready(backend);
   12d0e:	4620      	mov	r0, r4
   12d10:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   12d12:	2800      	cmp	r0, #0
   12d14:	d0e4      	beq.n	12ce0 <z_log_init+0x54>
				mask |= BIT(i);
   12d16:	fa0a f306 	lsl.w	r3, sl, r6
   12d1a:	431d      	orrs	r5, r3
   12d1c:	e7e6      	b.n	12cec <z_log_init+0x60>
	uint32_t mask = 0;
   12d1e:	4605      	mov	r5, r0
				mask |= BIT(i);
   12d20:	f04f 0a01 	mov.w	sl, #1
   12d24:	e7e4      	b.n	12cf0 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12d26:	d3d1      	bcc.n	12ccc <z_log_init+0x40>
	if (blocking) {
   12d28:	f1b8 0f00 	cmp.w	r8, #0
   12d2c:	d0cb      	beq.n	12cc6 <z_log_init+0x3a>
		while (mask) {
   12d2e:	2d00      	cmp	r5, #0
   12d30:	d0c8      	beq.n	12cc4 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
   12d32:	4628      	mov	r0, r5
   12d34:	f7ff ff78 	bl	12c28 <activate_foreach_backend>
   12d38:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   12d3a:	2f00      	cmp	r7, #0
   12d3c:	d0f7      	beq.n	12d2e <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
   12d3e:	2100      	movs	r1, #0
   12d40:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12d44:	f00e fd80 	bl	21848 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   12d48:	e7f1      	b.n	12d2e <z_log_init+0xa2>
   12d4a:	bf00      	nop
   12d4c:	00026374 	.word	0x00026374
   12d50:	00026354 	.word	0x00026354
   12d54:	00027421 	.word	0x00027421
   12d58:	000273f4 	.word	0x000273f4
   12d5c:	00026f1a 	.word	0x00026f1a
   12d60:	20002b4c 	.word	0x20002b4c
   12d64:	00027445 	.word	0x00027445
   12d68:	00027466 	.word	0x00027466

00012d6c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12d6c:	4801      	ldr	r0, [pc, #4]	; (12d74 <log_process_thread_timer_expiry_fn+0x8>)
   12d6e:	f00c bf19 	b.w	1fba4 <z_impl_k_sem_give>
   12d72:	bf00      	nop
   12d74:	20000954 	.word	0x20000954

00012d78 <log_format_func_t_get>:
}
   12d78:	4b01      	ldr	r3, [pc, #4]	; (12d80 <log_format_func_t_get+0x8>)
   12d7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12d7e:	4770      	bx	lr
   12d80:	00026444 	.word	0x00026444

00012d84 <log_set_timestamp_func>:
{
   12d84:	b508      	push	{r3, lr}
   12d86:	4603      	mov	r3, r0
   12d88:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   12d8a:	b12b      	cbz	r3, 12d98 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   12d8c:	4a04      	ldr	r2, [pc, #16]	; (12da0 <log_set_timestamp_func+0x1c>)
   12d8e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   12d90:	f000 fd9e 	bl	138d0 <log_output_timestamp_freq_set>
	return 0;
   12d94:	2000      	movs	r0, #0
}
   12d96:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12d98:	f06f 0015 	mvn.w	r0, #21
   12d9c:	e7fb      	b.n	12d96 <log_set_timestamp_func+0x12>
   12d9e:	bf00      	nop
   12da0:	200005d0 	.word	0x200005d0

00012da4 <z_log_notify_backend_enabled>:
{
   12da4:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12da6:	4c04      	ldr	r4, [pc, #16]	; (12db8 <z_log_notify_backend_enabled+0x14>)
   12da8:	7823      	ldrb	r3, [r4, #0]
   12daa:	b913      	cbnz	r3, 12db2 <z_log_notify_backend_enabled+0xe>
   12dac:	4803      	ldr	r0, [pc, #12]	; (12dbc <z_log_notify_backend_enabled+0x18>)
   12dae:	f00c fef9 	bl	1fba4 <z_impl_k_sem_give>
	backend_attached = true;
   12db2:	2301      	movs	r3, #1
   12db4:	7023      	strb	r3, [r4, #0]
}
   12db6:	bd10      	pop	{r4, pc}
   12db8:	20002f49 	.word	0x20002f49
   12dbc:	20000954 	.word	0x20000954

00012dc0 <z_log_dropped>:
{
   12dc0:	b510      	push	{r4, lr}
   12dc2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   12dc4:	4808      	ldr	r0, [pc, #32]	; (12de8 <z_log_dropped+0x28>)
   12dc6:	f010 fd41 	bl	2384c <atomic_inc>
	if (buffered) {
   12dca:	b15c      	cbz	r4, 12de4 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12dcc:	f3bf 8f5b 	dmb	ish
   12dd0:	4b06      	ldr	r3, [pc, #24]	; (12dec <z_log_dropped+0x2c>)
   12dd2:	e853 1f00 	ldrex	r1, [r3]
   12dd6:	3901      	subs	r1, #1
   12dd8:	e843 1200 	strex	r2, r1, [r3]
   12ddc:	2a00      	cmp	r2, #0
   12dde:	d1f8      	bne.n	12dd2 <z_log_dropped+0x12>
   12de0:	f3bf 8f5b 	dmb	ish
}
   12de4:	bd10      	pop	{r4, pc}
   12de6:	bf00      	nop
   12de8:	20002b44 	.word	0x20002b44
   12dec:	20002b48 	.word	0x20002b48

00012df0 <z_log_dropped_read_and_clear>:
}
   12df0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12df2:	4b06      	ldr	r3, [pc, #24]	; (12e0c <z_log_dropped_read_and_clear+0x1c>)
   12df4:	f3bf 8f5b 	dmb	ish
   12df8:	4601      	mov	r1, r0
   12dfa:	e853 0f00 	ldrex	r0, [r3]
   12dfe:	e843 1200 	strex	r2, r1, [r3]
   12e02:	2a00      	cmp	r2, #0
   12e04:	d1f9      	bne.n	12dfa <z_log_dropped_read_and_clear+0xa>
   12e06:	f3bf 8f5b 	dmb	ish
   12e0a:	4770      	bx	lr
   12e0c:	20002b44 	.word	0x20002b44

00012e10 <dropped_notify>:
{
   12e10:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12e12:	f7ff ffed 	bl	12df0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e16:	4c10      	ldr	r4, [pc, #64]	; (12e58 <dropped_notify+0x48>)
   12e18:	4e10      	ldr	r6, [pc, #64]	; (12e5c <dropped_notify+0x4c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   12e1a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e1c:	42b4      	cmp	r4, r6
   12e1e:	d919      	bls.n	12e54 <dropped_notify+0x44>
   12e20:	490f      	ldr	r1, [pc, #60]	; (12e60 <dropped_notify+0x50>)
   12e22:	4a10      	ldr	r2, [pc, #64]	; (12e64 <dropped_notify+0x54>)
   12e24:	4810      	ldr	r0, [pc, #64]	; (12e68 <dropped_notify+0x58>)
   12e26:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   12e2a:	f010 fbe6 	bl	235fa <assert_print>
   12e2e:	480f      	ldr	r0, [pc, #60]	; (12e6c <dropped_notify+0x5c>)
   12e30:	f010 fbe3 	bl	235fa <assert_print>
   12e34:	480b      	ldr	r0, [pc, #44]	; (12e64 <dropped_notify+0x54>)
   12e36:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   12e3a:	f010 fbd7 	bl	235ec <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12e3e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12e40:	795b      	ldrb	r3, [r3, #5]
   12e42:	b12b      	cbz	r3, 12e50 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
   12e44:	6823      	ldr	r3, [r4, #0]
   12e46:	685b      	ldr	r3, [r3, #4]
   12e48:	b113      	cbz	r3, 12e50 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
   12e4a:	4629      	mov	r1, r5
   12e4c:	4620      	mov	r0, r4
   12e4e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e50:	3410      	adds	r4, #16
   12e52:	e7e3      	b.n	12e1c <dropped_notify+0xc>
   12e54:	d3f3      	bcc.n	12e3e <dropped_notify+0x2e>
}
   12e56:	bd70      	pop	{r4, r5, r6, pc}
   12e58:	00026354 	.word	0x00026354
   12e5c:	00026374 	.word	0x00026374
   12e60:	00027445 	.word	0x00027445
   12e64:	000273f4 	.word	0x000273f4
   12e68:	00026f1a 	.word	0x00026f1a
   12e6c:	00027466 	.word	0x00027466

00012e70 <z_log_msg_init>:
{
   12e70:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   12e72:	4c04      	ldr	r4, [pc, #16]	; (12e84 <z_log_msg_init+0x14>)
   12e74:	4904      	ldr	r1, [pc, #16]	; (12e88 <z_log_msg_init+0x18>)
   12e76:	4620      	mov	r0, r4
   12e78:	f7ff fc66 	bl	12748 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   12e7c:	4b03      	ldr	r3, [pc, #12]	; (12e8c <z_log_msg_init+0x1c>)
   12e7e:	601c      	str	r4, [r3, #0]
}
   12e80:	bd10      	pop	{r4, pc}
   12e82:	bf00      	nop
   12e84:	20000854 	.word	0x20000854
   12e88:	00026430 	.word	0x00026430
   12e8c:	20002b3c 	.word	0x20002b3c

00012e90 <log_core_init>:
	panic_mode = false;
   12e90:	4a08      	ldr	r2, [pc, #32]	; (12eb4 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   12e92:	4809      	ldr	r0, [pc, #36]	; (12eb8 <log_core_init+0x28>)
{
   12e94:	b508      	push	{r3, lr}
	panic_mode = false;
   12e96:	2300      	movs	r3, #0
   12e98:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12e9a:	4a08      	ldr	r2, [pc, #32]	; (12ebc <log_core_init+0x2c>)
   12e9c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   12e9e:	4a08      	ldr	r2, [pc, #32]	; (12ec0 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   12ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   12ea4:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   12ea6:	f7ff ff6d 	bl	12d84 <log_set_timestamp_func>
}
   12eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   12eae:	f7ff bfdf 	b.w	12e70 <z_log_msg_init>
   12eb2:	bf00      	nop
   12eb4:	20002f4a 	.word	0x20002f4a
   12eb8:	00023849 	.word	0x00023849
   12ebc:	20002b44 	.word	0x20002b44
   12ec0:	20002b48 	.word	0x20002b48

00012ec4 <z_log_msg_alloc>:
{
   12ec4:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   12ec6:	2200      	movs	r2, #0
   12ec8:	4801      	ldr	r0, [pc, #4]	; (12ed0 <z_log_msg_alloc+0xc>)
   12eca:	2300      	movs	r3, #0
   12ecc:	f7ff bc6e 	b.w	127ac <mpsc_pbuf_alloc>
   12ed0:	20000854 	.word	0x20000854

00012ed4 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   12ed4:	4801      	ldr	r0, [pc, #4]	; (12edc <z_log_msg_local_claim+0x8>)
   12ed6:	f7ff bd7f 	b.w	129d8 <mpsc_pbuf_claim>
   12eda:	bf00      	nop
   12edc:	20000854 	.word	0x20000854

00012ee0 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   12ee0:	4b02      	ldr	r3, [pc, #8]	; (12eec <z_log_msg_free+0xc>)
{
   12ee2:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   12ee4:	6818      	ldr	r0, [r3, #0]
   12ee6:	f7ff bdff 	b.w	12ae8 <mpsc_pbuf_free>
   12eea:	bf00      	nop
   12eec:	20002b3c 	.word	0x20002b3c

00012ef0 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   12ef0:	4801      	ldr	r0, [pc, #4]	; (12ef8 <z_log_msg_pending+0x8>)
   12ef2:	f010 bc89 	b.w	23808 <mpsc_pbuf_is_pending>
   12ef6:	bf00      	nop
   12ef8:	20000854 	.word	0x20000854

00012efc <z_impl_log_process>:
{
   12efc:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   12efe:	4b30      	ldr	r3, [pc, #192]	; (12fc0 <z_impl_log_process+0xc4>)
   12f00:	7818      	ldrb	r0, [r3, #0]
   12f02:	2800      	cmp	r0, #0
   12f04:	d05b      	beq.n	12fbe <z_impl_log_process+0xc2>
	return z_log_msg_local_claim();
   12f06:	f7ff ffe5 	bl	12ed4 <z_log_msg_local_claim>
	if (msg) {
   12f0a:	4605      	mov	r5, r0
   12f0c:	b360      	cbz	r0, 12f68 <z_impl_log_process+0x6c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12f0e:	f3bf 8f5b 	dmb	ish
   12f12:	4b2c      	ldr	r3, [pc, #176]	; (12fc4 <z_impl_log_process+0xc8>)
   12f14:	e853 1f00 	ldrex	r1, [r3]
   12f18:	3901      	subs	r1, #1
   12f1a:	e843 1200 	strex	r2, r1, [r3]
   12f1e:	2a00      	cmp	r2, #0
   12f20:	d1f8      	bne.n	12f14 <z_impl_log_process+0x18>
   12f22:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12f26:	4c28      	ldr	r4, [pc, #160]	; (12fc8 <z_impl_log_process+0xcc>)
   12f28:	4e28      	ldr	r6, [pc, #160]	; (12fcc <z_impl_log_process+0xd0>)
   12f2a:	42b4      	cmp	r4, r6
   12f2c:	d918      	bls.n	12f60 <z_impl_log_process+0x64>
   12f2e:	4928      	ldr	r1, [pc, #160]	; (12fd0 <z_impl_log_process+0xd4>)
   12f30:	4a28      	ldr	r2, [pc, #160]	; (12fd4 <z_impl_log_process+0xd8>)
   12f32:	4829      	ldr	r0, [pc, #164]	; (12fd8 <z_impl_log_process+0xdc>)
   12f34:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   12f38:	f010 fb5f 	bl	235fa <assert_print>
   12f3c:	4827      	ldr	r0, [pc, #156]	; (12fdc <z_impl_log_process+0xe0>)
   12f3e:	f010 fb5c 	bl	235fa <assert_print>
   12f42:	4824      	ldr	r0, [pc, #144]	; (12fd4 <z_impl_log_process+0xd8>)
   12f44:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   12f48:	f010 fb50 	bl	235ec <assert_post_action>
	return backend->cb->active;
   12f4c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   12f4e:	795b      	ldrb	r3, [r3, #5]
   12f50:	b123      	cbz	r3, 12f5c <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   12f52:	6823      	ldr	r3, [r4, #0]
   12f54:	4629      	mov	r1, r5
   12f56:	681b      	ldr	r3, [r3, #0]
   12f58:	4620      	mov	r0, r4
   12f5a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12f5c:	3410      	adds	r4, #16
   12f5e:	e7e4      	b.n	12f2a <z_impl_log_process+0x2e>
   12f60:	d3f4      	bcc.n	12f4c <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   12f62:	4628      	mov	r0, r5
   12f64:	f7ff ffbc 	bl	12ee0 <z_log_msg_free>
	return dropped_cnt > 0;
   12f68:	4b1d      	ldr	r3, [pc, #116]	; (12fe0 <z_impl_log_process+0xe4>)
   12f6a:	4c1e      	ldr	r4, [pc, #120]	; (12fe4 <z_impl_log_process+0xe8>)
		if ((dropped_pend || unordered_pend) &&
   12f6c:	681b      	ldr	r3, [r3, #0]
   12f6e:	2b00      	cmp	r3, #0
   12f70:	dd19      	ble.n	12fa6 <z_impl_log_process+0xaa>
	return z_impl_k_uptime_ticks();
   12f72:	f012 fefa 	bl	25d6a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   12f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12f7a:	fba0 0302 	umull	r0, r3, r0, r2
   12f7e:	fb02 3101 	mla	r1, r2, r1, r3
   12f82:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12f84:	e9d4 2000 	ldrd	r2, r0, [r4]
   12f88:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   12f8c:	1a9b      	subs	r3, r3, r2
   12f8e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   12f92:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12f96:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   12f9a:	4293      	cmp	r3, r2
   12f9c:	f171 0100 	sbcs.w	r1, r1, #0
   12fa0:	d301      	bcc.n	12fa6 <z_impl_log_process+0xaa>
				dropped_notify();
   12fa2:	f7ff ff35 	bl	12e10 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   12fa6:	e9d4 3200 	ldrd	r3, r2, [r4]
   12faa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   12fae:	f142 0200 	adc.w	r2, r2, #0
   12fb2:	e9c4 3200 	strd	r3, r2, [r4]
}
   12fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   12fba:	f7ff bf99 	b.w	12ef0 <z_log_msg_pending>
}
   12fbe:	bd70      	pop	{r4, r5, r6, pc}
   12fc0:	20002f49 	.word	0x20002f49
   12fc4:	20002b48 	.word	0x20002b48
   12fc8:	00026354 	.word	0x00026354
   12fcc:	00026374 	.word	0x00026374
   12fd0:	00027445 	.word	0x00027445
   12fd4:	000273f4 	.word	0x000273f4
   12fd8:	00026f1a 	.word	0x00026f1a
   12fdc:	00027466 	.word	0x00027466
   12fe0:	20002b44 	.word	0x20002b44
   12fe4:	20001ca0 	.word	0x20001ca0

00012fe8 <z_impl_log_panic>:
{
   12fe8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   12fea:	4d15      	ldr	r5, [pc, #84]	; (13040 <z_impl_log_panic+0x58>)
   12fec:	7829      	ldrb	r1, [r5, #0]
   12fee:	bb29      	cbnz	r1, 1303c <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
   12ff0:	2001      	movs	r0, #1
   12ff2:	f7ff fe4b 	bl	12c8c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12ff6:	4c13      	ldr	r4, [pc, #76]	; (13044 <z_impl_log_panic+0x5c>)
   12ff8:	4e13      	ldr	r6, [pc, #76]	; (13048 <z_impl_log_panic+0x60>)
   12ffa:	42b4      	cmp	r4, r6
   12ffc:	d917      	bls.n	1302e <z_impl_log_panic+0x46>
   12ffe:	4913      	ldr	r1, [pc, #76]	; (1304c <z_impl_log_panic+0x64>)
   13000:	4a13      	ldr	r2, [pc, #76]	; (13050 <z_impl_log_panic+0x68>)
   13002:	4814      	ldr	r0, [pc, #80]	; (13054 <z_impl_log_panic+0x6c>)
   13004:	f240 1387 	movw	r3, #391	; 0x187
   13008:	f010 faf7 	bl	235fa <assert_print>
   1300c:	4812      	ldr	r0, [pc, #72]	; (13058 <z_impl_log_panic+0x70>)
   1300e:	f010 faf4 	bl	235fa <assert_print>
   13012:	480f      	ldr	r0, [pc, #60]	; (13050 <z_impl_log_panic+0x68>)
   13014:	f240 1187 	movw	r1, #391	; 0x187
   13018:	f010 fae8 	bl	235ec <assert_post_action>
	return backend->cb->active;
   1301c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1301e:	795b      	ldrb	r3, [r3, #5]
   13020:	b11b      	cbz	r3, 1302a <z_impl_log_panic+0x42>
	backend->api->panic(backend);
   13022:	6823      	ldr	r3, [r4, #0]
   13024:	4620      	mov	r0, r4
   13026:	689b      	ldr	r3, [r3, #8]
   13028:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1302a:	3410      	adds	r4, #16
   1302c:	e7e5      	b.n	12ffa <z_impl_log_panic+0x12>
   1302e:	d3f5      	bcc.n	1301c <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13030:	f7ff ff64 	bl	12efc <z_impl_log_process>
		while (log_process() == true) {
   13034:	2800      	cmp	r0, #0
   13036:	d1fb      	bne.n	13030 <z_impl_log_panic+0x48>
	panic_mode = true;
   13038:	2301      	movs	r3, #1
   1303a:	702b      	strb	r3, [r5, #0]
}
   1303c:	bd70      	pop	{r4, r5, r6, pc}
   1303e:	bf00      	nop
   13040:	20002f4a 	.word	0x20002f4a
   13044:	00026354 	.word	0x00026354
   13048:	00026374 	.word	0x00026374
   1304c:	00027445 	.word	0x00027445
   13050:	000273f4 	.word	0x000273f4
   13054:	00026f1a 	.word	0x00026f1a
   13058:	00027466 	.word	0x00027466

0001305c <log_process_thread_func>:
{
   1305c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13060:	4b2f      	ldr	r3, [pc, #188]	; (13120 <log_process_thread_func+0xc4>)
   13062:	4f30      	ldr	r7, [pc, #192]	; (13124 <log_process_thread_func+0xc8>)
   13064:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13066:	091b      	lsrs	r3, r3, #4
   13068:	d10b      	bne.n	13082 <log_process_thread_func+0x26>
   1306a:	492f      	ldr	r1, [pc, #188]	; (13128 <log_process_thread_func+0xcc>)
   1306c:	4a2f      	ldr	r2, [pc, #188]	; (1312c <log_process_thread_func+0xd0>)
   1306e:	4830      	ldr	r0, [pc, #192]	; (13130 <log_process_thread_func+0xd4>)
   13070:	f240 335b 	movw	r3, #859	; 0x35b
   13074:	f010 fac1 	bl	235fa <assert_print>
   13078:	f240 315b 	movw	r1, #859	; 0x35b
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1307c:	482b      	ldr	r0, [pc, #172]	; (1312c <log_process_thread_func+0xd0>)
   1307e:	f010 fab5 	bl	235ec <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
   13082:	2100      	movs	r1, #0
   13084:	4608      	mov	r0, r1
   13086:	f7ff fe01 	bl	12c8c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1308a:	4604      	mov	r4, r0
   1308c:	b340      	cbz	r0, 130e0 <log_process_thread_func+0x84>
   1308e:	f240 6867 	movw	r8, #1639	; 0x667
   13092:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13096:	f00e fc0b 	bl	218b0 <z_impl_z_current_get>
	proc_tid = process_tid;
   1309a:	4b26      	ldr	r3, [pc, #152]	; (13134 <log_process_thread_func+0xd8>)
   1309c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1309e:	b130      	cbz	r0, 130ae <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   130a0:	4b25      	ldr	r3, [pc, #148]	; (13138 <log_process_thread_func+0xdc>)
	    process_tid &&
   130a2:	681b      	ldr	r3, [r3, #0]
   130a4:	2b09      	cmp	r3, #9
   130a6:	dd02      	ble.n	130ae <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
   130a8:	4824      	ldr	r0, [pc, #144]	; (1313c <log_process_thread_func+0xe0>)
   130aa:	f00c fd7b 	bl	1fba4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   130ae:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1313c <log_process_thread_func+0xe0>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   130b2:	2500      	movs	r5, #0
		if (activate_mask) {
   130b4:	b144      	cbz	r4, 130c8 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
   130b6:	4620      	mov	r0, r4
   130b8:	f7ff fdb6 	bl	12c28 <activate_foreach_backend>
			if (!activate_mask) {
   130bc:	4604      	mov	r4, r0
   130be:	b918      	cbnz	r0, 130c8 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
   130c0:	f04f 38ff 	mov.w	r8, #4294967295
   130c4:	f04f 39ff 	mov.w	r9, #4294967295
   130c8:	f7ff ff18 	bl	12efc <z_impl_log_process>
		if (log_process() == false) {
   130cc:	4606      	mov	r6, r0
   130ce:	b928      	cbnz	r0, 130dc <log_process_thread_func+0x80>
			if (processed_any) {
   130d0:	b95d      	cbnz	r5, 130ea <log_process_thread_func+0x8e>
   130d2:	4642      	mov	r2, r8
   130d4:	464b      	mov	r3, r9
   130d6:	4650      	mov	r0, sl
   130d8:	f00c fda8 	bl	1fc2c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   130dc:	4635      	mov	r5, r6
   130de:	e7e9      	b.n	130b4 <log_process_thread_func+0x58>
   130e0:	f04f 38ff 	mov.w	r8, #4294967295
   130e4:	f04f 39ff 	mov.w	r9, #4294967295
   130e8:	e7d5      	b.n	13096 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   130ea:	4d0d      	ldr	r5, [pc, #52]	; (13120 <log_process_thread_func+0xc4>)
   130ec:	e008      	b.n	13100 <log_process_thread_func+0xa4>
   130ee:	d2f0      	bcs.n	130d2 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   130f0:	682b      	ldr	r3, [r5, #0]
   130f2:	699b      	ldr	r3, [r3, #24]
   130f4:	b11b      	cbz	r3, 130fe <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
   130f6:	2200      	movs	r2, #0
   130f8:	4611      	mov	r1, r2
   130fa:	4628      	mov	r0, r5
   130fc:	4798      	blx	r3
   130fe:	3510      	adds	r5, #16
   13100:	42bd      	cmp	r5, r7
   13102:	d9f4      	bls.n	130ee <log_process_thread_func+0x92>
   13104:	490e      	ldr	r1, [pc, #56]	; (13140 <log_process_thread_func+0xe4>)
   13106:	4a09      	ldr	r2, [pc, #36]	; (1312c <log_process_thread_func+0xd0>)
   13108:	4809      	ldr	r0, [pc, #36]	; (13130 <log_process_thread_func+0xd4>)
   1310a:	f240 334f 	movw	r3, #847	; 0x34f
   1310e:	f010 fa74 	bl	235fa <assert_print>
   13112:	480c      	ldr	r0, [pc, #48]	; (13144 <log_process_thread_func+0xe8>)
   13114:	f010 fa71 	bl	235fa <assert_print>
   13118:	f240 314f 	movw	r1, #847	; 0x34f
   1311c:	e7ae      	b.n	1307c <log_process_thread_func+0x20>
   1311e:	bf00      	nop
   13120:	00026354 	.word	0x00026354
   13124:	00026374 	.word	0x00026374
   13128:	00027485 	.word	0x00027485
   1312c:	000273f4 	.word	0x000273f4
   13130:	00026f1a 	.word	0x00026f1a
   13134:	20002b40 	.word	0x20002b40
   13138:	20002b48 	.word	0x20002b48
   1313c:	20000954 	.word	0x20000954
   13140:	00027445 	.word	0x00027445
   13144:	00027466 	.word	0x00027466

00013148 <z_log_msg_post_finalize>:
{
   13148:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1314a:	482b      	ldr	r0, [pc, #172]	; (131f8 <z_log_msg_post_finalize+0xb0>)
   1314c:	f010 fb7e 	bl	2384c <atomic_inc>
	if (panic_mode) {
   13150:	4b2a      	ldr	r3, [pc, #168]	; (131fc <z_log_msg_post_finalize+0xb4>)
   13152:	781b      	ldrb	r3, [r3, #0]
   13154:	2b00      	cmp	r3, #0
   13156:	d034      	beq.n	131c2 <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
   13158:	f04f 0340 	mov.w	r3, #64	; 0x40
   1315c:	f3ef 8411 	mrs	r4, BASEPRI
   13160:	f383 8812 	msr	BASEPRI_MAX, r3
   13164:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13168:	4825      	ldr	r0, [pc, #148]	; (13200 <z_log_msg_post_finalize+0xb8>)
   1316a:	f00c fa61 	bl	1f630 <z_spin_lock_valid>
   1316e:	b968      	cbnz	r0, 1318c <z_log_msg_post_finalize+0x44>
   13170:	4a24      	ldr	r2, [pc, #144]	; (13204 <z_log_msg_post_finalize+0xbc>)
   13172:	4925      	ldr	r1, [pc, #148]	; (13208 <z_log_msg_post_finalize+0xc0>)
   13174:	4825      	ldr	r0, [pc, #148]	; (1320c <z_log_msg_post_finalize+0xc4>)
   13176:	2394      	movs	r3, #148	; 0x94
   13178:	f010 fa3f 	bl	235fa <assert_print>
   1317c:	4920      	ldr	r1, [pc, #128]	; (13200 <z_log_msg_post_finalize+0xb8>)
   1317e:	4824      	ldr	r0, [pc, #144]	; (13210 <z_log_msg_post_finalize+0xc8>)
   13180:	f010 fa3b 	bl	235fa <assert_print>
   13184:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13186:	481f      	ldr	r0, [pc, #124]	; (13204 <z_log_msg_post_finalize+0xbc>)
   13188:	f010 fa30 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1318c:	481c      	ldr	r0, [pc, #112]	; (13200 <z_log_msg_post_finalize+0xb8>)
   1318e:	f00c fa6d 	bl	1f66c <z_spin_lock_set_owner>
   13192:	f7ff feb3 	bl	12efc <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13196:	481a      	ldr	r0, [pc, #104]	; (13200 <z_log_msg_post_finalize+0xb8>)
   13198:	f00c fa58 	bl	1f64c <z_spin_unlock_valid>
   1319c:	b958      	cbnz	r0, 131b6 <z_log_msg_post_finalize+0x6e>
   1319e:	4a19      	ldr	r2, [pc, #100]	; (13204 <z_log_msg_post_finalize+0xbc>)
   131a0:	491c      	ldr	r1, [pc, #112]	; (13214 <z_log_msg_post_finalize+0xcc>)
   131a2:	481a      	ldr	r0, [pc, #104]	; (1320c <z_log_msg_post_finalize+0xc4>)
   131a4:	23c2      	movs	r3, #194	; 0xc2
   131a6:	f010 fa28 	bl	235fa <assert_print>
   131aa:	4915      	ldr	r1, [pc, #84]	; (13200 <z_log_msg_post_finalize+0xb8>)
   131ac:	481a      	ldr	r0, [pc, #104]	; (13218 <z_log_msg_post_finalize+0xd0>)
   131ae:	f010 fa24 	bl	235fa <assert_print>
   131b2:	21c2      	movs	r1, #194	; 0xc2
   131b4:	e7e7      	b.n	13186 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
   131b6:	f384 8811 	msr	BASEPRI, r4
   131ba:	f3bf 8f6f 	isb	sy
}
   131be:	b002      	add	sp, #8
   131c0:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   131c2:	4b16      	ldr	r3, [pc, #88]	; (1321c <z_log_msg_post_finalize+0xd4>)
   131c4:	681b      	ldr	r3, [r3, #0]
   131c6:	2b00      	cmp	r3, #0
   131c8:	d0f9      	beq.n	131be <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
   131ca:	b950      	cbnz	r0, 131e2 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
   131cc:	2200      	movs	r2, #0
   131ce:	2300      	movs	r3, #0
   131d0:	e9cd 2300 	strd	r2, r3, [sp]
   131d4:	4812      	ldr	r0, [pc, #72]	; (13220 <z_log_msg_post_finalize+0xd8>)
   131d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   131da:	2300      	movs	r3, #0
   131dc:	f00f f80c 	bl	221f8 <z_impl_k_timer_start>
   131e0:	e7ed      	b.n	131be <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   131e2:	280a      	cmp	r0, #10
   131e4:	d1eb      	bne.n	131be <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
   131e6:	480e      	ldr	r0, [pc, #56]	; (13220 <z_log_msg_post_finalize+0xd8>)
   131e8:	f012 fdf3 	bl	25dd2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   131ec:	480d      	ldr	r0, [pc, #52]	; (13224 <z_log_msg_post_finalize+0xdc>)
}
   131ee:	b002      	add	sp, #8
   131f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   131f4:	f00c bcd6 	b.w	1fba4 <z_impl_k_sem_give>
   131f8:	20002b48 	.word	0x20002b48
   131fc:	20002f4a 	.word	0x20002f4a
   13200:	20002b38 	.word	0x20002b38
   13204:	0002730e 	.word	0x0002730e
   13208:	00027367 	.word	0x00027367
   1320c:	00026f1a 	.word	0x00026f1a
   13210:	0002737c 	.word	0x0002737c
   13214:	0002733b 	.word	0x0002733b
   13218:	00027352 	.word	0x00027352
   1321c:	20002b40 	.word	0x20002b40
   13220:	20001ca8 	.word	0x20001ca8
   13224:	20000954 	.word	0x20000954

00013228 <z_log_msg_commit>:
{
   13228:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1322a:	4b06      	ldr	r3, [pc, #24]	; (13244 <z_log_msg_commit+0x1c>)
   1322c:	681b      	ldr	r3, [r3, #0]
{
   1322e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13230:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   13232:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13234:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   13236:	4804      	ldr	r0, [pc, #16]	; (13248 <z_log_msg_commit+0x20>)
   13238:	f7ff fb78 	bl	1292c <mpsc_pbuf_commit>
}
   1323c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   13240:	f7ff bf82 	b.w	13148 <z_log_msg_post_finalize>
   13244:	200005d0 	.word	0x200005d0
   13248:	20000854 	.word	0x20000854

0001324c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1324c:	4a04      	ldr	r2, [pc, #16]	; (13260 <log_source_name_get+0x14>)
   1324e:	4b05      	ldr	r3, [pc, #20]	; (13264 <log_source_name_get+0x18>)
   13250:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13252:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   13256:	bf34      	ite	cc
   13258:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   1325c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1325e:	4770      	bx	lr
   13260:	00026254 	.word	0x00026254
   13264:	00026354 	.word	0x00026354

00013268 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13268:	4b0e      	ldr	r3, [pc, #56]	; (132a4 <log_backend_enable+0x3c>)
   1326a:	1ac3      	subs	r3, r0, r3
   1326c:	111b      	asrs	r3, r3, #4
   1326e:	3301      	adds	r3, #1
{
   13270:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
   13272:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
   13274:	b948      	cbnz	r0, 1328a <log_backend_enable+0x22>
   13276:	490c      	ldr	r1, [pc, #48]	; (132a8 <log_backend_enable+0x40>)
   13278:	480c      	ldr	r0, [pc, #48]	; (132ac <log_backend_enable+0x44>)
   1327a:	4a0d      	ldr	r2, [pc, #52]	; (132b0 <log_backend_enable+0x48>)
   1327c:	23de      	movs	r3, #222	; 0xde
   1327e:	f010 f9bc 	bl	235fa <assert_print>
   13282:	480b      	ldr	r0, [pc, #44]	; (132b0 <log_backend_enable+0x48>)
   13284:	21de      	movs	r1, #222	; 0xde
   13286:	f010 f9b1 	bl	235ec <assert_post_action>
	backend->cb->id = id;
   1328a:	6844      	ldr	r4, [r0, #4]
   1328c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1328e:	6843      	ldr	r3, [r0, #4]
   13290:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   13292:	6843      	ldr	r3, [r0, #4]
   13294:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13296:	6843      	ldr	r3, [r0, #4]
   13298:	2201      	movs	r2, #1
   1329a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1329c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
   132a0:	f7ff bd80 	b.w	12da4 <z_log_notify_backend_enabled>
   132a4:	00026354 	.word	0x00026354
   132a8:	00027525 	.word	0x00027525
   132ac:	00026f1a 	.word	0x00026f1a
   132b0:	000274ed 	.word	0x000274ed

000132b4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   132b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132b8:	b08f      	sub	sp, #60	; 0x3c
   132ba:	af04      	add	r7, sp, #16
   132bc:	f3c1 284a 	ubfx	r8, r1, #9, #11
   132c0:	60b8      	str	r0, [r7, #8]
   132c2:	460d      	mov	r5, r1
   132c4:	4691      	mov	r9, r2
   132c6:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   132c8:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   132ca:	f1b8 0f00 	cmp.w	r8, #0
   132ce:	d066      	beq.n	1339e <z_impl_z_log_msg_static_create+0xea>
	struct z_cbprintf_buf_desc buf_desc = {
   132d0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   132d2:	f107 0314 	add.w	r3, r7, #20
   132d6:	f04f 0b04 	mov.w	fp, #4
   132da:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   132de:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   132e2:	e9c7 6607 	strd	r6, r6, [r7, #28]
   132e6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   132e8:	9301      	str	r3, [sp, #4]
   132ea:	f8cd b008 	str.w	fp, [sp, #8]
   132ee:	f8cd a000 	str.w	sl, [sp]
   132f2:	f107 031c 	add.w	r3, r7, #28
   132f6:	68f9      	ldr	r1, [r7, #12]
   132f8:	4632      	mov	r2, r6
   132fa:	4648      	mov	r0, r9
   132fc:	f7fe f802 	bl	11304 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   13300:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   13304:	4603      	mov	r3, r0
   13306:	d31c      	bcc.n	13342 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   13308:	466c      	mov	r4, sp
   1330a:	b08a      	sub	sp, #40	; 0x28
   1330c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   13310:	ab04      	add	r3, sp, #16
   13312:	482b      	ldr	r0, [pc, #172]	; (133c0 <z_impl_z_log_msg_static_create+0x10c>)
   13314:	e9c3 0105 	strd	r0, r1, [r3, #20]
   13318:	f240 71ff 	movw	r1, #2047	; 0x7ff
   1331c:	61d9      	str	r1, [r3, #28]
   1331e:	461a      	mov	r2, r3
   13320:	f44f 7100 	mov.w	r1, #512	; 0x200
   13324:	8419      	strh	r1, [r3, #32]
   13326:	4b27      	ldr	r3, [pc, #156]	; (133c4 <z_impl_z_log_msg_static_create+0x110>)
   13328:	f842 3f10 	str.w	r3, [r2, #16]!
   1332c:	4826      	ldr	r0, [pc, #152]	; (133c8 <z_impl_z_log_msg_static_create+0x114>)
   1332e:	4633      	mov	r3, r6
   13330:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   13334:	f7ff ffbe 	bl	132b4 <z_impl_z_log_msg_static_create>
   13338:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   1333a:	372c      	adds	r7, #44	; 0x2c
   1333c:	46bd      	mov	sp, r7
   1333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   13342:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   13346:	f104 0017 	add.w	r0, r4, #23
   1334a:	4418      	add	r0, r3
   1334c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13350:	0880      	lsrs	r0, r0, #2
   13352:	603b      	str	r3, [r7, #0]
   13354:	f7ff fdb6 	bl	12ec4 <z_log_msg_alloc>
   13358:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   1335c:	4604      	mov	r4, r0
   1335e:	b330      	cbz	r0, 133ae <z_impl_z_log_msg_static_create+0xfa>
	struct z_cbprintf_buf_desc buf_desc = {
   13360:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   13362:	4a1a      	ldr	r2, [pc, #104]	; (133cc <z_impl_z_log_msg_static_create+0x118>)
	struct z_cbprintf_buf_desc buf_desc = {
   13364:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   13368:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   1336c:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   13370:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   13372:	e9cd a300 	strd	sl, r3, [sp]
   13376:	f8cd b008 	str.w	fp, [sp, #8]
   1337a:	68f9      	ldr	r1, [r7, #12]
   1337c:	f107 031c 	add.w	r3, r7, #28
   13380:	4648      	mov	r0, r9
   13382:	f7fd ffbf 	bl	11304 <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
   13386:	2800      	cmp	r0, #0
   13388:	da11      	bge.n	133ae <z_impl_z_log_msg_static_create+0xfa>
   1338a:	4911      	ldr	r1, [pc, #68]	; (133d0 <z_impl_z_log_msg_static_create+0x11c>)
   1338c:	4811      	ldr	r0, [pc, #68]	; (133d4 <z_impl_z_log_msg_static_create+0x120>)
   1338e:	4a12      	ldr	r2, [pc, #72]	; (133d8 <z_impl_z_log_msg_static_create+0x124>)
   13390:	2356      	movs	r3, #86	; 0x56
   13392:	f010 f932 	bl	235fa <assert_print>
   13396:	4810      	ldr	r0, [pc, #64]	; (133d8 <z_impl_z_log_msg_static_create+0x124>)
   13398:	2156      	movs	r1, #86	; 0x56
   1339a:	f010 f927 	bl	235ec <assert_post_action>
   1339e:	f104 0017 	add.w	r0, r4, #23
   133a2:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   133a6:	0880      	lsrs	r0, r0, #2
   133a8:	f7ff fd8c 	bl	12ec4 <z_log_msg_alloc>
   133ac:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
   133ae:	f368 2553 	bfi	r5, r8, #9, #11
   133b2:	687b      	ldr	r3, [r7, #4]
   133b4:	68b9      	ldr	r1, [r7, #8]
   133b6:	462a      	mov	r2, r5
   133b8:	4620      	mov	r0, r4
   133ba:	f010 fa7d 	bl	238b8 <z_log_msg_finalize>
   133be:	e7bc      	b.n	1333a <z_impl_z_log_msg_static_create+0x86>
   133c0:	00027545 	.word	0x00027545
   133c4:	01000004 	.word	0x01000004
   133c8:	000262fc 	.word	0x000262fc
   133cc:	0002388d 	.word	0x0002388d
   133d0:	000275b1 	.word	0x000275b1
   133d4:	00026f1a 	.word	0x00026f1a
   133d8:	00027584 	.word	0x00027584

000133dc <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   133dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133e0:	b087      	sub	sp, #28
   133e2:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   133e6:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   133ea:	4604      	mov	r4, r0
   133ec:	460f      	mov	r7, r1
   133ee:	4693      	mov	fp, r2
   133f0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   133f2:	b1ae      	cbz	r6, 13420 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   133f4:	2110      	movs	r1, #16
   133f6:	f8cd 9000 	str.w	r9, [sp]
   133fa:	4633      	mov	r3, r6
   133fc:	4652      	mov	r2, sl
   133fe:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13400:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   13404:	f7fd fd60 	bl	10ec8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   13408:	1e01      	subs	r1, r0, #0
   1340a:	da0a      	bge.n	13422 <z_impl_z_log_msg_runtime_vcreate+0x46>
   1340c:	491f      	ldr	r1, [pc, #124]	; (1348c <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   1340e:	4a20      	ldr	r2, [pc, #128]	; (13490 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   13410:	4820      	ldr	r0, [pc, #128]	; (13494 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   13412:	2375      	movs	r3, #117	; 0x75
   13414:	f010 f8f1 	bl	235fa <assert_print>
   13418:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
   1341a:	481d      	ldr	r0, [pc, #116]	; (13490 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   1341c:	f010 f8e6 	bl	235ec <assert_post_action>
		plen = 0;
   13420:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13422:	f105 0017 	add.w	r0, r5, #23
   13426:	4408      	add	r0, r1
	struct log_msg_desc desc =
   13428:	4b1b      	ldr	r3, [pc, #108]	; (13498 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   1342a:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   1342c:	f004 0407 	and.w	r4, r4, #7
   13430:	f00b 0b07 	and.w	fp, fp, #7
   13434:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13436:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1343a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   1343e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
   13442:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13444:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   13446:	f7ff fd3d 	bl	12ec4 <z_log_msg_alloc>
	struct log_msg_desc desc =
   1344a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
   1344e:	4605      	mov	r5, r0
   13450:	b190      	cbz	r0, 13478 <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
   13452:	b18e      	cbz	r6, 13478 <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   13454:	9903      	ldr	r1, [sp, #12]
   13456:	f8cd 9000 	str.w	r9, [sp]
   1345a:	4633      	mov	r3, r6
   1345c:	4652      	mov	r2, sl
   1345e:	3010      	adds	r0, #16
   13460:	f7fd fd32 	bl	10ec8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   13464:	2800      	cmp	r0, #0
   13466:	da07      	bge.n	13478 <z_impl_z_log_msg_runtime_vcreate+0x9c>
   13468:	4908      	ldr	r1, [pc, #32]	; (1348c <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   1346a:	4a09      	ldr	r2, [pc, #36]	; (13490 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   1346c:	4809      	ldr	r0, [pc, #36]	; (13494 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   1346e:	238f      	movs	r3, #143	; 0x8f
   13470:	f010 f8c3 	bl	235fa <assert_print>
   13474:	218f      	movs	r1, #143	; 0x8f
   13476:	e7d0      	b.n	1341a <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   13478:	4643      	mov	r3, r8
   1347a:	4622      	mov	r2, r4
   1347c:	4639      	mov	r1, r7
   1347e:	4628      	mov	r0, r5
	}
}
   13480:	b007      	add	sp, #28
   13482:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   13486:	f010 ba17 	b.w	238b8 <z_log_msg_finalize>
   1348a:	bf00      	nop
   1348c:	000275b0 	.word	0x000275b0
   13490:	00027584 	.word	0x00027584
   13494:	00026f1a 	.word	0x00026f1a
   13498:	000ffe00 	.word	0x000ffe00

0001349c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1349c:	b40e      	push	{r1, r2, r3}
   1349e:	b503      	push	{r0, r1, lr}
   134a0:	ab03      	add	r3, sp, #12
   134a2:	4601      	mov	r1, r0
   134a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   134a8:	4804      	ldr	r0, [pc, #16]	; (134bc <print_formatted+0x20>)
	va_start(args, fmt);
   134aa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   134ac:	f010 fa2a 	bl	23904 <cbvprintf>
	va_end(args);

	return length;
}
   134b0:	b002      	add	sp, #8
   134b2:	f85d eb04 	ldr.w	lr, [sp], #4
   134b6:	b003      	add	sp, #12
   134b8:	4770      	bx	lr
   134ba:	bf00      	nop
   134bc:	000134dd 	.word	0x000134dd

000134c0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   134c0:	06ca      	lsls	r2, r1, #27
   134c2:	d405      	bmi.n	134d0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   134c4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   134c6:	bf4c      	ite	mi
   134c8:	4902      	ldrmi	r1, [pc, #8]	; (134d4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   134ca:	4903      	ldrpl	r1, [pc, #12]	; (134d8 <newline_print+0x18>)
   134cc:	f7ff bfe6 	b.w	1349c <print_formatted>
	}
}
   134d0:	4770      	bx	lr
   134d2:	bf00      	nop
   134d4:	0002948d 	.word	0x0002948d
   134d8:	000275ba 	.word	0x000275ba

000134dc <out_func>:
{
   134dc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   134de:	684b      	ldr	r3, [r1, #4]
   134e0:	681a      	ldr	r2, [r3, #0]
   134e2:	68cb      	ldr	r3, [r1, #12]
   134e4:	429a      	cmp	r2, r3
{
   134e6:	4605      	mov	r5, r0
   134e8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   134ea:	d102      	bne.n	134f2 <out_func+0x16>
		log_output_flush(out_ctx);
   134ec:	4608      	mov	r0, r1
   134ee:	f010 fa10 	bl	23912 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   134f2:	6863      	ldr	r3, [r4, #4]
   134f4:	f3bf 8f5b 	dmb	ish
   134f8:	e853 2f00 	ldrex	r2, [r3]
   134fc:	1c51      	adds	r1, r2, #1
   134fe:	e843 1000 	strex	r0, r1, [r3]
   13502:	2800      	cmp	r0, #0
   13504:	d1f8      	bne.n	134f8 <out_func+0x1c>
   13506:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1350a:	68a3      	ldr	r3, [r4, #8]
   1350c:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   1350e:	6863      	ldr	r3, [r4, #4]
   13510:	681a      	ldr	r2, [r3, #0]
   13512:	68e3      	ldr	r3, [r4, #12]
   13514:	429a      	cmp	r2, r3
   13516:	d909      	bls.n	1352c <out_func+0x50>
   13518:	4905      	ldr	r1, [pc, #20]	; (13530 <out_func+0x54>)
   1351a:	4806      	ldr	r0, [pc, #24]	; (13534 <out_func+0x58>)
   1351c:	4a06      	ldr	r2, [pc, #24]	; (13538 <out_func+0x5c>)
   1351e:	237a      	movs	r3, #122	; 0x7a
   13520:	f010 f86b 	bl	235fa <assert_print>
   13524:	4804      	ldr	r0, [pc, #16]	; (13538 <out_func+0x5c>)
   13526:	217a      	movs	r1, #122	; 0x7a
   13528:	f010 f860 	bl	235ec <assert_post_action>
}
   1352c:	2000      	movs	r0, #0
   1352e:	bd38      	pop	{r3, r4, r5, pc}
   13530:	000275ec 	.word	0x000275ec
   13534:	00026f1a 	.word	0x00026f1a
   13538:	000275bd 	.word	0x000275bd

0001353c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13540:	b089      	sub	sp, #36	; 0x24
   13542:	469b      	mov	fp, r3
   13544:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13548:	9304      	str	r3, [sp, #16]
   1354a:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   1354e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   13550:	9b04      	ldr	r3, [sp, #16]
{
   13552:	9206      	str	r2, [sp, #24]
   13554:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   13558:	4604      	mov	r4, r0
   1355a:	460d      	mov	r5, r1
	if (!raw_string) {
   1355c:	2b00      	cmp	r3, #0
   1355e:	f000 8087 	beq.w	13670 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13562:	f006 0308 	and.w	r3, r6, #8
   13566:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   13568:	f010 f98e 	bl	23888 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1356c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   13570:	4602      	mov	r2, r0
   13572:	2800      	cmp	r0, #0
   13574:	d04b      	beq.n	1360e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   13576:	498e      	ldr	r1, [pc, #568]	; (137b0 <log_output_process+0x274>)
   13578:	4620      	mov	r0, r4
   1357a:	f7ff ff8f 	bl	1349c <print_formatted>
   1357e:	4680      	mov	r8, r0
	if (stamp) {
   13580:	f1ba 0f00 	cmp.w	sl, #0
   13584:	d008      	beq.n	13598 <log_output_process+0x5c>
	if (!format) {
   13586:	f016 0f44 	tst.w	r6, #68	; 0x44
   1358a:	d142      	bne.n	13612 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1358c:	4989      	ldr	r1, [pc, #548]	; (137b4 <log_output_process+0x278>)
   1358e:	462a      	mov	r2, r5
   13590:	4620      	mov	r0, r4
   13592:	f7ff ff83 	bl	1349c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   13596:	4480      	add	r8, r0
	if (color) {
   13598:	f006 0301 	and.w	r3, r6, #1
   1359c:	b15b      	cbz	r3, 135b6 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   1359e:	4b86      	ldr	r3, [pc, #536]	; (137b8 <log_output_process+0x27c>)
   135a0:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   135a2:	4986      	ldr	r1, [pc, #536]	; (137bc <log_output_process+0x280>)
		const char *log_color = start && (colors[level] != NULL) ?
   135a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   135a8:	4b85      	ldr	r3, [pc, #532]	; (137c0 <log_output_process+0x284>)
   135aa:	4620      	mov	r0, r4
   135ac:	2a00      	cmp	r2, #0
   135ae:	bf08      	it	eq
   135b0:	461a      	moveq	r2, r3
   135b2:	f7ff ff73 	bl	1349c <print_formatted>
	if (level_on) {
   135b6:	f006 0308 	and.w	r3, r6, #8
   135ba:	2b00      	cmp	r3, #0
   135bc:	d055      	beq.n	1366a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   135be:	4b81      	ldr	r3, [pc, #516]	; (137c4 <log_output_process+0x288>)
   135c0:	9a04      	ldr	r2, [sp, #16]
   135c2:	4981      	ldr	r1, [pc, #516]	; (137c8 <log_output_process+0x28c>)
   135c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   135c8:	4620      	mov	r0, r4
   135ca:	f7ff ff67 	bl	1349c <print_formatted>
   135ce:	4605      	mov	r5, r0
	if (domain) {
   135d0:	9b06      	ldr	r3, [sp, #24]
   135d2:	b12b      	cbz	r3, 135e0 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   135d4:	497d      	ldr	r1, [pc, #500]	; (137cc <log_output_process+0x290>)
   135d6:	461a      	mov	r2, r3
   135d8:	4620      	mov	r0, r4
   135da:	f7ff ff5f 	bl	1349c <print_formatted>
   135de:	4405      	add	r5, r0
	if (source) {
   135e0:	f1bb 0f00 	cmp.w	fp, #0
   135e4:	d005      	beq.n	135f2 <log_output_process+0xb6>
		total += print_formatted(output,
   135e6:	497a      	ldr	r1, [pc, #488]	; (137d0 <log_output_process+0x294>)
   135e8:	465a      	mov	r2, fp
   135ea:	4620      	mov	r0, r4
   135ec:	f7ff ff56 	bl	1349c <print_formatted>
   135f0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   135f2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   135f4:	f1b9 0f00 	cmp.w	r9, #0
   135f8:	d14a      	bne.n	13690 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   135fa:	2f00      	cmp	r7, #0
   135fc:	d161      	bne.n	136c2 <log_output_process+0x186>
	if (color) {
   135fe:	07f3      	lsls	r3, r6, #31
   13600:	f100 80cf 	bmi.w	137a2 <log_output_process+0x266>
	newline_print(output, flags);
   13604:	4631      	mov	r1, r6
   13606:	4620      	mov	r0, r4
   13608:	f7ff ff5a 	bl	134c0 <newline_print>
}
   1360c:	e0c3      	b.n	13796 <log_output_process+0x25a>
	uint32_t length = 0U;
   1360e:	4680      	mov	r8, r0
   13610:	e7b6      	b.n	13580 <log_output_process+0x44>
	} else if (freq != 0U) {
   13612:	4b70      	ldr	r3, [pc, #448]	; (137d4 <log_output_process+0x298>)
   13614:	6818      	ldr	r0, [r3, #0]
   13616:	2800      	cmp	r0, #0
   13618:	d0bd      	beq.n	13596 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   1361a:	4b6f      	ldr	r3, [pc, #444]	; (137d8 <log_output_process+0x29c>)
		ms = (remainder * 1000U) / freq;
   1361c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13620:	681b      	ldr	r3, [r3, #0]
   13622:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   13626:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1362a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1362e:	fb00 5513 	mls	r5, r0, r3, r5
   13632:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   13636:	fb0e f505 	mul.w	r5, lr, r5
   1363a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   1363e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13640:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   13644:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13648:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   1364c:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13650:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   13654:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13656:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1365a:	4960      	ldr	r1, [pc, #384]	; (137dc <log_output_process+0x2a0>)
   1365c:	e9cd c501 	strd	ip, r5, [sp, #4]
   13660:	4652      	mov	r2, sl
   13662:	4620      	mov	r0, r4
   13664:	f7ff ff1a 	bl	1349c <print_formatted>
   13668:	e795      	b.n	13596 <log_output_process+0x5a>
	int total = 0;
   1366a:	f006 0508 	and.w	r5, r6, #8
   1366e:	e7af      	b.n	135d0 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13670:	f1bb 0f01 	cmp.w	fp, #1
   13674:	d107      	bne.n	13686 <log_output_process+0x14a>
	if (package) {
   13676:	f1b9 0f00 	cmp.w	r9, #0
   1367a:	d11d      	bne.n	136b8 <log_output_process+0x17c>
	if (data_len) {
   1367c:	2f00      	cmp	r7, #0
   1367e:	f000 808a 	beq.w	13796 <log_output_process+0x25a>
		prefix_offset = 0;
   13682:	2500      	movs	r5, #0
   13684:	e01d      	b.n	136c2 <log_output_process+0x186>
	if (package) {
   13686:	f1b9 0f00 	cmp.w	r9, #0
   1368a:	d0f7      	beq.n	1367c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1368c:	4854      	ldr	r0, [pc, #336]	; (137e0 <log_output_process+0x2a4>)
   1368e:	e014      	b.n	136ba <log_output_process+0x17e>
		cb = out_func;
   13690:	4854      	ldr	r0, [pc, #336]	; (137e4 <log_output_process+0x2a8>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13692:	4955      	ldr	r1, [pc, #340]	; (137e8 <log_output_process+0x2ac>)
   13694:	464b      	mov	r3, r9
   13696:	4622      	mov	r2, r4
   13698:	f00f fd3a 	bl	23110 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
   1369c:	2800      	cmp	r0, #0
   1369e:	da0e      	bge.n	136be <log_output_process+0x182>
   136a0:	4952      	ldr	r1, [pc, #328]	; (137ec <log_output_process+0x2b0>)
   136a2:	4853      	ldr	r0, [pc, #332]	; (137f0 <log_output_process+0x2b4>)
   136a4:	4a53      	ldr	r2, [pc, #332]	; (137f4 <log_output_process+0x2b8>)
   136a6:	f44f 7302 	mov.w	r3, #520	; 0x208
   136aa:	f00f ffa6 	bl	235fa <assert_print>
   136ae:	4851      	ldr	r0, [pc, #324]	; (137f4 <log_output_process+0x2b8>)
   136b0:	f44f 7102 	mov.w	r1, #520	; 0x208
   136b4:	f00f ff9a 	bl	235ec <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   136b8:	484a      	ldr	r0, [pc, #296]	; (137e4 <log_output_process+0x2a8>)
		prefix_offset = 0;
   136ba:	9d04      	ldr	r5, [sp, #16]
   136bc:	e7e9      	b.n	13692 <log_output_process+0x156>
	if (data_len) {
   136be:	2f00      	cmp	r7, #0
   136c0:	d065      	beq.n	1378e <log_output_process+0x252>
		print_formatted(output, " ");
   136c2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 137f8 <log_output_process+0x2bc>
			print_formatted(output, "%02x ", data[i]);
   136c6:	f8df a134 	ldr.w	sl, [pc, #308]	; 137fc <log_output_process+0x2c0>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   136ca:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   136cc:	4631      	mov	r1, r6
   136ce:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   136d0:	46b8      	mov	r8, r7
   136d2:	bf28      	it	cs
   136d4:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   136d8:	f7ff fef2 	bl	134c0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   136dc:	f04f 0b00 	mov.w	fp, #0
   136e0:	455d      	cmp	r5, fp
   136e2:	dc42      	bgt.n	1376a <log_output_process+0x22e>
			print_formatted(output, "%02x ", data[i]);
   136e4:	9b05      	ldr	r3, [sp, #20]
   136e6:	4651      	mov	r1, sl
   136e8:	781a      	ldrb	r2, [r3, #0]
   136ea:	4620      	mov	r0, r4
   136ec:	f7ff fed6 	bl	1349c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   136f0:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   136f4:	f01b 0f07 	tst.w	fp, #7
   136f8:	d103      	bne.n	13702 <log_output_process+0x1c6>
			print_formatted(output, " ");
   136fa:	4649      	mov	r1, r9
   136fc:	4620      	mov	r0, r4
   136fe:	f7ff fecd 	bl	1349c <print_formatted>
		if (i < length) {
   13702:	45d8      	cmp	r8, fp
   13704:	d938      	bls.n	13778 <log_output_process+0x23c>
			print_formatted(output, "%02x ", data[i]);
   13706:	9b05      	ldr	r3, [sp, #20]
   13708:	4651      	mov	r1, sl
   1370a:	f813 200b 	ldrb.w	r2, [r3, fp]
   1370e:	4620      	mov	r0, r4
   13710:	f7ff fec4 	bl	1349c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13714:	f10b 0b01 	add.w	fp, fp, #1
   13718:	f1bb 0f10 	cmp.w	fp, #16
   1371c:	d1ea      	bne.n	136f4 <log_output_process+0x1b8>
	print_formatted(output, "|");
   1371e:	4938      	ldr	r1, [pc, #224]	; (13800 <log_output_process+0x2c4>)
   13720:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13722:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   13726:	f7ff feb9 	bl	1349c <print_formatted>
		if (i < length) {
   1372a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   1372c:	9b05      	ldr	r3, [sp, #20]
   1372e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   13730:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   13734:	295f      	cmp	r1, #95	; 0x5f
   13736:	bf28      	it	cs
   13738:	222e      	movcs	r2, #46	; 0x2e
   1373a:	4932      	ldr	r1, [pc, #200]	; (13804 <log_output_process+0x2c8>)
   1373c:	4620      	mov	r0, r4
   1373e:	f7ff fead 	bl	1349c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13742:	f10b 0b01 	add.w	fp, fp, #1
   13746:	f1bb 0f10 	cmp.w	fp, #16
   1374a:	d01a      	beq.n	13782 <log_output_process+0x246>
		if (i > 0 && !(i % 8)) {
   1374c:	f01b 0f07 	tst.w	fp, #7
   13750:	d103      	bne.n	1375a <log_output_process+0x21e>
			print_formatted(output, " ");
   13752:	4649      	mov	r1, r9
   13754:	4620      	mov	r0, r4
   13756:	f7ff fea1 	bl	1349c <print_formatted>
		if (i < length) {
   1375a:	45d8      	cmp	r8, fp
   1375c:	465a      	mov	r2, fp
   1375e:	d8e5      	bhi.n	1372c <log_output_process+0x1f0>
			print_formatted(output, " ");
   13760:	4649      	mov	r1, r9
   13762:	4620      	mov	r0, r4
   13764:	f7ff fe9a 	bl	1349c <print_formatted>
   13768:	e7eb      	b.n	13742 <log_output_process+0x206>
		print_formatted(output, " ");
   1376a:	4649      	mov	r1, r9
   1376c:	4620      	mov	r0, r4
   1376e:	f7ff fe95 	bl	1349c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13772:	f10b 0b01 	add.w	fp, fp, #1
   13776:	e7b3      	b.n	136e0 <log_output_process+0x1a4>
			print_formatted(output, "   ");
   13778:	4923      	ldr	r1, [pc, #140]	; (13808 <log_output_process+0x2cc>)
   1377a:	4620      	mov	r0, r4
   1377c:	f7ff fe8e 	bl	1349c <print_formatted>
   13780:	e7c8      	b.n	13714 <log_output_process+0x1d8>
		data += length;
   13782:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   13784:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   13788:	4443      	add	r3, r8
   1378a:	9305      	str	r3, [sp, #20]
	} while (len);
   1378c:	d19d      	bne.n	136ca <log_output_process+0x18e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1378e:	9b04      	ldr	r3, [sp, #16]
   13790:	2b00      	cmp	r3, #0
   13792:	f47f af34 	bne.w	135fe <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13796:	4620      	mov	r0, r4
}
   13798:	b009      	add	sp, #36	; 0x24
   1379a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1379e:	f010 b8b8 	b.w	23912 <log_output_flush>
		print_formatted(output, "%s", log_color);
   137a2:	4a07      	ldr	r2, [pc, #28]	; (137c0 <log_output_process+0x284>)
   137a4:	4905      	ldr	r1, [pc, #20]	; (137bc <log_output_process+0x280>)
   137a6:	4620      	mov	r0, r4
   137a8:	f7ff fe78 	bl	1349c <print_formatted>
}
   137ac:	e72a      	b.n	13604 <log_output_process+0xc8>
   137ae:	bf00      	nop
   137b0:	00027621 	.word	0x00027621
   137b4:	00027625 	.word	0x00027625
   137b8:	00026454 	.word	0x00026454
   137bc:	000284e0 	.word	0x000284e0
   137c0:	0002761c 	.word	0x0002761c
   137c4:	00026468 	.word	0x00026468
   137c8:	0002764a 	.word	0x0002764a
   137cc:	00027650 	.word	0x00027650
   137d0:	00027654 	.word	0x00027654
   137d4:	20002b54 	.word	0x20002b54
   137d8:	20002b50 	.word	0x20002b50
   137dc:	0002762e 	.word	0x0002762e
   137e0:	0002392d 	.word	0x0002392d
   137e4:	000134dd 	.word	0x000134dd
   137e8:	00023905 	.word	0x00023905
   137ec:	00027659 	.word	0x00027659
   137f0:	00026f1a 	.word	0x00026f1a
   137f4:	000275bd 	.word	0x000275bd
   137f8:	0002766a 	.word	0x0002766a
   137fc:	00027662 	.word	0x00027662
   13800:	0002766c 	.word	0x0002766c
   13804:	0002766e 	.word	0x0002766e
   13808:	00027668 	.word	0x00027668

0001380c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   13810:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   13812:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   13814:	688e      	ldr	r6, [r1, #8]
   13816:	b086      	sub	sp, #24
   13818:	4605      	mov	r5, r0
   1381a:	460c      	mov	r4, r1
   1381c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   1381e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   13822:	b15b      	cbz	r3, 1383c <log_output_msg_process+0x30>
   13824:	4a13      	ldr	r2, [pc, #76]	; (13874 <log_output_msg_process+0x68>)
   13826:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   13828:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1382c:	2900      	cmp	r1, #0
   1382e:	db1f      	blt.n	13870 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   13830:	7820      	ldrb	r0, [r4, #0]
   13832:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   13836:	f7ff fd09 	bl	1324c <log_source_name_get>
   1383a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1383c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1383e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   13840:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   13844:	9700      	str	r7, [sp, #0]
   13846:	f3c2 224a 	ubfx	r2, r2, #9, #11
   1384a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1384c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   13850:	f3c0 100b 	ubfx	r0, r0, #4, #12
   13854:	bf08      	it	eq
   13856:	2100      	moveq	r1, #0
   13858:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1385c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   13860:	2200      	movs	r2, #0
   13862:	4631      	mov	r1, r6
   13864:	4628      	mov	r0, r5
   13866:	f7ff fe69 	bl	1353c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1386a:	b006      	add	sp, #24
   1386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   13870:	2300      	movs	r3, #0
   13872:	e7e3      	b.n	1383c <log_output_msg_process+0x30>
   13874:	00026254 	.word	0x00026254

00013878 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13878:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1387a:	f242 730f 	movw	r3, #9999	; 0x270f
   1387e:	428b      	cmp	r3, r1
   13880:	bf28      	it	cs
   13882:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13884:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13886:	4a0f      	ldr	r2, [pc, #60]	; (138c4 <log_output_dropped_process+0x4c>)
{
   13888:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1388a:	2105      	movs	r1, #5
   1388c:	4668      	mov	r0, sp
   1388e:	f00f fcb9 	bl	23204 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13892:	6863      	ldr	r3, [r4, #4]
   13894:	490c      	ldr	r1, [pc, #48]	; (138c8 <log_output_dropped_process+0x50>)
   13896:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13898:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1389a:	220b      	movs	r2, #11
   1389c:	4628      	mov	r0, r5
   1389e:	f010 f824 	bl	238ea <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   138a2:	6863      	ldr	r3, [r4, #4]
   138a4:	4632      	mov	r2, r6
   138a6:	4669      	mov	r1, sp
   138a8:	4628      	mov	r0, r5
   138aa:	685b      	ldr	r3, [r3, #4]
   138ac:	f010 f81d 	bl	238ea <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   138b0:	6863      	ldr	r3, [r4, #4]
   138b2:	4906      	ldr	r1, [pc, #24]	; (138cc <log_output_dropped_process+0x54>)
   138b4:	685b      	ldr	r3, [r3, #4]
   138b6:	221b      	movs	r2, #27
   138b8:	4628      	mov	r0, r5
   138ba:	f010 f816 	bl	238ea <buffer_write>
		     output->control_block->ctx);
}
   138be:	b002      	add	sp, #8
   138c0:	bd70      	pop	{r4, r5, r6, pc}
   138c2:	bf00      	nop
   138c4:	00029fe3 	.word	0x00029fe3
   138c8:	0002768d 	.word	0x0002768d
   138cc:	00027671 	.word	0x00027671

000138d0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   138d0:	4a07      	ldr	r2, [pc, #28]	; (138f0 <log_output_timestamp_freq_set+0x20>)
   138d2:	2100      	movs	r1, #0
   138d4:	2301      	movs	r3, #1
   138d6:	4290      	cmp	r0, r2
   138d8:	d806      	bhi.n	138e8 <log_output_timestamp_freq_set+0x18>
   138da:	4a06      	ldr	r2, [pc, #24]	; (138f4 <log_output_timestamp_freq_set+0x24>)
   138dc:	b901      	cbnz	r1, 138e0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   138de:	2301      	movs	r3, #1
   138e0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   138e2:	4b05      	ldr	r3, [pc, #20]	; (138f8 <log_output_timestamp_freq_set+0x28>)
   138e4:	6018      	str	r0, [r3, #0]
}
   138e6:	4770      	bx	lr
		frequency /= 2U;
   138e8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   138ea:	005b      	lsls	r3, r3, #1
   138ec:	2101      	movs	r1, #1
   138ee:	e7f2      	b.n	138d6 <log_output_timestamp_freq_set+0x6>
   138f0:	000f4240 	.word	0x000f4240
   138f4:	20002b50 	.word	0x20002b50
   138f8:	20002b54 	.word	0x20002b54

000138fc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   138fc:	4b01      	ldr	r3, [pc, #4]	; (13904 <log_backend_rtt_init+0x8>)
   138fe:	2201      	movs	r2, #1
   13900:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   13902:	4770      	bx	lr
   13904:	20002f4b 	.word	0x20002f4b

00013908 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13908:	4b01      	ldr	r3, [pc, #4]	; (13910 <format_set+0x8>)
	return 0;
}
   1390a:	2000      	movs	r0, #0
	log_format_current = log_type;
   1390c:	6019      	str	r1, [r3, #0]
}
   1390e:	4770      	bx	lr
   13910:	20002b6c 	.word	0x20002b6c

00013914 <panic>:
	panic_mode = true;
   13914:	4b02      	ldr	r3, [pc, #8]	; (13920 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   13916:	4803      	ldr	r0, [pc, #12]	; (13924 <panic+0x10>)
   13918:	2201      	movs	r2, #1
   1391a:	701a      	strb	r2, [r3, #0]
   1391c:	f00f bff9 	b.w	23912 <log_output_flush>
   13920:	20002f4c 	.word	0x20002f4c
   13924:	00026498 	.word	0x00026498

00013928 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   13928:	4801      	ldr	r0, [pc, #4]	; (13930 <dropped+0x8>)
   1392a:	f7ff bfa5 	b.w	13878 <log_output_dropped_process>
   1392e:	bf00      	nop
   13930:	00026498 	.word	0x00026498

00013934 <process>:
{
   13934:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13936:	4b06      	ldr	r3, [pc, #24]	; (13950 <process+0x1c>)
   13938:	6818      	ldr	r0, [r3, #0]
{
   1393a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1393c:	f7ff fa1c 	bl	12d78 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   13940:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13942:	4603      	mov	r3, r0
}
   13944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   13948:	4802      	ldr	r0, [pc, #8]	; (13954 <process+0x20>)
   1394a:	220f      	movs	r2, #15
   1394c:	4718      	bx	r3
   1394e:	bf00      	nop
   13950:	20002b6c 	.word	0x20002b6c
   13954:	00026498 	.word	0x00026498

00013958 <on_failed_write>:
	if (retry_cnt == 0) {
   13958:	b910      	cbnz	r0, 13960 <on_failed_write+0x8>
		host_present = false;
   1395a:	4b07      	ldr	r3, [pc, #28]	; (13978 <on_failed_write+0x20>)
   1395c:	7018      	strb	r0, [r3, #0]
}
   1395e:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13960:	4b06      	ldr	r3, [pc, #24]	; (1397c <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   13962:	781b      	ldrb	r3, [r3, #0]
   13964:	b11b      	cbz	r3, 1396e <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   13966:	f241 3088 	movw	r0, #5000	; 0x1388
   1396a:	f012 ba00 	b.w	25d6e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1396e:	20a4      	movs	r0, #164	; 0xa4
   13970:	2100      	movs	r1, #0
   13972:	f00d bf69 	b.w	21848 <z_impl_k_sleep>
   13976:	bf00      	nop
   13978:	20002f4b 	.word	0x20002f4b
   1397c:	20002f4c 	.word	0x20002f4c

00013980 <data_out_block_mode>:
{
   13980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13984:	f8df 9074 	ldr.w	r9, [pc, #116]	; 139fc <data_out_block_mode+0x7c>
   13988:	4f1d      	ldr	r7, [pc, #116]	; (13a00 <data_out_block_mode+0x80>)
{
   1398a:	4680      	mov	r8, r0
   1398c:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1398e:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   13990:	f899 5000 	ldrb.w	r5, [r9]
   13994:	b995      	cbnz	r5, 139bc <data_out_block_mode+0x3c>
			RTT_LOCK();
   13996:	f00b f983 	bl	1eca0 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1399a:	4628      	mov	r0, r5
   1399c:	4632      	mov	r2, r6
   1399e:	4641      	mov	r1, r8
   139a0:	f00b f92c 	bl	1ebfc <SEGGER_RTT_WriteSkipNoLock>
   139a4:	4605      	mov	r5, r0
			RTT_UNLOCK();
   139a6:	f00b f985 	bl	1ecb4 <zephyr_rtt_mutex_unlock>
		if (ret) {
   139aa:	b1e5      	cbz	r5, 139e6 <data_out_block_mode+0x66>
	host_present = true;
   139ac:	2301      	movs	r3, #1
   139ae:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   139b0:	f899 3000 	ldrb.w	r3, [r9]
   139b4:	b973      	cbnz	r3, 139d4 <data_out_block_mode+0x54>
}
   139b6:	4630      	mov	r0, r6
   139b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   139bc:	4632      	mov	r2, r6
   139be:	4641      	mov	r1, r8
   139c0:	2000      	movs	r0, #0
   139c2:	f00b f91b 	bl	1ebfc <SEGGER_RTT_WriteSkipNoLock>
   139c6:	4605      	mov	r5, r0
   139c8:	e7ef      	b.n	139aa <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   139ca:	4620      	mov	r0, r4
   139cc:	f7ff ffc4 	bl	13958 <on_failed_write>
   139d0:	1e65      	subs	r5, r4, #1
   139d2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   139d4:	2000      	movs	r0, #0
   139d6:	f00b f959 	bl	1ec8c <SEGGER_RTT_HasDataUp>
   139da:	2800      	cmp	r0, #0
   139dc:	d0eb      	beq.n	139b6 <data_out_block_mode+0x36>
   139de:	783b      	ldrb	r3, [r7, #0]
   139e0:	2b00      	cmp	r3, #0
   139e2:	d1f2      	bne.n	139ca <data_out_block_mode+0x4a>
   139e4:	e7e7      	b.n	139b6 <data_out_block_mode+0x36>
		} else if (host_present) {
   139e6:	783b      	ldrb	r3, [r7, #0]
   139e8:	2b00      	cmp	r3, #0
   139ea:	d0e4      	beq.n	139b6 <data_out_block_mode+0x36>
			retry_cnt--;
   139ec:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   139ee:	4620      	mov	r0, r4
   139f0:	f7ff ffb2 	bl	13958 <on_failed_write>
	} while ((ret == 0) && host_present);
   139f4:	783b      	ldrb	r3, [r7, #0]
   139f6:	2b00      	cmp	r3, #0
   139f8:	d1ca      	bne.n	13990 <data_out_block_mode+0x10>
   139fa:	e7dc      	b.n	139b6 <data_out_block_mode+0x36>
   139fc:	20002f4c 	.word	0x20002f4c
   13a00:	20002f4b 	.word	0x20002f4b

00013a04 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13a04:	4b01      	ldr	r3, [pc, #4]	; (13a0c <format_set+0x8>)
	return 0;
}
   13a06:	2000      	movs	r0, #0
	log_format_current = log_type;
   13a08:	6019      	str	r1, [r3, #0]
}
   13a0a:	4770      	bx	lr
   13a0c:	20002b84 	.word	0x20002b84

00013a10 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   13a10:	4b02      	ldr	r3, [pc, #8]	; (13a1c <panic+0xc>)
	log_output_flush(output);
   13a12:	4803      	ldr	r0, [pc, #12]	; (13a20 <panic+0x10>)
   13a14:	2201      	movs	r2, #1
   13a16:	701a      	strb	r2, [r3, #0]
   13a18:	f00f bf7b 	b.w	23912 <log_output_flush>
   13a1c:	20002f5e 	.word	0x20002f5e
   13a20:	000264c4 	.word	0x000264c4

00013a24 <dropped>:
	log_output_dropped_process(output, cnt);
   13a24:	4801      	ldr	r0, [pc, #4]	; (13a2c <dropped+0x8>)
   13a26:	f7ff bf27 	b.w	13878 <log_output_dropped_process>
   13a2a:	bf00      	nop
   13a2c:	000264c4 	.word	0x000264c4

00013a30 <process>:
{
   13a30:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13a32:	4b06      	ldr	r3, [pc, #24]	; (13a4c <process+0x1c>)
   13a34:	6818      	ldr	r0, [r3, #0]
{
   13a36:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13a38:	f7ff f99e 	bl	12d78 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   13a3c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13a3e:	4603      	mov	r3, r0
}
   13a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   13a44:	4802      	ldr	r0, [pc, #8]	; (13a50 <process+0x20>)
   13a46:	220f      	movs	r2, #15
   13a48:	4718      	bx	r3
   13a4a:	bf00      	nop
   13a4c:	20002b84 	.word	0x20002b84
   13a50:	000264c4 	.word	0x000264c4

00013a54 <char_out>:
{
   13a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
   13a56:	4f07      	ldr	r7, [pc, #28]	; (13a74 <char_out+0x20>)
   13a58:	460d      	mov	r5, r1
   13a5a:	4604      	mov	r4, r0
   13a5c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   13a5e:	42b4      	cmp	r4, r6
   13a60:	d101      	bne.n	13a66 <char_out+0x12>
}
   13a62:	4628      	mov	r0, r5
   13a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   13a66:	f814 1b01 	ldrb.w	r1, [r4], #1
   13a6a:	68bb      	ldr	r3, [r7, #8]
   13a6c:	4801      	ldr	r0, [pc, #4]	; (13a74 <char_out+0x20>)
   13a6e:	69db      	ldr	r3, [r3, #28]
   13a70:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   13a72:	e7f4      	b.n	13a5e <char_out+0xa>
   13a74:	00026068 	.word	0x00026068

00013a78 <log_backend_uart_init>:
{
   13a78:	b508      	push	{r3, lr}
   13a7a:	4807      	ldr	r0, [pc, #28]	; (13a98 <log_backend_uart_init+0x20>)
   13a7c:	f012 f84c 	bl	25b18 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   13a80:	b948      	cbnz	r0, 13a96 <log_backend_uart_init+0x1e>
   13a82:	4906      	ldr	r1, [pc, #24]	; (13a9c <log_backend_uart_init+0x24>)
   13a84:	4806      	ldr	r0, [pc, #24]	; (13aa0 <log_backend_uart_init+0x28>)
   13a86:	4a07      	ldr	r2, [pc, #28]	; (13aa4 <log_backend_uart_init+0x2c>)
   13a88:	237f      	movs	r3, #127	; 0x7f
   13a8a:	f00f fdb6 	bl	235fa <assert_print>
   13a8e:	4805      	ldr	r0, [pc, #20]	; (13aa4 <log_backend_uart_init+0x2c>)
   13a90:	217f      	movs	r1, #127	; 0x7f
   13a92:	f00f fdab 	bl	235ec <assert_post_action>
}
   13a96:	bd08      	pop	{r3, pc}
   13a98:	00026068 	.word	0x00026068
   13a9c:	00027707 	.word	0x00027707
   13aa0:	00026f1a 	.word	0x00026f1a
   13aa4:	000276c9 	.word	0x000276c9

00013aa8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13aac:	4605      	mov	r5, r0
	__asm__ volatile(
   13aae:	f04f 0340 	mov.w	r3, #64	; 0x40
   13ab2:	f3ef 8611 	mrs	r6, BASEPRI
   13ab6:	f383 8812 	msr	BASEPRI_MAX, r3
   13aba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13abe:	4820      	ldr	r0, [pc, #128]	; (13b40 <pm_state_notify+0x98>)
   13ac0:	f00b fdb6 	bl	1f630 <z_spin_lock_valid>
   13ac4:	b968      	cbnz	r0, 13ae2 <pm_state_notify+0x3a>
   13ac6:	4a1f      	ldr	r2, [pc, #124]	; (13b44 <pm_state_notify+0x9c>)
   13ac8:	491f      	ldr	r1, [pc, #124]	; (13b48 <pm_state_notify+0xa0>)
   13aca:	4820      	ldr	r0, [pc, #128]	; (13b4c <pm_state_notify+0xa4>)
   13acc:	2394      	movs	r3, #148	; 0x94
   13ace:	f00f fd94 	bl	235fa <assert_print>
   13ad2:	491b      	ldr	r1, [pc, #108]	; (13b40 <pm_state_notify+0x98>)
   13ad4:	481e      	ldr	r0, [pc, #120]	; (13b50 <pm_state_notify+0xa8>)
   13ad6:	f00f fd90 	bl	235fa <assert_print>
   13ada:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13adc:	4819      	ldr	r0, [pc, #100]	; (13b44 <pm_state_notify+0x9c>)
   13ade:	f00f fd85 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   13ae2:	4817      	ldr	r0, [pc, #92]	; (13b40 <pm_state_notify+0x98>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13ae4:	4f1b      	ldr	r7, [pc, #108]	; (13b54 <pm_state_notify+0xac>)
   13ae6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 13b58 <pm_state_notify+0xb0>
   13aea:	f00b fdbf 	bl	1f66c <z_spin_lock_set_owner>
	return list->head;
   13aee:	4b1b      	ldr	r3, [pc, #108]	; (13b5c <pm_state_notify+0xb4>)
   13af0:	681c      	ldr	r4, [r3, #0]
   13af2:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13af6:	b97c      	cbnz	r4, 13b18 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13af8:	4811      	ldr	r0, [pc, #68]	; (13b40 <pm_state_notify+0x98>)
   13afa:	f00b fda7 	bl	1f64c <z_spin_unlock_valid>
   13afe:	b9c8      	cbnz	r0, 13b34 <pm_state_notify+0x8c>
   13b00:	4a10      	ldr	r2, [pc, #64]	; (13b44 <pm_state_notify+0x9c>)
   13b02:	4917      	ldr	r1, [pc, #92]	; (13b60 <pm_state_notify+0xb8>)
   13b04:	4811      	ldr	r0, [pc, #68]	; (13b4c <pm_state_notify+0xa4>)
   13b06:	23c2      	movs	r3, #194	; 0xc2
   13b08:	f00f fd77 	bl	235fa <assert_print>
   13b0c:	490c      	ldr	r1, [pc, #48]	; (13b40 <pm_state_notify+0x98>)
   13b0e:	4815      	ldr	r0, [pc, #84]	; (13b64 <pm_state_notify+0xbc>)
   13b10:	f00f fd73 	bl	235fa <assert_print>
   13b14:	21c2      	movs	r1, #194	; 0xc2
   13b16:	e7e1      	b.n	13adc <pm_state_notify+0x34>
			callback = notifier->state_exit;
   13b18:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   13b1c:	2d00      	cmp	r5, #0
   13b1e:	bf18      	it	ne
   13b20:	4613      	movne	r3, r2
		if (callback) {
   13b22:	b12b      	cbz	r3, 13b30 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13b24:	f898 2010 	ldrb.w	r2, [r8, #16]
   13b28:	fb09 f202 	mul.w	r2, r9, r2
   13b2c:	5cb8      	ldrb	r0, [r7, r2]
   13b2e:	4798      	blx	r3
	return node->next;
   13b30:	6824      	ldr	r4, [r4, #0]
   13b32:	e7e0      	b.n	13af6 <pm_state_notify+0x4e>
	__asm__ volatile(
   13b34:	f386 8811 	msr	BASEPRI, r6
   13b38:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13b40:	20002b88 	.word	0x20002b88
   13b44:	0002730e 	.word	0x0002730e
   13b48:	00027367 	.word	0x00027367
   13b4c:	00026f1a 	.word	0x00026f1a
   13b50:	0002737c 	.word	0x0002737c
   13b54:	20002b9c 	.word	0x20002b9c
   13b58:	20002ed4 	.word	0x20002ed4
   13b5c:	20002ba8 	.word	0x20002ba8
   13b60:	0002733b 	.word	0x0002733b
   13b64:	00027352 	.word	0x00027352

00013b68 <pm_system_resume>:

void pm_system_resume(void)
{
   13b68:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   13b6a:	4b19      	ldr	r3, [pc, #100]	; (13bd0 <pm_system_resume+0x68>)
   13b6c:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b6e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13b72:	f004 031f 	and.w	r3, r4, #31
   13b76:	2201      	movs	r2, #1
   13b78:	409a      	lsls	r2, r3
   13b7a:	4b16      	ldr	r3, [pc, #88]	; (13bd4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b7c:	0961      	lsrs	r1, r4, #5
   13b7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13b82:	43d0      	mvns	r0, r2
   13b84:	e853 1f00 	ldrex	r1, [r3]
   13b88:	ea01 0500 	and.w	r5, r1, r0
   13b8c:	e843 5600 	strex	r6, r5, [r3]
   13b90:	2e00      	cmp	r6, #0
   13b92:	d1f7      	bne.n	13b84 <pm_system_resume+0x1c>
   13b94:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13b98:	420a      	tst	r2, r1
   13b9a:	d013      	beq.n	13bc4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   13b9c:	4b0e      	ldr	r3, [pc, #56]	; (13bd8 <pm_system_resume+0x70>)
   13b9e:	4d0f      	ldr	r5, [pc, #60]	; (13bdc <pm_system_resume+0x74>)
   13ba0:	b18b      	cbz	r3, 13bc6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13ba2:	230c      	movs	r3, #12
   13ba4:	4363      	muls	r3, r4
   13ba6:	18ea      	adds	r2, r5, r3
   13ba8:	5ce8      	ldrb	r0, [r5, r3]
   13baa:	7851      	ldrb	r1, [r2, #1]
   13bac:	f010 f962 	bl	23e74 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13bb0:	2000      	movs	r0, #0
   13bb2:	f7ff ff79 	bl	13aa8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13bb6:	230c      	movs	r3, #12
   13bb8:	435c      	muls	r4, r3
   13bba:	192a      	adds	r2, r5, r4
   13bbc:	2300      	movs	r3, #0
   13bbe:	512b      	str	r3, [r5, r4]
   13bc0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13bc4:	bd70      	pop	{r4, r5, r6, pc}
   13bc6:	f383 8811 	msr	BASEPRI, r3
   13bca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13bce:	e7ef      	b.n	13bb0 <pm_system_resume+0x48>
   13bd0:	20002ed4 	.word	0x20002ed4
   13bd4:	20002bb0 	.word	0x20002bb0
   13bd8:	00023e75 	.word	0x00023e75
   13bdc:	20002b9c 	.word	0x20002b9c

00013be0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13be4:	4b47      	ldr	r3, [pc, #284]	; (13d04 <pm_system_suspend+0x124>)
{
   13be6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13be8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   13bea:	f04f 0340 	mov.w	r3, #64	; 0x40
   13bee:	f3ef 8811 	mrs	r8, BASEPRI
   13bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   13bf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13bfa:	4843      	ldr	r0, [pc, #268]	; (13d08 <pm_system_suspend+0x128>)
   13bfc:	f00b fd18 	bl	1f630 <z_spin_lock_valid>
   13c00:	b968      	cbnz	r0, 13c1e <pm_system_suspend+0x3e>
   13c02:	4a42      	ldr	r2, [pc, #264]	; (13d0c <pm_system_suspend+0x12c>)
   13c04:	4942      	ldr	r1, [pc, #264]	; (13d10 <pm_system_suspend+0x130>)
   13c06:	4843      	ldr	r0, [pc, #268]	; (13d14 <pm_system_suspend+0x134>)
   13c08:	2394      	movs	r3, #148	; 0x94
   13c0a:	f00f fcf6 	bl	235fa <assert_print>
   13c0e:	493e      	ldr	r1, [pc, #248]	; (13d08 <pm_system_suspend+0x128>)
   13c10:	4841      	ldr	r0, [pc, #260]	; (13d18 <pm_system_suspend+0x138>)
   13c12:	f00f fcf2 	bl	235fa <assert_print>
   13c16:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13c18:	483c      	ldr	r0, [pc, #240]	; (13d0c <pm_system_suspend+0x12c>)
   13c1a:	f00f fce7 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   13c1e:	483a      	ldr	r0, [pc, #232]	; (13d08 <pm_system_suspend+0x128>)
   13c20:	4e3e      	ldr	r6, [pc, #248]	; (13d1c <pm_system_suspend+0x13c>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13c22:	240c      	movs	r4, #12
   13c24:	f00b fd22 	bl	1f66c <z_spin_lock_set_owner>
   13c28:	436c      	muls	r4, r5
   13c2a:	4b3d      	ldr	r3, [pc, #244]	; (13d20 <pm_system_suspend+0x140>)
   13c2c:	5d19      	ldrb	r1, [r3, r4]
   13c2e:	191a      	adds	r2, r3, r4
   13c30:	b1b9      	cbz	r1, 13c62 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   13c32:	ca07      	ldmia	r2, {r0, r1, r2}
   13c34:	eb06 0c04 	add.w	ip, r6, r4
   13c38:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13c3c:	2200      	movs	r2, #0
   13c3e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13c40:	4831      	ldr	r0, [pc, #196]	; (13d08 <pm_system_suspend+0x128>)
   13c42:	f00b fd03 	bl	1f64c <z_spin_unlock_valid>
   13c46:	4604      	mov	r4, r0
   13c48:	b9b0      	cbnz	r0, 13c78 <pm_system_suspend+0x98>
   13c4a:	4a30      	ldr	r2, [pc, #192]	; (13d0c <pm_system_suspend+0x12c>)
   13c4c:	4935      	ldr	r1, [pc, #212]	; (13d24 <pm_system_suspend+0x144>)
   13c4e:	4831      	ldr	r0, [pc, #196]	; (13d14 <pm_system_suspend+0x134>)
   13c50:	23c2      	movs	r3, #194	; 0xc2
   13c52:	f00f fcd2 	bl	235fa <assert_print>
   13c56:	492c      	ldr	r1, [pc, #176]	; (13d08 <pm_system_suspend+0x128>)
   13c58:	4833      	ldr	r0, [pc, #204]	; (13d28 <pm_system_suspend+0x148>)
   13c5a:	f00f fcce 	bl	235fa <assert_print>
   13c5e:	21c2      	movs	r1, #194	; 0xc2
   13c60:	e7da      	b.n	13c18 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   13c62:	4639      	mov	r1, r7
   13c64:	4628      	mov	r0, r5
   13c66:	f000 f869 	bl	13d3c <pm_policy_next_state>
		if (info != NULL) {
   13c6a:	2800      	cmp	r0, #0
   13c6c:	d0e8      	beq.n	13c40 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   13c6e:	c807      	ldmia	r0, {r0, r1, r2}
   13c70:	4434      	add	r4, r6
   13c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   13c76:	e7e3      	b.n	13c40 <pm_system_suspend+0x60>
	__asm__ volatile(
   13c78:	f388 8811 	msr	BASEPRI, r8
   13c7c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13c80:	230c      	movs	r3, #12
   13c82:	436b      	muls	r3, r5
   13c84:	18f2      	adds	r2, r6, r3
   13c86:	5cf3      	ldrb	r3, [r6, r3]
   13c88:	2b00      	cmp	r3, #0
   13c8a:	d039      	beq.n	13d00 <pm_system_suspend+0x120>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13c8c:	1c7b      	adds	r3, r7, #1
   13c8e:	d00f      	beq.n	13cb0 <pm_system_suspend+0xd0>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13c90:	f8d2 e008 	ldr.w	lr, [r2, #8]
   13c94:	4825      	ldr	r0, [pc, #148]	; (13d2c <pm_system_suspend+0x14c>)
   13c96:	4a26      	ldr	r2, [pc, #152]	; (13d30 <pm_system_suspend+0x150>)
   13c98:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13c9c:	2100      	movs	r1, #0
   13c9e:	2300      	movs	r3, #0
   13ca0:	fbee 010c 	umlal	r0, r1, lr, ip
   13ca4:	f7ec fa1a 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   13ca8:	2101      	movs	r1, #1
   13caa:	1a38      	subs	r0, r7, r0
   13cac:	f008 fec6 	bl	1ca3c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13cb0:	f00c ff90 	bl	20bd4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13cb4:	2001      	movs	r0, #1
   13cb6:	f7ff fef7 	bl	13aa8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13cba:	f3bf 8f5b 	dmb	ish
   13cbe:	4b1d      	ldr	r3, [pc, #116]	; (13d34 <pm_system_suspend+0x154>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13cc0:	096a      	lsrs	r2, r5, #5
   13cc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   13cc6:	f005 011f 	and.w	r1, r5, #31
   13cca:	2201      	movs	r2, #1
   13ccc:	408a      	lsls	r2, r1
   13cce:	e853 0f00 	ldrex	r0, [r3]
   13cd2:	4310      	orrs	r0, r2
   13cd4:	e843 0100 	strex	r1, r0, [r3]
   13cd8:	2900      	cmp	r1, #0
   13cda:	d1f8      	bne.n	13cce <pm_system_suspend+0xee>
   13cdc:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   13ce0:	4b15      	ldr	r3, [pc, #84]	; (13d38 <pm_system_suspend+0x158>)
   13ce2:	b133      	cbz	r3, 13cf2 <pm_system_suspend+0x112>
		pm_state_set(info->state, info->substate_id);
   13ce4:	230c      	movs	r3, #12
   13ce6:	436b      	muls	r3, r5
   13ce8:	18f2      	adds	r2, r6, r3
   13cea:	5cf0      	ldrb	r0, [r6, r3]
   13cec:	7851      	ldrb	r1, [r2, #1]
   13cee:	f010 f8b5 	bl	23e5c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   13cf2:	f7ff ff39 	bl	13b68 <pm_system_resume>
	k_sched_unlock();
   13cf6:	f00c ffd9 	bl	20cac <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   13cfa:	4620      	mov	r0, r4
   13cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   13d00:	461c      	mov	r4, r3
   13d02:	e7fa      	b.n	13cfa <pm_system_suspend+0x11a>
   13d04:	20002ed4 	.word	0x20002ed4
   13d08:	20002b8c 	.word	0x20002b8c
   13d0c:	0002730e 	.word	0x0002730e
   13d10:	00027367 	.word	0x00027367
   13d14:	00026f1a 	.word	0x00026f1a
   13d18:	0002737c 	.word	0x0002737c
   13d1c:	20002b9c 	.word	0x20002b9c
   13d20:	20002b90 	.word	0x20002b90
   13d24:	0002733b 	.word	0x0002733b
   13d28:	00027352 	.word	0x00027352
   13d2c:	000f423f 	.word	0x000f423f
   13d30:	000f4240 	.word	0x000f4240
   13d34:	20002bb0 	.word	0x20002bb0
   13d38:	00023e5d 	.word	0x00023e5d

00013d3c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d40:	b085      	sub	sp, #20
   13d42:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13d44:	a903      	add	r1, sp, #12
   13d46:	f000 f843 	bl	13dd0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13d4a:	4b1e      	ldr	r3, [pc, #120]	; (13dc4 <pm_policy_next_state+0x88>)
   13d4c:	9d03      	ldr	r5, [sp, #12]
   13d4e:	f8d3 a000 	ldr.w	sl, [r3]
   13d52:	f8df 8074 	ldr.w	r8, [pc, #116]	; 13dc8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13d56:	1e43      	subs	r3, r0, #1
   13d58:	b21b      	sxth	r3, r3
   13d5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13d5e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13d60:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13d64:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13d68:	f04f 0b00 	mov.w	fp, #0
   13d6c:	b924      	cbnz	r4, 13d78 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13d6e:	46a1      	mov	r9, r4
}
   13d70:	4648      	mov	r0, r9
   13d72:	b005      	add	sp, #20
   13d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d78:	6868      	ldr	r0, [r5, #4]
   13d7a:	4a14      	ldr	r2, [pc, #80]	; (13dcc <pm_policy_next_state+0x90>)
   13d7c:	46c4      	mov	ip, r8
   13d7e:	4659      	mov	r1, fp
   13d80:	fbe0 c107 	umlal	ip, r1, r0, r7
   13d84:	2300      	movs	r3, #0
   13d86:	4660      	mov	r0, ip
   13d88:	f7ec f9a8 	bl	dc <__aeabi_uldivmod>
   13d8c:	9001      	str	r0, [sp, #4]
   13d8e:	68a8      	ldr	r0, [r5, #8]
   13d90:	4a0e      	ldr	r2, [pc, #56]	; (13dcc <pm_policy_next_state+0x90>)
   13d92:	46c4      	mov	ip, r8
   13d94:	4659      	mov	r1, fp
   13d96:	fbe0 c107 	umlal	ip, r1, r0, r7
   13d9a:	2300      	movs	r3, #0
   13d9c:	4660      	mov	r0, ip
   13d9e:	f7ec f99d 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13da2:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   13da6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13da8:	d001      	beq.n	13dae <pm_policy_next_state+0x72>
   13daa:	4582      	cmp	sl, r0
   13dac:	d905      	bls.n	13dba <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13dae:	1c73      	adds	r3, r6, #1
   13db0:	d0de      	beq.n	13d70 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   13db2:	9b01      	ldr	r3, [sp, #4]
   13db4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   13db6:	42b0      	cmp	r0, r6
   13db8:	d9da      	bls.n	13d70 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13dba:	3c01      	subs	r4, #1
   13dbc:	b2a4      	uxth	r4, r4
   13dbe:	3d0c      	subs	r5, #12
   13dc0:	e7d4      	b.n	13d6c <pm_policy_next_state+0x30>
   13dc2:	bf00      	nop
   13dc4:	200005d4 	.word	0x200005d4
   13dc8:	000f423f 	.word	0x000f423f
   13dcc:	000f4240 	.word	0x000f4240

00013dd0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   13dd0:	b908      	cbnz	r0, 13dd6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   13dd2:	4b02      	ldr	r3, [pc, #8]	; (13ddc <pm_state_cpu_get_all+0xc>)
   13dd4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   13dd6:	2000      	movs	r0, #0
   13dd8:	4770      	bx	lr
   13dda:	bf00      	nop
   13ddc:	000264d4 	.word	0x000264d4

00013de0 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   13de0:	4b03      	ldr	r3, [pc, #12]	; (13df0 <nus_ccc_cfg_changed+0x10>)
   13de2:	689b      	ldr	r3, [r3, #8]
   13de4:	b11b      	cbz	r3, 13dee <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   13de6:	1e48      	subs	r0, r1, #1
   13de8:	bf18      	it	ne
   13dea:	2001      	movne	r0, #1
   13dec:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   13dee:	4770      	bx	lr
   13df0:	20002bb4 	.word	0x20002bb4

00013df4 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   13df4:	b510      	push	{r4, lr}
   13df6:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   13df8:	4b03      	ldr	r3, [pc, #12]	; (13e08 <on_receive+0x14>)
   13dfa:	681b      	ldr	r3, [r3, #0]
{
   13dfc:	4611      	mov	r1, r2
	if (nus_cb.received) {
   13dfe:	b10b      	cbz	r3, 13e04 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   13e00:	4622      	mov	r2, r4
   13e02:	4798      	blx	r3
}
	return len;
}
   13e04:	4620      	mov	r0, r4
   13e06:	bd10      	pop	{r4, pc}
   13e08:	20002bb4 	.word	0x20002bb4

00013e0c <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   13e0c:	b130      	cbz	r0, 13e1c <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   13e0e:	4b04      	ldr	r3, [pc, #16]	; (13e20 <bt_nus_init+0x14>)
   13e10:	6802      	ldr	r2, [r0, #0]
   13e12:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   13e14:	6842      	ldr	r2, [r0, #4]
   13e16:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   13e18:	6882      	ldr	r2, [r0, #8]
   13e1a:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   13e1c:	2000      	movs	r0, #0
   13e1e:	4770      	bx	lr
   13e20:	20002bb4 	.word	0x20002bb4

00013e24 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   13e24:	4904      	ldr	r1, [pc, #16]	; (13e38 <sub_bytes+0x14>)
   13e26:	1e43      	subs	r3, r0, #1
   13e28:	300f      	adds	r0, #15
   13e2a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13e2e:	5c8a      	ldrb	r2, [r1, r2]
   13e30:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13e32:	4283      	cmp	r3, r0
   13e34:	d1f9      	bne.n	13e2a <sub_bytes+0x6>
	}
}
   13e36:	4770      	bx	lr
   13e38:	00027745 	.word	0x00027745

00013e3c <tc_aes128_set_encrypt_key>:
{
   13e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13e3e:	4e26      	ldr	r6, [pc, #152]	; (13ed8 <tc_aes128_set_encrypt_key+0x9c>)
{
   13e40:	4607      	mov	r7, r0
   13e42:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13e44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13e46:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13e48:	ad01      	add	r5, sp, #4
   13e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e50:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13e54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   13e58:	4638      	mov	r0, r7
   13e5a:	2f00      	cmp	r7, #0
   13e5c:	d038      	beq.n	13ed0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   13e5e:	2c00      	cmp	r4, #0
   13e60:	d038      	beq.n	13ed4 <tc_aes128_set_encrypt_key+0x98>
   13e62:	1f38      	subs	r0, r7, #4
   13e64:	4621      	mov	r1, r4
   13e66:	4602      	mov	r2, r0
   13e68:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13e6a:	784b      	ldrb	r3, [r1, #1]
   13e6c:	780d      	ldrb	r5, [r1, #0]
   13e6e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13e70:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13e74:	78cd      	ldrb	r5, [r1, #3]
   13e76:	432b      	orrs	r3, r5
   13e78:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   13e7a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13e7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13e80:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13e82:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   13e86:	d1f0      	bne.n	13e6a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13e88:	4c14      	ldr	r4, [pc, #80]	; (13edc <tc_aes128_set_encrypt_key+0xa0>)
   13e8a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13e8c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13e8e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13e90:	d116      	bne.n	13ec0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13e92:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13e96:	5ca5      	ldrb	r5, [r4, r2]
   13e98:	0e1a      	lsrs	r2, r3, #24
   13e9a:	5ca2      	ldrb	r2, [r4, r2]
   13e9c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13ea0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13ea4:	b2db      	uxtb	r3, r3
   13ea6:	5d65      	ldrb	r5, [r4, r5]
   13ea8:	5ce3      	ldrb	r3, [r4, r3]
   13eaa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13eae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13eb2:	f021 0303 	bic.w	r3, r1, #3
   13eb6:	3330      	adds	r3, #48	; 0x30
   13eb8:	446b      	add	r3, sp
   13eba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13ebe:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13ec0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13ec4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13ec6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13ec8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   13eca:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13ecc:	d1de      	bne.n	13e8c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   13ece:	2001      	movs	r0, #1
}
   13ed0:	b00d      	add	sp, #52	; 0x34
   13ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13ed4:	4620      	mov	r0, r4
   13ed6:	e7fb      	b.n	13ed0 <tc_aes128_set_encrypt_key+0x94>
   13ed8:	00026394 	.word	0x00026394
   13edc:	00027745 	.word	0x00027745

00013ee0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13ee0:	4901      	ldr	r1, [pc, #4]	; (13ee8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13ee2:	2210      	movs	r2, #16
	str	r2, [r1]
   13ee4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13ee6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13ee8:	e000ed10 	.word	0xe000ed10

00013eec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13eec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13eee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13ef0:	f380 8811 	msr	BASEPRI, r0
	isb
   13ef4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   13ef8:	f3bf 8f4f 	dsb	sy
   13efc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13efe:	b662      	cpsie	i
	isb
   13f00:	f3bf 8f6f 	isb	sy

	bx	lr
   13f04:	4770      	bx	lr
   13f06:	bf00      	nop

00013f08 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13f08:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13f0a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13f0c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   13f10:	f3bf 8f4f 	dsb	sy
   13f14:	bf20      	wfe

	msr	BASEPRI, r0
   13f16:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13f1a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13f1c:	4770      	bx	lr
   13f1e:	bf00      	nop

00013f20 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13f24:	4681      	mov	r9, r0
   13f26:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   13f28:	460c      	mov	r4, r1
   13f2a:	2900      	cmp	r1, #0
   13f2c:	d04c      	beq.n	13fc8 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13f2e:	466e      	mov	r6, sp
   13f30:	b08a      	sub	sp, #40	; 0x28
   13f32:	e9d1 1200 	ldrd	r1, r2, [r1]
   13f36:	68a3      	ldr	r3, [r4, #8]
   13f38:	466d      	mov	r5, sp
   13f3a:	4827      	ldr	r0, [pc, #156]	; (13fd8 <z_arm_fatal_error+0xb8>)
   13f3c:	46a8      	mov	r8, r5
   13f3e:	f04f 0a05 	mov.w	sl, #5
   13f42:	e9c5 0105 	strd	r0, r1, [r5, #20]
   13f46:	e9c5 2307 	strd	r2, r3, [r5, #28]
   13f4a:	f848 af10 	str.w	sl, [r8, #16]!
   13f4e:	4823      	ldr	r0, [pc, #140]	; (13fdc <z_arm_fatal_error+0xbc>)
   13f50:	4642      	mov	r2, r8
   13f52:	2300      	movs	r3, #0
   13f54:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13f58:	f7ff f9ac 	bl	132b4 <z_impl_z_log_msg_static_create>
   13f5c:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13f5e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   13f62:	6963      	ldr	r3, [r4, #20]
   13f64:	46ad      	mov	sp, r5
   13f66:	481e      	ldr	r0, [pc, #120]	; (13fe0 <z_arm_fatal_error+0xc0>)
   13f68:	f8c5 a010 	str.w	sl, [r5, #16]
   13f6c:	e9c5 0105 	strd	r0, r1, [r5, #20]
   13f70:	e9c5 2307 	strd	r2, r3, [r5, #28]
   13f74:	4819      	ldr	r0, [pc, #100]	; (13fdc <z_arm_fatal_error+0xbc>)
   13f76:	2300      	movs	r3, #0
   13f78:	4642      	mov	r2, r8
   13f7a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13f7e:	f7ff f999 	bl	132b4 <z_impl_z_log_msg_static_create>
   13f82:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13f84:	b088      	sub	sp, #32
   13f86:	69e3      	ldr	r3, [r4, #28]
   13f88:	466d      	mov	r5, sp
   13f8a:	4a16      	ldr	r2, [pc, #88]	; (13fe4 <z_arm_fatal_error+0xc4>)
   13f8c:	46a8      	mov	r8, r5
   13f8e:	f04f 0a03 	mov.w	sl, #3
   13f92:	e9c5 2305 	strd	r2, r3, [r5, #20]
   13f96:	f848 af10 	str.w	sl, [r8, #16]!
   13f9a:	4810      	ldr	r0, [pc, #64]	; (13fdc <z_arm_fatal_error+0xbc>)
   13f9c:	2300      	movs	r3, #0
   13f9e:	4642      	mov	r2, r8
   13fa0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13fa4:	f7ff f986 	bl	132b4 <z_impl_z_log_msg_static_create>
   13fa8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13faa:	69a3      	ldr	r3, [r4, #24]
   13fac:	46ad      	mov	sp, r5
   13fae:	4a0e      	ldr	r2, [pc, #56]	; (13fe8 <z_arm_fatal_error+0xc8>)
   13fb0:	f8c5 a010 	str.w	sl, [r5, #16]
   13fb4:	e9c5 2305 	strd	r2, r3, [r5, #20]
   13fb8:	4808      	ldr	r0, [pc, #32]	; (13fdc <z_arm_fatal_error+0xbc>)
   13fba:	2300      	movs	r3, #0
   13fbc:	4642      	mov	r2, r8
   13fbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13fc2:	f7ff f977 	bl	132b4 <z_impl_z_log_msg_static_create>
   13fc6:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13fc8:	4621      	mov	r1, r4
   13fca:	4648      	mov	r0, r9
   13fcc:	f00a fe78 	bl	1ecc0 <z_fatal_error>
}
   13fd0:	46bd      	mov	sp, r7
   13fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13fd6:	bf00      	nop
   13fd8:	00027845 	.word	0x00027845
   13fdc:	00026334 	.word	0x00026334
   13fe0:	00027874 	.word	0x00027874
   13fe4:	000278a3 	.word	0x000278a3
   13fe8:	000278b2 	.word	0x000278b2

00013fec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13fec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13fee:	2800      	cmp	r0, #0
   13ff0:	db07      	blt.n	14002 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13ff2:	4a04      	ldr	r2, [pc, #16]	; (14004 <arch_irq_enable+0x18>)
   13ff4:	0941      	lsrs	r1, r0, #5
   13ff6:	2301      	movs	r3, #1
   13ff8:	f000 001f 	and.w	r0, r0, #31
   13ffc:	4083      	lsls	r3, r0
   13ffe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14002:	4770      	bx	lr
   14004:	e000e100 	.word	0xe000e100

00014008 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14008:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1400a:	2800      	cmp	r0, #0
   1400c:	db0c      	blt.n	14028 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1400e:	0943      	lsrs	r3, r0, #5
   14010:	4906      	ldr	r1, [pc, #24]	; (1402c <arch_irq_disable+0x24>)
   14012:	f000 001f 	and.w	r0, r0, #31
   14016:	3320      	adds	r3, #32
   14018:	2201      	movs	r2, #1
   1401a:	4082      	lsls	r2, r0
   1401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14024:	f3bf 8f6f 	isb	sy
}
   14028:	4770      	bx	lr
   1402a:	bf00      	nop
   1402c:	e000e100 	.word	0xe000e100

00014030 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14030:	4b05      	ldr	r3, [pc, #20]	; (14048 <arch_irq_is_enabled+0x18>)
   14032:	0942      	lsrs	r2, r0, #5
   14034:	f000 001f 	and.w	r0, r0, #31
   14038:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1403c:	2301      	movs	r3, #1
   1403e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14042:	4010      	ands	r0, r2
   14044:	4770      	bx	lr
   14046:	bf00      	nop
   14048:	e000e100 	.word	0xe000e100

0001404c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   1404c:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1404e:	07d3      	lsls	r3, r2, #31
{
   14050:	4604      	mov	r4, r0
   14052:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14054:	d412      	bmi.n	1407c <z_arm_irq_priority_set+0x30>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14056:	1c8b      	adds	r3, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14058:	2b07      	cmp	r3, #7
   1405a:	d910      	bls.n	1407e <z_arm_irq_priority_set+0x32>
   1405c:	4a11      	ldr	r2, [pc, #68]	; (140a4 <z_arm_irq_priority_set+0x58>)
   1405e:	4912      	ldr	r1, [pc, #72]	; (140a8 <z_arm_irq_priority_set+0x5c>)
   14060:	4812      	ldr	r0, [pc, #72]	; (140ac <z_arm_irq_priority_set+0x60>)
   14062:	235b      	movs	r3, #91	; 0x5b
   14064:	f00f fac9 	bl	235fa <assert_print>
   14068:	4811      	ldr	r0, [pc, #68]	; (140b0 <z_arm_irq_priority_set+0x64>)
   1406a:	4629      	mov	r1, r5
   1406c:	2306      	movs	r3, #6
   1406e:	4622      	mov	r2, r4
   14070:	f00f fac3 	bl	235fa <assert_print>
   14074:	480b      	ldr	r0, [pc, #44]	; (140a4 <z_arm_irq_priority_set+0x58>)
   14076:	215b      	movs	r1, #91	; 0x5b
   14078:	f00f fab8 	bl	235ec <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1407c:	2300      	movs	r3, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1407e:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14080:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14082:	bfac      	ite	ge
   14084:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14088:	4a0a      	ldrlt	r2, [pc, #40]	; (140b4 <z_arm_irq_priority_set+0x68>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1408a:	ea4f 1343 	mov.w	r3, r3, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1408e:	bfb8      	it	lt
   14090:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14094:	b2db      	uxtb	r3, r3
   14096:	bfaa      	itet	ge
   14098:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1409c:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1409e:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   140a2:	bd38      	pop	{r3, r4, r5, pc}
   140a4:	000278e0 	.word	0x000278e0
   140a8:	00027916 	.word	0x00027916
   140ac:	00026f1a 	.word	0x00026f1a
   140b0:	00027931 	.word	0x00027931
   140b4:	e000ed14 	.word	0xe000ed14

000140b8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   140b8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   140ba:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   140bc:	4b04      	ldr	r3, [pc, #16]	; (140d0 <_arch_isr_direct_pm+0x18>)
   140be:	695a      	ldr	r2, [r3, #20]
   140c0:	b11a      	cbz	r2, 140ca <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   140c2:	2200      	movs	r2, #0
   140c4:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   140c6:	f011 fd61 	bl	25b8c <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   140ca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   140cc:	bd08      	pop	{r3, pc}
   140ce:	bf00      	nop
   140d0:	20002ed4 	.word	0x20002ed4

000140d4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   140d4:	bf30      	wfi
    b z_SysNmiOnReset
   140d6:	f7ff bffd 	b.w	140d4 <z_SysNmiOnReset>
   140da:	bf00      	nop

000140dc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   140dc:	4a0b      	ldr	r2, [pc, #44]	; (1410c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   140de:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   140e0:	4b0b      	ldr	r3, [pc, #44]	; (14110 <z_arm_prep_c+0x34>)
   140e2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   140e6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   140e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   140ec:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   140f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   140f4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   140f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   140fc:	f00a feb2 	bl	1ee64 <z_bss_zero>
	z_data_copy();
   14100:	f00d fd14 	bl	21b2c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14104:	f000 fc24 	bl	14950 <z_arm_interrupt_init>
	z_cstart();
   14108:	f00a fef0 	bl	1eeec <z_cstart>
   1410c:	00000000 	.word	0x00000000
   14110:	e000ed00 	.word	0xe000ed00

00014114 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14114:	4a09      	ldr	r2, [pc, #36]	; (1413c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14116:	490a      	ldr	r1, [pc, #40]	; (14140 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14118:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1411a:	6809      	ldr	r1, [r1, #0]
   1411c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1411e:	4909      	ldr	r1, [pc, #36]	; (14144 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14120:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14122:	684b      	ldr	r3, [r1, #4]
   14124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14128:	604b      	str	r3, [r1, #4]
   1412a:	2300      	movs	r3, #0
   1412c:	f383 8811 	msr	BASEPRI, r3
   14130:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14134:	6893      	ldr	r3, [r2, #8]
}
   14136:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14138:	4770      	bx	lr
   1413a:	bf00      	nop
   1413c:	20002ed4 	.word	0x20002ed4
   14140:	000269e0 	.word	0x000269e0
   14144:	e000ed00 	.word	0xe000ed00

00014148 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14148:	4912      	ldr	r1, [pc, #72]	; (14194 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1414a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1414c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14150:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14152:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14156:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1415a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1415c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14160:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14164:	4f0c      	ldr	r7, [pc, #48]	; (14198 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14166:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1416a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   1416c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1416e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14170:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14172:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14174:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14176:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1417a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1417c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1417e:	f000 fc83 	bl	14a88 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14182:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14186:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1418a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1418e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14192:	4770      	bx	lr
    ldr r1, =_kernel
   14194:	20002ed4 	.word	0x20002ed4
    ldr v4, =_SCS_ICSR
   14198:	e000ed04 	.word	0xe000ed04

0001419c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1419c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   141a0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   141a2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   141a6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   141aa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   141ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   141b0:	2902      	cmp	r1, #2
    beq _oops
   141b2:	d0ff      	beq.n	141b4 <_oops>

000141b4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   141b4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   141b6:	f00f fdf1 	bl	23d9c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   141ba:	bd01      	pop	{r0, pc}

000141bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   141bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   141c0:	9b00      	ldr	r3, [sp, #0]
   141c2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   141c6:	490a      	ldr	r1, [pc, #40]	; (141f0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   141c8:	9b01      	ldr	r3, [sp, #4]
   141ca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   141ce:	9b02      	ldr	r3, [sp, #8]
   141d0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   141d4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   141d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   141dc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   141e0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   141e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   141e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   141e8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   141ea:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   141ec:	4770      	bx	lr
   141ee:	bf00      	nop
   141f0:	0002321f 	.word	0x0002321f

000141f4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   141f4:	4a09      	ldr	r2, [pc, #36]	; (1421c <z_check_thread_stack_fail+0x28>)
{
   141f6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   141f8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   141fa:	b170      	cbz	r0, 1421a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   141fc:	f113 0f16 	cmn.w	r3, #22
   14200:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14202:	d005      	beq.n	14210 <z_check_thread_stack_fail+0x1c>
   14204:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14208:	429a      	cmp	r2, r3
   1420a:	d805      	bhi.n	14218 <z_check_thread_stack_fail+0x24>
   1420c:	4283      	cmp	r3, r0
   1420e:	d203      	bcs.n	14218 <z_check_thread_stack_fail+0x24>
		return 0;
   14210:	4281      	cmp	r1, r0
   14212:	bf28      	it	cs
   14214:	2000      	movcs	r0, #0
   14216:	4770      	bx	lr
   14218:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   1421a:	4770      	bx	lr
   1421c:	20002ed4 	.word	0x20002ed4

00014220 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14220:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14222:	4b09      	ldr	r3, [pc, #36]	; (14248 <arch_switch_to_main_thread+0x28>)
{
   14224:	460d      	mov	r5, r1
   14226:	4614      	mov	r4, r2
	_current = main_thread;
   14228:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1422a:	f000 fc2d 	bl	14a88 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1422e:	4620      	mov	r0, r4
   14230:	f385 8809 	msr	PSP, r5
   14234:	2100      	movs	r1, #0
   14236:	b663      	cpsie	if
   14238:	f381 8811 	msr	BASEPRI, r1
   1423c:	f3bf 8f6f 	isb	sy
   14240:	2200      	movs	r2, #0
   14242:	2300      	movs	r3, #0
   14244:	f00e ffeb 	bl	2321e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14248:	20002ed4 	.word	0x20002ed4

0001424c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1424c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1424e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14250:	4a0b      	ldr	r2, [pc, #44]	; (14280 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14252:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   14254:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14256:	bf1e      	ittt	ne
	movne	r1, #0
   14258:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1425a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   1425c:	f011 fc96 	blne	25b8c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14260:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14262:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14266:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1426a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1426e:	4905      	ldr	r1, [pc, #20]	; (14284 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14270:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14272:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14274:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14276:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1427a:	4903      	ldr	r1, [pc, #12]	; (14288 <_isr_wrapper+0x3c>)
	bx r1
   1427c:	4708      	bx	r1
   1427e:	0000      	.short	0x0000
	ldr r2, =_kernel
   14280:	20002ed4 	.word	0x20002ed4
	ldr r1, =_sw_isr_table
   14284:	00026080 	.word	0x00026080
	ldr r1, =z_arm_int_exit
   14288:	0001428d 	.word	0x0001428d

0001428c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1428c:	4b04      	ldr	r3, [pc, #16]	; (142a0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1428e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14290:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   14292:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14294:	d003      	beq.n	1429e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14296:	4903      	ldr	r1, [pc, #12]	; (142a4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1429c:	600a      	str	r2, [r1, #0]

0001429e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1429e:	4770      	bx	lr
	ldr r3, =_kernel
   142a0:	20002ed4 	.word	0x20002ed4
	ldr r1, =_SCS_ICSR
   142a4:	e000ed04 	.word	0xe000ed04

000142a8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142ac:	b086      	sub	sp, #24
   142ae:	4606      	mov	r6, r0
   142b0:	af00      	add	r7, sp, #0
   142b2:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   142b4:	4b47      	ldr	r3, [pc, #284]	; (143d4 <bus_fault.constprop.0+0x12c>)
   142b6:	617b      	str	r3, [r7, #20]
   142b8:	2402      	movs	r4, #2
   142ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   142be:	4846      	ldr	r0, [pc, #280]	; (143d8 <bus_fault.constprop.0+0x130>)
   142c0:	613c      	str	r4, [r7, #16]
   142c2:	f107 0210 	add.w	r2, r7, #16
   142c6:	f00f fd78 	bl	23dba <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   142ca:	4b44      	ldr	r3, [pc, #272]	; (143dc <bus_fault.constprop.0+0x134>)
   142cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142ce:	04d9      	lsls	r1, r3, #19
   142d0:	d56d      	bpl.n	143ae <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   142d2:	4b43      	ldr	r3, [pc, #268]	; (143e0 <bus_fault.constprop.0+0x138>)
   142d4:	4840      	ldr	r0, [pc, #256]	; (143d8 <bus_fault.constprop.0+0x130>)
   142d6:	e9c7 4304 	strd	r4, r3, [r7, #16]
   142da:	f107 0210 	add.w	r2, r7, #16
   142de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   142e2:	f00f fd6a 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   142e6:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   142e8:	4b3c      	ldr	r3, [pc, #240]	; (143dc <bus_fault.constprop.0+0x134>)
   142ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   142ec:	051a      	lsls	r2, r3, #20
   142ee:	d50b      	bpl.n	14308 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   142f0:	4b3c      	ldr	r3, [pc, #240]	; (143e4 <bus_fault.constprop.0+0x13c>)
   142f2:	617b      	str	r3, [r7, #20]
   142f4:	2302      	movs	r3, #2
   142f6:	4838      	ldr	r0, [pc, #224]	; (143d8 <bus_fault.constprop.0+0x130>)
   142f8:	613b      	str	r3, [r7, #16]
   142fa:	f107 0210 	add.w	r2, r7, #16
   142fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14302:	f00f fd5a 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   14306:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14308:	4c34      	ldr	r4, [pc, #208]	; (143dc <bus_fault.constprop.0+0x134>)
   1430a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1430c:	059b      	lsls	r3, r3, #22
   1430e:	d523      	bpl.n	14358 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   14310:	46e8      	mov	r8, sp
   14312:	4b35      	ldr	r3, [pc, #212]	; (143e8 <bus_fault.constprop.0+0x140>)
   14314:	617b      	str	r3, [r7, #20]
   14316:	2302      	movs	r3, #2
   14318:	482f      	ldr	r0, [pc, #188]	; (143d8 <bus_fault.constprop.0+0x130>)
   1431a:	613b      	str	r3, [r7, #16]
   1431c:	f107 0210 	add.w	r2, r7, #16
   14320:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14324:	f00f fd49 	bl	23dba <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14328:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1432a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1432c:	0410      	lsls	r0, r2, #16
   1432e:	d512      	bpl.n	14356 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14330:	b088      	sub	sp, #32
   14332:	466a      	mov	r2, sp
   14334:	492d      	ldr	r1, [pc, #180]	; (143ec <bus_fault.constprop.0+0x144>)
   14336:	4828      	ldr	r0, [pc, #160]	; (143d8 <bus_fault.constprop.0+0x130>)
   14338:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1433c:	2303      	movs	r3, #3
   1433e:	f842 3f10 	str.w	r3, [r2, #16]!
   14342:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14346:	f00f fd38 	bl	23dba <z_log_msg_static_create.constprop.0>
   1434a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1434c:	b11e      	cbz	r6, 14356 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1434e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14354:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   14356:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14358:	4b20      	ldr	r3, [pc, #128]	; (143dc <bus_fault.constprop.0+0x134>)
   1435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1435c:	0559      	lsls	r1, r3, #21
   1435e:	d50b      	bpl.n	14378 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   14360:	4b23      	ldr	r3, [pc, #140]	; (143f0 <bus_fault.constprop.0+0x148>)
   14362:	617b      	str	r3, [r7, #20]
   14364:	2302      	movs	r3, #2
   14366:	481c      	ldr	r0, [pc, #112]	; (143d8 <bus_fault.constprop.0+0x130>)
   14368:	613b      	str	r3, [r7, #16]
   1436a:	f107 0210 	add.w	r2, r7, #16
   1436e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14372:	f00f fd22 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   14376:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14378:	4b18      	ldr	r3, [pc, #96]	; (143dc <bus_fault.constprop.0+0x134>)
   1437a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1437c:	05d2      	lsls	r2, r2, #23
   1437e:	d518      	bpl.n	143b2 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   14380:	4b1c      	ldr	r3, [pc, #112]	; (143f4 <bus_fault.constprop.0+0x14c>)
   14382:	617b      	str	r3, [r7, #20]
   14384:	2302      	movs	r3, #2
   14386:	4814      	ldr	r0, [pc, #80]	; (143d8 <bus_fault.constprop.0+0x130>)
   14388:	613b      	str	r3, [r7, #16]
   1438a:	f107 0210 	add.w	r2, r7, #16
   1438e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14392:	f00f fd12 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   14396:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14398:	4a10      	ldr	r2, [pc, #64]	; (143dc <bus_fault.constprop.0+0x134>)
   1439a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1439c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   143a0:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   143a2:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   143a4:	2300      	movs	r3, #0
   143a6:	702b      	strb	r3, [r5, #0]
}
   143a8:	46bd      	mov	sp, r7
   143aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   143ae:	2016      	movs	r0, #22
   143b0:	e79a      	b.n	142e8 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   143b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   143b4:	049b      	lsls	r3, r3, #18
   143b6:	d5ef      	bpl.n	14398 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   143b8:	4b0f      	ldr	r3, [pc, #60]	; (143f8 <bus_fault.constprop.0+0x150>)
   143ba:	617b      	str	r3, [r7, #20]
   143bc:	2302      	movs	r3, #2
   143be:	4806      	ldr	r0, [pc, #24]	; (143d8 <bus_fault.constprop.0+0x130>)
   143c0:	613b      	str	r3, [r7, #16]
   143c2:	f107 0210 	add.w	r2, r7, #16
   143c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   143ca:	f00f fcf6 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   143ce:	201c      	movs	r0, #28
   143d0:	e7e2      	b.n	14398 <bus_fault.constprop.0+0xf0>
   143d2:	bf00      	nop
   143d4:	00027971 	.word	0x00027971
   143d8:	00026334 	.word	0x00026334
   143dc:	e000ed00 	.word	0xe000ed00
   143e0:	00027987 	.word	0x00027987
   143e4:	00027998 	.word	0x00027998
   143e8:	000279ab 	.word	0x000279ab
   143ec:	000279c4 	.word	0x000279c4
   143f0:	000279d9 	.word	0x000279d9
   143f4:	000279f4 	.word	0x000279f4
   143f8:	00027a0c 	.word	0x00027a0c

000143fc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   143fc:	b510      	push	{r4, lr}
   143fe:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14400:	4b36      	ldr	r3, [pc, #216]	; (144dc <usage_fault.constprop.0+0xe0>)
   14402:	4837      	ldr	r0, [pc, #220]	; (144e0 <usage_fault.constprop.0+0xe4>)
   14404:	9305      	str	r3, [sp, #20]
   14406:	aa04      	add	r2, sp, #16
   14408:	2402      	movs	r4, #2
   1440a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1440e:	9404      	str	r4, [sp, #16]
   14410:	f00f fcd3 	bl	23dba <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14414:	4b33      	ldr	r3, [pc, #204]	; (144e4 <usage_fault.constprop.0+0xe8>)
   14416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14418:	019a      	lsls	r2, r3, #6
   1441a:	d55d      	bpl.n	144d8 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   1441c:	4b32      	ldr	r3, [pc, #200]	; (144e8 <usage_fault.constprop.0+0xec>)
   1441e:	4830      	ldr	r0, [pc, #192]	; (144e0 <usage_fault.constprop.0+0xe4>)
   14420:	aa04      	add	r2, sp, #16
   14422:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14426:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1442a:	f00f fcc6 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   1442e:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14430:	4b2c      	ldr	r3, [pc, #176]	; (144e4 <usage_fault.constprop.0+0xe8>)
   14432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14434:	01db      	lsls	r3, r3, #7
   14436:	d50a      	bpl.n	1444e <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   14438:	4b2c      	ldr	r3, [pc, #176]	; (144ec <usage_fault.constprop.0+0xf0>)
   1443a:	4829      	ldr	r0, [pc, #164]	; (144e0 <usage_fault.constprop.0+0xe4>)
   1443c:	9305      	str	r3, [sp, #20]
   1443e:	aa04      	add	r2, sp, #16
   14440:	2302      	movs	r3, #2
   14442:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14446:	9304      	str	r3, [sp, #16]
   14448:	f00f fcb7 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   1444c:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1444e:	4b25      	ldr	r3, [pc, #148]	; (144e4 <usage_fault.constprop.0+0xe8>)
   14450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14452:	031c      	lsls	r4, r3, #12
   14454:	d50a      	bpl.n	1446c <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   14456:	4b26      	ldr	r3, [pc, #152]	; (144f0 <usage_fault.constprop.0+0xf4>)
   14458:	4821      	ldr	r0, [pc, #132]	; (144e0 <usage_fault.constprop.0+0xe4>)
   1445a:	9305      	str	r3, [sp, #20]
   1445c:	aa04      	add	r2, sp, #16
   1445e:	2302      	movs	r3, #2
   14460:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14464:	9304      	str	r3, [sp, #16]
   14466:	f00f fca8 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   1446a:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1446c:	4b1d      	ldr	r3, [pc, #116]	; (144e4 <usage_fault.constprop.0+0xe8>)
   1446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14470:	0359      	lsls	r1, r3, #13
   14472:	d50a      	bpl.n	1448a <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14474:	4b1f      	ldr	r3, [pc, #124]	; (144f4 <usage_fault.constprop.0+0xf8>)
   14476:	481a      	ldr	r0, [pc, #104]	; (144e0 <usage_fault.constprop.0+0xe4>)
   14478:	9305      	str	r3, [sp, #20]
   1447a:	aa04      	add	r2, sp, #16
   1447c:	2302      	movs	r3, #2
   1447e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14482:	9304      	str	r3, [sp, #16]
   14484:	f00f fc99 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   14488:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1448a:	4b16      	ldr	r3, [pc, #88]	; (144e4 <usage_fault.constprop.0+0xe8>)
   1448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1448e:	039a      	lsls	r2, r3, #14
   14490:	d50a      	bpl.n	144a8 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14492:	4b19      	ldr	r3, [pc, #100]	; (144f8 <usage_fault.constprop.0+0xfc>)
   14494:	4812      	ldr	r0, [pc, #72]	; (144e0 <usage_fault.constprop.0+0xe4>)
   14496:	9305      	str	r3, [sp, #20]
   14498:	aa04      	add	r2, sp, #16
   1449a:	2302      	movs	r3, #2
   1449c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144a0:	9304      	str	r3, [sp, #16]
   144a2:	f00f fc8a 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   144a6:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   144a8:	4b0e      	ldr	r3, [pc, #56]	; (144e4 <usage_fault.constprop.0+0xe8>)
   144aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   144ac:	03db      	lsls	r3, r3, #15
   144ae:	d50a      	bpl.n	144c6 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   144b0:	4b12      	ldr	r3, [pc, #72]	; (144fc <usage_fault.constprop.0+0x100>)
   144b2:	480b      	ldr	r0, [pc, #44]	; (144e0 <usage_fault.constprop.0+0xe4>)
   144b4:	9305      	str	r3, [sp, #20]
   144b6:	aa04      	add	r2, sp, #16
   144b8:	2302      	movs	r3, #2
   144ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144be:	9304      	str	r3, [sp, #16]
   144c0:	f00f fc7b 	bl	23dba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   144c4:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   144c6:	4a07      	ldr	r2, [pc, #28]	; (144e4 <usage_fault.constprop.0+0xe8>)
   144c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   144ca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   144ce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   144d2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   144d4:	b006      	add	sp, #24
   144d6:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   144d8:	201d      	movs	r0, #29
   144da:	e7a9      	b.n	14430 <usage_fault.constprop.0+0x34>
   144dc:	00027a3b 	.word	0x00027a3b
   144e0:	00026334 	.word	0x00026334
   144e4:	e000ed00 	.word	0xe000ed00
   144e8:	00027a53 	.word	0x00027a53
   144ec:	00027a66 	.word	0x00027a66
   144f0:	00027a80 	.word	0x00027a80
   144f4:	00027a9e 	.word	0x00027a9e
   144f8:	00027ac3 	.word	0x00027ac3
   144fc:	00027add 	.word	0x00027add

00014500 <mem_manage_fault>:
{
   14500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14504:	b086      	sub	sp, #24
   14506:	4681      	mov	r9, r0
   14508:	af00      	add	r7, sp, #0
   1450a:	468a      	mov	sl, r1
   1450c:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1450e:	4b5a      	ldr	r3, [pc, #360]	; (14678 <mem_manage_fault+0x178>)
   14510:	485a      	ldr	r0, [pc, #360]	; (1467c <mem_manage_fault+0x17c>)
   14512:	617b      	str	r3, [r7, #20]
   14514:	2402      	movs	r4, #2
   14516:	613c      	str	r4, [r7, #16]
   14518:	f107 0210 	add.w	r2, r7, #16
   1451c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14520:	f00f fc4b 	bl	23dba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14524:	4b56      	ldr	r3, [pc, #344]	; (14680 <mem_manage_fault+0x180>)
   14526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14528:	06d8      	lsls	r0, r3, #27
   1452a:	d545      	bpl.n	145b8 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1452c:	4b55      	ldr	r3, [pc, #340]	; (14684 <mem_manage_fault+0x184>)
   1452e:	4853      	ldr	r0, [pc, #332]	; (1467c <mem_manage_fault+0x17c>)
   14530:	e9c7 4304 	strd	r4, r3, [r7, #16]
   14534:	f107 0210 	add.w	r2, r7, #16
   14538:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   1453c:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   1453e:	f00f fc3c 	bl	23dba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14542:	4b4f      	ldr	r3, [pc, #316]	; (14680 <mem_manage_fault+0x180>)
   14544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14546:	0719      	lsls	r1, r3, #28
   14548:	d50b      	bpl.n	14562 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   1454a:	4b4f      	ldr	r3, [pc, #316]	; (14688 <mem_manage_fault+0x188>)
   1454c:	617b      	str	r3, [r7, #20]
   1454e:	2302      	movs	r3, #2
   14550:	484a      	ldr	r0, [pc, #296]	; (1467c <mem_manage_fault+0x17c>)
   14552:	613b      	str	r3, [r7, #16]
   14554:	f107 0210 	add.w	r2, r7, #16
   14558:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1455c:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   1455e:	f00f fc2c 	bl	23dba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14562:	4d47      	ldr	r5, [pc, #284]	; (14680 <mem_manage_fault+0x180>)
   14564:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14566:	079a      	lsls	r2, r3, #30
   14568:	d528      	bpl.n	145bc <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   1456a:	466c      	mov	r4, sp
   1456c:	4b47      	ldr	r3, [pc, #284]	; (1468c <mem_manage_fault+0x18c>)
   1456e:	617b      	str	r3, [r7, #20]
   14570:	2302      	movs	r3, #2
   14572:	613b      	str	r3, [r7, #16]
   14574:	4841      	ldr	r0, [pc, #260]	; (1467c <mem_manage_fault+0x17c>)
   14576:	f107 0210 	add.w	r2, r7, #16
   1457a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1457e:	f00f fc1c 	bl	23dba <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   14582:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14584:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14586:	061b      	lsls	r3, r3, #24
   14588:	d560      	bpl.n	1464c <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1458a:	b088      	sub	sp, #32
   1458c:	466a      	mov	r2, sp
   1458e:	4b40      	ldr	r3, [pc, #256]	; (14690 <mem_manage_fault+0x190>)
   14590:	483a      	ldr	r0, [pc, #232]	; (1467c <mem_manage_fault+0x17c>)
   14592:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14596:	2303      	movs	r3, #3
   14598:	f842 3f10 	str.w	r3, [r2, #16]!
   1459c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   145a0:	f00f fc0b 	bl	23dba <z_log_msg_static_create.constprop.0>
   145a4:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   145a6:	f1ba 0f00 	cmp.w	sl, #0
   145aa:	d003      	beq.n	145b4 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   145ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   145ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   145b2:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   145b4:	2413      	movs	r4, #19
   145b6:	e003      	b.n	145c0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   145b8:	2410      	movs	r4, #16
   145ba:	e7c2      	b.n	14542 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   145bc:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   145c0:	4b2f      	ldr	r3, [pc, #188]	; (14680 <mem_manage_fault+0x180>)
   145c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145c4:	07d8      	lsls	r0, r3, #31
   145c6:	d50b      	bpl.n	145e0 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   145c8:	4b32      	ldr	r3, [pc, #200]	; (14694 <mem_manage_fault+0x194>)
   145ca:	617b      	str	r3, [r7, #20]
   145cc:	2302      	movs	r3, #2
   145ce:	482b      	ldr	r0, [pc, #172]	; (1467c <mem_manage_fault+0x17c>)
   145d0:	613b      	str	r3, [r7, #16]
   145d2:	f107 0210 	add.w	r2, r7, #16
   145d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   145da:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   145dc:	f00f fbed 	bl	23dba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   145e0:	4b27      	ldr	r3, [pc, #156]	; (14680 <mem_manage_fault+0x180>)
   145e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145e4:	0699      	lsls	r1, r3, #26
   145e6:	d50b      	bpl.n	14600 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   145e8:	4b2b      	ldr	r3, [pc, #172]	; (14698 <mem_manage_fault+0x198>)
   145ea:	617b      	str	r3, [r7, #20]
   145ec:	2302      	movs	r3, #2
   145ee:	4823      	ldr	r0, [pc, #140]	; (1467c <mem_manage_fault+0x17c>)
   145f0:	613b      	str	r3, [r7, #16]
   145f2:	f107 0210 	add.w	r2, r7, #16
   145f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   145fa:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   145fc:	f00f fbdd 	bl	23dba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14600:	4d1f      	ldr	r5, [pc, #124]	; (14680 <mem_manage_fault+0x180>)
   14602:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14604:	06da      	lsls	r2, r3, #27
   14606:	d402      	bmi.n	1460e <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14608:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1460a:	079b      	lsls	r3, r3, #30
   1460c:	d50a      	bpl.n	14624 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1460e:	686b      	ldr	r3, [r5, #4]
   14610:	0518      	lsls	r0, r3, #20
   14612:	d507      	bpl.n	14624 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14614:	4649      	mov	r1, r9
   14616:	4630      	mov	r0, r6
   14618:	f7ff fdec 	bl	141f4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1461c:	b1c8      	cbz	r0, 14652 <mem_manage_fault+0x152>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1461e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14622:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14624:	4b16      	ldr	r3, [pc, #88]	; (14680 <mem_manage_fault+0x180>)
   14626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14628:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   1462a:	bf42      	ittt	mi
   1462c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1462e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   14632:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14636:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1463a:	629a      	str	r2, [r3, #40]	; 0x28
}
   1463c:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   1463e:	2300      	movs	r3, #0
}
   14640:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   14642:	f888 3000 	strb.w	r3, [r8]
}
   14646:	46bd      	mov	sp, r7
   14648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   1464c:	f06f 0615 	mvn.w	r6, #21
   14650:	e7b0      	b.n	145b4 <mem_manage_fault+0xb4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   14652:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14654:	06d9      	lsls	r1, r3, #27
   14656:	d5e5      	bpl.n	14624 <mem_manage_fault+0x124>
   14658:	4910      	ldr	r1, [pc, #64]	; (1469c <mem_manage_fault+0x19c>)
   1465a:	4a11      	ldr	r2, [pc, #68]	; (146a0 <mem_manage_fault+0x1a0>)
   1465c:	4811      	ldr	r0, [pc, #68]	; (146a4 <mem_manage_fault+0x1a4>)
   1465e:	f240 135b 	movw	r3, #347	; 0x15b
   14662:	f00e ffca 	bl	235fa <assert_print>
   14666:	4810      	ldr	r0, [pc, #64]	; (146a8 <mem_manage_fault+0x1a8>)
   14668:	f00e ffc7 	bl	235fa <assert_print>
   1466c:	480c      	ldr	r0, [pc, #48]	; (146a0 <mem_manage_fault+0x1a0>)
   1466e:	f240 115b 	movw	r1, #347	; 0x15b
   14672:	f00e ffbb 	bl	235ec <assert_post_action>
   14676:	bf00      	nop
   14678:	00027b08 	.word	0x00027b08
   1467c:	00026334 	.word	0x00026334
   14680:	e000ed00 	.word	0xe000ed00
   14684:	00027b1e 	.word	0x00027b1e
   14688:	00027998 	.word	0x00027998
   1468c:	00027b51 	.word	0x00027b51
   14690:	00027b69 	.word	0x00027b69
   14694:	00027b7f 	.word	0x00027b7f
   14698:	00027a0c 	.word	0x00027a0c
   1469c:	00027bd8 	.word	0x00027bd8
   146a0:	00027b9e 	.word	0x00027b9e
   146a4:	00026f1a 	.word	0x00026f1a
   146a8:	00027c22 	.word	0x00027c22

000146ac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   146ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146b0:	4b8a      	ldr	r3, [pc, #552]	; (148dc <z_arm_fault+0x230>)
{
   146b2:	b08b      	sub	sp, #44	; 0x2c
   146b4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   146b6:	6858      	ldr	r0, [r3, #4]
{
   146b8:	af00      	add	r7, sp, #0
   146ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
   146be:	2600      	movs	r6, #0
   146c0:	f386 8811 	msr	BASEPRI, r6
   146c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   146c8:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   146cc:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   146d0:	d10e      	bne.n	146f0 <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   146d2:	f002 040c 	and.w	r4, r2, #12
   146d6:	2c08      	cmp	r4, #8
   146d8:	d119      	bne.n	1470e <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   146da:	4b81      	ldr	r3, [pc, #516]	; (148e0 <z_arm_fault+0x234>)
   146dc:	61fb      	str	r3, [r7, #28]
   146de:	2302      	movs	r3, #2
   146e0:	4880      	ldr	r0, [pc, #512]	; (148e4 <z_arm_fault+0x238>)
   146e2:	61bb      	str	r3, [r7, #24]
   146e4:	f107 0218 	add.w	r2, r7, #24
   146e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   146ec:	f00f fb65 	bl	23dba <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   146f0:	497d      	ldr	r1, [pc, #500]	; (148e8 <z_arm_fault+0x23c>)
   146f2:	4a7e      	ldr	r2, [pc, #504]	; (148ec <z_arm_fault+0x240>)
   146f4:	487e      	ldr	r0, [pc, #504]	; (148f0 <z_arm_fault+0x244>)
   146f6:	f240 433e 	movw	r3, #1086	; 0x43e
   146fa:	f00e ff7e 	bl	235fa <assert_print>
   146fe:	487d      	ldr	r0, [pc, #500]	; (148f4 <z_arm_fault+0x248>)
   14700:	f00e ff7b 	bl	235fa <assert_print>
   14704:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
   14708:	4878      	ldr	r0, [pc, #480]	; (148ec <z_arm_fault+0x240>)
   1470a:	f00e ff6f 	bl	235ec <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1470e:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   14710:	bf4c      	ite	mi
   14712:	460d      	movmi	r5, r1
			*nested_exc = true;
   14714:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   14716:	2d00      	cmp	r5, #0
   14718:	d0ea      	beq.n	146f0 <z_arm_fault+0x44>
	*recoverable = false;
   1471a:	2200      	movs	r2, #0
   1471c:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
   1471e:	1eda      	subs	r2, r3, #3
   14720:	2a09      	cmp	r2, #9
   14722:	f200 80bb 	bhi.w	1489c <z_arm_fault+0x1f0>
   14726:	e8df f002 	tbb	[pc, r2]
   1472a:	ae05      	.short	0xae05
   1472c:	b9b991b1 	.word	0xb9b991b1
   14730:	b4b9b9b9 	.word	0xb4b9b9b9
	PR_FAULT_INFO("***** HARD FAULT *****");
   14734:	46e9      	mov	r9, sp
   14736:	4b70      	ldr	r3, [pc, #448]	; (148f8 <z_arm_fault+0x24c>)
   14738:	61fb      	str	r3, [r7, #28]
   1473a:	f04f 0802 	mov.w	r8, #2
   1473e:	f107 0218 	add.w	r2, r7, #24
   14742:	4868      	ldr	r0, [pc, #416]	; (148e4 <z_arm_fault+0x238>)
   14744:	f8c7 8018 	str.w	r8, [r7, #24]
   14748:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1474c:	f00f fb35 	bl	23dba <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   14750:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14752:	4c62      	ldr	r4, [pc, #392]	; (148dc <z_arm_fault+0x230>)
	*recoverable = false;
   14754:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14756:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14758:	079a      	lsls	r2, r3, #30
   1475a:	d50b      	bpl.n	14774 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   1475c:	4b67      	ldr	r3, [pc, #412]	; (148fc <z_arm_fault+0x250>)
		PR_EXC("  Debug event");
   1475e:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   14762:	4860      	ldr	r0, [pc, #384]	; (148e4 <z_arm_fault+0x238>)
   14764:	f107 0218 	add.w	r2, r7, #24
   14768:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1476c:	f00f fb25 	bl	23dba <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14770:	2400      	movs	r4, #0
   14772:	e038      	b.n	147e6 <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14776:	2b00      	cmp	r3, #0
   14778:	da01      	bge.n	1477e <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
   1477a:	4b61      	ldr	r3, [pc, #388]	; (14900 <z_arm_fault+0x254>)
   1477c:	e7ef      	b.n	1475e <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1477e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14780:	005b      	lsls	r3, r3, #1
   14782:	d573      	bpl.n	1486c <z_arm_fault+0x1c0>
		PR_EXC("  Fault escalation (see below)");
   14784:	4b5f      	ldr	r3, [pc, #380]	; (14904 <z_arm_fault+0x258>)
   14786:	4857      	ldr	r0, [pc, #348]	; (148e4 <z_arm_fault+0x238>)
   14788:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1478c:	f107 0218 	add.w	r2, r7, #24
   14790:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14794:	f00f fb11 	bl	23dba <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   14798:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1479a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   147a0:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   147a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   147a6:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   147aa:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   147ac:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   147b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   147b4:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   147b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   147ba:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   147be:	f64d 7302 	movw	r3, #57090	; 0xdf02
   147c2:	429a      	cmp	r2, r3
   147c4:	d12b      	bne.n	1481e <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   147c6:	b088      	sub	sp, #32
   147c8:	682b      	ldr	r3, [r5, #0]
   147ca:	466a      	mov	r2, sp
   147cc:	494e      	ldr	r1, [pc, #312]	; (14908 <z_arm_fault+0x25c>)
   147ce:	4845      	ldr	r0, [pc, #276]	; (148e4 <z_arm_fault+0x238>)
   147d0:	e9c2 1305 	strd	r1, r3, [r2, #20]
   147d4:	2303      	movs	r3, #3
   147d6:	f842 3f10 	str.w	r3, [r2, #16]!
   147da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   147de:	f00f faec 	bl	23dba <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   147e2:	682c      	ldr	r4, [r5, #0]
   147e4:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   147e6:	79fb      	ldrb	r3, [r7, #7]
   147e8:	b9ab      	cbnz	r3, 14816 <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   147ea:	2220      	movs	r2, #32
   147ec:	4629      	mov	r1, r5
   147ee:	f107 0008 	add.w	r0, r7, #8
   147f2:	f00f fb0f 	bl	23e14 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   147f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   147f8:	2e00      	cmp	r6, #0
   147fa:	d06a      	beq.n	148d2 <z_arm_fault+0x226>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   147fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14800:	b922      	cbnz	r2, 1480c <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14802:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14806:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1480a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   1480c:	f107 0108 	add.w	r1, r7, #8
   14810:	4620      	mov	r0, r4
   14812:	f7ff fb85 	bl	13f20 <z_arm_fatal_error>
}
   14816:	372c      	adds	r7, #44	; 0x2c
   14818:	46bd      	mov	sp, r7
   1481a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1481e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14820:	b2db      	uxtb	r3, r3
   14822:	b133      	cbz	r3, 14832 <z_arm_fault+0x186>
			reason = mem_manage_fault(esf, 1, recoverable);
   14824:	1dfa      	adds	r2, r7, #7
   14826:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14828:	4628      	mov	r0, r5
   1482a:	f7ff fe69 	bl	14500 <mem_manage_fault>
   1482e:	4604      	mov	r4, r0
		break;
   14830:	e7d9      	b.n	147e6 <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   14832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14834:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   14838:	d004      	beq.n	14844 <z_arm_fault+0x198>
			reason = bus_fault(esf, 1, recoverable);
   1483a:	1df9      	adds	r1, r7, #7
   1483c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1483e:	f7ff fd33 	bl	142a8 <bus_fault.constprop.0>
   14842:	e7f4      	b.n	1482e <z_arm_fault+0x182>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   14844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1484a:	d302      	bcc.n	14852 <z_arm_fault+0x1a6>
		reason = usage_fault(esf);
   1484c:	f7ff fdd6 	bl	143fc <usage_fault.constprop.0>
   14850:	e7ed      	b.n	1482e <z_arm_fault+0x182>
			__ASSERT(0,
   14852:	492e      	ldr	r1, [pc, #184]	; (1490c <z_arm_fault+0x260>)
   14854:	4a25      	ldr	r2, [pc, #148]	; (148ec <z_arm_fault+0x240>)
   14856:	4826      	ldr	r0, [pc, #152]	; (148f0 <z_arm_fault+0x244>)
   14858:	f44f 7344 	mov.w	r3, #784	; 0x310
   1485c:	f00e fecd 	bl	235fa <assert_print>
   14860:	482b      	ldr	r0, [pc, #172]	; (14910 <z_arm_fault+0x264>)
   14862:	f00e feca 	bl	235fa <assert_print>
   14866:	f44f 7144 	mov.w	r1, #784	; 0x310
   1486a:	e74d      	b.n	14708 <z_arm_fault+0x5c>
		__ASSERT(0,
   1486c:	4927      	ldr	r1, [pc, #156]	; (1490c <z_arm_fault+0x260>)
   1486e:	4a1f      	ldr	r2, [pc, #124]	; (148ec <z_arm_fault+0x240>)
   14870:	481f      	ldr	r0, [pc, #124]	; (148f0 <z_arm_fault+0x244>)
   14872:	f44f 7345 	mov.w	r3, #788	; 0x314
   14876:	f00e fec0 	bl	235fa <assert_print>
   1487a:	4826      	ldr	r0, [pc, #152]	; (14914 <z_arm_fault+0x268>)
   1487c:	f00e febd 	bl	235fa <assert_print>
   14880:	f44f 7145 	mov.w	r1, #788	; 0x314
   14884:	e740      	b.n	14708 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
   14886:	1dfa      	adds	r2, r7, #7
   14888:	2100      	movs	r1, #0
   1488a:	e7cd      	b.n	14828 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   1488c:	1df9      	adds	r1, r7, #7
   1488e:	2000      	movs	r0, #0
   14890:	e7d5      	b.n	1483e <z_arm_fault+0x192>
	PR_FAULT_INFO(
   14892:	4b21      	ldr	r3, [pc, #132]	; (14918 <z_arm_fault+0x26c>)
   14894:	61fb      	str	r3, [r7, #28]
   14896:	2302      	movs	r3, #2
   14898:	61bb      	str	r3, [r7, #24]
   1489a:	e762      	b.n	14762 <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
   1489c:	4a1f      	ldr	r2, [pc, #124]	; (1491c <z_arm_fault+0x270>)
   1489e:	4920      	ldr	r1, [pc, #128]	; (14920 <z_arm_fault+0x274>)
   148a0:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   148a4:	466c      	mov	r4, sp
   148a6:	b08a      	sub	sp, #40	; 0x28
   148a8:	bf18      	it	ne
   148aa:	4611      	movne	r1, r2
   148ac:	466a      	mov	r2, sp
   148ae:	3b10      	subs	r3, #16
   148b0:	61d3      	str	r3, [r2, #28]
   148b2:	481c      	ldr	r0, [pc, #112]	; (14924 <z_arm_fault+0x278>)
   148b4:	f44f 7300 	mov.w	r3, #512	; 0x200
   148b8:	8413      	strh	r3, [r2, #32]
   148ba:	4b1b      	ldr	r3, [pc, #108]	; (14928 <z_arm_fault+0x27c>)
   148bc:	e9c2 0105 	strd	r0, r1, [r2, #20]
   148c0:	f842 3f10 	str.w	r3, [r2, #16]!
   148c4:	4807      	ldr	r0, [pc, #28]	; (148e4 <z_arm_fault+0x238>)
   148c6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   148ca:	f00f fa76 	bl	23dba <z_log_msg_static_create.constprop.0>
   148ce:	46a5      	mov	sp, r4
}
   148d0:	e74e      	b.n	14770 <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   148d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   148d6:	f023 0301 	bic.w	r3, r3, #1
   148da:	e796      	b.n	1480a <z_arm_fault+0x15e>
   148dc:	e000ed00 	.word	0xe000ed00
   148e0:	00027c73 	.word	0x00027c73
   148e4:	00026334 	.word	0x00026334
   148e8:	00027c9e 	.word	0x00027c9e
   148ec:	00027b9e 	.word	0x00027b9e
   148f0:	00026f1a 	.word	0x00026f1a
   148f4:	00027cb1 	.word	0x00027cb1
   148f8:	00027cef 	.word	0x00027cef
   148fc:	00027d06 	.word	0x00027d06
   14900:	00027d27 	.word	0x00027d27
   14904:	00027d35 	.word	0x00027d35
   14908:	00027d54 	.word	0x00027d54
   1490c:	00029a2c 	.word	0x00029a2c
   14910:	00027d70 	.word	0x00027d70
   14914:	00027d94 	.word	0x00027d94
   14918:	00027dc4 	.word	0x00027dc4
   1491c:	00027c5a 	.word	0x00027c5a
   14920:	00027c45 	.word	0x00027c45
   14924:	00027de8 	.word	0x00027de8
   14928:	01000004 	.word	0x01000004

0001492c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1492c:	4a02      	ldr	r2, [pc, #8]	; (14938 <z_arm_fault_init+0xc>)
   1492e:	6953      	ldr	r3, [r2, #20]
   14930:	f043 0310 	orr.w	r3, r3, #16
   14934:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   14936:	4770      	bx	lr
   14938:	e000ed00 	.word	0xe000ed00

0001493c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1493c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14940:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14944:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14946:	4672      	mov	r2, lr
	bl z_arm_fault
   14948:	f7ff feb0 	bl	146ac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1494c:	bd01      	pop	{r0, pc}
   1494e:	bf00      	nop

00014950 <z_arm_interrupt_init>:
   14950:	4804      	ldr	r0, [pc, #16]	; (14964 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14952:	2300      	movs	r3, #0
   14954:	2140      	movs	r1, #64	; 0x40
   14956:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14958:	3301      	adds	r3, #1
   1495a:	2b27      	cmp	r3, #39	; 0x27
   1495c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14960:	d1f9      	bne.n	14956 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14962:	4770      	bx	lr
   14964:	e000e100 	.word	0xe000e100

00014968 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14968:	2000      	movs	r0, #0
    msr CONTROL, r0
   1496a:	f380 8814 	msr	CONTROL, r0
    isb
   1496e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14972:	f7fe f929 	bl	12bc8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   14976:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14978:	490d      	ldr	r1, [pc, #52]	; (149b0 <__start+0x48>)
    str r0, [r1]
   1497a:	6008      	str	r0, [r1, #0]
    dsb
   1497c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14980:	480c      	ldr	r0, [pc, #48]	; (149b4 <__start+0x4c>)
    msr msp, r0
   14982:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14986:	f000 f82b 	bl	149e0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1498a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1498c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14990:	4809      	ldr	r0, [pc, #36]	; (149b8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14992:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   14996:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14998:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1499c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   149a0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   149a2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   149a4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   149a8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   149ac:	f7ff fb96 	bl	140dc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   149b0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   149b4:	200077c0 	.word	0x200077c0
    ldr r0, =z_interrupt_stacks
   149b8:	20005e00 	.word	0x20005e00

000149bc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   149bc:	4907      	ldr	r1, [pc, #28]	; (149dc <z_arm_clear_arm_mpu_config+0x20>)
   149be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   149c2:	2300      	movs	r3, #0
	int num_regions =
   149c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   149c8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   149ca:	4293      	cmp	r3, r2
   149cc:	db00      	blt.n	149d0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   149ce:	4770      	bx	lr
  MPU->RNR = rnr;
   149d0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   149d4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   149d8:	3301      	adds	r3, #1
   149da:	e7f6      	b.n	149ca <z_arm_clear_arm_mpu_config+0xe>
   149dc:	e000ed00 	.word	0xe000ed00

000149e0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   149e0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   149e2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   149e4:	2300      	movs	r3, #0
   149e6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   149ea:	f7ff ffe7 	bl	149bc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   149ee:	4b14      	ldr	r3, [pc, #80]	; (14a40 <z_arm_init_arch_hw_at_boot+0x60>)
   149f0:	f04f 32ff 	mov.w	r2, #4294967295
   149f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   149f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   149fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14a08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14a0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14a10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14a14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14a18:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14a1c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14a20:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14a24:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14a28:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14a2c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14a30:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14a34:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14a36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14a3a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14a3e:	bd08      	pop	{r3, pc}
   14a40:	e000e100 	.word	0xe000e100

00014a44 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14a44:	4b08      	ldr	r3, [pc, #32]	; (14a68 <z_impl_k_thread_abort+0x24>)
   14a46:	689b      	ldr	r3, [r3, #8]
   14a48:	4283      	cmp	r3, r0
   14a4a:	d10b      	bne.n	14a64 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14a4c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14a50:	b143      	cbz	r3, 14a64 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14a52:	4b06      	ldr	r3, [pc, #24]	; (14a6c <z_impl_k_thread_abort+0x28>)
   14a54:	685a      	ldr	r2, [r3, #4]
   14a56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   14a5a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   14a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   14a5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   14a62:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   14a64:	f00c bf2a 	b.w	218bc <z_thread_abort>
   14a68:	20002ed4 	.word	0x20002ed4
   14a6c:	e000ed00 	.word	0xe000ed00

00014a70 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14a70:	4b02      	ldr	r3, [pc, #8]	; (14a7c <z_arm_configure_static_mpu_regions+0xc>)
   14a72:	4a03      	ldr	r2, [pc, #12]	; (14a80 <z_arm_configure_static_mpu_regions+0x10>)
   14a74:	4803      	ldr	r0, [pc, #12]	; (14a84 <z_arm_configure_static_mpu_regions+0x14>)
   14a76:	2101      	movs	r1, #1
   14a78:	f000 b892 	b.w	14ba0 <arm_core_mpu_configure_static_mpu_regions>
   14a7c:	20010000 	.word	0x20010000
   14a80:	20000000 	.word	0x20000000
   14a84:	0002654c 	.word	0x0002654c

00014a88 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14a88:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14a8a:	4b05      	ldr	r3, [pc, #20]	; (14aa0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14a8c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   14a8e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14a90:	4a04      	ldr	r2, [pc, #16]	; (14aa4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14a92:	2140      	movs	r1, #64	; 0x40
   14a94:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14a98:	4618      	mov	r0, r3
   14a9a:	2101      	movs	r1, #1
   14a9c:	f000 b8a6 	b.w	14bec <arm_core_mpu_configure_dynamic_mpu_regions>
   14aa0:	20002bc0 	.word	0x20002bc0
   14aa4:	150b0000 	.word	0x150b0000

00014aa8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14aac:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 14b64 <mpu_configure_regions+0xbc>
   14ab0:	469c      	mov	ip, r3
   14ab2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   14ab4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   14ab6:	2300      	movs	r3, #0
   14ab8:	428b      	cmp	r3, r1
   14aba:	da1a      	bge.n	14af2 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   14abc:	6844      	ldr	r4, [r0, #4]
   14abe:	2c00      	cmp	r4, #0
   14ac0:	d04d      	beq.n	14b5e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14ac2:	f1bc 0f00 	cmp.w	ip, #0
   14ac6:	d01d      	beq.n	14b04 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14ac8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14aca:	4234      	tst	r4, r6
   14acc:	d015      	beq.n	14afa <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14ace:	466c      	mov	r4, sp
   14ad0:	b088      	sub	sp, #32
   14ad2:	466a      	mov	r2, sp
   14ad4:	4924      	ldr	r1, [pc, #144]	; (14b68 <mpu_configure_regions+0xc0>)
   14ad6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14ada:	2303      	movs	r3, #3
   14adc:	f842 3f10 	str.w	r3, [r2, #16]!
   14ae0:	4822      	ldr	r0, [pc, #136]	; (14b6c <mpu_configure_regions+0xc4>)
   14ae2:	2300      	movs	r3, #0
   14ae4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ae8:	f7fe fbe4 	bl	132b4 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   14aec:	f06f 0515 	mvn.w	r5, #21
   14af0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14af2:	4628      	mov	r0, r5
   14af4:	46bd      	mov	sp, r7
   14af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   14afa:	2c1f      	cmp	r4, #31
   14afc:	d9e7      	bls.n	14ace <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   14afe:	6802      	ldr	r2, [r0, #0]
		&&
   14b00:	4216      	tst	r6, r2
   14b02:	d1e4      	bne.n	14ace <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14b04:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14b06:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14b08:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14b0a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   14b0e:	d914      	bls.n	14b3a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   14b10:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14b14:	d813      	bhi.n	14b3e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14b16:	3c01      	subs	r4, #1
   14b18:	fab4 f484 	clz	r4, r4
   14b1c:	f1c4 041f 	rsb	r4, r4, #31
   14b20:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14b22:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14b26:	ea46 0604 	orr.w	r6, r6, r4
   14b2a:	d90a      	bls.n	14b42 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14b2c:	466c      	mov	r4, sp
   14b2e:	b088      	sub	sp, #32
   14b30:	466a      	mov	r2, sp
   14b32:	4b0f      	ldr	r3, [pc, #60]	; (14b70 <mpu_configure_regions+0xc8>)
   14b34:	e9c2 3505 	strd	r3, r5, [r2, #20]
   14b38:	e7cf      	b.n	14ada <mpu_configure_regions+0x32>
		return REGION_32B;
   14b3a:	2408      	movs	r4, #8
   14b3c:	e7f1      	b.n	14b22 <mpu_configure_regions+0x7a>
		return REGION_4G;
   14b3e:	243e      	movs	r4, #62	; 0x3e
   14b40:	e7ef      	b.n	14b22 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b42:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   14b46:	432a      	orrs	r2, r5
   14b48:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14b4c:	f046 0601 	orr.w	r6, r6, #1
   14b50:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14b54:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   14b58:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14b5a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   14b5e:	3301      	adds	r3, #1
   14b60:	300c      	adds	r0, #12
   14b62:	e7a9      	b.n	14ab8 <mpu_configure_regions+0x10>
   14b64:	e000ed00 	.word	0xe000ed00
   14b68:	00027dff 	.word	0x00027dff
   14b6c:	0002631c 	.word	0x0002631c
   14b70:	00027e22 	.word	0x00027e22

00014b74 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14b74:	4b04      	ldr	r3, [pc, #16]	; (14b88 <arm_core_mpu_enable+0x14>)
   14b76:	2205      	movs	r2, #5
   14b78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   14b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b80:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14b84:	4770      	bx	lr
   14b86:	bf00      	nop
   14b88:	e000ed00 	.word	0xe000ed00

00014b8c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14b8c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14b90:	4b02      	ldr	r3, [pc, #8]	; (14b9c <arm_core_mpu_disable+0x10>)
   14b92:	2200      	movs	r2, #0
   14b94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   14b98:	4770      	bx	lr
   14b9a:	bf00      	nop
   14b9c:	e000ed00 	.word	0xe000ed00

00014ba0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14ba0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14ba2:	4d0d      	ldr	r5, [pc, #52]	; (14bd8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14ba4:	2301      	movs	r3, #1
   14ba6:	782a      	ldrb	r2, [r5, #0]
   14ba8:	460c      	mov	r4, r1
   14baa:	f7ff ff7d 	bl	14aa8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14bae:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14bb0:	3016      	adds	r0, #22
   14bb2:	d10f      	bne.n	14bd4 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14bb4:	4a09      	ldr	r2, [pc, #36]	; (14bdc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   14bb6:	490a      	ldr	r1, [pc, #40]	; (14be0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   14bb8:	480a      	ldr	r0, [pc, #40]	; (14be4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   14bba:	f44f 738d 	mov.w	r3, #282	; 0x11a
   14bbe:	f00e fd1c 	bl	235fa <assert_print>
   14bc2:	4809      	ldr	r0, [pc, #36]	; (14be8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   14bc4:	4621      	mov	r1, r4
   14bc6:	f00e fd18 	bl	235fa <assert_print>
   14bca:	4804      	ldr	r0, [pc, #16]	; (14bdc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   14bcc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   14bd0:	f00e fd0c 	bl	235ec <assert_post_action>
			regions_num);
	}
}
   14bd4:	bd38      	pop	{r3, r4, r5, pc}
   14bd6:	bf00      	nop
   14bd8:	20002f5f 	.word	0x20002f5f
   14bdc:	00027e48 	.word	0x00027e48
   14be0:	00029a2c 	.word	0x00029a2c
   14be4:	00026f1a 	.word	0x00026f1a
   14be8:	00027e7f 	.word	0x00027e7f

00014bec <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   14bec:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14bee:	4a12      	ldr	r2, [pc, #72]	; (14c38 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14bf0:	2300      	movs	r3, #0
   14bf2:	7812      	ldrb	r2, [r2, #0]
   14bf4:	460c      	mov	r4, r1
   14bf6:	f7ff ff57 	bl	14aa8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14bfa:	f110 0f16 	cmn.w	r0, #22
   14bfe:	d004      	beq.n	14c0a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
   14c00:	4b0e      	ldr	r3, [pc, #56]	; (14c3c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   14c02:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14c04:	2807      	cmp	r0, #7
   14c06:	dd10      	ble.n	14c2a <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14c08:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14c0a:	4a0d      	ldr	r2, [pc, #52]	; (14c40 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   14c0c:	490d      	ldr	r1, [pc, #52]	; (14c44 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   14c0e:	480e      	ldr	r0, [pc, #56]	; (14c48 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   14c10:	f240 1339 	movw	r3, #313	; 0x139
   14c14:	f00e fcf1 	bl	235fa <assert_print>
   14c18:	480c      	ldr	r0, [pc, #48]	; (14c4c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   14c1a:	4621      	mov	r1, r4
   14c1c:	f00e fced 	bl	235fa <assert_print>
   14c20:	4807      	ldr	r0, [pc, #28]	; (14c40 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   14c22:	f240 1139 	movw	r1, #313	; 0x139
   14c26:	f00e fce1 	bl	235ec <assert_post_action>
  MPU->RNR = rnr;
   14c2a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   14c2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   14c32:	3001      	adds	r0, #1
   14c34:	e7e6      	b.n	14c04 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
   14c36:	bf00      	nop
   14c38:	20002f5f 	.word	0x20002f5f
   14c3c:	e000ed00 	.word	0xe000ed00
   14c40:	00027e48 	.word	0x00027e48
   14c44:	00029a2c 	.word	0x00029a2c
   14c48:	00026f1a 	.word	0x00026f1a
   14c4c:	00027eab 	.word	0x00027eab

00014c50 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14c50:	4925      	ldr	r1, [pc, #148]	; (14ce8 <z_arm_mpu_init+0x98>)
{
   14c52:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14c54:	680c      	ldr	r4, [r1, #0]
   14c56:	2c08      	cmp	r4, #8
   14c58:	d910      	bls.n	14c7c <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   14c5a:	4a24      	ldr	r2, [pc, #144]	; (14cec <z_arm_mpu_init+0x9c>)
   14c5c:	4924      	ldr	r1, [pc, #144]	; (14cf0 <z_arm_mpu_init+0xa0>)
   14c5e:	4825      	ldr	r0, [pc, #148]	; (14cf4 <z_arm_mpu_init+0xa4>)
   14c60:	f240 1351 	movw	r3, #337	; 0x151
   14c64:	f00e fcc9 	bl	235fa <assert_print>
   14c68:	4621      	mov	r1, r4
   14c6a:	4823      	ldr	r0, [pc, #140]	; (14cf8 <z_arm_mpu_init+0xa8>)
   14c6c:	2208      	movs	r2, #8
   14c6e:	f00e fcc4 	bl	235fa <assert_print>
   14c72:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   14c76:	481d      	ldr	r0, [pc, #116]	; (14cec <z_arm_mpu_init+0x9c>)
   14c78:	f00e fcb8 	bl	235ec <assert_post_action>
	arm_core_mpu_disable();
   14c7c:	f7ff ff86 	bl	14b8c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14c80:	6848      	ldr	r0, [r1, #4]
   14c82:	491e      	ldr	r1, [pc, #120]	; (14cfc <z_arm_mpu_init+0xac>)
   14c84:	2200      	movs	r2, #0
   14c86:	4294      	cmp	r4, r2
   14c88:	f100 000c 	add.w	r0, r0, #12
   14c8c:	d116      	bne.n	14cbc <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
   14c8e:	4b1c      	ldr	r3, [pc, #112]	; (14d00 <z_arm_mpu_init+0xb0>)
   14c90:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   14c92:	f7ff ff6f 	bl	14b74 <arm_core_mpu_enable>
	__ASSERT(
   14c96:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   14c9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14c9e:	2b08      	cmp	r3, #8
   14ca0:	d01f      	beq.n	14ce2 <z_arm_mpu_init+0x92>
   14ca2:	4918      	ldr	r1, [pc, #96]	; (14d04 <z_arm_mpu_init+0xb4>)
   14ca4:	4a11      	ldr	r2, [pc, #68]	; (14cec <z_arm_mpu_init+0x9c>)
   14ca6:	4813      	ldr	r0, [pc, #76]	; (14cf4 <z_arm_mpu_init+0xa4>)
   14ca8:	f240 13b7 	movw	r3, #439	; 0x1b7
   14cac:	f00e fca5 	bl	235fa <assert_print>
   14cb0:	4815      	ldr	r0, [pc, #84]	; (14d08 <z_arm_mpu_init+0xb8>)
   14cb2:	f00e fca2 	bl	235fa <assert_print>
   14cb6:	f240 11b7 	movw	r1, #439	; 0x1b7
   14cba:	e7dc      	b.n	14c76 <z_arm_mpu_init+0x26>
   14cbc:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14cc0:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14cc4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14cc8:	4313      	orrs	r3, r2
   14cca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14cce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14cd2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14cd6:	f043 0301 	orr.w	r3, r3, #1
   14cda:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14cde:	3201      	adds	r2, #1
   14ce0:	e7d1      	b.n	14c86 <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14ce2:	2000      	movs	r0, #0
   14ce4:	bd10      	pop	{r4, pc}
   14ce6:	bf00      	nop
   14ce8:	00026558 	.word	0x00026558
   14cec:	00027e48 	.word	0x00027e48
   14cf0:	00029a2c 	.word	0x00029a2c
   14cf4:	00026f1a 	.word	0x00026f1a
   14cf8:	00027ed8 	.word	0x00027ed8
   14cfc:	e000ed00 	.word	0xe000ed00
   14d00:	20002f5f 	.word	0x20002f5f
   14d04:	00027f0c 	.word	0x00027f0c
   14d08:	00027f5c 	.word	0x00027f5c

00014d0c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   14d0c:	4b01      	ldr	r3, [pc, #4]	; (14d14 <__stdout_hook_install+0x8>)
   14d0e:	6018      	str	r0, [r3, #0]
}
   14d10:	4770      	bx	lr
   14d12:	bf00      	nop
   14d14:	2000060c 	.word	0x2000060c

00014d18 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   14d18:	b40c      	push	{r2, r3}
   14d1a:	b510      	push	{r4, lr}
   14d1c:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   14d1e:	b909      	cbnz	r1, 14d24 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   14d20:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14d24:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   14d26:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   14d2a:	ab09      	add	r3, sp, #36	; 0x24
   14d2c:	9a08      	ldr	r2, [sp, #32]
   14d2e:	9400      	str	r4, [sp, #0]
   14d30:	a904      	add	r1, sp, #16
   14d32:	4805      	ldr	r0, [pc, #20]	; (14d48 <snprintf+0x30>)
   14d34:	9303      	str	r3, [sp, #12]
   14d36:	f7fd f955 	bl	11fe4 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   14d3a:	9b04      	ldr	r3, [sp, #16]
   14d3c:	701c      	strb	r4, [r3, #0]
	return r;
}
   14d3e:	b006      	add	sp, #24
   14d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d44:	b002      	add	sp, #8
   14d46:	4770      	bx	lr
   14d48:	00023e43 	.word	0x00023e43

00014d4c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14d4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   14d50:	f3ef 8211 	mrs	r2, BASEPRI
   14d54:	f383 8812 	msr	BASEPRI_MAX, r3
   14d58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14d5c:	4906      	ldr	r1, [pc, #24]	; (14d78 <nordicsemi_nrf52_init+0x2c>)
   14d5e:	2301      	movs	r3, #1
   14d60:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   14d64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   14d68:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   14d6c:	f382 8811 	msr	BASEPRI, r2
   14d70:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14d74:	2000      	movs	r0, #0
   14d76:	4770      	bx	lr
   14d78:	4001e000 	.word	0x4001e000

00014d7c <sys_arch_reboot>:
    *p_gpregret = val;
   14d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d80:	b2c0      	uxtb	r0, r0
   14d82:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   14d86:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14d8a:	4905      	ldr	r1, [pc, #20]	; (14da0 <sys_arch_reboot+0x24>)
   14d8c:	4b05      	ldr	r3, [pc, #20]	; (14da4 <sys_arch_reboot+0x28>)
   14d8e:	68ca      	ldr	r2, [r1, #12]
   14d90:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14d94:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14d96:	60cb      	str	r3, [r1, #12]
   14d98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14d9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14d9e:	e7fd      	b.n	14d9c <sys_arch_reboot+0x20>
   14da0:	e000ed00 	.word	0xe000ed00
   14da4:	05fa0004 	.word	0x05fa0004

00014da8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14da8:	b120      	cbz	r0, 14db4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14daa:	4b03      	ldr	r3, [pc, #12]	; (14db8 <arch_busy_wait+0x10>)
   14dac:	0180      	lsls	r0, r0, #6
   14dae:	f043 0301 	orr.w	r3, r3, #1
   14db2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14db4:	4770      	bx	lr
   14db6:	bf00      	nop
   14db8:	00026410 	.word	0x00026410

00014dbc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   14dbc:	b508      	push	{r3, lr}
   14dbe:	4804      	ldr	r0, [pc, #16]	; (14dd0 <xoshiro128_initialize+0x14>)
   14dc0:	f010 feaa 	bl	25b18 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   14dc4:	2800      	cmp	r0, #0
}
   14dc6:	bf0c      	ite	eq
   14dc8:	f06f 0012 	mvneq.w	r0, #18
   14dcc:	2000      	movne	r0, #0
   14dce:	bd08      	pop	{r3, pc}
   14dd0:	00026038 	.word	0x00026038

00014dd4 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14dd4:	4b0e      	ldr	r3, [pc, #56]	; (14e10 <bt_hex+0x3c>)
   14dd6:	2940      	cmp	r1, #64	; 0x40
{
   14dd8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14dda:	bf28      	it	cs
   14ddc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   14dde:	4c0d      	ldr	r4, [pc, #52]	; (14e14 <bt_hex+0x40>)
   14de0:	1846      	adds	r6, r0, r1
   14de2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14de4:	42b0      	cmp	r0, r6
   14de6:	f103 0302 	add.w	r3, r3, #2
   14dea:	d104      	bne.n	14df6 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14dec:	2300      	movs	r3, #0
   14dee:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   14df2:	4807      	ldr	r0, [pc, #28]	; (14e10 <bt_hex+0x3c>)
   14df4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   14df6:	7802      	ldrb	r2, [r0, #0]
   14df8:	0912      	lsrs	r2, r2, #4
   14dfa:	5ca2      	ldrb	r2, [r4, r2]
   14dfc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14e00:	f810 2b01 	ldrb.w	r2, [r0], #1
   14e04:	f002 020f 	and.w	r2, r2, #15
   14e08:	5ca2      	ldrb	r2, [r4, r2]
   14e0a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14e0e:	e7e9      	b.n	14de4 <bt_hex+0x10>
   14e10:	20002f7e 	.word	0x20002f7e
   14e14:	00027faa 	.word	0x00027faa

00014e18 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   14e18:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   14e1a:	7803      	ldrb	r3, [r0, #0]
   14e1c:	b08b      	sub	sp, #44	; 0x2c
   14e1e:	4604      	mov	r4, r0
   14e20:	ad07      	add	r5, sp, #28
   14e22:	2b03      	cmp	r3, #3
   14e24:	d821      	bhi.n	14e6a <bt_addr_le_str+0x52>
   14e26:	e8df f003 	tbb	[pc, r3]
   14e2a:	1a02      	.short	0x1a02
   14e2c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   14e2e:	4912      	ldr	r1, [pc, #72]	; (14e78 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   14e30:	4628      	mov	r0, r5
   14e32:	f00e ffc5 	bl	23dc0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   14e36:	9505      	str	r5, [sp, #20]
   14e38:	7863      	ldrb	r3, [r4, #1]
   14e3a:	9304      	str	r3, [sp, #16]
   14e3c:	78a3      	ldrb	r3, [r4, #2]
   14e3e:	9303      	str	r3, [sp, #12]
   14e40:	78e3      	ldrb	r3, [r4, #3]
   14e42:	9302      	str	r3, [sp, #8]
   14e44:	7923      	ldrb	r3, [r4, #4]
   14e46:	9301      	str	r3, [sp, #4]
   14e48:	7963      	ldrb	r3, [r4, #5]
   14e4a:	9300      	str	r3, [sp, #0]
   14e4c:	79a3      	ldrb	r3, [r4, #6]
   14e4e:	4a0b      	ldr	r2, [pc, #44]	; (14e7c <bt_addr_le_str+0x64>)
   14e50:	480b      	ldr	r0, [pc, #44]	; (14e80 <bt_addr_le_str+0x68>)
   14e52:	211e      	movs	r1, #30
   14e54:	f00e f9d6 	bl	23204 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   14e58:	4809      	ldr	r0, [pc, #36]	; (14e80 <bt_addr_le_str+0x68>)
   14e5a:	b00b      	add	sp, #44	; 0x2c
   14e5c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   14e5e:	4909      	ldr	r1, [pc, #36]	; (14e84 <bt_addr_le_str+0x6c>)
   14e60:	e7e6      	b.n	14e30 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   14e62:	4909      	ldr	r1, [pc, #36]	; (14e88 <bt_addr_le_str+0x70>)
   14e64:	e7e4      	b.n	14e30 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   14e66:	4909      	ldr	r1, [pc, #36]	; (14e8c <bt_addr_le_str+0x74>)
   14e68:	e7e2      	b.n	14e30 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   14e6a:	4a09      	ldr	r2, [pc, #36]	; (14e90 <bt_addr_le_str+0x78>)
   14e6c:	210a      	movs	r1, #10
   14e6e:	4628      	mov	r0, r5
   14e70:	f00e f9c8 	bl	23204 <snprintk>
		break;
   14e74:	e7df      	b.n	14e36 <bt_addr_le_str+0x1e>
   14e76:	bf00      	nop
   14e78:	00026b4b 	.word	0x00026b4b
   14e7c:	00026b6d 	.word	0x00026b6d
   14e80:	20002f60 	.word	0x20002f60
   14e84:	00026b52 	.word	0x00026b52
   14e88:	00026b59 	.word	0x00026b59
   14e8c:	00026b63 	.word	0x00026b63
   14e90:	000290d8 	.word	0x000290d8

00014e94 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   14e94:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   14e96:	4d0a      	ldr	r5, [pc, #40]	; (14ec0 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14e98:	4b0a      	ldr	r3, [pc, #40]	; (14ec4 <long_wq_init+0x30>)
{
   14e9a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14e9c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   14e9e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14ea0:	9302      	str	r3, [sp, #8]
   14ea2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   14ea4:	f00b f9f2 	bl	2028c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   14ea8:	ab02      	add	r3, sp, #8
   14eaa:	9300      	str	r3, [sp, #0]
   14eac:	4628      	mov	r0, r5
   14eae:	4906      	ldr	r1, [pc, #24]	; (14ec8 <long_wq_init+0x34>)
   14eb0:	230a      	movs	r3, #10
   14eb2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   14eb6:	f00b fa03 	bl	202c0 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   14eba:	4620      	mov	r0, r4
   14ebc:	b005      	add	sp, #20
   14ebe:	bd30      	pop	{r4, r5, pc}
   14ec0:	20001ce0 	.word	0x20001ce0
   14ec4:	00027fbb 	.word	0x00027fbb
   14ec8:	200041c0 	.word	0x200041c0

00014ecc <bt_long_wq_schedule>:
{
   14ecc:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   14ece:	4801      	ldr	r0, [pc, #4]	; (14ed4 <bt_long_wq_schedule+0x8>)
   14ed0:	f00b ba8a 	b.w	203e8 <k_work_schedule_for_queue>
   14ed4:	20001ce0 	.word	0x20001ce0

00014ed8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14ed8:	b430      	push	{r4, r5}
   14eda:	4603      	mov	r3, r0
   14edc:	4608      	mov	r0, r1
	switch (src->type) {
   14ede:	781a      	ldrb	r2, [r3, #0]
   14ee0:	2a01      	cmp	r2, #1
   14ee2:	d013      	beq.n	14f0c <uuid_to_uuid128+0x34>
   14ee4:	2a02      	cmp	r2, #2
   14ee6:	d026      	beq.n	14f36 <uuid_to_uuid128+0x5e>
   14ee8:	b972      	cbnz	r2, 14f08 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   14eea:	4a15      	ldr	r2, [pc, #84]	; (14f40 <uuid_to_uuid128+0x68>)
   14eec:	f102 0410 	add.w	r4, r2, #16
   14ef0:	f852 5b04 	ldr.w	r5, [r2], #4
   14ef4:	f841 5b04 	str.w	r5, [r1], #4
   14ef8:	42a2      	cmp	r2, r4
   14efa:	d1f9      	bne.n	14ef0 <uuid_to_uuid128+0x18>
   14efc:	7812      	ldrb	r2, [r2, #0]
   14efe:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   14f00:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   14f02:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   14f04:	0a1b      	lsrs	r3, r3, #8
   14f06:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14f08:	bc30      	pop	{r4, r5}
   14f0a:	4770      	bx	lr
		*dst = uuid128_base;
   14f0c:	4a0c      	ldr	r2, [pc, #48]	; (14f40 <uuid_to_uuid128+0x68>)
   14f0e:	f102 0410 	add.w	r4, r2, #16
   14f12:	f852 5b04 	ldr.w	r5, [r2], #4
   14f16:	f841 5b04 	str.w	r5, [r1], #4
   14f1a:	42a2      	cmp	r2, r4
   14f1c:	d1f9      	bne.n	14f12 <uuid_to_uuid128+0x3a>
   14f1e:	7812      	ldrb	r2, [r2, #0]
   14f20:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   14f22:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   14f24:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   14f26:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   14f2a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   14f2c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   14f2e:	0a1b      	lsrs	r3, r3, #8
   14f30:	7382      	strb	r2, [r0, #14]
   14f32:	7403      	strb	r3, [r0, #16]
}
   14f34:	e7e8      	b.n	14f08 <uuid_to_uuid128+0x30>
}
   14f36:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   14f38:	2211      	movs	r2, #17
   14f3a:	4619      	mov	r1, r3
   14f3c:	f00e bf6a 	b.w	23e14 <memcpy>
   14f40:	00027fc4 	.word	0x00027fc4

00014f44 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14f44:	2805      	cmp	r0, #5
{
   14f46:	b538      	push	{r3, r4, r5, lr}
   14f48:	4605      	mov	r5, r0
   14f4a:	d803      	bhi.n	14f54 <bt_buf_get_rx+0x10>
   14f4c:	212a      	movs	r1, #42	; 0x2a
   14f4e:	40c1      	lsrs	r1, r0
   14f50:	07c9      	lsls	r1, r1, #31
   14f52:	d40c      	bmi.n	14f6e <bt_buf_get_rx+0x2a>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   14f54:	490c      	ldr	r1, [pc, #48]	; (14f88 <bt_buf_get_rx+0x44>)
   14f56:	4a0d      	ldr	r2, [pc, #52]	; (14f8c <bt_buf_get_rx+0x48>)
   14f58:	480d      	ldr	r0, [pc, #52]	; (14f90 <bt_buf_get_rx+0x4c>)
   14f5a:	233d      	movs	r3, #61	; 0x3d
   14f5c:	f00e fb4d 	bl	235fa <assert_print>
   14f60:	480c      	ldr	r0, [pc, #48]	; (14f94 <bt_buf_get_rx+0x50>)
   14f62:	f00e fb4a 	bl	235fa <assert_print>
   14f66:	4809      	ldr	r0, [pc, #36]	; (14f8c <bt_buf_get_rx+0x48>)
   14f68:	213d      	movs	r1, #61	; 0x3d
   14f6a:	f00e fb3f 	bl	235ec <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   14f6e:	480a      	ldr	r0, [pc, #40]	; (14f98 <bt_buf_get_rx+0x54>)
   14f70:	f010 f93c 	bl	251ec <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   14f74:	4604      	mov	r4, r0
   14f76:	b120      	cbz	r0, 14f82 <bt_buf_get_rx+0x3e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   14f78:	2100      	movs	r1, #0
   14f7a:	300c      	adds	r0, #12
   14f7c:	f006 f8c8 	bl	1b110 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14f80:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14f82:	4620      	mov	r0, r4
   14f84:	bd38      	pop	{r3, r4, r5, pc}
   14f86:	bf00      	nop
   14f88:	00028004 	.word	0x00028004
   14f8c:	00027fd5 	.word	0x00027fd5
   14f90:	00026f1a 	.word	0x00026f1a
   14f94:	00028049 	.word	0x00028049
   14f98:	20000aac 	.word	0x20000aac

00014f9c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14f9c:	b570      	push	{r4, r5, r6, lr}
   14f9e:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14fa0:	480d      	ldr	r0, [pc, #52]	; (14fd8 <bt_buf_get_cmd_complete+0x3c>)
   14fa2:	f3bf 8f5b 	dmb	ish
   14fa6:	460b      	mov	r3, r1
   14fa8:	2100      	movs	r1, #0
   14faa:	e850 4f00 	ldrex	r4, [r0]
   14fae:	e840 1500 	strex	r5, r1, [r0]
   14fb2:	2d00      	cmp	r5, #0
   14fb4:	d1f9      	bne.n	14faa <bt_buf_get_cmd_complete+0xe>
   14fb6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   14fba:	b924      	cbnz	r4, 14fc6 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14fc0:	2001      	movs	r0, #1
   14fc2:	f7ff bfbf 	b.w	14f44 <bt_buf_get_rx>
   14fc6:	2301      	movs	r3, #1
   14fc8:	f104 000c 	add.w	r0, r4, #12
   14fcc:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   14fce:	8221      	strh	r1, [r4, #16]
   14fd0:	f006 f89e 	bl	1b110 <net_buf_simple_reserve>
}
   14fd4:	4620      	mov	r0, r4
   14fd6:	bd70      	pop	{r4, r5, r6, pc}
   14fd8:	200004c0 	.word	0x200004c0

00014fdc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14fdc:	b570      	push	{r4, r5, r6, lr}
   14fde:	4604      	mov	r4, r0
	switch (evt) {
   14fe0:	2c0f      	cmp	r4, #15
{
   14fe2:	460d      	mov	r5, r1
   14fe4:	4610      	mov	r0, r2
   14fe6:	4619      	mov	r1, r3
	switch (evt) {
   14fe8:	d805      	bhi.n	14ff6 <bt_buf_get_evt+0x1a>
   14fea:	2c0d      	cmp	r4, #13
   14fec:	d90d      	bls.n	1500a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   14fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   14ff2:	f7ff bfd3 	b.w	14f9c <bt_buf_get_cmd_complete>
	switch (evt) {
   14ff6:	2c13      	cmp	r4, #19
   14ff8:	d107      	bne.n	1500a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   14ffa:	480c      	ldr	r0, [pc, #48]	; (1502c <bt_buf_get_evt+0x50>)
   14ffc:	f010 f8f6 	bl	251ec <net_buf_alloc_fixed>
			if (buf) {
   15000:	4604      	mov	r4, r0
   15002:	b938      	cbnz	r0, 15014 <bt_buf_get_evt+0x38>
{
   15004:	2400      	movs	r4, #0
}
   15006:	4620      	mov	r0, r4
   15008:	bd70      	pop	{r4, r5, r6, pc}
   1500a:	4602      	mov	r2, r0
   1500c:	460b      	mov	r3, r1
		if (discardable) {
   1500e:	b145      	cbz	r5, 15022 <bt_buf_get_evt+0x46>
   15010:	4807      	ldr	r0, [pc, #28]	; (15030 <bt_buf_get_evt+0x54>)
   15012:	e7f3      	b.n	14ffc <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15014:	2100      	movs	r1, #0
   15016:	300c      	adds	r0, #12
   15018:	f006 f87a 	bl	1b110 <net_buf_simple_reserve>
   1501c:	2301      	movs	r3, #1
   1501e:	7623      	strb	r3, [r4, #24]
}
   15020:	e7f1      	b.n	15006 <bt_buf_get_evt+0x2a>
}
   15022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15026:	2001      	movs	r0, #1
   15028:	f7ff bf8c 	b.w	14f44 <bt_buf_get_rx>
   1502c:	20000ae0 	.word	0x20000ae0
   15030:	20000a10 	.word	0x20000a10

00015034 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   15034:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15036:	4d0c      	ldr	r5, [pc, #48]	; (15068 <ver_str+0x34>)
{
   15038:	4606      	mov	r6, r0
	const char * const str[] = {
   1503a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1503c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   1503e:	466c      	mov	r4, sp
   15040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1504a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   1504e:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   15050:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   15054:	bf9b      	ittet	ls
   15056:	ab0e      	addls	r3, sp, #56	; 0x38
   15058:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   1505c:	4803      	ldrhi	r0, [pc, #12]	; (1506c <ver_str+0x38>)
		return str[ver];
   1505e:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   15062:	b00e      	add	sp, #56	; 0x38
   15064:	bd70      	pop	{r4, r5, r6, pc}
   15066:	bf00      	nop
   15068:	000263c0 	.word	0x000263c0
   1506c:	00028071 	.word	0x00028071

00015070 <hci_disconn_complete_prio>:
{
   15070:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15072:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15074:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15078:	781b      	ldrb	r3, [r3, #0]
   1507a:	b963      	cbnz	r3, 15096 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   1507c:	4620      	mov	r0, r4
   1507e:	f002 fe2b 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   15082:	4605      	mov	r5, r0
   15084:	b940      	cbnz	r0, 15098 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15086:	4b08      	ldr	r3, [pc, #32]	; (150a8 <hci_disconn_complete_prio+0x38>)
   15088:	881a      	ldrh	r2, [r3, #0]
   1508a:	b922      	cbnz	r2, 15096 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1508c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15090:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15094:	8018      	strh	r0, [r3, #0]
}
   15096:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15098:	2101      	movs	r1, #1
   1509a:	f002 fe25 	bl	17ce8 <bt_conn_set_state>
	bt_conn_unref(conn);
   1509e:	4628      	mov	r0, r5
}
   150a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   150a4:	f002 bde0 	b.w	17c68 <bt_conn_unref>
   150a8:	20002f2c 	.word	0x20002f2c

000150ac <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   150ac:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   150ae:	4c08      	ldr	r4, [pc, #32]	; (150d0 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   150b0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   150b2:	2205      	movs	r2, #5
   150b4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   150b8:	f003 f896 	bl	181e8 <bt_conn_lookup_state_le>
		if (!conn) {
   150bc:	b938      	cbnz	r0, 150ce <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   150be:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   150c2:	4904      	ldr	r1, [pc, #16]	; (150d4 <find_pending_connect.part.0+0x28>)
}
   150c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   150c8:	2204      	movs	r2, #4
   150ca:	f003 b88d 	b.w	181e8 <bt_conn_lookup_state_le>
}
   150ce:	bd10      	pop	{r4, pc}
   150d0:	20000388 	.word	0x20000388
   150d4:	00027f90 	.word	0x00027f90

000150d8 <hci_data_buf_overflow>:
{
   150d8:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   150da:	68c3      	ldr	r3, [r0, #12]
{
   150dc:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   150de:	b088      	sub	sp, #32
   150e0:	781b      	ldrb	r3, [r3, #0]
   150e2:	466a      	mov	r2, sp
   150e4:	4906      	ldr	r1, [pc, #24]	; (15100 <hci_data_buf_overflow+0x28>)
   150e6:	4807      	ldr	r0, [pc, #28]	; (15104 <hci_data_buf_overflow+0x2c>)
   150e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   150ec:	2303      	movs	r3, #3
   150ee:	f842 3f10 	str.w	r3, [r2, #16]!
   150f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   150f6:	f00e ff4a 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   150fa:	46bd      	mov	sp, r7
   150fc:	bd80      	pop	{r7, pc}
   150fe:	bf00      	nop
   15100:	00028079 	.word	0x00028079
   15104:	0002629c 	.word	0x0002629c

00015108 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   1510a:	4b06      	ldr	r3, [pc, #24]	; (15124 <le_conn_param_neg_reply.part.0+0x1c>)
   1510c:	9305      	str	r3, [sp, #20]
   1510e:	4806      	ldr	r0, [pc, #24]	; (15128 <le_conn_param_neg_reply.part.0+0x20>)
   15110:	2302      	movs	r3, #2
   15112:	aa04      	add	r2, sp, #16
   15114:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15118:	9304      	str	r3, [sp, #16]
   1511a:	f00e ff38 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   1511e:	b007      	add	sp, #28
   15120:	f85d fb04 	ldr.w	pc, [sp], #4
   15124:	000280a1 	.word	0x000280a1
   15128:	0002629c 	.word	0x0002629c

0001512c <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   1512c:	b598      	push	{r3, r4, r7, lr}
   1512e:	4601      	mov	r1, r0
   15130:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15132:	480d      	ldr	r0, [pc, #52]	; (15168 <rx_queue_put+0x3c>)
   15134:	f005 fe3a 	bl	1adac <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15138:	490c      	ldr	r1, [pc, #48]	; (1516c <rx_queue_put+0x40>)
   1513a:	480d      	ldr	r0, [pc, #52]	; (15170 <rx_queue_put+0x44>)
   1513c:	f010 fdcb 	bl	25cd6 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   15140:	2800      	cmp	r0, #0
   15142:	da0e      	bge.n	15162 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   15144:	466c      	mov	r4, sp
   15146:	b088      	sub	sp, #32
   15148:	466a      	mov	r2, sp
   1514a:	4b0a      	ldr	r3, [pc, #40]	; (15174 <rx_queue_put+0x48>)
   1514c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15150:	2303      	movs	r3, #3
   15152:	f842 3f10 	str.w	r3, [r2, #16]!
   15156:	4808      	ldr	r0, [pc, #32]	; (15178 <rx_queue_put+0x4c>)
   15158:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1515c:	f00e ff17 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15160:	46a5      	mov	sp, r4
	}
}
   15162:	46bd      	mov	sp, r7
   15164:	bd98      	pop	{r3, r4, r7, pc}
   15166:	bf00      	nop
   15168:	200004c4 	.word	0x200004c4
   1516c:	2000064c 	.word	0x2000064c
   15170:	20001e00 	.word	0x20001e00
   15174:	000280bb 	.word	0x000280bb
   15178:	0002629c 	.word	0x0002629c

0001517c <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1517c:	b5b0      	push	{r4, r5, r7, lr}
   1517e:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15180:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15182:	af00      	add	r7, sp, #0
   15184:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15186:	4629      	mov	r1, r5
   15188:	68d8      	ldr	r0, [r3, #12]
   1518a:	f7ff fe23 	bl	14dd4 <bt_hex>
   1518e:	b08a      	sub	sp, #40	; 0x28
   15190:	466a      	mov	r2, sp
   15192:	4b09      	ldr	r3, [pc, #36]	; (151b8 <handle_event.part.0+0x3c>)
   15194:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15198:	f240 4302 	movw	r3, #1026	; 0x402
   1519c:	8493      	strh	r3, [r2, #36]	; 0x24
   1519e:	4b07      	ldr	r3, [pc, #28]	; (151bc <handle_event.part.0+0x40>)
   151a0:	e9c2 5007 	strd	r5, r0, [r2, #28]
   151a4:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   151a8:	f842 3f10 	str.w	r3, [r2, #16]!
   151ac:	4804      	ldr	r0, [pc, #16]	; (151c0 <handle_event.part.0+0x44>)
   151ae:	f00e feee 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   151b2:	46bd      	mov	sp, r7
   151b4:	bdb0      	pop	{r4, r5, r7, pc}
   151b6:	bf00      	nop
   151b8:	000280d8 	.word	0x000280d8
   151bc:	01000005 	.word	0x01000005
   151c0:	0002629c 	.word	0x0002629c

000151c4 <hci_hardware_error>:
{
   151c4:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   151c6:	2101      	movs	r1, #1
   151c8:	af00      	add	r7, sp, #0
   151ca:	300c      	adds	r0, #12
   151cc:	f006 f800 	bl	1b1d0 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   151d0:	b088      	sub	sp, #32
   151d2:	7803      	ldrb	r3, [r0, #0]
   151d4:	466a      	mov	r2, sp
   151d6:	4906      	ldr	r1, [pc, #24]	; (151f0 <hci_hardware_error+0x2c>)
   151d8:	4806      	ldr	r0, [pc, #24]	; (151f4 <hci_hardware_error+0x30>)
   151da:	e9c2 1305 	strd	r1, r3, [r2, #20]
   151de:	2303      	movs	r3, #3
   151e0:	f842 3f10 	str.w	r3, [r2, #16]!
   151e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   151e8:	f00e fed1 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   151ec:	46bd      	mov	sp, r7
   151ee:	bd80      	pop	{r7, pc}
   151f0:	000280fa 	.word	0x000280fa
   151f4:	0002629c 	.word	0x0002629c

000151f8 <le_data_len_change>:
{
   151f8:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   151fa:	68c3      	ldr	r3, [r0, #12]
   151fc:	881c      	ldrh	r4, [r3, #0]
{
   151fe:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15200:	4620      	mov	r0, r4
   15202:	f002 fd69 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   15206:	b980      	cbnz	r0, 1522a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15208:	466d      	mov	r5, sp
   1520a:	b088      	sub	sp, #32
   1520c:	466a      	mov	r2, sp
   1520e:	4b08      	ldr	r3, [pc, #32]	; (15230 <le_data_len_change+0x38>)
   15210:	4808      	ldr	r0, [pc, #32]	; (15234 <le_data_len_change+0x3c>)
   15212:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15216:	2303      	movs	r3, #3
   15218:	f842 3f10 	str.w	r3, [r2, #16]!
   1521c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15220:	f00e feb5 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15224:	46ad      	mov	sp, r5
}
   15226:	46bd      	mov	sp, r7
   15228:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1522a:	f002 fd1d 	bl	17c68 <bt_conn_unref>
   1522e:	e7fa      	b.n	15226 <le_data_len_change+0x2e>
   15230:	0002811c 	.word	0x0002811c
   15234:	0002629c 	.word	0x0002629c

00015238 <le_phy_update_complete>:
{
   15238:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1523a:	68c3      	ldr	r3, [r0, #12]
   1523c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   15240:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15242:	4620      	mov	r0, r4
   15244:	f002 fd48 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   15248:	b980      	cbnz	r0, 1526c <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1524a:	466d      	mov	r5, sp
   1524c:	b088      	sub	sp, #32
   1524e:	466a      	mov	r2, sp
   15250:	4b08      	ldr	r3, [pc, #32]	; (15274 <le_phy_update_complete+0x3c>)
   15252:	4809      	ldr	r0, [pc, #36]	; (15278 <le_phy_update_complete+0x40>)
   15254:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15258:	2303      	movs	r3, #3
   1525a:	f842 3f10 	str.w	r3, [r2, #16]!
   1525e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15262:	f00e fe94 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15266:	46ad      	mov	sp, r5
}
   15268:	46bd      	mov	sp, r7
   1526a:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1526c:	f002 fcfc 	bl	17c68 <bt_conn_unref>
   15270:	e7fa      	b.n	15268 <le_phy_update_complete+0x30>
   15272:	bf00      	nop
   15274:	0002811c 	.word	0x0002811c
   15278:	0002629c 	.word	0x0002629c

0001527c <hci_disconn_complete>:
{
   1527c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15280:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   15282:	782e      	ldrb	r6, [r5, #0]
{
   15284:	af00      	add	r7, sp, #0
	if (evt->status) {
   15286:	b9ae      	cbnz	r6, 152b4 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15288:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1528c:	4640      	mov	r0, r8
   1528e:	f002 fd23 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   15292:	4604      	mov	r4, r0
   15294:	b988      	cbnz	r0, 152ba <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   15296:	466c      	mov	r4, sp
   15298:	b088      	sub	sp, #32
   1529a:	466a      	mov	r2, sp
   1529c:	4b0b      	ldr	r3, [pc, #44]	; (152cc <hci_disconn_complete+0x50>)
   1529e:	480c      	ldr	r0, [pc, #48]	; (152d0 <hci_disconn_complete+0x54>)
   152a0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   152a4:	2303      	movs	r3, #3
   152a6:	f842 3f10 	str.w	r3, [r2, #16]!
   152aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   152ae:	f00e fe6e 	bl	23f8e <z_log_msg_static_create.constprop.0>
   152b2:	46a5      	mov	sp, r4
}
   152b4:	46bd      	mov	sp, r7
   152b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   152ba:	78eb      	ldrb	r3, [r5, #3]
   152bc:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   152be:	4631      	mov	r1, r6
   152c0:	f002 fd12 	bl	17ce8 <bt_conn_set_state>
		bt_conn_unref(conn);
   152c4:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   152c6:	f002 fccf 	bl	17c68 <bt_conn_unref>
   152ca:	e7f3      	b.n	152b4 <hci_disconn_complete+0x38>
   152cc:	00028140 	.word	0x00028140
   152d0:	0002629c 	.word	0x0002629c

000152d4 <handle_event>:
{
   152d4:	b5b0      	push	{r4, r5, r7, lr}
   152d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   152da:	af00      	add	r7, sp, #0
   152dc:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   152de:	4293      	cmp	r3, r2
   152e0:	d103      	bne.n	152ea <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   152e2:	4620      	mov	r0, r4
   152e4:	f7ff ff4a 	bl	1517c <handle_event.part.0>
}
   152e8:	e018      	b.n	1531c <handle_event+0x48>
		if (handler->event != event) {
   152ea:	4610      	mov	r0, r2
   152ec:	f810 5b08 	ldrb.w	r5, [r0], #8
   152f0:	42a5      	cmp	r5, r4
   152f2:	d119      	bne.n	15328 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   152f4:	8a0b      	ldrh	r3, [r1, #16]
   152f6:	7850      	ldrb	r0, [r2, #1]
   152f8:	4298      	cmp	r0, r3
   152fa:	d911      	bls.n	15320 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   152fc:	466d      	mov	r5, sp
   152fe:	b088      	sub	sp, #32
   15300:	466a      	mov	r2, sp
   15302:	490a      	ldr	r1, [pc, #40]	; (1532c <handle_event+0x58>)
   15304:	61d4      	str	r4, [r2, #28]
   15306:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1530a:	2304      	movs	r3, #4
   1530c:	f842 3f10 	str.w	r3, [r2, #16]!
   15310:	4807      	ldr	r0, [pc, #28]	; (15330 <handle_event+0x5c>)
   15312:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15316:	f00e fe3a 	bl	23f8e <z_log_msg_static_create.constprop.0>
   1531a:	46ad      	mov	sp, r5
}
   1531c:	46bd      	mov	sp, r7
   1531e:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   15320:	6853      	ldr	r3, [r2, #4]
   15322:	4608      	mov	r0, r1
   15324:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   15326:	e7f9      	b.n	1531c <handle_event+0x48>
   15328:	4602      	mov	r2, r0
   1532a:	e7d8      	b.n	152de <handle_event+0xa>
   1532c:	00028166 	.word	0x00028166
   15330:	0002629c 	.word	0x0002629c

00015334 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   15334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15336:	4855      	ldr	r0, [pc, #340]	; (1548c <rx_work_handler+0x158>)
{
   15338:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1533a:	f005 fda1 	bl	1ae80 <net_buf_slist_get>
	if (!buf) {
   1533e:	4604      	mov	r4, r0
   15340:	2800      	cmp	r0, #0
   15342:	d06a      	beq.n	1541a <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15344:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   15346:	2b01      	cmp	r3, #1
   15348:	d069      	beq.n	1541e <rx_work_handler+0xea>
   1534a:	2b03      	cmp	r3, #3
   1534c:	f040 8099 	bne.w	15482 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15350:	8a03      	ldrh	r3, [r0, #16]
   15352:	2b03      	cmp	r3, #3
   15354:	d80c      	bhi.n	15370 <rx_work_handler+0x3c>
   15356:	4a4e      	ldr	r2, [pc, #312]	; (15490 <rx_work_handler+0x15c>)
   15358:	494e      	ldr	r1, [pc, #312]	; (15494 <rx_work_handler+0x160>)
   1535a:	484f      	ldr	r0, [pc, #316]	; (15498 <rx_work_handler+0x164>)
   1535c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   15360:	f00e f94b 	bl	235fa <assert_print>
   15364:	4040      	eors	r0, r0
   15366:	f380 8811 	msr	BASEPRI, r0
   1536a:	f04f 0003 	mov.w	r0, #3
   1536e:	df02      	svc	2
   15370:	2104      	movs	r1, #4
   15372:	f104 000c 	add.w	r0, r4, #12
   15376:	f005 ff2b 	bl	1b1d0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1537a:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1537c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1537e:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15380:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   15382:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15386:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15388:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1538a:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   1538c:	d010      	beq.n	153b0 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1538e:	466d      	mov	r5, sp
   15390:	b088      	sub	sp, #32
   15392:	466a      	mov	r2, sp
   15394:	4841      	ldr	r0, [pc, #260]	; (1549c <rx_work_handler+0x168>)
   15396:	61d3      	str	r3, [r2, #28]
   15398:	2304      	movs	r3, #4
   1539a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1539e:	f842 3f10 	str.w	r3, [r2, #16]!
   153a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   153a6:	483e      	ldr	r0, [pc, #248]	; (154a0 <rx_work_handler+0x16c>)
   153a8:	f00e fdf1 	bl	23f8e <z_log_msg_static_create.constprop.0>
   153ac:	46ad      	mov	sp, r5
   153ae:	e064      	b.n	1547a <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   153b0:	f002 fc92 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   153b4:	4605      	mov	r5, r0
   153b6:	b960      	cbnz	r0, 153d2 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   153b8:	466d      	mov	r5, sp
   153ba:	b088      	sub	sp, #32
   153bc:	8b63      	ldrh	r3, [r4, #26]
   153be:	466a      	mov	r2, sp
   153c0:	4938      	ldr	r1, [pc, #224]	; (154a4 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   153c2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   153c6:	2303      	movs	r3, #3
   153c8:	f842 3f10 	str.w	r3, [r2, #16]!
   153cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   153d0:	e7e9      	b.n	153a6 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   153d2:	f002 fd8b 	bl	17eec <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   153d6:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   153d8:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   153da:	4621      	mov	r1, r4
   153dc:	4628      	mov	r0, r5
   153de:	f002 fab5 	bl	1794c <bt_conn_recv>
	bt_conn_unref(conn);
   153e2:	4628      	mov	r0, r5
   153e4:	f002 fc40 	bl	17c68 <bt_conn_unref>
	return list->head;
   153e8:	4b2f      	ldr	r3, [pc, #188]	; (154a8 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   153ea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   153ee:	b1a3      	cbz	r3, 1541a <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   153f0:	492e      	ldr	r1, [pc, #184]	; (154ac <rx_work_handler+0x178>)
   153f2:	482f      	ldr	r0, [pc, #188]	; (154b0 <rx_work_handler+0x17c>)
   153f4:	f010 fc6f 	bl	25cd6 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   153f8:	2800      	cmp	r0, #0
   153fa:	da0e      	bge.n	1541a <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   153fc:	466c      	mov	r4, sp
   153fe:	b088      	sub	sp, #32
   15400:	466a      	mov	r2, sp
   15402:	4b2c      	ldr	r3, [pc, #176]	; (154b4 <rx_work_handler+0x180>)
   15404:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15408:	2303      	movs	r3, #3
   1540a:	f842 3f10 	str.w	r3, [r2, #16]!
   1540e:	4824      	ldr	r0, [pc, #144]	; (154a0 <rx_work_handler+0x16c>)
   15410:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15414:	f00e fdbb 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15418:	46a5      	mov	sp, r4
		}
	}
}
   1541a:	46bd      	mov	sp, r7
   1541c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1541e:	8a03      	ldrh	r3, [r0, #16]
   15420:	2b01      	cmp	r3, #1
   15422:	d80c      	bhi.n	1543e <rx_work_handler+0x10a>
   15424:	4a1a      	ldr	r2, [pc, #104]	; (15490 <rx_work_handler+0x15c>)
   15426:	491b      	ldr	r1, [pc, #108]	; (15494 <rx_work_handler+0x160>)
   15428:	481b      	ldr	r0, [pc, #108]	; (15498 <rx_work_handler+0x164>)
   1542a:	f640 2347 	movw	r3, #2631	; 0xa47
   1542e:	f00e f8e4 	bl	235fa <assert_print>
   15432:	4040      	eors	r0, r0
   15434:	f380 8811 	msr	BASEPRI, r0
   15438:	f04f 0003 	mov.w	r0, #3
   1543c:	df02      	svc	2
   1543e:	2102      	movs	r1, #2
   15440:	f104 000c 	add.w	r0, r4, #12
   15444:	f005 fec4 	bl	1b1d0 <net_buf_simple_pull_mem>
   15448:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1544a:	7800      	ldrb	r0, [r0, #0]
   1544c:	f00e fd7d 	bl	23f4a <bt_hci_evt_get_flags>
   15450:	0783      	lsls	r3, r0, #30
   15452:	d40c      	bmi.n	1546e <rx_work_handler+0x13a>
   15454:	4a0e      	ldr	r2, [pc, #56]	; (15490 <rx_work_handler+0x15c>)
   15456:	4918      	ldr	r1, [pc, #96]	; (154b8 <rx_work_handler+0x184>)
   15458:	480f      	ldr	r0, [pc, #60]	; (15498 <rx_work_handler+0x164>)
   1545a:	f640 234b 	movw	r3, #2635	; 0xa4b
   1545e:	f00e f8cc 	bl	235fa <assert_print>
   15462:	4040      	eors	r0, r0
   15464:	f380 8811 	msr	BASEPRI, r0
   15468:	f04f 0003 	mov.w	r0, #3
   1546c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1546e:	4a13      	ldr	r2, [pc, #76]	; (154bc <rx_work_handler+0x188>)
   15470:	7828      	ldrb	r0, [r5, #0]
   15472:	2304      	movs	r3, #4
   15474:	4621      	mov	r1, r4
   15476:	f7ff ff2d 	bl	152d4 <handle_event>
		net_buf_unref(buf);
   1547a:	4620      	mov	r0, r4
   1547c:	f005 fd82 	bl	1af84 <net_buf_unref>
		break;
   15480:	e7b2      	b.n	153e8 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15482:	466d      	mov	r5, sp
   15484:	b088      	sub	sp, #32
   15486:	466a      	mov	r2, sp
   15488:	490d      	ldr	r1, [pc, #52]	; (154c0 <rx_work_handler+0x18c>)
   1548a:	e79a      	b.n	153c2 <rx_work_handler+0x8e>
   1548c:	200004c4 	.word	0x200004c4
   15490:	00028188 	.word	0x00028188
   15494:	000281bc 	.word	0x000281bc
   15498:	00026f1a 	.word	0x00026f1a
   1549c:	000281d5 	.word	0x000281d5
   154a0:	0002629c 	.word	0x0002629c
   154a4:	000281f9 	.word	0x000281f9
   154a8:	20000388 	.word	0x20000388
   154ac:	2000064c 	.word	0x2000064c
   154b0:	20001e00 	.word	0x20001e00
   154b4:	000280bb 	.word	0x000280bb
   154b8:	0002821b 	.word	0x0002821b
   154bc:	00026600 	.word	0x00026600
   154c0:	00028249 	.word	0x00028249

000154c4 <hci_le_meta_event>:
{
   154c4:	b510      	push	{r4, lr}
   154c6:	2101      	movs	r1, #1
   154c8:	4604      	mov	r4, r0
   154ca:	300c      	adds	r0, #12
   154cc:	f005 fe80 	bl	1b1d0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   154d0:	4621      	mov	r1, r4
   154d2:	4a03      	ldr	r2, [pc, #12]	; (154e0 <hci_le_meta_event+0x1c>)
   154d4:	7800      	ldrb	r0, [r0, #0]
}
   154d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   154da:	2307      	movs	r3, #7
   154dc:	f7ff befa 	b.w	152d4 <handle_event>
   154e0:	00026620 	.word	0x00026620

000154e4 <le_remote_feat_complete>:
{
   154e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   154e6:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   154e8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   154ec:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   154ee:	4630      	mov	r0, r6
   154f0:	f002 fbf2 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   154f4:	4604      	mov	r4, r0
   154f6:	b980      	cbnz	r0, 1551a <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   154f8:	466c      	mov	r4, sp
   154fa:	b088      	sub	sp, #32
   154fc:	466a      	mov	r2, sp
   154fe:	4b0f      	ldr	r3, [pc, #60]	; (1553c <le_remote_feat_complete+0x58>)
   15500:	480f      	ldr	r0, [pc, #60]	; (15540 <le_remote_feat_complete+0x5c>)
   15502:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15506:	2303      	movs	r3, #3
   15508:	f842 3f10 	str.w	r3, [r2, #16]!
   1550c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15510:	f00e fd3d 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15514:	46a5      	mov	sp, r4
}
   15516:	46bd      	mov	sp, r7
   15518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   1551a:	782b      	ldrb	r3, [r5, #0]
   1551c:	b923      	cbnz	r3, 15528 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   1551e:	2208      	movs	r2, #8
   15520:	1ce9      	adds	r1, r5, #3
   15522:	30b5      	adds	r0, #181	; 0xb5
   15524:	f00e fc76 	bl	23e14 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1552c:	1d20      	adds	r0, r4, #4
   1552e:	f00e fd1f 	bl	23f70 <atomic_or>
	bt_conn_unref(conn);
   15532:	4620      	mov	r0, r4
   15534:	f002 fb98 	bl	17c68 <bt_conn_unref>
   15538:	e7ed      	b.n	15516 <le_remote_feat_complete+0x32>
   1553a:	bf00      	nop
   1553c:	0002811c 	.word	0x0002811c
   15540:	0002629c 	.word	0x0002629c

00015544 <hci_cmd_done>:
{
   15544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15548:	4606      	mov	r6, r0
   1554a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1554c:	7a90      	ldrb	r0, [r2, #10]
   1554e:	4d43      	ldr	r5, [pc, #268]	; (1565c <hci_cmd_done+0x118>)
{
   15550:	4688      	mov	r8, r1
   15552:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15554:	f005 fb02 	bl	1ab5c <net_buf_pool_get>
   15558:	4285      	cmp	r5, r0
   1555a:	d018      	beq.n	1558e <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1555c:	7aa4      	ldrb	r4, [r4, #10]
   1555e:	4620      	mov	r0, r4
   15560:	f005 fafc 	bl	1ab5c <net_buf_pool_get>
   15564:	46e8      	mov	r8, sp
   15566:	b08a      	sub	sp, #40	; 0x28
   15568:	466a      	mov	r2, sp
   1556a:	4b3d      	ldr	r3, [pc, #244]	; (15660 <hci_cmd_done+0x11c>)
   1556c:	6255      	str	r5, [r2, #36]	; 0x24
   1556e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15572:	2306      	movs	r3, #6
   15574:	e9c2 4007 	strd	r4, r0, [r2, #28]
   15578:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   1557c:	f842 3f10 	str.w	r3, [r2, #16]!
   15580:	4838      	ldr	r0, [pc, #224]	; (15664 <hci_cmd_done+0x120>)
   15582:	f00e fd04 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15586:	46c5      	mov	sp, r8
}
   15588:	46bd      	mov	sp, r7
   1558a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1558e:	4620      	mov	r0, r4
   15590:	f005 faec 	bl	1ab6c <net_buf_id>
   15594:	4d34      	ldr	r5, [pc, #208]	; (15668 <hci_cmd_done+0x124>)
   15596:	f04f 090c 	mov.w	r9, #12
   1559a:	fb09 5000 	mla	r0, r9, r0, r5
   1559e:	8843      	ldrh	r3, [r0, #2]
   155a0:	42b3      	cmp	r3, r6
   155a2:	d016      	beq.n	155d2 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   155a4:	4620      	mov	r0, r4
   155a6:	f005 fae1 	bl	1ab6c <net_buf_id>
   155aa:	fb09 5000 	mla	r0, r9, r0, r5
   155ae:	466c      	mov	r4, sp
   155b0:	b088      	sub	sp, #32
   155b2:	8843      	ldrh	r3, [r0, #2]
   155b4:	466a      	mov	r2, sp
   155b6:	492d      	ldr	r1, [pc, #180]	; (1566c <hci_cmd_done+0x128>)
   155b8:	61d3      	str	r3, [r2, #28]
   155ba:	2304      	movs	r3, #4
   155bc:	e9c2 1605 	strd	r1, r6, [r2, #20]
   155c0:	4828      	ldr	r0, [pc, #160]	; (15664 <hci_cmd_done+0x120>)
   155c2:	f842 3f10 	str.w	r3, [r2, #16]!
   155c6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   155ca:	f00e fce0 	bl	23f8e <z_log_msg_static_create.constprop.0>
   155ce:	46a5      	mov	sp, r4
		return;
   155d0:	e7da      	b.n	15588 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   155d2:	4e27      	ldr	r6, [pc, #156]	; (15670 <hci_cmd_done+0x12c>)
   155d4:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   155d8:	b120      	cbz	r0, 155e4 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   155da:	f005 fcd3 	bl	1af84 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   155de:	2300      	movs	r3, #0
   155e0:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   155e4:	4620      	mov	r0, r4
   155e6:	f005 fac1 	bl	1ab6c <net_buf_id>
   155ea:	260c      	movs	r6, #12
   155ec:	fb06 5000 	mla	r0, r6, r0, r5
   155f0:	6843      	ldr	r3, [r0, #4]
   155f2:	b1ab      	cbz	r3, 15620 <hci_cmd_done+0xdc>
   155f4:	f1b8 0f00 	cmp.w	r8, #0
   155f8:	d112      	bne.n	15620 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   155fa:	4620      	mov	r0, r4
   155fc:	f005 fab6 	bl	1ab6c <net_buf_id>
   15600:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15604:	2101      	movs	r1, #1
   15606:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   15608:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   1560c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1560e:	f003 061f 	and.w	r6, r3, #31
   15612:	40b1      	lsls	r1, r6
	if (val) {
   15614:	095b      	lsrs	r3, r3, #5
   15616:	b1da      	cbz	r2, 15650 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15618:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1561c:	f00e fca8 	bl	23f70 <atomic_or>
	if (cmd(buf)->sync) {
   15620:	4620      	mov	r0, r4
   15622:	f005 faa3 	bl	1ab6c <net_buf_id>
   15626:	260c      	movs	r6, #12
   15628:	fb06 5000 	mla	r0, r6, r0, r5
   1562c:	6883      	ldr	r3, [r0, #8]
   1562e:	2b00      	cmp	r3, #0
   15630:	d0aa      	beq.n	15588 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   15632:	4620      	mov	r0, r4
   15634:	f005 fa9a 	bl	1ab6c <net_buf_id>
   15638:	4370      	muls	r0, r6
   1563a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1563e:	4620      	mov	r0, r4
   15640:	f005 fa94 	bl	1ab6c <net_buf_id>
   15644:	fb06 5500 	mla	r5, r6, r0, r5
   15648:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1564a:	f00a faab 	bl	1fba4 <z_impl_k_sem_give>
}
   1564e:	e79b      	b.n	15588 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15650:	43c9      	mvns	r1, r1
   15652:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15656:	f00e fc9d 	bl	23f94 <atomic_and.isra.0>
   1565a:	e7e1      	b.n	15620 <hci_cmd_done+0xdc>
   1565c:	20000a78 	.word	0x20000a78
   15660:	0002825d 	.word	0x0002825d
   15664:	0002629c 	.word	0x0002629c
   15668:	20002bcc 	.word	0x20002bcc
   1566c:	00028292 	.word	0x00028292
   15670:	20000388 	.word	0x20000388

00015674 <hci_cmd_status>:
{
   15674:	b538      	push	{r3, r4, r5, lr}
   15676:	2104      	movs	r1, #4
   15678:	4604      	mov	r4, r0
   1567a:	300c      	adds	r0, #12
   1567c:	f005 fda8 	bl	1b1d0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15680:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   15682:	7801      	ldrb	r1, [r0, #0]
   15684:	8840      	ldrh	r0, [r0, #2]
   15686:	4622      	mov	r2, r4
   15688:	f7ff ff5c 	bl	15544 <hci_cmd_done>
	if (ncmd) {
   1568c:	b125      	cbz	r5, 15698 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   1568e:	4803      	ldr	r0, [pc, #12]	; (1569c <hci_cmd_status+0x28>)
}
   15690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15694:	f00a ba86 	b.w	1fba4 <z_impl_k_sem_give>
   15698:	bd38      	pop	{r3, r4, r5, pc}
   1569a:	bf00      	nop
   1569c:	200004a8 	.word	0x200004a8

000156a0 <hci_cmd_complete>:
{
   156a0:	b538      	push	{r3, r4, r5, lr}
   156a2:	2103      	movs	r1, #3
   156a4:	4604      	mov	r4, r0
   156a6:	300c      	adds	r0, #12
   156a8:	f005 fd92 	bl	1b1d0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   156ac:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   156ae:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   156b0:	7819      	ldrb	r1, [r3, #0]
   156b2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   156b6:	4622      	mov	r2, r4
   156b8:	f7ff ff44 	bl	15544 <hci_cmd_done>
	if (ncmd) {
   156bc:	b125      	cbz	r5, 156c8 <hci_cmd_complete+0x28>
   156be:	4803      	ldr	r0, [pc, #12]	; (156cc <hci_cmd_complete+0x2c>)
}
   156c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   156c4:	f00a ba6e 	b.w	1fba4 <z_impl_k_sem_give>
   156c8:	bd38      	pop	{r3, r4, r5, pc}
   156ca:	bf00      	nop
   156cc:	200004a8 	.word	0x200004a8

000156d0 <hci_num_completed_packets>:
{
   156d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d4:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   156d6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   156da:	8a01      	ldrh	r1, [r0, #16]
   156dc:	f898 4000 	ldrb.w	r4, [r8]
   156e0:	2301      	movs	r3, #1
   156e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   156e6:	428b      	cmp	r3, r1
{
   156e8:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   156ea:	f240 808c 	bls.w	15806 <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   156ee:	466d      	mov	r5, sp
   156f0:	b08a      	sub	sp, #40	; 0x28
   156f2:	466a      	mov	r2, sp
   156f4:	4846      	ldr	r0, [pc, #280]	; (15810 <hci_num_completed_packets+0x140>)
   156f6:	e9c2 3107 	strd	r3, r1, [r2, #28]
   156fa:	2305      	movs	r3, #5
   156fc:	e9c2 0405 	strd	r0, r4, [r2, #20]
   15700:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   15704:	f842 3f10 	str.w	r3, [r2, #16]!
   15708:	4842      	ldr	r0, [pc, #264]	; (15814 <hci_num_completed_packets+0x144>)
   1570a:	f00e fc40 	bl	23f8e <z_log_msg_static_create.constprop.0>
   1570e:	46ad      	mov	sp, r5
}
   15710:	371c      	adds	r7, #28
   15712:	46bd      	mov	sp, r7
   15714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   15718:	466c      	mov	r4, sp
   1571a:	b088      	sub	sp, #32
   1571c:	466a      	mov	r2, sp
   1571e:	4b3e      	ldr	r3, [pc, #248]	; (15818 <hci_num_completed_packets+0x148>)
   15720:	483c      	ldr	r0, [pc, #240]	; (15814 <hci_num_completed_packets+0x144>)
   15722:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   15726:	2303      	movs	r3, #3
   15728:	f842 3f10 	str.w	r3, [r2, #16]!
   1572c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15730:	f00e fc2d 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15734:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   15736:	3501      	adds	r5, #1
   15738:	f898 3000 	ldrb.w	r3, [r8]
   1573c:	429d      	cmp	r5, r3
   1573e:	dae7      	bge.n	15710 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   15740:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   15744:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   15748:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1574c:	4658      	mov	r0, fp
   1574e:	f002 fac3 	bl	17cd8 <bt_conn_lookup_handle>
		if (!conn) {
   15752:	4604      	mov	r4, r0
   15754:	2800      	cmp	r0, #0
   15756:	d0df      	beq.n	15718 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   15758:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   1575c:	b346      	cbz	r6, 157b0 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   1575e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15762:	f3ef 8211 	mrs	r2, BASEPRI
   15766:	f383 8812 	msr	BASEPRI_MAX, r3
   1576a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1576e:	69e3      	ldr	r3, [r4, #28]
   15770:	b16b      	cbz	r3, 1578e <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   15772:	3b01      	subs	r3, #1
   15774:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15776:	f382 8811 	msr	BASEPRI, r2
   1577a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1577e:	4620      	mov	r0, r4
   15780:	f002 f85c 	bl	1783c <bt_conn_get_pkts>
   15784:	3e01      	subs	r6, #1
   15786:	f00a fa0d 	bl	1fba4 <z_impl_k_sem_give>
   1578a:	b2b6      	uxth	r6, r6
   1578c:	e7e6      	b.n	1575c <hci_num_completed_packets+0x8c>
   1578e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   15790:	b993      	cbnz	r3, 157b8 <hci_num_completed_packets+0xe8>
   15792:	f382 8811 	msr	BASEPRI, r2
   15796:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   1579a:	2302      	movs	r3, #2
   1579c:	481d      	ldr	r0, [pc, #116]	; (15814 <hci_num_completed_packets+0x144>)
   1579e:	f8c7 a014 	str.w	sl, [r7, #20]
   157a2:	f107 0210 	add.w	r2, r7, #16
   157a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   157aa:	613b      	str	r3, [r7, #16]
   157ac:	f00e fbef 	bl	23f8e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   157b0:	4620      	mov	r0, r4
   157b2:	f002 fa59 	bl	17c68 <bt_conn_unref>
   157b6:	e7be      	b.n	15736 <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   157b8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   157ba:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   157bc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   157be:	428b      	cmp	r3, r1
	list->tail = node;
   157c0:	bf08      	it	eq
   157c2:	61a0      	streq	r0, [r4, #24]
   157c4:	f382 8811 	msr	BASEPRI, r2
   157c8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   157cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   157d0:	f3ef 8111 	mrs	r1, BASEPRI
   157d4:	f382 8812 	msr	BASEPRI_MAX, r2
   157d8:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   157dc:	68da      	ldr	r2, [r3, #12]
   157de:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   157e0:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   157e4:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   157e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   157ea:	b94a      	cbnz	r2, 15800 <hci_num_completed_packets+0x130>
	list->head = node;
   157ec:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   157f0:	f381 8811 	msr	BASEPRI, r1
   157f4:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   157f8:	4658      	mov	r0, fp
   157fa:	f00a fd41 	bl	20280 <k_work_submit>
   157fe:	e7be      	b.n	1577e <hci_num_completed_packets+0xae>
	parent->next = child;
   15800:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15802:	6263      	str	r3, [r4, #36]	; 0x24
}
   15804:	e7f4      	b.n	157f0 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   15806:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   15808:	f8df a010 	ldr.w	sl, [pc, #16]	; 1581c <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   1580c:	46a9      	mov	r9, r5
   1580e:	e793      	b.n	15738 <hci_num_completed_packets+0x68>
   15810:	000282c5 	.word	0x000282c5
   15814:	0002629c 	.word	0x0002629c
   15818:	000282ef 	.word	0x000282ef
   1581c:	0002830b 	.word	0x0002830b

00015820 <le_conn_update_complete>:
{
   15820:	b5f0      	push	{r4, r5, r6, r7, lr}
   15822:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15824:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   15826:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1582a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1582c:	4630      	mov	r0, r6
   1582e:	f002 fa53 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   15832:	4604      	mov	r4, r0
   15834:	b988      	cbnz	r0, 1585a <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15836:	466c      	mov	r4, sp
   15838:	b088      	sub	sp, #32
   1583a:	466a      	mov	r2, sp
   1583c:	4b2d      	ldr	r3, [pc, #180]	; (158f4 <le_conn_update_complete+0xd4>)
   1583e:	482e      	ldr	r0, [pc, #184]	; (158f8 <le_conn_update_complete+0xd8>)
   15840:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15844:	2303      	movs	r3, #3
   15846:	f842 3f10 	str.w	r3, [r2, #16]!
   1584a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1584e:	f00e fb9e 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15852:	46a5      	mov	sp, r4
}
   15854:	370c      	adds	r7, #12
   15856:	46bd      	mov	sp, r7
   15858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1585a:	782b      	ldrb	r3, [r5, #0]
   1585c:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   1585e:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15862:	d117      	bne.n	15894 <le_conn_update_complete+0x74>
   15864:	78c3      	ldrb	r3, [r0, #3]
   15866:	2b01      	cmp	r3, #1
   15868:	d128      	bne.n	158bc <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1586a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1586e:	4630      	mov	r0, r6
   15870:	f00e fb7e 	bl	23f70 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15874:	0542      	lsls	r2, r0, #21
   15876:	d40d      	bmi.n	15894 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   15878:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1587c:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1587e:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   15880:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   15884:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15886:	4620      	mov	r0, r4
   15888:	f002 ffc4 	bl	18814 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   1588c:	4620      	mov	r0, r4
   1588e:	f002 f9eb 	bl	17c68 <bt_conn_unref>
   15892:	e7df      	b.n	15854 <le_conn_update_complete+0x34>
		if (!evt->status) {
   15894:	782b      	ldrb	r3, [r5, #0]
   15896:	b98b      	cbnz	r3, 158bc <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   15898:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1589c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   158a0:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   158a4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   158a8:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   158ac:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   158b0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   158b4:	4630      	mov	r0, r6
   158b6:	f00e fb6d 	bl	23f94 <atomic_and.isra.0>
}
   158ba:	e017      	b.n	158ec <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   158bc:	f3bf 8f5b 	dmb	ish
   158c0:	6863      	ldr	r3, [r4, #4]
   158c2:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   158c6:	05db      	lsls	r3, r3, #23
   158c8:	d5f2      	bpl.n	158b0 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   158ca:	782b      	ldrb	r3, [r5, #0]
   158cc:	2b20      	cmp	r3, #32
   158ce:	d1ef      	bne.n	158b0 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   158d0:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   158d4:	2b00      	cmp	r3, #0
   158d6:	d0eb      	beq.n	158b0 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   158d8:	3b01      	subs	r3, #1
   158da:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   158de:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   158e2:	2300      	movs	r3, #0
   158e4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   158e8:	f00a fdf4 	bl	204d4 <k_work_schedule>
		notify_le_param_updated(conn);
   158ec:	4620      	mov	r0, r4
   158ee:	f002 fb61 	bl	17fb4 <notify_le_param_updated>
   158f2:	e7cb      	b.n	1588c <le_conn_update_complete+0x6c>
   158f4:	0002811c 	.word	0x0002811c
   158f8:	0002629c 	.word	0x0002629c

000158fc <bt_hci_cmd_state_set_init>:
{
   158fc:	b510      	push	{r4, lr}
	state->bit = bit;
   158fe:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   15902:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15906:	720b      	strb	r3, [r1, #8]
{
   15908:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1590a:	f005 f92f 	bl	1ab6c <net_buf_id>
   1590e:	4b03      	ldr	r3, [pc, #12]	; (1591c <bt_hci_cmd_state_set_init+0x20>)
   15910:	220c      	movs	r2, #12
   15912:	fb02 3300 	mla	r3, r2, r0, r3
   15916:	605c      	str	r4, [r3, #4]
}
   15918:	bd10      	pop	{r4, pc}
   1591a:	bf00      	nop
   1591c:	20002bcc 	.word	0x20002bcc

00015920 <bt_hci_cmd_create>:
{
   15920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15924:	f04f 32ff 	mov.w	r2, #4294967295
   15928:	4606      	mov	r6, r0
   1592a:	f04f 33ff 	mov.w	r3, #4294967295
   1592e:	481e      	ldr	r0, [pc, #120]	; (159a8 <bt_hci_cmd_create+0x88>)
   15930:	460f      	mov	r7, r1
   15932:	f00f fc5b 	bl	251ec <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   15936:	4604      	mov	r4, r0
   15938:	b958      	cbnz	r0, 15952 <bt_hci_cmd_create+0x32>
   1593a:	491c      	ldr	r1, [pc, #112]	; (159ac <bt_hci_cmd_create+0x8c>)
   1593c:	481c      	ldr	r0, [pc, #112]	; (159b0 <bt_hci_cmd_create+0x90>)
   1593e:	4a1d      	ldr	r2, [pc, #116]	; (159b4 <bt_hci_cmd_create+0x94>)
   15940:	f44f 7381 	mov.w	r3, #258	; 0x102
   15944:	f00d fe59 	bl	235fa <assert_print>
   15948:	481a      	ldr	r0, [pc, #104]	; (159b4 <bt_hci_cmd_create+0x94>)
   1594a:	f44f 7181 	mov.w	r1, #258	; 0x102
   1594e:	f00d fe4d 	bl	235ec <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   15952:	f100 0a0c 	add.w	sl, r0, #12
   15956:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15958:	f04f 0800 	mov.w	r8, #0
   1595c:	4650      	mov	r0, sl
   1595e:	f005 fbd7 	bl	1b110 <net_buf_simple_reserve>
   15962:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   15966:	4620      	mov	r0, r4
   15968:	f005 f900 	bl	1ab6c <net_buf_id>
   1596c:	4d12      	ldr	r5, [pc, #72]	; (159b8 <bt_hci_cmd_create+0x98>)
   1596e:	f04f 090c 	mov.w	r9, #12
   15972:	fb09 5000 	mla	r0, r9, r0, r5
   15976:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   15978:	4620      	mov	r0, r4
   1597a:	f005 f8f7 	bl	1ab6c <net_buf_id>
   1597e:	fb09 5000 	mla	r0, r9, r0, r5
   15982:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   15986:	4620      	mov	r0, r4
   15988:	f005 f8f0 	bl	1ab6c <net_buf_id>
   1598c:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   15990:	2103      	movs	r1, #3
   15992:	4650      	mov	r0, sl
   15994:	f8c5 8004 	str.w	r8, [r5, #4]
   15998:	f005 fc38 	bl	1b20c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1599c:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1599e:	7087      	strb	r7, [r0, #2]
}
   159a0:	4620      	mov	r0, r4
   159a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   159a6:	bf00      	nop
   159a8:	20000a78 	.word	0x20000a78
   159ac:	000294a9 	.word	0x000294a9
   159b0:	00026f1a 	.word	0x00026f1a
   159b4:	00028188 	.word	0x00028188
   159b8:	20002bcc 	.word	0x20002bcc

000159bc <bt_hci_cmd_send_sync>:
{
   159bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159c0:	b087      	sub	sp, #28
   159c2:	4606      	mov	r6, r0
   159c4:	af00      	add	r7, sp, #0
   159c6:	4615      	mov	r5, r2
	if (!buf) {
   159c8:	460c      	mov	r4, r1
   159ca:	b921      	cbnz	r1, 159d6 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   159cc:	f7ff ffa8 	bl	15920 <bt_hci_cmd_create>
		if (!buf) {
   159d0:	4604      	mov	r4, r0
   159d2:	2800      	cmp	r0, #0
   159d4:	d05f      	beq.n	15a96 <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   159d6:	2201      	movs	r2, #1
   159d8:	2100      	movs	r1, #0
   159da:	4638      	mov	r0, r7
   159dc:	f010 f917 	bl	25c0e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   159e0:	4620      	mov	r0, r4
   159e2:	f005 f8c3 	bl	1ab6c <net_buf_id>
   159e6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 15a9c <bt_hci_cmd_send_sync+0xe0>
   159ea:	230c      	movs	r3, #12
   159ec:	fb03 9000 	mla	r0, r3, r0, r9
   159f0:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   159f2:	4620      	mov	r0, r4
   159f4:	f005 fb0a 	bl	1b00c <net_buf_ref>
   159f8:	4601      	mov	r1, r0
   159fa:	4829      	ldr	r0, [pc, #164]	; (15aa0 <bt_hci_cmd_send_sync+0xe4>)
   159fc:	f005 fa9c 	bl	1af38 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15a00:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15a04:	2300      	movs	r3, #0
   15a06:	4638      	mov	r0, r7
   15a08:	f00a f910 	bl	1fc2c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   15a0c:	4680      	mov	r8, r0
   15a0e:	b188      	cbz	r0, 15a34 <bt_hci_cmd_send_sync+0x78>
   15a10:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   15a14:	4a23      	ldr	r2, [pc, #140]	; (15aa4 <bt_hci_cmd_send_sync+0xe8>)
   15a16:	4924      	ldr	r1, [pc, #144]	; (15aa8 <bt_hci_cmd_send_sync+0xec>)
   15a18:	4824      	ldr	r0, [pc, #144]	; (15aac <bt_hci_cmd_send_sync+0xf0>)
   15a1a:	f00d fdee 	bl	235fa <assert_print>
   15a1e:	4824      	ldr	r0, [pc, #144]	; (15ab0 <bt_hci_cmd_send_sync+0xf4>)
   15a20:	4642      	mov	r2, r8
   15a22:	4631      	mov	r1, r6
   15a24:	f00d fde9 	bl	235fa <assert_print>
   15a28:	4040      	eors	r0, r0
   15a2a:	f380 8811 	msr	BASEPRI, r0
   15a2e:	f04f 0003 	mov.w	r0, #3
   15a32:	df02      	svc	2
	status = cmd(buf)->status;
   15a34:	4620      	mov	r0, r4
   15a36:	f005 f899 	bl	1ab6c <net_buf_id>
   15a3a:	230c      	movs	r3, #12
   15a3c:	4358      	muls	r0, r3
   15a3e:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   15a42:	f1b8 0f00 	cmp.w	r8, #0
   15a46:	d01e      	beq.n	15a86 <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   15a48:	466d      	mov	r5, sp
   15a4a:	b088      	sub	sp, #32
   15a4c:	466a      	mov	r2, sp
   15a4e:	4b19      	ldr	r3, [pc, #100]	; (15ab4 <bt_hci_cmd_send_sync+0xf8>)
   15a50:	f8c2 801c 	str.w	r8, [r2, #28]
   15a54:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15a58:	2304      	movs	r3, #4
   15a5a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a5e:	4816      	ldr	r0, [pc, #88]	; (15ab8 <bt_hci_cmd_send_sync+0xfc>)
   15a60:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   15a64:	f00e fa93 	bl	23f8e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15a68:	4620      	mov	r0, r4
   15a6a:	46ad      	mov	sp, r5
   15a6c:	f005 fa8a 	bl	1af84 <net_buf_unref>
			return -ECONNREFUSED;
   15a70:	f1b8 0f09 	cmp.w	r8, #9
   15a74:	bf14      	ite	ne
   15a76:	f06f 0004 	mvnne.w	r0, #4
   15a7a:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   15a7e:	371c      	adds	r7, #28
   15a80:	46bd      	mov	sp, r7
   15a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   15a86:	b115      	cbz	r5, 15a8e <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   15a88:	602c      	str	r4, [r5, #0]
	return 0;
   15a8a:	2000      	movs	r0, #0
   15a8c:	e7f7      	b.n	15a7e <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   15a8e:	4620      	mov	r0, r4
   15a90:	f005 fa78 	bl	1af84 <net_buf_unref>
   15a94:	e7f9      	b.n	15a8a <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   15a96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15a9a:	e7f0      	b.n	15a7e <bt_hci_cmd_send_sync+0xc2>
   15a9c:	20002bcc 	.word	0x20002bcc
   15aa0:	200004cc 	.word	0x200004cc
   15aa4:	00028188 	.word	0x00028188
   15aa8:	000273e3 	.word	0x000273e3
   15aac:	00026f1a 	.word	0x00026f1a
   15ab0:	00028322 	.word	0x00028322
   15ab4:	0002834e 	.word	0x0002834e
   15ab8:	0002629c 	.word	0x0002629c

00015abc <hci_le_read_max_data_len>:
{
   15abc:	b570      	push	{r4, r5, r6, lr}
   15abe:	b088      	sub	sp, #32
   15ac0:	4606      	mov	r6, r0
   15ac2:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15ac4:	aa01      	add	r2, sp, #4
   15ac6:	2100      	movs	r1, #0
   15ac8:	f242 002f 	movw	r0, #8239	; 0x202f
   15acc:	f7ff ff76 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   15ad0:	4604      	mov	r4, r0
   15ad2:	b160      	cbz	r0, 15aee <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   15ad4:	4b0b      	ldr	r3, [pc, #44]	; (15b04 <hci_le_read_max_data_len+0x48>)
   15ad6:	9307      	str	r3, [sp, #28]
   15ad8:	480b      	ldr	r0, [pc, #44]	; (15b08 <hci_le_read_max_data_len+0x4c>)
   15ada:	2302      	movs	r3, #2
   15adc:	aa06      	add	r2, sp, #24
   15ade:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15ae2:	9306      	str	r3, [sp, #24]
   15ae4:	f00e fa53 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   15ae8:	4620      	mov	r0, r4
   15aea:	b008      	add	sp, #32
   15aec:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15aee:	9801      	ldr	r0, [sp, #4]
   15af0:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15af2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15af6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15af8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15afc:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15afe:	f005 fa41 	bl	1af84 <net_buf_unref>
	return 0;
   15b02:	e7f1      	b.n	15ae8 <hci_le_read_max_data_len+0x2c>
   15b04:	0002836a 	.word	0x0002836a
   15b08:	0002629c 	.word	0x0002629c

00015b0c <bt_hci_le_rand>:
{
   15b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15b0e:	4b14      	ldr	r3, [pc, #80]	; (15b60 <bt_hci_le_rand+0x54>)
   15b10:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   15b14:	2b00      	cmp	r3, #0
{
   15b16:	4605      	mov	r5, r0
   15b18:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15b1a:	da1d      	bge.n	15b58 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   15b1c:	b914      	cbnz	r4, 15b24 <bt_hci_le_rand+0x18>
	return 0;
   15b1e:	4620      	mov	r0, r4
}
   15b20:	b003      	add	sp, #12
   15b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   15b24:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15b26:	aa01      	add	r2, sp, #4
   15b28:	f04f 0100 	mov.w	r1, #0
   15b2c:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   15b30:	4626      	mov	r6, r4
   15b32:	bf28      	it	cs
   15b34:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15b36:	f7ff ff41 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   15b3a:	2800      	cmp	r0, #0
   15b3c:	d1f0      	bne.n	15b20 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   15b3e:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   15b40:	68f9      	ldr	r1, [r7, #12]
   15b42:	4632      	mov	r2, r6
   15b44:	3101      	adds	r1, #1
   15b46:	4628      	mov	r0, r5
   15b48:	f00e f964 	bl	23e14 <memcpy>
		net_buf_unref(rsp);
   15b4c:	4638      	mov	r0, r7
   15b4e:	f005 fa19 	bl	1af84 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   15b52:	4435      	add	r5, r6
		len -= count;
   15b54:	1ba4      	subs	r4, r4, r6
   15b56:	e7e1      	b.n	15b1c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   15b58:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15b5c:	e7e0      	b.n	15b20 <bt_hci_le_rand+0x14>
   15b5e:	bf00      	nop
   15b60:	20000388 	.word	0x20000388

00015b64 <bt_hci_le_enh_conn_complete>:
{
   15b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b68:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   15b6a:	4bae      	ldr	r3, [pc, #696]	; (15e24 <bt_hci_le_enh_conn_complete+0x2c0>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15b6c:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15b70:	8819      	ldrh	r1, [r3, #0]
   15b72:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   15b76:	4291      	cmp	r1, r2
   15b78:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   15b7c:	bf08      	it	eq
   15b7e:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
   15b80:	7804      	ldrb	r4, [r0, #0]
{
   15b82:	af02      	add	r7, sp, #8
   15b84:	4605      	mov	r5, r0
			return true;
   15b86:	bf08      	it	eq
   15b88:	2601      	moveq	r6, #1
	if (evt->status) {
   15b8a:	b3a4      	cbz	r4, 15bf6 <bt_hci_le_enh_conn_complete+0x92>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15b8c:	2c3c      	cmp	r4, #60	; 0x3c
   15b8e:	d122      	bne.n	15bd6 <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15b90:	f001 fa8e 	bl	170b0 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15b94:	f06f 0180 	mvn.w	r1, #128	; 0x80
   15b98:	3010      	adds	r0, #16
   15b9a:	f00e f9fb 	bl	23f94 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15b9e:	2000      	movs	r0, #0
   15ba0:	f7ff fa84 	bl	150ac <find_pending_connect.part.0>
		if (!conn) {
   15ba4:	4605      	mov	r5, r0
   15ba6:	b970      	cbnz	r0, 15bc6 <bt_hci_le_enh_conn_complete+0x62>
			LOG_ERR("No pending peripheral connection");
   15ba8:	4b9f      	ldr	r3, [pc, #636]	; (15e28 <bt_hci_le_enh_conn_complete+0x2c4>)
   15baa:	627b      	str	r3, [r7, #36]	; 0x24
   15bac:	2302      	movs	r3, #2
   15bae:	489f      	ldr	r0, [pc, #636]	; (15e2c <bt_hci_le_enh_conn_complete+0x2c8>)
   15bb0:	623b      	str	r3, [r7, #32]
   15bb2:	f107 0220 	add.w	r2, r7, #32
   15bb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15bba:	f00e f9e8 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   15bbe:	3728      	adds	r7, #40	; 0x28
   15bc0:	46bd      	mov	sp, r7
   15bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   15bc6:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15bc8:	2100      	movs	r1, #0
   15bca:	f002 f88d 	bl	17ce8 <bt_conn_set_state>
		bt_conn_unref(conn);
   15bce:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   15bd0:	f002 f84a 	bl	17c68 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15bd4:	e7f3      	b.n	15bbe <bt_hci_le_enh_conn_complete+0x5a>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   15bd6:	466d      	mov	r5, sp
   15bd8:	b088      	sub	sp, #32
   15bda:	aa02      	add	r2, sp, #8
   15bdc:	4b94      	ldr	r3, [pc, #592]	; (15e30 <bt_hci_le_enh_conn_complete+0x2cc>)
   15bde:	4893      	ldr	r0, [pc, #588]	; (15e2c <bt_hci_le_enh_conn_complete+0x2c8>)
   15be0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15be4:	2303      	movs	r3, #3
   15be6:	f842 3f10 	str.w	r3, [r2, #16]!
   15bea:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15bee:	f00e f9ce 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15bf2:	46ad      	mov	sp, r5
		return;
   15bf4:	e7e3      	b.n	15bbe <bt_hci_le_enh_conn_complete+0x5a>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   15bf6:	78c3      	ldrb	r3, [r0, #3]
   15bf8:	2b01      	cmp	r3, #1
   15bfa:	bf08      	it	eq
   15bfc:	4b8d      	ldreq	r3, [pc, #564]	; (15e34 <bt_hci_le_enh_conn_complete+0x2d0>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   15bfe:	f100 0904 	add.w	r9, r0, #4
   15c02:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   15c04:	bf08      	it	eq
   15c06:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   15c0a:	f00e f99a 	bl	23f42 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   15c0e:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   15c10:	b348      	cbz	r0, 15c66 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   15c12:	f107 0010 	add.w	r0, r7, #16
   15c16:	f00e f98a 	bl	23f2e <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   15c1a:	2206      	movs	r2, #6
   15c1c:	f105 0111 	add.w	r1, r5, #17
   15c20:	f107 0009 	add.w	r0, r7, #9
   15c24:	f00e f8f6 	bl	23e14 <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   15c28:	2301      	movs	r3, #1
   15c2a:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15c2c:	78eb      	ldrb	r3, [r5, #3]
   15c2e:	2b01      	cmp	r3, #1
   15c30:	d029      	beq.n	15c86 <bt_hci_le_enh_conn_complete+0x122>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   15c32:	4648      	mov	r0, r9
   15c34:	f7ff f8f0 	bl	14e18 <bt_addr_le_str>
   15c38:	466c      	mov	r4, sp
   15c3a:	b088      	sub	sp, #32
   15c3c:	aa02      	add	r2, sp, #8
   15c3e:	4b7e      	ldr	r3, [pc, #504]	; (15e38 <bt_hci_le_enh_conn_complete+0x2d4>)
   15c40:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15c44:	f44f 7300 	mov.w	r3, #512	; 0x200
   15c48:	8393      	strh	r3, [r2, #28]
   15c4a:	4b7c      	ldr	r3, [pc, #496]	; (15e3c <bt_hci_le_enh_conn_complete+0x2d8>)
   15c4c:	f842 3f10 	str.w	r3, [r2, #16]!
   15c50:	4876      	ldr	r0, [pc, #472]	; (15e2c <bt_hci_le_enh_conn_complete+0x2c8>)
   15c52:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   15c56:	f00e f99a 	bl	23f8e <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15c5a:	211f      	movs	r1, #31
   15c5c:	46a5      	mov	sp, r4
   15c5e:	4640      	mov	r0, r8
   15c60:	f00e f9a4 	bl	23fac <bt_hci_disconnect>
		return;
   15c64:	e7ab      	b.n	15bbe <bt_hci_le_enh_conn_complete+0x5a>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   15c66:	4620      	mov	r0, r4
   15c68:	f00e fa50 	bl	2410c <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   15c6c:	2207      	movs	r2, #7
   15c6e:	4601      	mov	r1, r0
   15c70:	f107 0010 	add.w	r0, r7, #16
   15c74:	f00e f8ce 	bl	23e14 <memcpy>
   15c78:	2207      	movs	r2, #7
   15c7a:	4649      	mov	r1, r9
   15c7c:	f107 0008 	add.w	r0, r7, #8
   15c80:	f00e f8c8 	bl	23e14 <memcpy>
}
   15c84:	e7d2      	b.n	15c2c <bt_hci_le_enh_conn_complete+0xc8>
   15c86:	f107 0010 	add.w	r0, r7, #16
   15c8a:	f7ff fa0f 	bl	150ac <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c8e:	78eb      	ldrb	r3, [r5, #3]
   15c90:	2b01      	cmp	r3, #1
   15c92:	4604      	mov	r4, r0
   15c94:	d10a      	bne.n	15cac <bt_hci_le_enh_conn_complete+0x148>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15c96:	f001 fa0b 	bl	170b0 <bt_le_adv_lookup_legacy>
   15c9a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   15c9e:	4682      	mov	sl, r0
   15ca0:	3010      	adds	r0, #16
   15ca2:	f00e f977 	bl	23f94 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   15ca6:	4650      	mov	r0, sl
   15ca8:	f00e fb3f 	bl	2432a <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   15cac:	2c00      	cmp	r4, #0
   15cae:	d0c0      	beq.n	15c32 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = sys_le16_to_cpu(evt->handle);
   15cb0:	4620      	mov	r0, r4
   15cb2:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   15cb6:	f820 3b90 	strh.w	r3, [r0], #144
	memcpy(dst, src, sizeof(*dst));
   15cba:	2207      	movs	r2, #7
   15cbc:	f107 0110 	add.w	r1, r7, #16
   15cc0:	f00e f8a8 	bl	23e14 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   15cc4:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   15cc8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15ccc:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   15cd0:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15cd4:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   15cd8:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   15cdc:	78eb      	ldrb	r3, [r5, #3]
   15cde:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   15ce0:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15ce2:	2b01      	cmp	r3, #1
	conn->err = 0U;
   15ce4:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15ce6:	d118      	bne.n	15d1a <bt_hci_le_enh_conn_complete+0x1b6>
   15ce8:	2207      	movs	r2, #7
   15cea:	f107 0108 	add.w	r1, r7, #8
   15cee:	f104 0097 	add.w	r0, r4, #151	; 0x97
   15cf2:	f00e f88f 	bl	23e14 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15cf6:	f001 f9db 	bl	170b0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   15cfa:	7a21      	ldrb	r1, [r4, #8]
   15cfc:	4d4d      	ldr	r5, [pc, #308]	; (15e34 <bt_hci_le_enh_conn_complete+0x2d0>)
   15cfe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   15d02:	4429      	add	r1, r5
   15d04:	2207      	movs	r2, #7
   15d06:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   15d0a:	f00e f883 	bl	23e14 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   15d0e:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   15d12:	065d      	lsls	r5, r3, #25
   15d14:	d501      	bpl.n	15d1a <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   15d16:	f001 fb93 	bl	17440 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15d1a:	2107      	movs	r1, #7
   15d1c:	4620      	mov	r0, r4
   15d1e:	f001 ffe3 	bl	17ce8 <bt_conn_set_state>
	if (is_disconnected) {
   15d22:	b11e      	cbz	r6, 15d2c <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15d24:	2101      	movs	r1, #1
   15d26:	4620      	mov	r0, r4
   15d28:	f001 ffde 	bl	17ce8 <bt_conn_set_state>
	bt_conn_connected(conn);
   15d2c:	4620      	mov	r0, r4
   15d2e:	f00e fb30 	bl	24392 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   15d32:	7aa3      	ldrb	r3, [r4, #10]
   15d34:	2b07      	cmp	r3, #7
   15d36:	d170      	bne.n	15e1a <bt_hci_le_enh_conn_complete+0x2b6>
   15d38:	f3bf 8f5b 	dmb	ish
   15d3c:	6863      	ldr	r3, [r4, #4]
   15d3e:	4d3d      	ldr	r5, [pc, #244]	; (15e34 <bt_hci_le_enh_conn_complete+0x2d0>)
   15d40:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15d44:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15d48:	d129      	bne.n	15d9e <bt_hci_le_enh_conn_complete+0x23a>
   15d4a:	78e3      	ldrb	r3, [r4, #3]
   15d4c:	b11b      	cbz	r3, 15d56 <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15d4e:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   15d52:	0718      	lsls	r0, r3, #28
   15d54:	d523      	bpl.n	15d9e <bt_hci_le_enh_conn_complete+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15d56:	2102      	movs	r1, #2
   15d58:	f242 0016 	movw	r0, #8214	; 0x2016
   15d5c:	f7ff fde0 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   15d60:	4606      	mov	r6, r0
   15d62:	2800      	cmp	r0, #0
   15d64:	d05b      	beq.n	15e1e <bt_hci_le_enh_conn_complete+0x2ba>
   15d66:	2102      	movs	r1, #2
   15d68:	300c      	adds	r0, #12
   15d6a:	f005 fa4f 	bl	1b20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15d6e:	8823      	ldrh	r3, [r4, #0]
   15d70:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   15d72:	2200      	movs	r2, #0
   15d74:	4631      	mov	r1, r6
   15d76:	f242 0016 	movw	r0, #8214	; 0x2016
   15d7a:	f7ff fe1f 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   15d7e:	b170      	cbz	r0, 15d9e <bt_hci_le_enh_conn_complete+0x23a>
			LOG_ERR("Failed read remote features (%d)", err);
   15d80:	466e      	mov	r6, sp
   15d82:	b088      	sub	sp, #32
   15d84:	aa02      	add	r2, sp, #8
   15d86:	4b2e      	ldr	r3, [pc, #184]	; (15e40 <bt_hci_le_enh_conn_complete+0x2dc>)
   15d88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15d8c:	2303      	movs	r3, #3
   15d8e:	f842 3f10 	str.w	r3, [r2, #16]!
   15d92:	4826      	ldr	r0, [pc, #152]	; (15e2c <bt_hci_le_enh_conn_complete+0x2c8>)
   15d94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15d98:	f00e f8f9 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15d9c:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   15d9e:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   15da2:	07d9      	lsls	r1, r3, #31
   15da4:	d516      	bpl.n	15dd4 <bt_hci_le_enh_conn_complete+0x270>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   15da6:	2100      	movs	r1, #0
   15da8:	2302      	movs	r3, #2
   15daa:	9100      	str	r1, [sp, #0]
   15dac:	461a      	mov	r2, r3
   15dae:	4620      	mov	r0, r4
   15db0:	f00e f935 	bl	2401e <bt_le_set_phy>
		if (err) {
   15db4:	b170      	cbz	r0, 15dd4 <bt_hci_le_enh_conn_complete+0x270>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   15db6:	466e      	mov	r6, sp
   15db8:	b088      	sub	sp, #32
   15dba:	aa02      	add	r2, sp, #8
   15dbc:	4b21      	ldr	r3, [pc, #132]	; (15e44 <bt_hci_le_enh_conn_complete+0x2e0>)
   15dbe:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15dc2:	2303      	movs	r3, #3
   15dc4:	f842 3f10 	str.w	r3, [r2, #16]!
   15dc8:	4818      	ldr	r0, [pc, #96]	; (15e2c <bt_hci_le_enh_conn_complete+0x2c8>)
   15dca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15dce:	f00e f8de 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15dd2:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   15dd4:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   15dd8:	069a      	lsls	r2, r3, #26
   15dda:	d51e      	bpl.n	15e1a <bt_hci_le_enh_conn_complete+0x2b6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15ddc:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   15de0:	689b      	ldr	r3, [r3, #8]
   15de2:	079b      	lsls	r3, r3, #30
   15de4:	d519      	bpl.n	15e1a <bt_hci_le_enh_conn_complete+0x2b6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15de6:	1db9      	adds	r1, r7, #6
   15de8:	1d38      	adds	r0, r7, #4
   15dea:	f7ff fe67 	bl	15abc <hci_le_read_max_data_len>
			if (!err) {
   15dee:	b9a0      	cbnz	r0, 15e1a <bt_hci_le_enh_conn_complete+0x2b6>
				err = bt_le_set_data_len(conn,
   15df0:	88fa      	ldrh	r2, [r7, #6]
   15df2:	88b9      	ldrh	r1, [r7, #4]
   15df4:	4620      	mov	r0, r4
   15df6:	f00e f8f4 	bl	23fe2 <bt_le_set_data_len>
				if (err) {
   15dfa:	b170      	cbz	r0, 15e1a <bt_hci_le_enh_conn_complete+0x2b6>
					LOG_ERR("Failed to set data len (%d)", err);
   15dfc:	466d      	mov	r5, sp
   15dfe:	b088      	sub	sp, #32
   15e00:	aa02      	add	r2, sp, #8
   15e02:	4b11      	ldr	r3, [pc, #68]	; (15e48 <bt_hci_le_enh_conn_complete+0x2e4>)
   15e04:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15e08:	2303      	movs	r3, #3
   15e0a:	f842 3f10 	str.w	r3, [r2, #16]!
   15e0e:	4807      	ldr	r0, [pc, #28]	; (15e2c <bt_hci_le_enh_conn_complete+0x2c8>)
   15e10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15e14:	f00e f8bb 	bl	23f8e <z_log_msg_static_create.constprop.0>
   15e18:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   15e1a:	4620      	mov	r0, r4
   15e1c:	e6d8      	b.n	15bd0 <bt_hci_le_enh_conn_complete+0x6c>
		return -ENOBUFS;
   15e1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15e22:	e7ad      	b.n	15d80 <bt_hci_le_enh_conn_complete+0x21c>
   15e24:	20002f2c 	.word	0x20002f2c
   15e28:	0002838a 	.word	0x0002838a
   15e2c:	0002629c 	.word	0x0002629c
   15e30:	000283ab 	.word	0x000283ab
   15e34:	20000388 	.word	0x20000388
   15e38:	000283c4 	.word	0x000283c4
   15e3c:	01000003 	.word	0x01000003
   15e40:	000283e0 	.word	0x000283e0
   15e44:	00028401 	.word	0x00028401
   15e48:	00028418 	.word	0x00028418

00015e4c <le_legacy_conn_complete>:
{
   15e4c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   15e4e:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
   15e50:	4c18      	ldr	r4, [pc, #96]	; (15eb4 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   15e52:	780b      	ldrb	r3, [r1, #0]
{
   15e54:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   15e56:	2207      	movs	r2, #7
	enh.status         = evt->status;
   15e58:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   15e5c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   15e60:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   15e64:	78cb      	ldrb	r3, [r1, #3]
   15e66:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   15e6a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   15e6e:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   15e72:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   15e76:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   15e7a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   15e7e:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   15e82:	7c4b      	ldrb	r3, [r1, #17]
   15e84:	f88d 301d 	strb.w	r3, [sp, #29]
   15e88:	3104      	adds	r1, #4
   15e8a:	a801      	add	r0, sp, #4
   15e8c:	f00d ffc2 	bl	23e14 <memcpy>
	memcpy(dst, src, sizeof(*dst));
   15e90:	4621      	mov	r1, r4
   15e92:	2206      	movs	r2, #6
   15e94:	f10d 000b 	add.w	r0, sp, #11
   15e98:	f00d ffbc 	bl	23e14 <memcpy>
   15e9c:	2206      	movs	r2, #6
   15e9e:	4621      	mov	r1, r4
   15ea0:	f10d 0011 	add.w	r0, sp, #17
   15ea4:	f00d ffb6 	bl	23e14 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   15ea8:	4668      	mov	r0, sp
   15eaa:	f7ff fe5b 	bl	15b64 <bt_hci_le_enh_conn_complete>
}
   15eae:	b008      	add	sp, #32
   15eb0:	bd10      	pop	{r4, pc}
   15eb2:	bf00      	nop
   15eb4:	00027fa4 	.word	0x00027fa4

00015eb8 <bt_send>:
	return bt_dev.drv->send(buf);
   15eb8:	4b02      	ldr	r3, [pc, #8]	; (15ec4 <bt_send+0xc>)
   15eba:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   15ebe:	695b      	ldr	r3, [r3, #20]
   15ec0:	4718      	bx	r3
   15ec2:	bf00      	nop
   15ec4:	20000388 	.word	0x20000388

00015ec8 <bt_hci_cmd_send>:
{
   15ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15eca:	4605      	mov	r5, r0
   15ecc:	af00      	add	r7, sp, #0
	if (!buf) {
   15ece:	460c      	mov	r4, r1
   15ed0:	b919      	cbnz	r1, 15eda <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   15ed2:	f7ff fd25 	bl	15920 <bt_hci_cmd_create>
		if (!buf) {
   15ed6:	4604      	mov	r4, r0
   15ed8:	b318      	cbz	r0, 15f22 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   15eda:	f640 4335 	movw	r3, #3125	; 0xc35
   15ede:	429d      	cmp	r5, r3
   15ee0:	d119      	bne.n	15f16 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   15ee2:	4620      	mov	r0, r4
   15ee4:	f7ff ffe8 	bl	15eb8 <bt_send>
		if (err) {
   15ee8:	4605      	mov	r5, r0
   15eea:	b188      	cbz	r0, 15f10 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   15eec:	466e      	mov	r6, sp
   15eee:	b088      	sub	sp, #32
   15ef0:	466a      	mov	r2, sp
   15ef2:	4b0d      	ldr	r3, [pc, #52]	; (15f28 <bt_hci_cmd_send+0x60>)
   15ef4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15ef8:	2303      	movs	r3, #3
   15efa:	480c      	ldr	r0, [pc, #48]	; (15f2c <bt_hci_cmd_send+0x64>)
   15efc:	f842 3f10 	str.w	r3, [r2, #16]!
   15f00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f04:	f00e f843 	bl	23f8e <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   15f08:	4620      	mov	r0, r4
   15f0a:	46b5      	mov	sp, r6
   15f0c:	f005 f83a 	bl	1af84 <net_buf_unref>
}
   15f10:	4628      	mov	r0, r5
   15f12:	46bd      	mov	sp, r7
   15f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   15f16:	4806      	ldr	r0, [pc, #24]	; (15f30 <bt_hci_cmd_send+0x68>)
   15f18:	4621      	mov	r1, r4
   15f1a:	f005 f80d 	bl	1af38 <net_buf_put>
	return 0;
   15f1e:	2500      	movs	r5, #0
   15f20:	e7f6      	b.n	15f10 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   15f22:	f06f 0568 	mvn.w	r5, #104	; 0x68
   15f26:	e7f3      	b.n	15f10 <bt_hci_cmd_send+0x48>
   15f28:	00028434 	.word	0x00028434
   15f2c:	0002629c 	.word	0x0002629c
   15f30:	200004cc 	.word	0x200004cc

00015f34 <le_conn_param_req>:
{
   15f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f38:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   15f3a:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15f3c:	78d9      	ldrb	r1, [r3, #3]
   15f3e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   15f40:	f8b3 8000 	ldrh.w	r8, [r3]
{
   15f44:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   15f46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15f4a:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   15f4c:	7959      	ldrb	r1, [r3, #5]
   15f4e:	791a      	ldrb	r2, [r3, #4]
   15f50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15f54:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   15f56:	799a      	ldrb	r2, [r3, #6]
   15f58:	79d9      	ldrb	r1, [r3, #7]
   15f5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   15f5e:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15f60:	7a1a      	ldrb	r2, [r3, #8]
   15f62:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   15f64:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15f68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   15f6c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   15f6e:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   15f70:	f001 feb2 	bl	17cd8 <bt_conn_lookup_handle>
	if (!conn) {
   15f74:	4606      	mov	r6, r0
   15f76:	b9b0      	cbnz	r0, 15fa6 <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15f78:	466d      	mov	r5, sp
   15f7a:	b088      	sub	sp, #32
   15f7c:	466a      	mov	r2, sp
   15f7e:	4b20      	ldr	r3, [pc, #128]	; (16000 <le_conn_param_req+0xcc>)
   15f80:	4820      	ldr	r0, [pc, #128]	; (16004 <le_conn_param_req+0xd0>)
   15f82:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15f86:	2303      	movs	r3, #3
   15f88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f8c:	f842 3f10 	str.w	r3, [r2, #16]!
   15f90:	f00d fffd 	bl	23f8e <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15f94:	2102      	movs	r1, #2
   15f96:	46ad      	mov	sp, r5
   15f98:	4620      	mov	r0, r4
   15f9a:	f00e f88c 	bl	240b6 <le_conn_param_neg_reply>
}
   15f9e:	3708      	adds	r7, #8
   15fa0:	46bd      	mov	sp, r7
   15fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   15fa6:	4639      	mov	r1, r7
   15fa8:	f002 f868 	bl	1807c <le_param_req>
   15fac:	b938      	cbnz	r0, 15fbe <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   15fae:	211e      	movs	r1, #30
   15fb0:	4620      	mov	r0, r4
   15fb2:	f00e f880 	bl	240b6 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15fb6:	4630      	mov	r0, r6
   15fb8:	f001 fe56 	bl	17c68 <bt_conn_unref>
   15fbc:	e7ef      	b.n	15f9e <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   15fbe:	210e      	movs	r1, #14
   15fc0:	f242 0020 	movw	r0, #8224	; 0x2020
   15fc4:	f7ff fcac 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   15fc8:	4605      	mov	r5, r0
   15fca:	2800      	cmp	r0, #0
   15fcc:	d0f3      	beq.n	15fb6 <le_conn_param_req+0x82>
   15fce:	210e      	movs	r1, #14
   15fd0:	300c      	adds	r0, #12
   15fd2:	f005 f91b 	bl	1b20c <net_buf_simple_add>
   15fd6:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   15fd8:	220e      	movs	r2, #14
   15fda:	2100      	movs	r1, #0
   15fdc:	f00d ff25 	bl	23e2a <memset>
	cp->handle = sys_cpu_to_le16(handle);
   15fe0:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   15fe4:	883b      	ldrh	r3, [r7, #0]
   15fe6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   15fe8:	887b      	ldrh	r3, [r7, #2]
   15fea:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   15fec:	88bb      	ldrh	r3, [r7, #4]
   15fee:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15ff0:	88fb      	ldrh	r3, [r7, #6]
   15ff2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   15ff4:	4629      	mov	r1, r5
   15ff6:	f242 0020 	movw	r0, #8224	; 0x2020
   15ffa:	f7ff ff65 	bl	15ec8 <bt_hci_cmd_send>
   15ffe:	e7da      	b.n	15fb6 <le_conn_param_req+0x82>
   16000:	0002811c 	.word	0x0002811c
   16004:	0002629c 	.word	0x0002629c

00016008 <hci_tx_thread>:
{
   16008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1600c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 16164 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
   16010:	f8df 9154 	ldr.w	r9, [pc, #340]	; 16168 <hci_tx_thread+0x160>
{
   16014:	b087      	sub	sp, #28
   16016:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   16018:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1601c:	4853      	ldr	r0, [pc, #332]	; (1616c <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1601e:	f36f 3394 	bfc	r3, #14, #7
   16022:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16026:	f001 fd9d 	bl	17b64 <bt_conn_prepare_events>
   1602a:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1602c:	484d      	ldr	r0, [pc, #308]	; (16164 <hci_tx_thread+0x15c>)
   1602e:	f04f 32ff 	mov.w	r2, #4294967295
   16032:	f04f 33ff 	mov.w	r3, #4294967295
   16036:	4629      	mov	r1, r5
   16038:	f00c fb22 	bl	22680 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1603c:	b160      	cbz	r0, 16058 <hci_tx_thread+0x50>
   1603e:	494c      	ldr	r1, [pc, #304]	; (16170 <hci_tx_thread+0x168>)
   16040:	484c      	ldr	r0, [pc, #304]	; (16174 <hci_tx_thread+0x16c>)
   16042:	f640 23c8 	movw	r3, #2760	; 0xac8
   16046:	464a      	mov	r2, r9
   16048:	f00d fad7 	bl	235fa <assert_print>
   1604c:	4040      	eors	r0, r0
   1604e:	f380 8811 	msr	BASEPRI, r0
   16052:	f04f 0003 	mov.w	r0, #3
   16056:	df02      	svc	2
{
   16058:	4e42      	ldr	r6, [pc, #264]	; (16164 <hci_tx_thread+0x15c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1605a:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   1605e:	b915      	cbnz	r5, 16066 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   16060:	f00b fab8 	bl	215d4 <z_impl_k_yield>
	while (1) {
   16064:	e7d8      	b.n	16018 <hci_tx_thread+0x10>
		switch (ev->state) {
   16066:	68f3      	ldr	r3, [r6, #12]
   16068:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1606c:	2b02      	cmp	r3, #2
   1606e:	d960      	bls.n	16132 <hci_tx_thread+0x12a>
   16070:	2b04      	cmp	r3, #4
   16072:	d168      	bne.n	16146 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16074:	7b33      	ldrb	r3, [r6, #12]
   16076:	2b00      	cmp	r3, #0
   16078:	d15e      	bne.n	16138 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1607a:	483f      	ldr	r0, [pc, #252]	; (16178 <hci_tx_thread+0x170>)
   1607c:	2200      	movs	r2, #0
   1607e:	2300      	movs	r3, #0
   16080:	f00f f8b9 	bl	251f6 <net_buf_get>
	BT_ASSERT(buf);
   16084:	4604      	mov	r4, r0
   16086:	b960      	cbnz	r0, 160a2 <hci_tx_thread+0x9a>
   16088:	493c      	ldr	r1, [pc, #240]	; (1617c <hci_tx_thread+0x174>)
   1608a:	483a      	ldr	r0, [pc, #232]	; (16174 <hci_tx_thread+0x16c>)
   1608c:	f640 235a 	movw	r3, #2650	; 0xa5a
   16090:	464a      	mov	r2, r9
   16092:	f00d fab2 	bl	235fa <assert_print>
   16096:	4040      	eors	r0, r0
   16098:	f380 8811 	msr	BASEPRI, r0
   1609c:	f04f 0003 	mov.w	r0, #3
   160a0:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   160a2:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 16180 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   160a6:	4837      	ldr	r0, [pc, #220]	; (16184 <hci_tx_thread+0x17c>)
   160a8:	f04f 33ff 	mov.w	r3, #4294967295
   160ac:	f04f 32ff 	mov.w	r2, #4294967295
   160b0:	f009 fdbc 	bl	1fc2c <z_impl_k_sem_take>
   160b4:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   160b8:	b18b      	cbz	r3, 160de <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   160ba:	4b33      	ldr	r3, [pc, #204]	; (16188 <hci_tx_thread+0x180>)
   160bc:	4833      	ldr	r0, [pc, #204]	; (1618c <hci_tx_thread+0x184>)
   160be:	617b      	str	r3, [r7, #20]
   160c0:	f107 0210 	add.w	r2, r7, #16
   160c4:	2302      	movs	r3, #2
   160c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   160ca:	613b      	str	r3, [r7, #16]
   160cc:	f00d ff5f 	bl	23f8e <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   160d0:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   160d4:	f004 ff56 	bl	1af84 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   160d8:	2300      	movs	r3, #0
   160da:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   160de:	4620      	mov	r0, r4
   160e0:	f004 ff94 	bl	1b00c <net_buf_ref>
   160e4:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   160e8:	4620      	mov	r0, r4
   160ea:	f7ff fee5 	bl	15eb8 <bt_send>
	if (err) {
   160ee:	b300      	cbz	r0, 16132 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   160f0:	46eb      	mov	fp, sp
   160f2:	b088      	sub	sp, #32
   160f4:	466a      	mov	r2, sp
   160f6:	4b26      	ldr	r3, [pc, #152]	; (16190 <hci_tx_thread+0x188>)
   160f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   160fc:	2303      	movs	r3, #3
   160fe:	f842 3f10 	str.w	r3, [r2, #16]!
   16102:	4822      	ldr	r0, [pc, #136]	; (1618c <hci_tx_thread+0x184>)
   16104:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16108:	f00d ff41 	bl	23f8e <z_log_msg_static_create.constprop.0>
   1610c:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   1610e:	481d      	ldr	r0, [pc, #116]	; (16184 <hci_tx_thread+0x17c>)
   16110:	f009 fd48 	bl	1fba4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16114:	4620      	mov	r0, r4
   16116:	f004 fd29 	bl	1ab6c <net_buf_id>
   1611a:	4b1e      	ldr	r3, [pc, #120]	; (16194 <hci_tx_thread+0x18c>)
   1611c:	220c      	movs	r2, #12
   1611e:	fb02 3000 	mla	r0, r2, r0, r3
   16122:	211f      	movs	r1, #31
   16124:	8840      	ldrh	r0, [r0, #2]
   16126:	4622      	mov	r2, r4
   16128:	f7ff fa0c 	bl	15544 <hci_cmd_done>
		net_buf_unref(buf);
   1612c:	4620      	mov	r0, r4
   1612e:	f004 ff29 	bl	1af84 <net_buf_unref>
	for (; count; ev++, count--) {
   16132:	3614      	adds	r6, #20
   16134:	3d01      	subs	r5, #1
   16136:	e792      	b.n	1605e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16138:	2b01      	cmp	r3, #1
   1613a:	d1fa      	bne.n	16132 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   1613c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1613e:	3838      	subs	r0, #56	; 0x38
   16140:	f002 f962 	bl	18408 <bt_conn_process_tx>
   16144:	e7f5      	b.n	16132 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16146:	466c      	mov	r4, sp
   16148:	b088      	sub	sp, #32
   1614a:	466a      	mov	r2, sp
   1614c:	4912      	ldr	r1, [pc, #72]	; (16198 <hci_tx_thread+0x190>)
   1614e:	480f      	ldr	r0, [pc, #60]	; (1618c <hci_tx_thread+0x184>)
		switch (ev->state) {
   16150:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16154:	f842 af10 	str.w	sl, [r2, #16]!
   16158:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1615c:	f00d ff17 	bl	23f8e <z_log_msg_static_create.constprop.0>
   16160:	46a5      	mov	sp, r4
   16162:	e7e6      	b.n	16132 <hci_tx_thread+0x12a>
   16164:	20000610 	.word	0x20000610
   16168:	00028188 	.word	0x00028188
   1616c:	20000624 	.word	0x20000624
   16170:	000273e3 	.word	0x000273e3
   16174:	00026f1a 	.word	0x00026f1a
   16178:	200004cc 	.word	0x200004cc
   1617c:	000294a9 	.word	0x000294a9
   16180:	20000388 	.word	0x20000388
   16184:	200004a8 	.word	0x200004a8
   16188:	00028456 	.word	0x00028456
   1618c:	0002629c 	.word	0x0002629c
   16190:	00028434 	.word	0x00028434
   16194:	20002bcc 	.word	0x20002bcc
   16198:	00028471 	.word	0x00028471

0001619c <hci_event_prio>:
{
   1619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161a0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   161a2:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   161a6:	4630      	mov	r0, r6
   161a8:	f00f f82f 	bl	2520a <net_buf_simple_headroom>
	state->len = buf->len;
   161ac:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   161b0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   161b4:	4605      	mov	r5, r0
   161b6:	d80c      	bhi.n	161d2 <hci_event_prio+0x36>
   161b8:	4a1c      	ldr	r2, [pc, #112]	; (1622c <hci_event_prio+0x90>)
   161ba:	491d      	ldr	r1, [pc, #116]	; (16230 <hci_event_prio+0x94>)
   161bc:	481d      	ldr	r0, [pc, #116]	; (16234 <hci_event_prio+0x98>)
   161be:	f640 636f 	movw	r3, #3695	; 0xe6f
   161c2:	f00d fa1a 	bl	235fa <assert_print>
   161c6:	4040      	eors	r0, r0
   161c8:	f380 8811 	msr	BASEPRI, r0
   161cc:	f04f 0003 	mov.w	r0, #3
   161d0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   161d2:	4630      	mov	r0, r6
   161d4:	2102      	movs	r1, #2
   161d6:	f004 fffb 	bl	1b1d0 <net_buf_simple_pull_mem>
   161da:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   161dc:	7800      	ldrb	r0, [r0, #0]
   161de:	f00d feb4 	bl	23f4a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   161e2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   161e4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   161e6:	d40c      	bmi.n	16202 <hci_event_prio+0x66>
   161e8:	4a10      	ldr	r2, [pc, #64]	; (1622c <hci_event_prio+0x90>)
   161ea:	4913      	ldr	r1, [pc, #76]	; (16238 <hci_event_prio+0x9c>)
   161ec:	4811      	ldr	r0, [pc, #68]	; (16234 <hci_event_prio+0x98>)
   161ee:	f640 6373 	movw	r3, #3699	; 0xe73
   161f2:	f00d fa02 	bl	235fa <assert_print>
   161f6:	4040      	eors	r0, r0
   161f8:	f380 8811 	msr	BASEPRI, r0
   161fc:	f04f 0003 	mov.w	r0, #3
   16200:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16202:	2305      	movs	r3, #5
   16204:	4a0d      	ldr	r2, [pc, #52]	; (1623c <hci_event_prio+0xa0>)
   16206:	7838      	ldrb	r0, [r7, #0]
   16208:	4621      	mov	r1, r4
   1620a:	f7ff f863 	bl	152d4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1620e:	07b3      	lsls	r3, r6, #30
   16210:	d507      	bpl.n	16222 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16212:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16214:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16218:	fa13 f585 	uxtah	r5, r3, r5
   1621c:	60e5      	str	r5, [r4, #12]
}
   1621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16222:	4620      	mov	r0, r4
}
   16224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16228:	f004 beac 	b.w	1af84 <net_buf_unref>
   1622c:	00028188 	.word	0x00028188
   16230:	000281bc 	.word	0x000281bc
   16234:	00026f1a 	.word	0x00026f1a
   16238:	00028492 	.word	0x00028492
   1623c:	000265d8 	.word	0x000265d8

00016240 <bt_recv>:
{
   16240:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16242:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   16244:	2b01      	cmp	r3, #1
{
   16246:	af00      	add	r7, sp, #0
   16248:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1624a:	d006      	beq.n	1625a <bt_recv+0x1a>
   1624c:	2b03      	cmp	r3, #3
   1624e:	d112      	bne.n	16276 <bt_recv+0x36>
			rx_queue_put(buf);
   16250:	f7fe ff6c 	bl	1512c <rx_queue_put>
		return 0;
   16254:	2000      	movs	r0, #0
}
   16256:	46bd      	mov	sp, r7
   16258:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1625a:	68c3      	ldr	r3, [r0, #12]
   1625c:	7818      	ldrb	r0, [r3, #0]
   1625e:	f00d fe74 	bl	23f4a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16262:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16264:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16266:	d502      	bpl.n	1626e <bt_recv+0x2e>
			hci_event_prio(buf);
   16268:	4620      	mov	r0, r4
   1626a:	f7ff ff97 	bl	1619c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1626e:	07ab      	lsls	r3, r5, #30
   16270:	d5f0      	bpl.n	16254 <bt_recv+0x14>
			rx_queue_put(buf);
   16272:	4620      	mov	r0, r4
   16274:	e7ec      	b.n	16250 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16276:	466d      	mov	r5, sp
   16278:	b088      	sub	sp, #32
   1627a:	466a      	mov	r2, sp
   1627c:	4908      	ldr	r1, [pc, #32]	; (162a0 <bt_recv+0x60>)
   1627e:	4809      	ldr	r0, [pc, #36]	; (162a4 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   16280:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16284:	2303      	movs	r3, #3
   16286:	f842 3f10 	str.w	r3, [r2, #16]!
   1628a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1628e:	f00d fe7e 	bl	23f8e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16292:	4620      	mov	r0, r4
   16294:	46ad      	mov	sp, r5
   16296:	f004 fe75 	bl	1af84 <net_buf_unref>
		return -EINVAL;
   1629a:	f06f 0015 	mvn.w	r0, #21
   1629e:	e7da      	b.n	16256 <bt_recv+0x16>
   162a0:	000284ab 	.word	0x000284ab
   162a4:	0002629c 	.word	0x0002629c

000162a8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   162a8:	4a08      	ldr	r2, [pc, #32]	; (162cc <bt_hci_driver_register+0x24>)
{
   162aa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   162ac:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   162b0:	b930      	cbnz	r0, 162c0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   162b2:	68d9      	ldr	r1, [r3, #12]
   162b4:	b139      	cbz	r1, 162c6 <bt_hci_driver_register+0x1e>
   162b6:	6959      	ldr	r1, [r3, #20]
   162b8:	b129      	cbz	r1, 162c6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   162ba:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   162be:	4770      	bx	lr
		return -EALREADY;
   162c0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   162c4:	4770      	bx	lr
		return -EINVAL;
   162c6:	f06f 0015 	mvn.w	r0, #21
}
   162ca:	4770      	bx	lr
   162cc:	20000388 	.word	0x20000388

000162d0 <bt_finalize_init>:
{
   162d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   162d4:	4c45      	ldr	r4, [pc, #276]	; (163ec <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   162d6:	4846      	ldr	r0, [pc, #280]	; (163f0 <bt_finalize_init+0x120>)
   162d8:	4d46      	ldr	r5, [pc, #280]	; (163f4 <bt_finalize_init+0x124>)
{
   162da:	b083      	sub	sp, #12
   162dc:	2104      	movs	r1, #4
   162de:	af00      	add	r7, sp, #0
   162e0:	f00d fe46 	bl	23f70 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   162e4:	79e2      	ldrb	r2, [r4, #7]
   162e6:	4b44      	ldr	r3, [pc, #272]	; (163f8 <bt_finalize_init+0x128>)
   162e8:	4620      	mov	r0, r4
   162ea:	2a01      	cmp	r2, #1
   162ec:	bf88      	it	hi
   162ee:	461d      	movhi	r5, r3
   162f0:	466e      	mov	r6, sp
   162f2:	f7fe fd91 	bl	14e18 <bt_addr_le_str>
   162f6:	b08a      	sub	sp, #40	; 0x28
   162f8:	466b      	mov	r3, sp
   162fa:	4940      	ldr	r1, [pc, #256]	; (163fc <bt_finalize_init+0x12c>)
   162fc:	61d8      	str	r0, [r3, #28]
   162fe:	e9c3 1505 	strd	r1, r5, [r3, #20]
   16302:	493f      	ldr	r1, [pc, #252]	; (16400 <bt_finalize_init+0x130>)
   16304:	6079      	str	r1, [r7, #4]
   16306:	f103 0210 	add.w	r2, r3, #16
   1630a:	1d38      	adds	r0, r7, #4
   1630c:	f103 011f 	add.w	r1, r3, #31
   16310:	f103 0523 	add.w	r5, r3, #35	; 0x23
   16314:	f810 cb01 	ldrb.w	ip, [r0], #1
   16318:	f801 cf01 	strb.w	ip, [r1, #1]!
   1631c:	42a9      	cmp	r1, r5
   1631e:	d1f9      	bne.n	16314 <bt_finalize_init+0x44>
   16320:	4938      	ldr	r1, [pc, #224]	; (16404 <bt_finalize_init+0x134>)
   16322:	6119      	str	r1, [r3, #16]
   16324:	4838      	ldr	r0, [pc, #224]	; (16408 <bt_finalize_init+0x138>)
   16326:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 163ec <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1632a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1640c <bt_finalize_init+0x13c>
   1632e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 16408 <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16332:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   16336:	f00d fe2a 	bl	23f8e <z_log_msg_static_create.constprop.0>
   1633a:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   1633c:	4e34      	ldr	r6, [pc, #208]	; (16410 <bt_finalize_init+0x140>)
	for (i = 1; i < bt_dev.id_count; i++) {
   1633e:	2501      	movs	r5, #1
   16340:	79e3      	ldrb	r3, [r4, #7]
   16342:	429d      	cmp	r5, r3
   16344:	f10b 0b07 	add.w	fp, fp, #7
   16348:	db39      	blt.n	163be <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   1634a:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   1634e:	4628      	mov	r0, r5
   16350:	f7fe fe70 	bl	15034 <ver_str>
   16354:	466e      	mov	r6, sp
   16356:	b08c      	sub	sp, #48	; 0x30
   16358:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   1635c:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   16360:	466a      	mov	r2, sp
   16362:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 16414 <bt_finalize_init+0x144>
   16366:	6253      	str	r3, [r2, #36]	; 0x24
   16368:	e9c2 5107 	strd	r5, r1, [r2, #28]
   1636c:	4b2a      	ldr	r3, [pc, #168]	; (16418 <bt_finalize_init+0x148>)
   1636e:	f44f 7500 	mov.w	r5, #512	; 0x200
   16372:	e9c2 c005 	strd	ip, r0, [r2, #20]
   16376:	8515      	strh	r5, [r2, #40]	; 0x28
   16378:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   1637c:	f842 3f10 	str.w	r3, [r2, #16]!
   16380:	4821      	ldr	r0, [pc, #132]	; (16408 <bt_finalize_init+0x138>)
   16382:	f00d fe04 	bl	23f8e <z_log_msg_static_create.constprop.0>
   16386:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   16388:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   1638c:	4630      	mov	r0, r6
   1638e:	f7fe fe51 	bl	15034 <ver_str>
   16392:	b08a      	sub	sp, #40	; 0x28
   16394:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   16398:	466a      	mov	r2, sp
   1639a:	4920      	ldr	r1, [pc, #128]	; (1641c <bt_finalize_init+0x14c>)
   1639c:	8495      	strh	r5, [r2, #36]	; 0x24
   1639e:	e9c2 6307 	strd	r6, r3, [r2, #28]
   163a2:	4b1f      	ldr	r3, [pc, #124]	; (16420 <bt_finalize_init+0x150>)
   163a4:	e9c2 1005 	strd	r1, r0, [r2, #20]
   163a8:	f842 3f10 	str.w	r3, [r2, #16]!
   163ac:	4816      	ldr	r0, [pc, #88]	; (16408 <bt_finalize_init+0x138>)
   163ae:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   163b2:	f00d fdec 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   163b6:	370c      	adds	r7, #12
   163b8:	46bd      	mov	sp, r7
   163ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   163be:	4658      	mov	r0, fp
   163c0:	f7fe fd2a 	bl	14e18 <bt_addr_le_str>
   163c4:	46ea      	mov	sl, sp
   163c6:	b08a      	sub	sp, #40	; 0x28
   163c8:	466a      	mov	r2, sp
   163ca:	f240 3301 	movw	r3, #769	; 0x301
   163ce:	e9c2 6505 	strd	r6, r5, [r2, #20]
   163d2:	61d0      	str	r0, [r2, #28]
   163d4:	8413      	strh	r3, [r2, #32]
   163d6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   163da:	f842 8f10 	str.w	r8, [r2, #16]!
   163de:	4648      	mov	r0, r9
   163e0:	f00d fdd5 	bl	23f8e <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   163e4:	3501      	adds	r5, #1
   163e6:	46d5      	mov	sp, sl
   163e8:	e7aa      	b.n	16340 <bt_finalize_init+0x70>
   163ea:	bf00      	nop
   163ec:	20000388 	.word	0x20000388
   163f0:	2000045c 	.word	0x2000045c
   163f4:	0002948e 	.word	0x0002948e
   163f8:	000284bf 	.word	0x000284bf
   163fc:	000284c3 	.word	0x000284c3
   16400:	03010200 	.word	0x03010200
   16404:	02000004 	.word	0x02000004
   16408:	0002629c 	.word	0x0002629c
   1640c:	01000004 	.word	0x01000004
   16410:	000284d2 	.word	0x000284d2
   16414:	000284e3 	.word	0x000284e3
   16418:	01000006 	.word	0x01000006
   1641c:	00028521 	.word	0x00028521
   16420:	01000005 	.word	0x01000005

00016424 <bt_init>:
{
   16424:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16426:	4dc0      	ldr	r5, [pc, #768]	; (16728 <bt_init+0x304>)
{
   16428:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1642a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   1642e:	6899      	ldr	r1, [r3, #8]
   16430:	f011 0101 	ands.w	r1, r1, #1
{
   16434:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16436:	d122      	bne.n	1647e <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   16438:	f107 0208 	add.w	r2, r7, #8
   1643c:	f640 4003 	movw	r0, #3075	; 0xc03
   16440:	f7ff fabc 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   16444:	4604      	mov	r4, r0
   16446:	2800      	cmp	r0, #0
   16448:	d170      	bne.n	1652c <bt_init+0x108>
		hci_reset_complete(rsp);
   1644a:	68b8      	ldr	r0, [r7, #8]
	uint8_t status = buf->data[0];
   1644c:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   1644e:	781b      	ldrb	r3, [r3, #0]
   16450:	b99b      	cbnz	r3, 1647a <bt_init+0x56>
   16452:	f3bf 8f5b 	dmb	ish
   16456:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   1645a:	f3bf 8f5b 	dmb	ish
   1645e:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16462:	f003 0309 	and.w	r3, r3, #9
   16466:	f3bf 8f5b 	dmb	ish
   1646a:	e852 1f00 	ldrex	r1, [r2]
   1646e:	e842 3400 	strex	r4, r3, [r2]
   16472:	2c00      	cmp	r4, #0
   16474:	d1f9      	bne.n	1646a <bt_init+0x46>
   16476:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1647a:	f004 fd83 	bl	1af84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1647e:	f107 0208 	add.w	r2, r7, #8
   16482:	2100      	movs	r1, #0
   16484:	f241 0003 	movw	r0, #4099	; 0x1003
   16488:	f7ff fa98 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   1648c:	4604      	mov	r4, r0
   1648e:	2800      	cmp	r0, #0
   16490:	d14c      	bne.n	1652c <bt_init+0x108>
	read_local_features_complete(rsp);
   16492:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16494:	48a5      	ldr	r0, [pc, #660]	; (1672c <bt_init+0x308>)
   16496:	68f1      	ldr	r1, [r6, #12]
   16498:	2208      	movs	r2, #8
   1649a:	3101      	adds	r1, #1
   1649c:	f00d fcba 	bl	23e14 <memcpy>
	net_buf_unref(rsp);
   164a0:	4630      	mov	r0, r6
   164a2:	f004 fd6f 	bl	1af84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   164a6:	4621      	mov	r1, r4
   164a8:	f107 0208 	add.w	r2, r7, #8
   164ac:	f241 0001 	movw	r0, #4097	; 0x1001
   164b0:	f7ff fa84 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   164b4:	4604      	mov	r4, r0
   164b6:	2800      	cmp	r0, #0
   164b8:	d138      	bne.n	1652c <bt_init+0x108>
	read_local_ver_complete(rsp);
   164ba:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   164bc:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   164be:	785a      	ldrb	r2, [r3, #1]
   164c0:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   164c4:	885a      	ldrh	r2, [r3, #2]
   164c6:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   164ca:	791a      	ldrb	r2, [r3, #4]
   164cc:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   164d0:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   164d4:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   164d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   164dc:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   164e0:	f004 fd50 	bl	1af84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   164e4:	4621      	mov	r1, r4
   164e6:	f107 0208 	add.w	r2, r7, #8
   164ea:	f241 0002 	movw	r0, #4098	; 0x1002
   164ee:	f7ff fa65 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   164f2:	4604      	mov	r4, r0
   164f4:	b9d0      	cbnz	r0, 1652c <bt_init+0x108>
	read_supported_commands_complete(rsp);
   164f6:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   164f8:	488d      	ldr	r0, [pc, #564]	; (16730 <bt_init+0x30c>)
   164fa:	68f1      	ldr	r1, [r6, #12]
   164fc:	2240      	movs	r2, #64	; 0x40
   164fe:	3101      	adds	r1, #1
   16500:	f00d fc88 	bl	23e14 <memcpy>
	net_buf_unref(rsp);
   16504:	4630      	mov	r0, r6
   16506:	f004 fd3d 	bl	1af84 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1650a:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   1650e:	065e      	lsls	r6, r3, #25
   16510:	d410      	bmi.n	16534 <bt_init+0x110>
		LOG_ERR("Non-LE capable controller detected!");
   16512:	4b88      	ldr	r3, [pc, #544]	; (16734 <bt_init+0x310>)
   16514:	61fb      	str	r3, [r7, #28]
   16516:	2302      	movs	r3, #2
   16518:	4887      	ldr	r0, [pc, #540]	; (16738 <bt_init+0x314>)
   1651a:	61bb      	str	r3, [r7, #24]
   1651c:	f107 0218 	add.w	r2, r7, #24
   16520:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   16524:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   16528:	f00d fd31 	bl	23f8e <z_log_msg_static_create.constprop.0>
}
   1652c:	4620      	mov	r0, r4
   1652e:	3724      	adds	r7, #36	; 0x24
   16530:	46bd      	mov	sp, r7
   16532:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   16534:	4621      	mov	r1, r4
   16536:	f107 0208 	add.w	r2, r7, #8
   1653a:	f242 0003 	movw	r0, #8195	; 0x2003
   1653e:	f7ff fa3d 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   16542:	4604      	mov	r4, r0
   16544:	2800      	cmp	r0, #0
   16546:	d1f1      	bne.n	1652c <bt_init+0x108>
	read_le_features_complete(rsp);
   16548:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1654a:	487c      	ldr	r0, [pc, #496]	; (1673c <bt_init+0x318>)
   1654c:	68f1      	ldr	r1, [r6, #12]
   1654e:	2208      	movs	r2, #8
   16550:	3101      	adds	r1, #1
   16552:	f00d fc5f 	bl	23e14 <memcpy>
	net_buf_unref(rsp);
   16556:	4630      	mov	r0, r6
   16558:	f004 fd14 	bl	1af84 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1655c:	4621      	mov	r1, r4
   1655e:	f107 0208 	add.w	r2, r7, #8
   16562:	f242 0002 	movw	r0, #8194	; 0x2002
   16566:	f7ff fa29 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   1656a:	4604      	mov	r4, r0
   1656c:	2800      	cmp	r0, #0
   1656e:	d1dd      	bne.n	1652c <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   16570:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   16572:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16574:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16578:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   1657a:	b141      	cbz	r1, 1658e <bt_init+0x16a>
   1657c:	78d9      	ldrb	r1, [r3, #3]
   1657e:	b131      	cbz	r1, 1658e <bt_init+0x16a>
	bt_dev.le.acl_mtu = acl_mtu;
   16580:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16584:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16586:	486e      	ldr	r0, [pc, #440]	; (16740 <bt_init+0x31c>)
   16588:	4611      	mov	r1, r2
   1658a:	f00f fb40 	bl	25c0e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1658e:	4620      	mov	r0, r4
   16590:	f004 fcf8 	bl	1af84 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   16594:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   16598:	f016 0620 	ands.w	r6, r6, #32
   1659c:	d118      	bne.n	165d0 <bt_init+0x1ac>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1659e:	2102      	movs	r1, #2
   165a0:	f640 406d 	movw	r0, #3181	; 0xc6d
   165a4:	f7ff f9bc 	bl	15920 <bt_hci_cmd_create>
		if (!buf) {
   165a8:	4604      	mov	r4, r0
   165aa:	2800      	cmp	r0, #0
   165ac:	f000 80a8 	beq.w	16700 <bt_init+0x2dc>
	return net_buf_simple_add(&buf->b, len);
   165b0:	2102      	movs	r1, #2
   165b2:	300c      	adds	r0, #12
   165b4:	f004 fe2a 	bl	1b20c <net_buf_simple_add>
		cp_le->le = 0x01;
   165b8:	2301      	movs	r3, #1
   165ba:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   165bc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   165be:	4621      	mov	r1, r4
   165c0:	4632      	mov	r2, r6
   165c2:	f640 406d 	movw	r0, #3181	; 0xc6d
   165c6:	f7ff f9f9 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   165ca:	4604      	mov	r4, r0
   165cc:	2800      	cmp	r0, #0
   165ce:	d1ad      	bne.n	1652c <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   165d0:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   165d4:	071c      	lsls	r4, r3, #28
   165d6:	d513      	bpl.n	16600 <bt_init+0x1dc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   165d8:	f107 0208 	add.w	r2, r7, #8
   165dc:	2100      	movs	r1, #0
   165de:	f242 001c 	movw	r0, #8220	; 0x201c
   165e2:	f7ff f9eb 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   165e6:	4604      	mov	r4, r0
   165e8:	2800      	cmp	r0, #0
   165ea:	d19f      	bne.n	1652c <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   165ec:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   165ee:	68c3      	ldr	r3, [r0, #12]
   165f0:	f8d3 2001 	ldr.w	r2, [r3, #1]
   165f4:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   165f8:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   165fc:	f004 fcc2 	bl	1af84 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   16600:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16604:	0698      	lsls	r0, r3, #26
   16606:	d520      	bpl.n	1664a <bt_init+0x226>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16608:	1d39      	adds	r1, r7, #4
   1660a:	1cb8      	adds	r0, r7, #2
   1660c:	f7ff fa56 	bl	15abc <hci_le_read_max_data_len>
		if (err) {
   16610:	4604      	mov	r4, r0
   16612:	2800      	cmp	r0, #0
   16614:	d18a      	bne.n	1652c <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   16616:	2104      	movs	r1, #4
   16618:	f242 0024 	movw	r0, #8228	; 0x2024
   1661c:	f7ff f980 	bl	15920 <bt_hci_cmd_create>
		if (!buf) {
   16620:	4606      	mov	r6, r0
   16622:	2800      	cmp	r0, #0
   16624:	d06c      	beq.n	16700 <bt_init+0x2dc>
   16626:	2104      	movs	r1, #4
   16628:	300c      	adds	r0, #12
   1662a:	f004 fdef 	bl	1b20c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1662e:	887b      	ldrh	r3, [r7, #2]
   16630:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   16632:	88bb      	ldrh	r3, [r7, #4]
   16634:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   16636:	4622      	mov	r2, r4
   16638:	4631      	mov	r1, r6
   1663a:	f242 0024 	movw	r0, #8228	; 0x2024
   1663e:	f7ff f9bd 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   16642:	4604      	mov	r4, r0
   16644:	2800      	cmp	r0, #0
   16646:	f47f af71 	bne.w	1652c <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1664a:	2108      	movs	r1, #8
   1664c:	f242 0001 	movw	r0, #8193	; 0x2001
   16650:	f7ff f966 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   16654:	4604      	mov	r4, r0
   16656:	2800      	cmp	r0, #0
   16658:	d052      	beq.n	16700 <bt_init+0x2dc>
   1665a:	2108      	movs	r1, #8
   1665c:	300c      	adds	r0, #12
   1665e:	f004 fdd5 	bl	1b20c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   16662:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   16666:	f012 0f02 	tst.w	r2, #2
   1666a:	bf14      	ite	ne
   1666c:	232f      	movne	r3, #47	; 0x2f
   1666e:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   16670:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   16672:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   16676:	bf48      	it	mi
   16678:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1667c:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   16680:	bf18      	it	ne
   16682:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   16686:	2200      	movs	r2, #0
   16688:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1668a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1668e:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   16690:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   16692:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   16694:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   16696:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   16698:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1669a:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1669c:	4621      	mov	r1, r4
   1669e:	f242 0001 	movw	r0, #8193	; 0x2001
   166a2:	f7ff f98b 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   166a6:	4604      	mov	r4, r0
   166a8:	2800      	cmp	r0, #0
   166aa:	f47f af3f 	bne.w	1652c <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   166ae:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   166b2:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   166b6:	069a      	lsls	r2, r3, #26
   166b8:	d425      	bmi.n	16706 <bt_init+0x2e2>
	if (bt_dev.le.acl_mtu) {
   166ba:	b9d1      	cbnz	r1, 166f2 <bt_init+0x2ce>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   166bc:	f107 0208 	add.w	r2, r7, #8
   166c0:	f241 0005 	movw	r0, #4101	; 0x1005
   166c4:	f7ff f97a 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   166c8:	4604      	mov	r4, r0
   166ca:	2800      	cmp	r0, #0
   166cc:	f47f af2e 	bne.w	1652c <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   166d0:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   166d4:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   166d6:	b94b      	cbnz	r3, 166ec <bt_init+0x2c8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   166d8:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   166da:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   166de:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   166e2:	889a      	ldrh	r2, [r3, #4]
   166e4:	4816      	ldr	r0, [pc, #88]	; (16740 <bt_init+0x31c>)
   166e6:	4611      	mov	r1, r2
   166e8:	f00f fa91 	bl	25c0e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   166ec:	4620      	mov	r0, r4
   166ee:	f004 fc49 	bl	1af84 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   166f2:	2108      	movs	r1, #8
   166f4:	f640 4001 	movw	r0, #3073	; 0xc01
   166f8:	f7ff f912 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   166fc:	4604      	mov	r4, r0
   166fe:	bb18      	cbnz	r0, 16748 <bt_init+0x324>
		return -ENOBUFS;
   16700:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16704:	e712      	b.n	1652c <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   16706:	2900      	cmp	r1, #0
   16708:	d1f3      	bne.n	166f2 <bt_init+0x2ce>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1670a:	4b0e      	ldr	r3, [pc, #56]	; (16744 <bt_init+0x320>)
   1670c:	61fb      	str	r3, [r7, #28]
   1670e:	2302      	movs	r3, #2
   16710:	4809      	ldr	r0, [pc, #36]	; (16738 <bt_init+0x314>)
   16712:	61bb      	str	r3, [r7, #24]
   16714:	f107 0218 	add.w	r2, r7, #24
   16718:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1671c:	f00d fc37 	bl	23f8e <z_log_msg_static_create.constprop.0>
		return -EIO;
   16720:	f06f 0404 	mvn.w	r4, #4
   16724:	e702      	b.n	1652c <bt_init+0x108>
   16726:	bf00      	nop
   16728:	20000388 	.word	0x20000388
   1672c:	20000400 	.word	0x20000400
   16730:	20000408 	.word	0x20000408
   16734:	00028548 	.word	0x00028548
   16738:	0002629c 	.word	0x0002629c
   1673c:	20000460 	.word	0x20000460
   16740:	20000490 	.word	0x20000490
   16744:	0002856c 	.word	0x0002856c
   16748:	2108      	movs	r1, #8
   1674a:	300c      	adds	r0, #12
   1674c:	f004 fd5e 	bl	1b20c <net_buf_simple_add>
	dst[0] = val;
   16750:	2310      	movs	r3, #16
   16752:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   16754:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   16756:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   16758:	7043      	strb	r3, [r0, #1]
   1675a:	2602      	movs	r6, #2
   1675c:	2320      	movs	r3, #32
	dst[0] = val;
   1675e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   16760:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   16762:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   16764:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   16766:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   16768:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1676a:	4621      	mov	r1, r4
   1676c:	f640 4001 	movw	r0, #3073	; 0xc01
   16770:	f7ff f924 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   16774:	4604      	mov	r4, r0
   16776:	2800      	cmp	r0, #0
   16778:	f47f aed8 	bne.w	1652c <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1677c:	4601      	mov	r1, r0
   1677e:	1d3a      	adds	r2, r7, #4
   16780:	f64f 4001 	movw	r0, #64513	; 0xfc01
   16784:	f7ff f91a 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   16788:	b1c0      	cbz	r0, 167bc <bt_init+0x398>
		LOG_WRN("Vendor HCI extensions not available");
   1678a:	4b57      	ldr	r3, [pc, #348]	; (168e8 <bt_init+0x4c4>)
   1678c:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
   16790:	4856      	ldr	r0, [pc, #344]	; (168ec <bt_init+0x4c8>)
   16792:	f107 0218 	add.w	r2, r7, #24
   16796:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1679a:	f00d fbf8 	bl	23f8e <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   1679e:	f000 fb69 	bl	16e74 <bt_id_init>
	if (err) {
   167a2:	4604      	mov	r4, r0
   167a4:	2800      	cmp	r0, #0
   167a6:	f47f aec1 	bne.w	1652c <bt_init+0x108>
		err = bt_conn_init();
   167aa:	f001 febb 	bl	18524 <bt_conn_init>
		if (err) {
   167ae:	4604      	mov	r4, r0
   167b0:	2800      	cmp	r0, #0
   167b2:	f47f aebb 	bne.w	1652c <bt_init+0x108>
	bt_finalize_init();
   167b6:	f7ff fd8b 	bl	162d0 <bt_finalize_init>
	return 0;
   167ba:	e6b7      	b.n	1652c <bt_init+0x108>
	rp.info = (void *)rsp->data;
   167bc:	687b      	ldr	r3, [r7, #4]
   167be:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   167c0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   167c4:	2b03      	cmp	r3, #3
		return plat_str[platform];
   167c6:	bf96      	itet	ls
   167c8:	4a49      	ldrls	r2, [pc, #292]	; (168f0 <bt_init+0x4cc>)
	return "unknown";
   167ca:	494a      	ldrhi	r1, [pc, #296]	; (168f4 <bt_init+0x4d0>)
		return plat_str[platform];
   167cc:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   167d0:	466e      	mov	r6, sp
   167d2:	b08a      	sub	sp, #40	; 0x28
   167d4:	466a      	mov	r2, sp
   167d6:	4848      	ldr	r0, [pc, #288]	; (168f8 <bt_init+0x4d4>)
   167d8:	61d3      	str	r3, [r2, #28]
   167da:	f44f 7300 	mov.w	r3, #512	; 0x200
   167de:	8413      	strh	r3, [r2, #32]
   167e0:	4b46      	ldr	r3, [pc, #280]	; (168fc <bt_init+0x4d8>)
   167e2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   167e6:	f842 3f10 	str.w	r3, [r2, #16]!
   167ea:	4840      	ldr	r0, [pc, #256]	; (168ec <bt_init+0x4c8>)
   167ec:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   167f0:	f00d fbcd 	bl	23f8e <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   167f4:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   167f8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   167fc:	2a02      	cmp	r2, #2
   167fe:	46b5      	mov	sp, r6
   16800:	d14c      	bne.n	1689c <bt_init+0x478>
	if (variant < ARRAY_SIZE(nordic_str)) {
   16802:	2b03      	cmp	r3, #3
   16804:	d84a      	bhi.n	1689c <bt_init+0x478>
		return nordic_str[variant];
   16806:	4a3e      	ldr	r2, [pc, #248]	; (16900 <bt_init+0x4dc>)
   16808:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1680c:	466e      	mov	r6, sp
   1680e:	b08a      	sub	sp, #40	; 0x28
   16810:	466a      	mov	r2, sp
   16812:	483c      	ldr	r0, [pc, #240]	; (16904 <bt_init+0x4e0>)
   16814:	61d3      	str	r3, [r2, #28]
   16816:	f44f 7300 	mov.w	r3, #512	; 0x200
   1681a:	8413      	strh	r3, [r2, #32]
   1681c:	4b37      	ldr	r3, [pc, #220]	; (168fc <bt_init+0x4d8>)
   1681e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   16822:	f842 3f10 	str.w	r3, [r2, #16]!
   16826:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1682a:	4830      	ldr	r0, [pc, #192]	; (168ec <bt_init+0x4c8>)
   1682c:	f00d fbaf 	bl	23f8e <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   16830:	7963      	ldrb	r3, [r4, #5]
   16832:	f894 c006 	ldrb.w	ip, [r4, #6]
   16836:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1683a:	2b03      	cmp	r3, #3
   1683c:	46b5      	mov	sp, r6
		return var_str[variant];
   1683e:	bf98      	it	ls
   16840:	4a31      	ldrls	r2, [pc, #196]	; (16908 <bt_init+0x4e4>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   16842:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   16846:	bf94      	ite	ls
   16848:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   1684c:	4929      	ldrhi	r1, [pc, #164]	; (168f4 <bt_init+0x4d0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1684e:	466c      	mov	r4, sp
   16850:	b08c      	sub	sp, #48	; 0x30
   16852:	466a      	mov	r2, sp
   16854:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 1690c <bt_init+0x4e8>
   16858:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   1685c:	f44f 7300 	mov.w	r3, #512	; 0x200
   16860:	8593      	strh	r3, [r2, #44]	; 0x2c
   16862:	4b2b      	ldr	r3, [pc, #172]	; (16910 <bt_init+0x4ec>)
   16864:	e9c2 e105 	strd	lr, r1, [r2, #20]
   16868:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   1686c:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   16870:	f842 3f10 	str.w	r3, [r2, #16]!
   16874:	481d      	ldr	r0, [pc, #116]	; (168ec <bt_init+0x4c8>)
   16876:	f00d fb8a 	bl	23f8e <z_log_msg_static_create.constprop.0>
   1687a:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   1687c:	6878      	ldr	r0, [r7, #4]
   1687e:	f004 fb81 	bl	1af84 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   16882:	1d3a      	adds	r2, r7, #4
   16884:	2100      	movs	r1, #0
   16886:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1688a:	f7ff f897 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   1688e:	4604      	mov	r4, r0
   16890:	b130      	cbz	r0, 168a0 <bt_init+0x47c>
		LOG_WRN("Failed to read supported vendor commands");
   16892:	4b20      	ldr	r3, [pc, #128]	; (16914 <bt_init+0x4f0>)
			LOG_WRN("Failed to read supported vendor features");
   16894:	61fb      	str	r3, [r7, #28]
   16896:	2302      	movs	r3, #2
   16898:	61bb      	str	r3, [r7, #24]
   1689a:	e779      	b.n	16790 <bt_init+0x36c>
		return "unknown";
   1689c:	4915      	ldr	r1, [pc, #84]	; (168f4 <bt_init+0x4d0>)
   1689e:	e7b5      	b.n	1680c <bt_init+0x3e8>
	rp.cmds = (void *)rsp->data;
   168a0:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   168a2:	481d      	ldr	r0, [pc, #116]	; (16918 <bt_init+0x4f4>)
   168a4:	68f1      	ldr	r1, [r6, #12]
   168a6:	2202      	movs	r2, #2
   168a8:	3101      	adds	r1, #1
   168aa:	f00d fab3 	bl	23e14 <memcpy>
	net_buf_unref(rsp);
   168ae:	4630      	mov	r0, r6
   168b0:	f004 fb68 	bl	1af84 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   168b4:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   168b8:	075b      	lsls	r3, r3, #29
   168ba:	f57f af70 	bpl.w	1679e <bt_init+0x37a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   168be:	1d3a      	adds	r2, r7, #4
   168c0:	4621      	mov	r1, r4
   168c2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   168c6:	f7ff f879 	bl	159bc <bt_hci_cmd_send_sync>
		if (err) {
   168ca:	b108      	cbz	r0, 168d0 <bt_init+0x4ac>
			LOG_WRN("Failed to read supported vendor features");
   168cc:	4b13      	ldr	r3, [pc, #76]	; (1691c <bt_init+0x4f8>)
   168ce:	e7e1      	b.n	16894 <bt_init+0x470>
		rp.feat = (void *)rsp->data;
   168d0:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   168d2:	4813      	ldr	r0, [pc, #76]	; (16920 <bt_init+0x4fc>)
   168d4:	68e1      	ldr	r1, [r4, #12]
   168d6:	2201      	movs	r2, #1
   168d8:	4411      	add	r1, r2
   168da:	f00d fa9b 	bl	23e14 <memcpy>
		net_buf_unref(rsp);
   168de:	4620      	mov	r0, r4
   168e0:	f004 fb50 	bl	1af84 <net_buf_unref>
   168e4:	e75b      	b.n	1679e <bt_init+0x37a>
   168e6:	bf00      	nop
   168e8:	0002858f 	.word	0x0002858f
   168ec:	0002629c 	.word	0x0002629c
   168f0:	000265c8 	.word	0x000265c8
   168f4:	00028071 	.word	0x00028071
   168f8:	000285b3 	.word	0x000285b3
   168fc:	01000004 	.word	0x01000004
   16900:	000265b8 	.word	0x000265b8
   16904:	000285cc 	.word	0x000285cc
   16908:	000265a8 	.word	0x000265a8
   1690c:	000285e4 	.word	0x000285e4
   16910:	01000007 	.word	0x01000007
   16914:	00028611 	.word	0x00028611
   16918:	20000449 	.word	0x20000449
   1691c:	0002863a 	.word	0x0002863a
   16920:	20000448 	.word	0x20000448

00016924 <init_work>:
{
   16924:	b510      	push	{r4, lr}
	err = bt_init();
   16926:	f7ff fd7d 	bl	16424 <bt_init>
	if (ready_cb) {
   1692a:	4b03      	ldr	r3, [pc, #12]	; (16938 <init_work+0x14>)
   1692c:	681b      	ldr	r3, [r3, #0]
   1692e:	b113      	cbz	r3, 16936 <init_work+0x12>
}
   16930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16934:	4718      	bx	r3
}
   16936:	bd10      	pop	{r4, pc}
   16938:	20002be4 	.word	0x20002be4

0001693c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1693c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1693e:	4d3c      	ldr	r5, [pc, #240]	; (16a30 <bt_enable+0xf4>)
{
   16940:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   16942:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   16946:	af08      	add	r7, sp, #32
   16948:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1694a:	b983      	cbnz	r3, 1696e <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   1694c:	4b39      	ldr	r3, [pc, #228]	; (16a34 <bt_enable+0xf8>)
   1694e:	617b      	str	r3, [r7, #20]
   16950:	4839      	ldr	r0, [pc, #228]	; (16a38 <bt_enable+0xfc>)
   16952:	2302      	movs	r3, #2
   16954:	f107 0210 	add.w	r2, r7, #16
   16958:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1695c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   16960:	613b      	str	r3, [r7, #16]
   16962:	f00d fb14 	bl	23f8e <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16966:	4620      	mov	r0, r4
   16968:	371c      	adds	r7, #28
   1696a:	46bd      	mov	sp, r7
   1696c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1696e:	f06f 0102 	mvn.w	r1, #2
   16972:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   16976:	f00d fb0d 	bl	23f94 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1697a:	2101      	movs	r1, #1
   1697c:	f00d faf8 	bl	23f70 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16980:	ea10 0401 	ands.w	r4, r0, r1
   16984:	d150      	bne.n	16a28 <bt_enable+0xec>
	ready_cb = cb;
   16986:	4b2d      	ldr	r3, [pc, #180]	; (16a3c <bt_enable+0x100>)
   16988:	601e      	str	r6, [r3, #0]
   1698a:	460a      	mov	r2, r1
   1698c:	f505 7090 	add.w	r0, r5, #288	; 0x120
   16990:	f00f f93d 	bl	25c0e <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   16994:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   16998:	f00f f913 	bl	25bc2 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1699c:	2200      	movs	r2, #0
   1699e:	2300      	movs	r3, #0
   169a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   169a4:	f06f 0308 	mvn.w	r3, #8
   169a8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   169ac:	e9cd 4400 	strd	r4, r4, [sp]
   169b0:	4b23      	ldr	r3, [pc, #140]	; (16a40 <bt_enable+0x104>)
   169b2:	4924      	ldr	r1, [pc, #144]	; (16a44 <bt_enable+0x108>)
   169b4:	9404      	str	r4, [sp, #16]
   169b6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   169ba:	4823      	ldr	r0, [pc, #140]	; (16a48 <bt_enable+0x10c>)
   169bc:	f008 fd6e 	bl	1f49c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   169c0:	4922      	ldr	r1, [pc, #136]	; (16a4c <bt_enable+0x110>)
   169c2:	4821      	ldr	r0, [pc, #132]	; (16a48 <bt_enable+0x10c>)
   169c4:	f00f f8db 	bl	25b7e <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   169c8:	4821      	ldr	r0, [pc, #132]	; (16a50 <bt_enable+0x114>)
   169ca:	f009 fc5f 	bl	2028c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   169ce:	4921      	ldr	r1, [pc, #132]	; (16a54 <bt_enable+0x118>)
   169d0:	481f      	ldr	r0, [pc, #124]	; (16a50 <bt_enable+0x114>)
   169d2:	9400      	str	r4, [sp, #0]
   169d4:	f06f 0307 	mvn.w	r3, #7
   169d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   169dc:	f009 fc70 	bl	202c0 <k_work_queue_start>
   169e0:	491d      	ldr	r1, [pc, #116]	; (16a58 <bt_enable+0x11c>)
   169e2:	481b      	ldr	r0, [pc, #108]	; (16a50 <bt_enable+0x114>)
   169e4:	f00f f8cb 	bl	25b7e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   169e8:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   169ec:	68db      	ldr	r3, [r3, #12]
   169ee:	4798      	blx	r3
	if (err) {
   169f0:	4604      	mov	r4, r0
   169f2:	b178      	cbz	r0, 16a14 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   169f4:	466d      	mov	r5, sp
   169f6:	462a      	mov	r2, r5
   169f8:	b088      	sub	sp, #32
   169fa:	4b18      	ldr	r3, [pc, #96]	; (16a5c <bt_enable+0x120>)
   169fc:	e9c5 3005 	strd	r3, r0, [r5, #20]
   16a00:	2303      	movs	r3, #3
   16a02:	f842 3f10 	str.w	r3, [r2, #16]!
   16a06:	480c      	ldr	r0, [pc, #48]	; (16a38 <bt_enable+0xfc>)
   16a08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a0c:	f00d fabf 	bl	23f8e <z_log_msg_static_create.constprop.0>
   16a10:	46ad      	mov	sp, r5
		return err;
   16a12:	e7a8      	b.n	16966 <bt_enable+0x2a>
	if (!cb) {
   16a14:	b91e      	cbnz	r6, 16a1e <bt_enable+0xe2>
		return bt_init();
   16a16:	f7ff fd05 	bl	16424 <bt_init>
   16a1a:	4604      	mov	r4, r0
   16a1c:	e7a3      	b.n	16966 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   16a1e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   16a22:	f009 fc2d 	bl	20280 <k_work_submit>
	return 0;
   16a26:	e79e      	b.n	16966 <bt_enable+0x2a>
		return -EALREADY;
   16a28:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16a2c:	e79b      	b.n	16966 <bt_enable+0x2a>
   16a2e:	bf00      	nop
   16a30:	20000388 	.word	0x20000388
   16a34:	00028663 	.word	0x00028663
   16a38:	0002629c 	.word	0x0002629c
   16a3c:	20002be4 	.word	0x20002be4
   16a40:	00016009 	.word	0x00016009
   16a44:	20004740 	.word	0x20004740
   16a48:	20001d80 	.word	0x20001d80
   16a4c:	0002867c 	.word	0x0002867c
   16a50:	20001e00 	.word	0x20001e00
   16a54:	20004d80 	.word	0x20004d80
   16a58:	00028682 	.word	0x00028682
   16a5c:	00028688 	.word	0x00028688

00016a60 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16a60:	4b04      	ldr	r3, [pc, #16]	; (16a74 <bt_is_ready+0x14>)
   16a62:	f3bf 8f5b 	dmb	ish
   16a66:	6818      	ldr	r0, [r3, #0]
   16a68:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   16a6c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16a70:	4770      	bx	lr
   16a72:	bf00      	nop
   16a74:	2000045c 	.word	0x2000045c

00016a78 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16a78:	4800      	ldr	r0, [pc, #0]	; (16a7c <bt_get_name+0x4>)
   16a7a:	4770      	bx	lr
   16a7c:	00026ed4 	.word	0x00026ed4

00016a80 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16a82:	4f0a      	ldr	r7, [pc, #40]	; (16aac <id_find+0x2c>)
{
   16a84:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16a86:	2500      	movs	r5, #0
   16a88:	79fb      	ldrb	r3, [r7, #7]
   16a8a:	b2ec      	uxtb	r4, r5
   16a8c:	42a3      	cmp	r3, r4
   16a8e:	d802      	bhi.n	16a96 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16a90:	f06f 0001 	mvn.w	r0, #1
   16a94:	e009      	b.n	16aaa <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   16a96:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16a9a:	4439      	add	r1, r7
   16a9c:	4630      	mov	r0, r6
   16a9e:	f00d fb2a 	bl	240f6 <bt_addr_le_eq>
   16aa2:	3501      	adds	r5, #1
   16aa4:	2800      	cmp	r0, #0
   16aa6:	d0ef      	beq.n	16a88 <id_find+0x8>
   16aa8:	4620      	mov	r0, r4
}
   16aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16aac:	20000388 	.word	0x20000388

00016ab0 <set_random_address>:
{
   16ab0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   16ab2:	4913      	ldr	r1, [pc, #76]	; (16b00 <set_random_address+0x50>)
   16ab4:	2206      	movs	r2, #6
   16ab6:	4605      	mov	r5, r0
   16ab8:	f00d f99c 	bl	23df4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16abc:	b1d8      	cbz	r0, 16af6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16abe:	2106      	movs	r1, #6
   16ac0:	f242 0005 	movw	r0, #8197	; 0x2005
   16ac4:	f7fe ff2c 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   16ac8:	4604      	mov	r4, r0
   16aca:	b1b0      	cbz	r0, 16afa <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16acc:	2206      	movs	r2, #6
   16ace:	4629      	mov	r1, r5
   16ad0:	300c      	adds	r0, #12
   16ad2:	f00e fba6 	bl	25222 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16ad6:	2200      	movs	r2, #0
   16ad8:	4621      	mov	r1, r4
   16ada:	f242 0005 	movw	r0, #8197	; 0x2005
   16ade:	f7fe ff6d 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   16ae2:	b948      	cbnz	r0, 16af8 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   16ae4:	2206      	movs	r2, #6
   16ae6:	4806      	ldr	r0, [pc, #24]	; (16b00 <set_random_address+0x50>)
   16ae8:	4629      	mov	r1, r5
   16aea:	f00d f993 	bl	23e14 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   16aee:	4b05      	ldr	r3, [pc, #20]	; (16b04 <set_random_address+0x54>)
   16af0:	2201      	movs	r2, #1
   16af2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   16af6:	2000      	movs	r0, #0
}
   16af8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   16afa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16afe:	e7fb      	b.n	16af8 <set_random_address+0x48>
   16b00:	200003f1 	.word	0x200003f1
   16b04:	20000388 	.word	0x20000388

00016b08 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16b0a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   16b0c:	460d      	mov	r5, r1
   16b0e:	b179      	cbz	r1, 16b30 <id_create.constprop.0+0x28>
   16b10:	4914      	ldr	r1, [pc, #80]	; (16b64 <id_create.constprop.0+0x5c>)
   16b12:	4628      	mov	r0, r5
   16b14:	f00d faef 	bl	240f6 <bt_addr_le_eq>
   16b18:	b950      	cbnz	r0, 16b30 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   16b1a:	4813      	ldr	r0, [pc, #76]	; (16b68 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16b1c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16b20:	2207      	movs	r2, #7
   16b22:	4629      	mov	r1, r5
   16b24:	4420      	add	r0, r4
   16b26:	f00d f975 	bl	23e14 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   16b2a:	2000      	movs	r0, #0
}
   16b2c:	b003      	add	sp, #12
   16b2e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   16b30:	4668      	mov	r0, sp
   16b32:	f00d f9ee 	bl	23f12 <bt_addr_le_create_static>
			if (err) {
   16b36:	2800      	cmp	r0, #0
   16b38:	d1f8      	bne.n	16b2c <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   16b3a:	4668      	mov	r0, sp
   16b3c:	f7ff ffa0 	bl	16a80 <id_find>
   16b40:	2800      	cmp	r0, #0
   16b42:	daf5      	bge.n	16b30 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16b44:	4b08      	ldr	r3, [pc, #32]	; (16b68 <id_create.constprop.0+0x60>)
   16b46:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16b4a:	441c      	add	r4, r3
   16b4c:	2207      	movs	r2, #7
   16b4e:	4669      	mov	r1, sp
   16b50:	4620      	mov	r0, r4
   16b52:	f00d f95f 	bl	23e14 <memcpy>
		if (addr) {
   16b56:	2d00      	cmp	r5, #0
   16b58:	d0e7      	beq.n	16b2a <id_create.constprop.0+0x22>
   16b5a:	2207      	movs	r2, #7
   16b5c:	4621      	mov	r1, r4
   16b5e:	4628      	mov	r0, r5
   16b60:	e7e1      	b.n	16b26 <id_create.constprop.0+0x1e>
   16b62:	bf00      	nop
   16b64:	00027f97 	.word	0x00027f97
   16b68:	20000388 	.word	0x20000388

00016b6c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16b6c:	b570      	push	{r4, r5, r6, lr}
   16b6e:	460d      	mov	r5, r1
   16b70:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   16b72:	4604      	mov	r4, r0
   16b74:	b920      	cbnz	r0, 16b80 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16b76:	b31d      	cbz	r5, 16bc0 <bt_id_create+0x54>
			return -EINVAL;
   16b78:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   16b7c:	b006      	add	sp, #24
   16b7e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   16b80:	4921      	ldr	r1, [pc, #132]	; (16c08 <bt_id_create+0x9c>)
   16b82:	f00d fab8 	bl	240f6 <bt_addr_le_eq>
   16b86:	2800      	cmp	r0, #0
   16b88:	d1f5      	bne.n	16b76 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16b8a:	7823      	ldrb	r3, [r4, #0]
   16b8c:	2b01      	cmp	r3, #1
   16b8e:	d104      	bne.n	16b9a <bt_id_create+0x2e>
   16b90:	79a3      	ldrb	r3, [r4, #6]
   16b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16b96:	2bc0      	cmp	r3, #192	; 0xc0
   16b98:	d00a      	beq.n	16bb0 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   16b9a:	4b1c      	ldr	r3, [pc, #112]	; (16c0c <bt_id_create+0xa0>)
   16b9c:	9305      	str	r3, [sp, #20]
   16b9e:	481c      	ldr	r0, [pc, #112]	; (16c10 <bt_id_create+0xa4>)
   16ba0:	2302      	movs	r3, #2
   16ba2:	aa04      	add	r2, sp, #16
   16ba4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16ba8:	9304      	str	r3, [sp, #16]
   16baa:	f00d faac 	bl	24106 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   16bae:	e7e3      	b.n	16b78 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   16bb0:	4620      	mov	r0, r4
   16bb2:	f7ff ff65 	bl	16a80 <id_find>
   16bb6:	2800      	cmp	r0, #0
   16bb8:	dbdd      	blt.n	16b76 <bt_id_create+0xa>
			return -EALREADY;
   16bba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16bbe:	e7dd      	b.n	16b7c <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16bc0:	4d14      	ldr	r5, [pc, #80]	; (16c14 <bt_id_create+0xa8>)
   16bc2:	79eb      	ldrb	r3, [r5, #7]
   16bc4:	2b01      	cmp	r3, #1
   16bc6:	d01c      	beq.n	16c02 <bt_id_create+0x96>
   16bc8:	f3bf 8f5b 	dmb	ish
   16bcc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   16bd0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16bd4:	07db      	lsls	r3, r3, #31
   16bd6:	d50b      	bpl.n	16bf0 <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   16bd8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   16bda:	4621      	mov	r1, r4
   16bdc:	4630      	mov	r0, r6
   16bde:	f7ff ff93 	bl	16b08 <id_create.constprop.0>
	if (err) {
   16be2:	2800      	cmp	r0, #0
   16be4:	d1ca      	bne.n	16b7c <bt_id_create+0x10>
		bt_dev.id_count++;
   16be6:	79eb      	ldrb	r3, [r5, #7]
   16be8:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   16bea:	4630      	mov	r0, r6
		bt_dev.id_count++;
   16bec:	71eb      	strb	r3, [r5, #7]
	return new_id;
   16bee:	e7c5      	b.n	16b7c <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   16bf0:	2c00      	cmp	r4, #0
   16bf2:	d0c1      	beq.n	16b78 <bt_id_create+0xc>
   16bf4:	4904      	ldr	r1, [pc, #16]	; (16c08 <bt_id_create+0x9c>)
   16bf6:	4620      	mov	r0, r4
   16bf8:	f00d fa7d 	bl	240f6 <bt_addr_le_eq>
   16bfc:	2800      	cmp	r0, #0
   16bfe:	d0eb      	beq.n	16bd8 <bt_id_create+0x6c>
   16c00:	e7ba      	b.n	16b78 <bt_id_create+0xc>
		return -ENOMEM;
   16c02:	f06f 000b 	mvn.w	r0, #11
   16c06:	e7b9      	b.n	16b7c <bt_id_create+0x10>
   16c08:	00027f97 	.word	0x00027f97
   16c0c:	00028797 	.word	0x00028797
   16c10:	000262a4 	.word	0x000262a4
   16c14:	20000388 	.word	0x20000388

00016c18 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16c18:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   16c1a:	4604      	mov	r4, r0
{
   16c1c:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   16c1e:	b960      	cbnz	r0, 16c3a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   16c20:	4b1a      	ldr	r3, [pc, #104]	; (16c8c <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   16c22:	9307      	str	r3, [sp, #28]
   16c24:	481a      	ldr	r0, [pc, #104]	; (16c90 <bt_id_read_public_addr+0x78>)
   16c26:	2302      	movs	r3, #2
   16c28:	aa06      	add	r2, sp, #24
   16c2a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16c2e:	9306      	str	r3, [sp, #24]
   16c30:	f00d fa69 	bl	24106 <z_log_msg_static_create.constprop.0>
		return 0U;
   16c34:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16c36:	b008      	add	sp, #32
   16c38:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   16c3a:	aa01      	add	r2, sp, #4
   16c3c:	2100      	movs	r1, #0
   16c3e:	f241 0009 	movw	r0, #4105	; 0x1009
   16c42:	f7fe febb 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   16c46:	4606      	mov	r6, r0
   16c48:	b108      	cbz	r0, 16c4e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   16c4a:	4b12      	ldr	r3, [pc, #72]	; (16c94 <bt_id_read_public_addr+0x7c>)
   16c4c:	e7e9      	b.n	16c22 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   16c4e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   16c50:	4911      	ldr	r1, [pc, #68]	; (16c98 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16c52:	68dd      	ldr	r5, [r3, #12]
   16c54:	3501      	adds	r5, #1
   16c56:	2206      	movs	r2, #6
   16c58:	4628      	mov	r0, r5
   16c5a:	f00d f8cb 	bl	23df4 <memcmp>
   16c5e:	b918      	cbnz	r0, 16c68 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   16c60:	9801      	ldr	r0, [sp, #4]
   16c62:	f004 f98f 	bl	1af84 <net_buf_unref>
		return 0U;
   16c66:	e7e5      	b.n	16c34 <bt_id_read_public_addr+0x1c>
   16c68:	490c      	ldr	r1, [pc, #48]	; (16c9c <bt_id_read_public_addr+0x84>)
   16c6a:	2206      	movs	r2, #6
   16c6c:	4628      	mov	r0, r5
   16c6e:	f00d f8c1 	bl	23df4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16c72:	2800      	cmp	r0, #0
   16c74:	d0f4      	beq.n	16c60 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   16c76:	2206      	movs	r2, #6
   16c78:	4629      	mov	r1, r5
   16c7a:	1c60      	adds	r0, r4, #1
   16c7c:	f00d f8ca 	bl	23e14 <memcpy>
	net_buf_unref(rsp);
   16c80:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   16c82:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   16c84:	f004 f97e 	bl	1af84 <net_buf_unref>
	return 1U;
   16c88:	2001      	movs	r0, #1
   16c8a:	e7d4      	b.n	16c36 <bt_id_read_public_addr+0x1e>
   16c8c:	000287c5 	.word	0x000287c5
   16c90:	000262a4 	.word	0x000262a4
   16c94:	000287de 	.word	0x000287de
   16c98:	00027fa4 	.word	0x00027fa4
   16c9c:	00027f9e 	.word	0x00027f9e

00016ca0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   16ca0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   16ca2:	4668      	mov	r0, sp
   16ca4:	f7ff ffb8 	bl	16c18 <bt_id_read_public_addr>
   16ca8:	4b04      	ldr	r3, [pc, #16]	; (16cbc <bt_setup_public_id_addr+0x1c>)
   16caa:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16cac:	b118      	cbz	r0, 16cb6 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   16cae:	4669      	mov	r1, sp
   16cb0:	2000      	movs	r0, #0
   16cb2:	f7ff ff29 	bl	16b08 <id_create.constprop.0>
}
   16cb6:	b003      	add	sp, #12
   16cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   16cbc:	20000388 	.word	0x20000388

00016cc0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16cc4:	4b22      	ldr	r3, [pc, #136]	; (16d50 <bt_read_static_addr+0x90>)
   16cc6:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   16cca:	07db      	lsls	r3, r3, #31
{
   16ccc:	b088      	sub	sp, #32
   16cce:	4607      	mov	r7, r0
   16cd0:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16cd2:	d40e      	bmi.n	16cf2 <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   16cd4:	4b1f      	ldr	r3, [pc, #124]	; (16d54 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   16cd6:	9307      	str	r3, [sp, #28]
   16cd8:	481f      	ldr	r0, [pc, #124]	; (16d58 <bt_read_static_addr+0x98>)
   16cda:	2302      	movs	r3, #2
   16cdc:	aa06      	add	r2, sp, #24
   16cde:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   16ce2:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   16ce4:	9306      	str	r3, [sp, #24]
   16ce6:	f00d fa0e 	bl	24106 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   16cea:	4628      	mov	r0, r5
   16cec:	b008      	add	sp, #32
   16cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16cf2:	aa01      	add	r2, sp, #4
   16cf4:	2100      	movs	r1, #0
   16cf6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   16cfa:	f7fe fe5f 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   16cfe:	4604      	mov	r4, r0
   16d00:	b108      	cbz	r0, 16d06 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   16d02:	4b16      	ldr	r3, [pc, #88]	; (16d5c <bt_read_static_addr+0x9c>)
   16d04:	e7e7      	b.n	16cd6 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   16d06:	9b01      	ldr	r3, [sp, #4]
   16d08:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   16d0a:	7875      	ldrb	r5, [r6, #1]
   16d0c:	4545      	cmp	r5, r8
   16d0e:	bf28      	it	cs
   16d10:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   16d12:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   16d14:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   16d18:	42a5      	cmp	r5, r4
   16d1a:	dc0f      	bgt.n	16d3c <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   16d1c:	9801      	ldr	r0, [sp, #4]
   16d1e:	f004 f931 	bl	1af84 <net_buf_unref>
	if (!cnt) {
   16d22:	2d00      	cmp	r5, #0
   16d24:	d1e1      	bne.n	16cea <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   16d26:	4b0e      	ldr	r3, [pc, #56]	; (16d60 <bt_read_static_addr+0xa0>)
   16d28:	9307      	str	r3, [sp, #28]
   16d2a:	480b      	ldr	r0, [pc, #44]	; (16d58 <bt_read_static_addr+0x98>)
   16d2c:	2302      	movs	r3, #2
   16d2e:	aa06      	add	r2, sp, #24
   16d30:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16d34:	9306      	str	r3, [sp, #24]
   16d36:	f00d f9e6 	bl	24106 <z_log_msg_static_create.constprop.0>
   16d3a:	e7d6      	b.n	16cea <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   16d3c:	4631      	mov	r1, r6
   16d3e:	fb08 7004 	mla	r0, r8, r4, r7
   16d42:	2216      	movs	r2, #22
   16d44:	f00d f866 	bl	23e14 <memcpy>
	for (i = 0; i < cnt; i++) {
   16d48:	3401      	adds	r4, #1
   16d4a:	3616      	adds	r6, #22
   16d4c:	e7e4      	b.n	16d18 <bt_read_static_addr+0x58>
   16d4e:	bf00      	nop
   16d50:	20000388 	.word	0x20000388
   16d54:	000287fc 	.word	0x000287fc
   16d58:	000262a4 	.word	0x000262a4
   16d5c:	00028828 	.word	0x00028828
   16d60:	00028848 	.word	0x00028848

00016d64 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16d64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16d66:	4e15      	ldr	r6, [pc, #84]	; (16dbc <bt_setup_random_id_addr+0x58>)
   16d68:	79f4      	ldrb	r4, [r6, #7]
{
   16d6a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   16d6c:	b92c      	cbnz	r4, 16d7a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   16d6e:	2101      	movs	r1, #1
   16d70:	a802      	add	r0, sp, #8
   16d72:	f7ff ffa5 	bl	16cc0 <bt_read_static_addr>
   16d76:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   16d78:	b9c8      	cbnz	r0, 16dae <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   16d7a:	2100      	movs	r1, #0
   16d7c:	4608      	mov	r0, r1
}
   16d7e:	b009      	add	sp, #36	; 0x24
   16d80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   16d84:	f7ff bef2 	b.w	16b6c <bt_id_create>
   16d88:	ab02      	add	r3, sp, #8
   16d8a:	fb07 3105 	mla	r1, r7, r5, r3
   16d8e:	2206      	movs	r2, #6
   16d90:	f10d 0001 	add.w	r0, sp, #1
   16d94:	f00d f83e 	bl	23e14 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   16d98:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   16d9a:	4669      	mov	r1, sp
   16d9c:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   16d9e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   16da2:	f7ff feb1 	bl	16b08 <id_create.constprop.0>
				if (err) {
   16da6:	3401      	adds	r4, #1
   16da8:	b110      	cbz	r0, 16db0 <bt_setup_random_id_addr+0x4c>
}
   16daa:	b009      	add	sp, #36	; 0x24
   16dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   16dae:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   16db0:	79f3      	ldrb	r3, [r6, #7]
   16db2:	b2e5      	uxtb	r5, r4
   16db4:	42ab      	cmp	r3, r5
   16db6:	d8e7      	bhi.n	16d88 <bt_setup_random_id_addr+0x24>
			return 0;
   16db8:	2000      	movs	r0, #0
   16dba:	e7f6      	b.n	16daa <bt_setup_random_id_addr+0x46>
   16dbc:	20000388 	.word	0x20000388

00016dc0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   16dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16dc4:	4690      	mov	r8, r2
   16dc6:	460e      	mov	r6, r1
   16dc8:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   16dca:	4602      	mov	r2, r0
   16dcc:	2800      	cmp	r0, #0
   16dce:	d04b      	beq.n	16e68 <bt_id_set_adv_own_addr+0xa8>
   16dd0:	2b00      	cmp	r3, #0
   16dd2:	d049      	beq.n	16e68 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16dd4:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   16dd6:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16dd8:	d531      	bpl.n	16e3e <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16dda:	4f25      	ldr	r7, [pc, #148]	; (16e70 <bt_id_set_adv_own_addr+0xb0>)
   16ddc:	f1b8 0f00 	cmp.w	r8, #0
   16de0:	d013      	beq.n	16e0a <bt_id_set_adv_own_addr+0x4a>
   16de2:	0688      	lsls	r0, r1, #26
   16de4:	d40a      	bmi.n	16dfc <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16de6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16dea:	5cfb      	ldrb	r3, [r7, r3]
   16dec:	2b01      	cmp	r3, #1
   16dee:	d015      	beq.n	16e1c <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   16df0:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16df2:	06b2      	lsls	r2, r6, #26
   16df4:	d50f      	bpl.n	16e16 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16df6:	f043 0302 	orr.w	r3, r3, #2
   16dfa:	e00b      	b.n	16e14 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16dfc:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   16e00:	0659      	lsls	r1, r3, #25
   16e02:	d4f0      	bmi.n	16de6 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   16e04:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16e08:	e006      	b.n	16e18 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16e0a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16e0e:	5cfb      	ldrb	r3, [r7, r3]
   16e10:	2b01      	cmp	r3, #1
   16e12:	d003      	beq.n	16e1c <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   16e14:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   16e16:	2000      	movs	r0, #0
}
   16e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16e1c:	2107      	movs	r1, #7
   16e1e:	fb01 7104 	mla	r1, r1, r4, r7
   16e22:	3101      	adds	r1, #1
   16e24:	4610      	mov	r0, r2
   16e26:	f00d f976 	bl	24116 <bt_id_set_adv_random_addr>
				if (err) {
   16e2a:	2800      	cmp	r0, #0
   16e2c:	d1f4      	bne.n	16e18 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   16e2e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16e32:	5d3b      	ldrb	r3, [r7, r4]
   16e34:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16e36:	f1b8 0f00 	cmp.w	r8, #0
   16e3a:	d0ec      	beq.n	16e16 <bt_id_set_adv_own_addr+0x56>
   16e3c:	e7d9      	b.n	16df2 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   16e3e:	074b      	lsls	r3, r1, #29
   16e40:	d50e      	bpl.n	16e60 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16e42:	4e0b      	ldr	r6, [pc, #44]	; (16e70 <bt_id_set_adv_own_addr+0xb0>)
   16e44:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   16e48:	5df3      	ldrb	r3, [r6, r7]
   16e4a:	2b01      	cmp	r3, #1
   16e4c:	d1e2      	bne.n	16e14 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   16e4e:	2107      	movs	r1, #7
   16e50:	fb11 3104 	smlabb	r1, r1, r4, r3
   16e54:	4431      	add	r1, r6
   16e56:	f00d f95e 	bl	24116 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   16e5a:	5df3      	ldrb	r3, [r6, r7]
   16e5c:	702b      	strb	r3, [r5, #0]
		if (err) {
   16e5e:	e7db      	b.n	16e18 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   16e60:	f00d f961 	bl	24126 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16e64:	2301      	movs	r3, #1
   16e66:	e7f9      	b.n	16e5c <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   16e68:	f06f 0015 	mvn.w	r0, #21
   16e6c:	e7d4      	b.n	16e18 <bt_id_set_adv_own_addr+0x58>
   16e6e:	bf00      	nop
   16e70:	20000388 	.word	0x20000388

00016e74 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   16e74:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16e76:	4d13      	ldr	r5, [pc, #76]	; (16ec4 <bt_id_init+0x50>)
   16e78:	79eb      	ldrb	r3, [r5, #7]
{
   16e7a:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16e7c:	b11b      	cbz	r3, 16e86 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   16e7e:	2400      	movs	r4, #0
}
   16e80:	4620      	mov	r0, r4
   16e82:	b007      	add	sp, #28
   16e84:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   16e86:	f7ff ff0b 	bl	16ca0 <bt_setup_public_id_addr>
		if (err) {
   16e8a:	4604      	mov	r4, r0
   16e8c:	b150      	cbz	r0, 16ea4 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   16e8e:	4b0e      	ldr	r3, [pc, #56]	; (16ec8 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   16e90:	9305      	str	r3, [sp, #20]
   16e92:	480e      	ldr	r0, [pc, #56]	; (16ecc <bt_id_init+0x58>)
   16e94:	2302      	movs	r3, #2
   16e96:	aa04      	add	r2, sp, #16
   16e98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16e9c:	9304      	str	r3, [sp, #16]
   16e9e:	f00d f932 	bl	24106 <z_log_msg_static_create.constprop.0>
			return err;
   16ea2:	e7ed      	b.n	16e80 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16ea4:	79eb      	ldrb	r3, [r5, #7]
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	d1e9      	bne.n	16e7e <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   16eaa:	f7ff ff5b 	bl	16d64 <bt_setup_random_id_addr>
		if (err) {
   16eae:	4604      	mov	r4, r0
   16eb0:	2800      	cmp	r0, #0
   16eb2:	d1ec      	bne.n	16e8e <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   16eb4:	1c68      	adds	r0, r5, #1
   16eb6:	f7ff fdfb 	bl	16ab0 <set_random_address>
		if (err) {
   16eba:	4604      	mov	r4, r0
   16ebc:	2800      	cmp	r0, #0
   16ebe:	d0df      	beq.n	16e80 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   16ec0:	4b03      	ldr	r3, [pc, #12]	; (16ed0 <bt_id_init+0x5c>)
   16ec2:	e7e5      	b.n	16e90 <bt_id_init+0x1c>
   16ec4:	20000388 	.word	0x20000388
   16ec8:	00028871 	.word	0x00028871
   16ecc:	000262a4 	.word	0x000262a4
   16ed0:	00028890 	.word	0x00028890

00016ed4 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   16ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ed8:	b089      	sub	sp, #36	; 0x24
   16eda:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16edc:	2120      	movs	r1, #32
{
   16ede:	9000      	str	r0, [sp, #0]
   16ee0:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16ee2:	f7fe fd1d 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   16ee6:	4605      	mov	r5, r0
   16ee8:	2800      	cmp	r0, #0
   16eea:	d05b      	beq.n	16fa4 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   16eec:	2120      	movs	r1, #32
   16eee:	300c      	adds	r0, #12
   16ef0:	f004 f98c 	bl	1b20c <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   16ef4:	2220      	movs	r2, #32
   16ef6:	2100      	movs	r1, #0
   16ef8:	4681      	mov	r9, r0
   16efa:	f00c ff96 	bl	23e2a <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   16efe:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   16f02:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   16f06:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   16f08:	f8d4 8000 	ldr.w	r8, [r4]
   16f0c:	2300      	movs	r3, #0
   16f0e:	6862      	ldr	r2, [r4, #4]
   16f10:	4293      	cmp	r3, r2
   16f12:	d30c      	bcc.n	16f2e <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   16f14:	3408      	adds	r4, #8
   16f16:	45a2      	cmp	sl, r4
   16f18:	d1f6      	bne.n	16f08 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16f1a:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   16f1c:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16f20:	2200      	movs	r2, #0
   16f22:	4629      	mov	r1, r5
}
   16f24:	b009      	add	sp, #36	; 0x24
   16f26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16f2a:	f7fe bd47 	b.w	159bc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   16f2e:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   16f32:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16f36:	1cb0      	adds	r0, r6, #2
   16f38:	1811      	adds	r1, r2, r0
   16f3a:	291f      	cmp	r1, #31
   16f3c:	d91b      	bls.n	16f76 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16f3e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   16f42:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16f46:	d101      	bne.n	16f4c <hci_set_ad+0x78>
   16f48:	2a00      	cmp	r2, #0
   16f4a:	dc12      	bgt.n	16f72 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   16f4c:	4b17      	ldr	r3, [pc, #92]	; (16fac <hci_set_ad+0xd8>)
   16f4e:	9307      	str	r3, [sp, #28]
   16f50:	2302      	movs	r3, #2
   16f52:	9306      	str	r3, [sp, #24]
   16f54:	4816      	ldr	r0, [pc, #88]	; (16fb0 <hci_set_ad+0xdc>)
   16f56:	2300      	movs	r3, #0
   16f58:	aa06      	add	r2, sp, #24
   16f5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16f5e:	f7fc f9a9 	bl	132b4 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   16f62:	4628      	mov	r0, r5
   16f64:	f004 f80e 	bl	1af84 <net_buf_unref>
					return -EINVAL;
   16f68:	f06f 0015 	mvn.w	r0, #21
}
   16f6c:	b009      	add	sp, #36	; 0x24
   16f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   16f72:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   16f76:	b2d7      	uxtb	r7, r2
   16f78:	1c79      	adds	r1, r7, #1
   16f7a:	f80b 1006 	strb.w	r1, [fp, r6]
   16f7e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   16f80:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   16f82:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   16f86:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   16f8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   16f8e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   16f90:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   16f92:	f00c ff3f 	bl	23e14 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   16f96:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   16f98:	4437      	add	r7, r6
   16f9a:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   16f9c:	3301      	adds	r3, #1
   16f9e:	f108 0808 	add.w	r8, r8, #8
   16fa2:	e7b4      	b.n	16f0e <hci_set_ad+0x3a>
		return -ENOBUFS;
   16fa4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16fa8:	e7e0      	b.n	16f6c <hci_set_ad+0x98>
   16faa:	bf00      	nop
   16fac:	000288b3 	.word	0x000288b3
   16fb0:	00026274 	.word	0x00026274

00016fb4 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   16fb4:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   16fb6:	4904      	ldr	r1, [pc, #16]	; (16fc8 <adv_is_directed+0x14>)
   16fb8:	2207      	movs	r2, #7
   16fba:	3009      	adds	r0, #9
   16fbc:	f00c ff1a 	bl	23df4 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   16fc0:	3800      	subs	r0, #0
   16fc2:	bf18      	it	ne
   16fc4:	2001      	movne	r0, #1
   16fc6:	bd08      	pop	{r3, pc}
   16fc8:	00027f97 	.word	0x00027f97

00016fcc <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16fcc:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   16fce:	4b15      	ldr	r3, [pc, #84]	; (17024 <le_adv_start_add_conn+0x58>)
   16fd0:	7802      	ldrb	r2, [r0, #0]
   16fd2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   16fd6:	4604      	mov	r4, r0
   16fd8:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   16fda:	f7ff ffeb 	bl	16fb4 <adv_is_directed>
   16fde:	4603      	mov	r3, r0
   16fe0:	7820      	ldrb	r0, [r4, #0]
   16fe2:	b96b      	cbnz	r3, 17000 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   16fe4:	4910      	ldr	r1, [pc, #64]	; (17028 <le_adv_start_add_conn+0x5c>)
   16fe6:	f001 f89b 	bl	18120 <bt_conn_add_le>
		if (!conn) {
   16fea:	4604      	mov	r4, r0
   16fec:	b910      	cbnz	r0, 16ff4 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   16fee:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   16ff2:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   16ff4:	2104      	movs	r1, #4
   16ff6:	f000 fe77 	bl	17ce8 <bt_conn_set_state>
		*out_conn = conn;
   16ffa:	602c      	str	r4, [r5, #0]
		return 0;
   16ffc:	2000      	movs	r0, #0
   16ffe:	e7f8      	b.n	16ff2 <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17000:	f104 0609 	add.w	r6, r4, #9
   17004:	4631      	mov	r1, r6
   17006:	f001 f8bf 	bl	18188 <bt_conn_exists_le>
   1700a:	b940      	cbnz	r0, 1701e <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1700c:	7820      	ldrb	r0, [r4, #0]
   1700e:	4631      	mov	r1, r6
   17010:	f001 f886 	bl	18120 <bt_conn_add_le>
	if (!conn) {
   17014:	4604      	mov	r4, r0
   17016:	2800      	cmp	r0, #0
   17018:	d0e9      	beq.n	16fee <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1701a:	2105      	movs	r1, #5
   1701c:	e7eb      	b.n	16ff6 <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   1701e:	f06f 0015 	mvn.w	r0, #21
   17022:	e7e6      	b.n	16ff2 <le_adv_start_add_conn+0x26>
   17024:	20000388 	.word	0x20000388
   17028:	00027f90 	.word	0x00027f90

0001702c <valid_adv_param>:
{
   1702c:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1702e:	6843      	ldr	r3, [r0, #4]
{
   17030:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17032:	0558      	lsls	r0, r3, #21
   17034:	d501      	bpl.n	1703a <valid_adv_param+0xe>
		return false;
   17036:	2000      	movs	r0, #0
}
   17038:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1703a:	6922      	ldr	r2, [r4, #16]
   1703c:	b10a      	cbz	r2, 17042 <valid_adv_param+0x16>
   1703e:	07d9      	lsls	r1, r3, #31
   17040:	d5f9      	bpl.n	17036 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   17042:	4d19      	ldr	r5, [pc, #100]	; (170a8 <valid_adv_param+0x7c>)
   17044:	7820      	ldrb	r0, [r4, #0]
   17046:	79eb      	ldrb	r3, [r5, #7]
   17048:	4283      	cmp	r3, r0
   1704a:	d9f4      	bls.n	17036 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1704c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17050:	4916      	ldr	r1, [pc, #88]	; (170ac <valid_adv_param+0x80>)
   17052:	2207      	movs	r2, #7
   17054:	4428      	add	r0, r5
   17056:	f00c fecd 	bl	23df4 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1705a:	2800      	cmp	r0, #0
   1705c:	d0eb      	beq.n	17036 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1705e:	6860      	ldr	r0, [r4, #4]
   17060:	07c2      	lsls	r2, r0, #31
   17062:	d406      	bmi.n	17072 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   17064:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   17068:	2b08      	cmp	r3, #8
   1706a:	d802      	bhi.n	17072 <valid_adv_param+0x46>
   1706c:	68a3      	ldr	r3, [r4, #8]
   1706e:	2b9f      	cmp	r3, #159	; 0x9f
   17070:	d9e1      	bls.n	17036 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   17072:	f010 0f30 	tst.w	r0, #48	; 0x30
   17076:	d002      	beq.n	1707e <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   17078:	6923      	ldr	r3, [r4, #16]
   1707a:	2b00      	cmp	r3, #0
   1707c:	d0db      	beq.n	17036 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1707e:	06c3      	lsls	r3, r0, #27
   17080:	d401      	bmi.n	17086 <valid_adv_param+0x5a>
   17082:	6923      	ldr	r3, [r4, #16]
   17084:	b943      	cbnz	r3, 17098 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   17086:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1708a:	429a      	cmp	r2, r3
   1708c:	d8d3      	bhi.n	17036 <valid_adv_param+0xa>
   1708e:	2a1f      	cmp	r2, #31
   17090:	d9d1      	bls.n	17036 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   17092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17096:	d8ce      	bhi.n	17036 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   17098:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1709c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   170a0:	bf18      	it	ne
   170a2:	2001      	movne	r0, #1
   170a4:	e7c8      	b.n	17038 <valid_adv_param+0xc>
   170a6:	bf00      	nop
   170a8:	20000388 	.word	0x20000388
   170ac:	00027f97 	.word	0x00027f97

000170b0 <bt_le_adv_lookup_legacy>:
}
   170b0:	4800      	ldr	r0, [pc, #0]	; (170b4 <bt_le_adv_lookup_legacy+0x4>)
   170b2:	4770      	bx	lr
   170b4:	200003a0 	.word	0x200003a0

000170b8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   170b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170bc:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   170be:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   170c2:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   170c4:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   170c6:	ebba 0403 	subs.w	r4, sl, r3
{
   170ca:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   170cc:	4892      	ldr	r0, [pc, #584]	; (17318 <bt_le_adv_start_legacy+0x260>)
	struct bt_conn *conn = NULL;
   170ce:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   170d0:	bf18      	it	ne
   170d2:	2401      	movne	r4, #1
   170d4:	f00d f851 	bl	2417a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   170d8:	0747      	lsls	r7, r0, #29
{
   170da:	460d      	mov	r5, r1
   170dc:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   170de:	f140 8112 	bpl.w	17306 <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   170e2:	4608      	mov	r0, r1
   170e4:	f7ff ffa2 	bl	1702c <valid_adv_param>
   170e8:	b928      	cbnz	r0, 170f6 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   170ea:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   170ee:	4620      	mov	r0, r4
   170f0:	b013      	add	sp, #76	; 0x4c
   170f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   170f6:	4628      	mov	r0, r5
   170f8:	f00d f82c 	bl	24154 <bt_id_adv_random_addr_check>
   170fc:	4681      	mov	r9, r0
   170fe:	2800      	cmp	r0, #0
   17100:	d0f3      	beq.n	170ea <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17102:	f106 0810 	add.w	r8, r6, #16
   17106:	4640      	mov	r0, r8
   17108:	f00d f837 	bl	2417a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1710c:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   17110:	0600      	lsls	r0, r0, #24
   17112:	f100 80fb 	bmi.w	1730c <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
   17116:	220f      	movs	r2, #15
   17118:	4639      	mov	r1, r7
   1711a:	a808      	add	r0, sp, #32
   1711c:	f00c fe85 	bl	23e2a <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17120:	68ab      	ldr	r3, [r5, #8]
   17122:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17126:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17128:	68eb      	ldr	r3, [r5, #12]
   1712a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1712e:	f00d f815 	bl	2415c <get_adv_channel_map>
	if (adv->id != param->id) {
   17132:	7832      	ldrb	r2, [r6, #0]
   17134:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17136:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1713a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1713c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   17140:	d004      	beq.n	1714c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17142:	4875      	ldr	r0, [pc, #468]	; (17318 <bt_le_adv_start_legacy+0x260>)
   17144:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17148:	f00d f81d 	bl	24186 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1714c:	4a73      	ldr	r2, [pc, #460]	; (1731c <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
   1714e:	782b      	ldrb	r3, [r5, #0]
   17150:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   17152:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   17156:	6869      	ldr	r1, [r5, #4]
   17158:	4622      	mov	r2, r4
   1715a:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1715e:	4630      	mov	r0, r6
   17160:	f7ff fe2e 	bl	16dc0 <bt_id_set_adv_own_addr>
	if (err) {
   17164:	4604      	mov	r4, r0
   17166:	2800      	cmp	r0, #0
   17168:	d1c1      	bne.n	170ee <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1716a:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   1716e:	2207      	movs	r2, #7
	if (dir_adv) {
   17170:	f1ba 0f00 	cmp.w	sl, #0
   17174:	d013      	beq.n	1719e <bt_le_adv_start_legacy+0xe6>
   17176:	6929      	ldr	r1, [r5, #16]
   17178:	f00c fe4c 	bl	23e14 <memcpy>
	name_type = get_adv_name_type_param(param);
   1717c:	4628      	mov	r0, r5
   1717e:	f00d f89f 	bl	242c0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17182:	686b      	ldr	r3, [r5, #4]
   17184:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   17186:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17188:	d416      	bmi.n	171b8 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1718a:	059b      	lsls	r3, r3, #22
   1718c:	d403      	bmi.n	17196 <bt_le_adv_start_legacy+0xde>
   1718e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17190:	b90b      	cbnz	r3, 17196 <bt_le_adv_start_legacy+0xde>
   17192:	2f02      	cmp	r7, #2
   17194:	d15a      	bne.n	1724c <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   17196:	2302      	movs	r3, #2
   17198:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1719c:	e01a      	b.n	171d4 <bt_le_adv_start_legacy+0x11c>
   1719e:	4960      	ldr	r1, [pc, #384]	; (17320 <bt_le_adv_start_legacy+0x268>)
   171a0:	f00c fe38 	bl	23e14 <memcpy>
	name_type = get_adv_name_type_param(param);
   171a4:	4628      	mov	r0, r5
   171a6:	f00d f88b 	bl	242c0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   171aa:	686b      	ldr	r3, [r5, #4]
   171ac:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   171ae:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   171b0:	d5eb      	bpl.n	1718a <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   171b2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   171b6:	e00d      	b.n	171d4 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   171b8:	f013 0f10 	tst.w	r3, #16
   171bc:	bf0c      	ite	eq
   171be:	2301      	moveq	r3, #1
   171c0:	2304      	movne	r3, #4
   171c2:	6929      	ldr	r1, [r5, #16]
   171c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   171c8:	2207      	movs	r2, #7
   171ca:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   171ce:	f00c fe21 	bl	23e14 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   171d2:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   171d4:	210f      	movs	r1, #15
   171d6:	f242 0006 	movw	r0, #8198	; 0x2006
   171da:	f7fe fba1 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   171de:	4604      	mov	r4, r0
   171e0:	2800      	cmp	r0, #0
   171e2:	f000 8096 	beq.w	17312 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   171e6:	220f      	movs	r2, #15
   171e8:	a908      	add	r1, sp, #32
   171ea:	300c      	adds	r0, #12
   171ec:	f00e f819 	bl	25222 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   171f0:	4621      	mov	r1, r4
   171f2:	2200      	movs	r2, #0
   171f4:	f242 0006 	movw	r0, #8198	; 0x2006
   171f8:	f7fe fbe0 	bl	159bc <bt_hci_cmd_send_sync>
	if (err) {
   171fc:	4604      	mov	r4, r0
   171fe:	2800      	cmp	r0, #0
   17200:	f47f af75 	bne.w	170ee <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   17204:	f1ba 0f00 	cmp.w	sl, #0
   17208:	d026      	beq.n	17258 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1720a:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1720c:	07dc      	lsls	r4, r3, #31
   1720e:	d431      	bmi.n	17274 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17210:	2101      	movs	r1, #1
   17212:	4630      	mov	r0, r6
   17214:	f00d f864 	bl	242e0 <bt_le_adv_set_enable_legacy>
	if (err) {
   17218:	4604      	mov	r4, r0
   1721a:	2800      	cmp	r0, #0
   1721c:	d06b      	beq.n	172f6 <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
   1721e:	4b41      	ldr	r3, [pc, #260]	; (17324 <bt_le_adv_start_legacy+0x26c>)
   17220:	9311      	str	r3, [sp, #68]	; 0x44
   17222:	2302      	movs	r3, #2
   17224:	9310      	str	r3, [sp, #64]	; 0x40
   17226:	4840      	ldr	r0, [pc, #256]	; (17328 <bt_le_adv_start_legacy+0x270>)
   17228:	2300      	movs	r3, #0
   1722a:	aa10      	add	r2, sp, #64	; 0x40
   1722c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17230:	f7fc f840 	bl	132b4 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17234:	9d07      	ldr	r5, [sp, #28]
   17236:	2d00      	cmp	r5, #0
   17238:	f43f af59 	beq.w	170ee <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1723c:	4628      	mov	r0, r5
   1723e:	2100      	movs	r1, #0
   17240:	f000 fd52 	bl	17ce8 <bt_conn_set_state>
			bt_conn_unref(conn);
   17244:	4628      	mov	r0, r5
   17246:	f000 fd0f 	bl	17c68 <bt_conn_unref>
   1724a:	e750      	b.n	170ee <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1724c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1724e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17252:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17256:	e7bd      	b.n	171d4 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1725a:	9300      	str	r3, [sp, #0]
   1725c:	e9cd 9701 	strd	r9, r7, [sp, #4]
   17260:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17262:	9a05      	ldr	r2, [sp, #20]
   17264:	4659      	mov	r1, fp
   17266:	4630      	mov	r0, r6
   17268:	f00c ffb3 	bl	241d2 <le_adv_update.constprop.0>
		if (err) {
   1726c:	4604      	mov	r4, r0
   1726e:	2800      	cmp	r0, #0
   17270:	d0cb      	beq.n	1720a <bt_le_adv_start_legacy+0x152>
   17272:	e73c      	b.n	170ee <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   17274:	a907      	add	r1, sp, #28
   17276:	4630      	mov	r0, r6
   17278:	f7ff fea8 	bl	16fcc <le_adv_start_add_conn>
		if (err) {
   1727c:	4604      	mov	r4, r0
   1727e:	2800      	cmp	r0, #0
   17280:	d0c6      	beq.n	17210 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   17282:	f110 0f0c 	cmn.w	r0, #12
   17286:	f47f af32 	bne.w	170ee <bt_le_adv_start_legacy+0x36>
   1728a:	f1ba 0f00 	cmp.w	sl, #0
   1728e:	f47f af2e 	bne.w	170ee <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17292:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   17294:	0798      	lsls	r0, r3, #30
   17296:	f53f af2a 	bmi.w	170ee <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1729a:	686c      	ldr	r4, [r5, #4]
   1729c:	f084 0402 	eor.w	r4, r4, #2
   172a0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   172a4:	f004 0201 	and.w	r2, r4, #1
   172a8:	210e      	movs	r1, #14
   172aa:	4640      	mov	r0, r8
   172ac:	f00c ff7a 	bl	241a4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   172b0:	1e7b      	subs	r3, r7, #1
   172b2:	425a      	negs	r2, r3
   172b4:	415a      	adcs	r2, r3
   172b6:	2108      	movs	r1, #8
   172b8:	4640      	mov	r0, r8
   172ba:	f00c ff73 	bl	241a4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   172be:	1eb9      	subs	r1, r7, #2
   172c0:	424a      	negs	r2, r1
   172c2:	414a      	adcs	r2, r1
   172c4:	4640      	mov	r0, r8
   172c6:	2109      	movs	r1, #9
   172c8:	f00c ff6c 	bl	241a4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   172cc:	686a      	ldr	r2, [r5, #4]
   172ce:	210a      	movs	r1, #10
   172d0:	f002 0201 	and.w	r2, r2, #1
   172d4:	4640      	mov	r0, r8
   172d6:	f00c ff65 	bl	241a4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   172da:	464a      	mov	r2, r9
   172dc:	210b      	movs	r1, #11
   172de:	4640      	mov	r0, r8
   172e0:	f00c ff60 	bl	241a4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   172e4:	686a      	ldr	r2, [r5, #4]
   172e6:	210d      	movs	r1, #13
   172e8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   172ec:	4640      	mov	r0, r8
   172ee:	f00c ff59 	bl	241a4 <atomic_set_bit_to>
	return 0;
   172f2:	2400      	movs	r4, #0
   172f4:	e6fb      	b.n	170ee <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   172f6:	9807      	ldr	r0, [sp, #28]
   172f8:	b108      	cbz	r0, 172fe <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
   172fa:	f000 fcb5 	bl	17c68 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   172fe:	f1ba 0f00 	cmp.w	sl, #0
   17302:	d1cf      	bne.n	172a4 <bt_le_adv_start_legacy+0x1ec>
   17304:	e7c9      	b.n	1729a <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   17306:	f06f 040a 	mvn.w	r4, #10
   1730a:	e6f0      	b.n	170ee <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1730c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17310:	e6ed      	b.n	170ee <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   17312:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17316:	e6ea      	b.n	170ee <bt_le_adv_start_legacy+0x36>
   17318:	2000045c 	.word	0x2000045c
   1731c:	20000388 	.word	0x20000388
   17320:	00027f97 	.word	0x00027f97
   17324:	000288cc 	.word	0x000288cc
   17328:	00026274 	.word	0x00026274

0001732c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1732c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1732e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17330:	9a06      	ldr	r2, [sp, #24]
{
   17332:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17334:	e9cd 3200 	strd	r3, r2, [sp]
   17338:	462b      	mov	r3, r5
   1733a:	460a      	mov	r2, r1
   1733c:	4601      	mov	r1, r0
   1733e:	4811      	ldr	r0, [pc, #68]	; (17384 <bt_le_adv_start+0x58>)
   17340:	f7ff feba 	bl	170b8 <bt_le_adv_start_legacy>
   17344:	4621      	mov	r1, r4
   17346:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   17348:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1734a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1734e:	429d      	cmp	r5, r3
   17350:	d102      	bne.n	17358 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   17352:	4630      	mov	r0, r6
   17354:	b002      	add	sp, #8
   17356:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   17358:	880a      	ldrh	r2, [r1, #0]
   1735a:	4282      	cmp	r2, r0
   1735c:	d104      	bne.n	17368 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1735e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   17360:	b112      	cbz	r2, 17368 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   17362:	7812      	ldrb	r2, [r2, #0]
   17364:	07d2      	lsls	r2, r2, #31
   17366:	d402      	bmi.n	1736e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   17368:	3301      	adds	r3, #1
   1736a:	3108      	adds	r1, #8
   1736c:	e7ef      	b.n	1734e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1736e:	4906      	ldr	r1, [pc, #24]	; (17388 <bt_le_adv_start+0x5c>)
   17370:	4806      	ldr	r0, [pc, #24]	; (1738c <bt_le_adv_start+0x60>)
   17372:	f009 f80d 	bl	20390 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   17376:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1737a:	2300      	movs	r3, #0
   1737c:	4803      	ldr	r0, [pc, #12]	; (1738c <bt_le_adv_start+0x60>)
   1737e:	f009 f923 	bl	205c8 <k_work_reschedule>
   17382:	e7e6      	b.n	17352 <bt_le_adv_start+0x26>
   17384:	200003a0 	.word	0x200003a0
   17388:	00017409 	.word	0x00017409
   1738c:	200003b8 	.word	0x200003b8

00017390 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   17390:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   17392:	4819      	ldr	r0, [pc, #100]	; (173f8 <bt_le_adv_stop+0x68>)
   17394:	f00c ffc9 	bl	2432a <bt_le_lim_adv_cancel_timeout>
   17398:	4818      	ldr	r0, [pc, #96]	; (173fc <bt_le_adv_stop+0x6c>)
   1739a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1739e:	f00c fef2 	bl	24186 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   173a2:	4816      	ldr	r0, [pc, #88]	; (173fc <bt_le_adv_stop+0x6c>)
   173a4:	f00c fee9 	bl	2417a <atomic_get>
   173a8:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   173aa:	061a      	lsls	r2, r3, #24
   173ac:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   173b0:	d521      	bpl.n	173f6 <bt_le_adv_stop+0x66>
   173b2:	4812      	ldr	r0, [pc, #72]	; (173fc <bt_le_adv_stop+0x6c>)
   173b4:	f00c fee1 	bl	2417a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   173b8:	0543      	lsls	r3, r0, #21
   173ba:	d512      	bpl.n	173e2 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   173bc:	480e      	ldr	r0, [pc, #56]	; (173f8 <bt_le_adv_stop+0x68>)
   173be:	f7ff fdf9 	bl	16fb4 <adv_is_directed>
   173c2:	4b0f      	ldr	r3, [pc, #60]	; (17400 <bt_le_adv_stop+0x70>)
   173c4:	b998      	cbnz	r0, 173ee <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   173c6:	490f      	ldr	r1, [pc, #60]	; (17404 <bt_le_adv_stop+0x74>)
   173c8:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   173ca:	7e18      	ldrb	r0, [r3, #24]
   173cc:	f000 ff0c 	bl	181e8 <bt_conn_lookup_state_le>
   173d0:	4604      	mov	r4, r0
	if (conn) {
   173d2:	b130      	cbz	r0, 173e2 <bt_le_adv_stop+0x52>
		conn->err = status;
   173d4:	2100      	movs	r1, #0
   173d6:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   173d8:	f000 fc86 	bl	17ce8 <bt_conn_set_state>
		bt_conn_unref(conn);
   173dc:	4620      	mov	r0, r4
   173de:	f000 fc43 	bl	17c68 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   173e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   173e6:	4804      	ldr	r0, [pc, #16]	; (173f8 <bt_le_adv_stop+0x68>)
   173e8:	2100      	movs	r1, #0
   173ea:	f00c bf79 	b.w	242e0 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   173ee:	2205      	movs	r2, #5
   173f0:	f103 0121 	add.w	r1, r3, #33	; 0x21
   173f4:	e7e9      	b.n	173ca <bt_le_adv_stop+0x3a>
}
   173f6:	bd10      	pop	{r4, pc}
   173f8:	200003a0 	.word	0x200003a0
   173fc:	200003b0 	.word	0x200003b0
   17400:	20000388 	.word	0x20000388
   17404:	00027f90 	.word	0x00027f90

00017408 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   17408:	b598      	push	{r3, r4, r7, lr}
   1740a:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1740c:	f7ff ffc0 	bl	17390 <bt_le_adv_stop>
#endif
	if (err) {
   17410:	b178      	cbz	r0, 17432 <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   17412:	466c      	mov	r4, sp
   17414:	b088      	sub	sp, #32
   17416:	466a      	mov	r2, sp
   17418:	4b07      	ldr	r3, [pc, #28]	; (17438 <adv_timeout+0x30>)
   1741a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1741e:	2303      	movs	r3, #3
   17420:	f842 3f10 	str.w	r3, [r2, #16]!
   17424:	4805      	ldr	r0, [pc, #20]	; (1743c <adv_timeout+0x34>)
   17426:	2300      	movs	r3, #0
   17428:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1742c:	f7fb ff42 	bl	132b4 <z_impl_z_log_msg_static_create>
   17430:	46a5      	mov	sp, r4
	}
}
   17432:	46bd      	mov	sp, r7
   17434:	bd98      	pop	{r3, r4, r7, pc}
   17436:	bf00      	nop
   17438:	000288e7 	.word	0x000288e7
   1743c:	00026274 	.word	0x00026274

00017440 <bt_le_adv_resume>:
{
   17440:	b5f0      	push	{r4, r5, r6, r7, lr}
   17442:	b083      	sub	sp, #12
   17444:	4839      	ldr	r0, [pc, #228]	; (1752c <bt_le_adv_resume+0xec>)
   17446:	4c39      	ldr	r4, [pc, #228]	; (1752c <bt_le_adv_resume+0xec>)
   17448:	af00      	add	r7, sp, #0
   1744a:	f00c fe96 	bl	2417a <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1744e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   17452:	d041      	beq.n	174d8 <bt_le_adv_resume+0x98>
   17454:	4620      	mov	r0, r4
   17456:	f00c fe90 	bl	2417a <atomic_get>
   1745a:	0603      	lsls	r3, r0, #24
   1745c:	d43c      	bmi.n	174d8 <bt_le_adv_resume+0x98>
   1745e:	4620      	mov	r0, r4
   17460:	f00c fe8b 	bl	2417a <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17464:	0546      	lsls	r6, r0, #21
   17466:	d537      	bpl.n	174d8 <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
   17468:	1d39      	adds	r1, r7, #4
   1746a:	f1a4 0010 	sub.w	r0, r4, #16
   1746e:	f7ff fdad 	bl	16fcc <le_adv_start_add_conn>
	if (err) {
   17472:	bb88      	cbnz	r0, 174d8 <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
   17474:	f1a4 0010 	sub.w	r0, r4, #16
   17478:	f7ff fd9c 	bl	16fb4 <adv_is_directed>
   1747c:	4602      	mov	r2, r0
   1747e:	4620      	mov	r0, r4
   17480:	f00c fe7b 	bl	2417a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17484:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17488:	4620      	mov	r0, r4
   1748a:	f00c fe76 	bl	2417a <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   1748e:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17492:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   17494:	ea4f 0141 	mov.w	r1, r1, lsl #1
   17498:	4824      	ldr	r0, [pc, #144]	; (1752c <bt_le_adv_resume+0xec>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   1749a:	bf48      	it	mi
   1749c:	f041 0101 	orrmi.w	r1, r1, #1
   174a0:	f00c fe6b 	bl	2417a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   174a4:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   174a6:	bf48      	it	mi
   174a8:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   174ac:	4820      	ldr	r0, [pc, #128]	; (17530 <bt_le_adv_resume+0xf0>)
   174ae:	1cfb      	adds	r3, r7, #3
   174b0:	f7ff fc86 	bl	16dc0 <bt_id_set_adv_own_addr>
		if (err) {
   174b4:	4605      	mov	r5, r0
   174b6:	b190      	cbz	r0, 174de <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   174b8:	466c      	mov	r4, sp
   174ba:	b088      	sub	sp, #32
   174bc:	466a      	mov	r2, sp
   174be:	4b1d      	ldr	r3, [pc, #116]	; (17534 <bt_le_adv_resume+0xf4>)
   174c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   174c4:	2303      	movs	r3, #3
   174c6:	f842 3f10 	str.w	r3, [r2, #16]!
   174ca:	481b      	ldr	r0, [pc, #108]	; (17538 <bt_le_adv_resume+0xf8>)
   174cc:	2300      	movs	r3, #0
   174ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   174d2:	f7fb feef 	bl	132b4 <z_impl_z_log_msg_static_create>
   174d6:	46a5      	mov	sp, r4
}
   174d8:	370c      	adds	r7, #12
   174da:	46bd      	mov	sp, r7
   174dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
   174de:	4814      	ldr	r0, [pc, #80]	; (17530 <bt_le_adv_resume+0xf0>)
   174e0:	2101      	movs	r1, #1
   174e2:	f00c fefd 	bl	242e0 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   174e6:	687e      	ldr	r6, [r7, #4]
	if (err) {
   174e8:	b918      	cbnz	r0, 174f2 <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
   174ea:	4630      	mov	r0, r6
   174ec:	f000 fbbc 	bl	17c68 <bt_conn_unref>
	if (persist_paused) {
   174f0:	e7f2      	b.n	174d8 <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   174f2:	4629      	mov	r1, r5
   174f4:	4630      	mov	r0, r6
   174f6:	f000 fbf7 	bl	17ce8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   174fa:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   174fe:	480b      	ldr	r0, [pc, #44]	; (1752c <bt_le_adv_resume+0xec>)
   17500:	f00c fe41 	bl	24186 <atomic_and>
   17504:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   17506:	4630      	mov	r0, r6
   17508:	f000 fbae 	bl	17c68 <bt_conn_unref>
	if (persist_paused) {
   1750c:	046b      	lsls	r3, r5, #17
   1750e:	d5e3      	bpl.n	174d8 <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17510:	f3bf 8f5b 	dmb	ish
   17514:	e854 3f00 	ldrex	r3, [r4]
   17518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1751c:	e844 3200 	strex	r2, r3, [r4]
   17520:	2a00      	cmp	r2, #0
   17522:	d1f7      	bne.n	17514 <bt_le_adv_resume+0xd4>
   17524:	f3bf 8f5b 	dmb	ish
   17528:	e7d6      	b.n	174d8 <bt_le_adv_resume+0x98>
   1752a:	bf00      	nop
   1752c:	200003b0 	.word	0x200003b0
   17530:	200003a0 	.word	0x200003a0
   17534:	00028906 	.word	0x00028906
   17538:	00026274 	.word	0x00026274

0001753c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1753c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1753e:	4b13      	ldr	r3, [pc, #76]	; (1758c <notify_connected+0x50>)
   17540:	681d      	ldr	r5, [r3, #0]
{
   17542:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17544:	b995      	cbnz	r5, 1756c <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17546:	4d12      	ldr	r5, [pc, #72]	; (17590 <notify_connected+0x54>)
   17548:	4e12      	ldr	r6, [pc, #72]	; (17594 <notify_connected+0x58>)
   1754a:	42b5      	cmp	r5, r6
   1754c:	d91c      	bls.n	17588 <notify_connected+0x4c>
   1754e:	4912      	ldr	r1, [pc, #72]	; (17598 <notify_connected+0x5c>)
   17550:	4a12      	ldr	r2, [pc, #72]	; (1759c <notify_connected+0x60>)
   17552:	4813      	ldr	r0, [pc, #76]	; (175a0 <notify_connected+0x64>)
   17554:	f240 53ba 	movw	r3, #1466	; 0x5ba
   17558:	f00c f84f 	bl	235fa <assert_print>
   1755c:	4811      	ldr	r0, [pc, #68]	; (175a4 <notify_connected+0x68>)
   1755e:	f00c f84c 	bl	235fa <assert_print>
   17562:	480e      	ldr	r0, [pc, #56]	; (1759c <notify_connected+0x60>)
   17564:	f240 51ba 	movw	r1, #1466	; 0x5ba
   17568:	f00c f840 	bl	235ec <assert_post_action>
		if (cb->connected) {
   1756c:	682b      	ldr	r3, [r5, #0]
   1756e:	b113      	cbz	r3, 17576 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   17570:	7a61      	ldrb	r1, [r4, #9]
   17572:	4620      	mov	r0, r4
   17574:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17576:	692d      	ldr	r5, [r5, #16]
   17578:	e7e4      	b.n	17544 <notify_connected+0x8>
		if (cb->connected) {
   1757a:	682b      	ldr	r3, [r5, #0]
   1757c:	b113      	cbz	r3, 17584 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1757e:	7a61      	ldrb	r1, [r4, #9]
   17580:	4620      	mov	r0, r4
   17582:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17584:	3514      	adds	r5, #20
   17586:	e7e0      	b.n	1754a <notify_connected+0xe>
   17588:	d3f7      	bcc.n	1757a <notify_connected+0x3e>
		}
	}
}
   1758a:	bd70      	pop	{r4, r5, r6, pc}
   1758c:	20002c18 	.word	0x20002c18
   17590:	00026228 	.word	0x00026228
   17594:	0002623c 	.word	0x0002623c
   17598:	00028973 	.word	0x00028973
   1759c:	00028943 	.word	0x00028943
   175a0:	00026f1a 	.word	0x00026f1a
   175a4:	00027466 	.word	0x00027466

000175a8 <tx_notify>:
{
   175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   175ac:	4f15      	ldr	r7, [pc, #84]	; (17604 <tx_notify+0x5c>)
{
   175ae:	4604      	mov	r4, r0
	tx->cb = NULL;
   175b0:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   175b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   175b8:	f3ef 8311 	mrs	r3, BASEPRI
   175bc:	f382 8812 	msr	BASEPRI_MAX, r2
   175c0:	f3bf 8f6f 	isb	sy
	return list->head;
   175c4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   175c6:	b929      	cbnz	r1, 175d4 <tx_notify+0x2c>
	__asm__ volatile(
   175c8:	f383 8811 	msr	BASEPRI, r3
   175cc:	f3bf 8f6f 	isb	sy
}
   175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   175d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   175d6:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   175d8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   175da:	4281      	cmp	r1, r0
	list->tail = node;
   175dc:	bf08      	it	eq
   175de:	6262      	streq	r2, [r4, #36]	; 0x24
   175e0:	f383 8811 	msr	BASEPRI, r3
   175e4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   175e8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   175ec:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   175f0:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   175f4:	4638      	mov	r0, r7
   175f6:	f00e faf1 	bl	25bdc <k_queue_append>
		cb(conn, user_data, 0);
   175fa:	2200      	movs	r2, #0
   175fc:	4631      	mov	r1, r6
   175fe:	4620      	mov	r0, r4
   17600:	47a8      	blx	r5
	while (1) {
   17602:	e7d7      	b.n	175b4 <tx_notify+0xc>
   17604:	200009c0 	.word	0x200009c0

00017608 <conn_tx_destroy>:
{
   17608:	b570      	push	{r4, r5, r6, lr}
   1760a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1760c:	b949      	cbnz	r1, 17622 <conn_tx_destroy+0x1a>
   1760e:	490d      	ldr	r1, [pc, #52]	; (17644 <conn_tx_destroy+0x3c>)
   17610:	480d      	ldr	r0, [pc, #52]	; (17648 <conn_tx_destroy+0x40>)
   17612:	4a0e      	ldr	r2, [pc, #56]	; (1764c <conn_tx_destroy+0x44>)
   17614:	2343      	movs	r3, #67	; 0x43
   17616:	f00b fff0 	bl	235fa <assert_print>
   1761a:	480c      	ldr	r0, [pc, #48]	; (1764c <conn_tx_destroy+0x44>)
   1761c:	2143      	movs	r1, #67	; 0x43
   1761e:	f00b ffe5 	bl	235ec <assert_post_action>
	void *user_data = tx->user_data;
   17622:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   17626:	2200      	movs	r2, #0
	tx->user_data = NULL;
   17628:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   1762c:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1762e:	4808      	ldr	r0, [pc, #32]	; (17650 <conn_tx_destroy+0x48>)
   17630:	f00e fad4 	bl	25bdc <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   17634:	4631      	mov	r1, r6
   17636:	4620      	mov	r0, r4
   17638:	462b      	mov	r3, r5
   1763a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   1763e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   17642:	4718      	bx	r3
   17644:	0002898e 	.word	0x0002898e
   17648:	00026f1a 	.word	0x00026f1a
   1764c:	00028943 	.word	0x00028943
   17650:	200009c0 	.word	0x200009c0

00017654 <send_frag>:
{
   17654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   17658:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 17820 <send_frag+0x1cc>
{
   1765c:	b083      	sub	sp, #12
   1765e:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   17660:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   17664:	2b00      	cmp	r3, #0
{
   17666:	af00      	add	r7, sp, #0
   17668:	4604      	mov	r4, r0
   1766a:	460d      	mov	r5, r1
	return NULL;
   1766c:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   17670:	4616      	mov	r6, r2
	return NULL;
   17672:	bf08      	it	eq
   17674:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   17676:	2200      	movs	r2, #0
   17678:	2300      	movs	r3, #0
   1767a:	f008 fad7 	bl	1fc2c <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   1767e:	2800      	cmp	r0, #0
   17680:	f040 80ca 	bne.w	17818 <send_frag+0x1c4>
	if (frag) {
   17684:	2e00      	cmp	r6, #0
   17686:	f000 8090 	beq.w	177aa <send_frag+0x156>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1768a:	f106 0b0c 	add.w	fp, r6, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1768e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   17692:	607b      	str	r3, [r7, #4]
   17694:	4658      	mov	r0, fp
   17696:	f00d fdbc 	bl	25212 <net_buf_simple_tailroom>
   1769a:	687b      	ldr	r3, [r7, #4]
   1769c:	4298      	cmp	r0, r3
   1769e:	d97f      	bls.n	177a0 <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
   176a0:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   176a4:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   176a8:	607a      	str	r2, [r7, #4]
   176aa:	4658      	mov	r0, fp
   176ac:	f00d fdb9 	bl	25222 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   176b0:	687a      	ldr	r2, [r7, #4]
   176b2:	4628      	mov	r0, r5
   176b4:	4611      	mov	r1, r2
   176b6:	f003 fd6d 	bl	1b194 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   176ba:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   176bc:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   176be:	2b07      	cmp	r3, #7
   176c0:	f040 80a7 	bne.w	17812 <send_frag+0x1be>
	__asm__ volatile(
   176c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   176c8:	f3ef 8211 	mrs	r2, BASEPRI
   176cc:	f383 8812 	msr	BASEPRI_MAX, r3
   176d0:	f3bf 8f6f 	isb	sy
	if (tx) {
   176d4:	2d00      	cmp	r5, #0
   176d6:	d073      	beq.n	177c0 <send_frag+0x16c>
	parent->next = child;
   176d8:	2300      	movs	r3, #0
   176da:	602b      	str	r3, [r5, #0]
	return list->tail;
   176dc:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   176de:	2b00      	cmp	r3, #0
   176e0:	d16b      	bne.n	177ba <send_frag+0x166>
	list->head = node;
   176e2:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   176e6:	f382 8811 	msr	BASEPRI, r2
   176ea:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   176ee:	2104      	movs	r1, #4
   176f0:	f106 000c 	add.w	r0, r6, #12
   176f4:	f003 fd2e 	bl	1b154 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   176f8:	8823      	ldrh	r3, [r4, #0]
   176fa:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   176fe:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   17702:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17706:	8a33      	ldrh	r3, [r6, #16]
   17708:	3b04      	subs	r3, #4
   1770a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1770c:	2302      	movs	r3, #2
   1770e:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   17710:	4630      	mov	r0, r6
   17712:	f7fe fbd1 	bl	15eb8 <bt_send>
	if (err) {
   17716:	4680      	mov	r8, r0
   17718:	2800      	cmp	r0, #0
   1771a:	d03c      	beq.n	17796 <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1771c:	46eb      	mov	fp, sp
   1771e:	b088      	sub	sp, #32
   17720:	466a      	mov	r2, sp
   17722:	4b40      	ldr	r3, [pc, #256]	; (17824 <send_frag+0x1d0>)
   17724:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17728:	2303      	movs	r3, #3
   1772a:	f842 3f10 	str.w	r3, [r2, #16]!
   1772e:	483e      	ldr	r0, [pc, #248]	; (17828 <send_frag+0x1d4>)
   17730:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17734:	f00c fdfc 	bl	24330 <z_log_msg_static_create.constprop.0>
   17738:	46dd      	mov	sp, fp
	__asm__ volatile(
   1773a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1773e:	f3ef 8111 	mrs	r1, BASEPRI
   17742:	f383 8812 	msr	BASEPRI_MAX, r3
   17746:	f3bf 8f6f 	isb	sy
		if (tx) {
   1774a:	2d00      	cmp	r5, #0
   1774c:	d04e      	beq.n	177ec <send_frag+0x198>
	return list->head;
   1774e:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17750:	2200      	movs	r2, #0
   17752:	b15b      	cbz	r3, 1776c <send_frag+0x118>
   17754:	429d      	cmp	r5, r3
   17756:	d146      	bne.n	177e6 <send_frag+0x192>
	return node->next;
   17758:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1775a:	2a00      	cmp	r2, #0
   1775c:	d13d      	bne.n	177da <send_frag+0x186>
   1775e:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   17760:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   17762:	4295      	cmp	r5, r2
   17764:	d100      	bne.n	17768 <send_frag+0x114>
	list->tail = node;
   17766:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   17768:	2300      	movs	r3, #0
   1776a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1776c:	f381 8811 	msr	BASEPRI, r1
   17770:	f3bf 8f6f 	isb	sy
		err = -EIO;
   17774:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   17778:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   1777c:	482b      	ldr	r0, [pc, #172]	; (1782c <send_frag+0x1d8>)
   1777e:	2b00      	cmp	r3, #0
   17780:	bf08      	it	eq
   17782:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   17784:	f008 fa0e 	bl	1fba4 <z_impl_k_sem_give>
	if (tx) {
   17788:	b12d      	cbz	r5, 17796 <send_frag+0x142>
		tx_data(buf)->tx = NULL;
   1778a:	2300      	movs	r3, #0
   1778c:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1778e:	4629      	mov	r1, r5
   17790:	4620      	mov	r0, r4
   17792:	f7ff ff39 	bl	17608 <conn_tx_destroy>
}
   17796:	4640      	mov	r0, r8
   17798:	370c      	adds	r7, #12
   1779a:	46bd      	mov	sp, r7
   1779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   177a0:	4658      	mov	r0, fp
   177a2:	f00d fd36 	bl	25212 <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   177a6:	b282      	uxth	r2, r0
   177a8:	e77c      	b.n	176a4 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   177aa:	2200      	movs	r2, #0
   177ac:	2300      	movs	r3, #0
   177ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
   177b2:	f00d fd20 	bl	251f6 <net_buf_get>
   177b6:	4606      	mov	r6, r0
		frag = buf;
   177b8:	e77f      	b.n	176ba <send_frag+0x66>
   177ba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   177bc:	61a5      	str	r5, [r4, #24]
}
   177be:	e792      	b.n	176e6 <send_frag+0x92>
	return list->tail;
   177c0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   177c2:	b133      	cbz	r3, 177d2 <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
   177c4:	f103 0a0c 	add.w	sl, r3, #12
   177c8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   177ca:	3301      	adds	r3, #1
   177cc:	f8ca 3000 	str.w	r3, [sl]
   177d0:	e789      	b.n	176e6 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   177d2:	69e3      	ldr	r3, [r4, #28]
   177d4:	f104 0a1c 	add.w	sl, r4, #28
   177d8:	e7f7      	b.n	177ca <send_frag+0x176>
	parent->next = child;
   177da:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   177dc:	69a3      	ldr	r3, [r4, #24]
   177de:	429d      	cmp	r5, r3
	list->tail = node;
   177e0:	bf08      	it	eq
   177e2:	61a2      	streq	r2, [r4, #24]
}
   177e4:	e7c0      	b.n	17768 <send_frag+0x114>
	return node->next;
   177e6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   177e8:	681b      	ldr	r3, [r3, #0]
   177ea:	e7b2      	b.n	17752 <send_frag+0xfe>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   177ec:	f8da 3000 	ldr.w	r3, [sl]
   177f0:	b95b      	cbnz	r3, 1780a <send_frag+0x1b6>
   177f2:	490f      	ldr	r1, [pc, #60]	; (17830 <send_frag+0x1dc>)
   177f4:	480f      	ldr	r0, [pc, #60]	; (17834 <send_frag+0x1e0>)
   177f6:	4a10      	ldr	r2, [pc, #64]	; (17838 <send_frag+0x1e4>)
   177f8:	f240 2351 	movw	r3, #593	; 0x251
   177fc:	f00b fefd 	bl	235fa <assert_print>
   17800:	480d      	ldr	r0, [pc, #52]	; (17838 <send_frag+0x1e4>)
   17802:	f240 2151 	movw	r1, #593	; 0x251
   17806:	f00b fef1 	bl	235ec <assert_post_action>
			(*pending_no_cb)--;
   1780a:	3b01      	subs	r3, #1
   1780c:	f8ca 3000 	str.w	r3, [sl]
   17810:	e7ac      	b.n	1776c <send_frag+0x118>
		err = -ENOTCONN;
   17812:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   17816:	e7af      	b.n	17778 <send_frag+0x124>
		return -ENOBUFS;
   17818:	f06f 0868 	mvn.w	r8, #104	; 0x68
   1781c:	e7bb      	b.n	17796 <send_frag+0x142>
   1781e:	bf00      	nop
   17820:	20000388 	.word	0x20000388
   17824:	00028434 	.word	0x00028434
   17828:	00026284 	.word	0x00026284
   1782c:	20000490 	.word	0x20000490
   17830:	00028991 	.word	0x00028991
   17834:	00026f1a 	.word	0x00026f1a
   17838:	00028943 	.word	0x00028943

0001783c <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   1783c:	4804      	ldr	r0, [pc, #16]	; (17850 <bt_conn_get_pkts+0x14>)
   1783e:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   17842:	2b00      	cmp	r3, #0
   17844:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   17848:	bf08      	it	eq
   1784a:	2000      	moveq	r0, #0
   1784c:	4770      	bx	lr
   1784e:	bf00      	nop
   17850:	20000388 	.word	0x20000388

00017854 <bt_conn_new>:
{
   17854:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   17856:	2200      	movs	r2, #0
   17858:	4604      	mov	r4, r0
   1785a:	428a      	cmp	r2, r1
   1785c:	d102      	bne.n	17864 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1785e:	2400      	movs	r4, #0
}
   17860:	4620      	mov	r0, r4
   17862:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17864:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   17868:	2001      	movs	r0, #1
   1786a:	f3bf 8f5b 	dmb	ish
   1786e:	e853 5f00 	ldrex	r5, [r3]
   17872:	2d00      	cmp	r5, #0
   17874:	d104      	bne.n	17880 <bt_conn_new+0x2c>
   17876:	e843 0c00 	strex	ip, r0, [r3]
   1787a:	f1bc 0f00 	cmp.w	ip, #0
   1787e:	d1f6      	bne.n	1786e <bt_conn_new+0x1a>
   17880:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17884:	d002      	beq.n	1788c <bt_conn_new+0x38>
   17886:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   17888:	4402      	add	r2, r0
   1788a:	e7e6      	b.n	1785a <bt_conn_new+0x6>
	if (!conn) {
   1788c:	2c00      	cmp	r4, #0
   1788e:	d0e6      	beq.n	1785e <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17890:	22c4      	movs	r2, #196	; 0xc4
   17892:	2100      	movs	r1, #0
   17894:	4620      	mov	r0, r4
   17896:	f00c fac8 	bl	23e2a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1789a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1789e:	4904      	ldr	r1, [pc, #16]	; (178b0 <bt_conn_new+0x5c>)
   178a0:	f008 fd76 	bl	20390 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   178a4:	4903      	ldr	r1, [pc, #12]	; (178b4 <bt_conn_new+0x60>)
   178a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   178aa:	f008 fc23 	bl	200f4 <k_work_init>
	return conn;
   178ae:	e7d7      	b.n	17860 <bt_conn_new+0xc>
   178b0:	00018299 	.word	0x00018299
   178b4:	00024337 	.word	0x00024337

000178b8 <conn_cleanup>:
{
   178b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178bc:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   178be:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   178c0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   178c4:	2300      	movs	r3, #0
   178c6:	2200      	movs	r2, #0
   178c8:	4630      	mov	r0, r6
   178ca:	f00d fc94 	bl	251f6 <net_buf_get>
   178ce:	4603      	mov	r3, r0
   178d0:	b980      	cbnz	r0, 178f4 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   178d2:	6963      	ldr	r3, [r4, #20]
   178d4:	b1cb      	cbz	r3, 1790a <conn_cleanup+0x52>
   178d6:	4918      	ldr	r1, [pc, #96]	; (17938 <conn_cleanup+0x80>)
   178d8:	4a18      	ldr	r2, [pc, #96]	; (1793c <conn_cleanup+0x84>)
   178da:	4819      	ldr	r0, [pc, #100]	; (17940 <conn_cleanup+0x88>)
   178dc:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   178e0:	f00b fe8b 	bl	235fa <assert_print>
   178e4:	4817      	ldr	r0, [pc, #92]	; (17944 <conn_cleanup+0x8c>)
   178e6:	f00b fe88 	bl	235fa <assert_print>
   178ea:	f44f 713c 	mov.w	r1, #752	; 0x2f0
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   178ee:	4813      	ldr	r0, [pc, #76]	; (1793c <conn_cleanup+0x84>)
   178f0:	f00b fe7c 	bl	235ec <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   178f4:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   178f6:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   178f8:	f003 fb44 	bl	1af84 <net_buf_unref>
		if (tx) {
   178fc:	2d00      	cmp	r5, #0
   178fe:	d0e1      	beq.n	178c4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   17900:	4629      	mov	r1, r5
   17902:	4620      	mov	r0, r4
   17904:	f7ff fe80 	bl	17608 <conn_tx_destroy>
   17908:	e7da      	b.n	178c0 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1790a:	69e3      	ldr	r3, [r4, #28]
   1790c:	b14b      	cbz	r3, 17922 <conn_cleanup+0x6a>
   1790e:	490e      	ldr	r1, [pc, #56]	; (17948 <conn_cleanup+0x90>)
   17910:	4a0a      	ldr	r2, [pc, #40]	; (1793c <conn_cleanup+0x84>)
   17912:	480b      	ldr	r0, [pc, #44]	; (17940 <conn_cleanup+0x88>)
   17914:	f240 23f1 	movw	r3, #753	; 0x2f1
   17918:	f00b fe6f 	bl	235fa <assert_print>
   1791c:	f240 21f1 	movw	r1, #753	; 0x2f1
   17920:	e7e5      	b.n	178ee <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   17922:	4620      	mov	r0, r4
   17924:	f00c fd0a 	bl	2433c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17928:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1792c:	2200      	movs	r2, #0
}
   1792e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   17932:	2300      	movs	r3, #0
   17934:	f008 be48 	b.w	205c8 <k_work_reschedule>
   17938:	000289a4 	.word	0x000289a4
   1793c:	00028943 	.word	0x00028943
   17940:	00026f1a 	.word	0x00026f1a
   17944:	000289ca 	.word	0x000289ca
   17948:	000289df 	.word	0x000289df

0001794c <bt_conn_recv>:
{
   1794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17950:	b086      	sub	sp, #24
   17952:	4616      	mov	r6, r2
   17954:	af00      	add	r7, sp, #0
   17956:	4604      	mov	r4, r0
   17958:	460d      	mov	r5, r1
	tx_notify(conn);
   1795a:	f7ff fe25 	bl	175a8 <tx_notify>
	switch (flags) {
   1795e:	2e01      	cmp	r6, #1
   17960:	d030      	beq.n	179c4 <bt_conn_recv+0x78>
   17962:	2e02      	cmp	r6, #2
   17964:	d16a      	bne.n	17a3c <bt_conn_recv+0xf0>
		if (conn->rx) {
   17966:	6923      	ldr	r3, [r4, #16]
   17968:	b163      	cbz	r3, 17984 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   1796a:	4b40      	ldr	r3, [pc, #256]	; (17a6c <bt_conn_recv+0x120>)
   1796c:	4840      	ldr	r0, [pc, #256]	; (17a70 <bt_conn_recv+0x124>)
   1796e:	e9c7 6304 	strd	r6, r3, [r7, #16]
   17972:	f107 0210 	add.w	r2, r7, #16
   17976:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1797a:	f00c fcd9 	bl	24330 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1797e:	4620      	mov	r0, r4
   17980:	f00c fcdc 	bl	2433c <bt_conn_reset_rx_state>
		conn->rx = buf;
   17984:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   17986:	6921      	ldr	r1, [r4, #16]
   17988:	8a08      	ldrh	r0, [r1, #16]
   1798a:	2801      	cmp	r0, #1
   1798c:	d930      	bls.n	179f0 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1798e:	68cb      	ldr	r3, [r1, #12]
   17990:	881b      	ldrh	r3, [r3, #0]
   17992:	3304      	adds	r3, #4
   17994:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17996:	4298      	cmp	r0, r3
   17998:	d32a      	bcc.n	179f0 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   1799a:	d95f      	bls.n	17a5c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1799c:	466d      	mov	r5, sp
   1799e:	b088      	sub	sp, #32
   179a0:	466a      	mov	r2, sp
   179a2:	4934      	ldr	r1, [pc, #208]	; (17a74 <bt_conn_recv+0x128>)
   179a4:	61d3      	str	r3, [r2, #28]
   179a6:	2304      	movs	r3, #4
   179a8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   179ac:	f842 3f10 	str.w	r3, [r2, #16]!
   179b0:	482f      	ldr	r0, [pc, #188]	; (17a70 <bt_conn_recv+0x124>)
   179b2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   179b6:	f00c fcbb 	bl	24330 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   179ba:	4620      	mov	r0, r4
   179bc:	46ad      	mov	sp, r5
   179be:	f00c fcbd 	bl	2433c <bt_conn_reset_rx_state>
		return;
   179c2:	e015      	b.n	179f0 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   179c4:	6920      	ldr	r0, [r4, #16]
   179c6:	b970      	cbnz	r0, 179e6 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   179c8:	4b2b      	ldr	r3, [pc, #172]	; (17a78 <bt_conn_recv+0x12c>)
   179ca:	617b      	str	r3, [r7, #20]
   179cc:	2302      	movs	r3, #2
   179ce:	4828      	ldr	r0, [pc, #160]	; (17a70 <bt_conn_recv+0x124>)
   179d0:	613b      	str	r3, [r7, #16]
   179d2:	f107 0210 	add.w	r2, r7, #16
   179d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   179da:	f00c fca9 	bl	24330 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   179de:	4620      	mov	r0, r4
   179e0:	f00c fcac 	bl	2433c <bt_conn_reset_rx_state>
   179e4:	e001      	b.n	179ea <bt_conn_recv+0x9e>
		if (!buf->len) {
   179e6:	8a2e      	ldrh	r6, [r5, #16]
   179e8:	b936      	cbnz	r6, 179f8 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   179ea:	4628      	mov	r0, r5
   179ec:	f003 faca 	bl	1af84 <net_buf_unref>
}
   179f0:	3718      	adds	r7, #24
   179f2:	46bd      	mov	sp, r7
   179f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179f8:	300c      	adds	r0, #12
   179fa:	f00d fc0a 	bl	25212 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   179fe:	4286      	cmp	r6, r0
   17a00:	d912      	bls.n	17a28 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   17a02:	4b1e      	ldr	r3, [pc, #120]	; (17a7c <bt_conn_recv+0x130>)
   17a04:	617b      	str	r3, [r7, #20]
   17a06:	2302      	movs	r3, #2
   17a08:	613b      	str	r3, [r7, #16]
   17a0a:	4819      	ldr	r0, [pc, #100]	; (17a70 <bt_conn_recv+0x124>)
   17a0c:	f107 0210 	add.w	r2, r7, #16
   17a10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17a14:	f00c fc8c 	bl	24330 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   17a18:	2200      	movs	r2, #0
   17a1a:	6921      	ldr	r1, [r4, #16]
   17a1c:	4620      	mov	r0, r4
   17a1e:	f000 febb 	bl	18798 <bt_l2cap_recv>
			conn->rx = NULL;
   17a22:	2300      	movs	r3, #0
   17a24:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   17a26:	e7e0      	b.n	179ea <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17a28:	6920      	ldr	r0, [r4, #16]
   17a2a:	8a2a      	ldrh	r2, [r5, #16]
   17a2c:	68e9      	ldr	r1, [r5, #12]
   17a2e:	300c      	adds	r0, #12
   17a30:	f00d fbf7 	bl	25222 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   17a34:	4628      	mov	r0, r5
   17a36:	f003 faa5 	bl	1af84 <net_buf_unref>
		break;
   17a3a:	e7a4      	b.n	17986 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   17a3c:	46e8      	mov	r8, sp
   17a3e:	b088      	sub	sp, #32
   17a40:	466a      	mov	r2, sp
   17a42:	4b0f      	ldr	r3, [pc, #60]	; (17a80 <bt_conn_recv+0x134>)
   17a44:	480a      	ldr	r0, [pc, #40]	; (17a70 <bt_conn_recv+0x124>)
	switch (flags) {
   17a46:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   17a4a:	2303      	movs	r3, #3
   17a4c:	f842 3f10 	str.w	r3, [r2, #16]!
   17a50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17a54:	f00c fc6c 	bl	24330 <z_log_msg_static_create.constprop.0>
   17a58:	46c5      	mov	sp, r8
   17a5a:	e7c0      	b.n	179de <bt_conn_recv+0x92>
	conn->rx = NULL;
   17a5c:	2300      	movs	r3, #0
   17a5e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   17a60:	2201      	movs	r2, #1
   17a62:	4620      	mov	r0, r4
   17a64:	f000 fe98 	bl	18798 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   17a68:	e7c2      	b.n	179f0 <bt_conn_recv+0xa4>
   17a6a:	bf00      	nop
   17a6c:	000289f8 	.word	0x000289f8
   17a70:	00026284 	.word	0x00026284
   17a74:	00028a78 	.word	0x00028a78
   17a78:	00028a15 	.word	0x00028a15
   17a7c:	00028a33 	.word	0x00028a33
   17a80:	00028a5a 	.word	0x00028a5a

00017a84 <bt_conn_send_cb>:
{
   17a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a88:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   17a8a:	7acb      	ldrb	r3, [r1, #11]
   17a8c:	2b07      	cmp	r3, #7
{
   17a8e:	b086      	sub	sp, #24
   17a90:	4606      	mov	r6, r0
   17a92:	460d      	mov	r5, r1
   17a94:	4617      	mov	r7, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   17a96:	d80e      	bhi.n	17ab6 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   17a98:	4b2c      	ldr	r3, [pc, #176]	; (17b4c <bt_conn_send_cb+0xc8>)
   17a9a:	482d      	ldr	r0, [pc, #180]	; (17b50 <bt_conn_send_cb+0xcc>)
   17a9c:	9305      	str	r3, [sp, #20]
   17a9e:	aa04      	add	r2, sp, #16
   17aa0:	2302      	movs	r3, #2
   17aa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17aa6:	9304      	str	r3, [sp, #16]
   17aa8:	f00c fc42 	bl	24330 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17aac:	f06f 0015 	mvn.w	r0, #21
}
   17ab0:	b006      	add	sp, #24
   17ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   17ab6:	7a83      	ldrb	r3, [r0, #10]
   17ab8:	2b07      	cmp	r3, #7
   17aba:	d00c      	beq.n	17ad6 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   17abc:	4b25      	ldr	r3, [pc, #148]	; (17b54 <bt_conn_send_cb+0xd0>)
   17abe:	9305      	str	r3, [sp, #20]
   17ac0:	4823      	ldr	r0, [pc, #140]	; (17b50 <bt_conn_send_cb+0xcc>)
   17ac2:	2302      	movs	r3, #2
   17ac4:	aa04      	add	r2, sp, #16
   17ac6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17aca:	9304      	str	r3, [sp, #16]
   17acc:	f00c fc30 	bl	24330 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   17ad0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17ad4:	e7ec      	b.n	17ab0 <bt_conn_send_cb+0x2c>
	if (cb) {
   17ad6:	2a00      	cmp	r2, #0
   17ad8:	d033      	beq.n	17b42 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   17ada:	f009 fee9 	bl	218b0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   17ade:	4b1e      	ldr	r3, [pc, #120]	; (17b58 <bt_conn_send_cb+0xd4>)
   17ae0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17ae2:	481e      	ldr	r0, [pc, #120]	; (17b5c <bt_conn_send_cb+0xd8>)
   17ae4:	bf07      	ittee	eq
   17ae6:	2200      	moveq	r2, #0
   17ae8:	2300      	moveq	r3, #0
   17aea:	f04f 32ff 	movne.w	r2, #4294967295
   17aee:	f04f 33ff 	movne.w	r3, #4294967295
   17af2:	f007 ffed 	bl	1fad0 <z_impl_k_queue_get>
   17af6:	4604      	mov	r4, r0
		if (!tx) {
   17af8:	b328      	cbz	r0, 17b46 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   17afa:	7ab3      	ldrb	r3, [r6, #10]
   17afc:	2b07      	cmp	r3, #7
   17afe:	d012      	beq.n	17b26 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   17b00:	4b17      	ldr	r3, [pc, #92]	; (17b60 <bt_conn_send_cb+0xdc>)
   17b02:	9305      	str	r3, [sp, #20]
   17b04:	4812      	ldr	r0, [pc, #72]	; (17b50 <bt_conn_send_cb+0xcc>)
   17b06:	2302      	movs	r3, #2
   17b08:	aa04      	add	r2, sp, #16
   17b0a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17b0e:	9304      	str	r3, [sp, #16]
   17b10:	f00c fc0e 	bl	24330 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   17b14:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17b16:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17b1a:	4810      	ldr	r0, [pc, #64]	; (17b5c <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   17b1c:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   17b1e:	4621      	mov	r1, r4
   17b20:	f00e f85c 	bl	25bdc <k_queue_append>
}
   17b24:	e7d4      	b.n	17ad0 <bt_conn_send_cb+0x4c>
		tx->user_data = user_data;
   17b26:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17b2a:	2300      	movs	r3, #0
   17b2c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   17b2e:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   17b30:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   17b32:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   17b36:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   17b38:	4629      	mov	r1, r5
   17b3a:	f003 f9fd 	bl	1af38 <net_buf_put>
	return 0;
   17b3e:	4620      	mov	r0, r4
   17b40:	e7b6      	b.n	17ab0 <bt_conn_send_cb+0x2c>
   17b42:	4614      	mov	r4, r2
   17b44:	e7f3      	b.n	17b2e <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   17b46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17b4a:	e7b1      	b.n	17ab0 <bt_conn_send_cb+0x2c>
   17b4c:	00028a93 	.word	0x00028a93
   17b50:	00026284 	.word	0x00026284
   17b54:	00028ab0 	.word	0x00028ab0
   17b58:	20002a68 	.word	0x20002a68
   17b5c:	200009c0 	.word	0x200009c0
   17b60:	00028abf 	.word	0x00028abf

00017b64 <bt_conn_prepare_events>:
{
   17b64:	b570      	push	{r4, r5, r6, lr}
   17b66:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   17b68:	4823      	ldr	r0, [pc, #140]	; (17bf8 <bt_conn_prepare_events+0x94>)
   17b6a:	f00e f9e8 	bl	25f3e <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17b6e:	4b22      	ldr	r3, [pc, #136]	; (17bf8 <bt_conn_prepare_events+0x94>)
   17b70:	2200      	movs	r2, #0
   17b72:	4620      	mov	r0, r4
   17b74:	2101      	movs	r1, #1
   17b76:	f00a fd41 	bl	225fc <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b7a:	f3bf 8f5b 	dmb	ish
   17b7e:	4b1f      	ldr	r3, [pc, #124]	; (17bfc <bt_conn_prepare_events+0x98>)
   17b80:	681a      	ldr	r2, [r3, #0]
   17b82:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   17b86:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   17b8a:	b90a      	cbnz	r2, 17b90 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   17b8c:	2001      	movs	r0, #1
}
   17b8e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17b90:	f1a3 01c4 	sub.w	r1, r3, #196	; 0xc4
   17b94:	f813 3cba 	ldrb.w	r3, [r3, #-186]
   17b98:	b993      	cbnz	r3, 17bc0 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b9a:	f3bf 8f5b 	dmb	ish
   17b9e:	1d0b      	adds	r3, r1, #4
   17ba0:	e853 2f00 	ldrex	r2, [r3]
   17ba4:	f022 0540 	bic.w	r5, r2, #64	; 0x40
   17ba8:	e843 5600 	strex	r6, r5, [r3]
   17bac:	2e00      	cmp	r6, #0
   17bae:	d1f7      	bne.n	17ba0 <bt_conn_prepare_events+0x3c>
   17bb0:	f3bf 8f5b 	dmb	ish
   17bb4:	0653      	lsls	r3, r2, #25
   17bb6:	d503      	bpl.n	17bc0 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   17bb8:	4608      	mov	r0, r1
   17bba:	f7ff fe7d 	bl	178b8 <conn_cleanup>
		return -ENOTCONN;
   17bbe:	e7e5      	b.n	17b8c <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   17bc0:	7a8b      	ldrb	r3, [r1, #10]
   17bc2:	2b07      	cmp	r3, #7
   17bc4:	d1e2      	bne.n	17b8c <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   17bc6:	4b0e      	ldr	r3, [pc, #56]	; (17c00 <bt_conn_prepare_events+0x9c>)
   17bc8:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   17bcc:	2a00      	cmp	r2, #0
   17bce:	d0dd      	beq.n	17b8c <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   17bd0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   17bd4:	6b89      	ldr	r1, [r1, #56]	; 0x38
   17bd6:	b151      	cbz	r1, 17bee <bt_conn_prepare_events+0x8a>
   17bd8:	b94a      	cbnz	r2, 17bee <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
   17bda:	f503 7384 	add.w	r3, r3, #264	; 0x108
   17bde:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   17be0:	f00a fd0c 	bl	225fc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   17be4:	2301      	movs	r3, #1
   17be6:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   17bea:	2002      	movs	r0, #2
	return ev_count;
   17bec:	e7cf      	b.n	17b8e <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   17bee:	4b05      	ldr	r3, [pc, #20]	; (17c04 <bt_conn_prepare_events+0xa0>)
   17bf0:	2200      	movs	r2, #0
   17bf2:	2104      	movs	r1, #4
   17bf4:	e7f4      	b.n	17be0 <bt_conn_prepare_events+0x7c>
   17bf6:	bf00      	nop
   17bf8:	2000065c 	.word	0x2000065c
   17bfc:	20001f64 	.word	0x20001f64
   17c00:	20000388 	.word	0x20000388
   17c04:	20001ed8 	.word	0x20001ed8

00017c08 <bt_conn_ref>:
{
   17c08:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   17c0a:	b958      	cbnz	r0, 17c24 <bt_conn_ref+0x1c>
   17c0c:	4913      	ldr	r1, [pc, #76]	; (17c5c <bt_conn_ref+0x54>)
   17c0e:	4814      	ldr	r0, [pc, #80]	; (17c60 <bt_conn_ref+0x58>)
   17c10:	4a14      	ldr	r2, [pc, #80]	; (17c64 <bt_conn_ref+0x5c>)
   17c12:	f240 43db 	movw	r3, #1243	; 0x4db
   17c16:	f00b fcf0 	bl	235fa <assert_print>
   17c1a:	4812      	ldr	r0, [pc, #72]	; (17c64 <bt_conn_ref+0x5c>)
   17c1c:	f240 41db 	movw	r1, #1243	; 0x4db
   17c20:	f00b fce4 	bl	235ec <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c24:	f3bf 8f5b 	dmb	ish
   17c28:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   17c2c:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   17c30:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
		if (!old) {
   17c34:	b17b      	cbz	r3, 17c56 <bt_conn_ref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17c36:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   17c3a:	1c59      	adds	r1, r3, #1
   17c3c:	e852 4f00 	ldrex	r4, [r2]
   17c40:	429c      	cmp	r4, r3
   17c42:	d104      	bne.n	17c4e <bt_conn_ref+0x46>
   17c44:	e842 1c00 	strex	ip, r1, [r2]
   17c48:	f1bc 0f00 	cmp.w	ip, #0
   17c4c:	d1f6      	bne.n	17c3c <bt_conn_ref+0x34>
   17c4e:	f3bf 8f5b 	dmb	ish
   17c52:	d1e7      	bne.n	17c24 <bt_conn_ref+0x1c>
}
   17c54:	bd10      	pop	{r4, pc}
			return NULL;
   17c56:	4618      	mov	r0, r3
   17c58:	e7fc      	b.n	17c54 <bt_conn_ref+0x4c>
   17c5a:	bf00      	nop
   17c5c:	00028d5a 	.word	0x00028d5a
   17c60:	00026f1a 	.word	0x00026f1a
   17c64:	00028943 	.word	0x00028943

00017c68 <bt_conn_unref>:
{
   17c68:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   17c6a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17c6e:	f3bf 8f5b 	dmb	ish
   17c72:	e853 2f00 	ldrex	r2, [r3]
   17c76:	1e51      	subs	r1, r2, #1
   17c78:	e843 1400 	strex	r4, r1, [r3]
   17c7c:	2c00      	cmp	r4, #0
   17c7e:	d1f8      	bne.n	17c72 <bt_conn_unref+0xa>
   17c80:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   17c84:	2a00      	cmp	r2, #0
   17c86:	dc0e      	bgt.n	17ca6 <bt_conn_unref+0x3e>
   17c88:	490f      	ldr	r1, [pc, #60]	; (17cc8 <bt_conn_unref+0x60>)
   17c8a:	4a10      	ldr	r2, [pc, #64]	; (17ccc <bt_conn_unref+0x64>)
   17c8c:	4810      	ldr	r0, [pc, #64]	; (17cd0 <bt_conn_unref+0x68>)
   17c8e:	f240 43f7 	movw	r3, #1271	; 0x4f7
   17c92:	f00b fcb2 	bl	235fa <assert_print>
   17c96:	480f      	ldr	r0, [pc, #60]	; (17cd4 <bt_conn_unref+0x6c>)
   17c98:	f00b fcaf 	bl	235fa <assert_print>
   17c9c:	480b      	ldr	r0, [pc, #44]	; (17ccc <bt_conn_unref+0x64>)
   17c9e:	f240 41f7 	movw	r1, #1271	; 0x4f7
   17ca2:	f00b fca3 	bl	235ec <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   17ca6:	8842      	ldrh	r2, [r0, #2]
   17ca8:	f240 1301 	movw	r3, #257	; 0x101
   17cac:	429a      	cmp	r2, r3
   17cae:	d10a      	bne.n	17cc6 <bt_conn_unref+0x5e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17cb0:	f3bf 8f5b 	dmb	ish
   17cb4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   17cb8:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   17cbc:	b91b      	cbnz	r3, 17cc6 <bt_conn_unref+0x5e>
}
   17cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   17cc2:	f7ff bbbd 	b.w	17440 <bt_le_adv_resume>
}
   17cc6:	bd10      	pop	{r4, pc}
   17cc8:	00028ae5 	.word	0x00028ae5
   17ccc:	00028943 	.word	0x00028943
   17cd0:	00026f1a 	.word	0x00026f1a
   17cd4:	00028aed 	.word	0x00028aed

00017cd8 <bt_conn_lookup_handle>:
{
   17cd8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   17cda:	2101      	movs	r1, #1
   17cdc:	4801      	ldr	r0, [pc, #4]	; (17ce4 <bt_conn_lookup_handle+0xc>)
   17cde:	f00c bb36 	b.w	2434e <conn_lookup_handle>
   17ce2:	bf00      	nop
   17ce4:	20001ea0 	.word	0x20001ea0

00017ce8 <bt_conn_set_state>:
{
   17ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   17cec:	7a86      	ldrb	r6, [r0, #10]
   17cee:	428e      	cmp	r6, r1
{
   17cf0:	af00      	add	r7, sp, #0
   17cf2:	4604      	mov	r4, r0
   17cf4:	460d      	mov	r5, r1
	if (conn->state == state) {
   17cf6:	d118      	bne.n	17d2a <bt_conn_set_state+0x42>
	switch (state) {
   17cf8:	2e08      	cmp	r6, #8
   17cfa:	bf96      	itet	ls
   17cfc:	4b72      	ldrls	r3, [pc, #456]	; (17ec8 <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   17cfe:	4b73      	ldrhi	r3, [pc, #460]	; (17ecc <bt_conn_set_state+0x1e4>)
   17d00:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   17d04:	466c      	mov	r4, sp
   17d06:	b088      	sub	sp, #32
   17d08:	466a      	mov	r2, sp
   17d0a:	4971      	ldr	r1, [pc, #452]	; (17ed0 <bt_conn_set_state+0x1e8>)
   17d0c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17d10:	f44f 7300 	mov.w	r3, #512	; 0x200
   17d14:	8393      	strh	r3, [r2, #28]
   17d16:	4b6f      	ldr	r3, [pc, #444]	; (17ed4 <bt_conn_set_state+0x1ec>)
   17d18:	f842 3f10 	str.w	r3, [r2, #16]!
   17d1c:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   17d20:	486d      	ldr	r0, [pc, #436]	; (17ed8 <bt_conn_set_state+0x1f0>)
   17d22:	f00c fb05 	bl	24330 <z_log_msg_static_create.constprop.0>
   17d26:	46a5      	mov	sp, r4
   17d28:	e04c      	b.n	17dc4 <bt_conn_set_state+0xdc>
	conn->state = state;
   17d2a:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   17d2c:	b926      	cbnz	r6, 17d38 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   17d2e:	7883      	ldrb	r3, [r0, #2]
   17d30:	2b08      	cmp	r3, #8
   17d32:	d001      	beq.n	17d38 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   17d34:	f7ff ff68 	bl	17c08 <bt_conn_ref>
	switch (conn->state) {
   17d38:	7aa3      	ldrb	r3, [r4, #10]
   17d3a:	2b08      	cmp	r3, #8
   17d3c:	f200 80bf 	bhi.w	17ebe <bt_conn_set_state+0x1d6>
   17d40:	e8df f003 	tbb	[pc, r3]
   17d44:	40400543 	.word	0x40400543
   17d48:	25404040 	.word	0x25404040
   17d4c:	40          	.byte	0x40
   17d4d:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   17d4e:	4d63      	ldr	r5, [pc, #396]	; (17edc <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   17d50:	f04f 0800 	mov.w	r8, #0
	return NULL;
   17d54:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   17d58:	f04f 0240 	mov.w	r2, #64	; 0x40
   17d5c:	f3ef 8311 	mrs	r3, BASEPRI
   17d60:	f382 8812 	msr	BASEPRI_MAX, r2
   17d64:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   17d68:	69e2      	ldr	r2, [r4, #28]
   17d6a:	2a00      	cmp	r2, #0
   17d6c:	f000 8082 	beq.w	17e74 <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   17d70:	3a01      	subs	r2, #1
   17d72:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   17d74:	f383 8811 	msr	BASEPRI, r3
   17d78:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   17d7c:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   17d80:	2b00      	cmp	r3, #0
   17d82:	bf14      	ite	ne
   17d84:	4630      	movne	r0, r6
   17d86:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   17d88:	f007 ff0c 	bl	1fba4 <z_impl_k_sem_give>
}
   17d8c:	e7e4      	b.n	17d58 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   17d8e:	78a3      	ldrb	r3, [r4, #2]
   17d90:	2b04      	cmp	r3, #4
   17d92:	d017      	beq.n	17dc4 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   17d94:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17d98:	f00d ff13 	bl	25bc2 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   17d9c:	4850      	ldr	r0, [pc, #320]	; (17ee0 <bt_conn_set_state+0x1f8>)
   17d9e:	2100      	movs	r1, #0
   17da0:	f00a fd4a 	bl	22838 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17da4:	2300      	movs	r3, #0
	list->tail = NULL;
   17da6:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17daa:	78e3      	ldrb	r3, [r4, #3]
   17dac:	2b01      	cmp	r3, #1
   17dae:	d109      	bne.n	17dc4 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   17db0:	2303      	movs	r3, #3
   17db2:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   17db6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17dba:	2300      	movs	r3, #0
   17dbc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17dc0:	f008 fb88 	bl	204d4 <k_work_schedule>
}
   17dc4:	46bd      	mov	sp, r7
   17dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   17dca:	78a3      	ldrb	r3, [r4, #2]
   17dcc:	2b04      	cmp	r3, #4
   17dce:	d103      	bne.n	17dd8 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   17dd0:	4620      	mov	r0, r4
   17dd2:	f7ff ff49 	bl	17c68 <bt_conn_unref>
			break;
   17dd6:	e7f5      	b.n	17dc4 <bt_conn_set_state+0xdc>
		switch (old_state) {
   17dd8:	2e08      	cmp	r6, #8
   17dda:	d8f3      	bhi.n	17dc4 <bt_conn_set_state+0xdc>
   17ddc:	a301      	add	r3, pc, #4	; (adr r3, 17de4 <bt_conn_set_state+0xfc>)
   17dde:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17de2:	bf00      	nop
   17de4:	00017e5d 	.word	0x00017e5d
   17de8:	00017e09 	.word	0x00017e09
   17dec:	00017e4f 	.word	0x00017e4f
   17df0:	00017dd1 	.word	0x00017dd1
   17df4:	00017dd1 	.word	0x00017dd1
   17df8:	00017e4f 	.word	0x00017e4f
   17dfc:	00017e4f 	.word	0x00017e4f
   17e00:	00017e5d 	.word	0x00017e5d
   17e04:	00017e5d 	.word	0x00017e5d
			tx_notify(conn);
   17e08:	4620      	mov	r0, r4
   17e0a:	f7ff fbcd 	bl	175a8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17e0e:	78a3      	ldrb	r3, [r4, #2]
   17e10:	2b01      	cmp	r3, #1
   17e12:	d10a      	bne.n	17e2a <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   17e14:	f104 0560 	add.w	r5, r4, #96	; 0x60
   17e18:	4628      	mov	r0, r5
   17e1a:	f00d ff6d 	bl	25cf8 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   17e1e:	f010 0f0c 	tst.w	r0, #12
   17e22:	d002      	beq.n	17e2a <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   17e24:	4628      	mov	r0, r5
   17e26:	f008 fbd5 	bl	205d4 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e2a:	f3bf 8f5b 	dmb	ish
   17e2e:	3404      	adds	r4, #4
   17e30:	e854 3f00 	ldrex	r3, [r4]
   17e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17e38:	e844 3200 	strex	r2, r3, [r4]
   17e3c:	2a00      	cmp	r2, #0
   17e3e:	d1f7      	bne.n	17e30 <bt_conn_set_state+0x148>
   17e40:	f3bf 8f5b 	dmb	ish
   17e44:	2100      	movs	r1, #0
   17e46:	4826      	ldr	r0, [pc, #152]	; (17ee0 <bt_conn_set_state+0x1f8>)
   17e48:	f00a fcf6 	bl	22838 <z_impl_k_poll_signal_raise>
   17e4c:	e7ba      	b.n	17dc4 <bt_conn_set_state+0xdc>
			if (conn->err) {
   17e4e:	7a63      	ldrb	r3, [r4, #9]
   17e50:	2b00      	cmp	r3, #0
   17e52:	d0bd      	beq.n	17dd0 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   17e54:	4620      	mov	r0, r4
   17e56:	f7ff fb71 	bl	1753c <notify_connected>
   17e5a:	e7b9      	b.n	17dd0 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   17e5c:	466c      	mov	r4, sp
   17e5e:	b088      	sub	sp, #32
   17e60:	466a      	mov	r2, sp
   17e62:	4b20      	ldr	r3, [pc, #128]	; (17ee4 <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   17e64:	e9c2 3505 	strd	r3, r5, [r2, #20]
   17e68:	2303      	movs	r3, #3
   17e6a:	f842 3f10 	str.w	r3, [r2, #16]!
   17e6e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17e72:	e755      	b.n	17d20 <bt_conn_set_state+0x38>
	return list->head;
   17e74:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17e76:	b921      	cbnz	r1, 17e82 <bt_conn_set_state+0x19a>
   17e78:	f383 8811 	msr	BASEPRI, r3
   17e7c:	f3bf 8f6f 	isb	sy
		if (!node) {
   17e80:	e7a0      	b.n	17dc4 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17e82:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   17e84:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   17e86:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17e88:	4281      	cmp	r1, r0
	list->tail = node;
   17e8a:	bf08      	it	eq
   17e8c:	61a2      	streq	r2, [r4, #24]
   17e8e:	f383 8811 	msr	BASEPRI, r3
   17e92:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17e96:	f04f 0240 	mov.w	r2, #64	; 0x40
   17e9a:	f3ef 8311 	mrs	r3, BASEPRI
   17e9e:	f382 8812 	msr	BASEPRI_MAX, r2
   17ea2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17ea6:	68ca      	ldr	r2, [r1, #12]
   17ea8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17eaa:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   17eae:	f383 8811 	msr	BASEPRI, r3
   17eb2:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   17eb6:	4620      	mov	r0, r4
   17eb8:	f7ff fba6 	bl	17608 <conn_tx_destroy>
   17ebc:	e75e      	b.n	17d7c <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   17ebe:	466c      	mov	r4, sp
   17ec0:	b088      	sub	sp, #32
   17ec2:	466a      	mov	r2, sp
   17ec4:	4b08      	ldr	r3, [pc, #32]	; (17ee8 <bt_conn_set_state+0x200>)
   17ec6:	e7cd      	b.n	17e64 <bt_conn_set_state+0x17c>
   17ec8:	00026668 	.word	0x00026668
   17ecc:	00028b0b 	.word	0x00028b0b
   17ed0:	00028b15 	.word	0x00028b15
   17ed4:	01000003 	.word	0x01000003
   17ed8:	00026284 	.word	0x00026284
   17edc:	20000388 	.word	0x20000388
   17ee0:	2000065c 	.word	0x2000065c
   17ee4:	00028b26 	.word	0x00028b26
   17ee8:	00028b3d 	.word	0x00028b3d

00017eec <bt_conn_index>:
		index = conn - acl_conns;
   17eec:	4a0c      	ldr	r2, [pc, #48]	; (17f20 <bt_conn_index+0x34>)
   17eee:	490d      	ldr	r1, [pc, #52]	; (17f24 <bt_conn_index+0x38>)
{
   17ef0:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   17ef2:	1a83      	subs	r3, r0, r2
   17ef4:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17ef6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   17ef8:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   17efc:	d00e      	beq.n	17f1c <bt_conn_index+0x30>
   17efe:	490a      	ldr	r1, [pc, #40]	; (17f28 <bt_conn_index+0x3c>)
   17f00:	4a0a      	ldr	r2, [pc, #40]	; (17f2c <bt_conn_index+0x40>)
   17f02:	480b      	ldr	r0, [pc, #44]	; (17f30 <bt_conn_index+0x44>)
   17f04:	f240 5315 	movw	r3, #1301	; 0x515
   17f08:	f00b fb77 	bl	235fa <assert_print>
   17f0c:	4809      	ldr	r0, [pc, #36]	; (17f34 <bt_conn_index+0x48>)
   17f0e:	f00b fb74 	bl	235fa <assert_print>
   17f12:	4806      	ldr	r0, [pc, #24]	; (17f2c <bt_conn_index+0x40>)
   17f14:	f240 5115 	movw	r1, #1301	; 0x515
   17f18:	f00b fb68 	bl	235ec <assert_post_action>
}
   17f1c:	b2d8      	uxtb	r0, r3
   17f1e:	bd08      	pop	{r3, pc}
   17f20:	20001ea0 	.word	0x20001ea0
   17f24:	c28f5c29 	.word	0xc28f5c29
   17f28:	00028b59 	.word	0x00028b59
   17f2c:	00028943 	.word	0x00028943
   17f30:	00026f1a 	.word	0x00026f1a
   17f34:	00028c22 	.word	0x00028c22

00017f38 <bt_conn_create_pdu_timeout>:
{
   17f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f3a:	b087      	sub	sp, #28
   17f3c:	4604      	mov	r4, r0
   17f3e:	460d      	mov	r5, r1
   17f40:	4617      	mov	r7, r2
   17f42:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   17f44:	f00d fe15 	bl	25b72 <k_is_in_isr>
   17f48:	b158      	cbz	r0, 17f62 <bt_conn_create_pdu_timeout+0x2a>
   17f4a:	4914      	ldr	r1, [pc, #80]	; (17f9c <bt_conn_create_pdu_timeout+0x64>)
   17f4c:	4814      	ldr	r0, [pc, #80]	; (17fa0 <bt_conn_create_pdu_timeout+0x68>)
   17f4e:	4a15      	ldr	r2, [pc, #84]	; (17fa4 <bt_conn_create_pdu_timeout+0x6c>)
   17f50:	f240 5331 	movw	r3, #1329	; 0x531
   17f54:	f00b fb51 	bl	235fa <assert_print>
   17f58:	4812      	ldr	r0, [pc, #72]	; (17fa4 <bt_conn_create_pdu_timeout+0x6c>)
   17f5a:	f240 5131 	movw	r1, #1329	; 0x531
   17f5e:	f00b fb45 	bl	235ec <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   17f62:	4911      	ldr	r1, [pc, #68]	; (17fa8 <bt_conn_create_pdu_timeout+0x70>)
   17f64:	463a      	mov	r2, r7
   17f66:	2c00      	cmp	r4, #0
   17f68:	bf14      	ite	ne
   17f6a:	4620      	movne	r0, r4
   17f6c:	4608      	moveq	r0, r1
   17f6e:	4633      	mov	r3, r6
   17f70:	f00d f93c 	bl	251ec <net_buf_alloc_fixed>
	if (!buf) {
   17f74:	4604      	mov	r4, r0
   17f76:	b960      	cbnz	r0, 17f92 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   17f78:	4b0c      	ldr	r3, [pc, #48]	; (17fac <bt_conn_create_pdu_timeout+0x74>)
   17f7a:	9305      	str	r3, [sp, #20]
   17f7c:	480c      	ldr	r0, [pc, #48]	; (17fb0 <bt_conn_create_pdu_timeout+0x78>)
   17f7e:	2302      	movs	r3, #2
   17f80:	aa04      	add	r2, sp, #16
   17f82:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f86:	9304      	str	r3, [sp, #16]
   17f88:	f00c f9d2 	bl	24330 <z_log_msg_static_create.constprop.0>
}
   17f8c:	4620      	mov	r0, r4
   17f8e:	b007      	add	sp, #28
   17f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   17f92:	1d29      	adds	r1, r5, #4
   17f94:	300c      	adds	r0, #12
   17f96:	f003 f8bb 	bl	1b110 <net_buf_simple_reserve>
	return buf;
   17f9a:	e7f7      	b.n	17f8c <bt_conn_create_pdu_timeout+0x54>
   17f9c:	00028c3c 	.word	0x00028c3c
   17fa0:	00026f1a 	.word	0x00026f1a
   17fa4:	00028943 	.word	0x00028943
   17fa8:	200009dc 	.word	0x200009dc
   17fac:	00028c4b 	.word	0x00028c4b
   17fb0:	00026284 	.word	0x00026284

00017fb4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   17fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17fb6:	f3bf 8f5b 	dmb	ish
   17fba:	6842      	ldr	r2, [r0, #4]
   17fbc:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17fc0:	0592      	lsls	r2, r2, #22
{
   17fc2:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17fc4:	f100 0304 	add.w	r3, r0, #4
   17fc8:	d519      	bpl.n	17ffe <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   17fca:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17fce:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   17fd2:	4291      	cmp	r1, r2
   17fd4:	d813      	bhi.n	17ffe <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   17fd6:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   17fda:	4291      	cmp	r1, r2
   17fdc:	d30f      	bcc.n	17ffe <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   17fde:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   17fe2:	4291      	cmp	r1, r2
   17fe4:	d10b      	bne.n	17ffe <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17fe6:	f3bf 8f5b 	dmb	ish
   17fea:	e853 1f00 	ldrex	r1, [r3]
   17fee:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   17ff2:	e843 1200 	strex	r2, r1, [r3]
   17ff6:	2a00      	cmp	r2, #0
   17ff8:	d1f7      	bne.n	17fea <notify_le_param_updated+0x36>
   17ffa:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17ffe:	4b18      	ldr	r3, [pc, #96]	; (18060 <notify_le_param_updated+0xac>)
   18000:	681d      	ldr	r5, [r3, #0]
   18002:	b995      	cbnz	r5, 1802a <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18004:	4d17      	ldr	r5, [pc, #92]	; (18064 <notify_le_param_updated+0xb0>)
   18006:	4f18      	ldr	r7, [pc, #96]	; (18068 <notify_le_param_updated+0xb4>)
   18008:	42bd      	cmp	r5, r7
   1800a:	d926      	bls.n	1805a <notify_le_param_updated+0xa6>
   1800c:	4917      	ldr	r1, [pc, #92]	; (1806c <notify_le_param_updated+0xb8>)
   1800e:	4a18      	ldr	r2, [pc, #96]	; (18070 <notify_le_param_updated+0xbc>)
   18010:	4818      	ldr	r0, [pc, #96]	; (18074 <notify_le_param_updated+0xc0>)
   18012:	f240 6304 	movw	r3, #1540	; 0x604
   18016:	f00b faf0 	bl	235fa <assert_print>
   1801a:	4817      	ldr	r0, [pc, #92]	; (18078 <notify_le_param_updated+0xc4>)
   1801c:	f00b faed 	bl	235fa <assert_print>
   18020:	4813      	ldr	r0, [pc, #76]	; (18070 <notify_le_param_updated+0xbc>)
   18022:	f240 6104 	movw	r1, #1540	; 0x604
   18026:	f00b fae1 	bl	235ec <assert_post_action>
		if (cb->le_param_updated) {
   1802a:	68ee      	ldr	r6, [r5, #12]
   1802c:	b13e      	cbz	r6, 1803e <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   1802e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18032:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18036:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1803a:	4620      	mov	r0, r4
   1803c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1803e:	692d      	ldr	r5, [r5, #16]
   18040:	e7df      	b.n	18002 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   18042:	68ee      	ldr	r6, [r5, #12]
   18044:	b13e      	cbz	r6, 18056 <notify_le_param_updated+0xa2>
			cb->le_param_updated(conn, conn->le.interval,
   18046:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1804a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1804e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18052:	4620      	mov	r0, r4
   18054:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18056:	3514      	adds	r5, #20
   18058:	e7d6      	b.n	18008 <notify_le_param_updated+0x54>
   1805a:	d3f2      	bcc.n	18042 <notify_le_param_updated+0x8e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1805e:	bf00      	nop
   18060:	20002c18 	.word	0x20002c18
   18064:	00026228 	.word	0x00026228
   18068:	0002623c 	.word	0x0002623c
   1806c:	00028973 	.word	0x00028973
   18070:	00028943 	.word	0x00028943
   18074:	00026f1a 	.word	0x00026f1a
   18078:	00027466 	.word	0x00027466

0001807c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18080:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   18082:	4608      	mov	r0, r1
{
   18084:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18086:	f00b fff5 	bl	24074 <bt_le_conn_params_valid>
   1808a:	4605      	mov	r5, r0
   1808c:	b918      	cbnz	r0, 18096 <le_param_req+0x1a>
		return false;
   1808e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   18090:	4628      	mov	r0, r5
   18092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18096:	4b1b      	ldr	r3, [pc, #108]	; (18104 <le_param_req+0x88>)
   18098:	681e      	ldr	r6, [r3, #0]
   1809a:	b99e      	cbnz	r6, 180c4 <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1809c:	4e1a      	ldr	r6, [pc, #104]	; (18108 <le_param_req+0x8c>)
   1809e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1810c <le_param_req+0x90>
   180a2:	4546      	cmp	r6, r8
   180a4:	d927      	bls.n	180f6 <le_param_req+0x7a>
   180a6:	491a      	ldr	r1, [pc, #104]	; (18110 <le_param_req+0x94>)
   180a8:	4a1a      	ldr	r2, [pc, #104]	; (18114 <le_param_req+0x98>)
   180aa:	481b      	ldr	r0, [pc, #108]	; (18118 <le_param_req+0x9c>)
   180ac:	f240 634c 	movw	r3, #1612	; 0x64c
   180b0:	f00b faa3 	bl	235fa <assert_print>
   180b4:	4819      	ldr	r0, [pc, #100]	; (1811c <le_param_req+0xa0>)
   180b6:	f00b faa0 	bl	235fa <assert_print>
   180ba:	4816      	ldr	r0, [pc, #88]	; (18114 <le_param_req+0x98>)
   180bc:	f240 614c 	movw	r1, #1612	; 0x64c
   180c0:	f00b fa94 	bl	235ec <assert_post_action>
		if (!cb->le_param_req) {
   180c4:	68b3      	ldr	r3, [r6, #8]
   180c6:	b90b      	cbnz	r3, 180cc <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   180c8:	6936      	ldr	r6, [r6, #16]
   180ca:	e7e6      	b.n	1809a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   180cc:	4621      	mov	r1, r4
   180ce:	4638      	mov	r0, r7
   180d0:	4798      	blx	r3
   180d2:	2800      	cmp	r0, #0
   180d4:	d0db      	beq.n	1808e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   180d6:	4620      	mov	r0, r4
   180d8:	f00b ffcc 	bl	24074 <bt_le_conn_params_valid>
   180dc:	2800      	cmp	r0, #0
   180de:	d1f3      	bne.n	180c8 <le_param_req+0x4c>
   180e0:	e7d5      	b.n	1808e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   180e2:	4621      	mov	r1, r4
   180e4:	4638      	mov	r0, r7
   180e6:	4798      	blx	r3
   180e8:	2800      	cmp	r0, #0
   180ea:	d0d0      	beq.n	1808e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   180ec:	4620      	mov	r0, r4
   180ee:	f00b ffc1 	bl	24074 <bt_le_conn_params_valid>
   180f2:	b920      	cbnz	r0, 180fe <le_param_req+0x82>
   180f4:	e7cb      	b.n	1808e <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   180f6:	d2cb      	bcs.n	18090 <le_param_req+0x14>
		if (!cb->le_param_req) {
   180f8:	68b3      	ldr	r3, [r6, #8]
   180fa:	2b00      	cmp	r3, #0
   180fc:	d1f1      	bne.n	180e2 <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   180fe:	3614      	adds	r6, #20
   18100:	e7cf      	b.n	180a2 <le_param_req+0x26>
   18102:	bf00      	nop
   18104:	20002c18 	.word	0x20002c18
   18108:	00026228 	.word	0x00026228
   1810c:	0002623c 	.word	0x0002623c
   18110:	00028973 	.word	0x00028973
   18114:	00028943 	.word	0x00028943
   18118:	00026f1a 	.word	0x00026f1a
   1811c:	00027466 	.word	0x00027466

00018120 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18120:	b570      	push	{r4, r5, r6, lr}
   18122:	4606      	mov	r6, r0
   18124:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18126:	4809      	ldr	r0, [pc, #36]	; (1814c <bt_conn_add_le+0x2c>)
   18128:	2101      	movs	r1, #1
   1812a:	f7ff fb93 	bl	17854 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1812e:	4604      	mov	r4, r0
   18130:	b150      	cbz	r0, 18148 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   18132:	7206      	strb	r6, [r0, #8]
   18134:	2207      	movs	r2, #7
   18136:	4629      	mov	r1, r5
   18138:	3090      	adds	r0, #144	; 0x90
   1813a:	f00b fe6b 	bl	23e14 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1813e:	2301      	movs	r3, #1
   18140:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18142:	4b03      	ldr	r3, [pc, #12]	; (18150 <bt_conn_add_le+0x30>)
   18144:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18148:	4620      	mov	r0, r4
   1814a:	bd70      	pop	{r4, r5, r6, pc}
   1814c:	20001ea0 	.word	0x20001ea0
   18150:	00280018 	.word	0x00280018

00018154 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18154:	b570      	push	{r4, r5, r6, lr}
   18156:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18158:	480a      	ldr	r0, [pc, #40]	; (18184 <bt_conn_lookup_addr_le+0x30>)
{
   1815a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1815c:	f7ff fd54 	bl	17c08 <bt_conn_ref>
   18160:	4604      	mov	r4, r0

		if (!conn) {
   18162:	b120      	cbz	r0, 1816e <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18164:	7883      	ldrb	r3, [r0, #2]
   18166:	2b01      	cmp	r3, #1
   18168:	d004      	beq.n	18174 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1816a:	f7ff fd7d 	bl	17c68 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1816e:	2400      	movs	r4, #0
}
   18170:	4620      	mov	r0, r4
   18172:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   18174:	4632      	mov	r2, r6
   18176:	4629      	mov	r1, r5
   18178:	f00c f914 	bl	243a4 <bt_conn_is_peer_addr_le>
   1817c:	2800      	cmp	r0, #0
   1817e:	d1f7      	bne.n	18170 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   18180:	4620      	mov	r0, r4
   18182:	e7f2      	b.n	1816a <bt_conn_lookup_addr_le+0x16>
   18184:	20001ea0 	.word	0x20001ea0

00018188 <bt_conn_exists_le>:
{
   18188:	b5b0      	push	{r4, r5, r7, lr}
   1818a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1818c:	f7ff ffe2 	bl	18154 <bt_conn_lookup_addr_le>
	if (conn) {
   18190:	4604      	mov	r4, r0
   18192:	b1e0      	cbz	r0, 181ce <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   18194:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   18196:	2b08      	cmp	r3, #8
   18198:	bf96      	itet	ls
   1819a:	4a0e      	ldrls	r2, [pc, #56]	; (181d4 <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1819c:	4b0e      	ldrhi	r3, [pc, #56]	; (181d8 <bt_conn_exists_le+0x50>)
   1819e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   181a2:	466d      	mov	r5, sp
   181a4:	b088      	sub	sp, #32
   181a6:	466a      	mov	r2, sp
   181a8:	490c      	ldr	r1, [pc, #48]	; (181dc <bt_conn_exists_le+0x54>)
   181aa:	480d      	ldr	r0, [pc, #52]	; (181e0 <bt_conn_exists_le+0x58>)
   181ac:	e9c2 1305 	strd	r1, r3, [r2, #20]
   181b0:	f44f 7300 	mov.w	r3, #512	; 0x200
   181b4:	8393      	strh	r3, [r2, #28]
   181b6:	4b0b      	ldr	r3, [pc, #44]	; (181e4 <bt_conn_exists_le+0x5c>)
   181b8:	f842 3f10 	str.w	r3, [r2, #16]!
   181bc:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   181c0:	f00c f8b6 	bl	24330 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   181c4:	4620      	mov	r0, r4
   181c6:	46ad      	mov	sp, r5
   181c8:	f7ff fd4e 	bl	17c68 <bt_conn_unref>
		return true;
   181cc:	2001      	movs	r0, #1
}
   181ce:	46bd      	mov	sp, r7
   181d0:	bdb0      	pop	{r4, r5, r7, pc}
   181d2:	bf00      	nop
   181d4:	00026668 	.word	0x00026668
   181d8:	00028b0b 	.word	0x00028b0b
   181dc:	00028c74 	.word	0x00028c74
   181e0:	00026284 	.word	0x00026284
   181e4:	01000003 	.word	0x01000003

000181e8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   181e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181ea:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   181ec:	480e      	ldr	r0, [pc, #56]	; (18228 <bt_conn_lookup_state_le+0x40>)
{
   181ee:	460e      	mov	r6, r1
   181f0:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   181f2:	f7ff fd09 	bl	17c08 <bt_conn_ref>

		if (!conn) {
   181f6:	4604      	mov	r4, r0
   181f8:	b120      	cbz	r0, 18204 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   181fa:	7883      	ldrb	r3, [r0, #2]
   181fc:	2b01      	cmp	r3, #1
   181fe:	d003      	beq.n	18208 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18200:	f7ff fd32 	bl	17c68 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18204:	2400      	movs	r4, #0
   18206:	e00d      	b.n	18224 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18208:	b136      	cbz	r6, 18218 <bt_conn_lookup_state_le+0x30>
   1820a:	4632      	mov	r2, r6
   1820c:	4629      	mov	r1, r5
   1820e:	f00c f8c9 	bl	243a4 <bt_conn_is_peer_addr_le>
   18212:	b908      	cbnz	r0, 18218 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18214:	4620      	mov	r0, r4
   18216:	e7f3      	b.n	18200 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18218:	7aa3      	ldrb	r3, [r4, #10]
   1821a:	42bb      	cmp	r3, r7
   1821c:	d1fa      	bne.n	18214 <bt_conn_lookup_state_le+0x2c>
   1821e:	7a23      	ldrb	r3, [r4, #8]
   18220:	42ab      	cmp	r3, r5
   18222:	d1f7      	bne.n	18214 <bt_conn_lookup_state_le+0x2c>
}
   18224:	4620      	mov	r0, r4
   18226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18228:	20001ea0 	.word	0x20001ea0

0001822c <send_conn_le_param_update>:
{
   1822c:	b538      	push	{r3, r4, r5, lr}
   1822e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18230:	4608      	mov	r0, r1
{
   18232:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18234:	f00b ff1e 	bl	24074 <bt_le_conn_params_valid>
   18238:	b348      	cbz	r0, 1828e <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1823a:	4b16      	ldr	r3, [pc, #88]	; (18294 <send_conn_le_param_update+0x68>)
   1823c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   18240:	0799      	lsls	r1, r3, #30
   18242:	d407      	bmi.n	18254 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   18244:	78e3      	ldrb	r3, [r4, #3]
   18246:	b183      	cbz	r3, 1826a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   18248:	4629      	mov	r1, r5
   1824a:	4620      	mov	r0, r4
}
   1824c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18250:	f000 bae0 	b.w	18814 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18254:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   18258:	079a      	lsls	r2, r3, #30
   1825a:	d5f3      	bpl.n	18244 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1825c:	f3bf 8f5b 	dmb	ish
   18260:	6863      	ldr	r3, [r4, #4]
   18262:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18266:	055b      	lsls	r3, r3, #21
   18268:	d4ec      	bmi.n	18244 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1826a:	4629      	mov	r1, r5
   1826c:	4620      	mov	r0, r4
   1826e:	f00c f8bb 	bl	243e8 <bt_conn_le_conn_update>
		if (rc == 0) {
   18272:	b958      	cbnz	r0, 1828c <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   18274:	882b      	ldrh	r3, [r5, #0]
   18276:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1827a:	886b      	ldrh	r3, [r5, #2]
   1827c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   18280:	88ab      	ldrh	r3, [r5, #4]
   18282:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18286:	88eb      	ldrh	r3, [r5, #6]
   18288:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1828c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1828e:	f06f 0015 	mvn.w	r0, #21
   18292:	e7fb      	b.n	1828c <send_conn_le_param_update+0x60>
   18294:	20000388 	.word	0x20000388

00018298 <deferred_work>:
{
   18298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1829c:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   1829e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   182a2:	af00      	add	r7, sp, #0
   182a4:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   182a6:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   182aa:	bb8b      	cbnz	r3, 18310 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   182ac:	4630      	mov	r0, r6
   182ae:	f00c f8f8 	bl	244a2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   182b2:	4b47      	ldr	r3, [pc, #284]	; (183d0 <deferred_work+0x138>)
   182b4:	681d      	ldr	r5, [r3, #0]
   182b6:	b99d      	cbnz	r5, 182e0 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   182b8:	4d46      	ldr	r5, [pc, #280]	; (183d4 <deferred_work+0x13c>)
   182ba:	f8df 811c 	ldr.w	r8, [pc, #284]	; 183d8 <deferred_work+0x140>
   182be:	4545      	cmp	r5, r8
   182c0:	d91e      	bls.n	18300 <deferred_work+0x68>
   182c2:	4946      	ldr	r1, [pc, #280]	; (183dc <deferred_work+0x144>)
   182c4:	4a46      	ldr	r2, [pc, #280]	; (183e0 <deferred_work+0x148>)
   182c6:	4847      	ldr	r0, [pc, #284]	; (183e4 <deferred_work+0x14c>)
   182c8:	f240 53cb 	movw	r3, #1483	; 0x5cb
   182cc:	f00b f995 	bl	235fa <assert_print>
   182d0:	4845      	ldr	r0, [pc, #276]	; (183e8 <deferred_work+0x150>)
   182d2:	f00b f992 	bl	235fa <assert_print>
   182d6:	4842      	ldr	r0, [pc, #264]	; (183e0 <deferred_work+0x148>)
   182d8:	f240 51cb 	movw	r1, #1483	; 0x5cb
   182dc:	f00b f986 	bl	235ec <assert_post_action>
		if (cb->disconnected) {
   182e0:	686b      	ldr	r3, [r5, #4]
   182e2:	b11b      	cbz	r3, 182ec <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   182e4:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   182e8:	4630      	mov	r0, r6
   182ea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   182ec:	692d      	ldr	r5, [r5, #16]
   182ee:	e7e2      	b.n	182b6 <deferred_work+0x1e>
		if (cb->disconnected) {
   182f0:	686b      	ldr	r3, [r5, #4]
   182f2:	b11b      	cbz	r3, 182fc <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   182f4:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   182f8:	4630      	mov	r0, r6
   182fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   182fc:	3514      	adds	r5, #20
   182fe:	e7de      	b.n	182be <deferred_work+0x26>
   18300:	d3f6      	bcc.n	182f0 <deferred_work+0x58>
		bt_conn_unref(conn);
   18302:	4630      	mov	r0, r6
   18304:	f7ff fcb0 	bl	17c68 <bt_conn_unref>
}
   18308:	3708      	adds	r7, #8
   1830a:	46bd      	mov	sp, r7
   1830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   18310:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18314:	2b01      	cmp	r3, #1
   18316:	d1f7      	bne.n	18308 <deferred_work+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18318:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1831c:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   18320:	e855 3f00 	ldrex	r3, [r5]
   18324:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18328:	e845 2100 	strex	r1, r2, [r5]
   1832c:	2900      	cmp	r1, #0
   1832e:	d1f7      	bne.n	18320 <deferred_work+0x88>
   18330:	f3bf 8f5b 	dmb	ish
   18334:	0599      	lsls	r1, r3, #22
   18336:	d531      	bpl.n	1839c <deferred_work+0x104>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18338:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1833a:	603b      	str	r3, [r7, #0]
   1833c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1833e:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   18340:	4639      	mov	r1, r7
   18342:	4630      	mov	r0, r6
   18344:	f7ff ff72 	bl	1822c <send_conn_le_param_update>
		if (!err) {
   18348:	b9c0      	cbnz	r0, 1837c <deferred_work+0xe4>
   1834a:	f3bf 8f5b 	dmb	ish
   1834e:	e855 3f00 	ldrex	r3, [r5]
   18352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   18356:	e845 3200 	strex	r2, r3, [r5]
   1835a:	2a00      	cmp	r2, #0
   1835c:	d1f7      	bne.n	1834e <deferred_work+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1835e:	f3bf 8f5b 	dmb	ish
   18362:	f3bf 8f5b 	dmb	ish
   18366:	e855 3f00 	ldrex	r3, [r5]
   1836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1836e:	e845 3200 	strex	r2, r3, [r5]
   18372:	2a00      	cmp	r2, #0
   18374:	d1f7      	bne.n	18366 <deferred_work+0xce>
   18376:	f3bf 8f5b 	dmb	ish
   1837a:	e7c5      	b.n	18308 <deferred_work+0x70>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1837c:	466c      	mov	r4, sp
   1837e:	b088      	sub	sp, #32
   18380:	466a      	mov	r2, sp
   18382:	4b1a      	ldr	r3, [pc, #104]	; (183ec <deferred_work+0x154>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   18384:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18388:	2303      	movs	r3, #3
   1838a:	f842 3f10 	str.w	r3, [r2, #16]!
   1838e:	4818      	ldr	r0, [pc, #96]	; (183f0 <deferred_work+0x158>)
   18390:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18394:	f00b ffcc 	bl	24330 <z_log_msg_static_create.constprop.0>
   18398:	46a5      	mov	sp, r4
   1839a:	e7e2      	b.n	18362 <deferred_work+0xca>
		param = BT_LE_CONN_PARAM(
   1839c:	4a15      	ldr	r2, [pc, #84]	; (183f4 <deferred_work+0x15c>)
   1839e:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   183a2:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   183a6:	4639      	mov	r1, r7
   183a8:	4630      	mov	r0, r6
   183aa:	f7ff ff3f 	bl	1822c <send_conn_le_param_update>
		if (!err) {
   183ae:	b950      	cbnz	r0, 183c6 <deferred_work+0x12e>
   183b0:	f3bf 8f5b 	dmb	ish
   183b4:	e855 3f00 	ldrex	r3, [r5]
   183b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   183bc:	e845 3200 	strex	r2, r3, [r5]
   183c0:	2a00      	cmp	r2, #0
   183c2:	d0cc      	beq.n	1835e <deferred_work+0xc6>
   183c4:	e7f6      	b.n	183b4 <deferred_work+0x11c>
			LOG_WRN("Send auto LE param update failed (err %d)",
   183c6:	466c      	mov	r4, sp
   183c8:	b088      	sub	sp, #32
   183ca:	466a      	mov	r2, sp
   183cc:	4b0a      	ldr	r3, [pc, #40]	; (183f8 <deferred_work+0x160>)
   183ce:	e7d9      	b.n	18384 <deferred_work+0xec>
   183d0:	20002c18 	.word	0x20002c18
   183d4:	00026228 	.word	0x00026228
   183d8:	0002623c 	.word	0x0002623c
   183dc:	00028973 	.word	0x00028973
   183e0:	00028943 	.word	0x00028943
   183e4:	00026f1a 	.word	0x00026f1a
   183e8:	00027466 	.word	0x00027466
   183ec:	00028c97 	.word	0x00028c97
   183f0:	00026284 	.word	0x00026284
   183f4:	00280018 	.word	0x00280018
   183f8:	00028cbc 	.word	0x00028cbc

000183fc <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   183fc:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   183fe:	4801      	ldr	r0, [pc, #4]	; (18404 <bt_conn_create_frag_timeout+0x8>)
   18400:	f7ff bd9a 	b.w	17f38 <bt_conn_create_pdu_timeout>
   18404:	20000a44 	.word	0x20000a44

00018408 <bt_conn_process_tx>:
{
   18408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1840c:	7a83      	ldrb	r3, [r0, #10]
{
   1840e:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18410:	b993      	cbnz	r3, 18438 <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18412:	f3bf 8f5b 	dmb	ish
   18416:	1d03      	adds	r3, r0, #4
   18418:	e853 2f00 	ldrex	r2, [r3]
   1841c:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18420:	e843 1400 	strex	r4, r1, [r3]
   18424:	2c00      	cmp	r4, #0
   18426:	d1f7      	bne.n	18418 <bt_conn_process_tx+0x10>
   18428:	f3bf 8f5b 	dmb	ish
   1842c:	0653      	lsls	r3, r2, #25
   1842e:	d503      	bpl.n	18438 <bt_conn_process_tx+0x30>
}
   18430:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   18434:	f7ff ba40 	b.w	178b8 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   18438:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1843c:	f00d fbe3 	bl	25c06 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   18440:	4604      	mov	r4, r0
   18442:	b960      	cbnz	r0, 1845e <bt_conn_process_tx+0x56>
   18444:	4a33      	ldr	r2, [pc, #204]	; (18514 <bt_conn_process_tx+0x10c>)
   18446:	4934      	ldr	r1, [pc, #208]	; (18518 <bt_conn_process_tx+0x110>)
   18448:	4834      	ldr	r0, [pc, #208]	; (1851c <bt_conn_process_tx+0x114>)
   1844a:	f44f 735d 	mov.w	r3, #884	; 0x374
   1844e:	f00b f8d4 	bl	235fa <assert_print>
   18452:	4040      	eors	r0, r0
   18454:	f380 8811 	msr	BASEPRI, r0
   18458:	f04f 0003 	mov.w	r0, #3
   1845c:	df02      	svc	2
	buf = net_buf_ref(buf);
   1845e:	4620      	mov	r0, r4
   18460:	f002 fdd4 	bl	1b00c <net_buf_ref>
	return bt_dev.le.acl_mtu;
   18464:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 18520 <bt_conn_process_tx+0x118>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   18468:	8a02      	ldrh	r2, [r0, #16]
   1846a:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1846e:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   18470:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   18472:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   18474:	d807      	bhi.n	18486 <bt_conn_process_tx+0x7e>
   18476:	b932      	cbnz	r2, 18486 <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   18478:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   1847a:	4621      	mov	r1, r4
   1847c:	4628      	mov	r0, r5
   1847e:	f7ff f8e9 	bl	17654 <send_frag>
   18482:	4606      	mov	r6, r0
   18484:	e030      	b.n	184e8 <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
   18486:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   18488:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   1848c:	8a22      	ldrh	r2, [r4, #16]
   1848e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   18492:	429a      	cmp	r2, r3
   18494:	d804      	bhi.n	184a0 <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
   18496:	2301      	movs	r3, #1
   18498:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   1849a:	2200      	movs	r2, #0
   1849c:	2303      	movs	r3, #3
   1849e:	e7ec      	b.n	1847a <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
   184a0:	f04f 33ff 	mov.w	r3, #4294967295
   184a4:	f04f 32ff 	mov.w	r2, #4294967295
   184a8:	2000      	movs	r0, #0
   184aa:	f7ff ffa7 	bl	183fc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   184ae:	7aab      	ldrb	r3, [r5, #10]
   184b0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   184b2:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   184b4:	d006      	beq.n	184c4 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
   184b6:	f002 fd65 	bl	1af84 <net_buf_unref>
	net_buf_unref(buf);
   184ba:	4620      	mov	r0, r4
}
   184bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   184c0:	f002 bd60 	b.w	1af84 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   184c4:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   184c8:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   184cc:	4602      	mov	r2, r0
   184ce:	463b      	mov	r3, r7
   184d0:	4621      	mov	r1, r4
   184d2:	4628      	mov	r0, r5
   184d4:	f7ff f8be 	bl	17654 <send_frag>
		if (err) {
   184d8:	4606      	mov	r6, r0
   184da:	b1b8      	cbz	r0, 1850c <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
   184dc:	f007 0701 	and.w	r7, r7, #1
   184e0:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   184e2:	4640      	mov	r0, r8
   184e4:	f002 fd4e 	bl	1af84 <net_buf_unref>
	net_buf_unref(buf);
   184e8:	4620      	mov	r0, r4
   184ea:	f002 fd4b 	bl	1af84 <net_buf_unref>
	if (err  == -EIO) {
   184ee:	3605      	adds	r6, #5
   184f0:	d10e      	bne.n	18510 <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   184f2:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   184f4:	2300      	movs	r3, #0
   184f6:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   184f8:	4620      	mov	r0, r4
   184fa:	f002 fd43 	bl	1af84 <net_buf_unref>
		if (tx) {
   184fe:	b13e      	cbz	r6, 18510 <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
   18500:	4631      	mov	r1, r6
   18502:	4628      	mov	r0, r5
}
   18504:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   18508:	f7ff b87e 	b.w	17608 <conn_tx_destroy>
		flags = FRAG_CONT;
   1850c:	2701      	movs	r7, #1
   1850e:	e7bd      	b.n	1848c <bt_conn_process_tx+0x84>
}
   18510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18514:	00028943 	.word	0x00028943
   18518:	000294a9 	.word	0x000294a9
   1851c:	00026f1a 	.word	0x00026f1a
   18520:	20000388 	.word	0x20000388

00018524 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   18524:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   18526:	480c      	ldr	r0, [pc, #48]	; (18558 <bt_conn_init+0x34>)
   18528:	f00d fb4b 	bl	25bc2 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1852c:	490b      	ldr	r1, [pc, #44]	; (1855c <bt_conn_init+0x38>)
   1852e:	480a      	ldr	r0, [pc, #40]	; (18558 <bt_conn_init+0x34>)
   18530:	f00d fb54 	bl	25bdc <k_queue_append>
   18534:	490a      	ldr	r1, [pc, #40]	; (18560 <bt_conn_init+0x3c>)
   18536:	4808      	ldr	r0, [pc, #32]	; (18558 <bt_conn_init+0x34>)
   18538:	f00d fb50 	bl	25bdc <k_queue_append>
   1853c:	4909      	ldr	r1, [pc, #36]	; (18564 <bt_conn_init+0x40>)
   1853e:	4806      	ldr	r0, [pc, #24]	; (18558 <bt_conn_init+0x34>)
   18540:	f00d fb4c 	bl	25bdc <k_queue_append>
	}

	bt_att_init();
   18544:	f001 f954 	bl	197f0 <bt_att_init>

	err = bt_smp_init();
   18548:	f00c fe4d 	bl	251e6 <bt_smp_init>
	if (err) {
   1854c:	4604      	mov	r4, r0
   1854e:	b908      	cbnz	r0, 18554 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   18550:	f00b ffe5 	bl	2451e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   18554:	4620      	mov	r0, r4
   18556:	bd10      	pop	{r4, pc}
   18558:	200009c0 	.word	0x200009c0
   1855c:	20002be8 	.word	0x20002be8
   18560:	20002bf8 	.word	0x20002bf8
   18564:	20002c08 	.word	0x20002c08

00018568 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18568:	b580      	push	{r7, lr}
   1856a:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1856c:	b088      	sub	sp, #32
   1856e:	466a      	mov	r2, sp
   18570:	4b06      	ldr	r3, [pc, #24]	; (1858c <l2cap_create_le_sig_pdu.part.0+0x24>)
   18572:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18576:	2303      	movs	r3, #3
   18578:	f842 3f10 	str.w	r3, [r2, #16]!
   1857c:	4804      	ldr	r0, [pc, #16]	; (18590 <l2cap_create_le_sig_pdu.part.0+0x28>)
   1857e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18582:	f00b ff5a 	bl	2443a <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   18586:	2000      	movs	r0, #0
   18588:	46bd      	mov	sp, r7
   1858a:	bd80      	pop	{r7, pc}
   1858c:	00028d5f 	.word	0x00028d5f
   18590:	000262ac 	.word	0x000262ac

00018594 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18594:	b580      	push	{r7, lr}
   18596:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   18598:	b088      	sub	sp, #32
   1859a:	466a      	mov	r2, sp
   1859c:	4b07      	ldr	r3, [pc, #28]	; (185bc <l2cap_accept.part.0+0x28>)
   1859e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   185a2:	2303      	movs	r3, #3
   185a4:	f842 3f10 	str.w	r3, [r2, #16]!
   185a8:	4805      	ldr	r0, [pc, #20]	; (185c0 <l2cap_accept.part.0+0x2c>)
   185aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   185ae:	f00b ff44 	bl	2443a <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   185b2:	f06f 000b 	mvn.w	r0, #11
   185b6:	46bd      	mov	sp, r7
   185b8:	bd80      	pop	{r7, pc}
   185ba:	bf00      	nop
   185bc:	00028d87 	.word	0x00028d87
   185c0:	000262ac 	.word	0x000262ac

000185c4 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   185c4:	4b04      	ldr	r3, [pc, #16]	; (185d8 <l2cap_accept+0x14>)
   185c6:	681a      	ldr	r2, [r3, #0]
   185c8:	b10a      	cbz	r2, 185ce <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   185ca:	f7ff bfe3 	b.w	18594 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   185ce:	4803      	ldr	r0, [pc, #12]	; (185dc <l2cap_accept+0x18>)
   185d0:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   185d2:	600b      	str	r3, [r1, #0]
}
   185d4:	4610      	mov	r0, r2
   185d6:	4770      	bx	lr
   185d8:	20002c1c 	.word	0x20002c1c
   185dc:	000266ac 	.word	0x000266ac

000185e0 <bt_l2cap_connected>:
{
   185e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   185e2:	4d2c      	ldr	r5, [pc, #176]	; (18694 <bt_l2cap_connected+0xb4>)
   185e4:	4f2c      	ldr	r7, [pc, #176]	; (18698 <bt_l2cap_connected+0xb8>)
{
   185e6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   185e8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   185ea:	42bd      	cmp	r5, r7
   185ec:	d94e      	bls.n	1868c <bt_l2cap_connected+0xac>
   185ee:	492b      	ldr	r1, [pc, #172]	; (1869c <bt_l2cap_connected+0xbc>)
   185f0:	4a2b      	ldr	r2, [pc, #172]	; (186a0 <bt_l2cap_connected+0xc0>)
   185f2:	482c      	ldr	r0, [pc, #176]	; (186a4 <bt_l2cap_connected+0xc4>)
   185f4:	f240 1381 	movw	r3, #385	; 0x181
   185f8:	f00a ffff 	bl	235fa <assert_print>
   185fc:	482a      	ldr	r0, [pc, #168]	; (186a8 <bt_l2cap_connected+0xc8>)
   185fe:	f00a fffc 	bl	235fa <assert_print>
   18602:	4827      	ldr	r0, [pc, #156]	; (186a0 <bt_l2cap_connected+0xc0>)
   18604:	f240 1181 	movw	r1, #385	; 0x181
   18608:	f00a fff0 	bl	235ec <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   1860c:	686b      	ldr	r3, [r5, #4]
   1860e:	a901      	add	r1, sp, #4
   18610:	4620      	mov	r0, r4
   18612:	4798      	blx	r3
   18614:	2800      	cmp	r0, #0
   18616:	db34      	blt.n	18682 <bt_l2cap_connected+0xa2>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   18618:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1861a:	882a      	ldrh	r2, [r5, #0]
   1861c:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1861e:	849a      	strh	r2, [r3, #36]	; 0x24
   18620:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18624:	68a8      	ldr	r0, [r5, #8]
   18626:	f3bf 8f5b 	dmb	ish
   1862a:	e852 1f00 	ldrex	r1, [r2]
   1862e:	e842 6c00 	strex	ip, r6, [r2]
   18632:	f1bc 0f00 	cmp.w	ip, #0
   18636:	d1f8      	bne.n	1862a <bt_l2cap_connected+0x4a>
   18638:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1863c:	609e      	str	r6, [r3, #8]
	return list->tail;
   1863e:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   18640:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   18644:	b9f9      	cbnz	r1, 18686 <bt_l2cap_connected+0xa6>
	list->head = node;
   18646:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1864a:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1864c:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1864e:	9801      	ldr	r0, [sp, #4]
   18650:	6843      	ldr	r3, [r0, #4]
   18652:	681b      	ldr	r3, [r3, #0]
   18654:	b103      	cbz	r3, 18658 <bt_l2cap_connected+0x78>
			chan->ops->connected(chan);
   18656:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18658:	9b01      	ldr	r3, [sp, #4]
   1865a:	f3bf 8f5b 	dmb	ish
   1865e:	3310      	adds	r3, #16
   18660:	e853 1f00 	ldrex	r1, [r3]
   18664:	f041 0101 	orr.w	r1, r1, #1
   18668:	e843 1200 	strex	r2, r1, [r3]
   1866c:	2a00      	cmp	r2, #0
   1866e:	d1f7      	bne.n	18660 <bt_l2cap_connected+0x80>
   18670:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18674:	9801      	ldr	r0, [sp, #4]
   18676:	6843      	ldr	r3, [r0, #4]
   18678:	69db      	ldr	r3, [r3, #28]
   1867a:	b113      	cbz	r3, 18682 <bt_l2cap_connected+0xa2>
			chan->ops->status(chan, chan->status);
   1867c:	f100 0110 	add.w	r1, r0, #16
   18680:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18682:	350c      	adds	r5, #12
   18684:	e7b1      	b.n	185ea <bt_l2cap_connected+0xa>
	parent->next = child;
   18686:	600a      	str	r2, [r1, #0]
	list->tail = node;
   18688:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1868a:	e7de      	b.n	1864a <bt_l2cap_connected+0x6a>
   1868c:	d3be      	bcc.n	1860c <bt_l2cap_connected+0x2c>
}
   1868e:	b003      	add	sp, #12
   18690:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18692:	bf00      	nop
   18694:	00026204 	.word	0x00026204
   18698:	00026228 	.word	0x00026228
   1869c:	00028ddf 	.word	0x00028ddf
   186a0:	00028dae 	.word	0x00028dae
   186a4:	00026f1a 	.word	0x00026f1a
   186a8:	00027466 	.word	0x00027466

000186ac <l2cap_recv>:
{
   186ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   186ae:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   186b0:	8a0b      	ldrh	r3, [r1, #16]
   186b2:	2b03      	cmp	r3, #3
{
   186b4:	af02      	add	r7, sp, #8
   186b6:	4606      	mov	r6, r0
   186b8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   186ba:	d80b      	bhi.n	186d4 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   186bc:	4b30      	ldr	r3, [pc, #192]	; (18780 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   186be:	617b      	str	r3, [r7, #20]
   186c0:	2302      	movs	r3, #2
   186c2:	4830      	ldr	r0, [pc, #192]	; (18784 <l2cap_recv+0xd8>)
   186c4:	613b      	str	r3, [r7, #16]
   186c6:	f107 0210 	add.w	r2, r7, #16
   186ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   186ce:	f00b feb4 	bl	2443a <z_log_msg_static_create.constprop.0>
		return 0;
   186d2:	e019      	b.n	18708 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   186d4:	2104      	movs	r1, #4
   186d6:	f105 000c 	add.w	r0, r5, #12
   186da:	f002 fd79 	bl	1b1d0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   186de:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   186e0:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   186e2:	4299      	cmp	r1, r3
   186e4:	4604      	mov	r4, r0
   186e6:	d013      	beq.n	18710 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   186e8:	466c      	mov	r4, sp
   186ea:	b088      	sub	sp, #32
   186ec:	aa02      	add	r2, sp, #8
   186ee:	4826      	ldr	r0, [pc, #152]	; (18788 <l2cap_recv+0xdc>)
   186f0:	61d3      	str	r3, [r2, #28]
   186f2:	2304      	movs	r3, #4
   186f4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   186f8:	f842 3f10 	str.w	r3, [r2, #16]!
   186fc:	4821      	ldr	r0, [pc, #132]	; (18784 <l2cap_recv+0xd8>)
   186fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18702:	f00b fe9a 	bl	2443a <z_log_msg_static_create.constprop.0>
   18706:	46a5      	mov	sp, r4
}
   18708:	2000      	movs	r0, #0
   1870a:	371c      	adds	r7, #28
   1870c:	46bd      	mov	sp, r7
   1870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   18710:	7843      	ldrb	r3, [r0, #1]
   18712:	b90b      	cbnz	r3, 18718 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   18714:	4b1d      	ldr	r3, [pc, #116]	; (1878c <l2cap_recv+0xe0>)
   18716:	e7d2      	b.n	186be <l2cap_recv+0x12>
	switch (hdr->code) {
   18718:	7803      	ldrb	r3, [r0, #0]
   1871a:	2b01      	cmp	r3, #1
   1871c:	d0f4      	beq.n	18708 <l2cap_recv+0x5c>
   1871e:	2b13      	cmp	r3, #19
   18720:	d103      	bne.n	1872a <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   18722:	2901      	cmp	r1, #1
   18724:	d8f0      	bhi.n	18708 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   18726:	4b1a      	ldr	r3, [pc, #104]	; (18790 <l2cap_recv+0xe4>)
   18728:	e7c9      	b.n	186be <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1872a:	466d      	mov	r5, sp
   1872c:	b088      	sub	sp, #32
   1872e:	aa02      	add	r2, sp, #8
   18730:	4918      	ldr	r1, [pc, #96]	; (18794 <l2cap_recv+0xe8>)
   18732:	4814      	ldr	r0, [pc, #80]	; (18784 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   18734:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   18738:	2303      	movs	r3, #3
   1873a:	f842 3f10 	str.w	r3, [r2, #16]!
   1873e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18742:	f00b fe7a 	bl	2443a <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18746:	2202      	movs	r2, #2
   18748:	7861      	ldrb	r1, [r4, #1]
   1874a:	46ad      	mov	sp, r5
   1874c:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1874e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18750:	f00b fe76 	bl	24440 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18754:	4604      	mov	r4, r0
   18756:	2800      	cmp	r0, #0
   18758:	d0d6      	beq.n	18708 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1875a:	2102      	movs	r1, #2
   1875c:	300c      	adds	r0, #12
   1875e:	f002 fd55 	bl	1b20c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18762:	2300      	movs	r3, #0
   18764:	7003      	strb	r3, [r0, #0]
   18766:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18768:	4622      	mov	r2, r4
   1876a:	9300      	str	r3, [sp, #0]
   1876c:	2105      	movs	r1, #5
   1876e:	4628      	mov	r0, r5
   18770:	f00b feb2 	bl	244d8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18774:	2800      	cmp	r0, #0
   18776:	d0c7      	beq.n	18708 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   18778:	4620      	mov	r0, r4
   1877a:	f002 fc03 	bl	1af84 <net_buf_unref>
   1877e:	e7c3      	b.n	18708 <l2cap_recv+0x5c>
   18780:	00028e06 	.word	0x00028e06
   18784:	000262ac 	.word	0x000262ac
   18788:	00028e24 	.word	0x00028e24
   1878c:	00028e45 	.word	0x00028e45
   18790:	00028e66 	.word	0x00028e66
   18794:	00028e82 	.word	0x00028e82

00018798 <bt_l2cap_recv>:
{
   18798:	b5b0      	push	{r4, r5, r7, lr}
   1879a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1879c:	8a0b      	ldrh	r3, [r1, #16]
   1879e:	2b03      	cmp	r3, #3
{
   187a0:	af00      	add	r7, sp, #0
   187a2:	4605      	mov	r5, r0
   187a4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   187a6:	d810      	bhi.n	187ca <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   187a8:	4b17      	ldr	r3, [pc, #92]	; (18808 <bt_l2cap_recv+0x70>)
   187aa:	617b      	str	r3, [r7, #20]
   187ac:	4817      	ldr	r0, [pc, #92]	; (1880c <bt_l2cap_recv+0x74>)
   187ae:	2302      	movs	r3, #2
   187b0:	f107 0210 	add.w	r2, r7, #16
   187b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   187b8:	613b      	str	r3, [r7, #16]
   187ba:	f00b fe3e 	bl	2443a <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   187be:	4620      	mov	r0, r4
   187c0:	f002 fbe0 	bl	1af84 <net_buf_unref>
}
   187c4:	3718      	adds	r7, #24
   187c6:	46bd      	mov	sp, r7
   187c8:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   187ca:	2104      	movs	r1, #4
   187cc:	f104 000c 	add.w	r0, r4, #12
   187d0:	f002 fcfe 	bl	1b1d0 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   187d4:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   187d6:	4628      	mov	r0, r5
   187d8:	f00b fe97 	bl	2450a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   187dc:	b978      	cbnz	r0, 187fe <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   187de:	466d      	mov	r5, sp
   187e0:	b088      	sub	sp, #32
   187e2:	466a      	mov	r2, sp
   187e4:	4b0a      	ldr	r3, [pc, #40]	; (18810 <bt_l2cap_recv+0x78>)
   187e6:	4809      	ldr	r0, [pc, #36]	; (1880c <bt_l2cap_recv+0x74>)
   187e8:	e9c2 3105 	strd	r3, r1, [r2, #20]
   187ec:	2303      	movs	r3, #3
   187ee:	f842 3f10 	str.w	r3, [r2, #16]!
   187f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   187f6:	f00b fe20 	bl	2443a <z_log_msg_static_create.constprop.0>
   187fa:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   187fc:	e7df      	b.n	187be <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   187fe:	6843      	ldr	r3, [r0, #4]
   18800:	4621      	mov	r1, r4
   18802:	695b      	ldr	r3, [r3, #20]
   18804:	4798      	blx	r3
   18806:	e7da      	b.n	187be <bt_l2cap_recv+0x26>
   18808:	00028eaa 	.word	0x00028eaa
   1880c:	000262ac 	.word	0x000262ac
   18810:	00028ec7 	.word	0x00028ec7

00018814 <bt_l2cap_update_conn_param>:
{
   18814:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   18816:	4b17      	ldr	r3, [pc, #92]	; (18874 <bt_l2cap_update_conn_param+0x60>)
{
   18818:	460e      	mov	r6, r1
	ident++;
   1881a:	7819      	ldrb	r1, [r3, #0]
   1881c:	3101      	adds	r1, #1
   1881e:	b2c9      	uxtb	r1, r1
   18820:	2901      	cmp	r1, #1
   18822:	bf38      	it	cc
   18824:	2101      	movcc	r1, #1
{
   18826:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18828:	2208      	movs	r2, #8
   1882a:	2012      	movs	r0, #18
	ident++;
   1882c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1882e:	f00b fe07 	bl	24440 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   18832:	4604      	mov	r4, r0
   18834:	b1d0      	cbz	r0, 1886c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   18836:	2108      	movs	r1, #8
   18838:	300c      	adds	r0, #12
   1883a:	f002 fce7 	bl	1b20c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1883e:	8833      	ldrh	r3, [r6, #0]
   18840:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18842:	8873      	ldrh	r3, [r6, #2]
   18844:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18846:	88b3      	ldrh	r3, [r6, #4]
   18848:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1884a:	88f3      	ldrh	r3, [r6, #6]
   1884c:	80c3      	strh	r3, [r0, #6]
   1884e:	2300      	movs	r3, #0
   18850:	4628      	mov	r0, r5
   18852:	9300      	str	r3, [sp, #0]
   18854:	4622      	mov	r2, r4
   18856:	2105      	movs	r1, #5
   18858:	f00b fe3e 	bl	244d8 <bt_l2cap_send_cb>
	if (err) {
   1885c:	4605      	mov	r5, r0
   1885e:	b110      	cbz	r0, 18866 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   18860:	4620      	mov	r0, r4
   18862:	f002 fb8f 	bl	1af84 <net_buf_unref>
}
   18866:	4628      	mov	r0, r5
   18868:	b002      	add	sp, #8
   1886a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1886c:	f06f 050b 	mvn.w	r5, #11
   18870:	e7f9      	b.n	18866 <bt_l2cap_update_conn_param+0x52>
   18872:	bf00      	nop
   18874:	20002fff 	.word	0x20002fff

00018878 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   18878:	2823      	cmp	r0, #35	; 0x23
   1887a:	d81f      	bhi.n	188bc <att_op_get_type+0x44>
   1887c:	281a      	cmp	r0, #26
   1887e:	d804      	bhi.n	1888a <att_op_get_type+0x12>
   18880:	1e43      	subs	r3, r0, #1
   18882:	2b18      	cmp	r3, #24
   18884:	d90e      	bls.n	188a4 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   18886:	2006      	movs	r0, #6
   18888:	4770      	bx	lr
	switch (op) {
   1888a:	f1a0 031b 	sub.w	r3, r0, #27
   1888e:	2b08      	cmp	r3, #8
   18890:	d81e      	bhi.n	188d0 <att_op_get_type+0x58>
   18892:	e8df f003 	tbb	[pc, r3]
   18896:	1d05      	.short	0x1d05
   18898:	191d231b 	.word	0x191d231b
   1889c:	1d25      	.short	0x1d25
   1889e:	05          	.byte	0x05
   1889f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   188a0:	2003      	movs	r0, #3
   188a2:	4770      	bx	lr
	switch (op) {
   188a4:	4a0f      	ldr	r2, [pc, #60]	; (188e4 <att_op_get_type+0x6c>)
   188a6:	2301      	movs	r3, #1
   188a8:	4083      	lsls	r3, r0
   188aa:	401a      	ands	r2, r3
   188ac:	b9c2      	cbnz	r2, 188e0 <att_op_get_type+0x68>
   188ae:	4a0e      	ldr	r2, [pc, #56]	; (188e8 <att_op_get_type+0x70>)
   188b0:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   188b2:	2a00      	cmp	r2, #0
   188b4:	bf14      	ite	ne
   188b6:	2001      	movne	r0, #1
   188b8:	2006      	moveq	r0, #6
   188ba:	4770      	bx	lr
	switch (op) {
   188bc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   188c0:	2b52      	cmp	r3, #82	; 0x52
   188c2:	d105      	bne.n	188d0 <att_op_get_type+0x58>
		return ATT_COMMAND;
   188c4:	2000      	movs	r0, #0
}
   188c6:	4770      	bx	lr
		return ATT_REQUEST;
   188c8:	2001      	movs	r0, #1
   188ca:	4770      	bx	lr
		return ATT_INDICATION;
   188cc:	2005      	movs	r0, #5
   188ce:	4770      	bx	lr
		return ATT_COMMAND;
   188d0:	f010 0f40 	tst.w	r0, #64	; 0x40
   188d4:	bf0c      	ite	eq
   188d6:	2006      	moveq	r0, #6
   188d8:	2000      	movne	r0, #0
   188da:	4770      	bx	lr
	switch (op) {
   188dc:	2004      	movs	r0, #4
   188de:	4770      	bx	lr
		return ATT_RESPONSE;
   188e0:	2002      	movs	r0, #2
   188e2:	4770      	bx	lr
   188e4:	028aaaaa 	.word	0x028aaaaa
   188e8:	01455554 	.word	0x01455554

000188ec <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   188ec:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   188ee:	3804      	subs	r0, #4
   188f0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   188f2:	a901      	add	r1, sp, #4
   188f4:	4802      	ldr	r0, [pc, #8]	; (18900 <bt_att_released+0x14>)
   188f6:	f006 fd17 	bl	1f328 <k_mem_slab_free>
}
   188fa:	b003      	add	sp, #12
   188fc:	f85d fb04 	ldr.w	pc, [sp], #4
   18900:	200008bc 	.word	0x200008bc

00018904 <tx_meta_data_free>:
{
   18904:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   18906:	4604      	mov	r4, r0
   18908:	b948      	cbnz	r0, 1891e <tx_meta_data_free+0x1a>
   1890a:	490a      	ldr	r1, [pc, #40]	; (18934 <tx_meta_data_free+0x30>)
   1890c:	480a      	ldr	r0, [pc, #40]	; (18938 <tx_meta_data_free+0x34>)
   1890e:	4a0b      	ldr	r2, [pc, #44]	; (1893c <tx_meta_data_free+0x38>)
   18910:	23ae      	movs	r3, #174	; 0xae
   18912:	f00a fe72 	bl	235fa <assert_print>
   18916:	4809      	ldr	r0, [pc, #36]	; (1893c <tx_meta_data_free+0x38>)
   18918:	21ae      	movs	r1, #174	; 0xae
   1891a:	f00a fe67 	bl	235ec <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   1891e:	2100      	movs	r1, #0
   18920:	2214      	movs	r2, #20
   18922:	f00b fa82 	bl	23e2a <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18926:	4621      	mov	r1, r4
   18928:	4805      	ldr	r0, [pc, #20]	; (18940 <tx_meta_data_free+0x3c>)
}
   1892a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1892e:	f00d b955 	b.w	25bdc <k_queue_append>
   18932:	bf00      	nop
   18934:	00028a55 	.word	0x00028a55
   18938:	00026f1a 	.word	0x00026f1a
   1893c:	00028f03 	.word	0x00028f03
   18940:	200009a4 	.word	0x200009a4

00018944 <find_type_cb>:
{
   18944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18948:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1894a:	f8d2 a000 	ldr.w	sl, [r2]
{
   1894e:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   18950:	f8da 3004 	ldr.w	r3, [sl, #4]
   18954:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18956:	2500      	movs	r5, #0
   18958:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1895c:	4680      	mov	r8, r0
   1895e:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18960:	6800      	ldr	r0, [r0, #0]
   18962:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18966:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18968:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1896c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1896e:	f00b fa87 	bl	23e80 <bt_uuid_cmp>
   18972:	2800      	cmp	r0, #0
   18974:	d070      	beq.n	18a58 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18976:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1897a:	f8d8 0000 	ldr.w	r0, [r8]
   1897e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18982:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18984:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18988:	f00b fa7a 	bl	23e80 <bt_uuid_cmp>
   1898c:	b138      	cbz	r0, 1899e <find_type_cb+0x5a>
		if (data->group &&
   1898e:	68a3      	ldr	r3, [r4, #8]
   18990:	b11b      	cbz	r3, 1899a <find_type_cb+0x56>
   18992:	885a      	ldrh	r2, [r3, #2]
   18994:	42b2      	cmp	r2, r6
   18996:	d200      	bcs.n	1899a <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   18998:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1899a:	2001      	movs	r0, #1
   1899c:	e009      	b.n	189b2 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1899e:	6861      	ldr	r1, [r4, #4]
   189a0:	4608      	mov	r0, r1
   189a2:	f00b fdc7 	bl	24534 <net_buf_frags_len>
   189a6:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   189aa:	1a1b      	subs	r3, r3, r0
   189ac:	2b03      	cmp	r3, #3
   189ae:	d804      	bhi.n	189ba <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   189b0:	2000      	movs	r0, #0
}
   189b2:	3744      	adds	r7, #68	; 0x44
   189b4:	46bd      	mov	sp, r7
   189b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   189ba:	4608      	mov	r0, r1
   189bc:	f002 fb3e 	bl	1b03c <net_buf_frag_last>
   189c0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   189c2:	6860      	ldr	r0, [r4, #4]
   189c4:	f00b fdb6 	bl	24534 <net_buf_frags_len>
   189c8:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   189cc:	f105 090c 	add.w	r9, r5, #12
   189d0:	ebab 0b00 	sub.w	fp, fp, r0
   189d4:	4648      	mov	r0, r9
   189d6:	f00c fc1c 	bl	25212 <net_buf_simple_tailroom>
   189da:	4558      	cmp	r0, fp
   189dc:	d93f      	bls.n	18a5e <find_type_cb+0x11a>
   189de:	6860      	ldr	r0, [r4, #4]
   189e0:	f00b fda8 	bl	24534 <net_buf_frags_len>
   189e4:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   189e8:	1a18      	subs	r0, r3, r0
	if (!len) {
   189ea:	b970      	cbnz	r0, 18a0a <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   189ec:	6863      	ldr	r3, [r4, #4]
   189ee:	7a98      	ldrb	r0, [r3, #10]
   189f0:	f002 f8b4 	bl	1ab5c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   189f4:	2200      	movs	r2, #0
   189f6:	2300      	movs	r3, #0
   189f8:	f00c fbf8 	bl	251ec <net_buf_alloc_fixed>
		if (!frag) {
   189fc:	4605      	mov	r5, r0
   189fe:	2800      	cmp	r0, #0
   18a00:	d0d6      	beq.n	189b0 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   18a02:	4601      	mov	r1, r0
   18a04:	6860      	ldr	r0, [r4, #4]
   18a06:	f002 fb5f 	bl	1b0c8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18a0a:	2300      	movs	r3, #0
   18a0c:	9300      	str	r3, [sp, #0]
   18a0e:	f8d8 a004 	ldr.w	sl, [r8, #4]
   18a12:	6878      	ldr	r0, [r7, #4]
   18a14:	4641      	mov	r1, r8
   18a16:	2310      	movs	r3, #16
   18a18:	f107 0208 	add.w	r2, r7, #8
   18a1c:	47d0      	blx	sl
	if (read < 0) {
   18a1e:	f1b0 0800 	subs.w	r8, r0, #0
   18a22:	db19      	blt.n	18a58 <find_type_cb+0x114>
	if (read != data->value_len) {
   18a24:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18a26:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18a28:	4542      	cmp	r2, r8
   18a2a:	d03f      	beq.n	18aac <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18a2c:	4601      	mov	r1, r0
   18a2e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18a32:	f00b fa53 	bl	23edc <bt_uuid_create>
   18a36:	b9b0      	cbnz	r0, 18a66 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   18a38:	466d      	mov	r5, sp
   18a3a:	b088      	sub	sp, #32
   18a3c:	7c23      	ldrb	r3, [r4, #16]
   18a3e:	aa02      	add	r2, sp, #8
   18a40:	491d      	ldr	r1, [pc, #116]	; (18ab8 <find_type_cb+0x174>)
   18a42:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   18a46:	2303      	movs	r3, #3
   18a48:	f842 3f10 	str.w	r3, [r2, #16]!
   18a4c:	481b      	ldr	r0, [pc, #108]	; (18abc <find_type_cb+0x178>)
   18a4e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18a52:	f00b fe5d 	bl	24710 <z_log_msg_static_create.constprop.0>
   18a56:	46ad      	mov	sp, r5
	data->group = NULL;
   18a58:	2300      	movs	r3, #0
   18a5a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   18a5c:	e79d      	b.n	1899a <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   18a5e:	4648      	mov	r0, r9
   18a60:	f00c fbd7 	bl	25212 <net_buf_simple_tailroom>
   18a64:	e7c1      	b.n	189ea <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18a66:	fa5f f288 	uxtb.w	r2, r8
   18a6a:	f107 0108 	add.w	r1, r7, #8
   18a6e:	f107 0018 	add.w	r0, r7, #24
   18a72:	f00b fa33 	bl	23edc <bt_uuid_create>
   18a76:	b930      	cbnz	r0, 18a86 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   18a78:	466d      	mov	r5, sp
   18a7a:	b088      	sub	sp, #32
   18a7c:	aa02      	add	r2, sp, #8
   18a7e:	4b10      	ldr	r3, [pc, #64]	; (18ac0 <find_type_cb+0x17c>)
   18a80:	e9c2 3805 	strd	r3, r8, [r2, #20]
   18a84:	e7df      	b.n	18a46 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18a86:	f107 0118 	add.w	r1, r7, #24
   18a8a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18a8e:	f00b f9f7 	bl	23e80 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18a92:	2800      	cmp	r0, #0
   18a94:	d1e0      	bne.n	18a58 <find_type_cb+0x114>
	data->err = 0x00;
   18a96:	2300      	movs	r3, #0
   18a98:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18a9a:	2104      	movs	r1, #4
   18a9c:	f105 000c 	add.w	r0, r5, #12
   18aa0:	f002 fbb4 	bl	1b20c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18aa4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18aa6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18aa8:	68a3      	ldr	r3, [r4, #8]
   18aaa:	e775      	b.n	18998 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   18aac:	f107 0108 	add.w	r1, r7, #8
   18ab0:	f00b f9a0 	bl	23df4 <memcmp>
   18ab4:	e7ed      	b.n	18a92 <find_type_cb+0x14e>
   18ab6:	bf00      	nop
   18ab8:	00028f32 	.word	0x00028f32
   18abc:	0002627c 	.word	0x0002627c
   18ac0:	00028f51 	.word	0x00028f51

00018ac4 <chan_send>:
{
   18ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ac8:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   18aca:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   18ace:	68cb      	ldr	r3, [r1, #12]
{
   18ad0:	b089      	sub	sp, #36	; 0x24
   18ad2:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   18ad4:	3034      	adds	r0, #52	; 0x34
   18ad6:	2102      	movs	r1, #2
   18ad8:	f00b fd46 	bl	24568 <atomic_test_bit>
   18adc:	b970      	cbnz	r0, 18afc <chan_send+0x38>
		LOG_ERR("ATT channel not connected");
   18ade:	4b36      	ldr	r3, [pc, #216]	; (18bb8 <chan_send+0xf4>)
   18ae0:	4836      	ldr	r0, [pc, #216]	; (18bbc <chan_send+0xf8>)
   18ae2:	e9cd 1306 	strd	r1, r3, [sp, #24]
   18ae6:	aa06      	add	r2, sp, #24
   18ae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   18aec:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   18af0:	f00b fe0e 	bl	24710 <z_log_msg_static_create.constprop.0>
}
   18af4:	4628      	mov	r0, r5
   18af6:	b009      	add	sp, #36	; 0x24
   18af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   18afc:	781b      	ldrb	r3, [r3, #0]
   18afe:	2bd2      	cmp	r3, #210	; 0xd2
   18b00:	d117      	bne.n	18b32 <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   18b02:	6833      	ldr	r3, [r6, #0]
   18b04:	4621      	mov	r1, r4
   18b06:	6818      	ldr	r0, [r3, #0]
   18b08:	f00c fb6a 	bl	251e0 <bt_smp_sign>
		if (err) {
   18b0c:	4605      	mov	r5, r0
   18b0e:	b180      	cbz	r0, 18b32 <chan_send+0x6e>
			LOG_ERR("Error signing data");
   18b10:	4b2b      	ldr	r3, [pc, #172]	; (18bc0 <chan_send+0xfc>)
   18b12:	9307      	str	r3, [sp, #28]
   18b14:	aa06      	add	r2, sp, #24
   18b16:	2302      	movs	r3, #2
   18b18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b1c:	4827      	ldr	r0, [pc, #156]	; (18bbc <chan_send+0xf8>)
   18b1e:	9306      	str	r3, [sp, #24]
   18b20:	f00b fdf6 	bl	24710 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18b24:	69a0      	ldr	r0, [r4, #24]
   18b26:	f7ff feed 	bl	18904 <tx_meta_data_free>
			net_buf_unref(buf);
   18b2a:	4620      	mov	r0, r4
   18b2c:	f002 fa2a 	bl	1af84 <net_buf_unref>
			return err;
   18b30:	e7e0      	b.n	18af4 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   18b32:	f104 000c 	add.w	r0, r4, #12
   18b36:	f00c fb68 	bl	2520a <net_buf_simple_headroom>
	state->len = buf->len;
   18b3a:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   18b3e:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18b42:	6833      	ldr	r3, [r6, #0]
   18b44:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   18b46:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   18b48:	4607      	mov	r7, r0
   18b4a:	7818      	ldrb	r0, [r3, #0]
   18b4c:	f7ff fe94 	bl	18878 <att_op_get_type>
   18b50:	2805      	cmp	r0, #5
   18b52:	4605      	mov	r5, r0
	switch (op_type) {
   18b54:	d820      	bhi.n	18b98 <chan_send+0xd4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18b56:	4b1b      	ldr	r3, [pc, #108]	; (18bc4 <chan_send+0x100>)
   18b58:	f8cd 9000 	str.w	r9, [sp]
   18b5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18b60:	4622      	mov	r2, r4
   18b62:	2104      	movs	r1, #4
   18b64:	4630      	mov	r0, r6
   18b66:	f00b fcb7 	bl	244d8 <bt_l2cap_send_cb>
	if (err) {
   18b6a:	4605      	mov	r5, r0
   18b6c:	2800      	cmp	r0, #0
   18b6e:	d0c1      	beq.n	18af4 <chan_send+0x30>
		if (err == -ENOBUFS) {
   18b70:	f110 0f69 	cmn.w	r0, #105	; 0x69
   18b74:	d109      	bne.n	18b8a <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   18b76:	4b14      	ldr	r3, [pc, #80]	; (18bc8 <chan_send+0x104>)
   18b78:	9307      	str	r3, [sp, #28]
   18b7a:	4810      	ldr	r0, [pc, #64]	; (18bbc <chan_send+0xf8>)
   18b7c:	2302      	movs	r3, #2
   18b7e:	aa06      	add	r2, sp, #24
   18b80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b84:	9306      	str	r3, [sp, #24]
   18b86:	f00b fdc3 	bl	24710 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   18b8a:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   18b8c:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   18b90:	fa13 f787 	uxtah	r7, r3, r7
   18b94:	60e7      	str	r7, [r4, #12]
}
   18b96:	e7ad      	b.n	18af4 <chan_send+0x30>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   18b98:	4a0c      	ldr	r2, [pc, #48]	; (18bcc <chan_send+0x108>)
   18b9a:	490d      	ldr	r1, [pc, #52]	; (18bd0 <chan_send+0x10c>)
   18b9c:	480d      	ldr	r0, [pc, #52]	; (18bd4 <chan_send+0x110>)
   18b9e:	f44f 7319 	mov.w	r3, #612	; 0x264
   18ba2:	f00a fd2a 	bl	235fa <assert_print>
   18ba6:	480c      	ldr	r0, [pc, #48]	; (18bd8 <chan_send+0x114>)
   18ba8:	4629      	mov	r1, r5
   18baa:	f00a fd26 	bl	235fa <assert_print>
   18bae:	4807      	ldr	r0, [pc, #28]	; (18bcc <chan_send+0x108>)
   18bb0:	f44f 7119 	mov.w	r1, #612	; 0x264
   18bb4:	f00a fd1a 	bl	235ec <assert_post_action>
   18bb8:	00028f70 	.word	0x00028f70
   18bbc:	0002627c 	.word	0x0002627c
   18bc0:	00028f8a 	.word	0x00028f8a
   18bc4:	000266d4 	.word	0x000266d4
   18bc8:	00028fb6 	.word	0x00028fb6
   18bcc:	00028f03 	.word	0x00028f03
   18bd0:	00029a2c 	.word	0x00029a2c
   18bd4:	00026f1a 	.word	0x00026f1a
   18bd8:	00028f9d 	.word	0x00028f9d

00018bdc <bt_att_chan_req_send>:
{
   18bdc:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   18bde:	b958      	cbnz	r0, 18bf8 <bt_att_chan_req_send+0x1c>
   18be0:	4919      	ldr	r1, [pc, #100]	; (18c48 <bt_att_chan_req_send+0x6c>)
   18be2:	4a1a      	ldr	r2, [pc, #104]	; (18c4c <bt_att_chan_req_send+0x70>)
   18be4:	481a      	ldr	r0, [pc, #104]	; (18c50 <bt_att_chan_req_send+0x74>)
   18be6:	f240 3325 	movw	r3, #805	; 0x325
   18bea:	f00a fd06 	bl	235fa <assert_print>
   18bee:	f240 3125 	movw	r1, #805	; 0x325
	__ASSERT_NO_MSG(req);
   18bf2:	4816      	ldr	r0, [pc, #88]	; (18c4c <bt_att_chan_req_send+0x70>)
   18bf4:	f00a fcfa 	bl	235ec <assert_post_action>
   18bf8:	b949      	cbnz	r1, 18c0e <bt_att_chan_req_send+0x32>
   18bfa:	4916      	ldr	r1, [pc, #88]	; (18c54 <bt_att_chan_req_send+0x78>)
   18bfc:	4a13      	ldr	r2, [pc, #76]	; (18c4c <bt_att_chan_req_send+0x70>)
   18bfe:	4814      	ldr	r0, [pc, #80]	; (18c50 <bt_att_chan_req_send+0x74>)
   18c00:	f240 3326 	movw	r3, #806	; 0x326
   18c04:	f00a fcf9 	bl	235fa <assert_print>
   18c08:	f240 3126 	movw	r1, #806	; 0x326
   18c0c:	e7f1      	b.n	18bf2 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   18c0e:	684a      	ldr	r2, [r1, #4]
   18c10:	b94a      	cbnz	r2, 18c26 <bt_att_chan_req_send+0x4a>
   18c12:	4911      	ldr	r1, [pc, #68]	; (18c58 <bt_att_chan_req_send+0x7c>)
   18c14:	4a0d      	ldr	r2, [pc, #52]	; (18c4c <bt_att_chan_req_send+0x70>)
   18c16:	480e      	ldr	r0, [pc, #56]	; (18c50 <bt_att_chan_req_send+0x74>)
   18c18:	f240 3327 	movw	r3, #807	; 0x327
   18c1c:	f00a fced 	bl	235fa <assert_print>
   18c20:	f240 3127 	movw	r1, #807	; 0x327
   18c24:	e7e5      	b.n	18bf2 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   18c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   18c28:	b14b      	cbz	r3, 18c3e <bt_att_chan_req_send+0x62>
   18c2a:	490c      	ldr	r1, [pc, #48]	; (18c5c <bt_att_chan_req_send+0x80>)
   18c2c:	4a07      	ldr	r2, [pc, #28]	; (18c4c <bt_att_chan_req_send+0x70>)
   18c2e:	4808      	ldr	r0, [pc, #32]	; (18c50 <bt_att_chan_req_send+0x74>)
   18c30:	f44f 734a 	mov.w	r3, #808	; 0x328
   18c34:	f00a fce1 	bl	235fa <assert_print>
   18c38:	f44f 714a 	mov.w	r1, #808	; 0x328
   18c3c:	e7d9      	b.n	18bf2 <bt_att_chan_req_send+0x16>
}
   18c3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   18c42:	f00b bd68 	b.w	24716 <chan_req_send>
   18c46:	bf00      	nop
   18c48:	00028fd9 	.word	0x00028fd9
   18c4c:	00028f03 	.word	0x00028f03
   18c50:	00026f1a 	.word	0x00026f1a
   18c54:	00028fef 	.word	0x00028fef
   18c58:	00028fde 	.word	0x00028fde
   18c5c:	00028fe8 	.word	0x00028fe8

00018c60 <att_get>:
{
   18c60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18c62:	7a83      	ldrb	r3, [r0, #10]
   18c64:	2b07      	cmp	r3, #7
   18c66:	d00d      	beq.n	18c84 <att_get+0x24>
		LOG_WRN("Not connected");
   18c68:	4b13      	ldr	r3, [pc, #76]	; (18cb8 <att_get+0x58>)
   18c6a:	9305      	str	r3, [sp, #20]
   18c6c:	2302      	movs	r3, #2
   18c6e:	9304      	str	r3, [sp, #16]
   18c70:	aa04      	add	r2, sp, #16
   18c72:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   18c76:	4811      	ldr	r0, [pc, #68]	; (18cbc <att_get+0x5c>)
   18c78:	f00b fd4a 	bl	24710 <z_log_msg_static_create.constprop.0>
		return NULL;
   18c7c:	2000      	movs	r0, #0
}
   18c7e:	b007      	add	sp, #28
   18c80:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18c84:	2104      	movs	r1, #4
   18c86:	f00b fc40 	bl	2450a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18c8a:	4603      	mov	r3, r0
   18c8c:	b938      	cbnz	r0, 18c9e <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   18c8e:	4b0c      	ldr	r3, [pc, #48]	; (18cc0 <att_get+0x60>)
   18c90:	9305      	str	r3, [sp, #20]
   18c92:	2302      	movs	r3, #2
   18c94:	9304      	str	r3, [sp, #16]
   18c96:	aa04      	add	r2, sp, #16
   18c98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18c9c:	e7eb      	b.n	18c76 <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   18c9e:	2102      	movs	r1, #2
   18ca0:	3030      	adds	r0, #48	; 0x30
   18ca2:	f00b fc61 	bl	24568 <atomic_test_bit>
   18ca6:	b918      	cbnz	r0, 18cb0 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   18ca8:	4b06      	ldr	r3, [pc, #24]	; (18cc4 <att_get+0x64>)
   18caa:	e9cd 1304 	strd	r1, r3, [sp, #16]
   18cae:	e7f2      	b.n	18c96 <att_get+0x36>
	return att_chan->att;
   18cb0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   18cb4:	e7e3      	b.n	18c7e <att_get+0x1e>
   18cb6:	bf00      	nop
   18cb8:	00028ff3 	.word	0x00028ff3
   18cbc:	0002627c 	.word	0x0002627c
   18cc0:	00029001 	.word	0x00029001
   18cc4:	00028f70 	.word	0x00028f70

00018cc8 <bt_att_connected>:
{
   18cc8:	b510      	push	{r4, lr}
   18cca:	f100 0330 	add.w	r3, r0, #48	; 0x30
   18cce:	4604      	mov	r4, r0
   18cd0:	f3bf 8f5b 	dmb	ish
   18cd4:	e853 1f00 	ldrex	r1, [r3]
   18cd8:	f041 0104 	orr.w	r1, r1, #4
   18cdc:	e843 1200 	strex	r2, r1, [r3]
   18ce0:	2a00      	cmp	r2, #0
   18ce2:	d1f7      	bne.n	18cd4 <bt_att_connected+0xc>
   18ce4:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18ce8:	2317      	movs	r3, #23
   18cea:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18cec:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   18cee:	1f20      	subs	r0, r4, #4
   18cf0:	f00b fccb 	bl	2468a <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18cf4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   18cf8:	4903      	ldr	r1, [pc, #12]	; (18d08 <bt_att_connected+0x40>)
   18cfa:	f007 fb49 	bl	20390 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   18cfe:	6820      	ldr	r0, [r4, #0]
}
   18d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18d04:	f001 bebc 	b.w	1aa80 <bt_gatt_connected>
   18d08:	000199f9 	.word	0x000199f9

00018d0c <read_group_cb>:
{
   18d0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18d10:	4605      	mov	r5, r0
   18d12:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18d14:	f04f 0800 	mov.w	r8, #0
   18d18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18d1c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   18d1e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18d20:	f88d 8008 	strb.w	r8, [sp, #8]
   18d24:	a902      	add	r1, sp, #8
{
   18d26:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18d28:	f8ad 300a 	strh.w	r3, [sp, #10]
   18d2c:	f00b f8a8 	bl	23e80 <bt_uuid_cmp>
   18d30:	b1a0      	cbz	r0, 18d5c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18d32:	f642 0301 	movw	r3, #10241	; 0x2801
   18d36:	6828      	ldr	r0, [r5, #0]
   18d38:	f88d 800c 	strb.w	r8, [sp, #12]
   18d3c:	a903      	add	r1, sp, #12
   18d3e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18d42:	f00b f89d 	bl	23e80 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18d46:	b148      	cbz	r0, 18d5c <read_group_cb+0x50>
		if (data->group &&
   18d48:	6923      	ldr	r3, [r4, #16]
   18d4a:	b11b      	cbz	r3, 18d54 <read_group_cb+0x48>
   18d4c:	885a      	ldrh	r2, [r3, #2]
   18d4e:	42b2      	cmp	r2, r6
   18d50:	d200      	bcs.n	18d54 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18d52:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18d54:	2001      	movs	r0, #1
}
   18d56:	b004      	add	sp, #16
   18d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18d5c:	6861      	ldr	r1, [r4, #4]
   18d5e:	6828      	ldr	r0, [r5, #0]
   18d60:	f00b f88e 	bl	23e80 <bt_uuid_cmp>
   18d64:	b110      	cbz	r0, 18d6c <read_group_cb+0x60>
		data->group = NULL;
   18d66:	2300      	movs	r3, #0
   18d68:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   18d6a:	e7f3      	b.n	18d54 <read_group_cb+0x48>
	if (data->rsp->len &&
   18d6c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18d6e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   18d70:	781a      	ldrb	r2, [r3, #0]
   18d72:	b132      	cbz	r2, 18d82 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   18d74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18d76:	8a01      	ldrh	r1, [r0, #16]
   18d78:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   18d7a:	4293      	cmp	r3, r2
   18d7c:	da01      	bge.n	18d82 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   18d7e:	2000      	movs	r0, #0
   18d80:	e7e9      	b.n	18d56 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18d82:	2104      	movs	r1, #4
   18d84:	300c      	adds	r0, #12
   18d86:	f002 fa41 	bl	1b20c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   18d8a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18d8c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18d8e:	6923      	ldr	r3, [r4, #16]
   18d90:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   18d92:	4b08      	ldr	r3, [pc, #32]	; (18db4 <read_group_cb+0xa8>)
   18d94:	9300      	str	r3, [sp, #0]
   18d96:	9401      	str	r4, [sp, #4]
   18d98:	68a2      	ldr	r2, [r4, #8]
   18d9a:	2300      	movs	r3, #0
   18d9c:	4629      	mov	r1, r5
   18d9e:	4638      	mov	r0, r7
   18da0:	f00b fcf8 	bl	24794 <att_chan_read>
	if (read < 0) {
   18da4:	2800      	cmp	r0, #0
   18da6:	dbea      	blt.n	18d7e <read_group_cb+0x72>
	if (!data->group) {
   18da8:	6920      	ldr	r0, [r4, #16]
   18daa:	3800      	subs	r0, #0
   18dac:	bf18      	it	ne
   18dae:	2001      	movne	r0, #1
   18db0:	e7d1      	b.n	18d56 <read_group_cb+0x4a>
   18db2:	bf00      	nop
   18db4:	000246f1 	.word	0x000246f1

00018db8 <read_type_cb>:
{
   18db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   18dbc:	6817      	ldr	r7, [r2, #0]
{
   18dbe:	4605      	mov	r5, r0
   18dc0:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18dc2:	6800      	ldr	r0, [r0, #0]
   18dc4:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   18dc6:	687e      	ldr	r6, [r7, #4]
{
   18dc8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18dca:	f00b f859 	bl	23e80 <bt_uuid_cmp>
   18dce:	4681      	mov	r9, r0
   18dd0:	2800      	cmp	r0, #0
   18dd2:	d13c      	bne.n	18e4e <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18dd4:	4630      	mov	r0, r6
   18dd6:	2295      	movs	r2, #149	; 0x95
   18dd8:	4629      	mov	r1, r5
   18dda:	f00c f97a 	bl	250d2 <bt_gatt_check_perm>
   18dde:	4606      	mov	r6, r0
   18de0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18de2:	b140      	cbz	r0, 18df6 <read_type_cb+0x3e>
		if (data->rsp->len) {
   18de4:	68e3      	ldr	r3, [r4, #12]
   18de6:	781b      	ldrb	r3, [r3, #0]
   18de8:	b10b      	cbz	r3, 18dee <read_type_cb+0x36>
			data->err = 0x00;
   18dea:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   18dee:	2000      	movs	r0, #0
}
   18df0:	b003      	add	sp, #12
   18df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18df6:	68a0      	ldr	r0, [r4, #8]
   18df8:	f002 f920 	bl	1b03c <net_buf_frag_last>
   18dfc:	2102      	movs	r1, #2
   18dfe:	300c      	adds	r0, #12
   18e00:	f002 fa04 	bl	1b20c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18e04:	4b13      	ldr	r3, [pc, #76]	; (18e54 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18e06:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   18e08:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18e0c:	9300      	str	r3, [sp, #0]
   18e0e:	9401      	str	r4, [sp, #4]
   18e10:	68a2      	ldr	r2, [r4, #8]
   18e12:	4633      	mov	r3, r6
   18e14:	4629      	mov	r1, r5
   18e16:	4638      	mov	r0, r7
   18e18:	f00b fcbc 	bl	24794 <att_chan_read>
	if (read < 0) {
   18e1c:	2800      	cmp	r0, #0
   18e1e:	da07      	bge.n	18e30 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   18e20:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18e24:	bf26      	itte	cs
   18e26:	4240      	negcs	r0, r0
   18e28:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   18e2a:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18e2c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18e2e:	e7de      	b.n	18dee <read_type_cb+0x36>
	if (!data->item) {
   18e30:	6923      	ldr	r3, [r4, #16]
   18e32:	2b00      	cmp	r3, #0
   18e34:	d0db      	beq.n	18dee <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18e36:	68a0      	ldr	r0, [r4, #8]
   18e38:	f00b fb7c 	bl	24534 <net_buf_frags_len>
   18e3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18e3e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18e40:	68e3      	ldr	r3, [r4, #12]
   18e42:	781b      	ldrb	r3, [r3, #0]
   18e44:	4298      	cmp	r0, r3
   18e46:	bf94      	ite	ls
   18e48:	2000      	movls	r0, #0
   18e4a:	2001      	movhi	r0, #1
   18e4c:	e7d0      	b.n	18df0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18e4e:	2001      	movs	r0, #1
   18e50:	e7ce      	b.n	18df0 <read_type_cb+0x38>
   18e52:	bf00      	nop
   18e54:	00024545 	.word	0x00024545

00018e58 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e5c:	b082      	sub	sp, #8
   18e5e:	af00      	add	r7, sp, #0
   18e60:	4604      	mov	r4, r0
   18e62:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18e64:	483b      	ldr	r0, [pc, #236]	; (18f54 <bt_att_accept+0xfc>)
   18e66:	2200      	movs	r2, #0
   18e68:	2300      	movs	r3, #0
   18e6a:	4639      	mov	r1, r7
   18e6c:	f006 f9f2 	bl	1f254 <k_mem_slab_alloc>
   18e70:	4605      	mov	r5, r0
   18e72:	b1a8      	cbz	r0, 18ea0 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   18e74:	466d      	mov	r5, sp
   18e76:	b088      	sub	sp, #32
   18e78:	466a      	mov	r2, sp
   18e7a:	4b37      	ldr	r3, [pc, #220]	; (18f58 <bt_att_accept+0x100>)
   18e7c:	4837      	ldr	r0, [pc, #220]	; (18f5c <bt_att_accept+0x104>)
   18e7e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   18e82:	2303      	movs	r3, #3
   18e84:	f842 3f10 	str.w	r3, [r2, #16]!
   18e88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e8c:	f00b fc40 	bl	24710 <z_log_msg_static_create.constprop.0>
   18e90:	46ad      	mov	sp, r5
		return -ENOMEM;
   18e92:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   18e96:	4628      	mov	r0, r5
   18e98:	3708      	adds	r7, #8
   18e9a:	46bd      	mov	sp, r7
   18e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   18ea0:	f008 fd06 	bl	218b0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   18ea4:	4b2e      	ldr	r3, [pc, #184]	; (18f60 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   18ea6:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   18ea8:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   18eaa:	2230      	movs	r2, #48	; 0x30
   18eac:	6838      	ldr	r0, [r7, #0]
   18eae:	f00a ffbc 	bl	23e2a <memset>
	att->conn = conn;
   18eb2:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18eb4:	482b      	ldr	r0, [pc, #172]	; (18f64 <bt_att_accept+0x10c>)
	att->conn = conn;
   18eb6:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   18eb8:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   18eba:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   18ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
   18ec0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   18ec4:	2200      	movs	r2, #0
   18ec6:	2300      	movs	r3, #0
   18ec8:	1d39      	adds	r1, r7, #4
   18eca:	f006 f9c3 	bl	1f254 <k_mem_slab_alloc>
   18ece:	4605      	mov	r5, r0
   18ed0:	b180      	cbz	r0, 18ef4 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   18ed2:	6823      	ldr	r3, [r4, #0]
   18ed4:	466c      	mov	r4, sp
   18ed6:	b088      	sub	sp, #32
   18ed8:	466a      	mov	r2, sp
   18eda:	4923      	ldr	r1, [pc, #140]	; (18f68 <bt_att_accept+0x110>)
   18edc:	481f      	ldr	r0, [pc, #124]	; (18f5c <bt_att_accept+0x104>)
   18ede:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18ee2:	2303      	movs	r3, #3
   18ee4:	f842 3f10 	str.w	r3, [r2, #16]!
   18ee8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18eec:	f00b fc10 	bl	24710 <z_log_msg_static_create.constprop.0>
   18ef0:	46a5      	mov	sp, r4
	if (!chan) {
   18ef2:	e7ce      	b.n	18e92 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   18ef4:	4601      	mov	r1, r0
   18ef6:	2290      	movs	r2, #144	; 0x90
   18ef8:	6878      	ldr	r0, [r7, #4]
   18efa:	f00a ff96 	bl	23e2a <memset>
	chan->chan.chan.ops = &ops;
   18efe:	6878      	ldr	r0, [r7, #4]
   18f00:	4b1a      	ldr	r3, [pc, #104]	; (18f6c <bt_att_accept+0x114>)
   18f02:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18f04:	303c      	adds	r0, #60	; 0x3c
   18f06:	f00c fe5c 	bl	25bc2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18f0a:	687b      	ldr	r3, [r7, #4]
   18f0c:	f3bf 8f5b 	dmb	ish
   18f10:	3334      	adds	r3, #52	; 0x34
   18f12:	e853 2f00 	ldrex	r2, [r3]
   18f16:	e843 5100 	strex	r1, r5, [r3]
   18f1a:	2900      	cmp	r1, #0
   18f1c:	d1f9      	bne.n	18f12 <bt_att_accept+0xba>
   18f1e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18f22:	687b      	ldr	r3, [r7, #4]
   18f24:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   18f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   18f28:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18f2c:	b91b      	cbnz	r3, 18f36 <bt_att_accept+0xde>
   18f2e:	f104 000c 	add.w	r0, r4, #12
   18f32:	f00c fe46 	bl	25bc2 <z_impl_k_queue_init>
	return list->head;
   18f36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   18f38:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   18f3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   18f3e:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   18f42:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   18f44:	b902      	cbnz	r2, 18f48 <bt_att_accept+0xf0>
	list->tail = node;
   18f46:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   18f48:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   18f4a:	2b00      	cmp	r3, #0
   18f4c:	d0a1      	beq.n	18e92 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   18f4e:	3304      	adds	r3, #4
   18f50:	6033      	str	r3, [r6, #0]
	return 0;
   18f52:	e7a0      	b.n	18e96 <bt_att_accept+0x3e>
   18f54:	2000089c 	.word	0x2000089c
   18f58:	0002901c 	.word	0x0002901c
   18f5c:	0002627c 	.word	0x0002627c
   18f60:	20002c88 	.word	0x20002c88
   18f64:	200008bc 	.word	0x200008bc
   18f68:	00029041 	.word	0x00029041
   18f6c:	2000066c 	.word	0x2000066c

00018f70 <bt_att_chan_create_pdu>:
{
   18f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   18f74:	b086      	sub	sp, #24
   18f76:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18f78:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   18f7a:	1c53      	adds	r3, r2, #1
   18f7c:	428b      	cmp	r3, r1
{
   18f7e:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   18f80:	d915      	bls.n	18fae <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   18f82:	466c      	mov	r4, sp
   18f84:	b088      	sub	sp, #32
   18f86:	466a      	mov	r2, sp
   18f88:	482d      	ldr	r0, [pc, #180]	; (19040 <bt_att_chan_create_pdu+0xd0>)
   18f8a:	61d3      	str	r3, [r2, #28]
   18f8c:	2304      	movs	r3, #4
   18f8e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   18f92:	f842 3f10 	str.w	r3, [r2, #16]!
   18f96:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   18f9a:	482a      	ldr	r0, [pc, #168]	; (19044 <bt_att_chan_create_pdu+0xd4>)
   18f9c:	f00b fbb8 	bl	24710 <z_log_msg_static_create.constprop.0>
   18fa0:	46a5      	mov	sp, r4
		return NULL;
   18fa2:	2400      	movs	r4, #0
}
   18fa4:	4620      	mov	r0, r4
   18fa6:	3718      	adds	r7, #24
   18fa8:	46bd      	mov	sp, r7
   18faa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   18fae:	4628      	mov	r0, r5
   18fb0:	f7ff fc62 	bl	18878 <att_op_get_type>
   18fb4:	2802      	cmp	r0, #2
   18fb6:	d019      	beq.n	18fec <bt_att_chan_create_pdu+0x7c>
   18fb8:	2804      	cmp	r0, #4
   18fba:	d017      	beq.n	18fec <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   18fbc:	f04f 38ff 	mov.w	r8, #4294967295
   18fc0:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   18fc4:	2100      	movs	r1, #0
   18fc6:	4642      	mov	r2, r8
   18fc8:	464b      	mov	r3, r9
   18fca:	4608      	mov	r0, r1
   18fcc:	f00b fa81 	bl	244d2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18fd0:	4604      	mov	r4, r0
   18fd2:	b980      	cbnz	r0, 18ff6 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   18fd4:	466c      	mov	r4, sp
   18fd6:	b088      	sub	sp, #32
   18fd8:	466a      	mov	r2, sp
   18fda:	4b1b      	ldr	r3, [pc, #108]	; (19048 <bt_att_chan_create_pdu+0xd8>)
   18fdc:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18fe0:	2303      	movs	r3, #3
   18fe2:	f842 3f10 	str.w	r3, [r2, #16]!
   18fe6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18fea:	e7d6      	b.n	18f9a <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   18fec:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   18ff0:	f04f 0900 	mov.w	r9, #0
   18ff4:	e7e6      	b.n	18fc4 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   18ff6:	f008 fc5b 	bl	218b0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18ffa:	4b14      	ldr	r3, [pc, #80]	; (1904c <bt_att_chan_create_pdu+0xdc>)
   18ffc:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   18ffe:	4814      	ldr	r0, [pc, #80]	; (19050 <bt_att_chan_create_pdu+0xe0>)
   19000:	bf07      	ittee	eq
   19002:	2200      	moveq	r2, #0
   19004:	2300      	moveq	r3, #0
   19006:	4642      	movne	r2, r8
   19008:	464b      	movne	r3, r9
   1900a:	f006 fd61 	bl	1fad0 <z_impl_k_queue_get>
	if (!data) {
   1900e:	b970      	cbnz	r0, 1902e <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   19010:	4b10      	ldr	r3, [pc, #64]	; (19054 <bt_att_chan_create_pdu+0xe4>)
   19012:	617b      	str	r3, [r7, #20]
   19014:	480b      	ldr	r0, [pc, #44]	; (19044 <bt_att_chan_create_pdu+0xd4>)
   19016:	2302      	movs	r3, #2
   19018:	f107 0210 	add.w	r2, r7, #16
   1901c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19020:	613b      	str	r3, [r7, #16]
   19022:	f00b fb75 	bl	24710 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   19026:	4620      	mov	r0, r4
   19028:	f001 ffac 	bl	1af84 <net_buf_unref>
		return NULL;
   1902c:	e7b9      	b.n	18fa2 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1902e:	61a0      	str	r0, [r4, #24]
   19030:	2101      	movs	r1, #1
   19032:	f104 000c 	add.w	r0, r4, #12
   19036:	f002 f8e9 	bl	1b20c <net_buf_simple_add>
	hdr->code = op;
   1903a:	7005      	strb	r5, [r0, #0]
	return buf;
   1903c:	e7b2      	b.n	18fa4 <bt_att_chan_create_pdu+0x34>
   1903e:	bf00      	nop
   19040:	00029066 	.word	0x00029066
   19044:	0002627c 	.word	0x0002627c
   19048:	00028d5f 	.word	0x00028d5f
   1904c:	20002a68 	.word	0x20002a68
   19050:	200009a4 	.word	0x200009a4
   19054:	0002908b 	.word	0x0002908b

00019058 <bt_att_recv>:
{
   19058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1905c:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1905e:	8a0b      	ldrh	r3, [r1, #16]
{
   19060:	af00      	add	r7, sp, #0
   19062:	4682      	mov	sl, r0
   19064:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19066:	b97b      	cbnz	r3, 19088 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   19068:	4b4c      	ldr	r3, [pc, #304]	; (1919c <bt_att_recv+0x144>)
   1906a:	617b      	str	r3, [r7, #20]
   1906c:	2302      	movs	r3, #2
   1906e:	613b      	str	r3, [r7, #16]
   19070:	f107 0210 	add.w	r2, r7, #16
   19074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   19078:	4849      	ldr	r0, [pc, #292]	; (191a0 <bt_att_recv+0x148>)
   1907a:	f00b fb49 	bl	24710 <z_log_msg_static_create.constprop.0>
}
   1907e:	2000      	movs	r0, #0
   19080:	371c      	adds	r7, #28
   19082:	46bd      	mov	sp, r7
   19084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19088:	2101      	movs	r1, #1
   1908a:	f104 000c 	add.w	r0, r4, #12
   1908e:	f002 f89f 	bl	1b1d0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19092:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   19096:	4605      	mov	r5, r0
   19098:	2b00      	cmp	r3, #0
   1909a:	d0f0      	beq.n	1907e <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1909c:	7801      	ldrb	r1, [r0, #0]
   1909e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 191a4 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   190a2:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   190a6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   190a8:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   190ac:	4288      	cmp	r0, r1
   190ae:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   190b2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   190b6:	d114      	bne.n	190e2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   190b8:	f892 9002 	ldrb.w	r9, [r2, #2]
   190bc:	f1b9 0f01 	cmp.w	r9, #1
   190c0:	d131      	bne.n	19126 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   190c2:	2100      	movs	r1, #0
   190c4:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   190c8:	f00b fc19 	bl	248fe <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   190cc:	2800      	cmp	r0, #0
   190ce:	d035      	beq.n	1913c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   190d0:	4b35      	ldr	r3, [pc, #212]	; (191a8 <bt_att_recv+0x150>)
   190d2:	617b      	str	r3, [r7, #20]
   190d4:	2302      	movs	r3, #2
   190d6:	613b      	str	r3, [r7, #16]
   190d8:	f107 0210 	add.w	r2, r7, #16
   190dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   190e0:	e7ca      	b.n	19078 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   190e2:	3301      	adds	r3, #1
   190e4:	2b0e      	cmp	r3, #14
   190e6:	d1df      	bne.n	190a8 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   190e8:	466c      	mov	r4, sp
   190ea:	b088      	sub	sp, #32
   190ec:	466a      	mov	r2, sp
   190ee:	4b2f      	ldr	r3, [pc, #188]	; (191ac <bt_att_recv+0x154>)
   190f0:	482b      	ldr	r0, [pc, #172]	; (191a0 <bt_att_recv+0x148>)
   190f2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   190f6:	2303      	movs	r3, #3
   190f8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   190fc:	f842 3f10 	str.w	r3, [r2, #16]!
   19100:	f00b fb06 	bl	24710 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   19104:	7829      	ldrb	r1, [r5, #0]
   19106:	46a5      	mov	sp, r4
   19108:	4608      	mov	r0, r1
   1910a:	f7ff fbb5 	bl	18878 <att_op_get_type>
   1910e:	2800      	cmp	r0, #0
   19110:	d0b5      	beq.n	1907e <bt_att_recv+0x26>
   19112:	2805      	cmp	r0, #5
   19114:	d0b3      	beq.n	1907e <bt_att_recv+0x26>
	if (!req) {
   19116:	2900      	cmp	r1, #0
   19118:	d0b1      	beq.n	1907e <bt_att_recv+0x26>
   1911a:	2306      	movs	r3, #6
   1911c:	2200      	movs	r2, #0
   1911e:	4630      	mov	r0, r6
   19120:	f00b fd41 	bl	24ba6 <send_err_rsp.part.0>
   19124:	e7ab      	b.n	1907e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   19126:	f1b9 0f05 	cmp.w	r9, #5
   1912a:	d107      	bne.n	1913c <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1912c:	2101      	movs	r1, #1
   1912e:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   19132:	f00b fbe4 	bl	248fe <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   19136:	b108      	cbz	r0, 1913c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   19138:	4b1d      	ldr	r3, [pc, #116]	; (191b0 <bt_att_recv+0x158>)
   1913a:	e7ca      	b.n	190d2 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1913c:	44d8      	add	r8, fp
   1913e:	8a23      	ldrh	r3, [r4, #16]
   19140:	f898 2001 	ldrb.w	r2, [r8, #1]
   19144:	429a      	cmp	r2, r3
   19146:	d916      	bls.n	19176 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19148:	46e9      	mov	r9, sp
   1914a:	b088      	sub	sp, #32
   1914c:	7829      	ldrb	r1, [r5, #0]
   1914e:	466a      	mov	r2, sp
   19150:	4818      	ldr	r0, [pc, #96]	; (191b4 <bt_att_recv+0x15c>)
   19152:	61d1      	str	r1, [r2, #28]
   19154:	2404      	movs	r4, #4
   19156:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1915a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1915e:	f842 4f10 	str.w	r4, [r2, #16]!
   19162:	480f      	ldr	r0, [pc, #60]	; (191a0 <bt_att_recv+0x148>)
   19164:	f00b fad4 	bl	24710 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   19168:	f898 3002 	ldrb.w	r3, [r8, #2]
   1916c:	2b01      	cmp	r3, #1
   1916e:	46cd      	mov	sp, r9
   19170:	d185      	bne.n	1907e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   19172:	4623      	mov	r3, r4
   19174:	e00c      	b.n	19190 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   19176:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1917a:	4621      	mov	r1, r4
   1917c:	4630      	mov	r0, r6
   1917e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19180:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   19184:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19186:	f47f af7a 	bne.w	1907e <bt_att_recv+0x26>
   1918a:	2800      	cmp	r0, #0
   1918c:	f43f af77 	beq.w	1907e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19190:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   19192:	2900      	cmp	r1, #0
   19194:	f43f af73 	beq.w	1907e <bt_att_recv+0x26>
   19198:	e7c0      	b.n	1911c <bt_att_recv+0xc4>
   1919a:	bf00      	nop
   1919c:	000290aa 	.word	0x000290aa
   191a0:	0002627c 	.word	0x0002627c
   191a4:	000266ec 	.word	0x000266ec
   191a8:	000290df 	.word	0x000290df
   191ac:	000290c5 	.word	0x000290c5
   191b0:	000290fb 	.word	0x000290fb
   191b4:	0002911a 	.word	0x0002911a

000191b8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   191b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   191ba:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   191bc:	6803      	ldr	r3, [r0, #0]
   191be:	460d      	mov	r5, r1
   191c0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   191c2:	b087      	sub	sp, #28
   191c4:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   191c6:	bf18      	it	ne
   191c8:	2101      	movne	r1, #1
   191ca:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   191cc:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   191ce:	f00b ff9c 	bl	2510a <bt_gatt_change_aware>
   191d2:	b948      	cbnz	r0, 191e8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   191d4:	2105      	movs	r1, #5
   191d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   191da:	f00b fb90 	bl	248fe <atomic_test_and_set_bit>
   191de:	2800      	cmp	r0, #0
   191e0:	d048      	beq.n	19274 <att_write_rsp.constprop.0+0xbc>
			return 0;
   191e2:	2000      	movs	r0, #0
}
   191e4:	b007      	add	sp, #28
   191e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   191e8:	2e00      	cmp	r6, #0
   191ea:	d045      	beq.n	19278 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   191ec:	2218      	movs	r2, #24
   191ee:	2100      	movs	r1, #0
   191f0:	4668      	mov	r0, sp
   191f2:	f00a fe1a 	bl	23e2a <memset>
	if (rsp) {
   191f6:	bb67      	cbnz	r7, 19252 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   191f8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   191fa:	4a20      	ldr	r2, [pc, #128]	; (1927c <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   191fc:	681b      	ldr	r3, [r3, #0]
   191fe:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   19200:	2300      	movs	r3, #0
   19202:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   19206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19208:	9303      	str	r3, [sp, #12]
	data.len = len;
   1920a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1920e:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19212:	2301      	movs	r3, #1
   19214:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19218:	4631      	mov	r1, r6
   1921a:	466b      	mov	r3, sp
   1921c:	4630      	mov	r0, r6
	data.req = req;
   1921e:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19222:	f00b f9db 	bl	245dc <bt_gatt_foreach_attr>
	if (data.err) {
   19226:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1922a:	b1e3      	cbz	r3, 19266 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1922c:	2f00      	cmp	r7, #0
   1922e:	d0d8      	beq.n	191e2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19230:	9b01      	ldr	r3, [sp, #4]
   19232:	6998      	ldr	r0, [r3, #24]
   19234:	f7ff fb66 	bl	18904 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19238:	9801      	ldr	r0, [sp, #4]
   1923a:	f001 fea3 	bl	1af84 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1923e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   19242:	2d00      	cmp	r5, #0
   19244:	d0cd      	beq.n	191e2 <att_write_rsp.constprop.0+0x2a>
   19246:	4632      	mov	r2, r6
   19248:	4629      	mov	r1, r5
   1924a:	4620      	mov	r0, r4
   1924c:	f00b fcab 	bl	24ba6 <send_err_rsp.part.0>
   19250:	e7c7      	b.n	191e2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   19252:	2200      	movs	r2, #0
   19254:	4639      	mov	r1, r7
   19256:	4620      	mov	r0, r4
   19258:	f7ff fe8a 	bl	18f70 <bt_att_chan_create_pdu>
   1925c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1925e:	2800      	cmp	r0, #0
   19260:	d1ca      	bne.n	191f8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   19262:	200e      	movs	r0, #14
   19264:	e7be      	b.n	191e4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   19266:	9901      	ldr	r1, [sp, #4]
   19268:	2900      	cmp	r1, #0
   1926a:	d0ba      	beq.n	191e2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1926c:	4620      	mov	r0, r4
   1926e:	f00b fa83 	bl	24778 <bt_att_chan_send_rsp>
   19272:	e7b6      	b.n	191e2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19274:	2012      	movs	r0, #18
   19276:	e7b5      	b.n	191e4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19278:	2001      	movs	r0, #1
   1927a:	e7b3      	b.n	191e4 <att_write_rsp.constprop.0+0x2c>
   1927c:	0002457b 	.word	0x0002457b

00019280 <bt_att_create_pdu>:
{
   19280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19282:	af00      	add	r7, sp, #0
   19284:	460e      	mov	r6, r1
   19286:	4615      	mov	r5, r2
	att = att_get(conn);
   19288:	f7ff fcea 	bl	18c60 <att_get>
	if (!att) {
   1928c:	b1e0      	cbz	r0, 192c8 <bt_att_create_pdu+0x48>
	return list->head;
   1928e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19290:	4618      	mov	r0, r3
   19292:	b11b      	cbz	r3, 1929c <bt_att_create_pdu+0x1c>
	return node->next;
   19294:	f850 3988 	ldr.w	r3, [r0], #-136
   19298:	b103      	cbz	r3, 1929c <bt_att_create_pdu+0x1c>
   1929a:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1929c:	1c6c      	adds	r4, r5, #1
   1929e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192a0:	b118      	cbz	r0, 192aa <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   192a2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   192a4:	42a1      	cmp	r1, r4
   192a6:	d21a      	bcs.n	192de <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192a8:	b983      	cbnz	r3, 192cc <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   192aa:	466d      	mov	r5, sp
   192ac:	b088      	sub	sp, #32
   192ae:	466a      	mov	r2, sp
   192b0:	4b0f      	ldr	r3, [pc, #60]	; (192f0 <bt_att_create_pdu+0x70>)
   192b2:	4810      	ldr	r0, [pc, #64]	; (192f4 <bt_att_create_pdu+0x74>)
   192b4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   192b8:	2303      	movs	r3, #3
   192ba:	f842 3f10 	str.w	r3, [r2, #16]!
   192be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   192c2:	f00b fa25 	bl	24710 <z_log_msg_static_create.constprop.0>
   192c6:	46ad      	mov	sp, r5
		return NULL;
   192c8:	2000      	movs	r0, #0
   192ca:	e00c      	b.n	192e6 <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192cc:	4618      	mov	r0, r3
   192ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   192d2:	b153      	cbz	r3, 192ea <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   192d4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   192d6:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   192d8:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   192dc:	d8f6      	bhi.n	192cc <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   192de:	462a      	mov	r2, r5
   192e0:	4631      	mov	r1, r6
   192e2:	f7ff fe45 	bl	18f70 <bt_att_chan_create_pdu>
}
   192e6:	46bd      	mov	sp, r7
   192e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   192ea:	4614      	mov	r4, r2
   192ec:	e7d9      	b.n	192a2 <bt_att_create_pdu+0x22>
   192ee:	bf00      	nop
   192f0:	00029139 	.word	0x00029139
   192f4:	0002627c 	.word	0x0002627c

000192f8 <att_read_group_req>:
{
   192f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   192fc:	8a0e      	ldrh	r6, [r1, #16]
   192fe:	3e04      	subs	r6, #4
   19300:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   19302:	2e02      	cmp	r6, #2
{
   19304:	4604      	mov	r4, r0
   19306:	b08c      	sub	sp, #48	; 0x30
   19308:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1930a:	d001      	beq.n	19310 <att_read_group_req+0x18>
   1930c:	2e10      	cmp	r6, #16
   1930e:	d16a      	bne.n	193e6 <att_read_group_req+0xee>
   19310:	2104      	movs	r1, #4
   19312:	300c      	adds	r0, #12
   19314:	f001 ff5c 	bl	1b1d0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19318:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1931c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1931e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19320:	1d01      	adds	r1, r0, #4
   19322:	4632      	mov	r2, r6
   19324:	4640      	mov	r0, r8
   19326:	f00a fdd9 	bl	23edc <bt_uuid_create>
   1932a:	2800      	cmp	r0, #0
   1932c:	d05d      	beq.n	193ea <att_read_group_req+0xf2>
	if (!start || !end) {
   1932e:	2d00      	cmp	r5, #0
   19330:	d03a      	beq.n	193a8 <att_read_group_req+0xb0>
   19332:	2600      	movs	r6, #0
   19334:	2f00      	cmp	r7, #0
   19336:	d036      	beq.n	193a6 <att_read_group_req+0xae>
	if (start > end) {
   19338:	42bd      	cmp	r5, r7
   1933a:	d835      	bhi.n	193a8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1933c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19340:	a901      	add	r1, sp, #4
   19342:	4640      	mov	r0, r8
   19344:	f88d 6004 	strb.w	r6, [sp, #4]
   19348:	f8ad 3006 	strh.w	r3, [sp, #6]
   1934c:	f00a fd98 	bl	23e80 <bt_uuid_cmp>
   19350:	bb70      	cbnz	r0, 193b0 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   19352:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19354:	2214      	movs	r2, #20
   19356:	2100      	movs	r1, #0
   19358:	a807      	add	r0, sp, #28
   1935a:	f00a fd66 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1935e:	2201      	movs	r2, #1
   19360:	2111      	movs	r1, #17
   19362:	4630      	mov	r0, r6
   19364:	f7ff ff8c 	bl	19280 <bt_att_create_pdu>
   19368:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1936a:	2800      	cmp	r0, #0
   1936c:	d03d      	beq.n	193ea <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1936e:	2101      	movs	r1, #1
   19370:	300c      	adds	r0, #12
	data.uuid = uuid;
   19372:	e9cd 4807 	strd	r4, r8, [sp, #28]
   19376:	f001 ff49 	bl	1b20c <net_buf_simple_add>
	data.rsp->len = 0U;
   1937a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1937c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1937e:	4a1c      	ldr	r2, [pc, #112]	; (193f0 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   19380:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19382:	4639      	mov	r1, r7
	data.group = NULL;
   19384:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19386:	4628      	mov	r0, r5
   19388:	ab07      	add	r3, sp, #28
   1938a:	f00b f927 	bl	245dc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1938e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19390:	781b      	ldrb	r3, [r3, #0]
   19392:	bb1b      	cbnz	r3, 193dc <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19394:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19396:	6998      	ldr	r0, [r3, #24]
   19398:	f7ff fab4 	bl	18904 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1939c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1939e:	f001 fdf1 	bl	1af84 <net_buf_unref>
	if (!req) {
   193a2:	230a      	movs	r3, #10
   193a4:	e001      	b.n	193aa <att_read_group_req+0xb2>
			*err = 0U;
   193a6:	463d      	mov	r5, r7
	if (!req) {
   193a8:	2301      	movs	r3, #1
   193aa:	462a      	mov	r2, r5
   193ac:	2110      	movs	r1, #16
   193ae:	e00e      	b.n	193ce <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   193b0:	f642 0301 	movw	r3, #10241	; 0x2801
   193b4:	a907      	add	r1, sp, #28
   193b6:	4640      	mov	r0, r8
   193b8:	f88d 601c 	strb.w	r6, [sp, #28]
   193bc:	f8ad 301e 	strh.w	r3, [sp, #30]
   193c0:	f00a fd5e 	bl	23e80 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   193c4:	2800      	cmp	r0, #0
   193c6:	d0c4      	beq.n	19352 <att_read_group_req+0x5a>
	if (!req) {
   193c8:	2310      	movs	r3, #16
   193ca:	462a      	mov	r2, r5
   193cc:	4619      	mov	r1, r3
   193ce:	4620      	mov	r0, r4
   193d0:	f00b fbe9 	bl	24ba6 <send_err_rsp.part.0>
		return 0;
   193d4:	2000      	movs	r0, #0
}
   193d6:	b00c      	add	sp, #48	; 0x30
   193d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   193dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   193de:	4620      	mov	r0, r4
   193e0:	f00b f9ca 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   193e4:	e7f6      	b.n	193d4 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   193e6:	2004      	movs	r0, #4
   193e8:	e7f5      	b.n	193d6 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   193ea:	200e      	movs	r0, #14
   193ec:	e7f3      	b.n	193d6 <att_read_group_req+0xde>
   193ee:	bf00      	nop
   193f0:	00018d0d 	.word	0x00018d0d

000193f4 <att_read_mult_vl_req>:
{
   193f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   193f8:	6846      	ldr	r6, [r0, #4]
{
   193fa:	b085      	sub	sp, #20
   193fc:	4604      	mov	r4, r0
   193fe:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19400:	4630      	mov	r0, r6
   19402:	2101      	movs	r1, #1
   19404:	f00b fe81 	bl	2510a <bt_gatt_change_aware>
   19408:	b950      	cbnz	r0, 19420 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1940a:	2105      	movs	r1, #5
   1940c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19410:	f00b fa75 	bl	248fe <atomic_test_and_set_bit>
   19414:	2800      	cmp	r0, #0
   19416:	d13b      	bne.n	19490 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19418:	2012      	movs	r0, #18
}
   1941a:	b005      	add	sp, #20
   1941c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19420:	2210      	movs	r2, #16
   19422:	2100      	movs	r1, #0
   19424:	4668      	mov	r0, sp
   19426:	f00a fd00 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1942a:	2200      	movs	r2, #0
   1942c:	2121      	movs	r1, #33	; 0x21
   1942e:	4630      	mov	r0, r6
   19430:	f7ff ff26 	bl	19280 <bt_att_create_pdu>
   19434:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19436:	b368      	cbz	r0, 19494 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19438:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19498 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1943c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1943e:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19442:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19446:	8a2b      	ldrh	r3, [r5, #16]
   19448:	2b01      	cmp	r3, #1
   1944a:	d804      	bhi.n	19456 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1944c:	9902      	ldr	r1, [sp, #8]
   1944e:	4620      	mov	r0, r4
   19450:	f00b f992 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   19454:	e01c      	b.n	19490 <att_read_mult_vl_req+0x9c>
   19456:	4638      	mov	r0, r7
   19458:	f00b fecf 	bl	251fa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1945c:	466b      	mov	r3, sp
   1945e:	464a      	mov	r2, r9
   19460:	4601      	mov	r1, r0
   19462:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19464:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19468:	f00b f8b8 	bl	245dc <bt_gatt_foreach_attr>
		if (data.err) {
   1946c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19470:	2b00      	cmp	r3, #0
   19472:	d0e8      	beq.n	19446 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19474:	9b02      	ldr	r3, [sp, #8]
   19476:	6998      	ldr	r0, [r3, #24]
   19478:	f7ff fa44 	bl	18904 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1947c:	9802      	ldr	r0, [sp, #8]
   1947e:	f001 fd81 	bl	1af84 <net_buf_unref>
	if (!req) {
   19482:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19486:	4632      	mov	r2, r6
   19488:	2120      	movs	r1, #32
   1948a:	4620      	mov	r0, r4
   1948c:	f00b fb8b 	bl	24ba6 <send_err_rsp.part.0>
			return 0;
   19490:	2000      	movs	r0, #0
   19492:	e7c2      	b.n	1941a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   19494:	200e      	movs	r0, #14
   19496:	e7c0      	b.n	1941a <att_read_mult_vl_req+0x26>
   19498:	0002496f 	.word	0x0002496f

0001949c <att_read_mult_req>:
{
   1949c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   194a0:	6846      	ldr	r6, [r0, #4]
{
   194a2:	b085      	sub	sp, #20
   194a4:	4604      	mov	r4, r0
   194a6:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   194a8:	4630      	mov	r0, r6
   194aa:	2101      	movs	r1, #1
   194ac:	f00b fe2d 	bl	2510a <bt_gatt_change_aware>
   194b0:	b950      	cbnz	r0, 194c8 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   194b2:	2105      	movs	r1, #5
   194b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   194b8:	f00b fa21 	bl	248fe <atomic_test_and_set_bit>
   194bc:	2800      	cmp	r0, #0
   194be:	d13b      	bne.n	19538 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   194c0:	2012      	movs	r0, #18
}
   194c2:	b005      	add	sp, #20
   194c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   194c8:	2210      	movs	r2, #16
   194ca:	2100      	movs	r1, #0
   194cc:	4668      	mov	r0, sp
   194ce:	f00a fcac 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   194d2:	2200      	movs	r2, #0
   194d4:	210f      	movs	r1, #15
   194d6:	4630      	mov	r0, r6
   194d8:	f7ff fed2 	bl	19280 <bt_att_create_pdu>
   194dc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   194de:	b368      	cbz	r0, 1953c <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   194e0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19540 <att_read_mult_req+0xa4>
	data.chan = chan;
   194e4:	9400      	str	r4, [sp, #0]
   194e6:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   194ea:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   194ee:	8a2b      	ldrh	r3, [r5, #16]
   194f0:	2b01      	cmp	r3, #1
   194f2:	d804      	bhi.n	194fe <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   194f4:	9902      	ldr	r1, [sp, #8]
   194f6:	4620      	mov	r0, r4
   194f8:	f00b f93e 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   194fc:	e01c      	b.n	19538 <att_read_mult_req+0x9c>
   194fe:	4638      	mov	r0, r7
   19500:	f00b fe7b 	bl	251fa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19504:	466b      	mov	r3, sp
   19506:	464a      	mov	r2, r9
   19508:	4601      	mov	r1, r0
   1950a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1950c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19510:	f00b f864 	bl	245dc <bt_gatt_foreach_attr>
		if (data.err) {
   19514:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19518:	2b00      	cmp	r3, #0
   1951a:	d0e8      	beq.n	194ee <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1951c:	9b02      	ldr	r3, [sp, #8]
   1951e:	6998      	ldr	r0, [r3, #24]
   19520:	f7ff f9f0 	bl	18904 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19524:	9802      	ldr	r0, [sp, #8]
   19526:	f001 fd2d 	bl	1af84 <net_buf_unref>
	if (!req) {
   1952a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1952e:	4632      	mov	r2, r6
   19530:	210e      	movs	r1, #14
   19532:	4620      	mov	r0, r4
   19534:	f00b fb37 	bl	24ba6 <send_err_rsp.part.0>
			return 0;
   19538:	2000      	movs	r0, #0
   1953a:	e7c2      	b.n	194c2 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1953c:	200e      	movs	r0, #14
   1953e:	e7c0      	b.n	194c2 <att_read_mult_req+0x26>
   19540:	00024929 	.word	0x00024929

00019544 <att_read_rsp>:
{
   19544:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19548:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1954c:	4604      	mov	r4, r0
   1954e:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19550:	4640      	mov	r0, r8
   19552:	2101      	movs	r1, #1
{
   19554:	4617      	mov	r7, r2
   19556:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19558:	f00b fdd7 	bl	2510a <bt_gatt_change_aware>
   1955c:	b948      	cbnz	r0, 19572 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1955e:	2105      	movs	r1, #5
   19560:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19564:	f00b f9cb 	bl	248fe <atomic_test_and_set_bit>
   19568:	bb78      	cbnz	r0, 195ca <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1956a:	2012      	movs	r0, #18
}
   1956c:	b004      	add	sp, #16
   1956e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19572:	b38d      	cbz	r5, 195d8 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   19574:	2210      	movs	r2, #16
   19576:	2100      	movs	r1, #0
   19578:	4668      	mov	r0, sp
   1957a:	f00a fc56 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1957e:	2200      	movs	r2, #0
   19580:	4639      	mov	r1, r7
   19582:	4640      	mov	r0, r8
   19584:	f7ff fe7c 	bl	19280 <bt_att_create_pdu>
   19588:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1958a:	b338      	cbz	r0, 195dc <att_read_rsp+0x98>
	data.offset = offset;
   1958c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19590:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19594:	2301      	movs	r3, #1
   19596:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1959a:	4a11      	ldr	r2, [pc, #68]	; (195e0 <att_read_rsp+0x9c>)
	data.chan = chan;
   1959c:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1959e:	466b      	mov	r3, sp
   195a0:	4629      	mov	r1, r5
   195a2:	4628      	mov	r0, r5
   195a4:	f00b f81a 	bl	245dc <bt_gatt_foreach_attr>
	if (data.err) {
   195a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   195ac:	b17b      	cbz	r3, 195ce <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   195ae:	9b02      	ldr	r3, [sp, #8]
   195b0:	6998      	ldr	r0, [r3, #24]
   195b2:	f7ff f9a7 	bl	18904 <tx_meta_data_free>
		net_buf_unref(data.buf);
   195b6:	9802      	ldr	r0, [sp, #8]
   195b8:	f001 fce4 	bl	1af84 <net_buf_unref>
	if (!req) {
   195bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   195c0:	462a      	mov	r2, r5
   195c2:	4631      	mov	r1, r6
   195c4:	4620      	mov	r0, r4
   195c6:	f00b faee 	bl	24ba6 <send_err_rsp.part.0>
			return 0;
   195ca:	2000      	movs	r0, #0
   195cc:	e7ce      	b.n	1956c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   195ce:	9902      	ldr	r1, [sp, #8]
   195d0:	4620      	mov	r0, r4
   195d2:	f00b f8d1 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   195d6:	e7f8      	b.n	195ca <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   195d8:	2001      	movs	r0, #1
   195da:	e7c7      	b.n	1956c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   195dc:	200e      	movs	r0, #14
   195de:	e7c5      	b.n	1956c <att_read_rsp+0x28>
   195e0:	00024929 	.word	0x00024929

000195e4 <att_read_type_req>:
{
   195e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   195e8:	8a0d      	ldrh	r5, [r1, #16]
   195ea:	3d04      	subs	r5, #4
   195ec:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   195ee:	2d02      	cmp	r5, #2
{
   195f0:	4604      	mov	r4, r0
   195f2:	b08c      	sub	sp, #48	; 0x30
   195f4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   195f6:	d001      	beq.n	195fc <att_read_type_req+0x18>
   195f8:	2d10      	cmp	r5, #16
   195fa:	d150      	bne.n	1969e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   195fc:	2104      	movs	r1, #4
   195fe:	300c      	adds	r0, #12
   19600:	f001 fde6 	bl	1b1d0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19604:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19608:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1960a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1960c:	1d01      	adds	r1, r0, #4
   1960e:	462a      	mov	r2, r5
   19610:	4640      	mov	r0, r8
   19612:	f00a fc63 	bl	23edc <bt_uuid_create>
   19616:	b188      	cbz	r0, 1963c <att_read_type_req+0x58>
	if (!start || !end) {
   19618:	b19e      	cbz	r6, 19642 <att_read_type_req+0x5e>
   1961a:	b18f      	cbz	r7, 19640 <att_read_type_req+0x5c>
	if (start > end) {
   1961c:	42b7      	cmp	r7, r6
   1961e:	d310      	bcc.n	19642 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19620:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   19622:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19624:	2100      	movs	r1, #0
   19626:	eb0d 0002 	add.w	r0, sp, r2
   1962a:	f00a fbfe 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1962e:	2201      	movs	r2, #1
   19630:	2109      	movs	r1, #9
   19632:	4628      	mov	r0, r5
   19634:	f7ff fe24 	bl	19280 <bt_att_create_pdu>
   19638:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1963a:	b960      	cbnz	r0, 19656 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1963c:	200e      	movs	r0, #14
   1963e:	e007      	b.n	19650 <att_read_type_req+0x6c>
			*err = 0U;
   19640:	463e      	mov	r6, r7
	if (!req) {
   19642:	2301      	movs	r3, #1
   19644:	4632      	mov	r2, r6
   19646:	2108      	movs	r1, #8
   19648:	4620      	mov	r0, r4
   1964a:	f00b faac 	bl	24ba6 <send_err_rsp.part.0>
		return 0;
   1964e:	2000      	movs	r0, #0
}
   19650:	b00c      	add	sp, #48	; 0x30
   19652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19656:	2101      	movs	r1, #1
   19658:	300c      	adds	r0, #12
	data.uuid = uuid;
   1965a:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1965e:	f001 fdd5 	bl	1b20c <net_buf_simple_add>
	data.rsp->len = 0U;
   19662:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19664:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   19666:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19668:	230a      	movs	r3, #10
   1966a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1966e:	4a0d      	ldr	r2, [pc, #52]	; (196a4 <att_read_type_req+0xc0>)
   19670:	ab06      	add	r3, sp, #24
   19672:	4639      	mov	r1, r7
   19674:	4630      	mov	r0, r6
   19676:	f00a ffb1 	bl	245dc <bt_gatt_foreach_attr>
	if (data.err) {
   1967a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1967e:	b14b      	cbz	r3, 19694 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19680:	9b08      	ldr	r3, [sp, #32]
   19682:	6998      	ldr	r0, [r3, #24]
   19684:	f7ff f93e 	bl	18904 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19688:	9808      	ldr	r0, [sp, #32]
   1968a:	f001 fc7b 	bl	1af84 <net_buf_unref>
	if (!req) {
   1968e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19692:	e7d7      	b.n	19644 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   19694:	9908      	ldr	r1, [sp, #32]
   19696:	4620      	mov	r0, r4
   19698:	f00b f86e 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   1969c:	e7d7      	b.n	1964e <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1969e:	2004      	movs	r0, #4
   196a0:	e7d6      	b.n	19650 <att_read_type_req+0x6c>
   196a2:	bf00      	nop
   196a4:	00018db9 	.word	0x00018db9

000196a8 <att_find_type_req>:
{
   196a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196ac:	460f      	mov	r7, r1
   196ae:	b086      	sub	sp, #24
   196b0:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   196b2:	2106      	movs	r1, #6
   196b4:	f107 000c 	add.w	r0, r7, #12
   196b8:	f001 fd8a 	bl	1b1d0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   196bc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   196be:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   196c2:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   196c4:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   196c8:	b1c5      	cbz	r5, 196fc <att_find_type_req+0x54>
   196ca:	2300      	movs	r3, #0
   196cc:	f1b8 0f00 	cmp.w	r8, #0
   196d0:	d013      	beq.n	196fa <att_find_type_req+0x52>
	if (start > end) {
   196d2:	4545      	cmp	r5, r8
   196d4:	d812      	bhi.n	196fc <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   196d6:	f88d 3000 	strb.w	r3, [sp]
   196da:	f88d 3004 	strb.w	r3, [sp, #4]
   196de:	a901      	add	r1, sp, #4
   196e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   196e4:	4668      	mov	r0, sp
   196e6:	f8ad 2002 	strh.w	r2, [sp, #2]
   196ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   196ee:	f00a fbc7 	bl	23e80 <bt_uuid_cmp>
   196f2:	4606      	mov	r6, r0
   196f4:	b160      	cbz	r0, 19710 <att_find_type_req+0x68>
	if (!req) {
   196f6:	230a      	movs	r3, #10
   196f8:	e001      	b.n	196fe <att_find_type_req+0x56>
			*err = 0U;
   196fa:	4645      	mov	r5, r8
	if (!req) {
   196fc:	2301      	movs	r3, #1
   196fe:	462a      	mov	r2, r5
   19700:	2106      	movs	r1, #6
   19702:	4620      	mov	r0, r4
   19704:	f00b fa4f 	bl	24ba6 <send_err_rsp.part.0>
		return 0;
   19708:	2000      	movs	r0, #0
}
   1970a:	b006      	add	sp, #24
   1970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   19710:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19714:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   19716:	4601      	mov	r1, r0
   19718:	2214      	movs	r2, #20
   1971a:	a801      	add	r0, sp, #4
   1971c:	f00a fb85 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19720:	4632      	mov	r2, r6
   19722:	2107      	movs	r1, #7
   19724:	4650      	mov	r0, sl
   19726:	f7ff fdab 	bl	19280 <bt_att_create_pdu>
   1972a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1972c:	b1f8      	cbz	r0, 1976e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1972e:	230a      	movs	r3, #10
   19730:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19734:	4a0f      	ldr	r2, [pc, #60]	; (19774 <att_find_type_req+0xcc>)
	data.chan = chan;
   19736:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19738:	ab01      	add	r3, sp, #4
   1973a:	4641      	mov	r1, r8
   1973c:	4628      	mov	r0, r5
	data.value = value;
   1973e:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   19742:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19746:	f00a ff49 	bl	245dc <bt_gatt_foreach_attr>
	if (data.err) {
   1974a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1974e:	b14b      	cbz	r3, 19764 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19750:	9b02      	ldr	r3, [sp, #8]
   19752:	6998      	ldr	r0, [r3, #24]
   19754:	f7ff f8d6 	bl	18904 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19758:	9802      	ldr	r0, [sp, #8]
   1975a:	f001 fc13 	bl	1af84 <net_buf_unref>
	if (!req) {
   1975e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19762:	e7cc      	b.n	196fe <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   19764:	9902      	ldr	r1, [sp, #8]
   19766:	4620      	mov	r0, r4
   19768:	f00b f806 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   1976c:	e7cc      	b.n	19708 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1976e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19770:	e7cb      	b.n	1970a <att_find_type_req+0x62>
   19772:	bf00      	nop
   19774:	00018945 	.word	0x00018945

00019778 <att_find_info_req>:
{
   19778:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1977a:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1977c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1977e:	885e      	ldrh	r6, [r3, #2]
{
   19780:	b085      	sub	sp, #20
   19782:	4604      	mov	r4, r0
	if (!start || !end) {
   19784:	b195      	cbz	r5, 197ac <att_find_info_req+0x34>
   19786:	b186      	cbz	r6, 197aa <att_find_info_req+0x32>
	if (start > end) {
   19788:	42b5      	cmp	r5, r6
   1978a:	d80f      	bhi.n	197ac <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1978c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1978e:	2210      	movs	r2, #16
   19790:	2100      	movs	r1, #0
   19792:	4668      	mov	r0, sp
   19794:	f00a fb49 	bl	23e2a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19798:	2200      	movs	r2, #0
   1979a:	2105      	movs	r1, #5
   1979c:	4638      	mov	r0, r7
   1979e:	f7ff fd6f 	bl	19280 <bt_att_create_pdu>
   197a2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   197a4:	b958      	cbnz	r0, 197be <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   197a6:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   197a8:	e007      	b.n	197ba <att_find_info_req+0x42>
			*err = 0U;
   197aa:	4635      	mov	r5, r6
	if (!req) {
   197ac:	2301      	movs	r3, #1
   197ae:	462a      	mov	r2, r5
   197b0:	2104      	movs	r1, #4
   197b2:	4620      	mov	r0, r4
   197b4:	f00b f9f7 	bl	24ba6 <send_err_rsp.part.0>
		return 0;
   197b8:	2000      	movs	r0, #0
}
   197ba:	b005      	add	sp, #20
   197bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   197be:	466b      	mov	r3, sp
   197c0:	4a0a      	ldr	r2, [pc, #40]	; (197ec <att_find_info_req+0x74>)
	data.chan = chan;
   197c2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   197c4:	4631      	mov	r1, r6
   197c6:	4628      	mov	r0, r5
   197c8:	f00a ff08 	bl	245dc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   197cc:	9b02      	ldr	r3, [sp, #8]
   197ce:	b943      	cbnz	r3, 197e2 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   197d0:	9b01      	ldr	r3, [sp, #4]
   197d2:	6998      	ldr	r0, [r3, #24]
   197d4:	f7ff f896 	bl	18904 <tx_meta_data_free>
		net_buf_unref(data.buf);
   197d8:	9801      	ldr	r0, [sp, #4]
   197da:	f001 fbd3 	bl	1af84 <net_buf_unref>
	if (!req) {
   197de:	230a      	movs	r3, #10
   197e0:	e7e5      	b.n	197ae <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   197e2:	9901      	ldr	r1, [sp, #4]
   197e4:	4620      	mov	r0, r4
   197e6:	f00a ffc7 	bl	24778 <bt_att_chan_send_rsp>
	return 0;
   197ea:	e7e5      	b.n	197b8 <att_find_info_req+0x40>
   197ec:	000245f3 	.word	0x000245f3

000197f0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   197f0:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   197f2:	4c0b      	ldr	r4, [pc, #44]	; (19820 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   197f4:	4d0b      	ldr	r5, [pc, #44]	; (19824 <bt_att_init+0x34>)
   197f6:	4620      	mov	r0, r4
   197f8:	f00c f9e3 	bl	25bc2 <z_impl_k_queue_init>
   197fc:	4629      	mov	r1, r5
   197fe:	4620      	mov	r0, r4
   19800:	f00c f9ec 	bl	25bdc <k_queue_append>
   19804:	f105 0114 	add.w	r1, r5, #20
   19808:	4620      	mov	r0, r4
   1980a:	f00c f9e7 	bl	25bdc <k_queue_append>
   1980e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   19812:	4620      	mov	r0, r4
   19814:	f00c f9e2 	bl	25bdc <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   19818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1981c:	f000 bbb6 	b.w	19f8c <bt_gatt_init>
   19820:	200009a4 	.word	0x200009a4
   19824:	20002c4c 	.word	0x20002c4c

00019828 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19828:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1982a:	2300      	movs	r3, #0
{
   1982c:	4605      	mov	r5, r0
   1982e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   19830:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   19832:	f008 f83d 	bl	218b0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   19836:	4b0b      	ldr	r3, [pc, #44]	; (19864 <bt_att_req_alloc+0x3c>)
   19838:	681b      	ldr	r3, [r3, #0]
   1983a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1983c:	bf04      	itt	eq
   1983e:	2500      	moveq	r5, #0
   19840:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19842:	a901      	add	r1, sp, #4
   19844:	4808      	ldr	r0, [pc, #32]	; (19868 <bt_att_req_alloc+0x40>)
   19846:	462a      	mov	r2, r5
   19848:	4623      	mov	r3, r4
   1984a:	f005 fd03 	bl	1f254 <k_mem_slab_alloc>
   1984e:	4601      	mov	r1, r0
   19850:	b930      	cbnz	r0, 19860 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19852:	9801      	ldr	r0, [sp, #4]
   19854:	2210      	movs	r2, #16
   19856:	f00a fae8 	bl	23e2a <memset>

	return req;
   1985a:	9801      	ldr	r0, [sp, #4]
}
   1985c:	b003      	add	sp, #12
   1985e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19860:	2000      	movs	r0, #0
   19862:	e7fb      	b.n	1985c <bt_att_req_alloc+0x34>
   19864:	20002c88 	.word	0x20002c88
   19868:	200008dc 	.word	0x200008dc

0001986c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1986c:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1986e:	6883      	ldr	r3, [r0, #8]
{
   19870:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   19872:	b14b      	cbz	r3, 19888 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   19874:	6998      	ldr	r0, [r3, #24]
   19876:	f7ff f845 	bl	18904 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1987a:	9b01      	ldr	r3, [sp, #4]
   1987c:	6898      	ldr	r0, [r3, #8]
   1987e:	f001 fb81 	bl	1af84 <net_buf_unref>
		req->buf = NULL;
   19882:	9b01      	ldr	r3, [sp, #4]
   19884:	2200      	movs	r2, #0
   19886:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19888:	4803      	ldr	r0, [pc, #12]	; (19898 <bt_att_req_free+0x2c>)
   1988a:	a901      	add	r1, sp, #4
   1988c:	f005 fd4c 	bl	1f328 <k_mem_slab_free>
}
   19890:	b003      	add	sp, #12
   19892:	f85d fb04 	ldr.w	pc, [sp], #4
   19896:	bf00      	nop
   19898:	200008dc 	.word	0x200008dc

0001989c <att_handle_rsp>:
{
   1989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198a0:	4604      	mov	r4, r0
   198a2:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   198a4:	3058      	adds	r0, #88	; 0x58
{
   198a6:	460e      	mov	r6, r1
   198a8:	4617      	mov	r7, r2
   198aa:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   198ac:	f006 fe92 	bl	205d4 <k_work_cancel_delayable>
	if (!chan->req) {
   198b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   198b2:	b980      	cbnz	r0, 198d6 <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   198b4:	4b19      	ldr	r3, [pc, #100]	; (1991c <att_handle_rsp+0x80>)
   198b6:	9307      	str	r3, [sp, #28]
   198b8:	4819      	ldr	r0, [pc, #100]	; (19920 <att_handle_rsp+0x84>)
   198ba:	2302      	movs	r3, #2
   198bc:	aa06      	add	r2, sp, #24
   198be:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   198c2:	9306      	str	r3, [sp, #24]
   198c4:	f00a ff24 	bl	24710 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   198c8:	6820      	ldr	r0, [r4, #0]
   198ca:	f00b f8b1 	bl	24a30 <att_req_send_process>
}
   198ce:	2000      	movs	r0, #0
   198d0:	b008      	add	sp, #32
   198d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   198d6:	4b13      	ldr	r3, [pc, #76]	; (19924 <att_handle_rsp+0x88>)
   198d8:	4298      	cmp	r0, r3
   198da:	f04f 0800 	mov.w	r8, #0
   198de:	d102      	bne.n	198e6 <att_handle_rsp+0x4a>
		chan->req = NULL;
   198e0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   198e4:	e7f0      	b.n	198c8 <att_handle_rsp+0x2c>
	func = chan->req->func;
   198e6:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   198ea:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   198ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   198f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   198f4:	f7ff ffba 	bl	1986c <bt_att_req_free>
	att_req_send_process(chan->att);
   198f8:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   198fa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   198fe:	f00b f897 	bl	24a30 <att_req_send_process>
	if (func) {
   19902:	f1b9 0f00 	cmp.w	r9, #0
   19906:	d0e2      	beq.n	198ce <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   19908:	6820      	ldr	r0, [r4, #0]
   1990a:	f8cd a000 	str.w	sl, [sp]
   1990e:	6800      	ldr	r0, [r0, #0]
   19910:	463b      	mov	r3, r7
   19912:	4632      	mov	r2, r6
   19914:	4629      	mov	r1, r5
   19916:	47c8      	blx	r9
   19918:	e7d9      	b.n	198ce <att_handle_rsp+0x32>
   1991a:	bf00      	nop
   1991c:	00029154 	.word	0x00029154
   19920:	0002627c 	.word	0x0002627c
   19924:	20002c8c 	.word	0x20002c8c

00019928 <bt_att_disconnected>:
{
   19928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1992c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19930:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19932:	2e00      	cmp	r6, #0
   19934:	d05a      	beq.n	199ec <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19936:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1993a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1993e:	f00a ffb4 	bl	248aa <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19942:	1f27      	subs	r7, r4, #4
   19944:	f104 0838 	add.w	r8, r4, #56	; 0x38
   19948:	2200      	movs	r2, #0
   1994a:	2300      	movs	r3, #0
   1994c:	4640      	mov	r0, r8
   1994e:	f00b fc52 	bl	251f6 <net_buf_get>
   19952:	4605      	mov	r5, r0
   19954:	bb48      	cbnz	r0, 199aa <bt_att_disconnected+0x82>
	if (chan->req) {
   19956:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19958:	b12b      	cbz	r3, 19966 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1995a:	4602      	mov	r2, r0
   1995c:	4601      	mov	r1, r0
   1995e:	230e      	movs	r3, #14
   19960:	4638      	mov	r0, r7
   19962:	f7ff ff9b 	bl	1989c <att_handle_rsp>
	chan->att = NULL;
   19966:	2300      	movs	r3, #0
   19968:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1996c:	2102      	movs	r1, #2
   1996e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19972:	f00a ffb3 	bl	248dc <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   19976:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   19978:	2b00      	cmp	r3, #0
   1997a:	d137      	bne.n	199ec <bt_att_disconnected+0xc4>
	att_reset(att);
   1997c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1997e:	9803      	ldr	r0, [sp, #12]
   19980:	2200      	movs	r2, #0
   19982:	2300      	movs	r3, #0
   19984:	300c      	adds	r0, #12
   19986:	f00b fc36 	bl	251f6 <net_buf_get>
   1998a:	4605      	mov	r5, r0
   1998c:	b9a0      	cbnz	r0, 199b8 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1998e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   19990:	6845      	ldr	r5, [r0, #4]
   19992:	b9c5      	cbnz	r5, 199c6 <bt_att_disconnected+0x9e>
	att->conn = NULL;
   19994:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   19996:	a903      	add	r1, sp, #12
   19998:	4816      	ldr	r0, [pc, #88]	; (199f4 <bt_att_disconnected+0xcc>)
   1999a:	f005 fcc5 	bl	1f328 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1999e:	6820      	ldr	r0, [r4, #0]
}
   199a0:	b004      	add	sp, #16
   199a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   199a6:	f001 b88f 	b.w	1aac8 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   199aa:	69a8      	ldr	r0, [r5, #24]
   199ac:	f7fe ffaa 	bl	18904 <tx_meta_data_free>
		net_buf_unref(buf);
   199b0:	4628      	mov	r0, r5
   199b2:	f001 fae7 	bl	1af84 <net_buf_unref>
   199b6:	e7c7      	b.n	19948 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   199b8:	69a8      	ldr	r0, [r5, #24]
   199ba:	f7fe ffa3 	bl	18904 <tx_meta_data_free>
		net_buf_unref(buf);
   199be:	4628      	mov	r0, r5
   199c0:	f001 fae0 	bl	1af84 <net_buf_unref>
   199c4:	e7db      	b.n	1997e <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   199c6:	6882      	ldr	r2, [r0, #8]
	return node->next;
   199c8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   199ca:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   199cc:	4295      	cmp	r5, r2
	list->tail = node;
   199ce:	bf08      	it	eq
   199d0:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   199d2:	686e      	ldr	r6, [r5, #4]
   199d4:	b136      	cbz	r6, 199e4 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   199d6:	68eb      	ldr	r3, [r5, #12]
   199d8:	9300      	str	r3, [sp, #0]
   199da:	2300      	movs	r3, #0
   199dc:	6800      	ldr	r0, [r0, #0]
   199de:	461a      	mov	r2, r3
   199e0:	210e      	movs	r1, #14
   199e2:	47b0      	blx	r6
		bt_att_req_free(req);
   199e4:	4628      	mov	r0, r5
   199e6:	f7ff ff41 	bl	1986c <bt_att_req_free>
   199ea:	e7d0      	b.n	1998e <bt_att_disconnected+0x66>
}
   199ec:	b004      	add	sp, #16
   199ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   199f2:	bf00      	nop
   199f4:	2000089c 	.word	0x2000089c

000199f8 <att_timeout>:
{
   199f8:	b510      	push	{r4, lr}
   199fa:	4604      	mov	r4, r0
   199fc:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   199fe:	4b08      	ldr	r3, [pc, #32]	; (19a20 <att_timeout+0x28>)
   19a00:	9305      	str	r3, [sp, #20]
   19a02:	4808      	ldr	r0, [pc, #32]	; (19a24 <att_timeout+0x2c>)
   19a04:	2302      	movs	r3, #2
   19a06:	aa04      	add	r2, sp, #16
   19a08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a0c:	9304      	str	r3, [sp, #16]
   19a0e:	f00a fe7f 	bl	24710 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   19a12:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   19a16:	b006      	add	sp, #24
   19a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19a1c:	f7ff bf84 	b.w	19928 <bt_att_disconnected>
   19a20:	0002916b 	.word	0x0002916b
   19a24:	0002627c 	.word	0x0002627c

00019a28 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   19a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a2a:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   19a2c:	b958      	cbnz	r0, 19a46 <bt_att_send+0x1e>
   19a2e:	4929      	ldr	r1, [pc, #164]	; (19ad4 <bt_att_send+0xac>)
   19a30:	4a29      	ldr	r2, [pc, #164]	; (19ad8 <bt_att_send+0xb0>)
   19a32:	482a      	ldr	r0, [pc, #168]	; (19adc <bt_att_send+0xb4>)
   19a34:	f640 63ba 	movw	r3, #3770	; 0xeba
   19a38:	f009 fddf 	bl	235fa <assert_print>
   19a3c:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(buf);
   19a40:	4825      	ldr	r0, [pc, #148]	; (19ad8 <bt_att_send+0xb0>)
   19a42:	f009 fdd3 	bl	235ec <assert_post_action>
   19a46:	b949      	cbnz	r1, 19a5c <bt_att_send+0x34>
   19a48:	4925      	ldr	r1, [pc, #148]	; (19ae0 <bt_att_send+0xb8>)
   19a4a:	4a23      	ldr	r2, [pc, #140]	; (19ad8 <bt_att_send+0xb0>)
   19a4c:	4823      	ldr	r0, [pc, #140]	; (19adc <bt_att_send+0xb4>)
   19a4e:	f640 63bb 	movw	r3, #3771	; 0xebb
   19a52:	f009 fdd2 	bl	235fa <assert_print>
   19a56:	f640 61bb 	movw	r1, #3771	; 0xebb
   19a5a:	e7f1      	b.n	19a40 <bt_att_send+0x18>

	att = att_get(conn);
   19a5c:	f7ff f900 	bl	18c60 <att_get>
	if (!att) {
   19a60:	4605      	mov	r5, r0
   19a62:	b940      	cbnz	r0, 19a76 <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   19a64:	69a0      	ldr	r0, [r4, #24]
   19a66:	f7fe ff4d 	bl	18904 <tx_meta_data_free>
		net_buf_unref(buf);
   19a6a:	4620      	mov	r0, r4
   19a6c:	f001 fa8a 	bl	1af84 <net_buf_unref>
		return -ENOTCONN;
   19a70:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   19a76:	f100 060c 	add.w	r6, r0, #12
   19a7a:	4621      	mov	r1, r4
   19a7c:	4630      	mov	r0, r6
   19a7e:	f001 fa5b 	bl	1af38 <net_buf_put>
	return list->head;
   19a82:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19a84:	b14d      	cbz	r5, 19a9a <bt_att_send+0x72>
	return node->next;
   19a86:	f855 4988 	ldr.w	r4, [r5], #-136
   19a8a:	b104      	cbz	r4, 19a8e <bt_att_send+0x66>
   19a8c:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   19a8e:	4631      	mov	r1, r6
   19a90:	4628      	mov	r0, r5
   19a92:	f00a fe58 	bl	24746 <process_queue>
		if (!err) {
   19a96:	4603      	mov	r3, r0
   19a98:	b980      	cbnz	r0, 19abc <bt_att_send+0x94>
	return 0;
   19a9a:	2000      	movs	r0, #0
   19a9c:	e7ea      	b.n	19a74 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   19a9e:	2103      	movs	r1, #3
   19aa0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19aa4:	f00a fd60 	bl	24568 <atomic_test_bit>
   19aa8:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   19aaa:	f105 0034 	add.w	r0, r5, #52	; 0x34
   19aae:	f00a fd5b 	bl	24568 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   19ab2:	4287      	cmp	r7, r0
   19ab4:	f06f 0301 	mvn.w	r3, #1
   19ab8:	d107      	bne.n	19aca <bt_att_send+0xa2>
   19aba:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19abc:	2c00      	cmp	r4, #0
   19abe:	d0ec      	beq.n	19a9a <bt_att_send+0x72>
   19ac0:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   19ac4:	b922      	cbnz	r2, 19ad0 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   19ac6:	3302      	adds	r3, #2
   19ac8:	d0e9      	beq.n	19a9e <bt_att_send+0x76>
{
   19aca:	4625      	mov	r5, r4
   19acc:	4614      	mov	r4, r2
   19ace:	e7de      	b.n	19a8e <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19ad0:	3a88      	subs	r2, #136	; 0x88
   19ad2:	e7f8      	b.n	19ac6 <bt_att_send+0x9e>
   19ad4:	00028d5a 	.word	0x00028d5a
   19ad8:	00028f03 	.word	0x00028f03
   19adc:	00026f1a 	.word	0x00026f1a
   19ae0:	000294a9 	.word	0x000294a9

00019ae4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   19ae4:	b510      	push	{r4, lr}
   19ae6:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   19ae8:	b958      	cbnz	r0, 19b02 <bt_att_req_send+0x1e>
   19aea:	4915      	ldr	r1, [pc, #84]	; (19b40 <bt_att_req_send+0x5c>)
   19aec:	4a15      	ldr	r2, [pc, #84]	; (19b44 <bt_att_req_send+0x60>)
   19aee:	4816      	ldr	r0, [pc, #88]	; (19b48 <bt_att_req_send+0x64>)
   19af0:	f44f 636d 	mov.w	r3, #3792	; 0xed0
   19af4:	f009 fd81 	bl	235fa <assert_print>
   19af8:	f44f 616d 	mov.w	r1, #3792	; 0xed0
	__ASSERT_NO_MSG(req);
   19afc:	4811      	ldr	r0, [pc, #68]	; (19b44 <bt_att_req_send+0x60>)
   19afe:	f009 fd75 	bl	235ec <assert_post_action>
   19b02:	b949      	cbnz	r1, 19b18 <bt_att_req_send+0x34>
   19b04:	4911      	ldr	r1, [pc, #68]	; (19b4c <bt_att_req_send+0x68>)
   19b06:	4a0f      	ldr	r2, [pc, #60]	; (19b44 <bt_att_req_send+0x60>)
   19b08:	480f      	ldr	r0, [pc, #60]	; (19b48 <bt_att_req_send+0x64>)
   19b0a:	f640 63d1 	movw	r3, #3793	; 0xed1
   19b0e:	f009 fd74 	bl	235fa <assert_print>
   19b12:	f640 61d1 	movw	r1, #3793	; 0xed1
   19b16:	e7f1      	b.n	19afc <bt_att_req_send+0x18>

	att = att_get(conn);
   19b18:	f7ff f8a2 	bl	18c60 <att_get>
	if (!att) {
   19b1c:	b160      	cbz	r0, 19b38 <bt_att_req_send+0x54>
	parent->next = child;
   19b1e:	2300      	movs	r3, #0
   19b20:	6023      	str	r3, [r4, #0]
	return list->tail;
   19b22:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19b24:	b92b      	cbnz	r3, 19b32 <bt_att_req_send+0x4e>
	list->head = node;
   19b26:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   19b2a:	f00a ff81 	bl	24a30 <att_req_send_process>

	return 0;
   19b2e:	2000      	movs	r0, #0
}
   19b30:	bd10      	pop	{r4, pc}
	parent->next = child;
   19b32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19b34:	6084      	str	r4, [r0, #8]
}
   19b36:	e7f8      	b.n	19b2a <bt_att_req_send+0x46>
		return -ENOTCONN;
   19b38:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19b3c:	e7f8      	b.n	19b30 <bt_att_req_send+0x4c>
   19b3e:	bf00      	nop
   19b40:	00028d5a 	.word	0x00028d5a
   19b44:	00028f03 	.word	0x00028f03
   19b48:	00026f1a 	.word	0x00026f1a
   19b4c:	00028fef 	.word	0x00028fef

00019b50 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   19b50:	b570      	push	{r4, r5, r6, lr}
   19b52:	4d14      	ldr	r5, [pc, #80]	; (19ba4 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   19b54:	4606      	mov	r6, r0
   19b56:	b140      	cbz	r0, 19b6a <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19b58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   19b5c:	462a      	mov	r2, r5
   19b5e:	1e6c      	subs	r4, r5, #1
   19b60:	f00a fc20 	bl	243a4 <bt_conn_is_peer_addr_le>
   19b64:	b198      	cbz	r0, 19b8e <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19b66:	4620      	mov	r0, r4
   19b68:	e00c      	b.n	19b84 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19b6a:	490f      	ldr	r1, [pc, #60]	; (19ba8 <find_cf_cfg+0x58>)
   19b6c:	4628      	mov	r0, r5
   19b6e:	f00b f947 	bl	24e00 <bt_addr_le_eq>
   19b72:	b940      	cbnz	r0, 19b86 <find_cf_cfg+0x36>
   19b74:	490c      	ldr	r1, [pc, #48]	; (19ba8 <find_cf_cfg+0x58>)
   19b76:	f105 0010 	add.w	r0, r5, #16
   19b7a:	f00b f941 	bl	24e00 <bt_addr_le_eq>
   19b7e:	b120      	cbz	r0, 19b8a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19b80:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   19b84:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19b86:	1e68      	subs	r0, r5, #1
   19b88:	e7fc      	b.n	19b84 <find_cf_cfg+0x34>
	return NULL;
   19b8a:	2000      	movs	r0, #0
   19b8c:	e7fa      	b.n	19b84 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19b8e:	7c21      	ldrb	r1, [r4, #16]
   19b90:	f104 0211 	add.w	r2, r4, #17
   19b94:	4630      	mov	r0, r6
   19b96:	f00a fc05 	bl	243a4 <bt_conn_is_peer_addr_le>
   19b9a:	2800      	cmp	r0, #0
   19b9c:	d0f5      	beq.n	19b8a <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19b9e:	f104 0010 	add.w	r0, r4, #16
   19ba2:	e7ef      	b.n	19b84 <find_cf_cfg+0x34>
   19ba4:	20002cb5 	.word	0x20002cb5
   19ba8:	00027f97 	.word	0x00027f97

00019bac <find_sc_cfg>:
{
   19bac:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   19bae:	4c0e      	ldr	r4, [pc, #56]	; (19be8 <find_sc_cfg+0x3c>)
   19bb0:	7823      	ldrb	r3, [r4, #0]
   19bb2:	4283      	cmp	r3, r0
{
   19bb4:	4605      	mov	r5, r0
   19bb6:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   19bb8:	d00c      	beq.n	19bd4 <find_sc_cfg+0x28>
   19bba:	7b23      	ldrb	r3, [r4, #12]
   19bbc:	42ab      	cmp	r3, r5
   19bbe:	d110      	bne.n	19be2 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   19bc0:	480a      	ldr	r0, [pc, #40]	; (19bec <find_sc_cfg+0x40>)
   19bc2:	4631      	mov	r1, r6
   19bc4:	f00b f91c 	bl	24e00 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   19bc8:	b158      	cbz	r0, 19be2 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19bca:	2301      	movs	r3, #1
			return &sc_cfg[i];
   19bcc:	220c      	movs	r2, #12
   19bce:	fb02 4003 	mla	r0, r2, r3, r4
   19bd2:	e007      	b.n	19be4 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   19bd4:	1c60      	adds	r0, r4, #1
   19bd6:	f00b f913 	bl	24e00 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   19bda:	2800      	cmp	r0, #0
   19bdc:	d0ed      	beq.n	19bba <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19bde:	2300      	movs	r3, #0
   19be0:	e7f4      	b.n	19bcc <find_sc_cfg+0x20>
	return NULL;
   19be2:	2000      	movs	r0, #0
}
   19be4:	bd70      	pop	{r4, r5, r6, pc}
   19be6:	bf00      	nop
   19be8:	20002f2e 	.word	0x20002f2e
   19bec:	20002f3b 	.word	0x20002f3b

00019bf0 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   19bf0:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   19bf2:	1c4a      	adds	r2, r1, #1
{
   19bf4:	460c      	mov	r4, r1
		if (conn) {
   19bf6:	4605      	mov	r5, r0
   19bf8:	b968      	cbnz	r0, 19c16 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19bfa:	490e      	ldr	r1, [pc, #56]	; (19c34 <find_ccc_cfg+0x44>)
   19bfc:	4610      	mov	r0, r2
   19bfe:	f00b f8ff 	bl	24e00 <bt_addr_le_eq>
   19c02:	b930      	cbnz	r0, 19c12 <find_ccc_cfg+0x22>
   19c04:	490b      	ldr	r1, [pc, #44]	; (19c34 <find_ccc_cfg+0x44>)
   19c06:	f104 000b 	add.w	r0, r4, #11
   19c0a:	f00b f8f9 	bl	24e00 <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   19c0e:	b170      	cbz	r0, 19c2e <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   19c10:	340a      	adds	r4, #10
   19c12:	4620      	mov	r0, r4
   19c14:	e00c      	b.n	19c30 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   19c16:	7809      	ldrb	r1, [r1, #0]
   19c18:	f00a fbc4 	bl	243a4 <bt_conn_is_peer_addr_le>
   19c1c:	2800      	cmp	r0, #0
   19c1e:	d1f8      	bne.n	19c12 <find_ccc_cfg+0x22>
   19c20:	7aa1      	ldrb	r1, [r4, #10]
   19c22:	f104 020b 	add.w	r2, r4, #11
   19c26:	4628      	mov	r0, r5
   19c28:	f00a fbbc 	bl	243a4 <bt_conn_is_peer_addr_le>
   19c2c:	e7ef      	b.n	19c0e <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   19c2e:	2000      	movs	r0, #0
}
   19c30:	bd38      	pop	{r3, r4, r5, pc}
   19c32:	bf00      	nop
   19c34:	00027f97 	.word	0x00027f97

00019c38 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   19c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19c3c:	b087      	sub	sp, #28
   19c3e:	461e      	mov	r6, r3
   19c40:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   19c44:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   19c48:	4681      	mov	r9, r0
   19c4a:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   19c4c:	2b00      	cmp	r3, #0
   19c4e:	d14b      	bne.n	19ce8 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   19c50:	1e73      	subs	r3, r6, #1
   19c52:	2b01      	cmp	r3, #1
   19c54:	d84b      	bhi.n	19cee <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   19c56:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   19c58:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   19c5a:	7815      	ldrb	r5, [r2, #0]
   19c5c:	bf18      	it	ne
   19c5e:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   19c60:	f7ff ffc6 	bl	19bf0 <find_ccc_cfg>
	if (!cfg) {
   19c64:	4604      	mov	r4, r0
   19c66:	b9f0      	cbnz	r0, 19ca6 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   19c68:	b91d      	cbnz	r5, 19c72 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   19c6a:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   19c6c:	b007      	add	sp, #28
   19c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19c72:	4641      	mov	r1, r8
   19c74:	f7ff ffbc 	bl	19bf0 <find_ccc_cfg>
		if (!cfg) {
   19c78:	4604      	mov	r4, r0
   19c7a:	b960      	cbnz	r0, 19c96 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   19c7c:	4b1d      	ldr	r3, [pc, #116]	; (19cf4 <bt_gatt_attr_write_ccc+0xbc>)
   19c7e:	481e      	ldr	r0, [pc, #120]	; (19cf8 <bt_gatt_attr_write_ccc+0xc0>)
   19c80:	9305      	str	r3, [sp, #20]
   19c82:	aa04      	add	r2, sp, #16
   19c84:	2302      	movs	r3, #2
   19c86:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19c8a:	9304      	str	r3, [sp, #16]
   19c8c:	f00b f8d8 	bl	24e40 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19c90:	f06f 0010 	mvn.w	r0, #16
   19c94:	e7ea      	b.n	19c6c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19c96:	f109 0190 	add.w	r1, r9, #144	; 0x90
   19c9a:	3001      	adds	r0, #1
   19c9c:	f00b f8cd 	bl	24e3a <bt_addr_le_copy>
		cfg->id = conn->id;
   19ca0:	f899 3008 	ldrb.w	r3, [r9, #8]
   19ca4:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   19ca6:	f8d8 301c 	ldr.w	r3, [r8, #28]
   19caa:	b98b      	cbnz	r3, 19cd0 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   19cac:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   19cae:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   19cb2:	42ab      	cmp	r3, r5
   19cb4:	d003      	beq.n	19cbe <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   19cb6:	4641      	mov	r1, r8
   19cb8:	4638      	mov	r0, r7
   19cba:	f00b f829 	bl	24d10 <gatt_ccc_changed>
	if (!value) {
   19cbe:	2d00      	cmp	r5, #0
   19cc0:	d1d3      	bne.n	19c6a <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19cc2:	490e      	ldr	r1, [pc, #56]	; (19cfc <bt_gatt_attr_write_ccc+0xc4>)
   19cc4:	1c60      	adds	r0, r4, #1
   19cc6:	f00b f8b8 	bl	24e3a <bt_addr_le_copy>
	cfg->id = 0U;
   19cca:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   19ccc:	8125      	strh	r5, [r4, #8]
}
   19cce:	e7cc      	b.n	19c6a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   19cd0:	462a      	mov	r2, r5
   19cd2:	4639      	mov	r1, r7
   19cd4:	4648      	mov	r0, r9
   19cd6:	4798      	blx	r3
		if (write < 0) {
   19cd8:	2800      	cmp	r0, #0
   19cda:	dbc7      	blt.n	19c6c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   19cdc:	3801      	subs	r0, #1
   19cde:	2801      	cmp	r0, #1
   19ce0:	d9e4      	bls.n	19cac <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   19ce2:	f06f 000d 	mvn.w	r0, #13
   19ce6:	e7c1      	b.n	19c6c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19ce8:	f06f 0006 	mvn.w	r0, #6
   19cec:	e7be      	b.n	19c6c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19cee:	f06f 000c 	mvn.w	r0, #12
   19cf2:	e7bb      	b.n	19c6c <bt_gatt_attr_write_ccc+0x34>
   19cf4:	0002917e 	.word	0x0002917e
   19cf8:	00026294 	.word	0x00026294
   19cfc:	00027f97 	.word	0x00027f97

00019d00 <clear_cf_cfg>:
{
   19d00:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19d02:	490c      	ldr	r1, [pc, #48]	; (19d34 <clear_cf_cfg+0x34>)
{
   19d04:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19d06:	3001      	adds	r0, #1
   19d08:	f00b f897 	bl	24e3a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   19d0c:	f104 0008 	add.w	r0, r4, #8
   19d10:	2201      	movs	r2, #1
   19d12:	2100      	movs	r1, #0
   19d14:	f00a f889 	bl	23e2a <memset>
   19d18:	f3bf 8f5b 	dmb	ish
   19d1c:	340c      	adds	r4, #12
   19d1e:	2300      	movs	r3, #0
   19d20:	e854 2f00 	ldrex	r2, [r4]
   19d24:	e844 3100 	strex	r1, r3, [r4]
   19d28:	2900      	cmp	r1, #0
   19d2a:	d1f9      	bne.n	19d20 <clear_cf_cfg+0x20>
   19d2c:	f3bf 8f5b 	dmb	ish
}
   19d30:	bd10      	pop	{r4, pc}
   19d32:	bf00      	nop
   19d34:	00027f97 	.word	0x00027f97

00019d38 <sc_save>:
{
   19d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d3c:	b086      	sub	sp, #24
   19d3e:	4680      	mov	r8, r0
   19d40:	460f      	mov	r7, r1
   19d42:	4616      	mov	r6, r2
   19d44:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19d46:	f7ff ff31 	bl	19bac <find_sc_cfg>
	if (!cfg) {
   19d4a:	4604      	mov	r4, r0
   19d4c:	b9b0      	cbnz	r0, 19d7c <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   19d4e:	4912      	ldr	r1, [pc, #72]	; (19d98 <sc_save+0x60>)
   19d50:	f7ff ff2c 	bl	19bac <find_sc_cfg>
		if (!cfg) {
   19d54:	4604      	mov	r4, r0
   19d56:	b960      	cbnz	r0, 19d72 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   19d58:	4b10      	ldr	r3, [pc, #64]	; (19d9c <sc_save+0x64>)
   19d5a:	9305      	str	r3, [sp, #20]
   19d5c:	4810      	ldr	r0, [pc, #64]	; (19da0 <sc_save+0x68>)
   19d5e:	2302      	movs	r3, #2
   19d60:	aa04      	add	r2, sp, #16
   19d62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19d66:	9304      	str	r3, [sp, #16]
   19d68:	f00b f86a 	bl	24e40 <z_log_msg_static_create.constprop.0>
}
   19d6c:	b006      	add	sp, #24
   19d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   19d72:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19d76:	4639      	mov	r1, r7
   19d78:	f00b f85f 	bl	24e3a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19d7c:	8922      	ldrh	r2, [r4, #8]
   19d7e:	8963      	ldrh	r3, [r4, #10]
   19d80:	b91a      	cbnz	r2, 19d8a <sc_save+0x52>
   19d82:	b92b      	cbnz	r3, 19d90 <sc_save+0x58>
		cfg->data.start = start;
   19d84:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19d86:	8165      	strh	r5, [r4, #10]
   19d88:	e7f0      	b.n	19d6c <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   19d8a:	4296      	cmp	r6, r2
		*start = new_start;
   19d8c:	bf38      	it	cc
   19d8e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   19d90:	429d      	cmp	r5, r3
   19d92:	d9eb      	bls.n	19d6c <sc_save+0x34>
   19d94:	e7f7      	b.n	19d86 <sc_save+0x4e>
   19d96:	bf00      	nop
   19d98:	00027f97 	.word	0x00027f97
   19d9c:	00029198 	.word	0x00029198
   19da0:	00026294 	.word	0x00026294

00019da4 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   19da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   19da8:	4b28      	ldr	r3, [pc, #160]	; (19e4c <disconnected_cb+0xa8>)
{
   19daa:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19dac:	6882      	ldr	r2, [r0, #8]
   19dae:	429a      	cmp	r2, r3
{
   19db0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19db2:	d12b      	bne.n	19e0c <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   19db4:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   19db6:	8aab      	ldrh	r3, [r5, #20]
   19db8:	b343      	cbz	r3, 19e0c <disconnected_cb+0x68>
   19dba:	1c6c      	adds	r4, r5, #1
   19dbc:	f105 0915 	add.w	r9, r5, #21
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   19dc0:	f04f 0800 	mov.w	r8, #0

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   19dc4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   19dc8:	b19b      	cbz	r3, 19df2 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19dca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   19dce:	4622      	mov	r2, r4
   19dd0:	4630      	mov	r0, r6
   19dd2:	f00a fae7 	bl	243a4 <bt_conn_is_peer_addr_le>
   19dd6:	b9e0      	cbnz	r0, 19e12 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19dd8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19ddc:	4621      	mov	r1, r4
   19dde:	f7fe f9b9 	bl	18154 <bt_conn_lookup_addr_le>
			if (tmp) {
   19de2:	b130      	cbz	r0, 19df2 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   19de4:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   19de6:	2b07      	cmp	r3, #7
   19de8:	bf08      	it	eq
   19dea:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   19dee:	f7fd ff3b 	bl	17c68 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19df2:	340a      	adds	r4, #10
   19df4:	454c      	cmp	r4, r9
   19df6:	d1e5      	bne.n	19dc4 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   19df8:	f1b8 0f00 	cmp.w	r8, #0
   19dfc:	d106      	bne.n	19e0c <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   19dfe:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   19e00:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   19e04:	b113      	cbz	r3, 19e0c <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   19e06:	4641      	mov	r1, r8
   19e08:	4638      	mov	r0, r7
   19e0a:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   19e0c:	2001      	movs	r0, #1
   19e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19e12:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   19e16:	7a30      	ldrb	r0, [r6, #8]
   19e18:	4651      	mov	r1, sl
   19e1a:	f00a f96a 	bl	240f2 <bt_addr_le_is_bonded>
   19e1e:	b978      	cbnz	r0, 19e40 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   19e20:	4b0b      	ldr	r3, [pc, #44]	; (19e50 <disconnected_cb+0xac>)
   19e22:	429d      	cmp	r5, r3
   19e24:	d102      	bne.n	19e2c <disconnected_cb+0x88>
					sc_clear(conn);
   19e26:	4630      	mov	r0, r6
   19e28:	f00b f80d 	bl	24e46 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19e2c:	4909      	ldr	r1, [pc, #36]	; (19e54 <disconnected_cb+0xb0>)
   19e2e:	4620      	mov	r0, r4
   19e30:	f00b f803 	bl	24e3a <bt_addr_le_copy>
	cfg->id = 0U;
   19e34:	2300      	movs	r3, #0
   19e36:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   19e3a:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   19e3e:	e7d8      	b.n	19df2 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19e40:	4651      	mov	r1, sl
   19e42:	4620      	mov	r0, r4
   19e44:	f00a fff9 	bl	24e3a <bt_addr_le_copy>
   19e48:	e7d3      	b.n	19df2 <disconnected_cb+0x4e>
   19e4a:	bf00      	nop
   19e4c:	00019c39 	.word	0x00019c39
   19e50:	200006ac 	.word	0x200006ac
   19e54:	00027f97 	.word	0x00027f97

00019e58 <read_ppcp>:
{
   19e58:	b513      	push	{r0, r1, r4, lr}
   19e5a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   19e5e:	4c0b      	ldr	r4, [pc, #44]	; (19e8c <read_ppcp+0x34>)
{
   19e60:	4610      	mov	r0, r2
	if (offset > value_len) {
   19e62:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   19e64:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   19e68:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   19e6c:	d80b      	bhi.n	19e86 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   19e6e:	f1c1 0408 	rsb	r4, r1, #8
   19e72:	429c      	cmp	r4, r3
   19e74:	bfa8      	it	ge
   19e76:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   19e78:	4622      	mov	r2, r4
   19e7a:	4469      	add	r1, sp
   19e7c:	f009 ffca 	bl	23e14 <memcpy>
}
   19e80:	4620      	mov	r0, r4
   19e82:	b002      	add	sp, #8
   19e84:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19e86:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   19e8a:	e7f9      	b.n	19e80 <read_ppcp+0x28>
   19e8c:	00280018 	.word	0x00280018

00019e90 <cf_write>:
{
   19e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e94:	b086      	sub	sp, #24
   19e96:	461f      	mov	r7, r3
   19e98:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   19e9c:	2b01      	cmp	r3, #1
{
   19e9e:	4606      	mov	r6, r0
   19ea0:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   19ea2:	d83a      	bhi.n	19f1a <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   19ea4:	443b      	add	r3, r7
   19ea6:	2b01      	cmp	r3, #1
   19ea8:	463d      	mov	r5, r7
   19eaa:	dc39      	bgt.n	19f20 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   19eac:	f7ff fe50 	bl	19b50 <find_cf_cfg>
	if (!cfg) {
   19eb0:	4604      	mov	r4, r0
   19eb2:	b998      	cbnz	r0, 19edc <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   19eb4:	f7ff fe4c 	bl	19b50 <find_cf_cfg>
	if (!cfg) {
   19eb8:	4604      	mov	r4, r0
   19eba:	b978      	cbnz	r0, 19edc <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   19ebc:	4b1b      	ldr	r3, [pc, #108]	; (19f2c <cf_write+0x9c>)
   19ebe:	9305      	str	r3, [sp, #20]
   19ec0:	481b      	ldr	r0, [pc, #108]	; (19f30 <cf_write+0xa0>)
   19ec2:	2302      	movs	r3, #2
   19ec4:	aa04      	add	r2, sp, #16
   19ec6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   19eca:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   19ece:	9304      	str	r3, [sp, #16]
   19ed0:	f00a ffb6 	bl	24e40 <z_log_msg_static_create.constprop.0>
}
   19ed4:	4628      	mov	r0, r5
   19ed6:	b006      	add	sp, #24
   19ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19edc:	b197      	cbz	r7, 19f04 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19ede:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   19ee0:	f898 2000 	ldrb.w	r2, [r8]
   19ee4:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19ee6:	fa21 f003 	lsr.w	r0, r1, r3
   19eea:	07c7      	lsls	r7, r0, #31
   19eec:	d503      	bpl.n	19ef6 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   19eee:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   19ef2:	07c0      	lsls	r0, r0, #31
   19ef4:	d517      	bpl.n	19f26 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19ef6:	3301      	adds	r3, #1
   19ef8:	2b03      	cmp	r3, #3
   19efa:	d1f4      	bne.n	19ee6 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19efc:	f002 0207 	and.w	r2, r2, #7
   19f00:	4311      	orrs	r1, r2
   19f02:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19f04:	1c60      	adds	r0, r4, #1
   19f06:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19f0a:	f00a ff96 	bl	24e3a <bt_addr_le_copy>
	cfg->id = conn->id;
   19f0e:	7a33      	ldrb	r3, [r6, #8]
   19f10:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   19f12:	4620      	mov	r0, r4
   19f14:	f00b f862 	bl	24fdc <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   19f18:	e7dc      	b.n	19ed4 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19f1a:	f06f 0506 	mvn.w	r5, #6
   19f1e:	e7d9      	b.n	19ed4 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19f20:	f06f 050c 	mvn.w	r5, #12
   19f24:	e7d6      	b.n	19ed4 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19f26:	f06f 0512 	mvn.w	r5, #18
   19f2a:	e7d3      	b.n	19ed4 <cf_write+0x44>
   19f2c:	000291b7 	.word	0x000291b7
   19f30:	00026294 	.word	0x00026294

00019f34 <sc_indicate_rsp>:
{
   19f34:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19f36:	4914      	ldr	r1, [pc, #80]	; (19f88 <sc_indicate_rsp+0x54>)
   19f38:	f3bf 8f5b 	dmb	ish
   19f3c:	4604      	mov	r4, r0
   19f3e:	e851 3f00 	ldrex	r3, [r1]
   19f42:	f023 0302 	bic.w	r3, r3, #2
   19f46:	e841 3200 	strex	r2, r3, [r1]
   19f4a:	2a00      	cmp	r2, #0
   19f4c:	d1f7      	bne.n	19f3e <sc_indicate_rsp+0xa>
   19f4e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19f52:	4608      	mov	r0, r1
   19f54:	f00a ff5c 	bl	24e10 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19f58:	07c2      	lsls	r2, r0, #31
   19f5a:	d505      	bpl.n	19f68 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   19f5c:	2200      	movs	r2, #0
   19f5e:	2300      	movs	r3, #0
   19f60:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   19f64:	f006 fb30 	bl	205c8 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   19f68:	4620      	mov	r0, r4
   19f6a:	f00a fea9 	bl	24cc0 <bt_att_fixed_chan_only>
   19f6e:	b150      	cbz	r0, 19f86 <sc_indicate_rsp+0x52>
		cfg = find_cf_cfg(conn);
   19f70:	4620      	mov	r0, r4
   19f72:	f7ff fded 	bl	19b50 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19f76:	b130      	cbz	r0, 19f86 <sc_indicate_rsp+0x52>
   19f78:	7a03      	ldrb	r3, [r0, #8]
   19f7a:	07db      	lsls	r3, r3, #31
   19f7c:	d503      	bpl.n	19f86 <sc_indicate_rsp+0x52>
}
   19f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   19f82:	f00b b82b 	b.w	24fdc <set_change_aware_no_store.constprop.0.isra.0>
}
   19f86:	bd10      	pop	{r4, pc}
   19f88:	20002020 	.word	0x20002020

00019f8c <bt_gatt_init>:
{
   19f8c:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19f8e:	4820      	ldr	r0, [pc, #128]	; (1a010 <bt_gatt_init+0x84>)
   19f90:	2101      	movs	r1, #1
   19f92:	f00a ff43 	bl	24e1c <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   19f96:	07c3      	lsls	r3, r0, #31
   19f98:	d439      	bmi.n	1a00e <bt_gatt_init+0x82>
   19f9a:	2102      	movs	r1, #2
   19f9c:	481c      	ldr	r0, [pc, #112]	; (1a010 <bt_gatt_init+0x84>)
   19f9e:	f00a ff3d 	bl	24e1c <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   19fa2:	4008      	ands	r0, r1
   19fa4:	d11f      	bne.n	19fe6 <bt_gatt_init+0x5a>
   19fa6:	491b      	ldr	r1, [pc, #108]	; (1a014 <bt_gatt_init+0x88>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19fa8:	4a1b      	ldr	r2, [pc, #108]	; (1a018 <bt_gatt_init+0x8c>)
   19faa:	880b      	ldrh	r3, [r1, #0]
   19fac:	4c1b      	ldr	r4, [pc, #108]	; (1a01c <bt_gatt_init+0x90>)
   19fae:	42a2      	cmp	r2, r4
   19fb0:	d916      	bls.n	19fe0 <bt_gatt_init+0x54>
   19fb2:	b100      	cbz	r0, 19fb6 <bt_gatt_init+0x2a>
   19fb4:	800b      	strh	r3, [r1, #0]
   19fb6:	491a      	ldr	r1, [pc, #104]	; (1a020 <bt_gatt_init+0x94>)
   19fb8:	4a1a      	ldr	r2, [pc, #104]	; (1a024 <bt_gatt_init+0x98>)
   19fba:	481b      	ldr	r0, [pc, #108]	; (1a028 <bt_gatt_init+0x9c>)
   19fbc:	f240 53c3 	movw	r3, #1475	; 0x5c3
   19fc0:	f009 fb1b 	bl	235fa <assert_print>
   19fc4:	4819      	ldr	r0, [pc, #100]	; (1a02c <bt_gatt_init+0xa0>)
   19fc6:	f009 fb18 	bl	235fa <assert_print>
   19fca:	4816      	ldr	r0, [pc, #88]	; (1a024 <bt_gatt_init+0x98>)
   19fcc:	f240 51c3 	movw	r1, #1475	; 0x5c3
   19fd0:	f009 fb0c 	bl	235ec <assert_post_action>
		last_static_handle += svc->attr_count;
   19fd4:	6850      	ldr	r0, [r2, #4]
   19fd6:	4403      	add	r3, r0
   19fd8:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19fda:	3208      	adds	r2, #8
   19fdc:	2001      	movs	r0, #1
   19fde:	e7e6      	b.n	19fae <bt_gatt_init+0x22>
   19fe0:	d3f8      	bcc.n	19fd4 <bt_gatt_init+0x48>
   19fe2:	b100      	cbz	r0, 19fe6 <bt_gatt_init+0x5a>
   19fe4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   19fe6:	4b12      	ldr	r3, [pc, #72]	; (1a030 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19fe8:	4912      	ldr	r1, [pc, #72]	; (1a034 <bt_gatt_init+0xa8>)
   19fea:	4813      	ldr	r0, [pc, #76]	; (1a038 <bt_gatt_init+0xac>)
   19fec:	2200      	movs	r2, #0
	list->tail = NULL;
   19fee:	e9c3 2200 	strd	r2, r2, [r3]
   19ff2:	f006 f9cd 	bl	20390 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19ff6:	4810      	ldr	r0, [pc, #64]	; (1a038 <bt_gatt_init+0xac>)
   19ff8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19ffc:	2300      	movs	r3, #0
   19ffe:	f7fa ff65 	bl	14ecc <bt_long_wq_schedule>
}
   1a002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1a006:	490d      	ldr	r1, [pc, #52]	; (1a03c <bt_gatt_init+0xb0>)
   1a008:	480d      	ldr	r0, [pc, #52]	; (1a040 <bt_gatt_init+0xb4>)
   1a00a:	f006 b9c1 	b.w	20390 <k_work_init_delayable>
}
   1a00e:	bd10      	pop	{r4, pc}
   1a010:	20002cd4 	.word	0x20002cd4
   1a014:	20002f46 	.word	0x20002f46
   1a018:	0002623c 	.word	0x0002623c
   1a01c:	00026254 	.word	0x00026254
   1a020:	0002921a 	.word	0x0002921a
   1a024:	000291e3 	.word	0x000291e3
   1a028:	00026f1a 	.word	0x00026f1a
   1a02c:	00027466 	.word	0x00027466
   1a030:	20002cd8 	.word	0x20002cd8
   1a034:	0001a2b5 	.word	0x0001a2b5
   1a038:	20001f78 	.word	0x20001f78
   1a03c:	0001a6d9 	.word	0x0001a6d9
   1a040:	20001ff0 	.word	0x20001ff0

0001a044 <bt_gatt_attr_get_handle>:
{
   1a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1a048:	4603      	mov	r3, r0
   1a04a:	b398      	cbz	r0, 1a0b4 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   1a04c:	8a00      	ldrh	r0, [r0, #16]
   1a04e:	bb88      	cbnz	r0, 1a0b4 <bt_gatt_attr_get_handle+0x70>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a050:	491a      	ldr	r1, [pc, #104]	; (1a0bc <bt_gatt_attr_get_handle+0x78>)
   1a052:	f8df e06c 	ldr.w	lr, [pc, #108]	; 1a0c0 <bt_gatt_attr_get_handle+0x7c>
	uint16_t handle = 1;
   1a056:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a058:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a05c:	4571      	cmp	r1, lr
   1a05e:	d928      	bls.n	1a0b2 <bt_gatt_attr_get_handle+0x6e>
   1a060:	4918      	ldr	r1, [pc, #96]	; (1a0c4 <bt_gatt_attr_get_handle+0x80>)
   1a062:	4a19      	ldr	r2, [pc, #100]	; (1a0c8 <bt_gatt_attr_get_handle+0x84>)
   1a064:	4819      	ldr	r0, [pc, #100]	; (1a0cc <bt_gatt_attr_get_handle+0x88>)
   1a066:	f240 7329 	movw	r3, #1833	; 0x729
   1a06a:	f009 fac6 	bl	235fa <assert_print>
   1a06e:	4818      	ldr	r0, [pc, #96]	; (1a0d0 <bt_gatt_attr_get_handle+0x8c>)
   1a070:	f009 fac3 	bl	235fa <assert_print>
   1a074:	4814      	ldr	r0, [pc, #80]	; (1a0c8 <bt_gatt_attr_get_handle+0x84>)
   1a076:	f240 7129 	movw	r1, #1833	; 0x729
   1a07a:	f009 fab7 	bl	235ec <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a07e:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1a082:	42bb      	cmp	r3, r7
   1a084:	d304      	bcc.n	1a090 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1a086:	fb0c 7206 	mla	r2, ip, r6, r7
   1a08a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1a08c:	4293      	cmp	r3, r2
   1a08e:	d90e      	bls.n	1a0ae <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   1a090:	4434      	add	r4, r6
   1a092:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a094:	3108      	adds	r1, #8
   1a096:	4614      	mov	r4, r2
   1a098:	e7e0      	b.n	1a05c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1a09a:	fb0c 7805 	mla	r8, ip, r5, r7
   1a09e:	4543      	cmp	r3, r8
   1a0a0:	d00a      	beq.n	1a0b8 <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1a0a2:	3501      	adds	r5, #1
   1a0a4:	1962      	adds	r2, r4, r5
   1a0a6:	42b5      	cmp	r5, r6
   1a0a8:	b292      	uxth	r2, r2
   1a0aa:	d1f6      	bne.n	1a09a <bt_gatt_attr_get_handle+0x56>
   1a0ac:	e7f2      	b.n	1a094 <bt_gatt_attr_get_handle+0x50>
   1a0ae:	2500      	movs	r5, #0
   1a0b0:	e7f8      	b.n	1a0a4 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a0b2:	d3e4      	bcc.n	1a07e <bt_gatt_attr_get_handle+0x3a>
}
   1a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a0b8:	4610      	mov	r0, r2
   1a0ba:	e7fb      	b.n	1a0b4 <bt_gatt_attr_get_handle+0x70>
   1a0bc:	0002623c 	.word	0x0002623c
   1a0c0:	00026254 	.word	0x00026254
   1a0c4:	00029213 	.word	0x00029213
   1a0c8:	000291e3 	.word	0x000291e3
   1a0cc:	00026f1a 	.word	0x00026f1a
   1a0d0:	00027466 	.word	0x00027466

0001a0d4 <bt_gatt_foreach_attr_type>:
{
   1a0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0d8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1a0dc:	9100      	str	r1, [sp, #0]
   1a0de:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1a0e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a0e4:	2d00      	cmp	r5, #0
   1a0e6:	bf08      	it	eq
   1a0e8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1a0ea:	4b2b      	ldr	r3, [pc, #172]	; (1a198 <bt_gatt_foreach_attr_type+0xc4>)
   1a0ec:	881b      	ldrh	r3, [r3, #0]
   1a0ee:	4283      	cmp	r3, r0
{
   1a0f0:	4607      	mov	r7, r0
   1a0f2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1a0f4:	d232      	bcs.n	1a15c <bt_gatt_foreach_attr_type+0x88>
}
   1a0f6:	b003      	add	sp, #12
   1a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a0fc:	5889      	ldr	r1, [r1, r2]
   1a0fe:	9301      	str	r3, [sp, #4]
   1a100:	4640      	mov	r0, r8
   1a102:	f009 febd 	bl	23e80 <bt_uuid_cmp>
   1a106:	9b01      	ldr	r3, [sp, #4]
   1a108:	b190      	cbz	r0, 1a130 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a10a:	3401      	adds	r4, #1
   1a10c:	f10a 0a01 	add.w	sl, sl, #1
   1a110:	b2a4      	uxth	r4, r4
   1a112:	6873      	ldr	r3, [r6, #4]
   1a114:	4553      	cmp	r3, sl
   1a116:	d92c      	bls.n	1a172 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1a118:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a11a:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   1a11c:	429c      	cmp	r4, r3
   1a11e:	d8ea      	bhi.n	1a0f6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1a120:	42bc      	cmp	r4, r7
   1a122:	d3f2      	bcc.n	1a10a <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a124:	fb0b f20a 	mul.w	r2, fp, sl
   1a128:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1a12a:	f1b8 0f00 	cmp.w	r8, #0
   1a12e:	d1e5      	bne.n	1a0fc <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1a130:	f1b9 0f00 	cmp.w	r9, #0
   1a134:	d10b      	bne.n	1a14e <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1a136:	3d01      	subs	r5, #1
   1a138:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1a13a:	4618      	mov	r0, r3
   1a13c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a140:	4621      	mov	r1, r4
   1a142:	4798      	blx	r3
	if (!*num_matches) {
   1a144:	2d00      	cmp	r5, #0
   1a146:	d0d6      	beq.n	1a0f6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a148:	2800      	cmp	r0, #0
   1a14a:	d1de      	bne.n	1a10a <bt_gatt_foreach_attr_type+0x36>
   1a14c:	e7d3      	b.n	1a0f6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1a14e:	68da      	ldr	r2, [r3, #12]
   1a150:	4591      	cmp	r9, r2
   1a152:	d1da      	bne.n	1a10a <bt_gatt_foreach_attr_type+0x36>
   1a154:	e7ef      	b.n	1a136 <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1a156:	f04f 0a00 	mov.w	sl, #0
   1a15a:	e7da      	b.n	1a112 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a15c:	4e0f      	ldr	r6, [pc, #60]	; (1a19c <bt_gatt_foreach_attr_type+0xc8>)
		uint16_t handle = 1;
   1a15e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1a160:	f04f 0b14 	mov.w	fp, #20
   1a164:	e006      	b.n	1a174 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a166:	d2c6      	bcs.n	1a0f6 <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1a168:	6873      	ldr	r3, [r6, #4]
   1a16a:	4423      	add	r3, r4
   1a16c:	42bb      	cmp	r3, r7
   1a16e:	d2f2      	bcs.n	1a156 <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1a170:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1a172:	3608      	adds	r6, #8
   1a174:	4b0a      	ldr	r3, [pc, #40]	; (1a1a0 <bt_gatt_foreach_attr_type+0xcc>)
   1a176:	429e      	cmp	r6, r3
   1a178:	d9f5      	bls.n	1a166 <bt_gatt_foreach_attr_type+0x92>
   1a17a:	490a      	ldr	r1, [pc, #40]	; (1a1a4 <bt_gatt_foreach_attr_type+0xd0>)
   1a17c:	4a0a      	ldr	r2, [pc, #40]	; (1a1a8 <bt_gatt_foreach_attr_type+0xd4>)
   1a17e:	480b      	ldr	r0, [pc, #44]	; (1a1ac <bt_gatt_foreach_attr_type+0xd8>)
   1a180:	f240 73ed 	movw	r3, #2029	; 0x7ed
   1a184:	f009 fa39 	bl	235fa <assert_print>
   1a188:	4809      	ldr	r0, [pc, #36]	; (1a1b0 <bt_gatt_foreach_attr_type+0xdc>)
   1a18a:	f009 fa36 	bl	235fa <assert_print>
   1a18e:	4806      	ldr	r0, [pc, #24]	; (1a1a8 <bt_gatt_foreach_attr_type+0xd4>)
   1a190:	f240 71ed 	movw	r1, #2029	; 0x7ed
   1a194:	f009 fa2a 	bl	235ec <assert_post_action>
   1a198:	20002f46 	.word	0x20002f46
   1a19c:	0002623c 	.word	0x0002623c
   1a1a0:	00026254 	.word	0x00026254
   1a1a4:	00029213 	.word	0x00029213
   1a1a8:	000291e3 	.word	0x000291e3
   1a1ac:	00026f1a 	.word	0x00026f1a
   1a1b0:	00027466 	.word	0x00027466

0001a1b4 <db_hash_gen>:
{
   1a1b4:	b510      	push	{r4, lr}
   1a1b6:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1a1b8:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a1ba:	aa22      	add	r2, sp, #136	; 0x88
   1a1bc:	4669      	mov	r1, sp
   1a1be:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1a1c0:	e9cd 4400 	strd	r4, r4, [sp]
   1a1c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1a1c8:	f009 fd1e 	bl	23c08 <tc_cmac_setup>
   1a1cc:	b958      	cbnz	r0, 1a1e6 <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1a1ce:	4b15      	ldr	r3, [pc, #84]	; (1a224 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1a1d0:	9309      	str	r3, [sp, #36]	; 0x24
   1a1d2:	4815      	ldr	r0, [pc, #84]	; (1a228 <db_hash_gen+0x74>)
   1a1d4:	2302      	movs	r3, #2
   1a1d6:	aa08      	add	r2, sp, #32
   1a1d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1dc:	9308      	str	r3, [sp, #32]
   1a1de:	f00a fe2f 	bl	24e40 <z_log_msg_static_create.constprop.0>
}
   1a1e2:	b04e      	add	sp, #312	; 0x138
   1a1e4:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1a1e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1a1ea:	2001      	movs	r0, #1
   1a1ec:	4a0f      	ldr	r2, [pc, #60]	; (1a22c <db_hash_gen+0x78>)
   1a1ee:	ab0a      	add	r3, sp, #40	; 0x28
   1a1f0:	f00a ff64 	bl	250bc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1a1f4:	480e      	ldr	r0, [pc, #56]	; (1a230 <db_hash_gen+0x7c>)
   1a1f6:	a90a      	add	r1, sp, #40	; 0x28
   1a1f8:	f009 fd9b 	bl	23d32 <tc_cmac_final>
   1a1fc:	b908      	cbnz	r0, 1a202 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1a1fe:	4b0d      	ldr	r3, [pc, #52]	; (1a234 <db_hash_gen+0x80>)
   1a200:	e7e6      	b.n	1a1d0 <db_hash_gen+0x1c>
   1a202:	4b0b      	ldr	r3, [pc, #44]	; (1a230 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1a204:	4621      	mov	r1, r4
   1a206:	f103 0210 	add.w	r2, r3, #16
   1a20a:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1a20c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1a20e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a212:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1a216:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1a218:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1a21a:	d1f6      	bne.n	1a20a <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a21c:	4806      	ldr	r0, [pc, #24]	; (1a238 <db_hash_gen+0x84>)
   1a21e:	f00a fdfd 	bl	24e1c <atomic_or>
   1a222:	e7de      	b.n	1a1e2 <db_hash_gen+0x2e>
   1a224:	00029242 	.word	0x00029242
   1a228:	00026294 	.word	0x00026294
   1a22c:	00024d5b 	.word	0x00024d5b
   1a230:	20001f68 	.word	0x20001f68
   1a234:	0002925b 	.word	0x0002925b
   1a238:	20002020 	.word	0x20002020

0001a23c <db_hash_read>:
{
   1a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a23e:	491a      	ldr	r1, [pc, #104]	; (1a2a8 <db_hash_read+0x6c>)
{
   1a240:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1a244:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a246:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1a24a:	4615      	mov	r5, r2
   1a24c:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1a24e:	f006 fa1b 	bl	20688 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a252:	4816      	ldr	r0, [pc, #88]	; (1a2ac <db_hash_read+0x70>)
   1a254:	f00a fddc 	bl	24e10 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1a258:	0701      	lsls	r1, r0, #28
   1a25a:	d401      	bmi.n	1a260 <db_hash_read+0x24>
		db_hash_gen();
   1a25c:	f7ff ffaa 	bl	1a1b4 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1a260:	4620      	mov	r0, r4
   1a262:	f7ff fc75 	bl	19b50 <find_cf_cfg>
	if (cfg &&
   1a266:	b168      	cbz	r0, 1a284 <db_hash_read+0x48>
   1a268:	7a03      	ldrb	r3, [r0, #8]
   1a26a:	07da      	lsls	r2, r3, #31
   1a26c:	d50a      	bpl.n	1a284 <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1a26e:	f100 040c 	add.w	r4, r0, #12
   1a272:	4620      	mov	r0, r4
   1a274:	f00a fdcc 	bl	24e10 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1a278:	07c3      	lsls	r3, r0, #31
   1a27a:	d403      	bmi.n	1a284 <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a27c:	2102      	movs	r1, #2
   1a27e:	4620      	mov	r0, r4
   1a280:	f00a fdcc 	bl	24e1c <atomic_or>
	if (offset > value_len) {
   1a284:	2e10      	cmp	r6, #16
   1a286:	d80c      	bhi.n	1a2a2 <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
   1a288:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1a28c:	4908      	ldr	r1, [pc, #32]	; (1a2b0 <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
   1a28e:	42bc      	cmp	r4, r7
   1a290:	bfa8      	it	ge
   1a292:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a294:	4622      	mov	r2, r4
   1a296:	4431      	add	r1, r6
   1a298:	4628      	mov	r0, r5
   1a29a:	f009 fdbb 	bl	23e14 <memcpy>
}
   1a29e:	4620      	mov	r0, r4
   1a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a2a2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1a2a6:	e7fa      	b.n	1a29e <db_hash_read+0x62>
   1a2a8:	20001fa8 	.word	0x20001fa8
   1a2ac:	20002020 	.word	0x20002020
   1a2b0:	20001f68 	.word	0x20001f68

0001a2b4 <db_hash_process>:
{
   1a2b4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a2b6:	4805      	ldr	r0, [pc, #20]	; (1a2cc <db_hash_process+0x18>)
   1a2b8:	f00a fdaa 	bl	24e10 <atomic_get>
	if (new_hash) {
   1a2bc:	0703      	lsls	r3, r0, #28
   1a2be:	d403      	bmi.n	1a2c8 <db_hash_process+0x14>
}
   1a2c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   1a2c4:	f7ff bf76 	b.w	1a1b4 <db_hash_gen>
}
   1a2c8:	bd08      	pop	{r3, pc}
   1a2ca:	bf00      	nop
   1a2cc:	20002020 	.word	0x20002020

0001a2d0 <bt_gatt_attr_next>:
{
   1a2d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1a2d6:	f7ff feb5 	bl	1a044 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1a2da:	1c41      	adds	r1, r0, #1
   1a2dc:	b289      	uxth	r1, r1
   1a2de:	4608      	mov	r0, r1
   1a2e0:	4a03      	ldr	r2, [pc, #12]	; (1a2f0 <bt_gatt_attr_next+0x20>)
   1a2e2:	ab01      	add	r3, sp, #4
   1a2e4:	f00a feea 	bl	250bc <bt_gatt_foreach_attr>
}
   1a2e8:	9801      	ldr	r0, [sp, #4]
   1a2ea:	b003      	add	sp, #12
   1a2ec:	f85d fb04 	ldr.w	pc, [sp], #4
   1a2f0:	00024d0b 	.word	0x00024d0b

0001a2f4 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1a2f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a2f8:	460c      	mov	r4, r1
   1a2fa:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1a2fc:	4605      	mov	r5, r0
   1a2fe:	b970      	cbnz	r0, 1a31e <bt_gatt_is_subscribed+0x2a>
   1a300:	4960      	ldr	r1, [pc, #384]	; (1a484 <bt_gatt_is_subscribed+0x190>)
   1a302:	4a61      	ldr	r2, [pc, #388]	; (1a488 <bt_gatt_is_subscribed+0x194>)
   1a304:	4861      	ldr	r0, [pc, #388]	; (1a48c <bt_gatt_is_subscribed+0x198>)
   1a306:	f640 532e 	movw	r3, #3374	; 0xd2e
   1a30a:	f009 f976 	bl	235fa <assert_print>
   1a30e:	4860      	ldr	r0, [pc, #384]	; (1a490 <bt_gatt_is_subscribed+0x19c>)
   1a310:	f009 f973 	bl	235fa <assert_print>
   1a314:	f640 512e 	movw	r1, #3374	; 0xd2e
	__ASSERT(attr, "invalid parameter\n");
   1a318:	485b      	ldr	r0, [pc, #364]	; (1a488 <bt_gatt_is_subscribed+0x194>)
   1a31a:	f009 f967 	bl	235ec <assert_post_action>
   1a31e:	b961      	cbnz	r1, 1a33a <bt_gatt_is_subscribed+0x46>
   1a320:	495c      	ldr	r1, [pc, #368]	; (1a494 <bt_gatt_is_subscribed+0x1a0>)
   1a322:	4a59      	ldr	r2, [pc, #356]	; (1a488 <bt_gatt_is_subscribed+0x194>)
   1a324:	4859      	ldr	r0, [pc, #356]	; (1a48c <bt_gatt_is_subscribed+0x198>)
   1a326:	f640 532f 	movw	r3, #3375	; 0xd2f
   1a32a:	f009 f966 	bl	235fa <assert_print>
   1a32e:	4858      	ldr	r0, [pc, #352]	; (1a490 <bt_gatt_is_subscribed+0x19c>)
   1a330:	f009 f963 	bl	235fa <assert_print>
   1a334:	f640 512f 	movw	r1, #3375	; 0xd2f
   1a338:	e7ee      	b.n	1a318 <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1a33a:	7a83      	ldrb	r3, [r0, #10]
   1a33c:	2b07      	cmp	r3, #7
   1a33e:	d110      	bne.n	1a362 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1a340:	2300      	movs	r3, #0
   1a342:	f88d 300c 	strb.w	r3, [sp, #12]
   1a346:	6820      	ldr	r0, [r4, #0]
   1a348:	f642 0303 	movw	r3, #10243	; 0x2803
   1a34c:	a903      	add	r1, sp, #12
   1a34e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a352:	f009 fd95 	bl	23e80 <bt_uuid_cmp>
   1a356:	b9d0      	cbnz	r0, 1a38e <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   1a358:	68e3      	ldr	r3, [r4, #12]
   1a35a:	799b      	ldrb	r3, [r3, #6]
   1a35c:	f013 0f30 	tst.w	r3, #48	; 0x30
   1a360:	d103      	bne.n	1a36a <bt_gatt_is_subscribed+0x76>
		return false;
   1a362:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   1a364:	b004      	add	sp, #16
   1a366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1a36a:	4620      	mov	r0, r4
   1a36c:	f7ff ffb0 	bl	1a2d0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1a370:	4604      	mov	r4, r0
   1a372:	b960      	cbnz	r0, 1a38e <bt_gatt_is_subscribed+0x9a>
   1a374:	4947      	ldr	r1, [pc, #284]	; (1a494 <bt_gatt_is_subscribed+0x1a0>)
   1a376:	4a44      	ldr	r2, [pc, #272]	; (1a488 <bt_gatt_is_subscribed+0x194>)
   1a378:	4844      	ldr	r0, [pc, #272]	; (1a48c <bt_gatt_is_subscribed+0x198>)
   1a37a:	f44f 6354 	mov.w	r3, #3392	; 0xd40
   1a37e:	f009 f93c 	bl	235fa <assert_print>
   1a382:	4845      	ldr	r0, [pc, #276]	; (1a498 <bt_gatt_is_subscribed+0x1a4>)
   1a384:	f009 f939 	bl	235fa <assert_print>
   1a388:	f44f 6154 	mov.w	r1, #3392	; 0xd40
   1a38c:	e7c4      	b.n	1a318 <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1a38e:	2300      	movs	r3, #0
   1a390:	6820      	ldr	r0, [r4, #0]
   1a392:	f88d 300c 	strb.w	r3, [sp, #12]
   1a396:	a903      	add	r1, sp, #12
   1a398:	f642 1302 	movw	r3, #10498	; 0x2902
   1a39c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a3a0:	f009 fd6e 	bl	23e80 <bt_uuid_cmp>
   1a3a4:	b188      	cbz	r0, 1a3ca <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1a3a6:	4620      	mov	r0, r4
   1a3a8:	f7ff ff92 	bl	1a2d0 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1a3ac:	4604      	mov	r4, r0
   1a3ae:	b960      	cbnz	r0, 1a3ca <bt_gatt_is_subscribed+0xd6>
   1a3b0:	4938      	ldr	r1, [pc, #224]	; (1a494 <bt_gatt_is_subscribed+0x1a0>)
   1a3b2:	4a35      	ldr	r2, [pc, #212]	; (1a488 <bt_gatt_is_subscribed+0x194>)
   1a3b4:	4835      	ldr	r0, [pc, #212]	; (1a48c <bt_gatt_is_subscribed+0x198>)
   1a3b6:	f640 5346 	movw	r3, #3398	; 0xd46
   1a3ba:	f009 f91e 	bl	235fa <assert_print>
   1a3be:	4836      	ldr	r0, [pc, #216]	; (1a498 <bt_gatt_is_subscribed+0x1a4>)
   1a3c0:	f009 f91b 	bl	235fa <assert_print>
   1a3c4:	f640 5146 	movw	r1, #3398	; 0xd46
   1a3c8:	e7a6      	b.n	1a318 <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a3ca:	2700      	movs	r7, #0
   1a3cc:	f642 1802 	movw	r8, #10498	; 0x2902
   1a3d0:	6820      	ldr	r0, [r4, #0]
   1a3d2:	f88d 7000 	strb.w	r7, [sp]
   1a3d6:	4669      	mov	r1, sp
   1a3d8:	f8ad 8002 	strh.w	r8, [sp, #2]
   1a3dc:	f009 fd50 	bl	23e80 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a3e0:	bb20      	cbnz	r0, 1a42c <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1a3e2:	2300      	movs	r3, #0
   1a3e4:	6820      	ldr	r0, [r4, #0]
   1a3e6:	f88d 300c 	strb.w	r3, [sp, #12]
   1a3ea:	a903      	add	r1, sp, #12
   1a3ec:	f642 1302 	movw	r3, #10498	; 0x2902
   1a3f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a3f4:	f009 fd44 	bl	23e80 <bt_uuid_cmp>
   1a3f8:	2800      	cmp	r0, #0
   1a3fa:	d1b2      	bne.n	1a362 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   1a3fc:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1a3fe:	4622      	mov	r2, r4
   1a400:	4628      	mov	r0, r5
   1a402:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a406:	f009 ffcd 	bl	243a4 <bt_conn_is_peer_addr_le>
   1a40a:	b110      	cbz	r0, 1a412 <bt_gatt_is_subscribed+0x11e>
   1a40c:	8923      	ldrh	r3, [r4, #8]
   1a40e:	421e      	tst	r6, r3
   1a410:	d10a      	bne.n	1a428 <bt_gatt_is_subscribed+0x134>
   1a412:	7aa1      	ldrb	r1, [r4, #10]
   1a414:	f104 020b 	add.w	r2, r4, #11
   1a418:	4628      	mov	r0, r5
   1a41a:	f009 ffc3 	bl	243a4 <bt_conn_is_peer_addr_le>
   1a41e:	2800      	cmp	r0, #0
   1a420:	d09f      	beq.n	1a362 <bt_gatt_is_subscribed+0x6e>
   1a422:	8a63      	ldrh	r3, [r4, #18]
   1a424:	421e      	tst	r6, r3
   1a426:	d09c      	beq.n	1a362 <bt_gatt_is_subscribed+0x6e>
			return true;
   1a428:	2001      	movs	r0, #1
   1a42a:	e79b      	b.n	1a364 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a42c:	6820      	ldr	r0, [r4, #0]
   1a42e:	f88d 7004 	strb.w	r7, [sp, #4]
   1a432:	f642 0303 	movw	r3, #10243	; 0x2803
   1a436:	a901      	add	r1, sp, #4
   1a438:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a43c:	f009 fd20 	bl	23e80 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1a440:	2800      	cmp	r0, #0
   1a442:	d0ce      	beq.n	1a3e2 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a444:	6820      	ldr	r0, [r4, #0]
   1a446:	f88d 7008 	strb.w	r7, [sp, #8]
   1a44a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a44e:	a902      	add	r1, sp, #8
   1a450:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a454:	f009 fd14 	bl	23e80 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1a458:	2800      	cmp	r0, #0
   1a45a:	d0c2      	beq.n	1a3e2 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a45c:	6820      	ldr	r0, [r4, #0]
   1a45e:	f88d 700c 	strb.w	r7, [sp, #12]
   1a462:	f642 0301 	movw	r3, #10241	; 0x2801
   1a466:	a903      	add	r1, sp, #12
   1a468:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a46c:	f009 fd08 	bl	23e80 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a470:	2800      	cmp	r0, #0
   1a472:	d0b6      	beq.n	1a3e2 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   1a474:	4620      	mov	r0, r4
   1a476:	f7ff ff2b 	bl	1a2d0 <bt_gatt_attr_next>
		if (!attr) {
   1a47a:	4604      	mov	r4, r0
   1a47c:	2800      	cmp	r0, #0
   1a47e:	d1a7      	bne.n	1a3d0 <bt_gatt_is_subscribed+0xdc>
   1a480:	e76f      	b.n	1a362 <bt_gatt_is_subscribed+0x6e>
   1a482:	bf00      	nop
   1a484:	00028d5a 	.word	0x00028d5a
   1a488:	000291e3 	.word	0x000291e3
   1a48c:	00026f1a 	.word	0x00026f1a
   1a490:	00029274 	.word	0x00029274
   1a494:	00029289 	.word	0x00029289
   1a498:	0002928e 	.word	0x0002928e

0001a49c <gatt_indicate>:
{
   1a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a4a0:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a4a2:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1a4a4:	8a4f      	ldrh	r7, [r1, #18]
   1a4a6:	f017 0714 	ands.w	r7, r7, #20
{
   1a4aa:	b086      	sub	sp, #24
   1a4ac:	4680      	mov	r8, r0
   1a4ae:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1a4b0:	d00f      	beq.n	1a4d2 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1a4b2:	4b33      	ldr	r3, [pc, #204]	; (1a580 <gatt_indicate+0xe4>)
   1a4b4:	9305      	str	r3, [sp, #20]
   1a4b6:	4833      	ldr	r0, [pc, #204]	; (1a584 <gatt_indicate+0xe8>)
   1a4b8:	2302      	movs	r3, #2
   1a4ba:	aa04      	add	r2, sp, #16
   1a4bc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1a4c0:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1a4c4:	9304      	str	r3, [sp, #16]
   1a4c6:	f00a fcbb 	bl	24e40 <z_log_msg_static_create.constprop.0>
}
   1a4ca:	4628      	mov	r0, r5
   1a4cc:	b006      	add	sp, #24
   1a4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1a4d2:	2202      	movs	r2, #2
   1a4d4:	f7ff ff0e 	bl	1a2f4 <bt_gatt_is_subscribed>
   1a4d8:	b960      	cbnz	r0, 1a4f4 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1a4da:	4b2b      	ldr	r3, [pc, #172]	; (1a588 <gatt_indicate+0xec>)
   1a4dc:	9305      	str	r3, [sp, #20]
   1a4de:	4829      	ldr	r0, [pc, #164]	; (1a584 <gatt_indicate+0xe8>)
   1a4e0:	2302      	movs	r3, #2
   1a4e2:	aa04      	add	r2, sp, #16
   1a4e4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a4e8:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1a4ea:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1a4ee:	f00a fca7 	bl	24e40 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a4f2:	e7ea      	b.n	1a4ca <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a4f4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1a4f8:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1a4fa:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1a4fc:	f7ff f994 	bl	19828 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1a500:	3602      	adds	r6, #2
	if (!req) {
   1a502:	4604      	mov	r4, r0
   1a504:	b1b0      	cbz	r0, 1a534 <gatt_indicate+0x98>
	req->func = func;
   1a506:	4b21      	ldr	r3, [pc, #132]	; (1a58c <gatt_indicate+0xf0>)
   1a508:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1a50a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1a50c:	4632      	mov	r2, r6
   1a50e:	211d      	movs	r1, #29
   1a510:	4640      	mov	r0, r8
   1a512:	f7fe feb5 	bl	19280 <bt_att_create_pdu>
	if (!buf) {
   1a516:	4606      	mov	r6, r0
   1a518:	b978      	cbnz	r0, 1a53a <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   1a51a:	4b1d      	ldr	r3, [pc, #116]	; (1a590 <gatt_indicate+0xf4>)
   1a51c:	4819      	ldr	r0, [pc, #100]	; (1a584 <gatt_indicate+0xe8>)
   1a51e:	9305      	str	r3, [sp, #20]
   1a520:	aa04      	add	r2, sp, #16
   1a522:	2302      	movs	r3, #2
   1a524:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a528:	9304      	str	r3, [sp, #16]
   1a52a:	f00a fc89 	bl	24e40 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1a52e:	4620      	mov	r0, r4
   1a530:	f7ff f99c 	bl	1986c <bt_att_req_free>
		return -ENOMEM;
   1a534:	f06f 050b 	mvn.w	r5, #11
   1a538:	e7c7      	b.n	1a4ca <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1a53a:	2301      	movs	r3, #1
   1a53c:	463a      	mov	r2, r7
   1a53e:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   1a540:	f106 0a0c 	add.w	sl, r6, #12
   1a544:	f00a fbda 	bl	24cfc <bt_att_set_tx_meta_data>
   1a548:	2102      	movs	r1, #2
   1a54a:	4650      	mov	r0, sl
   1a54c:	f000 fe5e 	bl	1b20c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1a550:	4607      	mov	r7, r0
   1a552:	4650      	mov	r0, sl
   1a554:	f827 9b02 	strh.w	r9, [r7], #2
   1a558:	8aa9      	ldrh	r1, [r5, #20]
   1a55a:	f000 fe57 	bl	1b20c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1a55e:	8aaa      	ldrh	r2, [r5, #20]
   1a560:	6929      	ldr	r1, [r5, #16]
   1a562:	4638      	mov	r0, r7
   1a564:	f009 fc56 	bl	23e14 <memcpy>
	req->buf = buf;
   1a568:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1a56a:	4621      	mov	r1, r4
   1a56c:	4640      	mov	r0, r8
   1a56e:	f7ff fab9 	bl	19ae4 <bt_att_req_send>
	if (err) {
   1a572:	4605      	mov	r5, r0
   1a574:	2800      	cmp	r0, #0
   1a576:	d0a8      	beq.n	1a4ca <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1a578:	4620      	mov	r0, r4
   1a57a:	f7ff f977 	bl	1986c <bt_att_req_free>
   1a57e:	e7a4      	b.n	1a4ca <gatt_indicate+0x2e>
   1a580:	000292a4 	.word	0x000292a4
   1a584:	00026294 	.word	0x00026294
   1a588:	000292ba 	.word	0x000292ba
   1a58c:	00024d2d 	.word	0x00024d2d
   1a590:	000292e5 	.word	0x000292e5

0001a594 <bt_gatt_indicate>:
{
   1a594:	b530      	push	{r4, r5, lr}
   1a596:	4605      	mov	r5, r0
   1a598:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1a59a:	460c      	mov	r4, r1
   1a59c:	b971      	cbnz	r1, 1a5bc <bt_gatt_indicate+0x28>
   1a59e:	4946      	ldr	r1, [pc, #280]	; (1a6b8 <bt_gatt_indicate+0x124>)
   1a5a0:	4a46      	ldr	r2, [pc, #280]	; (1a6bc <bt_gatt_indicate+0x128>)
   1a5a2:	4847      	ldr	r0, [pc, #284]	; (1a6c0 <bt_gatt_indicate+0x12c>)
   1a5a4:	f640 33da 	movw	r3, #3034	; 0xbda
   1a5a8:	f009 f827 	bl	235fa <assert_print>
   1a5ac:	4845      	ldr	r0, [pc, #276]	; (1a6c4 <bt_gatt_indicate+0x130>)
   1a5ae:	f009 f824 	bl	235fa <assert_print>
   1a5b2:	f640 31da 	movw	r1, #3034	; 0xbda
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1a5b6:	4841      	ldr	r0, [pc, #260]	; (1a6bc <bt_gatt_indicate+0x128>)
   1a5b8:	f009 f818 	bl	235ec <assert_post_action>
   1a5bc:	684b      	ldr	r3, [r1, #4]
   1a5be:	b973      	cbnz	r3, 1a5de <bt_gatt_indicate+0x4a>
   1a5c0:	680b      	ldr	r3, [r1, #0]
   1a5c2:	b963      	cbnz	r3, 1a5de <bt_gatt_indicate+0x4a>
   1a5c4:	4940      	ldr	r1, [pc, #256]	; (1a6c8 <bt_gatt_indicate+0x134>)
   1a5c6:	4a3d      	ldr	r2, [pc, #244]	; (1a6bc <bt_gatt_indicate+0x128>)
   1a5c8:	483d      	ldr	r0, [pc, #244]	; (1a6c0 <bt_gatt_indicate+0x12c>)
   1a5ca:	f640 33db 	movw	r3, #3035	; 0xbdb
   1a5ce:	f009 f814 	bl	235fa <assert_print>
   1a5d2:	483c      	ldr	r0, [pc, #240]	; (1a6c4 <bt_gatt_indicate+0x130>)
   1a5d4:	f009 f811 	bl	235fa <assert_print>
   1a5d8:	f640 31db 	movw	r1, #3035	; 0xbdb
   1a5dc:	e7eb      	b.n	1a5b6 <bt_gatt_indicate+0x22>
   1a5de:	483b      	ldr	r0, [pc, #236]	; (1a6cc <bt_gatt_indicate+0x138>)
   1a5e0:	f00a fc16 	bl	24e10 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a5e4:	0742      	lsls	r2, r0, #29
   1a5e6:	d561      	bpl.n	1a6ac <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1a5e8:	b115      	cbz	r5, 1a5f0 <bt_gatt_indicate+0x5c>
   1a5ea:	7aab      	ldrb	r3, [r5, #10]
   1a5ec:	2b07      	cmp	r3, #7
   1a5ee:	d160      	bne.n	1a6b2 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1a5f0:	6860      	ldr	r0, [r4, #4]
   1a5f2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a5f4:	f7ff fd26 	bl	1a044 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1a5f8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1a5fa:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1a5fe:	b33a      	cbz	r2, 1a650 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a600:	a905      	add	r1, sp, #20
   1a602:	9102      	str	r1, [sp, #8]
   1a604:	4932      	ldr	r1, [pc, #200]	; (1a6d0 <bt_gatt_indicate+0x13c>)
   1a606:	9101      	str	r1, [sp, #4]
   1a608:	2101      	movs	r1, #1
	found->attr = NULL;
   1a60a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a60c:	9100      	str	r1, [sp, #0]
   1a60e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1a612:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1a614:	f7ff fd5e 	bl	1a0d4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1a618:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1a61a:	b91b      	cbnz	r3, 1a624 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1a61c:	f06f 0001 	mvn.w	r0, #1
}
   1a620:	b00b      	add	sp, #44	; 0x2c
   1a622:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1a624:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1a626:	9b05      	ldr	r3, [sp, #20]
   1a628:	6818      	ldr	r0, [r3, #0]
   1a62a:	2300      	movs	r3, #0
   1a62c:	f88d 3010 	strb.w	r3, [sp, #16]
   1a630:	a904      	add	r1, sp, #16
   1a632:	f642 0303 	movw	r3, #10243	; 0x2803
   1a636:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a63a:	f009 fc21 	bl	23e80 <bt_uuid_cmp>
   1a63e:	b970      	cbnz	r0, 1a65e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1a640:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1a642:	68c3      	ldr	r3, [r0, #12]
   1a644:	799b      	ldrb	r3, [r3, #6]
   1a646:	069b      	lsls	r3, r3, #26
   1a648:	d405      	bmi.n	1a656 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1a64a:	f06f 0015 	mvn.w	r0, #21
   1a64e:	e7e7      	b.n	1a620 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   1a650:	2800      	cmp	r0, #0
   1a652:	d1e8      	bne.n	1a626 <bt_gatt_indicate+0x92>
   1a654:	e7e2      	b.n	1a61c <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1a656:	f00a fce3 	bl	25020 <bt_gatt_attr_value_handle>
   1a65a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1a65e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1a662:	b13d      	cbz	r5, 1a674 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1a664:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1a666:	4601      	mov	r1, r0
		params->_ref = 1;
   1a668:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1a66a:	4622      	mov	r2, r4
   1a66c:	4628      	mov	r0, r5
   1a66e:	f7ff ff15 	bl	1a49c <gatt_indicate>
   1a672:	e7d5      	b.n	1a620 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1a674:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1a678:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1a67a:	2302      	movs	r3, #2
   1a67c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a680:	f642 1302 	movw	r3, #10498	; 0x2902
   1a684:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a688:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1a68a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a68c:	9302      	str	r3, [sp, #8]
   1a68e:	4b11      	ldr	r3, [pc, #68]	; (1a6d4 <bt_gatt_indicate+0x140>)
   1a690:	9301      	str	r3, [sp, #4]
   1a692:	2301      	movs	r3, #1
   1a694:	9300      	str	r3, [sp, #0]
   1a696:	aa04      	add	r2, sp, #16
   1a698:	462b      	mov	r3, r5
   1a69a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1a69e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1a6a0:	f88d 5010 	strb.w	r5, [sp, #16]
   1a6a4:	f7ff fd16 	bl	1a0d4 <bt_gatt_foreach_attr_type>
	return data.err;
   1a6a8:	9807      	ldr	r0, [sp, #28]
   1a6aa:	e7b9      	b.n	1a620 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1a6ac:	f06f 000a 	mvn.w	r0, #10
   1a6b0:	e7b6      	b.n	1a620 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1a6b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a6b6:	e7b3      	b.n	1a620 <bt_gatt_indicate+0x8c>
   1a6b8:	0002930c 	.word	0x0002930c
   1a6bc:	000291e3 	.word	0x000291e3
   1a6c0:	00026f1a 	.word	0x00026f1a
   1a6c4:	00029313 	.word	0x00029313
   1a6c8:	00029329 	.word	0x00029329
   1a6cc:	2000045c 	.word	0x2000045c
   1a6d0:	00024d53 	.word	0x00024d53
   1a6d4:	0001a94d 	.word	0x0001a94d

0001a6d8 <sc_process>:
{
   1a6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a6da:	f100 0430 	add.w	r4, r0, #48	; 0x30
{
   1a6de:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1a6e0:	f1a0 0120 	sub.w	r1, r0, #32
   1a6e4:	4620      	mov	r0, r4
   1a6e6:	f00a fb93 	bl	24e10 <atomic_get>
   1a6ea:	f3c0 0240 	ubfx	r2, r0, #1, #1
   1a6ee:	0780      	lsls	r0, r0, #30
   1a6f0:	d50e      	bpl.n	1a710 <sc_process+0x38>
   1a6f2:	491c      	ldr	r1, [pc, #112]	; (1a764 <sc_process+0x8c>)
   1a6f4:	4a1c      	ldr	r2, [pc, #112]	; (1a768 <sc_process+0x90>)
   1a6f6:	481d      	ldr	r0, [pc, #116]	; (1a76c <sc_process+0x94>)
   1a6f8:	f240 532c 	movw	r3, #1324	; 0x52c
   1a6fc:	f008 ff7d 	bl	235fa <assert_print>
   1a700:	481b      	ldr	r0, [pc, #108]	; (1a770 <sc_process+0x98>)
   1a702:	f008 ff7a 	bl	235fa <assert_print>
   1a706:	4818      	ldr	r0, [pc, #96]	; (1a768 <sc_process+0x90>)
   1a708:	f240 512c 	movw	r1, #1324	; 0x52c
   1a70c:	f008 ff6e 	bl	235ec <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1a710:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1a714:	9001      	str	r0, [sp, #4]
   1a716:	f3bf 8f5b 	dmb	ish
   1a71a:	e854 0f00 	ldrex	r0, [r4]
   1a71e:	f020 0001 	bic.w	r0, r0, #1
   1a722:	e844 0500 	strex	r5, r0, [r4]
   1a726:	2d00      	cmp	r5, #0
   1a728:	d1f7      	bne.n	1a71a <sc_process+0x42>
   1a72a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1a72e:	4811      	ldr	r0, [pc, #68]	; (1a774 <sc_process+0x9c>)
   1a730:	f843 0c1c 	str.w	r0, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1a734:	4810      	ldr	r0, [pc, #64]	; (1a778 <sc_process+0xa0>)
   1a736:	f843 0c18 	str.w	r0, [r3, #-24]
	sc->params.data = &sc_range[0];
   1a73a:	a801      	add	r0, sp, #4
   1a73c:	f843 0c10 	str.w	r0, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1a740:	2004      	movs	r0, #4
   1a742:	f823 0c0c 	strh.w	r0, [r3, #-12]
	sc->start = 0U;
   1a746:	f823 2c08 	strh.w	r2, [r3, #-8]
	sc->end = 0U;
   1a74a:	f823 2c06 	strh.w	r2, [r3, #-6]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1a74e:	4610      	mov	r0, r2
   1a750:	f7ff ff20 	bl	1a594 <bt_gatt_indicate>
   1a754:	b918      	cbnz	r0, 1a75e <sc_process+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a756:	2102      	movs	r1, #2
   1a758:	4620      	mov	r0, r4
   1a75a:	f00a fb5f 	bl	24e1c <atomic_or>
}
   1a75e:	b003      	add	sp, #12
   1a760:	bd30      	pop	{r4, r5, pc}
   1a762:	bf00      	nop
   1a764:	00029346 	.word	0x00029346
   1a768:	000291e3 	.word	0x000291e3
   1a76c:	00026f1a 	.word	0x00026f1a
   1a770:	00029377 	.word	0x00029377
   1a774:	00026784 	.word	0x00026784
   1a778:	00019f35 	.word	0x00019f35

0001a77c <update_ccc>:
{
   1a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a780:	b088      	sub	sp, #32
	struct bt_conn *conn = data->conn;
   1a782:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a784:	4b35      	ldr	r3, [pc, #212]	; (1a85c <update_ccc+0xe0>)
   1a786:	6882      	ldr	r2, [r0, #8]
   1a788:	429a      	cmp	r2, r3
{
   1a78a:	af00      	add	r7, sp, #0
   1a78c:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a78e:	d160      	bne.n	1a852 <update_ccc+0xd6>
	ccc = attr->user_data;
   1a790:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a792:	f106 0a01 	add.w	sl, r6, #1
   1a796:	f106 0815 	add.w	r8, r6, #21
		if (!cfg->value ||
   1a79a:	f8ba 3007 	ldrh.w	r3, [sl, #7]
   1a79e:	b1e3      	cbz	r3, 1a7da <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a7a0:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
   1a7a4:	4652      	mov	r2, sl
   1a7a6:	4628      	mov	r0, r5
   1a7a8:	f009 fdfc 	bl	243a4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1a7ac:	b1a8      	cbz	r0, 1a7da <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1a7ae:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a7b2:	4621      	mov	r1, r4
   1a7b4:	4628      	mov	r0, r5
   1a7b6:	f00a fc8c 	bl	250d2 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1a7ba:	2803      	cmp	r0, #3
   1a7bc:	d112      	bne.n	1a7e4 <update_ccc+0x68>
				LOG_WRN("CCC %p not writable", attr);
   1a7be:	46e9      	mov	r9, sp
   1a7c0:	b088      	sub	sp, #32
   1a7c2:	466a      	mov	r2, sp
   1a7c4:	4b26      	ldr	r3, [pc, #152]	; (1a860 <update_ccc+0xe4>)
   1a7c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a7ca:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a7ce:	f842 0f10 	str.w	r0, [r2, #16]!
   1a7d2:	4824      	ldr	r0, [pc, #144]	; (1a864 <update_ccc+0xe8>)
   1a7d4:	f00a fb34 	bl	24e40 <z_log_msg_static_create.constprop.0>
   1a7d8:	46cd      	mov	sp, r9
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a7da:	f10a 0a0a 	add.w	sl, sl, #10
   1a7de:	45c2      	cmp	sl, r8
   1a7e0:	d1db      	bne.n	1a79a <update_ccc+0x1e>
   1a7e2:	e036      	b.n	1a852 <update_ccc+0xd6>
		gatt_ccc_changed(attr, ccc);
   1a7e4:	4631      	mov	r1, r6
   1a7e6:	4620      	mov	r0, r4
   1a7e8:	f00a fa92 	bl	24d10 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1a7ec:	4b1e      	ldr	r3, [pc, #120]	; (1a868 <update_ccc+0xec>)
   1a7ee:	429e      	cmp	r6, r3
   1a7f0:	d12f      	bne.n	1a852 <update_ccc+0xd6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1a7f2:	7a28      	ldrb	r0, [r5, #8]
   1a7f4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1a7f8:	f7ff f9d8 	bl	19bac <find_sc_cfg>
	if (!cfg) {
   1a7fc:	b348      	cbz	r0, 1a852 <update_ccc+0xd6>
	if (!(cfg->data.start || cfg->data.end)) {
   1a7fe:	8902      	ldrh	r2, [r0, #8]
   1a800:	8943      	ldrh	r3, [r0, #10]
   1a802:	ea52 0103 	orrs.w	r1, r2, r3
   1a806:	d024      	beq.n	1a852 <update_ccc+0xd6>
	index = bt_conn_index(conn);
   1a808:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1a80a:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1a80c:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1a80e:	f7fd fb6d 	bl	17eec <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a812:	4916      	ldr	r1, [pc, #88]	; (1a86c <update_ccc+0xf0>)
   1a814:	4a16      	ldr	r2, [pc, #88]	; (1a870 <update_ccc+0xf4>)
   1a816:	2318      	movs	r3, #24
   1a818:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a81c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1a81e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1a820:	4a14      	ldr	r2, [pc, #80]	; (1a874 <update_ccc+0xf8>)
   1a822:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a824:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1a828:	1d3a      	adds	r2, r7, #4
   1a82a:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a82c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1a830:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a832:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   1a834:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1a836:	f7ff fead 	bl	1a594 <bt_gatt_indicate>
   1a83a:	b150      	cbz	r0, 1a852 <update_ccc+0xd6>
		LOG_ERR("SC restore indication failed");
   1a83c:	4b0e      	ldr	r3, [pc, #56]	; (1a878 <update_ccc+0xfc>)
   1a83e:	61fb      	str	r3, [r7, #28]
   1a840:	4808      	ldr	r0, [pc, #32]	; (1a864 <update_ccc+0xe8>)
   1a842:	2302      	movs	r3, #2
   1a844:	f107 0218 	add.w	r2, r7, #24
   1a848:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a84c:	61bb      	str	r3, [r7, #24]
   1a84e:	f00a faf7 	bl	24e40 <z_log_msg_static_create.constprop.0>
}
   1a852:	2001      	movs	r0, #1
   1a854:	3720      	adds	r7, #32
   1a856:	46bd      	mov	sp, r7
   1a858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a85c:	00019c39 	.word	0x00019c39
   1a860:	00029392 	.word	0x00029392
   1a864:	00026294 	.word	0x00026294
   1a868:	200006ac 	.word	0x200006ac
   1a86c:	20002c9c 	.word	0x20002c9c
   1a870:	00026784 	.word	0x00026784
   1a874:	00024fe5 	.word	0x00024fe5
   1a878:	000293a6 	.word	0x000293a6

0001a87c <gatt_notify>:
{
   1a87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a880:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1a882:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1a884:	8a4b      	ldrh	r3, [r1, #18]
   1a886:	f003 0314 	and.w	r3, r3, #20
{
   1a88a:	b087      	sub	sp, #28
   1a88c:	4607      	mov	r7, r0
   1a88e:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1a890:	b173      	cbz	r3, 1a8b0 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1a892:	4b2a      	ldr	r3, [pc, #168]	; (1a93c <gatt_notify+0xc0>)
   1a894:	482a      	ldr	r0, [pc, #168]	; (1a940 <gatt_notify+0xc4>)
   1a896:	9305      	str	r3, [sp, #20]
   1a898:	aa04      	add	r2, sp, #16
   1a89a:	2302      	movs	r3, #2
   1a89c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a8a0:	9304      	str	r3, [sp, #16]
   1a8a2:	f00a facd 	bl	24e40 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1a8a6:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a8aa:	b007      	add	sp, #28
   1a8ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1a8b0:	2201      	movs	r2, #1
   1a8b2:	f7ff fd1f 	bl	1a2f4 <bt_gatt_is_subscribed>
   1a8b6:	b960      	cbnz	r0, 1a8d2 <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   1a8b8:	4b22      	ldr	r3, [pc, #136]	; (1a944 <gatt_notify+0xc8>)
   1a8ba:	4821      	ldr	r0, [pc, #132]	; (1a940 <gatt_notify+0xc4>)
   1a8bc:	9305      	str	r3, [sp, #20]
   1a8be:	aa04      	add	r2, sp, #16
   1a8c0:	2302      	movs	r3, #2
   1a8c2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a8c6:	9304      	str	r3, [sp, #16]
   1a8c8:	f00a faba 	bl	24e40 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1a8cc:	f06f 0015 	mvn.w	r0, #21
   1a8d0:	e7eb      	b.n	1a8aa <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1a8d2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1a8d4:	211b      	movs	r1, #27
   1a8d6:	3202      	adds	r2, #2
   1a8d8:	4638      	mov	r0, r7
   1a8da:	f7fe fcd1 	bl	19280 <bt_att_create_pdu>
	if (!buf) {
   1a8de:	4605      	mov	r5, r0
   1a8e0:	b960      	cbnz	r0, 1a8fc <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1a8e2:	4b19      	ldr	r3, [pc, #100]	; (1a948 <gatt_notify+0xcc>)
   1a8e4:	4816      	ldr	r0, [pc, #88]	; (1a940 <gatt_notify+0xc4>)
   1a8e6:	9305      	str	r3, [sp, #20]
   1a8e8:	aa04      	add	r2, sp, #16
   1a8ea:	2302      	movs	r3, #2
   1a8ec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a8f0:	9304      	str	r3, [sp, #16]
   1a8f2:	f00a faa5 	bl	24e40 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1a8f6:	f06f 000b 	mvn.w	r0, #11
   1a8fa:	e7d6      	b.n	1a8aa <gatt_notify+0x2e>
   1a8fc:	f100 090c 	add.w	r9, r0, #12
   1a900:	2102      	movs	r1, #2
   1a902:	4648      	mov	r0, r9
   1a904:	f000 fc82 	bl	1b20c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1a908:	4606      	mov	r6, r0
   1a90a:	4648      	mov	r0, r9
   1a90c:	f826 8b02 	strh.w	r8, [r6], #2
   1a910:	89a1      	ldrh	r1, [r4, #12]
   1a912:	f000 fc7b 	bl	1b20c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1a916:	89a2      	ldrh	r2, [r4, #12]
   1a918:	68a1      	ldr	r1, [r4, #8]
   1a91a:	4630      	mov	r0, r6
   1a91c:	f009 fa7a 	bl	23e14 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1a920:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1a924:	4628      	mov	r0, r5
   1a926:	2301      	movs	r3, #1
   1a928:	f00a f9e8 	bl	24cfc <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1a92c:	4629      	mov	r1, r5
   1a92e:	4638      	mov	r0, r7
}
   1a930:	b007      	add	sp, #28
   1a932:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1a936:	f7ff b877 	b.w	19a28 <bt_att_send>
   1a93a:	bf00      	nop
   1a93c:	000292a4 	.word	0x000292a4
   1a940:	00026294 	.word	0x00026294
   1a944:	000292ba 	.word	0x000292ba
   1a948:	000293c3 	.word	0x000293c3

0001a94c <notify_cb>:
{
   1a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a950:	4b45      	ldr	r3, [pc, #276]	; (1aa68 <notify_cb+0x11c>)
{
   1a952:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a954:	6882      	ldr	r2, [r0, #8]
   1a956:	429a      	cmp	r2, r3
{
   1a958:	b086      	sub	sp, #24
   1a95a:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a95c:	d136      	bne.n	1a9cc <notify_cb+0x80>
	ccc = attr->user_data;
   1a95e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1a962:	4b42      	ldr	r3, [pc, #264]	; (1aa6c <notify_cb+0x120>)
   1a964:	4599      	cmp	r9, r3
   1a966:	d119      	bne.n	1a99c <notify_cb+0x50>
   1a968:	4c41      	ldr	r4, [pc, #260]	; (1aa70 <notify_cb+0x124>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a96a:	4f42      	ldr	r7, [pc, #264]	; (1aa74 <notify_cb+0x128>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a96c:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a96e:	4639      	mov	r1, r7
   1a970:	4620      	mov	r0, r4
   1a972:	f00a fa45 	bl	24e00 <bt_addr_le_eq>
   1a976:	b978      	cbnz	r0, 1a998 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1a978:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a97c:	2207      	movs	r2, #7
   1a97e:	4621      	mov	r1, r4
   1a980:	f7fd fc32 	bl	181e8 <bt_conn_lookup_state_le>
			if (!conn) {
   1a984:	bb40      	cbnz	r0, 1a9d8 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1a986:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1a988:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1a98c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1a98e:	4621      	mov	r1, r4
   1a990:	8853      	ldrh	r3, [r2, #2]
   1a992:	8812      	ldrh	r2, [r2, #0]
   1a994:	f7ff f9d0 	bl	19d38 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a998:	340c      	adds	r4, #12
   1a99a:	b1de      	cbz	r6, 1a9d4 <notify_cb+0x88>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a99c:	f109 0601 	add.w	r6, r9, #1
   1a9a0:	f109 0a15 	add.w	sl, r9, #21
		if (cfg->value != data->type) {
   1a9a4:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1a9a8:	89ab      	ldrh	r3, [r5, #12]
   1a9aa:	429a      	cmp	r2, r3
   1a9ac:	d10b      	bne.n	1a9c6 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1a9ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1a9b2:	4631      	mov	r1, r6
   1a9b4:	f7fd fbce 	bl	18154 <bt_conn_lookup_addr_le>
		if (!conn) {
   1a9b8:	4604      	mov	r4, r0
   1a9ba:	b120      	cbz	r0, 1a9c6 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1a9bc:	7a83      	ldrb	r3, [r0, #10]
   1a9be:	2b07      	cmp	r3, #7
   1a9c0:	d00d      	beq.n	1a9de <notify_cb+0x92>
			bt_conn_unref(conn);
   1a9c2:	f7fd f951 	bl	17c68 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1a9c6:	360a      	adds	r6, #10
   1a9c8:	4556      	cmp	r6, sl
   1a9ca:	d1eb      	bne.n	1a9a4 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1a9cc:	2001      	movs	r0, #1
}
   1a9ce:	b006      	add	sp, #24
   1a9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a9d4:	2601      	movs	r6, #1
   1a9d6:	e7ca      	b.n	1a96e <notify_cb+0x22>
			bt_conn_unref(conn);
   1a9d8:	f7fd f946 	bl	17c68 <bt_conn_unref>
   1a9dc:	e7dc      	b.n	1a998 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1a9de:	f8d9 3020 	ldr.w	r3, [r9, #32]
   1a9e2:	b123      	cbz	r3, 1a9ee <notify_cb+0xa2>
   1a9e4:	4641      	mov	r1, r8
   1a9e6:	4798      	blx	r3
   1a9e8:	b908      	cbnz	r0, 1a9ee <notify_cb+0xa2>
			bt_conn_unref(conn);
   1a9ea:	4620      	mov	r0, r4
   1a9ec:	e7e9      	b.n	1a9c2 <notify_cb+0x76>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1a9ee:	f8b8 3012 	ldrh.w	r3, [r8, #18]
   1a9f2:	f003 0314 	and.w	r3, r3, #20
   1a9f6:	b153      	cbz	r3, 1aa0e <notify_cb+0xc2>
			LOG_WRN("Link is not encrypted");
   1a9f8:	4b1f      	ldr	r3, [pc, #124]	; (1aa78 <notify_cb+0x12c>)
   1a9fa:	9305      	str	r3, [sp, #20]
   1a9fc:	481f      	ldr	r0, [pc, #124]	; (1aa7c <notify_cb+0x130>)
   1a9fe:	2302      	movs	r3, #2
   1aa00:	aa04      	add	r2, sp, #16
   1aa02:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aa06:	9304      	str	r3, [sp, #16]
   1aa08:	f00a fa1a 	bl	24e40 <z_log_msg_static_create.constprop.0>
			bt_conn_unref(conn);
   1aa0c:	e7ed      	b.n	1a9ea <notify_cb+0x9e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1aa0e:	89ab      	ldrh	r3, [r5, #12]
   1aa10:	2b02      	cmp	r3, #2
   1aa12:	d115      	bne.n	1aa40 <notify_cb+0xf4>
   1aa14:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1aa18:	079a      	lsls	r2, r3, #30
   1aa1a:	d405      	bmi.n	1aa28 <notify_cb+0xdc>
		bt_conn_unref(conn);
   1aa1c:	4620      	mov	r0, r4
   1aa1e:	f7fd f923 	bl	17c68 <bt_conn_unref>
		data->err = 0;
   1aa22:	2300      	movs	r3, #0
   1aa24:	60ab      	str	r3, [r5, #8]
   1aa26:	e7ce      	b.n	1a9c6 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1aa28:	692a      	ldr	r2, [r5, #16]
   1aa2a:	88a9      	ldrh	r1, [r5, #4]
   1aa2c:	4620      	mov	r0, r4
   1aa2e:	f7ff fd35 	bl	1a49c <gatt_indicate>
			if (err == 0) {
   1aa32:	4607      	mov	r7, r0
   1aa34:	b980      	cbnz	r0, 1aa58 <notify_cb+0x10c>
				data->ind_params->_ref++;
   1aa36:	692a      	ldr	r2, [r5, #16]
   1aa38:	7d93      	ldrb	r3, [r2, #22]
   1aa3a:	3301      	adds	r3, #1
   1aa3c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1aa3e:	e7ed      	b.n	1aa1c <notify_cb+0xd0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1aa40:	2b01      	cmp	r3, #1
   1aa42:	d1eb      	bne.n	1aa1c <notify_cb+0xd0>
   1aa44:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1aa48:	07db      	lsls	r3, r3, #31
   1aa4a:	d5e7      	bpl.n	1aa1c <notify_cb+0xd0>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1aa4c:	692a      	ldr	r2, [r5, #16]
   1aa4e:	88a9      	ldrh	r1, [r5, #4]
   1aa50:	4620      	mov	r0, r4
   1aa52:	f7ff ff13 	bl	1a87c <gatt_notify>
   1aa56:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1aa58:	4620      	mov	r0, r4
   1aa5a:	f7fd f905 	bl	17c68 <bt_conn_unref>
		if (err < 0) {
   1aa5e:	2f00      	cmp	r7, #0
   1aa60:	dadf      	bge.n	1aa22 <notify_cb+0xd6>
			return BT_GATT_ITER_STOP;
   1aa62:	2000      	movs	r0, #0
   1aa64:	e7b3      	b.n	1a9ce <notify_cb+0x82>
   1aa66:	bf00      	nop
   1aa68:	00019c39 	.word	0x00019c39
   1aa6c:	200006ac 	.word	0x200006ac
   1aa70:	20002f2f 	.word	0x20002f2f
   1aa74:	00027f97 	.word	0x00027f97
   1aa78:	000292a4 	.word	0x000292a4
   1aa7c:	00026294 	.word	0x00026294

0001aa80 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1aa80:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa82:	4a06      	ldr	r2, [pc, #24]	; (1aa9c <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1aa84:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa86:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1aa88:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1aa8e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1aa92:	f00a fb13 	bl	250bc <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1aa96:	b003      	add	sp, #12
   1aa98:	f85d fb04 	ldr.w	pc, [sp], #4
   1aa9c:	0001a77d 	.word	0x0001a77d

0001aaa0 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1aaa2:	4b08      	ldr	r3, [pc, #32]	; (1aac4 <bt_gatt_att_max_mtu_changed+0x24>)
   1aaa4:	681c      	ldr	r4, [r3, #0]
   1aaa6:	4605      	mov	r5, r0
   1aaa8:	460e      	mov	r6, r1
   1aaaa:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1aaac:	b14c      	cbz	r4, 1aac2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1aaae:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1aab2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1aab4:	b11b      	cbz	r3, 1aabe <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1aab6:	463a      	mov	r2, r7
   1aab8:	4631      	mov	r1, r6
   1aaba:	4628      	mov	r0, r5
   1aabc:	4798      	blx	r3
	return node->next;
   1aabe:	6864      	ldr	r4, [r4, #4]
   1aac0:	e7f4      	b.n	1aaac <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aac4:	20002cd8 	.word	0x20002cd8

0001aac8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1aac8:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1aaca:	4603      	mov	r3, r0
   1aacc:	4a0f      	ldr	r2, [pc, #60]	; (1ab0c <bt_gatt_disconnected+0x44>)
{
   1aace:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1aad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1aad4:	2001      	movs	r0, #1
   1aad6:	f00a faf1 	bl	250bc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1aada:	4620      	mov	r0, r4
   1aadc:	f7ff f838 	bl	19b50 <find_cf_cfg>
	if (!cfg) {
   1aae0:	4605      	mov	r5, r0
   1aae2:	b188      	cbz	r0, 1ab08 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aae4:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1aae8:	7a20      	ldrb	r0, [r4, #8]
   1aaea:	4631      	mov	r1, r6
   1aaec:	f009 fb01 	bl	240f2 <bt_addr_le_is_bonded>
   1aaf0:	b920      	cbnz	r0, 1aafc <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1aaf2:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1aaf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1aaf8:	f7ff b902 	b.w	19d00 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1aafc:	4631      	mov	r1, r6
   1aafe:	1c68      	adds	r0, r5, #1
}
   1ab00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ab04:	f00a b999 	b.w	24e3a <bt_addr_le_copy>
}
   1ab08:	bd70      	pop	{r4, r5, r6, pc}
   1ab0a:	bf00      	nop
   1ab0c:	00019da5 	.word	0x00019da5

0001ab10 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1ab10:	b580      	push	{r7, lr}
   1ab12:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1ab14:	b088      	sub	sp, #32
   1ab16:	466a      	mov	r2, sp
   1ab18:	4b07      	ldr	r3, [pc, #28]	; (1ab38 <bt_smp_accept.part.0+0x28>)
   1ab1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ab1e:	2303      	movs	r3, #3
   1ab20:	f842 3f10 	str.w	r3, [r2, #16]!
   1ab24:	4805      	ldr	r0, [pc, #20]	; (1ab3c <bt_smp_accept.part.0+0x2c>)
   1ab26:	2300      	movs	r3, #0
   1ab28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ab2c:	f7f8 fbc2 	bl	132b4 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   1ab30:	f06f 000b 	mvn.w	r0, #11
   1ab34:	46bd      	mov	sp, r7
   1ab36:	bd80      	pop	{r7, pc}
   1ab38:	000293fb 	.word	0x000293fb
   1ab3c:	000262d4 	.word	0x000262d4

0001ab40 <bt_smp_accept>:
		if (smp->chan.conn) {
   1ab40:	4b04      	ldr	r3, [pc, #16]	; (1ab54 <bt_smp_accept+0x14>)
   1ab42:	681a      	ldr	r2, [r3, #0]
   1ab44:	b10a      	cbz	r2, 1ab4a <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1ab46:	f7ff bfe3 	b.w	1ab10 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1ab4a:	4803      	ldr	r0, [pc, #12]	; (1ab58 <bt_smp_accept+0x18>)
   1ab4c:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   1ab4e:	600b      	str	r3, [r1, #0]
}
   1ab50:	4610      	mov	r0, r2
   1ab52:	4770      	bx	lr
   1ab54:	20002ce0 	.word	0x20002ce0
   1ab58:	00026888 	.word	0x00026888

0001ab5c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ab5c:	4b02      	ldr	r3, [pc, #8]	; (1ab68 <net_buf_pool_get+0xc>)
   1ab5e:	2234      	movs	r2, #52	; 0x34
   1ab60:	fb02 3000 	mla	r0, r2, r0, r3
   1ab64:	4770      	bx	lr
   1ab66:	bf00      	nop
   1ab68:	200009dc 	.word	0x200009dc

0001ab6c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab6c:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ab6e:	4b07      	ldr	r3, [pc, #28]	; (1ab8c <net_buf_id+0x20>)
   1ab70:	2134      	movs	r1, #52	; 0x34
   1ab72:	fb01 3302 	mla	r3, r1, r2, r3
   1ab76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ab78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1ab7c:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1ab7e:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ab80:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1ab84:	fbb0 f0f3 	udiv	r0, r0, r3
   1ab88:	4770      	bx	lr
   1ab8a:	bf00      	nop
   1ab8c:	200009dc 	.word	0x200009dc

0001ab90 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ab90:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab92:	4b0a      	ldr	r3, [pc, #40]	; (1abbc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab94:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab96:	2434      	movs	r4, #52	; 0x34
   1ab98:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ab9c:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1aba0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1aba2:	681a      	ldr	r2, [r3, #0]
   1aba4:	4294      	cmp	r4, r2
   1aba6:	bf94      	ite	ls
   1aba8:	600c      	strls	r4, [r1, #0]
   1abaa:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1abac:	e9d3 5400 	ldrd	r5, r4, [r3]
   1abb0:	f7ff ffdc 	bl	1ab6c <net_buf_id>
}
   1abb4:	fb05 4000 	mla	r0, r5, r0, r4
   1abb8:	bd38      	pop	{r3, r4, r5, pc}
   1abba:	bf00      	nop
   1abbc:	200009dc 	.word	0x200009dc

0001abc0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abc4:	b085      	sub	sp, #20
   1abc6:	4605      	mov	r5, r0
   1abc8:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1abca:	4610      	mov	r0, r2
   1abcc:	4619      	mov	r1, r3
{
   1abce:	4692      	mov	sl, r2
   1abd0:	4699      	mov	r9, r3
   1abd2:	4690      	mov	r8, r2
   1abd4:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1abd6:	f00b f8ce 	bl	25d76 <sys_clock_timeout_end_calc>
   1abda:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1abde:	b945      	cbnz	r5, 1abf2 <net_buf_alloc_len+0x32>
   1abe0:	4966      	ldr	r1, [pc, #408]	; (1ad7c <net_buf_alloc_len+0x1bc>)
   1abe2:	4a67      	ldr	r2, [pc, #412]	; (1ad80 <net_buf_alloc_len+0x1c0>)
   1abe4:	4867      	ldr	r0, [pc, #412]	; (1ad84 <net_buf_alloc_len+0x1c4>)
   1abe6:	23f4      	movs	r3, #244	; 0xf4
   1abe8:	f008 fd07 	bl	235fa <assert_print>
   1abec:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1abee:	4864      	ldr	r0, [pc, #400]	; (1ad80 <net_buf_alloc_len+0x1c0>)
   1abf0:	e019      	b.n	1ac26 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1abf2:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1abf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1abfa:	f3ef 8b11 	mrs	fp, BASEPRI
   1abfe:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ac06:	4630      	mov	r0, r6
   1ac08:	f004 fd12 	bl	1f630 <z_spin_lock_valid>
   1ac0c:	b968      	cbnz	r0, 1ac2a <net_buf_alloc_len+0x6a>
   1ac0e:	4a5e      	ldr	r2, [pc, #376]	; (1ad88 <net_buf_alloc_len+0x1c8>)
   1ac10:	495e      	ldr	r1, [pc, #376]	; (1ad8c <net_buf_alloc_len+0x1cc>)
   1ac12:	485c      	ldr	r0, [pc, #368]	; (1ad84 <net_buf_alloc_len+0x1c4>)
   1ac14:	2394      	movs	r3, #148	; 0x94
   1ac16:	f008 fcf0 	bl	235fa <assert_print>
   1ac1a:	4631      	mov	r1, r6
   1ac1c:	485c      	ldr	r0, [pc, #368]	; (1ad90 <net_buf_alloc_len+0x1d0>)
   1ac1e:	f008 fcec 	bl	235fa <assert_print>
   1ac22:	2194      	movs	r1, #148	; 0x94
   1ac24:	4858      	ldr	r0, [pc, #352]	; (1ad88 <net_buf_alloc_len+0x1c8>)
   1ac26:	f008 fce1 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1ac2a:	4630      	mov	r0, r6
   1ac2c:	f004 fd1e 	bl	1f66c <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1ac30:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1ac32:	2b00      	cmp	r3, #0
   1ac34:	d070      	beq.n	1ad18 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1ac36:	8c2a      	ldrh	r2, [r5, #32]
   1ac38:	429a      	cmp	r2, r3
   1ac3a:	d94d      	bls.n	1acd8 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1ac3c:	2200      	movs	r2, #0
   1ac3e:	2300      	movs	r3, #0
   1ac40:	4628      	mov	r0, r5
   1ac42:	f004 ff45 	bl	1fad0 <z_impl_k_queue_get>
			if (buf) {
   1ac46:	4604      	mov	r4, r0
   1ac48:	2800      	cmp	r0, #0
   1ac4a:	d045      	beq.n	1acd8 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ac4c:	4630      	mov	r0, r6
   1ac4e:	f004 fcfd 	bl	1f64c <z_spin_unlock_valid>
   1ac52:	b958      	cbnz	r0, 1ac6c <net_buf_alloc_len+0xac>
   1ac54:	4a4c      	ldr	r2, [pc, #304]	; (1ad88 <net_buf_alloc_len+0x1c8>)
   1ac56:	494f      	ldr	r1, [pc, #316]	; (1ad94 <net_buf_alloc_len+0x1d4>)
   1ac58:	484a      	ldr	r0, [pc, #296]	; (1ad84 <net_buf_alloc_len+0x1c4>)
   1ac5a:	23c2      	movs	r3, #194	; 0xc2
   1ac5c:	f008 fccd 	bl	235fa <assert_print>
   1ac60:	4631      	mov	r1, r6
   1ac62:	484d      	ldr	r0, [pc, #308]	; (1ad98 <net_buf_alloc_len+0x1d8>)
   1ac64:	f008 fcc9 	bl	235fa <assert_print>
   1ac68:	21c2      	movs	r1, #194	; 0xc2
   1ac6a:	e7db      	b.n	1ac24 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1ac6c:	f38b 8811 	msr	BASEPRI, fp
   1ac70:	f3bf 8f6f 	isb	sy
	if (size) {
   1ac74:	9d03      	ldr	r5, [sp, #12]
   1ac76:	2d00      	cmp	r5, #0
   1ac78:	d074      	beq.n	1ad64 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ac7a:	ea59 030a 	orrs.w	r3, r9, sl
   1ac7e:	d012      	beq.n	1aca6 <net_buf_alloc_len+0xe6>
   1ac80:	f1b9 3fff 	cmp.w	r9, #4294967295
   1ac84:	bf08      	it	eq
   1ac86:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1ac8a:	d00c      	beq.n	1aca6 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1ac8c:	f007 f9ae 	bl	21fec <sys_clock_tick_get>
   1ac90:	9b01      	ldr	r3, [sp, #4]
   1ac92:	ebb3 0800 	subs.w	r8, r3, r0
   1ac96:	9b02      	ldr	r3, [sp, #8]
   1ac98:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1ac9c:	2f00      	cmp	r7, #0
   1ac9e:	bfbc      	itt	lt
   1aca0:	f04f 0800 	movlt.w	r8, #0
   1aca4:	4647      	movlt	r7, r8
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1aca6:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1aca8:	4e3c      	ldr	r6, [pc, #240]	; (1ad9c <net_buf_alloc_len+0x1dc>)
   1acaa:	f04f 0934 	mov.w	r9, #52	; 0x34
   1acae:	fb09 6303 	mla	r3, r9, r3, r6
   1acb2:	4642      	mov	r2, r8
   1acb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1acb6:	681b      	ldr	r3, [r3, #0]
   1acb8:	a903      	add	r1, sp, #12
   1acba:	f8d3 a000 	ldr.w	sl, [r3]
   1acbe:	4620      	mov	r0, r4
   1acc0:	463b      	mov	r3, r7
   1acc2:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1acc4:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1acc6:	2800      	cmp	r0, #0
   1acc8:	d13c      	bne.n	1ad44 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1acca:	7aa0      	ldrb	r0, [r4, #10]
   1accc:	4621      	mov	r1, r4
   1acce:	fb00 6009 	mla	r0, r0, r9, r6
   1acd2:	f00a ff8e 	bl	25bf2 <k_queue_prepend>
}
   1acd6:	e030      	b.n	1ad3a <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1acd8:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1acda:	1e63      	subs	r3, r4, #1
   1acdc:	846b      	strh	r3, [r5, #34]	; 0x22
   1acde:	4630      	mov	r0, r6
   1ace0:	f004 fcb4 	bl	1f64c <z_spin_unlock_valid>
   1ace4:	2800      	cmp	r0, #0
   1ace6:	d0b5      	beq.n	1ac54 <net_buf_alloc_len+0x94>
   1ace8:	f38b 8811 	msr	BASEPRI, fp
   1acec:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1acf0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1acf4:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1acf6:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1acf8:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1acfa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1acfc:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ad00:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1ad04:	4b25      	ldr	r3, [pc, #148]	; (1ad9c <net_buf_alloc_len+0x1dc>)
   1ad06:	4a26      	ldr	r2, [pc, #152]	; (1ada0 <net_buf_alloc_len+0x1e0>)
   1ad08:	1aeb      	subs	r3, r5, r3
   1ad0a:	109b      	asrs	r3, r3, #2
   1ad0c:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ad0e:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ad10:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1ad14:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ad16:	e7ad      	b.n	1ac74 <net_buf_alloc_len+0xb4>
   1ad18:	4630      	mov	r0, r6
   1ad1a:	f004 fc97 	bl	1f64c <z_spin_unlock_valid>
   1ad1e:	2800      	cmp	r0, #0
   1ad20:	d098      	beq.n	1ac54 <net_buf_alloc_len+0x94>
   1ad22:	f38b 8811 	msr	BASEPRI, fp
   1ad26:	f3bf 8f6f 	isb	sy
   1ad2a:	4652      	mov	r2, sl
   1ad2c:	464b      	mov	r3, r9
   1ad2e:	4628      	mov	r0, r5
   1ad30:	f004 fece 	bl	1fad0 <z_impl_k_queue_get>
	if (!buf) {
   1ad34:	4604      	mov	r4, r0
   1ad36:	2800      	cmp	r0, #0
   1ad38:	d19c      	bne.n	1ac74 <net_buf_alloc_len+0xb4>
		return NULL;
   1ad3a:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ad3c:	4620      	mov	r0, r4
   1ad3e:	b005      	add	sp, #20
   1ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ad44:	9b03      	ldr	r3, [sp, #12]
   1ad46:	429d      	cmp	r5, r3
   1ad48:	d90d      	bls.n	1ad66 <net_buf_alloc_len+0x1a6>
   1ad4a:	4916      	ldr	r1, [pc, #88]	; (1ada4 <net_buf_alloc_len+0x1e4>)
   1ad4c:	4a0c      	ldr	r2, [pc, #48]	; (1ad80 <net_buf_alloc_len+0x1c0>)
   1ad4e:	480d      	ldr	r0, [pc, #52]	; (1ad84 <net_buf_alloc_len+0x1c4>)
   1ad50:	f240 1355 	movw	r3, #341	; 0x155
   1ad54:	f008 fc51 	bl	235fa <assert_print>
   1ad58:	4813      	ldr	r0, [pc, #76]	; (1ada8 <net_buf_alloc_len+0x1e8>)
   1ad5a:	f008 fc4e 	bl	235fa <assert_print>
   1ad5e:	f240 1155 	movw	r1, #341	; 0x155
   1ad62:	e744      	b.n	1abee <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1ad64:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1ad66:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ad68:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ad6a:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ad6c:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ad6e:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ad70:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1ad72:	6963      	ldr	r3, [r4, #20]
   1ad74:	8262      	strh	r2, [r4, #18]
   1ad76:	60e3      	str	r3, [r4, #12]
}
   1ad78:	e7e0      	b.n	1ad3c <net_buf_alloc_len+0x17c>
   1ad7a:	bf00      	nop
   1ad7c:	00029476 	.word	0x00029476
   1ad80:	00029427 	.word	0x00029427
   1ad84:	00026f1a 	.word	0x00026f1a
   1ad88:	0002730e 	.word	0x0002730e
   1ad8c:	00027367 	.word	0x00027367
   1ad90:	0002737c 	.word	0x0002737c
   1ad94:	0002733b 	.word	0x0002733b
   1ad98:	00027352 	.word	0x00027352
   1ad9c:	200009dc 	.word	0x200009dc
   1ada0:	c4ec4ec5 	.word	0xc4ec4ec5
   1ada4:	0002947b 	.word	0x0002947b
   1ada8:	0002948c 	.word	0x0002948c

0001adac <net_buf_slist_put>:
}

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1adac:	b570      	push	{r4, r5, r6, lr}
   1adae:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1adb0:	4605      	mov	r5, r0
   1adb2:	b958      	cbnz	r0, 1adcc <net_buf_slist_put+0x20>
   1adb4:	4928      	ldr	r1, [pc, #160]	; (1ae58 <net_buf_slist_put+0xac>)
   1adb6:	4a29      	ldr	r2, [pc, #164]	; (1ae5c <net_buf_slist_put+0xb0>)
   1adb8:	4829      	ldr	r0, [pc, #164]	; (1ae60 <net_buf_slist_put+0xb4>)
   1adba:	f240 13b3 	movw	r3, #435	; 0x1b3
   1adbe:	f008 fc1c 	bl	235fa <assert_print>
   1adc2:	f240 11b3 	movw	r1, #435	; 0x1b3
	__ASSERT_NO_MSG(buf);
   1adc6:	4825      	ldr	r0, [pc, #148]	; (1ae5c <net_buf_slist_put+0xb0>)
   1adc8:	f008 fc10 	bl	235ec <assert_post_action>
   1adcc:	b949      	cbnz	r1, 1ade2 <net_buf_slist_put+0x36>
   1adce:	4925      	ldr	r1, [pc, #148]	; (1ae64 <net_buf_slist_put+0xb8>)
   1add0:	4a22      	ldr	r2, [pc, #136]	; (1ae5c <net_buf_slist_put+0xb0>)
   1add2:	4823      	ldr	r0, [pc, #140]	; (1ae60 <net_buf_slist_put+0xb4>)
   1add4:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   1add8:	f008 fc0f 	bl	235fa <assert_print>
   1addc:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   1ade0:	e7f1      	b.n	1adc6 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1ade2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ade6:	f3ef 8611 	mrs	r6, BASEPRI
   1adea:	f383 8812 	msr	BASEPRI_MAX, r3
   1adee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1adf2:	481d      	ldr	r0, [pc, #116]	; (1ae68 <net_buf_slist_put+0xbc>)
   1adf4:	f004 fc1c 	bl	1f630 <z_spin_lock_valid>
   1adf8:	b960      	cbnz	r0, 1ae14 <net_buf_slist_put+0x68>
   1adfa:	4a1c      	ldr	r2, [pc, #112]	; (1ae6c <net_buf_slist_put+0xc0>)
   1adfc:	491c      	ldr	r1, [pc, #112]	; (1ae70 <net_buf_slist_put+0xc4>)
   1adfe:	4818      	ldr	r0, [pc, #96]	; (1ae60 <net_buf_slist_put+0xb4>)
   1ae00:	2394      	movs	r3, #148	; 0x94
   1ae02:	f008 fbfa 	bl	235fa <assert_print>
   1ae06:	4918      	ldr	r1, [pc, #96]	; (1ae68 <net_buf_slist_put+0xbc>)
   1ae08:	481a      	ldr	r0, [pc, #104]	; (1ae74 <net_buf_slist_put+0xc8>)
   1ae0a:	f008 fbf6 	bl	235fa <assert_print>
   1ae0e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae10:	4816      	ldr	r0, [pc, #88]	; (1ae6c <net_buf_slist_put+0xc0>)
   1ae12:	e7d9      	b.n	1adc8 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1ae14:	4814      	ldr	r0, [pc, #80]	; (1ae68 <net_buf_slist_put+0xbc>)
   1ae16:	f004 fc29 	bl	1f66c <z_spin_lock_set_owner>
	parent->next = child;
   1ae1a:	2300      	movs	r3, #0
   1ae1c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ae1e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ae20:	b98b      	cbnz	r3, 1ae46 <net_buf_slist_put+0x9a>
	list->head = node;
   1ae22:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ae26:	4810      	ldr	r0, [pc, #64]	; (1ae68 <net_buf_slist_put+0xbc>)
   1ae28:	f004 fc10 	bl	1f64c <z_spin_unlock_valid>
   1ae2c:	b970      	cbnz	r0, 1ae4c <net_buf_slist_put+0xa0>
   1ae2e:	4a0f      	ldr	r2, [pc, #60]	; (1ae6c <net_buf_slist_put+0xc0>)
   1ae30:	4911      	ldr	r1, [pc, #68]	; (1ae78 <net_buf_slist_put+0xcc>)
   1ae32:	480b      	ldr	r0, [pc, #44]	; (1ae60 <net_buf_slist_put+0xb4>)
   1ae34:	23c2      	movs	r3, #194	; 0xc2
   1ae36:	f008 fbe0 	bl	235fa <assert_print>
   1ae3a:	490b      	ldr	r1, [pc, #44]	; (1ae68 <net_buf_slist_put+0xbc>)
   1ae3c:	480f      	ldr	r0, [pc, #60]	; (1ae7c <net_buf_slist_put+0xd0>)
   1ae3e:	f008 fbdc 	bl	235fa <assert_print>
   1ae42:	21c2      	movs	r1, #194	; 0xc2
   1ae44:	e7e4      	b.n	1ae10 <net_buf_slist_put+0x64>
	parent->next = child;
   1ae46:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ae48:	606c      	str	r4, [r5, #4]
}
   1ae4a:	e7ec      	b.n	1ae26 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1ae4c:	f386 8811 	msr	BASEPRI, r6
   1ae50:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1ae54:	bd70      	pop	{r4, r5, r6, pc}
   1ae56:	bf00      	nop
   1ae58:	0002948f 	.word	0x0002948f
   1ae5c:	00029427 	.word	0x00029427
   1ae60:	00026f1a 	.word	0x00026f1a
   1ae64:	000294a9 	.word	0x000294a9
   1ae68:	20002d10 	.word	0x20002d10
   1ae6c:	0002730e 	.word	0x0002730e
   1ae70:	00027367 	.word	0x00027367
   1ae74:	0002737c 	.word	0x0002737c
   1ae78:	0002733b 	.word	0x0002733b
   1ae7c:	00027352 	.word	0x00027352

0001ae80 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1ae80:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ae82:	4604      	mov	r4, r0
   1ae84:	b958      	cbnz	r0, 1ae9e <net_buf_slist_get+0x1e>
   1ae86:	4923      	ldr	r1, [pc, #140]	; (1af14 <net_buf_slist_get+0x94>)
   1ae88:	4823      	ldr	r0, [pc, #140]	; (1af18 <net_buf_slist_get+0x98>)
   1ae8a:	4a24      	ldr	r2, [pc, #144]	; (1af1c <net_buf_slist_get+0x9c>)
   1ae8c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1ae90:	f008 fbb3 	bl	235fa <assert_print>
   1ae94:	4821      	ldr	r0, [pc, #132]	; (1af1c <net_buf_slist_get+0x9c>)
   1ae96:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ae9a:	f008 fba7 	bl	235ec <assert_post_action>
	__asm__ volatile(
   1ae9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aea2:	f3ef 8611 	mrs	r6, BASEPRI
   1aea6:	f383 8812 	msr	BASEPRI_MAX, r3
   1aeaa:	f3bf 8f6f 	isb	sy
   1aeae:	481c      	ldr	r0, [pc, #112]	; (1af20 <net_buf_slist_get+0xa0>)
   1aeb0:	f004 fbbe 	bl	1f630 <z_spin_lock_valid>
   1aeb4:	b960      	cbnz	r0, 1aed0 <net_buf_slist_get+0x50>
   1aeb6:	4a1b      	ldr	r2, [pc, #108]	; (1af24 <net_buf_slist_get+0xa4>)
   1aeb8:	491b      	ldr	r1, [pc, #108]	; (1af28 <net_buf_slist_get+0xa8>)
   1aeba:	4817      	ldr	r0, [pc, #92]	; (1af18 <net_buf_slist_get+0x98>)
   1aebc:	2394      	movs	r3, #148	; 0x94
   1aebe:	f008 fb9c 	bl	235fa <assert_print>
   1aec2:	4917      	ldr	r1, [pc, #92]	; (1af20 <net_buf_slist_get+0xa0>)
   1aec4:	4819      	ldr	r0, [pc, #100]	; (1af2c <net_buf_slist_get+0xac>)
   1aec6:	f008 fb98 	bl	235fa <assert_print>
   1aeca:	2194      	movs	r1, #148	; 0x94
   1aecc:	4815      	ldr	r0, [pc, #84]	; (1af24 <net_buf_slist_get+0xa4>)
   1aece:	e7e4      	b.n	1ae9a <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1aed0:	4813      	ldr	r0, [pc, #76]	; (1af20 <net_buf_slist_get+0xa0>)
   1aed2:	f004 fbcb 	bl	1f66c <z_spin_lock_set_owner>
	return list->head;
   1aed6:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1aed8:	b12d      	cbz	r5, 1aee6 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aeda:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1aedc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1aede:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aee0:	4295      	cmp	r5, r2
	list->tail = node;
   1aee2:	bf08      	it	eq
   1aee4:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1aee6:	480e      	ldr	r0, [pc, #56]	; (1af20 <net_buf_slist_get+0xa0>)
   1aee8:	f004 fbb0 	bl	1f64c <z_spin_unlock_valid>
   1aeec:	b958      	cbnz	r0, 1af06 <net_buf_slist_get+0x86>
   1aeee:	4a0d      	ldr	r2, [pc, #52]	; (1af24 <net_buf_slist_get+0xa4>)
   1aef0:	490f      	ldr	r1, [pc, #60]	; (1af30 <net_buf_slist_get+0xb0>)
   1aef2:	4809      	ldr	r0, [pc, #36]	; (1af18 <net_buf_slist_get+0x98>)
   1aef4:	23c2      	movs	r3, #194	; 0xc2
   1aef6:	f008 fb80 	bl	235fa <assert_print>
   1aefa:	4909      	ldr	r1, [pc, #36]	; (1af20 <net_buf_slist_get+0xa0>)
   1aefc:	480d      	ldr	r0, [pc, #52]	; (1af34 <net_buf_slist_get+0xb4>)
   1aefe:	f008 fb7c 	bl	235fa <assert_print>
   1af02:	21c2      	movs	r1, #194	; 0xc2
   1af04:	e7e2      	b.n	1aecc <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1af06:	f386 8811 	msr	BASEPRI, r6
   1af0a:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1af0e:	4628      	mov	r0, r5
   1af10:	bd70      	pop	{r4, r5, r6, pc}
   1af12:	bf00      	nop
   1af14:	0002948f 	.word	0x0002948f
   1af18:	00026f1a 	.word	0x00026f1a
   1af1c:	00029427 	.word	0x00029427
   1af20:	20002d10 	.word	0x20002d10
   1af24:	0002730e 	.word	0x0002730e
   1af28:	00027367 	.word	0x00027367
   1af2c:	0002737c 	.word	0x0002737c
   1af30:	0002733b 	.word	0x0002733b
   1af34:	00027352 	.word	0x00027352

0001af38 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1af38:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1af3a:	b958      	cbnz	r0, 1af54 <net_buf_put+0x1c>
   1af3c:	490d      	ldr	r1, [pc, #52]	; (1af74 <net_buf_put+0x3c>)
   1af3e:	4a0e      	ldr	r2, [pc, #56]	; (1af78 <net_buf_put+0x40>)
   1af40:	480e      	ldr	r0, [pc, #56]	; (1af7c <net_buf_put+0x44>)
   1af42:	f240 13cd 	movw	r3, #461	; 0x1cd
   1af46:	f008 fb58 	bl	235fa <assert_print>
   1af4a:	f240 11cd 	movw	r1, #461	; 0x1cd
	__ASSERT_NO_MSG(buf);
   1af4e:	480a      	ldr	r0, [pc, #40]	; (1af78 <net_buf_put+0x40>)
   1af50:	f008 fb4c 	bl	235ec <assert_post_action>
   1af54:	b949      	cbnz	r1, 1af6a <net_buf_put+0x32>
   1af56:	490a      	ldr	r1, [pc, #40]	; (1af80 <net_buf_put+0x48>)
   1af58:	4a07      	ldr	r2, [pc, #28]	; (1af78 <net_buf_put+0x40>)
   1af5a:	4808      	ldr	r0, [pc, #32]	; (1af7c <net_buf_put+0x44>)
   1af5c:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   1af60:	f008 fb4b 	bl	235fa <assert_print>
   1af64:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1af68:	e7f1      	b.n	1af4e <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1af6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1af6e:	f00a be35 	b.w	25bdc <k_queue_append>
   1af72:	bf00      	nop
   1af74:	00029494 	.word	0x00029494
   1af78:	00029427 	.word	0x00029427
   1af7c:	00026f1a 	.word	0x00026f1a
   1af80:	000294a9 	.word	0x000294a9

0001af84 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1af88:	4605      	mov	r5, r0
   1af8a:	b328      	cbz	r0, 1afd8 <net_buf_unref+0x54>
   1af8c:	4e1b      	ldr	r6, [pc, #108]	; (1affc <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1af8e:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1af90:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1af94:	462c      	mov	r4, r5
   1af96:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1af98:	7a23      	ldrb	r3, [r4, #8]
   1af9a:	3b01      	subs	r3, #1
   1af9c:	b2db      	uxtb	r3, r3
   1af9e:	7223      	strb	r3, [r4, #8]
   1afa0:	b9c3      	cbnz	r3, 1afd4 <net_buf_unref+0x50>
		if (buf->__buf) {
   1afa2:	6961      	ldr	r1, [r4, #20]
   1afa4:	b159      	cbz	r1, 1afbe <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1afa6:	7a63      	ldrb	r3, [r4, #9]
   1afa8:	07db      	lsls	r3, r3, #31
   1afaa:	d407      	bmi.n	1afbc <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1afac:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1afae:	fb08 6303 	mla	r3, r8, r3, r6
   1afb2:	4620      	mov	r0, r4
   1afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1afb6:	681b      	ldr	r3, [r3, #0]
   1afb8:	689b      	ldr	r3, [r3, #8]
   1afba:	4798      	blx	r3
			buf->__buf = NULL;
   1afbc:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1afbe:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1afc0:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1afc2:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1afc6:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1afca:	b18b      	cbz	r3, 1aff0 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1afcc:	4620      	mov	r0, r4
   1afce:	4798      	blx	r3
	while (buf) {
   1afd0:	2d00      	cmp	r5, #0
   1afd2:	d1df      	bne.n	1af94 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1afd8:	4909      	ldr	r1, [pc, #36]	; (1b000 <net_buf_unref+0x7c>)
   1afda:	480a      	ldr	r0, [pc, #40]	; (1b004 <net_buf_unref+0x80>)
   1afdc:	4a0a      	ldr	r2, [pc, #40]	; (1b008 <net_buf_unref+0x84>)
   1afde:	f240 13d9 	movw	r3, #473	; 0x1d9
   1afe2:	f008 fb0a 	bl	235fa <assert_print>
   1afe6:	4808      	ldr	r0, [pc, #32]	; (1b008 <net_buf_unref+0x84>)
   1afe8:	f240 11d9 	movw	r1, #473	; 0x1d9
   1afec:	f008 fafe 	bl	235ec <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1aff0:	4621      	mov	r1, r4
   1aff2:	fb00 6008 	mla	r0, r0, r8, r6
   1aff6:	f00a fdfc 	bl	25bf2 <k_queue_prepend>
}
   1affa:	e7e9      	b.n	1afd0 <net_buf_unref+0x4c>
   1affc:	200009dc 	.word	0x200009dc
   1b000:	000294a9 	.word	0x000294a9
   1b004:	00026f1a 	.word	0x00026f1a
   1b008:	00029427 	.word	0x00029427

0001b00c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1b00c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b00e:	b958      	cbnz	r0, 1b028 <net_buf_ref+0x1c>
   1b010:	4907      	ldr	r1, [pc, #28]	; (1b030 <net_buf_ref+0x24>)
   1b012:	4808      	ldr	r0, [pc, #32]	; (1b034 <net_buf_ref+0x28>)
   1b014:	4a08      	ldr	r2, [pc, #32]	; (1b038 <net_buf_ref+0x2c>)
   1b016:	f44f 7302 	mov.w	r3, #520	; 0x208
   1b01a:	f008 faee 	bl	235fa <assert_print>
   1b01e:	4806      	ldr	r0, [pc, #24]	; (1b038 <net_buf_ref+0x2c>)
   1b020:	f44f 7102 	mov.w	r1, #520	; 0x208
   1b024:	f008 fae2 	bl	235ec <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b028:	7a02      	ldrb	r2, [r0, #8]
   1b02a:	3201      	adds	r2, #1
   1b02c:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1b02e:	bd08      	pop	{r3, pc}
   1b030:	000294a9 	.word	0x000294a9
   1b034:	00026f1a 	.word	0x00026f1a
   1b038:	00029427 	.word	0x00029427

0001b03c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b03c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b03e:	4603      	mov	r3, r0
   1b040:	b958      	cbnz	r0, 1b05a <net_buf_frag_last+0x1e>
   1b042:	4908      	ldr	r1, [pc, #32]	; (1b064 <net_buf_frag_last+0x28>)
   1b044:	4808      	ldr	r0, [pc, #32]	; (1b068 <net_buf_frag_last+0x2c>)
   1b046:	4a09      	ldr	r2, [pc, #36]	; (1b06c <net_buf_frag_last+0x30>)
   1b048:	f240 2345 	movw	r3, #581	; 0x245
   1b04c:	f008 fad5 	bl	235fa <assert_print>
   1b050:	4806      	ldr	r0, [pc, #24]	; (1b06c <net_buf_frag_last+0x30>)
   1b052:	f240 2145 	movw	r1, #581	; 0x245
   1b056:	f008 fac9 	bl	235ec <assert_post_action>

	while (buf->frags) {
   1b05a:	4618      	mov	r0, r3
   1b05c:	685b      	ldr	r3, [r3, #4]
   1b05e:	2b00      	cmp	r3, #0
   1b060:	d1fb      	bne.n	1b05a <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1b062:	bd08      	pop	{r3, pc}
   1b064:	000294a9 	.word	0x000294a9
   1b068:	00026f1a 	.word	0x00026f1a
   1b06c:	00029427 	.word	0x00029427

0001b070 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1b070:	b570      	push	{r4, r5, r6, lr}
   1b072:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1b074:	4604      	mov	r4, r0
   1b076:	b958      	cbnz	r0, 1b090 <net_buf_frag_insert+0x20>
   1b078:	490f      	ldr	r1, [pc, #60]	; (1b0b8 <net_buf_frag_insert+0x48>)
   1b07a:	4a10      	ldr	r2, [pc, #64]	; (1b0bc <net_buf_frag_insert+0x4c>)
   1b07c:	4810      	ldr	r0, [pc, #64]	; (1b0c0 <net_buf_frag_insert+0x50>)
   1b07e:	f44f 7314 	mov.w	r3, #592	; 0x250
   1b082:	f008 faba 	bl	235fa <assert_print>
   1b086:	f44f 7114 	mov.w	r1, #592	; 0x250
	__ASSERT_NO_MSG(frag);
   1b08a:	480c      	ldr	r0, [pc, #48]	; (1b0bc <net_buf_frag_insert+0x4c>)
   1b08c:	f008 faae 	bl	235ec <assert_post_action>
   1b090:	b949      	cbnz	r1, 1b0a6 <net_buf_frag_insert+0x36>
   1b092:	490c      	ldr	r1, [pc, #48]	; (1b0c4 <net_buf_frag_insert+0x54>)
   1b094:	4a09      	ldr	r2, [pc, #36]	; (1b0bc <net_buf_frag_insert+0x4c>)
   1b096:	480a      	ldr	r0, [pc, #40]	; (1b0c0 <net_buf_frag_insert+0x50>)
   1b098:	f240 2351 	movw	r3, #593	; 0x251
   1b09c:	f008 faad 	bl	235fa <assert_print>
   1b0a0:	f240 2151 	movw	r1, #593	; 0x251
   1b0a4:	e7f1      	b.n	1b08a <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1b0a6:	6846      	ldr	r6, [r0, #4]
   1b0a8:	b11e      	cbz	r6, 1b0b2 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b0aa:	4608      	mov	r0, r1
   1b0ac:	f7ff ffc6 	bl	1b03c <net_buf_frag_last>
   1b0b0:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b0b2:	6065      	str	r5, [r4, #4]
}
   1b0b4:	bd70      	pop	{r4, r5, r6, pc}
   1b0b6:	bf00      	nop
   1b0b8:	00029499 	.word	0x00029499
   1b0bc:	00029427 	.word	0x00029427
   1b0c0:	00026f1a 	.word	0x00026f1a
   1b0c4:	000294a0 	.word	0x000294a0

0001b0c8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b0c8:	b538      	push	{r3, r4, r5, lr}
   1b0ca:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1b0cc:	460c      	mov	r4, r1
   1b0ce:	b959      	cbnz	r1, 1b0e8 <net_buf_frag_add+0x20>
   1b0d0:	490c      	ldr	r1, [pc, #48]	; (1b104 <net_buf_frag_add+0x3c>)
   1b0d2:	480d      	ldr	r0, [pc, #52]	; (1b108 <net_buf_frag_add+0x40>)
   1b0d4:	4a0d      	ldr	r2, [pc, #52]	; (1b10c <net_buf_frag_add+0x44>)
   1b0d6:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1b0da:	f008 fa8e 	bl	235fa <assert_print>
   1b0de:	480b      	ldr	r0, [pc, #44]	; (1b10c <net_buf_frag_add+0x44>)
   1b0e0:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1b0e4:	f008 fa82 	bl	235ec <assert_post_action>

	if (!head) {
   1b0e8:	b920      	cbnz	r0, 1b0f4 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1b0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1b0ee:	4608      	mov	r0, r1
   1b0f0:	f7ff bf8c 	b.w	1b00c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b0f4:	f7ff ffa2 	bl	1b03c <net_buf_frag_last>
   1b0f8:	4621      	mov	r1, r4
   1b0fa:	f7ff ffb9 	bl	1b070 <net_buf_frag_insert>
}
   1b0fe:	4628      	mov	r0, r5
   1b100:	bd38      	pop	{r3, r4, r5, pc}
   1b102:	bf00      	nop
   1b104:	000294a0 	.word	0x000294a0
   1b108:	00026f1a 	.word	0x00026f1a
   1b10c:	00029427 	.word	0x00029427

0001b110 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1b110:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b112:	b948      	cbnz	r0, 1b128 <net_buf_simple_reserve+0x18>
   1b114:	490b      	ldr	r1, [pc, #44]	; (1b144 <net_buf_simple_reserve+0x34>)
   1b116:	4a0c      	ldr	r2, [pc, #48]	; (1b148 <net_buf_simple_reserve+0x38>)
   1b118:	480c      	ldr	r0, [pc, #48]	; (1b14c <net_buf_simple_reserve+0x3c>)
   1b11a:	232b      	movs	r3, #43	; 0x2b
   1b11c:	f008 fa6d 	bl	235fa <assert_print>
   1b120:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   1b122:	4809      	ldr	r0, [pc, #36]	; (1b148 <net_buf_simple_reserve+0x38>)
   1b124:	f008 fa62 	bl	235ec <assert_post_action>
   1b128:	8883      	ldrh	r3, [r0, #4]
   1b12a:	b13b      	cbz	r3, 1b13c <net_buf_simple_reserve+0x2c>
   1b12c:	4908      	ldr	r1, [pc, #32]	; (1b150 <net_buf_simple_reserve+0x40>)
   1b12e:	4a06      	ldr	r2, [pc, #24]	; (1b148 <net_buf_simple_reserve+0x38>)
   1b130:	4806      	ldr	r0, [pc, #24]	; (1b14c <net_buf_simple_reserve+0x3c>)
   1b132:	232c      	movs	r3, #44	; 0x2c
   1b134:	f008 fa61 	bl	235fa <assert_print>
   1b138:	212c      	movs	r1, #44	; 0x2c
   1b13a:	e7f2      	b.n	1b122 <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b13c:	6883      	ldr	r3, [r0, #8]
   1b13e:	440b      	add	r3, r1
   1b140:	6003      	str	r3, [r0, #0]
}
   1b142:	bd08      	pop	{r3, pc}
   1b144:	000294a9 	.word	0x000294a9
   1b148:	000294ad 	.word	0x000294ad
   1b14c:	00026f1a 	.word	0x00026f1a
   1b150:	000294d8 	.word	0x000294d8

0001b154 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1b154:	b508      	push	{r3, lr}
   1b156:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b158:	6800      	ldr	r0, [r0, #0]
   1b15a:	689a      	ldr	r2, [r3, #8]
   1b15c:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1b15e:	4291      	cmp	r1, r2
   1b160:	d90b      	bls.n	1b17a <net_buf_simple_push+0x26>
   1b162:	4909      	ldr	r1, [pc, #36]	; (1b188 <net_buf_simple_push+0x34>)
   1b164:	4809      	ldr	r0, [pc, #36]	; (1b18c <net_buf_simple_push+0x38>)
   1b166:	4a0a      	ldr	r2, [pc, #40]	; (1b190 <net_buf_simple_push+0x3c>)
   1b168:	f240 132d 	movw	r3, #301	; 0x12d
   1b16c:	f008 fa45 	bl	235fa <assert_print>
   1b170:	4807      	ldr	r0, [pc, #28]	; (1b190 <net_buf_simple_push+0x3c>)
   1b172:	f240 112d 	movw	r1, #301	; 0x12d
   1b176:	f008 fa39 	bl	235ec <assert_post_action>
	buf->len += len;
   1b17a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1b17c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1b17e:	4411      	add	r1, r2
	buf->data -= len;
   1b180:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1b182:	8099      	strh	r1, [r3, #4]
}
   1b184:	bd08      	pop	{r3, pc}
   1b186:	bf00      	nop
   1b188:	000294f7 	.word	0x000294f7
   1b18c:	00026f1a 	.word	0x00026f1a
   1b190:	000294ad 	.word	0x000294ad

0001b194 <net_buf_simple_pull>:
{
   1b194:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1b196:	8882      	ldrh	r2, [r0, #4]
   1b198:	428a      	cmp	r2, r1
{
   1b19a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b19c:	d20b      	bcs.n	1b1b6 <net_buf_simple_pull+0x22>
   1b19e:	4909      	ldr	r1, [pc, #36]	; (1b1c4 <net_buf_simple_pull+0x30>)
   1b1a0:	4809      	ldr	r0, [pc, #36]	; (1b1c8 <net_buf_simple_pull+0x34>)
   1b1a2:	4a0a      	ldr	r2, [pc, #40]	; (1b1cc <net_buf_simple_pull+0x38>)
   1b1a4:	f240 138d 	movw	r3, #397	; 0x18d
   1b1a8:	f008 fa27 	bl	235fa <assert_print>
   1b1ac:	4807      	ldr	r0, [pc, #28]	; (1b1cc <net_buf_simple_pull+0x38>)
   1b1ae:	f240 118d 	movw	r1, #397	; 0x18d
   1b1b2:	f008 fa1b 	bl	235ec <assert_post_action>
	buf->len -= len;
   1b1b6:	1a52      	subs	r2, r2, r1
   1b1b8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1b1ba:	6800      	ldr	r0, [r0, #0]
   1b1bc:	4408      	add	r0, r1
   1b1be:	6018      	str	r0, [r3, #0]
}
   1b1c0:	bd08      	pop	{r3, pc}
   1b1c2:	bf00      	nop
   1b1c4:	000294e7 	.word	0x000294e7
   1b1c8:	00026f1a 	.word	0x00026f1a
   1b1cc:	000294ad 	.word	0x000294ad

0001b1d0 <net_buf_simple_pull_mem>:
{
   1b1d0:	b508      	push	{r3, lr}
   1b1d2:	4603      	mov	r3, r0
	void *data = buf->data;
   1b1d4:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1b1d6:	889a      	ldrh	r2, [r3, #4]
   1b1d8:	428a      	cmp	r2, r1
   1b1da:	d20b      	bcs.n	1b1f4 <net_buf_simple_pull_mem+0x24>
   1b1dc:	4908      	ldr	r1, [pc, #32]	; (1b200 <net_buf_simple_pull_mem+0x30>)
   1b1de:	4809      	ldr	r0, [pc, #36]	; (1b204 <net_buf_simple_pull_mem+0x34>)
   1b1e0:	4a09      	ldr	r2, [pc, #36]	; (1b208 <net_buf_simple_pull_mem+0x38>)
   1b1e2:	f240 1399 	movw	r3, #409	; 0x199
   1b1e6:	f008 fa08 	bl	235fa <assert_print>
   1b1ea:	4807      	ldr	r0, [pc, #28]	; (1b208 <net_buf_simple_pull_mem+0x38>)
   1b1ec:	f240 1199 	movw	r1, #409	; 0x199
   1b1f0:	f008 f9fc 	bl	235ec <assert_post_action>
	buf->len -= len;
   1b1f4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b1f6:	4401      	add	r1, r0
	buf->len -= len;
   1b1f8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b1fa:	6019      	str	r1, [r3, #0]
}
   1b1fc:	bd08      	pop	{r3, pc}
   1b1fe:	bf00      	nop
   1b200:	000294e7 	.word	0x000294e7
   1b204:	00026f1a 	.word	0x00026f1a
   1b208:	000294ad 	.word	0x000294ad

0001b20c <net_buf_simple_add>:
{
   1b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1b20e:	8885      	ldrh	r5, [r0, #4]
   1b210:	6803      	ldr	r3, [r0, #0]
   1b212:	460e      	mov	r6, r1
   1b214:	4604      	mov	r4, r0
   1b216:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1b218:	f009 fffb 	bl	25212 <net_buf_simple_tailroom>
   1b21c:	42b0      	cmp	r0, r6
   1b21e:	d209      	bcs.n	1b234 <net_buf_simple_add+0x28>
   1b220:	4906      	ldr	r1, [pc, #24]	; (1b23c <net_buf_simple_add+0x30>)
   1b222:	4807      	ldr	r0, [pc, #28]	; (1b240 <net_buf_simple_add+0x34>)
   1b224:	4a07      	ldr	r2, [pc, #28]	; (1b244 <net_buf_simple_add+0x38>)
   1b226:	233e      	movs	r3, #62	; 0x3e
   1b228:	f008 f9e7 	bl	235fa <assert_print>
   1b22c:	4805      	ldr	r0, [pc, #20]	; (1b244 <net_buf_simple_add+0x38>)
   1b22e:	213e      	movs	r1, #62	; 0x3e
   1b230:	f008 f9dc 	bl	235ec <assert_post_action>
	buf->len += len;
   1b234:	4435      	add	r5, r6
   1b236:	80a5      	strh	r5, [r4, #4]
}
   1b238:	4638      	mov	r0, r7
   1b23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b23c:	0002951b 	.word	0x0002951b
   1b240:	00026f1a 	.word	0x00026f1a
   1b244:	000294ad 	.word	0x000294ad

0001b248 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1b248:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b24a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1b24c:	490a      	ldr	r1, [pc, #40]	; (1b278 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b24e:	4a0b      	ldr	r2, [pc, #44]	; (1b27c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1b250:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b252:	2340      	movs	r3, #64	; 0x40
   1b254:	9300      	str	r3, [sp, #0]
   1b256:	1149      	asrs	r1, r1, #5
{
   1b258:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1b25a:	4623      	mov	r3, r4
   1b25c:	4808      	ldr	r0, [pc, #32]	; (1b280 <onoff_start+0x38>)
   1b25e:	f00a f806 	bl	2526e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1b262:	1e01      	subs	r1, r0, #0
   1b264:	da05      	bge.n	1b272 <onoff_start+0x2a>
		notify(mgr, err);
   1b266:	4628      	mov	r0, r5
   1b268:	4623      	mov	r3, r4
	}
}
   1b26a:	b003      	add	sp, #12
   1b26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1b270:	4718      	bx	r3
}
   1b272:	b003      	add	sp, #12
   1b274:	bd30      	pop	{r4, r5, pc}
   1b276:	bf00      	nop
   1b278:	20002d28 	.word	0x20002d28
   1b27c:	000252d9 	.word	0x000252d9
   1b280:	00026008 	.word	0x00026008

0001b284 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b284:	b2c9      	uxtb	r1, r1
   1b286:	2901      	cmp	r1, #1
{
   1b288:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b28a:	d909      	bls.n	1b2a0 <get_status+0x1c>
   1b28c:	4908      	ldr	r1, [pc, #32]	; (1b2b0 <get_status+0x2c>)
   1b28e:	4809      	ldr	r0, [pc, #36]	; (1b2b4 <get_status+0x30>)
   1b290:	4a09      	ldr	r2, [pc, #36]	; (1b2b8 <get_status+0x34>)
   1b292:	237a      	movs	r3, #122	; 0x7a
   1b294:	f008 f9b1 	bl	235fa <assert_print>
   1b298:	4807      	ldr	r0, [pc, #28]	; (1b2b8 <get_status+0x34>)
   1b29a:	217a      	movs	r1, #122	; 0x7a
   1b29c:	f008 f9a6 	bl	235ec <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1b2a0:	6903      	ldr	r3, [r0, #16]
   1b2a2:	220c      	movs	r2, #12
   1b2a4:	fb01 3302 	mla	r3, r1, r2, r3
   1b2a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1b2aa:	f000 0007 	and.w	r0, r0, #7
   1b2ae:	bd08      	pop	{r3, pc}
   1b2b0:	0002958b 	.word	0x0002958b
   1b2b4:	00026f1a 	.word	0x00026f1a
   1b2b8:	0002954e 	.word	0x0002954e

0001b2bc <stop>:
{
   1b2bc:	b570      	push	{r4, r5, r6, lr}
   1b2be:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b2c0:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1b2c2:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1b2c4:	d90b      	bls.n	1b2de <stop+0x22>
   1b2c6:	4919      	ldr	r1, [pc, #100]	; (1b32c <stop+0x70>)
   1b2c8:	4819      	ldr	r0, [pc, #100]	; (1b330 <stop+0x74>)
   1b2ca:	4a1a      	ldr	r2, [pc, #104]	; (1b334 <stop+0x78>)
   1b2cc:	f240 135d 	movw	r3, #349	; 0x15d
   1b2d0:	f008 f993 	bl	235fa <assert_print>
   1b2d4:	4817      	ldr	r0, [pc, #92]	; (1b334 <stop+0x78>)
   1b2d6:	f240 115d 	movw	r1, #349	; 0x15d
   1b2da:	f008 f987 	bl	235ec <assert_post_action>
	__asm__ volatile(
   1b2de:	f04f 0440 	mov.w	r4, #64	; 0x40
   1b2e2:	f3ef 8511 	mrs	r5, BASEPRI
   1b2e6:	f384 8812 	msr	BASEPRI_MAX, r4
   1b2ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b2ee:	260c      	movs	r6, #12
   1b2f0:	fb06 3401 	mla	r4, r6, r1, r3
   1b2f4:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1b2f6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1b2fa:	d008      	beq.n	1b30e <stop+0x52>
   1b2fc:	42a2      	cmp	r2, r4
   1b2fe:	d006      	beq.n	1b30e <stop+0x52>
	__asm__ volatile(
   1b300:	f385 8811 	msr	BASEPRI, r5
   1b304:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1b308:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b30c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1b30e:	4371      	muls	r1, r6
   1b310:	440b      	add	r3, r1
   1b312:	2201      	movs	r2, #1
   1b314:	649a      	str	r2, [r3, #72]	; 0x48
   1b316:	f385 8811 	msr	BASEPRI, r5
   1b31a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1b31e:	6843      	ldr	r3, [r0, #4]
   1b320:	440b      	add	r3, r1
   1b322:	685b      	ldr	r3, [r3, #4]
   1b324:	4798      	blx	r3
	return 0;
   1b326:	2000      	movs	r0, #0
   1b328:	e7f0      	b.n	1b30c <stop+0x50>
   1b32a:	bf00      	nop
   1b32c:	0002958b 	.word	0x0002958b
   1b330:	00026f1a 	.word	0x00026f1a
   1b334:	0002954e 	.word	0x0002954e

0001b338 <onoff_stop>:
{
   1b338:	b570      	push	{r4, r5, r6, lr}
   1b33a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1b33c:	4906      	ldr	r1, [pc, #24]	; (1b358 <onoff_stop+0x20>)
   1b33e:	1a41      	subs	r1, r0, r1
{
   1b340:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1b342:	1149      	asrs	r1, r1, #5
   1b344:	4805      	ldr	r0, [pc, #20]	; (1b35c <onoff_stop+0x24>)
   1b346:	2240      	movs	r2, #64	; 0x40
   1b348:	f7ff ffb8 	bl	1b2bc <stop>
	notify(mgr, res);
   1b34c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1b34e:	4601      	mov	r1, r0
	notify(mgr, res);
   1b350:	4620      	mov	r0, r4
}
   1b352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1b356:	4718      	bx	r3
   1b358:	20002d28 	.word	0x20002d28
   1b35c:	00026008 	.word	0x00026008

0001b360 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b360:	2200      	movs	r2, #0
{
   1b362:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b364:	2101      	movs	r1, #1
{
   1b366:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1b368:	4610      	mov	r0, r2
   1b36a:	f7f8 fe6f 	bl	1404c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1b36e:	480f      	ldr	r0, [pc, #60]	; (1b3ac <clk_init+0x4c>)
   1b370:	f002 fea6 	bl	1e0c0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1b374:	4b0e      	ldr	r3, [pc, #56]	; (1b3b0 <clk_init+0x50>)
   1b376:	4298      	cmp	r0, r3
   1b378:	d115      	bne.n	1b3a6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1b37a:	f00a fb3e 	bl	259fa <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1b37e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1b380:	490c      	ldr	r1, [pc, #48]	; (1b3b4 <clk_init+0x54>)
   1b382:	4630      	mov	r0, r6
   1b384:	f008 f8ae 	bl	234e4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1b388:	2800      	cmp	r0, #0
   1b38a:	db0b      	blt.n	1b3a4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b38c:	2501      	movs	r5, #1
   1b38e:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1b390:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1b392:	4908      	ldr	r1, [pc, #32]	; (1b3b4 <clk_init+0x54>)
   1b394:	f104 0020 	add.w	r0, r4, #32
   1b398:	f008 f8a4 	bl	234e4 <onoff_manager_init>
		if (err < 0) {
   1b39c:	2800      	cmp	r0, #0
   1b39e:	db01      	blt.n	1b3a4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1b3a0:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1b3a2:	2000      	movs	r0, #0
}
   1b3a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1b3a6:	f06f 0004 	mvn.w	r0, #4
   1b3aa:	e7fb      	b.n	1b3a4 <clk_init+0x44>
   1b3ac:	0001b3ed 	.word	0x0001b3ed
   1b3b0:	0bad0000 	.word	0x0bad0000
   1b3b4:	000268bc 	.word	0x000268bc

0001b3b8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1b3b8:	b570      	push	{r4, r5, r6, lr}
   1b3ba:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1b3bc:	230c      	movs	r3, #12
   1b3be:	4809      	ldr	r0, [pc, #36]	; (1b3e4 <clkstarted_handle.constprop.0+0x2c>)
   1b3c0:	434b      	muls	r3, r1
   1b3c2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1b3c4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1b3c8:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1b3ca:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1b3cc:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1b3ce:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1b3d0:	f009 ff3a 	bl	25248 <set_on_state>
	if (callback) {
   1b3d4:	b12d      	cbz	r5, 1b3e2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b3d6:	4632      	mov	r2, r6
   1b3d8:	462b      	mov	r3, r5
   1b3da:	4803      	ldr	r0, [pc, #12]	; (1b3e8 <clkstarted_handle.constprop.0+0x30>)
}
   1b3dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1b3e0:	4718      	bx	r3
}
   1b3e2:	bd70      	pop	{r4, r5, r6, pc}
   1b3e4:	20002d28 	.word	0x20002d28
   1b3e8:	00026008 	.word	0x00026008

0001b3ec <clock_event_handler>:
	switch (event) {
   1b3ec:	2801      	cmp	r0, #1
{
   1b3ee:	b508      	push	{r3, lr}
	switch (event) {
   1b3f0:	d006      	beq.n	1b400 <clock_event_handler+0x14>
   1b3f2:	2803      	cmp	r0, #3
   1b3f4:	d008      	beq.n	1b408 <clock_event_handler+0x1c>
   1b3f6:	b998      	cbnz	r0, 1b420 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1b3f8:	4b0f      	ldr	r3, [pc, #60]	; (1b438 <clock_event_handler+0x4c>)
   1b3fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b3fc:	075b      	lsls	r3, r3, #29
   1b3fe:	d119      	bne.n	1b434 <clock_event_handler+0x48>
}
   1b400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1b404:	f7ff bfd8 	b.w	1b3b8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1b408:	490c      	ldr	r1, [pc, #48]	; (1b43c <clock_event_handler+0x50>)
   1b40a:	4a0d      	ldr	r2, [pc, #52]	; (1b440 <clock_event_handler+0x54>)
   1b40c:	480d      	ldr	r0, [pc, #52]	; (1b444 <clock_event_handler+0x58>)
   1b40e:	f240 236e 	movw	r3, #622	; 0x26e
   1b412:	f008 f8f2 	bl	235fa <assert_print>
   1b416:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1b41a:	4809      	ldr	r0, [pc, #36]	; (1b440 <clock_event_handler+0x54>)
   1b41c:	f008 f8e6 	bl	235ec <assert_post_action>
   1b420:	4906      	ldr	r1, [pc, #24]	; (1b43c <clock_event_handler+0x50>)
   1b422:	4a07      	ldr	r2, [pc, #28]	; (1b440 <clock_event_handler+0x54>)
   1b424:	4807      	ldr	r0, [pc, #28]	; (1b444 <clock_event_handler+0x58>)
   1b426:	f240 2372 	movw	r3, #626	; 0x272
   1b42a:	f008 f8e6 	bl	235fa <assert_print>
   1b42e:	f240 2172 	movw	r1, #626	; 0x272
   1b432:	e7f2      	b.n	1b41a <clock_event_handler+0x2e>
}
   1b434:	bd08      	pop	{r3, pc}
   1b436:	bf00      	nop
   1b438:	20002d28 	.word	0x20002d28
   1b43c:	00029a2c 	.word	0x00029a2c
   1b440:	0002954e 	.word	0x0002954e
   1b444:	00026f1a 	.word	0x00026f1a

0001b448 <generic_hfclk_start>:
{
   1b448:	b508      	push	{r3, lr}
	__asm__ volatile(
   1b44a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b44e:	f3ef 8111 	mrs	r1, BASEPRI
   1b452:	f383 8812 	msr	BASEPRI_MAX, r3
   1b456:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1b45a:	4a12      	ldr	r2, [pc, #72]	; (1b4a4 <generic_hfclk_start+0x5c>)
   1b45c:	6813      	ldr	r3, [r2, #0]
   1b45e:	f043 0002 	orr.w	r0, r3, #2
   1b462:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1b464:	07da      	lsls	r2, r3, #31
   1b466:	d408      	bmi.n	1b47a <generic_hfclk_start+0x32>
	__asm__ volatile(
   1b468:	f381 8811 	msr	BASEPRI, r1
   1b46c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1b470:	2001      	movs	r0, #1
}
   1b472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b476:	f002 bddd 	b.w	1e034 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1b47a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b47e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1b482:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1b486:	07d3      	lsls	r3, r2, #31
   1b488:	d5ee      	bpl.n	1b468 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1b48a:	4807      	ldr	r0, [pc, #28]	; (1b4a8 <generic_hfclk_start+0x60>)
   1b48c:	f009 fedc 	bl	25248 <set_on_state>
   1b490:	f381 8811 	msr	BASEPRI, r1
   1b494:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1b498:	2000      	movs	r0, #0
}
   1b49a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1b49e:	f7ff bf8b 	b.w	1b3b8 <clkstarted_handle.constprop.0>
   1b4a2:	bf00      	nop
   1b4a4:	20002d80 	.word	0x20002d80
   1b4a8:	20002d70 	.word	0x20002d70

0001b4ac <api_blocking_start>:
{
   1b4ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b4ae:	2200      	movs	r2, #0
   1b4b0:	2301      	movs	r3, #1
   1b4b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b4b6:	ab04      	add	r3, sp, #16
   1b4b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b4bc:	4a09      	ldr	r2, [pc, #36]	; (1b4e4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b4be:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b4c2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1b4c4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1b4c8:	f009 feff 	bl	252ca <api_start>
	if (err < 0) {
   1b4cc:	2800      	cmp	r0, #0
   1b4ce:	db05      	blt.n	1b4dc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1b4d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1b4d4:	2300      	movs	r3, #0
   1b4d6:	4668      	mov	r0, sp
   1b4d8:	f004 fba8 	bl	1fc2c <z_impl_k_sem_take>
}
   1b4dc:	b007      	add	sp, #28
   1b4de:	f85d fb04 	ldr.w	pc, [sp], #4
   1b4e2:	bf00      	nop
   1b4e4:	000252eb 	.word	0x000252eb

0001b4e8 <lfclk_start>:
{
   1b4e8:	b510      	push	{r4, lr}
	if (!once) {
   1b4ea:	4c07      	ldr	r4, [pc, #28]	; (1b508 <lfclk_start+0x20>)
   1b4ec:	7823      	ldrb	r3, [r4, #0]
   1b4ee:	b92b      	cbnz	r3, 1b4fc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1b4f0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1b4f4:	f00a fc3b 	bl	25d6e <z_impl_k_busy_wait>
		once = true;
   1b4f8:	2301      	movs	r3, #1
   1b4fa:	7023      	strb	r3, [r4, #0]
}
   1b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b500:	2000      	movs	r0, #0
   1b502:	f002 bd97 	b.w	1e034 <nrfx_clock_start>
   1b506:	bf00      	nop
   1b508:	20003000 	.word	0x20003000

0001b50c <generic_hfclk_stop>:
{
   1b50c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b50e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b512:	f3ef 8411 	mrs	r4, BASEPRI
   1b516:	f383 8812 	msr	BASEPRI_MAX, r3
   1b51a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1b51e:	4a07      	ldr	r2, [pc, #28]	; (1b53c <generic_hfclk_stop+0x30>)
   1b520:	6813      	ldr	r3, [r2, #0]
   1b522:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1b526:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1b528:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1b52a:	d402      	bmi.n	1b532 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1b52c:	2001      	movs	r0, #1
   1b52e:	f002 fda9 	bl	1e084 <nrfx_clock_stop>
	__asm__ volatile(
   1b532:	f384 8811 	msr	BASEPRI, r4
   1b536:	f3bf 8f6f 	isb	sy
}
   1b53a:	bd10      	pop	{r4, pc}
   1b53c:	20002d80 	.word	0x20002d80

0001b540 <z_nrf_clock_control_lf_on>:
{
   1b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b544:	4945      	ldr	r1, [pc, #276]	; (1b65c <z_nrf_clock_control_lf_on+0x11c>)
   1b546:	f3bf 8f5b 	dmb	ish
   1b54a:	4606      	mov	r6, r0
   1b54c:	2201      	movs	r2, #1
   1b54e:	e851 3f00 	ldrex	r3, [r1]
   1b552:	e841 2000 	strex	r0, r2, [r1]
   1b556:	2800      	cmp	r0, #0
   1b558:	d1f9      	bne.n	1b54e <z_nrf_clock_control_lf_on+0xe>
   1b55a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1b55e:	b9a3      	cbnz	r3, 1b58a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1b560:	493f      	ldr	r1, [pc, #252]	; (1b660 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   1b562:	4840      	ldr	r0, [pc, #256]	; (1b664 <z_nrf_clock_control_lf_on+0x124>)
   1b564:	604b      	str	r3, [r1, #4]
   1b566:	60cb      	str	r3, [r1, #12]
   1b568:	608a      	str	r2, [r1, #8]
   1b56a:	f7f6 fc77 	bl	11e5c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1b56e:	2800      	cmp	r0, #0
   1b570:	da0b      	bge.n	1b58a <z_nrf_clock_control_lf_on+0x4a>
   1b572:	493d      	ldr	r1, [pc, #244]	; (1b668 <z_nrf_clock_control_lf_on+0x128>)
   1b574:	4a3d      	ldr	r2, [pc, #244]	; (1b66c <z_nrf_clock_control_lf_on+0x12c>)
   1b576:	483e      	ldr	r0, [pc, #248]	; (1b670 <z_nrf_clock_control_lf_on+0x130>)
   1b578:	f44f 730c 	mov.w	r3, #560	; 0x230
   1b57c:	f008 f83d 	bl	235fa <assert_print>
   1b580:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1b584:	4839      	ldr	r0, [pc, #228]	; (1b66c <z_nrf_clock_control_lf_on+0x12c>)
   1b586:	f008 f831 	bl	235ec <assert_post_action>
	switch (start_mode) {
   1b58a:	b376      	cbz	r6, 1b5ea <z_nrf_clock_control_lf_on+0xaa>
   1b58c:	1e73      	subs	r3, r6, #1
   1b58e:	2b01      	cmp	r3, #1
   1b590:	d859      	bhi.n	1b646 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1b592:	2e01      	cmp	r6, #1
   1b594:	d107      	bne.n	1b5a6 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1b596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b59a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1b59e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1b5a2:	2b01      	cmp	r3, #1
   1b5a4:	d021      	beq.n	1b5ea <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b5a6:	f00a fae4 	bl	25b72 <k_is_in_isr>
   1b5aa:	4605      	mov	r5, r0
   1b5ac:	b9f8      	cbnz	r0, 1b5ee <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
   1b5ae:	4b31      	ldr	r3, [pc, #196]	; (1b674 <z_nrf_clock_control_lf_on+0x134>)
   1b5b0:	781b      	ldrb	r3, [r3, #0]
   1b5b2:	b1e3      	cbz	r3, 1b5ee <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
   1b5b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b5b8:	2202      	movs	r2, #2
   1b5ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1b5be:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b5c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1b678 <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1b5c4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1b5c8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1b5cc:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1b5d0:	03d2      	lsls	r2, r2, #15
   1b5d2:	d516      	bpl.n	1b602 <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1b5d4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1b5d8:	2b01      	cmp	r3, #1
   1b5da:	d001      	beq.n	1b5e0 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1b5dc:	2e01      	cmp	r6, #1
   1b5de:	d110      	bne.n	1b602 <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
   1b5e0:	b35d      	cbz	r5, 1b63a <z_nrf_clock_control_lf_on+0xfa>
   1b5e2:	f387 8811 	msr	BASEPRI, r7
   1b5e6:	f3bf 8f6f 	isb	sy
}
   1b5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1b5ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5f2:	f3ef 8711 	mrs	r7, BASEPRI
   1b5f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5fa:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1b5fe:	2501      	movs	r5, #1
   1b600:	e7de      	b.n	1b5c0 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1b602:	b1ad      	cbz	r5, 1b630 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1b604:	4638      	mov	r0, r7
   1b606:	f7f8 fc7f 	bl	13f08 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1b60a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1b60e:	2b00      	cmp	r3, #0
   1b610:	d1da      	bne.n	1b5c8 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1b612:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1b616:	2a00      	cmp	r2, #0
   1b618:	d0d6      	beq.n	1b5c8 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b61a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1b61e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1b622:	2301      	movs	r3, #1
   1b624:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1b628:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b62c:	60a3      	str	r3, [r4, #8]
}
   1b62e:	e7cb      	b.n	1b5c8 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
   1b630:	2100      	movs	r1, #0
   1b632:	2021      	movs	r0, #33	; 0x21
   1b634:	f006 f908 	bl	21848 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1b638:	e7e7      	b.n	1b60a <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
   1b63a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b63e:	2202      	movs	r2, #2
   1b640:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b644:	e7d1      	b.n	1b5ea <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
   1b646:	490d      	ldr	r1, [pc, #52]	; (1b67c <z_nrf_clock_control_lf_on+0x13c>)
   1b648:	4a08      	ldr	r2, [pc, #32]	; (1b66c <z_nrf_clock_control_lf_on+0x12c>)
   1b64a:	4809      	ldr	r0, [pc, #36]	; (1b670 <z_nrf_clock_control_lf_on+0x130>)
   1b64c:	f240 2342 	movw	r3, #578	; 0x242
   1b650:	f007 ffd3 	bl	235fa <assert_print>
   1b654:	f240 2142 	movw	r1, #578	; 0x242
   1b658:	e794      	b.n	1b584 <z_nrf_clock_control_lf_on+0x44>
   1b65a:	bf00      	nop
   1b65c:	20002d24 	.word	0x20002d24
   1b660:	20002d14 	.word	0x20002d14
   1b664:	20002d48 	.word	0x20002d48
   1b668:	00027659 	.word	0x00027659
   1b66c:	0002954e 	.word	0x0002954e
   1b670:	00026f1a 	.word	0x00026f1a
   1b674:	20003508 	.word	0x20003508
   1b678:	e000e100 	.word	0xe000e100
   1b67c:	00029a2c 	.word	0x00029a2c

0001b680 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1b680:	b508      	push	{r3, lr}
   1b682:	4807      	ldr	r0, [pc, #28]	; (1b6a0 <uart_console_init+0x20>)
   1b684:	f00a fa48 	bl	25b18 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1b688:	b138      	cbz	r0, 1b69a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1b68a:	4806      	ldr	r0, [pc, #24]	; (1b6a4 <uart_console_init+0x24>)
   1b68c:	f7f9 fb3e 	bl	14d0c <__stdout_hook_install>
	__printk_hook_install(console_out);
   1b690:	4804      	ldr	r0, [pc, #16]	; (1b6a4 <uart_console_init+0x24>)
   1b692:	f7f6 f86d 	bl	11770 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1b696:	2000      	movs	r0, #0
}
   1b698:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1b69a:	f06f 0012 	mvn.w	r0, #18
   1b69e:	e7fb      	b.n	1b698 <uart_console_init+0x18>
   1b6a0:	00026068 	.word	0x00026068
   1b6a4:	0001b6a9 	.word	0x0001b6a9

0001b6a8 <console_out>:
	if ('\n' == c) {
   1b6a8:	280a      	cmp	r0, #10
{
   1b6aa:	b538      	push	{r3, r4, r5, lr}
   1b6ac:	4d07      	ldr	r5, [pc, #28]	; (1b6cc <console_out+0x24>)
   1b6ae:	4604      	mov	r4, r0
	if ('\n' == c) {
   1b6b0:	d104      	bne.n	1b6bc <console_out+0x14>
   1b6b2:	68ab      	ldr	r3, [r5, #8]
   1b6b4:	210d      	movs	r1, #13
   1b6b6:	69db      	ldr	r3, [r3, #28]
   1b6b8:	4628      	mov	r0, r5
   1b6ba:	4798      	blx	r3
   1b6bc:	68ab      	ldr	r3, [r5, #8]
   1b6be:	4803      	ldr	r0, [pc, #12]	; (1b6cc <console_out+0x24>)
   1b6c0:	69db      	ldr	r3, [r3, #28]
   1b6c2:	b2e1      	uxtb	r1, r4
   1b6c4:	4798      	blx	r3
}
   1b6c6:	4620      	mov	r0, r4
   1b6c8:	bd38      	pop	{r3, r4, r5, pc}
   1b6ca:	bf00      	nop
   1b6cc:	00026068 	.word	0x00026068

0001b6d0 <random_byte_get>:
   1b6d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6d4:	f3ef 8211 	mrs	r2, BASEPRI
   1b6d8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6dc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b6e0:	4b09      	ldr	r3, [pc, #36]	; (1b708 <random_byte_get+0x38>)
   1b6e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1b6e6:	b161      	cbz	r1, 1b702 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b6e8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1b6ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b6ee:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1b6f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1b6f6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1b6f8:	f382 8811 	msr	BASEPRI, r2
   1b6fc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1b700:	4770      	bx	lr
	int retval = -EAGAIN;
   1b702:	f06f 000a 	mvn.w	r0, #10
   1b706:	e7f7      	b.n	1b6f8 <random_byte_get+0x28>
   1b708:	4000d000 	.word	0x4000d000

0001b70c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1b70c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b70e:	4603      	mov	r3, r0
   1b710:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1b712:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1b714:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1b718:	f04f 0540 	mov.w	r5, #64	; 0x40
   1b71c:	f3ef 8211 	mrs	r2, BASEPRI
   1b720:	f385 8812 	msr	BASEPRI_MAX, r5
   1b724:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1b728:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1b72a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1b72e:	1be4      	subs	r4, r4, r7
   1b730:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1b734:	42a0      	cmp	r0, r4
		len = available;
   1b736:	bf88      	it	hi
   1b738:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1b73a:	183e      	adds	r6, r7, r0
   1b73c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1b740:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1b742:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1b744:	f382 8811 	msr	BASEPRI, r2
   1b748:	f3bf 8f6f 	isb	sy
   1b74c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1b74e:	428a      	cmp	r2, r1
   1b750:	d117      	bne.n	1b782 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1b752:	4577      	cmp	r7, lr
   1b754:	d10d      	bne.n	1b772 <rng_pool_get+0x66>
	__asm__ volatile(
   1b756:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b75a:	f3ef 8211 	mrs	r2, BASEPRI
   1b75e:	f381 8812 	msr	BASEPRI_MAX, r1
   1b762:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1b766:	7819      	ldrb	r1, [r3, #0]
   1b768:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1b76a:	f382 8811 	msr	BASEPRI, r2
   1b76e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1b772:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1b774:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1b776:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b778:	bf22      	ittt	cs
   1b77a:	4b06      	ldrcs	r3, [pc, #24]	; (1b794 <rng_pool_get+0x88>)
   1b77c:	2201      	movcs	r2, #1
   1b77e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1b780:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1b782:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1b784:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1b786:	7976      	ldrb	r6, [r6, #5]
   1b788:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1b78c:	ea05 050c 	and.w	r5, r5, ip
   1b790:	e7dd      	b.n	1b74e <rng_pool_get+0x42>
   1b792:	bf00      	nop
   1b794:	4000d000 	.word	0x4000d000

0001b798 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1b798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1b79c:	4d2e      	ldr	r5, [pc, #184]	; (1b858 <entropy_nrf5_get_entropy_isr+0xc0>)
   1b79e:	6900      	ldr	r0, [r0, #16]
   1b7a0:	42a8      	cmp	r0, r5
{
   1b7a2:	460e      	mov	r6, r1
   1b7a4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1b7a6:	d00b      	beq.n	1b7c0 <entropy_nrf5_get_entropy_isr+0x28>
   1b7a8:	492c      	ldr	r1, [pc, #176]	; (1b85c <entropy_nrf5_get_entropy_isr+0xc4>)
   1b7aa:	482d      	ldr	r0, [pc, #180]	; (1b860 <entropy_nrf5_get_entropy_isr+0xc8>)
   1b7ac:	4a2d      	ldr	r2, [pc, #180]	; (1b864 <entropy_nrf5_get_entropy_isr+0xcc>)
   1b7ae:	f240 1307 	movw	r3, #263	; 0x107
   1b7b2:	f007 ff22 	bl	235fa <assert_print>
   1b7b6:	482b      	ldr	r0, [pc, #172]	; (1b864 <entropy_nrf5_get_entropy_isr+0xcc>)
   1b7b8:	f240 1107 	movw	r1, #263	; 0x107
   1b7bc:	f007 ff16 	bl	235ec <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1b7c0:	43db      	mvns	r3, r3
   1b7c2:	f013 0501 	ands.w	r5, r3, #1
   1b7c6:	d004      	beq.n	1b7d2 <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1b7c8:	3030      	adds	r0, #48	; 0x30
   1b7ca:	f7ff ff9f 	bl	1b70c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1b7d2:	b3a2      	cbz	r2, 1b83e <entropy_nrf5_get_entropy_isr+0xa6>
	__asm__ volatile(
   1b7d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7d8:	f3ef 8811 	mrs	r8, BASEPRI
   1b7dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7e0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1b7e4:	200d      	movs	r0, #13
   1b7e6:	f7f8 fc23 	bl	14030 <arch_irq_is_enabled>
   1b7ea:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1b7ec:	200d      	movs	r0, #13
   1b7ee:	f7f8 fc0b 	bl	14008 <arch_irq_disable>
	__asm__ volatile(
   1b7f2:	f388 8811 	msr	BASEPRI, r8
   1b7f6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b7fa:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1b868 <entropy_nrf5_get_entropy_isr+0xd0>
   1b7fe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1b86c <entropy_nrf5_get_entropy_isr+0xd4>
   1b802:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1b806:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1b80a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b80e:	2301      	movs	r3, #1
   1b810:	f8ca 3000 	str.w	r3, [sl]
   1b814:	4625      	mov	r5, r4
   1b816:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1b81a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1b81e:	b183      	cbz	r3, 1b842 <entropy_nrf5_get_entropy_isr+0xaa>
			byte = random_byte_get();
   1b820:	f7ff ff56 	bl	1b6d0 <random_byte_get>
			if (byte < 0) {
   1b824:	1e03      	subs	r3, r0, #0
   1b826:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1b82a:	dbf6      	blt.n	1b81a <entropy_nrf5_get_entropy_isr+0x82>
			buf[--len] = byte;
   1b82c:	3d01      	subs	r5, #1
   1b82e:	b2ad      	uxth	r5, r5
   1b830:	5573      	strb	r3, [r6, r5]
		} while (len);
   1b832:	2d00      	cmp	r5, #0
   1b834:	d1f1      	bne.n	1b81a <entropy_nrf5_get_entropy_isr+0x82>
		if (irq_enabled) {
   1b836:	b117      	cbz	r7, 1b83e <entropy_nrf5_get_entropy_isr+0xa6>
			irq_enable(IRQN);
   1b838:	200d      	movs	r0, #13
   1b83a:	f7f8 fbd7 	bl	13fec <arch_irq_enable>
	return cnt;
   1b83e:	4620      	mov	r0, r4
   1b840:	e7c5      	b.n	1b7ce <entropy_nrf5_get_entropy_isr+0x36>
	__asm__ volatile(
   1b842:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b846:	f3ef 8011 	mrs	r0, BASEPRI
   1b84a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b84e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1b852:	f7f8 fb59 	bl	13f08 <arch_cpu_atomic_idle>
}
   1b856:	e7e0      	b.n	1b81a <entropy_nrf5_get_entropy_isr+0x82>
   1b858:	20002d84 	.word	0x20002d84
   1b85c:	0002960a 	.word	0x0002960a
   1b860:	00026f1a 	.word	0x00026f1a
   1b864:	000295d8 	.word	0x000295d8
   1b868:	4000d000 	.word	0x4000d000
   1b86c:	e000e100 	.word	0xe000e100

0001b870 <entropy_nrf5_get_entropy>:
{
   1b870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1b874:	4b19      	ldr	r3, [pc, #100]	; (1b8dc <entropy_nrf5_get_entropy+0x6c>)
   1b876:	6907      	ldr	r7, [r0, #16]
   1b878:	429f      	cmp	r7, r3
{
   1b87a:	460d      	mov	r5, r1
   1b87c:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1b87e:	d105      	bne.n	1b88c <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b880:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1b884:	b964      	cbnz	r4, 1b8a0 <entropy_nrf5_get_entropy+0x30>
}
   1b886:	4620      	mov	r0, r4
   1b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1b88c:	4914      	ldr	r1, [pc, #80]	; (1b8e0 <entropy_nrf5_get_entropy+0x70>)
   1b88e:	4815      	ldr	r0, [pc, #84]	; (1b8e4 <entropy_nrf5_get_entropy+0x74>)
   1b890:	4a15      	ldr	r2, [pc, #84]	; (1b8e8 <entropy_nrf5_get_entropy+0x78>)
   1b892:	23e9      	movs	r3, #233	; 0xe9
   1b894:	f007 feb1 	bl	235fa <assert_print>
   1b898:	4813      	ldr	r0, [pc, #76]	; (1b8e8 <entropy_nrf5_get_entropy+0x78>)
   1b89a:	21e9      	movs	r1, #233	; 0xe9
   1b89c:	f007 fea6 	bl	235ec <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1b8a0:	f04f 33ff 	mov.w	r3, #4294967295
   1b8a4:	f04f 32ff 	mov.w	r2, #4294967295
   1b8a8:	4638      	mov	r0, r7
   1b8aa:	f004 f9bf 	bl	1fc2c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1b8ae:	4622      	mov	r2, r4
   1b8b0:	4629      	mov	r1, r5
   1b8b2:	4640      	mov	r0, r8
   1b8b4:	f7ff ff2a 	bl	1b70c <rng_pool_get>
   1b8b8:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1b8ba:	4638      	mov	r0, r7
   1b8bc:	f004 f972 	bl	1fba4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1b8c0:	b93e      	cbnz	r6, 1b8d2 <entropy_nrf5_get_entropy+0x62>
	return z_impl_k_sem_take(sem, timeout);
   1b8c2:	f04f 32ff 	mov.w	r2, #4294967295
   1b8c6:	f04f 33ff 	mov.w	r3, #4294967295
   1b8ca:	4808      	ldr	r0, [pc, #32]	; (1b8ec <entropy_nrf5_get_entropy+0x7c>)
   1b8cc:	f004 f9ae 	bl	1fc2c <z_impl_k_sem_take>
	while (len) {
   1b8d0:	e7e6      	b.n	1b8a0 <entropy_nrf5_get_entropy+0x30>
		len -= bytes;
   1b8d2:	1ba4      	subs	r4, r4, r6
   1b8d4:	b2a4      	uxth	r4, r4
		buf += bytes;
   1b8d6:	4435      	add	r5, r6
   1b8d8:	e7d4      	b.n	1b884 <entropy_nrf5_get_entropy+0x14>
   1b8da:	bf00      	nop
   1b8dc:	20002d84 	.word	0x20002d84
   1b8e0:	0002960a 	.word	0x0002960a
   1b8e4:	00026f1a 	.word	0x00026f1a
   1b8e8:	000295d8 	.word	0x000295d8
   1b8ec:	20002d9c 	.word	0x20002d9c

0001b8f0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1b8f0:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1b8f2:	4b21      	ldr	r3, [pc, #132]	; (1b978 <entropy_nrf5_init+0x88>)
   1b8f4:	6904      	ldr	r4, [r0, #16]
   1b8f6:	429c      	cmp	r4, r3
   1b8f8:	d00b      	beq.n	1b912 <entropy_nrf5_init+0x22>
   1b8fa:	4920      	ldr	r1, [pc, #128]	; (1b97c <entropy_nrf5_init+0x8c>)
   1b8fc:	4820      	ldr	r0, [pc, #128]	; (1b980 <entropy_nrf5_init+0x90>)
   1b8fe:	4a21      	ldr	r2, [pc, #132]	; (1b984 <entropy_nrf5_init+0x94>)
   1b900:	f240 134b 	movw	r3, #331	; 0x14b
   1b904:	f007 fe79 	bl	235fa <assert_print>
   1b908:	481e      	ldr	r0, [pc, #120]	; (1b984 <entropy_nrf5_init+0x94>)
   1b90a:	f240 114b 	movw	r1, #331	; 0x14b
   1b90e:	f007 fe6d 	bl	235ec <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b912:	2201      	movs	r2, #1
   1b914:	4611      	mov	r1, r2
   1b916:	4620      	mov	r0, r4
   1b918:	f00a f979 	bl	25c0e <z_impl_k_sem_init>
   1b91c:	2201      	movs	r2, #1
   1b91e:	2100      	movs	r1, #0
   1b920:	f104 0018 	add.w	r0, r4, #24
   1b924:	f00a f973 	bl	25c0e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1b928:	f240 4307 	movw	r3, #1031	; 0x407
   1b92c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1b930:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1b934:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1b936:	230c      	movs	r3, #12
   1b938:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1b93c:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1b93e:	4b12      	ldr	r3, [pc, #72]	; (1b988 <entropy_nrf5_init+0x98>)
   1b940:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1b944:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1b948:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1b94c:	f022 0201 	bic.w	r2, r2, #1
   1b950:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1b954:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1b956:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1b95a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1b95e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1b962:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b964:	6019      	str	r1, [r3, #0]
   1b966:	200d      	movs	r0, #13
   1b968:	f7f8 fb70 	bl	1404c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1b96c:	200d      	movs	r0, #13
   1b96e:	f7f8 fb3d 	bl	13fec <arch_irq_enable>

	return 0;
}
   1b972:	4628      	mov	r0, r5
   1b974:	bd38      	pop	{r3, r4, r5, pc}
   1b976:	bf00      	nop
   1b978:	20002d84 	.word	0x20002d84
   1b97c:	0002960a 	.word	0x0002960a
   1b980:	00026f1a 	.word	0x00026f1a
   1b984:	000295d8 	.word	0x000295d8
   1b988:	4000d000 	.word	0x4000d000

0001b98c <isr>:
{
   1b98c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1b98e:	f7ff fe9f 	bl	1b6d0 <random_byte_get>
	if (byte < 0) {
   1b992:	2800      	cmp	r0, #0
   1b994:	db20      	blt.n	1b9d8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1b996:	4b17      	ldr	r3, [pc, #92]	; (1b9f4 <isr+0x68>)
   1b998:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1b99c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1b9a0:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1b9a4:	1b14      	subs	r4, r2, r4
   1b9a6:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1b9aa:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1b9ac:	d10d      	bne.n	1b9ca <isr+0x3e>
	uint8_t last  = rngp->last;
   1b9ae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1b9b2:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1b9b6:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1b9ba:	1b14      	subs	r4, r2, r4
   1b9bc:	ea31 0404 	bics.w	r4, r1, r4
   1b9c0:	d10b      	bne.n	1b9da <isr+0x4e>
   1b9c2:	4b0d      	ldr	r3, [pc, #52]	; (1b9f8 <isr+0x6c>)
   1b9c4:	2201      	movs	r2, #1
   1b9c6:	605a      	str	r2, [r3, #4]
}
   1b9c8:	e00e      	b.n	1b9e8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1b9ca:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1b9cc:	3201      	adds	r2, #1
   1b9ce:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1b9d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1b9d4:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1b9d8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1b9da:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1b9dc:	3201      	adds	r2, #1
   1b9de:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1b9e0:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1b9e4:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1b9e8:	4804      	ldr	r0, [pc, #16]	; (1b9fc <isr+0x70>)
}
   1b9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b9ee:	f004 b8d9 	b.w	1fba4 <z_impl_k_sem_give>
   1b9f2:	bf00      	nop
   1b9f4:	20002d84 	.word	0x20002d84
   1b9f8:	4000d000 	.word	0x4000d000
   1b9fc:	20002d9c 	.word	0x20002d9c

0001ba00 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ba00:	b510      	push	{r4, lr}
	return port->data;
   1ba02:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ba04:	b961      	cbnz	r1, 1ba20 <gpio_nrfx_manage_callback+0x20>
   1ba06:	4920      	ldr	r1, [pc, #128]	; (1ba88 <gpio_nrfx_manage_callback+0x88>)
   1ba08:	4a20      	ldr	r2, [pc, #128]	; (1ba8c <gpio_nrfx_manage_callback+0x8c>)
   1ba0a:	4821      	ldr	r0, [pc, #132]	; (1ba90 <gpio_nrfx_manage_callback+0x90>)
   1ba0c:	232a      	movs	r3, #42	; 0x2a
   1ba0e:	f007 fdf4 	bl	235fa <assert_print>
   1ba12:	4820      	ldr	r0, [pc, #128]	; (1ba94 <gpio_nrfx_manage_callback+0x94>)
   1ba14:	f007 fdf1 	bl	235fa <assert_print>
   1ba18:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1ba1a:	481c      	ldr	r0, [pc, #112]	; (1ba8c <gpio_nrfx_manage_callback+0x8c>)
   1ba1c:	f007 fde6 	bl	235ec <assert_post_action>
   1ba20:	6848      	ldr	r0, [r1, #4]
   1ba22:	b950      	cbnz	r0, 1ba3a <gpio_nrfx_manage_callback+0x3a>
   1ba24:	491c      	ldr	r1, [pc, #112]	; (1ba98 <gpio_nrfx_manage_callback+0x98>)
   1ba26:	4a19      	ldr	r2, [pc, #100]	; (1ba8c <gpio_nrfx_manage_callback+0x8c>)
   1ba28:	4819      	ldr	r0, [pc, #100]	; (1ba90 <gpio_nrfx_manage_callback+0x90>)
   1ba2a:	232b      	movs	r3, #43	; 0x2b
   1ba2c:	f007 fde5 	bl	235fa <assert_print>
   1ba30:	481a      	ldr	r0, [pc, #104]	; (1ba9c <gpio_nrfx_manage_callback+0x9c>)
   1ba32:	f007 fde2 	bl	235fa <assert_print>
   1ba36:	212b      	movs	r1, #43	; 0x2b
   1ba38:	e7ef      	b.n	1ba1a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1ba3a:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1ba3c:	b1f8      	cbz	r0, 1ba7e <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba3e:	4288      	cmp	r0, r1
   1ba40:	d119      	bne.n	1ba76 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1ba42:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1ba44:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1ba46:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ba48:	42a1      	cmp	r1, r4
   1ba4a:	d100      	bne.n	1ba4e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1ba4c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1ba4e:	2000      	movs	r0, #0
   1ba50:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1ba52:	b12a      	cbz	r2, 1ba60 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1ba54:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ba56:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ba58:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ba5a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ba5c:	b902      	cbnz	r2, 1ba60 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1ba5e:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1ba60:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ba62:	e010      	b.n	1ba86 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba64:	4281      	cmp	r1, r0
   1ba66:	d106      	bne.n	1ba76 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1ba68:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1ba6a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ba6c:	6898      	ldr	r0, [r3, #8]
   1ba6e:	4281      	cmp	r1, r0
   1ba70:	d1ed      	bne.n	1ba4e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1ba72:	609c      	str	r4, [r3, #8]
}
   1ba74:	e7eb      	b.n	1ba4e <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1ba76:	4604      	mov	r4, r0
   1ba78:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ba7a:	2800      	cmp	r0, #0
   1ba7c:	d1f2      	bne.n	1ba64 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1ba7e:	2a00      	cmp	r2, #0
   1ba80:	d1e8      	bne.n	1ba54 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1ba82:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1ba86:	bd10      	pop	{r4, pc}
   1ba88:	00026e04 	.word	0x00026e04
   1ba8c:	00029649 	.word	0x00029649
   1ba90:	00026f1a 	.word	0x00026f1a
   1ba94:	00029685 	.word	0x00029685
   1ba98:	00029694 	.word	0x00029694
   1ba9c:	000296a6 	.word	0x000296a6

0001baa0 <gpio_nrfx_pin_interrupt_configure>:
{
   1baa0:	b530      	push	{r4, r5, lr}
	return port->config;
   1baa2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1baa4:	7b05      	ldrb	r5, [r0, #12]
   1baa6:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1baaa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1baae:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1bab0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1bab4:	d105      	bne.n	1bac2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1bab6:	4620      	mov	r0, r4
   1bab8:	f002 ff5e 	bl	1e978 <nrfx_gpiote_trigger_disable>
		return 0;
   1babc:	2000      	movs	r0, #0
}
   1babe:	b005      	add	sp, #20
   1bac0:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bac2:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bac4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bac8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1bacc:	d114      	bne.n	1baf8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1bace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bad2:	bf0c      	ite	eq
   1bad4:	2304      	moveq	r3, #4
   1bad6:	2305      	movne	r3, #5
   1bad8:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1badc:	2300      	movs	r3, #0
   1bade:	4619      	mov	r1, r3
   1bae0:	aa02      	add	r2, sp, #8
   1bae2:	4620      	mov	r0, r4
   1bae4:	f002 fd52 	bl	1e58c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1bae8:	4b27      	ldr	r3, [pc, #156]	; (1bb88 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1baea:	4298      	cmp	r0, r3
   1baec:	d148      	bne.n	1bb80 <gpio_nrfx_pin_interrupt_configure+0xe0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1baee:	2101      	movs	r1, #1
   1baf0:	4620      	mov	r0, r4
   1baf2:	f002 fed5 	bl	1e8a0 <nrfx_gpiote_trigger_enable>
	return 0;
   1baf6:	e7e1      	b.n	1babc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1baf8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1bafc:	d022      	beq.n	1bb44 <gpio_nrfx_pin_interrupt_configure+0xa4>
   1bafe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1bb02:	bf14      	ite	ne
   1bb04:	2301      	movne	r3, #1
   1bb06:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bb08:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1bb0c:	6883      	ldr	r3, [r0, #8]
   1bb0e:	40cb      	lsrs	r3, r1
   1bb10:	07d9      	lsls	r1, r3, #31
   1bb12:	d4e3      	bmi.n	1badc <gpio_nrfx_pin_interrupt_configure+0x3c>
   1bb14:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1bb18:	d1e0      	bne.n	1badc <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1bb1a:	0963      	lsrs	r3, r4, #5
   1bb1c:	d106      	bne.n	1bb2c <gpio_nrfx_pin_interrupt_configure+0x8c>
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1bb1e:	f004 031f 	and.w	r3, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1bb22:	f04f 32ff 	mov.w	r2, #4294967295
   1bb26:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1bb28:	07d2      	lsls	r2, r2, #31
   1bb2a:	d40d      	bmi.n	1bb48 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1bb2c:	4917      	ldr	r1, [pc, #92]	; (1bb8c <gpio_nrfx_pin_interrupt_configure+0xec>)
   1bb2e:	4818      	ldr	r0, [pc, #96]	; (1bb90 <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1bb30:	4a18      	ldr	r2, [pc, #96]	; (1bb94 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1bb32:	f240 2347 	movw	r3, #583	; 0x247
   1bb36:	f007 fd60 	bl	235fa <assert_print>
   1bb3a:	4816      	ldr	r0, [pc, #88]	; (1bb94 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1bb3c:	f240 2147 	movw	r1, #583	; 0x247
   1bb40:	f007 fd54 	bl	235ec <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1bb44:	2303      	movs	r3, #3
   1bb46:	e7df      	b.n	1bb08 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1bb48:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1bb4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1bb50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1bb54:	07db      	lsls	r3, r3, #31
   1bb56:	d4c1      	bmi.n	1badc <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1bb58:	f10d 0507 	add.w	r5, sp, #7
   1bb5c:	4629      	mov	r1, r5
   1bb5e:	4620      	mov	r0, r4
   1bb60:	f002 fe38 	bl	1e7d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1bb64:	4b0c      	ldr	r3, [pc, #48]	; (1bb98 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1bb66:	4298      	cmp	r0, r3
   1bb68:	d001      	beq.n	1bb6e <gpio_nrfx_pin_interrupt_configure+0xce>
		trigger_config.p_in_channel = &ch;
   1bb6a:	9503      	str	r5, [sp, #12]
   1bb6c:	e7b6      	b.n	1badc <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1bb6e:	4628      	mov	r0, r5
   1bb70:	f002 fe90 	bl	1e894 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1bb74:	4b04      	ldr	r3, [pc, #16]	; (1bb88 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1bb76:	4298      	cmp	r0, r3
   1bb78:	d0f7      	beq.n	1bb6a <gpio_nrfx_pin_interrupt_configure+0xca>
				return -ENOMEM;
   1bb7a:	f06f 000b 	mvn.w	r0, #11
   1bb7e:	e79e      	b.n	1babe <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1bb80:	f06f 0015 	mvn.w	r0, #21
   1bb84:	e79b      	b.n	1babe <gpio_nrfx_pin_interrupt_configure+0x1e>
   1bb86:	bf00      	nop
   1bb88:	0bad0000 	.word	0x0bad0000
   1bb8c:	000296f0 	.word	0x000296f0
   1bb90:	00026f1a 	.word	0x00026f1a
   1bb94:	000296bd 	.word	0x000296bd
   1bb98:	0bad0004 	.word	0x0bad0004

0001bb9c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1bb9c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1bb9e:	f002 fe69 	bl	1e874 <nrfx_gpiote_is_init>
   1bba2:	4604      	mov	r4, r0
   1bba4:	b968      	cbnz	r0, 1bbc2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1bba6:	f002 fe3d 	bl	1e824 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1bbaa:	4b08      	ldr	r3, [pc, #32]	; (1bbcc <gpio_nrfx_init+0x30>)
   1bbac:	4298      	cmp	r0, r3
   1bbae:	d10a      	bne.n	1bbc6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1bbb0:	4807      	ldr	r0, [pc, #28]	; (1bbd0 <gpio_nrfx_init+0x34>)
   1bbb2:	4621      	mov	r1, r4
   1bbb4:	f002 fe08 	bl	1e7c8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1bbb8:	4622      	mov	r2, r4
   1bbba:	2105      	movs	r1, #5
   1bbbc:	2006      	movs	r0, #6
   1bbbe:	f7f8 fa45 	bl	1404c <z_arm_irq_priority_set>
		return 0;
   1bbc2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1bbc4:	bd10      	pop	{r4, pc}
		return -EIO;
   1bbc6:	f06f 0004 	mvn.w	r0, #4
   1bbca:	e7fb      	b.n	1bbc4 <gpio_nrfx_init+0x28>
   1bbcc:	0bad0000 	.word	0x0bad0000
   1bbd0:	0001bbd5 	.word	0x0001bbd5

0001bbd4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1bbd4:	0943      	lsrs	r3, r0, #5
{
   1bbd6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1bbd8:	d107      	bne.n	1bbea <nrfx_gpio_handler+0x16>
	return list->head;
   1bbda:	4b12      	ldr	r3, [pc, #72]	; (1bc24 <nrfx_gpio_handler+0x50>)
   1bbdc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bbde:	b121      	cbz	r1, 1bbea <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1bbe0:	2501      	movs	r5, #1
	return node->next;
   1bbe2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1bbe4:	4e10      	ldr	r6, [pc, #64]	; (1bc28 <nrfx_gpio_handler+0x54>)
   1bbe6:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bbe8:	b901      	cbnz	r1, 1bbec <nrfx_gpio_handler+0x18>
}
   1bbea:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1bbec:	688a      	ldr	r2, [r1, #8]
   1bbee:	402a      	ands	r2, r5
   1bbf0:	d010      	beq.n	1bc14 <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
   1bbf2:	684b      	ldr	r3, [r1, #4]
   1bbf4:	b963      	cbnz	r3, 1bc10 <nrfx_gpio_handler+0x3c>
   1bbf6:	490d      	ldr	r1, [pc, #52]	; (1bc2c <nrfx_gpio_handler+0x58>)
   1bbf8:	4a0d      	ldr	r2, [pc, #52]	; (1bc30 <nrfx_gpio_handler+0x5c>)
   1bbfa:	480e      	ldr	r0, [pc, #56]	; (1bc34 <nrfx_gpio_handler+0x60>)
   1bbfc:	234d      	movs	r3, #77	; 0x4d
   1bbfe:	f007 fcfc 	bl	235fa <assert_print>
   1bc02:	480d      	ldr	r0, [pc, #52]	; (1bc38 <nrfx_gpio_handler+0x64>)
   1bc04:	f007 fcf9 	bl	235fa <assert_print>
   1bc08:	4809      	ldr	r0, [pc, #36]	; (1bc30 <nrfx_gpio_handler+0x5c>)
   1bc0a:	214d      	movs	r1, #77	; 0x4d
   1bc0c:	f007 fcee 	bl	235ec <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1bc10:	4630      	mov	r0, r6
   1bc12:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1bc14:	b11c      	cbz	r4, 1bc1e <nrfx_gpio_handler+0x4a>
   1bc16:	6823      	ldr	r3, [r4, #0]
   1bc18:	4621      	mov	r1, r4
   1bc1a:	461c      	mov	r4, r3
   1bc1c:	e7e4      	b.n	1bbe8 <nrfx_gpio_handler+0x14>
   1bc1e:	4623      	mov	r3, r4
   1bc20:	e7fa      	b.n	1bc18 <nrfx_gpio_handler+0x44>
   1bc22:	bf00      	nop
   1bc24:	20002dd8 	.word	0x20002dd8
   1bc28:	00026020 	.word	0x00026020
   1bc2c:	00029713 	.word	0x00029713
   1bc30:	00029649 	.word	0x00029649
   1bc34:	00026f1a 	.word	0x00026f1a
   1bc38:	000296a6 	.word	0x000296a6

0001bc3c <gpio_nrfx_pin_configure>:
{
   1bc3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1bc40:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1bc44:	f898 300c 	ldrb.w	r3, [r8, #12]
   1bc48:	f001 051f 	and.w	r5, r1, #31
   1bc4c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1bc50:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1bc52:	4628      	mov	r0, r5
   1bc54:	f10d 0103 	add.w	r1, sp, #3
{
   1bc58:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1bc5a:	f002 fdbb 	bl	1e7d4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1bc5e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1bc62:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1bc64:	d115      	bne.n	1bc92 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1bc66:	4628      	mov	r0, r5
   1bc68:	f002 feb0 	bl	1e9cc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1bc6c:	4b49      	ldr	r3, [pc, #292]	; (1bd94 <gpio_nrfx_pin_configure+0x158>)
   1bc6e:	429e      	cmp	r6, r3
   1bc70:	d171      	bne.n	1bd56 <gpio_nrfx_pin_configure+0x11a>
			err = nrfx_gpiote_channel_free(ch);
   1bc72:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1bc76:	f002 fe07 	bl	1e888 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1bc7a:	42b0      	cmp	r0, r6
   1bc7c:	d06b      	beq.n	1bd56 <gpio_nrfx_pin_configure+0x11a>
   1bc7e:	4946      	ldr	r1, [pc, #280]	; (1bd98 <gpio_nrfx_pin_configure+0x15c>)
   1bc80:	4a46      	ldr	r2, [pc, #280]	; (1bd9c <gpio_nrfx_pin_configure+0x160>)
   1bc82:	4847      	ldr	r0, [pc, #284]	; (1bda0 <gpio_nrfx_pin_configure+0x164>)
   1bc84:	236a      	movs	r3, #106	; 0x6a
   1bc86:	f007 fcb8 	bl	235fa <assert_print>
   1bc8a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1bc8c:	4843      	ldr	r0, [pc, #268]	; (1bd9c <gpio_nrfx_pin_configure+0x160>)
   1bc8e:	f007 fcad 	bl	235ec <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bc92:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1bc94:	4619      	mov	r1, r3
   1bc96:	aa02      	add	r2, sp, #8
   1bc98:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1bc9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1bc9e:	f002 fc75 	bl	1e58c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1bca2:	4b3c      	ldr	r3, [pc, #240]	; (1bd94 <gpio_nrfx_pin_configure+0x158>)
   1bca4:	4298      	cmp	r0, r3
   1bca6:	d004      	beq.n	1bcb2 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1bca8:	f06f 0015 	mvn.w	r0, #21
}
   1bcac:	b004      	add	sp, #16
   1bcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1bcb2:	4286      	cmp	r6, r0
   1bcb4:	d10d      	bne.n	1bcd2 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1bcb6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1bcba:	f002 fde5 	bl	1e888 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1bcbe:	42b0      	cmp	r0, r6
   1bcc0:	d007      	beq.n	1bcd2 <gpio_nrfx_pin_configure+0x96>
   1bcc2:	4935      	ldr	r1, [pc, #212]	; (1bd98 <gpio_nrfx_pin_configure+0x15c>)
   1bcc4:	4a35      	ldr	r2, [pc, #212]	; (1bd9c <gpio_nrfx_pin_configure+0x160>)
   1bcc6:	4836      	ldr	r0, [pc, #216]	; (1bda0 <gpio_nrfx_pin_configure+0x164>)
   1bcc8:	237c      	movs	r3, #124	; 0x7c
   1bcca:	f007 fc96 	bl	235fa <assert_print>
   1bcce:	217c      	movs	r1, #124	; 0x7c
   1bcd0:	e7dc      	b.n	1bc8c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1bcd2:	03a6      	lsls	r6, r4, #14
   1bcd4:	d54e      	bpl.n	1bd74 <gpio_nrfx_pin_configure+0x138>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bcd6:	f240 3306 	movw	r3, #774	; 0x306
   1bcda:	4023      	ands	r3, r4
   1bcdc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1bce0:	d019      	beq.n	1bd16 <gpio_nrfx_pin_configure+0xda>
   1bce2:	d80c      	bhi.n	1bcfe <gpio_nrfx_pin_configure+0xc2>
   1bce4:	2b06      	cmp	r3, #6
   1bce6:	d017      	beq.n	1bd18 <gpio_nrfx_pin_configure+0xdc>
   1bce8:	d804      	bhi.n	1bcf4 <gpio_nrfx_pin_configure+0xb8>
   1bcea:	b1ab      	cbz	r3, 1bd18 <gpio_nrfx_pin_configure+0xdc>
   1bcec:	2b02      	cmp	r3, #2
   1bcee:	d1db      	bne.n	1bca8 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1bcf0:	2304      	movs	r3, #4
   1bcf2:	e011      	b.n	1bd18 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bcf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1bcf8:	d1d6      	bne.n	1bca8 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1bcfa:	2301      	movs	r3, #1
   1bcfc:	e00c      	b.n	1bd18 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bcfe:	f240 2202 	movw	r2, #514	; 0x202
   1bd02:	4293      	cmp	r3, r2
   1bd04:	d029      	beq.n	1bd5a <gpio_nrfx_pin_configure+0x11e>
   1bd06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1bd0a:	d028      	beq.n	1bd5e <gpio_nrfx_pin_configure+0x122>
   1bd0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1bd10:	d1ca      	bne.n	1bca8 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1bd12:	2302      	movs	r3, #2
   1bd14:	e000      	b.n	1bd18 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1bd16:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1bd18:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1bd1c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1bd20:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1bd24:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1bd26:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1bd2a:	bf54      	ite	pl
   1bd2c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1bd30:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1bd32:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1bd34:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1bd38:	d513      	bpl.n	1bd62 <gpio_nrfx_pin_configure+0x126>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1bd3a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1bd3e:	2301      	movs	r3, #1
   1bd40:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1bd42:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1bd46:	2200      	movs	r2, #0
   1bd48:	a901      	add	r1, sp, #4
   1bd4a:	4628      	mov	r0, r5
   1bd4c:	f002 fcc8 	bl	1e6e0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1bd50:	4b10      	ldr	r3, [pc, #64]	; (1bd94 <gpio_nrfx_pin_configure+0x158>)
   1bd52:	4298      	cmp	r0, r3
   1bd54:	d1a8      	bne.n	1bca8 <gpio_nrfx_pin_configure+0x6c>
   1bd56:	2000      	movs	r0, #0
   1bd58:	e7a8      	b.n	1bcac <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1bd5a:	2305      	movs	r3, #5
   1bd5c:	e7dc      	b.n	1bd18 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1bd5e:	2303      	movs	r3, #3
   1bd60:	e7da      	b.n	1bd18 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1bd62:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1bd64:	bf41      	itttt	mi
   1bd66:	2301      	movmi	r3, #1
   1bd68:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1bd6c:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1bd6e:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1bd72:	e7e8      	b.n	1bd46 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1bd74:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bd76:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1bd7a:	bf54      	ite	pl
   1bd7c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1bd80:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bd82:	461a      	mov	r2, r3
   1bd84:	a901      	add	r1, sp, #4
   1bd86:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1bd88:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1bd8c:	f002 fbfe 	bl	1e58c <nrfx_gpiote_input_configure>
   1bd90:	e7de      	b.n	1bd50 <gpio_nrfx_pin_configure+0x114>
   1bd92:	bf00      	nop
   1bd94:	0bad0000 	.word	0x0bad0000
   1bd98:	0002974b 	.word	0x0002974b
   1bd9c:	0002971f 	.word	0x0002971f
   1bda0:	00026f1a 	.word	0x00026f1a

0001bda4 <nrf_gpio_pin_port_decode>:
{
   1bda4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1bda6:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1bda8:	0953      	lsrs	r3, r2, #5
   1bdaa:	d104      	bne.n	1bdb6 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1bdac:	f04f 33ff 	mov.w	r3, #4294967295
   1bdb0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1bdb2:	07db      	lsls	r3, r3, #31
   1bdb4:	d40b      	bmi.n	1bdce <nrf_gpio_pin_port_decode+0x2a>
   1bdb6:	4907      	ldr	r1, [pc, #28]	; (1bdd4 <nrf_gpio_pin_port_decode+0x30>)
   1bdb8:	4807      	ldr	r0, [pc, #28]	; (1bdd8 <nrf_gpio_pin_port_decode+0x34>)
   1bdba:	4a08      	ldr	r2, [pc, #32]	; (1bddc <nrf_gpio_pin_port_decode+0x38>)
   1bdbc:	f240 2347 	movw	r3, #583	; 0x247
   1bdc0:	f007 fc1b 	bl	235fa <assert_print>
   1bdc4:	4805      	ldr	r0, [pc, #20]	; (1bddc <nrf_gpio_pin_port_decode+0x38>)
   1bdc6:	f240 2147 	movw	r1, #583	; 0x247
   1bdca:	f007 fc0f 	bl	235ec <assert_post_action>
}
   1bdce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1bdd2:	bd08      	pop	{r3, pc}
   1bdd4:	000296f0 	.word	0x000296f0
   1bdd8:	00026f1a 	.word	0x00026f1a
   1bddc:	000296bd 	.word	0x000296bd

0001bde0 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1bde0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bde2:	461d      	mov	r5, r3
	return config->uarte_regs;
   1bde4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1bde6:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1bde8:	f8d3 c000 	ldr.w	ip, [r3]
{
   1bdec:	4606      	mov	r6, r0
   1bdee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdf2:	f3ef 8711 	mrs	r7, BASEPRI
   1bdf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdfa:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1bdfe:	68e3      	ldr	r3, [r4, #12]
   1be00:	68d8      	ldr	r0, [r3, #12]
   1be02:	b138      	cbz	r0, 1be14 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1be04:	f387 8811 	msr	BASEPRI, r7
   1be08:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1be0c:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1be10:	b003      	add	sp, #12
   1be12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1be14:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1be16:	68e3      	ldr	r3, [r4, #12]
   1be18:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   1be1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1be1e:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1be22:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1be26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1be2a:	68e3      	ldr	r3, [r4, #12]
   1be2c:	d111      	bne.n	1be52 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1be2e:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1be30:	68e3      	ldr	r3, [r4, #12]
   1be32:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1be34:	4621      	mov	r1, r4
   1be36:	4630      	mov	r0, r6
   1be38:	f009 fcbc 	bl	257b4 <start_tx_locked>
   1be3c:	f387 8811 	msr	BASEPRI, r7
   1be40:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1be44:	7ae3      	ldrb	r3, [r4, #11]
   1be46:	2b01      	cmp	r3, #1
   1be48:	d101      	bne.n	1be4e <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1be4a:	1c6b      	adds	r3, r5, #1
   1be4c:	d106      	bne.n	1be5c <uarte_nrfx_tx+0x7c>
	return 0;
   1be4e:	2000      	movs	r0, #0
   1be50:	e7de      	b.n	1be10 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1be52:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1be54:	4620      	mov	r0, r4
   1be56:	f009 fc27 	bl	256a8 <setup_tx_cache>
   1be5a:	e7eb      	b.n	1be34 <uarte_nrfx_tx+0x54>
			return ((t * to_hz + off) / from_hz);
   1be5c:	480b      	ldr	r0, [pc, #44]	; (1be8c <uarte_nrfx_tx+0xac>)
   1be5e:	4a0c      	ldr	r2, [pc, #48]	; (1be90 <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1be60:	68e4      	ldr	r4, [r4, #12]
   1be62:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1be66:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1be6a:	2100      	movs	r1, #0
   1be6c:	2300      	movs	r3, #0
   1be6e:	fbc5 0106 	smlal	r0, r1, r5, r6
   1be72:	f7e4 f933 	bl	dc <__aeabi_uldivmod>
   1be76:	3420      	adds	r4, #32
   1be78:	4602      	mov	r2, r0
   1be7a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1be7c:	2000      	movs	r0, #0
   1be7e:	2100      	movs	r1, #0
   1be80:	e9cd 0100 	strd	r0, r1, [sp]
   1be84:	4620      	mov	r0, r4
   1be86:	f006 f9b7 	bl	221f8 <z_impl_k_timer_start>
   1be8a:	e7e0      	b.n	1be4e <uarte_nrfx_tx+0x6e>
   1be8c:	000f423f 	.word	0x000f423f
   1be90:	000f4240 	.word	0x000f4240

0001be94 <uarte_nrfx_configure>:
{
   1be94:	b570      	push	{r4, r5, r6, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1be96:	794b      	ldrb	r3, [r1, #5]
   1be98:	2b01      	cmp	r3, #1
   1be9a:	d120      	bne.n	1bede <uarte_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1be9c:	798b      	ldrb	r3, [r1, #6]
   1be9e:	2b03      	cmp	r3, #3
   1bea0:	d11d      	bne.n	1bede <uarte_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
   1bea2:	79cd      	ldrb	r5, [r1, #7]
   1bea4:	b10d      	cbz	r5, 1beaa <uarte_nrfx_configure+0x16>
   1bea6:	2d01      	cmp	r5, #1
   1bea8:	d119      	bne.n	1bede <uarte_nrfx_configure+0x4a>
	switch (cfg->parity) {
   1beaa:	790a      	ldrb	r2, [r1, #4]
   1beac:	b112      	cbz	r2, 1beb4 <uarte_nrfx_configure+0x20>
   1beae:	2a02      	cmp	r2, #2
   1beb0:	d115      	bne.n	1bede <uarte_nrfx_configure+0x4a>
   1beb2:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1beb4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1beb6:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1beb8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1bebc:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   1bebe:	d064      	beq.n	1bf8a <uarte_nrfx_configure+0xf6>
   1bec0:	d82b      	bhi.n	1bf1a <uarte_nrfx_configure+0x86>
   1bec2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1bec6:	d063      	beq.n	1bf90 <uarte_nrfx_configure+0xfc>
   1bec8:	d814      	bhi.n	1bef4 <uarte_nrfx_configure+0x60>
   1beca:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1bece:	d061      	beq.n	1bf94 <uarte_nrfx_configure+0x100>
   1bed0:	d808      	bhi.n	1bee4 <uarte_nrfx_configure+0x50>
   1bed2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1bed6:	d060      	beq.n	1bf9a <uarte_nrfx_configure+0x106>
   1bed8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1bedc:	d060      	beq.n	1bfa0 <uarte_nrfx_configure+0x10c>
   1bede:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1bee2:	e051      	b.n	1bf88 <uarte_nrfx_configure+0xf4>
   1bee4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1bee8:	d05d      	beq.n	1bfa6 <uarte_nrfx_configure+0x112>
   1beea:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1beee:	d1f6      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1bef0:	4b37      	ldr	r3, [pc, #220]	; (1bfd0 <uarte_nrfx_configure+0x13c>)
   1bef2:	e03c      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bef4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1bef8:	d058      	beq.n	1bfac <uarte_nrfx_configure+0x118>
   1befa:	d807      	bhi.n	1bf0c <uarte_nrfx_configure+0x78>
   1befc:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1bf00:	d056      	beq.n	1bfb0 <uarte_nrfx_configure+0x11c>
   1bf02:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1bf06:	d1ea      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1bf08:	4b32      	ldr	r3, [pc, #200]	; (1bfd4 <uarte_nrfx_configure+0x140>)
   1bf0a:	e030      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bf0c:	f647 2412 	movw	r4, #31250	; 0x7a12
   1bf10:	42a3      	cmp	r3, r4
   1bf12:	d1e4      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1bf14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1bf18:	e029      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bf1a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1bf1e:	d049      	beq.n	1bfb4 <uarte_nrfx_configure+0x120>
   1bf20:	d813      	bhi.n	1bf4a <uarte_nrfx_configure+0xb6>
   1bf22:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1bf26:	d048      	beq.n	1bfba <uarte_nrfx_configure+0x126>
   1bf28:	d809      	bhi.n	1bf3e <uarte_nrfx_configure+0xaa>
   1bf2a:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1bf2e:	42a3      	cmp	r3, r4
   1bf30:	d045      	beq.n	1bfbe <uarte_nrfx_configure+0x12a>
   1bf32:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1bf36:	d1d2      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1bf38:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1bf3c:	e017      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bf3e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1bf42:	d1cc      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1bf44:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1bf48:	e011      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bf4a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1bf4e:	d039      	beq.n	1bfc4 <uarte_nrfx_configure+0x130>
   1bf50:	d808      	bhi.n	1bf64 <uarte_nrfx_configure+0xd0>
   1bf52:	4c21      	ldr	r4, [pc, #132]	; (1bfd8 <uarte_nrfx_configure+0x144>)
   1bf54:	42a3      	cmp	r3, r4
   1bf56:	d038      	beq.n	1bfca <uarte_nrfx_configure+0x136>
   1bf58:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1bf5c:	d1bf      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1bf5e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1bf62:	e004      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bf64:	4c1d      	ldr	r4, [pc, #116]	; (1bfdc <uarte_nrfx_configure+0x148>)
   1bf66:	42a3      	cmp	r3, r4
   1bf68:	d1b9      	bne.n	1bede <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1bf6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1bf6e:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1bf70:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   1bf74:	6843      	ldr	r3, [r0, #4]
   1bf76:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1bf78:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1bf7a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1bf7e:	c903      	ldmia	r1, {r0, r1}
   1bf80:	1d23      	adds	r3, r4, #4
   1bf82:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1bf86:	2000      	movs	r0, #0
}
   1bf88:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1bf8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1bf8e:	e7ee      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1bf90:	4b13      	ldr	r3, [pc, #76]	; (1bfe0 <uarte_nrfx_configure+0x14c>)
   1bf92:	e7ec      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1bf94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1bf98:	e7e9      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1bf9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1bf9e:	e7e6      	b.n	1bf6e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1bfa0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1bfa4:	e7e3      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1bfa6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1bfaa:	e7e0      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1bfac:	4b0d      	ldr	r3, [pc, #52]	; (1bfe4 <uarte_nrfx_configure+0x150>)
   1bfae:	e7de      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1bfb0:	4b0d      	ldr	r3, [pc, #52]	; (1bfe8 <uarte_nrfx_configure+0x154>)
   1bfb2:	e7dc      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1bfb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1bfb8:	e7d9      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1bfba:	4b0c      	ldr	r3, [pc, #48]	; (1bfec <uarte_nrfx_configure+0x158>)
   1bfbc:	e7d7      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1bfbe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1bfc2:	e7d4      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1bfc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1bfc8:	e7d1      	b.n	1bf6e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1bfca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1bfce:	e7ce      	b.n	1bf6e <uarte_nrfx_configure+0xda>
   1bfd0:	0013b000 	.word	0x0013b000
   1bfd4:	004ea000 	.word	0x004ea000
   1bfd8:	0003d090 	.word	0x0003d090
   1bfdc:	000f4240 	.word	0x000f4240
   1bfe0:	00275000 	.word	0x00275000
   1bfe4:	0075c000 	.word	0x0075c000
   1bfe8:	003af000 	.word	0x003af000
   1bfec:	013a9000 	.word	0x013a9000

0001bff0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1bff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bff4:	2200      	movs	r2, #0
   1bff6:	b087      	sub	sp, #28
   1bff8:	4607      	mov	r7, r0
   1bffa:	2101      	movs	r1, #1
   1bffc:	2002      	movs	r0, #2
   1bffe:	f7f8 f825 	bl	1404c <z_arm_irq_priority_set>
   1c002:	2002      	movs	r0, #2
   1c004:	f7f7 fff2 	bl	13fec <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1c008:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c00c:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1c00e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c012:	2100      	movs	r1, #0
   1c014:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1c018:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c01a:	f8d8 900c 	ldr.w	r9, [r8, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c01e:	466a      	mov	r2, sp
   1c020:	4648      	mov	r0, r9
   1c022:	f009 f9a5 	bl	25370 <pinctrl_lookup_state>
	if (ret < 0) {
   1c026:	1e05      	subs	r5, r0, #0
   1c028:	db26      	blt.n	1c078 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c02a:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c02c:	f8d9 2000 	ldr.w	r2, [r9]
   1c030:	7919      	ldrb	r1, [r3, #4]
   1c032:	6818      	ldr	r0, [r3, #0]
   1c034:	f009 f9af 	bl	25396 <pinctrl_configure_pins>
	if (err < 0) {
   1c038:	1e05      	subs	r5, r0, #0
   1c03a:	db1d      	blt.n	1c078 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1c03c:	1d31      	adds	r1, r6, #4
   1c03e:	4638      	mov	r0, r7
   1c040:	f7ff ff28 	bl	1be94 <uarte_nrfx_configure>
	if (err) {
   1c044:	4605      	mov	r5, r0
   1c046:	b9b8      	cbnz	r0, 1c078 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1c048:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1c04c:	0799      	lsls	r1, r3, #30
   1c04e:	d52b      	bpl.n	1c0a8 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1c050:	f106 001c 	add.w	r0, r6, #28
   1c054:	f002 fd9c 	bl	1eb90 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1c058:	4b4b      	ldr	r3, [pc, #300]	; (1c188 <uarte_0_init+0x198>)
   1c05a:	4298      	cmp	r0, r3
   1c05c:	d010      	beq.n	1c080 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1c05e:	4b4b      	ldr	r3, [pc, #300]	; (1c18c <uarte_0_init+0x19c>)
   1c060:	9305      	str	r3, [sp, #20]
   1c062:	2302      	movs	r3, #2
   1c064:	9304      	str	r3, [sp, #16]
   1c066:	484a      	ldr	r0, [pc, #296]	; (1c190 <uarte_0_init+0x1a0>)
   1c068:	462b      	mov	r3, r5
   1c06a:	aa04      	add	r2, sp, #16
   1c06c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1c070:	f06f 0504 	mvn.w	r5, #4
   1c074:	f7f7 f91e 	bl	132b4 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1c078:	4628      	mov	r0, r5
   1c07a:	b007      	add	sp, #28
   1c07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c080:	7f33      	ldrb	r3, [r6, #28]
   1c082:	00db      	lsls	r3, r3, #3
   1c084:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c088:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1c08c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1c090:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1c094:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c098:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1c09c:	7f32      	ldrb	r2, [r6, #28]
   1c09e:	2301      	movs	r3, #1
   1c0a0:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1c0a2:	4a3c      	ldr	r2, [pc, #240]	; (1c194 <uarte_0_init+0x1a4>)
   1c0a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1c0a8:	68f3      	ldr	r3, [r6, #12]
   1c0aa:	2b00      	cmp	r3, #0
   1c0ac:	d059      	beq.n	1c162 <uarte_0_init+0x172>
	return config->uarte_regs;
   1c0ae:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c0b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
	return config->uarte_regs;
   1c0b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1c0b6:	2204      	movs	r2, #4
   1c0b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1c0bc:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1c0c0:	2201      	movs	r2, #1
   1c0c2:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1c0c6:	4934      	ldr	r1, [pc, #208]	; (1c198 <uarte_0_init+0x1a8>)
   1c0c8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c0cc:	2108      	movs	r1, #8
   1c0ce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c0d2:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1c0d6:	b1a1      	cbz	r1, 1c102 <uarte_0_init+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c0d8:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c0da:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c0de:	b91a      	cbnz	r2, 1c0e8 <uarte_0_init+0xf8>
   1c0e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1c0e4:	2a00      	cmp	r2, #0
   1c0e6:	d0f8      	beq.n	1c0da <uarte_0_init+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c0e8:	2200      	movs	r2, #0
   1c0ea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1c0ee:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1c0f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1c0f6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1c0fa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1c0fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1c102:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1c106:	4925      	ldr	r1, [pc, #148]	; (1c19c <uarte_0_init+0x1ac>)
   1c108:	2200      	movs	r2, #0
   1c10a:	3080      	adds	r0, #128	; 0x80
   1c10c:	f009 fe55 	bl	25dba <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1c110:	f8d9 300c 	ldr.w	r3, [r9, #12]
	timer->user_data = user_data;
   1c114:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1c118:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1c11c:	4920      	ldr	r1, [pc, #128]	; (1c1a0 <uarte_0_init+0x1b0>)
   1c11e:	2200      	movs	r2, #0
   1c120:	3020      	adds	r0, #32
   1c122:	f009 fe4a 	bl	25dba <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1c126:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1c12a:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1c12e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c132:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1c134:	bf5c      	itt	pl
   1c136:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1c13a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c13e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c142:	06db      	lsls	r3, r3, #27
   1c144:	bf44      	itt	mi
   1c146:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1c14a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c14e:	6973      	ldr	r3, [r6, #20]
   1c150:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1c154:	2300      	movs	r3, #0
   1c156:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c15a:	2301      	movs	r3, #1
   1c15c:	60a3      	str	r3, [r4, #8]
   1c15e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1c160:	e78a      	b.n	1c078 <uarte_0_init+0x88>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c162:	2308      	movs	r3, #8
   1c164:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1c168:	f898 3008 	ldrb.w	r3, [r8, #8]
   1c16c:	2b00      	cmp	r3, #0
   1c16e:	d1de      	bne.n	1c12e <uarte_0_init+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c170:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1c174:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c178:	69b3      	ldr	r3, [r6, #24]
   1c17a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c17e:	2301      	movs	r3, #1
   1c180:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c184:	6023      	str	r3, [r4, #0]
}
   1c186:	e7d2      	b.n	1c12e <uarte_0_init+0x13e>
   1c188:	0bad0000 	.word	0x0bad0000
   1c18c:	0002976d 	.word	0x0002976d
   1c190:	0002634c 	.word	0x0002634c
   1c194:	4001f000 	.word	0x4001f000
   1c198:	000a0210 	.word	0x000a0210
   1c19c:	000257eb 	.word	0x000257eb
   1c1a0:	000258bb 	.word	0x000258bb

0001c1a4 <uarte_nrfx_poll_out>:
{
   1c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1a8:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1c1aa:	6905      	ldr	r5, [r0, #16]
{
   1c1ac:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c1ae:	f009 fce0 	bl	25b72 <k_is_in_isr>
   1c1b2:	b9b0      	cbnz	r0, 1c1e2 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1c1b4:	4b2a      	ldr	r3, [pc, #168]	; (1c260 <uarte_nrfx_poll_out+0xbc>)
   1c1b6:	781b      	ldrb	r3, [r3, #0]
   1c1b8:	b19b      	cbz	r3, 1c1e2 <uarte_nrfx_poll_out+0x3e>
{
   1c1ba:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1c1bc:	6860      	ldr	r0, [r4, #4]
   1c1be:	f009 fae9 	bl	25794 <is_tx_ready.isra.0>
   1c1c2:	2800      	cmp	r0, #0
   1c1c4:	d138      	bne.n	1c238 <uarte_nrfx_poll_out+0x94>
   1c1c6:	2001      	movs	r0, #1
   1c1c8:	f009 fc29 	bl	25a1e <nrfx_busy_wait>
   1c1cc:	3f01      	subs	r7, #1
   1c1ce:	d1f5      	bne.n	1c1bc <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1c1d0:	2100      	movs	r1, #0
   1c1d2:	2021      	movs	r0, #33	; 0x21
   1c1d4:	f005 fb38 	bl	21848 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c1d8:	e7ef      	b.n	1c1ba <uarte_nrfx_poll_out+0x16>
   1c1da:	f381 8811 	msr	BASEPRI, r1
   1c1de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c1e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1e6:	f3ef 8111 	mrs	r1, BASEPRI
   1c1ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1ee:	f3bf 8f6f 	isb	sy
   1c1f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
   1c1f6:	4640      	mov	r0, r8
   1c1f8:	460f      	mov	r7, r1
   1c1fa:	f009 facb 	bl	25794 <is_tx_ready.isra.0>
   1c1fe:	2800      	cmp	r0, #0
   1c200:	d0eb      	beq.n	1c1da <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1c202:	68eb      	ldr	r3, [r5, #12]
   1c204:	b15b      	cbz	r3, 1c21e <uarte_nrfx_poll_out+0x7a>
   1c206:	68da      	ldr	r2, [r3, #12]
   1c208:	b14a      	cbz	r2, 1c21e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1c20a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1c20e:	2a00      	cmp	r2, #0
   1c210:	da05      	bge.n	1c21e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1c212:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1c216:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1c21a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1c21e:	696b      	ldr	r3, [r5, #20]
   1c220:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1c222:	6969      	ldr	r1, [r5, #20]
   1c224:	2201      	movs	r2, #1
   1c226:	4620      	mov	r0, r4
   1c228:	f009 f95b 	bl	254e2 <tx_start>
	__asm__ volatile(
   1c22c:	f387 8811 	msr	BASEPRI, r7
   1c230:	f3bf 8f6f 	isb	sy
}
   1c234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c238:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c23c:	f3ef 8111 	mrs	r1, BASEPRI
   1c240:	f383 8812 	msr	BASEPRI_MAX, r3
   1c244:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1c248:	6860      	ldr	r0, [r4, #4]
   1c24a:	460f      	mov	r7, r1
   1c24c:	f009 faa2 	bl	25794 <is_tx_ready.isra.0>
   1c250:	2800      	cmp	r0, #0
   1c252:	d1e4      	bne.n	1c21e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1c254:	f381 8811 	msr	BASEPRI, r1
   1c258:	f3bf 8f6f 	isb	sy
}
   1c25c:	e7b8      	b.n	1c1d0 <uarte_nrfx_poll_out+0x2c>
   1c25e:	bf00      	nop
   1c260:	20003508 	.word	0x20003508

0001c264 <uarte_nrfx_rx_enable>:
{
   1c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1c268:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c26c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1c26e:	f8da 9000 	ldr.w	r9, [sl]
{
   1c272:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1c274:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1c278:	4605      	mov	r5, r0
   1c27a:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   1c27c:	b172      	cbz	r2, 1c29c <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1c27e:	4946      	ldr	r1, [pc, #280]	; (1c398 <uarte_nrfx_rx_enable+0x134>)
   1c280:	4a46      	ldr	r2, [pc, #280]	; (1c39c <uarte_nrfx_rx_enable+0x138>)
   1c282:	4847      	ldr	r0, [pc, #284]	; (1c3a0 <uarte_nrfx_rx_enable+0x13c>)
   1c284:	f240 3341 	movw	r3, #833	; 0x341
   1c288:	f007 f9b7 	bl	235fa <assert_print>
   1c28c:	4845      	ldr	r0, [pc, #276]	; (1c3a4 <uarte_nrfx_rx_enable+0x140>)
   1c28e:	f007 f9b4 	bl	235fa <assert_print>
   1c292:	4842      	ldr	r0, [pc, #264]	; (1c39c <uarte_nrfx_rx_enable+0x138>)
   1c294:	f240 3141 	movw	r1, #833	; 0x341
   1c298:	f007 f9a8 	bl	235ec <assert_post_action>
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1c29c:	68e2      	ldr	r2, [r4, #12]
   1c29e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1c2a2:	2900      	cmp	r1, #0
   1c2a4:	d175      	bne.n	1c392 <uarte_nrfx_rx_enable+0x12e>
   1c2a6:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1c2aa:	2900      	cmp	r1, #0
   1c2ac:	d171      	bne.n	1c392 <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
   1c2ae:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1c2b0:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   1c2b4:	bfc4      	itt	gt
   1c2b6:	2205      	movgt	r2, #5
   1c2b8:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1c2bc:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   1c2be:	bfd8      	it	le
   1c2c0:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   1c2c2:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1c2c4:	68e3      	ldr	r3, [r4, #12]
   1c2c6:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1c2ca:	68e3      	ldr	r3, [r4, #12]
   1c2cc:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1c2ce:	68e2      	ldr	r2, [r4, #12]
   1c2d0:	2300      	movs	r3, #0
   1c2d2:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1c2d4:	68e2      	ldr	r2, [r4, #12]
   1c2d6:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1c2d8:	68e2      	ldr	r2, [r4, #12]
   1c2da:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c2dc:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c2e0:	06da      	lsls	r2, r3, #27
   1c2e2:	d523      	bpl.n	1c32c <uarte_nrfx_rx_enable+0xc8>
		if (data->async->rx_flush_cnt) {
   1c2e4:	68e1      	ldr	r1, [r4, #12]
   1c2e6:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1c2ea:	b1fe      	cbz	r6, 1c32c <uarte_nrfx_rx_enable+0xc8>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1c2ec:	42be      	cmp	r6, r7
   1c2ee:	bf28      	it	cs
   1c2f0:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1c2f2:	4640      	mov	r0, r8
   1c2f4:	4632      	mov	r2, r6
   1c2f6:	31c4      	adds	r1, #196	; 0xc4
   1c2f8:	f007 fd8c 	bl	23e14 <memcpy>
			if (!len) {
   1c2fc:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1c2fe:	44b0      	add	r8, r6
			if (!len) {
   1c300:	d114      	bne.n	1c32c <uarte_nrfx_rx_enable+0xc8>
				data->async->rx_flush_cnt -= cpy_len;
   1c302:	68e2      	ldr	r2, [r4, #12]
   1c304:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   1c308:	1b9b      	subs	r3, r3, r6
   1c30a:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1c30e:	4631      	mov	r1, r6
   1c310:	4628      	mov	r0, r5
   1c312:	f009 f915 	bl	25540 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1c316:	68e1      	ldr	r1, [r4, #12]
   1c318:	4628      	mov	r0, r5
   1c31a:	3158      	adds	r1, #88	; 0x58
   1c31c:	f009 f929 	bl	25572 <rx_buf_release>
				notify_rx_disable(dev);
   1c320:	4628      	mov	r0, r5
   1c322:	f009 f93e 	bl	255a2 <notify_rx_disable>
	return 0;
   1c326:	2000      	movs	r0, #0
}
   1c328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c32c:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1c32e:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1c332:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c336:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1c33a:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   1c33e:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1c342:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   1c346:	68e3      	ldr	r3, [r4, #12]
   1c348:	2201      	movs	r2, #1
   1c34a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c34e:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c352:	06db      	lsls	r3, r3, #27
   1c354:	d519      	bpl.n	1c38a <uarte_nrfx_rx_enable+0x126>
	__asm__ volatile(
   1c356:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c35a:	f3ef 8111 	mrs	r1, BASEPRI
   1c35e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c362:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1c366:	692b      	ldr	r3, [r5, #16]
   1c368:	68db      	ldr	r3, [r3, #12]
   1c36a:	b12b      	cbz	r3, 1c378 <uarte_nrfx_rx_enable+0x114>
		data->async->low_power_mask |= mask;
   1c36c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1c370:	f042 0202 	orr.w	r2, r2, #2
   1c374:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   1c378:	686b      	ldr	r3, [r5, #4]
   1c37a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1c37c:	2208      	movs	r2, #8
   1c37e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1c382:	f381 8811 	msr	BASEPRI, r1
   1c386:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c38a:	2301      	movs	r3, #1
   1c38c:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1c390:	e7c9      	b.n	1c326 <uarte_nrfx_rx_enable+0xc2>
		return -EBUSY;
   1c392:	f06f 000f 	mvn.w	r0, #15
   1c396:	e7c7      	b.n	1c328 <uarte_nrfx_rx_enable+0xc4>
   1c398:	00029a2c 	.word	0x00029a2c
   1c39c:	0002978c 	.word	0x0002978c
   1c3a0:	00026f1a 	.word	0x00026f1a
   1c3a4:	000297c0 	.word	0x000297c0

0001c3a8 <uarte_nrfx_isr_async>:
{
   1c3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1c3ac:	6843      	ldr	r3, [r0, #4]
   1c3ae:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1c3b0:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3b2:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1c3b6:	b088      	sub	sp, #32
   1c3b8:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   1c3ba:	b169      	cbz	r1, 1c3d8 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c3bc:	2200      	movs	r2, #0
   1c3be:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1c3c2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1c3c6:	68da      	ldr	r2, [r3, #12]
   1c3c8:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1c3cc:	3301      	adds	r3, #1
   1c3ce:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1c3d2:	b008      	add	sp, #32
   1c3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c3d8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c3dc:	b323      	cbz	r3, 1c428 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c3de:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1c3e2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1c3e6:	6843      	ldr	r3, [r0, #4]
   1c3e8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c3ea:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c3ee:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
   1c3f2:	2214      	movs	r2, #20
   1c3f4:	a803      	add	r0, sp, #12
   1c3f6:	f007 fd18 	bl	23e2a <memset>
   1c3fa:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c3fc:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1c3fe:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c402:	f100 810c 	bmi.w	1c61e <uarte_nrfx_isr_async+0x276>
   1c406:	07b3      	lsls	r3, r6, #30
   1c408:	f100 810b 	bmi.w	1c622 <uarte_nrfx_isr_async+0x27a>
   1c40c:	0777      	lsls	r7, r6, #29
   1c40e:	f100 810a 	bmi.w	1c626 <uarte_nrfx_isr_async+0x27e>
   1c412:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1c416:	4620      	mov	r0, r4
   1c418:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1c41a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1c41e:	f009 f888 	bl	25532 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1c422:	4620      	mov	r0, r4
   1c424:	f009 f91b 	bl	2565e <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c428:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1c42c:	2b00      	cmp	r3, #0
   1c42e:	d033      	beq.n	1c498 <uarte_nrfx_isr_async+0xf0>
    return p_reg->INTENSET & mask;
   1c430:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1c434:	06d8      	lsls	r0, r3, #27
   1c436:	d52f      	bpl.n	1c498 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c438:	f04f 0800 	mov.w	r8, #0
   1c43c:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1c440:	6926      	ldr	r6, [r4, #16]
   1c442:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1c446:	6863      	ldr	r3, [r4, #4]
   1c448:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1c44a:	68f3      	ldr	r3, [r6, #12]
   1c44c:	2201      	movs	r2, #1
   1c44e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1c452:	68f0      	ldr	r0, [r6, #12]
   1c454:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1c456:	f009 fcbc 	bl	25dd2 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1c45a:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1c45c:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1c460:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1c464:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1c468:	68f2      	ldr	r2, [r6, #12]
   1c46a:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1c46c:	1a1b      	subs	r3, r3, r0
   1c46e:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1c470:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1c472:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1c476:	4408      	add	r0, r1
	if (rx_len > 0) {
   1c478:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1c47a:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1c47c:	dd02      	ble.n	1c484 <uarte_nrfx_isr_async+0xdc>
		notify_uart_rx_rdy(dev, rx_len);
   1c47e:	4620      	mov	r0, r4
   1c480:	f009 f85e 	bl	25540 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1c484:	68f1      	ldr	r1, [r6, #12]
   1c486:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1c48a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1c48e:	2b00      	cmp	r3, #0
   1c490:	f040 80cb 	bne.w	1c62a <uarte_nrfx_isr_async+0x282>
		data->async->is_in_irq = false;
   1c494:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c498:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1c49c:	b383      	cbz	r3, 1c500 <uarte_nrfx_isr_async+0x158>
   1c49e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1c4a2:	bb6e      	cbnz	r6, 1c500 <uarte_nrfx_isr_async+0x158>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c4a4:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1c4a8:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
   1c4aa:	6927      	ldr	r7, [r4, #16]
   1c4ac:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1c4b0:	4631      	mov	r1, r6
   1c4b2:	a803      	add	r0, sp, #12
   1c4b4:	f007 fcb9 	bl	23e2a <memset>
   1c4b8:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1c4ba:	a903      	add	r1, sp, #12
   1c4bc:	4620      	mov	r0, r4
	struct uart_event evt = {
   1c4be:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1c4c2:	f009 f836 	bl	25532 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1c4c6:	68fb      	ldr	r3, [r7, #12]
   1c4c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1c4ca:	1c51      	adds	r1, r2, #1
   1c4cc:	d018      	beq.n	1c500 <uarte_nrfx_isr_async+0x158>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1c4ce:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1c4d0:	68ff      	ldr	r7, [r7, #12]
   1c4d2:	498f      	ldr	r1, [pc, #572]	; (1c710 <uarte_nrfx_isr_async+0x368>)
			      K_USEC(data->async->rx_timeout_slab),
   1c4d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1c4d6:	4a8f      	ldr	r2, [pc, #572]	; (1c714 <uarte_nrfx_isr_async+0x36c>)
   1c4d8:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1c4dc:	468e      	mov	lr, r1
   1c4de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c4e2:	4631      	mov	r1, r6
   1c4e4:	fbcc e100 	smlal	lr, r1, ip, r0
   1c4e8:	2300      	movs	r3, #0
   1c4ea:	4670      	mov	r0, lr
   1c4ec:	f7e3 fdf6 	bl	dc <__aeabi_uldivmod>
   1c4f0:	4602      	mov	r2, r0
   1c4f2:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1c4f4:	e9cd 0100 	strd	r0, r1, [sp]
   1c4f8:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1c4fc:	f005 fe7c 	bl	221f8 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c500:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1c504:	b363      	cbz	r3, 1c560 <uarte_nrfx_isr_async+0x1b8>
   1c506:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1c50a:	bb4e      	cbnz	r6, 1c560 <uarte_nrfx_isr_async+0x1b8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c50c:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1c510:	6927      	ldr	r7, [r4, #16]
   1c512:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
   1c516:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
   1c518:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1c51c:	3158      	adds	r1, #88	; 0x58
   1c51e:	4620      	mov	r0, r4
   1c520:	f009 f827 	bl	25572 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1c524:	68f9      	ldr	r1, [r7, #12]
   1c526:	4620      	mov	r0, r4
   1c528:	3164      	adds	r1, #100	; 0x64
   1c52a:	f009 f822 	bl	25572 <rx_buf_release>
	data->async->rx_enabled = false;
   1c52e:	68fb      	ldr	r3, [r7, #12]
   1c530:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1c534:	68fb      	ldr	r3, [r7, #12]
   1c536:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1c53a:	b132      	cbz	r2, 1c54a <uarte_nrfx_isr_async+0x1a2>
		data->async->discard_rx_fifo = false;
   1c53c:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1c540:	6860      	ldr	r0, [r4, #4]
   1c542:	4632      	mov	r2, r6
   1c544:	4631      	mov	r1, r6
   1c546:	f009 f8c7 	bl	256d8 <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c54a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c54e:	06d8      	lsls	r0, r3, #27
   1c550:	d503      	bpl.n	1c55a <uarte_nrfx_isr_async+0x1b2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1c552:	2102      	movs	r1, #2
   1c554:	4620      	mov	r0, r4
   1c556:	f009 f8f3 	bl	25740 <async_uart_release>
	notify_rx_disable(dev);
   1c55a:	4620      	mov	r0, r4
   1c55c:	f009 f821 	bl	255a2 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c560:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1c564:	b1db      	cbz	r3, 1c59e <uarte_nrfx_isr_async+0x1f6>
    return p_reg->INTENSET & mask;
   1c566:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1c56a:	05d9      	lsls	r1, r3, #23
   1c56c:	d517      	bpl.n	1c59e <uarte_nrfx_isr_async+0x1f6>
	return config->uarte_regs;
   1c56e:	6863      	ldr	r3, [r4, #4]
   1c570:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1c572:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c576:	f3ef 8211 	mrs	r2, BASEPRI
   1c57a:	f381 8812 	msr	BASEPRI_MAX, r1
   1c57e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c582:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c586:	b131      	cbz	r1, 1c596 <uarte_nrfx_isr_async+0x1ee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c588:	2100      	movs	r1, #0
   1c58a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c58e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c592:	2101      	movs	r1, #1
   1c594:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c596:	f382 8811 	msr	BASEPRI, r2
   1c59a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c59e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1c5a2:	2b00      	cmp	r3, #0
   1c5a4:	f43f af15 	beq.w	1c3d2 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1c5a8:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1c5ac:	025a      	lsls	r2, r3, #9
   1c5ae:	f57f af10 	bpl.w	1c3d2 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1c5b2:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c5b4:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1c5b6:	e9d3 7300 	ldrd	r7, r3, [r3]
   1c5ba:	06db      	lsls	r3, r3, #27
   1c5bc:	d466      	bmi.n	1c68c <uarte_nrfx_isr_async+0x2e4>
	if (!data->async->tx_buf) {
   1c5be:	68eb      	ldr	r3, [r5, #12]
   1c5c0:	689b      	ldr	r3, [r3, #8]
   1c5c2:	2b00      	cmp	r3, #0
   1c5c4:	f43f af05 	beq.w	1c3d2 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1c5c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c5cc:	f3ef 8211 	mrs	r2, BASEPRI
   1c5d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c5d4:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1c5d8:	68eb      	ldr	r3, [r5, #12]
   1c5da:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1c5de:	2900      	cmp	r1, #0
   1c5e0:	bfac      	ite	ge
   1c5e2:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1c5e6:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1c5ea:	f382 8811 	msr	BASEPRI, r2
   1c5ee:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1c5f2:	68eb      	ldr	r3, [r5, #12]
   1c5f4:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1c5f8:	2a00      	cmp	r2, #0
   1c5fa:	d054      	beq.n	1c6a6 <uarte_nrfx_isr_async+0x2fe>
	__asm__ volatile(
   1c5fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c600:	f3ef 8611 	mrs	r6, BASEPRI
   1c604:	f383 8812 	msr	BASEPRI_MAX, r3
   1c608:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1c60c:	4629      	mov	r1, r5
   1c60e:	4620      	mov	r0, r4
   1c610:	f009 f8d0 	bl	257b4 <start_tx_locked>
	__asm__ volatile(
   1c614:	f386 8811 	msr	BASEPRI, r6
   1c618:	f3bf 8f6f 	isb	sy
				return;
   1c61c:	e6d9      	b.n	1c3d2 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1c61e:	2601      	movs	r6, #1
   1c620:	e6f9      	b.n	1c416 <uarte_nrfx_isr_async+0x6e>
   1c622:	2602      	movs	r6, #2
   1c624:	e6f7      	b.n	1c416 <uarte_nrfx_isr_async+0x6e>
   1c626:	2604      	movs	r6, #4
   1c628:	e6f5      	b.n	1c416 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1c62a:	3158      	adds	r1, #88	; 0x58
   1c62c:	4620      	mov	r0, r4
   1c62e:	f008 ffa0 	bl	25572 <rx_buf_release>
	__asm__ volatile(
   1c632:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c636:	f3ef 8111 	mrs	r1, BASEPRI
   1c63a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c63e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1c642:	68f3      	ldr	r3, [r6, #12]
   1c644:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1c646:	b1f2      	cbz	r2, 1c686 <uarte_nrfx_isr_async+0x2de>
		data->async->rx_buf = data->async->rx_next_buf;
   1c648:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1c64a:	68f3      	ldr	r3, [r6, #12]
   1c64c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1c64e:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1c650:	68f2      	ldr	r2, [r6, #12]
   1c652:	2300      	movs	r3, #0
   1c654:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1c656:	68f2      	ldr	r2, [r6, #12]
   1c658:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1c65a:	68f2      	ldr	r2, [r6, #12]
   1c65c:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c65e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1c662:	b90b      	cbnz	r3, 1c668 <uarte_nrfx_isr_async+0x2c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c664:	2301      	movs	r3, #1
   1c666:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1c668:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1c66c:	f023 0320 	bic.w	r3, r3, #32
   1c670:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1c674:	f381 8811 	msr	BASEPRI, r1
   1c678:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1c67c:	68f3      	ldr	r3, [r6, #12]
   1c67e:	2200      	movs	r2, #0
   1c680:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   1c684:	e708      	b.n	1c498 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c686:	2301      	movs	r3, #1
   1c688:	607b      	str	r3, [r7, #4]
}
   1c68a:	e7f3      	b.n	1c674 <uarte_nrfx_isr_async+0x2cc>
    p_reg->INTENCLR = mask;
   1c68c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c690:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1c694:	2101      	movs	r1, #1
   1c696:	4620      	mov	r0, r4
   1c698:	f009 f852 	bl	25740 <async_uart_release>
		if (!data->async->tx_size) {
   1c69c:	68eb      	ldr	r3, [r5, #12]
   1c69e:	68db      	ldr	r3, [r3, #12]
   1c6a0:	2b00      	cmp	r3, #0
   1c6a2:	d18c      	bne.n	1c5be <uarte_nrfx_isr_async+0x216>
   1c6a4:	e695      	b.n	1c3d2 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1c6a6:	6899      	ldr	r1, [r3, #8]
   1c6a8:	691a      	ldr	r2, [r3, #16]
   1c6aa:	4291      	cmp	r1, r2
   1c6ac:	d00c      	beq.n	1c6c8 <uarte_nrfx_isr_async+0x320>
		if (amount == data->async->xfer_len) {
   1c6ae:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1c6b0:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1c6b2:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1c6b4:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1c6b6:	d128      	bne.n	1c70a <uarte_nrfx_isr_async+0x362>
			data->async->tx_cache_offset += amount;
   1c6b8:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1c6ba:	4628      	mov	r0, r5
   1c6bc:	f008 fff4 	bl	256a8 <setup_tx_cache>
   1c6c0:	2800      	cmp	r0, #0
   1c6c2:	d19b      	bne.n	1c5fc <uarte_nrfx_isr_async+0x254>
			amount = data->async->tx_cache_offset;
   1c6c4:	68eb      	ldr	r3, [r5, #12]
   1c6c6:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1c6c8:	68e8      	ldr	r0, [r5, #12]
   1c6ca:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1c6cc:	f009 fb81 	bl	25dd2 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1c6d0:	2214      	movs	r2, #20
   1c6d2:	2100      	movs	r1, #0
   1c6d4:	a803      	add	r0, sp, #12
   1c6d6:	f007 fba8 	bl	23e2a <memset>
		.data.tx.buf = data->async->tx_buf,
   1c6da:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   1c6dc:	689a      	ldr	r2, [r3, #8]
   1c6de:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1c6e2:	68db      	ldr	r3, [r3, #12]
   1c6e4:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1c6e6:	bf1c      	itt	ne
   1c6e8:	2301      	movne	r3, #1
   1c6ea:	f88d 300c 	strbne.w	r3, [sp, #12]
   1c6ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1c6f2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1c6f6:	68ea      	ldr	r2, [r5, #12]
   1c6f8:	2300      	movs	r3, #0
   1c6fa:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1c6fc:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   1c6fe:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   1c700:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1c702:	4620      	mov	r0, r4
   1c704:	f008 ff15 	bl	25532 <user_callback>
   1c708:	e663      	b.n	1c3d2 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1c70a:	4616      	mov	r6, r2
   1c70c:	e7dc      	b.n	1c6c8 <uarte_nrfx_isr_async+0x320>
   1c70e:	bf00      	nop
   1c710:	000f423f 	.word	0x000f423f
   1c714:	000f4240 	.word	0x000f4240

0001c718 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1c718:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1c71a:	490e      	ldr	r1, [pc, #56]	; (1c754 <sys_clock_timeout_handler+0x3c>)
   1c71c:	e9d1 3400 	ldrd	r3, r4, [r1]
   1c720:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1c722:	18c3      	adds	r3, r0, r3
   1c724:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1c728:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1c72c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1c730:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1c734:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1c738:	d209      	bcs.n	1c74e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1c73a:	4b07      	ldr	r3, [pc, #28]	; (1c758 <sys_clock_timeout_handler+0x40>)
   1c73c:	681b      	ldr	r3, [r3, #0]
   1c73e:	0a1a      	lsrs	r2, r3, #8
   1c740:	061b      	lsls	r3, r3, #24
   1c742:	199c      	adds	r4, r3, r6
   1c744:	4b05      	ldr	r3, [pc, #20]	; (1c75c <sys_clock_timeout_handler+0x44>)
   1c746:	f142 0500 	adc.w	r5, r2, #0
   1c74a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1c74e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1c750:	f005 bb9e 	b.w	21e90 <sys_clock_announce>
   1c754:	20002038 	.word	0x20002038
   1c758:	20002dec 	.word	0x20002dec
   1c75c:	20002040 	.word	0x20002040

0001c760 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1c760:	4b0d      	ldr	r3, [pc, #52]	; (1c798 <z_nrf_rtc_timer_read+0x38>)
   1c762:	6818      	ldr	r0, [r3, #0]
   1c764:	0a01      	lsrs	r1, r0, #8
   1c766:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1c768:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1c76c:	4b0b      	ldr	r3, [pc, #44]	; (1c79c <z_nrf_rtc_timer_read+0x3c>)
   1c76e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1c772:	1818      	adds	r0, r3, r0
   1c774:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1c778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1c77c:	d20a      	bcs.n	1c794 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1c77e:	4b08      	ldr	r3, [pc, #32]	; (1c7a0 <z_nrf_rtc_timer_read+0x40>)
   1c780:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c784:	4290      	cmp	r0, r2
   1c786:	eb71 0303 	sbcs.w	r3, r1, r3
   1c78a:	d203      	bcs.n	1c794 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1c78c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1c790:	f141 0100 	adc.w	r1, r1, #0
}
   1c794:	4770      	bx	lr
   1c796:	bf00      	nop
   1c798:	20002dec 	.word	0x20002dec
   1c79c:	40011000 	.word	0x40011000
   1c7a0:	20002040 	.word	0x20002040

0001c7a4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1c7a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1c7a8:	4c2b      	ldr	r4, [pc, #172]	; (1c858 <rtc_nrf_isr+0xb4>)
   1c7aa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1c7ae:	0799      	lsls	r1, r3, #30
   1c7b0:	d50b      	bpl.n	1c7ca <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c7b2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1c7b6:	b143      	cbz	r3, 1c7ca <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1c7b8:	4a28      	ldr	r2, [pc, #160]	; (1c85c <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1c7c0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1c7c4:	6813      	ldr	r3, [r2, #0]
   1c7c6:	3301      	adds	r3, #1
   1c7c8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1c7ca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1c7ce:	03da      	lsls	r2, r3, #15
   1c7d0:	d523      	bpl.n	1c81a <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c7d2:	f3bf 8f5b 	dmb	ish
   1c7d6:	4b22      	ldr	r3, [pc, #136]	; (1c860 <rtc_nrf_isr+0xbc>)
   1c7d8:	e853 2f00 	ldrex	r2, [r3]
   1c7dc:	f022 0101 	bic.w	r1, r2, #1
   1c7e0:	e843 1000 	strex	r0, r1, [r3]
   1c7e4:	2800      	cmp	r0, #0
   1c7e6:	d1f7      	bne.n	1c7d8 <rtc_nrf_isr+0x34>
   1c7e8:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1c7ec:	07d3      	lsls	r3, r2, #31
   1c7ee:	d402      	bmi.n	1c7f6 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c7f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1c7f4:	b18b      	cbz	r3, 1c81a <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c7f6:	2500      	movs	r5, #0
   1c7f8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1c7fc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1c800:	f7ff ffae 	bl	1c760 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1c804:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c808:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1c80a:	4b16      	ldr	r3, [pc, #88]	; (1c864 <rtc_nrf_isr+0xc0>)
   1c80c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1c810:	42b0      	cmp	r0, r6
   1c812:	41b9      	sbcs	r1, r7
   1c814:	d204      	bcs.n	1c820 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1c816:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1c81a:	b003      	add	sp, #12
   1c81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c820:	f04f 38ff 	mov.w	r8, #4294967295
   1c824:	f04f 39ff 	mov.w	r9, #4294967295
   1c828:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1c82c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1c830:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1c832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1c836:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c83a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1c83e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1c842:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1c846:	2900      	cmp	r1, #0
   1c848:	d0e7      	beq.n	1c81a <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1c84a:	9000      	str	r0, [sp, #0]
   1c84c:	4632      	mov	r2, r6
   1c84e:	463b      	mov	r3, r7
   1c850:	4628      	mov	r0, r5
   1c852:	4788      	blx	r1
   1c854:	e7e1      	b.n	1c81a <rtc_nrf_isr+0x76>
   1c856:	bf00      	nop
   1c858:	40011000 	.word	0x40011000
   1c85c:	20002dec 	.word	0x20002dec
   1c860:	20002de4 	.word	0x20002de4
   1c864:	20002028 	.word	0x20002028

0001c868 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1c868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c86c:	4d4b      	ldr	r5, [pc, #300]	; (1c99c <compare_set.constprop.0.isra.0+0x134>)
   1c86e:	f3bf 8f5b 	dmb	ish
   1c872:	4606      	mov	r6, r0
   1c874:	460f      	mov	r7, r1
   1c876:	e855 8f00 	ldrex	r8, [r5]
   1c87a:	f028 0301 	bic.w	r3, r8, #1
   1c87e:	e845 3200 	strex	r2, r3, [r5]
   1c882:	2a00      	cmp	r2, #0
   1c884:	d1f7      	bne.n	1c876 <compare_set.constprop.0.isra.0+0xe>
   1c886:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   1c88a:	4c45      	ldr	r4, [pc, #276]	; (1c9a0 <compare_set.constprop.0.isra.0+0x138>)
   1c88c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1c890:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1c894:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1c898:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1c89c:	f7ff ff60 	bl	1c760 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1c8a0:	42b0      	cmp	r0, r6
   1c8a2:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   1c8a6:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1c8aa:	d240      	bcs.n	1c92e <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1c8ac:	4b3d      	ldr	r3, [pc, #244]	; (1c9a4 <compare_set.constprop.0.isra.0+0x13c>)
   1c8ae:	1a30      	subs	r0, r6, r0
   1c8b0:	eb67 0101 	sbc.w	r1, r7, r1
   1c8b4:	4298      	cmp	r0, r3
   1c8b6:	f171 0100 	sbcs.w	r1, r1, #0
   1c8ba:	d24c      	bcs.n	1c956 <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   1c8bc:	4b3a      	ldr	r3, [pc, #232]	; (1c9a8 <compare_set.constprop.0.isra.0+0x140>)
   1c8be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1c8c2:	429f      	cmp	r7, r3
   1c8c4:	bf08      	it	eq
   1c8c6:	4296      	cmpeq	r6, r2
   1c8c8:	d03e      	beq.n	1c948 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c8ca:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   1c8ce:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c8d2:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   1c8d6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   1c8da:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1c8de:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1c9ac <compare_set.constprop.0.isra.0+0x144>
	uint32_t cc_val = req_cc;
   1c8e2:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1c8e4:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   1c8e6:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1c8ea:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1c8ee:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1c8f2:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   1c8f6:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1c8fa:	ebae 0302 	sub.w	r3, lr, r2
   1c8fe:	445b      	add	r3, fp
   1c900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1c904:	4553      	cmp	r3, sl
   1c906:	d91f      	bls.n	1c948 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c908:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   1c90c:	b15b      	cbz	r3, 1c926 <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   1c90e:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1c912:	1a13      	subs	r3, r2, r0
   1c914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1c918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1c91c:	d914      	bls.n	1c948 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1c91e:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   1c922:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   1c926:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   1c92a:	3101      	adds	r1, #1
	for (;;) {
   1c92c:	e7dd      	b.n	1c8ea <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c92e:	4b20      	ldr	r3, [pc, #128]	; (1c9b0 <compare_set.constprop.0.isra.0+0x148>)
   1c930:	f3bf 8f5b 	dmb	ish
   1c934:	e853 1f00 	ldrex	r1, [r3]
   1c938:	f041 0101 	orr.w	r1, r1, #1
   1c93c:	e843 1200 	strex	r2, r1, [r3]
   1c940:	2a00      	cmp	r2, #0
   1c942:	d1f7      	bne.n	1c934 <compare_set.constprop.0.isra.0+0xcc>
   1c944:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1c948:	4b17      	ldr	r3, [pc, #92]	; (1c9a8 <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
   1c94a:	4a1a      	ldr	r2, [pc, #104]	; (1c9b4 <compare_set.constprop.0.isra.0+0x14c>)
   1c94c:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   1c94e:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
   1c952:	2200      	movs	r2, #0
   1c954:	605a      	str	r2, [r3, #4]
	if (key) {
   1c956:	f1b8 0f00 	cmp.w	r8, #0
   1c95a:	d01c      	beq.n	1c996 <compare_set.constprop.0.isra.0+0x12e>
   1c95c:	f3bf 8f5b 	dmb	ish
   1c960:	e855 3f00 	ldrex	r3, [r5]
   1c964:	f043 0301 	orr.w	r3, r3, #1
   1c968:	e845 3200 	strex	r2, r3, [r5]
   1c96c:	2a00      	cmp	r2, #0
   1c96e:	d1f7      	bne.n	1c960 <compare_set.constprop.0.isra.0+0xf8>
   1c970:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1c974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1c978:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c97c:	4b0c      	ldr	r3, [pc, #48]	; (1c9b0 <compare_set.constprop.0.isra.0+0x148>)
   1c97e:	f3bf 8f5b 	dmb	ish
   1c982:	681b      	ldr	r3, [r3, #0]
   1c984:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1c988:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c98a:	bf42      	ittt	mi
   1c98c:	4b0a      	ldrmi	r3, [pc, #40]	; (1c9b8 <compare_set.constprop.0.isra.0+0x150>)
   1c98e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1c992:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1c996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c99a:	bf00      	nop
   1c99c:	20002de8 	.word	0x20002de8
   1c9a0:	40011000 	.word	0x40011000
   1c9a4:	00800001 	.word	0x00800001
   1c9a8:	20002028 	.word	0x20002028
   1c9ac:	007ffffd 	.word	0x007ffffd
   1c9b0:	20002de4 	.word	0x20002de4
   1c9b4:	0001c719 	.word	0x0001c719
   1c9b8:	e000e100 	.word	0xe000e100

0001c9bc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1c9bc:	b570      	push	{r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1c9be:	4c19      	ldr	r4, [pc, #100]	; (1ca24 <sys_clock_driver_init+0x68>)
   1c9c0:	4b19      	ldr	r3, [pc, #100]	; (1ca28 <sys_clock_driver_init+0x6c>)
   1c9c2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1c9c6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1c9ca:	4b18      	ldr	r3, [pc, #96]	; (1ca2c <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   1c9cc:	2500      	movs	r5, #0
   1c9ce:	f04f 30ff 	mov.w	r0, #4294967295
   1c9d2:	f04f 31ff 	mov.w	r1, #4294967295
   1c9d6:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1c9da:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1c9de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1c9e2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c9e6:	4b12      	ldr	r3, [pc, #72]	; (1ca30 <sys_clock_driver_init+0x74>)
   1c9e8:	2602      	movs	r6, #2
   1c9ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1c9ee:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1c9f2:	2101      	movs	r1, #1
   1c9f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1c9f8:	2011      	movs	r0, #17
   1c9fa:	462a      	mov	r2, r5
   1c9fc:	f7f7 fb26 	bl	1404c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1ca00:	2011      	movs	r0, #17
   1ca02:	f7f7 faf3 	bl	13fec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ca06:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ca08:	4a0a      	ldr	r2, [pc, #40]	; (1ca34 <sys_clock_driver_init+0x78>)
   1ca0a:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ca0c:	2100      	movs	r1, #0
   1ca0e:	6023      	str	r3, [r4, #0]
   1ca10:	4809      	ldr	r0, [pc, #36]	; (1ca38 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1ca12:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ca14:	f7ff ff28 	bl	1c868 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1ca18:	4630      	mov	r0, r6
   1ca1a:	f7fe fd91 	bl	1b540 <z_nrf_clock_control_lf_on>

	return 0;
}
   1ca1e:	4628      	mov	r0, r5
   1ca20:	bd70      	pop	{r4, r5, r6, pc}
   1ca22:	bf00      	nop
   1ca24:	40011000 	.word	0x40011000
   1ca28:	000f0003 	.word	0x000f0003
   1ca2c:	20002028 	.word	0x20002028
   1ca30:	e000e100 	.word	0xe000e100
   1ca34:	20002de8 	.word	0x20002de8
   1ca38:	007fffff 	.word	0x007fffff

0001ca3c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1ca3c:	1c43      	adds	r3, r0, #1
{
   1ca3e:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1ca40:	d01d      	beq.n	1ca7e <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1ca42:	2801      	cmp	r0, #1
   1ca44:	dd1d      	ble.n	1ca82 <sys_clock_set_timeout+0x46>
   1ca46:	4a10      	ldr	r2, [pc, #64]	; (1ca88 <sys_clock_set_timeout+0x4c>)
   1ca48:	4b10      	ldr	r3, [pc, #64]	; (1ca8c <sys_clock_set_timeout+0x50>)
   1ca4a:	4290      	cmp	r0, r2
   1ca4c:	bfd4      	ite	le
   1ca4e:	4604      	movle	r4, r0
   1ca50:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1ca52:	f7ff fe85 	bl	1c760 <z_nrf_rtc_timer_read>
   1ca56:	4a0e      	ldr	r2, [pc, #56]	; (1ca90 <sys_clock_set_timeout+0x54>)
   1ca58:	e9d2 3100 	ldrd	r3, r1, [r2]
   1ca5c:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1ca5e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   1ca62:	4a0a      	ldr	r2, [pc, #40]	; (1ca8c <sys_clock_set_timeout+0x50>)
		cyc = 0;
   1ca64:	bf28      	it	cs
   1ca66:	2400      	movcs	r4, #0
	cyc += unannounced;
   1ca68:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1ca6a:	4294      	cmp	r4, r2
   1ca6c:	bf28      	it	cs
   1ca6e:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1ca70:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ca72:	f141 0100 	adc.w	r1, r1, #0
}
   1ca76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ca7a:	f7ff bef5 	b.w	1c868 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1ca7e:	4c03      	ldr	r4, [pc, #12]	; (1ca8c <sys_clock_set_timeout+0x50>)
   1ca80:	e7e7      	b.n	1ca52 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1ca82:	2401      	movs	r4, #1
   1ca84:	e7e5      	b.n	1ca52 <sys_clock_set_timeout+0x16>
   1ca86:	bf00      	nop
   1ca88:	007ffffe 	.word	0x007ffffe
   1ca8c:	007fffff 	.word	0x007fffff
   1ca90:	20002038 	.word	0x20002038

0001ca94 <sys_clock_elapsed>:
{
   1ca94:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ca96:	f7ff fe63 	bl	1c760 <z_nrf_rtc_timer_read>
   1ca9a:	4b02      	ldr	r3, [pc, #8]	; (1caa4 <sys_clock_elapsed+0x10>)
   1ca9c:	681b      	ldr	r3, [r3, #0]
}
   1ca9e:	1ac0      	subs	r0, r0, r3
   1caa0:	bd08      	pop	{r3, pc}
   1caa2:	bf00      	nop
   1caa4:	20002038 	.word	0x20002038

0001caa8 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1caac:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   1cab0:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1cab4:	6906      	ldr	r6, [r0, #16]
{
   1cab6:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1cab8:	d00e      	beq.n	1cad8 <z_impl_gpio_pin_configure+0x30>
   1caba:	4942      	ldr	r1, [pc, #264]	; (1cbc4 <z_impl_gpio_pin_configure+0x11c>)
   1cabc:	4a42      	ldr	r2, [pc, #264]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cabe:	4843      	ldr	r0, [pc, #268]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cac0:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1cac4:	f006 fd99 	bl	235fa <assert_print>
   1cac8:	4841      	ldr	r0, [pc, #260]	; (1cbd0 <z_impl_gpio_pin_configure+0x128>)
   1caca:	f006 fd96 	bl	235fa <assert_print>
   1cace:	f44f 7135 	mov.w	r1, #724	; 0x2d4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1cad2:	483d      	ldr	r0, [pc, #244]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cad4:	f006 fd8a 	bl	235ec <assert_post_action>
   1cad8:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1cadc:	2a30      	cmp	r2, #48	; 0x30
   1cade:	d10c      	bne.n	1cafa <z_impl_gpio_pin_configure+0x52>
   1cae0:	493c      	ldr	r1, [pc, #240]	; (1cbd4 <z_impl_gpio_pin_configure+0x12c>)
   1cae2:	4a39      	ldr	r2, [pc, #228]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cae4:	4839      	ldr	r0, [pc, #228]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cae6:	f240 23d7 	movw	r3, #727	; 0x2d7
   1caea:	f006 fd86 	bl	235fa <assert_print>
   1caee:	483a      	ldr	r0, [pc, #232]	; (1cbd8 <z_impl_gpio_pin_configure+0x130>)
   1caf0:	f006 fd83 	bl	235fa <assert_print>
   1caf4:	f240 21d7 	movw	r1, #727	; 0x2d7
   1caf8:	e7eb      	b.n	1cad2 <z_impl_gpio_pin_configure+0x2a>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   1cafa:	4a38      	ldr	r2, [pc, #224]	; (1cbdc <z_impl_gpio_pin_configure+0x134>)
   1cafc:	4d38      	ldr	r5, [pc, #224]	; (1cbe0 <z_impl_gpio_pin_configure+0x138>)
   1cafe:	401a      	ands	r2, r3
   1cb00:	42aa      	cmp	r2, r5
   1cb02:	d10c      	bne.n	1cb1e <z_impl_gpio_pin_configure+0x76>
   1cb04:	4937      	ldr	r1, [pc, #220]	; (1cbe4 <z_impl_gpio_pin_configure+0x13c>)
   1cb06:	4a30      	ldr	r2, [pc, #192]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cb08:	4830      	ldr	r0, [pc, #192]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cb0a:	f240 23db 	movw	r3, #731	; 0x2db
   1cb0e:	f006 fd74 	bl	235fa <assert_print>
   1cb12:	4835      	ldr	r0, [pc, #212]	; (1cbe8 <z_impl_gpio_pin_configure+0x140>)
   1cb14:	f006 fd71 	bl	235fa <assert_print>
   1cb18:	f240 21db 	movw	r1, #731	; 0x2db
   1cb1c:	e7d9      	b.n	1cad2 <z_impl_gpio_pin_configure+0x2a>
		 "Input cannot be enabled for 'Open Drain', 'Open Source' modes without Output");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1cb1e:	f003 0206 	and.w	r2, r3, #6
   1cb22:	2a04      	cmp	r2, #4
   1cb24:	d109      	bne.n	1cb3a <z_impl_gpio_pin_configure+0x92>
   1cb26:	4931      	ldr	r1, [pc, #196]	; (1cbec <z_impl_gpio_pin_configure+0x144>)
   1cb28:	4a27      	ldr	r2, [pc, #156]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cb2a:	4828      	ldr	r0, [pc, #160]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cb2c:	f240 23de 	movw	r3, #734	; 0x2de
   1cb30:	f006 fd63 	bl	235fa <assert_print>
   1cb34:	f240 21de 	movw	r1, #734	; 0x2de
   1cb38:	e7cb      	b.n	1cad2 <z_impl_gpio_pin_configure+0x2a>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1cb3a:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1cb3e:	d016      	beq.n	1cb6e <z_impl_gpio_pin_configure+0xc6>
   1cb40:	039d      	lsls	r5, r3, #14
   1cb42:	d40c      	bmi.n	1cb5e <z_impl_gpio_pin_configure+0xb6>
   1cb44:	492a      	ldr	r1, [pc, #168]	; (1cbf0 <z_impl_gpio_pin_configure+0x148>)
   1cb46:	4a20      	ldr	r2, [pc, #128]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cb48:	4820      	ldr	r0, [pc, #128]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cb4a:	f240 23e1 	movw	r3, #737	; 0x2e1
   1cb4e:	f006 fd54 	bl	235fa <assert_print>
   1cb52:	4828      	ldr	r0, [pc, #160]	; (1cbf4 <z_impl_gpio_pin_configure+0x14c>)
   1cb54:	f006 fd51 	bl	235fa <assert_print>
   1cb58:	f240 21e1 	movw	r1, #737	; 0x2e1
   1cb5c:	e7b9      	b.n	1cad2 <z_impl_gpio_pin_configure+0x2a>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1cb5e:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1cb62:	d018      	beq.n	1cb96 <z_impl_gpio_pin_configure+0xee>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1cb64:	4a24      	ldr	r2, [pc, #144]	; (1cbf8 <z_impl_gpio_pin_configure+0x150>)
   1cb66:	439a      	bics	r2, r3
   1cb68:	d101      	bne.n	1cb6e <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1cb6a:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1cb6e:	6824      	ldr	r4, [r4, #0]
   1cb70:	2501      	movs	r5, #1
   1cb72:	408d      	lsls	r5, r1
   1cb74:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1cb76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1cb7a:	d119      	bne.n	1cbb0 <z_impl_gpio_pin_configure+0x108>
   1cb7c:	491f      	ldr	r1, [pc, #124]	; (1cbfc <z_impl_gpio_pin_configure+0x154>)
   1cb7e:	4a12      	ldr	r2, [pc, #72]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cb80:	4812      	ldr	r0, [pc, #72]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cb82:	f240 23f1 	movw	r3, #753	; 0x2f1
   1cb86:	f006 fd38 	bl	235fa <assert_print>
   1cb8a:	481d      	ldr	r0, [pc, #116]	; (1cc00 <z_impl_gpio_pin_configure+0x158>)
   1cb8c:	f006 fd35 	bl	235fa <assert_print>
   1cb90:	f240 21f1 	movw	r1, #753	; 0x2f1
   1cb94:	e79d      	b.n	1cad2 <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1cb96:	491b      	ldr	r1, [pc, #108]	; (1cc04 <z_impl_gpio_pin_configure+0x15c>)
   1cb98:	4a0b      	ldr	r2, [pc, #44]	; (1cbc8 <z_impl_gpio_pin_configure+0x120>)
   1cb9a:	480c      	ldr	r0, [pc, #48]	; (1cbcc <z_impl_gpio_pin_configure+0x124>)
   1cb9c:	f240 23e5 	movw	r3, #741	; 0x2e5
   1cba0:	f006 fd2b 	bl	235fa <assert_print>
   1cba4:	4818      	ldr	r0, [pc, #96]	; (1cc08 <z_impl_gpio_pin_configure+0x160>)
   1cba6:	f006 fd28 	bl	235fa <assert_print>
   1cbaa:	f240 21e5 	movw	r1, #741	; 0x2e5
   1cbae:	e790      	b.n	1cad2 <z_impl_gpio_pin_configure+0x2a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cbb0:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1cbb2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1cbb4:	bf4c      	ite	mi
   1cbb6:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1cbb8:	43ac      	bicpl	r4, r5
   1cbba:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   1cbbc:	683b      	ldr	r3, [r7, #0]
}
   1cbbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1cbc2:	4718      	bx	r3
   1cbc4:	00029828 	.word	0x00029828
   1cbc8:	000297f7 	.word	0x000297f7
   1cbcc:	00026f1a 	.word	0x00026f1a
   1cbd0:	00029885 	.word	0x00029885
   1cbd4:	000298a9 	.word	0x000298a9
   1cbd8:	000298e2 	.word	0x000298e2
   1cbdc:	00030002 	.word	0x00030002
   1cbe0:	00010002 	.word	0x00010002
   1cbe4:	0002991f 	.word	0x0002991f
   1cbe8:	00029966 	.word	0x00029966
   1cbec:	000299b5 	.word	0x000299b5
   1cbf0:	000299e8 	.word	0x000299e8
   1cbf4:	00029a2e 	.word	0x00029a2e
   1cbf8:	00100001 	.word	0x00100001
   1cbfc:	00029ad6 	.word	0x00029ad6
   1cc00:	00029b14 	.word	0x00029b14
   1cc04:	00029a69 	.word	0x00029a69
   1cc08:	00029aaa 	.word	0x00029aaa

0001cc0c <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1cc0c:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1cc0e:	2301      	movs	r3, #1
   1cc10:	fa03 f101 	lsl.w	r1, r3, r1
   1cc14:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1cc16:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1cc18:	681b      	ldr	r3, [r3, #0]
   1cc1a:	4219      	tst	r1, r3
   1cc1c:	d10e      	bne.n	1cc3c <gpio_pin_set+0x30>
   1cc1e:	490e      	ldr	r1, [pc, #56]	; (1cc58 <gpio_pin_set+0x4c>)
   1cc20:	4a0e      	ldr	r2, [pc, #56]	; (1cc5c <gpio_pin_set+0x50>)
   1cc22:	480f      	ldr	r0, [pc, #60]	; (1cc60 <gpio_pin_set+0x54>)
   1cc24:	f240 535c 	movw	r3, #1372	; 0x55c
   1cc28:	f006 fce7 	bl	235fa <assert_print>
   1cc2c:	480d      	ldr	r0, [pc, #52]	; (1cc64 <gpio_pin_set+0x58>)
   1cc2e:	f006 fce4 	bl	235fa <assert_print>
   1cc32:	480a      	ldr	r0, [pc, #40]	; (1cc5c <gpio_pin_set+0x50>)
   1cc34:	f240 515c 	movw	r1, #1372	; 0x55c
   1cc38:	f006 fcd8 	bl	235ec <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1cc3c:	6823      	ldr	r3, [r4, #0]
   1cc3e:	4219      	tst	r1, r3
   1cc40:	d003      	beq.n	1cc4a <gpio_pin_set+0x3e>
	if (value != 0)	{
   1cc42:	b122      	cbz	r2, 1cc4e <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   1cc44:	6883      	ldr	r3, [r0, #8]
   1cc46:	691b      	ldr	r3, [r3, #16]
   1cc48:	e003      	b.n	1cc52 <gpio_pin_set+0x46>
	if (value != 0)	{
   1cc4a:	2a00      	cmp	r2, #0
   1cc4c:	d0fa      	beq.n	1cc44 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1cc4e:	6883      	ldr	r3, [r0, #8]
   1cc50:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1cc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1cc56:	4718      	bx	r3
   1cc58:	00029ad6 	.word	0x00029ad6
   1cc5c:	000297f7 	.word	0x000297f7
   1cc60:	00026f1a 	.word	0x00026f1a
   1cc64:	00029b14 	.word	0x00029b14

0001cc68 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1cc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc6c:	4e15      	ldr	r6, [pc, #84]	; (1ccc4 <dk_set_leds_state.part.0+0x5c>)
   1cc6e:	b086      	sub	sp, #24
   1cc70:	4607      	mov	r7, r0
   1cc72:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1cc74:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1cc76:	fa27 f205 	lsr.w	r2, r7, r5
   1cc7a:	f012 0201 	ands.w	r2, r2, #1
   1cc7e:	d117      	bne.n	1ccb0 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1cc80:	fa28 f305 	lsr.w	r3, r8, r5
   1cc84:	07db      	lsls	r3, r3, #31
   1cc86:	d515      	bpl.n	1ccb4 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1cc88:	7931      	ldrb	r1, [r6, #4]
   1cc8a:	6830      	ldr	r0, [r6, #0]
   1cc8c:	f7ff ffbe 	bl	1cc0c <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1cc90:	4604      	mov	r4, r0
   1cc92:	b178      	cbz	r0, 1ccb4 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1cc94:	4b0c      	ldr	r3, [pc, #48]	; (1ccc8 <dk_set_leds_state.part.0+0x60>)
   1cc96:	9305      	str	r3, [sp, #20]
   1cc98:	480c      	ldr	r0, [pc, #48]	; (1cccc <dk_set_leds_state.part.0+0x64>)
   1cc9a:	2302      	movs	r3, #2
   1cc9c:	aa04      	add	r2, sp, #16
   1cc9e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cca2:	9304      	str	r3, [sp, #16]
   1cca4:	f008 fe12 	bl	258cc <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1cca8:	4620      	mov	r0, r4
   1ccaa:	b006      	add	sp, #24
   1ccac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1ccb0:	2201      	movs	r2, #1
   1ccb2:	e7e9      	b.n	1cc88 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1ccb4:	3501      	adds	r5, #1
   1ccb6:	2d04      	cmp	r5, #4
   1ccb8:	f106 0608 	add.w	r6, r6, #8
   1ccbc:	d1db      	bne.n	1cc76 <dk_set_leds_state.part.0+0xe>
	return 0;
   1ccbe:	2400      	movs	r4, #0
   1ccc0:	e7f2      	b.n	1cca8 <dk_set_leds_state.part.0+0x40>
   1ccc2:	bf00      	nop
   1ccc4:	000269a8 	.word	0x000269a8
   1ccc8:	00029b26 	.word	0x00029b26
   1cccc:	000262ec 	.word	0x000262ec

0001ccd0 <dk_leds_init>:
{
   1ccd0:	b570      	push	{r4, r5, r6, lr}
   1ccd2:	4c12      	ldr	r4, [pc, #72]	; (1cd1c <dk_leds_init+0x4c>)
   1ccd4:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1ccd6:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1ccd8:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1ccda:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1ccdc:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1ccde:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1cce2:	f7ff fee1 	bl	1caa8 <z_impl_gpio_pin_configure>
		if (err) {
   1cce6:	4605      	mov	r5, r0
   1cce8:	b950      	cbnz	r0, 1cd00 <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1ccea:	3601      	adds	r6, #1
   1ccec:	2e04      	cmp	r6, #4
   1ccee:	f104 0408 	add.w	r4, r4, #8
   1ccf2:	d1f1      	bne.n	1ccd8 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1ccf4:	210f      	movs	r1, #15
}
   1ccf6:	b006      	add	sp, #24
   1ccf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ccfc:	f7ff bfb4 	b.w	1cc68 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1cd00:	4b07      	ldr	r3, [pc, #28]	; (1cd20 <dk_leds_init+0x50>)
   1cd02:	9305      	str	r3, [sp, #20]
   1cd04:	4807      	ldr	r0, [pc, #28]	; (1cd24 <dk_leds_init+0x54>)
   1cd06:	2302      	movs	r3, #2
   1cd08:	aa04      	add	r2, sp, #16
   1cd0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cd0e:	9304      	str	r3, [sp, #16]
   1cd10:	f008 fddc 	bl	258cc <z_log_msg_static_create.constprop.0>
}
   1cd14:	4628      	mov	r0, r5
   1cd16:	b006      	add	sp, #24
   1cd18:	bd70      	pop	{r4, r5, r6, pc}
   1cd1a:	bf00      	nop
   1cd1c:	000269a8 	.word	0x000269a8
   1cd20:	00029b3c 	.word	0x00029b3c
   1cd24:	000262ec 	.word	0x000262ec

0001cd28 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1cd28:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1cd2a:	2803      	cmp	r0, #3
{
   1cd2c:	b086      	sub	sp, #24
   1cd2e:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1cd30:	d90e      	bls.n	1cd50 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1cd32:	4b12      	ldr	r3, [pc, #72]	; (1cd7c <dk_set_led+0x54>)
   1cd34:	9305      	str	r3, [sp, #20]
   1cd36:	4812      	ldr	r0, [pc, #72]	; (1cd80 <dk_set_led+0x58>)
   1cd38:	2302      	movs	r3, #2
   1cd3a:	aa04      	add	r2, sp, #16
   1cd3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1cd40:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1cd44:	9304      	str	r3, [sp, #16]
   1cd46:	f008 fdc1 	bl	258cc <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1cd4a:	4620      	mov	r0, r4
   1cd4c:	b006      	add	sp, #24
   1cd4e:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1cd50:	4b0c      	ldr	r3, [pc, #48]	; (1cd84 <dk_set_led+0x5c>)
   1cd52:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1cd56:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1cd5a:	7909      	ldrb	r1, [r1, #4]
   1cd5c:	f7ff ff56 	bl	1cc0c <gpio_pin_set>
	if (err) {
   1cd60:	4604      	mov	r4, r0
   1cd62:	2800      	cmp	r0, #0
   1cd64:	d0f1      	beq.n	1cd4a <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1cd66:	4b08      	ldr	r3, [pc, #32]	; (1cd88 <dk_set_led+0x60>)
   1cd68:	9305      	str	r3, [sp, #20]
   1cd6a:	4805      	ldr	r0, [pc, #20]	; (1cd80 <dk_set_led+0x58>)
   1cd6c:	2302      	movs	r3, #2
   1cd6e:	aa04      	add	r2, sp, #16
   1cd70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cd74:	9304      	str	r3, [sp, #16]
   1cd76:	f008 fda9 	bl	258cc <z_log_msg_static_create.constprop.0>
   1cd7a:	e7e6      	b.n	1cd4a <dk_set_led+0x22>
   1cd7c:	00029b56 	.word	0x00029b56
   1cd80:	000262ec 	.word	0x000262ec
   1cd84:	000269a8 	.word	0x000269a8
   1cd88:	00029b26 	.word	0x00029b26

0001cd8c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1cd8c:	4602      	mov	r2, r0
   1cd8e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1cd90:	4801      	ldr	r0, [pc, #4]	; (1cd98 <multithreading_lock_acquire+0xc>)
   1cd92:	f002 bca5 	b.w	1f6e0 <z_impl_k_mutex_lock>
   1cd96:	bf00      	nop
   1cd98:	20000914 	.word	0x20000914

0001cd9c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1cd9c:	4801      	ldr	r0, [pc, #4]	; (1cda4 <multithreading_lock_release+0x8>)
   1cd9e:	f002 bd6f 	b.w	1f880 <z_impl_k_mutex_unlock>
   1cda2:	bf00      	nop
   1cda4:	20000914 	.word	0x20000914

0001cda8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1cda8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1cdaa:	f7f6 f91d 	bl	12fe8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1cdae:	4b07      	ldr	r3, [pc, #28]	; (1cdcc <k_sys_fatal_error_handler+0x24>)
   1cdb0:	9305      	str	r3, [sp, #20]
   1cdb2:	2302      	movs	r3, #2
   1cdb4:	9304      	str	r3, [sp, #16]
   1cdb6:	4806      	ldr	r0, [pc, #24]	; (1cdd0 <k_sys_fatal_error_handler+0x28>)
   1cdb8:	2300      	movs	r3, #0
   1cdba:	aa04      	add	r2, sp, #16
   1cdbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cdc0:	f7f6 fa78 	bl	132b4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1cdc4:	2000      	movs	r0, #0
   1cdc6:	f7f7 ffd9 	bl	14d7c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1cdca:	bf00      	nop
   1cdcc:	00029b85 	.word	0x00029b85
   1cdd0:	000262f4 	.word	0x000262f4

0001cdd4 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1cdd4:	b598      	push	{r3, r4, r7, lr}
   1cdd6:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1cdd8:	466c      	mov	r4, sp
   1cdda:	b08a      	sub	sp, #40	; 0x28
   1cddc:	466a      	mov	r2, sp
   1cdde:	4b0c      	ldr	r3, [pc, #48]	; (1ce10 <sdc_assertion_handler+0x3c>)
   1cde0:	61d1      	str	r1, [r2, #28]
   1cde2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cde6:	f44f 7300 	mov.w	r3, #512	; 0x200
   1cdea:	8413      	strh	r3, [r2, #32]
   1cdec:	4b09      	ldr	r3, [pc, #36]	; (1ce14 <sdc_assertion_handler+0x40>)
   1cdee:	f842 3f10 	str.w	r3, [r2, #16]!
   1cdf2:	4809      	ldr	r0, [pc, #36]	; (1ce18 <sdc_assertion_handler+0x44>)
   1cdf4:	2300      	movs	r3, #0
   1cdf6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1cdfa:	f7f6 fa5b 	bl	132b4 <z_impl_z_log_msg_static_create>
   1cdfe:	46a5      	mov	sp, r4
	k_oops();
   1ce00:	4040      	eors	r0, r0
   1ce02:	f380 8811 	msr	BASEPRI, r0
   1ce06:	f04f 0003 	mov.w	r0, #3
   1ce0a:	df02      	svc	2
}
   1ce0c:	46bd      	mov	sp, r7
   1ce0e:	bd98      	pop	{r3, r4, r7, pc}
   1ce10:	00029ba2 	.word	0x00029ba2
   1ce14:	01000004 	.word	0x01000004
   1ce18:	000262cc 	.word	0x000262cc

0001ce1c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1ce1c:	b510      	push	{r4, lr}
   1ce1e:	4603      	mov	r3, r0
   1ce20:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1ce22:	4811      	ldr	r0, [pc, #68]	; (1ce68 <rand_prio_low_vector_get_blocking+0x4c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1ce24:	6881      	ldr	r1, [r0, #8]
   1ce26:	680c      	ldr	r4, [r1, #0]
   1ce28:	b964      	cbnz	r4, 1ce44 <rand_prio_low_vector_get_blocking+0x28>
   1ce2a:	4910      	ldr	r1, [pc, #64]	; (1ce6c <rand_prio_low_vector_get_blocking+0x50>)
   1ce2c:	4a10      	ldr	r2, [pc, #64]	; (1ce70 <rand_prio_low_vector_get_blocking+0x54>)
   1ce2e:	4811      	ldr	r0, [pc, #68]	; (1ce74 <rand_prio_low_vector_get_blocking+0x58>)
   1ce30:	234d      	movs	r3, #77	; 0x4d
   1ce32:	f006 fbe2 	bl	235fa <assert_print>
   1ce36:	4810      	ldr	r0, [pc, #64]	; (1ce78 <rand_prio_low_vector_get_blocking+0x5c>)
   1ce38:	f006 fbdf 	bl	235fa <assert_print>
   1ce3c:	480c      	ldr	r0, [pc, #48]	; (1ce70 <rand_prio_low_vector_get_blocking+0x54>)
   1ce3e:	214d      	movs	r1, #77	; 0x4d
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1ce40:	f006 fbd4 	bl	235ec <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ce44:	4619      	mov	r1, r3
   1ce46:	47a0      	blx	r4
   1ce48:	b168      	cbz	r0, 1ce66 <rand_prio_low_vector_get_blocking+0x4a>
   1ce4a:	490c      	ldr	r1, [pc, #48]	; (1ce7c <rand_prio_low_vector_get_blocking+0x60>)
   1ce4c:	4a0c      	ldr	r2, [pc, #48]	; (1ce80 <rand_prio_low_vector_get_blocking+0x64>)
   1ce4e:	4809      	ldr	r0, [pc, #36]	; (1ce74 <rand_prio_low_vector_get_blocking+0x58>)
   1ce50:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1ce54:	f006 fbd1 	bl	235fa <assert_print>
   1ce58:	480a      	ldr	r0, [pc, #40]	; (1ce84 <rand_prio_low_vector_get_blocking+0x68>)
   1ce5a:	f006 fbce 	bl	235fa <assert_print>
   1ce5e:	4808      	ldr	r0, [pc, #32]	; (1ce80 <rand_prio_low_vector_get_blocking+0x64>)
   1ce60:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1ce64:	e7ec      	b.n	1ce40 <rand_prio_low_vector_get_blocking+0x24>
	(void) err;
}
   1ce66:	bd10      	pop	{r4, pc}
   1ce68:	00026038 	.word	0x00026038
   1ce6c:	00029bfb 	.word	0x00029bfb
   1ce70:	00029bc7 	.word	0x00029bc7
   1ce74:	00026f1a 	.word	0x00026f1a
   1ce78:	00029c1b 	.word	0x00029c1b
   1ce7c:	000273e3 	.word	0x000273e3
   1ce80:	00029c41 	.word	0x00029c41
   1ce84:	00029c7a 	.word	0x00029c7a

0001ce88 <rand_prio_low_vector_get>:
{
   1ce88:	b538      	push	{r3, r4, r5, lr}
   1ce8a:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1ce8c:	480d      	ldr	r0, [pc, #52]	; (1cec4 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ce8e:	6883      	ldr	r3, [r0, #8]
   1ce90:	685d      	ldr	r5, [r3, #4]
   1ce92:	460a      	mov	r2, r1
   1ce94:	b975      	cbnz	r5, 1ceb4 <rand_prio_low_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1ce96:	490c      	ldr	r1, [pc, #48]	; (1cec8 <rand_prio_low_vector_get+0x40>)
   1ce98:	4a0c      	ldr	r2, [pc, #48]	; (1cecc <rand_prio_low_vector_get+0x44>)
   1ce9a:	480d      	ldr	r0, [pc, #52]	; (1ced0 <rand_prio_low_vector_get+0x48>)
   1ce9c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1cea0:	f006 fbab 	bl	235fa <assert_print>
   1cea4:	480b      	ldr	r0, [pc, #44]	; (1ced4 <rand_prio_low_vector_get+0x4c>)
   1cea6:	f006 fba8 	bl	235fa <assert_print>
   1ceaa:	4808      	ldr	r0, [pc, #32]	; (1cecc <rand_prio_low_vector_get+0x44>)
   1ceac:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   1ceb0:	f006 fb9c 	bl	235ec <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ceb4:	2300      	movs	r3, #0
   1ceb6:	4621      	mov	r1, r4
   1ceb8:	47a8      	blx	r5
   1ceba:	2800      	cmp	r0, #0
   1cebc:	dbeb      	blt.n	1ce96 <rand_prio_low_vector_get+0xe>
}
   1cebe:	b2c0      	uxtb	r0, r0
   1cec0:	bd38      	pop	{r3, r4, r5, pc}
   1cec2:	bf00      	nop
   1cec4:	00026038 	.word	0x00026038
   1cec8:	00029cb4 	.word	0x00029cb4
   1cecc:	00029c41 	.word	0x00029c41
   1ced0:	00026f1a 	.word	0x00026f1a
   1ced4:	00029cbd 	.word	0x00029cbd

0001ced8 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1ced8:	4901      	ldr	r1, [pc, #4]	; (1cee0 <receive_signal_raise+0x8>)
   1ceda:	4802      	ldr	r0, [pc, #8]	; (1cee4 <receive_signal_raise+0xc>)
   1cedc:	f008 befb 	b.w	25cd6 <k_work_submit_to_queue>
   1cee0:	20002df0 	.word	0x20002df0
   1cee4:	200028c8 	.word	0x200028c8

0001cee8 <rand_prio_high_vector_get>:
{
   1cee8:	b538      	push	{r3, r4, r5, lr}
   1ceea:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1ceec:	480d      	ldr	r0, [pc, #52]	; (1cf24 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1ceee:	6883      	ldr	r3, [r0, #8]
   1cef0:	685d      	ldr	r5, [r3, #4]
   1cef2:	460a      	mov	r2, r1
   1cef4:	b975      	cbnz	r5, 1cf14 <rand_prio_high_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1cef6:	490c      	ldr	r1, [pc, #48]	; (1cf28 <rand_prio_high_vector_get+0x40>)
   1cef8:	4a0c      	ldr	r2, [pc, #48]	; (1cf2c <rand_prio_high_vector_get+0x44>)
   1cefa:	480d      	ldr	r0, [pc, #52]	; (1cf30 <rand_prio_high_vector_get+0x48>)
   1cefc:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   1cf00:	f006 fb7b 	bl	235fa <assert_print>
   1cf04:	480b      	ldr	r0, [pc, #44]	; (1cf34 <rand_prio_high_vector_get+0x4c>)
   1cf06:	f006 fb78 	bl	235fa <assert_print>
   1cf0a:	4808      	ldr	r0, [pc, #32]	; (1cf2c <rand_prio_high_vector_get+0x44>)
   1cf0c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
   1cf10:	f006 fb6c 	bl	235ec <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1cf14:	2300      	movs	r3, #0
   1cf16:	4621      	mov	r1, r4
   1cf18:	47a8      	blx	r5
   1cf1a:	2800      	cmp	r0, #0
   1cf1c:	dbeb      	blt.n	1cef6 <rand_prio_high_vector_get+0xe>
}
   1cf1e:	b2c0      	uxtb	r0, r0
   1cf20:	bd38      	pop	{r3, r4, r5, pc}
   1cf22:	bf00      	nop
   1cf24:	00026038 	.word	0x00026038
   1cf28:	00029cb4 	.word	0x00029cb4
   1cf2c:	00029c41 	.word	0x00029c41
   1cf30:	00026f1a 	.word	0x00026f1a
   1cf34:	00029d00 	.word	0x00029d00

0001cf38 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   1cf38:	b5b0      	push	{r4, r5, r7, lr}
   1cf3a:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   1cf3c:	4839      	ldr	r0, [pc, #228]	; (1d024 <hci_driver_init+0xec>)
{
   1cf3e:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1cf40:	f7f9 f9b2 	bl	162a8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1cf44:	4838      	ldr	r0, [pc, #224]	; (1d028 <hci_driver_init+0xf0>)
   1cf46:	f7e3 fcdb 	bl	900 <sdc_init>
		err = sdc_support_adv();
   1cf4a:	f7e3 fd53 	bl	9f4 <sdc_support_adv>
		if (err) {
   1cf4e:	b120      	cbz	r0, 1cf5a <hci_driver_init+0x22>
			return -ENOTSUP;
   1cf50:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1cf54:	3708      	adds	r7, #8
   1cf56:	46bd      	mov	sp, r7
   1cf58:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1cf5a:	f7e3 fd7b 	bl	a54 <sdc_support_peripheral>
		if (err) {
   1cf5e:	2800      	cmp	r0, #0
   1cf60:	d1f6      	bne.n	1cf50 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1cf62:	f7e3 fd57 	bl	a14 <sdc_support_dle_peripheral>
			if (err) {
   1cf66:	2800      	cmp	r0, #0
   1cf68:	d1f2      	bne.n	1cf50 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1cf6a:	f7e3 fd63 	bl	a34 <sdc_support_le_2m_phy>
		if (err) {
   1cf6e:	2800      	cmp	r0, #0
   1cf70:	d1ee      	bne.n	1cf50 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1cf72:	f7e3 fd7f 	bl	a74 <sdc_support_phy_update_peripheral>
			if (err) {
   1cf76:	4604      	mov	r4, r0
   1cf78:	2800      	cmp	r0, #0
   1cf7a:	d1e9      	bne.n	1cf50 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1cf7c:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf7e:	1d3a      	adds	r2, r7, #4
   1cf80:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1cf82:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf84:	f7e3 fc32 	bl	7ec <sdc_cfg_set>
	if (required_memory < 0) {
   1cf88:	2800      	cmp	r0, #0
   1cf8a:	dbe3      	blt.n	1cf54 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1cf8c:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf8e:	1d3a      	adds	r2, r7, #4
   1cf90:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1cf92:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cf94:	f7e3 fc2a 	bl	7ec <sdc_cfg_set>
	if (required_memory < 0) {
   1cf98:	2800      	cmp	r0, #0
   1cf9a:	dbdb      	blt.n	1cf54 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1cf9c:	4b23      	ldr	r3, [pc, #140]	; (1d02c <hci_driver_init+0xf4>)
   1cf9e:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfa0:	1d3a      	adds	r2, r7, #4
   1cfa2:	2103      	movs	r1, #3
   1cfa4:	4620      	mov	r0, r4
   1cfa6:	f7e3 fc21 	bl	7ec <sdc_cfg_set>
	if (required_memory < 0) {
   1cfaa:	2800      	cmp	r0, #0
   1cfac:	dbd2      	blt.n	1cf54 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1cfae:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfb2:	1d3a      	adds	r2, r7, #4
   1cfb4:	2104      	movs	r1, #4
   1cfb6:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1cfb8:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfba:	f7e3 fc17 	bl	7ec <sdc_cfg_set>
	if (required_memory < 0) {
   1cfbe:	2800      	cmp	r0, #0
   1cfc0:	dbc8      	blt.n	1cf54 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfc2:	1d3a      	adds	r2, r7, #4
   1cfc4:	2105      	movs	r1, #5
   1cfc6:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1cfc8:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfca:	f7e3 fc0f 	bl	7ec <sdc_cfg_set>
	if (required_memory < 0) {
   1cfce:	2800      	cmp	r0, #0
   1cfd0:	dbc0      	blt.n	1cf54 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1cfd2:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfd4:	1d3a      	adds	r2, r7, #4
   1cfd6:	2107      	movs	r1, #7
   1cfd8:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1cfda:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1cfdc:	f7e3 fc06 	bl	7ec <sdc_cfg_set>
	if (required_memory < 0) {
   1cfe0:	2800      	cmp	r0, #0
   1cfe2:	dbb7      	blt.n	1cf54 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1cfe4:	f240 73fa 	movw	r3, #2042	; 0x7fa
   1cfe8:	4298      	cmp	r0, r3
   1cfea:	dd19      	ble.n	1d020 <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1cfec:	466c      	mov	r4, sp
   1cfee:	b088      	sub	sp, #32
   1cff0:	466a      	mov	r2, sp
   1cff2:	490f      	ldr	r1, [pc, #60]	; (1d030 <hci_driver_init+0xf8>)
   1cff4:	61d0      	str	r0, [r2, #28]
   1cff6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1cffa:	2304      	movs	r3, #4
   1cffc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d000:	480c      	ldr	r0, [pc, #48]	; (1d034 <hci_driver_init+0xfc>)
   1d002:	2300      	movs	r3, #0
   1d004:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d008:	f7f6 f954 	bl	132b4 <z_impl_z_log_msg_static_create>
   1d00c:	46a5      	mov	sp, r4
		k_panic();
   1d00e:	4040      	eors	r0, r0
   1d010:	f380 8811 	msr	BASEPRI, r0
   1d014:	f04f 0004 	mov.w	r0, #4
   1d018:	df02      	svc	2
		return -ENOMEM;
   1d01a:	f06f 000b 	mvn.w	r0, #11
   1d01e:	e799      	b.n	1cf54 <hci_driver_init+0x1c>
	return 0;
   1d020:	2000      	movs	r0, #0
	if (err) {
   1d022:	e797      	b.n	1cf54 <hci_driver_init+0x1c>
   1d024:	000269c8 	.word	0x000269c8
   1d028:	0001cdd5 	.word	0x0001cdd5
   1d02c:	02031b1b 	.word	0x02031b1b
   1d030:	00029d44 	.word	0x00029d44
   1d034:	000262cc 	.word	0x000262cc

0001d038 <hci_driver_open>:
{
   1d038:	b590      	push	{r4, r7, lr}
   1d03a:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1d03c:	492f      	ldr	r1, [pc, #188]	; (1d0fc <hci_driver_open+0xc4>)
   1d03e:	4830      	ldr	r0, [pc, #192]	; (1d100 <hci_driver_open+0xc8>)
{
   1d040:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1d042:	f003 f857 	bl	200f4 <k_work_init>
		hci_ecdh_init();
   1d046:	f000 fedd 	bl	1de04 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1d04a:	1d38      	adds	r0, r7, #4
   1d04c:	f7e3 fbc0 	bl	7d0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1d050:	466c      	mov	r4, sp
   1d052:	b088      	sub	sp, #32
   1d054:	466a      	mov	r2, sp
   1d056:	4b2b      	ldr	r3, [pc, #172]	; (1d104 <hci_driver_open+0xcc>)
   1d058:	6153      	str	r3, [r2, #20]
   1d05a:	4b2b      	ldr	r3, [pc, #172]	; (1d108 <hci_driver_open+0xd0>)
   1d05c:	6193      	str	r3, [r2, #24]
   1d05e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d062:	8393      	strh	r3, [r2, #28]
   1d064:	4b29      	ldr	r3, [pc, #164]	; (1d10c <hci_driver_open+0xd4>)
   1d066:	f842 3f10 	str.w	r3, [r2, #16]!
   1d06a:	4929      	ldr	r1, [pc, #164]	; (1d110 <hci_driver_open+0xd8>)
   1d06c:	4829      	ldr	r0, [pc, #164]	; (1d114 <hci_driver_open+0xdc>)
   1d06e:	1d3b      	adds	r3, r7, #4
   1d070:	f7f6 f920 	bl	132b4 <z_impl_z_log_msg_static_create>
   1d074:	46a5      	mov	sp, r4
   1d076:	4828      	ldr	r0, [pc, #160]	; (1d118 <hci_driver_open+0xe0>)
   1d078:	f008 fd4e 	bl	25b18 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1d07c:	4603      	mov	r3, r0
   1d07e:	b980      	cbnz	r0, 1d0a2 <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1d080:	4a26      	ldr	r2, [pc, #152]	; (1d11c <hci_driver_open+0xe4>)
   1d082:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d084:	2202      	movs	r2, #2
   1d086:	62ba      	str	r2, [r7, #40]	; 0x28
   1d088:	4822      	ldr	r0, [pc, #136]	; (1d114 <hci_driver_open+0xdc>)
   1d08a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d08e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1d092:	f06f 0412 	mvn.w	r4, #18
   1d096:	f7f6 f90d 	bl	132b4 <z_impl_z_log_msg_static_create>
}
   1d09a:	4620      	mov	r0, r4
   1d09c:	3734      	adds	r7, #52	; 0x34
   1d09e:	46bd      	mov	sp, r7
   1d0a0:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1d0a2:	4a1f      	ldr	r2, [pc, #124]	; (1d120 <hci_driver_open+0xe8>)
   1d0a4:	ca07      	ldmia	r2, {r0, r1, r2}
   1d0a6:	f107 0318 	add.w	r3, r7, #24
   1d0aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1d0ae:	4618      	mov	r0, r3
   1d0b0:	f7e3 fd38 	bl	b24 <sdc_rand_source_register>
	if (err) {
   1d0b4:	b188      	cbz	r0, 1d0da <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1d0b6:	b088      	sub	sp, #32
   1d0b8:	466a      	mov	r2, sp
   1d0ba:	4b1a      	ldr	r3, [pc, #104]	; (1d124 <hci_driver_open+0xec>)
   1d0bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d0c0:	2303      	movs	r3, #3
   1d0c2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0c6:	4813      	ldr	r0, [pc, #76]	; (1d114 <hci_driver_open+0xdc>)
   1d0c8:	2300      	movs	r3, #0
   1d0ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d0ce:	f7f6 f8f1 	bl	132b4 <z_impl_z_log_msg_static_create>
   1d0d2:	46a5      	mov	sp, r4
		return -EINVAL;
   1d0d4:	f06f 0415 	mvn.w	r4, #21
   1d0d8:	e7df      	b.n	1d09a <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1d0da:	f04f 30ff 	mov.w	r0, #4294967295
   1d0de:	f04f 31ff 	mov.w	r1, #4294967295
   1d0e2:	f7ff fe53 	bl	1cd8c <multithreading_lock_acquire>
	if (err) {
   1d0e6:	4604      	mov	r4, r0
   1d0e8:	2800      	cmp	r0, #0
   1d0ea:	d1d6      	bne.n	1d09a <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1d0ec:	490e      	ldr	r1, [pc, #56]	; (1d128 <hci_driver_open+0xf0>)
   1d0ee:	480f      	ldr	r0, [pc, #60]	; (1d12c <hci_driver_open+0xf4>)
   1d0f0:	f7e3 fbdc 	bl	8ac <sdc_enable>
	if (err) {
   1d0f4:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1d0f6:	f7ff fe51 	bl	1cd9c <multithreading_lock_release>
	return 0;
   1d0fa:	e7ce      	b.n	1d09a <hci_driver_open+0x62>
   1d0fc:	00025981 	.word	0x00025981
   1d100:	20002df0 	.word	0x20002df0
   1d104:	000284e0 	.word	0x000284e0
   1d108:	00029d66 	.word	0x00029d66
   1d10c:	01000003 	.word	0x01000003
   1d110:	01401cc0 	.word	0x01401cc0
   1d114:	000262cc 	.word	0x000262cc
   1d118:	00026038 	.word	0x00026038
   1d11c:	00029d8d 	.word	0x00029d8d
   1d120:	000263f8 	.word	0x000263f8
   1d124:	00029dad 	.word	0x00029dad
   1d128:	20002048 	.word	0x20002048
   1d12c:	0001ced9 	.word	0x0001ced9

0001d130 <hci_driver_receive_process>:
{
   1d130:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d132:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d134:	f04f 30ff 	mov.w	r0, #4294967295
{
   1d138:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d13a:	f04f 31ff 	mov.w	r1, #4294967295
   1d13e:	f7ff fe25 	bl	1cd8c <multithreading_lock_acquire>
	if (!errcode) {
   1d142:	bb40      	cbnz	r0, 1d196 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1d144:	4d33      	ldr	r5, [pc, #204]	; (1d214 <hci_driver_receive_process+0xe4>)
   1d146:	1df9      	adds	r1, r7, #7
   1d148:	4628      	mov	r0, r5
   1d14a:	f000 fce5 	bl	1db18 <hci_internal_msg_get>
   1d14e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d150:	f7ff fe24 	bl	1cd9c <multithreading_lock_release>
	if (errcode) {
   1d154:	b9fc      	cbnz	r4, 1d196 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1d156:	79fe      	ldrb	r6, [r7, #7]
   1d158:	2e04      	cmp	r6, #4
   1d15a:	d133      	bne.n	1d1c4 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1d15c:	7828      	ldrb	r0, [r5, #0]
   1d15e:	283e      	cmp	r0, #62	; 0x3e
   1d160:	d01c      	beq.n	1d19c <hci_driver_receive_process+0x6c>
   1d162:	28ff      	cmp	r0, #255	; 0xff
   1d164:	d021      	beq.n	1d1aa <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1d166:	f04f 32ff 	mov.w	r2, #4294967295
   1d16a:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d16e:	4621      	mov	r1, r4
   1d170:	f7f7 ff34 	bl	14fdc <bt_buf_get_evt>
	if (!evt_buf) {
   1d174:	4606      	mov	r6, r0
   1d176:	b9d8      	cbnz	r0, 1d1b0 <hci_driver_receive_process+0x80>
		if (discardable) {
   1d178:	b95c      	cbnz	r4, 1d192 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1d17a:	4b27      	ldr	r3, [pc, #156]	; (1d218 <hci_driver_receive_process+0xe8>)
   1d17c:	61fb      	str	r3, [r7, #28]
   1d17e:	2302      	movs	r3, #2
   1d180:	61bb      	str	r3, [r7, #24]
   1d182:	4826      	ldr	r0, [pc, #152]	; (1d21c <hci_driver_receive_process+0xec>)
   1d184:	4623      	mov	r3, r4
   1d186:	f107 0218 	add.w	r2, r7, #24
   1d18a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d18e:	f7f6 f891 	bl	132b4 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1d192:	f7ff fea1 	bl	1ced8 <receive_signal_raise>
}
   1d196:	3724      	adds	r7, #36	; 0x24
   1d198:	46bd      	mov	sp, r7
   1d19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1d19c:	78ab      	ldrb	r3, [r5, #2]
   1d19e:	2b02      	cmp	r3, #2
		switch (subevent) {
   1d1a0:	d1e1      	bne.n	1d166 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d1a2:	2200      	movs	r2, #0
   1d1a4:	2300      	movs	r3, #0
			return true;
   1d1a6:	2401      	movs	r4, #1
   1d1a8:	e7e1      	b.n	1d16e <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1d1aa:	78ab      	ldrb	r3, [r5, #2]
   1d1ac:	2b80      	cmp	r3, #128	; 0x80
   1d1ae:	e7f7      	b.n	1d1a0 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1d1b0:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d1b2:	4918      	ldr	r1, [pc, #96]	; (1d214 <hci_driver_receive_process+0xe4>)
   1d1b4:	3202      	adds	r2, #2
   1d1b6:	300c      	adds	r0, #12
   1d1b8:	f008 f833 	bl	25222 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1d1bc:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1d1be:	f7f9 f83f 	bl	16240 <bt_recv>
   1d1c2:	e7e6      	b.n	1d192 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1d1c4:	2e02      	cmp	r6, #2
   1d1c6:	d114      	bne.n	1d1f2 <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1d1c8:	f04f 32ff 	mov.w	r2, #4294967295
   1d1cc:	f04f 33ff 	mov.w	r3, #4294967295
   1d1d0:	2003      	movs	r0, #3
   1d1d2:	f7f7 feb7 	bl	14f44 <bt_buf_get_rx>
	if (!data_buf) {
   1d1d6:	4604      	mov	r4, r0
   1d1d8:	b918      	cbnz	r0, 1d1e2 <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1d1da:	4b11      	ldr	r3, [pc, #68]	; (1d220 <hci_driver_receive_process+0xf0>)
   1d1dc:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1d1e0:	e7cf      	b.n	1d182 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1d1e2:	886a      	ldrh	r2, [r5, #2]
   1d1e4:	4629      	mov	r1, r5
   1d1e6:	3204      	adds	r2, #4
   1d1e8:	300c      	adds	r0, #12
   1d1ea:	f008 f81a 	bl	25222 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1d1ee:	4620      	mov	r0, r4
   1d1f0:	e7e5      	b.n	1d1be <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1d1f2:	466d      	mov	r5, sp
   1d1f4:	b088      	sub	sp, #32
   1d1f6:	466a      	mov	r2, sp
   1d1f8:	4b0a      	ldr	r3, [pc, #40]	; (1d224 <hci_driver_receive_process+0xf4>)
   1d1fa:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d1fe:	2303      	movs	r3, #3
   1d200:	f842 3f10 	str.w	r3, [r2, #16]!
   1d204:	4805      	ldr	r0, [pc, #20]	; (1d21c <hci_driver_receive_process+0xec>)
   1d206:	4623      	mov	r3, r4
   1d208:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d20c:	f7f6 f852 	bl	132b4 <z_impl_z_log_msg_static_create>
   1d210:	46ad      	mov	sp, r5
   1d212:	e7be      	b.n	1d192 <hci_driver_receive_process+0x62>
   1d214:	2000300b 	.word	0x2000300b
   1d218:	00029dd1 	.word	0x00029dd1
   1d21c:	000262cc 	.word	0x000262cc
   1d220:	00029deb 	.word	0x00029deb
   1d224:	00029e04 	.word	0x00029e04

0001d228 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1d228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1d22a:	4cc7      	ldr	r4, [pc, #796]	; (1d548 <hci_internal_cmd_put+0x320>)
   1d22c:	8806      	ldrh	r6, [r0, #0]
   1d22e:	7823      	ldrb	r3, [r4, #0]
{
   1d230:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1d232:	2b00      	cmp	r3, #0
   1d234:	f040 8468 	bne.w	1db08 <hci_internal_cmd_put+0x8e0>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1d238:	2304      	movs	r3, #4
   1d23a:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1d23e:	4bc3      	ldr	r3, [pc, #780]	; (1d54c <hci_internal_cmd_put+0x324>)
   1d240:	681f      	ldr	r7, [r3, #0]
   1d242:	b1bf      	cbz	r7, 1d274 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   1d244:	f10d 0306 	add.w	r3, sp, #6
   1d248:	f10d 0207 	add.w	r2, sp, #7
   1d24c:	1c61      	adds	r1, r4, #1
   1d24e:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1d250:	2801      	cmp	r0, #1
   1d252:	d00f      	beq.n	1d274 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   1d254:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d258:	2b00      	cmp	r3, #0
   1d25a:	f040 8431 	bne.w	1dac0 <hci_internal_cmd_put+0x898>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1d25e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1d262:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d264:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1d266:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d268:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1d26a:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1d26c:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d26e:	71a0      	strb	r0, [r4, #6]
}
   1d270:	f000 bc2f 	b.w	1dad2 <hci_internal_cmd_put+0x8aa>
		switch (BT_OGF(opcode)) {
   1d274:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1d278:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1d27c:	d20f      	bcs.n	1d29e <hci_internal_cmd_put+0x76>
   1d27e:	2b00      	cmp	r3, #0
   1d280:	d079      	beq.n	1d376 <hci_internal_cmd_put+0x14e>
   1d282:	3b01      	subs	r3, #1
   1d284:	2b07      	cmp	r3, #7
   1d286:	f200 8411 	bhi.w	1daac <hci_internal_cmd_put+0x884>
   1d28a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d28e:	000d      	.short	0x000d
   1d290:	003f040f 	.word	0x003f040f
   1d294:	040f008e 	.word	0x040f008e
   1d298:	040f040f 	.word	0x040f040f
   1d29c:	0163      	.short	0x0163
   1d29e:	2b3f      	cmp	r3, #63	; 0x3f
   1d2a0:	f000 8339 	beq.w	1d916 <hci_internal_cmd_put+0x6ee>
	switch (opcode)	{
   1d2a4:	2001      	movs	r0, #1
   1d2a6:	e391      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
	return ((uint16_t)src[1] << 8) | src[0];
   1d2a8:	4628      	mov	r0, r5
	switch (opcode)	{
   1d2aa:	f240 4206 	movw	r2, #1030	; 0x406
   1d2ae:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1d2b2:	4293      	cmp	r3, r2
   1d2b4:	d010      	beq.n	1d2d8 <hci_internal_cmd_put+0xb0>
   1d2b6:	f240 421d 	movw	r2, #1053	; 0x41d
   1d2ba:	4293      	cmp	r3, r2
   1d2bc:	d023      	beq.n	1d306 <hci_internal_cmd_put+0xde>
   1d2be:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1d2c0:	f240 4306 	movw	r3, #1030	; 0x406
   1d2c4:	429e      	cmp	r6, r3
   1d2c6:	f040 83eb 	bne.w	1daa0 <hci_internal_cmd_put+0x878>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d2ca:	230f      	movs	r3, #15
   1d2cc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d2ce:	2304      	movs	r3, #4
   1d2d0:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d2d2:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1d2d4:	2301      	movs	r3, #1
   1d2d6:	e033      	b.n	1d340 <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1d2d8:	f7ef fcca 	bl	cc70 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1d2dc:	f242 0332 	movw	r3, #8242	; 0x2032
   1d2e0:	429e      	cmp	r6, r3
   1d2e2:	f240 83d5 	bls.w	1da90 <hci_internal_cmd_put+0x868>
   1d2e6:	f242 0385 	movw	r3, #8325	; 0x2085
   1d2ea:	429e      	cmp	r6, r3
   1d2ec:	d840      	bhi.n	1d370 <hci_internal_cmd_put+0x148>
   1d2ee:	f242 036c 	movw	r3, #8300	; 0x206c
   1d2f2:	429e      	cmp	r6, r3
   1d2f4:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1d2f8:	f200 83da 	bhi.w	1dab0 <hci_internal_cmd_put+0x888>
   1d2fc:	3b03      	subs	r3, #3
   1d2fe:	b29b      	uxth	r3, r3
   1d300:	2b01      	cmp	r3, #1
   1d302:	d835      	bhi.n	1d370 <hci_internal_cmd_put+0x148>
   1d304:	e7e1      	b.n	1d2ca <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1d306:	f7ef fcb5 	bl	cc74 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1d30a:	e7e7      	b.n	1d2dc <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d30c:	4628      	mov	r0, r5
	switch (opcode)	{
   1d30e:	f640 4263 	movw	r2, #3171	; 0xc63
   1d312:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1d316:	4293      	cmp	r3, r2
   1d318:	d03b      	beq.n	1d392 <hci_internal_cmd_put+0x16a>
   1d31a:	dc16      	bgt.n	1d34a <hci_internal_cmd_put+0x122>
   1d31c:	f640 4203 	movw	r2, #3075	; 0xc03
   1d320:	4293      	cmp	r3, r2
   1d322:	d02a      	beq.n	1d37a <hci_internal_cmd_put+0x152>
   1d324:	f640 422d 	movw	r2, #3117	; 0xc2d
   1d328:	4293      	cmp	r3, r2
   1d32a:	d029      	beq.n	1d380 <hci_internal_cmd_put+0x158>
   1d32c:	f640 4201 	movw	r2, #3073	; 0xc01
   1d330:	4293      	cmp	r3, r2
   1d332:	d01b      	beq.n	1d36c <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d334:	230f      	movs	r3, #15
   1d336:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d338:	2304      	movs	r3, #4
   1d33a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d33c:	2301      	movs	r3, #1
   1d33e:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1d340:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1d342:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   1d346:	7023      	strb	r3, [r4, #0]
   1d348:	e0d5      	b.n	1d4f6 <hci_internal_cmd_put+0x2ce>
	switch (opcode)	{
   1d34a:	f640 427b 	movw	r2, #3195	; 0xc7b
   1d34e:	4293      	cmp	r3, r2
   1d350:	d022      	beq.n	1d398 <hci_internal_cmd_put+0x170>
   1d352:	f640 427c 	movw	r2, #3196	; 0xc7c
   1d356:	4293      	cmp	r3, r2
   1d358:	d1ec      	bne.n	1d334 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   1d35a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d35e:	497c      	ldr	r1, [pc, #496]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1d360:	3302      	adds	r3, #2
   1d362:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d366:	f7ef fc11 	bl	cb8c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1d36a:	e001      	b.n	1d370 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1d36c:	f7ef fc04 	bl	cb78 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1d370:	2801      	cmp	r0, #1
   1d372:	f47f af74 	bne.w	1d25e <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   1d376:	2001      	movs	r0, #1
   1d378:	e3a2      	b.n	1dac0 <hci_internal_cmd_put+0x898>
		return sdc_hci_cmd_cb_reset();
   1d37a:	f7e3 fcd3 	bl	d24 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1d37e:	e7f7      	b.n	1d370 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1d380:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1d384:	4972      	ldr	r1, [pc, #456]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1d386:	3303      	adds	r3, #3
   1d388:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1d38c:	f7ef fbf2 	bl	cb74 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1d390:	e7ee      	b.n	1d370 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1d392:	f7ef fbf6 	bl	cb82 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1d396:	e7eb      	b.n	1d370 <hci_internal_cmd_put+0x148>
		*param_length_out +=
   1d398:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1d39c:	496c      	ldr	r1, [pc, #432]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1d39e:	3304      	adds	r3, #4
   1d3a0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1d3a4:	f7ef fbe4 	bl	cb70 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1d3a8:	e7e2      	b.n	1d370 <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   1d3aa:	882b      	ldrh	r3, [r5, #0]
   1d3ac:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1d3b0:	3b01      	subs	r3, #1
   1d3b2:	2b08      	cmp	r3, #8
   1d3b4:	d8be      	bhi.n	1d334 <hci_internal_cmd_put+0x10c>
   1d3b6:	a201      	add	r2, pc, #4	; (adr r2, 1d3bc <hci_internal_cmd_put+0x194>)
   1d3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d3bc:	0001d3e1 	.word	0x0001d3e1
   1d3c0:	0001d3f3 	.word	0x0001d3f3
   1d3c4:	0001d4fd 	.word	0x0001d4fd
   1d3c8:	0001d335 	.word	0x0001d335
   1d3cc:	0001d335 	.word	0x0001d335
   1d3d0:	0001d335 	.word	0x0001d335
   1d3d4:	0001d335 	.word	0x0001d335
   1d3d8:	0001d335 	.word	0x0001d335
   1d3dc:	0001d535 	.word	0x0001d535
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1d3e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d3e4:	485a      	ldr	r0, [pc, #360]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1d3e6:	3308      	adds	r3, #8
   1d3e8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d3ec:	f7ef fc01 	bl	cbf2 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1d3f0:	e7be      	b.n	1d370 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d3f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1d3f6:	4d56      	ldr	r5, [pc, #344]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d3f8:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1d3fa:	2230      	movs	r2, #48	; 0x30
   1d3fc:	2100      	movs	r1, #0
   1d3fe:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d400:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1d404:	f006 fd11 	bl	23e2a <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1d408:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1d40c:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d40e:	2300      	movs	r3, #0
   1d410:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   1d412:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   1d414:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   1d416:	f043 0320 	orr.w	r3, r3, #32
   1d41a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1d41c:	7a63      	ldrb	r3, [r4, #9]
   1d41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d422:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1d424:	7b23      	ldrb	r3, [r4, #12]
   1d426:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d42a:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1d42c:	7c63      	ldrb	r3, [r4, #17]
   1d42e:	f043 0304 	orr.w	r3, r3, #4
   1d432:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1d434:	7d63      	ldrb	r3, [r4, #21]
   1d436:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1d43a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1d43e:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1d440:	7da3      	ldrb	r3, [r4, #22]
   1d442:	f043 0302 	orr.w	r3, r3, #2
   1d446:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1d448:	7f63      	ldrb	r3, [r4, #29]
   1d44a:	f043 0304 	orr.w	r3, r3, #4
   1d44e:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1d450:	f894 3020 	ldrb.w	r3, [r4, #32]
   1d454:	f063 0308 	orn	r3, r3, #8
   1d458:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1d45c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1d460:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1d464:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1d468:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1d46c:	f063 030c 	orn	r3, r3, #12
   1d470:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1d474:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1d478:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1d47c:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1d480:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1d484:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1d488:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1d48c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1d490:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1d494:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d498:	220e      	movs	r2, #14
   1d49a:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   1d49c:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   1d4a0:	2201      	movs	r2, #1
   1d4a2:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   1d4a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1d4a8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1d4ac:	f023 0307 	bic.w	r3, r3, #7
   1d4b0:	f043 0307 	orr.w	r3, r3, #7
   1d4b4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1d4b8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1d4bc:	f063 0307 	orn	r3, r3, #7
   1d4c0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1d4c4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1d4c8:	4313      	orrs	r3, r2
   1d4ca:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1d4ce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1d4d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d4d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1d4da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1d4de:	f043 0304 	orr.w	r3, r3, #4
   1d4e2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1d4e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1d4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d4ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   1d4f2:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   1d4f6:	2000      	movs	r0, #0
}
   1d4f8:	b003      	add	sp, #12
   1d4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1d4fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1d500:	4d13      	ldr	r5, [pc, #76]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1d502:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1d504:	2208      	movs	r2, #8
   1d506:	2100      	movs	r1, #0
   1d508:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1d50a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1d50e:	f006 fc8c 	bl	23e2a <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1d512:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1d516:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d518:	2300      	movs	r3, #0
   1d51a:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   1d51c:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   1d51e:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d520:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   1d522:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d526:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   1d528:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   1d52c:	2201      	movs	r2, #1
   1d52e:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   1d530:	72e3      	strb	r3, [r4, #11]
   1d532:	e7de      	b.n	1d4f2 <hci_internal_cmd_put+0x2ca>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d534:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d538:	4805      	ldr	r0, [pc, #20]	; (1d550 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d53a:	3306      	adds	r3, #6
   1d53c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d540:	f7ef fb55 	bl	cbee <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1d544:	e714      	b.n	1d370 <hci_internal_cmd_put+0x148>
   1d546:	bf00      	nop
   1d548:	20003051 	.word	0x20003051
   1d54c:	20002e00 	.word	0x20002e00
   1d550:	20003058 	.word	0x20003058
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d554:	4628      	mov	r0, r5
	switch (opcode)	{
   1d556:	f242 014b 	movw	r1, #8267	; 0x204b
   1d55a:	f830 3b03 	ldrh.w	r3, [r0], #3
   1d55e:	b21a      	sxth	r2, r3
   1d560:	428a      	cmp	r2, r1
   1d562:	f300 80bf 	bgt.w	1d6e4 <hci_internal_cmd_put+0x4bc>
   1d566:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d56a:	f242 0232 	movw	r2, #8242	; 0x2032
   1d56e:	dc1a      	bgt.n	1d5a6 <hci_internal_cmd_put+0x37e>
	switch (hci_opcode) {
   1d570:	4296      	cmp	r6, r2
   1d572:	f000 80c4 	beq.w	1d6fe <hci_internal_cmd_put+0x4d6>
   1d576:	f200 82bf 	bhi.w	1daf8 <hci_internal_cmd_put+0x8d0>
   1d57a:	f242 0326 	movw	r3, #8230	; 0x2026
   1d57e:	429e      	cmp	r6, r3
   1d580:	f63f aef9 	bhi.w	1d376 <hci_internal_cmd_put+0x14e>
   1d584:	2001      	movs	r0, #1
   1d586:	f242 030c 	movw	r3, #8204	; 0x200c
   1d58a:	429e      	cmp	r6, r3
   1d58c:	f67f ae98 	bls.w	1d2c0 <hci_internal_cmd_put+0x98>
   1d590:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1d594:	4ad9      	ldr	r2, [pc, #868]	; (1d8fc <hci_internal_cmd_put+0x6d4>)
   1d596:	3b0d      	subs	r3, #13
   1d598:	b29b      	uxth	r3, r3
   1d59a:	fa22 f303 	lsr.w	r3, r2, r3
   1d59e:	07db      	lsls	r3, r3, #31
   1d5a0:	f57f aee6 	bpl.w	1d370 <hci_internal_cmd_put+0x148>
   1d5a4:	e691      	b.n	1d2ca <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1d5a6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1d5aa:	3b01      	subs	r3, #1
   1d5ac:	2b4a      	cmp	r3, #74	; 0x4a
   1d5ae:	d8df      	bhi.n	1d570 <hci_internal_cmd_put+0x348>
   1d5b0:	a101      	add	r1, pc, #4	; (adr r1, 1d5b8 <hci_internal_cmd_put+0x390>)
   1d5b2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d5b6:	bf00      	nop
   1d5b8:	0001d717 	.word	0x0001d717
   1d5bc:	0001d731 	.word	0x0001d731
   1d5c0:	0001d743 	.word	0x0001d743
   1d5c4:	0001d571 	.word	0x0001d571
   1d5c8:	0001d7a9 	.word	0x0001d7a9
   1d5cc:	0001d7af 	.word	0x0001d7af
   1d5d0:	0001d7b5 	.word	0x0001d7b5
   1d5d4:	0001d7c7 	.word	0x0001d7c7
   1d5d8:	0001d7cd 	.word	0x0001d7cd
   1d5dc:	0001d7d3 	.word	0x0001d7d3
   1d5e0:	0001d571 	.word	0x0001d571
   1d5e4:	0001d571 	.word	0x0001d571
   1d5e8:	0001d571 	.word	0x0001d571
   1d5ec:	0001d571 	.word	0x0001d571
   1d5f0:	0001d7df 	.word	0x0001d7df
   1d5f4:	0001d7f1 	.word	0x0001d7f1
   1d5f8:	0001d7f7 	.word	0x0001d7f7
   1d5fc:	0001d7fd 	.word	0x0001d7fd
   1d600:	0001d571 	.word	0x0001d571
   1d604:	0001d571 	.word	0x0001d571
   1d608:	0001d803 	.word	0x0001d803
   1d60c:	0001d815 	.word	0x0001d815
   1d610:	0001d81b 	.word	0x0001d81b
   1d614:	0001d82d 	.word	0x0001d82d
   1d618:	0001d571 	.word	0x0001d571
   1d61c:	0001d83f 	.word	0x0001d83f
   1d620:	0001d851 	.word	0x0001d851
   1d624:	0001d863 	.word	0x0001d863
   1d628:	0001d571 	.word	0x0001d571
   1d62c:	0001d571 	.word	0x0001d571
   1d630:	0001d571 	.word	0x0001d571
   1d634:	0001d571 	.word	0x0001d571
   1d638:	0001d571 	.word	0x0001d571
   1d63c:	0001d88f 	.word	0x0001d88f
   1d640:	0001d8a1 	.word	0x0001d8a1
   1d644:	0001d8b3 	.word	0x0001d8b3
   1d648:	0001d8b9 	.word	0x0001d8b9
   1d64c:	0001d8bf 	.word	0x0001d8bf
   1d650:	0001d571 	.word	0x0001d571
   1d654:	0001d571 	.word	0x0001d571
   1d658:	0001d571 	.word	0x0001d571
   1d65c:	0001d571 	.word	0x0001d571
   1d660:	0001d571 	.word	0x0001d571
   1d664:	0001d571 	.word	0x0001d571
   1d668:	0001d571 	.word	0x0001d571
   1d66c:	0001d571 	.word	0x0001d571
   1d670:	0001d8cb 	.word	0x0001d8cb
   1d674:	0001d8dd 	.word	0x0001d8dd
   1d678:	0001d8ef 	.word	0x0001d8ef
   1d67c:	0001d8f5 	.word	0x0001d8f5
   1d680:	0001d571 	.word	0x0001d571
   1d684:	0001d571 	.word	0x0001d571
   1d688:	0001d571 	.word	0x0001d571
   1d68c:	0001d571 	.word	0x0001d571
   1d690:	0001d571 	.word	0x0001d571
   1d694:	0001d571 	.word	0x0001d571
   1d698:	0001d571 	.word	0x0001d571
   1d69c:	0001d571 	.word	0x0001d571
   1d6a0:	0001d571 	.word	0x0001d571
   1d6a4:	0001d571 	.word	0x0001d571
   1d6a8:	0001d571 	.word	0x0001d571
   1d6ac:	0001d571 	.word	0x0001d571
   1d6b0:	0001d571 	.word	0x0001d571
   1d6b4:	0001d571 	.word	0x0001d571
   1d6b8:	0001d571 	.word	0x0001d571
   1d6bc:	0001d571 	.word	0x0001d571
   1d6c0:	0001d571 	.word	0x0001d571
   1d6c4:	0001d571 	.word	0x0001d571
   1d6c8:	0001d571 	.word	0x0001d571
   1d6cc:	0001d571 	.word	0x0001d571
   1d6d0:	0001d571 	.word	0x0001d571
   1d6d4:	0001d571 	.word	0x0001d571
   1d6d8:	0001d571 	.word	0x0001d571
   1d6dc:	0001d571 	.word	0x0001d571
   1d6e0:	0001d905 	.word	0x0001d905
   1d6e4:	f242 035e 	movw	r3, #8286	; 0x205e
   1d6e8:	429a      	cmp	r2, r3
   1d6ea:	f000 80eb 	beq.w	1d8c4 <hci_internal_cmd_put+0x69c>
   1d6ee:	f242 037c 	movw	r3, #8316	; 0x207c
   1d6f2:	429a      	cmp	r2, r3
   1d6f4:	d070      	beq.n	1d7d8 <hci_internal_cmd_put+0x5b0>
	switch (hci_opcode) {
   1d6f6:	f242 0332 	movw	r3, #8242	; 0x2032
   1d6fa:	429e      	cmp	r6, r3
   1d6fc:	e739      	b.n	1d572 <hci_internal_cmd_put+0x34a>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d6fe:	230f      	movs	r3, #15
   1d700:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d702:	2304      	movs	r3, #4
   1d704:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d706:	2301      	movs	r3, #1
   1d708:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1d70a:	2232      	movs	r2, #50	; 0x32
   1d70c:	7162      	strb	r2, [r4, #5]
   1d70e:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1d710:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1d712:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1d714:	e617      	b.n	1d346 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1d716:	f7ef fa9e 	bl	cc56 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1d71a:	f242 0332 	movw	r3, #8242	; 0x2032
   1d71e:	429e      	cmp	r6, r3
   1d720:	f47f addc 	bne.w	1d2dc <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d724:	230f      	movs	r3, #15
   1d726:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d728:	2304      	movs	r3, #4
   1d72a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d72c:	70e0      	strb	r0, [r4, #3]
   1d72e:	e0ac      	b.n	1d88a <hci_internal_cmd_put+0x662>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1d730:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d734:	4872      	ldr	r0, [pc, #456]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1d736:	3303      	adds	r3, #3
   1d738:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1d73c:	f7ef fa6d 	bl	cc1a <sdc_hci_cmd_le_read_buffer_size>
   1d740:	e7eb      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1d742:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1d746:	4d6e      	ldr	r5, [pc, #440]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1d748:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1d74a:	2208      	movs	r2, #8
   1d74c:	2100      	movs	r1, #0
   1d74e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1d750:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1d754:	f006 fb69 	bl	23e2a <memset>
	features->params.le_encryption = 1;
   1d758:	79e3      	ldrb	r3, [r4, #7]
   1d75a:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1d75e:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1d762:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1d764:	7a23      	ldrb	r3, [r4, #8]
   1d766:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1d76a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1d76e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1d770:	f242 0332 	movw	r3, #8242	; 0x2032
   1d774:	429e      	cmp	r6, r3
   1d776:	d008      	beq.n	1d78a <hci_internal_cmd_put+0x562>
   1d778:	f200 81b8 	bhi.w	1daec <hci_internal_cmd_put+0x8c4>
   1d77c:	f242 0326 	movw	r3, #8230	; 0x2026
   1d780:	429e      	cmp	r6, r3
   1d782:	f240 818b 	bls.w	1da9c <hci_internal_cmd_put+0x874>
		return 0;
   1d786:	2000      	movs	r0, #0
   1d788:	e569      	b.n	1d25e <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d78a:	230f      	movs	r3, #15
   1d78c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d78e:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   1d790:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d792:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d794:	2300      	movs	r3, #0
   1d796:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1d798:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   1d79a:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   1d79c:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1d79e:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1d7a0:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1d7a2:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1d7a6:	e6a6      	b.n	1d4f6 <hci_internal_cmd_put+0x2ce>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1d7a8:	f7ef fa5c 	bl	cc64 <sdc_hci_cmd_le_set_random_address>
   1d7ac:	e7b5      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1d7ae:	f7ef fa4a 	bl	cc46 <sdc_hci_cmd_le_set_adv_params>
   1d7b2:	e7b2      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1d7b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1d7b8:	4851      	ldr	r0, [pc, #324]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1d7ba:	3301      	adds	r3, #1
   1d7bc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1d7c0:	f7ef fa29 	bl	cc16 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1d7c4:	e7a9      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1d7c6:	f7ef fa3a 	bl	cc3e <sdc_hci_cmd_le_set_adv_data>
   1d7ca:	e7a6      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1d7cc:	f7ef fa4c 	bl	cc68 <sdc_hci_cmd_le_set_scan_response_data>
   1d7d0:	e7a3      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1d7d2:	f7ef fa36 	bl	cc42 <sdc_hci_cmd_le_set_adv_enable>
   1d7d6:	e7a0      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1d7d8:	f7ef fa39 	bl	cc4e <sdc_hci_cmd_le_set_data_related_address_changes>
   1d7dc:	e79d      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1d7de:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1d7e2:	4847      	ldr	r0, [pc, #284]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1d7e4:	3301      	adds	r3, #1
   1d7e6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1d7ea:	f7ef fa1a 	bl	cc22 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1d7ee:	e794      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1d7f0:	f7ef fa03 	bl	cbfa <sdc_hci_cmd_le_clear_filter_accept_list>
   1d7f4:	e791      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1d7f6:	f7ef f9fe 	bl	cbf6 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1d7fa:	e78e      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1d7fc:	f7ef fa1d 	bl	cc3a <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1d800:	e78b      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1d802:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1d806:	493e      	ldr	r1, [pc, #248]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1d808:	3307      	adds	r3, #7
   1d80a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1d80e:	f7ef fa06 	bl	cc1e <sdc_hci_cmd_le_read_channel_map>
   1d812:	e782      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1d814:	f7ef fa0b 	bl	cc2e <sdc_hci_cmd_le_read_remote_features>
   1d818:	e77f      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1d81a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d81e:	4938      	ldr	r1, [pc, #224]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1d820:	3310      	adds	r3, #16
   1d822:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1d826:	f7ef f9ea 	bl	cbfe <sdc_hci_cmd_le_encrypt>
   1d82a:	e776      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1d82c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1d830:	4833      	ldr	r0, [pc, #204]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1d832:	3308      	adds	r3, #8
   1d834:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1d838:	f7ef f9eb 	bl	cc12 <sdc_hci_cmd_le_rand>
   1d83c:	e76d      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1d83e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1d842:	492f      	ldr	r1, [pc, #188]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1d844:	3302      	adds	r3, #2
   1d846:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1d84a:	f7ef f9de 	bl	cc0a <sdc_hci_cmd_le_long_term_key_request_reply>
   1d84e:	e764      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1d850:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1d854:	492a      	ldr	r1, [pc, #168]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1d856:	3302      	adds	r3, #2
   1d858:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1d85c:	f7ef f9d1 	bl	cc02 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1d860:	e75b      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1d862:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d866:	3308      	adds	r3, #8
   1d868:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1d86c:	238f      	movs	r3, #143	; 0x8f
   1d86e:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1d870:	23c0      	movs	r3, #192	; 0xc0
   1d872:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   1d874:	f242 0332 	movw	r3, #8242	; 0x2032
   1d878:	429e      	cmp	r6, r3
   1d87a:	f47f af7d 	bne.w	1d778 <hci_internal_cmd_put+0x550>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d87e:	230f      	movs	r3, #15
   1d880:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d882:	2304      	movs	r3, #4
   1d884:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d886:	2300      	movs	r3, #0
   1d888:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1d88a:	2301      	movs	r3, #1
   1d88c:	e73d      	b.n	1d70a <hci_internal_cmd_put+0x4e2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1d88e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1d892:	491b      	ldr	r1, [pc, #108]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1d894:	3302      	adds	r3, #2
   1d896:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1d89a:	f7ef f9d6 	bl	cc4a <sdc_hci_cmd_le_set_data_length>
   1d89e:	e73c      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1d8a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1d8a4:	4816      	ldr	r0, [pc, #88]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1d8a6:	3304      	adds	r3, #4
   1d8a8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1d8ac:	f7ef f9c1 	bl	cc32 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1d8b0:	e733      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1d8b2:	f7ef f9db 	bl	cc6c <sdc_hci_cmd_le_write_suggested_default_data_length>
   1d8b6:	e730      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_read_local_p256_public_key();
   1d8b8:	f000 fad4 	bl	1de64 <hci_cmd_le_read_local_p256_public_key>
   1d8bc:	e72d      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1d8be:	f008 f861 	bl	25984 <hci_cmd_le_generate_dhkey>
   1d8c2:	e72a      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1d8c4:	f008 f861 	bl	2598a <hci_cmd_le_generate_dhkey_v2>
   1d8c8:	e727      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1d8ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1d8ce:	480c      	ldr	r0, [pc, #48]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1d8d0:	3308      	adds	r3, #8
   1d8d2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1d8d6:	f7ef f9a6 	bl	cc26 <sdc_hci_cmd_le_read_max_data_length>
   1d8da:	e71e      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1d8dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1d8e0:	4907      	ldr	r1, [pc, #28]	; (1d900 <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1d8e2:	3304      	adds	r3, #4
   1d8e4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1d8e8:	f7ef f99f 	bl	cc2a <sdc_hci_cmd_le_read_phy>
   1d8ec:	e715      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1d8ee:	f7ef f9b0 	bl	cc52 <sdc_hci_cmd_le_set_default_phy>
   1d8f2:	e712      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1d8f4:	f7ef f9b4 	bl	cc60 <sdc_hci_cmd_le_set_phy>
   1d8f8:	e70f      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
   1d8fa:	bf00      	nop
   1d8fc:	03001241 	.word	0x03001241
   1d900:	20003058 	.word	0x20003058
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1d904:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d908:	4881      	ldr	r0, [pc, #516]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1d90a:	3302      	adds	r3, #2
   1d90c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1d910:	f7ef f991 	bl	cc36 <sdc_hci_cmd_le_read_transmit_power>
   1d914:	e701      	b.n	1d71a <hci_internal_cmd_put+0x4f2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d916:	4628      	mov	r0, r5
	switch (opcode)	{
   1d918:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1d91c:	f830 3b03 	ldrh.w	r3, [r0], #3
   1d920:	4293      	cmp	r3, r2
   1d922:	d823      	bhi.n	1d96c <hci_internal_cmd_put+0x744>
   1d924:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1d928:	f67f acbc 	bls.w	1d2a4 <hci_internal_cmd_put+0x7c>
   1d92c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1d930:	3b01      	subs	r3, #1
   1d932:	2b0a      	cmp	r3, #10
   1d934:	f63f acb6 	bhi.w	1d2a4 <hci_internal_cmd_put+0x7c>
   1d938:	a201      	add	r2, pc, #4	; (adr r2, 1d940 <hci_internal_cmd_put+0x718>)
   1d93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d93e:	bf00      	nop
   1d940:	0001d9bd 	.word	0x0001d9bd
   1d944:	0001d9d9 	.word	0x0001d9d9
   1d948:	0001d2a5 	.word	0x0001d2a5
   1d94c:	0001d2a5 	.word	0x0001d2a5
   1d950:	0001d2a5 	.word	0x0001d2a5
   1d954:	0001da2d 	.word	0x0001da2d
   1d958:	0001d2a5 	.word	0x0001d2a5
   1d95c:	0001d2a5 	.word	0x0001d2a5
   1d960:	0001da09 	.word	0x0001da09
   1d964:	0001da1b 	.word	0x0001da1b
   1d968:	0001da33 	.word	0x0001da33
   1d96c:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1d970:	b292      	uxth	r2, r2
   1d972:	2a0c      	cmp	r2, #12
   1d974:	f63f ac96 	bhi.w	1d2a4 <hci_internal_cmd_put+0x7c>
   1d978:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1d97c:	2b0c      	cmp	r3, #12
   1d97e:	f63f ac91 	bhi.w	1d2a4 <hci_internal_cmd_put+0x7c>
   1d982:	a201      	add	r2, pc, #4	; (adr r2, 1d988 <hci_internal_cmd_put+0x760>)
   1d984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d988:	0001da45 	.word	0x0001da45
   1d98c:	0001da67 	.word	0x0001da67
   1d990:	0001da6d 	.word	0x0001da6d
   1d994:	0001da73 	.word	0x0001da73
   1d998:	0001da79 	.word	0x0001da79
   1d99c:	0001da7f 	.word	0x0001da7f
   1d9a0:	0001d2a5 	.word	0x0001d2a5
   1d9a4:	0001d2a5 	.word	0x0001d2a5
   1d9a8:	0001d2a5 	.word	0x0001d2a5
   1d9ac:	0001da85 	.word	0x0001da85
   1d9b0:	0001d2a5 	.word	0x0001d2a5
   1d9b4:	0001d2a5 	.word	0x0001d2a5
   1d9b8:	0001da8b 	.word	0x0001da8b
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1d9bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1d9c0:	4853      	ldr	r0, [pc, #332]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1d9c2:	330c      	adds	r3, #12
   1d9c4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1d9c8:	f7e3 fa54 	bl	e74 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1d9cc:	f026 0308 	bic.w	r3, r6, #8
   1d9d0:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1d9d4:	4293      	cmp	r3, r2
   1d9d6:	e066      	b.n	1daa6 <hci_internal_cmd_put+0x87e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1d9d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1d9dc:	484c      	ldr	r0, [pc, #304]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1d9de:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1d9e0:	2202      	movs	r2, #2
   1d9e2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1d9e4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1d9e8:	f006 fa1f 	bl	23e2a <memset>
	cmds->read_version_info = 1;
   1d9ec:	79e3      	ldrb	r3, [r4, #7]
   1d9ee:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1d9f2:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1d9f6:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1d9f8:	7a23      	ldrb	r3, [r4, #8]
   1d9fa:	f023 0307 	bic.w	r3, r3, #7
   1d9fe:	f043 0307 	orr.w	r3, r3, #7
   1da02:	7223      	strb	r3, [r4, #8]
		return 0;
   1da04:	2000      	movs	r0, #0
   1da06:	e7e1      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1da08:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1da0c:	4840      	ldr	r0, [pc, #256]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1da0e:	3317      	adds	r3, #23
   1da10:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1da14:	f7e3 f9e2 	bl	ddc <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1da18:	e7d8      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		*param_length_out +=
   1da1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1da1e:	483c      	ldr	r0, [pc, #240]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out +=
   1da20:	3320      	adds	r3, #32
   1da22:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1da26:	f7e3 f991 	bl	d4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1da2a:	e7cf      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1da2c:	f7ef f8dd 	bl	cbea <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1da30:	e7cc      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1da32:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1da36:	4836      	ldr	r0, [pc, #216]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1da38:	3301      	adds	r3, #1
   1da3a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1da3e:	f7ef f8c0 	bl	cbc2 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1da42:	e7c3      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1da44:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1da48:	4831      	ldr	r0, [pc, #196]	; (1db10 <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1da4a:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1da4c:	2202      	movs	r2, #2
   1da4e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1da50:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1da54:	f006 f9e9 	bl	23e2a <memset>
	cmds->read_supported_vs_commands = 1;
   1da58:	79e3      	ldrb	r3, [r4, #7]
   1da5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1da5e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1da62:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1da64:	e7ce      	b.n	1da04 <hci_internal_cmd_put+0x7dc>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1da66:	f7ef f89f 	bl	cba8 <sdc_hci_cmd_vs_llpm_mode_set>
   1da6a:	e7af      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1da6c:	f7ef f898 	bl	cba0 <sdc_hci_cmd_vs_conn_update>
   1da70:	e7ac      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1da72:	f7ef f88d 	bl	cb90 <sdc_hci_cmd_vs_conn_event_extend>
   1da76:	e7a9      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1da78:	f7ef f89c 	bl	cbb4 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1da7c:	e7a6      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1da7e:	f7ef f891 	bl	cba4 <sdc_hci_cmd_vs_event_length_set>
   1da82:	e7a3      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1da84:	f7ef f892 	bl	cbac <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1da88:	e7a0      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1da8a:	f7ef f898 	bl	cbbe <sdc_hci_cmd_vs_set_adv_randomness>
   1da8e:	e79d      	b.n	1d9cc <hci_internal_cmd_put+0x7a4>
	switch (hci_opcode) {
   1da90:	f242 0326 	movw	r3, #8230	; 0x2026
   1da94:	429e      	cmp	r6, r3
   1da96:	f67f ad76 	bls.w	1d586 <hci_internal_cmd_put+0x35e>
   1da9a:	e469      	b.n	1d370 <hci_internal_cmd_put+0x148>
		return 0;
   1da9c:	2000      	movs	r0, #0
   1da9e:	e572      	b.n	1d586 <hci_internal_cmd_put+0x35e>
	switch (hci_opcode) {
   1daa0:	f240 431d 	movw	r3, #1053	; 0x41d
   1daa4:	429e      	cmp	r6, r3
   1daa6:	f43f ac10 	beq.w	1d2ca <hci_internal_cmd_put+0xa2>
   1daaa:	e461      	b.n	1d370 <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   1daac:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1daae:	e45f      	b.n	1d370 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1dab0:	4a18      	ldr	r2, [pc, #96]	; (1db14 <hci_internal_cmd_put+0x8ec>)
   1dab2:	3b2d      	subs	r3, #45	; 0x2d
   1dab4:	b29b      	uxth	r3, r3
   1dab6:	fa22 f303 	lsr.w	r3, r2, r3
   1daba:	07da      	lsls	r2, r3, #31
   1dabc:	f57f ac58 	bpl.w	1d370 <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dac0:	230f      	movs	r3, #15
   1dac2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1dac4:	2304      	movs	r3, #4
   1dac6:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1dac8:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1daca:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1dacc:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1dace:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   1dad2:	2301      	movs	r3, #1
   1dad4:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1dad6:	f242 0383 	movw	r3, #8323	; 0x2083
   1dada:	429e      	cmp	r6, r3
   1dadc:	f47f ad0b 	bne.w	1d4f6 <hci_internal_cmd_put+0x2ce>
		&&
   1dae0:	7863      	ldrb	r3, [r4, #1]
   1dae2:	2b0e      	cmp	r3, #14
   1dae4:	f47f ad07 	bne.w	1d4f6 <hci_internal_cmd_put+0x2ce>
		cmd_complete_or_status.occurred = false;
   1dae8:	2300      	movs	r3, #0
   1daea:	e42c      	b.n	1d346 <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   1daec:	f242 0385 	movw	r3, #8325	; 0x2085
   1daf0:	429e      	cmp	r6, r3
   1daf2:	d906      	bls.n	1db02 <hci_internal_cmd_put+0x8da>
		return 0;
   1daf4:	2000      	movs	r0, #0
   1daf6:	e43b      	b.n	1d370 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1daf8:	f242 0385 	movw	r3, #8325	; 0x2085
   1dafc:	2001      	movs	r0, #1
   1dafe:	f7ff bbf4 	b.w	1d2ea <hci_internal_cmd_put+0xc2>
		return 0;
   1db02:	2000      	movs	r0, #0
   1db04:	f7ff bbf3 	b.w	1d2ee <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   1db08:	f04f 30ff 	mov.w	r0, #4294967295
   1db0c:	e4f4      	b.n	1d4f8 <hci_internal_cmd_put+0x2d0>
   1db0e:	bf00      	nop
   1db10:	20003058 	.word	0x20003058
   1db14:	01000401 	.word	0x01000401

0001db18 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1db18:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1db1a:	4c09      	ldr	r4, [pc, #36]	; (1db40 <hci_internal_msg_get+0x28>)
   1db1c:	7823      	ldrb	r3, [r4, #0]
{
   1db1e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1db20:	b91b      	cbnz	r3, 1db2a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1db22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1db26:	f7ef b813 	b.w	cb50 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1db2a:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1db2c:	1c61      	adds	r1, r4, #1
   1db2e:	3202      	adds	r2, #2
   1db30:	f006 f970 	bl	23e14 <memcpy>
		cmd_complete_or_status.occurred = false;
   1db34:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1db36:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1db38:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1db3a:	702b      	strb	r3, [r5, #0]
}
   1db3c:	bd38      	pop	{r3, r4, r5, pc}
   1db3e:	bf00      	nop
   1db40:	20003051 	.word	0x20003051

0001db44 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1db44:	b570      	push	{r4, r5, r6, lr}
   1db46:	4606      	mov	r6, r0
   1db48:	460c      	mov	r4, r1
   1db4a:	4d0f      	ldr	r5, [pc, #60]	; (1db88 <bt_rand+0x44>)
   1db4c:	4628      	mov	r0, r5
   1db4e:	f007 ffe3 	bl	25b18 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1db52:	b1a8      	cbz	r0, 1db80 <bt_rand+0x3c>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1db54:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1db56:	68ab      	ldr	r3, [r5, #8]
   1db58:	681b      	ldr	r3, [r3, #0]
   1db5a:	b963      	cbnz	r3, 1db76 <bt_rand+0x32>
   1db5c:	490b      	ldr	r1, [pc, #44]	; (1db8c <bt_rand+0x48>)
   1db5e:	4a0c      	ldr	r2, [pc, #48]	; (1db90 <bt_rand+0x4c>)
   1db60:	480c      	ldr	r0, [pc, #48]	; (1db94 <bt_rand+0x50>)
   1db62:	234d      	movs	r3, #77	; 0x4d
   1db64:	f005 fd49 	bl	235fa <assert_print>
   1db68:	480b      	ldr	r0, [pc, #44]	; (1db98 <bt_rand+0x54>)
   1db6a:	f005 fd46 	bl	235fa <assert_print>
   1db6e:	4808      	ldr	r0, [pc, #32]	; (1db90 <bt_rand+0x4c>)
   1db70:	214d      	movs	r1, #77	; 0x4d
   1db72:	f005 fd3b 	bl	235ec <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1db76:	4631      	mov	r1, r6
   1db78:	4628      	mov	r0, r5
}
   1db7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1db7e:	4718      	bx	r3
   1db80:	f06f 0012 	mvn.w	r0, #18
   1db84:	bd70      	pop	{r4, r5, r6, pc}
   1db86:	bf00      	nop
   1db88:	00026038 	.word	0x00026038
   1db8c:	00029bfb 	.word	0x00029bfb
   1db90:	00029bc7 	.word	0x00029bc7
   1db94:	00026f1a 	.word	0x00026f1a
   1db98:	00029c1b 	.word	0x00029c1b

0001db9c <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1db9c:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1db9e:	b508      	push	{r3, lr}
   1dba0:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1dba4:	d910      	bls.n	1dbc8 <sys_memcpy_swap.constprop.0+0x2c>
   1dba6:	4298      	cmp	r0, r3
   1dba8:	d213      	bcs.n	1dbd2 <sys_memcpy_swap.constprop.0+0x36>
   1dbaa:	490e      	ldr	r1, [pc, #56]	; (1dbe4 <sys_memcpy_swap.constprop.0+0x48>)
   1dbac:	4a0e      	ldr	r2, [pc, #56]	; (1dbe8 <sys_memcpy_swap.constprop.0+0x4c>)
   1dbae:	480f      	ldr	r0, [pc, #60]	; (1dbec <sys_memcpy_swap.constprop.0+0x50>)
   1dbb0:	f240 2315 	movw	r3, #533	; 0x215
   1dbb4:	f005 fd21 	bl	235fa <assert_print>
   1dbb8:	480d      	ldr	r0, [pc, #52]	; (1dbf0 <sys_memcpy_swap.constprop.0+0x54>)
   1dbba:	f005 fd1e 	bl	235fa <assert_print>
   1dbbe:	480a      	ldr	r0, [pc, #40]	; (1dbe8 <sys_memcpy_swap.constprop.0+0x4c>)
   1dbc0:	f240 2115 	movw	r1, #533	; 0x215
   1dbc4:	f005 fd12 	bl	235ec <assert_post_action>
   1dbc8:	d0ef      	beq.n	1dbaa <sys_memcpy_swap.constprop.0+0xe>
   1dbca:	f100 0220 	add.w	r2, r0, #32
   1dbce:	4291      	cmp	r1, r2
   1dbd0:	e7ea      	b.n	1dba8 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1dbd2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1dbd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1dbd8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1dbdc:	428b      	cmp	r3, r1
   1dbde:	d1f9      	bne.n	1dbd4 <sys_memcpy_swap.constprop.0+0x38>
}
   1dbe0:	bd08      	pop	{r3, pc}
   1dbe2:	bf00      	nop
   1dbe4:	00029e97 	.word	0x00029e97
   1dbe8:	00029e65 	.word	0x00029e65
   1dbec:	00026f1a 	.word	0x00026f1a
   1dbf0:	00029eee 	.word	0x00029eee

0001dbf4 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1dbf6:	4b24      	ldr	r3, [pc, #144]	; (1dc88 <ecdh_p256_common_secret+0x94>)
   1dbf8:	4924      	ldr	r1, [pc, #144]	; (1dc8c <ecdh_p256_common_secret+0x98>)
   1dbfa:	f103 0220 	add.w	r2, r3, #32
   1dbfe:	2800      	cmp	r0, #0
   1dc00:	bf08      	it	eq
   1dc02:	4619      	moveq	r1, r3
{
   1dc04:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1dc06:	4610      	mov	r0, r2
   1dc08:	f004 ff12 	bl	22a30 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1dc0c:	4604      	mov	r4, r0
   1dc0e:	b180      	cbz	r0, 1dc32 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1dc10:	466d      	mov	r5, sp
   1dc12:	b088      	sub	sp, #32
   1dc14:	466a      	mov	r2, sp
   1dc16:	4b1e      	ldr	r3, [pc, #120]	; (1dc90 <ecdh_p256_common_secret+0x9c>)
   1dc18:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dc1c:	2303      	movs	r3, #3
   1dc1e:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc22:	481c      	ldr	r0, [pc, #112]	; (1dc94 <ecdh_p256_common_secret+0xa0>)
   1dc24:	2300      	movs	r3, #0
   1dc26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dc2a:	f7f5 fb43 	bl	132b4 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1dc2e:	2412      	movs	r4, #18
   1dc30:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1dc32:	f04f 32ff 	mov.w	r2, #4294967295
   1dc36:	f04f 33ff 	mov.w	r3, #4294967295
   1dc3a:	2001      	movs	r0, #1
   1dc3c:	f7f7 f982 	bl	14f44 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1dc40:	f100 060c 	add.w	r6, r0, #12
   1dc44:	2102      	movs	r1, #2
   1dc46:	4605      	mov	r5, r0
   1dc48:	4630      	mov	r0, r6
   1dc4a:	f7fd fadf 	bl	1b20c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1dc4e:	233e      	movs	r3, #62	; 0x3e
   1dc50:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1dc52:	2322      	movs	r3, #34	; 0x22
   1dc54:	7043      	strb	r3, [r0, #1]
   1dc56:	2101      	movs	r1, #1
   1dc58:	4630      	mov	r0, r6
   1dc5a:	f7fd fad7 	bl	1b20c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1dc5e:	2309      	movs	r3, #9
   1dc60:	7003      	strb	r3, [r0, #0]
   1dc62:	2121      	movs	r1, #33	; 0x21
   1dc64:	4630      	mov	r0, r6
   1dc66:	f7fd fad1 	bl	1b20c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1dc6a:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1dc6e:	b134      	cbz	r4, 1dc7e <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1dc70:	2220      	movs	r2, #32
   1dc72:	21ff      	movs	r1, #255	; 0xff
   1dc74:	f006 f8d9 	bl	23e2a <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1dc78:	4628      	mov	r0, r5
   1dc7a:	46bd      	mov	sp, r7
   1dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1dc7e:	4906      	ldr	r1, [pc, #24]	; (1dc98 <ecdh_p256_common_secret+0xa4>)
   1dc80:	f7ff ff8c 	bl	1db9c <sys_memcpy_swap.constprop.0>
   1dc84:	e7f8      	b.n	1dc78 <ecdh_p256_common_secret+0x84>
   1dc86:	bf00      	nop
   1dc88:	20003098 	.word	0x20003098
   1dc8c:	00029f6c 	.word	0x00029f6c
   1dc90:	00029f2e 	.word	0x00029f2e
   1dc94:	000262c4 	.word	0x000262c4
   1dc98:	200030b8 	.word	0x200030b8

0001dc9c <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc9e:	4c42      	ldr	r4, [pc, #264]	; (1dda8 <ecdh_cmd_process+0x10c>)
   1dca0:	f3bf 8f5b 	dmb	ish
   1dca4:	6823      	ldr	r3, [r4, #0]
   1dca6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1dcaa:	2b02      	cmp	r3, #2
{
   1dcac:	b087      	sub	sp, #28
   1dcae:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1dcb0:	d05a      	beq.n	1dd68 <ecdh_cmd_process+0xcc>
   1dcb2:	2b04      	cmp	r3, #4
   1dcb4:	d05d      	beq.n	1dd72 <ecdh_cmd_process+0xd6>
   1dcb6:	2b01      	cmp	r3, #1
   1dcb8:	d15d      	bne.n	1dd76 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1dcba:	4c3c      	ldr	r4, [pc, #240]	; (1ddac <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1dcbc:	4e3c      	ldr	r6, [pc, #240]	; (1ddb0 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1dcbe:	2120      	movs	r1, #32
   1dcc0:	4620      	mov	r0, r4
   1dcc2:	f7ff ff3f 	bl	1db44 <bt_rand>
		if (err) {
   1dcc6:	2800      	cmp	r0, #0
   1dcc8:	d143      	bne.n	1dd52 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1dcca:	2220      	movs	r2, #32
   1dccc:	4631      	mov	r1, r6
   1dcce:	4620      	mov	r0, r4
   1dcd0:	f006 f890 	bl	23df4 <memcmp>
   1dcd4:	2800      	cmp	r0, #0
   1dcd6:	d0f2      	beq.n	1dcbe <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1dcd8:	4836      	ldr	r0, [pc, #216]	; (1ddb4 <ecdh_cmd_process+0x118>)
   1dcda:	4621      	mov	r1, r4
   1dcdc:	f004 fe94 	bl	22a08 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1dce0:	4605      	mov	r5, r0
   1dce2:	2800      	cmp	r0, #0
   1dce4:	d1eb      	bne.n	1dcbe <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1dce6:	f04f 32ff 	mov.w	r2, #4294967295
   1dcea:	f04f 33ff 	mov.w	r3, #4294967295
   1dcee:	2001      	movs	r0, #1
   1dcf0:	f7f7 f928 	bl	14f44 <bt_buf_get_rx>
   1dcf4:	f100 060c 	add.w	r6, r0, #12
   1dcf8:	2102      	movs	r1, #2
   1dcfa:	4604      	mov	r4, r0
   1dcfc:	4630      	mov	r0, r6
   1dcfe:	f7fd fa85 	bl	1b20c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1dd02:	233e      	movs	r3, #62	; 0x3e
   1dd04:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1dd06:	2342      	movs	r3, #66	; 0x42
   1dd08:	7043      	strb	r3, [r0, #1]
   1dd0a:	2101      	movs	r1, #1
   1dd0c:	4630      	mov	r0, r6
   1dd0e:	f7fd fa7d 	bl	1b20c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1dd12:	2308      	movs	r3, #8
   1dd14:	7003      	strb	r3, [r0, #0]
   1dd16:	2141      	movs	r1, #65	; 0x41
   1dd18:	4630      	mov	r0, r6
   1dd1a:	f7fd fa77 	bl	1b20c <net_buf_simple_add>
   1dd1e:	4606      	mov	r6, r0
	evt->status = status;
   1dd20:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1dd24:	b1bd      	cbz	r5, 1dd56 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1dd26:	2240      	movs	r2, #64	; 0x40
   1dd28:	2100      	movs	r1, #0
   1dd2a:	f006 f87e 	bl	23e2a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dd2e:	f3bf 8f5b 	dmb	ish
   1dd32:	2300      	movs	r3, #0
   1dd34:	e857 2f00 	ldrex	r2, [r7]
   1dd38:	e847 3100 	strex	r1, r3, [r7]
   1dd3c:	2900      	cmp	r1, #0
   1dd3e:	d1f9      	bne.n	1dd34 <ecdh_cmd_process+0x98>
   1dd40:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1dd44:	b36c      	cbz	r4, 1dda2 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1dd46:	4620      	mov	r0, r4
	}
}
   1dd48:	b007      	add	sp, #28
   1dd4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1dd4e:	f7f8 ba77 	b.w	16240 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1dd52:	251f      	movs	r5, #31
   1dd54:	e7c7      	b.n	1dce6 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1dd56:	4917      	ldr	r1, [pc, #92]	; (1ddb4 <ecdh_cmd_process+0x118>)
   1dd58:	f7ff ff20 	bl	1db9c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1dd5c:	4916      	ldr	r1, [pc, #88]	; (1ddb8 <ecdh_cmd_process+0x11c>)
   1dd5e:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1dd62:	f7ff ff1b 	bl	1db9c <sys_memcpy_swap.constprop.0>
		break;
   1dd66:	e7e2      	b.n	1dd2e <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1dd68:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1dd6a:	f7ff ff43 	bl	1dbf4 <ecdh_p256_common_secret>
   1dd6e:	4604      	mov	r4, r0
		break;
   1dd70:	e7dd      	b.n	1dd2e <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1dd72:	2001      	movs	r0, #1
   1dd74:	e7f9      	b.n	1dd6a <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1dd76:	4b11      	ldr	r3, [pc, #68]	; (1ddbc <ecdh_cmd_process+0x120>)
   1dd78:	9305      	str	r3, [sp, #20]
   1dd7a:	2302      	movs	r3, #2
   1dd7c:	9304      	str	r3, [sp, #16]
   1dd7e:	2300      	movs	r3, #0
   1dd80:	480f      	ldr	r0, [pc, #60]	; (1ddc0 <ecdh_cmd_process+0x124>)
   1dd82:	aa04      	add	r2, sp, #16
   1dd84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1dd88:	f7f5 fa94 	bl	132b4 <z_impl_z_log_msg_static_create>
   1dd8c:	f3bf 8f5b 	dmb	ish
   1dd90:	2300      	movs	r3, #0
   1dd92:	e854 2f00 	ldrex	r2, [r4]
   1dd96:	e844 3100 	strex	r1, r3, [r4]
   1dd9a:	2900      	cmp	r1, #0
   1dd9c:	d1f9      	bne.n	1dd92 <ecdh_cmd_process+0xf6>
   1dd9e:	f3bf 8f5b 	dmb	ish
}
   1dda2:	b007      	add	sp, #28
   1dda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dda6:	bf00      	nop
   1dda8:	20002e14 	.word	0x20002e14
   1ddac:	20003098 	.word	0x20003098
   1ddb0:	00029f6c 	.word	0x00029f6c
   1ddb4:	200030b8 	.word	0x200030b8
   1ddb8:	200030d8 	.word	0x200030d8
   1ddbc:	00029f4f 	.word	0x00029f4f
   1ddc0:	000262c4 	.word	0x000262c4

0001ddc4 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ddc4:	b510      	push	{r4, lr}
   1ddc6:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ddc8:	2210      	movs	r2, #16
   1ddca:	2100      	movs	r1, #0
   1ddcc:	a801      	add	r0, sp, #4
   1ddce:	f006 f82c 	bl	23e2a <memset>
   1ddd2:	4c0b      	ldr	r4, [pc, #44]	; (1de00 <ecdh_thread+0x3c>)
   1ddd4:	9405      	str	r4, [sp, #20]
   1ddd6:	2301      	movs	r3, #1
   1ddd8:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1dddc:	f04f 32ff 	mov.w	r2, #4294967295
   1dde0:	f04f 33ff 	mov.w	r3, #4294967295
   1dde4:	2101      	movs	r1, #1
   1dde6:	a801      	add	r0, sp, #4
   1dde8:	f004 fc4a 	bl	22680 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ddec:	4620      	mov	r0, r4
   1ddee:	f008 f8ab 	bl	25f48 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ddf2:	9b04      	ldr	r3, [sp, #16]
   1ddf4:	f36f 3394 	bfc	r3, #14, #7
   1ddf8:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ddfa:	f7ff ff4f 	bl	1dc9c <ecdh_cmd_process>
	while (true) {
   1ddfe:	e7ed      	b.n	1dddc <ecdh_thread+0x18>
   1de00:	20002e04 	.word	0x20002e04

0001de04 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1de04:	b510      	push	{r4, lr}
   1de06:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1de08:	480e      	ldr	r0, [pc, #56]	; (1de44 <hci_ecdh_init+0x40>)
   1de0a:	f008 f898 	bl	25f3e <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1de0e:	4c0e      	ldr	r4, [pc, #56]	; (1de48 <hci_ecdh_init+0x44>)
   1de10:	490e      	ldr	r1, [pc, #56]	; (1de4c <hci_ecdh_init+0x48>)
   1de12:	2200      	movs	r2, #0
   1de14:	2300      	movs	r3, #0
   1de16:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1de1a:	2300      	movs	r3, #0
   1de1c:	220a      	movs	r2, #10
   1de1e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1de22:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1de26:	9300      	str	r3, [sp, #0]
   1de28:	f44f 7262 	mov.w	r2, #904	; 0x388
   1de2c:	4b08      	ldr	r3, [pc, #32]	; (1de50 <hci_ecdh_init+0x4c>)
   1de2e:	4620      	mov	r0, r4
   1de30:	f001 fb34 	bl	1f49c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1de34:	4907      	ldr	r1, [pc, #28]	; (1de54 <hci_ecdh_init+0x50>)
   1de36:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1de38:	b008      	add	sp, #32
   1de3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de3e:	f007 be9e 	b.w	25b7e <z_impl_k_thread_name_set>
   1de42:	bf00      	nop
   1de44:	20002e04 	.word	0x20002e04
   1de48:	20002848 	.word	0x20002848
   1de4c:	200055c0 	.word	0x200055c0
   1de50:	0001ddc5 	.word	0x0001ddc5
   1de54:	00029f5f 	.word	0x00029f5f

0001de58 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1de58:	4801      	ldr	r0, [pc, #4]	; (1de60 <hci_ecdh_uninit+0x8>)
   1de5a:	f7f6 bdf3 	b.w	14a44 <z_impl_k_thread_abort>
   1de5e:	bf00      	nop
   1de60:	20002848 	.word	0x20002848

0001de64 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1de64:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1de66:	4b0b      	ldr	r3, [pc, #44]	; (1de94 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1de68:	f3bf 8f5b 	dmb	ish
   1de6c:	2201      	movs	r2, #1
   1de6e:	e853 1f00 	ldrex	r1, [r3]
   1de72:	2900      	cmp	r1, #0
   1de74:	d103      	bne.n	1de7e <hci_cmd_le_read_local_p256_public_key+0x1a>
   1de76:	e843 2000 	strex	r0, r2, [r3]
   1de7a:	2800      	cmp	r0, #0
   1de7c:	d1f7      	bne.n	1de6e <hci_cmd_le_read_local_p256_public_key+0xa>
   1de7e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1de82:	d105      	bne.n	1de90 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1de84:	4804      	ldr	r0, [pc, #16]	; (1de98 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1de86:	2100      	movs	r1, #0
   1de88:	f004 fcd6 	bl	22838 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1de8c:	2000      	movs	r0, #0
}
   1de8e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1de90:	200c      	movs	r0, #12
   1de92:	e7fc      	b.n	1de8e <hci_cmd_le_read_local_p256_public_key+0x2a>
   1de94:	20002e14 	.word	0x20002e14
   1de98:	20002e04 	.word	0x20002e04

0001de9c <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1de9c:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1de9e:	2900      	cmp	r1, #0
   1dea0:	4b11      	ldr	r3, [pc, #68]	; (1dee8 <cmd_le_generate_dhkey+0x4c>)
   1dea2:	f3bf 8f5b 	dmb	ish
{
   1dea6:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1dea8:	bf0c      	ite	eq
   1deaa:	2202      	moveq	r2, #2
   1deac:	2204      	movne	r2, #4
   1deae:	e853 1f00 	ldrex	r1, [r3]
   1deb2:	2900      	cmp	r1, #0
   1deb4:	d103      	bne.n	1debe <cmd_le_generate_dhkey+0x22>
   1deb6:	e843 2000 	strex	r0, r2, [r3]
   1deba:	2800      	cmp	r0, #0
   1debc:	d1f7      	bne.n	1deae <cmd_le_generate_dhkey+0x12>
   1debe:	f3bf 8f5b 	dmb	ish
   1dec2:	d10e      	bne.n	1dee2 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1dec4:	4621      	mov	r1, r4
   1dec6:	4809      	ldr	r0, [pc, #36]	; (1deec <cmd_le_generate_dhkey+0x50>)
   1dec8:	f7ff fe68 	bl	1db9c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1decc:	4808      	ldr	r0, [pc, #32]	; (1def0 <cmd_le_generate_dhkey+0x54>)
   1dece:	f104 0120 	add.w	r1, r4, #32
   1ded2:	f7ff fe63 	bl	1db9c <sys_memcpy_swap.constprop.0>
   1ded6:	4807      	ldr	r0, [pc, #28]	; (1def4 <cmd_le_generate_dhkey+0x58>)
   1ded8:	2100      	movs	r1, #0
   1deda:	f004 fcad 	bl	22838 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1dede:	2000      	movs	r0, #0
}
   1dee0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1dee2:	200c      	movs	r0, #12
   1dee4:	e7fc      	b.n	1dee0 <cmd_le_generate_dhkey+0x44>
   1dee6:	bf00      	nop
   1dee8:	20002e14 	.word	0x20002e14
   1deec:	200030b8 	.word	0x200030b8
   1def0:	200030d8 	.word	0x200030d8
   1def4:	20002e04 	.word	0x20002e04

0001def8 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1def8:	4901      	ldr	r1, [pc, #4]	; (1df00 <mpsl_low_prio_irq_handler+0x8>)
   1defa:	4802      	ldr	r0, [pc, #8]	; (1df04 <mpsl_low_prio_irq_handler+0xc>)
   1defc:	f007 beeb 	b.w	25cd6 <k_work_submit_to_queue>
   1df00:	20002e18 	.word	0x20002e18
   1df04:	200028c8 	.word	0x200028c8

0001df08 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   1df08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1df0a:	2332      	movs	r3, #50	; 0x32
   1df0c:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1df10:	4a10      	ldr	r2, [pc, #64]	; (1df54 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1df12:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1df14:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1df16:	2119      	movs	r1, #25
   1df18:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1df1a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1df1e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1df22:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1df26:	f7ed fff9 	bl	bf1c <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1df2a:	4604      	mov	r4, r0
   1df2c:	b970      	cbnz	r0, 1df4c <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1df2e:	4601      	mov	r1, r0
   1df30:	462a      	mov	r2, r5
   1df32:	2008      	movs	r0, #8
   1df34:	f7f6 f88a 	bl	1404c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1df38:	462a      	mov	r2, r5
   1df3a:	4621      	mov	r1, r4
   1df3c:	200b      	movs	r0, #11
   1df3e:	f7f6 f885 	bl	1404c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1df42:	462a      	mov	r2, r5
   1df44:	4621      	mov	r1, r4
   1df46:	4628      	mov	r0, r5
   1df48:	f7f6 f880 	bl	1404c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1df4c:	4620      	mov	r0, r4
   1df4e:	b003      	add	sp, #12
   1df50:	bd30      	pop	{r4, r5, pc}
   1df52:	bf00      	nop
   1df54:	0001df95 	.word	0x0001df95

0001df58 <mpsl_low_prio_work_handler>:
{
   1df58:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1df5a:	f04f 30ff 	mov.w	r0, #4294967295
   1df5e:	f04f 31ff 	mov.w	r1, #4294967295
   1df62:	f7fe ff13 	bl	1cd8c <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1df66:	b148      	cbz	r0, 1df7c <mpsl_low_prio_work_handler+0x24>
   1df68:	4907      	ldr	r1, [pc, #28]	; (1df88 <mpsl_low_prio_work_handler+0x30>)
   1df6a:	4808      	ldr	r0, [pc, #32]	; (1df8c <mpsl_low_prio_work_handler+0x34>)
   1df6c:	4a08      	ldr	r2, [pc, #32]	; (1df90 <mpsl_low_prio_work_handler+0x38>)
   1df6e:	2347      	movs	r3, #71	; 0x47
   1df70:	f005 fb43 	bl	235fa <assert_print>
   1df74:	4806      	ldr	r0, [pc, #24]	; (1df90 <mpsl_low_prio_work_handler+0x38>)
   1df76:	2147      	movs	r1, #71	; 0x47
   1df78:	f005 fb38 	bl	235ec <assert_post_action>
	mpsl_low_priority_process();
   1df7c:	f7f2 f9ec 	bl	10358 <mpsl_low_priority_process>
}
   1df80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1df84:	f7fe bf0a 	b.w	1cd9c <multithreading_lock_release>
   1df88:	00029fc5 	.word	0x00029fc5
   1df8c:	00026f1a 	.word	0x00026f1a
   1df90:	00029f98 	.word	0x00029f98

0001df94 <m_assert_handler>:
{
   1df94:	b598      	push	{r3, r4, r7, lr}
   1df96:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1df98:	466c      	mov	r4, sp
   1df9a:	b08a      	sub	sp, #40	; 0x28
   1df9c:	466a      	mov	r2, sp
   1df9e:	4b0c      	ldr	r3, [pc, #48]	; (1dfd0 <m_assert_handler+0x3c>)
   1dfa0:	61d1      	str	r1, [r2, #28]
   1dfa2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dfa6:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dfaa:	8413      	strh	r3, [r2, #32]
   1dfac:	4b09      	ldr	r3, [pc, #36]	; (1dfd4 <m_assert_handler+0x40>)
   1dfae:	f842 3f10 	str.w	r3, [r2, #16]!
   1dfb2:	4809      	ldr	r0, [pc, #36]	; (1dfd8 <m_assert_handler+0x44>)
   1dfb4:	2300      	movs	r3, #0
   1dfb6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1dfba:	f7f5 f97b 	bl	132b4 <z_impl_z_log_msg_static_create>
   1dfbe:	46a5      	mov	sp, r4
	k_oops();
   1dfc0:	4040      	eors	r0, r0
   1dfc2:	f380 8811 	msr	BASEPRI, r0
   1dfc6:	f04f 0003 	mov.w	r0, #3
   1dfca:	df02      	svc	2
}
   1dfcc:	46bd      	mov	sp, r7
   1dfce:	bd98      	pop	{r3, r4, r7, pc}
   1dfd0:	00029fd2 	.word	0x00029fd2
   1dfd4:	01000004 	.word	0x01000004
   1dfd8:	00026314 	.word	0x00026314

0001dfdc <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   1dfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1dfde:	4d0d      	ldr	r5, [pc, #52]	; (1e014 <mpsl_low_prio_init+0x38>)
   1dfe0:	490d      	ldr	r1, [pc, #52]	; (1e018 <mpsl_low_prio_init+0x3c>)
   1dfe2:	2400      	movs	r4, #0
   1dfe4:	9400      	str	r4, [sp, #0]
   1dfe6:	f06f 0309 	mvn.w	r3, #9
   1dfea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1dfee:	4628      	mov	r0, r5
   1dff0:	f002 f966 	bl	202c0 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1dff4:	4909      	ldr	r1, [pc, #36]	; (1e01c <mpsl_low_prio_init+0x40>)
   1dff6:	4628      	mov	r0, r5
   1dff8:	f007 fdc1 	bl	25b7e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1dffc:	4908      	ldr	r1, [pc, #32]	; (1e020 <mpsl_low_prio_init+0x44>)
   1dffe:	4809      	ldr	r0, [pc, #36]	; (1e024 <mpsl_low_prio_init+0x48>)
   1e000:	f002 f878 	bl	200f4 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1e004:	4622      	mov	r2, r4
   1e006:	2104      	movs	r1, #4
   1e008:	2019      	movs	r0, #25
   1e00a:	f7f6 f81f 	bl	1404c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1e00e:	4620      	mov	r0, r4
   1e010:	b003      	add	sp, #12
   1e012:	bd30      	pop	{r4, r5, pc}
   1e014:	200028c8 	.word	0x200028c8
   1e018:	200059c0 	.word	0x200059c0
   1e01c:	00029fe6 	.word	0x00029fe6
   1e020:	0001df59 	.word	0x0001df59
   1e024:	20002e18 	.word	0x20002e18

0001e028 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e028:	4b01      	ldr	r3, [pc, #4]	; (1e030 <mpsl_hfclk_callback+0x8>)
   1e02a:	2000      	movs	r0, #0
   1e02c:	681b      	ldr	r3, [r3, #0]
   1e02e:	4718      	bx	r3
   1e030:	20002e28 	.word	0x20002e28

0001e034 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1e034:	b510      	push	{r4, lr}
	switch (domain) {
   1e036:	b130      	cbz	r0, 1e046 <nrfx_clock_start+0x12>
   1e038:	2801      	cmp	r0, #1
   1e03a:	d10a      	bne.n	1e052 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1e03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1e040:	480a      	ldr	r0, [pc, #40]	; (1e06c <nrfx_clock_start+0x38>)
   1e042:	f7ed bdcd 	b.w	bbe0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e046:	4b0a      	ldr	r3, [pc, #40]	; (1e070 <nrfx_clock_start+0x3c>)
}
   1e048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e04c:	681b      	ldr	r3, [r3, #0]
   1e04e:	2001      	movs	r0, #1
   1e050:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1e052:	4908      	ldr	r1, [pc, #32]	; (1e074 <nrfx_clock_start+0x40>)
   1e054:	4a08      	ldr	r2, [pc, #32]	; (1e078 <nrfx_clock_start+0x44>)
   1e056:	4809      	ldr	r0, [pc, #36]	; (1e07c <nrfx_clock_start+0x48>)
   1e058:	231c      	movs	r3, #28
   1e05a:	f005 face 	bl	235fa <assert_print>
   1e05e:	4808      	ldr	r0, [pc, #32]	; (1e080 <nrfx_clock_start+0x4c>)
   1e060:	f005 facb 	bl	235fa <assert_print>
   1e064:	4804      	ldr	r0, [pc, #16]	; (1e078 <nrfx_clock_start+0x44>)
   1e066:	211c      	movs	r1, #28
   1e068:	f005 fac0 	bl	235ec <assert_post_action>
   1e06c:	0001e029 	.word	0x0001e029
   1e070:	20002e28 	.word	0x20002e28
   1e074:	00029a2c 	.word	0x00029a2c
   1e078:	00029ffa 	.word	0x00029ffa
   1e07c:	00026f1a 	.word	0x00026f1a
   1e080:	0002a037 	.word	0x0002a037

0001e084 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1e084:	b508      	push	{r3, lr}
	switch (domain) {
   1e086:	b190      	cbz	r0, 1e0ae <nrfx_clock_stop+0x2a>
   1e088:	2801      	cmp	r0, #1
   1e08a:	d103      	bne.n	1e094 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1e08c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1e090:	f7ed bd98 	b.w	bbc4 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1e094:	4906      	ldr	r1, [pc, #24]	; (1e0b0 <nrfx_clock_stop+0x2c>)
   1e096:	4a07      	ldr	r2, [pc, #28]	; (1e0b4 <nrfx_clock_stop+0x30>)
   1e098:	4807      	ldr	r0, [pc, #28]	; (1e0b8 <nrfx_clock_stop+0x34>)
   1e09a:	232a      	movs	r3, #42	; 0x2a
   1e09c:	f005 faad 	bl	235fa <assert_print>
   1e0a0:	4806      	ldr	r0, [pc, #24]	; (1e0bc <nrfx_clock_stop+0x38>)
   1e0a2:	f005 faaa 	bl	235fa <assert_print>
   1e0a6:	4803      	ldr	r0, [pc, #12]	; (1e0b4 <nrfx_clock_stop+0x30>)
   1e0a8:	212a      	movs	r1, #42	; 0x2a
   1e0aa:	f005 fa9f 	bl	235ec <assert_post_action>
}
   1e0ae:	bd08      	pop	{r3, pc}
   1e0b0:	00029a2c 	.word	0x00029a2c
   1e0b4:	00029ffa 	.word	0x00029ffa
   1e0b8:	00026f1a 	.word	0x00026f1a
   1e0bc:	0002a037 	.word	0x0002a037

0001e0c0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1e0c0:	4b01      	ldr	r3, [pc, #4]	; (1e0c8 <nrfx_clock_init+0x8>)
   1e0c2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1e0c4:	4801      	ldr	r0, [pc, #4]	; (1e0cc <nrfx_clock_init+0xc>)
   1e0c6:	4770      	bx	lr
   1e0c8:	20002e28 	.word	0x20002e28
   1e0cc:	0bad0000 	.word	0x0bad0000

0001e0d0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e0d0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1e0d4:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1e0d8:	2a06      	cmp	r2, #6
   1e0da:	d109      	bne.n	1e0f0 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1e0dc:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1e0e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1e0e4:	3b03      	subs	r3, #3
   1e0e6:	2b04      	cmp	r3, #4
   1e0e8:	d802      	bhi.n	1e0f0 <nrf52_errata_16+0x20>
   1e0ea:	4a02      	ldr	r2, [pc, #8]	; (1e0f4 <nrf52_errata_16+0x24>)
   1e0ec:	5cd0      	ldrb	r0, [r2, r3]
   1e0ee:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
   1e0f0:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   1e0f2:	4770      	bx	lr
   1e0f4:	0002a056 	.word	0x0002a056

0001e0f8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e0f8:	4a02      	ldr	r2, [pc, #8]	; (1e104 <nvmc_wait+0xc>)
   1e0fa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1e0fe:	2b00      	cmp	r3, #0
   1e100:	d0fb      	beq.n	1e0fa <nvmc_wait+0x2>
}
   1e102:	4770      	bx	lr
   1e104:	4001e000 	.word	0x4001e000

0001e108 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1e108:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1e10a:	f007 fc79 	bl	25a00 <nrf52_errata_108>
   1e10e:	b140      	cbz	r0, 1e122 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1e110:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e114:	4a8e      	ldr	r2, [pc, #568]	; (1e350 <SystemInit+0x248>)
   1e116:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1e11a:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1e11e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1e122:	f7ff ffd5 	bl	1e0d0 <nrf52_errata_16>
   1e126:	b110      	cbz	r0, 1e12e <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1e128:	4b8a      	ldr	r3, [pc, #552]	; (1e354 <SystemInit+0x24c>)
   1e12a:	4a8b      	ldr	r2, [pc, #556]	; (1e358 <SystemInit+0x250>)
   1e12c:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1e12e:	f007 fc67 	bl	25a00 <nrf52_errata_108>
   1e132:	b148      	cbz	r0, 1e148 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1e134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e13c:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1e140:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1e144:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1e148:	f7ff ffc2 	bl	1e0d0 <nrf52_errata_16>
   1e14c:	b130      	cbz	r0, 1e15c <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1e14e:	4a83      	ldr	r2, [pc, #524]	; (1e35c <SystemInit+0x254>)
   1e150:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1e154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1e158:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1e15c:	f007 fc50 	bl	25a00 <nrf52_errata_108>
   1e160:	b140      	cbz	r0, 1e174 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1e162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e166:	2200      	movs	r2, #0
   1e168:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1e16c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1e170:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1e174:	f7ff ffac 	bl	1e0d0 <nrf52_errata_16>
   1e178:	b120      	cbz	r0, 1e184 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1e17a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e17e:	2203      	movs	r2, #3
   1e180:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1e184:	f7ff ffa4 	bl	1e0d0 <nrf52_errata_16>
   1e188:	b160      	cbz	r0, 1e1a4 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1e18a:	4b75      	ldr	r3, [pc, #468]	; (1e360 <SystemInit+0x258>)
   1e18c:	2205      	movs	r2, #5
   1e18e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1e192:	2201      	movs	r2, #1
   1e194:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1e198:	2200      	movs	r2, #0
   1e19a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1e19e:	223f      	movs	r2, #63	; 0x3f
   1e1a0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1e1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e1a8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e1ac:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e1ae:	bf09      	itett	eq
   1e1b0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1e1b4:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1e1b8:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1e1bc:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1e1c0:	bf08      	it	eq
   1e1c2:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1e1c6:	2a06      	cmp	r2, #6
   1e1c8:	d14d      	bne.n	1e266 <SystemInit+0x15e>
            {
                switch(var2)
   1e1ca:	3b03      	subs	r3, #3
   1e1cc:	2b04      	cmp	r3, #4
   1e1ce:	d803      	bhi.n	1e1d8 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1e1d0:	4a64      	ldr	r2, [pc, #400]	; (1e364 <SystemInit+0x25c>)
   1e1d2:	5cd3      	ldrb	r3, [r2, r3]
   1e1d4:	2b00      	cmp	r3, #0
   1e1d6:	d046      	beq.n	1e266 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1e1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e1dc:	4b62      	ldr	r3, [pc, #392]	; (1e368 <SystemInit+0x260>)
   1e1de:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1e1e2:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1e1e6:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1e1ea:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1e1ee:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1e1f2:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1e1f6:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1e1fa:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1e1fe:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1e202:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1e206:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1e20a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1e20e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1e212:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1e216:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1e21a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1e21e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1e222:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1e226:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1e22a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1e22e:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1e232:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1e236:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1e23a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1e23e:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1e242:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1e246:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1e24a:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1e24e:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1e252:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1e256:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1e25a:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1e25e:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1e262:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1e266:	f007 fbcb 	bl	25a00 <nrf52_errata_108>
   1e26a:	b148      	cbz	r0, 1e280 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1e26c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e274:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1e278:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1e27c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1e280:	f007 fbbe 	bl	25a00 <nrf52_errata_108>
   1e284:	b148      	cbz	r0, 1e29a <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1e286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e28a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e28e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1e290:	bf44      	itt	mi
   1e292:	f06f 0201 	mvnmi.w	r2, #1
   1e296:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e29a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1e29e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e2a2:	2a06      	cmp	r2, #6
   1e2a4:	d126      	bne.n	1e2f4 <SystemInit+0x1ec>
            {
                switch(var2)
   1e2a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1e2aa:	3b03      	subs	r3, #3
   1e2ac:	2b04      	cmp	r3, #4
   1e2ae:	d802      	bhi.n	1e2b6 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1e2b0:	4a2e      	ldr	r2, [pc, #184]	; (1e36c <SystemInit+0x264>)
   1e2b2:	5cd3      	ldrb	r3, [r2, r3]
   1e2b4:	b163      	cbz	r3, 1e2d0 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1e2b6:	4a2e      	ldr	r2, [pc, #184]	; (1e370 <SystemInit+0x268>)
   1e2b8:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1e2bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1e2c0:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e2c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1e2c8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1e2cc:	2b06      	cmp	r3, #6
   1e2ce:	d111      	bne.n	1e2f4 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e2d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e2d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1e2d8:	3b03      	subs	r3, #3
   1e2da:	2b04      	cmp	r3, #4
   1e2dc:	d802      	bhi.n	1e2e4 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1e2de:	4a25      	ldr	r2, [pc, #148]	; (1e374 <SystemInit+0x26c>)
   1e2e0:	5cd3      	ldrb	r3, [r2, r3]
   1e2e2:	b13b      	cbz	r3, 1e2f4 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1e2e4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e2e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1e2ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e2f0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e2f4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e2f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1e2fc:	2a00      	cmp	r2, #0
   1e2fe:	db03      	blt.n	1e308 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1e300:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e304:	2b00      	cmp	r3, #0
   1e306:	da22      	bge.n	1e34e <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e308:	491b      	ldr	r1, [pc, #108]	; (1e378 <SystemInit+0x270>)
   1e30a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e30c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e310:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e314:	2415      	movs	r4, #21
    nvmc_wait();
   1e316:	f7ff feef 	bl	1e0f8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e31a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1e31e:	f7ff feeb 	bl	1e0f8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1e322:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1e326:	f7ff fee7 	bl	1e0f8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e32a:	2300      	movs	r3, #0
   1e32c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1e330:	f7ff fee2 	bl	1e0f8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1e334:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e338:	4908      	ldr	r1, [pc, #32]	; (1e35c <SystemInit+0x254>)
   1e33a:	4b10      	ldr	r3, [pc, #64]	; (1e37c <SystemInit+0x274>)
   1e33c:	68ca      	ldr	r2, [r1, #12]
   1e33e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e342:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e344:	60cb      	str	r3, [r1, #12]
   1e346:	f3bf 8f4f 	dsb	sy
    __NOP();
   1e34a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e34c:	e7fd      	b.n	1e34a <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   1e34e:	bd10      	pop	{r4, pc}
   1e350:	40013000 	.word	0x40013000
   1e354:	4007c000 	.word	0x4007c000
   1e358:	baadf00d 	.word	0xbaadf00d
   1e35c:	e000ed00 	.word	0xe000ed00
   1e360:	40005000 	.word	0x40005000
   1e364:	0002a051 	.word	0x0002a051
   1e368:	4000c000 	.word	0x4000c000
   1e36c:	0002a04c 	.word	0x0002a04c
   1e370:	40001000 	.word	0x40001000
   1e374:	0002a047 	.word	0x0002a047
   1e378:	4001e000 	.word	0x4001e000
   1e37c:	05fa0004 	.word	0x05fa0004

0001e380 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1e380:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e382:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1e384:	6802      	ldr	r2, [r0, #0]
   1e386:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1e38a:	fab2 f382 	clz	r3, r2
   1e38e:	f1c3 031f 	rsb	r3, r3, #31
   1e392:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e394:	fa05 f403 	lsl.w	r4, r5, r3
   1e398:	ea22 0404 	bic.w	r4, r2, r4
   1e39c:	e850 6f00 	ldrex	r6, [r0]
   1e3a0:	4296      	cmp	r6, r2
   1e3a2:	d104      	bne.n	1e3ae <nrfx_flag32_alloc+0x2e>
   1e3a4:	e840 4c00 	strex	ip, r4, [r0]
   1e3a8:	f1bc 0f00 	cmp.w	ip, #0
   1e3ac:	d1f6      	bne.n	1e39c <nrfx_flag32_alloc+0x1c>
   1e3ae:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e3b2:	d1e7      	bne.n	1e384 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1e3b4:	4801      	ldr	r0, [pc, #4]	; (1e3bc <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1e3b6:	700b      	strb	r3, [r1, #0]
}
   1e3b8:	bd70      	pop	{r4, r5, r6, pc}
   1e3ba:	bf00      	nop
   1e3bc:	0bad0000 	.word	0x0bad0000

0001e3c0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1e3c0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1e3c2:	6803      	ldr	r3, [r0, #0]
   1e3c4:	40cb      	lsrs	r3, r1
   1e3c6:	07db      	lsls	r3, r3, #31
   1e3c8:	d414      	bmi.n	1e3f4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1e3ca:	2301      	movs	r3, #1
   1e3cc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1e3ce:	6802      	ldr	r2, [r0, #0]
   1e3d0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1e3d4:	ea43 0102 	orr.w	r1, r3, r2
   1e3d8:	e850 4f00 	ldrex	r4, [r0]
   1e3dc:	4294      	cmp	r4, r2
   1e3de:	d104      	bne.n	1e3ea <nrfx_flag32_free+0x2a>
   1e3e0:	e840 1c00 	strex	ip, r1, [r0]
   1e3e4:	f1bc 0f00 	cmp.w	ip, #0
   1e3e8:	d1f6      	bne.n	1e3d8 <nrfx_flag32_free+0x18>
   1e3ea:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e3ee:	d1ee      	bne.n	1e3ce <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1e3f0:	4801      	ldr	r0, [pc, #4]	; (1e3f8 <nrfx_flag32_free+0x38>)
}
   1e3f2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e3f4:	4801      	ldr	r0, [pc, #4]	; (1e3fc <nrfx_flag32_free+0x3c>)
   1e3f6:	e7fc      	b.n	1e3f2 <nrfx_flag32_free+0x32>
   1e3f8:	0bad0000 	.word	0x0bad0000
   1e3fc:	0bad0004 	.word	0x0bad0004

0001e400 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1e400:	4b03      	ldr	r3, [pc, #12]	; (1e410 <pin_in_use_by_te+0x10>)
   1e402:	3008      	adds	r0, #8
   1e404:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e408:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1e40c:	4770      	bx	lr
   1e40e:	bf00      	nop
   1e410:	20000708 	.word	0x20000708

0001e414 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1e414:	4b04      	ldr	r3, [pc, #16]	; (1e428 <pin_has_trigger+0x14>)
   1e416:	3008      	adds	r0, #8
   1e418:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e41c:	f010 001c 	ands.w	r0, r0, #28
   1e420:	bf18      	it	ne
   1e422:	2001      	movne	r0, #1
   1e424:	4770      	bx	lr
   1e426:	bf00      	nop
   1e428:	20000708 	.word	0x20000708

0001e42c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e42c:	4b03      	ldr	r3, [pc, #12]	; (1e43c <pin_is_output+0x10>)
   1e42e:	3008      	adds	r0, #8
   1e430:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e434:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1e438:	4770      	bx	lr
   1e43a:	bf00      	nop
   1e43c:	20000708 	.word	0x20000708

0001e440 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1e440:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e442:	f100 0308 	add.w	r3, r0, #8
   1e446:	4c0c      	ldr	r4, [pc, #48]	; (1e478 <call_handler+0x38>)
   1e448:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1e44c:	05da      	lsls	r2, r3, #23
{
   1e44e:	4605      	mov	r5, r0
   1e450:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e452:	d507      	bpl.n	1e464 <call_handler+0x24>
   1e454:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1e458:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1e45c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1e460:	6852      	ldr	r2, [r2, #4]
   1e462:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1e464:	68a3      	ldr	r3, [r4, #8]
   1e466:	b12b      	cbz	r3, 1e474 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e468:	68e2      	ldr	r2, [r4, #12]
   1e46a:	4631      	mov	r1, r6
   1e46c:	4628      	mov	r0, r5
    }
}
   1e46e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e472:	4718      	bx	r3
}
   1e474:	bd70      	pop	{r4, r5, r6, pc}
   1e476:	bf00      	nop
   1e478:	20000708 	.word	0x20000708

0001e47c <release_handler>:
{
   1e47c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e47e:	4a18      	ldr	r2, [pc, #96]	; (1e4e0 <release_handler+0x64>)
   1e480:	3008      	adds	r0, #8
   1e482:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1e486:	05d9      	lsls	r1, r3, #23
   1e488:	d51d      	bpl.n	1e4c6 <release_handler+0x4a>
   1e48a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1e48e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e492:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e496:	f102 040e 	add.w	r4, r2, #14
   1e49a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1e49c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1e4a0:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e4a4:	d003      	beq.n	1e4ae <release_handler+0x32>
   1e4a6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1e4aa:	4299      	cmp	r1, r3
   1e4ac:	d00b      	beq.n	1e4c6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e4ae:	3001      	adds	r0, #1
   1e4b0:	2820      	cmp	r0, #32
   1e4b2:	d1f3      	bne.n	1e49c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1e4b4:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e4b6:	480b      	ldr	r0, [pc, #44]	; (1e4e4 <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1e4b8:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e4bc:	f7ff ff80 	bl	1e3c0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1e4c0:	4b09      	ldr	r3, [pc, #36]	; (1e4e8 <release_handler+0x6c>)
   1e4c2:	4298      	cmp	r0, r3
   1e4c4:	d100      	bne.n	1e4c8 <release_handler+0x4c>
}
   1e4c6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1e4c8:	4908      	ldr	r1, [pc, #32]	; (1e4ec <release_handler+0x70>)
   1e4ca:	4809      	ldr	r0, [pc, #36]	; (1e4f0 <release_handler+0x74>)
   1e4cc:	4a09      	ldr	r2, [pc, #36]	; (1e4f4 <release_handler+0x78>)
   1e4ce:	f44f 7399 	mov.w	r3, #306	; 0x132
   1e4d2:	f005 f892 	bl	235fa <assert_print>
   1e4d6:	4807      	ldr	r0, [pc, #28]	; (1e4f4 <release_handler+0x78>)
   1e4d8:	f44f 7199 	mov.w	r1, #306	; 0x132
   1e4dc:	f005 f886 	bl	235ec <assert_post_action>
   1e4e0:	20000708 	.word	0x20000708
   1e4e4:	2000075c 	.word	0x2000075c
   1e4e8:	0bad0000 	.word	0x0bad0000
   1e4ec:	0002974b 	.word	0x0002974b
   1e4f0:	00026f1a 	.word	0x00026f1a
   1e4f4:	0002a05b 	.word	0x0002a05b

0001e4f8 <pin_handler_trigger_uninit>:
{
   1e4f8:	b538      	push	{r3, r4, r5, lr}
   1e4fa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e4fc:	f7ff ff80 	bl	1e400 <pin_in_use_by_te>
   1e500:	4c09      	ldr	r4, [pc, #36]	; (1e528 <pin_handler_trigger_uninit+0x30>)
   1e502:	f102 0508 	add.w	r5, r2, #8
   1e506:	b140      	cbz	r0, 1e51a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e508:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1e50c:	4907      	ldr	r1, [pc, #28]	; (1e52c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1e50e:	0b5b      	lsrs	r3, r3, #13
   1e510:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1e514:	2000      	movs	r0, #0
   1e516:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1e51a:	4610      	mov	r0, r2
   1e51c:	f7ff ffae 	bl	1e47c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1e520:	2300      	movs	r3, #0
   1e522:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1e526:	bd38      	pop	{r3, r4, r5, pc}
   1e528:	20000708 	.word	0x20000708
   1e52c:	40006000 	.word	0x40006000

0001e530 <nrf_gpio_pin_port_decode>:
{
   1e530:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e532:	6802      	ldr	r2, [r0, #0]
{
   1e534:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e536:	4610      	mov	r0, r2
   1e538:	f007 fa73 	bl	25a22 <nrf_gpio_pin_present_check>
   1e53c:	b958      	cbnz	r0, 1e556 <nrf_gpio_pin_port_decode+0x26>
   1e53e:	490f      	ldr	r1, [pc, #60]	; (1e57c <nrf_gpio_pin_port_decode+0x4c>)
   1e540:	4a0f      	ldr	r2, [pc, #60]	; (1e580 <nrf_gpio_pin_port_decode+0x50>)
   1e542:	4810      	ldr	r0, [pc, #64]	; (1e584 <nrf_gpio_pin_port_decode+0x54>)
   1e544:	f240 2347 	movw	r3, #583	; 0x247
   1e548:	f005 f857 	bl	235fa <assert_print>
   1e54c:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1e550:	480b      	ldr	r0, [pc, #44]	; (1e580 <nrf_gpio_pin_port_decode+0x50>)
   1e552:	f005 f84b 	bl	235ec <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1e556:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e55a:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1e55c:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e55e:	d009      	beq.n	1e574 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   1e560:	4909      	ldr	r1, [pc, #36]	; (1e588 <nrf_gpio_pin_port_decode+0x58>)
   1e562:	4a07      	ldr	r2, [pc, #28]	; (1e580 <nrf_gpio_pin_port_decode+0x50>)
   1e564:	4807      	ldr	r0, [pc, #28]	; (1e584 <nrf_gpio_pin_port_decode+0x54>)
   1e566:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1e56a:	f005 f846 	bl	235fa <assert_print>
   1e56e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1e572:	e7ed      	b.n	1e550 <nrf_gpio_pin_port_decode+0x20>
}
   1e574:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1e578:	bd08      	pop	{r3, pc}
   1e57a:	bf00      	nop
   1e57c:	000296f0 	.word	0x000296f0
   1e580:	000296bd 	.word	0x000296bd
   1e584:	00026f1a 	.word	0x00026f1a
   1e588:	00029a2c 	.word	0x00029a2c

0001e58c <nrfx_gpiote_input_configure>:
{
   1e58c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e58e:	4604      	mov	r4, r0
   1e590:	b085      	sub	sp, #20
   1e592:	4617      	mov	r7, r2
   1e594:	461d      	mov	r5, r3
    if (p_input_config)
   1e596:	b1d9      	cbz	r1, 1e5d0 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1e598:	f007 fa4f 	bl	25a3a <pin_is_task_output>
   1e59c:	bb00      	cbnz	r0, 1e5e0 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e59e:	460b      	mov	r3, r1
   1e5a0:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1e5a4:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1e5a8:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e5ac:	f10d 020f 	add.w	r2, sp, #15
   1e5b0:	f10d 010e 	add.w	r1, sp, #14
   1e5b4:	4620      	mov	r0, r4
   1e5b6:	f007 fa4b 	bl	25a50 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e5ba:	4a44      	ldr	r2, [pc, #272]	; (1e6cc <nrfx_gpiote_input_configure+0x140>)
   1e5bc:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1e5c0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1e5c4:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e5c8:	f043 0301 	orr.w	r3, r3, #1
   1e5cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1e5d0:	b34f      	cbz	r7, 1e626 <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   1e5d2:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1e5d4:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1e5d6:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1e5d8:	f7ff ff28 	bl	1e42c <pin_is_output>
   1e5dc:	b110      	cbz	r0, 1e5e4 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1e5de:	b1ba      	cbz	r2, 1e610 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   1e5e0:	483b      	ldr	r0, [pc, #236]	; (1e6d0 <nrfx_gpiote_input_configure+0x144>)
   1e5e2:	e022      	b.n	1e62a <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1e5e4:	4b39      	ldr	r3, [pc, #228]	; (1e6cc <nrfx_gpiote_input_configure+0x140>)
   1e5e6:	f104 0c08 	add.w	ip, r4, #8
   1e5ea:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   1e5ee:	f021 0120 	bic.w	r1, r1, #32
   1e5f2:	04c9      	lsls	r1, r1, #19
   1e5f4:	0cc9      	lsrs	r1, r1, #19
   1e5f6:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   1e5fa:	b14a      	cbz	r2, 1e610 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   1e5fc:	2e03      	cmp	r6, #3
   1e5fe:	d8ef      	bhi.n	1e5e0 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1e600:	687a      	ldr	r2, [r7, #4]
   1e602:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1e604:	b99e      	cbnz	r6, 1e62e <nrfx_gpiote_input_configure+0xa2>
   1e606:	4b33      	ldr	r3, [pc, #204]	; (1e6d4 <nrfx_gpiote_input_configure+0x148>)
   1e608:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1e60c:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e610:	4a2e      	ldr	r2, [pc, #184]	; (1e6cc <nrfx_gpiote_input_configure+0x140>)
   1e612:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1e616:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1e61a:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e61e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1e622:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1e626:	bb3d      	cbnz	r5, 1e678 <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   1e628:	482b      	ldr	r0, [pc, #172]	; (1e6d8 <nrfx_gpiote_input_configure+0x14c>)
}
   1e62a:	b005      	add	sp, #20
   1e62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e62e:	00ba      	lsls	r2, r7, #2
   1e630:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e634:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e638:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1e63c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e640:	f020 0003 	bic.w	r0, r0, #3
   1e644:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e648:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e64c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1e650:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1e654:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e658:	0220      	lsls	r0, r4, #8
   1e65a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1e65e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1e662:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1e666:	ea40 000e 	orr.w	r0, r0, lr
   1e66a:	f041 0120 	orr.w	r1, r1, #32
   1e66e:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   1e672:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1e676:	e7cb      	b.n	1e610 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1e678:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1e67c:	4620      	mov	r0, r4
   1e67e:	f7ff fefd 	bl	1e47c <release_handler>
    if (!handler)
   1e682:	2e00      	cmp	r6, #0
   1e684:	d0d0      	beq.n	1e628 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e686:	4d11      	ldr	r5, [pc, #68]	; (1e6cc <nrfx_gpiote_input_configure+0x140>)
   1e688:	e9d5 2300 	ldrd	r2, r3, [r5]
   1e68c:	4296      	cmp	r6, r2
   1e68e:	d101      	bne.n	1e694 <nrfx_gpiote_input_configure+0x108>
   1e690:	429f      	cmp	r7, r3
   1e692:	d018      	beq.n	1e6c6 <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1e694:	4811      	ldr	r0, [pc, #68]	; (1e6dc <nrfx_gpiote_input_configure+0x150>)
   1e696:	f10d 010f 	add.w	r1, sp, #15
   1e69a:	f7ff fe71 	bl	1e380 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1e69e:	4b0e      	ldr	r3, [pc, #56]	; (1e6d8 <nrfx_gpiote_input_configure+0x14c>)
   1e6a0:	4298      	cmp	r0, r3
   1e6a2:	d1c2      	bne.n	1e62a <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   1e6a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1e6a8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1e6ac:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e6b0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1e6b2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e6b4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1e6b8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1e6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1e6c0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1e6c4:	e7b0      	b.n	1e628 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e6c6:	2200      	movs	r2, #0
   1e6c8:	e7ee      	b.n	1e6a8 <nrfx_gpiote_input_configure+0x11c>
   1e6ca:	bf00      	nop
   1e6cc:	20000708 	.word	0x20000708
   1e6d0:	0bad0004 	.word	0x0bad0004
   1e6d4:	40006000 	.word	0x40006000
   1e6d8:	0bad0000 	.word	0x0bad0000
   1e6dc:	2000075c 	.word	0x2000075c

0001e6e0 <nrfx_gpiote_output_configure>:
{
   1e6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6e2:	4604      	mov	r4, r0
   1e6e4:	b085      	sub	sp, #20
   1e6e6:	4615      	mov	r5, r2
    if (p_config)
   1e6e8:	b321      	cbz	r1, 1e734 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1e6ea:	f7ff fe9f 	bl	1e42c <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1e6ee:	b920      	cbnz	r0, 1e6fa <nrfx_gpiote_output_configure+0x1a>
   1e6f0:	4620      	mov	r0, r4
   1e6f2:	f7ff fe85 	bl	1e400 <pin_in_use_by_te>
   1e6f6:	2800      	cmp	r0, #0
   1e6f8:	d15e      	bne.n	1e7b8 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1e6fa:	4620      	mov	r0, r4
   1e6fc:	f7ff fe8a 	bl	1e414 <pin_has_trigger>
   1e700:	b110      	cbz	r0, 1e708 <nrfx_gpiote_output_configure+0x28>
   1e702:	784b      	ldrb	r3, [r1, #1]
   1e704:	2b01      	cmp	r3, #1
   1e706:	d057      	beq.n	1e7b8 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1e708:	2301      	movs	r3, #1
   1e70a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1e70e:	2300      	movs	r3, #0
   1e710:	e9cd 1300 	strd	r1, r3, [sp]
   1e714:	1c4a      	adds	r2, r1, #1
   1e716:	1c8b      	adds	r3, r1, #2
   1e718:	4620      	mov	r0, r4
   1e71a:	f10d 010f 	add.w	r1, sp, #15
   1e71e:	f007 f997 	bl	25a50 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1e722:	4a26      	ldr	r2, [pc, #152]	; (1e7bc <nrfx_gpiote_output_configure+0xdc>)
   1e724:	f104 0108 	add.w	r1, r4, #8
   1e728:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1e72c:	f043 0303 	orr.w	r3, r3, #3
   1e730:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1e734:	b915      	cbnz	r5, 1e73c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1e736:	4822      	ldr	r0, [pc, #136]	; (1e7c0 <nrfx_gpiote_output_configure+0xe0>)
}
   1e738:	b005      	add	sp, #20
   1e73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1e73c:	4620      	mov	r0, r4
   1e73e:	f7ff fe75 	bl	1e42c <pin_is_output>
        if (pin_is_input(pin))
   1e742:	b3c8      	cbz	r0, 1e7b8 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1e744:	4e1d      	ldr	r6, [pc, #116]	; (1e7bc <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1e746:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1e74a:	f104 0708 	add.w	r7, r4, #8
   1e74e:	4661      	mov	r1, ip
   1e750:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1e754:	0089      	lsls	r1, r1, #2
   1e756:	f020 0020 	bic.w	r0, r0, #32
   1e75a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e75e:	04c0      	lsls	r0, r0, #19
   1e760:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1e764:	0cc0      	lsrs	r0, r0, #19
   1e766:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1e76a:	2300      	movs	r3, #0
   1e76c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1e770:	786a      	ldrb	r2, [r5, #1]
   1e772:	2a00      	cmp	r2, #0
   1e774:	d0df      	beq.n	1e736 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1e776:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1e77a:	78ad      	ldrb	r5, [r5, #2]
   1e77c:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1e780:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e784:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e788:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1e78c:	0223      	lsls	r3, r4, #8
   1e78e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1e792:	0412      	lsls	r2, r2, #16
   1e794:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e798:	ea43 030e 	orr.w	r3, r3, lr
   1e79c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1e79e:	052a      	lsls	r2, r5, #20
   1e7a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e7a4:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e7a8:	4313      	orrs	r3, r2
   1e7aa:	f040 0020 	orr.w	r0, r0, #32
   1e7ae:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1e7b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1e7b6:	e7be      	b.n	1e736 <nrfx_gpiote_output_configure+0x56>
{
   1e7b8:	4802      	ldr	r0, [pc, #8]	; (1e7c4 <nrfx_gpiote_output_configure+0xe4>)
   1e7ba:	e7bd      	b.n	1e738 <nrfx_gpiote_output_configure+0x58>
   1e7bc:	20000708 	.word	0x20000708
   1e7c0:	0bad0000 	.word	0x0bad0000
   1e7c4:	0bad0004 	.word	0x0bad0004

0001e7c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1e7c8:	4b01      	ldr	r3, [pc, #4]	; (1e7d0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1e7ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1e7ce:	4770      	bx	lr
   1e7d0:	20000708 	.word	0x20000708

0001e7d4 <nrfx_gpiote_channel_get>:
{
   1e7d4:	b508      	push	{r3, lr}
   1e7d6:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1e7d8:	b959      	cbnz	r1, 1e7f2 <nrfx_gpiote_channel_get+0x1e>
   1e7da:	490c      	ldr	r1, [pc, #48]	; (1e80c <nrfx_gpiote_channel_get+0x38>)
   1e7dc:	480c      	ldr	r0, [pc, #48]	; (1e810 <nrfx_gpiote_channel_get+0x3c>)
   1e7de:	4a0d      	ldr	r2, [pc, #52]	; (1e814 <nrfx_gpiote_channel_get+0x40>)
   1e7e0:	f240 2335 	movw	r3, #565	; 0x235
   1e7e4:	f004 ff09 	bl	235fa <assert_print>
   1e7e8:	480a      	ldr	r0, [pc, #40]	; (1e814 <nrfx_gpiote_channel_get+0x40>)
   1e7ea:	f240 2135 	movw	r1, #565	; 0x235
   1e7ee:	f004 fefd 	bl	235ec <assert_post_action>
    if (pin_in_use_by_te(pin))
   1e7f2:	f7ff fe05 	bl	1e400 <pin_in_use_by_te>
   1e7f6:	b138      	cbz	r0, 1e808 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e7f8:	4b07      	ldr	r3, [pc, #28]	; (1e818 <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   1e7fa:	4808      	ldr	r0, [pc, #32]	; (1e81c <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e7fc:	3208      	adds	r2, #8
   1e7fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1e802:	0b5b      	lsrs	r3, r3, #13
   1e804:	700b      	strb	r3, [r1, #0]
}
   1e806:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e808:	4805      	ldr	r0, [pc, #20]	; (1e820 <nrfx_gpiote_channel_get+0x4c>)
   1e80a:	e7fc      	b.n	1e806 <nrfx_gpiote_channel_get+0x32>
   1e80c:	0002a099 	.word	0x0002a099
   1e810:	00026f1a 	.word	0x00026f1a
   1e814:	0002a05b 	.word	0x0002a05b
   1e818:	20000708 	.word	0x20000708
   1e81c:	0bad0000 	.word	0x0bad0000
   1e820:	0bad0004 	.word	0x0bad0004

0001e824 <nrfx_gpiote_init>:
{
   1e824:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e826:	4c0f      	ldr	r4, [pc, #60]	; (1e864 <nrfx_gpiote_init+0x40>)
   1e828:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   1e82c:	b9bd      	cbnz	r5, 1e85e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1e82e:	2240      	movs	r2, #64	; 0x40
   1e830:	4629      	mov	r1, r5
   1e832:	f104 0010 	add.w	r0, r4, #16
   1e836:	f005 faf8 	bl	23e2a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1e83a:	2006      	movs	r0, #6
   1e83c:	f7f5 fbd6 	bl	13fec <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e840:	4b09      	ldr	r3, [pc, #36]	; (1e868 <nrfx_gpiote_init+0x44>)
    return err_code;
   1e842:	480a      	ldr	r0, [pc, #40]	; (1e86c <nrfx_gpiote_init+0x48>)
   1e844:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1e848:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1e84c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e850:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e854:	2301      	movs	r3, #1
   1e856:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1e85a:	6563      	str	r3, [r4, #84]	; 0x54
}
   1e85c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1e85e:	4804      	ldr	r0, [pc, #16]	; (1e870 <nrfx_gpiote_init+0x4c>)
   1e860:	e7fc      	b.n	1e85c <nrfx_gpiote_init+0x38>
   1e862:	bf00      	nop
   1e864:	20000708 	.word	0x20000708
   1e868:	40006000 	.word	0x40006000
   1e86c:	0bad0000 	.word	0x0bad0000
   1e870:	0bad0005 	.word	0x0bad0005

0001e874 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1e874:	4b03      	ldr	r3, [pc, #12]	; (1e884 <nrfx_gpiote_is_init+0x10>)
   1e876:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1e87a:	3800      	subs	r0, #0
   1e87c:	bf18      	it	ne
   1e87e:	2001      	movne	r0, #1
   1e880:	4770      	bx	lr
   1e882:	bf00      	nop
   1e884:	20000708 	.word	0x20000708

0001e888 <nrfx_gpiote_channel_free>:
{
   1e888:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1e88a:	4801      	ldr	r0, [pc, #4]	; (1e890 <nrfx_gpiote_channel_free+0x8>)
   1e88c:	f7ff bd98 	b.w	1e3c0 <nrfx_flag32_free>
   1e890:	20000758 	.word	0x20000758

0001e894 <nrfx_gpiote_channel_alloc>:
{
   1e894:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1e896:	4801      	ldr	r0, [pc, #4]	; (1e89c <nrfx_gpiote_channel_alloc+0x8>)
   1e898:	f7ff bd72 	b.w	1e380 <nrfx_flag32_alloc>
   1e89c:	20000758 	.word	0x20000758

0001e8a0 <nrfx_gpiote_trigger_enable>:
{
   1e8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e8a2:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1e8a4:	f7ff fdb6 	bl	1e414 <pin_has_trigger>
   1e8a8:	b958      	cbnz	r0, 1e8c2 <nrfx_gpiote_trigger_enable+0x22>
   1e8aa:	492d      	ldr	r1, [pc, #180]	; (1e960 <nrfx_gpiote_trigger_enable+0xc0>)
   1e8ac:	4a2d      	ldr	r2, [pc, #180]	; (1e964 <nrfx_gpiote_trigger_enable+0xc4>)
   1e8ae:	482e      	ldr	r0, [pc, #184]	; (1e968 <nrfx_gpiote_trigger_enable+0xc8>)
   1e8b0:	f240 33df 	movw	r3, #991	; 0x3df
   1e8b4:	f004 fea1 	bl	235fa <assert_print>
   1e8b8:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1e8bc:	4829      	ldr	r0, [pc, #164]	; (1e964 <nrfx_gpiote_trigger_enable+0xc4>)
   1e8be:	f004 fe95 	bl	235ec <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e8c2:	4620      	mov	r0, r4
   1e8c4:	f7ff fd9c 	bl	1e400 <pin_in_use_by_te>
   1e8c8:	4a28      	ldr	r2, [pc, #160]	; (1e96c <nrfx_gpiote_trigger_enable+0xcc>)
   1e8ca:	f104 0508 	add.w	r5, r4, #8
   1e8ce:	b1f8      	cbz	r0, 1e910 <nrfx_gpiote_trigger_enable+0x70>
    return !pin_is_output(pin);
   1e8d0:	4620      	mov	r0, r4
   1e8d2:	f7ff fdab 	bl	1e42c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e8d6:	b9d8      	cbnz	r0, 1e910 <nrfx_gpiote_trigger_enable+0x70>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e8d8:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   1e8dc:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1e8de:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   1e8e0:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1e8e4:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   1e8e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e8ec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e8f0:	6020      	str	r0, [r4, #0]
   1e8f2:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e8f4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1e8f8:	f040 0001 	orr.w	r0, r0, #1
   1e8fc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1e900:	b121      	cbz	r1, 1e90c <nrfx_gpiote_trigger_enable+0x6c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1e902:	2301      	movs	r3, #1
   1e904:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1e906:	4a1a      	ldr	r2, [pc, #104]	; (1e970 <nrfx_gpiote_trigger_enable+0xd0>)
   1e908:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e90c:	b003      	add	sp, #12
   1e90e:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1e910:	b949      	cbnz	r1, 1e926 <nrfx_gpiote_trigger_enable+0x86>
   1e912:	4918      	ldr	r1, [pc, #96]	; (1e974 <nrfx_gpiote_trigger_enable+0xd4>)
   1e914:	4a13      	ldr	r2, [pc, #76]	; (1e964 <nrfx_gpiote_trigger_enable+0xc4>)
   1e916:	4814      	ldr	r0, [pc, #80]	; (1e968 <nrfx_gpiote_trigger_enable+0xc8>)
   1e918:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1e91c:	f004 fe6d 	bl	235fa <assert_print>
   1e920:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1e924:	e7ca      	b.n	1e8bc <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e926:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1e92a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1e92e:	2b04      	cmp	r3, #4
   1e930:	d012      	beq.n	1e958 <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1e932:	2b05      	cmp	r3, #5
   1e934:	d012      	beq.n	1e95c <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e936:	a801      	add	r0, sp, #4
   1e938:	9401      	str	r4, [sp, #4]
   1e93a:	f7ff fdf9 	bl	1e530 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e93e:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1e940:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e944:	40d9      	lsrs	r1, r3
   1e946:	f001 0101 	and.w	r1, r1, #1
   1e94a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e94c:	4620      	mov	r0, r4
}
   1e94e:	b003      	add	sp, #12
   1e950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e954:	f007 b8c9 	b.w	25aea <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1e958:	2103      	movs	r1, #3
   1e95a:	e7f7      	b.n	1e94c <nrfx_gpiote_trigger_enable+0xac>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1e95c:	2102      	movs	r1, #2
   1e95e:	e7f5      	b.n	1e94c <nrfx_gpiote_trigger_enable+0xac>
   1e960:	0002a0a3 	.word	0x0002a0a3
   1e964:	0002a05b 	.word	0x0002a05b
   1e968:	00026f1a 	.word	0x00026f1a
   1e96c:	20000708 	.word	0x20000708
   1e970:	40006000 	.word	0x40006000
   1e974:	0002a0b8 	.word	0x0002a0b8

0001e978 <nrfx_gpiote_trigger_disable>:
{
   1e978:	b508      	push	{r3, lr}
   1e97a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e97c:	f7ff fd40 	bl	1e400 <pin_in_use_by_te>
   1e980:	b1c8      	cbz	r0, 1e9b6 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1e982:	4610      	mov	r0, r2
   1e984:	f7ff fd52 	bl	1e42c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e988:	b9a8      	cbnz	r0, 1e9b6 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e98a:	3208      	adds	r2, #8
   1e98c:	4b0d      	ldr	r3, [pc, #52]	; (1e9c4 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1e98e:	490e      	ldr	r1, [pc, #56]	; (1e9c8 <nrfx_gpiote_trigger_disable+0x50>)
   1e990:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e994:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e996:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e998:	409a      	lsls	r2, r3
   1e99a:	009b      	lsls	r3, r3, #2
   1e99c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e9a0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1e9a4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e9a8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1e9ac:	f022 0203 	bic.w	r2, r2, #3
   1e9b0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1e9b4:	bd08      	pop	{r3, pc}
   1e9b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e9ba:	2100      	movs	r1, #0
   1e9bc:	4610      	mov	r0, r2
   1e9be:	f007 b894 	b.w	25aea <nrf_gpio_cfg_sense_set>
   1e9c2:	bf00      	nop
   1e9c4:	20000708 	.word	0x20000708
   1e9c8:	40006000 	.word	0x40006000

0001e9cc <nrfx_gpiote_pin_uninit>:
{
   1e9cc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1e9ce:	4b0e      	ldr	r3, [pc, #56]	; (1ea08 <nrfx_gpiote_pin_uninit+0x3c>)
   1e9d0:	f100 0208 	add.w	r2, r0, #8
{
   1e9d4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1e9d6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1e9da:	07db      	lsls	r3, r3, #31
   1e9dc:	d511      	bpl.n	1ea02 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1e9de:	f7ff ffcb 	bl	1e978 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1e9e2:	4620      	mov	r0, r4
   1e9e4:	f7ff fd88 	bl	1e4f8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e9e8:	a801      	add	r0, sp, #4
   1e9ea:	9401      	str	r4, [sp, #4]
   1e9ec:	f7ff fda0 	bl	1e530 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e9f0:	9b01      	ldr	r3, [sp, #4]
   1e9f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e9f6:	2202      	movs	r2, #2
   1e9f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1e9fc:	4803      	ldr	r0, [pc, #12]	; (1ea0c <nrfx_gpiote_pin_uninit+0x40>)
}
   1e9fe:	b002      	add	sp, #8
   1ea00:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ea02:	4803      	ldr	r0, [pc, #12]	; (1ea10 <nrfx_gpiote_pin_uninit+0x44>)
   1ea04:	e7fb      	b.n	1e9fe <nrfx_gpiote_pin_uninit+0x32>
   1ea06:	bf00      	nop
   1ea08:	20000708 	.word	0x20000708
   1ea0c:	0bad0000 	.word	0x0bad0000
   1ea10:	0bad0004 	.word	0x0bad0004

0001ea14 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1ea14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea18:	4b59      	ldr	r3, [pc, #356]	; (1eb80 <nrfx_gpiote_irq_handler+0x16c>)
    return p_reg->INTENSET & mask;
   1ea1a:	485a      	ldr	r0, [pc, #360]	; (1eb84 <nrfx_gpiote_irq_handler+0x170>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ea1c:	495a      	ldr	r1, [pc, #360]	; (1eb88 <nrfx_gpiote_irq_handler+0x174>)
    uint32_t status = 0;
   1ea1e:	2600      	movs	r6, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1ea20:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ea22:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea24:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1ea26:	b135      	cbz	r5, 1ea36 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   1ea28:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1ea2c:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ea2e:	bf1e      	ittt	ne
   1ea30:	601c      	strne	r4, [r3, #0]
   1ea32:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1ea34:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ea36:	3304      	adds	r3, #4
   1ea38:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1ea3a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ea3e:	d1f1      	bne.n	1ea24 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea40:	4f50      	ldr	r7, [pc, #320]	; (1eb84 <nrfx_gpiote_irq_handler+0x170>)
   1ea42:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1ea46:	b1bb      	cbz	r3, 1ea78 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   1ea48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ea4c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1ea50:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1ea52:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1ea56:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1ea5a:	9c00      	ldr	r4, [sp, #0]
   1ea5c:	b994      	cbnz	r4, 1ea84 <nrfx_gpiote_irq_handler+0x70>
        *p_masks = gpio_regs[i]->LATCH;
   1ea5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ea62:	f8c7 417c 	str.w	r4, [r7, #380]	; 0x17c
   1ea66:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   1ea6a:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1ea6e:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1ea70:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   1ea74:	2b00      	cmp	r3, #0
   1ea76:	d1ee      	bne.n	1ea56 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   1ea78:	2401      	movs	r4, #1
    while (mask)
   1ea7a:	2e00      	cmp	r6, #0
   1ea7c:	d168      	bne.n	1eb50 <nrfx_gpiote_irq_handler+0x13c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1ea7e:	b003      	add	sp, #12
   1ea80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1ea84:	fa94 f4a4 	rbit	r4, r4
   1ea88:	fab4 f484 	clz	r4, r4
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1ea8c:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ea8e:	4a3f      	ldr	r2, [pc, #252]	; (1eb8c <nrfx_gpiote_irq_handler+0x178>)
   1ea90:	9401      	str	r4, [sp, #4]
   1ea92:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1ea96:	f004 0107 	and.w	r1, r4, #7
   1ea9a:	f832 a013 	ldrh.w	sl, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1ea9e:	f81d 2000 	ldrb.w	r2, [sp, r0]
   1eaa2:	fa08 f101 	lsl.w	r1, r8, r1
   1eaa6:	ea22 0201 	bic.w	r2, r2, r1
   1eaaa:	f80d 2000 	strb.w	r2, [sp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eaae:	a801      	add	r0, sp, #4
   1eab0:	f7ff fd3e 	bl	1e530 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1eab4:	9a01      	ldr	r2, [sp, #4]
   1eab6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1eaba:	ea4f 099a 	mov.w	r9, sl, lsr #2
   1eabe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   1eac2:	f3ca 0b82 	ubfx	fp, sl, #2, #3
    if (is_level(trigger))
   1eac6:	f019 0f04 	tst.w	r9, #4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1eaca:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1eacc:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   1ead0:	d023      	beq.n	1eb1a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   1ead2:	4659      	mov	r1, fp
   1ead4:	4620      	mov	r0, r4
   1ead6:	f7ff fcb3 	bl	1e440 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eada:	a801      	add	r0, sp, #4
   1eadc:	9401      	str	r4, [sp, #4]
   1eade:	f7ff fd27 	bl	1e530 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1eae2:	9b01      	ldr	r3, [sp, #4]
   1eae4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1eae8:	b2ed      	uxtb	r5, r5
   1eaea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1eaee:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1eaf2:	429d      	cmp	r5, r3
   1eaf4:	d107      	bne.n	1eb06 <nrfx_gpiote_irq_handler+0xf2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1eaf6:	2100      	movs	r1, #0
   1eaf8:	4620      	mov	r0, r4
   1eafa:	f006 fff6 	bl	25aea <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1eafe:	4629      	mov	r1, r5
   1eb00:	4620      	mov	r0, r4
   1eb02:	f006 fff2 	bl	25aea <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eb06:	a801      	add	r0, sp, #4
   1eb08:	9401      	str	r4, [sp, #4]
   1eb0a:	f7ff fd11 	bl	1e530 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1eb0e:	9b01      	ldr	r3, [sp, #4]
   1eb10:	fa08 f303 	lsl.w	r3, r8, r3
   1eb14:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   1eb18:	e79f      	b.n	1ea5a <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1eb1a:	2d02      	cmp	r5, #2
   1eb1c:	d10c      	bne.n	1eb38 <nrfx_gpiote_irq_handler+0x124>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1eb1e:	2103      	movs	r1, #3
   1eb20:	4620      	mov	r0, r4
   1eb22:	f006 ffe2 	bl	25aea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1eb26:	f00b 0305 	and.w	r3, fp, #5
   1eb2a:	2b01      	cmp	r3, #1
   1eb2c:	d1eb      	bne.n	1eb06 <nrfx_gpiote_irq_handler+0xf2>
            call_handler(pin, trigger);
   1eb2e:	4651      	mov	r1, sl
   1eb30:	4620      	mov	r0, r4
   1eb32:	f7ff fc85 	bl	1e440 <call_handler>
   1eb36:	e7e6      	b.n	1eb06 <nrfx_gpiote_irq_handler+0xf2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1eb38:	2102      	movs	r1, #2
   1eb3a:	4620      	mov	r0, r4
   1eb3c:	f006 ffd5 	bl	25aea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1eb40:	f1bb 0f03 	cmp.w	fp, #3
   1eb44:	d0f3      	beq.n	1eb2e <nrfx_gpiote_irq_handler+0x11a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1eb46:	2d03      	cmp	r5, #3
   1eb48:	d1dd      	bne.n	1eb06 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1eb4a:	f1bb 0f02 	cmp.w	fp, #2
   1eb4e:	e7ed      	b.n	1eb2c <nrfx_gpiote_irq_handler+0x118>
        uint32_t ch = NRF_CTZ(mask);
   1eb50:	fa96 f3a6 	rbit	r3, r6
   1eb54:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1eb58:	fa04 f203 	lsl.w	r2, r4, r3
   1eb5c:	009b      	lsls	r3, r3, #2
   1eb5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eb62:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1eb66:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eb6a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1eb6e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1eb72:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1eb76:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1eb7a:	f7ff fc61 	bl	1e440 <call_handler>
   1eb7e:	e77c      	b.n	1ea7a <nrfx_gpiote_irq_handler+0x66>
   1eb80:	40006100 	.word	0x40006100
   1eb84:	40006000 	.word	0x40006000
   1eb88:	40006120 	.word	0x40006120
   1eb8c:	20000708 	.word	0x20000708

0001eb90 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1eb90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1eb92:	4801      	ldr	r0, [pc, #4]	; (1eb98 <nrfx_ppi_channel_alloc+0x8>)
   1eb94:	f7ff bbf4 	b.w	1e380 <nrfx_flag32_alloc>
   1eb98:	20000764 	.word	0x20000764

0001eb9c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1eb9c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1eb9e:	4c11      	ldr	r4, [pc, #68]	; (1ebe4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1eba0:	4a11      	ldr	r2, [pc, #68]	; (1ebe8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1eba2:	4912      	ldr	r1, [pc, #72]	; (1ebec <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1eba4:	2303      	movs	r3, #3
   1eba6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1eba8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ebaa:	4b11      	ldr	r3, [pc, #68]	; (1ebf0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1ebac:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ebae:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1ebb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1ebb4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1ebb6:	2300      	movs	r3, #0
   1ebb8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1ebba:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ebbc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1ebbe:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1ebc0:	4a0c      	ldr	r2, [pc, #48]	; (1ebf4 <_DoInit+0x58>)
   1ebc2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1ebc4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1ebc6:	2210      	movs	r2, #16
   1ebc8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1ebca:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1ebcc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ebce:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1ebd0:	f005 f8f6 	bl	23dc0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1ebd4:	4908      	ldr	r1, [pc, #32]	; (1ebf8 <_DoInit+0x5c>)
   1ebd6:	4620      	mov	r0, r4
   1ebd8:	f005 f8f2 	bl	23dc0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1ebdc:	2320      	movs	r3, #32
   1ebde:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1ebe0:	bd10      	pop	{r4, pc}
   1ebe2:	bf00      	nop
   1ebe4:	20002e2c 	.word	0x20002e2c
   1ebe8:	0002a0e3 	.word	0x0002a0e3
   1ebec:	0002a0ec 	.word	0x0002a0ec
   1ebf0:	20003108 	.word	0x20003108
   1ebf4:	200030f8 	.word	0x200030f8
   1ebf8:	0002a0f0 	.word	0x0002a0f0

0001ebfc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ebfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1ec00:	4f21      	ldr	r7, [pc, #132]	; (1ec88 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1ec02:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ec06:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1ec08:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ec0c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1ec0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1ec10:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ec12:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ec14:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ec16:	d831      	bhi.n	1ec7c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1ec18:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1ec1c:	ebaa 0905 	sub.w	r9, sl, r5
   1ec20:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1ec24:	4294      	cmp	r4, r2
   1ec26:	d811      	bhi.n	1ec4c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ec28:	2318      	movs	r3, #24
   1ec2a:	fb06 3303 	mla	r3, r6, r3, r3
   1ec2e:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1ec30:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ec32:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1ec34:	4641      	mov	r1, r8
   1ec36:	4428      	add	r0, r5
   1ec38:	f005 f8ec 	bl	23e14 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1ec3c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1ec3e:	2318      	movs	r3, #24
   1ec40:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1ec44:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1ec46:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1ec48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1ec4c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1ec4e:	429c      	cmp	r4, r3
   1ec50:	d818      	bhi.n	1ec84 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ec52:	fb00 bb0b 	mla	fp, r0, fp, fp
   1ec56:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1ec58:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ec5a:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ec5e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1ec60:	4428      	add	r0, r5
   1ec62:	f005 f8d7 	bl	23e14 <memcpy>
      if (NumBytes) {
   1ec66:	ebb4 040a 	subs.w	r4, r4, sl
   1ec6a:	d0e8      	beq.n	1ec3e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1ec6c:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ec70:	4622      	mov	r2, r4
   1ec72:	eb08 0109 	add.w	r1, r8, r9
   1ec76:	f005 f8cd 	bl	23e14 <memcpy>
      return 1;
   1ec7a:	e7e0      	b.n	1ec3e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1ec7c:	3b01      	subs	r3, #1
   1ec7e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1ec80:	42a3      	cmp	r3, r4
   1ec82:	d2d1      	bcs.n	1ec28 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1ec84:	2000      	movs	r0, #0
   1ec86:	e7df      	b.n	1ec48 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1ec88:	20002e2c 	.word	0x20002e2c

0001ec8c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1ec8c:	4b03      	ldr	r3, [pc, #12]	; (1ec9c <SEGGER_RTT_HasDataUp+0x10>)
   1ec8e:	2218      	movs	r2, #24
   1ec90:	fb02 3300 	mla	r3, r2, r0, r3
   1ec94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1ec96:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1ec98:	1a80      	subs	r0, r0, r2
   1ec9a:	4770      	bx	lr
   1ec9c:	20002e2c 	.word	0x20002e2c

0001eca0 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1eca0:	4803      	ldr	r0, [pc, #12]	; (1ecb0 <zephyr_rtt_mutex_lock+0x10>)
   1eca2:	f04f 32ff 	mov.w	r2, #4294967295
   1eca6:	f04f 33ff 	mov.w	r3, #4294967295
   1ecaa:	f000 bd19 	b.w	1f6e0 <z_impl_k_mutex_lock>
   1ecae:	bf00      	nop
   1ecb0:	20000928 	.word	0x20000928

0001ecb4 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1ecb4:	4801      	ldr	r0, [pc, #4]	; (1ecbc <zephyr_rtt_mutex_unlock+0x8>)
   1ecb6:	f000 bde3 	b.w	1f880 <z_impl_k_mutex_unlock>
   1ecba:	bf00      	nop
   1ecbc:	20000928 	.word	0x20000928

0001ecc0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ecc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ecc4:	b086      	sub	sp, #24
   1ecc6:	4604      	mov	r4, r0
   1ecc8:	af00      	add	r7, sp, #0
   1ecca:	460e      	mov	r6, r1
	__asm__ volatile(
   1eccc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ecd0:	f3ef 8811 	mrs	r8, BASEPRI
   1ecd4:	f383 8812 	msr	BASEPRI_MAX, r3
   1ecd8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ecdc:	f002 fde8 	bl	218b0 <z_impl_z_current_get>
   1ece0:	2c04      	cmp	r4, #4
   1ece2:	bf96      	itet	ls
   1ece4:	4b33      	ldrls	r3, [pc, #204]	; (1edb4 <z_fatal_error+0xf4>)
   1ece6:	4b34      	ldrhi	r3, [pc, #208]	; (1edb8 <z_fatal_error+0xf8>)
   1ece8:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ecec:	46e9      	mov	r9, sp
   1ecee:	b08a      	sub	sp, #40	; 0x28
   1ecf0:	4605      	mov	r5, r0
   1ecf2:	466a      	mov	r2, sp
   1ecf4:	4931      	ldr	r1, [pc, #196]	; (1edbc <z_fatal_error+0xfc>)
   1ecf6:	61d3      	str	r3, [r2, #28]
   1ecf8:	f240 3301 	movw	r3, #769	; 0x301
   1ecfc:	8493      	strh	r3, [r2, #36]	; 0x24
   1ecfe:	f04f 0a00 	mov.w	sl, #0
   1ed02:	4b2f      	ldr	r3, [pc, #188]	; (1edc0 <z_fatal_error+0x100>)
   1ed04:	f8c2 a020 	str.w	sl, [r2, #32]
   1ed08:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1ed0c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ed10:	482c      	ldr	r0, [pc, #176]	; (1edc4 <z_fatal_error+0x104>)
   1ed12:	4653      	mov	r3, sl
   1ed14:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1ed18:	f7f4 facc 	bl	132b4 <z_impl_z_log_msg_static_create>
   1ed1c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1ed1e:	b17e      	cbz	r6, 1ed40 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1ed20:	69f3      	ldr	r3, [r6, #28]
   1ed22:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1ed26:	b15b      	cbz	r3, 1ed40 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1ed28:	4b27      	ldr	r3, [pc, #156]	; (1edc8 <z_fatal_error+0x108>)
   1ed2a:	617b      	str	r3, [r7, #20]
   1ed2c:	2302      	movs	r3, #2
   1ed2e:	613b      	str	r3, [r7, #16]
   1ed30:	4824      	ldr	r0, [pc, #144]	; (1edc4 <z_fatal_error+0x104>)
   1ed32:	4653      	mov	r3, sl
   1ed34:	f107 0210 	add.w	r2, r7, #16
   1ed38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ed3c:	f7f4 faba 	bl	132b4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1ed40:	b12d      	cbz	r5, 1ed4e <z_fatal_error+0x8e>
   1ed42:	4628      	mov	r0, r5
   1ed44:	f006 ff1e 	bl	25b84 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1ed48:	b108      	cbz	r0, 1ed4e <z_fatal_error+0x8e>
   1ed4a:	7803      	ldrb	r3, [r0, #0]
   1ed4c:	b903      	cbnz	r3, 1ed50 <z_fatal_error+0x90>
		thread_name = "unknown";
   1ed4e:	481f      	ldr	r0, [pc, #124]	; (1edcc <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1ed50:	46e9      	mov	r9, sp
   1ed52:	b08a      	sub	sp, #40	; 0x28
   1ed54:	466a      	mov	r2, sp
   1ed56:	4b1e      	ldr	r3, [pc, #120]	; (1edd0 <z_fatal_error+0x110>)
   1ed58:	61d0      	str	r0, [r2, #28]
   1ed5a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1ed5e:	f240 3301 	movw	r3, #769	; 0x301
   1ed62:	8413      	strh	r3, [r2, #32]
   1ed64:	4b1b      	ldr	r3, [pc, #108]	; (1edd4 <z_fatal_error+0x114>)
   1ed66:	f842 3f10 	str.w	r3, [r2, #16]!
   1ed6a:	4816      	ldr	r0, [pc, #88]	; (1edc4 <z_fatal_error+0x104>)
   1ed6c:	2300      	movs	r3, #0
   1ed6e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ed72:	f7f4 fa9f 	bl	132b4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1ed76:	4631      	mov	r1, r6
   1ed78:	46cd      	mov	sp, r9
   1ed7a:	4620      	mov	r0, r4
   1ed7c:	f7fe f814 	bl	1cda8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1ed80:	2c04      	cmp	r4, #4
   1ed82:	d10c      	bne.n	1ed9e <z_fatal_error+0xde>
   1ed84:	4914      	ldr	r1, [pc, #80]	; (1edd8 <z_fatal_error+0x118>)
   1ed86:	4a15      	ldr	r2, [pc, #84]	; (1eddc <z_fatal_error+0x11c>)
   1ed88:	4815      	ldr	r0, [pc, #84]	; (1ede0 <z_fatal_error+0x120>)
   1ed8a:	2393      	movs	r3, #147	; 0x93
   1ed8c:	f004 fc35 	bl	235fa <assert_print>
   1ed90:	4814      	ldr	r0, [pc, #80]	; (1ede4 <z_fatal_error+0x124>)
   1ed92:	f004 fc32 	bl	235fa <assert_print>
   1ed96:	4811      	ldr	r0, [pc, #68]	; (1eddc <z_fatal_error+0x11c>)
   1ed98:	2193      	movs	r1, #147	; 0x93
   1ed9a:	f004 fc27 	bl	235ec <assert_post_action>
	__asm__ volatile(
   1ed9e:	f388 8811 	msr	BASEPRI, r8
   1eda2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1eda6:	4628      	mov	r0, r5
   1eda8:	f7f5 fe4c 	bl	14a44 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1edac:	3718      	adds	r7, #24
   1edae:	46bd      	mov	sp, r7
   1edb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1edb4:	000269e4 	.word	0x000269e4
   1edb8:	0002a0f7 	.word	0x0002a0f7
   1edbc:	0002a105 	.word	0x0002a105
   1edc0:	01000005 	.word	0x01000005
   1edc4:	00026334 	.word	0x00026334
   1edc8:	0002a12d 	.word	0x0002a12d
   1edcc:	00028071 	.word	0x00028071
   1edd0:	0002a14e 	.word	0x0002a14e
   1edd4:	01000004 	.word	0x01000004
   1edd8:	0002a188 	.word	0x0002a188
   1eddc:	0002a166 	.word	0x0002a166
   1ede0:	00026f1a 	.word	0x00026f1a
   1ede4:	0002a1a5 	.word	0x0002a1a5

0001ede8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ede8:	4b10      	ldr	r3, [pc, #64]	; (1ee2c <z_sys_init_run_level+0x44>)
{
   1edea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1edec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1edf0:	3001      	adds	r0, #1
   1edf2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1edf6:	42a6      	cmp	r6, r4
   1edf8:	d800      	bhi.n	1edfc <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1edfa:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   1edfc:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1ee00:	b18d      	cbz	r5, 1ee26 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1ee02:	4628      	mov	r0, r5
   1ee04:	4798      	blx	r3
			if (rc != 0) {
   1ee06:	b138      	cbz	r0, 1ee18 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1ee08:	2800      	cmp	r0, #0
   1ee0a:	bfb8      	it	lt
   1ee0c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1ee0e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1ee10:	28ff      	cmp	r0, #255	; 0xff
   1ee12:	bfa8      	it	ge
   1ee14:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1ee16:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1ee18:	68ea      	ldr	r2, [r5, #12]
   1ee1a:	7853      	ldrb	r3, [r2, #1]
   1ee1c:	f043 0301 	orr.w	r3, r3, #1
   1ee20:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ee22:	3408      	adds	r4, #8
   1ee24:	e7e7      	b.n	1edf6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1ee26:	4798      	blx	r3
   1ee28:	e7fb      	b.n	1ee22 <z_sys_init_run_level+0x3a>
   1ee2a:	bf00      	nop
   1ee2c:	000269f8 	.word	0x000269f8

0001ee30 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1ee30:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1ee32:	4b0a      	ldr	r3, [pc, #40]	; (1ee5c <bg_thread_main+0x2c>)
   1ee34:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1ee36:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1ee38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1ee3a:	f7ff ffd5 	bl	1ede8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1ee3e:	f003 fddd 	bl	229fc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1ee42:	2004      	movs	r0, #4
   1ee44:	f7ff ffd0 	bl	1ede8 <z_sys_init_run_level>

	z_init_static_threads();
   1ee48:	f000 fb6e 	bl	1f528 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1ee4c:	f7f1 ff42 	bl	10cd4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1ee50:	4a03      	ldr	r2, [pc, #12]	; (1ee60 <bg_thread_main+0x30>)
   1ee52:	7b13      	ldrb	r3, [r2, #12]
   1ee54:	f023 0301 	bic.w	r3, r3, #1
   1ee58:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1ee5a:	bd08      	pop	{r3, pc}
   1ee5c:	20003508 	.word	0x20003508
   1ee60:	200029e8 	.word	0x200029e8

0001ee64 <z_bss_zero>:
{
   1ee64:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1ee66:	4803      	ldr	r0, [pc, #12]	; (1ee74 <z_bss_zero+0x10>)
   1ee68:	4a03      	ldr	r2, [pc, #12]	; (1ee78 <z_bss_zero+0x14>)
   1ee6a:	2100      	movs	r1, #0
   1ee6c:	1a12      	subs	r2, r2, r0
   1ee6e:	f006 fe5e 	bl	25b2e <z_early_memset>
}
   1ee72:	bd08      	pop	{r3, pc}
   1ee74:	20000b18 	.word	0x20000b18
   1ee78:	2000350c 	.word	0x2000350c

0001ee7c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1ee7c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1ee7e:	2300      	movs	r3, #0
{
   1ee80:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1ee82:	2201      	movs	r2, #1
   1ee84:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1ee88:	4e13      	ldr	r6, [pc, #76]	; (1eed8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ee8a:	4d14      	ldr	r5, [pc, #80]	; (1eedc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1ee8c:	9301      	str	r3, [sp, #4]
   1ee8e:	220f      	movs	r2, #15
   1ee90:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ee94:	4912      	ldr	r1, [pc, #72]	; (1eee0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1ee96:	2314      	movs	r3, #20
   1ee98:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1ee9c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1eea0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1eea2:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1eea6:	fb00 1104 	mla	r1, r0, r4, r1
   1eeaa:	4b0e      	ldr	r3, [pc, #56]	; (1eee4 <z_init_cpu+0x68>)
   1eeac:	9500      	str	r5, [sp, #0]
   1eeae:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1eeb2:	4630      	mov	r0, r6
   1eeb4:	f000 fa9a 	bl	1f3ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1eeb8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1eeba:	4a0b      	ldr	r2, [pc, #44]	; (1eee8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1eebc:	60ee      	str	r6, [r5, #12]
   1eebe:	f023 0304 	bic.w	r3, r3, #4
   1eec2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1eec4:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1eec8:	fb04 3303 	mla	r3, r4, r3, r3
   1eecc:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1eece:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   1eed0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1eed2:	b006      	add	sp, #24
   1eed4:	bd70      	pop	{r4, r5, r6, pc}
   1eed6:	bf00      	nop
   1eed8:	20002968 	.word	0x20002968
   1eedc:	20002ed4 	.word	0x20002ed4
   1eee0:	20006640 	.word	0x20006640
   1eee4:	0001f67d 	.word	0x0001f67d
   1eee8:	20005e00 	.word	0x20005e00

0001eeec <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1eeec:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1eeee:	2000      	movs	r0, #0
{
   1eef0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1eef2:	f7ff ff79 	bl	1ede8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1eef6:	4b2f      	ldr	r3, [pc, #188]	; (1efb4 <z_cstart+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1eef8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1eefc:	4c2e      	ldr	r4, [pc, #184]	; (1efb8 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1eefe:	4e2f      	ldr	r6, [pc, #188]	; (1efbc <z_cstart+0xd0>)
   1ef00:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ef02:	4f2f      	ldr	r7, [pc, #188]	; (1efc0 <z_cstart+0xd4>)
   1ef04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ef08:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ef0a:	23e0      	movs	r3, #224	; 0xe0
   1ef0c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1ef10:	2500      	movs	r5, #0
   1ef12:	2320      	movs	r3, #32
   1ef14:	77e3      	strb	r3, [r4, #31]
   1ef16:	7625      	strb	r5, [r4, #24]
   1ef18:	7665      	strb	r5, [r4, #25]
   1ef1a:	76a5      	strb	r5, [r4, #26]
   1ef1c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ef20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ef22:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ef26:	6263      	str	r3, [r4, #36]	; 0x24
   1ef28:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ef2c:	f7f5 fcfe 	bl	1492c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ef30:	f7f4 ffd6 	bl	13ee0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ef34:	f04f 33ff 	mov.w	r3, #4294967295
   1ef38:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ef3a:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   1ef3c:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1ef3e:	f7f5 fe87 	bl	14c50 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1ef42:	f7f5 fd95 	bl	14a70 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1ef46:	f7f3 ffa3 	bl	12e90 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ef4a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1ef4e:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ef50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1ef54:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1ef58:	f003 fd32 	bl	229c0 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1ef5c:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1ef5e:	f006 fdda 	bl	25b16 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1ef62:	2001      	movs	r0, #1
   1ef64:	f7ff ff40 	bl	1ede8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1ef68:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1ef6a:	4c16      	ldr	r4, [pc, #88]	; (1efc4 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1ef6c:	f7ff ff3c 	bl	1ede8 <z_sys_init_run_level>
	z_sched_init();
   1ef70:	f002 fb28 	bl	215c4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ef74:	4b14      	ldr	r3, [pc, #80]	; (1efc8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1ef76:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1ef78:	9305      	str	r3, [sp, #20]
   1ef7a:	2301      	movs	r3, #1
   1ef7c:	4913      	ldr	r1, [pc, #76]	; (1efcc <z_cstart+0xe0>)
   1ef7e:	9500      	str	r5, [sp, #0]
   1ef80:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1ef84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1ef88:	463b      	mov	r3, r7
   1ef8a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1ef8e:	4620      	mov	r0, r4
   1ef90:	f000 fa2c 	bl	1f3ec <z_setup_new_thread>
   1ef94:	7b62      	ldrb	r2, [r4, #13]
   1ef96:	4606      	mov	r6, r0
   1ef98:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1ef9c:	4620      	mov	r0, r4
   1ef9e:	7362      	strb	r2, [r4, #13]
   1efa0:	f001 fcf6 	bl	20990 <z_ready_thread>
	z_init_cpu(0);
   1efa4:	4628      	mov	r0, r5
   1efa6:	f7ff ff69 	bl	1ee7c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1efaa:	463a      	mov	r2, r7
   1efac:	4631      	mov	r1, r6
   1efae:	4620      	mov	r0, r4
   1efb0:	f7f5 f936 	bl	14220 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1efb4:	20006640 	.word	0x20006640
   1efb8:	e000ed00 	.word	0xe000ed00
   1efbc:	20002ed4 	.word	0x20002ed4
   1efc0:	0001ee31 	.word	0x0001ee31
   1efc4:	200029e8 	.word	0x200029e8
   1efc8:	0002a224 	.word	0x0002a224
   1efcc:	200067c0 	.word	0x200067c0

0001efd0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1efd0:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1efd2:	4c0d      	ldr	r4, [pc, #52]	; (1f008 <statics_init+0x38>)
   1efd4:	4d0d      	ldr	r5, [pc, #52]	; (1f00c <statics_init+0x3c>)
   1efd6:	42ac      	cmp	r4, r5
   1efd8:	d913      	bls.n	1f002 <statics_init+0x32>
   1efda:	490d      	ldr	r1, [pc, #52]	; (1f010 <statics_init+0x40>)
   1efdc:	4a0d      	ldr	r2, [pc, #52]	; (1f014 <statics_init+0x44>)
   1efde:	480e      	ldr	r0, [pc, #56]	; (1f018 <statics_init+0x48>)
   1efe0:	2317      	movs	r3, #23
   1efe2:	f004 fb0a 	bl	235fa <assert_print>
   1efe6:	480d      	ldr	r0, [pc, #52]	; (1f01c <statics_init+0x4c>)
   1efe8:	f004 fb07 	bl	235fa <assert_print>
   1efec:	4809      	ldr	r0, [pc, #36]	; (1f014 <statics_init+0x44>)
   1efee:	2117      	movs	r1, #23
   1eff0:	f004 fafc 	bl	235ec <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1eff4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1eff8:	4620      	mov	r0, r4
   1effa:	f006 fd9c 	bl	25b36 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1effe:	3418      	adds	r4, #24
   1f000:	e7e9      	b.n	1efd6 <statics_init+0x6>
   1f002:	d3f7      	bcc.n	1eff4 <statics_init+0x24>
		}
	}
	return 0;
}
   1f004:	2000      	movs	r0, #0
   1f006:	bd38      	pop	{r3, r4, r5, pc}
   1f008:	200008fc 	.word	0x200008fc
   1f00c:	20000914 	.word	0x20000914
   1f010:	0002a24e 	.word	0x0002a24e
   1f014:	0002a22c 	.word	0x0002a22c
   1f018:	00026f1a 	.word	0x00026f1a
   1f01c:	00027466 	.word	0x00027466

0001f020 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f024:	b085      	sub	sp, #20
   1f026:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1f02a:	4680      	mov	r8, r0
   1f02c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f02e:	4648      	mov	r0, r9
   1f030:	4659      	mov	r1, fp
{
   1f032:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f034:	f006 fe9f 	bl	25d76 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1f038:	f1bb 3fff 	cmp.w	fp, #4294967295
   1f03c:	bf08      	it	eq
   1f03e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1f042:	4606      	mov	r6, r0
   1f044:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1f046:	bf04      	itt	eq
   1f048:	f04f 36ff 	moveq.w	r6, #4294967295
   1f04c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f050:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   1f054:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f058:	f3ef 8511 	mrs	r5, BASEPRI
   1f05c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f060:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f064:	4620      	mov	r0, r4
   1f066:	f000 fae3 	bl	1f630 <z_spin_lock_valid>
   1f06a:	b960      	cbnz	r0, 1f086 <k_heap_aligned_alloc+0x66>
   1f06c:	4a33      	ldr	r2, [pc, #204]	; (1f13c <k_heap_aligned_alloc+0x11c>)
   1f06e:	4934      	ldr	r1, [pc, #208]	; (1f140 <k_heap_aligned_alloc+0x120>)
   1f070:	4834      	ldr	r0, [pc, #208]	; (1f144 <k_heap_aligned_alloc+0x124>)
   1f072:	2394      	movs	r3, #148	; 0x94
   1f074:	f004 fac1 	bl	235fa <assert_print>
   1f078:	4621      	mov	r1, r4
   1f07a:	4833      	ldr	r0, [pc, #204]	; (1f148 <k_heap_aligned_alloc+0x128>)
   1f07c:	f004 fabd 	bl	235fa <assert_print>
   1f080:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f082:	482e      	ldr	r0, [pc, #184]	; (1f13c <k_heap_aligned_alloc+0x11c>)
   1f084:	e031      	b.n	1f0ea <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1f086:	4620      	mov	r0, r4
   1f088:	f000 faf0 	bl	1f66c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f08c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f090:	b113      	cbz	r3, 1f098 <k_heap_aligned_alloc+0x78>
   1f092:	ea5b 0909 	orrs.w	r9, fp, r9
   1f096:	d11d      	bne.n	1f0d4 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f098:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1f09c:	9903      	ldr	r1, [sp, #12]
   1f09e:	4652      	mov	r2, sl
   1f0a0:	4640      	mov	r0, r8
   1f0a2:	f7f2 fbc7 	bl	11834 <sys_heap_aligned_alloc>
   1f0a6:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1f0a8:	f002 ffa0 	bl	21fec <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1f0ac:	f1b9 0f00 	cmp.w	r9, #0
   1f0b0:	d01d      	beq.n	1f0ee <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f0b2:	4620      	mov	r0, r4
   1f0b4:	f000 faca 	bl	1f64c <z_spin_unlock_valid>
   1f0b8:	2800      	cmp	r0, #0
   1f0ba:	d137      	bne.n	1f12c <k_heap_aligned_alloc+0x10c>
   1f0bc:	4a1f      	ldr	r2, [pc, #124]	; (1f13c <k_heap_aligned_alloc+0x11c>)
   1f0be:	4923      	ldr	r1, [pc, #140]	; (1f14c <k_heap_aligned_alloc+0x12c>)
   1f0c0:	4820      	ldr	r0, [pc, #128]	; (1f144 <k_heap_aligned_alloc+0x124>)
   1f0c2:	23c2      	movs	r3, #194	; 0xc2
   1f0c4:	f004 fa99 	bl	235fa <assert_print>
   1f0c8:	4621      	mov	r1, r4
   1f0ca:	4821      	ldr	r0, [pc, #132]	; (1f150 <k_heap_aligned_alloc+0x130>)
   1f0cc:	f004 fa95 	bl	235fa <assert_print>
   1f0d0:	21c2      	movs	r1, #194	; 0xc2
   1f0d2:	e7d6      	b.n	1f082 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1f0d4:	491f      	ldr	r1, [pc, #124]	; (1f154 <k_heap_aligned_alloc+0x134>)
   1f0d6:	4a20      	ldr	r2, [pc, #128]	; (1f158 <k_heap_aligned_alloc+0x138>)
   1f0d8:	481a      	ldr	r0, [pc, #104]	; (1f144 <k_heap_aligned_alloc+0x124>)
   1f0da:	234b      	movs	r3, #75	; 0x4b
   1f0dc:	f004 fa8d 	bl	235fa <assert_print>
   1f0e0:	481e      	ldr	r0, [pc, #120]	; (1f15c <k_heap_aligned_alloc+0x13c>)
   1f0e2:	f004 fa8a 	bl	235fa <assert_print>
   1f0e6:	481c      	ldr	r0, [pc, #112]	; (1f158 <k_heap_aligned_alloc+0x138>)
   1f0e8:	214b      	movs	r1, #75	; 0x4b
   1f0ea:	f004 fa7f 	bl	235ec <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1f0ee:	1a30      	subs	r0, r6, r0
   1f0f0:	eb67 0101 	sbc.w	r1, r7, r1
   1f0f4:	2801      	cmp	r0, #1
   1f0f6:	f171 0300 	sbcs.w	r3, r1, #0
   1f0fa:	dbda      	blt.n	1f0b2 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1f0fc:	e9cd 0100 	strd	r0, r1, [sp]
   1f100:	465a      	mov	r2, fp
   1f102:	4629      	mov	r1, r5
   1f104:	4620      	mov	r0, r4
   1f106:	f001 ff8d 	bl	21024 <z_pend_curr>
   1f10a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f10e:	f3ef 8511 	mrs	r5, BASEPRI
   1f112:	f383 8812 	msr	BASEPRI_MAX, r3
   1f116:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f11a:	4620      	mov	r0, r4
   1f11c:	f000 fa88 	bl	1f630 <z_spin_lock_valid>
   1f120:	2800      	cmp	r0, #0
   1f122:	d0a3      	beq.n	1f06c <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1f124:	4620      	mov	r0, r4
   1f126:	f000 faa1 	bl	1f66c <z_spin_lock_set_owner>
	return k;
   1f12a:	e7b7      	b.n	1f09c <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   1f12c:	f385 8811 	msr	BASEPRI, r5
   1f130:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1f134:	4648      	mov	r0, r9
   1f136:	b005      	add	sp, #20
   1f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f13c:	0002730e 	.word	0x0002730e
   1f140:	00027367 	.word	0x00027367
   1f144:	00026f1a 	.word	0x00026f1a
   1f148:	0002737c 	.word	0x0002737c
   1f14c:	0002733b 	.word	0x0002733b
   1f150:	00027352 	.word	0x00027352
   1f154:	0002a264 	.word	0x0002a264
   1f158:	0002a22c 	.word	0x0002a22c
   1f15c:	0002948c 	.word	0x0002948c

0001f160 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f162:	4605      	mov	r5, r0
   1f164:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1f166:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   1f16a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f16e:	f3ef 8711 	mrs	r7, BASEPRI
   1f172:	f383 8812 	msr	BASEPRI_MAX, r3
   1f176:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f17a:	4620      	mov	r0, r4
   1f17c:	f000 fa58 	bl	1f630 <z_spin_lock_valid>
   1f180:	b968      	cbnz	r0, 1f19e <k_heap_free+0x3e>
   1f182:	4a1a      	ldr	r2, [pc, #104]	; (1f1ec <k_heap_free+0x8c>)
   1f184:	491a      	ldr	r1, [pc, #104]	; (1f1f0 <k_heap_free+0x90>)
   1f186:	481b      	ldr	r0, [pc, #108]	; (1f1f4 <k_heap_free+0x94>)
   1f188:	2394      	movs	r3, #148	; 0x94
   1f18a:	f004 fa36 	bl	235fa <assert_print>
   1f18e:	4621      	mov	r1, r4
   1f190:	4819      	ldr	r0, [pc, #100]	; (1f1f8 <k_heap_free+0x98>)
   1f192:	f004 fa32 	bl	235fa <assert_print>
   1f196:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f198:	4814      	ldr	r0, [pc, #80]	; (1f1ec <k_heap_free+0x8c>)
   1f19a:	f004 fa27 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1f19e:	4620      	mov	r0, r4
   1f1a0:	f000 fa64 	bl	1f66c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1f1a4:	4628      	mov	r0, r5
   1f1a6:	4631      	mov	r1, r6
   1f1a8:	f7f2 fafe 	bl	117a8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1f1ac:	f105 000c 	add.w	r0, r5, #12
   1f1b0:	f006 fdc7 	bl	25d42 <z_unpend_all>
   1f1b4:	b128      	cbz	r0, 1f1c2 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   1f1b6:	4639      	mov	r1, r7
   1f1b8:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1f1ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1f1be:	f001 bc75 	b.w	20aac <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f1c2:	4620      	mov	r0, r4
   1f1c4:	f000 fa42 	bl	1f64c <z_spin_unlock_valid>
   1f1c8:	b958      	cbnz	r0, 1f1e2 <k_heap_free+0x82>
   1f1ca:	4a08      	ldr	r2, [pc, #32]	; (1f1ec <k_heap_free+0x8c>)
   1f1cc:	490b      	ldr	r1, [pc, #44]	; (1f1fc <k_heap_free+0x9c>)
   1f1ce:	4809      	ldr	r0, [pc, #36]	; (1f1f4 <k_heap_free+0x94>)
   1f1d0:	23c2      	movs	r3, #194	; 0xc2
   1f1d2:	f004 fa12 	bl	235fa <assert_print>
   1f1d6:	4621      	mov	r1, r4
   1f1d8:	4809      	ldr	r0, [pc, #36]	; (1f200 <k_heap_free+0xa0>)
   1f1da:	f004 fa0e 	bl	235fa <assert_print>
   1f1de:	21c2      	movs	r1, #194	; 0xc2
   1f1e0:	e7da      	b.n	1f198 <k_heap_free+0x38>
	__asm__ volatile(
   1f1e2:	f387 8811 	msr	BASEPRI, r7
   1f1e6:	f3bf 8f6f 	isb	sy
}
   1f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f1ec:	0002730e 	.word	0x0002730e
   1f1f0:	00027367 	.word	0x00027367
   1f1f4:	00026f1a 	.word	0x00026f1a
   1f1f8:	0002737c 	.word	0x0002737c
   1f1fc:	0002733b 	.word	0x0002733b
   1f200:	00027352 	.word	0x00027352

0001f204 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   1f204:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f206:	4c0d      	ldr	r4, [pc, #52]	; (1f23c <init_mem_slab_module+0x38>)
   1f208:	4d0d      	ldr	r5, [pc, #52]	; (1f240 <init_mem_slab_module+0x3c>)
	int rc = 0;
   1f20a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f20c:	42ac      	cmp	r4, r5
   1f20e:	d913      	bls.n	1f238 <init_mem_slab_module+0x34>
   1f210:	490c      	ldr	r1, [pc, #48]	; (1f244 <init_mem_slab_module+0x40>)
   1f212:	4a0d      	ldr	r2, [pc, #52]	; (1f248 <init_mem_slab_module+0x44>)
   1f214:	480d      	ldr	r0, [pc, #52]	; (1f24c <init_mem_slab_module+0x48>)
   1f216:	233c      	movs	r3, #60	; 0x3c
   1f218:	f004 f9ef 	bl	235fa <assert_print>
   1f21c:	480c      	ldr	r0, [pc, #48]	; (1f250 <init_mem_slab_module+0x4c>)
   1f21e:	f004 f9ec 	bl	235fa <assert_print>
   1f222:	4809      	ldr	r0, [pc, #36]	; (1f248 <init_mem_slab_module+0x44>)
   1f224:	213c      	movs	r1, #60	; 0x3c
   1f226:	f004 f9e1 	bl	235ec <assert_post_action>
		rc = create_free_list(slab);
   1f22a:	4620      	mov	r0, r4
   1f22c:	f006 fc8b 	bl	25b46 <create_free_list>
		if (rc < 0) {
   1f230:	2800      	cmp	r0, #0
   1f232:	db02      	blt.n	1f23a <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f234:	3420      	adds	r4, #32
   1f236:	e7e9      	b.n	1f20c <init_mem_slab_module+0x8>
   1f238:	d3f7      	bcc.n	1f22a <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f23a:	bd38      	pop	{r3, r4, r5, pc}
   1f23c:	2000089c 	.word	0x2000089c
   1f240:	200008fc 	.word	0x200008fc
   1f244:	0002a2cf 	.word	0x0002a2cf
   1f248:	0002a2aa 	.word	0x0002a2aa
   1f24c:	00026f1a 	.word	0x00026f1a
   1f250:	00027466 	.word	0x00027466

0001f254 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f258:	4604      	mov	r4, r0
   1f25a:	460e      	mov	r6, r1
   1f25c:	4690      	mov	r8, r2
   1f25e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f260:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f264:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f268:	f3ef 8911 	mrs	r9, BASEPRI
   1f26c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f270:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f274:	4628      	mov	r0, r5
   1f276:	f000 f9db 	bl	1f630 <z_spin_lock_valid>
   1f27a:	b968      	cbnz	r0, 1f298 <k_mem_slab_alloc+0x44>
   1f27c:	4a23      	ldr	r2, [pc, #140]	; (1f30c <k_mem_slab_alloc+0xb8>)
   1f27e:	4924      	ldr	r1, [pc, #144]	; (1f310 <k_mem_slab_alloc+0xbc>)
   1f280:	4824      	ldr	r0, [pc, #144]	; (1f314 <k_mem_slab_alloc+0xc0>)
   1f282:	2394      	movs	r3, #148	; 0x94
   1f284:	f004 f9b9 	bl	235fa <assert_print>
   1f288:	4629      	mov	r1, r5
   1f28a:	4823      	ldr	r0, [pc, #140]	; (1f318 <k_mem_slab_alloc+0xc4>)
   1f28c:	f004 f9b5 	bl	235fa <assert_print>
   1f290:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f292:	481e      	ldr	r0, [pc, #120]	; (1f30c <k_mem_slab_alloc+0xb8>)
   1f294:	f004 f9aa 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1f298:	4628      	mov	r0, r5
   1f29a:	f000 f9e7 	bl	1f66c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f29e:	69a3      	ldr	r3, [r4, #24]
   1f2a0:	b1b3      	cbz	r3, 1f2d0 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   1f2a2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f2a4:	681b      	ldr	r3, [r3, #0]
   1f2a6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1f2a8:	69e3      	ldr	r3, [r4, #28]
   1f2aa:	3301      	adds	r3, #1
   1f2ac:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f2ae:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f2b0:	4628      	mov	r0, r5
   1f2b2:	f000 f9cb 	bl	1f64c <z_spin_unlock_valid>
   1f2b6:	bb18      	cbnz	r0, 1f300 <k_mem_slab_alloc+0xac>
   1f2b8:	4a14      	ldr	r2, [pc, #80]	; (1f30c <k_mem_slab_alloc+0xb8>)
   1f2ba:	4918      	ldr	r1, [pc, #96]	; (1f31c <k_mem_slab_alloc+0xc8>)
   1f2bc:	4815      	ldr	r0, [pc, #84]	; (1f314 <k_mem_slab_alloc+0xc0>)
   1f2be:	23c2      	movs	r3, #194	; 0xc2
   1f2c0:	f004 f99b 	bl	235fa <assert_print>
   1f2c4:	4629      	mov	r1, r5
   1f2c6:	4816      	ldr	r0, [pc, #88]	; (1f320 <k_mem_slab_alloc+0xcc>)
   1f2c8:	f004 f997 	bl	235fa <assert_print>
   1f2cc:	21c2      	movs	r1, #194	; 0xc2
   1f2ce:	e7e0      	b.n	1f292 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f2d0:	ea58 0207 	orrs.w	r2, r8, r7
   1f2d4:	d103      	bne.n	1f2de <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   1f2d6:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1f2d8:	f06f 040b 	mvn.w	r4, #11
   1f2dc:	e7e8      	b.n	1f2b0 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f2de:	4622      	mov	r2, r4
   1f2e0:	e9cd 8700 	strd	r8, r7, [sp]
   1f2e4:	4649      	mov	r1, r9
   1f2e6:	4628      	mov	r0, r5
   1f2e8:	f001 fe9c 	bl	21024 <z_pend_curr>
		if (result == 0) {
   1f2ec:	4604      	mov	r4, r0
   1f2ee:	b918      	cbnz	r0, 1f2f8 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1f2f0:	4b0c      	ldr	r3, [pc, #48]	; (1f324 <k_mem_slab_alloc+0xd0>)
   1f2f2:	689b      	ldr	r3, [r3, #8]
   1f2f4:	695b      	ldr	r3, [r3, #20]
   1f2f6:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1f2f8:	4620      	mov	r0, r4
   1f2fa:	b003      	add	sp, #12
   1f2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1f300:	f389 8811 	msr	BASEPRI, r9
   1f304:	f3bf 8f6f 	isb	sy
	return result;
   1f308:	e7f6      	b.n	1f2f8 <k_mem_slab_alloc+0xa4>
   1f30a:	bf00      	nop
   1f30c:	0002730e 	.word	0x0002730e
   1f310:	00027367 	.word	0x00027367
   1f314:	00026f1a 	.word	0x00026f1a
   1f318:	0002737c 	.word	0x0002737c
   1f31c:	0002733b 	.word	0x0002733b
   1f320:	00027352 	.word	0x00027352
   1f324:	20002ed4 	.word	0x20002ed4

0001f328 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f32c:	4604      	mov	r4, r0
   1f32e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1f330:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f334:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f338:	f3ef 8711 	mrs	r7, BASEPRI
   1f33c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f340:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f344:	4628      	mov	r0, r5
   1f346:	f000 f973 	bl	1f630 <z_spin_lock_valid>
   1f34a:	b968      	cbnz	r0, 1f368 <k_mem_slab_free+0x40>
   1f34c:	4a21      	ldr	r2, [pc, #132]	; (1f3d4 <k_mem_slab_free+0xac>)
   1f34e:	4922      	ldr	r1, [pc, #136]	; (1f3d8 <k_mem_slab_free+0xb0>)
   1f350:	4822      	ldr	r0, [pc, #136]	; (1f3dc <k_mem_slab_free+0xb4>)
   1f352:	2394      	movs	r3, #148	; 0x94
   1f354:	f004 f951 	bl	235fa <assert_print>
   1f358:	4629      	mov	r1, r5
   1f35a:	4821      	ldr	r0, [pc, #132]	; (1f3e0 <k_mem_slab_free+0xb8>)
   1f35c:	f004 f94d 	bl	235fa <assert_print>
   1f360:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f362:	481c      	ldr	r0, [pc, #112]	; (1f3d4 <k_mem_slab_free+0xac>)
   1f364:	f004 f942 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1f368:	4628      	mov	r0, r5
   1f36a:	f000 f97f 	bl	1f66c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f36e:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1f372:	f1b8 0f00 	cmp.w	r8, #0
   1f376:	d10f      	bne.n	1f398 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f378:	4620      	mov	r0, r4
   1f37a:	f002 f8d3 	bl	21524 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f37e:	b158      	cbz	r0, 1f398 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f380:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f382:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f384:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1f388:	f001 fb02 	bl	20990 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1f38c:	4639      	mov	r1, r7
   1f38e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1f390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1f394:	f001 bb8a 	b.w	20aac <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f398:	6833      	ldr	r3, [r6, #0]
   1f39a:	69a2      	ldr	r2, [r4, #24]
   1f39c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f39e:	6833      	ldr	r3, [r6, #0]
   1f3a0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1f3a2:	69e3      	ldr	r3, [r4, #28]
   1f3a4:	3b01      	subs	r3, #1
   1f3a6:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f3a8:	4628      	mov	r0, r5
   1f3aa:	f000 f94f 	bl	1f64c <z_spin_unlock_valid>
   1f3ae:	b958      	cbnz	r0, 1f3c8 <k_mem_slab_free+0xa0>
   1f3b0:	4a08      	ldr	r2, [pc, #32]	; (1f3d4 <k_mem_slab_free+0xac>)
   1f3b2:	490c      	ldr	r1, [pc, #48]	; (1f3e4 <k_mem_slab_free+0xbc>)
   1f3b4:	4809      	ldr	r0, [pc, #36]	; (1f3dc <k_mem_slab_free+0xb4>)
   1f3b6:	23c2      	movs	r3, #194	; 0xc2
   1f3b8:	f004 f91f 	bl	235fa <assert_print>
   1f3bc:	4629      	mov	r1, r5
   1f3be:	480a      	ldr	r0, [pc, #40]	; (1f3e8 <k_mem_slab_free+0xc0>)
   1f3c0:	f004 f91b 	bl	235fa <assert_print>
   1f3c4:	21c2      	movs	r1, #194	; 0xc2
   1f3c6:	e7cc      	b.n	1f362 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   1f3c8:	f387 8811 	msr	BASEPRI, r7
   1f3cc:	f3bf 8f6f 	isb	sy
}
   1f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3d4:	0002730e 	.word	0x0002730e
   1f3d8:	00027367 	.word	0x00027367
   1f3dc:	00026f1a 	.word	0x00026f1a
   1f3e0:	0002737c 	.word	0x0002737c
   1f3e4:	0002733b 	.word	0x0002733b
   1f3e8:	00027352 	.word	0x00027352

0001f3ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3ee:	b085      	sub	sp, #20
   1f3f0:	4604      	mov	r4, r0
   1f3f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1f3f4:	2d0f      	cmp	r5, #15
   1f3f6:	d12e      	bne.n	1f456 <z_setup_new_thread+0x6a>
   1f3f8:	4822      	ldr	r0, [pc, #136]	; (1f484 <z_setup_new_thread+0x98>)
   1f3fa:	4283      	cmp	r3, r0
   1f3fc:	d12f      	bne.n	1f45e <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f3fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f402:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1f404:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1f408:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1f40a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1f40c:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f40e:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1f412:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   1f416:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   1f41a:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1f41e:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
   1f420:	2004      	movs	r0, #4
   1f422:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f424:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
   1f428:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1f42a:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f42c:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f430:	9202      	str	r2, [sp, #8]
   1f432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f434:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1f436:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f43a:	9200      	str	r2, [sp, #0]
   1f43c:	4620      	mov	r0, r4
   1f43e:	463a      	mov	r2, r7
   1f440:	f7f4 febc 	bl	141bc <arch_new_thread>
	if (!_current) {
   1f444:	4b10      	ldr	r3, [pc, #64]	; (1f488 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   1f446:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   1f448:	689b      	ldr	r3, [r3, #8]
   1f44a:	b103      	cbz	r3, 1f44e <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   1f44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1f44e:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f450:	4638      	mov	r0, r7
   1f452:	b005      	add	sp, #20
   1f454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1f456:	f105 0010 	add.w	r0, r5, #16
   1f45a:	281e      	cmp	r0, #30
   1f45c:	d9cf      	bls.n	1f3fe <z_setup_new_thread+0x12>
   1f45e:	4a0b      	ldr	r2, [pc, #44]	; (1f48c <z_setup_new_thread+0xa0>)
   1f460:	490b      	ldr	r1, [pc, #44]	; (1f490 <z_setup_new_thread+0xa4>)
   1f462:	480c      	ldr	r0, [pc, #48]	; (1f494 <z_setup_new_thread+0xa8>)
   1f464:	f44f 7306 	mov.w	r3, #536	; 0x218
   1f468:	f004 f8c7 	bl	235fa <assert_print>
   1f46c:	480a      	ldr	r0, [pc, #40]	; (1f498 <z_setup_new_thread+0xac>)
   1f46e:	4629      	mov	r1, r5
   1f470:	f06f 030f 	mvn.w	r3, #15
   1f474:	220e      	movs	r2, #14
   1f476:	f004 f8c0 	bl	235fa <assert_print>
   1f47a:	4804      	ldr	r0, [pc, #16]	; (1f48c <z_setup_new_thread+0xa0>)
   1f47c:	f44f 7106 	mov.w	r1, #536	; 0x218
   1f480:	f004 f8b4 	bl	235ec <assert_post_action>
   1f484:	0001f67d 	.word	0x0001f67d
   1f488:	20002ed4 	.word	0x20002ed4
   1f48c:	0002a2ec 	.word	0x0002a2ec
   1f490:	0002a30f 	.word	0x0002a30f
   1f494:	00026f1a 	.word	0x00026f1a
   1f498:	0002a38f 	.word	0x0002a38f

0001f49c <z_impl_k_thread_create>:
{
   1f49c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f49e:	b087      	sub	sp, #28
   1f4a0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   1f4a4:	4604      	mov	r4, r0
   1f4a6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1f4aa:	b175      	cbz	r5, 1f4ca <z_impl_k_thread_create+0x2e>
   1f4ac:	4919      	ldr	r1, [pc, #100]	; (1f514 <z_impl_k_thread_create+0x78>)
   1f4ae:	4a1a      	ldr	r2, [pc, #104]	; (1f518 <z_impl_k_thread_create+0x7c>)
   1f4b0:	481a      	ldr	r0, [pc, #104]	; (1f51c <z_impl_k_thread_create+0x80>)
   1f4b2:	f240 238a 	movw	r3, #650	; 0x28a
   1f4b6:	f004 f8a0 	bl	235fa <assert_print>
   1f4ba:	4819      	ldr	r0, [pc, #100]	; (1f520 <z_impl_k_thread_create+0x84>)
   1f4bc:	f004 f89d 	bl	235fa <assert_print>
   1f4c0:	4815      	ldr	r0, [pc, #84]	; (1f518 <z_impl_k_thread_create+0x7c>)
   1f4c2:	f240 218a 	movw	r1, #650	; 0x28a
   1f4c6:	f004 f891 	bl	235ec <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f4ca:	9505      	str	r5, [sp, #20]
   1f4cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f4ce:	9504      	str	r5, [sp, #16]
   1f4d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f4d2:	9503      	str	r5, [sp, #12]
   1f4d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f4d6:	9502      	str	r5, [sp, #8]
   1f4d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f4da:	9501      	str	r5, [sp, #4]
   1f4dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f4de:	9500      	str	r5, [sp, #0]
   1f4e0:	f7ff ff84 	bl	1f3ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f4e4:	f1b6 3fff 	cmp.w	r6, #4294967295
   1f4e8:	bf08      	it	eq
   1f4ea:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1f4ee:	d005      	beq.n	1f4fc <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f4f0:	ea56 0307 	orrs.w	r3, r6, r7
   1f4f4:	d105      	bne.n	1f502 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   1f4f6:	4620      	mov	r0, r4
   1f4f8:	f001 fb1a 	bl	20b30 <z_sched_start>
}
   1f4fc:	4620      	mov	r0, r4
   1f4fe:	b007      	add	sp, #28
   1f500:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f502:	4908      	ldr	r1, [pc, #32]	; (1f524 <z_impl_k_thread_create+0x88>)
   1f504:	463a      	mov	r2, r7
   1f506:	4633      	mov	r3, r6
   1f508:	f104 0018 	add.w	r0, r4, #24
   1f50c:	f002 fb6e 	bl	21bec <z_add_timeout>
   1f510:	e7f4      	b.n	1f4fc <z_impl_k_thread_create+0x60>
   1f512:	bf00      	nop
   1f514:	0002a3c0 	.word	0x0002a3c0
   1f518:	0002a2ec 	.word	0x0002a2ec
   1f51c:	00026f1a 	.word	0x00026f1a
   1f520:	0002a3d2 	.word	0x0002a3d2
   1f524:	00025d3b 	.word	0x00025d3b

0001f528 <z_init_static_threads>:
{
   1f528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f52c:	4c39      	ldr	r4, [pc, #228]	; (1f614 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f52e:	4d3a      	ldr	r5, [pc, #232]	; (1f618 <z_init_static_threads+0xf0>)
{
   1f530:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1f532:	42ac      	cmp	r4, r5
   1f534:	4626      	mov	r6, r4
   1f536:	d92a      	bls.n	1f58e <z_init_static_threads+0x66>
   1f538:	4938      	ldr	r1, [pc, #224]	; (1f61c <z_init_static_threads+0xf4>)
   1f53a:	4a39      	ldr	r2, [pc, #228]	; (1f620 <z_init_static_threads+0xf8>)
   1f53c:	4839      	ldr	r0, [pc, #228]	; (1f624 <z_init_static_threads+0xfc>)
   1f53e:	f240 23f1 	movw	r3, #753	; 0x2f1
   1f542:	f004 f85a 	bl	235fa <assert_print>
   1f546:	4838      	ldr	r0, [pc, #224]	; (1f628 <z_init_static_threads+0x100>)
   1f548:	f004 f857 	bl	235fa <assert_print>
   1f54c:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
   1f550:	4833      	ldr	r0, [pc, #204]	; (1f620 <z_init_static_threads+0xf8>)
   1f552:	f004 f84b 	bl	235ec <assert_post_action>
		z_setup_new_thread(
   1f556:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f55a:	9305      	str	r3, [sp, #20]
   1f55c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1f560:	9304      	str	r3, [sp, #16]
   1f562:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f566:	9303      	str	r3, [sp, #12]
   1f568:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f56c:	9302      	str	r3, [sp, #8]
   1f56e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f572:	9301      	str	r3, [sp, #4]
   1f574:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f578:	9300      	str	r3, [sp, #0]
   1f57a:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1f57e:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   1f582:	f7ff ff33 	bl	1f3ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f586:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   1f58a:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f58c:	e7d1      	b.n	1f532 <z_init_static_threads+0xa>
   1f58e:	42ae      	cmp	r6, r5
   1f590:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   1f594:	d3df      	bcc.n	1f556 <z_init_static_threads+0x2e>
	k_sched_lock();
   1f596:	f001 fb1d 	bl	20bd4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f59a:	4c1e      	ldr	r4, [pc, #120]	; (1f614 <z_init_static_threads+0xec>)
   1f59c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1f62c <z_init_static_threads+0x104>
   1f5a0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f5a4:	f240 37e7 	movw	r7, #999	; 0x3e7
   1f5a8:	42ac      	cmp	r4, r5
   1f5aa:	d92c      	bls.n	1f606 <z_init_static_threads+0xde>
   1f5ac:	491b      	ldr	r1, [pc, #108]	; (1f61c <z_init_static_threads+0xf4>)
   1f5ae:	4a1c      	ldr	r2, [pc, #112]	; (1f620 <z_init_static_threads+0xf8>)
   1f5b0:	481c      	ldr	r0, [pc, #112]	; (1f624 <z_init_static_threads+0xfc>)
   1f5b2:	f44f 7344 	mov.w	r3, #784	; 0x310
   1f5b6:	f004 f820 	bl	235fa <assert_print>
   1f5ba:	481b      	ldr	r0, [pc, #108]	; (1f628 <z_init_static_threads+0x100>)
   1f5bc:	f004 f81d 	bl	235fa <assert_print>
   1f5c0:	f44f 7144 	mov.w	r1, #784	; 0x310
   1f5c4:	e7c4      	b.n	1f550 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f5c8:	1c5a      	adds	r2, r3, #1
   1f5ca:	d00d      	beq.n	1f5e8 <z_init_static_threads+0xc0>
					    K_MSEC(thread_data->init_delay));
   1f5cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f5d0:	2100      	movs	r1, #0
   1f5d2:	4638      	mov	r0, r7
   1f5d4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f5d8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f5dc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f5e0:	d104      	bne.n	1f5ec <z_init_static_threads+0xc4>
	z_sched_start(thread);
   1f5e2:	4640      	mov	r0, r8
   1f5e4:	f001 faa4 	bl	20b30 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f5e8:	342c      	adds	r4, #44	; 0x2c
   1f5ea:	e7dd      	b.n	1f5a8 <z_init_static_threads+0x80>
   1f5ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f5f0:	2300      	movs	r3, #0
   1f5f2:	f7e0 fd73 	bl	dc <__aeabi_uldivmod>
   1f5f6:	4602      	mov	r2, r0
   1f5f8:	460b      	mov	r3, r1
   1f5fa:	f108 0018 	add.w	r0, r8, #24
   1f5fe:	4649      	mov	r1, r9
   1f600:	f002 faf4 	bl	21bec <z_add_timeout>
   1f604:	e7f0      	b.n	1f5e8 <z_init_static_threads+0xc0>
   1f606:	d3de      	bcc.n	1f5c6 <z_init_static_threads+0x9e>
}
   1f608:	b007      	add	sp, #28
   1f60a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f60e:	f001 bb4d 	b.w	20cac <k_sched_unlock>
   1f612:	bf00      	nop
   1f614:	000261b8 	.word	0x000261b8
   1f618:	000261e4 	.word	0x000261e4
   1f61c:	0002a3f7 	.word	0x0002a3f7
   1f620:	0002a2ec 	.word	0x0002a2ec
   1f624:	00026f1a 	.word	0x00026f1a
   1f628:	00027466 	.word	0x00027466
   1f62c:	00025d3b 	.word	0x00025d3b

0001f630 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   1f630:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   1f632:	b138      	cbz	r0, 1f644 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1f634:	4b04      	ldr	r3, [pc, #16]	; (1f648 <z_spin_lock_valid+0x18>)
   1f636:	7c1b      	ldrb	r3, [r3, #16]
   1f638:	f000 0003 	and.w	r0, r0, #3
   1f63c:	1ac0      	subs	r0, r0, r3
   1f63e:	bf18      	it	ne
   1f640:	2001      	movne	r0, #1
   1f642:	4770      	bx	lr
			return false;
		}
	}
	return true;
   1f644:	2001      	movs	r0, #1
}
   1f646:	4770      	bx	lr
   1f648:	20002ed4 	.word	0x20002ed4

0001f64c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f64c:	4a06      	ldr	r2, [pc, #24]	; (1f668 <z_spin_unlock_valid+0x1c>)
   1f64e:	7c11      	ldrb	r1, [r2, #16]
   1f650:	6892      	ldr	r2, [r2, #8]
   1f652:	430a      	orrs	r2, r1
   1f654:	6801      	ldr	r1, [r0, #0]
{
   1f656:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1f658:	4291      	cmp	r1, r2
   1f65a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   1f65e:	bf04      	itt	eq
   1f660:	6018      	streq	r0, [r3, #0]
	return true;
   1f662:	2001      	moveq	r0, #1
}
   1f664:	4770      	bx	lr
   1f666:	bf00      	nop
   1f668:	20002ed4 	.word	0x20002ed4

0001f66c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1f66c:	4b02      	ldr	r3, [pc, #8]	; (1f678 <z_spin_lock_set_owner+0xc>)
   1f66e:	7c1a      	ldrb	r2, [r3, #16]
   1f670:	689b      	ldr	r3, [r3, #8]
   1f672:	4313      	orrs	r3, r2
   1f674:	6003      	str	r3, [r0, #0]
}
   1f676:	4770      	bx	lr
   1f678:	20002ed4 	.word	0x20002ed4

0001f67c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1f67c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1f67e:	4c13      	ldr	r4, [pc, #76]	; (1f6cc <idle+0x50>)
   1f680:	68a3      	ldr	r3, [r4, #8]
   1f682:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f686:	2b00      	cmp	r3, #0
   1f688:	db10      	blt.n	1f6ac <idle+0x30>
	return !z_sys_post_kernel;
   1f68a:	4d11      	ldr	r5, [pc, #68]	; (1f6d0 <idle+0x54>)
	__asm__ volatile(
   1f68c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f690:	f3ef 8311 	mrs	r3, BASEPRI
   1f694:	f382 8812 	msr	BASEPRI_MAX, r2
   1f698:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1f69c:	f002 fbb2 	bl	21e04 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f6a0:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1f6a2:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f6a4:	b963      	cbnz	r3, 1f6c0 <idle+0x44>
	arch_cpu_idle();
   1f6a6:	f7f4 fc21 	bl	13eec <arch_cpu_idle>
}
   1f6aa:	e7ef      	b.n	1f68c <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1f6ac:	4909      	ldr	r1, [pc, #36]	; (1f6d4 <idle+0x58>)
   1f6ae:	480a      	ldr	r0, [pc, #40]	; (1f6d8 <idle+0x5c>)
   1f6b0:	4a0a      	ldr	r2, [pc, #40]	; (1f6dc <idle+0x60>)
   1f6b2:	2327      	movs	r3, #39	; 0x27
   1f6b4:	f003 ffa1 	bl	235fa <assert_print>
   1f6b8:	4808      	ldr	r0, [pc, #32]	; (1f6dc <idle+0x60>)
   1f6ba:	2127      	movs	r1, #39	; 0x27
   1f6bc:	f003 ff96 	bl	235ec <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f6c0:	f7f4 fa8e 	bl	13be0 <pm_system_suspend>
   1f6c4:	2800      	cmp	r0, #0
   1f6c6:	d1e1      	bne.n	1f68c <idle+0x10>
   1f6c8:	e7ed      	b.n	1f6a6 <idle+0x2a>
   1f6ca:	bf00      	nop
   1f6cc:	20002ed4 	.word	0x20002ed4
   1f6d0:	20003508 	.word	0x20003508
   1f6d4:	0002a445 	.word	0x0002a445
   1f6d8:	00026f1a 	.word	0x00026f1a
   1f6dc:	0002a424 	.word	0x0002a424

0001f6e0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f6e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f6e4:	4604      	mov	r4, r0
   1f6e6:	4617      	mov	r7, r2
   1f6e8:	461e      	mov	r6, r3
   1f6ea:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1f6ee:	b165      	cbz	r5, 1f70a <z_impl_k_mutex_lock+0x2a>
   1f6f0:	4958      	ldr	r1, [pc, #352]	; (1f854 <z_impl_k_mutex_lock+0x174>)
   1f6f2:	4a59      	ldr	r2, [pc, #356]	; (1f858 <z_impl_k_mutex_lock+0x178>)
   1f6f4:	4859      	ldr	r0, [pc, #356]	; (1f85c <z_impl_k_mutex_lock+0x17c>)
   1f6f6:	2365      	movs	r3, #101	; 0x65
   1f6f8:	f003 ff7f 	bl	235fa <assert_print>
   1f6fc:	4858      	ldr	r0, [pc, #352]	; (1f860 <z_impl_k_mutex_lock+0x180>)
   1f6fe:	f003 ff7c 	bl	235fa <assert_print>
   1f702:	4855      	ldr	r0, [pc, #340]	; (1f858 <z_impl_k_mutex_lock+0x178>)
   1f704:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f706:	f003 ff71 	bl	235ec <assert_post_action>
   1f70a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f70e:	f3ef 8811 	mrs	r8, BASEPRI
   1f712:	f383 8812 	msr	BASEPRI_MAX, r3
   1f716:	f3bf 8f6f 	isb	sy
   1f71a:	4852      	ldr	r0, [pc, #328]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f71c:	f7ff ff88 	bl	1f630 <z_spin_lock_valid>
   1f720:	b960      	cbnz	r0, 1f73c <z_impl_k_mutex_lock+0x5c>
   1f722:	4a51      	ldr	r2, [pc, #324]	; (1f868 <z_impl_k_mutex_lock+0x188>)
   1f724:	4951      	ldr	r1, [pc, #324]	; (1f86c <z_impl_k_mutex_lock+0x18c>)
   1f726:	484d      	ldr	r0, [pc, #308]	; (1f85c <z_impl_k_mutex_lock+0x17c>)
   1f728:	2394      	movs	r3, #148	; 0x94
   1f72a:	f003 ff66 	bl	235fa <assert_print>
   1f72e:	494d      	ldr	r1, [pc, #308]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f730:	484f      	ldr	r0, [pc, #316]	; (1f870 <z_impl_k_mutex_lock+0x190>)
   1f732:	f003 ff62 	bl	235fa <assert_print>
   1f736:	2194      	movs	r1, #148	; 0x94
   1f738:	484b      	ldr	r0, [pc, #300]	; (1f868 <z_impl_k_mutex_lock+0x188>)
   1f73a:	e7e4      	b.n	1f706 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   1f73c:	4849      	ldr	r0, [pc, #292]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f73e:	f7ff ff95 	bl	1f66c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f742:	68e3      	ldr	r3, [r4, #12]
   1f744:	4a4b      	ldr	r2, [pc, #300]	; (1f874 <z_impl_k_mutex_lock+0x194>)
   1f746:	b19b      	cbz	r3, 1f770 <z_impl_k_mutex_lock+0x90>
   1f748:	68a0      	ldr	r0, [r4, #8]
   1f74a:	6891      	ldr	r1, [r2, #8]
   1f74c:	4288      	cmp	r0, r1
   1f74e:	d027      	beq.n	1f7a0 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f750:	ea57 0306 	orrs.w	r3, r7, r6
   1f754:	d12c      	bne.n	1f7b0 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f756:	4843      	ldr	r0, [pc, #268]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f758:	f7ff ff78 	bl	1f64c <z_spin_unlock_valid>
   1f75c:	b1a0      	cbz	r0, 1f788 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1f75e:	f388 8811 	msr	BASEPRI, r8
   1f762:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1f766:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1f76a:	b002      	add	sp, #8
   1f76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f770:	6891      	ldr	r1, [r2, #8]
   1f772:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f776:	483b      	ldr	r0, [pc, #236]	; (1f864 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f778:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f77a:	3301      	adds	r3, #1
   1f77c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f77e:	6893      	ldr	r3, [r2, #8]
   1f780:	60a3      	str	r3, [r4, #8]
   1f782:	f7ff ff63 	bl	1f64c <z_spin_unlock_valid>
   1f786:	b968      	cbnz	r0, 1f7a4 <z_impl_k_mutex_lock+0xc4>
   1f788:	4a37      	ldr	r2, [pc, #220]	; (1f868 <z_impl_k_mutex_lock+0x188>)
   1f78a:	493b      	ldr	r1, [pc, #236]	; (1f878 <z_impl_k_mutex_lock+0x198>)
   1f78c:	4833      	ldr	r0, [pc, #204]	; (1f85c <z_impl_k_mutex_lock+0x17c>)
   1f78e:	23c2      	movs	r3, #194	; 0xc2
   1f790:	f003 ff33 	bl	235fa <assert_print>
   1f794:	4933      	ldr	r1, [pc, #204]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f796:	4839      	ldr	r0, [pc, #228]	; (1f87c <z_impl_k_mutex_lock+0x19c>)
   1f798:	f003 ff2f 	bl	235fa <assert_print>
   1f79c:	21c2      	movs	r1, #194	; 0xc2
   1f79e:	e7cb      	b.n	1f738 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   1f7a0:	6921      	ldr	r1, [r4, #16]
   1f7a2:	e7e8      	b.n	1f776 <z_impl_k_mutex_lock+0x96>
   1f7a4:	f388 8811 	msr	BASEPRI, r8
   1f7a8:	f3bf 8f6f 	isb	sy
		return 0;
   1f7ac:	2000      	movs	r0, #0
   1f7ae:	e7dc      	b.n	1f76a <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f7b0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f7b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1f7b8:	4299      	cmp	r1, r3
   1f7ba:	bfa8      	it	ge
   1f7bc:	4619      	movge	r1, r3
   1f7be:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1f7c2:	4291      	cmp	r1, r2
   1f7c4:	bfb8      	it	lt
   1f7c6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f7c8:	428b      	cmp	r3, r1
   1f7ca:	dd02      	ble.n	1f7d2 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   1f7cc:	f006 f9e5 	bl	25b9a <adjust_owner_prio.isra.0>
   1f7d0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f7d2:	e9cd 7600 	strd	r7, r6, [sp]
   1f7d6:	4823      	ldr	r0, [pc, #140]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f7d8:	4622      	mov	r2, r4
   1f7da:	4641      	mov	r1, r8
   1f7dc:	f001 fc22 	bl	21024 <z_pend_curr>
	if (got_mutex == 0) {
   1f7e0:	2800      	cmp	r0, #0
   1f7e2:	d0e3      	beq.n	1f7ac <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1f7e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f7e8:	f3ef 8611 	mrs	r6, BASEPRI
   1f7ec:	f383 8812 	msr	BASEPRI_MAX, r3
   1f7f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f7f4:	481b      	ldr	r0, [pc, #108]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f7f6:	f7ff ff1b 	bl	1f630 <z_spin_lock_valid>
   1f7fa:	2800      	cmp	r0, #0
   1f7fc:	d091      	beq.n	1f722 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   1f7fe:	4819      	ldr	r0, [pc, #100]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f800:	f7ff ff34 	bl	1f66c <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   1f804:	68a0      	ldr	r0, [r4, #8]
   1f806:	b1c0      	cbz	r0, 1f83a <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f808:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f80a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f80c:	429c      	cmp	r4, r3
   1f80e:	d00a      	beq.n	1f826 <z_impl_k_mutex_lock+0x146>
   1f810:	b14b      	cbz	r3, 1f826 <z_impl_k_mutex_lock+0x146>
   1f812:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f816:	4299      	cmp	r1, r3
   1f818:	bfa8      	it	ge
   1f81a:	4619      	movge	r1, r3
   1f81c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1f820:	4299      	cmp	r1, r3
   1f822:	bfb8      	it	lt
   1f824:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f826:	f006 f9b8 	bl	25b9a <adjust_owner_prio.isra.0>
   1f82a:	b130      	cbz	r0, 1f83a <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   1f82c:	480d      	ldr	r0, [pc, #52]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f82e:	4631      	mov	r1, r6
   1f830:	f001 f93c 	bl	20aac <z_reschedule>
	return -EAGAIN;
   1f834:	f06f 000a 	mvn.w	r0, #10
   1f838:	e797      	b.n	1f76a <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   1f83a:	2d00      	cmp	r5, #0
   1f83c:	d1f6      	bne.n	1f82c <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f83e:	4809      	ldr	r0, [pc, #36]	; (1f864 <z_impl_k_mutex_lock+0x184>)
   1f840:	f7ff ff04 	bl	1f64c <z_spin_unlock_valid>
   1f844:	2800      	cmp	r0, #0
   1f846:	d09f      	beq.n	1f788 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   1f848:	f386 8811 	msr	BASEPRI, r6
   1f84c:	f3bf 8f6f 	isb	sy
   1f850:	e7f0      	b.n	1f834 <z_impl_k_mutex_lock+0x154>
   1f852:	bf00      	nop
   1f854:	0002a3c0 	.word	0x0002a3c0
   1f858:	0002a46d 	.word	0x0002a46d
   1f85c:	00026f1a 	.word	0x00026f1a
   1f860:	0002a48f 	.word	0x0002a48f
   1f864:	20002ef8 	.word	0x20002ef8
   1f868:	0002730e 	.word	0x0002730e
   1f86c:	00027367 	.word	0x00027367
   1f870:	0002737c 	.word	0x0002737c
   1f874:	20002ed4 	.word	0x20002ed4
   1f878:	0002733b 	.word	0x0002733b
   1f87c:	00027352 	.word	0x00027352

0001f880 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f880:	b570      	push	{r4, r5, r6, lr}
   1f882:	4604      	mov	r4, r0
   1f884:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1f888:	b166      	cbz	r6, 1f8a4 <z_impl_k_mutex_unlock+0x24>
   1f88a:	4938      	ldr	r1, [pc, #224]	; (1f96c <z_impl_k_mutex_unlock+0xec>)
   1f88c:	4a38      	ldr	r2, [pc, #224]	; (1f970 <z_impl_k_mutex_unlock+0xf0>)
   1f88e:	4839      	ldr	r0, [pc, #228]	; (1f974 <z_impl_k_mutex_unlock+0xf4>)
   1f890:	23cd      	movs	r3, #205	; 0xcd
   1f892:	f003 feb2 	bl	235fa <assert_print>
   1f896:	4838      	ldr	r0, [pc, #224]	; (1f978 <z_impl_k_mutex_unlock+0xf8>)
   1f898:	f003 feaf 	bl	235fa <assert_print>
   1f89c:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1f89e:	4834      	ldr	r0, [pc, #208]	; (1f970 <z_impl_k_mutex_unlock+0xf0>)
   1f8a0:	f003 fea4 	bl	235ec <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   1f8a4:	6883      	ldr	r3, [r0, #8]
   1f8a6:	2b00      	cmp	r3, #0
   1f8a8:	d059      	beq.n	1f95e <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   1f8aa:	4a34      	ldr	r2, [pc, #208]	; (1f97c <z_impl_k_mutex_unlock+0xfc>)
   1f8ac:	6892      	ldr	r2, [r2, #8]
   1f8ae:	4293      	cmp	r3, r2
   1f8b0:	d158      	bne.n	1f964 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1f8b2:	68c3      	ldr	r3, [r0, #12]
   1f8b4:	b93b      	cbnz	r3, 1f8c6 <z_impl_k_mutex_unlock+0x46>
   1f8b6:	4932      	ldr	r1, [pc, #200]	; (1f980 <z_impl_k_mutex_unlock+0x100>)
   1f8b8:	4a2d      	ldr	r2, [pc, #180]	; (1f970 <z_impl_k_mutex_unlock+0xf0>)
   1f8ba:	482e      	ldr	r0, [pc, #184]	; (1f974 <z_impl_k_mutex_unlock+0xf4>)
   1f8bc:	23e5      	movs	r3, #229	; 0xe5
   1f8be:	f003 fe9c 	bl	235fa <assert_print>
   1f8c2:	21e5      	movs	r1, #229	; 0xe5
   1f8c4:	e7eb      	b.n	1f89e <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1f8c6:	2b01      	cmp	r3, #1
   1f8c8:	d003      	beq.n	1f8d2 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   1f8ca:	3b01      	subs	r3, #1
   1f8cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1f8ce:	2000      	movs	r0, #0
}
   1f8d0:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   1f8d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f8d6:	f3ef 8511 	mrs	r5, BASEPRI
   1f8da:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f8e2:	4828      	ldr	r0, [pc, #160]	; (1f984 <z_impl_k_mutex_unlock+0x104>)
   1f8e4:	f7ff fea4 	bl	1f630 <z_spin_lock_valid>
   1f8e8:	b960      	cbnz	r0, 1f904 <z_impl_k_mutex_unlock+0x84>
   1f8ea:	4a27      	ldr	r2, [pc, #156]	; (1f988 <z_impl_k_mutex_unlock+0x108>)
   1f8ec:	4927      	ldr	r1, [pc, #156]	; (1f98c <z_impl_k_mutex_unlock+0x10c>)
   1f8ee:	4821      	ldr	r0, [pc, #132]	; (1f974 <z_impl_k_mutex_unlock+0xf4>)
   1f8f0:	2394      	movs	r3, #148	; 0x94
   1f8f2:	f003 fe82 	bl	235fa <assert_print>
   1f8f6:	4923      	ldr	r1, [pc, #140]	; (1f984 <z_impl_k_mutex_unlock+0x104>)
   1f8f8:	4825      	ldr	r0, [pc, #148]	; (1f990 <z_impl_k_mutex_unlock+0x110>)
   1f8fa:	f003 fe7e 	bl	235fa <assert_print>
   1f8fe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f900:	4821      	ldr	r0, [pc, #132]	; (1f988 <z_impl_k_mutex_unlock+0x108>)
   1f902:	e7cd      	b.n	1f8a0 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   1f904:	481f      	ldr	r0, [pc, #124]	; (1f984 <z_impl_k_mutex_unlock+0x104>)
   1f906:	f7ff feb1 	bl	1f66c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f90a:	6921      	ldr	r1, [r4, #16]
   1f90c:	68a0      	ldr	r0, [r4, #8]
   1f90e:	f006 f944 	bl	25b9a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f912:	4620      	mov	r0, r4
   1f914:	f001 fe06 	bl	21524 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f918:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f91a:	b150      	cbz	r0, 1f932 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f91c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f920:	6122      	str	r2, [r4, #16]
   1f922:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1f924:	f001 f834 	bl	20990 <z_ready_thread>
		z_reschedule(&lock, key);
   1f928:	4816      	ldr	r0, [pc, #88]	; (1f984 <z_impl_k_mutex_unlock+0x104>)
   1f92a:	4629      	mov	r1, r5
   1f92c:	f001 f8be 	bl	20aac <z_reschedule>
   1f930:	e7cd      	b.n	1f8ce <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   1f932:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f934:	4813      	ldr	r0, [pc, #76]	; (1f984 <z_impl_k_mutex_unlock+0x104>)
   1f936:	f7ff fe89 	bl	1f64c <z_spin_unlock_valid>
   1f93a:	b958      	cbnz	r0, 1f954 <z_impl_k_mutex_unlock+0xd4>
   1f93c:	4a12      	ldr	r2, [pc, #72]	; (1f988 <z_impl_k_mutex_unlock+0x108>)
   1f93e:	4915      	ldr	r1, [pc, #84]	; (1f994 <z_impl_k_mutex_unlock+0x114>)
   1f940:	480c      	ldr	r0, [pc, #48]	; (1f974 <z_impl_k_mutex_unlock+0xf4>)
   1f942:	23c2      	movs	r3, #194	; 0xc2
   1f944:	f003 fe59 	bl	235fa <assert_print>
   1f948:	490e      	ldr	r1, [pc, #56]	; (1f984 <z_impl_k_mutex_unlock+0x104>)
   1f94a:	4813      	ldr	r0, [pc, #76]	; (1f998 <z_impl_k_mutex_unlock+0x118>)
   1f94c:	f003 fe55 	bl	235fa <assert_print>
   1f950:	21c2      	movs	r1, #194	; 0xc2
   1f952:	e7d5      	b.n	1f900 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   1f954:	f385 8811 	msr	BASEPRI, r5
   1f958:	f3bf 8f6f 	isb	sy
   1f95c:	e7b7      	b.n	1f8ce <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   1f95e:	f06f 0015 	mvn.w	r0, #21
   1f962:	e7b5      	b.n	1f8d0 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   1f964:	f04f 30ff 	mov.w	r0, #4294967295
   1f968:	e7b2      	b.n	1f8d0 <z_impl_k_mutex_unlock+0x50>
   1f96a:	bf00      	nop
   1f96c:	0002a3c0 	.word	0x0002a3c0
   1f970:	0002a46d 	.word	0x0002a46d
   1f974:	00026f1a 	.word	0x00026f1a
   1f978:	0002a48f 	.word	0x0002a48f
   1f97c:	20002ed4 	.word	0x20002ed4
   1f980:	0002a4b4 	.word	0x0002a4b4
   1f984:	20002ef8 	.word	0x20002ef8
   1f988:	0002730e 	.word	0x0002730e
   1f98c:	00027367 	.word	0x00027367
   1f990:	0002737c 	.word	0x0002737c
   1f994:	0002733b 	.word	0x0002733b
   1f998:	00027352 	.word	0x00027352

0001f99c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1f99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9a0:	4604      	mov	r4, r0
   1f9a2:	f89d a020 	ldrb.w	sl, [sp, #32]
   1f9a6:	460e      	mov	r6, r1
   1f9a8:	4690      	mov	r8, r2
   1f9aa:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f9ac:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1f9b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f9b4:	f3ef 8711 	mrs	r7, BASEPRI
   1f9b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f9bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f9c0:	4628      	mov	r0, r5
   1f9c2:	f7ff fe35 	bl	1f630 <z_spin_lock_valid>
   1f9c6:	b968      	cbnz	r0, 1f9e4 <queue_insert+0x48>
   1f9c8:	4a3b      	ldr	r2, [pc, #236]	; (1fab8 <queue_insert+0x11c>)
   1f9ca:	493c      	ldr	r1, [pc, #240]	; (1fabc <queue_insert+0x120>)
   1f9cc:	483c      	ldr	r0, [pc, #240]	; (1fac0 <queue_insert+0x124>)
   1f9ce:	2394      	movs	r3, #148	; 0x94
   1f9d0:	f003 fe13 	bl	235fa <assert_print>
   1f9d4:	4629      	mov	r1, r5
   1f9d6:	483b      	ldr	r0, [pc, #236]	; (1fac4 <queue_insert+0x128>)
   1f9d8:	f003 fe0f 	bl	235fa <assert_print>
   1f9dc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f9de:	4836      	ldr	r0, [pc, #216]	; (1fab8 <queue_insert+0x11c>)
   1f9e0:	f003 fe04 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1f9e4:	4628      	mov	r0, r5
   1f9e6:	f7ff fe41 	bl	1f66c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   1f9ea:	f1ba 0f00 	cmp.w	sl, #0
   1f9ee:	d000      	beq.n	1f9f2 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1f9f0:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1f9f2:	f104 000c 	add.w	r0, r4, #12
   1f9f6:	f001 fd95 	bl	21524 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1f9fa:	b158      	cbz	r0, 1fa14 <queue_insert+0x78>
   1f9fc:	2300      	movs	r3, #0
   1f9fe:	67c3      	str	r3, [r0, #124]	; 0x7c
   1fa00:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1fa04:	f000 ffc4 	bl	20990 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1fa08:	4628      	mov	r0, r5
   1fa0a:	4639      	mov	r1, r7
   1fa0c:	f001 f84e 	bl	20aac <z_reschedule>
		return 0;
   1fa10:	2000      	movs	r0, #0
   1fa12:	e01c      	b.n	1fa4e <queue_insert+0xb2>
	if (alloc) {
   1fa14:	f1b9 0f00 	cmp.w	r9, #0
   1fa18:	d02b      	beq.n	1fa72 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   1fa1a:	2108      	movs	r1, #8
   1fa1c:	f002 ffd6 	bl	229cc <z_thread_aligned_alloc>
		if (anode == NULL) {
   1fa20:	b9b8      	cbnz	r0, 1fa52 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fa22:	4628      	mov	r0, r5
   1fa24:	f7ff fe12 	bl	1f64c <z_spin_unlock_valid>
   1fa28:	b958      	cbnz	r0, 1fa42 <queue_insert+0xa6>
   1fa2a:	4a23      	ldr	r2, [pc, #140]	; (1fab8 <queue_insert+0x11c>)
   1fa2c:	4926      	ldr	r1, [pc, #152]	; (1fac8 <queue_insert+0x12c>)
   1fa2e:	4824      	ldr	r0, [pc, #144]	; (1fac0 <queue_insert+0x124>)
   1fa30:	23c2      	movs	r3, #194	; 0xc2
   1fa32:	f003 fde2 	bl	235fa <assert_print>
   1fa36:	4629      	mov	r1, r5
   1fa38:	4824      	ldr	r0, [pc, #144]	; (1facc <queue_insert+0x130>)
   1fa3a:	f003 fdde 	bl	235fa <assert_print>
   1fa3e:	21c2      	movs	r1, #194	; 0xc2
   1fa40:	e7cd      	b.n	1f9de <queue_insert+0x42>
	__asm__ volatile(
   1fa42:	f387 8811 	msr	BASEPRI, r7
   1fa46:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1fa4a:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   1fa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1fa52:	2201      	movs	r2, #1
		anode->data = data;
   1fa54:	f8c0 8004 	str.w	r8, [r0, #4]
   1fa58:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fa5a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fa5c:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1fa60:	b95e      	cbnz	r6, 1fa7a <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fa62:	6822      	ldr	r2, [r4, #0]
   1fa64:	430a      	orrs	r2, r1
   1fa66:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fa68:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   1fa6a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1fa6c:	b96a      	cbnz	r2, 1fa8a <queue_insert+0xee>
	list->tail = node;
   1fa6e:	6060      	str	r0, [r4, #4]
}
   1fa70:	e00b      	b.n	1fa8a <queue_insert+0xee>
	node->next_and_flags = flags;
   1fa72:	f8c8 9000 	str.w	r9, [r8]
}
   1fa76:	4640      	mov	r0, r8
   1fa78:	e7ef      	b.n	1fa5a <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fa7a:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1fa7c:	2a03      	cmp	r2, #3
   1fa7e:	d810      	bhi.n	1faa2 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fa80:	6001      	str	r1, [r0, #0]
	return list->tail;
   1fa82:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1fa84:	b939      	cbnz	r1, 1fa96 <queue_insert+0xfa>
	list->head = node;
   1fa86:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1fa8a:	2104      	movs	r1, #4
   1fa8c:	f104 0014 	add.w	r0, r4, #20
   1fa90:	f006 fa47 	bl	25f22 <z_handle_obj_poll_events>
   1fa94:	e7b8      	b.n	1fa08 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1fa96:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1fa98:	f002 0203 	and.w	r2, r2, #3
   1fa9c:	4302      	orrs	r2, r0
   1fa9e:	600a      	str	r2, [r1, #0]
   1faa0:	e7e5      	b.n	1fa6e <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1faa2:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1faa6:	430a      	orrs	r2, r1
   1faa8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1faaa:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1faac:	f002 0203 	and.w	r2, r2, #3
   1fab0:	ea40 0302 	orr.w	r3, r0, r2
   1fab4:	6033      	str	r3, [r6, #0]
}
   1fab6:	e7e8      	b.n	1fa8a <queue_insert+0xee>
   1fab8:	0002730e 	.word	0x0002730e
   1fabc:	00027367 	.word	0x00027367
   1fac0:	00026f1a 	.word	0x00026f1a
   1fac4:	0002737c 	.word	0x0002737c
   1fac8:	0002733b 	.word	0x0002733b
   1facc:	00027352 	.word	0x00027352

0001fad0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1fad4:	4606      	mov	r6, r0
   1fad6:	4691      	mov	r9, r2
   1fad8:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fada:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fade:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fae2:	f3ef 8811 	mrs	r8, BASEPRI
   1fae6:	f383 8812 	msr	BASEPRI_MAX, r3
   1faea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1faee:	4628      	mov	r0, r5
   1faf0:	f7ff fd9e 	bl	1f630 <z_spin_lock_valid>
   1faf4:	b968      	cbnz	r0, 1fb12 <z_impl_k_queue_get+0x42>
   1faf6:	4a24      	ldr	r2, [pc, #144]	; (1fb88 <z_impl_k_queue_get+0xb8>)
   1faf8:	4924      	ldr	r1, [pc, #144]	; (1fb8c <z_impl_k_queue_get+0xbc>)
   1fafa:	4825      	ldr	r0, [pc, #148]	; (1fb90 <z_impl_k_queue_get+0xc0>)
   1fafc:	2394      	movs	r3, #148	; 0x94
   1fafe:	f003 fd7c 	bl	235fa <assert_print>
   1fb02:	4629      	mov	r1, r5
   1fb04:	4823      	ldr	r0, [pc, #140]	; (1fb94 <z_impl_k_queue_get+0xc4>)
   1fb06:	f003 fd78 	bl	235fa <assert_print>
   1fb0a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb0c:	481e      	ldr	r0, [pc, #120]	; (1fb88 <z_impl_k_queue_get+0xb8>)
   1fb0e:	f003 fd6d 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1fb12:	4628      	mov	r0, r5
   1fb14:	f7ff fdaa 	bl	1f66c <z_spin_lock_set_owner>
	return list->head;
   1fb18:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fb1a:	b1e4      	cbz	r4, 1fb56 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fb1c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fb1e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fb20:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fb24:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fb26:	4620      	mov	r0, r4
	list->head = node;
   1fb28:	6033      	str	r3, [r6, #0]
	list->tail = node;
   1fb2a:	bf08      	it	eq
   1fb2c:	6073      	streq	r3, [r6, #4]
   1fb2e:	2101      	movs	r1, #1
   1fb30:	f006 f83b 	bl	25baa <z_queue_node_peek>
   1fb34:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fb36:	4628      	mov	r0, r5
   1fb38:	f7ff fd88 	bl	1f64c <z_spin_unlock_valid>
   1fb3c:	b9d8      	cbnz	r0, 1fb76 <z_impl_k_queue_get+0xa6>
   1fb3e:	4a12      	ldr	r2, [pc, #72]	; (1fb88 <z_impl_k_queue_get+0xb8>)
   1fb40:	4915      	ldr	r1, [pc, #84]	; (1fb98 <z_impl_k_queue_get+0xc8>)
   1fb42:	4813      	ldr	r0, [pc, #76]	; (1fb90 <z_impl_k_queue_get+0xc0>)
   1fb44:	23c2      	movs	r3, #194	; 0xc2
   1fb46:	f003 fd58 	bl	235fa <assert_print>
   1fb4a:	4629      	mov	r1, r5
   1fb4c:	4813      	ldr	r0, [pc, #76]	; (1fb9c <z_impl_k_queue_get+0xcc>)
   1fb4e:	f003 fd54 	bl	235fa <assert_print>
   1fb52:	21c2      	movs	r1, #194	; 0xc2
   1fb54:	e7da      	b.n	1fb0c <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fb56:	ea59 0307 	orrs.w	r3, r9, r7
   1fb5a:	d0ec      	beq.n	1fb36 <z_impl_k_queue_get+0x66>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fb5c:	e9cd 9700 	strd	r9, r7, [sp]
   1fb60:	f106 020c 	add.w	r2, r6, #12
   1fb64:	4641      	mov	r1, r8
   1fb66:	4628      	mov	r0, r5
   1fb68:	f001 fa5c 	bl	21024 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   1fb6c:	b938      	cbnz	r0, 1fb7e <z_impl_k_queue_get+0xae>
   1fb6e:	4b0c      	ldr	r3, [pc, #48]	; (1fba0 <z_impl_k_queue_get+0xd0>)
   1fb70:	689b      	ldr	r3, [r3, #8]
   1fb72:	695c      	ldr	r4, [r3, #20]
   1fb74:	e003      	b.n	1fb7e <z_impl_k_queue_get+0xae>
	__asm__ volatile(
   1fb76:	f388 8811 	msr	BASEPRI, r8
   1fb7a:	f3bf 8f6f 	isb	sy
}
   1fb7e:	4620      	mov	r0, r4
   1fb80:	b003      	add	sp, #12
   1fb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fb86:	bf00      	nop
   1fb88:	0002730e 	.word	0x0002730e
   1fb8c:	00027367 	.word	0x00027367
   1fb90:	00026f1a 	.word	0x00026f1a
   1fb94:	0002737c 	.word	0x0002737c
   1fb98:	0002733b 	.word	0x0002733b
   1fb9c:	00027352 	.word	0x00027352
   1fba0:	20002ed4 	.word	0x20002ed4

0001fba4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fba4:	b538      	push	{r3, r4, r5, lr}
   1fba6:	4604      	mov	r4, r0
	__asm__ volatile(
   1fba8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fbac:	f3ef 8511 	mrs	r5, BASEPRI
   1fbb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbb8:	4817      	ldr	r0, [pc, #92]	; (1fc18 <z_impl_k_sem_give+0x74>)
   1fbba:	f7ff fd39 	bl	1f630 <z_spin_lock_valid>
   1fbbe:	b968      	cbnz	r0, 1fbdc <z_impl_k_sem_give+0x38>
   1fbc0:	4a16      	ldr	r2, [pc, #88]	; (1fc1c <z_impl_k_sem_give+0x78>)
   1fbc2:	4917      	ldr	r1, [pc, #92]	; (1fc20 <z_impl_k_sem_give+0x7c>)
   1fbc4:	4817      	ldr	r0, [pc, #92]	; (1fc24 <z_impl_k_sem_give+0x80>)
   1fbc6:	2394      	movs	r3, #148	; 0x94
   1fbc8:	f003 fd17 	bl	235fa <assert_print>
   1fbcc:	4912      	ldr	r1, [pc, #72]	; (1fc18 <z_impl_k_sem_give+0x74>)
   1fbce:	4816      	ldr	r0, [pc, #88]	; (1fc28 <z_impl_k_sem_give+0x84>)
   1fbd0:	f003 fd13 	bl	235fa <assert_print>
   1fbd4:	4811      	ldr	r0, [pc, #68]	; (1fc1c <z_impl_k_sem_give+0x78>)
   1fbd6:	2194      	movs	r1, #148	; 0x94
   1fbd8:	f003 fd08 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1fbdc:	480e      	ldr	r0, [pc, #56]	; (1fc18 <z_impl_k_sem_give+0x74>)
   1fbde:	f7ff fd45 	bl	1f66c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1fbe2:	4620      	mov	r0, r4
   1fbe4:	f001 fc9e 	bl	21524 <z_unpend_first_thread>

	if (thread != NULL) {
   1fbe8:	b148      	cbz	r0, 1fbfe <z_impl_k_sem_give+0x5a>
   1fbea:	2200      	movs	r2, #0
   1fbec:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fbee:	f000 fecf 	bl	20990 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fbf2:	4629      	mov	r1, r5
   1fbf4:	4808      	ldr	r0, [pc, #32]	; (1fc18 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1fbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fbfa:	f000 bf57 	b.w	20aac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fbfe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fc02:	429a      	cmp	r2, r3
   1fc04:	bf18      	it	ne
   1fc06:	3301      	addne	r3, #1
   1fc08:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fc0a:	2102      	movs	r1, #2
   1fc0c:	f104 0010 	add.w	r0, r4, #16
   1fc10:	f006 f987 	bl	25f22 <z_handle_obj_poll_events>
}
   1fc14:	e7ed      	b.n	1fbf2 <z_impl_k_sem_give+0x4e>
   1fc16:	bf00      	nop
   1fc18:	20002efc 	.word	0x20002efc
   1fc1c:	0002730e 	.word	0x0002730e
   1fc20:	00027367 	.word	0x00027367
   1fc24:	00026f1a 	.word	0x00026f1a
   1fc28:	0002737c 	.word	0x0002737c

0001fc2c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fc2e:	4604      	mov	r4, r0
   1fc30:	4616      	mov	r6, r2
   1fc32:	461d      	mov	r5, r3
   1fc34:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   1fc38:	b17b      	cbz	r3, 1fc5a <z_impl_k_sem_take+0x2e>
   1fc3a:	ea52 0305 	orrs.w	r3, r2, r5
   1fc3e:	d00c      	beq.n	1fc5a <z_impl_k_sem_take+0x2e>
   1fc40:	492d      	ldr	r1, [pc, #180]	; (1fcf8 <z_impl_k_sem_take+0xcc>)
   1fc42:	4a2e      	ldr	r2, [pc, #184]	; (1fcfc <z_impl_k_sem_take+0xd0>)
   1fc44:	482e      	ldr	r0, [pc, #184]	; (1fd00 <z_impl_k_sem_take+0xd4>)
   1fc46:	2379      	movs	r3, #121	; 0x79
   1fc48:	f003 fcd7 	bl	235fa <assert_print>
   1fc4c:	482d      	ldr	r0, [pc, #180]	; (1fd04 <z_impl_k_sem_take+0xd8>)
   1fc4e:	f003 fcd4 	bl	235fa <assert_print>
   1fc52:	482a      	ldr	r0, [pc, #168]	; (1fcfc <z_impl_k_sem_take+0xd0>)
   1fc54:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc56:	f003 fcc9 	bl	235ec <assert_post_action>
   1fc5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fc5e:	f3ef 8711 	mrs	r7, BASEPRI
   1fc62:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc66:	f3bf 8f6f 	isb	sy
   1fc6a:	4827      	ldr	r0, [pc, #156]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fc6c:	f7ff fce0 	bl	1f630 <z_spin_lock_valid>
   1fc70:	b960      	cbnz	r0, 1fc8c <z_impl_k_sem_take+0x60>
   1fc72:	4a26      	ldr	r2, [pc, #152]	; (1fd0c <z_impl_k_sem_take+0xe0>)
   1fc74:	4926      	ldr	r1, [pc, #152]	; (1fd10 <z_impl_k_sem_take+0xe4>)
   1fc76:	4822      	ldr	r0, [pc, #136]	; (1fd00 <z_impl_k_sem_take+0xd4>)
   1fc78:	2394      	movs	r3, #148	; 0x94
   1fc7a:	f003 fcbe 	bl	235fa <assert_print>
   1fc7e:	4922      	ldr	r1, [pc, #136]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fc80:	4824      	ldr	r0, [pc, #144]	; (1fd14 <z_impl_k_sem_take+0xe8>)
   1fc82:	f003 fcba 	bl	235fa <assert_print>
   1fc86:	2194      	movs	r1, #148	; 0x94
   1fc88:	4820      	ldr	r0, [pc, #128]	; (1fd0c <z_impl_k_sem_take+0xe0>)
   1fc8a:	e7e4      	b.n	1fc56 <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   1fc8c:	481e      	ldr	r0, [pc, #120]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fc8e:	f7ff fced 	bl	1f66c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1fc92:	68a3      	ldr	r3, [r4, #8]
   1fc94:	b1c3      	cbz	r3, 1fcc8 <z_impl_k_sem_take+0x9c>
		sem->count--;
   1fc96:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc98:	481b      	ldr	r0, [pc, #108]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fc9a:	60a3      	str	r3, [r4, #8]
   1fc9c:	f7ff fcd6 	bl	1f64c <z_spin_unlock_valid>
   1fca0:	b958      	cbnz	r0, 1fcba <z_impl_k_sem_take+0x8e>
   1fca2:	4a1a      	ldr	r2, [pc, #104]	; (1fd0c <z_impl_k_sem_take+0xe0>)
   1fca4:	491c      	ldr	r1, [pc, #112]	; (1fd18 <z_impl_k_sem_take+0xec>)
   1fca6:	4816      	ldr	r0, [pc, #88]	; (1fd00 <z_impl_k_sem_take+0xd4>)
   1fca8:	23c2      	movs	r3, #194	; 0xc2
   1fcaa:	f003 fca6 	bl	235fa <assert_print>
   1fcae:	4916      	ldr	r1, [pc, #88]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fcb0:	481a      	ldr	r0, [pc, #104]	; (1fd1c <z_impl_k_sem_take+0xf0>)
   1fcb2:	f003 fca2 	bl	235fa <assert_print>
   1fcb6:	21c2      	movs	r1, #194	; 0xc2
   1fcb8:	e7e6      	b.n	1fc88 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   1fcba:	f387 8811 	msr	BASEPRI, r7
   1fcbe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fcc2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1fcc4:	b003      	add	sp, #12
   1fcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fcc8:	ea56 0305 	orrs.w	r3, r6, r5
   1fccc:	d10b      	bne.n	1fce6 <z_impl_k_sem_take+0xba>
   1fcce:	480e      	ldr	r0, [pc, #56]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fcd0:	f7ff fcbc 	bl	1f64c <z_spin_unlock_valid>
   1fcd4:	2800      	cmp	r0, #0
   1fcd6:	d0e4      	beq.n	1fca2 <z_impl_k_sem_take+0x76>
   1fcd8:	f387 8811 	msr	BASEPRI, r7
   1fcdc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fce0:	f06f 000f 	mvn.w	r0, #15
   1fce4:	e7ee      	b.n	1fcc4 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fce6:	e9cd 6500 	strd	r6, r5, [sp]
   1fcea:	4622      	mov	r2, r4
   1fcec:	4639      	mov	r1, r7
   1fcee:	4806      	ldr	r0, [pc, #24]	; (1fd08 <z_impl_k_sem_take+0xdc>)
   1fcf0:	f001 f998 	bl	21024 <z_pend_curr>
	return ret;
   1fcf4:	e7e6      	b.n	1fcc4 <z_impl_k_sem_take+0x98>
   1fcf6:	bf00      	nop
   1fcf8:	0002a4eb 	.word	0x0002a4eb
   1fcfc:	0002a4cb 	.word	0x0002a4cb
   1fd00:	00026f1a 	.word	0x00026f1a
   1fd04:	0002948c 	.word	0x0002948c
   1fd08:	20002efc 	.word	0x20002efc
   1fd0c:	0002730e 	.word	0x0002730e
   1fd10:	00027367 	.word	0x00027367
   1fd14:	0002737c 	.word	0x0002737c
   1fd18:	0002733b 	.word	0x0002733b
   1fd1c:	00027352 	.word	0x00027352

0001fd20 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1fd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1fd22:	4b09      	ldr	r3, [pc, #36]	; (1fd48 <k_sys_work_q_init+0x28>)
   1fd24:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1fd26:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1fd28:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1fd2a:	9300      	str	r3, [sp, #0]
   1fd2c:	4907      	ldr	r1, [pc, #28]	; (1fd4c <k_sys_work_q_init+0x2c>)
   1fd2e:	4808      	ldr	r0, [pc, #32]	; (1fd50 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1fd30:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1fd34:	f04f 33ff 	mov.w	r3, #4294967295
   1fd38:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fd3c:	f000 fac0 	bl	202c0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1fd40:	4620      	mov	r0, r4
   1fd42:	b004      	add	sp, #16
   1fd44:	bd10      	pop	{r4, pc}
   1fd46:	bf00      	nop
   1fd48:	0002a539 	.word	0x0002a539
   1fd4c:	20007800 	.word	0x20007800
   1fd50:	20002a68 	.word	0x20002a68

0001fd54 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fd58:	4e6e      	ldr	r6, [pc, #440]	; (1ff14 <work_queue_main+0x1c0>)
	return list->head;
   1fd5a:	4f6f      	ldr	r7, [pc, #444]	; (1ff18 <work_queue_main+0x1c4>)
   1fd5c:	b085      	sub	sp, #20
   1fd5e:	4604      	mov	r4, r0
	__asm__ volatile(
   1fd60:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fd64:	f3ef 8811 	mrs	r8, BASEPRI
   1fd68:	f383 8812 	msr	BASEPRI_MAX, r3
   1fd6c:	f3bf 8f6f 	isb	sy
   1fd70:	4630      	mov	r0, r6
   1fd72:	f7ff fc5d 	bl	1f630 <z_spin_lock_valid>
   1fd76:	b968      	cbnz	r0, 1fd94 <work_queue_main+0x40>
   1fd78:	4a68      	ldr	r2, [pc, #416]	; (1ff1c <work_queue_main+0x1c8>)
   1fd7a:	4969      	ldr	r1, [pc, #420]	; (1ff20 <work_queue_main+0x1cc>)
   1fd7c:	4869      	ldr	r0, [pc, #420]	; (1ff24 <work_queue_main+0x1d0>)
   1fd7e:	2394      	movs	r3, #148	; 0x94
   1fd80:	f003 fc3b 	bl	235fa <assert_print>
   1fd84:	4963      	ldr	r1, [pc, #396]	; (1ff14 <work_queue_main+0x1c0>)
   1fd86:	4868      	ldr	r0, [pc, #416]	; (1ff28 <work_queue_main+0x1d4>)
   1fd88:	f003 fc37 	bl	235fa <assert_print>
   1fd8c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd8e:	4863      	ldr	r0, [pc, #396]	; (1ff1c <work_queue_main+0x1c8>)
   1fd90:	f003 fc2c 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd94:	4630      	mov	r0, r6
   1fd96:	f7ff fc69 	bl	1f66c <z_spin_lock_set_owner>
   1fd9a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1fd9e:	b9ad      	cbnz	r5, 1fdcc <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1fda0:	2102      	movs	r1, #2
   1fda2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1fda6:	f005 ff42 	bl	25c2e <flag_test_and_clear>
   1fdaa:	2800      	cmp	r0, #0
   1fdac:	d135      	bne.n	1fe1a <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1fdae:	2300      	movs	r3, #0
   1fdb0:	9302      	str	r3, [sp, #8]
   1fdb2:	f04f 32ff 	mov.w	r2, #4294967295
   1fdb6:	f04f 33ff 	mov.w	r3, #4294967295
   1fdba:	e9cd 2300 	strd	r2, r3, [sp]
   1fdbe:	4641      	mov	r1, r8
   1fdc0:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1fdc4:	4630      	mov	r0, r6
   1fdc6:	f001 fe9f 	bl	21b08 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   1fdca:	e7c9      	b.n	1fd60 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fdcc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1fdd0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1fdd2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fdd6:	4295      	cmp	r5, r2
	list->tail = node;
   1fdd8:	bf08      	it	eq
   1fdda:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1fdde:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1fde2:	f043 0302 	orr.w	r3, r3, #2
   1fde6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1fdea:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   1fdec:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   1fdf0:	f023 0304 	bic.w	r3, r3, #4
   1fdf4:	f043 0301 	orr.w	r3, r3, #1
   1fdf8:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fdfa:	4630      	mov	r0, r6
   1fdfc:	f7ff fc26 	bl	1f64c <z_spin_unlock_valid>
   1fe00:	b9a8      	cbnz	r0, 1fe2e <work_queue_main+0xda>
   1fe02:	4a46      	ldr	r2, [pc, #280]	; (1ff1c <work_queue_main+0x1c8>)
   1fe04:	4949      	ldr	r1, [pc, #292]	; (1ff2c <work_queue_main+0x1d8>)
   1fe06:	4847      	ldr	r0, [pc, #284]	; (1ff24 <work_queue_main+0x1d0>)
   1fe08:	23c2      	movs	r3, #194	; 0xc2
   1fe0a:	f003 fbf6 	bl	235fa <assert_print>
   1fe0e:	4941      	ldr	r1, [pc, #260]	; (1ff14 <work_queue_main+0x1c0>)
   1fe10:	4847      	ldr	r0, [pc, #284]	; (1ff30 <work_queue_main+0x1dc>)
   1fe12:	f003 fbf2 	bl	235fa <assert_print>
   1fe16:	21c2      	movs	r1, #194	; 0xc2
   1fe18:	e7b9      	b.n	1fd8e <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1fe1a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1fe1e:	2200      	movs	r2, #0
   1fe20:	2101      	movs	r1, #1
   1fe22:	4628      	mov	r0, r5
   1fe24:	f001 fe12 	bl	21a4c <z_sched_wake>
   1fe28:	2800      	cmp	r0, #0
   1fe2a:	d1f8      	bne.n	1fe1e <work_queue_main+0xca>
   1fe2c:	e7bf      	b.n	1fdae <work_queue_main+0x5a>
	__asm__ volatile(
   1fe2e:	f388 8811 	msr	BASEPRI, r8
   1fe32:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   1fe36:	f1b9 0f00 	cmp.w	r9, #0
   1fe3a:	d10a      	bne.n	1fe52 <work_queue_main+0xfe>
   1fe3c:	493d      	ldr	r1, [pc, #244]	; (1ff34 <work_queue_main+0x1e0>)
   1fe3e:	4839      	ldr	r0, [pc, #228]	; (1ff24 <work_queue_main+0x1d0>)
   1fe40:	4a3d      	ldr	r2, [pc, #244]	; (1ff38 <work_queue_main+0x1e4>)
   1fe42:	f240 239b 	movw	r3, #667	; 0x29b
   1fe46:	f003 fbd8 	bl	235fa <assert_print>
   1fe4a:	483b      	ldr	r0, [pc, #236]	; (1ff38 <work_queue_main+0x1e4>)
   1fe4c:	f240 219b 	movw	r1, #667	; 0x29b
   1fe50:	e79e      	b.n	1fd90 <work_queue_main+0x3c>
		handler(work);
   1fe52:	4628      	mov	r0, r5
   1fe54:	47c8      	blx	r9
	__asm__ volatile(
   1fe56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe5a:	f3ef 8a11 	mrs	sl, BASEPRI
   1fe5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe66:	4630      	mov	r0, r6
   1fe68:	f7ff fbe2 	bl	1f630 <z_spin_lock_valid>
   1fe6c:	2800      	cmp	r0, #0
   1fe6e:	d083      	beq.n	1fd78 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   1fe70:	4630      	mov	r0, r6
   1fe72:	f7ff fbfb 	bl	1f66c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   1fe76:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fe78:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1fe7a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fe7e:	d417      	bmi.n	1feb0 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   1fe80:	60ea      	str	r2, [r5, #12]
   1fe82:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1fe86:	f023 0302 	bic.w	r3, r3, #2
   1fe8a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe8e:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   1fe90:	f3c3 2500 	ubfx	r5, r3, #8, #1
   1fe94:	f7ff fbda 	bl	1f64c <z_spin_unlock_valid>
   1fe98:	2800      	cmp	r0, #0
   1fe9a:	d0b2      	beq.n	1fe02 <work_queue_main+0xae>
	__asm__ volatile(
   1fe9c:	f38a 8811 	msr	BASEPRI, sl
   1fea0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1fea4:	2d00      	cmp	r5, #0
   1fea6:	f47f af5b 	bne.w	1fd60 <work_queue_main+0xc>
	z_impl_k_yield();
   1feaa:	f001 fb93 	bl	215d4 <z_impl_k_yield>
}
   1feae:	e757      	b.n	1fd60 <work_queue_main+0xc>
	return list->head;
   1feb0:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   1feb2:	f023 0303 	bic.w	r3, r3, #3
   1feb6:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1feb8:	2800      	cmp	r0, #0
   1feba:	d0e2      	beq.n	1fe82 <work_queue_main+0x12e>
	return node->next;
   1febc:	f04f 0800 	mov.w	r8, #0
   1fec0:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   1fec4:	46c3      	mov	fp, r8
   1fec6:	2800      	cmp	r0, #0
   1fec8:	d0db      	beq.n	1fe82 <work_queue_main+0x12e>
		if (wc->work == work) {
   1feca:	6843      	ldr	r3, [r0, #4]
   1fecc:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1fece:	4602      	mov	r2, r0
		if (wc->work == work) {
   1fed0:	d10d      	bne.n	1feee <work_queue_main+0x19a>
	return node->next;
   1fed2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fed4:	f1b8 0f00 	cmp.w	r8, #0
   1fed8:	d112      	bne.n	1ff00 <work_queue_main+0x1ac>
   1feda:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   1fedc:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1fede:	4283      	cmp	r3, r0
   1fee0:	d100      	bne.n	1fee4 <work_queue_main+0x190>
	list->tail = node;
   1fee2:	607a      	str	r2, [r7, #4]
	parent->next = child;
   1fee4:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   1fee8:	f7ff fe5c 	bl	1fba4 <z_impl_k_sem_give>
}
   1feec:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1feee:	f1b9 0f00 	cmp.w	r9, #0
   1fef2:	d00d      	beq.n	1ff10 <work_queue_main+0x1bc>
	return node->next;
   1fef4:	f8d9 3000 	ldr.w	r3, [r9]
   1fef8:	4648      	mov	r0, r9
   1fefa:	4690      	mov	r8, r2
   1fefc:	4699      	mov	r9, r3
   1fefe:	e7e2      	b.n	1fec6 <work_queue_main+0x172>
	parent->next = child;
   1ff00:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1ff04:	687b      	ldr	r3, [r7, #4]
   1ff06:	4283      	cmp	r3, r0
	list->tail = node;
   1ff08:	bf08      	it	eq
   1ff0a:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   1ff0e:	e7e9      	b.n	1fee4 <work_queue_main+0x190>
   1ff10:	464b      	mov	r3, r9
   1ff12:	e7f1      	b.n	1fef8 <work_queue_main+0x1a4>
   1ff14:	20002f08 	.word	0x20002f08
   1ff18:	20002f00 	.word	0x20002f00
   1ff1c:	0002730e 	.word	0x0002730e
   1ff20:	00027367 	.word	0x00027367
   1ff24:	00026f1a 	.word	0x00026f1a
   1ff28:	0002737c 	.word	0x0002737c
   1ff2c:	0002733b 	.word	0x0002733b
   1ff30:	00027352 	.word	0x00027352
   1ff34:	0002a563 	.word	0x0002a563
   1ff38:	0002a542 	.word	0x0002a542

0001ff3c <cancel_sync_locked>:
{
   1ff3c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ff3e:	68c3      	ldr	r3, [r0, #12]
   1ff40:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1ff44:	079b      	lsls	r3, r3, #30
{
   1ff46:	4605      	mov	r5, r0
   1ff48:	460c      	mov	r4, r1
	if (ret) {
   1ff4a:	d50d      	bpl.n	1ff68 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ff4c:	2201      	movs	r2, #1
   1ff4e:	2100      	movs	r1, #0
   1ff50:	f104 0008 	add.w	r0, r4, #8
   1ff54:	f005 fe5b 	bl	25c0e <z_impl_k_sem_init>
	parent->next = child;
   1ff58:	2300      	movs	r3, #0
   1ff5a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ff5c:	4b05      	ldr	r3, [pc, #20]	; (1ff74 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1ff5e:	6065      	str	r5, [r4, #4]
   1ff60:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1ff62:	b91a      	cbnz	r2, 1ff6c <cancel_sync_locked+0x30>
	list->head = node;
   1ff64:	e9c3 4400 	strd	r4, r4, [r3]
}
   1ff68:	4630      	mov	r0, r6
   1ff6a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1ff6c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1ff6e:	605c      	str	r4, [r3, #4]
}
   1ff70:	e7fa      	b.n	1ff68 <cancel_sync_locked+0x2c>
   1ff72:	bf00      	nop
   1ff74:	20002f00 	.word	0x20002f00

0001ff78 <submit_to_queue_locked>:
{
   1ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ff7a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ff7c:	079a      	lsls	r2, r3, #30
{
   1ff7e:	4604      	mov	r4, r0
   1ff80:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ff82:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1ff86:	d439      	bmi.n	1fffc <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1ff88:	075b      	lsls	r3, r3, #29
   1ff8a:	d425      	bmi.n	1ffd8 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   1ff8c:	680b      	ldr	r3, [r1, #0]
   1ff8e:	b90b      	cbnz	r3, 1ff94 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1ff90:	6883      	ldr	r3, [r0, #8]
   1ff92:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1ff94:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1ff96:	07dd      	lsls	r5, r3, #31
   1ff98:	d521      	bpl.n	1ffde <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   1ff9a:	68a3      	ldr	r3, [r4, #8]
   1ff9c:	b95b      	cbnz	r3, 1ffb6 <submit_to_queue_locked+0x3e>
   1ff9e:	4928      	ldr	r1, [pc, #160]	; (20040 <submit_to_queue_locked+0xc8>)
   1ffa0:	4828      	ldr	r0, [pc, #160]	; (20044 <submit_to_queue_locked+0xcc>)
   1ffa2:	4a29      	ldr	r2, [pc, #164]	; (20048 <submit_to_queue_locked+0xd0>)
   1ffa4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1ffa8:	f003 fb27 	bl	235fa <assert_print>
   1ffac:	4826      	ldr	r0, [pc, #152]	; (20048 <submit_to_queue_locked+0xd0>)
   1ffae:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   1ffb2:	f003 fb1b 	bl	235ec <assert_post_action>
			*queuep = work->queue;
   1ffb6:	603b      	str	r3, [r7, #0]
			ret = 2;
   1ffb8:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   1ffba:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   1ffbc:	2d00      	cmp	r5, #0
   1ffbe:	d03c      	beq.n	2003a <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ffc0:	4b22      	ldr	r3, [pc, #136]	; (2004c <submit_to_queue_locked+0xd4>)
   1ffc2:	689b      	ldr	r3, [r3, #8]
   1ffc4:	42ab      	cmp	r3, r5
   1ffc6:	d00c      	beq.n	1ffe2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1ffc8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ffcc:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1ffce:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ffd2:	d416      	bmi.n	20002 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   1ffd4:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1ffd8:	2300      	movs	r3, #0
   1ffda:	603b      	str	r3, [r7, #0]
	return ret;
   1ffdc:	e027      	b.n	2002e <submit_to_queue_locked+0xb6>
		ret = 1;
   1ffde:	2601      	movs	r6, #1
   1ffe0:	e7eb      	b.n	1ffba <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1ffe2:	f005 fdc6 	bl	25b72 <k_is_in_isr>
   1ffe6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1ffea:	2800      	cmp	r0, #0
   1ffec:	d1ee      	bne.n	1ffcc <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1ffee:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1fff0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fff4:	d5ee      	bpl.n	1ffd4 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   1fff6:	b152      	cbz	r2, 2000e <submit_to_queue_locked+0x96>
   1fff8:	075b      	lsls	r3, r3, #29
   1fffa:	d408      	bmi.n	2000e <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   1fffc:	f06f 060f 	mvn.w	r6, #15
   20000:	e7ea      	b.n	1ffd8 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   20002:	2a00      	cmp	r2, #0
   20004:	d1fa      	bne.n	1fffc <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   20006:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   2000a:	2b00      	cmp	r3, #0
   2000c:	d1f6      	bne.n	1fffc <submit_to_queue_locked+0x84>
	parent->next = child;
   2000e:	2300      	movs	r3, #0
   20010:	6023      	str	r3, [r4, #0]
	return list->tail;
   20012:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   20016:	b963      	cbnz	r3, 20032 <submit_to_queue_locked+0xba>
	list->head = node;
   20018:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2001c:	4628      	mov	r0, r5
   2001e:	f005 fe20 	bl	25c62 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   20022:	68e3      	ldr	r3, [r4, #12]
   20024:	f043 0304 	orr.w	r3, r3, #4
   20028:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2002a:	683b      	ldr	r3, [r7, #0]
   2002c:	60a3      	str	r3, [r4, #8]
}
   2002e:	4630      	mov	r0, r6
   20030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   20032:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20034:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   20038:	e7f0      	b.n	2001c <submit_to_queue_locked+0xa4>
		return -EINVAL;
   2003a:	f06f 0615 	mvn.w	r6, #21
   2003e:	e7cb      	b.n	1ffd8 <submit_to_queue_locked+0x60>
   20040:	0002a57a 	.word	0x0002a57a
   20044:	00026f1a 	.word	0x00026f1a
   20048:	0002a542 	.word	0x0002a542
   2004c:	20002ed4 	.word	0x20002ed4

00020050 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   20050:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20052:	4604      	mov	r4, r0
	__asm__ volatile(
   20054:	f04f 0340 	mov.w	r3, #64	; 0x40
   20058:	f3ef 8511 	mrs	r5, BASEPRI
   2005c:	f383 8812 	msr	BASEPRI_MAX, r3
   20060:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20064:	481c      	ldr	r0, [pc, #112]	; (200d8 <work_timeout+0x88>)
   20066:	f7ff fae3 	bl	1f630 <z_spin_lock_valid>
   2006a:	b968      	cbnz	r0, 20088 <work_timeout+0x38>
   2006c:	4a1b      	ldr	r2, [pc, #108]	; (200dc <work_timeout+0x8c>)
   2006e:	491c      	ldr	r1, [pc, #112]	; (200e0 <work_timeout+0x90>)
   20070:	481c      	ldr	r0, [pc, #112]	; (200e4 <work_timeout+0x94>)
   20072:	2394      	movs	r3, #148	; 0x94
   20074:	f003 fac1 	bl	235fa <assert_print>
   20078:	4917      	ldr	r1, [pc, #92]	; (200d8 <work_timeout+0x88>)
   2007a:	481b      	ldr	r0, [pc, #108]	; (200e8 <work_timeout+0x98>)
   2007c:	f003 fabd 	bl	235fa <assert_print>
   20080:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20082:	4816      	ldr	r0, [pc, #88]	; (200dc <work_timeout+0x8c>)
   20084:	f003 fab2 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   20088:	4813      	ldr	r0, [pc, #76]	; (200d8 <work_timeout+0x88>)
   2008a:	f7ff faef 	bl	1f66c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2008e:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20090:	2103      	movs	r1, #3
   20092:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20094:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20096:	f1a4 0610 	sub.w	r6, r4, #16
   2009a:	f005 fdc8 	bl	25c2e <flag_test_and_clear>
   2009e:	b128      	cbz	r0, 200ac <work_timeout+0x5c>
		queue = dw->queue;
   200a0:	69a3      	ldr	r3, [r4, #24]
   200a2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   200a4:	a901      	add	r1, sp, #4
   200a6:	4630      	mov	r0, r6
   200a8:	f7ff ff66 	bl	1ff78 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   200ac:	480a      	ldr	r0, [pc, #40]	; (200d8 <work_timeout+0x88>)
   200ae:	f7ff facd 	bl	1f64c <z_spin_unlock_valid>
   200b2:	b958      	cbnz	r0, 200cc <work_timeout+0x7c>
   200b4:	4a09      	ldr	r2, [pc, #36]	; (200dc <work_timeout+0x8c>)
   200b6:	490d      	ldr	r1, [pc, #52]	; (200ec <work_timeout+0x9c>)
   200b8:	480a      	ldr	r0, [pc, #40]	; (200e4 <work_timeout+0x94>)
   200ba:	23c2      	movs	r3, #194	; 0xc2
   200bc:	f003 fa9d 	bl	235fa <assert_print>
   200c0:	4905      	ldr	r1, [pc, #20]	; (200d8 <work_timeout+0x88>)
   200c2:	480b      	ldr	r0, [pc, #44]	; (200f0 <work_timeout+0xa0>)
   200c4:	f003 fa99 	bl	235fa <assert_print>
   200c8:	21c2      	movs	r1, #194	; 0xc2
   200ca:	e7da      	b.n	20082 <work_timeout+0x32>
	__asm__ volatile(
   200cc:	f385 8811 	msr	BASEPRI, r5
   200d0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   200d4:	b002      	add	sp, #8
   200d6:	bd70      	pop	{r4, r5, r6, pc}
   200d8:	20002f08 	.word	0x20002f08
   200dc:	0002730e 	.word	0x0002730e
   200e0:	00027367 	.word	0x00027367
   200e4:	00026f1a 	.word	0x00026f1a
   200e8:	0002737c 	.word	0x0002737c
   200ec:	0002733b 	.word	0x0002733b
   200f0:	00027352 	.word	0x00027352

000200f4 <k_work_init>:
{
   200f4:	b538      	push	{r3, r4, r5, lr}
   200f6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   200f8:	4604      	mov	r4, r0
   200fa:	b948      	cbnz	r0, 20110 <k_work_init+0x1c>
   200fc:	490c      	ldr	r1, [pc, #48]	; (20130 <k_work_init+0x3c>)
   200fe:	4a0d      	ldr	r2, [pc, #52]	; (20134 <k_work_init+0x40>)
   20100:	480d      	ldr	r0, [pc, #52]	; (20138 <k_work_init+0x44>)
   20102:	2389      	movs	r3, #137	; 0x89
   20104:	f003 fa79 	bl	235fa <assert_print>
   20108:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   2010a:	480a      	ldr	r0, [pc, #40]	; (20134 <k_work_init+0x40>)
   2010c:	f003 fa6e 	bl	235ec <assert_post_action>
   20110:	b939      	cbnz	r1, 20122 <k_work_init+0x2e>
   20112:	490a      	ldr	r1, [pc, #40]	; (2013c <k_work_init+0x48>)
   20114:	4a07      	ldr	r2, [pc, #28]	; (20134 <k_work_init+0x40>)
   20116:	4808      	ldr	r0, [pc, #32]	; (20138 <k_work_init+0x44>)
   20118:	238a      	movs	r3, #138	; 0x8a
   2011a:	f003 fa6e 	bl	235fa <assert_print>
   2011e:	218a      	movs	r1, #138	; 0x8a
   20120:	e7f3      	b.n	2010a <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20122:	2210      	movs	r2, #16
   20124:	2100      	movs	r1, #0
   20126:	f003 fe80 	bl	23e2a <memset>
   2012a:	6065      	str	r5, [r4, #4]
}
   2012c:	bd38      	pop	{r3, r4, r5, pc}
   2012e:	bf00      	nop
   20130:	0002a619 	.word	0x0002a619
   20134:	0002a542 	.word	0x0002a542
   20138:	00026f1a 	.word	0x00026f1a
   2013c:	0002a563 	.word	0x0002a563

00020140 <k_work_busy_get>:
{
   20140:	b538      	push	{r3, r4, r5, lr}
   20142:	4604      	mov	r4, r0
	__asm__ volatile(
   20144:	f04f 0340 	mov.w	r3, #64	; 0x40
   20148:	f3ef 8511 	mrs	r5, BASEPRI
   2014c:	f383 8812 	msr	BASEPRI_MAX, r3
   20150:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20154:	4816      	ldr	r0, [pc, #88]	; (201b0 <k_work_busy_get+0x70>)
   20156:	f7ff fa6b 	bl	1f630 <z_spin_lock_valid>
   2015a:	b968      	cbnz	r0, 20178 <k_work_busy_get+0x38>
   2015c:	4a15      	ldr	r2, [pc, #84]	; (201b4 <k_work_busy_get+0x74>)
   2015e:	4916      	ldr	r1, [pc, #88]	; (201b8 <k_work_busy_get+0x78>)
   20160:	4816      	ldr	r0, [pc, #88]	; (201bc <k_work_busy_get+0x7c>)
   20162:	2394      	movs	r3, #148	; 0x94
   20164:	f003 fa49 	bl	235fa <assert_print>
   20168:	4911      	ldr	r1, [pc, #68]	; (201b0 <k_work_busy_get+0x70>)
   2016a:	4815      	ldr	r0, [pc, #84]	; (201c0 <k_work_busy_get+0x80>)
   2016c:	f003 fa45 	bl	235fa <assert_print>
   20170:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20172:	4810      	ldr	r0, [pc, #64]	; (201b4 <k_work_busy_get+0x74>)
   20174:	f003 fa3a 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   20178:	480d      	ldr	r0, [pc, #52]	; (201b0 <k_work_busy_get+0x70>)
   2017a:	f7ff fa77 	bl	1f66c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   2017e:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20180:	480b      	ldr	r0, [pc, #44]	; (201b0 <k_work_busy_get+0x70>)
   20182:	f004 040f 	and.w	r4, r4, #15
   20186:	f7ff fa61 	bl	1f64c <z_spin_unlock_valid>
   2018a:	b958      	cbnz	r0, 201a4 <k_work_busy_get+0x64>
   2018c:	4a09      	ldr	r2, [pc, #36]	; (201b4 <k_work_busy_get+0x74>)
   2018e:	490d      	ldr	r1, [pc, #52]	; (201c4 <k_work_busy_get+0x84>)
   20190:	480a      	ldr	r0, [pc, #40]	; (201bc <k_work_busy_get+0x7c>)
   20192:	23c2      	movs	r3, #194	; 0xc2
   20194:	f003 fa31 	bl	235fa <assert_print>
   20198:	4905      	ldr	r1, [pc, #20]	; (201b0 <k_work_busy_get+0x70>)
   2019a:	480b      	ldr	r0, [pc, #44]	; (201c8 <k_work_busy_get+0x88>)
   2019c:	f003 fa2d 	bl	235fa <assert_print>
   201a0:	21c2      	movs	r1, #194	; 0xc2
   201a2:	e7e6      	b.n	20172 <k_work_busy_get+0x32>
	__asm__ volatile(
   201a4:	f385 8811 	msr	BASEPRI, r5
   201a8:	f3bf 8f6f 	isb	sy
}
   201ac:	4620      	mov	r0, r4
   201ae:	bd38      	pop	{r3, r4, r5, pc}
   201b0:	20002f08 	.word	0x20002f08
   201b4:	0002730e 	.word	0x0002730e
   201b8:	00027367 	.word	0x00027367
   201bc:	00026f1a 	.word	0x00026f1a
   201c0:	0002737c 	.word	0x0002737c
   201c4:	0002733b 	.word	0x0002733b
   201c8:	00027352 	.word	0x00027352

000201cc <z_work_submit_to_queue>:
{
   201cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   201ce:	460c      	mov	r4, r1
{
   201d0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   201d2:	b959      	cbnz	r1, 201ec <z_work_submit_to_queue+0x20>
   201d4:	4921      	ldr	r1, [pc, #132]	; (2025c <z_work_submit_to_queue+0x90>)
   201d6:	4822      	ldr	r0, [pc, #136]	; (20260 <z_work_submit_to_queue+0x94>)
   201d8:	4a22      	ldr	r2, [pc, #136]	; (20264 <z_work_submit_to_queue+0x98>)
   201da:	f44f 73ba 	mov.w	r3, #372	; 0x174
   201de:	f003 fa0c 	bl	235fa <assert_print>
   201e2:	4820      	ldr	r0, [pc, #128]	; (20264 <z_work_submit_to_queue+0x98>)
   201e4:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201e8:	f003 fa00 	bl	235ec <assert_post_action>
	__asm__ volatile(
   201ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   201f0:	f3ef 8511 	mrs	r5, BASEPRI
   201f4:	f383 8812 	msr	BASEPRI_MAX, r3
   201f8:	f3bf 8f6f 	isb	sy
   201fc:	481a      	ldr	r0, [pc, #104]	; (20268 <z_work_submit_to_queue+0x9c>)
   201fe:	f7ff fa17 	bl	1f630 <z_spin_lock_valid>
   20202:	b960      	cbnz	r0, 2021e <z_work_submit_to_queue+0x52>
   20204:	4a19      	ldr	r2, [pc, #100]	; (2026c <z_work_submit_to_queue+0xa0>)
   20206:	491a      	ldr	r1, [pc, #104]	; (20270 <z_work_submit_to_queue+0xa4>)
   20208:	4815      	ldr	r0, [pc, #84]	; (20260 <z_work_submit_to_queue+0x94>)
   2020a:	2394      	movs	r3, #148	; 0x94
   2020c:	f003 f9f5 	bl	235fa <assert_print>
   20210:	4915      	ldr	r1, [pc, #84]	; (20268 <z_work_submit_to_queue+0x9c>)
   20212:	4818      	ldr	r0, [pc, #96]	; (20274 <z_work_submit_to_queue+0xa8>)
   20214:	f003 f9f1 	bl	235fa <assert_print>
   20218:	2194      	movs	r1, #148	; 0x94
   2021a:	4814      	ldr	r0, [pc, #80]	; (2026c <z_work_submit_to_queue+0xa0>)
   2021c:	e7e4      	b.n	201e8 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   2021e:	4812      	ldr	r0, [pc, #72]	; (20268 <z_work_submit_to_queue+0x9c>)
   20220:	f7ff fa24 	bl	1f66c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   20224:	4620      	mov	r0, r4
   20226:	a901      	add	r1, sp, #4
   20228:	f7ff fea6 	bl	1ff78 <submit_to_queue_locked>
   2022c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2022e:	480e      	ldr	r0, [pc, #56]	; (20268 <z_work_submit_to_queue+0x9c>)
   20230:	f7ff fa0c 	bl	1f64c <z_spin_unlock_valid>
   20234:	b958      	cbnz	r0, 2024e <z_work_submit_to_queue+0x82>
   20236:	4a0d      	ldr	r2, [pc, #52]	; (2026c <z_work_submit_to_queue+0xa0>)
   20238:	490f      	ldr	r1, [pc, #60]	; (20278 <z_work_submit_to_queue+0xac>)
   2023a:	4809      	ldr	r0, [pc, #36]	; (20260 <z_work_submit_to_queue+0x94>)
   2023c:	23c2      	movs	r3, #194	; 0xc2
   2023e:	f003 f9dc 	bl	235fa <assert_print>
   20242:	4909      	ldr	r1, [pc, #36]	; (20268 <z_work_submit_to_queue+0x9c>)
   20244:	480d      	ldr	r0, [pc, #52]	; (2027c <z_work_submit_to_queue+0xb0>)
   20246:	f003 f9d8 	bl	235fa <assert_print>
   2024a:	21c2      	movs	r1, #194	; 0xc2
   2024c:	e7e5      	b.n	2021a <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   2024e:	f385 8811 	msr	BASEPRI, r5
   20252:	f3bf 8f6f 	isb	sy
}
   20256:	4620      	mov	r0, r4
   20258:	b003      	add	sp, #12
   2025a:	bd30      	pop	{r4, r5, pc}
   2025c:	0002a619 	.word	0x0002a619
   20260:	00026f1a 	.word	0x00026f1a
   20264:	0002a542 	.word	0x0002a542
   20268:	20002f08 	.word	0x20002f08
   2026c:	0002730e 	.word	0x0002730e
   20270:	00027367 	.word	0x00027367
   20274:	0002737c 	.word	0x0002737c
   20278:	0002733b 	.word	0x0002733b
   2027c:	00027352 	.word	0x00027352

00020280 <k_work_submit>:
{
   20280:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20282:	4801      	ldr	r0, [pc, #4]	; (20288 <k_work_submit+0x8>)
   20284:	f005 bd27 	b.w	25cd6 <k_work_submit_to_queue>
   20288:	20002a68 	.word	0x20002a68

0002028c <k_work_queue_init>:
{
   2028c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   2028e:	b958      	cbnz	r0, 202a8 <k_work_queue_init+0x1c>
   20290:	4908      	ldr	r1, [pc, #32]	; (202b4 <k_work_queue_init+0x28>)
   20292:	4809      	ldr	r0, [pc, #36]	; (202b8 <k_work_queue_init+0x2c>)
   20294:	4a09      	ldr	r2, [pc, #36]	; (202bc <k_work_queue_init+0x30>)
   20296:	f240 23b9 	movw	r3, #697	; 0x2b9
   2029a:	f003 f9ae 	bl	235fa <assert_print>
   2029e:	4807      	ldr	r0, [pc, #28]	; (202bc <k_work_queue_init+0x30>)
   202a0:	f240 21b9 	movw	r1, #697	; 0x2b9
   202a4:	f003 f9a2 	bl	235ec <assert_post_action>
	*queue = (struct k_work_q) {
   202a8:	22a0      	movs	r2, #160	; 0xa0
   202aa:	2100      	movs	r1, #0
   202ac:	f003 fdbd 	bl	23e2a <memset>
}
   202b0:	bd08      	pop	{r3, pc}
   202b2:	bf00      	nop
   202b4:	0002a580 	.word	0x0002a580
   202b8:	00026f1a 	.word	0x00026f1a
   202bc:	0002a542 	.word	0x0002a542

000202c0 <k_work_queue_start>:
{
   202c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   202c2:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   202c4:	4604      	mov	r4, r0
{
   202c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   202c8:	b958      	cbnz	r0, 202e2 <k_work_queue_start+0x22>
   202ca:	492b      	ldr	r1, [pc, #172]	; (20378 <k_work_queue_start+0xb8>)
   202cc:	4a2b      	ldr	r2, [pc, #172]	; (2037c <k_work_queue_start+0xbc>)
   202ce:	482c      	ldr	r0, [pc, #176]	; (20380 <k_work_queue_start+0xc0>)
   202d0:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   202d4:	f003 f991 	bl	235fa <assert_print>
   202d8:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   202dc:	4827      	ldr	r0, [pc, #156]	; (2037c <k_work_queue_start+0xbc>)
   202de:	f003 f985 	bl	235ec <assert_post_action>
   202e2:	b949      	cbnz	r1, 202f8 <k_work_queue_start+0x38>
   202e4:	4927      	ldr	r1, [pc, #156]	; (20384 <k_work_queue_start+0xc4>)
   202e6:	4a25      	ldr	r2, [pc, #148]	; (2037c <k_work_queue_start+0xbc>)
   202e8:	4825      	ldr	r0, [pc, #148]	; (20380 <k_work_queue_start+0xc0>)
   202ea:	f240 23c9 	movw	r3, #713	; 0x2c9
   202ee:	f003 f984 	bl	235fa <assert_print>
   202f2:	f240 21c9 	movw	r1, #713	; 0x2c9
   202f6:	e7f1      	b.n	202dc <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   202f8:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   202fc:	f010 0001 	ands.w	r0, r0, #1
   20300:	d009      	beq.n	20316 <k_work_queue_start+0x56>
   20302:	4921      	ldr	r1, [pc, #132]	; (20388 <k_work_queue_start+0xc8>)
   20304:	4a1d      	ldr	r2, [pc, #116]	; (2037c <k_work_queue_start+0xbc>)
   20306:	481e      	ldr	r0, [pc, #120]	; (20380 <k_work_queue_start+0xc0>)
   20308:	f240 23ca 	movw	r3, #714	; 0x2ca
   2030c:	f003 f975 	bl	235fa <assert_print>
   20310:	f240 21ca 	movw	r1, #714	; 0x2ca
   20314:	e7e2      	b.n	202dc <k_work_queue_start+0x1c>
	list->tail = NULL;
   20316:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   2031a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2031e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   20322:	f104 0090 	add.w	r0, r4, #144	; 0x90
   20326:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   2032a:	b31d      	cbz	r5, 20374 <k_work_queue_start+0xb4>
   2032c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2032e:	2800      	cmp	r0, #0
   20330:	f240 1001 	movw	r0, #257	; 0x101
   20334:	bf08      	it	eq
   20336:	2001      	moveq	r0, #1
	*flagp = flags;
   20338:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2033c:	2000      	movs	r0, #0
   2033e:	f04f 36ff 	mov.w	r6, #4294967295
   20342:	f04f 37ff 	mov.w	r7, #4294967295
   20346:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2034a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2034e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   20352:	4b0e      	ldr	r3, [pc, #56]	; (2038c <k_work_queue_start+0xcc>)
   20354:	9400      	str	r4, [sp, #0]
   20356:	4620      	mov	r0, r4
   20358:	f7ff f8a0 	bl	1f49c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2035c:	b125      	cbz	r5, 20368 <k_work_queue_start+0xa8>
   2035e:	6829      	ldr	r1, [r5, #0]
   20360:	b111      	cbz	r1, 20368 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   20362:	4620      	mov	r0, r4
   20364:	f005 fc0b 	bl	25b7e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20368:	4620      	mov	r0, r4
}
   2036a:	b009      	add	sp, #36	; 0x24
   2036c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20370:	f005 bc0a 	b.w	25b88 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20374:	2001      	movs	r0, #1
   20376:	e7df      	b.n	20338 <k_work_queue_start+0x78>
   20378:	0002a5d8 	.word	0x0002a5d8
   2037c:	0002a542 	.word	0x0002a542
   20380:	00026f1a 	.word	0x00026f1a
   20384:	0002a5de 	.word	0x0002a5de
   20388:	0002a5e4 	.word	0x0002a5e4
   2038c:	0001fd55 	.word	0x0001fd55

00020390 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   20390:	b538      	push	{r3, r4, r5, lr}
   20392:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   20394:	4604      	mov	r4, r0
   20396:	b958      	cbnz	r0, 203b0 <k_work_init_delayable+0x20>
   20398:	490f      	ldr	r1, [pc, #60]	; (203d8 <k_work_init_delayable+0x48>)
   2039a:	4a10      	ldr	r2, [pc, #64]	; (203dc <k_work_init_delayable+0x4c>)
   2039c:	4810      	ldr	r0, [pc, #64]	; (203e0 <k_work_init_delayable+0x50>)
   2039e:	f44f 7350 	mov.w	r3, #832	; 0x340
   203a2:	f003 f92a 	bl	235fa <assert_print>
   203a6:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   203aa:	480c      	ldr	r0, [pc, #48]	; (203dc <k_work_init_delayable+0x4c>)
   203ac:	f003 f91e 	bl	235ec <assert_post_action>
   203b0:	b949      	cbnz	r1, 203c6 <k_work_init_delayable+0x36>
   203b2:	490c      	ldr	r1, [pc, #48]	; (203e4 <k_work_init_delayable+0x54>)
   203b4:	4a09      	ldr	r2, [pc, #36]	; (203dc <k_work_init_delayable+0x4c>)
   203b6:	480a      	ldr	r0, [pc, #40]	; (203e0 <k_work_init_delayable+0x50>)
   203b8:	f240 3341 	movw	r3, #833	; 0x341
   203bc:	f003 f91d 	bl	235fa <assert_print>
   203c0:	f240 3141 	movw	r1, #833	; 0x341
   203c4:	e7f1      	b.n	203aa <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   203c6:	2230      	movs	r2, #48	; 0x30
   203c8:	2100      	movs	r1, #0
   203ca:	f003 fd2e 	bl	23e2a <memset>
   203ce:	f44f 7380 	mov.w	r3, #256	; 0x100
   203d2:	6065      	str	r5, [r4, #4]
   203d4:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   203d6:	bd38      	pop	{r3, r4, r5, pc}
   203d8:	0002a618 	.word	0x0002a618
   203dc:	0002a542 	.word	0x0002a542
   203e0:	00026f1a 	.word	0x00026f1a
   203e4:	0002a563 	.word	0x0002a563

000203e8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   203e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   203ea:	4616      	mov	r6, r2
   203ec:	9001      	str	r0, [sp, #4]
   203ee:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   203f0:	460c      	mov	r4, r1
   203f2:	b959      	cbnz	r1, 2040c <k_work_schedule_for_queue+0x24>
   203f4:	492d      	ldr	r1, [pc, #180]	; (204ac <k_work_schedule_for_queue+0xc4>)
   203f6:	482e      	ldr	r0, [pc, #184]	; (204b0 <k_work_schedule_for_queue+0xc8>)
   203f8:	4a2e      	ldr	r2, [pc, #184]	; (204b4 <k_work_schedule_for_queue+0xcc>)
   203fa:	f240 33ba 	movw	r3, #954	; 0x3ba
   203fe:	f003 f8fc 	bl	235fa <assert_print>
   20402:	482c      	ldr	r0, [pc, #176]	; (204b4 <k_work_schedule_for_queue+0xcc>)
   20404:	f240 31ba 	movw	r1, #954	; 0x3ba
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20408:	f003 f8f0 	bl	235ec <assert_post_action>
	__asm__ volatile(
   2040c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20410:	f3ef 8711 	mrs	r7, BASEPRI
   20414:	f383 8812 	msr	BASEPRI_MAX, r3
   20418:	f3bf 8f6f 	isb	sy
   2041c:	4826      	ldr	r0, [pc, #152]	; (204b8 <k_work_schedule_for_queue+0xd0>)
   2041e:	f7ff f907 	bl	1f630 <z_spin_lock_valid>
   20422:	b960      	cbnz	r0, 2043e <k_work_schedule_for_queue+0x56>
   20424:	4a25      	ldr	r2, [pc, #148]	; (204bc <k_work_schedule_for_queue+0xd4>)
   20426:	4926      	ldr	r1, [pc, #152]	; (204c0 <k_work_schedule_for_queue+0xd8>)
   20428:	4821      	ldr	r0, [pc, #132]	; (204b0 <k_work_schedule_for_queue+0xc8>)
   2042a:	2394      	movs	r3, #148	; 0x94
   2042c:	f003 f8e5 	bl	235fa <assert_print>
   20430:	4921      	ldr	r1, [pc, #132]	; (204b8 <k_work_schedule_for_queue+0xd0>)
   20432:	4824      	ldr	r0, [pc, #144]	; (204c4 <k_work_schedule_for_queue+0xdc>)
   20434:	f003 f8e1 	bl	235fa <assert_print>
   20438:	2194      	movs	r1, #148	; 0x94
   2043a:	4820      	ldr	r0, [pc, #128]	; (204bc <k_work_schedule_for_queue+0xd4>)
   2043c:	e7e4      	b.n	20408 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2043e:	481e      	ldr	r0, [pc, #120]	; (204b8 <k_work_schedule_for_queue+0xd0>)
   20440:	f7ff f914 	bl	1f66c <z_spin_lock_set_owner>
	return *flagp;
   20444:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   20446:	f013 0f0e 	tst.w	r3, #14
   2044a:	d125      	bne.n	20498 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2044c:	ea55 0206 	orrs.w	r2, r5, r6
   20450:	d114      	bne.n	2047c <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   20452:	4620      	mov	r0, r4
   20454:	a901      	add	r1, sp, #4
   20456:	f7ff fd8f 	bl	1ff78 <submit_to_queue_locked>
   2045a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2045c:	4816      	ldr	r0, [pc, #88]	; (204b8 <k_work_schedule_for_queue+0xd0>)
   2045e:	f7ff f8f5 	bl	1f64c <z_spin_unlock_valid>
   20462:	b9d8      	cbnz	r0, 2049c <k_work_schedule_for_queue+0xb4>
   20464:	4a15      	ldr	r2, [pc, #84]	; (204bc <k_work_schedule_for_queue+0xd4>)
   20466:	4918      	ldr	r1, [pc, #96]	; (204c8 <k_work_schedule_for_queue+0xe0>)
   20468:	4811      	ldr	r0, [pc, #68]	; (204b0 <k_work_schedule_for_queue+0xc8>)
   2046a:	23c2      	movs	r3, #194	; 0xc2
   2046c:	f003 f8c5 	bl	235fa <assert_print>
   20470:	4911      	ldr	r1, [pc, #68]	; (204b8 <k_work_schedule_for_queue+0xd0>)
   20472:	4816      	ldr	r0, [pc, #88]	; (204cc <k_work_schedule_for_queue+0xe4>)
   20474:	f003 f8c1 	bl	235fa <assert_print>
   20478:	21c2      	movs	r1, #194	; 0xc2
   2047a:	e7de      	b.n	2043a <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2047c:	f043 0308 	orr.w	r3, r3, #8
   20480:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   20482:	9b01      	ldr	r3, [sp, #4]
   20484:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20486:	f104 0010 	add.w	r0, r4, #16
   2048a:	4911      	ldr	r1, [pc, #68]	; (204d0 <k_work_schedule_for_queue+0xe8>)
   2048c:	4632      	mov	r2, r6
   2048e:	462b      	mov	r3, r5
   20490:	f001 fbac 	bl	21bec <z_add_timeout>
	return ret;
   20494:	2401      	movs	r4, #1
   20496:	e7e1      	b.n	2045c <k_work_schedule_for_queue+0x74>
	int ret = 0;
   20498:	2400      	movs	r4, #0
   2049a:	e7df      	b.n	2045c <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   2049c:	f387 8811 	msr	BASEPRI, r7
   204a0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   204a4:	4620      	mov	r0, r4
   204a6:	b003      	add	sp, #12
   204a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204aa:	bf00      	nop
   204ac:	0002a618 	.word	0x0002a618
   204b0:	00026f1a 	.word	0x00026f1a
   204b4:	0002a542 	.word	0x0002a542
   204b8:	20002f08 	.word	0x20002f08
   204bc:	0002730e 	.word	0x0002730e
   204c0:	00027367 	.word	0x00027367
   204c4:	0002737c 	.word	0x0002737c
   204c8:	0002733b 	.word	0x0002733b
   204cc:	00027352 	.word	0x00027352
   204d0:	00020051 	.word	0x00020051

000204d4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   204d4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   204d6:	4801      	ldr	r0, [pc, #4]	; (204dc <k_work_schedule+0x8>)
   204d8:	f7ff bf86 	b.w	203e8 <k_work_schedule_for_queue>
   204dc:	20002a68 	.word	0x20002a68

000204e0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   204e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   204e2:	4616      	mov	r6, r2
   204e4:	9001      	str	r0, [sp, #4]
   204e6:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   204e8:	460c      	mov	r4, r1
   204ea:	b959      	cbnz	r1, 20504 <k_work_reschedule_for_queue+0x24>
   204ec:	492c      	ldr	r1, [pc, #176]	; (205a0 <k_work_reschedule_for_queue+0xc0>)
   204ee:	482d      	ldr	r0, [pc, #180]	; (205a4 <k_work_reschedule_for_queue+0xc4>)
   204f0:	4a2d      	ldr	r2, [pc, #180]	; (205a8 <k_work_reschedule_for_queue+0xc8>)
   204f2:	f240 33de 	movw	r3, #990	; 0x3de
   204f6:	f003 f880 	bl	235fa <assert_print>
   204fa:	482b      	ldr	r0, [pc, #172]	; (205a8 <k_work_reschedule_for_queue+0xc8>)
   204fc:	f240 31de 	movw	r1, #990	; 0x3de
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20500:	f003 f874 	bl	235ec <assert_post_action>
	__asm__ volatile(
   20504:	f04f 0340 	mov.w	r3, #64	; 0x40
   20508:	f3ef 8711 	mrs	r7, BASEPRI
   2050c:	f383 8812 	msr	BASEPRI_MAX, r3
   20510:	f3bf 8f6f 	isb	sy
   20514:	4825      	ldr	r0, [pc, #148]	; (205ac <k_work_reschedule_for_queue+0xcc>)
   20516:	f7ff f88b 	bl	1f630 <z_spin_lock_valid>
   2051a:	b960      	cbnz	r0, 20536 <k_work_reschedule_for_queue+0x56>
   2051c:	4a24      	ldr	r2, [pc, #144]	; (205b0 <k_work_reschedule_for_queue+0xd0>)
   2051e:	4925      	ldr	r1, [pc, #148]	; (205b4 <k_work_reschedule_for_queue+0xd4>)
   20520:	4820      	ldr	r0, [pc, #128]	; (205a4 <k_work_reschedule_for_queue+0xc4>)
   20522:	2394      	movs	r3, #148	; 0x94
   20524:	f003 f869 	bl	235fa <assert_print>
   20528:	4920      	ldr	r1, [pc, #128]	; (205ac <k_work_reschedule_for_queue+0xcc>)
   2052a:	4823      	ldr	r0, [pc, #140]	; (205b8 <k_work_reschedule_for_queue+0xd8>)
   2052c:	f003 f865 	bl	235fa <assert_print>
   20530:	2194      	movs	r1, #148	; 0x94
   20532:	481f      	ldr	r0, [pc, #124]	; (205b0 <k_work_reschedule_for_queue+0xd0>)
   20534:	e7e4      	b.n	20500 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   20536:	481d      	ldr	r0, [pc, #116]	; (205ac <k_work_reschedule_for_queue+0xcc>)
   20538:	f7ff f898 	bl	1f66c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2053c:	4620      	mov	r0, r4
   2053e:	f005 fb81 	bl	25c44 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20542:	ea55 0306 	orrs.w	r3, r5, r6
   20546:	d114      	bne.n	20572 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   20548:	4620      	mov	r0, r4
   2054a:	a901      	add	r1, sp, #4
   2054c:	f7ff fd14 	bl	1ff78 <submit_to_queue_locked>
   20550:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20552:	4816      	ldr	r0, [pc, #88]	; (205ac <k_work_reschedule_for_queue+0xcc>)
   20554:	f7ff f87a 	bl	1f64c <z_spin_unlock_valid>
   20558:	b9d0      	cbnz	r0, 20590 <k_work_reschedule_for_queue+0xb0>
   2055a:	4a15      	ldr	r2, [pc, #84]	; (205b0 <k_work_reschedule_for_queue+0xd0>)
   2055c:	4917      	ldr	r1, [pc, #92]	; (205bc <k_work_reschedule_for_queue+0xdc>)
   2055e:	4811      	ldr	r0, [pc, #68]	; (205a4 <k_work_reschedule_for_queue+0xc4>)
   20560:	23c2      	movs	r3, #194	; 0xc2
   20562:	f003 f84a 	bl	235fa <assert_print>
   20566:	4911      	ldr	r1, [pc, #68]	; (205ac <k_work_reschedule_for_queue+0xcc>)
   20568:	4815      	ldr	r0, [pc, #84]	; (205c0 <k_work_reschedule_for_queue+0xe0>)
   2056a:	f003 f846 	bl	235fa <assert_print>
   2056e:	21c2      	movs	r1, #194	; 0xc2
   20570:	e7df      	b.n	20532 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   20572:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20574:	4913      	ldr	r1, [pc, #76]	; (205c4 <k_work_reschedule_for_queue+0xe4>)
	*flagp |= BIT(bit);
   20576:	f043 0308 	orr.w	r3, r3, #8
   2057a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2057c:	9b01      	ldr	r3, [sp, #4]
   2057e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   20580:	f104 0010 	add.w	r0, r4, #16
   20584:	4632      	mov	r2, r6
   20586:	462b      	mov	r3, r5
   20588:	f001 fb30 	bl	21bec <z_add_timeout>
	return ret;
   2058c:	2401      	movs	r4, #1
   2058e:	e7e0      	b.n	20552 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   20590:	f387 8811 	msr	BASEPRI, r7
   20594:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   20598:	4620      	mov	r0, r4
   2059a:	b003      	add	sp, #12
   2059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2059e:	bf00      	nop
   205a0:	0002a618 	.word	0x0002a618
   205a4:	00026f1a 	.word	0x00026f1a
   205a8:	0002a542 	.word	0x0002a542
   205ac:	20002f08 	.word	0x20002f08
   205b0:	0002730e 	.word	0x0002730e
   205b4:	00027367 	.word	0x00027367
   205b8:	0002737c 	.word	0x0002737c
   205bc:	0002733b 	.word	0x0002733b
   205c0:	00027352 	.word	0x00027352
   205c4:	00020051 	.word	0x00020051

000205c8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   205c8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   205ca:	4801      	ldr	r0, [pc, #4]	; (205d0 <k_work_reschedule+0x8>)
   205cc:	f7ff bf88 	b.w	204e0 <k_work_reschedule_for_queue>
   205d0:	20002a68 	.word	0x20002a68

000205d4 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   205d4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   205d6:	4604      	mov	r4, r0
   205d8:	b958      	cbnz	r0, 205f2 <k_work_cancel_delayable+0x1e>
   205da:	4922      	ldr	r1, [pc, #136]	; (20664 <k_work_cancel_delayable+0x90>)
   205dc:	4822      	ldr	r0, [pc, #136]	; (20668 <k_work_cancel_delayable+0x94>)
   205de:	4a23      	ldr	r2, [pc, #140]	; (2066c <k_work_cancel_delayable+0x98>)
   205e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   205e4:	f003 f809 	bl	235fa <assert_print>
   205e8:	4820      	ldr	r0, [pc, #128]	; (2066c <k_work_cancel_delayable+0x98>)
   205ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205ee:	f002 fffd 	bl	235ec <assert_post_action>
	__asm__ volatile(
   205f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   205f6:	f3ef 8511 	mrs	r5, BASEPRI
   205fa:	f383 8812 	msr	BASEPRI_MAX, r3
   205fe:	f3bf 8f6f 	isb	sy
   20602:	481b      	ldr	r0, [pc, #108]	; (20670 <k_work_cancel_delayable+0x9c>)
   20604:	f7ff f814 	bl	1f630 <z_spin_lock_valid>
   20608:	b960      	cbnz	r0, 20624 <k_work_cancel_delayable+0x50>
   2060a:	4a1a      	ldr	r2, [pc, #104]	; (20674 <k_work_cancel_delayable+0xa0>)
   2060c:	491a      	ldr	r1, [pc, #104]	; (20678 <k_work_cancel_delayable+0xa4>)
   2060e:	4816      	ldr	r0, [pc, #88]	; (20668 <k_work_cancel_delayable+0x94>)
   20610:	2394      	movs	r3, #148	; 0x94
   20612:	f002 fff2 	bl	235fa <assert_print>
   20616:	4916      	ldr	r1, [pc, #88]	; (20670 <k_work_cancel_delayable+0x9c>)
   20618:	4818      	ldr	r0, [pc, #96]	; (2067c <k_work_cancel_delayable+0xa8>)
   2061a:	f002 ffee 	bl	235fa <assert_print>
   2061e:	2194      	movs	r1, #148	; 0x94
   20620:	4814      	ldr	r0, [pc, #80]	; (20674 <k_work_cancel_delayable+0xa0>)
   20622:	e7e4      	b.n	205ee <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   20624:	4812      	ldr	r0, [pc, #72]	; (20670 <k_work_cancel_delayable+0x9c>)
   20626:	f7ff f821 	bl	1f66c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2062a:	4620      	mov	r0, r4
   2062c:	f005 fb0a 	bl	25c44 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20630:	4620      	mov	r0, r4
   20632:	f005 fb1d 	bl	25c70 <cancel_async_locked>
   20636:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20638:	480d      	ldr	r0, [pc, #52]	; (20670 <k_work_cancel_delayable+0x9c>)
   2063a:	f7ff f807 	bl	1f64c <z_spin_unlock_valid>
   2063e:	b958      	cbnz	r0, 20658 <k_work_cancel_delayable+0x84>
   20640:	4a0c      	ldr	r2, [pc, #48]	; (20674 <k_work_cancel_delayable+0xa0>)
   20642:	490f      	ldr	r1, [pc, #60]	; (20680 <k_work_cancel_delayable+0xac>)
   20644:	4808      	ldr	r0, [pc, #32]	; (20668 <k_work_cancel_delayable+0x94>)
   20646:	23c2      	movs	r3, #194	; 0xc2
   20648:	f002 ffd7 	bl	235fa <assert_print>
   2064c:	4908      	ldr	r1, [pc, #32]	; (20670 <k_work_cancel_delayable+0x9c>)
   2064e:	480d      	ldr	r0, [pc, #52]	; (20684 <k_work_cancel_delayable+0xb0>)
   20650:	f002 ffd3 	bl	235fa <assert_print>
   20654:	21c2      	movs	r1, #194	; 0xc2
   20656:	e7e3      	b.n	20620 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   20658:	f385 8811 	msr	BASEPRI, r5
   2065c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   20660:	4620      	mov	r0, r4
   20662:	bd38      	pop	{r3, r4, r5, pc}
   20664:	0002a618 	.word	0x0002a618
   20668:	00026f1a 	.word	0x00026f1a
   2066c:	0002a542 	.word	0x0002a542
   20670:	20002f08 	.word	0x20002f08
   20674:	0002730e 	.word	0x0002730e
   20678:	00027367 	.word	0x00027367
   2067c:	0002737c 	.word	0x0002737c
   20680:	0002733b 	.word	0x0002733b
   20684:	00027352 	.word	0x00027352

00020688 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   20688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2068c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2068e:	4605      	mov	r5, r0
   20690:	b958      	cbnz	r0, 206aa <k_work_cancel_delayable_sync+0x22>
   20692:	493a      	ldr	r1, [pc, #232]	; (2077c <k_work_cancel_delayable_sync+0xf4>)
   20694:	4a3a      	ldr	r2, [pc, #232]	; (20780 <k_work_cancel_delayable_sync+0xf8>)
   20696:	483b      	ldr	r0, [pc, #236]	; (20784 <k_work_cancel_delayable_sync+0xfc>)
   20698:	f240 4311 	movw	r3, #1041	; 0x411
   2069c:	f002 ffad 	bl	235fa <assert_print>
   206a0:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   206a4:	4836      	ldr	r0, [pc, #216]	; (20780 <k_work_cancel_delayable_sync+0xf8>)
   206a6:	f002 ffa1 	bl	235ec <assert_post_action>
   206aa:	b949      	cbnz	r1, 206c0 <k_work_cancel_delayable_sync+0x38>
   206ac:	4936      	ldr	r1, [pc, #216]	; (20788 <k_work_cancel_delayable_sync+0x100>)
   206ae:	4a34      	ldr	r2, [pc, #208]	; (20780 <k_work_cancel_delayable_sync+0xf8>)
   206b0:	4834      	ldr	r0, [pc, #208]	; (20784 <k_work_cancel_delayable_sync+0xfc>)
   206b2:	f240 4312 	movw	r3, #1042	; 0x412
   206b6:	f002 ffa0 	bl	235fa <assert_print>
   206ba:	f240 4112 	movw	r1, #1042	; 0x412
   206be:	e7f1      	b.n	206a4 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   206c0:	f005 fa57 	bl	25b72 <k_is_in_isr>
   206c4:	4604      	mov	r4, r0
   206c6:	b148      	cbz	r0, 206dc <k_work_cancel_delayable_sync+0x54>
   206c8:	4930      	ldr	r1, [pc, #192]	; (2078c <k_work_cancel_delayable_sync+0x104>)
   206ca:	4a2d      	ldr	r2, [pc, #180]	; (20780 <k_work_cancel_delayable_sync+0xf8>)
   206cc:	482d      	ldr	r0, [pc, #180]	; (20784 <k_work_cancel_delayable_sync+0xfc>)
   206ce:	f240 4313 	movw	r3, #1043	; 0x413
   206d2:	f002 ff92 	bl	235fa <assert_print>
   206d6:	f240 4113 	movw	r1, #1043	; 0x413
   206da:	e7e3      	b.n	206a4 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   206dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   206e0:	f3ef 8811 	mrs	r8, BASEPRI
   206e4:	f383 8812 	msr	BASEPRI_MAX, r3
   206e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   206ec:	4828      	ldr	r0, [pc, #160]	; (20790 <k_work_cancel_delayable_sync+0x108>)
   206ee:	f7fe ff9f 	bl	1f630 <z_spin_lock_valid>
   206f2:	b960      	cbnz	r0, 2070e <k_work_cancel_delayable_sync+0x86>
   206f4:	4a27      	ldr	r2, [pc, #156]	; (20794 <k_work_cancel_delayable_sync+0x10c>)
   206f6:	4928      	ldr	r1, [pc, #160]	; (20798 <k_work_cancel_delayable_sync+0x110>)
   206f8:	4822      	ldr	r0, [pc, #136]	; (20784 <k_work_cancel_delayable_sync+0xfc>)
   206fa:	2394      	movs	r3, #148	; 0x94
   206fc:	f002 ff7d 	bl	235fa <assert_print>
   20700:	4923      	ldr	r1, [pc, #140]	; (20790 <k_work_cancel_delayable_sync+0x108>)
   20702:	4826      	ldr	r0, [pc, #152]	; (2079c <k_work_cancel_delayable_sync+0x114>)
   20704:	f002 ff79 	bl	235fa <assert_print>
   20708:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2070a:	4822      	ldr	r0, [pc, #136]	; (20794 <k_work_cancel_delayable_sync+0x10c>)
   2070c:	e7cb      	b.n	206a6 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   2070e:	4820      	ldr	r0, [pc, #128]	; (20790 <k_work_cancel_delayable_sync+0x108>)
   20710:	f7fe ffac 	bl	1f66c <z_spin_lock_set_owner>
	return *flagp;
   20714:	68eb      	ldr	r3, [r5, #12]
   20716:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2071a:	2b00      	cmp	r3, #0
   2071c:	bf14      	ite	ne
   2071e:	2701      	movne	r7, #1
   20720:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   20722:	d00a      	beq.n	2073a <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   20724:	4628      	mov	r0, r5
   20726:	f005 fa8d 	bl	25c44 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2072a:	4628      	mov	r0, r5
   2072c:	f005 faa0 	bl	25c70 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20730:	4631      	mov	r1, r6
   20732:	4628      	mov	r0, r5
   20734:	f7ff fc02 	bl	1ff3c <cancel_sync_locked>
   20738:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2073a:	4815      	ldr	r0, [pc, #84]	; (20790 <k_work_cancel_delayable_sync+0x108>)
   2073c:	f7fe ff86 	bl	1f64c <z_spin_unlock_valid>
   20740:	b958      	cbnz	r0, 2075a <k_work_cancel_delayable_sync+0xd2>
   20742:	4a14      	ldr	r2, [pc, #80]	; (20794 <k_work_cancel_delayable_sync+0x10c>)
   20744:	4916      	ldr	r1, [pc, #88]	; (207a0 <k_work_cancel_delayable_sync+0x118>)
   20746:	480f      	ldr	r0, [pc, #60]	; (20784 <k_work_cancel_delayable_sync+0xfc>)
   20748:	23c2      	movs	r3, #194	; 0xc2
   2074a:	f002 ff56 	bl	235fa <assert_print>
   2074e:	4910      	ldr	r1, [pc, #64]	; (20790 <k_work_cancel_delayable_sync+0x108>)
   20750:	4814      	ldr	r0, [pc, #80]	; (207a4 <k_work_cancel_delayable_sync+0x11c>)
   20752:	f002 ff52 	bl	235fa <assert_print>
   20756:	21c2      	movs	r1, #194	; 0xc2
   20758:	e7d7      	b.n	2070a <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   2075a:	f388 8811 	msr	BASEPRI, r8
   2075e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   20762:	b13c      	cbz	r4, 20774 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   20764:	f04f 32ff 	mov.w	r2, #4294967295
   20768:	f04f 33ff 	mov.w	r3, #4294967295
   2076c:	f106 0008 	add.w	r0, r6, #8
   20770:	f7ff fa5c 	bl	1fc2c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20774:	4638      	mov	r0, r7
   20776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2077a:	bf00      	nop
   2077c:	0002a618 	.word	0x0002a618
   20780:	0002a542 	.word	0x0002a542
   20784:	00026f1a 	.word	0x00026f1a
   20788:	0002a5c4 	.word	0x0002a5c4
   2078c:	00028c3c 	.word	0x00028c3c
   20790:	20002f08 	.word	0x20002f08
   20794:	0002730e 	.word	0x0002730e
   20798:	00027367 	.word	0x00027367
   2079c:	0002737c 	.word	0x0002737c
   207a0:	0002733b 	.word	0x0002733b
   207a4:	00027352 	.word	0x00027352

000207a8 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   207a8:	89c3      	ldrh	r3, [r0, #14]
   207aa:	2b7f      	cmp	r3, #127	; 0x7f
   207ac:	d812      	bhi.n	207d4 <sliceable+0x2c>
	int ret = slice_ticks;
   207ae:	4b0a      	ldr	r3, [pc, #40]	; (207d8 <sliceable+0x30>)
   207b0:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   207b2:	b163      	cbz	r3, 207ce <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   207b4:	4b09      	ldr	r3, [pc, #36]	; (207dc <sliceable+0x34>)
   207b6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   207ba:	681b      	ldr	r3, [r3, #0]
   207bc:	429a      	cmp	r2, r3
   207be:	db09      	blt.n	207d4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   207c0:	7b43      	ldrb	r3, [r0, #13]
   207c2:	06db      	lsls	r3, r3, #27
   207c4:	d106      	bne.n	207d4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   207c6:	4b06      	ldr	r3, [pc, #24]	; (207e0 <sliceable+0x38>)
   207c8:	1ac3      	subs	r3, r0, r3
   207ca:	bf18      	it	ne
   207cc:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   207ce:	f003 0001 	and.w	r0, r3, #1
   207d2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   207d4:	2300      	movs	r3, #0
   207d6:	e7fa      	b.n	207ce <sliceable+0x26>
   207d8:	20002f14 	.word	0x20002f14
   207dc:	20002f10 	.word	0x20002f10
   207e0:	20002968 	.word	0x20002968

000207e4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   207e4:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   207e6:	b168      	cbz	r0, 20804 <slice_timeout+0x20>
   207e8:	4b10      	ldr	r3, [pc, #64]	; (2082c <slice_timeout+0x48>)
   207ea:	4298      	cmp	r0, r3
   207ec:	d30a      	bcc.n	20804 <slice_timeout+0x20>
   207ee:	f103 0218 	add.w	r2, r3, #24
   207f2:	4290      	cmp	r0, r2
   207f4:	d206      	bcs.n	20804 <slice_timeout+0x20>
   207f6:	1ac0      	subs	r0, r0, r3
   207f8:	2218      	movs	r2, #24
   207fa:	fbb0 f3f2 	udiv	r3, r0, r2
   207fe:	fb02 0313 	mls	r3, r2, r3, r0
   20802:	b15b      	cbz	r3, 2081c <slice_timeout+0x38>
   20804:	490a      	ldr	r1, [pc, #40]	; (20830 <slice_timeout+0x4c>)
   20806:	480b      	ldr	r0, [pc, #44]	; (20834 <slice_timeout+0x50>)
   20808:	4a0b      	ldr	r2, [pc, #44]	; (20838 <slice_timeout+0x54>)
   2080a:	f240 13cb 	movw	r3, #459	; 0x1cb
   2080e:	f002 fef4 	bl	235fa <assert_print>
   20812:	4809      	ldr	r0, [pc, #36]	; (20838 <slice_timeout+0x54>)
   20814:	f240 11cb 	movw	r1, #459	; 0x1cb
   20818:	f002 fee8 	bl	235ec <assert_post_action>
   2081c:	4b07      	ldr	r3, [pc, #28]	; (2083c <slice_timeout+0x58>)
   2081e:	10c0      	asrs	r0, r0, #3
   20820:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   20822:	4b07      	ldr	r3, [pc, #28]	; (20840 <slice_timeout+0x5c>)
   20824:	2201      	movs	r2, #1
   20826:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   20828:	bd08      	pop	{r3, pc}
   2082a:	bf00      	nop
   2082c:	20002b08 	.word	0x20002b08
   20830:	0002a64f 	.word	0x0002a64f
   20834:	00026f1a 	.word	0x00026f1a
   20838:	0002a62d 	.word	0x0002a62d
   2083c:	aaaaaaab 	.word	0xaaaaaaab
   20840:	20003509 	.word	0x20003509

00020844 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   20844:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   20846:	4b0e      	ldr	r3, [pc, #56]	; (20880 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   20848:	4c0e      	ldr	r4, [pc, #56]	; (20884 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   2084a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   2084c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   20850:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   20854:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   20856:	4620      	mov	r0, r4
   20858:	f001 fa88 	bl	21d6c <z_abort_timeout>
	slice_expired[cpu] = false;
   2085c:	4b0a      	ldr	r3, [pc, #40]	; (20888 <z_reset_time_slice+0x44>)
   2085e:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   20860:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   20862:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   20864:	f7ff ffa0 	bl	207a8 <sliceable>
   20868:	b148      	cbz	r0, 2087e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   2086a:	4b08      	ldr	r3, [pc, #32]	; (2088c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2086c:	4908      	ldr	r1, [pc, #32]	; (20890 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   2086e:	681a      	ldr	r2, [r3, #0]
   20870:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   20872:	4620      	mov	r0, r4
   20874:	17d3      	asrs	r3, r2, #31
	}
}
   20876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   2087a:	f001 b9b7 	b.w	21bec <z_add_timeout>
}
   2087e:	bd70      	pop	{r4, r5, r6, pc}
   20880:	20002ed4 	.word	0x20002ed4
   20884:	20002b08 	.word	0x20002b08
   20888:	20003509 	.word	0x20003509
   2088c:	20002f14 	.word	0x20002f14
   20890:	000207e5 	.word	0x000207e5

00020894 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   20894:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   20896:	4d14      	ldr	r5, [pc, #80]	; (208e8 <update_cache+0x54>)
   20898:	462b      	mov	r3, r5
   2089a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2089e:	429c      	cmp	r4, r3
   208a0:	d000      	beq.n	208a4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   208a2:	b904      	cbnz	r4, 208a6 <update_cache+0x12>
   208a4:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   208a6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   208a8:	b9a8      	cbnz	r0, 208d6 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   208aa:	b963      	cbnz	r3, 208c6 <update_cache+0x32>
   208ac:	490f      	ldr	r1, [pc, #60]	; (208ec <update_cache+0x58>)
   208ae:	4a10      	ldr	r2, [pc, #64]	; (208f0 <update_cache+0x5c>)
   208b0:	4810      	ldr	r0, [pc, #64]	; (208f4 <update_cache+0x60>)
   208b2:	238a      	movs	r3, #138	; 0x8a
   208b4:	f002 fea1 	bl	235fa <assert_print>
   208b8:	480f      	ldr	r0, [pc, #60]	; (208f8 <update_cache+0x64>)
   208ba:	f002 fe9e 	bl	235fa <assert_print>
   208be:	480c      	ldr	r0, [pc, #48]	; (208f0 <update_cache+0x5c>)
   208c0:	218a      	movs	r1, #138	; 0x8a
   208c2:	f002 fe93 	bl	235ec <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   208c6:	7b5a      	ldrb	r2, [r3, #13]
   208c8:	06d2      	lsls	r2, r2, #27
   208ca:	d104      	bne.n	208d6 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   208cc:	69a2      	ldr	r2, [r4, #24]
   208ce:	b912      	cbnz	r2, 208d6 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   208d0:	89da      	ldrh	r2, [r3, #14]
   208d2:	2a7f      	cmp	r2, #127	; 0x7f
   208d4:	d805      	bhi.n	208e2 <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   208d6:	429c      	cmp	r4, r3
   208d8:	d002      	beq.n	208e0 <update_cache+0x4c>
			z_reset_time_slice(thread);
   208da:	4620      	mov	r0, r4
   208dc:	f7ff ffb2 	bl	20844 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   208e0:	4623      	mov	r3, r4
   208e2:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   208e4:	bd38      	pop	{r3, r4, r5, pc}
   208e6:	bf00      	nop
   208e8:	20002ed4 	.word	0x20002ed4
   208ec:	0002a7e8 	.word	0x0002a7e8
   208f0:	0002a62d 	.word	0x0002a62d
   208f4:	00026f1a 	.word	0x00026f1a
   208f8:	0002948c 	.word	0x0002948c

000208fc <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   208fc:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   208fe:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   20902:	7b42      	ldrb	r2, [r0, #13]
   20904:	2b00      	cmp	r3, #0
   20906:	db38      	blt.n	2097a <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20908:	06d3      	lsls	r3, r2, #27
   2090a:	d136      	bne.n	2097a <ready_thread+0x7e>
	return node->next != NULL;
   2090c:	6983      	ldr	r3, [r0, #24]
   2090e:	2b00      	cmp	r3, #0
   20910:	d133      	bne.n	2097a <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   20912:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20916:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20918:	4a18      	ldr	r2, [pc, #96]	; (2097c <ready_thread+0x80>)
   2091a:	4290      	cmp	r0, r2
   2091c:	d109      	bne.n	20932 <ready_thread+0x36>
   2091e:	4918      	ldr	r1, [pc, #96]	; (20980 <ready_thread+0x84>)
   20920:	4818      	ldr	r0, [pc, #96]	; (20984 <ready_thread+0x88>)
   20922:	4a19      	ldr	r2, [pc, #100]	; (20988 <ready_thread+0x8c>)
   20924:	23bc      	movs	r3, #188	; 0xbc
   20926:	f002 fe68 	bl	235fa <assert_print>
   2092a:	4817      	ldr	r0, [pc, #92]	; (20988 <ready_thread+0x8c>)
   2092c:	21bc      	movs	r1, #188	; 0xbc
   2092e:	f002 fe5d 	bl	235ec <assert_post_action>
	return list->head == list;
   20932:	4916      	ldr	r1, [pc, #88]	; (2098c <ready_thread+0x90>)
   20934:	460a      	mov	r2, r1
   20936:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2093a:	4294      	cmp	r4, r2
   2093c:	bf18      	it	ne
   2093e:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   20940:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20942:	b923      	cbnz	r3, 2094e <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   20944:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   20948:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2094a:	6208      	str	r0, [r1, #32]
}
   2094c:	e00c      	b.n	20968 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   2094e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20952:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   20956:	42b5      	cmp	r5, r6
   20958:	d00b      	beq.n	20972 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2095a:	42ae      	cmp	r6, r5
   2095c:	dd09      	ble.n	20972 <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2095e:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   20960:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   20964:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   20966:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   20968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2096c:	2000      	movs	r0, #0
   2096e:	f7ff bf91 	b.w	20894 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20972:	42a3      	cmp	r3, r4
   20974:	d0e6      	beq.n	20944 <ready_thread+0x48>
   20976:	681b      	ldr	r3, [r3, #0]
   20978:	e7e3      	b.n	20942 <ready_thread+0x46>
}
   2097a:	bd70      	pop	{r4, r5, r6, pc}
   2097c:	20002968 	.word	0x20002968
   20980:	0002a80f 	.word	0x0002a80f
   20984:	00026f1a 	.word	0x00026f1a
   20988:	0002a62d 	.word	0x0002a62d
   2098c:	20002ed4 	.word	0x20002ed4

00020990 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   20990:	b538      	push	{r3, r4, r5, lr}
   20992:	4604      	mov	r4, r0
	__asm__ volatile(
   20994:	f04f 0340 	mov.w	r3, #64	; 0x40
   20998:	f3ef 8511 	mrs	r5, BASEPRI
   2099c:	f383 8812 	msr	BASEPRI_MAX, r3
   209a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209a4:	4816      	ldr	r0, [pc, #88]	; (20a00 <z_ready_thread+0x70>)
   209a6:	f7fe fe43 	bl	1f630 <z_spin_lock_valid>
   209aa:	b968      	cbnz	r0, 209c8 <z_ready_thread+0x38>
   209ac:	4a15      	ldr	r2, [pc, #84]	; (20a04 <z_ready_thread+0x74>)
   209ae:	4916      	ldr	r1, [pc, #88]	; (20a08 <z_ready_thread+0x78>)
   209b0:	4816      	ldr	r0, [pc, #88]	; (20a0c <z_ready_thread+0x7c>)
   209b2:	2394      	movs	r3, #148	; 0x94
   209b4:	f002 fe21 	bl	235fa <assert_print>
   209b8:	4911      	ldr	r1, [pc, #68]	; (20a00 <z_ready_thread+0x70>)
   209ba:	4815      	ldr	r0, [pc, #84]	; (20a10 <z_ready_thread+0x80>)
   209bc:	f002 fe1d 	bl	235fa <assert_print>
   209c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209c2:	4810      	ldr	r0, [pc, #64]	; (20a04 <z_ready_thread+0x74>)
   209c4:	f002 fe12 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   209c8:	480d      	ldr	r0, [pc, #52]	; (20a00 <z_ready_thread+0x70>)
   209ca:	f7fe fe4f 	bl	1f66c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   209ce:	4620      	mov	r0, r4
   209d0:	f7ff ff94 	bl	208fc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209d4:	480a      	ldr	r0, [pc, #40]	; (20a00 <z_ready_thread+0x70>)
   209d6:	f7fe fe39 	bl	1f64c <z_spin_unlock_valid>
   209da:	b958      	cbnz	r0, 209f4 <z_ready_thread+0x64>
   209dc:	4a09      	ldr	r2, [pc, #36]	; (20a04 <z_ready_thread+0x74>)
   209de:	490d      	ldr	r1, [pc, #52]	; (20a14 <z_ready_thread+0x84>)
   209e0:	480a      	ldr	r0, [pc, #40]	; (20a0c <z_ready_thread+0x7c>)
   209e2:	23c2      	movs	r3, #194	; 0xc2
   209e4:	f002 fe09 	bl	235fa <assert_print>
   209e8:	4905      	ldr	r1, [pc, #20]	; (20a00 <z_ready_thread+0x70>)
   209ea:	480b      	ldr	r0, [pc, #44]	; (20a18 <z_ready_thread+0x88>)
   209ec:	f002 fe05 	bl	235fa <assert_print>
   209f0:	21c2      	movs	r1, #194	; 0xc2
   209f2:	e7e6      	b.n	209c2 <z_ready_thread+0x32>
	__asm__ volatile(
   209f4:	f385 8811 	msr	BASEPRI, r5
   209f8:	f3bf 8f6f 	isb	sy
		}
	}
}
   209fc:	bd38      	pop	{r3, r4, r5, pc}
   209fe:	bf00      	nop
   20a00:	20002f18 	.word	0x20002f18
   20a04:	0002730e 	.word	0x0002730e
   20a08:	00027367 	.word	0x00027367
   20a0c:	00026f1a 	.word	0x00026f1a
   20a10:	0002737c 	.word	0x0002737c
   20a14:	0002733b 	.word	0x0002733b
   20a18:	00027352 	.word	0x00027352

00020a1c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   20a1c:	b538      	push	{r3, r4, r5, lr}
   20a1e:	4604      	mov	r4, r0
	__asm__ volatile(
   20a20:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a24:	f3ef 8511 	mrs	r5, BASEPRI
   20a28:	f383 8812 	msr	BASEPRI_MAX, r3
   20a2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20a30:	4817      	ldr	r0, [pc, #92]	; (20a90 <z_unpend_thread_no_timeout+0x74>)
   20a32:	f7fe fdfd 	bl	1f630 <z_spin_lock_valid>
   20a36:	b968      	cbnz	r0, 20a54 <z_unpend_thread_no_timeout+0x38>
   20a38:	4a16      	ldr	r2, [pc, #88]	; (20a94 <z_unpend_thread_no_timeout+0x78>)
   20a3a:	4917      	ldr	r1, [pc, #92]	; (20a98 <z_unpend_thread_no_timeout+0x7c>)
   20a3c:	4817      	ldr	r0, [pc, #92]	; (20a9c <z_unpend_thread_no_timeout+0x80>)
   20a3e:	2394      	movs	r3, #148	; 0x94
   20a40:	f002 fddb 	bl	235fa <assert_print>
   20a44:	4912      	ldr	r1, [pc, #72]	; (20a90 <z_unpend_thread_no_timeout+0x74>)
   20a46:	4816      	ldr	r0, [pc, #88]	; (20aa0 <z_unpend_thread_no_timeout+0x84>)
   20a48:	f002 fdd7 	bl	235fa <assert_print>
   20a4c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a4e:	4811      	ldr	r0, [pc, #68]	; (20a94 <z_unpend_thread_no_timeout+0x78>)
   20a50:	f002 fdcc 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   20a54:	480e      	ldr	r0, [pc, #56]	; (20a90 <z_unpend_thread_no_timeout+0x74>)
   20a56:	f7fe fe09 	bl	1f66c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   20a5a:	68a3      	ldr	r3, [r4, #8]
   20a5c:	b113      	cbz	r3, 20a64 <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   20a5e:	4620      	mov	r0, r4
   20a60:	f000 fc50 	bl	21304 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a64:	480a      	ldr	r0, [pc, #40]	; (20a90 <z_unpend_thread_no_timeout+0x74>)
   20a66:	f7fe fdf1 	bl	1f64c <z_spin_unlock_valid>
   20a6a:	b958      	cbnz	r0, 20a84 <z_unpend_thread_no_timeout+0x68>
   20a6c:	4a09      	ldr	r2, [pc, #36]	; (20a94 <z_unpend_thread_no_timeout+0x78>)
   20a6e:	490d      	ldr	r1, [pc, #52]	; (20aa4 <z_unpend_thread_no_timeout+0x88>)
   20a70:	480a      	ldr	r0, [pc, #40]	; (20a9c <z_unpend_thread_no_timeout+0x80>)
   20a72:	23c2      	movs	r3, #194	; 0xc2
   20a74:	f002 fdc1 	bl	235fa <assert_print>
   20a78:	4905      	ldr	r1, [pc, #20]	; (20a90 <z_unpend_thread_no_timeout+0x74>)
   20a7a:	480b      	ldr	r0, [pc, #44]	; (20aa8 <z_unpend_thread_no_timeout+0x8c>)
   20a7c:	f002 fdbd 	bl	235fa <assert_print>
   20a80:	21c2      	movs	r1, #194	; 0xc2
   20a82:	e7e4      	b.n	20a4e <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   20a84:	f385 8811 	msr	BASEPRI, r5
   20a88:	f3bf 8f6f 	isb	sy
		}
	}
}
   20a8c:	bd38      	pop	{r3, r4, r5, pc}
   20a8e:	bf00      	nop
   20a90:	20002f18 	.word	0x20002f18
   20a94:	0002730e 	.word	0x0002730e
   20a98:	00027367 	.word	0x00027367
   20a9c:	00026f1a 	.word	0x00026f1a
   20aa0:	0002737c 	.word	0x0002737c
   20aa4:	0002733b 	.word	0x0002733b
   20aa8:	00027352 	.word	0x00027352

00020aac <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20aac:	b570      	push	{r4, r5, r6, lr}
   20aae:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20ab0:	460d      	mov	r5, r1
   20ab2:	b9e9      	cbnz	r1, 20af0 <z_reschedule+0x44>
   20ab4:	f3ef 8605 	mrs	r6, IPSR
   20ab8:	b9d6      	cbnz	r6, 20af0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   20aba:	4b18      	ldr	r3, [pc, #96]	; (20b1c <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   20abc:	699a      	ldr	r2, [r3, #24]
   20abe:	689b      	ldr	r3, [r3, #8]
   20ac0:	429a      	cmp	r2, r3
   20ac2:	d015      	beq.n	20af0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ac4:	f7fe fdc2 	bl	1f64c <z_spin_unlock_valid>
   20ac8:	b968      	cbnz	r0, 20ae6 <z_reschedule+0x3a>
   20aca:	4a15      	ldr	r2, [pc, #84]	; (20b20 <z_reschedule+0x74>)
   20acc:	4915      	ldr	r1, [pc, #84]	; (20b24 <z_reschedule+0x78>)
   20ace:	4816      	ldr	r0, [pc, #88]	; (20b28 <z_reschedule+0x7c>)
   20ad0:	23e1      	movs	r3, #225	; 0xe1
   20ad2:	f002 fd92 	bl	235fa <assert_print>
   20ad6:	4621      	mov	r1, r4
   20ad8:	4814      	ldr	r0, [pc, #80]	; (20b2c <z_reschedule+0x80>)
   20ada:	f002 fd8e 	bl	235fa <assert_print>
   20ade:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ae0:	480f      	ldr	r0, [pc, #60]	; (20b20 <z_reschedule+0x74>)
   20ae2:	f002 fd83 	bl	235ec <assert_post_action>
	ret = arch_swap(key);
   20ae6:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   20ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20aec:	f7f3 bb12 	b.w	14114 <arch_swap>
   20af0:	4620      	mov	r0, r4
   20af2:	f7fe fdab 	bl	1f64c <z_spin_unlock_valid>
   20af6:	b958      	cbnz	r0, 20b10 <z_reschedule+0x64>
   20af8:	4a09      	ldr	r2, [pc, #36]	; (20b20 <z_reschedule+0x74>)
   20afa:	490a      	ldr	r1, [pc, #40]	; (20b24 <z_reschedule+0x78>)
   20afc:	480a      	ldr	r0, [pc, #40]	; (20b28 <z_reschedule+0x7c>)
   20afe:	23c2      	movs	r3, #194	; 0xc2
   20b00:	f002 fd7b 	bl	235fa <assert_print>
   20b04:	4621      	mov	r1, r4
   20b06:	4809      	ldr	r0, [pc, #36]	; (20b2c <z_reschedule+0x80>)
   20b08:	f002 fd77 	bl	235fa <assert_print>
   20b0c:	21c2      	movs	r1, #194	; 0xc2
   20b0e:	e7e7      	b.n	20ae0 <z_reschedule+0x34>
   20b10:	f385 8811 	msr	BASEPRI, r5
   20b14:	f3bf 8f6f 	isb	sy
   20b18:	bd70      	pop	{r4, r5, r6, pc}
   20b1a:	bf00      	nop
   20b1c:	20002ed4 	.word	0x20002ed4
   20b20:	0002730e 	.word	0x0002730e
   20b24:	0002733b 	.word	0x0002733b
   20b28:	00026f1a 	.word	0x00026f1a
   20b2c:	00027352 	.word	0x00027352

00020b30 <z_sched_start>:
{
   20b30:	b538      	push	{r3, r4, r5, lr}
   20b32:	4604      	mov	r4, r0
	__asm__ volatile(
   20b34:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b38:	f3ef 8511 	mrs	r5, BASEPRI
   20b3c:	f383 8812 	msr	BASEPRI_MAX, r3
   20b40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b44:	481c      	ldr	r0, [pc, #112]	; (20bb8 <z_sched_start+0x88>)
   20b46:	f7fe fd73 	bl	1f630 <z_spin_lock_valid>
   20b4a:	b968      	cbnz	r0, 20b68 <z_sched_start+0x38>
   20b4c:	4a1b      	ldr	r2, [pc, #108]	; (20bbc <z_sched_start+0x8c>)
   20b4e:	491c      	ldr	r1, [pc, #112]	; (20bc0 <z_sched_start+0x90>)
   20b50:	481c      	ldr	r0, [pc, #112]	; (20bc4 <z_sched_start+0x94>)
   20b52:	2394      	movs	r3, #148	; 0x94
   20b54:	f002 fd51 	bl	235fa <assert_print>
   20b58:	4917      	ldr	r1, [pc, #92]	; (20bb8 <z_sched_start+0x88>)
   20b5a:	481b      	ldr	r0, [pc, #108]	; (20bc8 <z_sched_start+0x98>)
   20b5c:	f002 fd4d 	bl	235fa <assert_print>
   20b60:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b62:	4816      	ldr	r0, [pc, #88]	; (20bbc <z_sched_start+0x8c>)
   20b64:	f002 fd42 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   20b68:	4813      	ldr	r0, [pc, #76]	; (20bb8 <z_sched_start+0x88>)
   20b6a:	f7fe fd7f 	bl	1f66c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   20b6e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   20b70:	075a      	lsls	r2, r3, #29
   20b72:	d414      	bmi.n	20b9e <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b74:	4810      	ldr	r0, [pc, #64]	; (20bb8 <z_sched_start+0x88>)
   20b76:	f7fe fd69 	bl	1f64c <z_spin_unlock_valid>
   20b7a:	b958      	cbnz	r0, 20b94 <z_sched_start+0x64>
   20b7c:	4a0f      	ldr	r2, [pc, #60]	; (20bbc <z_sched_start+0x8c>)
   20b7e:	4913      	ldr	r1, [pc, #76]	; (20bcc <z_sched_start+0x9c>)
   20b80:	4810      	ldr	r0, [pc, #64]	; (20bc4 <z_sched_start+0x94>)
   20b82:	23c2      	movs	r3, #194	; 0xc2
   20b84:	f002 fd39 	bl	235fa <assert_print>
   20b88:	490b      	ldr	r1, [pc, #44]	; (20bb8 <z_sched_start+0x88>)
   20b8a:	4811      	ldr	r0, [pc, #68]	; (20bd0 <z_sched_start+0xa0>)
   20b8c:	f002 fd35 	bl	235fa <assert_print>
   20b90:	21c2      	movs	r1, #194	; 0xc2
   20b92:	e7e6      	b.n	20b62 <z_sched_start+0x32>
	__asm__ volatile(
   20b94:	f385 8811 	msr	BASEPRI, r5
   20b98:	f3bf 8f6f 	isb	sy
}
   20b9c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20b9e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   20ba2:	4620      	mov	r0, r4
   20ba4:	7363      	strb	r3, [r4, #13]
   20ba6:	f7ff fea9 	bl	208fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   20baa:	4629      	mov	r1, r5
   20bac:	4802      	ldr	r0, [pc, #8]	; (20bb8 <z_sched_start+0x88>)
}
   20bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   20bb2:	f7ff bf7b 	b.w	20aac <z_reschedule>
   20bb6:	bf00      	nop
   20bb8:	20002f18 	.word	0x20002f18
   20bbc:	0002730e 	.word	0x0002730e
   20bc0:	00027367 	.word	0x00027367
   20bc4:	00026f1a 	.word	0x00026f1a
   20bc8:	0002737c 	.word	0x0002737c
   20bcc:	0002733b 	.word	0x0002733b
   20bd0:	00027352 	.word	0x00027352

00020bd4 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   20bd4:	b510      	push	{r4, lr}
	__asm__ volatile(
   20bd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20bda:	f3ef 8411 	mrs	r4, BASEPRI
   20bde:	f383 8812 	msr	BASEPRI_MAX, r3
   20be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20be6:	4825      	ldr	r0, [pc, #148]	; (20c7c <k_sched_lock+0xa8>)
   20be8:	f7fe fd22 	bl	1f630 <z_spin_lock_valid>
   20bec:	b960      	cbnz	r0, 20c08 <k_sched_lock+0x34>
   20bee:	4a24      	ldr	r2, [pc, #144]	; (20c80 <k_sched_lock+0xac>)
   20bf0:	4924      	ldr	r1, [pc, #144]	; (20c84 <k_sched_lock+0xb0>)
   20bf2:	4825      	ldr	r0, [pc, #148]	; (20c88 <k_sched_lock+0xb4>)
   20bf4:	2394      	movs	r3, #148	; 0x94
   20bf6:	f002 fd00 	bl	235fa <assert_print>
   20bfa:	4920      	ldr	r1, [pc, #128]	; (20c7c <k_sched_lock+0xa8>)
   20bfc:	4823      	ldr	r0, [pc, #140]	; (20c8c <k_sched_lock+0xb8>)
   20bfe:	f002 fcfc 	bl	235fa <assert_print>
   20c02:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c04:	481e      	ldr	r0, [pc, #120]	; (20c80 <k_sched_lock+0xac>)
   20c06:	e010      	b.n	20c2a <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   20c08:	481c      	ldr	r0, [pc, #112]	; (20c7c <k_sched_lock+0xa8>)
   20c0a:	f7fe fd2f 	bl	1f66c <z_spin_lock_set_owner>
   20c0e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20c12:	b163      	cbz	r3, 20c2e <k_sched_lock+0x5a>
   20c14:	491e      	ldr	r1, [pc, #120]	; (20c90 <k_sched_lock+0xbc>)
   20c16:	4a1f      	ldr	r2, [pc, #124]	; (20c94 <k_sched_lock+0xc0>)
   20c18:	481b      	ldr	r0, [pc, #108]	; (20c88 <k_sched_lock+0xb4>)
   20c1a:	23fd      	movs	r3, #253	; 0xfd
   20c1c:	f002 fced 	bl	235fa <assert_print>
   20c20:	481d      	ldr	r0, [pc, #116]	; (20c98 <k_sched_lock+0xc4>)
   20c22:	f002 fcea 	bl	235fa <assert_print>
   20c26:	21fd      	movs	r1, #253	; 0xfd
   20c28:	481a      	ldr	r0, [pc, #104]	; (20c94 <k_sched_lock+0xc0>)
   20c2a:	f002 fcdf 	bl	235ec <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   20c2e:	4b1b      	ldr	r3, [pc, #108]	; (20c9c <k_sched_lock+0xc8>)
   20c30:	689a      	ldr	r2, [r3, #8]
   20c32:	7bd3      	ldrb	r3, [r2, #15]
   20c34:	2b01      	cmp	r3, #1
   20c36:	d10a      	bne.n	20c4e <k_sched_lock+0x7a>
   20c38:	4919      	ldr	r1, [pc, #100]	; (20ca0 <k_sched_lock+0xcc>)
   20c3a:	4a16      	ldr	r2, [pc, #88]	; (20c94 <k_sched_lock+0xc0>)
   20c3c:	4812      	ldr	r0, [pc, #72]	; (20c88 <k_sched_lock+0xb4>)
   20c3e:	23fe      	movs	r3, #254	; 0xfe
   20c40:	f002 fcdb 	bl	235fa <assert_print>
   20c44:	4814      	ldr	r0, [pc, #80]	; (20c98 <k_sched_lock+0xc4>)
   20c46:	f002 fcd8 	bl	235fa <assert_print>
   20c4a:	21fe      	movs	r1, #254	; 0xfe
   20c4c:	e7ec      	b.n	20c28 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   20c4e:	3b01      	subs	r3, #1
   20c50:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c52:	480a      	ldr	r0, [pc, #40]	; (20c7c <k_sched_lock+0xa8>)
   20c54:	f7fe fcfa 	bl	1f64c <z_spin_unlock_valid>
   20c58:	b958      	cbnz	r0, 20c72 <k_sched_lock+0x9e>
   20c5a:	4a09      	ldr	r2, [pc, #36]	; (20c80 <k_sched_lock+0xac>)
   20c5c:	4911      	ldr	r1, [pc, #68]	; (20ca4 <k_sched_lock+0xd0>)
   20c5e:	480a      	ldr	r0, [pc, #40]	; (20c88 <k_sched_lock+0xb4>)
   20c60:	23c2      	movs	r3, #194	; 0xc2
   20c62:	f002 fcca 	bl	235fa <assert_print>
   20c66:	4905      	ldr	r1, [pc, #20]	; (20c7c <k_sched_lock+0xa8>)
   20c68:	480f      	ldr	r0, [pc, #60]	; (20ca8 <k_sched_lock+0xd4>)
   20c6a:	f002 fcc6 	bl	235fa <assert_print>
   20c6e:	21c2      	movs	r1, #194	; 0xc2
   20c70:	e7c8      	b.n	20c04 <k_sched_lock+0x30>
	__asm__ volatile(
   20c72:	f384 8811 	msr	BASEPRI, r4
   20c76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   20c7a:	bd10      	pop	{r4, pc}
   20c7c:	20002f18 	.word	0x20002f18
   20c80:	0002730e 	.word	0x0002730e
   20c84:	00027367 	.word	0x00027367
   20c88:	00026f1a 	.word	0x00026f1a
   20c8c:	0002737c 	.word	0x0002737c
   20c90:	0002a3c0 	.word	0x0002a3c0
   20c94:	0002a830 	.word	0x0002a830
   20c98:	0002948c 	.word	0x0002948c
   20c9c:	20002ed4 	.word	0x20002ed4
   20ca0:	0002a85b 	.word	0x0002a85b
   20ca4:	0002733b 	.word	0x0002733b
   20ca8:	00027352 	.word	0x00027352

00020cac <k_sched_unlock>:

void k_sched_unlock(void)
{
   20cac:	b510      	push	{r4, lr}
	__asm__ volatile(
   20cae:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cb2:	f3ef 8411 	mrs	r4, BASEPRI
   20cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   20cba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cbe:	4829      	ldr	r0, [pc, #164]	; (20d64 <k_sched_unlock+0xb8>)
   20cc0:	f7fe fcb6 	bl	1f630 <z_spin_lock_valid>
   20cc4:	b960      	cbnz	r0, 20ce0 <k_sched_unlock+0x34>
   20cc6:	4a28      	ldr	r2, [pc, #160]	; (20d68 <k_sched_unlock+0xbc>)
   20cc8:	4928      	ldr	r1, [pc, #160]	; (20d6c <k_sched_unlock+0xc0>)
   20cca:	4829      	ldr	r0, [pc, #164]	; (20d70 <k_sched_unlock+0xc4>)
   20ccc:	2394      	movs	r3, #148	; 0x94
   20cce:	f002 fc94 	bl	235fa <assert_print>
   20cd2:	4924      	ldr	r1, [pc, #144]	; (20d64 <k_sched_unlock+0xb8>)
   20cd4:	4827      	ldr	r0, [pc, #156]	; (20d74 <k_sched_unlock+0xc8>)
   20cd6:	f002 fc90 	bl	235fa <assert_print>
   20cda:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cdc:	4822      	ldr	r0, [pc, #136]	; (20d68 <k_sched_unlock+0xbc>)
   20cde:	e013      	b.n	20d08 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   20ce0:	4820      	ldr	r0, [pc, #128]	; (20d64 <k_sched_unlock+0xb8>)
   20ce2:	f7fe fcc3 	bl	1f66c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   20ce6:	4b24      	ldr	r3, [pc, #144]	; (20d78 <k_sched_unlock+0xcc>)
   20ce8:	689a      	ldr	r2, [r3, #8]
   20cea:	7bd3      	ldrb	r3, [r2, #15]
   20cec:	b973      	cbnz	r3, 20d0c <k_sched_unlock+0x60>
   20cee:	4923      	ldr	r1, [pc, #140]	; (20d7c <k_sched_unlock+0xd0>)
   20cf0:	4a23      	ldr	r2, [pc, #140]	; (20d80 <k_sched_unlock+0xd4>)
   20cf2:	481f      	ldr	r0, [pc, #124]	; (20d70 <k_sched_unlock+0xc4>)
   20cf4:	f240 33ef 	movw	r3, #1007	; 0x3ef
   20cf8:	f002 fc7f 	bl	235fa <assert_print>
   20cfc:	4821      	ldr	r0, [pc, #132]	; (20d84 <k_sched_unlock+0xd8>)
   20cfe:	f002 fc7c 	bl	235fa <assert_print>
   20d02:	f240 31ef 	movw	r1, #1007	; 0x3ef
   20d06:	481e      	ldr	r0, [pc, #120]	; (20d80 <k_sched_unlock+0xd4>)
   20d08:	f002 fc70 	bl	235ec <assert_post_action>
   20d0c:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   20d10:	b160      	cbz	r0, 20d2c <k_sched_unlock+0x80>
   20d12:	491d      	ldr	r1, [pc, #116]	; (20d88 <k_sched_unlock+0xdc>)
   20d14:	4a1a      	ldr	r2, [pc, #104]	; (20d80 <k_sched_unlock+0xd4>)
   20d16:	4816      	ldr	r0, [pc, #88]	; (20d70 <k_sched_unlock+0xc4>)
   20d18:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   20d1c:	f002 fc6d 	bl	235fa <assert_print>
   20d20:	4818      	ldr	r0, [pc, #96]	; (20d84 <k_sched_unlock+0xd8>)
   20d22:	f002 fc6a 	bl	235fa <assert_print>
   20d26:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   20d2a:	e7ec      	b.n	20d06 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   20d2c:	3301      	adds	r3, #1
   20d2e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   20d30:	f7ff fdb0 	bl	20894 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d34:	480b      	ldr	r0, [pc, #44]	; (20d64 <k_sched_unlock+0xb8>)
   20d36:	f7fe fc89 	bl	1f64c <z_spin_unlock_valid>
   20d3a:	b958      	cbnz	r0, 20d54 <k_sched_unlock+0xa8>
   20d3c:	4a0a      	ldr	r2, [pc, #40]	; (20d68 <k_sched_unlock+0xbc>)
   20d3e:	4913      	ldr	r1, [pc, #76]	; (20d8c <k_sched_unlock+0xe0>)
   20d40:	480b      	ldr	r0, [pc, #44]	; (20d70 <k_sched_unlock+0xc4>)
   20d42:	23c2      	movs	r3, #194	; 0xc2
   20d44:	f002 fc59 	bl	235fa <assert_print>
   20d48:	4906      	ldr	r1, [pc, #24]	; (20d64 <k_sched_unlock+0xb8>)
   20d4a:	4811      	ldr	r0, [pc, #68]	; (20d90 <k_sched_unlock+0xe4>)
   20d4c:	f002 fc55 	bl	235fa <assert_print>
   20d50:	21c2      	movs	r1, #194	; 0xc2
   20d52:	e7c3      	b.n	20cdc <k_sched_unlock+0x30>
	__asm__ volatile(
   20d54:	f384 8811 	msr	BASEPRI, r4
   20d58:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   20d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   20d60:	f004 bfe1 	b.w	25d26 <z_reschedule_unlocked>
   20d64:	20002f18 	.word	0x20002f18
   20d68:	0002730e 	.word	0x0002730e
   20d6c:	00027367 	.word	0x00027367
   20d70:	00026f1a 	.word	0x00026f1a
   20d74:	0002737c 	.word	0x0002737c
   20d78:	20002ed4 	.word	0x20002ed4
   20d7c:	0002a88c 	.word	0x0002a88c
   20d80:	0002a62d 	.word	0x0002a62d
   20d84:	0002948c 	.word	0x0002948c
   20d88:	0002a3c0 	.word	0x0002a3c0
   20d8c:	0002733b 	.word	0x0002733b
   20d90:	00027352 	.word	0x00027352

00020d94 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   20d94:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20d96:	4b0b      	ldr	r3, [pc, #44]	; (20dc4 <z_priq_dumb_remove+0x30>)
   20d98:	4299      	cmp	r1, r3
   20d9a:	d10b      	bne.n	20db4 <z_priq_dumb_remove+0x20>
   20d9c:	490a      	ldr	r1, [pc, #40]	; (20dc8 <z_priq_dumb_remove+0x34>)
   20d9e:	480b      	ldr	r0, [pc, #44]	; (20dcc <z_priq_dumb_remove+0x38>)
   20da0:	4a0b      	ldr	r2, [pc, #44]	; (20dd0 <z_priq_dumb_remove+0x3c>)
   20da2:	f240 437b 	movw	r3, #1147	; 0x47b
   20da6:	f002 fc28 	bl	235fa <assert_print>
   20daa:	4809      	ldr	r0, [pc, #36]	; (20dd0 <z_priq_dumb_remove+0x3c>)
   20dac:	f240 417b 	movw	r1, #1147	; 0x47b
   20db0:	f002 fc1c 	bl	235ec <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   20db4:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   20db8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20dba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20dbc:	2300      	movs	r3, #0
	node->prev = NULL;
   20dbe:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   20dc2:	bd08      	pop	{r3, pc}
   20dc4:	20002968 	.word	0x20002968
   20dc8:	0002a80f 	.word	0x0002a80f
   20dcc:	00026f1a 	.word	0x00026f1a
   20dd0:	0002a62d 	.word	0x0002a62d

00020dd4 <move_thread_to_end_of_prio_q>:
{
   20dd4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   20dd6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   20dda:	7b43      	ldrb	r3, [r0, #13]
   20ddc:	2a00      	cmp	r2, #0
{
   20dde:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   20de0:	da06      	bge.n	20df0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20de6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20de8:	4601      	mov	r1, r0
   20dea:	481d      	ldr	r0, [pc, #116]	; (20e60 <move_thread_to_end_of_prio_q+0x8c>)
   20dec:	f7ff ffd2 	bl	20d94 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   20df0:	7b63      	ldrb	r3, [r4, #13]
   20df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   20df6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20df8:	4b1a      	ldr	r3, [pc, #104]	; (20e64 <move_thread_to_end_of_prio_q+0x90>)
   20dfa:	429c      	cmp	r4, r3
   20dfc:	d109      	bne.n	20e12 <move_thread_to_end_of_prio_q+0x3e>
   20dfe:	491a      	ldr	r1, [pc, #104]	; (20e68 <move_thread_to_end_of_prio_q+0x94>)
   20e00:	481a      	ldr	r0, [pc, #104]	; (20e6c <move_thread_to_end_of_prio_q+0x98>)
   20e02:	4a1b      	ldr	r2, [pc, #108]	; (20e70 <move_thread_to_end_of_prio_q+0x9c>)
   20e04:	23bc      	movs	r3, #188	; 0xbc
   20e06:	f002 fbf8 	bl	235fa <assert_print>
   20e0a:	4819      	ldr	r0, [pc, #100]	; (20e70 <move_thread_to_end_of_prio_q+0x9c>)
   20e0c:	21bc      	movs	r1, #188	; 0xbc
   20e0e:	f002 fbed 	bl	235ec <assert_post_action>
	return list->head == list;
   20e12:	4a18      	ldr	r2, [pc, #96]	; (20e74 <move_thread_to_end_of_prio_q+0xa0>)
   20e14:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   20e16:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
   20e18:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e1c:	428b      	cmp	r3, r1
   20e1e:	bf08      	it	eq
   20e20:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20e22:	b923      	cbnz	r3, 20e2e <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   20e24:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   20e28:	6004      	str	r4, [r0, #0]
	list->tail = node;
   20e2a:	6214      	str	r4, [r2, #32]
}
   20e2c:	e00c      	b.n	20e48 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   20e2e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20e32:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   20e36:	42b5      	cmp	r5, r6
   20e38:	d00e      	beq.n	20e58 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20e3a:	42ae      	cmp	r6, r5
   20e3c:	dd0c      	ble.n	20e58 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   20e3e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   20e40:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   20e44:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   20e46:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   20e48:	6890      	ldr	r0, [r2, #8]
   20e4a:	1b03      	subs	r3, r0, r4
   20e4c:	4258      	negs	r0, r3
}
   20e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   20e52:	4158      	adcs	r0, r3
   20e54:	f7ff bd1e 	b.w	20894 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   20e58:	4298      	cmp	r0, r3
   20e5a:	d0e3      	beq.n	20e24 <move_thread_to_end_of_prio_q+0x50>
   20e5c:	681b      	ldr	r3, [r3, #0]
   20e5e:	e7e0      	b.n	20e22 <move_thread_to_end_of_prio_q+0x4e>
   20e60:	20002ef0 	.word	0x20002ef0
   20e64:	20002968 	.word	0x20002968
   20e68:	0002a80f 	.word	0x0002a80f
   20e6c:	00026f1a 	.word	0x00026f1a
   20e70:	0002a62d 	.word	0x0002a62d
   20e74:	20002ed4 	.word	0x20002ed4

00020e78 <z_time_slice>:
{
   20e78:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20e7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e7e:	f3ef 8511 	mrs	r5, BASEPRI
   20e82:	f383 8812 	msr	BASEPRI_MAX, r3
   20e86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e8a:	4823      	ldr	r0, [pc, #140]	; (20f18 <z_time_slice+0xa0>)
   20e8c:	f7fe fbd0 	bl	1f630 <z_spin_lock_valid>
   20e90:	b968      	cbnz	r0, 20eae <z_time_slice+0x36>
   20e92:	4a22      	ldr	r2, [pc, #136]	; (20f1c <z_time_slice+0xa4>)
   20e94:	4922      	ldr	r1, [pc, #136]	; (20f20 <z_time_slice+0xa8>)
   20e96:	4823      	ldr	r0, [pc, #140]	; (20f24 <z_time_slice+0xac>)
   20e98:	2394      	movs	r3, #148	; 0x94
   20e9a:	f002 fbae 	bl	235fa <assert_print>
   20e9e:	491e      	ldr	r1, [pc, #120]	; (20f18 <z_time_slice+0xa0>)
   20ea0:	4821      	ldr	r0, [pc, #132]	; (20f28 <z_time_slice+0xb0>)
   20ea2:	f002 fbaa 	bl	235fa <assert_print>
   20ea6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ea8:	481c      	ldr	r0, [pc, #112]	; (20f1c <z_time_slice+0xa4>)
   20eaa:	f002 fb9f 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   20eae:	481a      	ldr	r0, [pc, #104]	; (20f18 <z_time_slice+0xa0>)
   20eb0:	f7fe fbdc 	bl	1f66c <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   20eb4:	4b1d      	ldr	r3, [pc, #116]	; (20f2c <z_time_slice+0xb4>)
	if (pending_current == curr) {
   20eb6:	4a1e      	ldr	r2, [pc, #120]	; (20f30 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   20eb8:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   20eba:	6810      	ldr	r0, [r2, #0]
   20ebc:	42a0      	cmp	r0, r4
   20ebe:	d111      	bne.n	20ee4 <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   20ec0:	f7ff fcc0 	bl	20844 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ec4:	4814      	ldr	r0, [pc, #80]	; (20f18 <z_time_slice+0xa0>)
   20ec6:	f7fe fbc1 	bl	1f64c <z_spin_unlock_valid>
   20eca:	b9f8      	cbnz	r0, 20f0c <z_time_slice+0x94>
   20ecc:	4a13      	ldr	r2, [pc, #76]	; (20f1c <z_time_slice+0xa4>)
   20ece:	4919      	ldr	r1, [pc, #100]	; (20f34 <z_time_slice+0xbc>)
   20ed0:	4814      	ldr	r0, [pc, #80]	; (20f24 <z_time_slice+0xac>)
   20ed2:	23c2      	movs	r3, #194	; 0xc2
   20ed4:	f002 fb91 	bl	235fa <assert_print>
   20ed8:	490f      	ldr	r1, [pc, #60]	; (20f18 <z_time_slice+0xa0>)
   20eda:	4817      	ldr	r0, [pc, #92]	; (20f38 <z_time_slice+0xc0>)
   20edc:	f002 fb8d 	bl	235fa <assert_print>
   20ee0:	21c2      	movs	r1, #194	; 0xc2
   20ee2:	e7e1      	b.n	20ea8 <z_time_slice+0x30>
	pending_current = NULL;
   20ee4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   20ee6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   20ee8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   20eea:	4a14      	ldr	r2, [pc, #80]	; (20f3c <z_time_slice+0xc4>)
   20eec:	5cd3      	ldrb	r3, [r2, r3]
   20eee:	2b00      	cmp	r3, #0
   20ef0:	d0e8      	beq.n	20ec4 <z_time_slice+0x4c>
   20ef2:	4620      	mov	r0, r4
   20ef4:	f7ff fc58 	bl	207a8 <sliceable>
   20ef8:	2800      	cmp	r0, #0
   20efa:	d0e3      	beq.n	20ec4 <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   20efc:	7b63      	ldrb	r3, [r4, #13]
   20efe:	06db      	lsls	r3, r3, #27
   20f00:	d102      	bne.n	20f08 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   20f02:	4620      	mov	r0, r4
   20f04:	f7ff ff66 	bl	20dd4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   20f08:	4620      	mov	r0, r4
   20f0a:	e7d9      	b.n	20ec0 <z_time_slice+0x48>
	__asm__ volatile(
   20f0c:	f385 8811 	msr	BASEPRI, r5
   20f10:	f3bf 8f6f 	isb	sy
}
   20f14:	bd38      	pop	{r3, r4, r5, pc}
   20f16:	bf00      	nop
   20f18:	20002f18 	.word	0x20002f18
   20f1c:	0002730e 	.word	0x0002730e
   20f20:	00027367 	.word	0x00027367
   20f24:	00026f1a 	.word	0x00026f1a
   20f28:	0002737c 	.word	0x0002737c
   20f2c:	20002ed4 	.word	0x20002ed4
   20f30:	20002f0c 	.word	0x20002f0c
   20f34:	0002733b 	.word	0x0002733b
   20f38:	00027352 	.word	0x00027352
   20f3c:	20003509 	.word	0x20003509

00020f40 <unready_thread>:
{
   20f40:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   20f42:	f990 200d 	ldrsb.w	r2, [r0, #13]
   20f46:	7b43      	ldrb	r3, [r0, #13]
   20f48:	2a00      	cmp	r2, #0
{
   20f4a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   20f4c:	da06      	bge.n	20f5c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20f52:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   20f54:	4601      	mov	r1, r0
   20f56:	4806      	ldr	r0, [pc, #24]	; (20f70 <unready_thread+0x30>)
   20f58:	f7ff ff1c 	bl	20d94 <z_priq_dumb_remove>
	update_cache(thread == _current);
   20f5c:	4b05      	ldr	r3, [pc, #20]	; (20f74 <unready_thread+0x34>)
   20f5e:	6898      	ldr	r0, [r3, #8]
   20f60:	1b03      	subs	r3, r0, r4
   20f62:	4258      	negs	r0, r3
}
   20f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   20f68:	4158      	adcs	r0, r3
   20f6a:	f7ff bc93 	b.w	20894 <update_cache>
   20f6e:	bf00      	nop
   20f70:	20002ef0 	.word	0x20002ef0
   20f74:	20002ed4 	.word	0x20002ed4

00020f78 <add_to_waitq_locked>:
{
   20f78:	b538      	push	{r3, r4, r5, lr}
   20f7a:	4604      	mov	r4, r0
   20f7c:	460d      	mov	r5, r1
	unready_thread(thread);
   20f7e:	f7ff ffdf 	bl	20f40 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   20f82:	7b63      	ldrb	r3, [r4, #13]
   20f84:	f043 0302 	orr.w	r3, r3, #2
   20f88:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20f8a:	b34d      	cbz	r5, 20fe0 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20f8c:	4b15      	ldr	r3, [pc, #84]	; (20fe4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   20f8e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   20f90:	429c      	cmp	r4, r3
   20f92:	d109      	bne.n	20fa8 <add_to_waitq_locked+0x30>
   20f94:	4914      	ldr	r1, [pc, #80]	; (20fe8 <add_to_waitq_locked+0x70>)
   20f96:	4815      	ldr	r0, [pc, #84]	; (20fec <add_to_waitq_locked+0x74>)
   20f98:	4a15      	ldr	r2, [pc, #84]	; (20ff0 <add_to_waitq_locked+0x78>)
   20f9a:	23bc      	movs	r3, #188	; 0xbc
   20f9c:	f002 fb2d 	bl	235fa <assert_print>
   20fa0:	4813      	ldr	r0, [pc, #76]	; (20ff0 <add_to_waitq_locked+0x78>)
   20fa2:	21bc      	movs	r1, #188	; 0xbc
   20fa4:	f002 fb22 	bl	235ec <assert_post_action>
	return list->head == list;
   20fa8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20faa:	429d      	cmp	r5, r3
   20fac:	d109      	bne.n	20fc2 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   20fae:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   20fb0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   20fb4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20fb6:	606c      	str	r4, [r5, #4]
}
   20fb8:	e012      	b.n	20fe0 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   20fba:	686a      	ldr	r2, [r5, #4]
   20fbc:	4293      	cmp	r3, r2
   20fbe:	d0f6      	beq.n	20fae <add_to_waitq_locked+0x36>
   20fc0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20fc2:	2b00      	cmp	r3, #0
   20fc4:	d0f3      	beq.n	20fae <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   20fc6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20fca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   20fce:	428a      	cmp	r2, r1
   20fd0:	d0f3      	beq.n	20fba <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20fd2:	4291      	cmp	r1, r2
   20fd4:	ddf1      	ble.n	20fba <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   20fd6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20fd8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   20fdc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20fde:	605c      	str	r4, [r3, #4]
}
   20fe0:	bd38      	pop	{r3, r4, r5, pc}
   20fe2:	bf00      	nop
   20fe4:	20002968 	.word	0x20002968
   20fe8:	0002a80f 	.word	0x0002a80f
   20fec:	00026f1a 	.word	0x00026f1a
   20ff0:	0002a62d 	.word	0x0002a62d

00020ff4 <pend_locked>:
{
   20ff4:	b570      	push	{r4, r5, r6, lr}
   20ff6:	4615      	mov	r5, r2
   20ff8:	461c      	mov	r4, r3
   20ffa:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   20ffc:	f7ff ffbc 	bl	20f78 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21000:	f1b4 3fff 	cmp.w	r4, #4294967295
   21004:	bf08      	it	eq
   21006:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2100a:	d008      	beq.n	2101e <pend_locked+0x2a>
   2100c:	462a      	mov	r2, r5
   2100e:	4623      	mov	r3, r4
   21010:	f106 0018 	add.w	r0, r6, #24
   21014:	4902      	ldr	r1, [pc, #8]	; (21020 <pend_locked+0x2c>)
}
   21016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2101a:	f000 bde7 	b.w	21bec <z_add_timeout>
   2101e:	bd70      	pop	{r4, r5, r6, pc}
   21020:	00025d3b 	.word	0x00025d3b

00021024 <z_pend_curr>:
{
   21024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   21028:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 210e4 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2102c:	4c2e      	ldr	r4, [pc, #184]	; (210e8 <z_pend_curr+0xc4>)
	pending_current = _current;
   2102e:	4b2f      	ldr	r3, [pc, #188]	; (210ec <z_pend_curr+0xc8>)
{
   21030:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21032:	42a0      	cmp	r0, r4
	pending_current = _current;
   21034:	f8da 2008 	ldr.w	r2, [sl, #8]
   21038:	601a      	str	r2, [r3, #0]
{
   2103a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2103e:	4605      	mov	r5, r0
   21040:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21042:	d10b      	bne.n	2105c <z_pend_curr+0x38>
   21044:	492a      	ldr	r1, [pc, #168]	; (210f0 <z_pend_curr+0xcc>)
   21046:	482b      	ldr	r0, [pc, #172]	; (210f4 <z_pend_curr+0xd0>)
   21048:	4a2b      	ldr	r2, [pc, #172]	; (210f8 <z_pend_curr+0xd4>)
   2104a:	f240 3356 	movw	r3, #854	; 0x356
   2104e:	f002 fad4 	bl	235fa <assert_print>
   21052:	4829      	ldr	r0, [pc, #164]	; (210f8 <z_pend_curr+0xd4>)
   21054:	f240 3156 	movw	r1, #854	; 0x356
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21058:	f002 fac8 	bl	235ec <assert_post_action>
	__asm__ volatile(
   2105c:	f04f 0240 	mov.w	r2, #64	; 0x40
   21060:	f3ef 8311 	mrs	r3, BASEPRI
   21064:	f382 8812 	msr	BASEPRI_MAX, r2
   21068:	f3bf 8f6f 	isb	sy
   2106c:	4620      	mov	r0, r4
   2106e:	f7fe fadf 	bl	1f630 <z_spin_lock_valid>
   21072:	b960      	cbnz	r0, 2108e <z_pend_curr+0x6a>
   21074:	4a21      	ldr	r2, [pc, #132]	; (210fc <z_pend_curr+0xd8>)
   21076:	4922      	ldr	r1, [pc, #136]	; (21100 <z_pend_curr+0xdc>)
   21078:	481e      	ldr	r0, [pc, #120]	; (210f4 <z_pend_curr+0xd0>)
   2107a:	2394      	movs	r3, #148	; 0x94
   2107c:	f002 fabd 	bl	235fa <assert_print>
   21080:	4621      	mov	r1, r4
   21082:	4820      	ldr	r0, [pc, #128]	; (21104 <z_pend_curr+0xe0>)
   21084:	f002 fab9 	bl	235fa <assert_print>
   21088:	2194      	movs	r1, #148	; 0x94
   2108a:	481c      	ldr	r0, [pc, #112]	; (210fc <z_pend_curr+0xd8>)
   2108c:	e7e4      	b.n	21058 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   2108e:	4620      	mov	r0, r4
   21090:	f7fe faec 	bl	1f66c <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   21094:	f8da 0008 	ldr.w	r0, [sl, #8]
   21098:	4642      	mov	r2, r8
   2109a:	464b      	mov	r3, r9
   2109c:	4639      	mov	r1, r7
   2109e:	f7ff ffa9 	bl	20ff4 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210a2:	4628      	mov	r0, r5
   210a4:	f7fe fad2 	bl	1f64c <z_spin_unlock_valid>
   210a8:	b958      	cbnz	r0, 210c2 <z_pend_curr+0x9e>
   210aa:	4917      	ldr	r1, [pc, #92]	; (21108 <z_pend_curr+0xe4>)
   210ac:	4a13      	ldr	r2, [pc, #76]	; (210fc <z_pend_curr+0xd8>)
   210ae:	4811      	ldr	r0, [pc, #68]	; (210f4 <z_pend_curr+0xd0>)
   210b0:	23e1      	movs	r3, #225	; 0xe1
   210b2:	f002 faa2 	bl	235fa <assert_print>
   210b6:	4629      	mov	r1, r5
   210b8:	4814      	ldr	r0, [pc, #80]	; (2110c <z_pend_curr+0xe8>)
   210ba:	f002 fa9e 	bl	235fa <assert_print>
   210be:	21e1      	movs	r1, #225	; 0xe1
   210c0:	e7e3      	b.n	2108a <z_pend_curr+0x66>
   210c2:	4620      	mov	r0, r4
   210c4:	f7fe fac2 	bl	1f64c <z_spin_unlock_valid>
   210c8:	b938      	cbnz	r0, 210da <z_pend_curr+0xb6>
   210ca:	490f      	ldr	r1, [pc, #60]	; (21108 <z_pend_curr+0xe4>)
   210cc:	4a0b      	ldr	r2, [pc, #44]	; (210fc <z_pend_curr+0xd8>)
   210ce:	4809      	ldr	r0, [pc, #36]	; (210f4 <z_pend_curr+0xd0>)
   210d0:	23e1      	movs	r3, #225	; 0xe1
   210d2:	f002 fa92 	bl	235fa <assert_print>
   210d6:	4621      	mov	r1, r4
   210d8:	e7ee      	b.n	210b8 <z_pend_curr+0x94>
   210da:	4630      	mov	r0, r6
}
   210dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   210e0:	f7f3 b818 	b.w	14114 <arch_swap>
   210e4:	20002ed4 	.word	0x20002ed4
   210e8:	20002f18 	.word	0x20002f18
   210ec:	20002f0c 	.word	0x20002f0c
   210f0:	0002a8bd 	.word	0x0002a8bd
   210f4:	00026f1a 	.word	0x00026f1a
   210f8:	0002a62d 	.word	0x0002a62d
   210fc:	0002730e 	.word	0x0002730e
   21100:	00027367 	.word	0x00027367
   21104:	0002737c 	.word	0x0002737c
   21108:	0002733b 	.word	0x0002733b
   2110c:	00027352 	.word	0x00027352

00021110 <z_set_prio>:
{
   21110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21114:	4604      	mov	r4, r0
   21116:	460e      	mov	r6, r1
   21118:	f04f 0340 	mov.w	r3, #64	; 0x40
   2111c:	f3ef 8911 	mrs	r9, BASEPRI
   21120:	f383 8812 	msr	BASEPRI_MAX, r3
   21124:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21128:	4837      	ldr	r0, [pc, #220]	; (21208 <z_set_prio+0xf8>)
   2112a:	f7fe fa81 	bl	1f630 <z_spin_lock_valid>
   2112e:	4607      	mov	r7, r0
   21130:	b960      	cbnz	r0, 2114c <z_set_prio+0x3c>
   21132:	4a36      	ldr	r2, [pc, #216]	; (2120c <z_set_prio+0xfc>)
   21134:	4936      	ldr	r1, [pc, #216]	; (21210 <z_set_prio+0x100>)
   21136:	4837      	ldr	r0, [pc, #220]	; (21214 <z_set_prio+0x104>)
   21138:	2394      	movs	r3, #148	; 0x94
   2113a:	f002 fa5e 	bl	235fa <assert_print>
   2113e:	4932      	ldr	r1, [pc, #200]	; (21208 <z_set_prio+0xf8>)
   21140:	4835      	ldr	r0, [pc, #212]	; (21218 <z_set_prio+0x108>)
   21142:	f002 fa5a 	bl	235fa <assert_print>
   21146:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21148:	4830      	ldr	r0, [pc, #192]	; (2120c <z_set_prio+0xfc>)
   2114a:	e021      	b.n	21190 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   2114c:	482e      	ldr	r0, [pc, #184]	; (21208 <z_set_prio+0xf8>)
   2114e:	f7fe fa8d 	bl	1f66c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   21152:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21154:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21156:	b276      	sxtb	r6, r6
   21158:	d11c      	bne.n	21194 <z_set_prio+0x84>
	return node->next != NULL;
   2115a:	69a5      	ldr	r5, [r4, #24]
   2115c:	b9d5      	cbnz	r5, 21194 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   2115e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2121c <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21166:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21168:	4621      	mov	r1, r4
   2116a:	4640      	mov	r0, r8
   2116c:	f7ff fe12 	bl	20d94 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21170:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   21172:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21174:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21178:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2117a:	4b29      	ldr	r3, [pc, #164]	; (21220 <z_set_prio+0x110>)
   2117c:	429c      	cmp	r4, r3
   2117e:	d11b      	bne.n	211b8 <z_set_prio+0xa8>
   21180:	4928      	ldr	r1, [pc, #160]	; (21224 <z_set_prio+0x114>)
   21182:	4824      	ldr	r0, [pc, #144]	; (21214 <z_set_prio+0x104>)
   21184:	4a28      	ldr	r2, [pc, #160]	; (21228 <z_set_prio+0x118>)
   21186:	23bc      	movs	r3, #188	; 0xbc
   21188:	f002 fa37 	bl	235fa <assert_print>
   2118c:	4826      	ldr	r0, [pc, #152]	; (21228 <z_set_prio+0x118>)
   2118e:	21bc      	movs	r1, #188	; 0xbc
   21190:	f002 fa2c 	bl	235ec <assert_post_action>
			thread->base.prio = prio;
   21194:	73a6      	strb	r6, [r4, #14]
   21196:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21198:	481b      	ldr	r0, [pc, #108]	; (21208 <z_set_prio+0xf8>)
   2119a:	f7fe fa57 	bl	1f64c <z_spin_unlock_valid>
   2119e:	bb58      	cbnz	r0, 211f8 <z_set_prio+0xe8>
   211a0:	4a1a      	ldr	r2, [pc, #104]	; (2120c <z_set_prio+0xfc>)
   211a2:	4922      	ldr	r1, [pc, #136]	; (2122c <z_set_prio+0x11c>)
   211a4:	481b      	ldr	r0, [pc, #108]	; (21214 <z_set_prio+0x104>)
   211a6:	23c2      	movs	r3, #194	; 0xc2
   211a8:	f002 fa27 	bl	235fa <assert_print>
   211ac:	4916      	ldr	r1, [pc, #88]	; (21208 <z_set_prio+0xf8>)
   211ae:	4820      	ldr	r0, [pc, #128]	; (21230 <z_set_prio+0x120>)
   211b0:	f002 fa23 	bl	235fa <assert_print>
   211b4:	21c2      	movs	r1, #194	; 0xc2
   211b6:	e7c7      	b.n	21148 <z_set_prio+0x38>
	return list->head == list;
   211b8:	4643      	mov	r3, r8
   211ba:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211be:	4542      	cmp	r2, r8
   211c0:	bf18      	it	ne
   211c2:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   211c4:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   211c6:	b925      	cbnz	r5, 211d2 <z_set_prio+0xc2>
	node->prev = tail;
   211c8:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   211cc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   211ce:	621c      	str	r4, [r3, #32]
}
   211d0:	e00a      	b.n	211e8 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   211d2:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   211d6:	428e      	cmp	r6, r1
   211d8:	d00a      	beq.n	211f0 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   211da:	42b1      	cmp	r1, r6
   211dc:	dd08      	ble.n	211f0 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   211de:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   211e0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   211e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   211e6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   211e8:	2001      	movs	r0, #1
   211ea:	f7ff fb53 	bl	20894 <update_cache>
   211ee:	e7d3      	b.n	21198 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   211f0:	42aa      	cmp	r2, r5
   211f2:	d0e9      	beq.n	211c8 <z_set_prio+0xb8>
   211f4:	682d      	ldr	r5, [r5, #0]
   211f6:	e7e6      	b.n	211c6 <z_set_prio+0xb6>
	__asm__ volatile(
   211f8:	f389 8811 	msr	BASEPRI, r9
   211fc:	f3bf 8f6f 	isb	sy
}
   21200:	4638      	mov	r0, r7
   21202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21206:	bf00      	nop
   21208:	20002f18 	.word	0x20002f18
   2120c:	0002730e 	.word	0x0002730e
   21210:	00027367 	.word	0x00027367
   21214:	00026f1a 	.word	0x00026f1a
   21218:	0002737c 	.word	0x0002737c
   2121c:	20002ef0 	.word	0x20002ef0
   21220:	20002968 	.word	0x20002968
   21224:	0002a80f 	.word	0x0002a80f
   21228:	0002a62d 	.word	0x0002a62d
   2122c:	0002733b 	.word	0x0002733b
   21230:	00027352 	.word	0x00027352

00021234 <z_impl_k_thread_suspend>:
{
   21234:	b570      	push	{r4, r5, r6, lr}
   21236:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21238:	3018      	adds	r0, #24
   2123a:	f000 fd97 	bl	21d6c <z_abort_timeout>
	__asm__ volatile(
   2123e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21242:	f3ef 8611 	mrs	r6, BASEPRI
   21246:	f383 8812 	msr	BASEPRI_MAX, r3
   2124a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2124e:	4824      	ldr	r0, [pc, #144]	; (212e0 <z_impl_k_thread_suspend+0xac>)
   21250:	f7fe f9ee 	bl	1f630 <z_spin_lock_valid>
   21254:	b968      	cbnz	r0, 21272 <z_impl_k_thread_suspend+0x3e>
   21256:	4a23      	ldr	r2, [pc, #140]	; (212e4 <z_impl_k_thread_suspend+0xb0>)
   21258:	4923      	ldr	r1, [pc, #140]	; (212e8 <z_impl_k_thread_suspend+0xb4>)
   2125a:	4824      	ldr	r0, [pc, #144]	; (212ec <z_impl_k_thread_suspend+0xb8>)
   2125c:	2394      	movs	r3, #148	; 0x94
   2125e:	f002 f9cc 	bl	235fa <assert_print>
   21262:	491f      	ldr	r1, [pc, #124]	; (212e0 <z_impl_k_thread_suspend+0xac>)
   21264:	4822      	ldr	r0, [pc, #136]	; (212f0 <z_impl_k_thread_suspend+0xbc>)
   21266:	f002 f9c8 	bl	235fa <assert_print>
   2126a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2126c:	481d      	ldr	r0, [pc, #116]	; (212e4 <z_impl_k_thread_suspend+0xb0>)
   2126e:	f002 f9bd 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   21272:	481b      	ldr	r0, [pc, #108]	; (212e0 <z_impl_k_thread_suspend+0xac>)
   21274:	f7fe f9fa 	bl	1f66c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21278:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2127c:	7b63      	ldrb	r3, [r4, #13]
   2127e:	2a00      	cmp	r2, #0
   21280:	da06      	bge.n	21290 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21286:	481b      	ldr	r0, [pc, #108]	; (212f4 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21288:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2128a:	4621      	mov	r1, r4
   2128c:	f7ff fd82 	bl	20d94 <z_priq_dumb_remove>
		update_cache(thread == _current);
   21290:	4d19      	ldr	r5, [pc, #100]	; (212f8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21292:	7b63      	ldrb	r3, [r4, #13]
   21294:	68a8      	ldr	r0, [r5, #8]
   21296:	f043 0310 	orr.w	r3, r3, #16
   2129a:	7363      	strb	r3, [r4, #13]
   2129c:	1b03      	subs	r3, r0, r4
   2129e:	4258      	negs	r0, r3
   212a0:	4158      	adcs	r0, r3
   212a2:	f7ff faf7 	bl	20894 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212a6:	480e      	ldr	r0, [pc, #56]	; (212e0 <z_impl_k_thread_suspend+0xac>)
   212a8:	f7fe f9d0 	bl	1f64c <z_spin_unlock_valid>
   212ac:	b958      	cbnz	r0, 212c6 <z_impl_k_thread_suspend+0x92>
   212ae:	4a0d      	ldr	r2, [pc, #52]	; (212e4 <z_impl_k_thread_suspend+0xb0>)
   212b0:	4912      	ldr	r1, [pc, #72]	; (212fc <z_impl_k_thread_suspend+0xc8>)
   212b2:	480e      	ldr	r0, [pc, #56]	; (212ec <z_impl_k_thread_suspend+0xb8>)
   212b4:	23c2      	movs	r3, #194	; 0xc2
   212b6:	f002 f9a0 	bl	235fa <assert_print>
   212ba:	4909      	ldr	r1, [pc, #36]	; (212e0 <z_impl_k_thread_suspend+0xac>)
   212bc:	4810      	ldr	r0, [pc, #64]	; (21300 <z_impl_k_thread_suspend+0xcc>)
   212be:	f002 f99c 	bl	235fa <assert_print>
   212c2:	21c2      	movs	r1, #194	; 0xc2
   212c4:	e7d2      	b.n	2126c <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   212c6:	f386 8811 	msr	BASEPRI, r6
   212ca:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   212ce:	68ab      	ldr	r3, [r5, #8]
   212d0:	42a3      	cmp	r3, r4
   212d2:	d103      	bne.n	212dc <z_impl_k_thread_suspend+0xa8>
}
   212d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   212d8:	f004 bd25 	b.w	25d26 <z_reschedule_unlocked>
}
   212dc:	bd70      	pop	{r4, r5, r6, pc}
   212de:	bf00      	nop
   212e0:	20002f18 	.word	0x20002f18
   212e4:	0002730e 	.word	0x0002730e
   212e8:	00027367 	.word	0x00027367
   212ec:	00026f1a 	.word	0x00026f1a
   212f0:	0002737c 	.word	0x0002737c
   212f4:	20002ef0 	.word	0x20002ef0
   212f8:	20002ed4 	.word	0x20002ed4
   212fc:	0002733b 	.word	0x0002733b
   21300:	00027352 	.word	0x00027352

00021304 <unpend_thread_no_timeout>:
{
   21304:	b510      	push	{r4, lr}
   21306:	4604      	mov	r4, r0
   21308:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2130a:	b958      	cbnz	r0, 21324 <unpend_thread_no_timeout+0x20>
   2130c:	490a      	ldr	r1, [pc, #40]	; (21338 <unpend_thread_no_timeout+0x34>)
   2130e:	480b      	ldr	r0, [pc, #44]	; (2133c <unpend_thread_no_timeout+0x38>)
   21310:	4a0b      	ldr	r2, [pc, #44]	; (21340 <unpend_thread_no_timeout+0x3c>)
   21312:	f240 23c9 	movw	r3, #713	; 0x2c9
   21316:	f002 f970 	bl	235fa <assert_print>
   2131a:	4809      	ldr	r0, [pc, #36]	; (21340 <unpend_thread_no_timeout+0x3c>)
   2131c:	f240 21c9 	movw	r1, #713	; 0x2c9
   21320:	f002 f964 	bl	235ec <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21324:	4621      	mov	r1, r4
   21326:	f7ff fd35 	bl	20d94 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2132a:	7b63      	ldrb	r3, [r4, #13]
   2132c:	f023 0302 	bic.w	r3, r3, #2
   21330:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21332:	2300      	movs	r3, #0
   21334:	60a3      	str	r3, [r4, #8]
}
   21336:	bd10      	pop	{r4, pc}
   21338:	0002a8f4 	.word	0x0002a8f4
   2133c:	00026f1a 	.word	0x00026f1a
   21340:	0002a62d 	.word	0x0002a62d

00021344 <z_unpend_thread>:
{
   21344:	b538      	push	{r3, r4, r5, lr}
   21346:	4604      	mov	r4, r0
	__asm__ volatile(
   21348:	f04f 0340 	mov.w	r3, #64	; 0x40
   2134c:	f3ef 8511 	mrs	r5, BASEPRI
   21350:	f383 8812 	msr	BASEPRI_MAX, r3
   21354:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21358:	4819      	ldr	r0, [pc, #100]	; (213c0 <z_unpend_thread+0x7c>)
   2135a:	f7fe f969 	bl	1f630 <z_spin_lock_valid>
   2135e:	b968      	cbnz	r0, 2137c <z_unpend_thread+0x38>
   21360:	4a18      	ldr	r2, [pc, #96]	; (213c4 <z_unpend_thread+0x80>)
   21362:	4919      	ldr	r1, [pc, #100]	; (213c8 <z_unpend_thread+0x84>)
   21364:	4819      	ldr	r0, [pc, #100]	; (213cc <z_unpend_thread+0x88>)
   21366:	2394      	movs	r3, #148	; 0x94
   21368:	f002 f947 	bl	235fa <assert_print>
   2136c:	4914      	ldr	r1, [pc, #80]	; (213c0 <z_unpend_thread+0x7c>)
   2136e:	4818      	ldr	r0, [pc, #96]	; (213d0 <z_unpend_thread+0x8c>)
   21370:	f002 f943 	bl	235fa <assert_print>
   21374:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21376:	4813      	ldr	r0, [pc, #76]	; (213c4 <z_unpend_thread+0x80>)
   21378:	f002 f938 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   2137c:	4810      	ldr	r0, [pc, #64]	; (213c0 <z_unpend_thread+0x7c>)
   2137e:	f7fe f975 	bl	1f66c <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   21382:	68a3      	ldr	r3, [r4, #8]
   21384:	b113      	cbz	r3, 2138c <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   21386:	4620      	mov	r0, r4
   21388:	f7ff ffbc 	bl	21304 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2138c:	480c      	ldr	r0, [pc, #48]	; (213c0 <z_unpend_thread+0x7c>)
   2138e:	f7fe f95d 	bl	1f64c <z_spin_unlock_valid>
   21392:	b958      	cbnz	r0, 213ac <z_unpend_thread+0x68>
   21394:	4a0b      	ldr	r2, [pc, #44]	; (213c4 <z_unpend_thread+0x80>)
   21396:	490f      	ldr	r1, [pc, #60]	; (213d4 <z_unpend_thread+0x90>)
   21398:	480c      	ldr	r0, [pc, #48]	; (213cc <z_unpend_thread+0x88>)
   2139a:	23c2      	movs	r3, #194	; 0xc2
   2139c:	f002 f92d 	bl	235fa <assert_print>
   213a0:	4907      	ldr	r1, [pc, #28]	; (213c0 <z_unpend_thread+0x7c>)
   213a2:	480d      	ldr	r0, [pc, #52]	; (213d8 <z_unpend_thread+0x94>)
   213a4:	f002 f929 	bl	235fa <assert_print>
   213a8:	21c2      	movs	r1, #194	; 0xc2
   213aa:	e7e4      	b.n	21376 <z_unpend_thread+0x32>
	__asm__ volatile(
   213ac:	f385 8811 	msr	BASEPRI, r5
   213b0:	f3bf 8f6f 	isb	sy
   213b4:	f104 0018 	add.w	r0, r4, #24
}
   213b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   213bc:	f000 bcd6 	b.w	21d6c <z_abort_timeout>
   213c0:	20002f18 	.word	0x20002f18
   213c4:	0002730e 	.word	0x0002730e
   213c8:	00027367 	.word	0x00027367
   213cc:	00026f1a 	.word	0x00026f1a
   213d0:	0002737c 	.word	0x0002737c
   213d4:	0002733b 	.word	0x0002733b
   213d8:	00027352 	.word	0x00027352

000213dc <z_sched_wake_thread>:
{
   213dc:	b570      	push	{r4, r5, r6, lr}
   213de:	4604      	mov	r4, r0
   213e0:	460d      	mov	r5, r1
	__asm__ volatile(
   213e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   213e6:	f3ef 8611 	mrs	r6, BASEPRI
   213ea:	f383 8812 	msr	BASEPRI_MAX, r3
   213ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213f2:	481f      	ldr	r0, [pc, #124]	; (21470 <z_sched_wake_thread+0x94>)
   213f4:	f7fe f91c 	bl	1f630 <z_spin_lock_valid>
   213f8:	b968      	cbnz	r0, 21416 <z_sched_wake_thread+0x3a>
   213fa:	4a1e      	ldr	r2, [pc, #120]	; (21474 <z_sched_wake_thread+0x98>)
   213fc:	491e      	ldr	r1, [pc, #120]	; (21478 <z_sched_wake_thread+0x9c>)
   213fe:	481f      	ldr	r0, [pc, #124]	; (2147c <z_sched_wake_thread+0xa0>)
   21400:	2394      	movs	r3, #148	; 0x94
   21402:	f002 f8fa 	bl	235fa <assert_print>
   21406:	491a      	ldr	r1, [pc, #104]	; (21470 <z_sched_wake_thread+0x94>)
   21408:	481d      	ldr	r0, [pc, #116]	; (21480 <z_sched_wake_thread+0xa4>)
   2140a:	f002 f8f6 	bl	235fa <assert_print>
   2140e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21410:	4818      	ldr	r0, [pc, #96]	; (21474 <z_sched_wake_thread+0x98>)
   21412:	f002 f8eb 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   21416:	4816      	ldr	r0, [pc, #88]	; (21470 <z_sched_wake_thread+0x94>)
   21418:	f7fe f928 	bl	1f66c <z_spin_lock_set_owner>
		if (!killed) {
   2141c:	7b63      	ldrb	r3, [r4, #13]
   2141e:	f013 0f28 	tst.w	r3, #40	; 0x28
   21422:	d10c      	bne.n	2143e <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   21424:	68a3      	ldr	r3, [r4, #8]
   21426:	b113      	cbz	r3, 2142e <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   21428:	4620      	mov	r0, r4
   2142a:	f7ff ff6b 	bl	21304 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2142e:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   21430:	b9ad      	cbnz	r5, 2145e <z_sched_wake_thread+0x82>
   21432:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   21436:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   21438:	4620      	mov	r0, r4
   2143a:	f7ff fa5f 	bl	208fc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2143e:	480c      	ldr	r0, [pc, #48]	; (21470 <z_sched_wake_thread+0x94>)
   21440:	f7fe f904 	bl	1f64c <z_spin_unlock_valid>
   21444:	b970      	cbnz	r0, 21464 <z_sched_wake_thread+0x88>
   21446:	4a0b      	ldr	r2, [pc, #44]	; (21474 <z_sched_wake_thread+0x98>)
   21448:	490e      	ldr	r1, [pc, #56]	; (21484 <z_sched_wake_thread+0xa8>)
   2144a:	480c      	ldr	r0, [pc, #48]	; (2147c <z_sched_wake_thread+0xa0>)
   2144c:	23c2      	movs	r3, #194	; 0xc2
   2144e:	f002 f8d4 	bl	235fa <assert_print>
   21452:	4907      	ldr	r1, [pc, #28]	; (21470 <z_sched_wake_thread+0x94>)
   21454:	480c      	ldr	r0, [pc, #48]	; (21488 <z_sched_wake_thread+0xac>)
   21456:	f002 f8d0 	bl	235fa <assert_print>
   2145a:	21c2      	movs	r1, #194	; 0xc2
   2145c:	e7d8      	b.n	21410 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2145e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   21462:	e7e8      	b.n	21436 <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   21464:	f386 8811 	msr	BASEPRI, r6
   21468:	f3bf 8f6f 	isb	sy
}
   2146c:	bd70      	pop	{r4, r5, r6, pc}
   2146e:	bf00      	nop
   21470:	20002f18 	.word	0x20002f18
   21474:	0002730e 	.word	0x0002730e
   21478:	00027367 	.word	0x00027367
   2147c:	00026f1a 	.word	0x00026f1a
   21480:	0002737c 	.word	0x0002737c
   21484:	0002733b 	.word	0x0002733b
   21488:	00027352 	.word	0x00027352

0002148c <z_unpend1_no_timeout>:
{
   2148c:	b570      	push	{r4, r5, r6, lr}
   2148e:	4605      	mov	r5, r0
	__asm__ volatile(
   21490:	f04f 0340 	mov.w	r3, #64	; 0x40
   21494:	f3ef 8611 	mrs	r6, BASEPRI
   21498:	f383 8812 	msr	BASEPRI_MAX, r3
   2149c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214a0:	4819      	ldr	r0, [pc, #100]	; (21508 <z_unpend1_no_timeout+0x7c>)
   214a2:	f7fe f8c5 	bl	1f630 <z_spin_lock_valid>
   214a6:	b968      	cbnz	r0, 214c4 <z_unpend1_no_timeout+0x38>
   214a8:	4a18      	ldr	r2, [pc, #96]	; (2150c <z_unpend1_no_timeout+0x80>)
   214aa:	4919      	ldr	r1, [pc, #100]	; (21510 <z_unpend1_no_timeout+0x84>)
   214ac:	4819      	ldr	r0, [pc, #100]	; (21514 <z_unpend1_no_timeout+0x88>)
   214ae:	2394      	movs	r3, #148	; 0x94
   214b0:	f002 f8a3 	bl	235fa <assert_print>
   214b4:	4914      	ldr	r1, [pc, #80]	; (21508 <z_unpend1_no_timeout+0x7c>)
   214b6:	4818      	ldr	r0, [pc, #96]	; (21518 <z_unpend1_no_timeout+0x8c>)
   214b8:	f002 f89f 	bl	235fa <assert_print>
   214bc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214be:	4813      	ldr	r0, [pc, #76]	; (2150c <z_unpend1_no_timeout+0x80>)
   214c0:	f002 f894 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   214c4:	4810      	ldr	r0, [pc, #64]	; (21508 <z_unpend1_no_timeout+0x7c>)
   214c6:	f7fe f8d1 	bl	1f66c <z_spin_lock_set_owner>
	return list->head == list;
   214ca:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214cc:	42a5      	cmp	r5, r4
   214ce:	d013      	beq.n	214f8 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   214d0:	b114      	cbz	r4, 214d8 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   214d2:	4620      	mov	r0, r4
   214d4:	f7ff ff16 	bl	21304 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   214d8:	480b      	ldr	r0, [pc, #44]	; (21508 <z_unpend1_no_timeout+0x7c>)
   214da:	f7fe f8b7 	bl	1f64c <z_spin_unlock_valid>
   214de:	b968      	cbnz	r0, 214fc <z_unpend1_no_timeout+0x70>
   214e0:	4a0a      	ldr	r2, [pc, #40]	; (2150c <z_unpend1_no_timeout+0x80>)
   214e2:	490e      	ldr	r1, [pc, #56]	; (2151c <z_unpend1_no_timeout+0x90>)
   214e4:	480b      	ldr	r0, [pc, #44]	; (21514 <z_unpend1_no_timeout+0x88>)
   214e6:	23c2      	movs	r3, #194	; 0xc2
   214e8:	f002 f887 	bl	235fa <assert_print>
   214ec:	4906      	ldr	r1, [pc, #24]	; (21508 <z_unpend1_no_timeout+0x7c>)
   214ee:	480c      	ldr	r0, [pc, #48]	; (21520 <z_unpend1_no_timeout+0x94>)
   214f0:	f002 f883 	bl	235fa <assert_print>
   214f4:	21c2      	movs	r1, #194	; 0xc2
   214f6:	e7e2      	b.n	214be <z_unpend1_no_timeout+0x32>
   214f8:	2400      	movs	r4, #0
   214fa:	e7ed      	b.n	214d8 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   214fc:	f386 8811 	msr	BASEPRI, r6
   21500:	f3bf 8f6f 	isb	sy
}
   21504:	4620      	mov	r0, r4
   21506:	bd70      	pop	{r4, r5, r6, pc}
   21508:	20002f18 	.word	0x20002f18
   2150c:	0002730e 	.word	0x0002730e
   21510:	00027367 	.word	0x00027367
   21514:	00026f1a 	.word	0x00026f1a
   21518:	0002737c 	.word	0x0002737c
   2151c:	0002733b 	.word	0x0002733b
   21520:	00027352 	.word	0x00027352

00021524 <z_unpend_first_thread>:
{
   21524:	b570      	push	{r4, r5, r6, lr}
   21526:	4605      	mov	r5, r0
	__asm__ volatile(
   21528:	f04f 0340 	mov.w	r3, #64	; 0x40
   2152c:	f3ef 8611 	mrs	r6, BASEPRI
   21530:	f383 8812 	msr	BASEPRI_MAX, r3
   21534:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21538:	481b      	ldr	r0, [pc, #108]	; (215a8 <z_unpend_first_thread+0x84>)
   2153a:	f7fe f879 	bl	1f630 <z_spin_lock_valid>
   2153e:	b968      	cbnz	r0, 2155c <z_unpend_first_thread+0x38>
   21540:	4a1a      	ldr	r2, [pc, #104]	; (215ac <z_unpend_first_thread+0x88>)
   21542:	491b      	ldr	r1, [pc, #108]	; (215b0 <z_unpend_first_thread+0x8c>)
   21544:	481b      	ldr	r0, [pc, #108]	; (215b4 <z_unpend_first_thread+0x90>)
   21546:	2394      	movs	r3, #148	; 0x94
   21548:	f002 f857 	bl	235fa <assert_print>
   2154c:	4916      	ldr	r1, [pc, #88]	; (215a8 <z_unpend_first_thread+0x84>)
   2154e:	481a      	ldr	r0, [pc, #104]	; (215b8 <z_unpend_first_thread+0x94>)
   21550:	f002 f853 	bl	235fa <assert_print>
   21554:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21556:	4815      	ldr	r0, [pc, #84]	; (215ac <z_unpend_first_thread+0x88>)
   21558:	f002 f848 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   2155c:	4812      	ldr	r0, [pc, #72]	; (215a8 <z_unpend_first_thread+0x84>)
   2155e:	f7fe f885 	bl	1f66c <z_spin_lock_set_owner>
	return list->head == list;
   21562:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21564:	42a5      	cmp	r5, r4
   21566:	d017      	beq.n	21598 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   21568:	b134      	cbz	r4, 21578 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   2156a:	4620      	mov	r0, r4
   2156c:	f7ff feca 	bl	21304 <unpend_thread_no_timeout>
   21570:	f104 0018 	add.w	r0, r4, #24
   21574:	f000 fbfa 	bl	21d6c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21578:	480b      	ldr	r0, [pc, #44]	; (215a8 <z_unpend_first_thread+0x84>)
   2157a:	f7fe f867 	bl	1f64c <z_spin_unlock_valid>
   2157e:	b968      	cbnz	r0, 2159c <z_unpend_first_thread+0x78>
   21580:	4a0a      	ldr	r2, [pc, #40]	; (215ac <z_unpend_first_thread+0x88>)
   21582:	490e      	ldr	r1, [pc, #56]	; (215bc <z_unpend_first_thread+0x98>)
   21584:	480b      	ldr	r0, [pc, #44]	; (215b4 <z_unpend_first_thread+0x90>)
   21586:	23c2      	movs	r3, #194	; 0xc2
   21588:	f002 f837 	bl	235fa <assert_print>
   2158c:	4906      	ldr	r1, [pc, #24]	; (215a8 <z_unpend_first_thread+0x84>)
   2158e:	480c      	ldr	r0, [pc, #48]	; (215c0 <z_unpend_first_thread+0x9c>)
   21590:	f002 f833 	bl	235fa <assert_print>
   21594:	21c2      	movs	r1, #194	; 0xc2
   21596:	e7de      	b.n	21556 <z_unpend_first_thread+0x32>
   21598:	2400      	movs	r4, #0
   2159a:	e7ed      	b.n	21578 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   2159c:	f386 8811 	msr	BASEPRI, r6
   215a0:	f3bf 8f6f 	isb	sy
}
   215a4:	4620      	mov	r0, r4
   215a6:	bd70      	pop	{r4, r5, r6, pc}
   215a8:	20002f18 	.word	0x20002f18
   215ac:	0002730e 	.word	0x0002730e
   215b0:	00027367 	.word	0x00027367
   215b4:	00026f1a 	.word	0x00026f1a
   215b8:	0002737c 	.word	0x0002737c
   215bc:	0002733b 	.word	0x0002733b
   215c0:	00027352 	.word	0x00027352

000215c4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   215c4:	4b02      	ldr	r3, [pc, #8]	; (215d0 <z_sched_init+0xc>)
   215c6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   215ca:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   215ce:	4770      	bx	lr
   215d0:	20002ed4 	.word	0x20002ed4

000215d4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   215d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215d6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   215da:	b16b      	cbz	r3, 215f8 <z_impl_k_yield+0x24>
   215dc:	493c      	ldr	r1, [pc, #240]	; (216d0 <z_impl_k_yield+0xfc>)
   215de:	4a3d      	ldr	r2, [pc, #244]	; (216d4 <z_impl_k_yield+0x100>)
   215e0:	483d      	ldr	r0, [pc, #244]	; (216d8 <z_impl_k_yield+0x104>)
   215e2:	f240 5371 	movw	r3, #1393	; 0x571
   215e6:	f002 f808 	bl	235fa <assert_print>
   215ea:	483c      	ldr	r0, [pc, #240]	; (216dc <z_impl_k_yield+0x108>)
   215ec:	f002 f805 	bl	235fa <assert_print>
   215f0:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   215f4:	4837      	ldr	r0, [pc, #220]	; (216d4 <z_impl_k_yield+0x100>)
   215f6:	e017      	b.n	21628 <z_impl_k_yield+0x54>
	__asm__ volatile(
   215f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   215fc:	f3ef 8611 	mrs	r6, BASEPRI
   21600:	f383 8812 	msr	BASEPRI_MAX, r3
   21604:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21608:	4835      	ldr	r0, [pc, #212]	; (216e0 <z_impl_k_yield+0x10c>)
   2160a:	f7fe f811 	bl	1f630 <z_spin_lock_valid>
   2160e:	b968      	cbnz	r0, 2162c <z_impl_k_yield+0x58>
   21610:	4a34      	ldr	r2, [pc, #208]	; (216e4 <z_impl_k_yield+0x110>)
   21612:	4935      	ldr	r1, [pc, #212]	; (216e8 <z_impl_k_yield+0x114>)
   21614:	4830      	ldr	r0, [pc, #192]	; (216d8 <z_impl_k_yield+0x104>)
   21616:	2394      	movs	r3, #148	; 0x94
   21618:	f001 ffef 	bl	235fa <assert_print>
   2161c:	4930      	ldr	r1, [pc, #192]	; (216e0 <z_impl_k_yield+0x10c>)
   2161e:	4833      	ldr	r0, [pc, #204]	; (216ec <z_impl_k_yield+0x118>)
   21620:	f001 ffeb 	bl	235fa <assert_print>
   21624:	2194      	movs	r1, #148	; 0x94
   21626:	482f      	ldr	r0, [pc, #188]	; (216e4 <z_impl_k_yield+0x110>)
   21628:	f001 ffe0 	bl	235ec <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2162c:	4c30      	ldr	r4, [pc, #192]	; (216f0 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   2162e:	482c      	ldr	r0, [pc, #176]	; (216e0 <z_impl_k_yield+0x10c>)
   21630:	f7fe f81c 	bl	1f66c <z_spin_lock_set_owner>
   21634:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21636:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21638:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2163c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21640:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21642:	4628      	mov	r0, r5
   21644:	f7ff fba6 	bl	20d94 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   21648:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2164a:	7b5a      	ldrb	r2, [r3, #13]
   2164c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21650:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21652:	4a28      	ldr	r2, [pc, #160]	; (216f4 <z_impl_k_yield+0x120>)
   21654:	4293      	cmp	r3, r2
   21656:	d107      	bne.n	21668 <z_impl_k_yield+0x94>
   21658:	4927      	ldr	r1, [pc, #156]	; (216f8 <z_impl_k_yield+0x124>)
   2165a:	4a1e      	ldr	r2, [pc, #120]	; (216d4 <z_impl_k_yield+0x100>)
   2165c:	481e      	ldr	r0, [pc, #120]	; (216d8 <z_impl_k_yield+0x104>)
   2165e:	23bc      	movs	r3, #188	; 0xbc
   21660:	f001 ffcb 	bl	235fa <assert_print>
   21664:	21bc      	movs	r1, #188	; 0xbc
   21666:	e7c5      	b.n	215f4 <z_impl_k_yield+0x20>
	return list->head == list;
   21668:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
   2166a:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2166c:	42aa      	cmp	r2, r5
   2166e:	bf08      	it	eq
   21670:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21672:	b922      	cbnz	r2, 2167e <z_impl_k_yield+0xaa>
	node->prev = tail;
   21674:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   21678:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2167a:	6223      	str	r3, [r4, #32]
}
   2167c:	e00c      	b.n	21698 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   2167e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   21682:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   21686:	42b8      	cmp	r0, r7
   21688:	d019      	beq.n	216be <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2168a:	4287      	cmp	r7, r0
   2168c:	dd17      	ble.n	216be <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   2168e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   21690:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   21694:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   21696:	6053      	str	r3, [r2, #4]
	update_cache(1);
   21698:	2001      	movs	r0, #1
   2169a:	f7ff f8fb 	bl	20894 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2169e:	4810      	ldr	r0, [pc, #64]	; (216e0 <z_impl_k_yield+0x10c>)
   216a0:	f7fd ffd4 	bl	1f64c <z_spin_unlock_valid>
   216a4:	b978      	cbnz	r0, 216c6 <z_impl_k_yield+0xf2>
   216a6:	4a0f      	ldr	r2, [pc, #60]	; (216e4 <z_impl_k_yield+0x110>)
   216a8:	4914      	ldr	r1, [pc, #80]	; (216fc <z_impl_k_yield+0x128>)
   216aa:	480b      	ldr	r0, [pc, #44]	; (216d8 <z_impl_k_yield+0x104>)
   216ac:	23e1      	movs	r3, #225	; 0xe1
   216ae:	f001 ffa4 	bl	235fa <assert_print>
   216b2:	490b      	ldr	r1, [pc, #44]	; (216e0 <z_impl_k_yield+0x10c>)
   216b4:	4812      	ldr	r0, [pc, #72]	; (21700 <z_impl_k_yield+0x12c>)
   216b6:	f001 ffa0 	bl	235fa <assert_print>
   216ba:	21e1      	movs	r1, #225	; 0xe1
   216bc:	e7b3      	b.n	21626 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   216be:	428a      	cmp	r2, r1
   216c0:	d0d8      	beq.n	21674 <z_impl_k_yield+0xa0>
   216c2:	6812      	ldr	r2, [r2, #0]
   216c4:	e7d5      	b.n	21672 <z_impl_k_yield+0x9e>
   216c6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   216c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   216cc:	f7f2 bd22 	b.w	14114 <arch_swap>
   216d0:	0002a3c0 	.word	0x0002a3c0
   216d4:	0002a62d 	.word	0x0002a62d
   216d8:	00026f1a 	.word	0x00026f1a
   216dc:	0002948c 	.word	0x0002948c
   216e0:	20002f18 	.word	0x20002f18
   216e4:	0002730e 	.word	0x0002730e
   216e8:	00027367 	.word	0x00027367
   216ec:	0002737c 	.word	0x0002737c
   216f0:	20002ed4 	.word	0x20002ed4
   216f4:	20002968 	.word	0x20002968
   216f8:	0002a80f 	.word	0x0002a80f
   216fc:	0002733b 	.word	0x0002733b
   21700:	00027352 	.word	0x00027352

00021704 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21708:	4605      	mov	r5, r0
   2170a:	460e      	mov	r6, r1
   2170c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21710:	b16b      	cbz	r3, 2172e <z_tick_sleep+0x2a>
   21712:	493f      	ldr	r1, [pc, #252]	; (21810 <z_tick_sleep+0x10c>)
   21714:	4a3f      	ldr	r2, [pc, #252]	; (21814 <z_tick_sleep+0x110>)
   21716:	4840      	ldr	r0, [pc, #256]	; (21818 <z_tick_sleep+0x114>)
   21718:	f240 538d 	movw	r3, #1421	; 0x58d
   2171c:	f001 ff6d 	bl	235fa <assert_print>
   21720:	483e      	ldr	r0, [pc, #248]	; (2181c <z_tick_sleep+0x118>)
   21722:	f001 ff6a 	bl	235fa <assert_print>
   21726:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2172a:	483a      	ldr	r0, [pc, #232]	; (21814 <z_tick_sleep+0x110>)
   2172c:	e025      	b.n	2177a <z_tick_sleep+0x76>
	if (ticks == 0) {
   2172e:	ea50 0301 	orrs.w	r3, r0, r1
   21732:	d103      	bne.n	2173c <z_tick_sleep+0x38>
	z_impl_k_yield();
   21734:	f7ff ff4e 	bl	215d4 <z_impl_k_yield>
		return 0;
   21738:	2000      	movs	r0, #0
   2173a:	e066      	b.n	2180a <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   2173c:	1c82      	adds	r2, r0, #2
   2173e:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   21742:	db1c      	blt.n	2177e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21744:	f004 fb0d 	bl	25d62 <sys_clock_tick_get_32>
   21748:	182c      	adds	r4, r5, r0
   2174a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2174e:	f3ef 8811 	mrs	r8, BASEPRI
   21752:	f383 8812 	msr	BASEPRI_MAX, r3
   21756:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2175a:	4831      	ldr	r0, [pc, #196]	; (21820 <z_tick_sleep+0x11c>)
   2175c:	f7fd ff68 	bl	1f630 <z_spin_lock_valid>
   21760:	b988      	cbnz	r0, 21786 <z_tick_sleep+0x82>
   21762:	4a30      	ldr	r2, [pc, #192]	; (21824 <z_tick_sleep+0x120>)
   21764:	4930      	ldr	r1, [pc, #192]	; (21828 <z_tick_sleep+0x124>)
   21766:	482c      	ldr	r0, [pc, #176]	; (21818 <z_tick_sleep+0x114>)
   21768:	2394      	movs	r3, #148	; 0x94
   2176a:	f001 ff46 	bl	235fa <assert_print>
   2176e:	492c      	ldr	r1, [pc, #176]	; (21820 <z_tick_sleep+0x11c>)
   21770:	482e      	ldr	r0, [pc, #184]	; (2182c <z_tick_sleep+0x128>)
   21772:	f001 ff42 	bl	235fa <assert_print>
   21776:	2194      	movs	r1, #148	; 0x94
   21778:	482a      	ldr	r0, [pc, #168]	; (21824 <z_tick_sleep+0x120>)
   2177a:	f001 ff37 	bl	235ec <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   2177e:	f06f 0401 	mvn.w	r4, #1
   21782:	1a24      	subs	r4, r4, r0
   21784:	e7e1      	b.n	2174a <z_tick_sleep+0x46>
	pending_current = _current;
   21786:	4f2a      	ldr	r7, [pc, #168]	; (21830 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   21788:	4825      	ldr	r0, [pc, #148]	; (21820 <z_tick_sleep+0x11c>)
   2178a:	f7fd ff6f 	bl	1f66c <z_spin_lock_set_owner>
   2178e:	4b29      	ldr	r3, [pc, #164]	; (21834 <z_tick_sleep+0x130>)
   21790:	68b8      	ldr	r0, [r7, #8]
   21792:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21794:	f7ff fbd4 	bl	20f40 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21798:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2179a:	4927      	ldr	r1, [pc, #156]	; (21838 <z_tick_sleep+0x134>)
   2179c:	462a      	mov	r2, r5
   2179e:	4633      	mov	r3, r6
   217a0:	3018      	adds	r0, #24
   217a2:	f000 fa23 	bl	21bec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   217a6:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217a8:	481d      	ldr	r0, [pc, #116]	; (21820 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   217aa:	7b53      	ldrb	r3, [r2, #13]
   217ac:	f043 0310 	orr.w	r3, r3, #16
   217b0:	7353      	strb	r3, [r2, #13]
   217b2:	f7fd ff4b 	bl	1f64c <z_spin_unlock_valid>
   217b6:	b958      	cbnz	r0, 217d0 <z_tick_sleep+0xcc>
   217b8:	4a1a      	ldr	r2, [pc, #104]	; (21824 <z_tick_sleep+0x120>)
   217ba:	4920      	ldr	r1, [pc, #128]	; (2183c <z_tick_sleep+0x138>)
   217bc:	4816      	ldr	r0, [pc, #88]	; (21818 <z_tick_sleep+0x114>)
   217be:	23e1      	movs	r3, #225	; 0xe1
   217c0:	f001 ff1b 	bl	235fa <assert_print>
   217c4:	4916      	ldr	r1, [pc, #88]	; (21820 <z_tick_sleep+0x11c>)
   217c6:	481e      	ldr	r0, [pc, #120]	; (21840 <z_tick_sleep+0x13c>)
   217c8:	f001 ff17 	bl	235fa <assert_print>
   217cc:	21e1      	movs	r1, #225	; 0xe1
   217ce:	e7d3      	b.n	21778 <z_tick_sleep+0x74>
   217d0:	4640      	mov	r0, r8
   217d2:	f7f2 fc9f 	bl	14114 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   217d6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   217d8:	7b5b      	ldrb	r3, [r3, #13]
   217da:	06db      	lsls	r3, r3, #27
   217dc:	d50c      	bpl.n	217f8 <z_tick_sleep+0xf4>
   217de:	4919      	ldr	r1, [pc, #100]	; (21844 <z_tick_sleep+0x140>)
   217e0:	4a0c      	ldr	r2, [pc, #48]	; (21814 <z_tick_sleep+0x110>)
   217e2:	480d      	ldr	r0, [pc, #52]	; (21818 <z_tick_sleep+0x114>)
   217e4:	f240 53a9 	movw	r3, #1449	; 0x5a9
   217e8:	f001 ff07 	bl	235fa <assert_print>
   217ec:	480b      	ldr	r0, [pc, #44]	; (2181c <z_tick_sleep+0x118>)
   217ee:	f001 ff04 	bl	235fa <assert_print>
   217f2:	f240 51a9 	movw	r1, #1449	; 0x5a9
   217f6:	e798      	b.n	2172a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   217f8:	f004 fab3 	bl	25d62 <sys_clock_tick_get_32>
   217fc:	1a20      	subs	r0, r4, r0
   217fe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   21802:	2801      	cmp	r0, #1
   21804:	f173 0300 	sbcs.w	r3, r3, #0
   21808:	db96      	blt.n	21738 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   2180a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2180e:	bf00      	nop
   21810:	0002a3c0 	.word	0x0002a3c0
   21814:	0002a62d 	.word	0x0002a62d
   21818:	00026f1a 	.word	0x00026f1a
   2181c:	0002948c 	.word	0x0002948c
   21820:	20002f18 	.word	0x20002f18
   21824:	0002730e 	.word	0x0002730e
   21828:	00027367 	.word	0x00027367
   2182c:	0002737c 	.word	0x0002737c
   21830:	20002ed4 	.word	0x20002ed4
   21834:	20002f0c 	.word	0x20002f0c
   21838:	00025d3b 	.word	0x00025d3b
   2183c:	0002733b 	.word	0x0002733b
   21840:	00027352 	.word	0x00027352
   21844:	0002a90b 	.word	0x0002a90b

00021848 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21848:	b508      	push	{r3, lr}
   2184a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2184e:	b173      	cbz	r3, 2186e <z_impl_k_sleep+0x26>
   21850:	4912      	ldr	r1, [pc, #72]	; (2189c <z_impl_k_sleep+0x54>)
   21852:	4a13      	ldr	r2, [pc, #76]	; (218a0 <z_impl_k_sleep+0x58>)
   21854:	4813      	ldr	r0, [pc, #76]	; (218a4 <z_impl_k_sleep+0x5c>)
   21856:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   2185a:	f001 fece 	bl	235fa <assert_print>
   2185e:	4812      	ldr	r0, [pc, #72]	; (218a8 <z_impl_k_sleep+0x60>)
   21860:	f001 fecb 	bl	235fa <assert_print>
   21864:	480e      	ldr	r0, [pc, #56]	; (218a0 <z_impl_k_sleep+0x58>)
   21866:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   2186a:	f001 febf 	bl	235ec <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2186e:	f1b1 3fff 	cmp.w	r1, #4294967295
   21872:	bf08      	it	eq
   21874:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   21878:	d106      	bne.n	21888 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   2187a:	4b0c      	ldr	r3, [pc, #48]	; (218ac <z_impl_k_sleep+0x64>)
   2187c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2187e:	f7ff fcd9 	bl	21234 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   21882:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   21886:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   21888:	f7ff ff3c 	bl	21704 <z_tick_sleep>
   2188c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21890:	fb80 0303 	smull	r0, r3, r0, r3
   21894:	0bc0      	lsrs	r0, r0, #15
   21896:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2189a:	e7f4      	b.n	21886 <z_impl_k_sleep+0x3e>
   2189c:	0002a3c0 	.word	0x0002a3c0
   218a0:	0002a62d 	.word	0x0002a62d
   218a4:	00026f1a 	.word	0x00026f1a
   218a8:	0002948c 	.word	0x0002948c
   218ac:	20002ed4 	.word	0x20002ed4

000218b0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   218b0:	4b01      	ldr	r3, [pc, #4]	; (218b8 <z_impl_z_current_get+0x8>)
   218b2:	6898      	ldr	r0, [r3, #8]
   218b4:	4770      	bx	lr
   218b6:	bf00      	nop
   218b8:	20002ed4 	.word	0x20002ed4

000218bc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   218bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   218c0:	4604      	mov	r4, r0
   218c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   218c6:	f3ef 8611 	mrs	r6, BASEPRI
   218ca:	f383 8812 	msr	BASEPRI_MAX, r3
   218ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218d2:	4851      	ldr	r0, [pc, #324]	; (21a18 <z_thread_abort+0x15c>)
   218d4:	f7fd feac 	bl	1f630 <z_spin_lock_valid>
   218d8:	b968      	cbnz	r0, 218f6 <z_thread_abort+0x3a>
   218da:	4a50      	ldr	r2, [pc, #320]	; (21a1c <z_thread_abort+0x160>)
   218dc:	4950      	ldr	r1, [pc, #320]	; (21a20 <z_thread_abort+0x164>)
   218de:	4851      	ldr	r0, [pc, #324]	; (21a24 <z_thread_abort+0x168>)
   218e0:	2394      	movs	r3, #148	; 0x94
   218e2:	f001 fe8a 	bl	235fa <assert_print>
   218e6:	494c      	ldr	r1, [pc, #304]	; (21a18 <z_thread_abort+0x15c>)
   218e8:	484f      	ldr	r0, [pc, #316]	; (21a28 <z_thread_abort+0x16c>)
   218ea:	f001 fe86 	bl	235fa <assert_print>
   218ee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218f0:	484a      	ldr	r0, [pc, #296]	; (21a1c <z_thread_abort+0x160>)
   218f2:	f001 fe7b 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   218f6:	4848      	ldr	r0, [pc, #288]	; (21a18 <z_thread_abort+0x15c>)
   218f8:	f7fd feb8 	bl	1f66c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   218fc:	7b23      	ldrb	r3, [r4, #12]
   218fe:	07d9      	lsls	r1, r3, #31
   21900:	d522      	bpl.n	21948 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21902:	4845      	ldr	r0, [pc, #276]	; (21a18 <z_thread_abort+0x15c>)
   21904:	f7fd fea2 	bl	1f64c <z_spin_unlock_valid>
   21908:	b958      	cbnz	r0, 21922 <z_thread_abort+0x66>
   2190a:	4a44      	ldr	r2, [pc, #272]	; (21a1c <z_thread_abort+0x160>)
   2190c:	4947      	ldr	r1, [pc, #284]	; (21a2c <z_thread_abort+0x170>)
   2190e:	4845      	ldr	r0, [pc, #276]	; (21a24 <z_thread_abort+0x168>)
   21910:	23c2      	movs	r3, #194	; 0xc2
   21912:	f001 fe72 	bl	235fa <assert_print>
   21916:	4940      	ldr	r1, [pc, #256]	; (21a18 <z_thread_abort+0x15c>)
   21918:	4845      	ldr	r0, [pc, #276]	; (21a30 <z_thread_abort+0x174>)
   2191a:	f001 fe6e 	bl	235fa <assert_print>
   2191e:	21c2      	movs	r1, #194	; 0xc2
   21920:	e7e6      	b.n	218f0 <z_thread_abort+0x34>
	__asm__ volatile(
   21922:	f386 8811 	msr	BASEPRI, r6
   21926:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   2192a:	4a42      	ldr	r2, [pc, #264]	; (21a34 <z_thread_abort+0x178>)
   2192c:	4942      	ldr	r1, [pc, #264]	; (21a38 <z_thread_abort+0x17c>)
   2192e:	483d      	ldr	r0, [pc, #244]	; (21a24 <z_thread_abort+0x168>)
   21930:	f240 63ca 	movw	r3, #1738	; 0x6ca
   21934:	f001 fe61 	bl	235fa <assert_print>
   21938:	4621      	mov	r1, r4
   2193a:	4840      	ldr	r0, [pc, #256]	; (21a3c <z_thread_abort+0x180>)
   2193c:	f001 fe5d 	bl	235fa <assert_print>
   21940:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   21944:	483b      	ldr	r0, [pc, #236]	; (21a34 <z_thread_abort+0x178>)
   21946:	e7d4      	b.n	218f2 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21948:	7b63      	ldrb	r3, [r4, #13]
   2194a:	071a      	lsls	r2, r3, #28
   2194c:	d50a      	bpl.n	21964 <z_thread_abort+0xa8>
   2194e:	4832      	ldr	r0, [pc, #200]	; (21a18 <z_thread_abort+0x15c>)
   21950:	f7fd fe7c 	bl	1f64c <z_spin_unlock_valid>
   21954:	2800      	cmp	r0, #0
   21956:	d0d8      	beq.n	2190a <z_thread_abort+0x4e>
   21958:	f386 8811 	msr	BASEPRI, r6
   2195c:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21964:	f023 0220 	bic.w	r2, r3, #32
   21968:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2196c:	09d2      	lsrs	r2, r2, #7
   2196e:	d12c      	bne.n	219ca <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21970:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   21972:	68a3      	ldr	r3, [r4, #8]
   21974:	b113      	cbz	r3, 2197c <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   21976:	4620      	mov	r0, r4
   21978:	f7ff fcc4 	bl	21304 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2197c:	f104 0018 	add.w	r0, r4, #24
   21980:	f000 f9f4 	bl	21d6c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21984:	f104 0758 	add.w	r7, r4, #88	; 0x58
   21988:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2198c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2198e:	42bd      	cmp	r5, r7
   21990:	d000      	beq.n	21994 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21992:	bb25      	cbnz	r5, 219de <z_thread_abort+0x122>
		update_cache(1);
   21994:	2001      	movs	r0, #1
   21996:	f7fe ff7d 	bl	20894 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2199a:	4b29      	ldr	r3, [pc, #164]	; (21a40 <z_thread_abort+0x184>)
   2199c:	689b      	ldr	r3, [r3, #8]
   2199e:	42a3      	cmp	r3, r4
   219a0:	d1d5      	bne.n	2194e <z_thread_abort+0x92>
   219a2:	f3ef 8305 	mrs	r3, IPSR
   219a6:	2b00      	cmp	r3, #0
   219a8:	d1d1      	bne.n	2194e <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219aa:	481b      	ldr	r0, [pc, #108]	; (21a18 <z_thread_abort+0x15c>)
   219ac:	f7fd fe4e 	bl	1f64c <z_spin_unlock_valid>
   219b0:	bb10      	cbnz	r0, 219f8 <z_thread_abort+0x13c>
   219b2:	4a1a      	ldr	r2, [pc, #104]	; (21a1c <z_thread_abort+0x160>)
   219b4:	491d      	ldr	r1, [pc, #116]	; (21a2c <z_thread_abort+0x170>)
   219b6:	481b      	ldr	r0, [pc, #108]	; (21a24 <z_thread_abort+0x168>)
   219b8:	23e1      	movs	r3, #225	; 0xe1
   219ba:	f001 fe1e 	bl	235fa <assert_print>
   219be:	4916      	ldr	r1, [pc, #88]	; (21a18 <z_thread_abort+0x15c>)
   219c0:	481b      	ldr	r0, [pc, #108]	; (21a30 <z_thread_abort+0x174>)
   219c2:	f001 fe1a 	bl	235fa <assert_print>
   219c6:	21e1      	movs	r1, #225	; 0xe1
   219c8:	e792      	b.n	218f0 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   219ca:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   219ce:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   219d2:	481c      	ldr	r0, [pc, #112]	; (21a44 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   219d4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   219d6:	4621      	mov	r1, r4
   219d8:	f7ff f9dc 	bl	20d94 <z_priq_dumb_remove>
}
   219dc:	e7c9      	b.n	21972 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   219de:	4628      	mov	r0, r5
   219e0:	f7ff fc90 	bl	21304 <unpend_thread_no_timeout>
   219e4:	f105 0018 	add.w	r0, r5, #24
   219e8:	f000 f9c0 	bl	21d6c <z_abort_timeout>
   219ec:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   219f0:	4628      	mov	r0, r5
   219f2:	f7fe ff83 	bl	208fc <ready_thread>
   219f6:	e7c9      	b.n	2198c <z_thread_abort+0xd0>
   219f8:	4630      	mov	r0, r6
   219fa:	f7f2 fb8b 	bl	14114 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   219fe:	490e      	ldr	r1, [pc, #56]	; (21a38 <z_thread_abort+0x17c>)
   21a00:	4a0c      	ldr	r2, [pc, #48]	; (21a34 <z_thread_abort+0x178>)
   21a02:	4808      	ldr	r0, [pc, #32]	; (21a24 <z_thread_abort+0x168>)
   21a04:	f240 63f9 	movw	r3, #1785	; 0x6f9
   21a08:	f001 fdf7 	bl	235fa <assert_print>
   21a0c:	480e      	ldr	r0, [pc, #56]	; (21a48 <z_thread_abort+0x18c>)
   21a0e:	f001 fdf4 	bl	235fa <assert_print>
   21a12:	f240 61f9 	movw	r1, #1785	; 0x6f9
   21a16:	e795      	b.n	21944 <z_thread_abort+0x88>
   21a18:	20002f18 	.word	0x20002f18
   21a1c:	0002730e 	.word	0x0002730e
   21a20:	00027367 	.word	0x00027367
   21a24:	00026f1a 	.word	0x00026f1a
   21a28:	0002737c 	.word	0x0002737c
   21a2c:	0002733b 	.word	0x0002733b
   21a30:	00027352 	.word	0x00027352
   21a34:	0002a62d 	.word	0x0002a62d
   21a38:	00029a2c 	.word	0x00029a2c
   21a3c:	0002a94b 	.word	0x0002a94b
   21a40:	20002ed4 	.word	0x20002ed4
   21a44:	20002ef0 	.word	0x20002ef0
   21a48:	0002a96a 	.word	0x0002a96a

00021a4c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   21a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a50:	4606      	mov	r6, r0
   21a52:	4688      	mov	r8, r1
   21a54:	4617      	mov	r7, r2
	__asm__ volatile(
   21a56:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a5a:	f3ef 8911 	mrs	r9, BASEPRI
   21a5e:	f383 8812 	msr	BASEPRI_MAX, r3
   21a62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a66:	4821      	ldr	r0, [pc, #132]	; (21aec <z_sched_wake+0xa0>)
   21a68:	f7fd fde2 	bl	1f630 <z_spin_lock_valid>
   21a6c:	4605      	mov	r5, r0
   21a6e:	b968      	cbnz	r0, 21a8c <z_sched_wake+0x40>
   21a70:	4a1f      	ldr	r2, [pc, #124]	; (21af0 <z_sched_wake+0xa4>)
   21a72:	4920      	ldr	r1, [pc, #128]	; (21af4 <z_sched_wake+0xa8>)
   21a74:	4820      	ldr	r0, [pc, #128]	; (21af8 <z_sched_wake+0xac>)
   21a76:	2394      	movs	r3, #148	; 0x94
   21a78:	f001 fdbf 	bl	235fa <assert_print>
   21a7c:	491b      	ldr	r1, [pc, #108]	; (21aec <z_sched_wake+0xa0>)
   21a7e:	481f      	ldr	r0, [pc, #124]	; (21afc <z_sched_wake+0xb0>)
   21a80:	f001 fdbb 	bl	235fa <assert_print>
   21a84:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a86:	481a      	ldr	r0, [pc, #104]	; (21af0 <z_sched_wake+0xa4>)
   21a88:	f001 fdb0 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   21a8c:	4817      	ldr	r0, [pc, #92]	; (21aec <z_sched_wake+0xa0>)
   21a8e:	f7fd fded 	bl	1f66c <z_spin_lock_set_owner>
	return list->head == list;
   21a92:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a94:	42a6      	cmp	r6, r4
   21a96:	d01d      	beq.n	21ad4 <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   21a98:	b1f4      	cbz	r4, 21ad8 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   21a9a:	4620      	mov	r0, r4
   21a9c:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   21aa0:	6167      	str	r7, [r4, #20]
   21aa2:	f7ff fc2f 	bl	21304 <unpend_thread_no_timeout>
   21aa6:	f104 0018 	add.w	r0, r4, #24
   21aaa:	f000 f95f 	bl	21d6c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   21aae:	4620      	mov	r0, r4
   21ab0:	f7fe ff24 	bl	208fc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ab4:	480d      	ldr	r0, [pc, #52]	; (21aec <z_sched_wake+0xa0>)
   21ab6:	f7fd fdc9 	bl	1f64c <z_spin_unlock_valid>
   21aba:	b978      	cbnz	r0, 21adc <z_sched_wake+0x90>
   21abc:	4a0c      	ldr	r2, [pc, #48]	; (21af0 <z_sched_wake+0xa4>)
   21abe:	4910      	ldr	r1, [pc, #64]	; (21b00 <z_sched_wake+0xb4>)
   21ac0:	480d      	ldr	r0, [pc, #52]	; (21af8 <z_sched_wake+0xac>)
   21ac2:	23c2      	movs	r3, #194	; 0xc2
   21ac4:	f001 fd99 	bl	235fa <assert_print>
   21ac8:	4908      	ldr	r1, [pc, #32]	; (21aec <z_sched_wake+0xa0>)
   21aca:	480e      	ldr	r0, [pc, #56]	; (21b04 <z_sched_wake+0xb8>)
   21acc:	f001 fd95 	bl	235fa <assert_print>
   21ad0:	21c2      	movs	r1, #194	; 0xc2
   21ad2:	e7d8      	b.n	21a86 <z_sched_wake+0x3a>
	bool ret = false;
   21ad4:	2500      	movs	r5, #0
   21ad6:	e7ed      	b.n	21ab4 <z_sched_wake+0x68>
   21ad8:	4625      	mov	r5, r4
   21ada:	e7eb      	b.n	21ab4 <z_sched_wake+0x68>
	__asm__ volatile(
   21adc:	f389 8811 	msr	BASEPRI, r9
   21ae0:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   21ae4:	4628      	mov	r0, r5
   21ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21aea:	bf00      	nop
   21aec:	20002f18 	.word	0x20002f18
   21af0:	0002730e 	.word	0x0002730e
   21af4:	00027367 	.word	0x00027367
   21af8:	00026f1a 	.word	0x00026f1a
   21afc:	0002737c 	.word	0x0002737c
   21b00:	0002733b 	.word	0x0002733b
   21b04:	00027352 	.word	0x00027352

00021b08 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21b08:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21b0a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   21b0e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21b10:	e9cd 6700 	strd	r6, r7, [sp]
   21b14:	f7ff fa86 	bl	21024 <z_pend_curr>

	if (data != NULL) {
   21b18:	b11c      	cbz	r4, 21b22 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   21b1a:	4b03      	ldr	r3, [pc, #12]	; (21b28 <z_sched_wait+0x20>)
   21b1c:	689b      	ldr	r3, [r3, #8]
   21b1e:	695b      	ldr	r3, [r3, #20]
   21b20:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21b22:	b002      	add	sp, #8
   21b24:	bdd0      	pop	{r4, r6, r7, pc}
   21b26:	bf00      	nop
   21b28:	20002ed4 	.word	0x20002ed4

00021b2c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   21b2c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   21b2e:	4806      	ldr	r0, [pc, #24]	; (21b48 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   21b30:	4a06      	ldr	r2, [pc, #24]	; (21b4c <z_data_copy+0x20>)
   21b32:	4907      	ldr	r1, [pc, #28]	; (21b50 <z_data_copy+0x24>)
   21b34:	1a12      	subs	r2, r2, r0
   21b36:	f003 fffc 	bl	25b32 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   21b3e:	4a05      	ldr	r2, [pc, #20]	; (21b54 <z_data_copy+0x28>)
   21b40:	4905      	ldr	r1, [pc, #20]	; (21b58 <z_data_copy+0x2c>)
   21b42:	4806      	ldr	r0, [pc, #24]	; (21b5c <z_data_copy+0x30>)
   21b44:	f003 bff5 	b.w	25b32 <z_early_memcpy>
   21b48:	20000000 	.word	0x20000000
   21b4c:	20000b14 	.word	0x20000b14
   21b50:	0002ace8 	.word	0x0002ace8
   21b54:	00000000 	.word	0x00000000
   21b58:	0002ace8 	.word	0x0002ace8
   21b5c:	20000000 	.word	0x20000000

00021b60 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21b60:	4b03      	ldr	r3, [pc, #12]	; (21b70 <elapsed+0x10>)
   21b62:	681b      	ldr	r3, [r3, #0]
   21b64:	b90b      	cbnz	r3, 21b6a <elapsed+0xa>
   21b66:	f7fa bf95 	b.w	1ca94 <sys_clock_elapsed>
}
   21b6a:	2000      	movs	r0, #0
   21b6c:	4770      	bx	lr
   21b6e:	bf00      	nop
   21b70:	20002f1c 	.word	0x20002f1c

00021b74 <next_timeout>:

static int32_t next_timeout(void)
{
   21b74:	b510      	push	{r4, lr}
	return list->head == list;
   21b76:	4b0e      	ldr	r3, [pc, #56]	; (21bb0 <next_timeout+0x3c>)
   21b78:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b7a:	429c      	cmp	r4, r3
   21b7c:	d104      	bne.n	21b88 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   21b7e:	f7ff ffef 	bl	21b60 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   21b82:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   21b86:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   21b88:	f7ff ffea 	bl	21b60 <elapsed>
	if ((to == NULL) ||
   21b8c:	2c00      	cmp	r4, #0
   21b8e:	d0f8      	beq.n	21b82 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   21b90:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   21b94:	1a1b      	subs	r3, r3, r0
   21b96:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   21b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21b9e:	f172 0100 	sbcs.w	r1, r2, #0
   21ba2:	daee      	bge.n	21b82 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   21ba4:	2a00      	cmp	r2, #0
   21ba6:	bfac      	ite	ge
   21ba8:	4618      	movge	r0, r3
   21baa:	2000      	movlt	r0, #0
	return ret;
   21bac:	e7eb      	b.n	21b86 <next_timeout+0x12>
   21bae:	bf00      	nop
   21bb0:	20000768 	.word	0x20000768

00021bb4 <remove_timeout>:
{
   21bb4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21bb6:	b170      	cbz	r0, 21bd6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   21bb8:	4b0b      	ldr	r3, [pc, #44]	; (21be8 <remove_timeout+0x34>)
   21bba:	685b      	ldr	r3, [r3, #4]
   21bbc:	4298      	cmp	r0, r3
   21bbe:	d00a      	beq.n	21bd6 <remove_timeout+0x22>
   21bc0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   21bc2:	b143      	cbz	r3, 21bd6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   21bc4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   21bc8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   21bcc:	1912      	adds	r2, r2, r4
   21bce:	eb41 0105 	adc.w	r1, r1, r5
   21bd2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   21bd6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21bda:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21bdc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21bde:	2300      	movs	r3, #0
	node->prev = NULL;
   21be0:	e9c0 3300 	strd	r3, r3, [r0]
}
   21be4:	bd30      	pop	{r4, r5, pc}
   21be6:	bf00      	nop
   21be8:	20000768 	.word	0x20000768

00021bec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21bec:	f1b3 3fff 	cmp.w	r3, #4294967295
   21bf0:	bf08      	it	eq
   21bf2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   21bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21bfa:	4604      	mov	r4, r0
   21bfc:	4692      	mov	sl, r2
   21bfe:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c00:	f000 8099 	beq.w	21d36 <z_add_timeout+0x14a>
	return node->next != NULL;
   21c04:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   21c06:	b166      	cbz	r6, 21c22 <z_add_timeout+0x36>
   21c08:	494c      	ldr	r1, [pc, #304]	; (21d3c <z_add_timeout+0x150>)
   21c0a:	4a4d      	ldr	r2, [pc, #308]	; (21d40 <z_add_timeout+0x154>)
   21c0c:	484d      	ldr	r0, [pc, #308]	; (21d44 <z_add_timeout+0x158>)
   21c0e:	235e      	movs	r3, #94	; 0x5e
   21c10:	f001 fcf3 	bl	235fa <assert_print>
   21c14:	484c      	ldr	r0, [pc, #304]	; (21d48 <z_add_timeout+0x15c>)
   21c16:	f001 fcf0 	bl	235fa <assert_print>
   21c1a:	4849      	ldr	r0, [pc, #292]	; (21d40 <z_add_timeout+0x154>)
   21c1c:	215e      	movs	r1, #94	; 0x5e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c1e:	f001 fce5 	bl	235ec <assert_post_action>
	to->fn = fn;
   21c22:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   21c24:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c28:	f3ef 8711 	mrs	r7, BASEPRI
   21c2c:	f383 8812 	msr	BASEPRI_MAX, r3
   21c30:	f3bf 8f6f 	isb	sy
   21c34:	4845      	ldr	r0, [pc, #276]	; (21d4c <z_add_timeout+0x160>)
   21c36:	f7fd fcfb 	bl	1f630 <z_spin_lock_valid>
   21c3a:	b960      	cbnz	r0, 21c56 <z_add_timeout+0x6a>
   21c3c:	4a44      	ldr	r2, [pc, #272]	; (21d50 <z_add_timeout+0x164>)
   21c3e:	4945      	ldr	r1, [pc, #276]	; (21d54 <z_add_timeout+0x168>)
   21c40:	4840      	ldr	r0, [pc, #256]	; (21d44 <z_add_timeout+0x158>)
   21c42:	2394      	movs	r3, #148	; 0x94
   21c44:	f001 fcd9 	bl	235fa <assert_print>
   21c48:	4940      	ldr	r1, [pc, #256]	; (21d4c <z_add_timeout+0x160>)
   21c4a:	4843      	ldr	r0, [pc, #268]	; (21d58 <z_add_timeout+0x16c>)
   21c4c:	f001 fcd5 	bl	235fa <assert_print>
   21c50:	2194      	movs	r1, #148	; 0x94
   21c52:	483f      	ldr	r0, [pc, #252]	; (21d50 <z_add_timeout+0x164>)
   21c54:	e7e3      	b.n	21c1e <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   21c56:	483d      	ldr	r0, [pc, #244]	; (21d4c <z_add_timeout+0x160>)
   21c58:	f7fd fd08 	bl	1f66c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   21c5c:	f1ba 3fff 	cmp.w	sl, #4294967295
   21c60:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   21c64:	da23      	bge.n	21cae <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   21c66:	493d      	ldr	r1, [pc, #244]	; (21d5c <z_add_timeout+0x170>)
   21c68:	e9d1 2000 	ldrd	r2, r0, [r1]
   21c6c:	f06f 0301 	mvn.w	r3, #1
   21c70:	1a9b      	subs	r3, r3, r2
   21c72:	f04f 32ff 	mov.w	r2, #4294967295
   21c76:	eb62 0000 	sbc.w	r0, r2, r0
   21c7a:	ebb3 030a 	subs.w	r3, r3, sl
   21c7e:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   21c82:	2b01      	cmp	r3, #1
   21c84:	f170 0200 	sbcs.w	r2, r0, #0
   21c88:	da01      	bge.n	21c8e <z_add_timeout+0xa2>
   21c8a:	2301      	movs	r3, #1
   21c8c:	4630      	mov	r0, r6
   21c8e:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   21c92:	4b33      	ldr	r3, [pc, #204]	; (21d60 <z_add_timeout+0x174>)
   21c94:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   21c96:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c9a:	429a      	cmp	r2, r3
   21c9c:	bf18      	it	ne
   21c9e:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   21ca0:	b986      	cbnz	r6, 21cc4 <z_add_timeout+0xd8>
	node->prev = tail;
   21ca2:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   21ca6:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   21caa:	605c      	str	r4, [r3, #4]
}
   21cac:	e01c      	b.n	21ce8 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   21cae:	f7ff ff57 	bl	21b60 <elapsed>
   21cb2:	f11a 0801 	adds.w	r8, sl, #1
   21cb6:	f145 0500 	adc.w	r5, r5, #0
   21cba:	eb18 0300 	adds.w	r3, r8, r0
   21cbe:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   21cc2:	e7e4      	b.n	21c8e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   21cc4:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   21cc8:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   21ccc:	428a      	cmp	r2, r1
   21cce:	eb70 0e05 	sbcs.w	lr, r0, r5
   21cd2:	da23      	bge.n	21d1c <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   21cd4:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   21cd6:	6872      	ldr	r2, [r6, #4]
   21cd8:	eb65 0500 	sbc.w	r5, r5, r0
   21cdc:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   21ce0:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   21ce4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21ce6:	6074      	str	r4, [r6, #4]
	return list->head == list;
   21ce8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21cea:	429a      	cmp	r2, r3
   21cec:	d006      	beq.n	21cfc <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   21cee:	4294      	cmp	r4, r2
   21cf0:	d104      	bne.n	21cfc <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   21cf2:	f7ff ff3f 	bl	21b74 <next_timeout>
   21cf6:	2100      	movs	r1, #0
   21cf8:	f7fa fea0 	bl	1ca3c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cfc:	4813      	ldr	r0, [pc, #76]	; (21d4c <z_add_timeout+0x160>)
   21cfe:	f7fd fca5 	bl	1f64c <z_spin_unlock_valid>
   21d02:	b9a0      	cbnz	r0, 21d2e <z_add_timeout+0x142>
   21d04:	4a12      	ldr	r2, [pc, #72]	; (21d50 <z_add_timeout+0x164>)
   21d06:	4917      	ldr	r1, [pc, #92]	; (21d64 <z_add_timeout+0x178>)
   21d08:	480e      	ldr	r0, [pc, #56]	; (21d44 <z_add_timeout+0x158>)
   21d0a:	23c2      	movs	r3, #194	; 0xc2
   21d0c:	f001 fc75 	bl	235fa <assert_print>
   21d10:	490e      	ldr	r1, [pc, #56]	; (21d4c <z_add_timeout+0x160>)
   21d12:	4815      	ldr	r0, [pc, #84]	; (21d68 <z_add_timeout+0x17c>)
   21d14:	f001 fc71 	bl	235fa <assert_print>
   21d18:	21c2      	movs	r1, #194	; 0xc2
   21d1a:	e79a      	b.n	21c52 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   21d1c:	1a52      	subs	r2, r2, r1
   21d1e:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   21d22:	4566      	cmp	r6, ip
   21d24:	e9c4 2004 	strd	r2, r0, [r4, #16]
   21d28:	d0bb      	beq.n	21ca2 <z_add_timeout+0xb6>
   21d2a:	6836      	ldr	r6, [r6, #0]
   21d2c:	e7b8      	b.n	21ca0 <z_add_timeout+0xb4>
	__asm__ volatile(
   21d2e:	f387 8811 	msr	BASEPRI, r7
   21d32:	f3bf 8f6f 	isb	sy
		}
	}
}
   21d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21d3a:	bf00      	nop
   21d3c:	0002a9b0 	.word	0x0002a9b0
   21d40:	0002a98c 	.word	0x0002a98c
   21d44:	00026f1a 	.word	0x00026f1a
   21d48:	0002948c 	.word	0x0002948c
   21d4c:	20002f20 	.word	0x20002f20
   21d50:	0002730e 	.word	0x0002730e
   21d54:	00027367 	.word	0x00027367
   21d58:	0002737c 	.word	0x0002737c
   21d5c:	20002b20 	.word	0x20002b20
   21d60:	20000768 	.word	0x20000768
   21d64:	0002733b 	.word	0x0002733b
   21d68:	00027352 	.word	0x00027352

00021d6c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   21d6c:	b538      	push	{r3, r4, r5, lr}
   21d6e:	4604      	mov	r4, r0
	__asm__ volatile(
   21d70:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d74:	f3ef 8511 	mrs	r5, BASEPRI
   21d78:	f383 8812 	msr	BASEPRI_MAX, r3
   21d7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d80:	4819      	ldr	r0, [pc, #100]	; (21de8 <z_abort_timeout+0x7c>)
   21d82:	f7fd fc55 	bl	1f630 <z_spin_lock_valid>
   21d86:	b968      	cbnz	r0, 21da4 <z_abort_timeout+0x38>
   21d88:	4a18      	ldr	r2, [pc, #96]	; (21dec <z_abort_timeout+0x80>)
   21d8a:	4919      	ldr	r1, [pc, #100]	; (21df0 <z_abort_timeout+0x84>)
   21d8c:	4819      	ldr	r0, [pc, #100]	; (21df4 <z_abort_timeout+0x88>)
   21d8e:	2394      	movs	r3, #148	; 0x94
   21d90:	f001 fc33 	bl	235fa <assert_print>
   21d94:	4914      	ldr	r1, [pc, #80]	; (21de8 <z_abort_timeout+0x7c>)
   21d96:	4818      	ldr	r0, [pc, #96]	; (21df8 <z_abort_timeout+0x8c>)
   21d98:	f001 fc2f 	bl	235fa <assert_print>
   21d9c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d9e:	4813      	ldr	r0, [pc, #76]	; (21dec <z_abort_timeout+0x80>)
   21da0:	f001 fc24 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   21da4:	4810      	ldr	r0, [pc, #64]	; (21de8 <z_abort_timeout+0x7c>)
   21da6:	f7fd fc61 	bl	1f66c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   21daa:	6823      	ldr	r3, [r4, #0]
   21dac:	b19b      	cbz	r3, 21dd6 <z_abort_timeout+0x6a>
			remove_timeout(to);
   21dae:	4620      	mov	r0, r4
   21db0:	f7ff ff00 	bl	21bb4 <remove_timeout>
			ret = 0;
   21db4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21db6:	480c      	ldr	r0, [pc, #48]	; (21de8 <z_abort_timeout+0x7c>)
   21db8:	f7fd fc48 	bl	1f64c <z_spin_unlock_valid>
   21dbc:	b970      	cbnz	r0, 21ddc <z_abort_timeout+0x70>
   21dbe:	4a0b      	ldr	r2, [pc, #44]	; (21dec <z_abort_timeout+0x80>)
   21dc0:	490e      	ldr	r1, [pc, #56]	; (21dfc <z_abort_timeout+0x90>)
   21dc2:	480c      	ldr	r0, [pc, #48]	; (21df4 <z_abort_timeout+0x88>)
   21dc4:	23c2      	movs	r3, #194	; 0xc2
   21dc6:	f001 fc18 	bl	235fa <assert_print>
   21dca:	4907      	ldr	r1, [pc, #28]	; (21de8 <z_abort_timeout+0x7c>)
   21dcc:	480c      	ldr	r0, [pc, #48]	; (21e00 <z_abort_timeout+0x94>)
   21dce:	f001 fc14 	bl	235fa <assert_print>
   21dd2:	21c2      	movs	r1, #194	; 0xc2
   21dd4:	e7e3      	b.n	21d9e <z_abort_timeout+0x32>
	int ret = -EINVAL;
   21dd6:	f06f 0415 	mvn.w	r4, #21
   21dda:	e7ec      	b.n	21db6 <z_abort_timeout+0x4a>
	__asm__ volatile(
   21ddc:	f385 8811 	msr	BASEPRI, r5
   21de0:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   21de4:	4620      	mov	r0, r4
   21de6:	bd38      	pop	{r3, r4, r5, pc}
   21de8:	20002f20 	.word	0x20002f20
   21dec:	0002730e 	.word	0x0002730e
   21df0:	00027367 	.word	0x00027367
   21df4:	00026f1a 	.word	0x00026f1a
   21df8:	0002737c 	.word	0x0002737c
   21dfc:	0002733b 	.word	0x0002733b
   21e00:	00027352 	.word	0x00027352

00021e04 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   21e04:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21e06:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e0a:	f3ef 8511 	mrs	r5, BASEPRI
   21e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   21e12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e16:	4817      	ldr	r0, [pc, #92]	; (21e74 <z_get_next_timeout_expiry+0x70>)
   21e18:	f7fd fc0a 	bl	1f630 <z_spin_lock_valid>
   21e1c:	b968      	cbnz	r0, 21e3a <z_get_next_timeout_expiry+0x36>
   21e1e:	4a16      	ldr	r2, [pc, #88]	; (21e78 <z_get_next_timeout_expiry+0x74>)
   21e20:	4916      	ldr	r1, [pc, #88]	; (21e7c <z_get_next_timeout_expiry+0x78>)
   21e22:	4817      	ldr	r0, [pc, #92]	; (21e80 <z_get_next_timeout_expiry+0x7c>)
   21e24:	2394      	movs	r3, #148	; 0x94
   21e26:	f001 fbe8 	bl	235fa <assert_print>
   21e2a:	4912      	ldr	r1, [pc, #72]	; (21e74 <z_get_next_timeout_expiry+0x70>)
   21e2c:	4815      	ldr	r0, [pc, #84]	; (21e84 <z_get_next_timeout_expiry+0x80>)
   21e2e:	f001 fbe4 	bl	235fa <assert_print>
   21e32:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e34:	4810      	ldr	r0, [pc, #64]	; (21e78 <z_get_next_timeout_expiry+0x74>)
   21e36:	f001 fbd9 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   21e3a:	480e      	ldr	r0, [pc, #56]	; (21e74 <z_get_next_timeout_expiry+0x70>)
   21e3c:	f7fd fc16 	bl	1f66c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   21e40:	f7ff fe98 	bl	21b74 <next_timeout>
   21e44:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e46:	480b      	ldr	r0, [pc, #44]	; (21e74 <z_get_next_timeout_expiry+0x70>)
   21e48:	f7fd fc00 	bl	1f64c <z_spin_unlock_valid>
   21e4c:	b958      	cbnz	r0, 21e66 <z_get_next_timeout_expiry+0x62>
   21e4e:	4a0a      	ldr	r2, [pc, #40]	; (21e78 <z_get_next_timeout_expiry+0x74>)
   21e50:	490d      	ldr	r1, [pc, #52]	; (21e88 <z_get_next_timeout_expiry+0x84>)
   21e52:	480b      	ldr	r0, [pc, #44]	; (21e80 <z_get_next_timeout_expiry+0x7c>)
   21e54:	23c2      	movs	r3, #194	; 0xc2
   21e56:	f001 fbd0 	bl	235fa <assert_print>
   21e5a:	4906      	ldr	r1, [pc, #24]	; (21e74 <z_get_next_timeout_expiry+0x70>)
   21e5c:	480b      	ldr	r0, [pc, #44]	; (21e8c <z_get_next_timeout_expiry+0x88>)
   21e5e:	f001 fbcc 	bl	235fa <assert_print>
   21e62:	21c2      	movs	r1, #194	; 0xc2
   21e64:	e7e6      	b.n	21e34 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   21e66:	f385 8811 	msr	BASEPRI, r5
   21e6a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   21e6e:	4620      	mov	r0, r4
   21e70:	bd38      	pop	{r3, r4, r5, pc}
   21e72:	bf00      	nop
   21e74:	20002f20 	.word	0x20002f20
   21e78:	0002730e 	.word	0x0002730e
   21e7c:	00027367 	.word	0x00027367
   21e80:	00026f1a 	.word	0x00026f1a
   21e84:	0002737c 	.word	0x0002737c
   21e88:	0002733b 	.word	0x0002733b
   21e8c:	00027352 	.word	0x00027352

00021e90 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   21e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e94:	4604      	mov	r4, r0
	__asm__ volatile(
   21e96:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e9a:	f3ef 8811 	mrs	r8, BASEPRI
   21e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   21ea2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ea6:	4847      	ldr	r0, [pc, #284]	; (21fc4 <sys_clock_announce+0x134>)
   21ea8:	f7fd fbc2 	bl	1f630 <z_spin_lock_valid>
   21eac:	b968      	cbnz	r0, 21eca <sys_clock_announce+0x3a>
   21eae:	4a46      	ldr	r2, [pc, #280]	; (21fc8 <sys_clock_announce+0x138>)
   21eb0:	4946      	ldr	r1, [pc, #280]	; (21fcc <sys_clock_announce+0x13c>)
   21eb2:	4847      	ldr	r0, [pc, #284]	; (21fd0 <sys_clock_announce+0x140>)
   21eb4:	2394      	movs	r3, #148	; 0x94
   21eb6:	f001 fba0 	bl	235fa <assert_print>
   21eba:	4942      	ldr	r1, [pc, #264]	; (21fc4 <sys_clock_announce+0x134>)
   21ebc:	4845      	ldr	r0, [pc, #276]	; (21fd4 <sys_clock_announce+0x144>)
   21ebe:	f001 fb9c 	bl	235fa <assert_print>
   21ec2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ec4:	4840      	ldr	r0, [pc, #256]	; (21fc8 <sys_clock_announce+0x138>)
   21ec6:	f001 fb91 	bl	235ec <assert_post_action>
	return list->head == list;
   21eca:	f8df 910c 	ldr.w	r9, [pc, #268]	; 21fd8 <sys_clock_announce+0x148>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   21ece:	f8df b10c 	ldr.w	fp, [pc, #268]	; 21fdc <sys_clock_announce+0x14c>
	z_spin_lock_set_owner(l);
   21ed2:	483c      	ldr	r0, [pc, #240]	; (21fc4 <sys_clock_announce+0x134>)
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   21ed4:	f8df a108 	ldr.w	sl, [pc, #264]	; 21fe0 <sys_clock_announce+0x150>
   21ed8:	f7fd fbc8 	bl	1f66c <z_spin_lock_set_owner>
	announce_remaining = ticks;
   21edc:	f8cb 4000 	str.w	r4, [fp]
   21ee0:	f8d9 4000 	ldr.w	r4, [r9]
		t->dticks = 0;
   21ee4:	2600      	movs	r6, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ee6:	454c      	cmp	r4, r9
   21ee8:	bf08      	it	eq
   21eea:	2400      	moveq	r4, #0
   21eec:	2700      	movs	r7, #0
		curr_tick += dt;
   21eee:	e9da 2100 	ldrd	r2, r1, [sl]
	     (t != NULL) && (t->dticks <= announce_remaining);
   21ef2:	f8db 3000 	ldr.w	r3, [fp]
   21ef6:	2c00      	cmp	r4, #0
   21ef8:	d049      	beq.n	21f8e <sys_clock_announce+0xfe>
   21efa:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
   21efe:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   21f02:	42ab      	cmp	r3, r5
   21f04:	eb7c 0e00 	sbcs.w	lr, ip, r0
   21f08:	da05      	bge.n	21f16 <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   21f0a:	1aed      	subs	r5, r5, r3
   21f0c:	eb60 000c 	sbc.w	r0, r0, ip
   21f10:	e9c4 5004 	strd	r5, r0, [r4, #16]
   21f14:	e03b      	b.n	21f8e <sys_clock_announce+0xfe>
		curr_tick += dt;
   21f16:	18aa      	adds	r2, r5, r2
   21f18:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
		remove_timeout(t);
   21f1c:	4620      	mov	r0, r4
		t->dticks = 0;
   21f1e:	e9c4 6704 	strd	r6, r7, [r4, #16]
		curr_tick += dt;
   21f22:	e9ca 2100 	strd	r2, r1, [sl]
		remove_timeout(t);
   21f26:	f7ff fe45 	bl	21bb4 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f2a:	4826      	ldr	r0, [pc, #152]	; (21fc4 <sys_clock_announce+0x134>)
   21f2c:	f7fd fb8e 	bl	1f64c <z_spin_unlock_valid>
   21f30:	b958      	cbnz	r0, 21f4a <sys_clock_announce+0xba>
   21f32:	4a25      	ldr	r2, [pc, #148]	; (21fc8 <sys_clock_announce+0x138>)
   21f34:	492b      	ldr	r1, [pc, #172]	; (21fe4 <sys_clock_announce+0x154>)
   21f36:	4826      	ldr	r0, [pc, #152]	; (21fd0 <sys_clock_announce+0x140>)
   21f38:	23c2      	movs	r3, #194	; 0xc2
   21f3a:	f001 fb5e 	bl	235fa <assert_print>
   21f3e:	4921      	ldr	r1, [pc, #132]	; (21fc4 <sys_clock_announce+0x134>)
   21f40:	4829      	ldr	r0, [pc, #164]	; (21fe8 <sys_clock_announce+0x158>)
   21f42:	f001 fb5a 	bl	235fa <assert_print>
   21f46:	21c2      	movs	r1, #194	; 0xc2
   21f48:	e7bc      	b.n	21ec4 <sys_clock_announce+0x34>
	__asm__ volatile(
   21f4a:	f388 8811 	msr	BASEPRI, r8
   21f4e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   21f52:	68a3      	ldr	r3, [r4, #8]
   21f54:	4620      	mov	r0, r4
   21f56:	4798      	blx	r3
	__asm__ volatile(
   21f58:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f5c:	f3ef 8811 	mrs	r8, BASEPRI
   21f60:	f383 8812 	msr	BASEPRI_MAX, r3
   21f64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f68:	4816      	ldr	r0, [pc, #88]	; (21fc4 <sys_clock_announce+0x134>)
   21f6a:	f7fd fb61 	bl	1f630 <z_spin_lock_valid>
   21f6e:	2800      	cmp	r0, #0
   21f70:	d09d      	beq.n	21eae <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   21f72:	4814      	ldr	r0, [pc, #80]	; (21fc4 <sys_clock_announce+0x134>)
   21f74:	f7fd fb7a 	bl	1f66c <z_spin_lock_set_owner>
		announce_remaining -= dt;
   21f78:	f8db 3000 	ldr.w	r3, [fp]
	return list->head == list;
   21f7c:	f8d9 4000 	ldr.w	r4, [r9]
   21f80:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f82:	454c      	cmp	r4, r9
   21f84:	f8cb 3000 	str.w	r3, [fp]
   21f88:	d1b1      	bne.n	21eee <sys_clock_announce+0x5e>
		curr_tick += dt;
   21f8a:	e9da 2100 	ldrd	r2, r1, [sl]
	}

	curr_tick += announce_remaining;
   21f8e:	189a      	adds	r2, r3, r2
   21f90:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	announce_remaining = 0;
   21f94:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   21f96:	e9ca 2100 	strd	r2, r1, [sl]
	announce_remaining = 0;
   21f9a:	f8cb 4000 	str.w	r4, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   21f9e:	f7ff fde9 	bl	21b74 <next_timeout>
   21fa2:	4621      	mov	r1, r4
   21fa4:	f7fa fd4a 	bl	1ca3c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fa8:	4806      	ldr	r0, [pc, #24]	; (21fc4 <sys_clock_announce+0x134>)
   21faa:	f7fd fb4f 	bl	1f64c <z_spin_unlock_valid>
   21fae:	2800      	cmp	r0, #0
   21fb0:	d0bf      	beq.n	21f32 <sys_clock_announce+0xa2>
	__asm__ volatile(
   21fb2:	f388 8811 	msr	BASEPRI, r8
   21fb6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   21fba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   21fbe:	f7fe bf5b 	b.w	20e78 <z_time_slice>
   21fc2:	bf00      	nop
   21fc4:	20002f20 	.word	0x20002f20
   21fc8:	0002730e 	.word	0x0002730e
   21fcc:	00027367 	.word	0x00027367
   21fd0:	00026f1a 	.word	0x00026f1a
   21fd4:	0002737c 	.word	0x0002737c
   21fd8:	20000768 	.word	0x20000768
   21fdc:	20002f1c 	.word	0x20002f1c
   21fe0:	20002b20 	.word	0x20002b20
   21fe4:	0002733b 	.word	0x0002733b
   21fe8:	00027352 	.word	0x00027352

00021fec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   21fec:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   21fee:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ff2:	f3ef 8611 	mrs	r6, BASEPRI
   21ff6:	f383 8812 	msr	BASEPRI_MAX, r3
   21ffa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ffe:	481a      	ldr	r0, [pc, #104]	; (22068 <sys_clock_tick_get+0x7c>)
   22000:	f7fd fb16 	bl	1f630 <z_spin_lock_valid>
   22004:	b968      	cbnz	r0, 22022 <sys_clock_tick_get+0x36>
   22006:	4a19      	ldr	r2, [pc, #100]	; (2206c <sys_clock_tick_get+0x80>)
   22008:	4919      	ldr	r1, [pc, #100]	; (22070 <sys_clock_tick_get+0x84>)
   2200a:	481a      	ldr	r0, [pc, #104]	; (22074 <sys_clock_tick_get+0x88>)
   2200c:	2394      	movs	r3, #148	; 0x94
   2200e:	f001 faf4 	bl	235fa <assert_print>
   22012:	4915      	ldr	r1, [pc, #84]	; (22068 <sys_clock_tick_get+0x7c>)
   22014:	4818      	ldr	r0, [pc, #96]	; (22078 <sys_clock_tick_get+0x8c>)
   22016:	f001 faf0 	bl	235fa <assert_print>
   2201a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2201c:	4813      	ldr	r0, [pc, #76]	; (2206c <sys_clock_tick_get+0x80>)
   2201e:	f001 fae5 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   22022:	4811      	ldr	r0, [pc, #68]	; (22068 <sys_clock_tick_get+0x7c>)
   22024:	f7fd fb22 	bl	1f66c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   22028:	f7ff fd9a 	bl	21b60 <elapsed>
   2202c:	4a13      	ldr	r2, [pc, #76]	; (2207c <sys_clock_tick_get+0x90>)
   2202e:	e9d2 4500 	ldrd	r4, r5, [r2]
   22032:	1904      	adds	r4, r0, r4
   22034:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22038:	480b      	ldr	r0, [pc, #44]	; (22068 <sys_clock_tick_get+0x7c>)
   2203a:	f7fd fb07 	bl	1f64c <z_spin_unlock_valid>
   2203e:	b958      	cbnz	r0, 22058 <sys_clock_tick_get+0x6c>
   22040:	4a0a      	ldr	r2, [pc, #40]	; (2206c <sys_clock_tick_get+0x80>)
   22042:	490f      	ldr	r1, [pc, #60]	; (22080 <sys_clock_tick_get+0x94>)
   22044:	480b      	ldr	r0, [pc, #44]	; (22074 <sys_clock_tick_get+0x88>)
   22046:	23c2      	movs	r3, #194	; 0xc2
   22048:	f001 fad7 	bl	235fa <assert_print>
   2204c:	4906      	ldr	r1, [pc, #24]	; (22068 <sys_clock_tick_get+0x7c>)
   2204e:	480d      	ldr	r0, [pc, #52]	; (22084 <sys_clock_tick_get+0x98>)
   22050:	f001 fad3 	bl	235fa <assert_print>
   22054:	21c2      	movs	r1, #194	; 0xc2
   22056:	e7e1      	b.n	2201c <sys_clock_tick_get+0x30>
	__asm__ volatile(
   22058:	f386 8811 	msr	BASEPRI, r6
   2205c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22060:	4620      	mov	r0, r4
   22062:	4629      	mov	r1, r5
   22064:	bd70      	pop	{r4, r5, r6, pc}
   22066:	bf00      	nop
   22068:	20002f20 	.word	0x20002f20
   2206c:	0002730e 	.word	0x0002730e
   22070:	00027367 	.word	0x00027367
   22074:	00026f1a 	.word	0x00026f1a
   22078:	0002737c 	.word	0x0002737c
   2207c:	20002b20 	.word	0x20002b20
   22080:	0002733b 	.word	0x0002733b
   22084:	00027352 	.word	0x00027352

00022088 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   22088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2208a:	4604      	mov	r4, r0
	__asm__ volatile(
   2208c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22090:	f3ef 8711 	mrs	r7, BASEPRI
   22094:	f383 8812 	msr	BASEPRI_MAX, r3
   22098:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2209c:	484e      	ldr	r0, [pc, #312]	; (221d8 <z_timer_expiration_handler+0x150>)
   2209e:	f7fd fac7 	bl	1f630 <z_spin_lock_valid>
   220a2:	b968      	cbnz	r0, 220c0 <z_timer_expiration_handler+0x38>
   220a4:	4a4d      	ldr	r2, [pc, #308]	; (221dc <z_timer_expiration_handler+0x154>)
   220a6:	494e      	ldr	r1, [pc, #312]	; (221e0 <z_timer_expiration_handler+0x158>)
   220a8:	484e      	ldr	r0, [pc, #312]	; (221e4 <z_timer_expiration_handler+0x15c>)
   220aa:	2394      	movs	r3, #148	; 0x94
   220ac:	f001 faa5 	bl	235fa <assert_print>
   220b0:	4949      	ldr	r1, [pc, #292]	; (221d8 <z_timer_expiration_handler+0x150>)
   220b2:	484d      	ldr	r0, [pc, #308]	; (221e8 <z_timer_expiration_handler+0x160>)
   220b4:	f001 faa1 	bl	235fa <assert_print>
   220b8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220ba:	4848      	ldr	r0, [pc, #288]	; (221dc <z_timer_expiration_handler+0x154>)
   220bc:	f001 fa96 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   220c0:	4845      	ldr	r0, [pc, #276]	; (221d8 <z_timer_expiration_handler+0x150>)
   220c2:	f7fd fad3 	bl	1f66c <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   220c6:	6822      	ldr	r2, [r4, #0]
   220c8:	b182      	cbz	r2, 220ec <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220ca:	4843      	ldr	r0, [pc, #268]	; (221d8 <z_timer_expiration_handler+0x150>)
   220cc:	f7fd fabe 	bl	1f64c <z_spin_unlock_valid>
   220d0:	2800      	cmp	r0, #0
   220d2:	d17b      	bne.n	221cc <z_timer_expiration_handler+0x144>
   220d4:	4a41      	ldr	r2, [pc, #260]	; (221dc <z_timer_expiration_handler+0x154>)
   220d6:	4945      	ldr	r1, [pc, #276]	; (221ec <z_timer_expiration_handler+0x164>)
   220d8:	4842      	ldr	r0, [pc, #264]	; (221e4 <z_timer_expiration_handler+0x15c>)
   220da:	23c2      	movs	r3, #194	; 0xc2
   220dc:	f001 fa8d 	bl	235fa <assert_print>
   220e0:	493d      	ldr	r1, [pc, #244]	; (221d8 <z_timer_expiration_handler+0x150>)
   220e2:	4843      	ldr	r0, [pc, #268]	; (221f0 <z_timer_expiration_handler+0x168>)
   220e4:	f001 fa89 	bl	235fa <assert_print>
   220e8:	21c2      	movs	r1, #194	; 0xc2
   220ea:	e7e6      	b.n	220ba <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   220ec:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   220f0:	1c58      	adds	r0, r3, #1
   220f2:	f146 0100 	adc.w	r1, r6, #0
   220f6:	2802      	cmp	r0, #2
   220f8:	f171 0100 	sbcs.w	r1, r1, #0
   220fc:	d327      	bcc.n	2214e <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   220fe:	2b01      	cmp	r3, #1
   22100:	f176 0100 	sbcs.w	r1, r6, #0
   22104:	bfbc      	itt	lt
   22106:	2301      	movlt	r3, #1
   22108:	4616      	movlt	r6, r2
   2210a:	1e5d      	subs	r5, r3, #1
   2210c:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   22110:	f003 fe2b 	bl	25d6a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   22114:	3001      	adds	r0, #1
   22116:	f141 0100 	adc.w	r1, r1, #0
   2211a:	1940      	adds	r0, r0, r5
   2211c:	eb46 0101 	adc.w	r1, r6, r1
   22120:	2801      	cmp	r0, #1
   22122:	f171 0100 	sbcs.w	r1, r1, #0
   22126:	db4c      	blt.n	221c2 <z_timer_expiration_handler+0x13a>
   22128:	f003 fe1f 	bl	25d6a <z_impl_k_uptime_ticks>
   2212c:	3001      	adds	r0, #1
   2212e:	f141 0100 	adc.w	r1, r1, #0
   22132:	f06f 0201 	mvn.w	r2, #1
   22136:	1940      	adds	r0, r0, r5
   22138:	eb46 0301 	adc.w	r3, r6, r1
   2213c:	1a12      	subs	r2, r2, r0
   2213e:	f04f 31ff 	mov.w	r1, #4294967295
   22142:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22146:	492b      	ldr	r1, [pc, #172]	; (221f4 <z_timer_expiration_handler+0x16c>)
   22148:	4620      	mov	r0, r4
   2214a:	f7ff fd4f 	bl	21bec <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   2214e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22150:	3301      	adds	r3, #1
   22152:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22154:	6a23      	ldr	r3, [r4, #32]
   22156:	b1db      	cbz	r3, 22190 <z_timer_expiration_handler+0x108>
   22158:	481f      	ldr	r0, [pc, #124]	; (221d8 <z_timer_expiration_handler+0x150>)
   2215a:	f7fd fa77 	bl	1f64c <z_spin_unlock_valid>
   2215e:	2800      	cmp	r0, #0
   22160:	d0b8      	beq.n	220d4 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   22162:	f387 8811 	msr	BASEPRI, r7
   22166:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2216a:	6a23      	ldr	r3, [r4, #32]
   2216c:	4620      	mov	r0, r4
   2216e:	4798      	blx	r3
	__asm__ volatile(
   22170:	f04f 0340 	mov.w	r3, #64	; 0x40
   22174:	f3ef 8711 	mrs	r7, BASEPRI
   22178:	f383 8812 	msr	BASEPRI_MAX, r3
   2217c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22180:	4815      	ldr	r0, [pc, #84]	; (221d8 <z_timer_expiration_handler+0x150>)
   22182:	f7fd fa55 	bl	1f630 <z_spin_lock_valid>
   22186:	2800      	cmp	r0, #0
   22188:	d08c      	beq.n	220a4 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   2218a:	4813      	ldr	r0, [pc, #76]	; (221d8 <z_timer_expiration_handler+0x150>)
   2218c:	f7fd fa6e 	bl	1f66c <z_spin_lock_set_owner>
	return list->head == list;
   22190:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22194:	42a5      	cmp	r5, r4
   22196:	d098      	beq.n	220ca <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22198:	2d00      	cmp	r5, #0
   2219a:	d096      	beq.n	220ca <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   2219c:	4628      	mov	r0, r5
   2219e:	f7fe fc3d 	bl	20a1c <z_unpend_thread_no_timeout>
   221a2:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221a4:	480c      	ldr	r0, [pc, #48]	; (221d8 <z_timer_expiration_handler+0x150>)
   221a6:	67eb      	str	r3, [r5, #124]	; 0x7c
   221a8:	f7fd fa50 	bl	1f64c <z_spin_unlock_valid>
   221ac:	2800      	cmp	r0, #0
   221ae:	d091      	beq.n	220d4 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   221b0:	f387 8811 	msr	BASEPRI, r7
   221b4:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   221b8:	4628      	mov	r0, r5
}
   221ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   221be:	f7fe bbe7 	b.w	20990 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   221c2:	f06f 0201 	mvn.w	r2, #1
   221c6:	f04f 33ff 	mov.w	r3, #4294967295
   221ca:	e7bc      	b.n	22146 <z_timer_expiration_handler+0xbe>
   221cc:	f387 8811 	msr	BASEPRI, r7
   221d0:	f3bf 8f6f 	isb	sy
}
   221d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   221d6:	bf00      	nop
   221d8:	20002f24 	.word	0x20002f24
   221dc:	0002730e 	.word	0x0002730e
   221e0:	00027367 	.word	0x00027367
   221e4:	00026f1a 	.word	0x00026f1a
   221e8:	0002737c 	.word	0x0002737c
   221ec:	0002733b 	.word	0x0002733b
   221f0:	00027352 	.word	0x00027352
   221f4:	00022089 	.word	0x00022089

000221f8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   221f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   221fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   22200:	bf08      	it	eq
   22202:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22206:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   2220a:	4605      	mov	r5, r0
   2220c:	461c      	mov	r4, r3
   2220e:	4691      	mov	r9, r2
   22210:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22212:	d01c      	beq.n	2224e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22214:	1c53      	adds	r3, r2, #1
   22216:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   2221a:	db09      	blt.n	22230 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2221c:	2a01      	cmp	r2, #1
   2221e:	f174 0300 	sbcs.w	r3, r4, #0
   22222:	bfbc      	itt	lt
   22224:	2201      	movlt	r2, #1
   22226:	2400      	movlt	r4, #0
   22228:	f112 39ff 	adds.w	r9, r2, #4294967295
   2222c:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   22230:	4628      	mov	r0, r5
   22232:	f7ff fd9b 	bl	21d6c <z_abort_timeout>
	timer->period = period;
   22236:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2223a:	2300      	movs	r3, #0
   2223c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2223e:	464a      	mov	r2, r9
   22240:	4643      	mov	r3, r8
   22242:	4628      	mov	r0, r5
   22244:	4903      	ldr	r1, [pc, #12]	; (22254 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   22246:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2224a:	f7ff bccf 	b.w	21bec <z_add_timeout>
}
   2224e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22252:	bf00      	nop
   22254:	00022089 	.word	0x00022089

00022258 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   22258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   2225c:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2225e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 22428 <register_events+0x1d0>
{
   22262:	9301      	str	r3, [sp, #4]
   22264:	4688      	mov	r8, r1
   22266:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   22268:	4604      	mov	r4, r0
	int events_registered = 0;
   2226a:	4637      	mov	r7, r6
	event->poller = NULL;
   2226c:	46b2      	mov	sl, r6
	for (int ii = 0; ii < num_events; ii++) {
   2226e:	4546      	cmp	r6, r8
   22270:	db03      	blt.n	2227a <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   22272:	4638      	mov	r0, r7
   22274:	b003      	add	sp, #12
   22276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2227a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2227e:	f3ef 8b11 	mrs	fp, BASEPRI
   22282:	f383 8812 	msr	BASEPRI_MAX, r3
   22286:	f3bf 8f6f 	isb	sy
   2228a:	4648      	mov	r0, r9
   2228c:	f7fd f9d0 	bl	1f630 <z_spin_lock_valid>
   22290:	b960      	cbnz	r0, 222ac <register_events+0x54>
   22292:	4a66      	ldr	r2, [pc, #408]	; (2242c <register_events+0x1d4>)
   22294:	4966      	ldr	r1, [pc, #408]	; (22430 <register_events+0x1d8>)
   22296:	4867      	ldr	r0, [pc, #412]	; (22434 <register_events+0x1dc>)
   22298:	2394      	movs	r3, #148	; 0x94
   2229a:	f001 f9ae 	bl	235fa <assert_print>
   2229e:	4962      	ldr	r1, [pc, #392]	; (22428 <register_events+0x1d0>)
   222a0:	4865      	ldr	r0, [pc, #404]	; (22438 <register_events+0x1e0>)
   222a2:	f001 f9aa 	bl	235fa <assert_print>
   222a6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222a8:	4860      	ldr	r0, [pc, #384]	; (2242c <register_events+0x1d4>)
   222aa:	e060      	b.n	2236e <register_events+0x116>
	z_spin_lock_set_owner(l);
   222ac:	4648      	mov	r0, r9
   222ae:	f7fd f9dd 	bl	1f66c <z_spin_lock_set_owner>
	switch (event->type) {
   222b2:	7b63      	ldrb	r3, [r4, #13]
   222b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   222b8:	2b08      	cmp	r3, #8
   222ba:	d84a      	bhi.n	22352 <register_events+0xfa>
   222bc:	e8df f003 	tbb	[pc, r3]
   222c0:	49053d2b 	.word	0x49053d2b
   222c4:	49494927 	.word	0x49494927
   222c8:	43          	.byte	0x43
   222c9:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   222ca:	6923      	ldr	r3, [r4, #16]
   222cc:	689b      	ldr	r3, [r3, #8]
   222ce:	b313      	cbz	r3, 22316 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   222d0:	2302      	movs	r3, #2
	event->state |= state;
   222d2:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   222d4:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   222d8:	f3c2 3186 	ubfx	r1, r2, #14, #7
   222dc:	430b      	orrs	r3, r1
   222de:	f363 3294 	bfi	r2, r3, #14, #7
   222e2:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   222e4:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   222e8:	4648      	mov	r0, r9
   222ea:	f7fd f9af 	bl	1f64c <z_spin_unlock_valid>
   222ee:	3414      	adds	r4, #20
   222f0:	2800      	cmp	r0, #0
   222f2:	f040 8092 	bne.w	2241a <register_events+0x1c2>
   222f6:	4a4d      	ldr	r2, [pc, #308]	; (2242c <register_events+0x1d4>)
   222f8:	4950      	ldr	r1, [pc, #320]	; (2243c <register_events+0x1e4>)
   222fa:	484e      	ldr	r0, [pc, #312]	; (22434 <register_events+0x1dc>)
   222fc:	23c2      	movs	r3, #194	; 0xc2
   222fe:	f001 f97c 	bl	235fa <assert_print>
   22302:	4949      	ldr	r1, [pc, #292]	; (22428 <register_events+0x1d0>)
   22304:	484e      	ldr	r0, [pc, #312]	; (22440 <register_events+0x1e8>)
   22306:	f001 f978 	bl	235fa <assert_print>
   2230a:	21c2      	movs	r1, #194	; 0xc2
   2230c:	e7cc      	b.n	222a8 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   2230e:	6923      	ldr	r3, [r4, #16]
   22310:	681b      	ldr	r3, [r3, #0]
   22312:	2b00      	cmp	r3, #0
   22314:	d12d      	bne.n	22372 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   22316:	9b01      	ldr	r3, [sp, #4]
   22318:	2b00      	cmp	r3, #0
   2231a:	d1e5      	bne.n	222e8 <register_events+0x90>
   2231c:	782b      	ldrb	r3, [r5, #0]
   2231e:	2b00      	cmp	r3, #0
   22320:	d0e2      	beq.n	222e8 <register_events+0x90>
	switch (event->type) {
   22322:	7b63      	ldrb	r3, [r4, #13]
   22324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22328:	2b08      	cmp	r3, #8
   2232a:	d86b      	bhi.n	22404 <register_events+0x1ac>
   2232c:	e8df f003 	tbb	[pc, r3]
   22330:	6a234935 	.word	0x6a234935
   22334:	6a6a6a38 	.word	0x6a6a6a38
   22338:	59          	.byte	0x59
   22339:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2233a:	6923      	ldr	r3, [r4, #16]
   2233c:	689b      	ldr	r3, [r3, #8]
   2233e:	2b00      	cmp	r3, #0
   22340:	d0e9      	beq.n	22316 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   22342:	2301      	movs	r3, #1
   22344:	e7c5      	b.n	222d2 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   22346:	6923      	ldr	r3, [r4, #16]
   22348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2234a:	2b00      	cmp	r3, #0
   2234c:	d0e3      	beq.n	22316 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2234e:	2310      	movs	r3, #16
   22350:	e7bf      	b.n	222d2 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22352:	4a3c      	ldr	r2, [pc, #240]	; (22444 <register_events+0x1ec>)
   22354:	493c      	ldr	r1, [pc, #240]	; (22448 <register_events+0x1f0>)
   22356:	4837      	ldr	r0, [pc, #220]	; (22434 <register_events+0x1dc>)
   22358:	2363      	movs	r3, #99	; 0x63
   2235a:	f001 f94e 	bl	235fa <assert_print>
   2235e:	7b61      	ldrb	r1, [r4, #13]
   22360:	483a      	ldr	r0, [pc, #232]	; (2244c <register_events+0x1f4>)
   22362:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   22366:	f001 f948 	bl	235fa <assert_print>
   2236a:	2163      	movs	r1, #99	; 0x63
   2236c:	4835      	ldr	r0, [pc, #212]	; (22444 <register_events+0x1ec>)
   2236e:	f001 f93d 	bl	235ec <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22372:	2304      	movs	r3, #4
   22374:	e7ad      	b.n	222d2 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22376:	6920      	ldr	r0, [r4, #16]
   22378:	b950      	cbnz	r0, 22390 <register_events+0x138>
   2237a:	4935      	ldr	r1, [pc, #212]	; (22450 <register_events+0x1f8>)
   2237c:	4a31      	ldr	r2, [pc, #196]	; (22444 <register_events+0x1ec>)
   2237e:	482d      	ldr	r0, [pc, #180]	; (22434 <register_events+0x1dc>)
   22380:	238d      	movs	r3, #141	; 0x8d
   22382:	f001 f93a 	bl	235fa <assert_print>
   22386:	4833      	ldr	r0, [pc, #204]	; (22454 <register_events+0x1fc>)
   22388:	f001 f937 	bl	235fa <assert_print>
   2238c:	218d      	movs	r1, #141	; 0x8d
   2238e:	e7ed      	b.n	2236c <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   22390:	462a      	mov	r2, r5
   22392:	4621      	mov	r1, r4
   22394:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   22396:	f003 fd39 	bl	25e0c <add_event>
	event->poller = poller;
   2239a:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   2239c:	3701      	adds	r7, #1
   2239e:	e7a3      	b.n	222e8 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   223a0:	6920      	ldr	r0, [r4, #16]
   223a2:	b950      	cbnz	r0, 223ba <register_events+0x162>
   223a4:	492c      	ldr	r1, [pc, #176]	; (22458 <register_events+0x200>)
   223a6:	4a27      	ldr	r2, [pc, #156]	; (22444 <register_events+0x1ec>)
   223a8:	4822      	ldr	r0, [pc, #136]	; (22434 <register_events+0x1dc>)
   223aa:	2391      	movs	r3, #145	; 0x91
   223ac:	f001 f925 	bl	235fa <assert_print>
   223b0:	482a      	ldr	r0, [pc, #168]	; (2245c <register_events+0x204>)
   223b2:	f001 f922 	bl	235fa <assert_print>
   223b6:	2191      	movs	r1, #145	; 0x91
   223b8:	e7d8      	b.n	2236c <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   223ba:	462a      	mov	r2, r5
   223bc:	4621      	mov	r1, r4
   223be:	3014      	adds	r0, #20
   223c0:	e7e9      	b.n	22396 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   223c2:	6920      	ldr	r0, [r4, #16]
   223c4:	b950      	cbnz	r0, 223dc <register_events+0x184>
   223c6:	4926      	ldr	r1, [pc, #152]	; (22460 <register_events+0x208>)
   223c8:	4a1e      	ldr	r2, [pc, #120]	; (22444 <register_events+0x1ec>)
   223ca:	481a      	ldr	r0, [pc, #104]	; (22434 <register_events+0x1dc>)
   223cc:	2395      	movs	r3, #149	; 0x95
   223ce:	f001 f914 	bl	235fa <assert_print>
   223d2:	4824      	ldr	r0, [pc, #144]	; (22464 <register_events+0x20c>)
   223d4:	f001 f911 	bl	235fa <assert_print>
   223d8:	2195      	movs	r1, #149	; 0x95
   223da:	e7c7      	b.n	2236c <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   223dc:	462a      	mov	r2, r5
   223de:	4621      	mov	r1, r4
   223e0:	e7d9      	b.n	22396 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   223e2:	6920      	ldr	r0, [r4, #16]
   223e4:	b950      	cbnz	r0, 223fc <register_events+0x1a4>
   223e6:	4920      	ldr	r1, [pc, #128]	; (22468 <register_events+0x210>)
   223e8:	4a16      	ldr	r2, [pc, #88]	; (22444 <register_events+0x1ec>)
   223ea:	4812      	ldr	r0, [pc, #72]	; (22434 <register_events+0x1dc>)
   223ec:	2399      	movs	r3, #153	; 0x99
   223ee:	f001 f904 	bl	235fa <assert_print>
   223f2:	481e      	ldr	r0, [pc, #120]	; (2246c <register_events+0x214>)
   223f4:	f001 f901 	bl	235fa <assert_print>
   223f8:	2199      	movs	r1, #153	; 0x99
   223fa:	e7b7      	b.n	2236c <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   223fc:	462a      	mov	r2, r5
   223fe:	4621      	mov	r1, r4
   22400:	3028      	adds	r0, #40	; 0x28
   22402:	e7c8      	b.n	22396 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   22404:	4910      	ldr	r1, [pc, #64]	; (22448 <register_events+0x1f0>)
   22406:	4a0f      	ldr	r2, [pc, #60]	; (22444 <register_events+0x1ec>)
   22408:	480a      	ldr	r0, [pc, #40]	; (22434 <register_events+0x1dc>)
   2240a:	23a6      	movs	r3, #166	; 0xa6
   2240c:	f001 f8f5 	bl	235fa <assert_print>
   22410:	4817      	ldr	r0, [pc, #92]	; (22470 <register_events+0x218>)
   22412:	f001 f8f2 	bl	235fa <assert_print>
   22416:	21a6      	movs	r1, #166	; 0xa6
   22418:	e7a8      	b.n	2236c <register_events+0x114>
	__asm__ volatile(
   2241a:	f38b 8811 	msr	BASEPRI, fp
   2241e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22422:	3601      	adds	r6, #1
   22424:	e723      	b.n	2226e <register_events+0x16>
   22426:	bf00      	nop
   22428:	20002f28 	.word	0x20002f28
   2242c:	0002730e 	.word	0x0002730e
   22430:	00027367 	.word	0x00027367
   22434:	00026f1a 	.word	0x00026f1a
   22438:	0002737c 	.word	0x0002737c
   2243c:	0002733b 	.word	0x0002733b
   22440:	00027352 	.word	0x00027352
   22444:	0002a9d0 	.word	0x0002a9d0
   22448:	00029a2c 	.word	0x00029a2c
   2244c:	0002a9f1 	.word	0x0002a9f1
   22450:	0002aa0e 	.word	0x0002aa0e
   22454:	0002aa28 	.word	0x0002aa28
   22458:	0002aa3d 	.word	0x0002aa3d
   2245c:	0002aa59 	.word	0x0002aa59
   22460:	0002aa6a 	.word	0x0002aa6a
   22464:	0002aa87 	.word	0x0002aa87
   22468:	0002aa9e 	.word	0x0002aa9e
   2246c:	0002aab9 	.word	0x0002aab9
   22470:	0002aad2 	.word	0x0002aad2

00022474 <clear_event_registrations>:
{
   22474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22478:	2314      	movs	r3, #20
   2247a:	4f4e      	ldr	r7, [pc, #312]	; (225b4 <clear_event_registrations+0x140>)
   2247c:	4615      	mov	r5, r2
	while (num_events--) {
   2247e:	460c      	mov	r4, r1
   22480:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   22484:	2600      	movs	r6, #0
	while (num_events--) {
   22486:	b90c      	cbnz	r4, 2248c <clear_event_registrations+0x18>
}
   22488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   2248c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   22490:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   22494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22498:	f1a0 0814 	sub.w	r8, r0, #20
   2249c:	2b08      	cmp	r3, #8
   2249e:	d842      	bhi.n	22526 <clear_event_registrations+0xb2>
   224a0:	e8df f003 	tbb	[pc, r3]
   224a4:	41052555 	.word	0x41052555
   224a8:	41414116 	.word	0x41414116
   224ac:	33          	.byte	0x33
   224ad:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   224ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   224b2:	2b00      	cmp	r3, #0
   224b4:	d142      	bne.n	2253c <clear_event_registrations+0xc8>
   224b6:	4940      	ldr	r1, [pc, #256]	; (225b8 <clear_event_registrations+0x144>)
   224b8:	4a40      	ldr	r2, [pc, #256]	; (225bc <clear_event_registrations+0x148>)
   224ba:	4841      	ldr	r0, [pc, #260]	; (225c0 <clear_event_registrations+0x14c>)
   224bc:	23b6      	movs	r3, #182	; 0xb6
   224be:	f001 f89c 	bl	235fa <assert_print>
   224c2:	4840      	ldr	r0, [pc, #256]	; (225c4 <clear_event_registrations+0x150>)
   224c4:	f001 f899 	bl	235fa <assert_print>
   224c8:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   224ca:	483c      	ldr	r0, [pc, #240]	; (225bc <clear_event_registrations+0x148>)
   224cc:	f001 f88e 	bl	235ec <assert_post_action>
   224d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
   224d4:	2b00      	cmp	r3, #0
   224d6:	d131      	bne.n	2253c <clear_event_registrations+0xc8>
   224d8:	493b      	ldr	r1, [pc, #236]	; (225c8 <clear_event_registrations+0x154>)
   224da:	4a38      	ldr	r2, [pc, #224]	; (225bc <clear_event_registrations+0x148>)
   224dc:	4838      	ldr	r0, [pc, #224]	; (225c0 <clear_event_registrations+0x14c>)
   224de:	23ba      	movs	r3, #186	; 0xba
   224e0:	f001 f88b 	bl	235fa <assert_print>
   224e4:	4839      	ldr	r0, [pc, #228]	; (225cc <clear_event_registrations+0x158>)
   224e6:	f001 f888 	bl	235fa <assert_print>
   224ea:	21ba      	movs	r1, #186	; 0xba
   224ec:	e7ed      	b.n	224ca <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   224ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   224f2:	bb1b      	cbnz	r3, 2253c <clear_event_registrations+0xc8>
   224f4:	4936      	ldr	r1, [pc, #216]	; (225d0 <clear_event_registrations+0x15c>)
   224f6:	4a31      	ldr	r2, [pc, #196]	; (225bc <clear_event_registrations+0x148>)
   224f8:	4831      	ldr	r0, [pc, #196]	; (225c0 <clear_event_registrations+0x14c>)
   224fa:	23be      	movs	r3, #190	; 0xbe
   224fc:	f001 f87d 	bl	235fa <assert_print>
   22500:	4834      	ldr	r0, [pc, #208]	; (225d4 <clear_event_registrations+0x160>)
   22502:	f001 f87a 	bl	235fa <assert_print>
   22506:	21be      	movs	r1, #190	; 0xbe
   22508:	e7df      	b.n	224ca <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2250a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2250e:	b9ab      	cbnz	r3, 2253c <clear_event_registrations+0xc8>
   22510:	4931      	ldr	r1, [pc, #196]	; (225d8 <clear_event_registrations+0x164>)
   22512:	4a2a      	ldr	r2, [pc, #168]	; (225bc <clear_event_registrations+0x148>)
   22514:	482a      	ldr	r0, [pc, #168]	; (225c0 <clear_event_registrations+0x14c>)
   22516:	23c2      	movs	r3, #194	; 0xc2
   22518:	f001 f86f 	bl	235fa <assert_print>
   2251c:	482f      	ldr	r0, [pc, #188]	; (225dc <clear_event_registrations+0x168>)
   2251e:	f001 f86c 	bl	235fa <assert_print>
   22522:	21c2      	movs	r1, #194	; 0xc2
   22524:	e7d1      	b.n	224ca <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   22526:	492e      	ldr	r1, [pc, #184]	; (225e0 <clear_event_registrations+0x16c>)
   22528:	4a24      	ldr	r2, [pc, #144]	; (225bc <clear_event_registrations+0x148>)
   2252a:	4825      	ldr	r0, [pc, #148]	; (225c0 <clear_event_registrations+0x14c>)
   2252c:	23cf      	movs	r3, #207	; 0xcf
   2252e:	f001 f864 	bl	235fa <assert_print>
   22532:	482c      	ldr	r0, [pc, #176]	; (225e4 <clear_event_registrations+0x170>)
   22534:	f001 f861 	bl	235fa <assert_print>
   22538:	21cf      	movs	r1, #207	; 0xcf
   2253a:	e7c6      	b.n	224ca <clear_event_registrations+0x56>
	return node->next != NULL;
   2253c:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   22540:	b12b      	cbz	r3, 2254e <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   22542:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   22546:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22548:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2254a:	e940 6605 	strd	r6, r6, [r0, #-20]
   2254e:	4638      	mov	r0, r7
   22550:	f7fd f87c 	bl	1f64c <z_spin_unlock_valid>
   22554:	b960      	cbnz	r0, 22570 <clear_event_registrations+0xfc>
   22556:	4a24      	ldr	r2, [pc, #144]	; (225e8 <clear_event_registrations+0x174>)
   22558:	4924      	ldr	r1, [pc, #144]	; (225ec <clear_event_registrations+0x178>)
   2255a:	4819      	ldr	r0, [pc, #100]	; (225c0 <clear_event_registrations+0x14c>)
   2255c:	23c2      	movs	r3, #194	; 0xc2
   2255e:	f001 f84c 	bl	235fa <assert_print>
   22562:	4914      	ldr	r1, [pc, #80]	; (225b4 <clear_event_registrations+0x140>)
   22564:	4822      	ldr	r0, [pc, #136]	; (225f0 <clear_event_registrations+0x17c>)
   22566:	f001 f848 	bl	235fa <assert_print>
   2256a:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2256c:	481e      	ldr	r0, [pc, #120]	; (225e8 <clear_event_registrations+0x174>)
   2256e:	e7ad      	b.n	224cc <clear_event_registrations+0x58>
   22570:	f385 8811 	msr	BASEPRI, r5
   22574:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22578:	f04f 0340 	mov.w	r3, #64	; 0x40
   2257c:	f3ef 8511 	mrs	r5, BASEPRI
   22580:	f383 8812 	msr	BASEPRI_MAX, r3
   22584:	f3bf 8f6f 	isb	sy
   22588:	4638      	mov	r0, r7
   2258a:	f7fd f851 	bl	1f630 <z_spin_lock_valid>
   2258e:	3c01      	subs	r4, #1
   22590:	b958      	cbnz	r0, 225aa <clear_event_registrations+0x136>
   22592:	4a15      	ldr	r2, [pc, #84]	; (225e8 <clear_event_registrations+0x174>)
   22594:	4917      	ldr	r1, [pc, #92]	; (225f4 <clear_event_registrations+0x180>)
   22596:	480a      	ldr	r0, [pc, #40]	; (225c0 <clear_event_registrations+0x14c>)
   22598:	2394      	movs	r3, #148	; 0x94
   2259a:	f001 f82e 	bl	235fa <assert_print>
   2259e:	4905      	ldr	r1, [pc, #20]	; (225b4 <clear_event_registrations+0x140>)
   225a0:	4815      	ldr	r0, [pc, #84]	; (225f8 <clear_event_registrations+0x184>)
   225a2:	f001 f82a 	bl	235fa <assert_print>
   225a6:	2194      	movs	r1, #148	; 0x94
   225a8:	e7e0      	b.n	2256c <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   225aa:	4638      	mov	r0, r7
   225ac:	f7fd f85e 	bl	1f66c <z_spin_lock_set_owner>
	return k;
   225b0:	4640      	mov	r0, r8
   225b2:	e768      	b.n	22486 <clear_event_registrations+0x12>
   225b4:	20002f28 	.word	0x20002f28
   225b8:	0002aa0e 	.word	0x0002aa0e
   225bc:	0002a9d0 	.word	0x0002a9d0
   225c0:	00026f1a 	.word	0x00026f1a
   225c4:	0002aa28 	.word	0x0002aa28
   225c8:	0002aa3d 	.word	0x0002aa3d
   225cc:	0002aa59 	.word	0x0002aa59
   225d0:	0002aa6a 	.word	0x0002aa6a
   225d4:	0002aa87 	.word	0x0002aa87
   225d8:	0002aa9e 	.word	0x0002aa9e
   225dc:	0002aab9 	.word	0x0002aab9
   225e0:	00029a2c 	.word	0x00029a2c
   225e4:	0002aad2 	.word	0x0002aad2
   225e8:	0002730e 	.word	0x0002730e
   225ec:	0002733b 	.word	0x0002733b
   225f0:	00027352 	.word	0x00027352
   225f4:	00027367 	.word	0x00027367
   225f8:	0002737c 	.word	0x0002737c

000225fc <k_poll_event_init>:
{
   225fc:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   225fe:	b162      	cbz	r2, 2261a <k_poll_event_init+0x1e>
   22600:	4917      	ldr	r1, [pc, #92]	; (22660 <k_poll_event_init+0x64>)
   22602:	4a18      	ldr	r2, [pc, #96]	; (22664 <k_poll_event_init+0x68>)
   22604:	4818      	ldr	r0, [pc, #96]	; (22668 <k_poll_event_init+0x6c>)
   22606:	232d      	movs	r3, #45	; 0x2d
   22608:	f000 fff7 	bl	235fa <assert_print>
   2260c:	4817      	ldr	r0, [pc, #92]	; (2266c <k_poll_event_init+0x70>)
   2260e:	f000 fff4 	bl	235fa <assert_print>
   22612:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22614:	4813      	ldr	r0, [pc, #76]	; (22664 <k_poll_event_init+0x68>)
   22616:	f000 ffe9 	bl	235ec <assert_post_action>
   2261a:	293f      	cmp	r1, #63	; 0x3f
   2261c:	d90a      	bls.n	22634 <k_poll_event_init+0x38>
   2261e:	4914      	ldr	r1, [pc, #80]	; (22670 <k_poll_event_init+0x74>)
   22620:	4a10      	ldr	r2, [pc, #64]	; (22664 <k_poll_event_init+0x68>)
   22622:	4811      	ldr	r0, [pc, #68]	; (22668 <k_poll_event_init+0x6c>)
   22624:	232f      	movs	r3, #47	; 0x2f
   22626:	f000 ffe8 	bl	235fa <assert_print>
   2262a:	4812      	ldr	r0, [pc, #72]	; (22674 <k_poll_event_init+0x78>)
   2262c:	f000 ffe5 	bl	235fa <assert_print>
   22630:	212f      	movs	r1, #47	; 0x2f
   22632:	e7ef      	b.n	22614 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   22634:	b953      	cbnz	r3, 2264c <k_poll_event_init+0x50>
   22636:	4910      	ldr	r1, [pc, #64]	; (22678 <k_poll_event_init+0x7c>)
   22638:	4a0a      	ldr	r2, [pc, #40]	; (22664 <k_poll_event_init+0x68>)
   2263a:	480b      	ldr	r0, [pc, #44]	; (22668 <k_poll_event_init+0x6c>)
   2263c:	2330      	movs	r3, #48	; 0x30
   2263e:	f000 ffdc 	bl	235fa <assert_print>
   22642:	480e      	ldr	r0, [pc, #56]	; (2267c <k_poll_event_init+0x80>)
   22644:	f000 ffd9 	bl	235fa <assert_print>
   22648:	2130      	movs	r1, #48	; 0x30
   2264a:	e7e3      	b.n	22614 <k_poll_event_init+0x18>
	event->poller = NULL;
   2264c:	6082      	str	r2, [r0, #8]
	event->type = type;
   2264e:	0209      	lsls	r1, r1, #8
   22650:	7b02      	ldrb	r2, [r0, #12]
   22652:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   22656:	4311      	orrs	r1, r2
	event->obj = obj;
   22658:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   2265c:	bd08      	pop	{r3, pc}
   2265e:	bf00      	nop
   22660:	0002aae8 	.word	0x0002aae8
   22664:	0002a9d0 	.word	0x0002a9d0
   22668:	00026f1a 	.word	0x00026f1a
   2266c:	0002ab08 	.word	0x0002ab08
   22670:	0002ab2e 	.word	0x0002ab2e
   22674:	0002ab52 	.word	0x0002ab52
   22678:	0002ab62 	.word	0x0002ab62
   2267c:	0002ab75 	.word	0x0002ab75

00022680 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22684:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22686:	4b5c      	ldr	r3, [pc, #368]	; (227f8 <z_impl_k_poll+0x178>)
   22688:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   2268c:	2301      	movs	r3, #1
{
   2268e:	4617      	mov	r7, r2
   22690:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   22692:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   22696:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2269a:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   2269e:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   226a2:	f1bb 0f00 	cmp.w	fp, #0
   226a6:	d00e      	beq.n	226c6 <z_impl_k_poll+0x46>
   226a8:	4954      	ldr	r1, [pc, #336]	; (227fc <z_impl_k_poll+0x17c>)
   226aa:	4a55      	ldr	r2, [pc, #340]	; (22800 <z_impl_k_poll+0x180>)
   226ac:	4855      	ldr	r0, [pc, #340]	; (22804 <z_impl_k_poll+0x184>)
   226ae:	f240 132d 	movw	r3, #301	; 0x12d
   226b2:	f000 ffa2 	bl	235fa <assert_print>
   226b6:	4854      	ldr	r0, [pc, #336]	; (22808 <z_impl_k_poll+0x188>)
   226b8:	f000 ff9f 	bl	235fa <assert_print>
   226bc:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   226c0:	484f      	ldr	r0, [pc, #316]	; (22800 <z_impl_k_poll+0x180>)
   226c2:	f000 ff93 	bl	235ec <assert_post_action>
   226c6:	b960      	cbnz	r0, 226e2 <z_impl_k_poll+0x62>
   226c8:	4950      	ldr	r1, [pc, #320]	; (2280c <z_impl_k_poll+0x18c>)
   226ca:	4a4d      	ldr	r2, [pc, #308]	; (22800 <z_impl_k_poll+0x180>)
   226cc:	484d      	ldr	r0, [pc, #308]	; (22804 <z_impl_k_poll+0x184>)
   226ce:	f44f 7397 	mov.w	r3, #302	; 0x12e
   226d2:	f000 ff92 	bl	235fa <assert_print>
   226d6:	484e      	ldr	r0, [pc, #312]	; (22810 <z_impl_k_poll+0x190>)
   226d8:	f000 ff8f 	bl	235fa <assert_print>
   226dc:	f44f 7197 	mov.w	r1, #302	; 0x12e
   226e0:	e7ee      	b.n	226c0 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   226e2:	2900      	cmp	r1, #0
   226e4:	da0c      	bge.n	22700 <z_impl_k_poll+0x80>
   226e6:	494b      	ldr	r1, [pc, #300]	; (22814 <z_impl_k_poll+0x194>)
   226e8:	4a45      	ldr	r2, [pc, #276]	; (22800 <z_impl_k_poll+0x180>)
   226ea:	4846      	ldr	r0, [pc, #280]	; (22804 <z_impl_k_poll+0x184>)
   226ec:	f240 132f 	movw	r3, #303	; 0x12f
   226f0:	f000 ff83 	bl	235fa <assert_print>
   226f4:	4848      	ldr	r0, [pc, #288]	; (22818 <z_impl_k_poll+0x198>)
   226f6:	f000 ff80 	bl	235fa <assert_print>
   226fa:	f240 112f 	movw	r1, #303	; 0x12f
   226fe:	e7df      	b.n	226c0 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22700:	ea57 0306 	orrs.w	r3, r7, r6
   22704:	bf0c      	ite	eq
   22706:	2301      	moveq	r3, #1
   22708:	2300      	movne	r3, #0
   2270a:	f7ff fda5 	bl	22258 <register_events>
   2270e:	4681      	mov	r9, r0
   22710:	f04f 0340 	mov.w	r3, #64	; 0x40
   22714:	f3ef 8a11 	mrs	sl, BASEPRI
   22718:	f383 8812 	msr	BASEPRI_MAX, r3
   2271c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22720:	483e      	ldr	r0, [pc, #248]	; (2281c <z_impl_k_poll+0x19c>)
   22722:	f7fc ff85 	bl	1f630 <z_spin_lock_valid>
   22726:	b960      	cbnz	r0, 22742 <z_impl_k_poll+0xc2>
   22728:	4a3d      	ldr	r2, [pc, #244]	; (22820 <z_impl_k_poll+0x1a0>)
   2272a:	493e      	ldr	r1, [pc, #248]	; (22824 <z_impl_k_poll+0x1a4>)
   2272c:	4835      	ldr	r0, [pc, #212]	; (22804 <z_impl_k_poll+0x184>)
   2272e:	2394      	movs	r3, #148	; 0x94
   22730:	f000 ff63 	bl	235fa <assert_print>
   22734:	4939      	ldr	r1, [pc, #228]	; (2281c <z_impl_k_poll+0x19c>)
   22736:	483c      	ldr	r0, [pc, #240]	; (22828 <z_impl_k_poll+0x1a8>)
   22738:	f000 ff5f 	bl	235fa <assert_print>
   2273c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2273e:	4838      	ldr	r0, [pc, #224]	; (22820 <z_impl_k_poll+0x1a0>)
   22740:	e7bf      	b.n	226c2 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   22742:	4836      	ldr	r0, [pc, #216]	; (2281c <z_impl_k_poll+0x19c>)
   22744:	f7fc ff92 	bl	1f66c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   22748:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   2274c:	b9e4      	cbnz	r4, 22788 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   2274e:	4628      	mov	r0, r5
   22750:	4652      	mov	r2, sl
   22752:	4649      	mov	r1, r9
   22754:	f7ff fe8e 	bl	22474 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22758:	4830      	ldr	r0, [pc, #192]	; (2281c <z_impl_k_poll+0x19c>)
   2275a:	f7fc ff77 	bl	1f64c <z_spin_unlock_valid>
   2275e:	b958      	cbnz	r0, 22778 <z_impl_k_poll+0xf8>
   22760:	4a2f      	ldr	r2, [pc, #188]	; (22820 <z_impl_k_poll+0x1a0>)
   22762:	4932      	ldr	r1, [pc, #200]	; (2282c <z_impl_k_poll+0x1ac>)
   22764:	4827      	ldr	r0, [pc, #156]	; (22804 <z_impl_k_poll+0x184>)
   22766:	23c2      	movs	r3, #194	; 0xc2
   22768:	f000 ff47 	bl	235fa <assert_print>
   2276c:	492b      	ldr	r1, [pc, #172]	; (2281c <z_impl_k_poll+0x19c>)
   2276e:	4830      	ldr	r0, [pc, #192]	; (22830 <z_impl_k_poll+0x1b0>)
   22770:	f000 ff43 	bl	235fa <assert_print>
   22774:	21c2      	movs	r1, #194	; 0xc2
   22776:	e7e2      	b.n	2273e <z_impl_k_poll+0xbe>
	__asm__ volatile(
   22778:	f38a 8811 	msr	BASEPRI, sl
   2277c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22780:	4620      	mov	r0, r4
   22782:	b003      	add	sp, #12
   22784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22788:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   2278c:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22790:	d10b      	bne.n	227aa <z_impl_k_poll+0x12a>
   22792:	4822      	ldr	r0, [pc, #136]	; (2281c <z_impl_k_poll+0x19c>)
   22794:	f7fc ff5a 	bl	1f64c <z_spin_unlock_valid>
   22798:	2800      	cmp	r0, #0
   2279a:	d0e1      	beq.n	22760 <z_impl_k_poll+0xe0>
   2279c:	f38a 8811 	msr	BASEPRI, sl
   227a0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   227a4:	f06f 040a 	mvn.w	r4, #10
   227a8:	e7ea      	b.n	22780 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   227aa:	e9cd 7600 	strd	r7, r6, [sp]
   227ae:	4a21      	ldr	r2, [pc, #132]	; (22834 <z_impl_k_poll+0x1b4>)
   227b0:	481a      	ldr	r0, [pc, #104]	; (2281c <z_impl_k_poll+0x19c>)
   227b2:	4651      	mov	r1, sl
   227b4:	f7fe fc36 	bl	21024 <z_pend_curr>
   227b8:	4604      	mov	r4, r0
	__asm__ volatile(
   227ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   227be:	f3ef 8611 	mrs	r6, BASEPRI
   227c2:	f383 8812 	msr	BASEPRI_MAX, r3
   227c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227ca:	4814      	ldr	r0, [pc, #80]	; (2281c <z_impl_k_poll+0x19c>)
   227cc:	f7fc ff30 	bl	1f630 <z_spin_lock_valid>
   227d0:	2800      	cmp	r0, #0
   227d2:	d0a9      	beq.n	22728 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   227d4:	4811      	ldr	r0, [pc, #68]	; (2281c <z_impl_k_poll+0x19c>)
   227d6:	f7fc ff49 	bl	1f66c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   227da:	4628      	mov	r0, r5
   227dc:	4632      	mov	r2, r6
   227de:	4649      	mov	r1, r9
   227e0:	f7ff fe48 	bl	22474 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227e4:	480d      	ldr	r0, [pc, #52]	; (2281c <z_impl_k_poll+0x19c>)
   227e6:	f7fc ff31 	bl	1f64c <z_spin_unlock_valid>
   227ea:	2800      	cmp	r0, #0
   227ec:	d0b8      	beq.n	22760 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   227ee:	f386 8811 	msr	BASEPRI, r6
   227f2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   227f6:	e7c3      	b.n	22780 <z_impl_k_poll+0x100>
   227f8:	20002ed4 	.word	0x20002ed4
   227fc:	0002a3c0 	.word	0x0002a3c0
   22800:	0002a9d0 	.word	0x0002a9d0
   22804:	00026f1a 	.word	0x00026f1a
   22808:	0002948c 	.word	0x0002948c
   2280c:	0002ab8f 	.word	0x0002ab8f
   22810:	0002aba5 	.word	0x0002aba5
   22814:	0002abb4 	.word	0x0002abb4
   22818:	0002abc4 	.word	0x0002abc4
   2281c:	20002f28 	.word	0x20002f28
   22820:	0002730e 	.word	0x0002730e
   22824:	00027367 	.word	0x00027367
   22828:	0002737c 	.word	0x0002737c
   2282c:	0002733b 	.word	0x0002733b
   22830:	00027352 	.word	0x00027352
   22834:	20000770 	.word	0x20000770

00022838 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22838:	b570      	push	{r4, r5, r6, lr}
   2283a:	4604      	mov	r4, r0
   2283c:	460d      	mov	r5, r1
	__asm__ volatile(
   2283e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22842:	f3ef 8611 	mrs	r6, BASEPRI
   22846:	f383 8812 	msr	BASEPRI_MAX, r3
   2284a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2284e:	4820      	ldr	r0, [pc, #128]	; (228d0 <z_impl_k_poll_signal_raise+0x98>)
   22850:	f7fc feee 	bl	1f630 <z_spin_lock_valid>
   22854:	b968      	cbnz	r0, 22872 <z_impl_k_poll_signal_raise+0x3a>
   22856:	4a1f      	ldr	r2, [pc, #124]	; (228d4 <z_impl_k_poll_signal_raise+0x9c>)
   22858:	491f      	ldr	r1, [pc, #124]	; (228d8 <z_impl_k_poll_signal_raise+0xa0>)
   2285a:	4820      	ldr	r0, [pc, #128]	; (228dc <z_impl_k_poll_signal_raise+0xa4>)
   2285c:	2394      	movs	r3, #148	; 0x94
   2285e:	f000 fecc 	bl	235fa <assert_print>
   22862:	491b      	ldr	r1, [pc, #108]	; (228d0 <z_impl_k_poll_signal_raise+0x98>)
   22864:	481e      	ldr	r0, [pc, #120]	; (228e0 <z_impl_k_poll_signal_raise+0xa8>)
   22866:	f000 fec8 	bl	235fa <assert_print>
   2286a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2286c:	4819      	ldr	r0, [pc, #100]	; (228d4 <z_impl_k_poll_signal_raise+0x9c>)
   2286e:	f000 febd 	bl	235ec <assert_post_action>
	z_spin_lock_set_owner(l);
   22872:	4817      	ldr	r0, [pc, #92]	; (228d0 <z_impl_k_poll_signal_raise+0x98>)
   22874:	f7fc fefa 	bl	1f66c <z_spin_lock_set_owner>
	return list->head == list;
   22878:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   2287a:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   2287c:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2287e:	4284      	cmp	r4, r0
   22880:	60a1      	str	r1, [r4, #8]
   22882:	d10f      	bne.n	228a4 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22884:	4812      	ldr	r0, [pc, #72]	; (228d0 <z_impl_k_poll_signal_raise+0x98>)
   22886:	f7fc fee1 	bl	1f64c <z_spin_unlock_valid>
   2288a:	b9d8      	cbnz	r0, 228c4 <z_impl_k_poll_signal_raise+0x8c>
   2288c:	4a11      	ldr	r2, [pc, #68]	; (228d4 <z_impl_k_poll_signal_raise+0x9c>)
   2288e:	4915      	ldr	r1, [pc, #84]	; (228e4 <z_impl_k_poll_signal_raise+0xac>)
   22890:	4812      	ldr	r0, [pc, #72]	; (228dc <z_impl_k_poll_signal_raise+0xa4>)
   22892:	23c2      	movs	r3, #194	; 0xc2
   22894:	f000 feb1 	bl	235fa <assert_print>
   22898:	490d      	ldr	r1, [pc, #52]	; (228d0 <z_impl_k_poll_signal_raise+0x98>)
   2289a:	4813      	ldr	r0, [pc, #76]	; (228e8 <z_impl_k_poll_signal_raise+0xb0>)
   2289c:	f000 fead 	bl	235fa <assert_print>
   228a0:	21c2      	movs	r1, #194	; 0xc2
   228a2:	e7e3      	b.n	2286c <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   228a4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   228a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   228aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   228ac:	2300      	movs	r3, #0
	node->prev = NULL;
   228ae:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   228b2:	f003 fadc 	bl	25e6e <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   228b6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   228b8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   228ba:	4805      	ldr	r0, [pc, #20]	; (228d0 <z_impl_k_poll_signal_raise+0x98>)
   228bc:	f7fe f8f6 	bl	20aac <z_reschedule>
	return rc;
}
   228c0:	4620      	mov	r0, r4
   228c2:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   228c4:	f386 8811 	msr	BASEPRI, r6
   228c8:	f3bf 8f6f 	isb	sy
		return 0;
   228cc:	2400      	movs	r4, #0
   228ce:	e7f7      	b.n	228c0 <z_impl_k_poll_signal_raise+0x88>
   228d0:	20002f28 	.word	0x20002f28
   228d4:	0002730e 	.word	0x0002730e
   228d8:	00027367 	.word	0x00027367
   228dc:	00026f1a 	.word	0x00026f1a
   228e0:	0002737c 	.word	0x0002737c
   228e4:	0002733b 	.word	0x0002733b
   228e8:	00027352 	.word	0x00027352

000228ec <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   228ec:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   228ee:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   228f2:	4606      	mov	r6, r0
   228f4:	460d      	mov	r5, r1
   228f6:	d220      	bcs.n	2293a <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   228f8:	f04f 0800 	mov.w	r8, #0
   228fc:	f04f 0900 	mov.w	r9, #0
   22900:	e9cd 8900 	strd	r8, r9, [sp]
   22904:	f041 0104 	orr.w	r1, r1, #4
   22908:	f7fc fb8a 	bl	1f020 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2290c:	4604      	mov	r4, r0
   2290e:	b1a0      	cbz	r0, 2293a <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   22910:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   22914:	b195      	cbz	r5, 2293c <z_heap_aligned_alloc+0x50>
   22916:	1e6b      	subs	r3, r5, #1
   22918:	421c      	tst	r4, r3
   2291a:	d00f      	beq.n	2293c <z_heap_aligned_alloc+0x50>
   2291c:	4a09      	ldr	r2, [pc, #36]	; (22944 <z_heap_aligned_alloc+0x58>)
   2291e:	490a      	ldr	r1, [pc, #40]	; (22948 <z_heap_aligned_alloc+0x5c>)
   22920:	480a      	ldr	r0, [pc, #40]	; (2294c <z_heap_aligned_alloc+0x60>)
   22922:	2325      	movs	r3, #37	; 0x25
   22924:	f000 fe69 	bl	235fa <assert_print>
   22928:	4809      	ldr	r0, [pc, #36]	; (22950 <z_heap_aligned_alloc+0x64>)
   2292a:	4621      	mov	r1, r4
   2292c:	462a      	mov	r2, r5
   2292e:	f000 fe64 	bl	235fa <assert_print>
   22932:	4804      	ldr	r0, [pc, #16]	; (22944 <z_heap_aligned_alloc+0x58>)
   22934:	2125      	movs	r1, #37	; 0x25
   22936:	f000 fe59 	bl	235ec <assert_post_action>
		return NULL;
   2293a:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   2293c:	4620      	mov	r0, r4
   2293e:	b002      	add	sp, #8
   22940:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   22944:	0002abd1 	.word	0x0002abd1
   22948:	0002abf5 	.word	0x0002abf5
   2294c:	00026f1a 	.word	0x00026f1a
   22950:	0002ac27 	.word	0x0002ac27

00022954 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   22954:	2803      	cmp	r0, #3
{
   22956:	b508      	push	{r3, lr}
   22958:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
   2295a:	d901      	bls.n	22960 <k_aligned_alloc+0xc>
   2295c:	0783      	lsls	r3, r0, #30
   2295e:	d00c      	beq.n	2297a <k_aligned_alloc+0x26>
   22960:	4910      	ldr	r1, [pc, #64]	; (229a4 <k_aligned_alloc+0x50>)
   22962:	4a11      	ldr	r2, [pc, #68]	; (229a8 <k_aligned_alloc+0x54>)
   22964:	4811      	ldr	r0, [pc, #68]	; (229ac <k_aligned_alloc+0x58>)
   22966:	2342      	movs	r3, #66	; 0x42
   22968:	f000 fe47 	bl	235fa <assert_print>
   2296c:	4810      	ldr	r0, [pc, #64]	; (229b0 <k_aligned_alloc+0x5c>)
   2296e:	f000 fe44 	bl	235fa <assert_print>
   22972:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   22974:	480c      	ldr	r0, [pc, #48]	; (229a8 <k_aligned_alloc+0x54>)
   22976:	f000 fe39 	bl	235ec <assert_post_action>
   2297a:	1e43      	subs	r3, r0, #1
   2297c:	4203      	tst	r3, r0
   2297e:	d00a      	beq.n	22996 <k_aligned_alloc+0x42>
   22980:	490c      	ldr	r1, [pc, #48]	; (229b4 <k_aligned_alloc+0x60>)
   22982:	4a09      	ldr	r2, [pc, #36]	; (229a8 <k_aligned_alloc+0x54>)
   22984:	4809      	ldr	r0, [pc, #36]	; (229ac <k_aligned_alloc+0x58>)
   22986:	2346      	movs	r3, #70	; 0x46
   22988:	f000 fe37 	bl	235fa <assert_print>
   2298c:	480a      	ldr	r0, [pc, #40]	; (229b8 <k_aligned_alloc+0x64>)
   2298e:	f000 fe34 	bl	235fa <assert_print>
   22992:	2146      	movs	r1, #70	; 0x46
   22994:	e7ee      	b.n	22974 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   22996:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   22998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2299c:	4807      	ldr	r0, [pc, #28]	; (229bc <k_aligned_alloc+0x68>)
   2299e:	f7ff bfa5 	b.w	228ec <z_heap_aligned_alloc>
   229a2:	bf00      	nop
   229a4:	0002ac4f 	.word	0x0002ac4f
   229a8:	0002abd1 	.word	0x0002abd1
   229ac:	00026f1a 	.word	0x00026f1a
   229b0:	0002ac8c 	.word	0x0002ac8c
   229b4:	00027178 	.word	0x00027178
   229b8:	00027193 	.word	0x00027193
   229bc:	200008fc 	.word	0x200008fc

000229c0 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   229c0:	4b01      	ldr	r3, [pc, #4]	; (229c8 <k_thread_system_pool_assign+0x8>)
   229c2:	6743      	str	r3, [r0, #116]	; 0x74
}
   229c4:	4770      	bx	lr
   229c6:	bf00      	nop
   229c8:	200008fc 	.word	0x200008fc

000229cc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   229cc:	b538      	push	{r3, r4, r5, lr}
   229ce:	4604      	mov	r4, r0
   229d0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   229d2:	f003 f8ce 	bl	25b72 <k_is_in_isr>
   229d6:	b920      	cbnz	r0, 229e2 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   229d8:	4b06      	ldr	r3, [pc, #24]	; (229f4 <z_thread_aligned_alloc+0x28>)
   229da:	689b      	ldr	r3, [r3, #8]
   229dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   229de:	b90b      	cbnz	r3, 229e4 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   229e0:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   229e2:	4b05      	ldr	r3, [pc, #20]	; (229f8 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   229e4:	462a      	mov	r2, r5
   229e6:	4621      	mov	r1, r4
   229e8:	4618      	mov	r0, r3
}
   229ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   229ee:	f7ff bf7d 	b.w	228ec <z_heap_aligned_alloc>
   229f2:	bf00      	nop
   229f4:	20002ed4 	.word	0x20002ed4
   229f8:	200008fc 	.word	0x200008fc

000229fc <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   229fc:	4801      	ldr	r0, [pc, #4]	; (22a04 <boot_banner+0x8>)
   229fe:	f000 bbf4 	b.w	231ea <printk>
   22a02:	bf00      	nop
   22a04:	0002acb9 	.word	0x0002acb9

00022a08 <ocrypto_ecdh_p256_public_key>:
   22a08:	b530      	push	{r4, r5, lr}
   22a0a:	b099      	sub	sp, #100	; 0x64
   22a0c:	4605      	mov	r5, r0
   22a0e:	4668      	mov	r0, sp
   22a10:	f000 f828 	bl	22a64 <ocrypto_sc_p256_from32bytes>
   22a14:	4669      	mov	r1, sp
   22a16:	4604      	mov	r4, r0
   22a18:	a808      	add	r0, sp, #32
   22a1a:	f000 fa53 	bl	22ec4 <ocrypto_curve_p256_scalarmult_base>
   22a1e:	a908      	add	r1, sp, #32
   22a20:	4304      	orrs	r4, r0
   22a22:	4628      	mov	r0, r5
   22a24:	f000 f98a 	bl	22d3c <ocrypto_curve_p256_to64bytes>
   22a28:	4620      	mov	r0, r4
   22a2a:	b019      	add	sp, #100	; 0x64
   22a2c:	bd30      	pop	{r4, r5, pc}
   22a2e:	bf00      	nop

00022a30 <ocrypto_ecdh_p256_common_secret>:
   22a30:	b570      	push	{r4, r5, r6, lr}
   22a32:	b098      	sub	sp, #96	; 0x60
   22a34:	4605      	mov	r5, r0
   22a36:	4668      	mov	r0, sp
   22a38:	4616      	mov	r6, r2
   22a3a:	f000 f813 	bl	22a64 <ocrypto_sc_p256_from32bytes>
   22a3e:	4631      	mov	r1, r6
   22a40:	4604      	mov	r4, r0
   22a42:	a808      	add	r0, sp, #32
   22a44:	f000 f946 	bl	22cd4 <ocrypto_curve_p256_from64bytes>
   22a48:	a908      	add	r1, sp, #32
   22a4a:	466a      	mov	r2, sp
   22a4c:	4304      	orrs	r4, r0
   22a4e:	4608      	mov	r0, r1
   22a50:	f000 f982 	bl	22d58 <ocrypto_curve_p256_scalarmult>
   22a54:	a908      	add	r1, sp, #32
   22a56:	4304      	orrs	r4, r0
   22a58:	4628      	mov	r0, r5
   22a5a:	f000 f96d 	bl	22d38 <ocrypto_curve_p256_to32bytes>
   22a5e:	4620      	mov	r0, r4
   22a60:	b018      	add	sp, #96	; 0x60
   22a62:	bd70      	pop	{r4, r5, r6, pc}

00022a64 <ocrypto_sc_p256_from32bytes>:
   22a64:	b570      	push	{r4, r5, r6, lr}
   22a66:	680b      	ldr	r3, [r1, #0]
   22a68:	4e12      	ldr	r6, [pc, #72]	; (22ab4 <ocrypto_sc_p256_from32bytes+0x50>)
   22a6a:	ba1b      	rev	r3, r3
   22a6c:	61c3      	str	r3, [r0, #28]
   22a6e:	684b      	ldr	r3, [r1, #4]
   22a70:	ba1b      	rev	r3, r3
   22a72:	6183      	str	r3, [r0, #24]
   22a74:	688b      	ldr	r3, [r1, #8]
   22a76:	ba1b      	rev	r3, r3
   22a78:	6143      	str	r3, [r0, #20]
   22a7a:	68cb      	ldr	r3, [r1, #12]
   22a7c:	ba1b      	rev	r3, r3
   22a7e:	6103      	str	r3, [r0, #16]
   22a80:	690b      	ldr	r3, [r1, #16]
   22a82:	ba1b      	rev	r3, r3
   22a84:	60c3      	str	r3, [r0, #12]
   22a86:	694b      	ldr	r3, [r1, #20]
   22a88:	ba1b      	rev	r3, r3
   22a8a:	6083      	str	r3, [r0, #8]
   22a8c:	698b      	ldr	r3, [r1, #24]
   22a8e:	ba1b      	rev	r3, r3
   22a90:	6043      	str	r3, [r0, #4]
   22a92:	69cb      	ldr	r3, [r1, #28]
   22a94:	ba1b      	rev	r3, r3
   22a96:	4632      	mov	r2, r6
   22a98:	6003      	str	r3, [r0, #0]
   22a9a:	4601      	mov	r1, r0
   22a9c:	4604      	mov	r4, r0
   22a9e:	f7dd fb57 	bl	150 <ocrypto_bigint_sub256>
   22aa2:	4631      	mov	r1, r6
   22aa4:	4605      	mov	r5, r0
   22aa6:	4602      	mov	r2, r0
   22aa8:	4620      	mov	r0, r4
   22aaa:	f7dd fb71 	bl	190 <ocrypto_bigint_cadd256>
   22aae:	1e68      	subs	r0, r5, #1
   22ab0:	bd70      	pop	{r4, r5, r6, pc}
   22ab2:	bf00      	nop
   22ab4:	00026a10 	.word	0x00026a10

00022ab8 <p256_zdblu>:
   22ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22abc:	b088      	sub	sp, #32
   22abe:	460c      	mov	r4, r1
   22ac0:	4606      	mov	r6, r0
   22ac2:	f102 0120 	add.w	r1, r2, #32
   22ac6:	4668      	mov	r0, sp
   22ac8:	f106 0720 	add.w	r7, r6, #32
   22acc:	4690      	mov	r8, r2
   22ace:	f7dd fe39 	bl	744 <ocrypto_mod_p256_sqr>
   22ad2:	466a      	mov	r2, sp
   22ad4:	4669      	mov	r1, sp
   22ad6:	4668      	mov	r0, sp
   22ad8:	f7dd fd56 	bl	588 <ocrypto_mod_p256_add>
   22adc:	4669      	mov	r1, sp
   22ade:	4638      	mov	r0, r7
   22ae0:	f7dd fe30 	bl	744 <ocrypto_mod_p256_sqr>
   22ae4:	463a      	mov	r2, r7
   22ae6:	4639      	mov	r1, r7
   22ae8:	4638      	mov	r0, r7
   22aea:	f104 0520 	add.w	r5, r4, #32
   22aee:	f7dd fd4b 	bl	588 <ocrypto_mod_p256_add>
   22af2:	466a      	mov	r2, sp
   22af4:	4669      	mov	r1, sp
   22af6:	4668      	mov	r0, sp
   22af8:	f7dd fd46 	bl	588 <ocrypto_mod_p256_add>
   22afc:	4641      	mov	r1, r8
   22afe:	4628      	mov	r0, r5
   22b00:	f7dd fe20 	bl	744 <ocrypto_mod_p256_sqr>
   22b04:	466a      	mov	r2, sp
   22b06:	4641      	mov	r1, r8
   22b08:	4630      	mov	r0, r6
   22b0a:	f7dd fe03 	bl	714 <ocrypto_mod_p256_mul>
   22b0e:	462a      	mov	r2, r5
   22b10:	4629      	mov	r1, r5
   22b12:	4668      	mov	r0, sp
   22b14:	f7dd fd38 	bl	588 <ocrypto_mod_p256_add>
   22b18:	462a      	mov	r2, r5
   22b1a:	4669      	mov	r1, sp
   22b1c:	4668      	mov	r0, sp
   22b1e:	f7dd fd33 	bl	588 <ocrypto_mod_p256_add>
   22b22:	4a12      	ldr	r2, [pc, #72]	; (22b6c <p256_zdblu+0xb4>)
   22b24:	4669      	mov	r1, sp
   22b26:	4668      	mov	r0, sp
   22b28:	f7dd fd2e 	bl	588 <ocrypto_mod_p256_add>
   22b2c:	4669      	mov	r1, sp
   22b2e:	4620      	mov	r0, r4
   22b30:	f7dd fe08 	bl	744 <ocrypto_mod_p256_sqr>
   22b34:	4632      	mov	r2, r6
   22b36:	4621      	mov	r1, r4
   22b38:	4620      	mov	r0, r4
   22b3a:	f7dd fd63 	bl	604 <ocrypto_mod_p256_sub>
   22b3e:	4632      	mov	r2, r6
   22b40:	4621      	mov	r1, r4
   22b42:	4620      	mov	r0, r4
   22b44:	f7dd fd5e 	bl	604 <ocrypto_mod_p256_sub>
   22b48:	4622      	mov	r2, r4
   22b4a:	4631      	mov	r1, r6
   22b4c:	4628      	mov	r0, r5
   22b4e:	f7dd fd59 	bl	604 <ocrypto_mod_p256_sub>
   22b52:	466a      	mov	r2, sp
   22b54:	4629      	mov	r1, r5
   22b56:	4628      	mov	r0, r5
   22b58:	f7dd fddc 	bl	714 <ocrypto_mod_p256_mul>
   22b5c:	463a      	mov	r2, r7
   22b5e:	4629      	mov	r1, r5
   22b60:	4628      	mov	r0, r5
   22b62:	f7dd fd4f 	bl	604 <ocrypto_mod_p256_sub>
   22b66:	b008      	add	sp, #32
   22b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b6c:	00026af0 	.word	0x00026af0

00022b70 <p256_zaddc>:
   22b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b72:	b099      	sub	sp, #100	; 0x64
   22b74:	4604      	mov	r4, r0
   22b76:	460d      	mov	r5, r1
   22b78:	460a      	mov	r2, r1
   22b7a:	4601      	mov	r1, r0
   22b7c:	4668      	mov	r0, sp
   22b7e:	f7dd fd41 	bl	604 <ocrypto_mod_p256_sub>
   22b82:	4669      	mov	r1, sp
   22b84:	4668      	mov	r0, sp
   22b86:	f7dd fddd 	bl	744 <ocrypto_mod_p256_sqr>
   22b8a:	466a      	mov	r2, sp
   22b8c:	4621      	mov	r1, r4
   22b8e:	a808      	add	r0, sp, #32
   22b90:	f105 0620 	add.w	r6, r5, #32
   22b94:	f104 0720 	add.w	r7, r4, #32
   22b98:	f7dd fdbc 	bl	714 <ocrypto_mod_p256_mul>
   22b9c:	466a      	mov	r2, sp
   22b9e:	4629      	mov	r1, r5
   22ba0:	4668      	mov	r0, sp
   22ba2:	f7dd fdb7 	bl	714 <ocrypto_mod_p256_mul>
   22ba6:	4632      	mov	r2, r6
   22ba8:	4639      	mov	r1, r7
   22baa:	a810      	add	r0, sp, #64	; 0x40
   22bac:	f7dd fcec 	bl	588 <ocrypto_mod_p256_add>
   22bb0:	4632      	mov	r2, r6
   22bb2:	4639      	mov	r1, r7
   22bb4:	4630      	mov	r0, r6
   22bb6:	f7dd fd25 	bl	604 <ocrypto_mod_p256_sub>
   22bba:	4631      	mov	r1, r6
   22bbc:	4628      	mov	r0, r5
   22bbe:	f7dd fdc1 	bl	744 <ocrypto_mod_p256_sqr>
   22bc2:	466a      	mov	r2, sp
   22bc4:	a908      	add	r1, sp, #32
   22bc6:	4620      	mov	r0, r4
   22bc8:	f7dd fcde 	bl	588 <ocrypto_mod_p256_add>
   22bcc:	4622      	mov	r2, r4
   22bce:	4629      	mov	r1, r5
   22bd0:	4628      	mov	r0, r5
   22bd2:	f7dd fd17 	bl	604 <ocrypto_mod_p256_sub>
   22bd6:	466a      	mov	r2, sp
   22bd8:	a908      	add	r1, sp, #32
   22bda:	4668      	mov	r0, sp
   22bdc:	f7dd fd12 	bl	604 <ocrypto_mod_p256_sub>
   22be0:	466a      	mov	r2, sp
   22be2:	4639      	mov	r1, r7
   22be4:	4638      	mov	r0, r7
   22be6:	f7dd fd95 	bl	714 <ocrypto_mod_p256_mul>
   22bea:	462a      	mov	r2, r5
   22bec:	a908      	add	r1, sp, #32
   22bee:	4668      	mov	r0, sp
   22bf0:	f7dd fd08 	bl	604 <ocrypto_mod_p256_sub>
   22bf4:	466a      	mov	r2, sp
   22bf6:	4631      	mov	r1, r6
   22bf8:	4630      	mov	r0, r6
   22bfa:	f7dd fd8b 	bl	714 <ocrypto_mod_p256_mul>
   22bfe:	463a      	mov	r2, r7
   22c00:	4631      	mov	r1, r6
   22c02:	4630      	mov	r0, r6
   22c04:	f7dd fcfe 	bl	604 <ocrypto_mod_p256_sub>
   22c08:	a910      	add	r1, sp, #64	; 0x40
   22c0a:	4668      	mov	r0, sp
   22c0c:	f7dd fd9a 	bl	744 <ocrypto_mod_p256_sqr>
   22c10:	4622      	mov	r2, r4
   22c12:	4669      	mov	r1, sp
   22c14:	4620      	mov	r0, r4
   22c16:	f7dd fcf5 	bl	604 <ocrypto_mod_p256_sub>
   22c1a:	a908      	add	r1, sp, #32
   22c1c:	4622      	mov	r2, r4
   22c1e:	4608      	mov	r0, r1
   22c20:	f7dd fcf0 	bl	604 <ocrypto_mod_p256_sub>
   22c24:	a910      	add	r1, sp, #64	; 0x40
   22c26:	aa08      	add	r2, sp, #32
   22c28:	4608      	mov	r0, r1
   22c2a:	f7dd fd73 	bl	714 <ocrypto_mod_p256_mul>
   22c2e:	463a      	mov	r2, r7
   22c30:	a910      	add	r1, sp, #64	; 0x40
   22c32:	4638      	mov	r0, r7
   22c34:	f7dd fce6 	bl	604 <ocrypto_mod_p256_sub>
   22c38:	b019      	add	sp, #100	; 0x64
   22c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022c3c <p256_zaddu>:
   22c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c40:	b088      	sub	sp, #32
   22c42:	460c      	mov	r4, r1
   22c44:	4605      	mov	r5, r0
   22c46:	4690      	mov	r8, r2
   22c48:	460a      	mov	r2, r1
   22c4a:	4601      	mov	r1, r0
   22c4c:	4668      	mov	r0, sp
   22c4e:	f7dd fcd9 	bl	604 <ocrypto_mod_p256_sub>
   22c52:	4669      	mov	r1, sp
   22c54:	4668      	mov	r0, sp
   22c56:	f7dd fd75 	bl	744 <ocrypto_mod_p256_sqr>
   22c5a:	466a      	mov	r2, sp
   22c5c:	4629      	mov	r1, r5
   22c5e:	4628      	mov	r0, r5
   22c60:	f104 0620 	add.w	r6, r4, #32
   22c64:	f7dd fd56 	bl	714 <ocrypto_mod_p256_mul>
   22c68:	f105 0720 	add.w	r7, r5, #32
   22c6c:	466a      	mov	r2, sp
   22c6e:	4621      	mov	r1, r4
   22c70:	4668      	mov	r0, sp
   22c72:	f7dd fd4f 	bl	714 <ocrypto_mod_p256_mul>
   22c76:	4632      	mov	r2, r6
   22c78:	4639      	mov	r1, r7
   22c7a:	4630      	mov	r0, r6
   22c7c:	f7dd fcc2 	bl	604 <ocrypto_mod_p256_sub>
   22c80:	4631      	mov	r1, r6
   22c82:	4620      	mov	r0, r4
   22c84:	f7dd fd5e 	bl	744 <ocrypto_mod_p256_sqr>
   22c88:	462a      	mov	r2, r5
   22c8a:	4621      	mov	r1, r4
   22c8c:	4620      	mov	r0, r4
   22c8e:	f7dd fcb9 	bl	604 <ocrypto_mod_p256_sub>
   22c92:	466a      	mov	r2, sp
   22c94:	4621      	mov	r1, r4
   22c96:	4620      	mov	r0, r4
   22c98:	f7dd fcb4 	bl	604 <ocrypto_mod_p256_sub>
   22c9c:	466a      	mov	r2, sp
   22c9e:	4629      	mov	r1, r5
   22ca0:	4640      	mov	r0, r8
   22ca2:	f7dd fcaf 	bl	604 <ocrypto_mod_p256_sub>
   22ca6:	4642      	mov	r2, r8
   22ca8:	4639      	mov	r1, r7
   22caa:	4638      	mov	r0, r7
   22cac:	f7dd fd32 	bl	714 <ocrypto_mod_p256_mul>
   22cb0:	4622      	mov	r2, r4
   22cb2:	4629      	mov	r1, r5
   22cb4:	4668      	mov	r0, sp
   22cb6:	f7dd fca5 	bl	604 <ocrypto_mod_p256_sub>
   22cba:	466a      	mov	r2, sp
   22cbc:	4631      	mov	r1, r6
   22cbe:	4630      	mov	r0, r6
   22cc0:	f7dd fd28 	bl	714 <ocrypto_mod_p256_mul>
   22cc4:	463a      	mov	r2, r7
   22cc6:	4631      	mov	r1, r6
   22cc8:	4630      	mov	r0, r6
   22cca:	f7dd fc9b 	bl	604 <ocrypto_mod_p256_sub>
   22cce:	b008      	add	sp, #32
   22cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022cd4 <ocrypto_curve_p256_from64bytes>:
   22cd4:	b570      	push	{r4, r5, r6, lr}
   22cd6:	f100 0620 	add.w	r6, r0, #32
   22cda:	b090      	sub	sp, #64	; 0x40
   22cdc:	460d      	mov	r5, r1
   22cde:	4604      	mov	r4, r0
   22ce0:	f000 f914 	bl	22f0c <ocrypto_mod_p256_from_bytes>
   22ce4:	f105 0120 	add.w	r1, r5, #32
   22ce8:	4630      	mov	r0, r6
   22cea:	f000 f90f 	bl	22f0c <ocrypto_mod_p256_from_bytes>
   22cee:	4621      	mov	r1, r4
   22cf0:	a808      	add	r0, sp, #32
   22cf2:	f7dd fd27 	bl	744 <ocrypto_mod_p256_sqr>
   22cf6:	a908      	add	r1, sp, #32
   22cf8:	4608      	mov	r0, r1
   22cfa:	4a0d      	ldr	r2, [pc, #52]	; (22d30 <ocrypto_curve_p256_from64bytes+0x5c>)
   22cfc:	f7dd fc44 	bl	588 <ocrypto_mod_p256_add>
   22d00:	a908      	add	r1, sp, #32
   22d02:	4622      	mov	r2, r4
   22d04:	4608      	mov	r0, r1
   22d06:	f7dd fd05 	bl	714 <ocrypto_mod_p256_mul>
   22d0a:	a908      	add	r1, sp, #32
   22d0c:	4a09      	ldr	r2, [pc, #36]	; (22d34 <ocrypto_curve_p256_from64bytes+0x60>)
   22d0e:	4608      	mov	r0, r1
   22d10:	f7dd fc3a 	bl	588 <ocrypto_mod_p256_add>
   22d14:	4631      	mov	r1, r6
   22d16:	4668      	mov	r0, sp
   22d18:	f7dd fd14 	bl	744 <ocrypto_mod_p256_sqr>
   22d1c:	2220      	movs	r2, #32
   22d1e:	4669      	mov	r1, sp
   22d20:	eb0d 0002 	add.w	r0, sp, r2
   22d24:	f7dd fc02 	bl	52c <ocrypto_constant_time_equal>
   22d28:	3801      	subs	r0, #1
   22d2a:	b010      	add	sp, #64	; 0x40
   22d2c:	bd70      	pop	{r4, r5, r6, pc}
   22d2e:	bf00      	nop
   22d30:	00026af0 	.word	0x00026af0
   22d34:	00026ad0 	.word	0x00026ad0

00022d38 <ocrypto_curve_p256_to32bytes>:
   22d38:	f000 b902 	b.w	22f40 <ocrypto_mod_p256_to_bytes>

00022d3c <ocrypto_curve_p256_to64bytes>:
   22d3c:	b538      	push	{r3, r4, r5, lr}
   22d3e:	4604      	mov	r4, r0
   22d40:	460d      	mov	r5, r1
   22d42:	f000 f8fd 	bl	22f40 <ocrypto_mod_p256_to_bytes>
   22d46:	f105 0120 	add.w	r1, r5, #32
   22d4a:	f104 0020 	add.w	r0, r4, #32
   22d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22d52:	f000 b8f5 	b.w	22f40 <ocrypto_mod_p256_to_bytes>
   22d56:	bf00      	nop

00022d58 <ocrypto_curve_p256_scalarmult>:
   22d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22d5c:	4613      	mov	r3, r2
   22d5e:	b0b8      	sub	sp, #224	; 0xe0
   22d60:	4a54      	ldr	r2, [pc, #336]	; (22eb4 <ocrypto_curve_p256_scalarmult+0x15c>)
   22d62:	4689      	mov	r9, r1
   22d64:	4680      	mov	r8, r0
   22d66:	4619      	mov	r1, r3
   22d68:	a810      	add	r0, sp, #64	; 0x40
   22d6a:	f7dd f9f1 	bl	150 <ocrypto_bigint_sub256>
   22d6e:	4952      	ldr	r1, [pc, #328]	; (22eb8 <ocrypto_curve_p256_scalarmult+0x160>)
   22d70:	4602      	mov	r2, r0
   22d72:	a810      	add	r0, sp, #64	; 0x40
   22d74:	f7dd fa0c 	bl	190 <ocrypto_bigint_cadd256>
   22d78:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   22d7a:	494e      	ldr	r1, [pc, #312]	; (22eb4 <ocrypto_curve_p256_scalarmult+0x15c>)
   22d7c:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   22d80:	4607      	mov	r7, r0
   22d82:	f1c6 0201 	rsb	r2, r6, #1
   22d86:	a810      	add	r0, sp, #64	; 0x40
   22d88:	f7dd fa02 	bl	190 <ocrypto_bigint_cadd256>
   22d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22d8e:	464a      	mov	r2, r9
   22d90:	ea6f 0a03 	mvn.w	sl, r3
   22d94:	a928      	add	r1, sp, #160	; 0xa0
   22d96:	a818      	add	r0, sp, #96	; 0x60
   22d98:	f7ff fe8e 	bl	22ab8 <p256_zdblu>
   22d9c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   22da0:	a920      	add	r1, sp, #128	; 0x80
   22da2:	f1ca 0201 	rsb	r2, sl, #1
   22da6:	4608      	mov	r0, r1
   22da8:	f000 f892 	bl	22ed0 <ocrypto_mod_p256_cneg>
   22dac:	f1c7 0701 	rsb	r7, r7, #1
   22db0:	24fe      	movs	r4, #254	; 0xfe
   22db2:	466a      	mov	r2, sp
   22db4:	a918      	add	r1, sp, #96	; 0x60
   22db6:	a828      	add	r0, sp, #160	; 0xa0
   22db8:	f7ff ff40 	bl	22c3c <p256_zaddu>
   22dbc:	1163      	asrs	r3, r4, #5
   22dbe:	aa38      	add	r2, sp, #224	; 0xe0
   22dc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   22dc4:	f004 021f 	and.w	r2, r4, #31
   22dc8:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   22dcc:	40d3      	lsrs	r3, r2
   22dce:	4655      	mov	r5, sl
   22dd0:	f003 0a01 	and.w	sl, r3, #1
   22dd4:	ea8a 0505 	eor.w	r5, sl, r5
   22dd8:	462a      	mov	r2, r5
   22dda:	a928      	add	r1, sp, #160	; 0xa0
   22ddc:	a818      	add	r0, sp, #96	; 0x60
   22dde:	f7dd fa33 	bl	248 <ocrypto_bigint_cswap256>
   22de2:	462a      	mov	r2, r5
   22de4:	a930      	add	r1, sp, #192	; 0xc0
   22de6:	a820      	add	r0, sp, #128	; 0x80
   22de8:	f7dd fa2e 	bl	248 <ocrypto_bigint_cswap256>
   22dec:	3c01      	subs	r4, #1
   22dee:	a928      	add	r1, sp, #160	; 0xa0
   22df0:	a818      	add	r0, sp, #96	; 0x60
   22df2:	f7ff febd 	bl	22b70 <p256_zaddc>
   22df6:	1c63      	adds	r3, r4, #1
   22df8:	d1db      	bne.n	22db2 <ocrypto_curve_p256_scalarmult+0x5a>
   22dfa:	f1ca 0201 	rsb	r2, sl, #1
   22dfe:	a920      	add	r1, sp, #128	; 0x80
   22e00:	a808      	add	r0, sp, #32
   22e02:	f000 f865 	bl	22ed0 <ocrypto_mod_p256_cneg>
   22e06:	ea86 060a 	eor.w	r6, r6, sl
   22e0a:	466a      	mov	r2, sp
   22e0c:	a918      	add	r1, sp, #96	; 0x60
   22e0e:	a828      	add	r0, sp, #160	; 0xa0
   22e10:	f7ff ff14 	bl	22c3c <p256_zaddu>
   22e14:	a928      	add	r1, sp, #160	; 0xa0
   22e16:	4632      	mov	r2, r6
   22e18:	a818      	add	r0, sp, #96	; 0x60
   22e1a:	f7dd fa15 	bl	248 <ocrypto_bigint_cswap256>
   22e1e:	4632      	mov	r2, r6
   22e20:	a930      	add	r1, sp, #192	; 0xc0
   22e22:	a820      	add	r0, sp, #128	; 0x80
   22e24:	f7dd fa10 	bl	248 <ocrypto_bigint_cswap256>
   22e28:	a908      	add	r1, sp, #32
   22e2a:	466a      	mov	r2, sp
   22e2c:	4608      	mov	r0, r1
   22e2e:	f7dd fc71 	bl	714 <ocrypto_mod_p256_mul>
   22e32:	a908      	add	r1, sp, #32
   22e34:	4608      	mov	r0, r1
   22e36:	f000 f89d 	bl	22f74 <ocrypto_mod_p256_inv>
   22e3a:	a908      	add	r1, sp, #32
   22e3c:	f108 0420 	add.w	r4, r8, #32
   22e40:	f109 0220 	add.w	r2, r9, #32
   22e44:	4608      	mov	r0, r1
   22e46:	f7dd fc65 	bl	714 <ocrypto_mod_p256_mul>
   22e4a:	a920      	add	r1, sp, #128	; 0x80
   22e4c:	aa08      	add	r2, sp, #32
   22e4e:	4620      	mov	r0, r4
   22e50:	f7dd fc60 	bl	714 <ocrypto_mod_p256_mul>
   22e54:	aa08      	add	r2, sp, #32
   22e56:	a918      	add	r1, sp, #96	; 0x60
   22e58:	4668      	mov	r0, sp
   22e5a:	f7dd fc5b 	bl	714 <ocrypto_mod_p256_mul>
   22e5e:	4669      	mov	r1, sp
   22e60:	4668      	mov	r0, sp
   22e62:	f7dd fc6f 	bl	744 <ocrypto_mod_p256_sqr>
   22e66:	aa18      	add	r2, sp, #96	; 0x60
   22e68:	4669      	mov	r1, sp
   22e6a:	a808      	add	r0, sp, #32
   22e6c:	f7dd fc52 	bl	714 <ocrypto_mod_p256_mul>
   22e70:	4621      	mov	r1, r4
   22e72:	4668      	mov	r0, sp
   22e74:	f7dd fc66 	bl	744 <ocrypto_mod_p256_sqr>
   22e78:	aa08      	add	r2, sp, #32
   22e7a:	4669      	mov	r1, sp
   22e7c:	4610      	mov	r0, r2
   22e7e:	f7dd fbc1 	bl	604 <ocrypto_mod_p256_sub>
   22e82:	4a0e      	ldr	r2, [pc, #56]	; (22ebc <ocrypto_curve_p256_scalarmult+0x164>)
   22e84:	a908      	add	r1, sp, #32
   22e86:	4668      	mov	r0, sp
   22e88:	f7dd fbbc 	bl	604 <ocrypto_mod_p256_sub>
   22e8c:	4620      	mov	r0, r4
   22e8e:	2120      	movs	r1, #32
   22e90:	f7dd fb60 	bl	554 <ocrypto_constant_time_is_zero>
   22e94:	a908      	add	r1, sp, #32
   22e96:	4602      	mov	r2, r0
   22e98:	4244      	negs	r4, r0
   22e9a:	4668      	mov	r0, sp
   22e9c:	f7dd f9d4 	bl	248 <ocrypto_bigint_cswap256>
   22ea0:	4640      	mov	r0, r8
   22ea2:	4a07      	ldr	r2, [pc, #28]	; (22ec0 <ocrypto_curve_p256_scalarmult+0x168>)
   22ea4:	4669      	mov	r1, sp
   22ea6:	f7dd fc35 	bl	714 <ocrypto_mod_p256_mul>
   22eaa:	433c      	orrs	r4, r7
   22eac:	4620      	mov	r0, r4
   22eae:	b038      	add	sp, #224	; 0xe0
   22eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22eb4:	00026a50 	.word	0x00026a50
   22eb8:	00026a70 	.word	0x00026a70
   22ebc:	00026ad0 	.word	0x00026ad0
   22ec0:	00026a30 	.word	0x00026a30

00022ec4 <ocrypto_curve_p256_scalarmult_base>:
   22ec4:	460a      	mov	r2, r1
   22ec6:	4901      	ldr	r1, [pc, #4]	; (22ecc <ocrypto_curve_p256_scalarmult_base+0x8>)
   22ec8:	f7ff bf46 	b.w	22d58 <ocrypto_curve_p256_scalarmult>
   22ecc:	00026a90 	.word	0x00026a90

00022ed0 <ocrypto_mod_p256_cneg>:
   22ed0:	b570      	push	{r4, r5, r6, lr}
   22ed2:	b088      	sub	sp, #32
   22ed4:	4604      	mov	r4, r0
   22ed6:	460d      	mov	r5, r1
   22ed8:	4616      	mov	r6, r2
   22eda:	2100      	movs	r1, #0
   22edc:	2220      	movs	r2, #32
   22ede:	4668      	mov	r0, sp
   22ee0:	f000 ffa3 	bl	23e2a <memset>
   22ee4:	2300      	movs	r3, #0
   22ee6:	4629      	mov	r1, r5
   22ee8:	2220      	movs	r2, #32
   22eea:	4620      	mov	r0, r4
   22eec:	9300      	str	r3, [sp, #0]
   22eee:	f000 ff91 	bl	23e14 <memcpy>
   22ef2:	462a      	mov	r2, r5
   22ef4:	4669      	mov	r1, sp
   22ef6:	4668      	mov	r0, sp
   22ef8:	f7dd fb84 	bl	604 <ocrypto_mod_p256_sub>
   22efc:	4632      	mov	r2, r6
   22efe:	4669      	mov	r1, sp
   22f00:	4620      	mov	r0, r4
   22f02:	f7dd f9a1 	bl	248 <ocrypto_bigint_cswap256>
   22f06:	b008      	add	sp, #32
   22f08:	bd70      	pop	{r4, r5, r6, pc}
   22f0a:	bf00      	nop

00022f0c <ocrypto_mod_p256_from_bytes>:
   22f0c:	680b      	ldr	r3, [r1, #0]
   22f0e:	ba1b      	rev	r3, r3
   22f10:	61c3      	str	r3, [r0, #28]
   22f12:	684b      	ldr	r3, [r1, #4]
   22f14:	ba1b      	rev	r3, r3
   22f16:	6183      	str	r3, [r0, #24]
   22f18:	688b      	ldr	r3, [r1, #8]
   22f1a:	ba1b      	rev	r3, r3
   22f1c:	6143      	str	r3, [r0, #20]
   22f1e:	68cb      	ldr	r3, [r1, #12]
   22f20:	ba1b      	rev	r3, r3
   22f22:	6103      	str	r3, [r0, #16]
   22f24:	690b      	ldr	r3, [r1, #16]
   22f26:	ba1b      	rev	r3, r3
   22f28:	60c3      	str	r3, [r0, #12]
   22f2a:	694b      	ldr	r3, [r1, #20]
   22f2c:	ba1b      	rev	r3, r3
   22f2e:	6083      	str	r3, [r0, #8]
   22f30:	698b      	ldr	r3, [r1, #24]
   22f32:	ba1b      	rev	r3, r3
   22f34:	6043      	str	r3, [r0, #4]
   22f36:	69cb      	ldr	r3, [r1, #28]
   22f38:	ba1b      	rev	r3, r3
   22f3a:	6003      	str	r3, [r0, #0]
   22f3c:	4770      	bx	lr
   22f3e:	bf00      	nop

00022f40 <ocrypto_mod_p256_to_bytes>:
   22f40:	69cb      	ldr	r3, [r1, #28]
   22f42:	ba1b      	rev	r3, r3
   22f44:	6003      	str	r3, [r0, #0]
   22f46:	698b      	ldr	r3, [r1, #24]
   22f48:	ba1b      	rev	r3, r3
   22f4a:	6043      	str	r3, [r0, #4]
   22f4c:	694b      	ldr	r3, [r1, #20]
   22f4e:	ba1b      	rev	r3, r3
   22f50:	6083      	str	r3, [r0, #8]
   22f52:	690b      	ldr	r3, [r1, #16]
   22f54:	ba1b      	rev	r3, r3
   22f56:	60c3      	str	r3, [r0, #12]
   22f58:	68cb      	ldr	r3, [r1, #12]
   22f5a:	ba1b      	rev	r3, r3
   22f5c:	6103      	str	r3, [r0, #16]
   22f5e:	688b      	ldr	r3, [r1, #8]
   22f60:	ba1b      	rev	r3, r3
   22f62:	6143      	str	r3, [r0, #20]
   22f64:	684b      	ldr	r3, [r1, #4]
   22f66:	ba1b      	rev	r3, r3
   22f68:	6183      	str	r3, [r0, #24]
   22f6a:	680b      	ldr	r3, [r1, #0]
   22f6c:	ba1b      	rev	r3, r3
   22f6e:	61c3      	str	r3, [r0, #28]
   22f70:	4770      	bx	lr
   22f72:	bf00      	nop

00022f74 <ocrypto_mod_p256_inv>:
   22f74:	b570      	push	{r4, r5, r6, lr}
   22f76:	b098      	sub	sp, #96	; 0x60
   22f78:	460d      	mov	r5, r1
   22f7a:	4606      	mov	r6, r0
   22f7c:	a810      	add	r0, sp, #64	; 0x40
   22f7e:	f7dd fbe1 	bl	744 <ocrypto_mod_p256_sqr>
   22f82:	462a      	mov	r2, r5
   22f84:	a910      	add	r1, sp, #64	; 0x40
   22f86:	4668      	mov	r0, sp
   22f88:	f7dd fbc4 	bl	714 <ocrypto_mod_p256_mul>
   22f8c:	4669      	mov	r1, sp
   22f8e:	a810      	add	r0, sp, #64	; 0x40
   22f90:	f7dd fbd8 	bl	744 <ocrypto_mod_p256_sqr>
   22f94:	a910      	add	r1, sp, #64	; 0x40
   22f96:	4608      	mov	r0, r1
   22f98:	f7dd fbd4 	bl	744 <ocrypto_mod_p256_sqr>
   22f9c:	466a      	mov	r2, sp
   22f9e:	a910      	add	r1, sp, #64	; 0x40
   22fa0:	a808      	add	r0, sp, #32
   22fa2:	f7dd fbb7 	bl	714 <ocrypto_mod_p256_mul>
   22fa6:	a908      	add	r1, sp, #32
   22fa8:	a810      	add	r0, sp, #64	; 0x40
   22faa:	f7dd fbcb 	bl	744 <ocrypto_mod_p256_sqr>
   22fae:	a910      	add	r1, sp, #64	; 0x40
   22fb0:	4608      	mov	r0, r1
   22fb2:	f7dd fbc7 	bl	744 <ocrypto_mod_p256_sqr>
   22fb6:	a910      	add	r1, sp, #64	; 0x40
   22fb8:	4608      	mov	r0, r1
   22fba:	f7dd fbc3 	bl	744 <ocrypto_mod_p256_sqr>
   22fbe:	a910      	add	r1, sp, #64	; 0x40
   22fc0:	4608      	mov	r0, r1
   22fc2:	f7dd fbbf 	bl	744 <ocrypto_mod_p256_sqr>
   22fc6:	a910      	add	r1, sp, #64	; 0x40
   22fc8:	aa08      	add	r2, sp, #32
   22fca:	4608      	mov	r0, r1
   22fcc:	f7dd fba2 	bl	714 <ocrypto_mod_p256_mul>
   22fd0:	a910      	add	r1, sp, #64	; 0x40
   22fd2:	4608      	mov	r0, r1
   22fd4:	f7dd fbb6 	bl	744 <ocrypto_mod_p256_sqr>
   22fd8:	a910      	add	r1, sp, #64	; 0x40
   22fda:	4608      	mov	r0, r1
   22fdc:	f7dd fbb2 	bl	744 <ocrypto_mod_p256_sqr>
   22fe0:	a910      	add	r1, sp, #64	; 0x40
   22fe2:	466a      	mov	r2, sp
   22fe4:	a808      	add	r0, sp, #32
   22fe6:	f7dd fb95 	bl	714 <ocrypto_mod_p256_mul>
   22fea:	2405      	movs	r4, #5
   22fec:	a908      	add	r1, sp, #32
   22fee:	a810      	add	r0, sp, #64	; 0x40
   22ff0:	f7dd fba8 	bl	744 <ocrypto_mod_p256_sqr>
   22ff4:	a910      	add	r1, sp, #64	; 0x40
   22ff6:	4608      	mov	r0, r1
   22ff8:	f7dd fba4 	bl	744 <ocrypto_mod_p256_sqr>
   22ffc:	3c01      	subs	r4, #1
   22ffe:	a910      	add	r1, sp, #64	; 0x40
   23000:	d1f5      	bne.n	22fee <ocrypto_mod_p256_inv+0x7a>
   23002:	aa08      	add	r2, sp, #32
   23004:	4608      	mov	r0, r1
   23006:	f7dd fb85 	bl	714 <ocrypto_mod_p256_mul>
   2300a:	2405      	movs	r4, #5
   2300c:	a910      	add	r1, sp, #64	; 0x40
   2300e:	4608      	mov	r0, r1
   23010:	f7dd fb98 	bl	744 <ocrypto_mod_p256_sqr>
   23014:	a910      	add	r1, sp, #64	; 0x40
   23016:	4608      	mov	r0, r1
   23018:	f7dd fb94 	bl	744 <ocrypto_mod_p256_sqr>
   2301c:	3c01      	subs	r4, #1
   2301e:	d1f5      	bne.n	2300c <ocrypto_mod_p256_inv+0x98>
   23020:	a910      	add	r1, sp, #64	; 0x40
   23022:	aa08      	add	r2, sp, #32
   23024:	4608      	mov	r0, r1
   23026:	f7dd fb75 	bl	714 <ocrypto_mod_p256_mul>
   2302a:	a910      	add	r1, sp, #64	; 0x40
   2302c:	a808      	add	r0, sp, #32
   2302e:	f7dd fb89 	bl	744 <ocrypto_mod_p256_sqr>
   23032:	a908      	add	r1, sp, #32
   23034:	4608      	mov	r0, r1
   23036:	f7dd fb85 	bl	744 <ocrypto_mod_p256_sqr>
   2303a:	a908      	add	r1, sp, #32
   2303c:	466a      	mov	r2, sp
   2303e:	4668      	mov	r0, sp
   23040:	f7dd fb68 	bl	714 <ocrypto_mod_p256_mul>
   23044:	2410      	movs	r4, #16
   23046:	4669      	mov	r1, sp
   23048:	a810      	add	r0, sp, #64	; 0x40
   2304a:	f7dd fb7b 	bl	744 <ocrypto_mod_p256_sqr>
   2304e:	a910      	add	r1, sp, #64	; 0x40
   23050:	4608      	mov	r0, r1
   23052:	f7dd fb77 	bl	744 <ocrypto_mod_p256_sqr>
   23056:	3c01      	subs	r4, #1
   23058:	a910      	add	r1, sp, #64	; 0x40
   2305a:	d1f5      	bne.n	23048 <ocrypto_mod_p256_inv+0xd4>
   2305c:	462a      	mov	r2, r5
   2305e:	4608      	mov	r0, r1
   23060:	f7dd fb58 	bl	714 <ocrypto_mod_p256_mul>
   23064:	2440      	movs	r4, #64	; 0x40
   23066:	a910      	add	r1, sp, #64	; 0x40
   23068:	4608      	mov	r0, r1
   2306a:	f7dd fb6b 	bl	744 <ocrypto_mod_p256_sqr>
   2306e:	a910      	add	r1, sp, #64	; 0x40
   23070:	4608      	mov	r0, r1
   23072:	f7dd fb67 	bl	744 <ocrypto_mod_p256_sqr>
   23076:	3c01      	subs	r4, #1
   23078:	d1f5      	bne.n	23066 <ocrypto_mod_p256_inv+0xf2>
   2307a:	a910      	add	r1, sp, #64	; 0x40
   2307c:	466a      	mov	r2, sp
   2307e:	4608      	mov	r0, r1
   23080:	f7dd fb48 	bl	714 <ocrypto_mod_p256_mul>
   23084:	2410      	movs	r4, #16
   23086:	a910      	add	r1, sp, #64	; 0x40
   23088:	4608      	mov	r0, r1
   2308a:	f7dd fb5b 	bl	744 <ocrypto_mod_p256_sqr>
   2308e:	a910      	add	r1, sp, #64	; 0x40
   23090:	4608      	mov	r0, r1
   23092:	f7dd fb57 	bl	744 <ocrypto_mod_p256_sqr>
   23096:	3c01      	subs	r4, #1
   23098:	d1f5      	bne.n	23086 <ocrypto_mod_p256_inv+0x112>
   2309a:	a910      	add	r1, sp, #64	; 0x40
   2309c:	466a      	mov	r2, sp
   2309e:	4608      	mov	r0, r1
   230a0:	f7dd fb38 	bl	714 <ocrypto_mod_p256_mul>
   230a4:	2410      	movs	r4, #16
   230a6:	a910      	add	r1, sp, #64	; 0x40
   230a8:	4608      	mov	r0, r1
   230aa:	f7dd fb4b 	bl	744 <ocrypto_mod_p256_sqr>
   230ae:	a910      	add	r1, sp, #64	; 0x40
   230b0:	4608      	mov	r0, r1
   230b2:	f7dd fb47 	bl	744 <ocrypto_mod_p256_sqr>
   230b6:	3c01      	subs	r4, #1
   230b8:	d1f5      	bne.n	230a6 <ocrypto_mod_p256_inv+0x132>
   230ba:	a910      	add	r1, sp, #64	; 0x40
   230bc:	aa08      	add	r2, sp, #32
   230be:	4608      	mov	r0, r1
   230c0:	f7dd fb28 	bl	714 <ocrypto_mod_p256_mul>
   230c4:	462a      	mov	r2, r5
   230c6:	a910      	add	r1, sp, #64	; 0x40
   230c8:	4630      	mov	r0, r6
   230ca:	f7dd fb23 	bl	714 <ocrypto_mod_p256_mul>
   230ce:	b018      	add	sp, #96	; 0x60
   230d0:	bd70      	pop	{r4, r5, r6, pc}
   230d2:	bf00      	nop

000230d4 <z_log_msg_static_create.constprop.0>:
   230d4:	2300      	movs	r3, #0
   230d6:	f7f0 b8ed 	b.w	132b4 <z_impl_z_log_msg_static_create>

000230da <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   230da:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   230dc:	6883      	ldr	r3, [r0, #8]
   230de:	68dc      	ldr	r4, [r3, #12]
   230e0:	2214      	movs	r2, #20
   230e2:	46a4      	mov	ip, r4
   230e4:	2332      	movs	r3, #50	; 0x32
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   230e6:	bc10      	pop	{r4}
   230e8:	4760      	bx	ip

000230ea <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   230ea:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   230ec:	6883      	ldr	r3, [r0, #8]
   230ee:	685c      	ldr	r4, [r3, #4]
   230f0:	f04f 33ff 	mov.w	r3, #4294967295
   230f4:	46a4      	mov	ip, r4
}
   230f6:	bc10      	pop	{r4}
   230f8:	4760      	bx	ip

000230fa <error>:
}
   230fa:	b508      	push	{r3, lr}

   230fc:	2100      	movs	r1, #0
   230fe:	200f      	movs	r0, #15
   23100:	f002 fbe7 	bl	258d2 <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   23104:	2100      	movs	r1, #0
   23106:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2310a:	f7fe fb9d 	bl	21848 <z_impl_k_sleep>
static void num_comp_reply(bool accept)
   2310e:	e7f9      	b.n	23104 <error+0xa>

00023110 <cbpprintf_external>:
{
   23110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23114:	4606      	mov	r6, r0
   23116:	460d      	mov	r5, r1
   23118:	4617      	mov	r7, r2
	if (buf == NULL) {
   2311a:	4698      	mov	r8, r3
   2311c:	b32b      	cbz	r3, 2316a <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   2311e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   23122:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23126:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   23128:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2312a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2312e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23132:	441c      	add	r4, r3
   23134:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   23136:	f04f 0a00 	mov.w	sl, #0
   2313a:	45ca      	cmp	sl, r9
   2313c:	d309      	bcc.n	23152 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2313e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   23142:	f108 0308 	add.w	r3, r8, #8
   23146:	4639      	mov	r1, r7
   23148:	4630      	mov	r0, r6
   2314a:	46ac      	mov	ip, r5
}
   2314c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   23150:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   23152:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   23156:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2315a:	4620      	mov	r0, r4
   2315c:	f000 fe3a 	bl	23dd4 <strlen>
   23160:	3001      	adds	r0, #1
   23162:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   23164:	f10a 0a01 	add.w	sl, sl, #1
   23168:	e7e7      	b.n	2313a <cbpprintf_external+0x2a>
}
   2316a:	f06f 0015 	mvn.w	r0, #21
   2316e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023172 <is_ptr>:
{
   23172:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   23174:	2500      	movs	r5, #0
{
   23176:	4602      	mov	r2, r0
	bool mod = false;
   23178:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2317a:	4614      	mov	r4, r2
   2317c:	f814 3b01 	ldrb.w	r3, [r4], #1
   23180:	b90b      	cbnz	r3, 23186 <is_ptr+0x14>
					return false;
   23182:	4618      	mov	r0, r3
   23184:	e009      	b.n	2319a <is_ptr+0x28>
		if (mod) {
   23186:	b198      	cbz	r0, 231b0 <is_ptr+0x3e>
			if (cnt == n) {
   23188:	428d      	cmp	r5, r1
   2318a:	d107      	bne.n	2319c <is_ptr+0x2a>
				if (c == 'p') {
   2318c:	2b70      	cmp	r3, #112	; 0x70
   2318e:	d004      	beq.n	2319a <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   23190:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   23194:	2a3a      	cmp	r2, #58	; 0x3a
   23196:	d80b      	bhi.n	231b0 <is_ptr+0x3e>
					return false;
   23198:	2000      	movs	r0, #0
}
   2319a:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2319c:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   231a0:	2e3a      	cmp	r6, #58	; 0x3a
   231a2:	d805      	bhi.n	231b0 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   231a4:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   231a6:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   231a8:	1c94      	adds	r4, r2, #2
   231aa:	2b00      	cmp	r3, #0
   231ac:	d0e9      	beq.n	23182 <is_ptr+0x10>
   231ae:	2000      	movs	r0, #0
		if (c == '%') {
   231b0:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   231b2:	bf08      	it	eq
   231b4:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   231b8:	4622      	mov	r2, r4
   231ba:	e7de      	b.n	2317a <is_ptr+0x8>

000231bc <arch_printk_char_out>:
}
   231bc:	2000      	movs	r0, #0
   231be:	4770      	bx	lr

000231c0 <str_out>:
{
   231c0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   231c2:	688a      	ldr	r2, [r1, #8]
   231c4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   231c6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   231c8:	b114      	cbz	r4, 231d0 <str_out+0x10>
   231ca:	684b      	ldr	r3, [r1, #4]
   231cc:	4293      	cmp	r3, r2
   231ce:	dc01      	bgt.n	231d4 <str_out+0x14>
		ctx->count++;
   231d0:	608d      	str	r5, [r1, #8]
}
   231d2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   231d4:	3b01      	subs	r3, #1
   231d6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   231d8:	bf08      	it	eq
   231da:	2200      	moveq	r2, #0
   231dc:	608d      	str	r5, [r1, #8]
   231de:	bf0c      	ite	eq
   231e0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   231e2:	54a0      	strbne	r0, [r4, r2]
   231e4:	e7f5      	b.n	231d2 <str_out+0x12>

000231e6 <vprintk>:
		z_log_vprintk(fmt, ap);
   231e6:	f000 bb3e 	b.w	23866 <z_log_vprintk>

000231ea <printk>:
{
   231ea:	b40f      	push	{r0, r1, r2, r3}
   231ec:	b507      	push	{r0, r1, r2, lr}
   231ee:	a904      	add	r1, sp, #16
   231f0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   231f4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   231f6:	f000 fb36 	bl	23866 <z_log_vprintk>
}
   231fa:	b003      	add	sp, #12
   231fc:	f85d eb04 	ldr.w	lr, [sp], #4
   23200:	b004      	add	sp, #16
   23202:	4770      	bx	lr

00023204 <snprintk>:
{
   23204:	b40c      	push	{r2, r3}
   23206:	b507      	push	{r0, r1, r2, lr}
   23208:	ab04      	add	r3, sp, #16
   2320a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2320e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   23210:	f7ee fab4 	bl	1177c <vsnprintk>
}
   23214:	b003      	add	sp, #12
   23216:	f85d eb04 	ldr.w	lr, [sp], #4
   2321a:	b002      	add	sp, #8
   2321c:	4770      	bx	lr

0002321e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2321e:	4604      	mov	r4, r0
   23220:	b508      	push	{r3, lr}
   23222:	4608      	mov	r0, r1
   23224:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   23226:	461a      	mov	r2, r3
   23228:	47a0      	blx	r4
	return z_impl_z_current_get();
   2322a:	f7fe fb41 	bl	218b0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2322e:	f7f1 fc09 	bl	14a44 <z_impl_k_thread_abort>

00023232 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   23232:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   23236:	8840      	ldrh	r0, [r0, #2]
}
   23238:	0840      	lsrs	r0, r0, #1
   2323a:	4770      	bx	lr

0002323c <free_list_add>:
{
   2323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2323e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   23240:	f7ff fff7 	bl	23232 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23244:	fab0 f080 	clz	r0, r0
   23248:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2324c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   23250:	00ca      	lsls	r2, r1, #3
   23252:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   23256:	1d17      	adds	r7, r2, #4
{
   23258:	460c      	mov	r4, r1
   2325a:	3206      	adds	r2, #6
   2325c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2325e:	b956      	cbnz	r6, 23276 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   23260:	2101      	movs	r1, #1
   23262:	fa01 f000 	lsl.w	r0, r1, r0
   23266:	68d9      	ldr	r1, [r3, #12]
   23268:	4301      	orrs	r1, r0
   2326a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2326c:	f8cc 4010 	str.w	r4, [ip, #16]
   23270:	53dd      	strh	r5, [r3, r7]
   23272:	529d      	strh	r5, [r3, r2]
}
   23274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   23276:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   23278:	3104      	adds	r1, #4
   2327a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2327c:	53d8      	strh	r0, [r3, r7]
   2327e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23282:	529e      	strh	r6, [r3, r2]
   23284:	80c5      	strh	r5, [r0, #6]
   23286:	525d      	strh	r5, [r3, r1]
   23288:	e7f4      	b.n	23274 <free_list_add+0x38>

0002328a <free_list_remove_bidx>:
{
   2328a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2328c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   23290:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   23292:	4299      	cmp	r1, r3
   23294:	f102 0104 	add.w	r1, r2, #4
   23298:	d10a      	bne.n	232b0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2329a:	2301      	movs	r3, #1
   2329c:	fa03 f202 	lsl.w	r2, r3, r2
   232a0:	68c3      	ldr	r3, [r0, #12]
   232a2:	ea23 0302 	bic.w	r3, r3, r2
   232a6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   232a8:	2300      	movs	r3, #0
   232aa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   232ae:	bd10      	pop	{r4, pc}
   232b0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   232b2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   232b6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   232ba:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   232be:	80cb      	strh	r3, [r1, #6]
   232c0:	8082      	strh	r2, [r0, #4]
}
   232c2:	e7f4      	b.n	232ae <free_list_remove_bidx+0x24>

000232c4 <free_list_remove>:
{
   232c4:	b508      	push	{r3, lr}
   232c6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   232c8:	f7ff ffb3 	bl	23232 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   232cc:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   232d0:	f1c2 021f 	rsb	r2, r2, #31
   232d4:	4618      	mov	r0, r3
}
   232d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   232da:	f7ff bfd6 	b.w	2328a <free_list_remove_bidx>

000232de <alloc_chunk>:
{
   232de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   232e2:	fab1 f581 	clz	r5, r1
   232e6:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   232ea:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   232ee:	4603      	mov	r3, r0
	if (b->next) {
   232f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   232f4:	460e      	mov	r6, r1
	if (b->next) {
   232f6:	b1c2      	cbz	r2, 2332a <alloc_chunk+0x4c>
   232f8:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   232fa:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   232fe:	4618      	mov	r0, r3
   23300:	4621      	mov	r1, r4
   23302:	f7ff ff96 	bl	23232 <chunk_size>
   23306:	42b0      	cmp	r0, r6
   23308:	d306      	bcc.n	23318 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2330a:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2330c:	4618      	mov	r0, r3
   2330e:	f7ff ffbc 	bl	2328a <free_list_remove_bidx>
}
   23312:	4620      	mov	r0, r4
   23314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   23318:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2331c:	3f01      	subs	r7, #1
   2331e:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   23320:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   23324:	d001      	beq.n	2332a <alloc_chunk+0x4c>
   23326:	4282      	cmp	r2, r0
   23328:	d1e7      	bne.n	232fa <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2332a:	f1c5 0220 	rsb	r2, r5, #32
   2332e:	f04f 34ff 	mov.w	r4, #4294967295
   23332:	4094      	lsls	r4, r2
   23334:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   23336:	4014      	ands	r4, r2
   23338:	d0eb      	beq.n	23312 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2333a:	fa94 f2a4 	rbit	r2, r4
   2333e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23342:	1d11      	adds	r1, r2, #4
   23344:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   23348:	4621      	mov	r1, r4
   2334a:	e7df      	b.n	2330c <alloc_chunk+0x2e>

0002334c <merge_chunks>:
{
   2334c:	b538      	push	{r3, r4, r5, lr}
   2334e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23350:	f7ff ff6f 	bl	23232 <chunk_size>
{
   23354:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23356:	4604      	mov	r4, r0
   23358:	4611      	mov	r1, r2
   2335a:	4618      	mov	r0, r3
   2335c:	f7ff ff69 	bl	23232 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   23360:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   23364:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23366:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   23368:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2336a:	4618      	mov	r0, r3
   2336c:	f7ff ff61 	bl	23232 <chunk_size>
	void *cmem = &buf[c];
   23370:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23372:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   23376:	bd38      	pop	{r3, r4, r5, pc}

00023378 <split_chunks>:
{
   23378:	b538      	push	{r3, r4, r5, lr}
   2337a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2337c:	f7ff ff59 	bl	23232 <chunk_size>
{
   23380:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   23382:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   23384:	1a51      	subs	r1, r2, r1
   23386:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2338a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2338c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2338e:	8060      	strh	r0, [r4, #2]
   23390:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23394:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23396:	8044      	strh	r4, [r0, #2]
   23398:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2339c:	4618      	mov	r0, r3
   2339e:	4611      	mov	r1, r2
   233a0:	f7ff ff47 	bl	23232 <chunk_size>
	void *cmem = &buf[c];
   233a4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   233a6:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   233aa:	bd38      	pop	{r3, r4, r5, pc}

000233ac <free_chunk>:
{
   233ac:	b538      	push	{r3, r4, r5, lr}
   233ae:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   233b0:	f7ff ff3f 	bl	23232 <chunk_size>
   233b4:	460c      	mov	r4, r1
   233b6:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   233b8:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   233bc:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   233be:	07da      	lsls	r2, r3, #31
   233c0:	d40a      	bmi.n	233d8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   233c2:	4628      	mov	r0, r5
   233c4:	f7ff ff7e 	bl	232c4 <free_list_remove>
	return c + chunk_size(h, c);
   233c8:	4621      	mov	r1, r4
   233ca:	4628      	mov	r0, r5
   233cc:	f7ff ff31 	bl	23232 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   233d0:	1822      	adds	r2, r4, r0
   233d2:	4628      	mov	r0, r5
   233d4:	f7ff ffba 	bl	2334c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   233d8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   233dc:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   233de:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   233e2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   233e4:	07db      	lsls	r3, r3, #31
   233e6:	d40c      	bmi.n	23402 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   233e8:	4628      	mov	r0, r5
   233ea:	f7ff ff6b 	bl	232c4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   233ee:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   233f2:	4622      	mov	r2, r4
   233f4:	1a61      	subs	r1, r4, r1
   233f6:	4628      	mov	r0, r5
   233f8:	f7ff ffa8 	bl	2334c <merge_chunks>
   233fc:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23400:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   23402:	4621      	mov	r1, r4
   23404:	4628      	mov	r0, r5
}
   23406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2340a:	f7ff bf17 	b.w	2323c <free_list_add>

0002340e <sys_heap_alloc>:
{
   2340e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   23410:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   23412:	b909      	cbnz	r1, 23418 <sys_heap_alloc+0xa>
		return NULL;
   23414:	2000      	movs	r0, #0
}
   23416:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23418:	68ab      	ldr	r3, [r5, #8]
   2341a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2341e:	d9f9      	bls.n	23414 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23420:	310b      	adds	r1, #11
   23422:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23424:	4621      	mov	r1, r4
   23426:	4628      	mov	r0, r5
   23428:	f7ff ff59 	bl	232de <alloc_chunk>
	if (c == 0U) {
   2342c:	4606      	mov	r6, r0
   2342e:	2800      	cmp	r0, #0
   23430:	d0f0      	beq.n	23414 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   23432:	4601      	mov	r1, r0
   23434:	4628      	mov	r0, r5
   23436:	f7ff fefc 	bl	23232 <chunk_size>
   2343a:	42a0      	cmp	r0, r4
   2343c:	d907      	bls.n	2344e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2343e:	1932      	adds	r2, r6, r4
   23440:	4628      	mov	r0, r5
   23442:	f7ff ff99 	bl	23378 <split_chunks>
		free_list_add(h, c + chunk_sz);
   23446:	4611      	mov	r1, r2
   23448:	4628      	mov	r0, r5
   2344a:	f7ff fef7 	bl	2323c <free_list_add>
	void *cmem = &buf[c];
   2344e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23452:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23454:	8853      	ldrh	r3, [r2, #2]
   23456:	f043 0301 	orr.w	r3, r3, #1
   2345a:	8053      	strh	r3, [r2, #2]
   2345c:	3004      	adds	r0, #4
	return mem;
   2345e:	e7da      	b.n	23416 <sys_heap_alloc+0x8>

00023460 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23460:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   23462:	f013 0307 	ands.w	r3, r3, #7
   23466:	d105      	bne.n	23474 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   23468:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2346a:	2b00      	cmp	r3, #0
   2346c:	bf0c      	ite	eq
   2346e:	2000      	moveq	r0, #0
   23470:	2003      	movne	r0, #3
   23472:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   23474:	2b02      	cmp	r3, #2
   23476:	d105      	bne.n	23484 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   23478:	8bc0      	ldrh	r0, [r0, #30]
   2347a:	fab0 f080 	clz	r0, r0
   2347e:	0940      	lsrs	r0, r0, #5
   23480:	0080      	lsls	r0, r0, #2
   23482:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   23484:	2b01      	cmp	r3, #1
   23486:	d105      	bne.n	23494 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   23488:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2348a:	2b00      	cmp	r3, #0
   2348c:	bf0c      	ite	eq
   2348e:	2000      	moveq	r0, #0
   23490:	2005      	movne	r0, #5
   23492:	4770      	bx	lr
	int evt = EVT_NOP;
   23494:	2000      	movs	r0, #0
}
   23496:	4770      	bx	lr

00023498 <validate_args>:
{
   23498:	b510      	push	{r4, lr}
   2349a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2349c:	b100      	cbz	r0, 234a0 <validate_args+0x8>
   2349e:	b911      	cbnz	r1, 234a6 <validate_args+0xe>
		return -EINVAL;
   234a0:	f06f 0015 	mvn.w	r0, #21
}
   234a4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   234a6:	1d08      	adds	r0, r1, #4
   234a8:	f000 f82f 	bl	2350a <sys_notify_validate>
	if ((rv == 0)
   234ac:	2800      	cmp	r0, #0
   234ae:	d1f9      	bne.n	234a4 <validate_args+0xc>
	    && ((cli->notify.flags
   234b0:	68a3      	ldr	r3, [r4, #8]
   234b2:	2b03      	cmp	r3, #3
   234b4:	d9f6      	bls.n	234a4 <validate_args+0xc>
   234b6:	e7f3      	b.n	234a0 <validate_args+0x8>

000234b8 <notify_one>:
{
   234b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   234bc:	460d      	mov	r5, r1
   234be:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   234c0:	4619      	mov	r1, r3
   234c2:	1d28      	adds	r0, r5, #4
{
   234c4:	4690      	mov	r8, r2
   234c6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   234c8:	f7ee fd60 	bl	11f8c <sys_notify_finalize>
	if (cb) {
   234cc:	4604      	mov	r4, r0
   234ce:	b138      	cbz	r0, 234e0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   234d0:	4633      	mov	r3, r6
   234d2:	4642      	mov	r2, r8
   234d4:	4629      	mov	r1, r5
   234d6:	4638      	mov	r0, r7
   234d8:	46a4      	mov	ip, r4
}
   234da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   234de:	4760      	bx	ip
}
   234e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000234e4 <onoff_manager_init>:
{
   234e4:	b538      	push	{r3, r4, r5, lr}
   234e6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   234e8:	4605      	mov	r5, r0
   234ea:	b158      	cbz	r0, 23504 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   234ec:	b151      	cbz	r1, 23504 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   234ee:	680b      	ldr	r3, [r1, #0]
   234f0:	b143      	cbz	r3, 23504 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   234f2:	684b      	ldr	r3, [r1, #4]
   234f4:	b133      	cbz	r3, 23504 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   234f6:	2220      	movs	r2, #32
   234f8:	2100      	movs	r1, #0
   234fa:	f000 fc96 	bl	23e2a <memset>
   234fe:	612c      	str	r4, [r5, #16]
	return 0;
   23500:	2000      	movs	r0, #0
}
   23502:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23504:	f06f 0015 	mvn.w	r0, #21
   23508:	e7fb      	b.n	23502 <onoff_manager_init+0x1e>

0002350a <sys_notify_validate>:
	if (notify == NULL) {
   2350a:	4603      	mov	r3, r0
   2350c:	b140      	cbz	r0, 23520 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2350e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   23510:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   23514:	2a02      	cmp	r2, #2
   23516:	d006      	beq.n	23526 <sys_notify_validate+0x1c>
   23518:	2a03      	cmp	r2, #3
   2351a:	d004      	beq.n	23526 <sys_notify_validate+0x1c>
   2351c:	2a01      	cmp	r2, #1
   2351e:	d005      	beq.n	2352c <sys_notify_validate+0x22>
   23520:	f06f 0015 	mvn.w	r0, #21
}
   23524:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   23526:	681a      	ldr	r2, [r3, #0]
   23528:	2a00      	cmp	r2, #0
   2352a:	d0f9      	beq.n	23520 <sys_notify_validate+0x16>
		notify->result = 0;
   2352c:	2000      	movs	r0, #0
   2352e:	6098      	str	r0, [r3, #8]
   23530:	4770      	bx	lr

00023532 <encode_uint>:
{
   23532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23536:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   23538:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2353a:	2b6f      	cmp	r3, #111	; 0x6f
{
   2353c:	4680      	mov	r8, r0
   2353e:	460f      	mov	r7, r1
   23540:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23542:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   23546:	d029      	beq.n	2359c <encode_uint+0x6a>
   23548:	d824      	bhi.n	23594 <encode_uint+0x62>
		return 10;
   2354a:	2b58      	cmp	r3, #88	; 0x58
   2354c:	bf0c      	ite	eq
   2354e:	2610      	moveq	r6, #16
   23550:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   23552:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   23556:	4632      	mov	r2, r6
   23558:	2300      	movs	r3, #0
   2355a:	4640      	mov	r0, r8
   2355c:	4639      	mov	r1, r7
   2355e:	f7dc fdbd 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23562:	2a09      	cmp	r2, #9
   23564:	b2d4      	uxtb	r4, r2
   23566:	d81e      	bhi.n	235a6 <encode_uint+0x74>
   23568:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2356a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2356c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2356e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23572:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   23576:	d301      	bcc.n	2357c <encode_uint+0x4a>
   23578:	45d1      	cmp	r9, sl
   2357a:	d811      	bhi.n	235a0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2357c:	782b      	ldrb	r3, [r5, #0]
   2357e:	069b      	lsls	r3, r3, #26
   23580:	d505      	bpl.n	2358e <encode_uint+0x5c>
		if (radix == 8) {
   23582:	2e08      	cmp	r6, #8
   23584:	d115      	bne.n	235b2 <encode_uint+0x80>
			conv->altform_0 = true;
   23586:	78ab      	ldrb	r3, [r5, #2]
   23588:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2358c:	70ab      	strb	r3, [r5, #2]
}
   2358e:	4648      	mov	r0, r9
   23590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   23594:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   23598:	2b70      	cmp	r3, #112	; 0x70
   2359a:	e7d7      	b.n	2354c <encode_uint+0x1a>
	switch (specifier) {
   2359c:	2608      	movs	r6, #8
   2359e:	e7d8      	b.n	23552 <encode_uint+0x20>
		value /= radix;
   235a0:	4680      	mov	r8, r0
   235a2:	460f      	mov	r7, r1
   235a4:	e7d7      	b.n	23556 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   235a6:	f1bb 0f19 	cmp.w	fp, #25
   235aa:	bf94      	ite	ls
   235ac:	3437      	addls	r4, #55	; 0x37
   235ae:	3457      	addhi	r4, #87	; 0x57
   235b0:	e7db      	b.n	2356a <encode_uint+0x38>
		} else if (radix == 16) {
   235b2:	2e10      	cmp	r6, #16
   235b4:	d1eb      	bne.n	2358e <encode_uint+0x5c>
			conv->altform_0c = true;
   235b6:	78ab      	ldrb	r3, [r5, #2]
   235b8:	f043 0310 	orr.w	r3, r3, #16
   235bc:	e7e6      	b.n	2358c <encode_uint+0x5a>

000235be <outs>:
{
   235be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235c2:	4607      	mov	r7, r0
   235c4:	4688      	mov	r8, r1
   235c6:	4615      	mov	r5, r2
   235c8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   235ca:	4614      	mov	r4, r2
   235cc:	42b4      	cmp	r4, r6
   235ce:	d305      	bcc.n	235dc <outs+0x1e>
   235d0:	b10e      	cbz	r6, 235d6 <outs+0x18>
	return (int)count;
   235d2:	1b60      	subs	r0, r4, r5
   235d4:	e008      	b.n	235e8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   235d6:	7823      	ldrb	r3, [r4, #0]
   235d8:	2b00      	cmp	r3, #0
   235da:	d0fa      	beq.n	235d2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   235dc:	f814 0b01 	ldrb.w	r0, [r4], #1
   235e0:	4641      	mov	r1, r8
   235e2:	47b8      	blx	r7
		if (rc < 0) {
   235e4:	2800      	cmp	r0, #0
   235e6:	daf1      	bge.n	235cc <outs+0xe>
}
   235e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000235ec <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   235ec:	4040      	eors	r0, r0
   235ee:	f380 8811 	msr	BASEPRI, r0
   235f2:	f04f 0004 	mov.w	r0, #4
   235f6:	df02      	svc	2
}
   235f8:	4770      	bx	lr

000235fa <assert_print>:

void assert_print(const char *fmt, ...)
{
   235fa:	b40f      	push	{r0, r1, r2, r3}
   235fc:	b507      	push	{r0, r1, r2, lr}
   235fe:	a904      	add	r1, sp, #16
   23600:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   23604:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   23606:	f7ff fdee 	bl	231e6 <vprintk>

	va_end(ap);
}
   2360a:	b003      	add	sp, #12
   2360c:	f85d eb04 	ldr.w	lr, [sp], #4
   23610:	b004      	add	sp, #16
   23612:	4770      	bx	lr

00023614 <free_space>:
{
   23614:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   23616:	6903      	ldr	r3, [r0, #16]
{
   23618:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   2361a:	f013 0008 	ands.w	r0, r3, #8
   2361e:	d109      	bne.n	23634 <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   23620:	6813      	ldr	r3, [r2, #0]
   23622:	68d4      	ldr	r4, [r2, #12]
   23624:	429c      	cmp	r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   23626:	bf97      	itett	ls
   23628:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2362a:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2362c:	1ad3      	subls	r3, r2, r3
	return true;
   2362e:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   23630:	600b      	str	r3, [r1, #0]
}
   23632:	bd10      	pop	{r4, pc}
   23634:	2300      	movs	r3, #0
		return false;
   23636:	4618      	mov	r0, r3
   23638:	e7fa      	b.n	23630 <free_space+0x1c>

0002363a <get_usage>:
{
   2363a:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2363c:	a901      	add	r1, sp, #4
{
   2363e:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   23640:	f7ff ffe8 	bl	23614 <free_space>
   23644:	b120      	cbz	r0, 23650 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   23646:	9b01      	ldr	r3, [sp, #4]
   23648:	68e2      	ldr	r2, [r4, #12]
   2364a:	3b01      	subs	r3, #1
   2364c:	4413      	add	r3, r2
   2364e:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   23650:	6a60      	ldr	r0, [r4, #36]	; 0x24
   23652:	9b01      	ldr	r3, [sp, #4]
   23654:	1ac0      	subs	r0, r0, r3
}
   23656:	3801      	subs	r0, #1
   23658:	b002      	add	sp, #8
   2365a:	bd10      	pop	{r4, pc}

0002365c <idx_inc>:
{
   2365c:	b510      	push	{r4, lr}
   2365e:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   23660:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   23662:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   23664:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   23666:	07d2      	lsls	r2, r2, #31
   23668:	d502      	bpl.n	23670 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2366a:	3b01      	subs	r3, #1
   2366c:	4018      	ands	r0, r3
}
   2366e:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   23670:	4298      	cmp	r0, r3
   23672:	bf28      	it	cs
   23674:	1ac0      	subcs	r0, r0, r3
   23676:	e7fa      	b.n	2366e <idx_inc+0x12>

00023678 <rd_idx_inc>:
{
   23678:	b510      	push	{r4, lr}
   2367a:	4604      	mov	r4, r0
   2367c:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2367e:	68c1      	ldr	r1, [r0, #12]
   23680:	f7ff ffec 	bl	2365c <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   23684:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   23686:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   23688:	f023 0308 	bic.w	r3, r3, #8
   2368c:	6123      	str	r3, [r4, #16]
}
   2368e:	bd10      	pop	{r4, pc}

00023690 <add_skip_item>:
{
   23690:	b538      	push	{r3, r4, r5, lr}
   23692:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23694:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   23696:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23698:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2369a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2369e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   236a2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   236a4:	6801      	ldr	r1, [r0, #0]
   236a6:	462a      	mov	r2, r5
   236a8:	f7ff ffd8 	bl	2365c <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   236ac:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   236ae:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   236b0:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   236b2:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   236b4:	bf02      	ittt	eq
   236b6:	6923      	ldreq	r3, [r4, #16]
   236b8:	f043 0308 	orreq.w	r3, r3, #8
   236bc:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   236be:	462a      	mov	r2, r5
   236c0:	4620      	mov	r0, r4
   236c2:	f7ff ffcb 	bl	2365c <idx_inc>
   236c6:	6060      	str	r0, [r4, #4]
}
   236c8:	bd38      	pop	{r3, r4, r5, pc}

000236ca <drop_item_locked>:
{
   236ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   236ce:	68c7      	ldr	r7, [r0, #12]
   236d0:	6a06      	ldr	r6, [r0, #32]
{
   236d2:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   236d4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   236d8:	f003 0303 	and.w	r3, r3, #3
   236dc:	2b02      	cmp	r3, #2
{
   236de:	4604      	mov	r4, r0
   236e0:	4688      	mov	r8, r1
   236e2:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   236e4:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   236e8:	f04f 0300 	mov.w	r3, #0
   236ec:	d009      	beq.n	23702 <drop_item_locked+0x38>
	*item_to_drop = NULL;
   236ee:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   236f0:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   236f4:	6923      	ldr	r3, [r4, #16]
   236f6:	0799      	lsls	r1, r3, #30
   236f8:	d410      	bmi.n	2371c <drop_item_locked+0x52>
		return false;
   236fa:	2000      	movs	r0, #0
}
   236fc:	b003      	add	sp, #12
   236fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   23702:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   23706:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   23708:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   2370a:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   2370e:	d0f1      	beq.n	236f4 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   23710:	f7ff ffb2 	bl	23678 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   23714:	68e3      	ldr	r3, [r4, #12]
   23716:	60a3      	str	r3, [r4, #8]
		return true;
   23718:	2001      	movs	r0, #1
   2371a:	e7ef      	b.n	236fc <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   2371c:	69e3      	ldr	r3, [r4, #28]
   2371e:	4650      	mov	r0, sl
   23720:	4798      	blx	r3
	return item->hdr.valid;
   23722:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   23726:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   23728:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2372a:	d5e6      	bpl.n	236fa <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2372c:	f013 0302 	ands.w	r3, r3, #2
   23730:	d01d      	beq.n	2376e <drop_item_locked+0xa4>
		if (free_wlen) {
   23732:	f1b8 0f00 	cmp.w	r8, #0
   23736:	d003      	beq.n	23740 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   23738:	4641      	mov	r1, r8
   2373a:	4620      	mov	r0, r4
   2373c:	f7ff ffa8 	bl	23690 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   23740:	6861      	ldr	r1, [r4, #4]
   23742:	462a      	mov	r2, r5
   23744:	4620      	mov	r0, r4
   23746:	f7ff ff89 	bl	2365c <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2374a:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   2374e:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   23750:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   23752:	d104      	bne.n	2375e <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   23754:	462a      	mov	r2, r5
   23756:	4620      	mov	r0, r4
   23758:	f7ff ff80 	bl	2365c <idx_inc>
   2375c:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   2375e:	68a3      	ldr	r3, [r4, #8]
   23760:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   23762:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   23764:	6923      	ldr	r3, [r4, #16]
   23766:	f043 0308 	orr.w	r3, r3, #8
   2376a:	6123      	str	r3, [r4, #16]
   2376c:	e7d4      	b.n	23718 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   2376e:	4601      	mov	r1, r0
   23770:	4620      	mov	r0, r4
   23772:	9301      	str	r3, [sp, #4]
   23774:	f7ff ff80 	bl	23678 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   23778:	68e2      	ldr	r2, [r4, #12]
   2377a:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2377c:	f1b8 0f00 	cmp.w	r8, #0
   23780:	d004      	beq.n	2378c <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   23782:	6821      	ldr	r1, [r4, #0]
   23784:	6a22      	ldr	r2, [r4, #32]
   23786:	9b01      	ldr	r3, [sp, #4]
   23788:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2378c:	eb05 0208 	add.w	r2, r5, r8
   23790:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   23794:	6821      	ldr	r1, [r4, #0]
   23796:	4620      	mov	r0, r4
   23798:	f7ff ff60 	bl	2365c <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2379c:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   2379e:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   237a0:	f043 0308 	orr.w	r3, r3, #8
   237a4:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   237a6:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   237aa:	f36f 0300 	bfc	r3, #0, #1
   237ae:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   237b2:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   237b6:	e7af      	b.n	23718 <drop_item_locked+0x4e>

000237b8 <post_drop_action>:
{
   237b8:	b570      	push	{r4, r5, r6, lr}
   237ba:	4604      	mov	r4, r0
   237bc:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   237be:	f7ff ff4d 	bl	2365c <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   237c2:	6823      	ldr	r3, [r4, #0]
   237c4:	4283      	cmp	r3, r0
   237c6:	d105      	bne.n	237d4 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   237c8:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   237ca:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   237cc:	f023 0308 	bic.w	r3, r3, #8
   237d0:	6123      	str	r3, [r4, #16]
}
   237d2:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   237d4:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   237d6:	00ab      	lsls	r3, r5, #2
   237d8:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   237dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   237e0:	4620      	mov	r0, r4
   237e2:	6861      	ldr	r1, [r4, #4]
   237e4:	462a      	mov	r2, r5
   237e6:	f7ff ff39 	bl	2365c <idx_inc>
   237ea:	6060      	str	r0, [r4, #4]
   237ec:	e7f1      	b.n	237d2 <post_drop_action+0x1a>

000237ee <max_utilization_update>:
{
   237ee:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   237f0:	6903      	ldr	r3, [r0, #16]
   237f2:	075b      	lsls	r3, r3, #29
{
   237f4:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   237f6:	d506      	bpl.n	23806 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   237f8:	6a85      	ldr	r5, [r0, #40]	; 0x28
   237fa:	f7ff ff1e 	bl	2363a <get_usage>
   237fe:	4285      	cmp	r5, r0
   23800:	bf2c      	ite	cs
   23802:	62a5      	strcs	r5, [r4, #40]	; 0x28
   23804:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   23806:	bd38      	pop	{r3, r4, r5, pc}

00023808 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   23808:	6902      	ldr	r2, [r0, #16]
   2380a:	6883      	ldr	r3, [r0, #8]
   2380c:	0712      	lsls	r2, r2, #28
   2380e:	d402      	bmi.n	23816 <mpsc_pbuf_is_pending+0xe>
   23810:	6842      	ldr	r2, [r0, #4]
   23812:	429a      	cmp	r2, r3
   23814:	d200      	bcs.n	23818 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   23816:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   23818:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2381a:	1e18      	subs	r0, r3, #0
   2381c:	bf18      	it	ne
   2381e:	2001      	movne	r0, #1
   23820:	4770      	bx	lr

00023822 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 20);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   23822:	4770      	bx	lr

00023824 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   23824:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   23826:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   23828:	bf5f      	itttt	pl
   2382a:	6803      	ldrpl	r3, [r0, #0]
   2382c:	8842      	ldrhpl	r2, [r0, #2]
   2382e:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   23832:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   23836:	bf5d      	ittte	pl
   23838:	3017      	addpl	r0, #23
   2383a:	f020 0007 	bicpl.w	r0, r0, #7
   2383e:	0880      	lsrpl	r0, r0, #2
	return 0;
   23840:	2000      	movmi	r0, #0
}
   23842:	4770      	bx	lr

00023844 <dummy_timestamp>:
}
   23844:	2000      	movs	r0, #0
   23846:	4770      	bx	lr

00023848 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   23848:	f002 b83c 	b.w	258c4 <sys_clock_cycle_get_32>

0002384c <atomic_inc>:
{
   2384c:	4603      	mov	r3, r0
}
   2384e:	f3bf 8f5b 	dmb	ish
   23852:	e853 0f00 	ldrex	r0, [r3]
   23856:	1c42      	adds	r2, r0, #1
   23858:	e843 2100 	strex	r1, r2, [r3]
   2385c:	2900      	cmp	r1, #0
   2385e:	d1f8      	bne.n	23852 <atomic_inc+0x6>
   23860:	f3bf 8f5b 	dmb	ish
   23864:	4770      	bx	lr

00023866 <z_log_vprintk>:
{
   23866:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   23868:	2300      	movs	r3, #0
   2386a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2386e:	e9cd 3300 	strd	r3, r3, [sp]
   23872:	461a      	mov	r2, r3
   23874:	4619      	mov	r1, r3
   23876:	4618      	mov	r0, r3
   23878:	f7ef fdb0 	bl	133dc <z_impl_z_log_msg_runtime_vcreate>
}
   2387c:	b005      	add	sp, #20
   2387e:	f85d fb04 	ldr.w	pc, [sp], #4

00023882 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   23882:	2001      	movs	r0, #1
   23884:	f7ef ba9c 	b.w	12dc0 <z_log_dropped>

00023888 <z_log_get_tag>:
}
   23888:	2000      	movs	r0, #0
   2388a:	4770      	bx	lr

0002388c <z_cbprintf_cpy>:
{
   2388c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2388e:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   23892:	1b9b      	subs	r3, r3, r6
   23894:	428b      	cmp	r3, r1
{
   23896:	460c      	mov	r4, r1
   23898:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2389a:	d30a      	bcc.n	238b2 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2389c:	6813      	ldr	r3, [r2, #0]
   2389e:	460a      	mov	r2, r1
   238a0:	4601      	mov	r1, r0
   238a2:	1998      	adds	r0, r3, r6
   238a4:	f000 fab6 	bl	23e14 <memcpy>
	desc->off += len;
   238a8:	68ab      	ldr	r3, [r5, #8]
   238aa:	4423      	add	r3, r4
   238ac:	60ab      	str	r3, [r5, #8]
	return len;
   238ae:	4620      	mov	r0, r4
}
   238b0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   238b2:	f06f 001b 	mvn.w	r0, #27
   238b6:	e7fb      	b.n	238b0 <z_cbprintf_cpy+0x24>

000238b8 <z_log_msg_finalize>:
{
   238b8:	b570      	push	{r4, r5, r6, lr}
   238ba:	460e      	mov	r6, r1
   238bc:	4615      	mov	r5, r2
   238be:	4619      	mov	r1, r3
	if (!msg) {
   238c0:	4604      	mov	r4, r0
   238c2:	b918      	cbnz	r0, 238cc <z_log_msg_finalize+0x14>
}
   238c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   238c8:	f7ef ba7a 	b.w	12dc0 <z_log_dropped>
	if (data) {
   238cc:	b133      	cbz	r3, 238dc <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   238ce:	f3c2 234a 	ubfx	r3, r2, #9, #11
   238d2:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   238d4:	0d12      	lsrs	r2, r2, #20
   238d6:	4418      	add	r0, r3
   238d8:	f000 fa9c 	bl	23e14 <memcpy>
	msg->hdr.source = source;
   238dc:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   238e0:	4620      	mov	r0, r4
}
   238e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   238e6:	f7ef bc9f 	b.w	13228 <z_log_msg_commit>

000238ea <buffer_write>:
{
   238ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238ec:	4606      	mov	r6, r0
   238ee:	460d      	mov	r5, r1
   238f0:	4614      	mov	r4, r2
   238f2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   238f4:	4621      	mov	r1, r4
   238f6:	4628      	mov	r0, r5
   238f8:	463a      	mov	r2, r7
   238fa:	47b0      	blx	r6
	} while (len != 0);
   238fc:	1a24      	subs	r4, r4, r0
		buf += processed;
   238fe:	4405      	add	r5, r0
	} while (len != 0);
   23900:	d1f8      	bne.n	238f4 <buffer_write+0xa>
}
   23902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023904 <cbvprintf>:
{
   23904:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   23906:	2400      	movs	r4, #0
   23908:	9400      	str	r4, [sp, #0]
   2390a:	f7ee fb6b 	bl	11fe4 <z_cbvprintf_impl>
}
   2390e:	b002      	add	sp, #8
   23910:	bd10      	pop	{r4, pc}

00023912 <log_output_flush>:
{
   23912:	b510      	push	{r4, lr}
		     output->control_block->offset,
   23914:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   23916:	6881      	ldr	r1, [r0, #8]
{
   23918:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2391a:	e9d2 2300 	ldrd	r2, r3, [r2]
   2391e:	6800      	ldr	r0, [r0, #0]
   23920:	f7ff ffe3 	bl	238ea <buffer_write>
	output->control_block->offset = 0;
   23924:	6863      	ldr	r3, [r4, #4]
   23926:	2200      	movs	r2, #0
   23928:	601a      	str	r2, [r3, #0]
}
   2392a:	bd10      	pop	{r4, pc}

0002392c <cr_out_func>:
	if (c == '\n') {
   2392c:	280a      	cmp	r0, #10
{
   2392e:	b538      	push	{r3, r4, r5, lr}
   23930:	4604      	mov	r4, r0
   23932:	460d      	mov	r5, r1
	if (c == '\n') {
   23934:	d102      	bne.n	2393c <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   23936:	200d      	movs	r0, #13
   23938:	f7ef fdd0 	bl	134dc <out_func>
	out_func(c, ctx);
   2393c:	4629      	mov	r1, r5
   2393e:	4620      	mov	r0, r4
   23940:	f7ef fdcc 	bl	134dc <out_func>
}
   23944:	2000      	movs	r0, #0
   23946:	bd38      	pop	{r3, r4, r5, pc}

00023948 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23948:	b538      	push	{r3, r4, r5, lr}
   2394a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2394c:	42ab      	cmp	r3, r5
{
   2394e:	4611      	mov	r1, r2
   23950:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   23952:	d804      	bhi.n	2395e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   23954:	461a      	mov	r2, r3
   23956:	f000 fa5d 	bl	23e14 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2395a:	4620      	mov	r0, r4
   2395c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2395e:	2400      	movs	r4, #0
   23960:	e7fb      	b.n	2395a <_copy+0x12>

00023962 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   23962:	f000 ba62 	b.w	23e2a <memset>

00023966 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23966:	09c3      	lsrs	r3, r0, #7
   23968:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2396c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   23970:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   23974:	b2c0      	uxtb	r0, r0
   23976:	4770      	bx	lr

00023978 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23978:	78cb      	ldrb	r3, [r1, #3]
   2397a:	7802      	ldrb	r2, [r0, #0]
   2397c:	4053      	eors	r3, r2
   2397e:	7003      	strb	r3, [r0, #0]
   23980:	884b      	ldrh	r3, [r1, #2]
   23982:	7842      	ldrb	r2, [r0, #1]
   23984:	4053      	eors	r3, r2
   23986:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   23988:	680a      	ldr	r2, [r1, #0]
   2398a:	7883      	ldrb	r3, [r0, #2]
   2398c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23990:	7083      	strb	r3, [r0, #2]
   23992:	680a      	ldr	r2, [r1, #0]
   23994:	78c3      	ldrb	r3, [r0, #3]
   23996:	4053      	eors	r3, r2
   23998:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2399a:	79cb      	ldrb	r3, [r1, #7]
   2399c:	7902      	ldrb	r2, [r0, #4]
   2399e:	4053      	eors	r3, r2
   239a0:	7103      	strb	r3, [r0, #4]
   239a2:	88cb      	ldrh	r3, [r1, #6]
   239a4:	7942      	ldrb	r2, [r0, #5]
   239a6:	4053      	eors	r3, r2
   239a8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   239aa:	684a      	ldr	r2, [r1, #4]
   239ac:	7983      	ldrb	r3, [r0, #6]
   239ae:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   239b2:	7183      	strb	r3, [r0, #6]
   239b4:	684a      	ldr	r2, [r1, #4]
   239b6:	79c3      	ldrb	r3, [r0, #7]
   239b8:	4053      	eors	r3, r2
   239ba:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   239bc:	7acb      	ldrb	r3, [r1, #11]
   239be:	7a02      	ldrb	r2, [r0, #8]
   239c0:	4053      	eors	r3, r2
   239c2:	7203      	strb	r3, [r0, #8]
   239c4:	7a42      	ldrb	r2, [r0, #9]
   239c6:	894b      	ldrh	r3, [r1, #10]
   239c8:	4053      	eors	r3, r2
   239ca:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   239cc:	688a      	ldr	r2, [r1, #8]
   239ce:	7a83      	ldrb	r3, [r0, #10]
   239d0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   239d4:	7283      	strb	r3, [r0, #10]
   239d6:	688a      	ldr	r2, [r1, #8]
   239d8:	7ac3      	ldrb	r3, [r0, #11]
   239da:	4053      	eors	r3, r2
   239dc:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   239de:	7bcb      	ldrb	r3, [r1, #15]
   239e0:	7b02      	ldrb	r2, [r0, #12]
   239e2:	4053      	eors	r3, r2
   239e4:	7303      	strb	r3, [r0, #12]
   239e6:	89cb      	ldrh	r3, [r1, #14]
   239e8:	7b42      	ldrb	r2, [r0, #13]
   239ea:	4053      	eors	r3, r2
   239ec:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   239ee:	68ca      	ldr	r2, [r1, #12]
   239f0:	7b83      	ldrb	r3, [r0, #14]
   239f2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   239f6:	7383      	strb	r3, [r0, #14]
   239f8:	68ca      	ldr	r2, [r1, #12]
   239fa:	7bc3      	ldrb	r3, [r0, #15]
   239fc:	4053      	eors	r3, r2
   239fe:	73c3      	strb	r3, [r0, #15]
}
   23a00:	4770      	bx	lr

00023a02 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   23a02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23a04:	7802      	ldrb	r2, [r0, #0]
   23a06:	f88d 2000 	strb.w	r2, [sp]
   23a0a:	7942      	ldrb	r2, [r0, #5]
   23a0c:	f88d 2001 	strb.w	r2, [sp, #1]
   23a10:	7a82      	ldrb	r2, [r0, #10]
   23a12:	f88d 2002 	strb.w	r2, [sp, #2]
   23a16:	7bc2      	ldrb	r2, [r0, #15]
   23a18:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   23a1c:	7902      	ldrb	r2, [r0, #4]
   23a1e:	f88d 2004 	strb.w	r2, [sp, #4]
   23a22:	7a42      	ldrb	r2, [r0, #9]
   23a24:	f88d 2005 	strb.w	r2, [sp, #5]
   23a28:	7b82      	ldrb	r2, [r0, #14]
   23a2a:	f88d 2006 	strb.w	r2, [sp, #6]
   23a2e:	78c2      	ldrb	r2, [r0, #3]
   23a30:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23a34:	7a02      	ldrb	r2, [r0, #8]
   23a36:	f88d 2008 	strb.w	r2, [sp, #8]
   23a3a:	7b42      	ldrb	r2, [r0, #13]
   23a3c:	f88d 2009 	strb.w	r2, [sp, #9]
   23a40:	7882      	ldrb	r2, [r0, #2]
   23a42:	f88d 200a 	strb.w	r2, [sp, #10]
   23a46:	79c2      	ldrb	r2, [r0, #7]
   23a48:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   23a4c:	7b02      	ldrb	r2, [r0, #12]
   23a4e:	f88d 200c 	strb.w	r2, [sp, #12]
   23a52:	7842      	ldrb	r2, [r0, #1]
   23a54:	7ac3      	ldrb	r3, [r0, #11]
   23a56:	f88d 200d 	strb.w	r2, [sp, #13]
   23a5a:	7982      	ldrb	r2, [r0, #6]
   23a5c:	f88d 200e 	strb.w	r2, [sp, #14]
   23a60:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23a64:	2310      	movs	r3, #16
   23a66:	466a      	mov	r2, sp
   23a68:	4619      	mov	r1, r3
   23a6a:	f7ff ff6d 	bl	23948 <_copy>
}
   23a6e:	b005      	add	sp, #20
   23a70:	f85d fb04 	ldr.w	pc, [sp], #4

00023a74 <mult_row_column>:
{
   23a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a76:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23a78:	7808      	ldrb	r0, [r1, #0]
{
   23a7a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23a7c:	f7ff ff73 	bl	23966 <_double_byte>
   23a80:	4605      	mov	r5, r0
   23a82:	7860      	ldrb	r0, [r4, #1]
   23a84:	f7ff ff6f 	bl	23966 <_double_byte>
   23a88:	78a2      	ldrb	r2, [r4, #2]
   23a8a:	7863      	ldrb	r3, [r4, #1]
   23a8c:	4053      	eors	r3, r2
   23a8e:	78e2      	ldrb	r2, [r4, #3]
   23a90:	4053      	eors	r3, r2
   23a92:	405d      	eors	r5, r3
   23a94:	4068      	eors	r0, r5
   23a96:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   23a98:	7860      	ldrb	r0, [r4, #1]
   23a9a:	7827      	ldrb	r7, [r4, #0]
   23a9c:	f7ff ff63 	bl	23966 <_double_byte>
   23aa0:	4605      	mov	r5, r0
   23aa2:	78a0      	ldrb	r0, [r4, #2]
   23aa4:	f7ff ff5f 	bl	23966 <_double_byte>
   23aa8:	78a3      	ldrb	r3, [r4, #2]
   23aaa:	405f      	eors	r7, r3
   23aac:	78e3      	ldrb	r3, [r4, #3]
   23aae:	405f      	eors	r7, r3
   23ab0:	407d      	eors	r5, r7
   23ab2:	4068      	eors	r0, r5
   23ab4:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   23ab6:	7863      	ldrb	r3, [r4, #1]
   23ab8:	7827      	ldrb	r7, [r4, #0]
   23aba:	78a0      	ldrb	r0, [r4, #2]
   23abc:	405f      	eors	r7, r3
   23abe:	f7ff ff52 	bl	23966 <_double_byte>
   23ac2:	4605      	mov	r5, r0
   23ac4:	78e0      	ldrb	r0, [r4, #3]
   23ac6:	f7ff ff4e 	bl	23966 <_double_byte>
   23aca:	78e3      	ldrb	r3, [r4, #3]
   23acc:	405f      	eors	r7, r3
   23ace:	407d      	eors	r5, r7
   23ad0:	4068      	eors	r0, r5
   23ad2:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   23ad4:	7820      	ldrb	r0, [r4, #0]
   23ad6:	f7ff ff46 	bl	23966 <_double_byte>
   23ada:	7862      	ldrb	r2, [r4, #1]
   23adc:	7823      	ldrb	r3, [r4, #0]
   23ade:	4053      	eors	r3, r2
   23ae0:	78a2      	ldrb	r2, [r4, #2]
   23ae2:	4053      	eors	r3, r2
   23ae4:	ea80 0503 	eor.w	r5, r0, r3
   23ae8:	78e0      	ldrb	r0, [r4, #3]
   23aea:	f7ff ff3c 	bl	23966 <_double_byte>
   23aee:	b2ed      	uxtb	r5, r5
   23af0:	4045      	eors	r5, r0
   23af2:	70f5      	strb	r5, [r6, #3]
}
   23af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023af6 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   23af6:	b570      	push	{r4, r5, r6, lr}
   23af8:	4614      	mov	r4, r2
   23afa:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   23afc:	4605      	mov	r5, r0
   23afe:	2800      	cmp	r0, #0
   23b00:	d049      	beq.n	23b96 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   23b02:	2900      	cmp	r1, #0
   23b04:	d049      	beq.n	23b9a <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   23b06:	2a00      	cmp	r2, #0
   23b08:	d049      	beq.n	23b9e <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   23b0a:	2310      	movs	r3, #16
   23b0c:	460a      	mov	r2, r1
   23b0e:	4668      	mov	r0, sp
   23b10:	4619      	mov	r1, r3
   23b12:	f7ff ff19 	bl	23948 <_copy>
	add_round_key(state, s->words);
   23b16:	4621      	mov	r1, r4
   23b18:	4668      	mov	r0, sp
   23b1a:	f7ff ff2d 	bl	23978 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   23b1e:	3410      	adds	r4, #16
   23b20:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   23b24:	4668      	mov	r0, sp
   23b26:	f7f0 f97d 	bl	13e24 <sub_bytes>
		shift_rows(state);
   23b2a:	4668      	mov	r0, sp
   23b2c:	f7ff ff69 	bl	23a02 <shift_rows>
	mult_row_column(t, s);
   23b30:	4669      	mov	r1, sp
   23b32:	a804      	add	r0, sp, #16
   23b34:	f7ff ff9e 	bl	23a74 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   23b38:	a901      	add	r1, sp, #4
   23b3a:	a805      	add	r0, sp, #20
   23b3c:	f7ff ff9a 	bl	23a74 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   23b40:	a902      	add	r1, sp, #8
   23b42:	a806      	add	r0, sp, #24
   23b44:	f7ff ff96 	bl	23a74 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   23b48:	a903      	add	r1, sp, #12
   23b4a:	a807      	add	r0, sp, #28
   23b4c:	f7ff ff92 	bl	23a74 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23b50:	2310      	movs	r3, #16
   23b52:	4619      	mov	r1, r3
   23b54:	eb0d 0203 	add.w	r2, sp, r3
   23b58:	4668      	mov	r0, sp
   23b5a:	f7ff fef5 	bl	23948 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   23b5e:	4621      	mov	r1, r4
   23b60:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   23b62:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   23b64:	f7ff ff08 	bl	23978 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   23b68:	42b4      	cmp	r4, r6
   23b6a:	d1db      	bne.n	23b24 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   23b6c:	f7f0 f95a 	bl	13e24 <sub_bytes>
	shift_rows(state);
   23b70:	4668      	mov	r0, sp
   23b72:	f7ff ff46 	bl	23a02 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   23b76:	4621      	mov	r1, r4
   23b78:	4668      	mov	r0, sp
   23b7a:	f7ff fefd 	bl	23978 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   23b7e:	2310      	movs	r3, #16
   23b80:	4619      	mov	r1, r3
   23b82:	466a      	mov	r2, sp
   23b84:	4628      	mov	r0, r5
   23b86:	f7ff fedf 	bl	23948 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   23b8a:	4668      	mov	r0, sp
   23b8c:	2210      	movs	r2, #16
   23b8e:	2100      	movs	r1, #0
   23b90:	f7ff fee7 	bl	23962 <_set>

	return TC_CRYPTO_SUCCESS;
   23b94:	2001      	movs	r0, #1
}
   23b96:	b008      	add	sp, #32
   23b98:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   23b9a:	4608      	mov	r0, r1
   23b9c:	e7fb      	b.n	23b96 <tc_aes_encrypt+0xa0>
   23b9e:	4610      	mov	r0, r2
   23ba0:	e7f9      	b.n	23b96 <tc_aes_encrypt+0xa0>

00023ba2 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   23ba2:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23ba4:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   23ba6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23ba8:	f912 3b10 	ldrsb.w	r3, [r2], #16
   23bac:	2b00      	cmp	r3, #0
   23bae:	bfac      	ite	ge
   23bb0:	2300      	movge	r3, #0
   23bb2:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   23bb4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23bb8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   23bbc:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   23bbe:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   23bc2:	d002      	beq.n	23bca <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   23bc4:	7813      	ldrb	r3, [r2, #0]
   23bc6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   23bc8:	e7f4      	b.n	23bb4 <gf_double+0x12>
	}
}
   23bca:	bd10      	pop	{r4, pc}

00023bcc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   23bcc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   23bce:	b120      	cbz	r0, 23bda <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   23bd0:	2258      	movs	r2, #88	; 0x58
   23bd2:	2100      	movs	r1, #0
   23bd4:	f7ff fec5 	bl	23962 <_set>
   23bd8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23bda:	bd08      	pop	{r3, pc}

00023bdc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   23bdc:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23bde:	4604      	mov	r4, r0
   23be0:	b188      	cbz	r0, 23c06 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23be2:	2210      	movs	r2, #16
   23be4:	2100      	movs	r1, #0
   23be6:	f7ff febc 	bl	23962 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   23bea:	2210      	movs	r2, #16
   23bec:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23bf0:	2100      	movs	r1, #0
   23bf2:	f7ff feb6 	bl	23962 <_set>
	s->leftover_offset = 0;
   23bf6:	2300      	movs	r3, #0
   23bf8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   23bfa:	2200      	movs	r2, #0
   23bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   23c00:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23c04:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23c06:	bd10      	pop	{r4, pc}

00023c08 <tc_cmac_setup>:
{
   23c08:	b570      	push	{r4, r5, r6, lr}
   23c0a:	4604      	mov	r4, r0
   23c0c:	460d      	mov	r5, r1
   23c0e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   23c10:	b310      	cbz	r0, 23c58 <tc_cmac_setup+0x50>
   23c12:	b311      	cbz	r1, 23c5a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23c14:	2258      	movs	r2, #88	; 0x58
   23c16:	2100      	movs	r1, #0
   23c18:	f7ff fea3 	bl	23962 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   23c1c:	4629      	mov	r1, r5
	s->sched = sched;
   23c1e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   23c20:	4630      	mov	r0, r6
   23c22:	f7f0 f90b 	bl	13e3c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23c26:	2210      	movs	r2, #16
   23c28:	2100      	movs	r1, #0
   23c2a:	4620      	mov	r0, r4
   23c2c:	f7ff fe99 	bl	23962 <_set>
	gf_double (s->K1, s->iv);
   23c30:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23c34:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23c36:	4621      	mov	r1, r4
   23c38:	4620      	mov	r0, r4
   23c3a:	f7ff ff5c 	bl	23af6 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   23c3e:	4621      	mov	r1, r4
   23c40:	4628      	mov	r0, r5
   23c42:	f7ff ffae 	bl	23ba2 <gf_double>
	gf_double (s->K2, s->K1);
   23c46:	4629      	mov	r1, r5
   23c48:	f104 0020 	add.w	r0, r4, #32
   23c4c:	f7ff ffa9 	bl	23ba2 <gf_double>
	tc_cmac_init(s);
   23c50:	4620      	mov	r0, r4
   23c52:	f7ff ffc3 	bl	23bdc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   23c56:	2001      	movs	r0, #1
}
   23c58:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   23c5a:	4608      	mov	r0, r1
   23c5c:	e7fc      	b.n	23c58 <tc_cmac_setup+0x50>

00023c5e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   23c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c62:	460e      	mov	r6, r1
   23c64:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23c66:	4604      	mov	r4, r0
   23c68:	2800      	cmp	r0, #0
   23c6a:	d060      	beq.n	23d2e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   23c6c:	b1fa      	cbz	r2, 23cae <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   23c6e:	2900      	cmp	r1, #0
   23c70:	d05d      	beq.n	23d2e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   23c72:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   23c76:	ea53 0102 	orrs.w	r1, r3, r2
   23c7a:	d058      	beq.n	23d2e <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   23c7c:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   23c7e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   23c82:	f142 32ff 	adc.w	r2, r2, #4294967295
   23c86:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   23c8a:	f1b8 0f00 	cmp.w	r8, #0
   23c8e:	d02c      	beq.n	23cea <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   23c90:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   23c94:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   23c98:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   23c9a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   23c9c:	d20a      	bcs.n	23cb4 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   23c9e:	462b      	mov	r3, r5
   23ca0:	4632      	mov	r2, r6
   23ca2:	4629      	mov	r1, r5
   23ca4:	f7ff fe50 	bl	23948 <_copy>
			s->leftover_offset += data_length;
   23ca8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23caa:	442b      	add	r3, r5
   23cac:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   23cae:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   23cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   23cb4:	463b      	mov	r3, r7
   23cb6:	4632      	mov	r2, r6
   23cb8:	4639      	mov	r1, r7
   23cba:	f7ff fe45 	bl	23948 <_copy>
		data_length -= remaining_space;
   23cbe:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   23cc0:	2300      	movs	r3, #0
   23cc2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   23cc4:	4445      	add	r5, r8
		data += remaining_space;
   23cc6:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23cc8:	1e63      	subs	r3, r4, #1
   23cca:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   23cce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23cd2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23cd6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   23cd8:	ea82 0200 	eor.w	r2, r2, r0
   23cdc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23cde:	d1f6      	bne.n	23cce <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23ce0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23ce2:	4621      	mov	r1, r4
   23ce4:	4620      	mov	r0, r4
   23ce6:	f7ff ff06 	bl	23af6 <tc_aes_encrypt>
   23cea:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   23cee:	2d10      	cmp	r5, #16
   23cf0:	d80a      	bhi.n	23d08 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   23cf2:	2d00      	cmp	r5, #0
   23cf4:	d0db      	beq.n	23cae <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   23cf6:	462b      	mov	r3, r5
   23cf8:	4632      	mov	r2, r6
   23cfa:	4629      	mov	r1, r5
   23cfc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23d00:	f7ff fe22 	bl	23948 <_copy>
		s->leftover_offset = data_length;
   23d04:	6465      	str	r5, [r4, #68]	; 0x44
   23d06:	e7d2      	b.n	23cae <tc_cmac_update+0x50>
   23d08:	1e63      	subs	r3, r4, #1
   23d0a:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   23d0c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23d14:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   23d16:	ea82 0200 	eor.w	r2, r2, r0
   23d1a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23d1c:	d1f6      	bne.n	23d0c <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23d1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23d20:	4621      	mov	r1, r4
   23d22:	4620      	mov	r0, r4
   23d24:	f7ff fee7 	bl	23af6 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   23d28:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   23d2a:	3d10      	subs	r5, #16
   23d2c:	e7df      	b.n	23cee <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   23d2e:	2000      	movs	r0, #0
   23d30:	e7be      	b.n	23cb0 <tc_cmac_update+0x52>

00023d32 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   23d32:	b570      	push	{r4, r5, r6, lr}
   23d34:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   23d36:	4605      	mov	r5, r0
   23d38:	b1e8      	cbz	r0, 23d76 <tc_cmac_final+0x44>
   23d3a:	b369      	cbz	r1, 23d98 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   23d3c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   23d3e:	2a10      	cmp	r2, #16
   23d40:	d11a      	bne.n	23d78 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   23d42:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23d44:	1e63      	subs	r3, r4, #1
   23d46:	3901      	subs	r1, #1
   23d48:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23d4c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23d50:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   23d54:	4072      	eors	r2, r6
   23d56:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23d5a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23d5c:	ea82 0206 	eor.w	r2, r2, r6
   23d60:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23d62:	d1f3      	bne.n	23d4c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   23d64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23d66:	4621      	mov	r1, r4
   23d68:	4628      	mov	r0, r5
   23d6a:	f7ff fec4 	bl	23af6 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   23d6e:	4620      	mov	r0, r4
   23d70:	f7ff ff2c 	bl	23bcc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   23d74:	2001      	movs	r0, #1
}
   23d76:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   23d78:	f102 0030 	add.w	r0, r2, #48	; 0x30
   23d7c:	2100      	movs	r1, #0
   23d7e:	f1c2 0210 	rsb	r2, r2, #16
   23d82:	4420      	add	r0, r4
   23d84:	f7ff fded 	bl	23962 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   23d88:	6c63      	ldr	r3, [r4, #68]	; 0x44
   23d8a:	4423      	add	r3, r4
   23d8c:	2280      	movs	r2, #128	; 0x80
   23d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   23d92:	f104 0120 	add.w	r1, r4, #32
   23d96:	e7d5      	b.n	23d44 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   23d98:	4608      	mov	r0, r1
   23d9a:	e7ec      	b.n	23d76 <tc_cmac_final+0x44>

00023d9c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   23d9c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   23d9e:	6800      	ldr	r0, [r0, #0]
   23da0:	f7f0 b8be 	b.w	13f20 <z_arm_fatal_error>

00023da4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   23da4:	2100      	movs	r1, #0
   23da6:	2001      	movs	r0, #1
   23da8:	f7f0 b8ba 	b.w	13f20 <z_arm_fatal_error>

00023dac <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   23dac:	b508      	push	{r3, lr}
	handler();
   23dae:	f7f0 f991 	bl	140d4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   23db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   23db6:	f7f0 ba69 	b.w	1428c <z_arm_exc_exit>

00023dba <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   23dba:	2300      	movs	r3, #0
   23dbc:	f7ef ba7a 	b.w	132b4 <z_impl_z_log_msg_static_create>

00023dc0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   23dc0:	3901      	subs	r1, #1
   23dc2:	4603      	mov	r3, r0
   23dc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23dc8:	b90a      	cbnz	r2, 23dce <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   23dca:	701a      	strb	r2, [r3, #0]

	return dest;
}
   23dcc:	4770      	bx	lr
		*d = *s;
   23dce:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   23dd2:	e7f7      	b.n	23dc4 <strcpy+0x4>

00023dd4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   23dd4:	4603      	mov	r3, r0
	size_t n = 0;
   23dd6:	2000      	movs	r0, #0

	while (*s != '\0') {
   23dd8:	5c1a      	ldrb	r2, [r3, r0]
   23dda:	b902      	cbnz	r2, 23dde <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   23ddc:	4770      	bx	lr
		n++;
   23dde:	3001      	adds	r0, #1
   23de0:	e7fa      	b.n	23dd8 <strlen+0x4>

00023de2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   23de2:	4603      	mov	r3, r0
	size_t n = 0;
   23de4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   23de6:	5c1a      	ldrb	r2, [r3, r0]
   23de8:	b10a      	cbz	r2, 23dee <strnlen+0xc>
   23dea:	4288      	cmp	r0, r1
   23dec:	d100      	bne.n	23df0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   23dee:	4770      	bx	lr
		n++;
   23df0:	3001      	adds	r0, #1
   23df2:	e7f8      	b.n	23de6 <strnlen+0x4>

00023df4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   23df4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   23df6:	b15a      	cbz	r2, 23e10 <memcmp+0x1c>
   23df8:	3901      	subs	r1, #1
   23dfa:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   23dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
   23e00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   23e04:	42a0      	cmp	r0, r4
   23e06:	d001      	beq.n	23e0c <memcmp+0x18>
   23e08:	429a      	cmp	r2, r3
   23e0a:	d0f7      	beq.n	23dfc <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   23e0c:	1ad0      	subs	r0, r2, r3
}
   23e0e:	bd10      	pop	{r4, pc}
		return 0;
   23e10:	4610      	mov	r0, r2
   23e12:	e7fc      	b.n	23e0e <memcmp+0x1a>

00023e14 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   23e14:	b510      	push	{r4, lr}
   23e16:	1e43      	subs	r3, r0, #1
   23e18:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   23e1a:	4291      	cmp	r1, r2
   23e1c:	d100      	bne.n	23e20 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   23e1e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   23e20:	f811 4b01 	ldrb.w	r4, [r1], #1
   23e24:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   23e28:	e7f7      	b.n	23e1a <memcpy+0x6>

00023e2a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   23e2a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   23e2c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   23e2e:	4603      	mov	r3, r0
	while (n > 0) {
   23e30:	4293      	cmp	r3, r2
   23e32:	d100      	bne.n	23e36 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   23e34:	4770      	bx	lr
		*(d_byte++) = c_byte;
   23e36:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23e3a:	e7f9      	b.n	23e30 <memset+0x6>

00023e3c <_stdout_hook_default>:
}
   23e3c:	f04f 30ff 	mov.w	r0, #4294967295
   23e40:	4770      	bx	lr

00023e42 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   23e42:	684b      	ldr	r3, [r1, #4]
   23e44:	2b01      	cmp	r3, #1
   23e46:	dd07      	ble.n	23e58 <sprintf_out+0x16>
		*(p->ptr) = c;
   23e48:	680b      	ldr	r3, [r1, #0]
   23e4a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   23e4c:	680b      	ldr	r3, [r1, #0]
   23e4e:	3301      	adds	r3, #1
   23e50:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   23e52:	684b      	ldr	r3, [r1, #4]
   23e54:	3b01      	subs	r3, #1
   23e56:	604b      	str	r3, [r1, #4]
}
   23e58:	2000      	movs	r0, #0
   23e5a:	4770      	bx	lr

00023e5c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   23e5c:	2806      	cmp	r0, #6
   23e5e:	d108      	bne.n	23e72 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   23e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23e64:	2201      	movs	r2, #1
   23e66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   23e6a:	f3bf 8f4f 	dsb	sy
        __WFE();
   23e6e:	bf20      	wfe
    while (true)
   23e70:	e7fd      	b.n	23e6e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   23e72:	4770      	bx	lr

00023e74 <pm_state_exit_post_ops>:
   23e74:	2300      	movs	r3, #0
   23e76:	f383 8811 	msr	BASEPRI, r3
   23e7a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   23e7e:	4770      	bx	lr

00023e80 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   23e80:	b510      	push	{r4, lr}
   23e82:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   23e84:	7801      	ldrb	r1, [r0, #0]
   23e86:	7822      	ldrb	r2, [r4, #0]
   23e88:	428a      	cmp	r2, r1
{
   23e8a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   23e8c:	d00f      	beq.n	23eae <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   23e8e:	4669      	mov	r1, sp
   23e90:	f7f1 f822 	bl	14ed8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   23e94:	a905      	add	r1, sp, #20
   23e96:	4620      	mov	r0, r4
   23e98:	f7f1 f81e 	bl	14ed8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   23e9c:	2210      	movs	r2, #16
   23e9e:	f10d 0115 	add.w	r1, sp, #21
   23ea2:	f10d 0001 	add.w	r0, sp, #1
   23ea6:	f7ff ffa5 	bl	23df4 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   23eaa:	b00a      	add	sp, #40	; 0x28
   23eac:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   23eae:	2a01      	cmp	r2, #1
   23eb0:	d006      	beq.n	23ec0 <bt_uuid_cmp+0x40>
   23eb2:	2a02      	cmp	r2, #2
   23eb4:	d007      	beq.n	23ec6 <bt_uuid_cmp+0x46>
   23eb6:	b972      	cbnz	r2, 23ed6 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   23eb8:	8840      	ldrh	r0, [r0, #2]
   23eba:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   23ebc:	1ac0      	subs	r0, r0, r3
   23ebe:	e7f4      	b.n	23eaa <bt_uuid_cmp+0x2a>
   23ec0:	6840      	ldr	r0, [r0, #4]
   23ec2:	6863      	ldr	r3, [r4, #4]
   23ec4:	e7fa      	b.n	23ebc <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23ec6:	2210      	movs	r2, #16
   23ec8:	1c61      	adds	r1, r4, #1
   23eca:	3001      	adds	r0, #1
}
   23ecc:	b00a      	add	sp, #40	; 0x28
   23ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23ed2:	f7ff bf8f 	b.w	23df4 <memcmp>
	switch (u1->type) {
   23ed6:	f06f 0015 	mvn.w	r0, #21
   23eda:	e7e6      	b.n	23eaa <bt_uuid_cmp+0x2a>

00023edc <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   23edc:	2a04      	cmp	r2, #4
{
   23ede:	b510      	push	{r4, lr}
	switch (data_len) {
   23ee0:	d00a      	beq.n	23ef8 <bt_uuid_create+0x1c>
   23ee2:	2a10      	cmp	r2, #16
   23ee4:	d00d      	beq.n	23f02 <bt_uuid_create+0x26>
   23ee6:	2a02      	cmp	r2, #2
   23ee8:	f04f 0300 	mov.w	r3, #0
   23eec:	d10f      	bne.n	23f0e <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   23eee:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   23ef0:	880b      	ldrh	r3, [r1, #0]
   23ef2:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   23ef4:	2001      	movs	r0, #1
}
   23ef6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   23ef8:	2301      	movs	r3, #1
   23efa:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23efc:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   23efe:	6043      	str	r3, [r0, #4]
		break;
   23f00:	e7f8      	b.n	23ef4 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   23f02:	2302      	movs	r3, #2
   23f04:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   23f08:	f7ff ff84 	bl	23e14 <memcpy>
		break;
   23f0c:	e7f2      	b.n	23ef4 <bt_uuid_create+0x18>
	switch (data_len) {
   23f0e:	4618      	mov	r0, r3
   23f10:	e7f1      	b.n	23ef6 <bt_uuid_create+0x1a>

00023f12 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   23f12:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   23f14:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   23f16:	2106      	movs	r1, #6
{
   23f18:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   23f1a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   23f1e:	f7f9 fe11 	bl	1db44 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   23f22:	b918      	cbnz	r0, 23f2c <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   23f24:	79a3      	ldrb	r3, [r4, #6]
   23f26:	f063 033f 	orn	r3, r3, #63	; 0x3f
   23f2a:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   23f2c:	bd10      	pop	{r4, pc}

00023f2e <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   23f2e:	b510      	push	{r4, lr}
   23f30:	4604      	mov	r4, r0
   23f32:	2207      	movs	r2, #7
   23f34:	f7ff ff6e 	bl	23e14 <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   23f38:	7823      	ldrb	r3, [r4, #0]
   23f3a:	f023 0302 	bic.w	r3, r3, #2
   23f3e:	7023      	strb	r3, [r4, #0]
}
   23f40:	bd10      	pop	{r4, pc}

00023f42 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   23f42:	7800      	ldrb	r0, [r0, #0]
}
   23f44:	f3c0 0040 	ubfx	r0, r0, #1, #1
   23f48:	4770      	bx	lr

00023f4a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   23f4a:	280f      	cmp	r0, #15
   23f4c:	d807      	bhi.n	23f5e <bt_hci_evt_get_flags+0x14>
   23f4e:	280d      	cmp	r0, #13
   23f50:	d80b      	bhi.n	23f6a <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   23f52:	2805      	cmp	r0, #5
   23f54:	bf08      	it	eq
   23f56:	2003      	moveq	r0, #3
   23f58:	bf18      	it	ne
   23f5a:	2002      	movne	r0, #2
   23f5c:	4770      	bx	lr
	switch (evt) {
   23f5e:	2813      	cmp	r0, #19
   23f60:	d003      	beq.n	23f6a <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   23f62:	281a      	cmp	r0, #26
   23f64:	bf08      	it	eq
   23f66:	2001      	moveq	r0, #1
   23f68:	e7f6      	b.n	23f58 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   23f6a:	2001      	movs	r0, #1
	}
}
   23f6c:	4770      	bx	lr

00023f6e <hci_vendor_event>:
}
   23f6e:	4770      	bx	lr

00023f70 <atomic_or>:
{
   23f70:	b510      	push	{r4, lr}
   23f72:	4603      	mov	r3, r0
}
   23f74:	f3bf 8f5b 	dmb	ish
   23f78:	e853 0f00 	ldrex	r0, [r3]
   23f7c:	ea40 0201 	orr.w	r2, r0, r1
   23f80:	e843 2400 	strex	r4, r2, [r3]
   23f84:	2c00      	cmp	r4, #0
   23f86:	d1f7      	bne.n	23f78 <atomic_or+0x8>
   23f88:	f3bf 8f5b 	dmb	ish
   23f8c:	bd10      	pop	{r4, pc}

00023f8e <z_log_msg_static_create.constprop.0>:
   23f8e:	2300      	movs	r3, #0
   23f90:	f7ef b990 	b.w	132b4 <z_impl_z_log_msg_static_create>

00023f94 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23f94:	f3bf 8f5b 	dmb	ish
   23f98:	e850 3f00 	ldrex	r3, [r0]
   23f9c:	400b      	ands	r3, r1
   23f9e:	e840 3200 	strex	r2, r3, [r0]
   23fa2:	2a00      	cmp	r2, #0
   23fa4:	d1f8      	bne.n	23f98 <atomic_and.isra.0+0x4>
   23fa6:	f3bf 8f5b 	dmb	ish
}
   23faa:	4770      	bx	lr

00023fac <bt_hci_disconnect>:
{
   23fac:	b570      	push	{r4, r5, r6, lr}
   23fae:	4606      	mov	r6, r0
   23fb0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   23fb2:	f240 4006 	movw	r0, #1030	; 0x406
   23fb6:	2103      	movs	r1, #3
   23fb8:	f7f1 fcb2 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   23fbc:	4604      	mov	r4, r0
   23fbe:	b168      	cbz	r0, 23fdc <bt_hci_disconnect+0x30>
   23fc0:	2103      	movs	r1, #3
   23fc2:	300c      	adds	r0, #12
   23fc4:	f7f7 f922 	bl	1b20c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   23fc8:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   23fca:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   23fcc:	4621      	mov	r1, r4
   23fce:	2200      	movs	r2, #0
}
   23fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   23fd4:	f240 4006 	movw	r0, #1030	; 0x406
   23fd8:	f7f1 bcf0 	b.w	159bc <bt_hci_cmd_send_sync>
}
   23fdc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23fe0:	bd70      	pop	{r4, r5, r6, pc}

00023fe2 <bt_le_set_data_len>:
{
   23fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23fe4:	4607      	mov	r7, r0
   23fe6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   23fe8:	f242 0022 	movw	r0, #8226	; 0x2022
   23fec:	2106      	movs	r1, #6
{
   23fee:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   23ff0:	f7f1 fc96 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   23ff4:	4604      	mov	r4, r0
   23ff6:	b178      	cbz	r0, 24018 <bt_le_set_data_len+0x36>
   23ff8:	2106      	movs	r1, #6
   23ffa:	300c      	adds	r0, #12
   23ffc:	f7f7 f906 	bl	1b20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24000:	883b      	ldrh	r3, [r7, #0]
   24002:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24004:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24006:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24008:	4621      	mov	r1, r4
   2400a:	2200      	movs	r2, #0
}
   2400c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24010:	f242 0022 	movw	r0, #8226	; 0x2022
   24014:	f7f1 bcd2 	b.w	159bc <bt_hci_cmd_send_sync>
}
   24018:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2401c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002401e <bt_le_set_phy>:
{
   2401e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24022:	4681      	mov	r9, r0
   24024:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24026:	f242 0032 	movw	r0, #8242	; 0x2032
   2402a:	2107      	movs	r1, #7
{
   2402c:	f89d a020 	ldrb.w	sl, [sp, #32]
   24030:	4617      	mov	r7, r2
   24032:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24034:	f7f1 fc74 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   24038:	4605      	mov	r5, r0
   2403a:	b1a0      	cbz	r0, 24066 <bt_le_set_phy+0x48>
   2403c:	2107      	movs	r1, #7
   2403e:	300c      	adds	r0, #12
   24040:	f7f7 f8e4 	bl	1b20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24044:	f8b9 3000 	ldrh.w	r3, [r9]
   24048:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2404a:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2404e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24050:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   24052:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24056:	4629      	mov	r1, r5
   24058:	2200      	movs	r2, #0
}
   2405a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2405e:	f242 0032 	movw	r0, #8242	; 0x2032
   24062:	f7f1 bcab 	b.w	159bc <bt_hci_cmd_send_sync>
}
   24066:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2406a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002406e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2406e:	68c0      	ldr	r0, [r0, #12]
   24070:	f7f1 bd78 	b.w	15b64 <bt_hci_le_enh_conn_complete>

00024074 <bt_le_conn_params_valid>:
{
   24074:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24076:	8803      	ldrh	r3, [r0, #0]
   24078:	8842      	ldrh	r2, [r0, #2]
   2407a:	4293      	cmp	r3, r2
   2407c:	d819      	bhi.n	240b2 <bt_le_conn_params_valid+0x3e>
   2407e:	2b05      	cmp	r3, #5
   24080:	d917      	bls.n	240b2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24082:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24086:	d814      	bhi.n	240b2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24088:	8883      	ldrh	r3, [r0, #4]
   2408a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2408e:	d210      	bcs.n	240b2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24090:	88c0      	ldrh	r0, [r0, #6]
   24092:	f1a0 010a 	sub.w	r1, r0, #10
   24096:	b289      	uxth	r1, r1
   24098:	f640 4476 	movw	r4, #3190	; 0xc76
   2409c:	42a1      	cmp	r1, r4
   2409e:	d808      	bhi.n	240b2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   240a0:	3301      	adds	r3, #1
   240a2:	b29b      	uxth	r3, r3
   240a4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   240a6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   240aa:	bf34      	ite	cc
   240ac:	2001      	movcc	r0, #1
   240ae:	2000      	movcs	r0, #0
}
   240b0:	bd10      	pop	{r4, pc}
		return false;
   240b2:	2000      	movs	r0, #0
   240b4:	e7fc      	b.n	240b0 <bt_le_conn_params_valid+0x3c>

000240b6 <le_conn_param_neg_reply>:
{
   240b6:	b570      	push	{r4, r5, r6, lr}
   240b8:	4606      	mov	r6, r0
   240ba:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   240bc:	f242 0021 	movw	r0, #8225	; 0x2021
   240c0:	2103      	movs	r1, #3
   240c2:	f7f1 fc2d 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   240c6:	4604      	mov	r4, r0
   240c8:	b918      	cbnz	r0, 240d2 <le_conn_param_neg_reply+0x1c>
}
   240ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   240ce:	f7f1 b81b 	b.w	15108 <le_conn_param_neg_reply.part.0>
   240d2:	2103      	movs	r1, #3
   240d4:	300c      	adds	r0, #12
   240d6:	f7f7 f899 	bl	1b20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   240da:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   240dc:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   240de:	4621      	mov	r1, r4
   240e0:	f242 0021 	movw	r0, #8225	; 0x2021
}
   240e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   240e8:	f7f1 beee 	b.w	15ec8 <bt_hci_cmd_send>

000240ec <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   240ec:	f240 3041 	movw	r0, #833	; 0x341
   240f0:	4770      	bx	lr

000240f2 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   240f2:	2000      	movs	r0, #0
   240f4:	4770      	bx	lr

000240f6 <bt_addr_le_eq>:
{
   240f6:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   240f8:	2207      	movs	r2, #7
   240fa:	f7ff fe7b 	bl	23df4 <memcmp>
}
   240fe:	fab0 f080 	clz	r0, r0
   24102:	0940      	lsrs	r0, r0, #5
   24104:	bd08      	pop	{r3, pc}

00024106 <z_log_msg_static_create.constprop.0>:
   24106:	2300      	movs	r3, #0
   24108:	f7ef b8d4 	b.w	132b4 <z_impl_z_log_msg_static_create>

0002410c <bt_lookup_id_addr>:
	return addr;
   2410c:	2800      	cmp	r0, #0
}
   2410e:	bf0c      	ite	eq
   24110:	4608      	moveq	r0, r1
   24112:	2000      	movne	r0, #0
   24114:	4770      	bx	lr

00024116 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   24116:	b118      	cbz	r0, 24120 <bt_id_set_adv_random_addr+0xa>
   24118:	b111      	cbz	r1, 24120 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2411a:	4608      	mov	r0, r1
   2411c:	f7f2 bcc8 	b.w	16ab0 <set_random_address>
}
   24120:	f06f 0015 	mvn.w	r0, #21
   24124:	4770      	bx	lr

00024126 <bt_id_set_adv_private_addr>:
{
   24126:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   24128:	4604      	mov	r4, r0
   2412a:	b180      	cbz	r0, 2414e <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2412c:	2106      	movs	r1, #6
   2412e:	4668      	mov	r0, sp
   24130:	f7f9 fd08 	bl	1db44 <bt_rand>
	if (err) {
   24134:	b948      	cbnz	r0, 2414a <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   24136:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2413a:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2413c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24140:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   24142:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24146:	f7ff ffe6 	bl	24116 <bt_id_set_adv_random_addr>
}
   2414a:	b002      	add	sp, #8
   2414c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2414e:	f06f 0015 	mvn.w	r0, #21
   24152:	e7fa      	b.n	2414a <bt_id_set_adv_private_addr+0x24>

00024154 <bt_id_adv_random_addr_check>:
}
   24154:	3800      	subs	r0, #0
   24156:	bf18      	it	ne
   24158:	2001      	movne	r0, #1
   2415a:	4770      	bx	lr

0002415c <get_adv_channel_map>:
{
   2415c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2415e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24162:	bf0c      	ite	eq
   24164:	2007      	moveq	r0, #7
   24166:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24168:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2416a:	bf48      	it	mi
   2416c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24170:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24172:	bf48      	it	mi
   24174:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24178:	4770      	bx	lr

0002417a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2417a:	f3bf 8f5b 	dmb	ish
   2417e:	6800      	ldr	r0, [r0, #0]
   24180:	f3bf 8f5b 	dmb	ish
}
   24184:	4770      	bx	lr

00024186 <atomic_and>:
{
   24186:	b510      	push	{r4, lr}
   24188:	4603      	mov	r3, r0
}
   2418a:	f3bf 8f5b 	dmb	ish
   2418e:	e853 0f00 	ldrex	r0, [r3]
   24192:	ea00 0201 	and.w	r2, r0, r1
   24196:	e843 2400 	strex	r4, r2, [r3]
   2419a:	2c00      	cmp	r4, #0
   2419c:	d1f7      	bne.n	2418e <atomic_and+0x8>
   2419e:	f3bf 8f5b 	dmb	ish
   241a2:	bd10      	pop	{r4, pc}

000241a4 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   241a4:	2301      	movs	r3, #1
{
   241a6:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   241a8:	fa03 f101 	lsl.w	r1, r3, r1
{
   241ac:	4604      	mov	r4, r0
	if (val) {
   241ae:	b162      	cbz	r2, 241ca <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   241b0:	f3bf 8f5b 	dmb	ish
   241b4:	e854 3f00 	ldrex	r3, [r4]
   241b8:	430b      	orrs	r3, r1
   241ba:	e844 3200 	strex	r2, r3, [r4]
   241be:	2a00      	cmp	r2, #0
   241c0:	d1f8      	bne.n	241b4 <atomic_set_bit_to+0x10>
   241c2:	f3bf 8f5b 	dmb	ish
	}
}
   241c6:	bc10      	pop	{r4}
   241c8:	4770      	bx	lr
   241ca:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   241cc:	43c9      	mvns	r1, r1
   241ce:	f7ff bfda 	b.w	24186 <atomic_and>

000241d2 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   241d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241d6:	b087      	sub	sp, #28
   241d8:	4605      	mov	r5, r0
   241da:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   241de:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   241e2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   241e6:	460c      	mov	r4, r1
   241e8:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   241ea:	2100      	movs	r1, #0
   241ec:	2210      	movs	r2, #16
   241ee:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   241f0:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   241f2:	f7ff fe1a 	bl	23e2a <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   241f6:	b9ee      	cbnz	r6, 24234 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   241f8:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   241fc:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   241fe:	a902      	add	r1, sp, #8
   24200:	f242 0008 	movw	r0, #8200	; 0x2008
   24204:	f7f2 fe66 	bl	16ed4 <hci_set_ad>
		if (err) {
   24208:	4604      	mov	r4, r0
   2420a:	b978      	cbnz	r0, 2422c <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   2420c:	f1ba 0f00 	cmp.w	sl, #0
   24210:	d13e      	bne.n	24290 <le_adv_update.constprop.0+0xbe>
   24212:	3510      	adds	r5, #16
   24214:	f3bf 8f5b 	dmb	ish
   24218:	e855 3f00 	ldrex	r3, [r5]
   2421c:	f043 0304 	orr.w	r3, r3, #4
   24220:	e845 3200 	strex	r2, r3, [r5]
   24224:	2a00      	cmp	r2, #0
   24226:	d1f7      	bne.n	24218 <le_adv_update.constprop.0+0x46>
   24228:	f3bf 8f5b 	dmb	ish
}
   2422c:	4620      	mov	r0, r4
   2422e:	b007      	add	sp, #28
   24230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   24234:	f7f2 fc20 	bl	16a78 <bt_get_name>
   24238:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2423a:	b9e4      	cbnz	r4, 24276 <le_adv_update.constprop.0+0xa4>
   2423c:	bb37      	cbnz	r7, 2428c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2423e:	4658      	mov	r0, fp
   24240:	f7ff fdc8 	bl	23dd4 <strlen>
   24244:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   24246:	2e01      	cmp	r6, #1
		d[0].data = ad;
   24248:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2424c:	f88d 3000 	strb.w	r3, [sp]
   24250:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   24254:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   24258:	d1d0      	bne.n	241fc <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   2425a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2425e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   24260:	2202      	movs	r2, #2
   24262:	e7cc      	b.n	241fe <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24264:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   24268:	3a08      	subs	r2, #8
   2426a:	2a01      	cmp	r2, #1
   2426c:	d925      	bls.n	242ba <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2426e:	3301      	adds	r3, #1
   24270:	4598      	cmp	r8, r3
   24272:	d1f7      	bne.n	24264 <le_adv_update.constprop.0+0x92>
   24274:	e7e2      	b.n	2423c <le_adv_update.constprop.0+0x6a>
   24276:	2300      	movs	r3, #0
   24278:	e7fa      	b.n	24270 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2427a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2427e:	3a08      	subs	r2, #8
   24280:	2a01      	cmp	r2, #1
   24282:	d91a      	bls.n	242ba <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24284:	3301      	adds	r3, #1
   24286:	4599      	cmp	r9, r3
   24288:	d1f7      	bne.n	2427a <le_adv_update.constprop.0+0xa8>
   2428a:	e7d8      	b.n	2423e <le_adv_update.constprop.0+0x6c>
   2428c:	2300      	movs	r3, #0
   2428e:	e7fa      	b.n	24286 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   24290:	2e02      	cmp	r6, #2
   24292:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   24296:	bf08      	it	eq
   24298:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2429a:	a902      	add	r1, sp, #8
			d_len = 2;
   2429c:	bf08      	it	eq
   2429e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   242a0:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   242a4:	bf08      	it	eq
   242a6:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   242aa:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   242ae:	f7f2 fe11 	bl	16ed4 <hci_set_ad>
		if (err) {
   242b2:	2800      	cmp	r0, #0
   242b4:	d0ad      	beq.n	24212 <le_adv_update.constprop.0+0x40>
   242b6:	4604      	mov	r4, r0
   242b8:	e7b8      	b.n	2422c <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   242ba:	f06f 0415 	mvn.w	r4, #21
   242be:	e7b5      	b.n	2422c <le_adv_update.constprop.0+0x5a>

000242c0 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   242c0:	6843      	ldr	r3, [r0, #4]
   242c2:	f013 0008 	ands.w	r0, r3, #8
   242c6:	d00a      	beq.n	242de <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   242c8:	035a      	lsls	r2, r3, #13
   242ca:	d407      	bmi.n	242dc <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   242cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   242d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   242d4:	bf14      	ite	ne
   242d6:	2002      	movne	r0, #2
   242d8:	2001      	moveq	r0, #1
   242da:	4770      	bx	lr
   242dc:	2001      	movs	r0, #1
}
   242de:	4770      	bx	lr

000242e0 <bt_le_adv_set_enable_legacy>:
{
   242e0:	b570      	push	{r4, r5, r6, lr}
   242e2:	4606      	mov	r6, r0
   242e4:	b086      	sub	sp, #24
   242e6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   242e8:	f242 000a 	movw	r0, #8202	; 0x200a
   242ec:	2101      	movs	r1, #1
   242ee:	f7f1 fb17 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   242f2:	4604      	mov	r4, r0
   242f4:	b1b0      	cbz	r0, 24324 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   242f6:	300c      	adds	r0, #12
	if (enable) {
   242f8:	b195      	cbz	r5, 24320 <bt_le_adv_set_enable_legacy+0x40>
   242fa:	2101      	movs	r1, #1
   242fc:	f000 ff9d 	bl	2523a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   24300:	f106 0210 	add.w	r2, r6, #16
   24304:	a903      	add	r1, sp, #12
   24306:	4620      	mov	r0, r4
   24308:	9500      	str	r5, [sp, #0]
   2430a:	2307      	movs	r3, #7
   2430c:	f7f1 faf6 	bl	158fc <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   24310:	2200      	movs	r2, #0
   24312:	4621      	mov	r1, r4
   24314:	f242 000a 	movw	r0, #8202	; 0x200a
   24318:	f7f1 fb50 	bl	159bc <bt_hci_cmd_send_sync>
}
   2431c:	b006      	add	sp, #24
   2431e:	bd70      	pop	{r4, r5, r6, pc}
   24320:	4629      	mov	r1, r5
   24322:	e7eb      	b.n	242fc <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   24324:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24328:	e7f8      	b.n	2431c <bt_le_adv_set_enable_legacy+0x3c>

0002432a <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2432a:	3018      	adds	r0, #24
   2432c:	f7fc b952 	b.w	205d4 <k_work_cancel_delayable>

00024330 <z_log_msg_static_create.constprop.0>:
   24330:	2300      	movs	r3, #0
   24332:	f7ee bfbf 	b.w	132b4 <z_impl_z_log_msg_static_create>

00024336 <tx_complete_work>:
	tx_notify(conn);
   24336:	3828      	subs	r0, #40	; 0x28
   24338:	f7f3 b936 	b.w	175a8 <tx_notify>

0002433c <bt_conn_reset_rx_state>:
{
   2433c:	b510      	push	{r4, lr}
   2433e:	4604      	mov	r4, r0
	if (!conn->rx) {
   24340:	6900      	ldr	r0, [r0, #16]
   24342:	b118      	cbz	r0, 2434c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24344:	f7f6 fe1e 	bl	1af84 <net_buf_unref>
	conn->rx = NULL;
   24348:	2300      	movs	r3, #0
   2434a:	6123      	str	r3, [r4, #16]
}
   2434c:	bd10      	pop	{r4, pc}

0002434e <conn_lookup_handle>:
{
   2434e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24352:	4607      	mov	r7, r0
   24354:	460e      	mov	r6, r1
   24356:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24358:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2435a:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2435e:	42b4      	cmp	r4, r6
   24360:	d103      	bne.n	2436a <conn_lookup_handle+0x1c>
	return NULL;
   24362:	2300      	movs	r3, #0
}
   24364:	4618      	mov	r0, r3
   24366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2436a:	fb09 7004 	mla	r0, r9, r4, r7
   2436e:	f7f3 fc4b 	bl	17c08 <bt_conn_ref>
   24372:	4603      	mov	r3, r0
		if (!conn) {
   24374:	b158      	cbz	r0, 2438e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24376:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24378:	2d01      	cmp	r5, #1
   2437a:	d002      	beq.n	24382 <conn_lookup_handle+0x34>
   2437c:	3d07      	subs	r5, #7
   2437e:	2d01      	cmp	r5, #1
   24380:	d803      	bhi.n	2438a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24382:	881a      	ldrh	r2, [r3, #0]
   24384:	4542      	cmp	r2, r8
   24386:	d0ed      	beq.n	24364 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24388:	4618      	mov	r0, r3
   2438a:	f7f3 fc6d 	bl	17c68 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2438e:	3401      	adds	r4, #1
   24390:	e7e5      	b.n	2435e <conn_lookup_handle+0x10>

00024392 <bt_conn_connected>:
{
   24392:	b510      	push	{r4, lr}
   24394:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   24396:	f7f4 f923 	bl	185e0 <bt_l2cap_connected>
	notify_connected(conn);
   2439a:	4620      	mov	r0, r4
}
   2439c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   243a0:	f7f3 b8cc 	b.w	1753c <notify_connected>

000243a4 <bt_conn_is_peer_addr_le>:
{
   243a4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   243a6:	7a03      	ldrb	r3, [r0, #8]
   243a8:	428b      	cmp	r3, r1
{
   243aa:	4604      	mov	r4, r0
   243ac:	4615      	mov	r5, r2
	if (id != conn->id) {
   243ae:	d115      	bne.n	243dc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   243b0:	f100 0190 	add.w	r1, r0, #144	; 0x90
   243b4:	2207      	movs	r2, #7
   243b6:	4628      	mov	r0, r5
   243b8:	f7ff fd1c 	bl	23df4 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   243bc:	b180      	cbz	r0, 243e0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   243be:	78e3      	ldrb	r3, [r4, #3]
   243c0:	2207      	movs	r2, #7
   243c2:	b943      	cbnz	r3, 243d6 <bt_conn_is_peer_addr_le+0x32>
   243c4:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   243c8:	4628      	mov	r0, r5
   243ca:	f7ff fd13 	bl	23df4 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   243ce:	fab0 f080 	clz	r0, r0
   243d2:	0940      	lsrs	r0, r0, #5
}
   243d4:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   243d6:	f104 0197 	add.w	r1, r4, #151	; 0x97
   243da:	e7f5      	b.n	243c8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   243dc:	2000      	movs	r0, #0
   243de:	e7f9      	b.n	243d4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   243e0:	2001      	movs	r0, #1
   243e2:	e7f7      	b.n	243d4 <bt_conn_is_peer_addr_le+0x30>

000243e4 <bt_conn_get_dst>:
}
   243e4:	3090      	adds	r0, #144	; 0x90
   243e6:	4770      	bx	lr

000243e8 <bt_conn_le_conn_update>:
{
   243e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243ea:	4607      	mov	r7, r0
   243ec:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   243ee:	f242 0013 	movw	r0, #8211	; 0x2013
   243f2:	210e      	movs	r1, #14
   243f4:	f7f1 fa94 	bl	15920 <bt_hci_cmd_create>
	if (!buf) {
   243f8:	4606      	mov	r6, r0
   243fa:	b1d0      	cbz	r0, 24432 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   243fc:	210e      	movs	r1, #14
   243fe:	300c      	adds	r0, #12
   24400:	f7f6 ff04 	bl	1b20c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   24404:	220e      	movs	r2, #14
   24406:	4604      	mov	r4, r0
   24408:	2100      	movs	r1, #0
   2440a:	f7ff fd0e 	bl	23e2a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2440e:	883b      	ldrh	r3, [r7, #0]
   24410:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24412:	882b      	ldrh	r3, [r5, #0]
   24414:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24416:	886b      	ldrh	r3, [r5, #2]
   24418:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2441a:	88ab      	ldrh	r3, [r5, #4]
   2441c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2441e:	88eb      	ldrh	r3, [r5, #6]
   24420:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24422:	4631      	mov	r1, r6
   24424:	2200      	movs	r2, #0
}
   24426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2442a:	f242 0013 	movw	r0, #8211	; 0x2013
   2442e:	f7f1 bac5 	b.w	159bc <bt_hci_cmd_send_sync>
}
   24432:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024438 <l2cap_connected>:
}
   24438:	4770      	bx	lr

0002443a <z_log_msg_static_create.constprop.0>:
   2443a:	2300      	movs	r3, #0
   2443c:	f7ee bf3a 	b.w	132b4 <z_impl_z_log_msg_static_create>

00024440 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   24440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24442:	4605      	mov	r5, r0
   24444:	460f      	mov	r7, r1
   24446:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   24448:	2300      	movs	r3, #0
   2444a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2444e:	2104      	movs	r1, #4
   24450:	2000      	movs	r0, #0
   24452:	f7f3 fd71 	bl	17f38 <bt_conn_create_pdu_timeout>
	if (!buf) {
   24456:	4604      	mov	r4, r0
   24458:	b920      	cbnz	r0, 24464 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2445a:	4628      	mov	r0, r5
}
   2445c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24460:	f7f4 b882 	b.w	18568 <l2cap_create_le_sig_pdu.part.0>
   24464:	2104      	movs	r1, #4
   24466:	300c      	adds	r0, #12
   24468:	f7f6 fed0 	bl	1b20c <net_buf_simple_add>
	hdr->code = code;
   2446c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2446e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   24470:	8046      	strh	r6, [r0, #2]
}
   24472:	4620      	mov	r0, r4
   24474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024476 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   24476:	4770      	bx	lr

00024478 <bt_l2cap_chan_del>:
{
   24478:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2447a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2447e:	4604      	mov	r4, r0
	if (!chan->conn) {
   24480:	b123      	cbz	r3, 2448c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24482:	686b      	ldr	r3, [r5, #4]
   24484:	b103      	cbz	r3, 24488 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24486:	4798      	blx	r3
	chan->conn = NULL;
   24488:	2300      	movs	r3, #0
   2448a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2448c:	68e3      	ldr	r3, [r4, #12]
   2448e:	b10b      	cbz	r3, 24494 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24490:	4620      	mov	r0, r4
   24492:	4798      	blx	r3
	if (ops->released) {
   24494:	6a2b      	ldr	r3, [r5, #32]
   24496:	b11b      	cbz	r3, 244a0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24498:	4620      	mov	r0, r4
}
   2449a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2449e:	4718      	bx	r3
}
   244a0:	bd70      	pop	{r4, r5, r6, pc}

000244a2 <bt_l2cap_disconnected>:
{
   244a2:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   244a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   244a6:	b130      	cbz	r0, 244b6 <bt_l2cap_disconnected+0x14>
	return node->next;
   244a8:	f850 4908 	ldr.w	r4, [r0], #-8
   244ac:	b104      	cbz	r4, 244b0 <bt_l2cap_disconnected+0xe>
   244ae:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   244b0:	f7ff ffe2 	bl	24478 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   244b4:	b904      	cbnz	r4, 244b8 <bt_l2cap_disconnected+0x16>
}
   244b6:	bd38      	pop	{r3, r4, r5, pc}
   244b8:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   244ba:	b12d      	cbz	r5, 244c8 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   244bc:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   244be:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   244c0:	f7ff ffda 	bl	24478 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   244c4:	462c      	mov	r4, r5
   244c6:	e7f7      	b.n	244b8 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   244c8:	4620      	mov	r0, r4
}
   244ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   244ce:	f7ff bfd3 	b.w	24478 <bt_l2cap_chan_del>

000244d2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   244d2:	3104      	adds	r1, #4
   244d4:	f7f3 bd30 	b.w	17f38 <bt_conn_create_pdu_timeout>

000244d8 <bt_l2cap_send_cb>:
{
   244d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   244dc:	4614      	mov	r4, r2
   244de:	4605      	mov	r5, r0
   244e0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   244e2:	f102 000c 	add.w	r0, r2, #12
   244e6:	2104      	movs	r1, #4
   244e8:	461e      	mov	r6, r3
   244ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
   244ee:	f7f6 fe31 	bl	1b154 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   244f2:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   244f4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   244f6:	3a04      	subs	r2, #4
   244f8:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   244fa:	4643      	mov	r3, r8
   244fc:	4632      	mov	r2, r6
   244fe:	4621      	mov	r1, r4
   24500:	4628      	mov	r0, r5
}
   24502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24506:	f7f3 babd 	b.w	17a84 <bt_conn_send_cb>

0002450a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2450a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2450c:	b130      	cbz	r0, 2451c <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2450e:	8983      	ldrh	r3, [r0, #12]
   24510:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24512:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24516:	d001      	beq.n	2451c <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   24518:	6880      	ldr	r0, [r0, #8]
   2451a:	e7f7      	b.n	2450c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2451c:	4770      	bx	lr

0002451e <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2451e:	4770      	bx	lr

00024520 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   24520:	4603      	mov	r3, r0
	return list->head;
   24522:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24524:	b128      	cbz	r0, 24532 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24526:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24528:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2452a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2452c:	4288      	cmp	r0, r1
	list->tail = node;
   2452e:	bf08      	it	eq
   24530:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24532:	4770      	bx	lr

00024534 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24534:	4603      	mov	r3, r0
	size_t bytes = 0;
   24536:	2000      	movs	r0, #0

	while (buf) {
   24538:	b903      	cbnz	r3, 2453c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2453a:	4770      	bx	lr
		bytes += buf->len;
   2453c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2453e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   24540:	4410      	add	r0, r2
		buf = buf->frags;
   24542:	e7f9      	b.n	24538 <net_buf_frags_len+0x4>

00024544 <attr_read_type_cb>:
{
   24544:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24546:	68d4      	ldr	r4, [r2, #12]
   24548:	7823      	ldrb	r3, [r4, #0]
   2454a:	3102      	adds	r1, #2
   2454c:	b913      	cbnz	r3, 24554 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2454e:	7021      	strb	r1, [r4, #0]
	return true;
   24550:	2001      	movs	r0, #1
}
   24552:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24554:	428b      	cmp	r3, r1
   24556:	d0fb      	beq.n	24550 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24558:	8a03      	ldrh	r3, [r0, #16]
   2455a:	3b02      	subs	r3, #2
   2455c:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2455e:	2000      	movs	r0, #0
   24560:	6110      	str	r0, [r2, #16]
		return false;
   24562:	e7f6      	b.n	24552 <attr_read_type_cb+0xe>

00024564 <att_prepare_write_req>:
}
   24564:	2006      	movs	r0, #6
   24566:	4770      	bx	lr

00024568 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24568:	f3bf 8f5b 	dmb	ish
   2456c:	6800      	ldr	r0, [r0, #0]
   2456e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   24572:	4108      	asrs	r0, r1
}
   24574:	f000 0001 	and.w	r0, r0, #1
   24578:	4770      	bx	lr

0002457a <write_cb>:
{
   2457a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2457c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2457e:	4601      	mov	r1, r0
{
   24580:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   24582:	f44f 7295 	mov.w	r2, #298	; 0x12a
   24586:	6820      	ldr	r0, [r4, #0]
   24588:	f000 fda3 	bl	250d2 <bt_gatt_check_perm>
   2458c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2458e:	bb00      	cbnz	r0, 245d2 <write_cb+0x58>
	if (!data->req) {
   24590:	7a23      	ldrb	r3, [r4, #8]
   24592:	b1b3      	cbz	r3, 245c2 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   24594:	f1a3 0218 	sub.w	r2, r3, #24
   24598:	4253      	negs	r3, r2
   2459a:	4153      	adcs	r3, r2
   2459c:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2459e:	9301      	str	r3, [sp, #4]
   245a0:	8a63      	ldrh	r3, [r4, #18]
   245a2:	9300      	str	r3, [sp, #0]
   245a4:	68ae      	ldr	r6, [r5, #8]
   245a6:	8a23      	ldrh	r3, [r4, #16]
   245a8:	68e2      	ldr	r2, [r4, #12]
   245aa:	6820      	ldr	r0, [r4, #0]
   245ac:	4629      	mov	r1, r5
   245ae:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   245b0:	2800      	cmp	r0, #0
   245b2:	db08      	blt.n	245c6 <write_cb+0x4c>
   245b4:	8a23      	ldrh	r3, [r4, #16]
   245b6:	4298      	cmp	r0, r3
   245b8:	d10e      	bne.n	245d8 <write_cb+0x5e>
	data->err = 0U;
   245ba:	2300      	movs	r3, #0
   245bc:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   245be:	2001      	movs	r0, #1
   245c0:	e008      	b.n	245d4 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   245c2:	2302      	movs	r3, #2
   245c4:	e7eb      	b.n	2459e <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   245c6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   245ca:	d305      	bcc.n	245d8 <write_cb+0x5e>
		return -err;
   245cc:	4240      	negs	r0, r0
   245ce:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   245d0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   245d2:	2000      	movs	r0, #0
}
   245d4:	b002      	add	sp, #8
   245d6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   245d8:	200e      	movs	r0, #14
   245da:	e7f9      	b.n	245d0 <write_cb+0x56>

000245dc <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   245dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   245de:	e9cd 2301 	strd	r2, r3, [sp, #4]
   245e2:	2300      	movs	r3, #0
   245e4:	9300      	str	r3, [sp, #0]
   245e6:	461a      	mov	r2, r3
   245e8:	f7f5 fd74 	bl	1a0d4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   245ec:	b005      	add	sp, #20
   245ee:	f85d fb04 	ldr.w	pc, [sp], #4

000245f2 <find_info_cb>:
{
   245f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   245f4:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   245f6:	6817      	ldr	r7, [r2, #0]
{
   245f8:	4605      	mov	r5, r0
   245fa:	460e      	mov	r6, r1
   245fc:	4614      	mov	r4, r2
	if (!data->rsp) {
   245fe:	b963      	cbnz	r3, 2461a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   24600:	6850      	ldr	r0, [r2, #4]
   24602:	2101      	movs	r1, #1
   24604:	300c      	adds	r0, #12
   24606:	f7f6 fe01 	bl	1b20c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2460a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2460c:	682b      	ldr	r3, [r5, #0]
   2460e:	781b      	ldrb	r3, [r3, #0]
   24610:	2b00      	cmp	r3, #0
   24612:	bf14      	ite	ne
   24614:	2302      	movne	r3, #2
   24616:	2301      	moveq	r3, #1
   24618:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2461a:	68a3      	ldr	r3, [r4, #8]
   2461c:	781b      	ldrb	r3, [r3, #0]
   2461e:	2b01      	cmp	r3, #1
   24620:	d003      	beq.n	2462a <find_info_cb+0x38>
   24622:	2b02      	cmp	r3, #2
   24624:	d019      	beq.n	2465a <find_info_cb+0x68>
   24626:	2000      	movs	r0, #0
   24628:	e016      	b.n	24658 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2462a:	682b      	ldr	r3, [r5, #0]
   2462c:	781b      	ldrb	r3, [r3, #0]
   2462e:	2b00      	cmp	r3, #0
   24630:	d1f9      	bne.n	24626 <find_info_cb+0x34>
   24632:	6860      	ldr	r0, [r4, #4]
   24634:	2104      	movs	r1, #4
   24636:	300c      	adds	r0, #12
   24638:	f7f6 fde8 	bl	1b20c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2463c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2463e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24640:	682a      	ldr	r2, [r5, #0]
   24642:	68e3      	ldr	r3, [r4, #12]
   24644:	8852      	ldrh	r2, [r2, #2]
   24646:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24648:	6863      	ldr	r3, [r4, #4]
   2464a:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2464c:	8a1b      	ldrh	r3, [r3, #16]
   2464e:	1ac0      	subs	r0, r0, r3
   24650:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   24652:	bf94      	ite	ls
   24654:	2000      	movls	r0, #0
   24656:	2001      	movhi	r0, #1
}
   24658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2465a:	682b      	ldr	r3, [r5, #0]
   2465c:	781b      	ldrb	r3, [r3, #0]
   2465e:	2b02      	cmp	r3, #2
   24660:	d1e1      	bne.n	24626 <find_info_cb+0x34>
   24662:	6860      	ldr	r0, [r4, #4]
   24664:	2112      	movs	r1, #18
   24666:	300c      	adds	r0, #12
   24668:	f7f6 fdd0 	bl	1b20c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2466c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2466e:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24670:	6829      	ldr	r1, [r5, #0]
   24672:	68e0      	ldr	r0, [r4, #12]
   24674:	2210      	movs	r2, #16
   24676:	3101      	adds	r1, #1
   24678:	3002      	adds	r0, #2
   2467a:	f7ff fbcb 	bl	23e14 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2467e:	6863      	ldr	r3, [r4, #4]
   24680:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   24682:	8a1b      	ldrh	r3, [r3, #16]
   24684:	1ac0      	subs	r0, r0, r3
   24686:	2812      	cmp	r0, #18
   24688:	e7e3      	b.n	24652 <find_info_cb+0x60>

0002468a <att_chan_mtu_updated>:
{
   2468a:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2468c:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2468e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24690:	b352      	cbz	r2, 246e8 <att_chan_mtu_updated+0x5e>
	return node->next;
   24692:	6813      	ldr	r3, [r2, #0]
   24694:	b103      	cbz	r3, 24698 <att_chan_mtu_updated+0xe>
   24696:	3b88      	subs	r3, #136	; 0x88
   24698:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   2469c:	2200      	movs	r2, #0
   2469e:	4611      	mov	r1, r2
   246a0:	e000      	b.n	246a4 <att_chan_mtu_updated+0x1a>
   246a2:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   246a4:	4284      	cmp	r4, r0
   246a6:	d007      	beq.n	246b8 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   246a8:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   246aa:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   246ac:	42b1      	cmp	r1, r6
   246ae:	bf38      	it	cc
   246b0:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   246b2:	42a2      	cmp	r2, r4
   246b4:	bf38      	it	cc
   246b6:	4622      	movcc	r2, r4
   246b8:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   246ba:	b12b      	cbz	r3, 246c8 <att_chan_mtu_updated+0x3e>
   246bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   246c0:	2b00      	cmp	r3, #0
   246c2:	d1ee      	bne.n	246a2 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   246c4:	4284      	cmp	r4, r0
   246c6:	d1ef      	bne.n	246a8 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   246c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   246ca:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   246cc:	428b      	cmp	r3, r1
   246ce:	d801      	bhi.n	246d4 <att_chan_mtu_updated+0x4a>
   246d0:	4290      	cmp	r0, r2
   246d2:	d90b      	bls.n	246ec <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   246d4:	4282      	cmp	r2, r0
   246d6:	bf38      	it	cc
   246d8:	4602      	movcc	r2, r0
   246da:	4299      	cmp	r1, r3
   246dc:	6828      	ldr	r0, [r5, #0]
   246de:	bf38      	it	cc
   246e0:	4619      	movcc	r1, r3
}
   246e2:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   246e4:	f7f6 b9dc 	b.w	1aaa0 <bt_gatt_att_max_mtu_changed>
   246e8:	4611      	mov	r1, r2
   246ea:	e7ed      	b.n	246c8 <att_chan_mtu_updated+0x3e>
}
   246ec:	bc70      	pop	{r4, r5, r6}
   246ee:	4770      	bx	lr

000246f0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   246f0:	68d0      	ldr	r0, [r2, #12]
   246f2:	7803      	ldrb	r3, [r0, #0]
   246f4:	3104      	adds	r1, #4
   246f6:	b913      	cbnz	r3, 246fe <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   246f8:	7001      	strb	r1, [r0, #0]
	return true;
   246fa:	2001      	movs	r0, #1
   246fc:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   246fe:	428b      	cmp	r3, r1
   24700:	d0fb      	beq.n	246fa <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24702:	6891      	ldr	r1, [r2, #8]
   24704:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   24706:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24708:	3b04      	subs	r3, #4
   2470a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2470c:	6110      	str	r0, [r2, #16]
}
   2470e:	4770      	bx	lr

00024710 <z_log_msg_static_create.constprop.0>:
   24710:	2300      	movs	r3, #0
   24712:	f7ee bdcf 	b.w	132b4 <z_impl_z_log_msg_static_create>

00024716 <chan_req_send>:
{
   24716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24718:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2471a:	6888      	ldr	r0, [r1, #8]
   2471c:	f7ff ff0a 	bl	24534 <net_buf_frags_len>
   24720:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   24722:	4283      	cmp	r3, r0
{
   24724:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24726:	d30b      	bcc.n	24740 <chan_req_send+0x2a>
	chan->req = req;
   24728:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   2472a:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2472c:	2600      	movs	r6, #0
   2472e:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   24730:	4628      	mov	r0, r5
   24732:	4639      	mov	r1, r7
   24734:	f7f4 f9c6 	bl	18ac4 <chan_send>
	if (err) {
   24738:	b108      	cbz	r0, 2473e <chan_req_send+0x28>
		req->buf = buf;
   2473a:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2473c:	63ae      	str	r6, [r5, #56]	; 0x38
}
   2473e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   24740:	f06f 0079 	mvn.w	r0, #121	; 0x79
   24744:	e7fb      	b.n	2473e <chan_req_send+0x28>

00024746 <process_queue>:
{
   24746:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   24748:	2200      	movs	r2, #0
{
   2474a:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2474c:	2300      	movs	r3, #0
   2474e:	4608      	mov	r0, r1
{
   24750:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   24752:	f000 fd50 	bl	251f6 <net_buf_get>
	if (buf) {
   24756:	4605      	mov	r5, r0
   24758:	b158      	cbz	r0, 24772 <process_queue+0x2c>
	return chan_send(chan, buf);
   2475a:	4601      	mov	r1, r0
   2475c:	4620      	mov	r0, r4
   2475e:	f7f4 f9b1 	bl	18ac4 <chan_send>
		if (err) {
   24762:	4604      	mov	r4, r0
   24764:	b118      	cbz	r0, 2476e <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   24766:	4629      	mov	r1, r5
   24768:	4630      	mov	r0, r6
   2476a:	f001 fa42 	bl	25bf2 <k_queue_prepend>
}
   2476e:	4620      	mov	r0, r4
   24770:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24772:	f06f 0401 	mvn.w	r4, #1
   24776:	e7fa      	b.n	2476e <process_queue+0x28>

00024778 <bt_att_chan_send_rsp>:
{
   24778:	b538      	push	{r3, r4, r5, lr}
   2477a:	4604      	mov	r4, r0
   2477c:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2477e:	f7f4 f9a1 	bl	18ac4 <chan_send>
	if (err) {
   24782:	b130      	cbz	r0, 24792 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   24784:	4629      	mov	r1, r5
   24786:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   2478a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2478e:	f7f6 bbd3 	b.w	1af38 <net_buf_put>
}
   24792:	bd38      	pop	{r3, r4, r5, pc}

00024794 <att_chan_read>:
{
   24794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24798:	4680      	mov	r8, r0
   2479a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2479c:	4610      	mov	r0, r2
{
   2479e:	4699      	mov	r9, r3
   247a0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   247a2:	f7ff fec7 	bl	24534 <net_buf_frags_len>
   247a6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   247aa:	4283      	cmp	r3, r0
{
   247ac:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   247ae:	d97a      	bls.n	248a6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   247b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   247b4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   247b6:	4630      	mov	r0, r6
   247b8:	f7f6 fc40 	bl	1b03c <net_buf_frag_last>
	size_t len, total = 0;
   247bc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   247c0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   247c2:	4630      	mov	r0, r6
   247c4:	f7ff feb6 	bl	24534 <net_buf_frags_len>
   247c8:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   247cc:	f105 070c 	add.w	r7, r5, #12
   247d0:	1a24      	subs	r4, r4, r0
   247d2:	4638      	mov	r0, r7
   247d4:	f000 fd1d 	bl	25212 <net_buf_simple_tailroom>
   247d8:	4284      	cmp	r4, r0
   247da:	d211      	bcs.n	24800 <att_chan_read+0x6c>
   247dc:	4630      	mov	r0, r6
   247de:	f7ff fea9 	bl	24534 <net_buf_frags_len>
   247e2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   247e6:	1a24      	subs	r4, r4, r0
		if (!len) {
   247e8:	bb34      	cbnz	r4, 24838 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   247ea:	7ab0      	ldrb	r0, [r6, #10]
   247ec:	f7f6 f9b6 	bl	1ab5c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   247f0:	2200      	movs	r2, #0
   247f2:	2300      	movs	r3, #0
   247f4:	f000 fcfa 	bl	251ec <net_buf_alloc_fixed>
			if (!frag) {
   247f8:	4605      	mov	r5, r0
   247fa:	b930      	cbnz	r0, 2480a <att_chan_read+0x76>
	return total;
   247fc:	4657      	mov	r7, sl
   247fe:	e02c      	b.n	2485a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   24800:	4638      	mov	r0, r7
   24802:	f000 fd06 	bl	25212 <net_buf_simple_tailroom>
   24806:	4604      	mov	r4, r0
   24808:	e7ee      	b.n	247e8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2480a:	4601      	mov	r1, r0
   2480c:	4630      	mov	r0, r6
   2480e:	f7f6 fc5b 	bl	1b0c8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24812:	4630      	mov	r0, r6
   24814:	f7ff fe8e 	bl	24534 <net_buf_frags_len>
   24818:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2481c:	f105 070c 	add.w	r7, r5, #12
   24820:	1a24      	subs	r4, r4, r0
   24822:	4638      	mov	r0, r7
   24824:	f000 fcf5 	bl	25212 <net_buf_simple_tailroom>
   24828:	4284      	cmp	r4, r0
   2482a:	d21a      	bcs.n	24862 <att_chan_read+0xce>
   2482c:	4630      	mov	r0, r6
   2482e:	f7ff fe81 	bl	24534 <net_buf_frags_len>
   24832:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   24836:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   24838:	68e9      	ldr	r1, [r5, #12]
   2483a:	8a2a      	ldrh	r2, [r5, #16]
   2483c:	f8cd 9000 	str.w	r9, [sp]
   24840:	f8db 7004 	ldr.w	r7, [fp, #4]
   24844:	9803      	ldr	r0, [sp, #12]
   24846:	440a      	add	r2, r1
   24848:	b2a3      	uxth	r3, r4
   2484a:	4659      	mov	r1, fp
   2484c:	47b8      	blx	r7
		if (read < 0) {
   2484e:	1e07      	subs	r7, r0, #0
   24850:	da0c      	bge.n	2486c <att_chan_read+0xd8>
				return total;
   24852:	f1ba 0f00 	cmp.w	sl, #0
   24856:	bf18      	it	ne
   24858:	4657      	movne	r7, sl
}
   2485a:	4638      	mov	r0, r7
   2485c:	b005      	add	sp, #20
   2485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24862:	4638      	mov	r0, r7
   24864:	f000 fcd5 	bl	25212 <net_buf_simple_tailroom>
   24868:	4604      	mov	r4, r0
   2486a:	e7e5      	b.n	24838 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2486c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2486e:	b993      	cbnz	r3, 24896 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   24870:	4639      	mov	r1, r7
   24872:	f105 000c 	add.w	r0, r5, #12
   24876:	f7f6 fcc9 	bl	1b20c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2487a:	4630      	mov	r0, r6
   2487c:	f7ff fe5a 	bl	24534 <net_buf_frags_len>
   24880:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   24884:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24886:	4283      	cmp	r3, r0
		total += read;
   24888:	44ba      	add	sl, r7
		offset += read;
   2488a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2488e:	d9b5      	bls.n	247fc <att_chan_read+0x68>
   24890:	42a7      	cmp	r7, r4
   24892:	d096      	beq.n	247c2 <att_chan_read+0x2e>
   24894:	e7b2      	b.n	247fc <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   24896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2489a:	4639      	mov	r1, r7
   2489c:	4628      	mov	r0, r5
   2489e:	4798      	blx	r3
   248a0:	2800      	cmp	r0, #0
   248a2:	d1e5      	bne.n	24870 <att_chan_read+0xdc>
   248a4:	e7aa      	b.n	247fc <att_chan_read+0x68>
		return 0;
   248a6:	2700      	movs	r7, #0
   248a8:	e7d7      	b.n	2485a <att_chan_read+0xc6>

000248aa <sys_slist_find_and_remove.isra.0>:
	return list->head;
   248aa:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   248ac:	2200      	movs	r2, #0
   248ae:	b903      	cbnz	r3, 248b2 <sys_slist_find_and_remove.isra.0+0x8>
   248b0:	4770      	bx	lr
   248b2:	428b      	cmp	r3, r1
   248b4:	d10f      	bne.n	248d6 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   248b6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   248b8:	b93a      	cbnz	r2, 248ca <sys_slist_find_and_remove.isra.0+0x20>
   248ba:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   248bc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   248be:	4291      	cmp	r1, r2
   248c0:	d100      	bne.n	248c4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   248c2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   248c4:	2300      	movs	r3, #0
   248c6:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   248c8:	4770      	bx	lr
	parent->next = child;
   248ca:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   248cc:	6843      	ldr	r3, [r0, #4]
   248ce:	4299      	cmp	r1, r3
	list->tail = node;
   248d0:	bf08      	it	eq
   248d2:	6042      	streq	r2, [r0, #4]
}
   248d4:	e7f6      	b.n	248c4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   248d6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   248d8:	681b      	ldr	r3, [r3, #0]
   248da:	e7e8      	b.n	248ae <sys_slist_find_and_remove.isra.0+0x4>

000248dc <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   248dc:	2301      	movs	r3, #1
   248de:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   248e0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   248e2:	f3bf 8f5b 	dmb	ish
   248e6:	e850 2f00 	ldrex	r2, [r0]
   248ea:	401a      	ands	r2, r3
   248ec:	e840 2100 	strex	r1, r2, [r0]
   248f0:	2900      	cmp	r1, #0
   248f2:	d1f8      	bne.n	248e6 <atomic_clear_bit+0xa>
   248f4:	f3bf 8f5b 	dmb	ish
}
   248f8:	4770      	bx	lr

000248fa <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   248fa:	2006      	movs	r0, #6
   248fc:	4770      	bx	lr

000248fe <atomic_test_and_set_bit>:
{
   248fe:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24900:	2301      	movs	r3, #1
   24902:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24906:	f3bf 8f5b 	dmb	ish
   2490a:	e850 3f00 	ldrex	r3, [r0]
   2490e:	ea43 0201 	orr.w	r2, r3, r1
   24912:	e840 2400 	strex	r4, r2, [r0]
   24916:	2c00      	cmp	r4, #0
   24918:	d1f7      	bne.n	2490a <atomic_test_and_set_bit+0xc>
   2491a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2491e:	4219      	tst	r1, r3
}
   24920:	bf14      	ite	ne
   24922:	2001      	movne	r0, #1
   24924:	2000      	moveq	r0, #0
   24926:	bd10      	pop	{r4, pc}

00024928 <read_cb>:
{
   24928:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2492a:	6816      	ldr	r6, [r2, #0]
{
   2492c:	4605      	mov	r5, r0
	data->err = 0x00;
   2492e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   24930:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   24932:	7313      	strb	r3, [r2, #12]
{
   24934:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   24936:	4629      	mov	r1, r5
   24938:	2295      	movs	r2, #149	; 0x95
   2493a:	f000 fbca 	bl	250d2 <bt_gatt_check_perm>
   2493e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   24940:	b980      	cbnz	r0, 24964 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24942:	e9cd 0000 	strd	r0, r0, [sp]
   24946:	4629      	mov	r1, r5
   24948:	88a3      	ldrh	r3, [r4, #4]
   2494a:	68a2      	ldr	r2, [r4, #8]
   2494c:	4630      	mov	r0, r6
   2494e:	f7ff ff21 	bl	24794 <att_chan_read>
	if (ret < 0) {
   24952:	2800      	cmp	r0, #0
   24954:	da09      	bge.n	2496a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   24956:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2495a:	bf26      	itte	cs
   2495c:	4240      	negcs	r0, r0
   2495e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   24960:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   24962:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   24964:	2000      	movs	r0, #0
}
   24966:	b002      	add	sp, #8
   24968:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2496a:	2001      	movs	r0, #1
   2496c:	e7fb      	b.n	24966 <read_cb+0x3e>

0002496e <read_vl_cb>:
{
   2496e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   24972:	f8d2 8000 	ldr.w	r8, [r2]
{
   24976:	4606      	mov	r6, r0
	data->err = 0x00;
   24978:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2497a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2497e:	7313      	strb	r3, [r2, #12]
{
   24980:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   24982:	4631      	mov	r1, r6
   24984:	2295      	movs	r2, #149	; 0x95
   24986:	f000 fba4 	bl	250d2 <bt_gatt_check_perm>
   2498a:	4605      	mov	r5, r0
   2498c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2498e:	b9e0      	cbnz	r0, 249ca <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   24990:	68a0      	ldr	r0, [r4, #8]
   24992:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   24996:	8a02      	ldrh	r2, [r0, #16]
   24998:	1a9b      	subs	r3, r3, r2
   2499a:	2b01      	cmp	r3, #1
   2499c:	dd15      	ble.n	249ca <read_vl_cb+0x5c>
   2499e:	2102      	movs	r1, #2
   249a0:	300c      	adds	r0, #12
   249a2:	f7f6 fc33 	bl	1b20c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   249a6:	e9cd 5500 	strd	r5, r5, [sp]
   249aa:	4607      	mov	r7, r0
   249ac:	88a3      	ldrh	r3, [r4, #4]
   249ae:	68a2      	ldr	r2, [r4, #8]
   249b0:	4631      	mov	r1, r6
   249b2:	4640      	mov	r0, r8
   249b4:	f7ff feee 	bl	24794 <att_chan_read>
	if (read < 0) {
   249b8:	1e03      	subs	r3, r0, #0
   249ba:	da0a      	bge.n	249d2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   249bc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   249c0:	bf26      	itte	cs
   249c2:	425b      	negcs	r3, r3
   249c4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   249c6:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   249c8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   249ca:	2000      	movs	r0, #0
}
   249cc:	b002      	add	sp, #8
   249ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   249d2:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   249d4:	2001      	movs	r0, #1
   249d6:	e7f9      	b.n	249cc <read_vl_cb+0x5e>

000249d8 <bt_att_sent>:
{
   249d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   249da:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   249de:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   249e0:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   249e2:	2104      	movs	r1, #4
   249e4:	3030      	adds	r0, #48	; 0x30
   249e6:	f7ff ff79 	bl	248dc <atomic_clear_bit>
	if (!att) {
   249ea:	b304      	cbz	r4, 24a2e <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   249ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   249ee:	b98b      	cbnz	r3, 24a14 <bt_att_sent+0x3c>
   249f0:	6863      	ldr	r3, [r4, #4]
   249f2:	b17b      	cbz	r3, 24a14 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   249f4:	1d20      	adds	r0, r4, #4
   249f6:	f7ff fd93 	bl	24520 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   249fa:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   249fc:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   249fe:	4638      	mov	r0, r7
   24a00:	f7ff fe89 	bl	24716 <chan_req_send>
   24a04:	2800      	cmp	r0, #0
   24a06:	da12      	bge.n	24a2e <bt_att_sent+0x56>
	return list->head;
   24a08:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   24a0a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   24a0c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   24a0e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   24a10:	b903      	cbnz	r3, 24a14 <bt_att_sent+0x3c>
	list->tail = node;
   24a12:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   24a14:	f105 0138 	add.w	r1, r5, #56	; 0x38
   24a18:	4638      	mov	r0, r7
   24a1a:	f7ff fe94 	bl	24746 <process_queue>
	if (!err) {
   24a1e:	b130      	cbz	r0, 24a2e <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   24a20:	f104 010c 	add.w	r1, r4, #12
   24a24:	4638      	mov	r0, r7
}
   24a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   24a2a:	f7ff be8c 	b.w	24746 <process_queue>
}
   24a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024a30 <att_req_send_process>:
{
   24a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   24a34:	6a84      	ldr	r4, [r0, #40]	; 0x28
   24a36:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24a38:	2c00      	cmp	r4, #0
   24a3a:	d03a      	beq.n	24ab2 <att_req_send_process+0x82>
	return node->next;
   24a3c:	f854 6988 	ldr.w	r6, [r4], #-136
   24a40:	b106      	cbz	r6, 24a44 <att_req_send_process+0x14>
   24a42:	3e88      	subs	r6, #136	; 0x88
{
   24a44:	2300      	movs	r3, #0
   24a46:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   24a48:	f108 0704 	add.w	r7, r8, #4
   24a4c:	e013      	b.n	24a76 <att_req_send_process+0x46>
		if (!req && prev &&
   24a4e:	b1bb      	cbz	r3, 24a80 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   24a50:	2103      	movs	r1, #3
   24a52:	f104 0034 	add.w	r0, r4, #52	; 0x34
   24a56:	f7ff fd87 	bl	24568 <atomic_test_bit>
   24a5a:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   24a5c:	f103 0034 	add.w	r0, r3, #52	; 0x34
   24a60:	f7ff fd82 	bl	24568 <atomic_test_bit>
		if (!req && prev &&
   24a64:	4282      	cmp	r2, r0
   24a66:	d10b      	bne.n	24a80 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24a68:	b31e      	cbz	r6, 24ab2 <att_req_send_process+0x82>
   24a6a:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   24a6e:	b102      	cbz	r2, 24a72 <att_req_send_process+0x42>
   24a70:	3a88      	subs	r2, #136	; 0x88
{
   24a72:	4634      	mov	r4, r6
   24a74:	4616      	mov	r6, r2
		if (chan->req) {
   24a76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24a78:	2a00      	cmp	r2, #0
   24a7a:	d1f5      	bne.n	24a68 <att_req_send_process+0x38>
		if (!req && prev &&
   24a7c:	2d00      	cmp	r5, #0
   24a7e:	d0e6      	beq.n	24a4e <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   24a80:	4638      	mov	r0, r7
   24a82:	f7ff fd4d 	bl	24520 <sys_slist_get>
	if (node) {
   24a86:	4605      	mov	r5, r0
   24a88:	b908      	cbnz	r0, 24a8e <att_req_send_process+0x5e>
   24a8a:	4623      	mov	r3, r4
   24a8c:	e7ec      	b.n	24a68 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   24a8e:	4601      	mov	r1, r0
   24a90:	4620      	mov	r0, r4
   24a92:	f7f4 f8a3 	bl	18bdc <bt_att_chan_req_send>
   24a96:	2800      	cmp	r0, #0
   24a98:	da0b      	bge.n	24ab2 <att_req_send_process+0x82>
	return list->head;
   24a9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   24a9e:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   24aa0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   24aa4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   24aa8:	2b00      	cmp	r3, #0
   24aaa:	d1ee      	bne.n	24a8a <att_req_send_process+0x5a>
	list->tail = node;
   24aac:	f8c8 5008 	str.w	r5, [r8, #8]
}
   24ab0:	e7eb      	b.n	24a8a <att_req_send_process+0x5a>
}
   24ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024ab6 <bt_att_status>:
{
   24ab6:	b538      	push	{r3, r4, r5, lr}
   24ab8:	4605      	mov	r5, r0
   24aba:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24abc:	2100      	movs	r1, #0
   24abe:	f7ff fd53 	bl	24568 <atomic_test_bit>
   24ac2:	b1b8      	cbz	r0, 24af4 <bt_att_status+0x3e>
	if (!chan->att) {
   24ac4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   24ac8:	b1a0      	cbz	r0, 24af4 <bt_att_status+0x3e>
	if (chan->req) {
   24aca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   24acc:	b993      	cbnz	r3, 24af4 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   24ace:	3004      	adds	r0, #4
   24ad0:	f7ff fd26 	bl	24520 <sys_slist_get>
	if (!node) {
   24ad4:	4604      	mov	r4, r0
   24ad6:	b168      	cbz	r0, 24af4 <bt_att_status+0x3e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24ad8:	4601      	mov	r1, r0
   24ada:	1f28      	subs	r0, r5, #4
   24adc:	f7f4 f87e 	bl	18bdc <bt_att_chan_req_send>
   24ae0:	2800      	cmp	r0, #0
   24ae2:	da07      	bge.n	24af4 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   24ae4:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   24ae8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   24aea:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   24aec:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   24aee:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   24af0:	b902      	cbnz	r2, 24af4 <bt_att_status+0x3e>
	list->tail = node;
   24af2:	609c      	str	r4, [r3, #8]
}
   24af4:	bd38      	pop	{r3, r4, r5, pc}

00024af6 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   24af6:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   24af8:	6883      	ldr	r3, [r0, #8]
   24afa:	699b      	ldr	r3, [r3, #24]
   24afc:	b10b      	cbz	r3, 24b02 <att_sent+0xc>
		chan->ops->sent(chan);
   24afe:	3004      	adds	r0, #4
   24b00:	4718      	bx	r3
}
   24b02:	4770      	bx	lr

00024b04 <att_tx_complete>:
{
   24b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24b08:	4606      	mov	r6, r0
   24b0a:	460d      	mov	r5, r1
	if (!err) {
   24b0c:	4614      	mov	r4, r2
   24b0e:	b122      	cbz	r2, 24b1a <att_tx_complete+0x16>
}
   24b10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   24b14:	4608      	mov	r0, r1
   24b16:	f7f3 bef5 	b.w	18904 <tx_meta_data_free>
		att_sent(conn, user_data);
   24b1a:	f7ff ffec 	bl	24af6 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   24b1e:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   24b20:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   24b24:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   24b28:	4628      	mov	r0, r5
   24b2a:	f7f3 feeb 	bl	18904 <tx_meta_data_free>
	if (!err && func) {
   24b2e:	b92f      	cbnz	r7, 24b3c <att_tx_complete+0x38>
}
   24b30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   24b34:	4649      	mov	r1, r9
   24b36:	4630      	mov	r0, r6
   24b38:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   24b3a:	3401      	adds	r4, #1
   24b3c:	b2a3      	uxth	r3, r4
   24b3e:	4543      	cmp	r3, r8
   24b40:	d3f8      	bcc.n	24b34 <att_tx_complete+0x30>
   24b42:	e7f5      	b.n	24b30 <att_tx_complete+0x2c>

00024b44 <att_req_sent>:
{
   24b44:	b510      	push	{r4, lr}
   24b46:	460c      	mov	r4, r1
	if (!err) {
   24b48:	b90a      	cbnz	r2, 24b4e <att_req_sent+0xa>
		att_sent(conn, user_data);
   24b4a:	f7ff ffd4 	bl	24af6 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   24b4e:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   24b50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   24b52:	b12b      	cbz	r3, 24b60 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   24b54:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   24b58:	2300      	movs	r3, #0
   24b5a:	3058      	adds	r0, #88	; 0x58
   24b5c:	f7fb fd34 	bl	205c8 <k_work_reschedule>
	tx_meta_data_free(user_data);
   24b60:	4620      	mov	r0, r4
}
   24b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   24b66:	f7f3 becd 	b.w	18904 <tx_meta_data_free>

00024b6a <att_cfm_sent>:
{
   24b6a:	b510      	push	{r4, lr}
   24b6c:	460c      	mov	r4, r1
	if (!err) {
   24b6e:	b90a      	cbnz	r2, 24b74 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   24b70:	f7ff ffc1 	bl	24af6 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   24b74:	6820      	ldr	r0, [r4, #0]
   24b76:	2101      	movs	r1, #1
   24b78:	3034      	adds	r0, #52	; 0x34
   24b7a:	f7ff feaf 	bl	248dc <atomic_clear_bit>
	tx_meta_data_free(data);
   24b7e:	4620      	mov	r0, r4
}
   24b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   24b84:	f7f3 bebe 	b.w	18904 <tx_meta_data_free>

00024b88 <att_rsp_sent>:
{
   24b88:	b510      	push	{r4, lr}
   24b8a:	460c      	mov	r4, r1
	if (!err) {
   24b8c:	b90a      	cbnz	r2, 24b92 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   24b8e:	f7ff ffb2 	bl	24af6 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   24b92:	6820      	ldr	r0, [r4, #0]
   24b94:	2100      	movs	r1, #0
   24b96:	3034      	adds	r0, #52	; 0x34
   24b98:	f7ff fea0 	bl	248dc <atomic_clear_bit>
	tx_meta_data_free(data);
   24b9c:	4620      	mov	r0, r4
}
   24b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   24ba2:	f7f3 beaf 	b.w	18904 <tx_meta_data_free>

00024ba6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   24ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24baa:	4688      	mov	r8, r1
   24bac:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   24bae:	2101      	movs	r1, #1
   24bb0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   24bb2:	4605      	mov	r5, r0
   24bb4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   24bb6:	f7f4 f9db 	bl	18f70 <bt_att_chan_create_pdu>
	if (!buf) {
   24bba:	4604      	mov	r4, r0
   24bbc:	b170      	cbz	r0, 24bdc <send_err_rsp.part.0+0x36>
   24bbe:	2104      	movs	r1, #4
   24bc0:	300c      	adds	r0, #12
   24bc2:	f7f6 fb23 	bl	1b20c <net_buf_simple_add>
	rsp->request = req;
   24bc6:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   24bca:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   24bce:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   24bd0:	4621      	mov	r1, r4
   24bd2:	4628      	mov	r0, r5
}
   24bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   24bd8:	f7ff bdce 	b.w	24778 <bt_att_chan_send_rsp>
}
   24bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024be0 <att_write_req>:
{
   24be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24be2:	460c      	mov	r4, r1
   24be4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   24be6:	f101 000c 	add.w	r0, r1, #12
   24bea:	f000 fb06 	bl	251fa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   24bee:	8a22      	ldrh	r2, [r4, #16]
   24bf0:	9201      	str	r2, [sp, #4]
   24bf2:	68e2      	ldr	r2, [r4, #12]
   24bf4:	9200      	str	r2, [sp, #0]
   24bf6:	4603      	mov	r3, r0
   24bf8:	2213      	movs	r2, #19
   24bfa:	2112      	movs	r1, #18
   24bfc:	4628      	mov	r0, r5
   24bfe:	f7f4 fadb 	bl	191b8 <att_write_rsp.constprop.0>
}
   24c02:	b003      	add	sp, #12
   24c04:	bd30      	pop	{r4, r5, pc}

00024c06 <att_write_cmd>:
{
   24c06:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24c08:	460c      	mov	r4, r1
   24c0a:	4605      	mov	r5, r0
   24c0c:	f101 000c 	add.w	r0, r1, #12
   24c10:	f000 faf3 	bl	251fa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   24c14:	8a22      	ldrh	r2, [r4, #16]
   24c16:	9201      	str	r2, [sp, #4]
   24c18:	68e2      	ldr	r2, [r4, #12]
   24c1a:	9200      	str	r2, [sp, #0]
   24c1c:	2200      	movs	r2, #0
   24c1e:	4603      	mov	r3, r0
   24c20:	4611      	mov	r1, r2
   24c22:	4628      	mov	r0, r5
   24c24:	f7f4 fac8 	bl	191b8 <att_write_rsp.constprop.0>
}
   24c28:	b003      	add	sp, #12
   24c2a:	bd30      	pop	{r4, r5, pc}

00024c2c <att_read_blob_req>:
{
   24c2c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   24c2e:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   24c30:	8813      	ldrh	r3, [r2, #0]
   24c32:	8852      	ldrh	r2, [r2, #2]
   24c34:	9200      	str	r2, [sp, #0]
   24c36:	210c      	movs	r1, #12
   24c38:	220d      	movs	r2, #13
   24c3a:	f7f4 fc83 	bl	19544 <att_read_rsp>
}
   24c3e:	b003      	add	sp, #12
   24c40:	f85d fb04 	ldr.w	pc, [sp], #4

00024c44 <att_read_req>:
{
   24c44:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   24c46:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   24c48:	2200      	movs	r2, #0
   24c4a:	881b      	ldrh	r3, [r3, #0]
   24c4c:	9200      	str	r2, [sp, #0]
   24c4e:	210a      	movs	r1, #10
   24c50:	220b      	movs	r2, #11
   24c52:	f7f4 fc77 	bl	19544 <att_read_rsp>
}
   24c56:	b003      	add	sp, #12
   24c58:	f85d fb04 	ldr.w	pc, [sp], #4

00024c5c <att_mtu_req>:
{
   24c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c5e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   24c60:	f850 2b34 	ldr.w	r2, [r0], #52
{
   24c64:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   24c66:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   24c68:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   24c6a:	f7ff fc7d 	bl	24568 <atomic_test_bit>
   24c6e:	4604      	mov	r4, r0
   24c70:	b9d8      	cbnz	r0, 24caa <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   24c72:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   24c74:	881b      	ldrh	r3, [r3, #0]
   24c76:	2b16      	cmp	r3, #22
   24c78:	d919      	bls.n	24cae <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   24c7a:	4630      	mov	r0, r6
   24c7c:	2202      	movs	r2, #2
   24c7e:	f7f4 faff 	bl	19280 <bt_att_create_pdu>
	if (!pdu) {
   24c82:	4606      	mov	r6, r0
   24c84:	b1a8      	cbz	r0, 24cb2 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   24c86:	2102      	movs	r1, #2
   24c88:	300c      	adds	r0, #12
   24c8a:	f7f6 fabf 	bl	1b20c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   24c8e:	2717      	movs	r7, #23
   24c90:	7007      	strb	r7, [r0, #0]
   24c92:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   24c94:	4631      	mov	r1, r6
   24c96:	4628      	mov	r0, r5
   24c98:	f7ff fd6e 	bl	24778 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   24c9c:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   24c9e:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   24ca0:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   24ca2:	f7ff fcf2 	bl	2468a <att_chan_mtu_updated>
	return 0;
   24ca6:	4620      	mov	r0, r4
}
   24ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   24caa:	2006      	movs	r0, #6
   24cac:	e7fc      	b.n	24ca8 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   24cae:	2004      	movs	r0, #4
   24cb0:	e7fa      	b.n	24ca8 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   24cb2:	200e      	movs	r0, #14
   24cb4:	e7f8      	b.n	24ca8 <att_mtu_req+0x4c>

00024cb6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24cb6:	8a0a      	ldrh	r2, [r1, #16]
   24cb8:	68c9      	ldr	r1, [r1, #12]
   24cba:	2300      	movs	r3, #0
   24cbc:	f7f4 bdee 	b.w	1989c <att_handle_rsp>

00024cc0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   24cc0:	2001      	movs	r0, #1
   24cc2:	4770      	bx	lr

00024cc4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   24cc4:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   24cc6:	f7f3 ffcb 	bl	18c60 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   24cca:	b150      	cbz	r0, 24ce2 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   24ccc:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   24cce:	b144      	cbz	r4, 24ce2 <bt_att_clear_out_of_sync_sent+0x1e>
   24cd0:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   24cd2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   24cd6:	2105      	movs	r1, #5
   24cd8:	f7ff fe00 	bl	248dc <atomic_clear_bit>
	return node->next;
   24cdc:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   24ce0:	e7f5      	b.n	24cce <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   24ce2:	bd10      	pop	{r4, pc}

00024ce4 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   24ce4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   24ce6:	2104      	movs	r1, #4
   24ce8:	f7ff fc0f 	bl	2450a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   24cec:	b128      	cbz	r0, 24cfa <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   24cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   24cf2:	2105      	movs	r1, #5
   24cf4:	3030      	adds	r0, #48	; 0x30
   24cf6:	f7ff bc37 	b.w	24568 <atomic_test_bit>
}
   24cfa:	bd08      	pop	{r3, pc}

00024cfc <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   24cfc:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   24cfe:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   24d02:	2201      	movs	r2, #1
   24d04:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   24d06:	7403      	strb	r3, [r0, #16]
}
   24d08:	4770      	bx	lr

00024d0a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   24d0a:	6010      	str	r0, [r2, #0]
}
   24d0c:	2000      	movs	r0, #0
   24d0e:	4770      	bx	lr

00024d10 <gatt_ccc_changed>:
{
   24d10:	460b      	mov	r3, r1
   24d12:	8909      	ldrh	r1, [r1, #8]
   24d14:	8a5a      	ldrh	r2, [r3, #18]
   24d16:	4291      	cmp	r1, r2
   24d18:	bf38      	it	cc
   24d1a:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   24d1c:	8a9a      	ldrh	r2, [r3, #20]
   24d1e:	428a      	cmp	r2, r1
   24d20:	d003      	beq.n	24d2a <gatt_ccc_changed+0x1a>
		ccc->value = value;
   24d22:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   24d24:	699b      	ldr	r3, [r3, #24]
   24d26:	b103      	cbz	r3, 24d2a <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   24d28:	4718      	bx	r3
}
   24d2a:	4770      	bx	lr

00024d2c <gatt_indicate_rsp>:
{
   24d2c:	b510      	push	{r4, lr}
   24d2e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   24d30:	68a3      	ldr	r3, [r4, #8]
{
   24d32:	460a      	mov	r2, r1
	if (params->func) {
   24d34:	b10b      	cbz	r3, 24d3a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   24d36:	4621      	mov	r1, r4
   24d38:	4798      	blx	r3
	params->_ref--;
   24d3a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24d3c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   24d3e:	3b01      	subs	r3, #1
   24d40:	b2db      	uxtb	r3, r3
   24d42:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24d44:	b122      	cbz	r2, 24d50 <gatt_indicate_rsp+0x24>
   24d46:	b91b      	cbnz	r3, 24d50 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   24d48:	4620      	mov	r0, r4
}
   24d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   24d4e:	4710      	bx	r2
}
   24d50:	bd10      	pop	{r4, pc}

00024d52 <match_uuid>:
	data->attr = attr;
   24d52:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   24d54:	8091      	strh	r1, [r2, #4]
}
   24d56:	2000      	movs	r0, #0
   24d58:	4770      	bx	lr

00024d5a <gen_hash_m>:
{
   24d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24d5c:	6807      	ldr	r7, [r0, #0]
   24d5e:	783d      	ldrb	r5, [r7, #0]
{
   24d60:	b089      	sub	sp, #36	; 0x24
   24d62:	4606      	mov	r6, r0
   24d64:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24d66:	b9dd      	cbnz	r5, 24da0 <gen_hash_m+0x46>
	switch (u16->val) {
   24d68:	887b      	ldrh	r3, [r7, #2]
   24d6a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   24d6e:	d004      	beq.n	24d7a <gen_hash_m+0x20>
   24d70:	d810      	bhi.n	24d94 <gen_hash_m+0x3a>
   24d72:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   24d76:	2b03      	cmp	r3, #3
   24d78:	d812      	bhi.n	24da0 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   24d7a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24d7e:	2202      	movs	r2, #2
   24d80:	f10d 010a 	add.w	r1, sp, #10
   24d84:	4620      	mov	r0, r4
   24d86:	f7fe ff6a 	bl	23c5e <tc_cmac_update>
   24d8a:	b968      	cbnz	r0, 24da8 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   24d8c:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   24d90:	65a2      	str	r2, [r4, #88]	; 0x58
   24d92:	e006      	b.n	24da2 <gen_hash_m+0x48>
	switch (u16->val) {
   24d94:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   24d98:	33ff      	adds	r3, #255	; 0xff
   24d9a:	b29b      	uxth	r3, r3
   24d9c:	2b04      	cmp	r3, #4
   24d9e:	d91e      	bls.n	24dde <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   24da0:	2501      	movs	r5, #1
}
   24da2:	4628      	mov	r0, r5
   24da4:	b009      	add	sp, #36	; 0x24
   24da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   24da8:	887b      	ldrh	r3, [r7, #2]
   24daa:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24dae:	2202      	movs	r2, #2
   24db0:	f10d 010a 	add.w	r1, sp, #10
   24db4:	4620      	mov	r0, r4
   24db6:	f7fe ff52 	bl	23c5e <tc_cmac_update>
   24dba:	2800      	cmp	r0, #0
   24dbc:	d0e6      	beq.n	24d8c <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   24dbe:	2000      	movs	r0, #0
   24dc0:	9000      	str	r0, [sp, #0]
   24dc2:	aa03      	add	r2, sp, #12
   24dc4:	6877      	ldr	r7, [r6, #4]
   24dc6:	2313      	movs	r3, #19
   24dc8:	4631      	mov	r1, r6
   24dca:	47b8      	blx	r7
		if (len < 0) {
   24dcc:	1e02      	subs	r2, r0, #0
   24dce:	dbdf      	blt.n	24d90 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   24dd0:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24dd2:	4620      	mov	r0, r4
   24dd4:	f7fe ff43 	bl	23c5e <tc_cmac_update>
   24dd8:	2800      	cmp	r0, #0
   24dda:	d1e1      	bne.n	24da0 <gen_hash_m+0x46>
   24ddc:	e7d6      	b.n	24d8c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   24dde:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24de2:	2202      	movs	r2, #2
   24de4:	f10d 010a 	add.w	r1, sp, #10
   24de8:	4620      	mov	r0, r4
   24dea:	f7fe ff38 	bl	23c5e <tc_cmac_update>
   24dee:	2800      	cmp	r0, #0
   24df0:	d0cc      	beq.n	24d8c <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   24df2:	887b      	ldrh	r3, [r7, #2]
   24df4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24df8:	2202      	movs	r2, #2
   24dfa:	f10d 010a 	add.w	r1, sp, #10
   24dfe:	e7e8      	b.n	24dd2 <gen_hash_m+0x78>

00024e00 <bt_addr_le_eq>:
{
   24e00:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   24e02:	2207      	movs	r2, #7
   24e04:	f7fe fff6 	bl	23df4 <memcmp>
}
   24e08:	fab0 f080 	clz	r0, r0
   24e0c:	0940      	lsrs	r0, r0, #5
   24e0e:	bd08      	pop	{r3, pc}

00024e10 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24e10:	f3bf 8f5b 	dmb	ish
   24e14:	6800      	ldr	r0, [r0, #0]
   24e16:	f3bf 8f5b 	dmb	ish
}
   24e1a:	4770      	bx	lr

00024e1c <atomic_or>:
{
   24e1c:	b510      	push	{r4, lr}
   24e1e:	4603      	mov	r3, r0
}
   24e20:	f3bf 8f5b 	dmb	ish
   24e24:	e853 0f00 	ldrex	r0, [r3]
   24e28:	ea40 0201 	orr.w	r2, r0, r1
   24e2c:	e843 2400 	strex	r4, r2, [r3]
   24e30:	2c00      	cmp	r4, #0
   24e32:	d1f7      	bne.n	24e24 <atomic_or+0x8>
   24e34:	f3bf 8f5b 	dmb	ish
   24e38:	bd10      	pop	{r4, pc}

00024e3a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24e3a:	2207      	movs	r2, #7
   24e3c:	f7fe bfea 	b.w	23e14 <memcpy>

00024e40 <z_log_msg_static_create.constprop.0>:
   24e40:	2300      	movs	r3, #0
   24e42:	f7ee ba37 	b.w	132b4 <z_impl_z_log_msg_static_create>

00024e46 <sc_clear>:
{
   24e46:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   24e48:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   24e4c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   24e4e:	4631      	mov	r1, r6
   24e50:	7a00      	ldrb	r0, [r0, #8]
   24e52:	f7ff f94e 	bl	240f2 <bt_addr_le_is_bonded>
   24e56:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   24e58:	4631      	mov	r1, r6
   24e5a:	f7f4 fea7 	bl	19bac <find_sc_cfg>
	if (!cfg) {
   24e5e:	b128      	cbz	r0, 24e6c <sc_clear+0x26>
}
   24e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   24e64:	220c      	movs	r2, #12
   24e66:	2100      	movs	r1, #0
   24e68:	f7fe bfdf 	b.w	23e2a <memset>
}
   24e6c:	bd70      	pop	{r4, r5, r6, pc}

00024e6e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   24e6e:	2a02      	cmp	r2, #2
{
   24e70:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   24e72:	d108      	bne.n	24e86 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   24e74:	2300      	movs	r3, #0
   24e76:	f100 0190 	add.w	r1, r0, #144	; 0x90
   24e7a:	461a      	mov	r2, r3
   24e7c:	7a00      	ldrb	r0, [r0, #8]
   24e7e:	f7f4 ff5b 	bl	19d38 <sc_save>
}
   24e82:	2002      	movs	r0, #2
   24e84:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   24e86:	f7ff ffde 	bl	24e46 <sc_clear>
   24e8a:	e7fa      	b.n	24e82 <sc_ccc_cfg_write+0x14>

00024e8c <read_appearance>:
{
   24e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24e8e:	4615      	mov	r5, r2
   24e90:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   24e94:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   24e96:	f7ff f929 	bl	240ec <bt_get_appearance>
	if (offset > value_len) {
   24e9a:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   24e9c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   24ea0:	d80e      	bhi.n	24ec0 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   24ea2:	f1c6 0402 	rsb	r4, r6, #2
   24ea6:	42bc      	cmp	r4, r7
   24ea8:	bfa8      	it	ge
   24eaa:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24eac:	f10d 0306 	add.w	r3, sp, #6
   24eb0:	4622      	mov	r2, r4
   24eb2:	1999      	adds	r1, r3, r6
   24eb4:	4628      	mov	r0, r5
   24eb6:	f7fe ffad 	bl	23e14 <memcpy>
}
   24eba:	4620      	mov	r0, r4
   24ebc:	b003      	add	sp, #12
   24ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24ec0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   24ec4:	e7f9      	b.n	24eba <read_appearance+0x2e>

00024ec6 <read_name>:
{
   24ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24eca:	4698      	mov	r8, r3
   24ecc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   24ed0:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   24ed2:	f7f1 fdd1 	bl	16a78 <bt_get_name>
   24ed6:	4607      	mov	r7, r0
				 strlen(name));
   24ed8:	f7fe ff7c 	bl	23dd4 <strlen>
	if (offset > value_len) {
   24edc:	b283      	uxth	r3, r0
   24ede:	42b3      	cmp	r3, r6
   24ee0:	d30c      	bcc.n	24efc <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   24ee2:	1b9c      	subs	r4, r3, r6
   24ee4:	4544      	cmp	r4, r8
   24ee6:	bfa8      	it	ge
   24ee8:	4644      	movge	r4, r8
   24eea:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   24eec:	4622      	mov	r2, r4
   24eee:	19b9      	adds	r1, r7, r6
   24ef0:	4628      	mov	r0, r5
   24ef2:	f7fe ff8f 	bl	23e14 <memcpy>
}
   24ef6:	4620      	mov	r0, r4
   24ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24efc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   24f00:	e7f9      	b.n	24ef6 <read_name+0x30>

00024f02 <cf_read>:
{
   24f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24f04:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   24f06:	2300      	movs	r3, #0
{
   24f08:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   24f0c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   24f10:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   24f12:	f7f4 fe1d 	bl	19b50 <find_cf_cfg>
	if (cfg) {
   24f16:	b128      	cbz	r0, 24f24 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   24f18:	f100 0108 	add.w	r1, r0, #8
   24f1c:	2201      	movs	r2, #1
   24f1e:	a801      	add	r0, sp, #4
   24f20:	f7fe ff78 	bl	23e14 <memcpy>
	if (offset > value_len) {
   24f24:	2e01      	cmp	r6, #1
   24f26:	d80d      	bhi.n	24f44 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   24f28:	f1c6 0401 	rsb	r4, r6, #1
   24f2c:	42bc      	cmp	r4, r7
   24f2e:	bfa8      	it	ge
   24f30:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24f32:	ab01      	add	r3, sp, #4
   24f34:	4622      	mov	r2, r4
   24f36:	1999      	adds	r1, r3, r6
   24f38:	4628      	mov	r0, r5
   24f3a:	f7fe ff6b 	bl	23e14 <memcpy>
}
   24f3e:	4620      	mov	r0, r4
   24f40:	b003      	add	sp, #12
   24f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24f44:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   24f48:	e7f9      	b.n	24f3e <cf_read+0x3c>

00024f4a <bt_gatt_attr_read_service>:
{
   24f4a:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   24f4c:	68c9      	ldr	r1, [r1, #12]
{
   24f4e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   24f50:	780a      	ldrb	r2, [r1, #0]
{
   24f52:	461c      	mov	r4, r3
   24f54:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   24f58:	b992      	cbnz	r2, 24f80 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   24f5a:	884a      	ldrh	r2, [r1, #2]
   24f5c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   24f60:	2b02      	cmp	r3, #2
   24f62:	d818      	bhi.n	24f96 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   24f64:	f1c3 0202 	rsb	r2, r3, #2
   24f68:	4294      	cmp	r4, r2
   24f6a:	bfa8      	it	ge
   24f6c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   24f6e:	4622      	mov	r2, r4
   24f70:	f10d 0106 	add.w	r1, sp, #6
   24f74:	4419      	add	r1, r3
   24f76:	f7fe ff4d 	bl	23e14 <memcpy>
}
   24f7a:	4620      	mov	r0, r4
   24f7c:	b002      	add	sp, #8
   24f7e:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   24f80:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   24f82:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   24f86:	d806      	bhi.n	24f96 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   24f88:	f1c3 0210 	rsb	r2, r3, #16
   24f8c:	4294      	cmp	r4, r2
   24f8e:	bfa8      	it	ge
   24f90:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   24f92:	4622      	mov	r2, r4
   24f94:	e7ee      	b.n	24f74 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24f96:	f06f 0406 	mvn.w	r4, #6
   24f9a:	e7ee      	b.n	24f7a <bt_gatt_attr_read_service+0x30>

00024f9c <bt_gatt_attr_read_ccc>:
{
   24f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   24f9e:	68c9      	ldr	r1, [r1, #12]
{
   24fa0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   24fa4:	4615      	mov	r5, r2
   24fa6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   24fa8:	f7f4 fe22 	bl	19bf0 <find_ccc_cfg>
	if (cfg) {
   24fac:	b100      	cbz	r0, 24fb0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   24fae:	8900      	ldrh	r0, [r0, #8]
   24fb0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   24fb4:	2e02      	cmp	r6, #2
   24fb6:	d80e      	bhi.n	24fd6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   24fb8:	f1c6 0402 	rsb	r4, r6, #2
   24fbc:	42bc      	cmp	r4, r7
   24fbe:	bfa8      	it	ge
   24fc0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24fc2:	f10d 0306 	add.w	r3, sp, #6
   24fc6:	4622      	mov	r2, r4
   24fc8:	1999      	adds	r1, r3, r6
   24fca:	4628      	mov	r0, r5
   24fcc:	f7fe ff22 	bl	23e14 <memcpy>
}
   24fd0:	4620      	mov	r0, r4
   24fd2:	b003      	add	sp, #12
   24fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24fd6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   24fda:	e7f9      	b.n	24fd0 <bt_gatt_attr_read_ccc+0x34>

00024fdc <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   24fdc:	2101      	movs	r1, #1
   24fde:	300c      	adds	r0, #12
   24fe0:	f7ff bf1c 	b.w	24e1c <atomic_or>

00024fe4 <sc_restore_rsp>:
{
   24fe4:	b538      	push	{r3, r4, r5, lr}
   24fe6:	4604      	mov	r4, r0
   24fe8:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   24fea:	f7ff fe69 	bl	24cc0 <bt_att_fixed_chan_only>
   24fee:	b140      	cbz	r0, 25002 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   24ff0:	4620      	mov	r0, r4
   24ff2:	f7f4 fdad 	bl	19b50 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   24ff6:	b120      	cbz	r0, 25002 <sc_restore_rsp+0x1e>
   24ff8:	7a03      	ldrb	r3, [r0, #8]
   24ffa:	07db      	lsls	r3, r3, #31
   24ffc:	d501      	bpl.n	25002 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   24ffe:	f7ff ffed 	bl	24fdc <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   25002:	b965      	cbnz	r5, 2501e <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25004:	7a20      	ldrb	r0, [r4, #8]
   25006:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2500a:	f7f4 fdcf 	bl	19bac <find_sc_cfg>
		if (sc_cfg) {
   2500e:	b130      	cbz	r0, 2501e <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   25010:	4629      	mov	r1, r5
   25012:	2204      	movs	r2, #4
}
   25014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   25018:	3008      	adds	r0, #8
   2501a:	f7fe bf06 	b.w	23e2a <memset>
}
   2501e:	bd38      	pop	{r3, r4, r5, pc}

00025020 <bt_gatt_attr_value_handle>:
{
   25020:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25022:	4604      	mov	r4, r0
   25024:	b910      	cbnz	r0, 2502c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25026:	2000      	movs	r0, #0
}
   25028:	b002      	add	sp, #8
   2502a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2502c:	2300      	movs	r3, #0
   2502e:	f88d 3004 	strb.w	r3, [sp, #4]
   25032:	6800      	ldr	r0, [r0, #0]
   25034:	f642 0303 	movw	r3, #10243	; 0x2803
   25038:	a901      	add	r1, sp, #4
   2503a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2503e:	f7fe ff1f 	bl	23e80 <bt_uuid_cmp>
   25042:	2800      	cmp	r0, #0
   25044:	d1ef      	bne.n	25026 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25046:	68e3      	ldr	r3, [r4, #12]
   25048:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2504a:	2800      	cmp	r0, #0
   2504c:	d1ec      	bne.n	25028 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2504e:	4620      	mov	r0, r4
   25050:	f7f4 fff8 	bl	1a044 <bt_gatt_attr_get_handle>
   25054:	3001      	adds	r0, #1
   25056:	b280      	uxth	r0, r0
	return handle;
   25058:	e7e6      	b.n	25028 <bt_gatt_attr_value_handle+0x8>

0002505a <bt_gatt_attr_read_chrc>:
{
   2505a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2505c:	68cc      	ldr	r4, [r1, #12]
{
   2505e:	b087      	sub	sp, #28
   25060:	4608      	mov	r0, r1
   25062:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   25064:	79a3      	ldrb	r3, [r4, #6]
   25066:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2506a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2506e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25070:	f7ff ffd6 	bl	25020 <bt_gatt_attr_value_handle>
   25074:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25078:	6821      	ldr	r1, [r4, #0]
   2507a:	780b      	ldrb	r3, [r1, #0]
   2507c:	b99b      	cbnz	r3, 250a6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2507e:	884b      	ldrh	r3, [r1, #2]
   25080:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25084:	2405      	movs	r4, #5
	if (offset > value_len) {
   25086:	42b4      	cmp	r4, r6
   25088:	d315      	bcc.n	250b6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2508a:	1ba4      	subs	r4, r4, r6
   2508c:	42bc      	cmp	r4, r7
   2508e:	bfa8      	it	ge
   25090:	463c      	movge	r4, r7
   25092:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25094:	ab01      	add	r3, sp, #4
   25096:	4622      	mov	r2, r4
   25098:	1999      	adds	r1, r3, r6
   2509a:	4628      	mov	r0, r5
   2509c:	f7fe feba 	bl	23e14 <memcpy>
}
   250a0:	4620      	mov	r0, r4
   250a2:	b007      	add	sp, #28
   250a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   250a6:	2210      	movs	r2, #16
   250a8:	3101      	adds	r1, #1
   250aa:	f10d 0007 	add.w	r0, sp, #7
   250ae:	f7fe feb1 	bl	23e14 <memcpy>
		value_len += 16U;
   250b2:	2413      	movs	r4, #19
   250b4:	e7e7      	b.n	25086 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   250b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   250ba:	e7f1      	b.n	250a0 <bt_gatt_attr_read_chrc+0x46>

000250bc <bt_gatt_foreach_attr>:
{
   250bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   250be:	e9cd 2301 	strd	r2, r3, [sp, #4]
   250c2:	2300      	movs	r3, #0
   250c4:	9300      	str	r3, [sp, #0]
   250c6:	461a      	mov	r2, r3
   250c8:	f7f5 f804 	bl	1a0d4 <bt_gatt_foreach_attr_type>
}
   250cc:	b005      	add	sp, #20
   250ce:	f85d fb04 	ldr.w	pc, [sp], #4

000250d2 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   250d2:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   250d6:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   250d8:	d004      	beq.n	250e4 <bt_gatt_check_perm+0x12>
   250da:	f013 0f95 	tst.w	r3, #149	; 0x95
   250de:	d010      	beq.n	25102 <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   250e0:	6848      	ldr	r0, [r1, #4]
   250e2:	b170      	cbz	r0, 25102 <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   250e4:	f012 0f02 	tst.w	r2, #2
   250e8:	d004      	beq.n	250f4 <bt_gatt_check_perm+0x22>
   250ea:	f413 7f95 	tst.w	r3, #298	; 0x12a
   250ee:	d00a      	beq.n	25106 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   250f0:	6889      	ldr	r1, [r1, #8]
   250f2:	b141      	cbz	r1, 25106 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   250f4:	401a      	ands	r2, r3
	return 0;
   250f6:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   250fa:	bf14      	ite	ne
   250fc:	2005      	movne	r0, #5
   250fe:	2000      	moveq	r0, #0
   25100:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25102:	2002      	movs	r0, #2
   25104:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25106:	2003      	movs	r0, #3
}
   25108:	4770      	bx	lr

0002510a <bt_gatt_change_aware>:
{
   2510a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2510e:	4605      	mov	r5, r0
   25110:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   25112:	f7f4 fd1d 	bl	19b50 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25116:	4604      	mov	r4, r0
   25118:	b308      	cbz	r0, 2515e <bt_gatt_change_aware+0x54>
   2511a:	7a03      	ldrb	r3, [r0, #8]
   2511c:	07da      	lsls	r2, r3, #31
   2511e:	d51e      	bpl.n	2515e <bt_gatt_change_aware+0x54>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25120:	f100 060c 	add.w	r6, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   25124:	4630      	mov	r0, r6
   25126:	f7ff fe73 	bl	24e10 <atomic_get>
   2512a:	f010 0701 	ands.w	r7, r0, #1
   2512e:	d116      	bne.n	2515e <bt_gatt_change_aware+0x54>
	if (!req) {
   25130:	f1b8 0f00 	cmp.w	r8, #0
   25134:	d014      	beq.n	25160 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25136:	f3bf 8f5b 	dmb	ish
   2513a:	e856 3f00 	ldrex	r3, [r6]
   2513e:	f023 0202 	bic.w	r2, r3, #2
   25142:	e846 2100 	strex	r1, r2, [r6]
   25146:	2900      	cmp	r1, #0
   25148:	d1f7      	bne.n	2513a <bt_gatt_change_aware+0x30>
   2514a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2514e:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   25150:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   25152:	d508      	bpl.n	25166 <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   25154:	f7ff fdb6 	bl	24cc4 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   25158:	4620      	mov	r0, r4
   2515a:	f7ff ff3f 	bl	24fdc <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   2515e:	2701      	movs	r7, #1
}
   25160:	4638      	mov	r0, r7
   25162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   25166:	f7ff fdab 	bl	24cc0 <bt_att_fixed_chan_only>
   2516a:	2800      	cmp	r0, #0
   2516c:	d0f8      	beq.n	25160 <bt_gatt_change_aware+0x56>
   2516e:	4628      	mov	r0, r5
   25170:	f7ff fdb8 	bl	24ce4 <bt_att_out_of_sync_sent_on_fixed>
   25174:	2800      	cmp	r0, #0
   25176:	d0f3      	beq.n	25160 <bt_gatt_change_aware+0x56>
   25178:	f3bf 8f5b 	dmb	ish
   2517c:	e856 3f00 	ldrex	r3, [r6]
   25180:	f023 0302 	bic.w	r3, r3, #2
   25184:	e846 3200 	strex	r2, r3, [r6]
   25188:	2a00      	cmp	r2, #0
   2518a:	d1f7      	bne.n	2517c <bt_gatt_change_aware+0x72>
   2518c:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   25190:	4628      	mov	r0, r5
   25192:	e7df      	b.n	25154 <bt_gatt_change_aware+0x4a>

00025194 <bt_smp_recv>:
{
   25194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   25196:	2100      	movs	r1, #0
   25198:	f04f 32ff 	mov.w	r2, #4294967295
   2519c:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   251a0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   251a2:	4608      	mov	r0, r1
   251a4:	f7ff f995 	bl	244d2 <bt_l2cap_create_pdu_timeout>
   251a8:	f100 060c 	add.w	r6, r0, #12
   251ac:	4604      	mov	r4, r0
   251ae:	2101      	movs	r1, #1
   251b0:	4630      	mov	r0, r6
   251b2:	f7f6 f82b 	bl	1b20c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   251b6:	2505      	movs	r5, #5
   251b8:	7005      	strb	r5, [r0, #0]
   251ba:	2101      	movs	r1, #1
   251bc:	4630      	mov	r0, r6
   251be:	f7f6 f825 	bl	1b20c <net_buf_simple_add>
   251c2:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   251c4:	7005      	strb	r5, [r0, #0]
   251c6:	4622      	mov	r2, r4
   251c8:	9300      	str	r3, [sp, #0]
   251ca:	2106      	movs	r1, #6
   251cc:	4638      	mov	r0, r7
   251ce:	f7ff f983 	bl	244d8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   251d2:	b110      	cbz	r0, 251da <bt_smp_recv+0x46>
		net_buf_unref(buf);
   251d4:	4620      	mov	r0, r4
   251d6:	f7f5 fed5 	bl	1af84 <net_buf_unref>
}
   251da:	2000      	movs	r0, #0
   251dc:	b003      	add	sp, #12
   251de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000251e0 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   251e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   251e4:	4770      	bx	lr

000251e6 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   251e6:	2000      	movs	r0, #0
   251e8:	4770      	bx	lr

000251ea <fixed_data_unref>:
}
   251ea:	4770      	bx	lr

000251ec <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   251ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   251ee:	6849      	ldr	r1, [r1, #4]
   251f0:	6809      	ldr	r1, [r1, #0]
   251f2:	f7f5 bce5 	b.w	1abc0 <net_buf_alloc_len>

000251f6 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   251f6:	f7fa bc6b 	b.w	1fad0 <z_impl_k_queue_get>

000251fa <net_buf_simple_pull_le16>:
{
   251fa:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   251fc:	6803      	ldr	r3, [r0, #0]
   251fe:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25200:	2102      	movs	r1, #2
   25202:	f7f5 ffc7 	bl	1b194 <net_buf_simple_pull>
}
   25206:	4620      	mov	r0, r4
   25208:	bd10      	pop	{r4, pc}

0002520a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2520a:	6802      	ldr	r2, [r0, #0]
   2520c:	6880      	ldr	r0, [r0, #8]
}
   2520e:	1a10      	subs	r0, r2, r0
   25210:	4770      	bx	lr

00025212 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25212:	8883      	ldrh	r3, [r0, #4]
   25214:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   25216:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25218:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2521a:	6803      	ldr	r3, [r0, #0]
   2521c:	1a5b      	subs	r3, r3, r1
}
   2521e:	1ad0      	subs	r0, r2, r3
   25220:	4770      	bx	lr

00025222 <net_buf_simple_add_mem>:
{
   25222:	b538      	push	{r3, r4, r5, lr}
   25224:	460d      	mov	r5, r1
   25226:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25228:	4611      	mov	r1, r2
   2522a:	f7f5 ffef 	bl	1b20c <net_buf_simple_add>
   2522e:	4622      	mov	r2, r4
   25230:	4629      	mov	r1, r5
}
   25232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25236:	f7fe bded 	b.w	23e14 <memcpy>

0002523a <net_buf_simple_add_u8>:
{
   2523a:	b510      	push	{r4, lr}
   2523c:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2523e:	2101      	movs	r1, #1
   25240:	f7f5 ffe4 	bl	1b20c <net_buf_simple_add>
	*u8 = val;
   25244:	7004      	strb	r4, [r0, #0]
}
   25246:	bd10      	pop	{r4, pc}

00025248 <set_on_state>:
	__asm__ volatile(
   25248:	f04f 0340 	mov.w	r3, #64	; 0x40
   2524c:	f3ef 8211 	mrs	r2, BASEPRI
   25250:	f383 8812 	msr	BASEPRI_MAX, r3
   25254:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   25258:	6803      	ldr	r3, [r0, #0]
   2525a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2525e:	f043 0302 	orr.w	r3, r3, #2
   25262:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   25264:	f382 8811 	msr	BASEPRI, r2
   25268:	f3bf 8f6f 	isb	sy
}
   2526c:	4770      	bx	lr

0002526e <async_start>:
{
   2526e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25270:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   25272:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   25274:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   25276:	f04f 0540 	mov.w	r5, #64	; 0x40
   2527a:	f3ef 8611 	mrs	r6, BASEPRI
   2527e:	f385 8812 	msr	BASEPRI_MAX, r5
   25282:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25286:	250c      	movs	r5, #12
   25288:	4369      	muls	r1, r5
   2528a:	440c      	add	r4, r1
   2528c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2528e:	f005 0c07 	and.w	ip, r5, #7
   25292:	f1bc 0f01 	cmp.w	ip, #1
   25296:	d10b      	bne.n	252b0 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   25298:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   2529a:	f386 8811 	msr	BASEPRI, r6
   2529e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   252a2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   252a6:	6843      	ldr	r3, [r0, #4]
   252a8:	585b      	ldr	r3, [r3, r1]
   252aa:	4798      	blx	r3
	return 0;
   252ac:	2000      	movs	r0, #0
}
   252ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   252b0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   252b4:	42af      	cmp	r7, r5
   252b6:	f386 8811 	msr	BASEPRI, r6
   252ba:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   252be:	bf0c      	ite	eq
   252c0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   252c4:	f04f 30ff 	movne.w	r0, #4294967295
   252c8:	e7f1      	b.n	252ae <async_start+0x40>

000252ca <api_start>:
{
   252ca:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   252cc:	2480      	movs	r4, #128	; 0x80
   252ce:	9400      	str	r4, [sp, #0]
   252d0:	f7ff ffcd 	bl	2526e <async_start>
}
   252d4:	b002      	add	sp, #8
   252d6:	bd10      	pop	{r4, pc}

000252d8 <onoff_started_callback>:
	return &data->mgr[type];
   252d8:	6900      	ldr	r0, [r0, #16]
   252da:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   252dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   252e0:	2100      	movs	r1, #0
   252e2:	4710      	bx	r2

000252e4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   252e4:	2000      	movs	r0, #0
   252e6:	f7f8 becd 	b.w	1e084 <nrfx_clock_stop>

000252ea <blocking_start_callback>:
{
   252ea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   252ec:	f7fa bc5a 	b.w	1fba4 <z_impl_k_sem_give>

000252f0 <api_stop>:
	return stop(dev, subsys, CTX_API);
   252f0:	2280      	movs	r2, #128	; 0x80
   252f2:	f7f5 bfe3 	b.w	1b2bc <stop>

000252f6 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   252f6:	2000      	movs	r0, #0
   252f8:	4770      	bx	lr

000252fa <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   252fa:	b538      	push	{r3, r4, r5, lr}
   252fc:	460c      	mov	r4, r1
   252fe:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   25300:	f7f1 fbae 	bl	16a60 <bt_is_ready>
   25304:	b128      	cbz	r0, 25312 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   25306:	4629      	mov	r1, r5
   25308:	4620      	mov	r0, r4
}
   2530a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2530e:	f7f0 bbfd 	b.w	15b0c <bt_hci_le_rand>
}
   25312:	f06f 000a 	mvn.w	r0, #10
   25316:	bd38      	pop	{r3, r4, r5, pc}

00025318 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25318:	6843      	ldr	r3, [r0, #4]
   2531a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2531c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   25320:	600b      	str	r3, [r1, #0]
}
   25322:	2000      	movs	r0, #0
   25324:	4770      	bx	lr

00025326 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25326:	6843      	ldr	r3, [r0, #4]
   25328:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2532a:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2532e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   25332:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   25336:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2533a:	2000      	movs	r0, #0
   2533c:	4770      	bx	lr

0002533e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2533e:	6843      	ldr	r3, [r0, #4]
   25340:	685b      	ldr	r3, [r3, #4]
}
   25342:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   25344:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25348:	4770      	bx	lr

0002534a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2534a:	6843      	ldr	r3, [r0, #4]
   2534c:	685b      	ldr	r3, [r3, #4]
}
   2534e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25350:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   25354:	4770      	bx	lr

00025356 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25356:	6843      	ldr	r3, [r0, #4]
   25358:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2535a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2535e:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   25362:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   25364:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   25368:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2536c:	2000      	movs	r0, #0
   2536e:	4770      	bx	lr

00025370 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   25370:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   25372:	6843      	ldr	r3, [r0, #4]
   25374:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   25376:	7a05      	ldrb	r5, [r0, #8]
   25378:	6844      	ldr	r4, [r0, #4]
   2537a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2537e:	42a3      	cmp	r3, r4
   25380:	d302      	bcc.n	25388 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   25382:	f06f 0001 	mvn.w	r0, #1
}
   25386:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   25388:	795c      	ldrb	r4, [r3, #5]
   2538a:	428c      	cmp	r4, r1
   2538c:	d001      	beq.n	25392 <pinctrl_lookup_state+0x22>
		(*state)++;
   2538e:	3308      	adds	r3, #8
   25390:	e7f0      	b.n	25374 <pinctrl_lookup_state+0x4>
			return 0;
   25392:	2000      	movs	r0, #0
   25394:	e7f7      	b.n	25386 <pinctrl_lookup_state+0x16>

00025396 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   25396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2539a:	4615      	mov	r5, r2
   2539c:	b085      	sub	sp, #20
   2539e:	4681      	mov	r9, r0
   253a0:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   253a4:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   253a8:	454f      	cmp	r7, r9
   253aa:	d103      	bne.n	253b4 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   253ac:	2000      	movs	r0, #0
}
   253ae:	b005      	add	sp, #20
   253b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   253b4:	f8d9 3000 	ldr.w	r3, [r9]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   253b8:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   253bc:	f3c3 2643 	ubfx	r6, r3, #9, #4
			pin = 0xFFFFFFFFU;
   253c0:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   253c2:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   253c6:	bf08      	it	eq
   253c8:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   253cc:	2b19      	cmp	r3, #25
   253ce:	d876      	bhi.n	254be <pinctrl_configure_pins+0x128>
   253d0:	e8df f003 	tbb	[pc, r3]
   253d4:	23201a0d 	.word	0x23201a0d
   253d8:	75233526 	.word	0x75233526
   253dc:	3a757575 	.word	0x3a757575
   253e0:	75757560 	.word	0x75757560
   253e4:	75757575 	.word	0x75757575
   253e8:	6c637575 	.word	0x6c637575
   253ec:	726f      	.short	0x726f
			NRF_PSEL_UART(reg, TXD) = pin;
   253ee:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   253f2:	a803      	add	r0, sp, #12
   253f4:	9403      	str	r4, [sp, #12]
   253f6:	f7f6 fcd5 	bl	1bda4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   253fa:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTSET = set_mask;
   253fe:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   25402:	f04f 0a01 	mov.w	sl, #1
   25406:	e003      	b.n	25410 <pinctrl_configure_pins+0x7a>
			NRF_PSEL_UART(reg, RXD) = pin;
   25408:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2540c:	f04f 0a00 	mov.w	sl, #0
   25410:	46d3      	mov	fp, sl
   25412:	e021      	b.n	25458 <pinctrl_configure_pins+0xc2>
			NRF_PSEL_UART(reg, RTS) = pin;
   25414:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   25418:	e7eb      	b.n	253f2 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_UART(reg, CTS) = pin;
   2541a:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2541e:	e7f5      	b.n	2540c <pinctrl_configure_pins+0x76>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   25420:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   25424:	f04f 0a00 	mov.w	sl, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25428:	a803      	add	r0, sp, #12
   2542a:	9403      	str	r4, [sp, #12]
   2542c:	f7f6 fcba 	bl	1bda4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   25430:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   25434:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   25438:	f04f 0b01 	mov.w	fp, #1
   2543c:	e00c      	b.n	25458 <pinctrl_configure_pins+0xc2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2543e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   25442:	f04f 0a01 	mov.w	sl, #1
   25446:	e7ef      	b.n	25428 <pinctrl_configure_pins+0x92>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   25448:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2544c:	2e00      	cmp	r6, #0
   2544e:	d1dd      	bne.n	2540c <pinctrl_configure_pins+0x76>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   25450:	f04f 0a00 	mov.w	sl, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   25454:	46d3      	mov	fp, sl
				drive = NRF_DRIVE_S0D1;
   25456:	2606      	movs	r6, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   25458:	f859 3b04 	ldr.w	r3, [r9], #4
   2545c:	9301      	str	r3, [sp, #4]
   2545e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   25462:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25464:	a803      	add	r0, sp, #12
   25466:	bf1c      	itt	ne
   25468:	f04f 0a01 	movne.w	sl, #1
   2546c:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   25470:	9403      	str	r4, [sp, #12]
   25472:	f7f6 fc97 	bl	1bda4 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25476:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   25478:	0236      	lsls	r6, r6, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2547a:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   2547e:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
   25482:	ea46 060b 	orr.w	r6, r6, fp
    reg->PIN_CNF[pin_number] = cnf;
   25486:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2548a:	ea46 064a 	orr.w	r6, r6, sl, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2548e:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   25492:	e789      	b.n	253a8 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   25494:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   25498:	e7d8      	b.n	2544c <pinctrl_configure_pins+0xb6>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2549a:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2549e:	f8d9 3000 	ldr.w	r3, [r9]
   254a2:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   254a6:	2b00      	cmp	r3, #0
   254a8:	d0cb      	beq.n	25442 <pinctrl_configure_pins+0xac>
   254aa:	e7a2      	b.n	253f2 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   254ac:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   254b0:	e7f5      	b.n	2549e <pinctrl_configure_pins+0x108>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   254b2:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   254b6:	e7f2      	b.n	2549e <pinctrl_configure_pins+0x108>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   254b8:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   254bc:	e7ef      	b.n	2549e <pinctrl_configure_pins+0x108>
		switch (NRF_GET_FUN(pins[i])) {
   254be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   254c2:	e774      	b.n	253ae <pinctrl_configure_pins+0x18>

000254c4 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   254c4:	6902      	ldr	r2, [r0, #16]
{
   254c6:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   254c8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   254cc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   254d0:	2000      	movs	r0, #0
   254d2:	4770      	bx	lr

000254d4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   254d4:	6843      	ldr	r3, [r0, #4]
   254d6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   254d8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   254dc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   254e0:	4770      	bx	lr

000254e2 <tx_start>:
{
   254e2:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   254e4:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   254e6:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   254e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   254ec:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   254f0:	2200      	movs	r2, #0
   254f2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   254f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   254fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   254fe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25502:	6862      	ldr	r2, [r4, #4]
   25504:	06d2      	lsls	r2, r2, #27
   25506:	d511      	bpl.n	2552c <tx_start+0x4a>
	if (data->async) {
   25508:	6902      	ldr	r2, [r0, #16]
   2550a:	68d2      	ldr	r2, [r2, #12]
   2550c:	b12a      	cbz	r2, 2551a <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2550e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   25512:	f041 0101 	orr.w	r1, r1, #1
   25516:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   2551a:	6842      	ldr	r2, [r0, #4]
   2551c:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2551e:	2108      	movs	r1, #8
   25520:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   25524:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   25528:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2552c:	2201      	movs	r2, #1
   2552e:	609a      	str	r2, [r3, #8]
}
   25530:	bd10      	pop	{r4, pc}

00025532 <user_callback>:
	if (data->async->user_callback) {
   25532:	6903      	ldr	r3, [r0, #16]
   25534:	68da      	ldr	r2, [r3, #12]
   25536:	6813      	ldr	r3, [r2, #0]
   25538:	b10b      	cbz	r3, 2553e <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2553a:	6852      	ldr	r2, [r2, #4]
   2553c:	4718      	bx	r3
}
   2553e:	4770      	bx	lr

00025540 <notify_uart_rx_rdy>:
{
   25540:	b570      	push	{r4, r5, r6, lr}
   25542:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   25544:	6906      	ldr	r6, [r0, #16]
{
   25546:	4604      	mov	r4, r0
   25548:	460d      	mov	r5, r1
	struct uart_event evt = {
   2554a:	2214      	movs	r2, #20
   2554c:	2100      	movs	r1, #0
   2554e:	a801      	add	r0, sp, #4
   25550:	f7fe fc6b 	bl	23e2a <memset>
   25554:	2302      	movs	r3, #2
   25556:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2555a:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2555c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   25560:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   25562:	a901      	add	r1, sp, #4
   25564:	4620      	mov	r0, r4
	struct uart_event evt = {
   25566:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2556a:	f7ff ffe2 	bl	25532 <user_callback>
}
   2556e:	b006      	add	sp, #24
   25570:	bd70      	pop	{r4, r5, r6, pc}

00025572 <rx_buf_release>:
{
   25572:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   25574:	680e      	ldr	r6, [r1, #0]
{
   25576:	b086      	sub	sp, #24
   25578:	4605      	mov	r5, r0
   2557a:	460c      	mov	r4, r1
	if (*buf) {
   2557c:	b17e      	cbz	r6, 2559e <rx_buf_release+0x2c>
		struct uart_event evt = {
   2557e:	2214      	movs	r2, #20
   25580:	2100      	movs	r1, #0
   25582:	a801      	add	r0, sp, #4
   25584:	f7fe fc51 	bl	23e2a <memset>
   25588:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2558a:	eb0d 0103 	add.w	r1, sp, r3
   2558e:	4628      	mov	r0, r5
		struct uart_event evt = {
   25590:	f88d 3004 	strb.w	r3, [sp, #4]
   25594:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   25596:	f7ff ffcc 	bl	25532 <user_callback>
		*buf = NULL;
   2559a:	2300      	movs	r3, #0
   2559c:	6023      	str	r3, [r4, #0]
}
   2559e:	b006      	add	sp, #24
   255a0:	bd70      	pop	{r4, r5, r6, pc}

000255a2 <notify_rx_disable>:
{
   255a2:	b510      	push	{r4, lr}
   255a4:	b086      	sub	sp, #24
   255a6:	4604      	mov	r4, r0
	struct uart_event evt = {
   255a8:	2214      	movs	r2, #20
   255aa:	2100      	movs	r1, #0
   255ac:	a801      	add	r0, sp, #4
   255ae:	f7fe fc3c 	bl	23e2a <memset>
   255b2:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   255b4:	a901      	add	r1, sp, #4
   255b6:	4620      	mov	r0, r4
	struct uart_event evt = {
   255b8:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   255bc:	f7ff ffb9 	bl	25532 <user_callback>
}
   255c0:	b006      	add	sp, #24
   255c2:	bd10      	pop	{r4, pc}

000255c4 <uarte_nrfx_rx_buf_rsp>:
{
   255c4:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   255c6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   255c8:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   255ca:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   255cc:	f04f 0040 	mov.w	r0, #64	; 0x40
   255d0:	f3ef 8611 	mrs	r6, BASEPRI
   255d4:	f380 8812 	msr	BASEPRI_MAX, r0
   255d8:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   255dc:	68ec      	ldr	r4, [r5, #12]
   255de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   255e0:	b198      	cbz	r0, 2560a <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   255e2:	6e60      	ldr	r0, [r4, #100]	; 0x64
   255e4:	b9a0      	cbnz	r0, 25610 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   255e6:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   255e8:	68ec      	ldr	r4, [r5, #12]
   255ea:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   255ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   255f0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   255f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   255f8:	f042 0220 	orr.w	r2, r2, #32
   255fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   25600:	f386 8811 	msr	BASEPRI, r6
   25604:	f3bf 8f6f 	isb	sy
}
   25608:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2560a:	f06f 000c 	mvn.w	r0, #12
   2560e:	e7f7      	b.n	25600 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   25610:	f06f 000f 	mvn.w	r0, #15
   25614:	e7f4      	b.n	25600 <uarte_nrfx_rx_buf_rsp+0x3c>

00025616 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   25616:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   25618:	68d8      	ldr	r0, [r3, #12]
   2561a:	b120      	cbz	r0, 25626 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2561c:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2561e:	68db      	ldr	r3, [r3, #12]
	return 0;
   25620:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   25622:	605a      	str	r2, [r3, #4]
	return 0;
   25624:	4770      	bx	lr
		return -ENOTSUP;
   25626:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2562a:	4770      	bx	lr

0002562c <uarte_nrfx_poll_in>:
{
   2562c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2562e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   25630:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   25632:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   25634:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   25636:	b960      	cbnz	r0, 25652 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25638:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2563c:	b164      	cbz	r4, 25658 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2563e:	6992      	ldr	r2, [r2, #24]
   25640:	7812      	ldrb	r2, [r2, #0]
   25642:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25644:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   25648:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2564c:	2201      	movs	r2, #1
   2564e:	601a      	str	r2, [r3, #0]
}
   25650:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   25652:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25656:	e7fb      	b.n	25650 <uarte_nrfx_poll_in+0x24>
		return -1;
   25658:	f04f 30ff 	mov.w	r0, #4294967295
   2565c:	e7f8      	b.n	25650 <uarte_nrfx_poll_in+0x24>

0002565e <uarte_nrfx_rx_disable>:
{
   2565e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   25660:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   25662:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   25664:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   25666:	68eb      	ldr	r3, [r5, #12]
   25668:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2566a:	b1d2      	cbz	r2, 256a2 <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   2566c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2566e:	b153      	cbz	r3, 25686 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   25670:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   25674:	f023 0320 	bic.w	r3, r3, #32
   25678:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2567c:	2300      	movs	r3, #0
   2567e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   25682:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   25686:	68e8      	ldr	r0, [r5, #12]
   25688:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2568a:	f000 fba2 	bl	25dd2 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2568e:	68eb      	ldr	r3, [r5, #12]
   25690:	2000      	movs	r0, #0
   25692:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   25696:	68ea      	ldr	r2, [r5, #12]
   25698:	2301      	movs	r3, #1
   2569a:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2569e:	6063      	str	r3, [r4, #4]
}
   256a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   256a2:	f06f 000d 	mvn.w	r0, #13
   256a6:	e7fb      	b.n	256a0 <uarte_nrfx_rx_disable+0x42>

000256a8 <setup_tx_cache>:
{
   256a8:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   256aa:	68c3      	ldr	r3, [r0, #12]
   256ac:	68da      	ldr	r2, [r3, #12]
   256ae:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   256b0:	1a52      	subs	r2, r2, r1
   256b2:	d00f      	beq.n	256d4 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   256b4:	2a08      	cmp	r2, #8
   256b6:	bf28      	it	cs
   256b8:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   256ba:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   256bc:	68c3      	ldr	r3, [r0, #12]
   256be:	6999      	ldr	r1, [r3, #24]
   256c0:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   256c2:	68c3      	ldr	r3, [r0, #12]
   256c4:	6898      	ldr	r0, [r3, #8]
   256c6:	69d9      	ldr	r1, [r3, #28]
   256c8:	4401      	add	r1, r0
   256ca:	6998      	ldr	r0, [r3, #24]
   256cc:	f7fe fba2 	bl	23e14 <memcpy>
	return true;
   256d0:	2001      	movs	r0, #1
}
   256d2:	bd08      	pop	{r3, pc}
		return false;
   256d4:	4610      	mov	r0, r2
   256d6:	e7fc      	b.n	256d2 <setup_tx_cache+0x2a>

000256d8 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   256d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   256da:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   256dc:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   256de:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   256e2:	460c      	mov	r4, r1
   256e4:	b1e9      	cbz	r1, 25722 <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   256e6:	2100      	movs	r1, #0
   256e8:	4620      	mov	r0, r4
   256ea:	f7fe fb9e 	bl	23e2a <memset>
		flush_len = len;
   256ee:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   256f0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   256f4:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   256f6:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   256fa:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   256fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   25700:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25704:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25706:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2570a:	2900      	cmp	r1, #0
   2570c:	d0fb      	beq.n	25706 <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2570e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   25712:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   25716:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   2571a:	b92c      	cbnz	r4, 25728 <rx_flush.isra.0+0x50>
			return rx_amount;
   2571c:	b2c0      	uxtb	r0, r0
}
   2571e:	b003      	add	sp, #12
   25720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   25722:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   25724:	466b      	mov	r3, sp
   25726:	e7e3      	b.n	256f0 <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   25728:	4286      	cmp	r6, r0
   2572a:	d1f7      	bne.n	2571c <rx_flush.isra.0+0x44>
   2572c:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   2572e:	42a2      	cmp	r2, r4
   25730:	d101      	bne.n	25736 <rx_flush.isra.0+0x5e>
	return 0;
   25732:	2000      	movs	r0, #0
   25734:	e7f3      	b.n	2571e <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   25736:	f814 3b01 	ldrb.w	r3, [r4], #1
   2573a:	2b00      	cmp	r3, #0
   2573c:	d0f7      	beq.n	2572e <rx_flush.isra.0+0x56>
   2573e:	e7ed      	b.n	2571c <rx_flush.isra.0+0x44>

00025740 <async_uart_release>:
{
   25740:	b570      	push	{r4, r5, r6, lr}
   25742:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   25744:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   25746:	f04f 0340 	mov.w	r3, #64	; 0x40
   2574a:	f3ef 8611 	mrs	r6, BASEPRI
   2574e:	f383 8812 	msr	BASEPRI_MAX, r3
   25752:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   25756:	68d0      	ldr	r0, [r2, #12]
   25758:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2575c:	ea23 0301 	bic.w	r3, r3, r1
   25760:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   25764:	68d5      	ldr	r5, [r2, #12]
   25766:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2576a:	b973      	cbnz	r3, 2578a <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2576c:	2902      	cmp	r1, #2
   2576e:	d107      	bne.n	25780 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   25770:	6860      	ldr	r0, [r4, #4]
   25772:	2205      	movs	r2, #5
   25774:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   25778:	f7ff ffae 	bl	256d8 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2577c:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   25780:	6863      	ldr	r3, [r4, #4]
   25782:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   25784:	2200      	movs	r2, #0
   25786:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2578a:	f386 8811 	msr	BASEPRI, r6
   2578e:	f3bf 8f6f 	isb	sy
}
   25792:	bd70      	pop	{r4, r5, r6, pc}

00025794 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   25794:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   25796:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25798:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2579c:	b940      	cbnz	r0, 257b0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2579e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   257a0:	079b      	lsls	r3, r3, #30
   257a2:	d406      	bmi.n	257b2 <is_tx_ready.isra.0+0x1e>
   257a4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   257a8:	3800      	subs	r0, #0
   257aa:	bf18      	it	ne
   257ac:	2001      	movne	r0, #1
   257ae:	4770      	bx	lr
   257b0:	2001      	movs	r0, #1
}
   257b2:	4770      	bx	lr

000257b4 <start_tx_locked>:
{
   257b4:	b510      	push	{r4, lr}
   257b6:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   257b8:	6840      	ldr	r0, [r0, #4]
   257ba:	f7ff ffeb 	bl	25794 <is_tx_ready.isra.0>
   257be:	68cb      	ldr	r3, [r1, #12]
   257c0:	b918      	cbnz	r0, 257ca <start_tx_locked+0x16>
		data->async->pending_tx = true;
   257c2:	2201      	movs	r2, #1
   257c4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   257c8:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   257ca:	2200      	movs	r2, #0
   257cc:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   257d0:	68cb      	ldr	r3, [r1, #12]
   257d2:	f04f 32ff 	mov.w	r2, #4294967295
   257d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   257da:	68cb      	ldr	r3, [r1, #12]
   257dc:	4620      	mov	r0, r4
   257de:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   257e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   257e6:	f7ff be7c 	b.w	254e2 <tx_start>

000257ea <rx_timeout>:
{
   257ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   257ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   257ee:	68e3      	ldr	r3, [r4, #12]
   257f0:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   257f4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   257f8:	bb13      	cbnz	r3, 25840 <rx_timeout+0x56>
	const struct device *dev = data->dev;
   257fa:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   257fc:	6873      	ldr	r3, [r6, #4]
   257fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   25800:	2210      	movs	r2, #16
   25802:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   25806:	68e3      	ldr	r3, [r4, #12]
   25808:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2580c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2580e:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   25810:	bf1f      	itttt	ne
   25812:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   25814:	68e3      	ldrne	r3, [r4, #12]
   25816:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   25818:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2581a:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2581c:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   25820:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   25822:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   25824:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   25826:	da0c      	bge.n	25842 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   25828:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2582c:	68e3      	ldr	r3, [r4, #12]
   2582e:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   25832:	4281      	cmp	r1, r0
   25834:	d80b      	bhi.n	2584e <rx_timeout+0x64>
	return config->uarte_regs;
   25836:	6873      	ldr	r3, [r6, #4]
   25838:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2583a:	2210      	movs	r2, #16
   2583c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   25840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   25842:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   25846:	eb02 0c01 	add.w	ip, r2, r1
   2584a:	4584      	cmp	ip, r0
   2584c:	d904      	bls.n	25858 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2584e:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   25850:	2d00      	cmp	r5, #0
   25852:	ddf0      	ble.n	25836 <rx_timeout+0x4c>
		clipped = true;
   25854:	2701      	movs	r7, #1
   25856:	e005      	b.n	25864 <rx_timeout+0x7a>
	if (len > 0) {
   25858:	2a00      	cmp	r2, #0
   2585a:	d0ec      	beq.n	25836 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2585c:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   25860:	428a      	cmp	r2, r1
   25862:	da12      	bge.n	2588a <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   25864:	4629      	mov	r1, r5
   25866:	4630      	mov	r0, r6
   25868:	f7ff fe6a 	bl	25540 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2586c:	68e2      	ldr	r2, [r4, #12]
   2586e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   25870:	442b      	add	r3, r5
   25872:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   25874:	68e2      	ldr	r2, [r4, #12]
   25876:	6f13      	ldr	r3, [r2, #112]	; 0x70
   25878:	442b      	add	r3, r5
   2587a:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2587c:	2f00      	cmp	r7, #0
   2587e:	d0da      	beq.n	25836 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   25880:	68e0      	ldr	r0, [r4, #12]
   25882:	3080      	adds	r0, #128	; 0x80
   25884:	f000 faa5 	bl	25dd2 <z_impl_k_timer_stop>
}
   25888:	e7d5      	b.n	25836 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2588a:	1a52      	subs	r2, r2, r1
   2588c:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2588e:	e7d2      	b.n	25836 <rx_timeout+0x4c>

00025890 <uarte_nrfx_tx_abort>:
{
   25890:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   25892:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   25894:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   25896:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   25898:	68da      	ldr	r2, [r3, #12]
   2589a:	6891      	ldr	r1, [r2, #8]
   2589c:	b151      	cbz	r1, 258b4 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2589e:	2400      	movs	r4, #0
   258a0:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   258a4:	68d8      	ldr	r0, [r3, #12]
   258a6:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   258a8:	f000 fa93 	bl	25dd2 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   258ac:	2301      	movs	r3, #1
   258ae:	60eb      	str	r3, [r5, #12]
	return 0;
   258b0:	4620      	mov	r0, r4
}
   258b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   258b4:	f06f 000d 	mvn.w	r0, #13
   258b8:	e7fb      	b.n	258b2 <uarte_nrfx_tx_abort+0x22>

000258ba <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   258ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   258bc:	6818      	ldr	r0, [r3, #0]
   258be:	f7ff bfe7 	b.w	25890 <uarte_nrfx_tx_abort>

000258c2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   258c2:	4770      	bx	lr

000258c4 <sys_clock_cycle_get_32>:
{
   258c4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   258c6:	f7f6 ff4b 	bl	1c760 <z_nrf_rtc_timer_read>
}
   258ca:	bd08      	pop	{r3, pc}

000258cc <z_log_msg_static_create.constprop.0>:
   258cc:	2300      	movs	r3, #0
   258ce:	f7ed bcf1 	b.w	132b4 <z_impl_z_log_msg_static_create>

000258d2 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   258d2:	ea40 0301 	orr.w	r3, r0, r1
   258d6:	2b0f      	cmp	r3, #15
   258d8:	d801      	bhi.n	258de <dk_set_leds_state+0xc>
   258da:	f7f7 b9c5 	b.w	1cc68 <dk_set_leds_state.part.0>
}
   258de:	f06f 0015 	mvn.w	r0, #21
   258e2:	4770      	bx	lr

000258e4 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   258e4:	2101      	movs	r1, #1
   258e6:	f7f7 ba1f 	b.w	1cd28 <dk_set_led>

000258ea <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   258ea:	2100      	movs	r1, #0
   258ec:	f7f7 ba1c 	b.w	1cd28 <dk_set_led>

000258f0 <hci_driver_close>:
{
   258f0:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   258f2:	f7f8 fab1 	bl	1de58 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   258f6:	f04f 30ff 	mov.w	r0, #4294967295
   258fa:	f04f 31ff 	mov.w	r1, #4294967295
   258fe:	f7f7 fa45 	bl	1cd8c <multithreading_lock_acquire>
	if (err) {
   25902:	4604      	mov	r4, r0
   25904:	b920      	cbnz	r0, 25910 <hci_driver_close+0x20>
	err = sdc_disable();
   25906:	f7da ffbf 	bl	888 <sdc_disable>
	if (err) {
   2590a:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2590c:	f7f7 fa46 	bl	1cd9c <multithreading_lock_release>
}
   25910:	4620      	mov	r0, r4
   25912:	bd10      	pop	{r4, pc}

00025914 <hci_driver_send>:
{
   25914:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   25916:	8a03      	ldrh	r3, [r0, #16]
{
   25918:	4605      	mov	r5, r0
	if (!buf->len) {
   2591a:	b373      	cbz	r3, 2597a <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2591c:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2591e:	b1a3      	cbz	r3, 2594a <hci_driver_send+0x36>
   25920:	2b02      	cmp	r3, #2
   25922:	d12a      	bne.n	2597a <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   25924:	f04f 30ff 	mov.w	r0, #4294967295
   25928:	f04f 31ff 	mov.w	r1, #4294967295
   2592c:	f7f7 fa2e 	bl	1cd8c <multithreading_lock_acquire>
	if (!errcode) {
   25930:	4604      	mov	r4, r0
   25932:	b940      	cbnz	r0, 25946 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   25934:	68e8      	ldr	r0, [r5, #12]
   25936:	f7e7 f900 	bl	cb3a <sdc_hci_data_put>
   2593a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2593c:	f7f7 fa2e 	bl	1cd9c <multithreading_lock_release>
		if (errcode) {
   25940:	b1b4      	cbz	r4, 25970 <hci_driver_send+0x5c>
			receive_signal_raise();
   25942:	f7f7 fac9 	bl	1ced8 <receive_signal_raise>
}
   25946:	4620      	mov	r0, r4
   25948:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2594a:	f04f 30ff 	mov.w	r0, #4294967295
   2594e:	f04f 31ff 	mov.w	r1, #4294967295
   25952:	f7f7 fa1b 	bl	1cd8c <multithreading_lock_acquire>
	if (!errcode) {
   25956:	4604      	mov	r4, r0
   25958:	2800      	cmp	r0, #0
   2595a:	d1f4      	bne.n	25946 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2595c:	68e8      	ldr	r0, [r5, #12]
   2595e:	f7f7 fc63 	bl	1d228 <hci_internal_cmd_put>
   25962:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   25964:	f7f7 fa1a 	bl	1cd9c <multithreading_lock_release>
	if (errcode) {
   25968:	2c00      	cmp	r4, #0
   2596a:	d1ec      	bne.n	25946 <hci_driver_send+0x32>
	receive_signal_raise();
   2596c:	f7f7 fab4 	bl	1ced8 <receive_signal_raise>
		net_buf_unref(buf);
   25970:	4628      	mov	r0, r5
   25972:	f7f5 fb07 	bl	1af84 <net_buf_unref>
   25976:	2400      	movs	r4, #0
   25978:	e7e5      	b.n	25946 <hci_driver_send+0x32>
	switch (type) {
   2597a:	f06f 0415 	mvn.w	r4, #21
   2597e:	e7e2      	b.n	25946 <hci_driver_send+0x32>

00025980 <receive_work_handler>:
	hci_driver_receive_process();
   25980:	f7f7 bbd6 	b.w	1d130 <hci_driver_receive_process>

00025984 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   25984:	2100      	movs	r1, #0
   25986:	f7f8 ba89 	b.w	1de9c <cmd_le_generate_dhkey>

0002598a <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2598a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2598e:	2901      	cmp	r1, #1
   25990:	d801      	bhi.n	25996 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   25992:	f7f8 ba83 	b.w	1de9c <cmd_le_generate_dhkey>
}
   25996:	2012      	movs	r0, #18
   25998:	4770      	bx	lr

0002599a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2599a:	4668      	mov	r0, sp
   2599c:	f020 0107 	bic.w	r1, r0, #7
   259a0:	468d      	mov	sp, r1
   259a2:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   259a4:	f7e5 fa7a 	bl	ae9c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   259a8:	f7ee fb86 	bl	140b8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   259ac:	f7ee fc6e 	bl	1428c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   259b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   259b4:	4685      	mov	sp, r0
   259b6:	4770      	bx	lr

000259b8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   259b8:	4668      	mov	r0, sp
   259ba:	f020 0107 	bic.w	r1, r0, #7
   259be:	468d      	mov	sp, r1
   259c0:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   259c2:	f7e5 fa21 	bl	ae08 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   259c6:	f7ee fb77 	bl	140b8 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   259ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   259ce:	4685      	mov	sp, r0
   259d0:	4770      	bx	lr

000259d2 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   259d2:	4668      	mov	r0, sp
   259d4:	f020 0107 	bic.w	r1, r0, #7
   259d8:	468d      	mov	sp, r1
   259da:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   259dc:	f7e2 feb4 	bl	8748 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   259e0:	f7ee fb6a 	bl	140b8 <_arch_isr_direct_pm>
   259e4:	f7ee fc52 	bl	1428c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   259e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   259ec:	4685      	mov	sp, r0
   259ee:	4770      	bx	lr

000259f0 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   259f0:	b508      	push	{r3, lr}

	mpsl_fem_init();
   259f2:	f7ea fe87 	bl	10704 <mpsl_fem_init>

	return 0;
}
   259f6:	2000      	movs	r0, #0
   259f8:	bd08      	pop	{r3, pc}

000259fa <nrfx_clock_enable>:
}
   259fa:	4770      	bx	lr

000259fc <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   259fc:	f7e5 beec 	b.w	b7d8 <MPSL_IRQ_CLOCK_Handler>

00025a00 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   25a00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25a04:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   25a08:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   25a0a:	bf04      	itt	eq
   25a0c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   25a10:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   25a14:	1f83      	subs	r3, r0, #6
   25a16:	4258      	negs	r0, r3
   25a18:	4158      	adcs	r0, r3
   25a1a:	4770      	bx	lr

00025a1c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   25a1c:	4700      	bx	r0

00025a1e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   25a1e:	f000 b9a6 	b.w	25d6e <z_impl_k_busy_wait>

00025a22 <nrf_gpio_pin_present_check>:
    switch (port)
   25a22:	0943      	lsrs	r3, r0, #5
   25a24:	bf0c      	ite	eq
   25a26:	f04f 33ff 	moveq.w	r3, #4294967295
   25a2a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   25a2c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25a30:	fa23 f000 	lsr.w	r0, r3, r0
}
   25a34:	f000 0001 	and.w	r0, r0, #1
   25a38:	4770      	bx	lr

00025a3a <pin_is_task_output>:
{
   25a3a:	b508      	push	{r3, lr}
   25a3c:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   25a3e:	f7f8 fcf5 	bl	1e42c <pin_is_output>
   25a42:	b110      	cbz	r0, 25a4a <pin_is_task_output+0x10>
   25a44:	4610      	mov	r0, r2
   25a46:	f7f8 fcdb 	bl	1e400 <pin_in_use_by_te>
}
   25a4a:	f000 0001 	and.w	r0, r0, #1
   25a4e:	bd08      	pop	{r3, pc}

00025a50 <nrf_gpio_reconfigure>:
{
   25a50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25a54:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25a56:	a801      	add	r0, sp, #4
{
   25a58:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   25a5c:	460c      	mov	r4, r1
   25a5e:	4617      	mov	r7, r2
   25a60:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25a62:	f7f8 fd65 	bl	1e530 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   25a66:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   25a68:	1e39      	subs	r1, r7, #0
   25a6a:	bf18      	it	ne
   25a6c:	2101      	movne	r1, #1
   25a6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   25a72:	1e23      	subs	r3, r4, #0
   25a74:	bf18      	it	ne
   25a76:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   25a78:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   25a7a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   25a7e:	bf14      	ite	ne
   25a80:	210c      	movne	r1, #12
   25a82:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   25a84:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   25a86:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   25a8a:	bf14      	ite	ne
   25a8c:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   25a90:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25a92:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   25a96:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   25a9a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   25a9e:	bf14      	ite	ne
   25aa0:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   25aa4:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   25aa6:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   25aa8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   25aac:	b104      	cbz	r4, 25ab0 <nrf_gpio_reconfigure+0x60>
   25aae:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   25ab0:	b10f      	cbz	r7, 25ab6 <nrf_gpio_reconfigure+0x66>
   25ab2:	783f      	ldrb	r7, [r7, #0]
   25ab4:	007f      	lsls	r7, r7, #1
   25ab6:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   25ab8:	b10e      	cbz	r6, 25abe <nrf_gpio_reconfigure+0x6e>
   25aba:	7836      	ldrb	r6, [r6, #0]
   25abc:	00b6      	lsls	r6, r6, #2
   25abe:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   25ac0:	b18d      	cbz	r5, 25ae6 <nrf_gpio_reconfigure+0x96>
   25ac2:	7829      	ldrb	r1, [r5, #0]
   25ac4:	0209      	lsls	r1, r1, #8
   25ac6:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   25ac8:	f1b8 0f00 	cmp.w	r8, #0
   25acc:	d003      	beq.n	25ad6 <nrf_gpio_reconfigure+0x86>
   25ace:	f898 8000 	ldrb.w	r8, [r8]
   25ad2:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   25ad6:	4321      	orrs	r1, r4
   25ad8:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   25adc:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   25ae0:	b002      	add	sp, #8
   25ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   25ae6:	4629      	mov	r1, r5
   25ae8:	e7ed      	b.n	25ac6 <nrf_gpio_reconfigure+0x76>

00025aea <nrf_gpio_cfg_sense_set>:
{
   25aea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   25aec:	f10d 030f 	add.w	r3, sp, #15
   25af0:	9301      	str	r3, [sp, #4]
   25af2:	2300      	movs	r3, #0
{
   25af4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   25af8:	9300      	str	r3, [sp, #0]
   25afa:	461a      	mov	r2, r3
   25afc:	4619      	mov	r1, r3
   25afe:	f7ff ffa7 	bl	25a50 <nrf_gpio_reconfigure>
}
   25b02:	b005      	add	sp, #20
   25b04:	f85d fb04 	ldr.w	pc, [sp], #4

00025b08 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   25b08:	f7f9 b848 	b.w	1eb9c <_DoInit>

00025b0c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   25b0c:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   25b0e:	f7ff fffb 	bl	25b08 <SEGGER_RTT_Init>

	return 0;
}
   25b12:	2000      	movs	r0, #0
   25b14:	bd08      	pop	{r3, pc}

00025b16 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   25b16:	4770      	bx	lr

00025b18 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   25b18:	b140      	cbz	r0, 25b2c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   25b1a:	68c3      	ldr	r3, [r0, #12]
   25b1c:	7858      	ldrb	r0, [r3, #1]
   25b1e:	f010 0001 	ands.w	r0, r0, #1
   25b22:	bf1e      	ittt	ne
   25b24:	7818      	ldrbne	r0, [r3, #0]
   25b26:	fab0 f080 	clzne	r0, r0
   25b2a:	0940      	lsrne	r0, r0, #5
}
   25b2c:	4770      	bx	lr

00025b2e <z_early_memset>:
	(void) memset(dst, c, n);
   25b2e:	f7fe b97c 	b.w	23e2a <memset>

00025b32 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   25b32:	f7fe b96f 	b.w	23e14 <memcpy>

00025b36 <k_heap_init>:
{
   25b36:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   25b38:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   25b3c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   25b40:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   25b42:	f7eb bef9 	b.w	11938 <sys_heap_init>

00025b46 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   25b46:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   25b4a:	4313      	orrs	r3, r2
   25b4c:	f013 0303 	ands.w	r3, r3, #3
   25b50:	d10c      	bne.n	25b6c <create_free_list+0x26>
	slab->free_list = NULL;
   25b52:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   25b54:	68c1      	ldr	r1, [r0, #12]
   25b56:	4299      	cmp	r1, r3
   25b58:	d801      	bhi.n	25b5e <create_free_list+0x18>
	return 0;
   25b5a:	2000      	movs	r0, #0
   25b5c:	4770      	bx	lr
		*(char **)p = slab->free_list;
   25b5e:	6981      	ldr	r1, [r0, #24]
   25b60:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   25b62:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   25b64:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   25b66:	3301      	adds	r3, #1
		p += slab->block_size;
   25b68:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   25b6a:	e7f3      	b.n	25b54 <create_free_list+0xe>
		return -EINVAL;
   25b6c:	f06f 0015 	mvn.w	r0, #21
}
   25b70:	4770      	bx	lr

00025b72 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   25b72:	f3ef 8005 	mrs	r0, IPSR
}
   25b76:	3800      	subs	r0, #0
   25b78:	bf18      	it	ne
   25b7a:	2001      	movne	r0, #1
   25b7c:	4770      	bx	lr

00025b7e <z_impl_k_thread_name_set>:
}
   25b7e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   25b82:	4770      	bx	lr

00025b84 <k_thread_name_get>:
}
   25b84:	2000      	movs	r0, #0
   25b86:	4770      	bx	lr

00025b88 <z_impl_k_thread_start>:
	z_sched_start(thread);
   25b88:	f7fa bfd2 	b.w	20b30 <z_sched_start>

00025b8c <z_pm_save_idle_exit>:
{
   25b8c:	b508      	push	{r3, lr}
	pm_system_resume();
   25b8e:	f7ed ffeb 	bl	13b68 <pm_system_resume>
}
   25b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   25b96:	f7ff be94 	b.w	258c2 <sys_clock_idle_exit>

00025b9a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   25b9a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25b9e:	428b      	cmp	r3, r1
   25ba0:	d001      	beq.n	25ba6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   25ba2:	f7fb bab5 	b.w	21110 <z_set_prio>
}
   25ba6:	2000      	movs	r0, #0
   25ba8:	4770      	bx	lr

00025baa <z_queue_node_peek>:
{
   25baa:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   25bac:	4604      	mov	r4, r0
   25bae:	b130      	cbz	r0, 25bbe <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25bb0:	6802      	ldr	r2, [r0, #0]
   25bb2:	0793      	lsls	r3, r2, #30
   25bb4:	d003      	beq.n	25bbe <z_queue_node_peek+0x14>
		ret = anode->data;
   25bb6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   25bb8:	b109      	cbz	r1, 25bbe <z_queue_node_peek+0x14>
			k_free(anode);
   25bba:	f000 f9c8 	bl	25f4e <k_free>
}
   25bbe:	4620      	mov	r0, r4
   25bc0:	bd10      	pop	{r4, pc}

00025bc2 <z_impl_k_queue_init>:
	list->head = NULL;
   25bc2:	2300      	movs	r3, #0
	list->tail = NULL;
   25bc4:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   25bc8:	6083      	str	r3, [r0, #8]
   25bca:	f100 030c 	add.w	r3, r0, #12
   25bce:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   25bd2:	f100 0314 	add.w	r3, r0, #20
   25bd6:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   25bda:	4770      	bx	lr

00025bdc <k_queue_append>:
{
   25bdc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   25bde:	2301      	movs	r3, #1
   25be0:	9300      	str	r3, [sp, #0]
   25be2:	2300      	movs	r3, #0
{
   25be4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   25be6:	4619      	mov	r1, r3
   25be8:	f7f9 fed8 	bl	1f99c <queue_insert>
}
   25bec:	b003      	add	sp, #12
   25bee:	f85d fb04 	ldr.w	pc, [sp], #4

00025bf2 <k_queue_prepend>:
{
   25bf2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   25bf4:	2300      	movs	r3, #0
{
   25bf6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   25bf8:	9300      	str	r3, [sp, #0]
   25bfa:	4619      	mov	r1, r3
   25bfc:	f7f9 fece 	bl	1f99c <queue_insert>
}
   25c00:	b003      	add	sp, #12
   25c02:	f85d fb04 	ldr.w	pc, [sp], #4

00025c06 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   25c06:	6800      	ldr	r0, [r0, #0]
   25c08:	2100      	movs	r1, #0
   25c0a:	f7ff bfce 	b.w	25baa <z_queue_node_peek>

00025c0e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   25c0e:	b15a      	cbz	r2, 25c28 <z_impl_k_sem_init+0x1a>
   25c10:	428a      	cmp	r2, r1
   25c12:	d309      	bcc.n	25c28 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   25c14:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   25c18:	e9c0 1202 	strd	r1, r2, [r0, #8]
   25c1c:	e9c0 0000 	strd	r0, r0, [r0]
   25c20:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   25c24:	2000      	movs	r0, #0
   25c26:	4770      	bx	lr
		return -EINVAL;
   25c28:	f06f 0015 	mvn.w	r0, #21
}
   25c2c:	4770      	bx	lr

00025c2e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   25c2e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   25c30:	2301      	movs	r3, #1
   25c32:	408b      	lsls	r3, r1
   25c34:	ea22 0303 	bic.w	r3, r2, r3
   25c38:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   25c3a:	fa22 f001 	lsr.w	r0, r2, r1
}
   25c3e:	f000 0001 	and.w	r0, r0, #1
   25c42:	4770      	bx	lr

00025c44 <unschedule_locked>:
{
   25c44:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25c46:	2103      	movs	r1, #3
{
   25c48:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25c4a:	300c      	adds	r0, #12
   25c4c:	f7ff ffef 	bl	25c2e <flag_test_and_clear>
   25c50:	b130      	cbz	r0, 25c60 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   25c52:	f104 0010 	add.w	r0, r4, #16
   25c56:	f7fc f889 	bl	21d6c <z_abort_timeout>
   25c5a:	fab0 f080 	clz	r0, r0
   25c5e:	0940      	lsrs	r0, r0, #5
}
   25c60:	bd10      	pop	{r4, pc}

00025c62 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   25c62:	b120      	cbz	r0, 25c6e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   25c64:	2200      	movs	r2, #0
   25c66:	4611      	mov	r1, r2
   25c68:	3088      	adds	r0, #136	; 0x88
   25c6a:	f7fb beef 	b.w	21a4c <z_sched_wake>
}
   25c6e:	4770      	bx	lr

00025c70 <cancel_async_locked>:
{
   25c70:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25c72:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25c74:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25c78:	079b      	lsls	r3, r3, #30
{
   25c7a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25c7c:	d416      	bmi.n	25cac <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   25c7e:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25c80:	2102      	movs	r1, #2
   25c82:	300c      	adds	r0, #12
   25c84:	f7ff ffd3 	bl	25c2e <flag_test_and_clear>
   25c88:	b180      	cbz	r0, 25cac <cancel_async_locked+0x3c>
	return list->head;
   25c8a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25c8e:	b16a      	cbz	r2, 25cac <cancel_async_locked+0x3c>
   25c90:	4294      	cmp	r4, r2
   25c92:	d11d      	bne.n	25cd0 <cancel_async_locked+0x60>
	return node->next;
   25c94:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   25c96:	b99e      	cbnz	r6, 25cc0 <cancel_async_locked+0x50>
   25c98:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   25c9c:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   25ca0:	429c      	cmp	r4, r3
   25ca2:	d101      	bne.n	25ca8 <cancel_async_locked+0x38>
	list->tail = node;
   25ca4:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   25ca8:	2300      	movs	r3, #0
   25caa:	6023      	str	r3, [r4, #0]
	return *flagp;
   25cac:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   25cae:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   25cb2:	bf1e      	ittt	ne
   25cb4:	f043 0302 	orrne.w	r3, r3, #2
   25cb8:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   25cba:	f040 0002 	orrne.w	r0, r0, #2
}
   25cbe:	bd70      	pop	{r4, r5, r6, pc}
   25cc0:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   25cc2:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   25cc6:	4294      	cmp	r4, r2
	list->tail = node;
   25cc8:	bf08      	it	eq
   25cca:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   25cce:	e7eb      	b.n	25ca8 <cancel_async_locked+0x38>
	return node->next;
   25cd0:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cd2:	6812      	ldr	r2, [r2, #0]
   25cd4:	e7db      	b.n	25c8e <cancel_async_locked+0x1e>

00025cd6 <k_work_submit_to_queue>:
{
   25cd6:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   25cd8:	f7fa fa78 	bl	201cc <z_work_submit_to_queue>
	if (ret > 0) {
   25cdc:	1e04      	subs	r4, r0, #0
   25cde:	dd09      	ble.n	25cf4 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   25ce0:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ce4:	f3ef 8011 	mrs	r0, BASEPRI
   25ce8:	f383 8812 	msr	BASEPRI_MAX, r3
   25cec:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25cf0:	f000 f80d 	bl	25d0e <z_reschedule_irqlock>
}
   25cf4:	4620      	mov	r0, r4
   25cf6:	bd10      	pop	{r4, pc}

00025cf8 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   25cf8:	f7fa ba22 	b.w	20140 <k_work_busy_get>

00025cfc <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   25cfc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25d00:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   25d04:	4283      	cmp	r3, r0
		return b2 - b1;
   25d06:	bf14      	ite	ne
   25d08:	1ac0      	subne	r0, r0, r3
	return 0;
   25d0a:	2000      	moveq	r0, #0
}
   25d0c:	4770      	bx	lr

00025d0e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25d0e:	4603      	mov	r3, r0
   25d10:	b920      	cbnz	r0, 25d1c <z_reschedule_irqlock+0xe>
   25d12:	f3ef 8205 	mrs	r2, IPSR
   25d16:	b90a      	cbnz	r2, 25d1c <z_reschedule_irqlock+0xe>
   25d18:	f7ee b9fc 	b.w	14114 <arch_swap>
	__asm__ volatile(
   25d1c:	f383 8811 	msr	BASEPRI, r3
   25d20:	f3bf 8f6f 	isb	sy
}
   25d24:	4770      	bx	lr

00025d26 <z_reschedule_unlocked>:
	__asm__ volatile(
   25d26:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d2a:	f3ef 8011 	mrs	r0, BASEPRI
   25d2e:	f383 8812 	msr	BASEPRI_MAX, r3
   25d32:	f3bf 8f6f 	isb	sy
   25d36:	f7ff bfea 	b.w	25d0e <z_reschedule_irqlock>

00025d3a <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   25d3a:	2101      	movs	r1, #1
   25d3c:	3818      	subs	r0, #24
   25d3e:	f7fb bb4d 	b.w	213dc <z_sched_wake_thread>

00025d42 <z_unpend_all>:
{
   25d42:	b538      	push	{r3, r4, r5, lr}
   25d44:	4605      	mov	r5, r0
	int need_sched = 0;
   25d46:	2000      	movs	r0, #0
	return list->head == list;
   25d48:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d4a:	42a5      	cmp	r5, r4
   25d4c:	d000      	beq.n	25d50 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25d4e:	b904      	cbnz	r4, 25d52 <z_unpend_all+0x10>
}
   25d50:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   25d52:	4620      	mov	r0, r4
   25d54:	f7fb faf6 	bl	21344 <z_unpend_thread>
		z_ready_thread(thread);
   25d58:	4620      	mov	r0, r4
   25d5a:	f7fa fe19 	bl	20990 <z_ready_thread>
		need_sched = 1;
   25d5e:	2001      	movs	r0, #1
   25d60:	e7f2      	b.n	25d48 <z_unpend_all+0x6>

00025d62 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   25d62:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   25d64:	f7fc f942 	bl	21fec <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25d68:	bd08      	pop	{r3, pc}

00025d6a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   25d6a:	f7fc b93f 	b.w	21fec <sys_clock_tick_get>

00025d6e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   25d6e:	b108      	cbz	r0, 25d74 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   25d70:	f7ef b81a 	b.w	14da8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   25d74:	4770      	bx	lr

00025d76 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25d76:	f1b1 3fff 	cmp.w	r1, #4294967295
   25d7a:	bf08      	it	eq
   25d7c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   25d80:	b538      	push	{r3, r4, r5, lr}
   25d82:	460c      	mov	r4, r1
   25d84:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25d86:	d014      	beq.n	25db2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25d88:	4308      	orrs	r0, r1
   25d8a:	d103      	bne.n	25d94 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   25d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   25d90:	f7fc b92c 	b.w	21fec <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25d94:	f06f 0001 	mvn.w	r0, #1
   25d98:	1b40      	subs	r0, r0, r5
   25d9a:	f04f 33ff 	mov.w	r3, #4294967295
   25d9e:	eb63 0101 	sbc.w	r1, r3, r1
   25da2:	2900      	cmp	r1, #0
   25da4:	da04      	bge.n	25db0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   25da6:	f7fc f921 	bl	21fec <sys_clock_tick_get>
   25daa:	1940      	adds	r0, r0, r5
   25dac:	eb41 0104 	adc.w	r1, r1, r4
}
   25db0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   25db2:	f04f 30ff 	mov.w	r0, #4294967295
   25db6:	4601      	mov	r1, r0
   25db8:	e7fa      	b.n	25db0 <sys_clock_timeout_end_calc+0x3a>

00025dba <k_timer_init>:
	timer->status = 0U;
   25dba:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   25dbc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   25dc0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   25dc4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   25dc8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   25dcc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   25dce:	6343      	str	r3, [r0, #52]	; 0x34
}
   25dd0:	4770      	bx	lr

00025dd2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25dd2:	b510      	push	{r4, lr}
   25dd4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   25dd6:	f7fb ffc9 	bl	21d6c <z_abort_timeout>

	if (inactive) {
   25dda:	b9b0      	cbnz	r0, 25e0a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   25ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25dde:	b10b      	cbz	r3, 25de4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25de0:	4620      	mov	r0, r4
   25de2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   25de4:	f104 0018 	add.w	r0, r4, #24
   25de8:	f7fb fb50 	bl	2148c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   25dec:	b168      	cbz	r0, 25e0a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   25dee:	f7fa fdcf 	bl	20990 <z_ready_thread>
   25df2:	f04f 0340 	mov.w	r3, #64	; 0x40
   25df6:	f3ef 8011 	mrs	r0, BASEPRI
   25dfa:	f383 8812 	msr	BASEPRI_MAX, r3
   25dfe:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   25e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25e06:	f7ff bf82 	b.w	25d0e <z_reschedule_irqlock>
   25e0a:	bd10      	pop	{r4, pc}

00025e0c <add_event>:
{
   25e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e0e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   25e10:	e9d0 1300 	ldrd	r1, r3, [r0]
   25e14:	4288      	cmp	r0, r1
   25e16:	4604      	mov	r4, r0
   25e18:	d105      	bne.n	25e26 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   25e1a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   25e1c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   25e20:	601d      	str	r5, [r3, #0]
	list->tail = node;
   25e22:	6065      	str	r5, [r4, #4]
   25e24:	e01d      	b.n	25e62 <add_event+0x56>
	if ((pending == NULL) ||
   25e26:	2b00      	cmp	r3, #0
   25e28:	d0f7      	beq.n	25e1a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   25e2a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25e2c:	b100      	cbz	r0, 25e30 <add_event+0x24>
   25e2e:	3860      	subs	r0, #96	; 0x60
   25e30:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   25e34:	4639      	mov	r1, r7
   25e36:	f7ff ff61 	bl	25cfc <z_sched_prio_cmp>
	if ((pending == NULL) ||
   25e3a:	2800      	cmp	r0, #0
   25e3c:	dced      	bgt.n	25e1a <add_event+0xe>
	return list->head == list;
   25e3e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e40:	42b4      	cmp	r4, r6
   25e42:	d0ea      	beq.n	25e1a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   25e44:	2e00      	cmp	r6, #0
   25e46:	d0e8      	beq.n	25e1a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   25e48:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25e4a:	b101      	cbz	r1, 25e4e <add_event+0x42>
   25e4c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   25e4e:	4638      	mov	r0, r7
   25e50:	f7ff ff54 	bl	25cfc <z_sched_prio_cmp>
   25e54:	2800      	cmp	r0, #0
   25e56:	dd05      	ble.n	25e64 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   25e58:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   25e5a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   25e5e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25e60:	6075      	str	r5, [r6, #4]
}
   25e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   25e64:	6863      	ldr	r3, [r4, #4]
   25e66:	429e      	cmp	r6, r3
   25e68:	d0d7      	beq.n	25e1a <add_event+0xe>
   25e6a:	6836      	ldr	r6, [r6, #0]
   25e6c:	e7ea      	b.n	25e44 <add_event+0x38>

00025e6e <signal_poll_event>:
{
   25e6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   25e72:	6884      	ldr	r4, [r0, #8]
{
   25e74:	4605      	mov	r5, r0
   25e76:	460e      	mov	r6, r1
	if (poller != NULL) {
   25e78:	b144      	cbz	r4, 25e8c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   25e7a:	7863      	ldrb	r3, [r4, #1]
   25e7c:	2b01      	cmp	r3, #1
   25e7e:	d12e      	bne.n	25ede <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   25e80:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25e84:	f013 0302 	ands.w	r3, r3, #2
   25e88:	d10a      	bne.n	25ea0 <signal_poll_event+0x32>
		poller->is_polling = false;
   25e8a:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   25e8c:	68eb      	ldr	r3, [r5, #12]
   25e8e:	f3c3 3286 	ubfx	r2, r3, #14, #7
   25e92:	4316      	orrs	r6, r2
	event->poller = NULL;
   25e94:	2000      	movs	r0, #0
	event->state |= state;
   25e96:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   25e9a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   25e9c:	60eb      	str	r3, [r5, #12]
	return retcode;
   25e9e:	e03e      	b.n	25f1e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   25ea0:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   25ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
   25ea8:	bf08      	it	eq
   25eaa:	f112 0f02 	cmneq.w	r2, #2
   25eae:	d032      	beq.n	25f16 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25eb0:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   25eb4:	4640      	mov	r0, r8
   25eb6:	f7fb fa45 	bl	21344 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25eba:	2e08      	cmp	r6, #8
   25ebc:	bf0c      	ite	eq
   25ebe:	f06f 0303 	mvneq.w	r3, #3
   25ec2:	2300      	movne	r3, #0
   25ec4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25ec6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25eca:	06db      	lsls	r3, r3, #27
   25ecc:	d109      	bne.n	25ee2 <signal_poll_event+0x74>
   25ece:	f854 7c48 	ldr.w	r7, [r4, #-72]
   25ed2:	b937      	cbnz	r7, 25ee2 <signal_poll_event+0x74>
	z_ready_thread(thread);
   25ed4:	4640      	mov	r0, r8
   25ed6:	f7fa fd5b 	bl	20990 <z_ready_thread>
		poller->is_polling = false;
   25eda:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   25edc:	e7d6      	b.n	25e8c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   25ede:	2b02      	cmp	r3, #2
   25ee0:	d001      	beq.n	25ee6 <signal_poll_event+0x78>
		poller->is_polling = false;
   25ee2:	2300      	movs	r3, #0
   25ee4:	e7d1      	b.n	25e8a <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25ee6:	7823      	ldrb	r3, [r4, #0]
   25ee8:	2b00      	cmp	r3, #0
   25eea:	d0cf      	beq.n	25e8c <signal_poll_event+0x1e>
   25eec:	f854 7c04 	ldr.w	r7, [r4, #-4]
   25ef0:	2f00      	cmp	r7, #0
   25ef2:	d0f2      	beq.n	25eda <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   25ef4:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   25ef8:	f1a4 0914 	sub.w	r9, r4, #20
   25efc:	f104 0014 	add.w	r0, r4, #20
   25f00:	f7fb ff34 	bl	21d6c <z_abort_timeout>
		twork->poll_result = 0;
   25f04:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   25f08:	4649      	mov	r1, r9
   25f0a:	4638      	mov	r0, r7
   25f0c:	f7fa f95e 	bl	201cc <z_work_submit_to_queue>
		poller->is_polling = false;
   25f10:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   25f14:	e7ba      	b.n	25e8c <signal_poll_event+0x1e>
		poller->is_polling = false;
   25f16:	2300      	movs	r3, #0
   25f18:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   25f1a:	f06f 000a 	mvn.w	r0, #10
}
   25f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025f22 <z_handle_obj_poll_events>:
{
   25f22:	4603      	mov	r3, r0
	return list->head == list;
   25f24:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25f26:	4283      	cmp	r3, r0
   25f28:	d008      	beq.n	25f3c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   25f2a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25f2e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25f30:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25f32:	2300      	movs	r3, #0
	node->prev = NULL;
   25f34:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   25f38:	f7ff bf99 	b.w	25e6e <signal_poll_event>
}
   25f3c:	4770      	bx	lr

00025f3e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   25f3e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   25f40:	e9c0 0000 	strd	r0, r0, [r0]
   25f44:	6083      	str	r3, [r0, #8]
}
   25f46:	4770      	bx	lr

00025f48 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   25f48:	2300      	movs	r3, #0
   25f4a:	6083      	str	r3, [r0, #8]
}
   25f4c:	4770      	bx	lr

00025f4e <k_free>:
	if (ptr != NULL) {
   25f4e:	b120      	cbz	r0, 25f5a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   25f50:	1f01      	subs	r1, r0, #4
   25f52:	f850 0c04 	ldr.w	r0, [r0, #-4]
   25f56:	f7f9 b903 	b.w	1f160 <k_heap_free>
}
   25f5a:	4770      	bx	lr

00025f5c <k_malloc>:
{
   25f5c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   25f5e:	2004      	movs	r0, #4
   25f60:	f7fc bcf8 	b.w	22954 <k_aligned_alloc>

00025f64 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   25f64:	4770      	bx	lr
	...
